{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MjQwNjY4", "number": 722, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMjoxMzoxOFrODmF1wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxMjozMTo1NlrODsT-Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjY4MTYwOnYy", "diffSide": "RIGHT", "path": "docker/server.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMjoxMzoxOFrOFzU2xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMjoxMzoxOFrOFzU2xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM2MzM5OA==", "bodyText": "because for FINERACT-796 we (you) are correctly and as expected replacing the <jee:jndi-lookup ...> by a simple regular local Spring <bean>, this entire JNDI Resource in Tomcat's server.xml should not be required anymore - please remove this, it should still work.", "url": "https://github.com/apache/fineract/pull/722#discussion_r389363398", "createdAt": "2020-03-08T12:13:18Z", "author": {"login": "vorburger"}, "path": "docker/server.xml", "diffHunk": "@@ -40,23 +40,14 @@\n     -->\n      <Resource type=\"javax.sql.DataSource\"\n         name=\"jdbc/mifosplatform-tenants\"\n-        factory=\"org.apache.tomcat.jdbc.pool.DataSourceFactory\"\n+        factory=\"com.zaxxer.hikari.HikariJNDIFactory\"\n         driverClassName=\"${fineract_tenants_driver}\"\n-        url=\"${fineract_tenants_url}\"\n+        jdbcUrl=\"${fineract_tenants_url}\"\n         username=\"${fineract_tenants_uid}\"\n         password=\"${fineract_tenants_pwd}\"\n-        initialSize=\"3\"\n-        maxActive=\"10\"\n-        maxIdle=\"6\"\n-        minIdle=\"3\"\n-        validationQuery=\"SELECT 1\"\n-        testOnBorrow=\"true\"\n-        testOnReturn=\"true\"\n-        testWhileIdle=\"true\"\n-        timeBetweenEvictionRunsMillis=\"30000\"\n-        minEvictableIdleTimeMillis=\"60000\"\n-        logAbandoned=\"true\"\n-        suspectTimeout=\"60\"\n+        minimumIdle=\"3\"\n+        maximumPoolSize=\"10\"\n+        idleTimeout=\"60000\"\n       />", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjY4MjA4OnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/test/resources/META-INF/context.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMjoxMzo0NlrOFzU2-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxODo0ODowNVrOFzWyZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM2MzQ0OQ==", "bodyText": "as above, it should be possible to remove this entirely", "url": "https://github.com/apache/fineract/pull/722#discussion_r389363449", "createdAt": "2020-03-08T12:13:46Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/test/resources/META-INF/context.xml", "diffHunk": "@@ -23,7 +23,6 @@\n \n <Context>\n \t<Resource type=\"javax.sql.DataSource\" name=\"jdbc/mifosplatform-tenants\"\n-\t\tdriverClassName=\"org.drizzle.jdbc.DrizzleDriver\" url=\"jdbc:mysql:thin://localhost:3306/mifosplatform-tenants\"\n-\t\tusername=\"root\" password=\"mysql\" validationQuery=\"select 1\" maxActive=\"10\"\n-\t\tmaxIdle=\"4\" />\n+\t\tdriverClassName=\"org.drizzle.jdbc.DrizzleDriver\" jdbcUrl=\"jdbc:mysql:thin://localhost:3306/mifosplatform-tenants\"\n+\t\tusername=\"root\" password=\"mysql\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM4MTU1OA==", "bodyText": "Seems to me that this resource file is used in build.gradle in operations such as \"tomcatrunwar\" etc..., if you see what I mean.", "url": "https://github.com/apache/fineract/pull/722#discussion_r389381558", "createdAt": "2020-03-08T15:51:17Z", "author": {"login": "xurror"}, "path": "fineract-provider/src/test/resources/META-INF/context.xml", "diffHunk": "@@ -23,7 +23,6 @@\n \n <Context>\n \t<Resource type=\"javax.sql.DataSource\" name=\"jdbc/mifosplatform-tenants\"\n-\t\tdriverClassName=\"org.drizzle.jdbc.DrizzleDriver\" url=\"jdbc:mysql:thin://localhost:3306/mifosplatform-tenants\"\n-\t\tusername=\"root\" password=\"mysql\" validationQuery=\"select 1\" maxActive=\"10\"\n-\t\tmaxIdle=\"4\" />\n+\t\tdriverClassName=\"org.drizzle.jdbc.DrizzleDriver\" jdbcUrl=\"jdbc:mysql:thin://localhost:3306/mifosplatform-tenants\"\n+\t\tusername=\"root\" password=\"mysql\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM2MzQ0OQ=="}, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM5NTA0Ng==", "bodyText": "well spotted.. but you should be able to either just remove that configFile = file('src/test/resources/META-INF/context.xml') in build.gradle, because according to https://github.com/bmuschko/gradle-tomcat-plugin it should not be required; or if it's giving you trouble, you could just keep an empty context.xml (but I don't think you need to; I expect you'll find that you can simply entirely remove that file, and any references to it that you'll find, as part of your work on this PR)", "url": "https://github.com/apache/fineract/pull/722#discussion_r389395046", "createdAt": "2020-03-08T18:48:05Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/test/resources/META-INF/context.xml", "diffHunk": "@@ -23,7 +23,6 @@\n \n <Context>\n \t<Resource type=\"javax.sql.DataSource\" name=\"jdbc/mifosplatform-tenants\"\n-\t\tdriverClassName=\"org.drizzle.jdbc.DrizzleDriver\" url=\"jdbc:mysql:thin://localhost:3306/mifosplatform-tenants\"\n-\t\tusername=\"root\" password=\"mysql\" validationQuery=\"select 1\" maxActive=\"10\"\n-\t\tmaxIdle=\"4\" />\n+\t\tdriverClassName=\"org.drizzle.jdbc.DrizzleDriver\" jdbcUrl=\"jdbc:mysql:thin://localhost:3306/mifosplatform-tenants\"\n+\t\tusername=\"root\" password=\"mysql\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM2MzQ0OQ=="}, "originalCommit": null, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjY4Mjc0OnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/main/resources/META-INF/spring/jndi.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMjoxNTowOFrOFzU3Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMjoxNTowOFrOFzU3Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM2MzUzMA==", "bodyText": "we cannot hard-code these parameters here, you must use the same placeholders as in the original docker/server.xml - makes sense? (This is also why the docker-compose test fails on Travis; the environment from docker-compose.yml is no longer effective.)", "url": "https://github.com/apache/fineract/pull/722#discussion_r389363530", "createdAt": "2020-03-08T12:15:08Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/main/resources/META-INF/spring/jndi.xml", "diffHunk": "@@ -29,6 +29,12 @@\n     \thttp://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd\">\n \n \t<!-- name here must match TestDataSourceConfiguration -->\n-\t<jee:jndi-lookup jndi-name=\"java:comp/env/jdbc/mifosplatform-tenants\"\n-\t\tid=\"tenantDataSourceJndi\" />\n+\n+    <bean id=\"tenantDataSourceJndi\" \n+        class=\"com.zaxxer.hikari.HikariDataSource\">\n+        <property name=\"driverClassName\" value=\"org.drizzle.jdbc.DrizzleDriver\" />\n+        <property name=\"jdbcUrl\" value=\"jdbc:mysql:thin://localhost:3306/mifosplatform-tenants\" />\n+        <property name=\"username\" value=\"root\" />\n+        <property name=\"password\" value=\"mysql\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjY4NDMxOnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/main/resources/META-INF/spring/jndi.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMjoxNzozNlrOFzU4Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMjoxNzozNlrOFzU4Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM2MzcyMw==", "bodyText": "It would be clearer to rename this bean name and drop the *Jndi suffix (because not it's not using JNDI anymore...), and according change the use of this bean in the code (search for it...).  Also, it then probably should not be in jndi.xml anymore now.", "url": "https://github.com/apache/fineract/pull/722#discussion_r389363723", "createdAt": "2020-03-08T12:17:36Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/main/resources/META-INF/spring/jndi.xml", "diffHunk": "@@ -29,6 +29,12 @@\n     \thttp://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd\">\n \n \t<!-- name here must match TestDataSourceConfiguration -->\n-\t<jee:jndi-lookup jndi-name=\"java:comp/env/jdbc/mifosplatform-tenants\"\n-\t\tid=\"tenantDataSourceJndi\" />\n+\n+    <bean id=\"tenantDataSourceJndi\" ", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODI4NTU2OnYy", "diffSide": "RIGHT", "path": "fineract-provider/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMDozOTowMFrOF0JecQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMDozOTowMFrOF0JecQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIyNTUyMQ==", "bodyText": "Would it be possible to get the HikariCP version from the Spring BOM, like others? May be just using '+' as the version is enough, or perhaps you need to list it elsewhere, like other dependencies?", "url": "https://github.com/apache/fineract/pull/722#discussion_r390225521", "createdAt": "2020-03-10T10:39:00Z", "author": {"login": "vorburger"}, "path": "fineract-provider/build.gradle", "diffHunk": "@@ -82,6 +82,7 @@ dependencyManagement {\n      dependency 'joda-time:joda-time:+'\n      dependency 'org.apache.commons:commons-email:1.3.3'\n      dependency 'org.apache.commons:commons-lang3:+'\n+     dependency 'com.zaxxer:HikariCP:3.4.2'", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODI5NzE1OnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/boot/db/DataSourceConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMDo0MjoyN1rOF0JljQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQwODozNjoyNVrOF2doCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIyNzM0MQ==", "bodyText": "why make this method name upper case? It works, by convention, class names are upper case, and method names are lower case, and it's is a little bit confusing to readers especially when there's an identically named class and method.", "url": "https://github.com/apache/fineract/pull/722#discussion_r390227341", "createdAt": "2020-03-10T10:42:27Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/boot/db/DataSourceConfiguration.java", "diffHunk": "@@ -38,19 +39,19 @@\n     @Autowired JDBCDriverConfig config ;\n \n     @Bean\n-    public DataSourceProperties dataSourceProperties() {\n-    return new DataSourceProperties(config.getDriverClassName(), config.getProtocol(), config.getSubProtocol(), config.getPort());\n+    public DataSourceProperties DataSourceProperties() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY1MjgxMQ==", "bodyText": "Oh, little mistake on my behalf. It escaped my attention. Will patch that.\nThanks", "url": "https://github.com/apache/fineract/pull/722#discussion_r392652811", "createdAt": "2020-03-15T08:36:25Z", "author": {"login": "xurror"}, "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/boot/db/DataSourceConfiguration.java", "diffHunk": "@@ -38,19 +39,19 @@\n     @Autowired JDBCDriverConfig config ;\n \n     @Bean\n-    public DataSourceProperties dataSourceProperties() {\n-    return new DataSourceProperties(config.getDriverClassName(), config.getProtocol(), config.getSubProtocol(), config.getPort());\n+    public DataSourceProperties DataSourceProperties() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIyNzM0MQ=="}, "originalCommit": null, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODMyNzcyOnYy", "diffSide": "LEFT", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/boot/db/DataSourceProperties.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMDo1MTo0OFrOF0J45w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxMDoyMDoyM1rOF2eC-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzMjI5NQ==", "bodyText": "I hope nobody is going to miss this... \ud83d\ude08", "url": "https://github.com/apache/fineract/pull/722#discussion_r390232295", "createdAt": "2020-03-10T10:51:48Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/boot/db/DataSourceProperties.java", "diffHunk": "@@ -78,31 +77,23 @@ public DataSourceProperties(String driverClassName, String protocol, String subP\n      * .createNewDataSourceFor(FineractPlatformTenant)\n      */\n     protected void setDefaults() {\n-        setInitialSize(3);\n+        setMinimumIdle(3);\n         // setMaxIdle(6); -- strange, why?\n         // setMinIdle(3); -- JavaDoc says default is initialSize.. so shouldn't\n         // be needed\n-        if (getValidationQuery() == null) setValidationQuery(\"SELECT 1\");\n-        setTestOnBorrow(true);\n-        setTestOnReturn(true);\n-        setTestWhileIdle(true);\n-        setTimeBetweenEvictionRunsMillis(30000);\n-        setTimeBetweenEvictionRunsMillis(60000);\n-        setLogAbandoned(true);\n-        setSuspectTimeout(60);\n-\n-        setJdbcInterceptors(\"org.apache.tomcat.jdbc.pool.interceptor.ConnectionState;\"\n-                + \"org.apache.tomcat.jdbc.pool.interceptor.StatementFinalizer;org.apache.tomcat.jdbc.pool.interceptor.SlowQueryReport\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY1Mjg2OQ==", "bodyText": "Is it better I just comment it out?", "url": "https://github.com/apache/fineract/pull/722#discussion_r392652869", "createdAt": "2020-03-15T08:37:04Z", "author": {"login": "xurror"}, "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/boot/db/DataSourceProperties.java", "diffHunk": "@@ -78,31 +77,23 @@ public DataSourceProperties(String driverClassName, String protocol, String subP\n      * .createNewDataSourceFor(FineractPlatformTenant)\n      */\n     protected void setDefaults() {\n-        setInitialSize(3);\n+        setMinimumIdle(3);\n         // setMaxIdle(6); -- strange, why?\n         // setMinIdle(3); -- JavaDoc says default is initialSize.. so shouldn't\n         // be needed\n-        if (getValidationQuery() == null) setValidationQuery(\"SELECT 1\");\n-        setTestOnBorrow(true);\n-        setTestOnReturn(true);\n-        setTestWhileIdle(true);\n-        setTimeBetweenEvictionRunsMillis(30000);\n-        setTimeBetweenEvictionRunsMillis(60000);\n-        setLogAbandoned(true);\n-        setSuspectTimeout(60);\n-\n-        setJdbcInterceptors(\"org.apache.tomcat.jdbc.pool.interceptor.ConnectionState;\"\n-                + \"org.apache.tomcat.jdbc.pool.interceptor.StatementFinalizer;org.apache.tomcat.jdbc.pool.interceptor.SlowQueryReport\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzMjI5NQ=="}, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY1OTcwNA==", "bodyText": "No, just delete it, it's fine.", "url": "https://github.com/apache/fineract/pull/722#discussion_r392659704", "createdAt": "2020-03-15T10:20:23Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/boot/db/DataSourceProperties.java", "diffHunk": "@@ -78,31 +77,23 @@ public DataSourceProperties(String driverClassName, String protocol, String subP\n      * .createNewDataSourceFor(FineractPlatformTenant)\n      */\n     protected void setDefaults() {\n-        setInitialSize(3);\n+        setMinimumIdle(3);\n         // setMaxIdle(6); -- strange, why?\n         // setMinIdle(3); -- JavaDoc says default is initialSize.. so shouldn't\n         // be needed\n-        if (getValidationQuery() == null) setValidationQuery(\"SELECT 1\");\n-        setTestOnBorrow(true);\n-        setTestOnReturn(true);\n-        setTestWhileIdle(true);\n-        setTimeBetweenEvictionRunsMillis(30000);\n-        setTimeBetweenEvictionRunsMillis(60000);\n-        setLogAbandoned(true);\n-        setSuspectTimeout(60);\n-\n-        setJdbcInterceptors(\"org.apache.tomcat.jdbc.pool.interceptor.ConnectionState;\"\n-                + \"org.apache.tomcat.jdbc.pool.interceptor.StatementFinalizer;org.apache.tomcat.jdbc.pool.interceptor.SlowQueryReport\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzMjI5NQ=="}, "originalCommit": null, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODMzNDczOnYy", "diffSide": "LEFT", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/service/TomcatJdbcDataSourcePerTenantService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMDo1Mzo1NVrOF0J9Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQwODozODozMFrOF2dorA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzMzQwMg==", "bodyText": "Noteworthy: We're loosing the initial size; according to https://www.javadoc.io/doc/com.zaxxer/HikariCP/latest/com/zaxxer/hikari/HikariDataSource.html apparently Hikari doesn't have such a property. Oh well.", "url": "https://github.com/apache/fineract/pull/722#discussion_r390233402", "createdAt": "2020-03-10T10:53:55Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/service/TomcatJdbcDataSourcePerTenantService.java", "diffHunk": "@@ -85,26 +85,30 @@ private DataSource createNewDataSourceFor(final FineractPlatformTenantConnection\n         // http://www.tomcatexpert.com/blog/2010/04/01/configuring-jdbc-pool-high-concurrency\n \n         // see also org.apache.fineract.DataSourceProperties.setDefaults()\n-         String jdbcUrl = this.driverConfig.constructProtocol(tenantConnectionObj.getSchemaServer(), tenantConnectionObj.getSchemaServerPort(), tenantConnectionObj.getSchemaName()) ;\n-        //final String jdbcUrl = tenantConnectionObj.databaseURL();\n-        final PoolConfiguration poolConfiguration = new PoolProperties();\n-        poolConfiguration.setDriverClassName(this.driverConfig.getDriverClassName());\n-        poolConfiguration.setName(tenantConnectionObj.getSchemaName() + \"_pool\");\n-        poolConfiguration.setUrl(jdbcUrl);\n-        poolConfiguration.setUsername(tenantConnectionObj.getSchemaUsername());\n-        poolConfiguration.setPassword(tenantConnectionObj.getSchemaPassword());\n-\n-        poolConfiguration.setInitialSize(tenantConnectionObj.getInitialSize());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY1Mjk3Mg==", "bodyText": "Yeah, I tried as much as possible to replicate the properties that are common to the 2 connection pools", "url": "https://github.com/apache/fineract/pull/722#discussion_r392652972", "createdAt": "2020-03-15T08:38:30Z", "author": {"login": "xurror"}, "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/service/TomcatJdbcDataSourcePerTenantService.java", "diffHunk": "@@ -85,26 +85,30 @@ private DataSource createNewDataSourceFor(final FineractPlatformTenantConnection\n         // http://www.tomcatexpert.com/blog/2010/04/01/configuring-jdbc-pool-high-concurrency\n \n         // see also org.apache.fineract.DataSourceProperties.setDefaults()\n-         String jdbcUrl = this.driverConfig.constructProtocol(tenantConnectionObj.getSchemaServer(), tenantConnectionObj.getSchemaServerPort(), tenantConnectionObj.getSchemaName()) ;\n-        //final String jdbcUrl = tenantConnectionObj.databaseURL();\n-        final PoolConfiguration poolConfiguration = new PoolProperties();\n-        poolConfiguration.setDriverClassName(this.driverConfig.getDriverClassName());\n-        poolConfiguration.setName(tenantConnectionObj.getSchemaName() + \"_pool\");\n-        poolConfiguration.setUrl(jdbcUrl);\n-        poolConfiguration.setUsername(tenantConnectionObj.getSchemaUsername());\n-        poolConfiguration.setPassword(tenantConnectionObj.getSchemaPassword());\n-\n-        poolConfiguration.setInitialSize(tenantConnectionObj.getInitialSize());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzMzQwMg=="}, "originalCommit": null, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODM0MjQ2OnYy", "diffSide": "LEFT", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/service/TomcatJdbcDataSourcePerTenantService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMDo1NjoxNFrOF0KCIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMDo1NjoxNFrOF0KCIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzNDY1Ng==", "bodyText": "shouldn't we keep this setValidationQuery ? Especially because above in DataSourceProperties.java you did keep it..", "url": "https://github.com/apache/fineract/pull/722#discussion_r390234656", "createdAt": "2020-03-10T10:56:14Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/service/TomcatJdbcDataSourcePerTenantService.java", "diffHunk": "@@ -85,26 +85,30 @@ private DataSource createNewDataSourceFor(final FineractPlatformTenantConnection\n         // http://www.tomcatexpert.com/blog/2010/04/01/configuring-jdbc-pool-high-concurrency\n \n         // see also org.apache.fineract.DataSourceProperties.setDefaults()\n-         String jdbcUrl = this.driverConfig.constructProtocol(tenantConnectionObj.getSchemaServer(), tenantConnectionObj.getSchemaServerPort(), tenantConnectionObj.getSchemaName()) ;\n-        //final String jdbcUrl = tenantConnectionObj.databaseURL();\n-        final PoolConfiguration poolConfiguration = new PoolProperties();\n-        poolConfiguration.setDriverClassName(this.driverConfig.getDriverClassName());\n-        poolConfiguration.setName(tenantConnectionObj.getSchemaName() + \"_pool\");\n-        poolConfiguration.setUrl(jdbcUrl);\n-        poolConfiguration.setUsername(tenantConnectionObj.getSchemaUsername());\n-        poolConfiguration.setPassword(tenantConnectionObj.getSchemaPassword());\n-\n-        poolConfiguration.setInitialSize(tenantConnectionObj.getInitialSize());\n-\n-        poolConfiguration.setTestOnBorrow(tenantConnectionObj.isTestOnBorrow());\n-        poolConfiguration.setValidationQuery(\"SELECT 1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODM2MzI4OnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/service/TomcatJdbcDataSourcePerTenantService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMTowMjoyM1rOF0KPAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxMzozOTo0OFrOF9Jibg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzNzk1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            // https://github.com/brettwooldridge/HikariCP/wiki/MySQL-Configuration\n          \n      \n    \n    \n  \n\nreading https://github.com/brettwooldridge/HikariCP#statement-cache I at first wasn't sure what the following properties do, but then found https://github.com/brettwooldridge/HikariCP/wiki/MySQL-Configuration ... if these are inspired by that, I suggest putting that link inline into the code here, for future readers.", "url": "https://github.com/apache/fineract/pull/722#discussion_r390237955", "createdAt": "2020-03-10T11:02:23Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/service/TomcatJdbcDataSourcePerTenantService.java", "diffHunk": "@@ -85,26 +85,30 @@ private DataSource createNewDataSourceFor(final FineractPlatformTenantConnection\n         // http://www.tomcatexpert.com/blog/2010/04/01/configuring-jdbc-pool-high-concurrency\n \n         // see also org.apache.fineract.DataSourceProperties.setDefaults()\n-         String jdbcUrl = this.driverConfig.constructProtocol(tenantConnectionObj.getSchemaServer(), tenantConnectionObj.getSchemaServerPort(), tenantConnectionObj.getSchemaName()) ;\n-        //final String jdbcUrl = tenantConnectionObj.databaseURL();\n-        final PoolConfiguration poolConfiguration = new PoolProperties();\n-        poolConfiguration.setDriverClassName(this.driverConfig.getDriverClassName());\n-        poolConfiguration.setName(tenantConnectionObj.getSchemaName() + \"_pool\");\n-        poolConfiguration.setUrl(jdbcUrl);\n-        poolConfiguration.setUsername(tenantConnectionObj.getSchemaUsername());\n-        poolConfiguration.setPassword(tenantConnectionObj.getSchemaPassword());\n-\n-        poolConfiguration.setInitialSize(tenantConnectionObj.getInitialSize());\n-\n-        poolConfiguration.setTestOnBorrow(tenantConnectionObj.isTestOnBorrow());\n-        poolConfiguration.setValidationQuery(\"SELECT 1\");\n-        poolConfiguration.setValidationInterval(tenantConnectionObj.getValidationInterval());\n-\n-        poolConfiguration.setRemoveAbandoned(tenantConnectionObj.isRemoveAbandoned());\n-        poolConfiguration.setRemoveAbandonedTimeout(tenantConnectionObj.getRemoveAbandonedTimeout());\n-        poolConfiguration.setLogAbandoned(tenantConnectionObj.isLogAbandoned());\n-        poolConfiguration.setAbandonWhenPercentageFull(tenantConnectionObj.getAbandonWhenPercentageFull());\n-        poolConfiguration.setDefaultAutoCommit(true);\n+         String jdbcUrl = this.driverConfig.constructProtocol(tenantConnectionObj.getSchemaServer(), tenantConnectionObj.getSchemaServerPort(), tenantConnectionObj.getSchemaName());\n+\n+        HikariConfig config = new HikariConfig();\n+        config.setDriverClassName(this.driverConfig.getDriverClassName());\n+        config.setPoolName(tenantConnectionObj.getSchemaName() + \"_pool\");\n+        config.setJdbcUrl(jdbcUrl);\n+        config.setUsername(tenantConnectionObj.getSchemaUsername());\n+        config.setPassword(tenantConnectionObj.getSchemaPassword());\n+\n+        config.setValidationTimeout(tenantConnectionObj.getValidationInterval());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY2MzcyNg==", "bodyText": "@xurror it looks like we lost this again? I'll merge this, and then raise a follow-up PR for you to review where I'll propose to add something like this back again...", "url": "https://github.com/apache/fineract/pull/722#discussion_r399663726", "createdAt": "2020-03-28T13:39:48Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/service/TomcatJdbcDataSourcePerTenantService.java", "diffHunk": "@@ -85,26 +85,30 @@ private DataSource createNewDataSourceFor(final FineractPlatformTenantConnection\n         // http://www.tomcatexpert.com/blog/2010/04/01/configuring-jdbc-pool-high-concurrency\n \n         // see also org.apache.fineract.DataSourceProperties.setDefaults()\n-         String jdbcUrl = this.driverConfig.constructProtocol(tenantConnectionObj.getSchemaServer(), tenantConnectionObj.getSchemaServerPort(), tenantConnectionObj.getSchemaName()) ;\n-        //final String jdbcUrl = tenantConnectionObj.databaseURL();\n-        final PoolConfiguration poolConfiguration = new PoolProperties();\n-        poolConfiguration.setDriverClassName(this.driverConfig.getDriverClassName());\n-        poolConfiguration.setName(tenantConnectionObj.getSchemaName() + \"_pool\");\n-        poolConfiguration.setUrl(jdbcUrl);\n-        poolConfiguration.setUsername(tenantConnectionObj.getSchemaUsername());\n-        poolConfiguration.setPassword(tenantConnectionObj.getSchemaPassword());\n-\n-        poolConfiguration.setInitialSize(tenantConnectionObj.getInitialSize());\n-\n-        poolConfiguration.setTestOnBorrow(tenantConnectionObj.isTestOnBorrow());\n-        poolConfiguration.setValidationQuery(\"SELECT 1\");\n-        poolConfiguration.setValidationInterval(tenantConnectionObj.getValidationInterval());\n-\n-        poolConfiguration.setRemoveAbandoned(tenantConnectionObj.isRemoveAbandoned());\n-        poolConfiguration.setRemoveAbandonedTimeout(tenantConnectionObj.getRemoveAbandonedTimeout());\n-        poolConfiguration.setLogAbandoned(tenantConnectionObj.isLogAbandoned());\n-        poolConfiguration.setAbandonWhenPercentageFull(tenantConnectionObj.getAbandonWhenPercentageFull());\n-        poolConfiguration.setDefaultAutoCommit(true);\n+         String jdbcUrl = this.driverConfig.constructProtocol(tenantConnectionObj.getSchemaServer(), tenantConnectionObj.getSchemaServerPort(), tenantConnectionObj.getSchemaName());\n+\n+        HikariConfig config = new HikariConfig();\n+        config.setDriverClassName(this.driverConfig.getDriverClassName());\n+        config.setPoolName(tenantConnectionObj.getSchemaName() + \"_pool\");\n+        config.setJdbcUrl(jdbcUrl);\n+        config.setUsername(tenantConnectionObj.getSchemaUsername());\n+        config.setPassword(tenantConnectionObj.getSchemaPassword());\n+\n+        config.setValidationTimeout(tenantConnectionObj.getValidationInterval());\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzNzk1NQ=="}, "originalCommit": null, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODM2ODE5OnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/service/TomcatJdbcDataSourcePerTenantService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMTowMzo1MFrOF0KR-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxMzo1MDoxNVrOF9JmMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzODcxMw==", "bodyText": "https://github.com/brettwooldridge/HikariCP/wiki/MySQL-Configuration suggests false instead of true for maintainTimeStats .. any reason you chose the opposite in (only) this case? Just curious.", "url": "https://github.com/apache/fineract/pull/722#discussion_r390238713", "createdAt": "2020-03-10T11:03:50Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/service/TomcatJdbcDataSourcePerTenantService.java", "diffHunk": "@@ -85,26 +85,30 @@ private DataSource createNewDataSourceFor(final FineractPlatformTenantConnection\n         // http://www.tomcatexpert.com/blog/2010/04/01/configuring-jdbc-pool-high-concurrency\n \n         // see also org.apache.fineract.DataSourceProperties.setDefaults()\n-         String jdbcUrl = this.driverConfig.constructProtocol(tenantConnectionObj.getSchemaServer(), tenantConnectionObj.getSchemaServerPort(), tenantConnectionObj.getSchemaName()) ;\n-        //final String jdbcUrl = tenantConnectionObj.databaseURL();\n-        final PoolConfiguration poolConfiguration = new PoolProperties();\n-        poolConfiguration.setDriverClassName(this.driverConfig.getDriverClassName());\n-        poolConfiguration.setName(tenantConnectionObj.getSchemaName() + \"_pool\");\n-        poolConfiguration.setUrl(jdbcUrl);\n-        poolConfiguration.setUsername(tenantConnectionObj.getSchemaUsername());\n-        poolConfiguration.setPassword(tenantConnectionObj.getSchemaPassword());\n-\n-        poolConfiguration.setInitialSize(tenantConnectionObj.getInitialSize());\n-\n-        poolConfiguration.setTestOnBorrow(tenantConnectionObj.isTestOnBorrow());\n-        poolConfiguration.setValidationQuery(\"SELECT 1\");\n-        poolConfiguration.setValidationInterval(tenantConnectionObj.getValidationInterval());\n-\n-        poolConfiguration.setRemoveAbandoned(tenantConnectionObj.isRemoveAbandoned());\n-        poolConfiguration.setRemoveAbandonedTimeout(tenantConnectionObj.getRemoveAbandonedTimeout());\n-        poolConfiguration.setLogAbandoned(tenantConnectionObj.isLogAbandoned());\n-        poolConfiguration.setAbandonWhenPercentageFull(tenantConnectionObj.getAbandonWhenPercentageFull());\n-        poolConfiguration.setDefaultAutoCommit(true);\n+         String jdbcUrl = this.driverConfig.constructProtocol(tenantConnectionObj.getSchemaServer(), tenantConnectionObj.getSchemaServerPort(), tenantConnectionObj.getSchemaName());\n+\n+        HikariConfig config = new HikariConfig();\n+        config.setDriverClassName(this.driverConfig.getDriverClassName());\n+        config.setPoolName(tenantConnectionObj.getSchemaName() + \"_pool\");\n+        config.setJdbcUrl(jdbcUrl);\n+        config.setUsername(tenantConnectionObj.getSchemaUsername());\n+        config.setPassword(tenantConnectionObj.getSchemaPassword());\n+\n+        config.setValidationTimeout(tenantConnectionObj.getValidationInterval());\n+\n+        config.addDataSourceProperty(\"cachePrepStmts\", \"true\");\n+        config.addDataSourceProperty(\"prepStmtCacheSize\", \"250\");\n+        config.addDataSourceProperty(\"prepStmtCacheSqlLimit\", \"2048\");\n+        config.addDataSourceProperty(\"useServerPrepStmts\", \"true\");\n+        config.addDataSourceProperty(\"useLocalSessionState\", \"true\");\n+\n+        config.addDataSourceProperty(\"rewriteBatchedStatements\", \"true\");\n+        config.addDataSourceProperty(\"cacheResultSetMetadata\", \"true\");\n+        config.addDataSourceProperty(\"cacheServerConfiguration\", \"true\");\n+        config.addDataSourceProperty(\"elideSetAutoCommits\", \"true\");\n+        config.addDataSourceProperty(\"maintainTimeStats\", \"true\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY2NDY5MQ==", "bodyText": "@xurror this also didn't seem to have been done? I'll propose to change this in my follow-up PR.", "url": "https://github.com/apache/fineract/pull/722#discussion_r399664691", "createdAt": "2020-03-28T13:50:15Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/service/TomcatJdbcDataSourcePerTenantService.java", "diffHunk": "@@ -85,26 +85,30 @@ private DataSource createNewDataSourceFor(final FineractPlatformTenantConnection\n         // http://www.tomcatexpert.com/blog/2010/04/01/configuring-jdbc-pool-high-concurrency\n \n         // see also org.apache.fineract.DataSourceProperties.setDefaults()\n-         String jdbcUrl = this.driverConfig.constructProtocol(tenantConnectionObj.getSchemaServer(), tenantConnectionObj.getSchemaServerPort(), tenantConnectionObj.getSchemaName()) ;\n-        //final String jdbcUrl = tenantConnectionObj.databaseURL();\n-        final PoolConfiguration poolConfiguration = new PoolProperties();\n-        poolConfiguration.setDriverClassName(this.driverConfig.getDriverClassName());\n-        poolConfiguration.setName(tenantConnectionObj.getSchemaName() + \"_pool\");\n-        poolConfiguration.setUrl(jdbcUrl);\n-        poolConfiguration.setUsername(tenantConnectionObj.getSchemaUsername());\n-        poolConfiguration.setPassword(tenantConnectionObj.getSchemaPassword());\n-\n-        poolConfiguration.setInitialSize(tenantConnectionObj.getInitialSize());\n-\n-        poolConfiguration.setTestOnBorrow(tenantConnectionObj.isTestOnBorrow());\n-        poolConfiguration.setValidationQuery(\"SELECT 1\");\n-        poolConfiguration.setValidationInterval(tenantConnectionObj.getValidationInterval());\n-\n-        poolConfiguration.setRemoveAbandoned(tenantConnectionObj.isRemoveAbandoned());\n-        poolConfiguration.setRemoveAbandonedTimeout(tenantConnectionObj.getRemoveAbandonedTimeout());\n-        poolConfiguration.setLogAbandoned(tenantConnectionObj.isLogAbandoned());\n-        poolConfiguration.setAbandonWhenPercentageFull(tenantConnectionObj.getAbandonWhenPercentageFull());\n-        poolConfiguration.setDefaultAutoCommit(true);\n+         String jdbcUrl = this.driverConfig.constructProtocol(tenantConnectionObj.getSchemaServer(), tenantConnectionObj.getSchemaServerPort(), tenantConnectionObj.getSchemaName());\n+\n+        HikariConfig config = new HikariConfig();\n+        config.setDriverClassName(this.driverConfig.getDriverClassName());\n+        config.setPoolName(tenantConnectionObj.getSchemaName() + \"_pool\");\n+        config.setJdbcUrl(jdbcUrl);\n+        config.setUsername(tenantConnectionObj.getSchemaUsername());\n+        config.setPassword(tenantConnectionObj.getSchemaPassword());\n+\n+        config.setValidationTimeout(tenantConnectionObj.getValidationInterval());\n+\n+        config.addDataSourceProperty(\"cachePrepStmts\", \"true\");\n+        config.addDataSourceProperty(\"prepStmtCacheSize\", \"250\");\n+        config.addDataSourceProperty(\"prepStmtCacheSqlLimit\", \"2048\");\n+        config.addDataSourceProperty(\"useServerPrepStmts\", \"true\");\n+        config.addDataSourceProperty(\"useLocalSessionState\", \"true\");\n+\n+        config.addDataSourceProperty(\"rewriteBatchedStatements\", \"true\");\n+        config.addDataSourceProperty(\"cacheResultSetMetadata\", \"true\");\n+        config.addDataSourceProperty(\"cacheServerConfiguration\", \"true\");\n+        config.addDataSourceProperty(\"elideSetAutoCommits\", \"true\");\n+        config.addDataSourceProperty(\"maintainTimeStats\", \"true\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzODcxMw=="}, "originalCommit": null, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODM3MDUyOnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/service/TomcatJdbcDataSourcePerTenantService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMTowNDozM1rOF0KTdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMTowNDozM1rOF0KTdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzOTA5NA==", "bodyText": "I would delete this entire old comment at this opportunity.", "url": "https://github.com/apache/fineract/pull/722#discussion_r390239094", "createdAt": "2020-03-10T11:04:33Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/service/TomcatJdbcDataSourcePerTenantService.java", "diffHunk": "@@ -85,26 +85,30 @@ private DataSource createNewDataSourceFor(final FineractPlatformTenantConnection\n         // http://www.tomcatexpert.com/blog/2010/04/01/configuring-jdbc-pool-high-concurrency\n \n         // see also org.apache.fineract.DataSourceProperties.setDefaults()\n-         String jdbcUrl = this.driverConfig.constructProtocol(tenantConnectionObj.getSchemaServer(), tenantConnectionObj.getSchemaServerPort(), tenantConnectionObj.getSchemaName()) ;\n-        //final String jdbcUrl = tenantConnectionObj.databaseURL();\n-        final PoolConfiguration poolConfiguration = new PoolProperties();\n-        poolConfiguration.setDriverClassName(this.driverConfig.getDriverClassName());\n-        poolConfiguration.setName(tenantConnectionObj.getSchemaName() + \"_pool\");\n-        poolConfiguration.setUrl(jdbcUrl);\n-        poolConfiguration.setUsername(tenantConnectionObj.getSchemaUsername());\n-        poolConfiguration.setPassword(tenantConnectionObj.getSchemaPassword());\n-\n-        poolConfiguration.setInitialSize(tenantConnectionObj.getInitialSize());\n-\n-        poolConfiguration.setTestOnBorrow(tenantConnectionObj.isTestOnBorrow());\n-        poolConfiguration.setValidationQuery(\"SELECT 1\");\n-        poolConfiguration.setValidationInterval(tenantConnectionObj.getValidationInterval());\n-\n-        poolConfiguration.setRemoveAbandoned(tenantConnectionObj.isRemoveAbandoned());\n-        poolConfiguration.setRemoveAbandonedTimeout(tenantConnectionObj.getRemoveAbandonedTimeout());\n-        poolConfiguration.setLogAbandoned(tenantConnectionObj.isLogAbandoned());\n-        poolConfiguration.setAbandonWhenPercentageFull(tenantConnectionObj.getAbandonWhenPercentageFull());\n-        poolConfiguration.setDefaultAutoCommit(true);\n+         String jdbcUrl = this.driverConfig.constructProtocol(tenantConnectionObj.getSchemaServer(), tenantConnectionObj.getSchemaServerPort(), tenantConnectionObj.getSchemaName());\n+\n+        HikariConfig config = new HikariConfig();\n+        config.setDriverClassName(this.driverConfig.getDriverClassName());\n+        config.setPoolName(tenantConnectionObj.getSchemaName() + \"_pool\");\n+        config.setJdbcUrl(jdbcUrl);\n+        config.setUsername(tenantConnectionObj.getSchemaUsername());\n+        config.setPassword(tenantConnectionObj.getSchemaPassword());\n+\n+        config.setValidationTimeout(tenantConnectionObj.getValidationInterval());\n+\n+        config.addDataSourceProperty(\"cachePrepStmts\", \"true\");\n+        config.addDataSourceProperty(\"prepStmtCacheSize\", \"250\");\n+        config.addDataSourceProperty(\"prepStmtCacheSqlLimit\", \"2048\");\n+        config.addDataSourceProperty(\"useServerPrepStmts\", \"true\");\n+        config.addDataSourceProperty(\"useLocalSessionState\", \"true\");\n+\n+        config.addDataSourceProperty(\"rewriteBatchedStatements\", \"true\");\n+        config.addDataSourceProperty(\"cacheResultSetMetadata\", \"true\");\n+        config.addDataSourceProperty(\"cacheServerConfiguration\", \"true\");\n+        config.addDataSourceProperty(\"elideSetAutoCommits\", \"true\");\n+        config.addDataSourceProperty(\"maintainTimeStats\", \"true\");\n+\n+        config.setAutoCommit(true);\n \n         /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODM3NzgyOnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/main/resources/META-INF/spring/jdbc.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMTowNzoyMFrOF0KYOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMTowNzoyMFrOF0KYOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0MDMxMw==", "bodyText": "FTR: Seeing this surprised me a little at first (especially given that there's no equivalent before; given that the (now deleted) fineract-provider/src/test/resources/META-INF/context.xml was scoped test only, but then I understood how this works. Given that the docker compose test passes proves that overriding these properties actually really is working, so all good.", "url": "https://github.com/apache/fineract/pull/722#discussion_r390240313", "createdAt": "2020-03-10T11:07:20Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/main/resources/META-INF/spring/jdbc.properties", "diffHunk": "@@ -20,4 +20,9 @@\n DRIVERCLASS_NAME:org.drizzle.jdbc.DrizzleDriver\n PROTOCOL:jdbc\n SUB_PROTOCOL:mysql:thin\n-PORT:3306\n\\ No newline at end of file\n+PORT:3306\n+\n+fineract_tenants_driver:org.drizzle.jdbc.DrizzleDriver\n+fineract_tenants_url:jdbc:mysql:thin://localhost:3306/fineract_tenants\n+fineract_tenants_uid:root\n+fineract_tenants_pwd:mysql", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODQzMjU5OnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/main/resources/META-INF/spring/hikariDataSource.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMToyNjozMVrOF0K6Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMToyNjozMVrOF0K6Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0OTA2Mg==", "bodyText": "Let's also have this here:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                </bean>\n          \n          \n            \n                     <!-- https://github.com/brettwooldridge/HikariCP/wiki/MySQL-Configuration -->\n          \n          \n            \n                     <property name=\"dataSource.cachePrepStmts\" value=\"true\" /> \n          \n          \n            \n                     ... TODO etc.\n          \n          \n            \n                </bean>", "url": "https://github.com/apache/fineract/pull/722#discussion_r390249062", "createdAt": "2020-03-10T11:26:31Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/main/resources/META-INF/spring/hikariDataSource.xml", "diffHunk": "@@ -29,6 +29,15 @@\n     \thttp://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd\">\n \n \t<!-- name here must match TestDataSourceConfiguration -->\n-\t<jee:jndi-lookup jndi-name=\"java:comp/env/jdbc/fineract_tenants\"\n-\t\tid=\"tenantDataSourceJndi\" />\n+\n+    <bean id=\"hikariTenantDataSource\" class=\"com.zaxxer.hikari.HikariDataSource\">\n+        <property name=\"driverClassName\" value=\"${fineract_tenants_driver}\" />\n+        <property name=\"jdbcUrl\" value=\"${fineract_tenants_url}\" />\n+        <property name=\"username\" value=\"${fineract_tenants_uid}\" />\n+        <property name=\"password\" value=\"${fineract_tenants_pwd}\" />\n+        <property name=\"minimumIdle\" value=\"3\" />\n+        <property name=\"maximumPoolSize\" value=\"10\" />\n+        <property name=\"idleTimeout\" value=\"60000\" />\n+        <property name=\"ConnectionTestQuery\" value=\"SELECT 1\" />\n+    </bean>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODQ1NTI1OnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/boot/db/DataSourceConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMTozNDoyNVrOF0LIig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQwODo0MjoxNFrOF2dpmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MjY4Mg==", "bodyText": "So this class is actually one I wrote myself, many many years ago, to get pure Spring Boot working (which subsequently got broken again somehow; fixing it is the point of https://issues.apache.org/jira/browse/FINERACT-764 and https://issues.apache.org/jira/browse/FINERACT-730), because as long as there was a DS in JNDI from Tomcat's server.xml, this was needed. But now that with this change there is an equivalent hikariTenantDataSource bean already, we should be able to just get rid of this class entirely... do you want to try to just delete it, and see if that just works? Anything that requires this bean should now get it from your new hikariDataSource.xml - makes sense?", "url": "https://github.com/apache/fineract/pull/722#discussion_r390252682", "createdAt": "2020-03-10T11:34:25Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/boot/db/DataSourceConfiguration.java", "diffHunk": "@@ -38,19 +39,19 @@\n     @Autowired JDBCDriverConfig config ;\n \n     @Bean\n-    public DataSourceProperties dataSourceProperties() {\n-    return new DataSourceProperties(config.getDriverClassName(), config.getProtocol(), config.getSubProtocol(), config.getPort());\n+    public DataSourceProperties DataSourceProperties() {\n+        return new DataSourceProperties(config.getDriverClassName(), config.getProtocol(), config.getSubProtocol(), config.getPort());\n     }\n \n     @Bean\n-    public DataSource tenantDataSourceJndi() {\n-    PoolConfiguration p = getProperties();\n-        org.apache.tomcat.jdbc.pool.DataSource ds = new org.apache.tomcat.jdbc.pool.DataSource(p);\n-        logger.info(\"Created new DataSource; url=\" + p.getUrl());\n+    public DataSource hikariTenantDataSource() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY1MzIxMA==", "bodyText": "I would check that out.", "url": "https://github.com/apache/fineract/pull/722#discussion_r392653210", "createdAt": "2020-03-15T08:42:14Z", "author": {"login": "xurror"}, "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/boot/db/DataSourceConfiguration.java", "diffHunk": "@@ -38,19 +39,19 @@\n     @Autowired JDBCDriverConfig config ;\n \n     @Bean\n-    public DataSourceProperties dataSourceProperties() {\n-    return new DataSourceProperties(config.getDriverClassName(), config.getProtocol(), config.getSubProtocol(), config.getPort());\n+    public DataSourceProperties DataSourceProperties() {\n+        return new DataSourceProperties(config.getDriverClassName(), config.getProtocol(), config.getSubProtocol(), config.getPort());\n     }\n \n     @Bean\n-    public DataSource tenantDataSourceJndi() {\n-    PoolConfiguration p = getProperties();\n-        org.apache.tomcat.jdbc.pool.DataSource ds = new org.apache.tomcat.jdbc.pool.DataSource(p);\n-        logger.info(\"Created new DataSource; url=\" + p.getUrl());\n+    public DataSource hikariTenantDataSource() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MjY4Mg=="}, "originalCommit": null, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODQ2NzE5OnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/boot/db/DataSourceProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMTozODoyMlrOF0LPnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMTozODoyMlrOF0LPnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1NDQ5NQ==", "bodyText": "If you manage to delete DataSourceConfiguration.java (above), then I suspect we can delete this entire class as well.. Or is there anything else left that uses this?", "url": "https://github.com/apache/fineract/pull/722#discussion_r390254495", "createdAt": "2020-03-10T11:38:22Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/boot/db/DataSourceProperties.java", "diffHunk": "@@ -31,8 +31,7 @@\n  * -Dfineract.datasource.port=3307.\n  */\n // NOT a @Component - we do not want this to picked up by component scan, only explicitly declared in DataSourceConfiguration (if that's active)\n-public class DataSourceProperties extends PoolProperties {\n-\n+public class DataSourceProperties extends HikariConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODQ3MjY3OnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/service/TomcatJdbcDataSourcePerTenantService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMTo0MDowNFrOF0LS-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMTo0MDowNFrOF0LS-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1NTM1NA==", "bodyText": "Actually, I wonder if it would somehow be possible to read this from the bean for the tenants DB, instead of having to repeat and hard-cod it here... but we could look into that in a follow-up PR as well, your call.", "url": "https://github.com/apache/fineract/pull/722#discussion_r390255354", "createdAt": "2020-03-10T11:40:04Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/service/TomcatJdbcDataSourcePerTenantService.java", "diffHunk": "@@ -85,26 +85,30 @@ private DataSource createNewDataSourceFor(final FineractPlatformTenantConnection\n         // http://www.tomcatexpert.com/blog/2010/04/01/configuring-jdbc-pool-high-concurrency\n \n         // see also org.apache.fineract.DataSourceProperties.setDefaults()\n-         String jdbcUrl = this.driverConfig.constructProtocol(tenantConnectionObj.getSchemaServer(), tenantConnectionObj.getSchemaServerPort(), tenantConnectionObj.getSchemaName()) ;\n-        //final String jdbcUrl = tenantConnectionObj.databaseURL();\n-        final PoolConfiguration poolConfiguration = new PoolProperties();\n-        poolConfiguration.setDriverClassName(this.driverConfig.getDriverClassName());\n-        poolConfiguration.setName(tenantConnectionObj.getSchemaName() + \"_pool\");\n-        poolConfiguration.setUrl(jdbcUrl);\n-        poolConfiguration.setUsername(tenantConnectionObj.getSchemaUsername());\n-        poolConfiguration.setPassword(tenantConnectionObj.getSchemaPassword());\n-\n-        poolConfiguration.setInitialSize(tenantConnectionObj.getInitialSize());\n-\n-        poolConfiguration.setTestOnBorrow(tenantConnectionObj.isTestOnBorrow());\n-        poolConfiguration.setValidationQuery(\"SELECT 1\");\n-        poolConfiguration.setValidationInterval(tenantConnectionObj.getValidationInterval());\n-\n-        poolConfiguration.setRemoveAbandoned(tenantConnectionObj.isRemoveAbandoned());\n-        poolConfiguration.setRemoveAbandonedTimeout(tenantConnectionObj.getRemoveAbandonedTimeout());\n-        poolConfiguration.setLogAbandoned(tenantConnectionObj.isLogAbandoned());\n-        poolConfiguration.setAbandonWhenPercentageFull(tenantConnectionObj.getAbandonWhenPercentageFull());\n-        poolConfiguration.setDefaultAutoCommit(true);\n+         String jdbcUrl = this.driverConfig.constructProtocol(tenantConnectionObj.getSchemaServer(), tenantConnectionObj.getSchemaServerPort(), tenantConnectionObj.getSchemaName());\n+\n+        HikariConfig config = new HikariConfig();\n+        config.setDriverClassName(this.driverConfig.getDriverClassName());\n+        config.setPoolName(tenantConnectionObj.getSchemaName() + \"_pool\");\n+        config.setJdbcUrl(jdbcUrl);\n+        config.setUsername(tenantConnectionObj.getSchemaUsername());\n+        config.setPassword(tenantConnectionObj.getSchemaPassword());\n+\n+        config.setValidationTimeout(tenantConnectionObj.getValidationInterval());\n+\n+        config.addDataSourceProperty(\"cachePrepStmts\", \"true\");\n+        config.addDataSourceProperty(\"prepStmtCacheSize\", \"250\");\n+        config.addDataSourceProperty(\"prepStmtCacheSqlLimit\", \"2048\");\n+        config.addDataSourceProperty(\"useServerPrepStmts\", \"true\");\n+        config.addDataSourceProperty(\"useLocalSessionState\", \"true\");\n+\n+        config.addDataSourceProperty(\"rewriteBatchedStatements\", \"true\");\n+        config.addDataSourceProperty(\"cacheResultSetMetadata\", \"true\");\n+        config.addDataSourceProperty(\"cacheServerConfiguration\", \"true\");\n+        config.addDataSourceProperty(\"elideSetAutoCommits\", \"true\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzkxMTIzOnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/main/resources/logback.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxMjozMTo1NlrOF9JI9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxMjozMTo1NlrOF9JI9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1NzIwNg==", "bodyText": "I'm wondering, won't this (at level debug instead of maybe warn) create a lot of extra logging?\nI don't mind merging it as is (I'm just re-reading everything else), we can always change this log level later.", "url": "https://github.com/apache/fineract/pull/722#discussion_r399657206", "createdAt": "2020-03-28T12:31:56Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/main/resources/logback.xml", "diffHunk": "@@ -44,6 +44,7 @@\n \t<logger name=\"org.springframework.beans\" level=\"info\" />\n \t<logger name=\"net.sf.ehcache\" level=\"error\" />\n \t<logger name=\"org.hibernate.cache\" level=\"error\" />\n+\t<logger name=\"com.zaxxer.hikari\" level=\"debug\" additivity=\"false\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fc08355e4f4e15f412af372bc878520b36a282d"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1758, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}