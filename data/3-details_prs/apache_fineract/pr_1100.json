{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3Nzg0MjIw", "number": 1100, "title": "FINERACT-1047 Integration test for Audit trails(Create)", "bodyText": "FINERACT-1047\nDescription\nIntegration Tests are divided into two parts:\n\nCreation\nVerifying for different routes provided, like: limit,orderby etc.\n\nThis PR deals with the first part.\nChecklist\nPlease make sure these boxes are checked before submitting your pull request - thanks!\n\n\n Commit message starts with the issue number from https://issues.apache.org/jira/projects/FINERACT/. Ex: FINERACT-646 Pockets API.\n\n\n Coding conventions at https://cwiki.apache.org/confluence/display/FINERACT/Coding+Conventions have been followed.\n\n\n API documentation at fineract-provider/src/main/resources/static/api-docs/apiLive.htm has been updated with details of any API changes.\n\n\n Integration tests have been created/updated for verifying the changes made.\n\n\n All Integrations tests are passing with the new commits.\n\n\n Submission is not a \"code dump\".  (Large changes can be made \"in repository\" via a branch.  Ask on the list.)\n\n\nOur guidelines for code reviews is at https://cwiki.apache.org/confluence/display/FINERACT/Code+Review+Guide", "createdAt": "2020-06-22T08:48:43Z", "url": "https://github.com/apache/fineract/pull/1100", "merged": true, "mergeCommit": {"oid": "a5afb0b833441d37bfab38c7aec26d8e7d6030a4"}, "closed": true, "closedAt": "2020-06-26T10:37:10Z", "author": {"login": "thesmallstar"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcttA0nABqjM0NjczMTY1NzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcvAy0lAFqTQzODE5MTIzNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f518a004bebfa56498791a4596c538209039809b", "author": {"user": {"login": "thesmallstar", "name": "Manthan Surkar"}}, "url": "https://github.com/apache/fineract/commit/f518a004bebfa56498791a4596c538209039809b", "committedDate": "2020-06-22T08:45:41Z", "message": "FINERACT-1047 Integration test for Audit trails(Create)"}, "afterCommit": {"oid": "90e87cb333cd4d54b01f680c71b7300622a7541c", "author": {"user": {"login": "thesmallstar", "name": "Manthan Surkar"}}, "url": "https://github.com/apache/fineract/commit/90e87cb333cd4d54b01f680c71b7300622a7541c", "committedDate": "2020-06-22T08:59:07Z", "message": "FINERACT-1047 Integration test for Audit trails(Create)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NTg3NTgx", "url": "https://github.com/apache/fineract/pull/1100#pullrequestreview-435587581", "createdAt": "2020-06-23T09:05:58Z", "commit": {"oid": "90e87cb333cd4d54b01f680c71b7300622a7541c"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTowNTo1OFrOGngO3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOToxMjoyNFrOGngd4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3NTc0MA==", "bodyText": "very minor feedback FYI, more for your learning: We usually use the abstract List instead of the concrete ArrayList implementation as type of the variable. Even better, since we are now on Java 11, why not start using var instead? Try just var responseAuditIDs = Utils.performServerGet(requestSpec, responseSpec, AUDIT_URL, \"id\"); (and don't use final var, that's just ugly).\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final ArrayList<Integer> responseAuditIDs = Utils.performServerGet(requestSpec, responseSpec, AUDIT_URL, \"id\");\n          \n          \n            \n                    final List<Integer> responseAuditIDs = Utils.performServerGet(requestSpec, responseSpec, AUDIT_URL, \"id\");", "url": "https://github.com/apache/fineract/pull/1100#discussion_r444075740", "createdAt": "2020-06-23T09:05:58Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/common/AuditHelper.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.fineract.integrationtests.common;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import io.restassured.specification.RequestSpecification;\n+import io.restassured.specification.ResponseSpecification;\n+import java.util.ArrayList;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * @author Manthan Surkar\n+ *\n+ */\n+\n+public class AuditHelper {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AuditHelper.class);\n+    private static final String AUDIT_BASE_URL = \"/fineract-provider/api/v1/audits?\" + Utils.TENANT_IDENTIFIER;\n+\n+    public static void verifyAuditCreatedOnServer(final RequestSpecification requestSpec, final ResponseSpecification responseSpec,\n+            final Integer resourceId, final String actionName, final String entityName) {\n+        LOG.info(\"------------------------------CHECK IF AUDIT CREATED------------------------------------\\n\");\n+        final String AUDIT_URL = \"/fineract-provider/api/v1/audits/?\" + \"entityName=\" + entityName + \"&resourceId=\" + resourceId\n+                + \"&actionName=\" + actionName + \"&\" + Utils.TENANT_IDENTIFIER;\n+        final ArrayList<Integer> responseAuditIDs = Utils.performServerGet(requestSpec, responseSpec, AUDIT_URL, \"id\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90e87cb333cd4d54b01f680c71b7300622a7541c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3Nzk2NA==", "bodyText": "as we've started discussing in #1019, it's actually kind of very wrong and confusing how classes such as ClientHelper and many other existing *Helper, take this.requestSpec, this.responseSpec BOTH as constructor arguments AND for their methods - that makes no sense; I should be either/or. That's not really the point of this PR though - just thought I'd let you know here for illustration.", "url": "https://github.com/apache/fineract/pull/1100#discussion_r444077964", "createdAt": "2020-06-23T09:09:45Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/AuditIntegrationTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.fineract.integrationtests;\n+\n+import io.restassured.builder.RequestSpecBuilder;\n+import io.restassured.builder.ResponseSpecBuilder;\n+import io.restassured.http.ContentType;\n+import io.restassured.specification.RequestSpecification;\n+import io.restassured.specification.ResponseSpecification;\n+import java.util.HashMap;\n+import org.apache.fineract.integrationtests.common.AuditHelper;\n+import org.apache.fineract.integrationtests.common.ClientHelper;\n+import org.apache.fineract.integrationtests.common.OfficeHelper;\n+import org.apache.fineract.integrationtests.common.Utils;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ *\n+ * @author Manthan Surkar\n+ *\n+ */\n+public class AuditIntegrationTest {\n+\n+    private ResponseSpecification responseSpec;\n+    private RequestSpecification requestSpec;\n+    private ClientHelper clientHelper;\n+\n+    /**\n+     * Sets up the essential settings for the TEST like contentType,\n+     * expectedStatusCode. It uses the '@BeforeEach' annotation provided by\n+     * jUnit.\n+     */\n+    @BeforeEach\n+    public void setup() {\n+        Utils.initializeRESTAssured();\n+        this.requestSpec = new RequestSpecBuilder().setContentType(ContentType.JSON).build();\n+        this.requestSpec.header(\"Authorization\", \"Basic \" + Utils.loginIntoServerAndGetBase64EncodedAuthenticationKey());\n+        this.responseSpec = new ResponseSpecBuilder().expectStatusCode(200).build();\n+    }\n+\n+    /**\n+     * Here we Create/Update different Entities and verify an audit is generated\n+     * for each action. This can be further extened with more entities and\n+     * actions in similiar way.\n+     */\n+    @Test\n+    public void auditShouldbeCreated() {\n+        this.clientHelper = new ClientHelper(this.requestSpec, this.responseSpec);\n+\n+        // When Client is created\n+        final Integer clientId = ClientHelper.createClient(this.requestSpec, this.responseSpec);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90e87cb333cd4d54b01f680c71b7300622a7541c"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3OTU4Ng==", "bodyText": "For a new class like AuditHelper, I would go with the pattern of passing this.requestSpec, this.responseSpec to the constructor, and then have a method like verifyAuditCreatedOnServer not require it. Actually, even better, how about only passing the requestSpec and even just hard-code the responseSpec without having to pass it. This would make ITs more readable.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    AuditHelper.verifyAuditCreatedOnServer(this.requestSpec, this.responseSpec, clientId, \"CREATE\", \"CLIENT\");\n          \n          \n            \n                    AuditHelper.verifyAuditCreatedOnServer(this.requestSpec, this.responseSpec, clientId, \"CREATE\", \"CLIENT\");", "url": "https://github.com/apache/fineract/pull/1100#discussion_r444079586", "createdAt": "2020-06-23T09:12:24Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/AuditIntegrationTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.fineract.integrationtests;\n+\n+import io.restassured.builder.RequestSpecBuilder;\n+import io.restassured.builder.ResponseSpecBuilder;\n+import io.restassured.http.ContentType;\n+import io.restassured.specification.RequestSpecification;\n+import io.restassured.specification.ResponseSpecification;\n+import java.util.HashMap;\n+import org.apache.fineract.integrationtests.common.AuditHelper;\n+import org.apache.fineract.integrationtests.common.ClientHelper;\n+import org.apache.fineract.integrationtests.common.OfficeHelper;\n+import org.apache.fineract.integrationtests.common.Utils;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ *\n+ * @author Manthan Surkar\n+ *\n+ */\n+public class AuditIntegrationTest {\n+\n+    private ResponseSpecification responseSpec;\n+    private RequestSpecification requestSpec;\n+    private ClientHelper clientHelper;\n+\n+    /**\n+     * Sets up the essential settings for the TEST like contentType,\n+     * expectedStatusCode. It uses the '@BeforeEach' annotation provided by\n+     * jUnit.\n+     */\n+    @BeforeEach\n+    public void setup() {\n+        Utils.initializeRESTAssured();\n+        this.requestSpec = new RequestSpecBuilder().setContentType(ContentType.JSON).build();\n+        this.requestSpec.header(\"Authorization\", \"Basic \" + Utils.loginIntoServerAndGetBase64EncodedAuthenticationKey());\n+        this.responseSpec = new ResponseSpecBuilder().expectStatusCode(200).build();\n+    }\n+\n+    /**\n+     * Here we Create/Update different Entities and verify an audit is generated\n+     * for each action. This can be further extened with more entities and\n+     * actions in similiar way.\n+     */\n+    @Test\n+    public void auditShouldbeCreated() {\n+        this.clientHelper = new ClientHelper(this.requestSpec, this.responseSpec);\n+\n+        // When Client is created\n+        final Integer clientId = ClientHelper.createClient(this.requestSpec, this.responseSpec);\n+        Assertions.assertNotNull(clientId);\n+        AuditHelper.verifyAuditCreatedOnServer(this.requestSpec, this.responseSpec, clientId, \"CREATE\", \"CLIENT\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90e87cb333cd4d54b01f680c71b7300622a7541c"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MTQzNjY1", "url": "https://github.com/apache/fineract/pull/1100#pullrequestreview-436143665", "createdAt": "2020-06-23T20:48:10Z", "commit": {"oid": "90e87cb333cd4d54b01f680c71b7300622a7541c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "90e87cb333cd4d54b01f680c71b7300622a7541c", "author": {"user": {"login": "thesmallstar", "name": "Manthan Surkar"}}, "url": "https://github.com/apache/fineract/commit/90e87cb333cd4d54b01f680c71b7300622a7541c", "committedDate": "2020-06-22T08:59:07Z", "message": "FINERACT-1047 Integration test for Audit trails(Create)"}, "afterCommit": {"oid": "9c47929755fdaaff6425a50f951397eea0dd0307", "author": {"user": {"login": "thesmallstar", "name": "Manthan Surkar"}}, "url": "https://github.com/apache/fineract/commit/9c47929755fdaaff6425a50f951397eea0dd0307", "committedDate": "2020-06-24T11:42:09Z", "message": "FINERACT-1047 Integration test for Audit trails(Create)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9c47929755fdaaff6425a50f951397eea0dd0307", "author": {"user": {"login": "thesmallstar", "name": "Manthan Surkar"}}, "url": "https://github.com/apache/fineract/commit/9c47929755fdaaff6425a50f951397eea0dd0307", "committedDate": "2020-06-24T11:42:09Z", "message": "FINERACT-1047 Integration test for Audit trails(Create)"}, "afterCommit": {"oid": "dfa2bd591f2083da0620822bdf7d558d723a256e", "author": {"user": {"login": "thesmallstar", "name": "Manthan Surkar"}}, "url": "https://github.com/apache/fineract/commit/dfa2bd591f2083da0620822bdf7d558d723a256e", "committedDate": "2020-06-24T12:12:25Z", "message": "FINERACT-1047 Integration test for Audit trails(Create)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8fafe56f1b72f9511c30345a9c368428283930e", "author": {"user": {"login": "thesmallstar", "name": "Manthan Surkar"}}, "url": "https://github.com/apache/fineract/commit/f8fafe56f1b72f9511c30345a9c368428283930e", "committedDate": "2020-06-24T13:14:43Z", "message": "FINERACT-1047 Integration test for Audit trails(Create)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dfa2bd591f2083da0620822bdf7d558d723a256e", "author": {"user": {"login": "thesmallstar", "name": "Manthan Surkar"}}, "url": "https://github.com/apache/fineract/commit/dfa2bd591f2083da0620822bdf7d558d723a256e", "committedDate": "2020-06-24T12:12:25Z", "message": "FINERACT-1047 Integration test for Audit trails(Create)"}, "afterCommit": {"oid": "f8fafe56f1b72f9511c30345a9c368428283930e", "author": {"user": {"login": "thesmallstar", "name": "Manthan Surkar"}}, "url": "https://github.com/apache/fineract/commit/f8fafe56f1b72f9511c30345a9c368428283930e", "committedDate": "2020-06-24T13:14:43Z", "message": "FINERACT-1047 Integration test for Audit trails(Create)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MTkxMjM0", "url": "https://github.com/apache/fineract/pull/1100#pullrequestreview-438191234", "createdAt": "2020-06-26T10:36:02Z", "commit": {"oid": "f8fafe56f1b72f9511c30345a9c368428283930e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1817, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}