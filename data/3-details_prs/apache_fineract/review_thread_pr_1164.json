{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2ODA5OTQw", "number": 1164, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMjo1ODo1MVrOEOCE6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMjo1OTo0MFrOEOCFlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTQ5NTQ0OnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/AuditIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMjo1ODo1MVrOGw9nAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMzowNDozM1rOGw9ucg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk5NDI0MQ==", "bodyText": "Remove such empty comment lines in the future", "url": "https://github.com/apache/fineract/pull/1164#discussion_r453994241", "createdAt": "2020-07-13T22:58:51Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/AuditIntegrationTest.java", "diffHunk": "@@ -102,4 +103,29 @@ public void auditShouldbeCreated() {\n         auditHelper.verifyOneAuditOnly(auditsRecieved, officeId, \"CREATE\", \"OFFICE\");\n     }\n \n+    /**\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d5acea45e24542d871f5963193d6589f8b3f7cc"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk5NjE0Ng==", "bodyText": "fixing in #1164", "url": "https://github.com/apache/fineract/pull/1164#discussion_r453996146", "createdAt": "2020-07-13T23:04:33Z", "author": {"login": "thesmallstar"}, "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/AuditIntegrationTest.java", "diffHunk": "@@ -102,4 +103,29 @@ public void auditShouldbeCreated() {\n         auditHelper.verifyOneAuditOnly(auditsRecieved, officeId, \"CREATE\", \"OFFICE\");\n     }\n \n+    /**\n+     *", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk5NDI0MQ=="}, "originalCommit": {"oid": "7d5acea45e24542d871f5963193d6589f8b3f7cc"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTQ5NzE3OnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/AuditIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMjo1OTo0MFrOGw9oDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMzowNDozMFrOGw9uZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk5NDUxMQ==", "bodyText": "Just use \"Tests that...\" language in the future, or -even better- just use \"Tests that...\" language in the future, or -even better- use a method name saying what you document - it's OK for tests to have long names.. :-)", "url": "https://github.com/apache/fineract/pull/1164#discussion_r453994511", "createdAt": "2020-07-13T22:59:40Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/AuditIntegrationTest.java", "diffHunk": "@@ -102,4 +103,29 @@ public void auditShouldbeCreated() {\n         auditHelper.verifyOneAuditOnly(auditsRecieved, officeId, \"CREATE\", \"OFFICE\");\n     }\n \n+    /**\n+     *\n+     * Here we test that audit request with limit x only returns x entries", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d5acea45e24542d871f5963193d6589f8b3f7cc"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk5NjEzNA==", "bodyText": "fixing in #1164", "url": "https://github.com/apache/fineract/pull/1164#discussion_r453996134", "createdAt": "2020-07-13T23:04:30Z", "author": {"login": "thesmallstar"}, "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/AuditIntegrationTest.java", "diffHunk": "@@ -102,4 +103,29 @@ public void auditShouldbeCreated() {\n         auditHelper.verifyOneAuditOnly(auditsRecieved, officeId, \"CREATE\", \"OFFICE\");\n     }\n \n+    /**\n+     *\n+     * Here we test that audit request with limit x only returns x entries", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk5NDUxMQ=="}, "originalCommit": {"oid": "7d5acea45e24542d871f5963193d6589f8b3f7cc"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1912, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}