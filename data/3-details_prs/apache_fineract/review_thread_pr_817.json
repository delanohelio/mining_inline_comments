{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyNjgwMjg3", "number": 817, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNDo0NzoxMlrOD9Iqag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNTowMTo1N1rOD9Is0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDMxNjU4OnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/common/SchedulerJobHelper.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNDo0NzoxM1rOGWeN0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxODoxMToyMVrOGZwb8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNjkxMg==", "bodyText": "Shouldn't the first condition be comparing beforeExecuteTime and jobRunStartTime?", "url": "https://github.com/apache/fineract/pull/817#discussion_r426216912", "createdAt": "2020-05-17T04:47:13Z", "author": {"login": "ptuomola"}, "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/common/SchedulerJobHelper.java", "diffHunk": "@@ -122,45 +139,112 @@ private static String runSchedulerJobAsJSON() {\n         return runSchedulerJob;\n     }\n \n-    public void executeJob(String jobName) throws InterruptedException {\n-        List<Map> allSchedulerJobsData = getAllSchedulerJobs();\n-        Assert.assertNotNull(allSchedulerJobsData);\n-\n+    private int getSchedulerJobIdByName(String jobName) {\n+        List<Map<String, Object>> allSchedulerJobsData = getAllSchedulerJobs();\n         for (Integer jobIndex = 0; jobIndex < allSchedulerJobsData.size(); jobIndex++) {\n             if (allSchedulerJobsData.get(jobIndex).get(\"displayName\").equals(jobName)) {\n-                Integer jobId = (Integer) allSchedulerJobsData.get(jobIndex).get(\"jobId\");\n+                return (Integer) allSchedulerJobsData.get(jobIndex).get(\"jobId\");\n+            }\n+        }\n+        throw new IllegalArgumentException(\"No such named Job (see org.apache.fineract.infrastructure.jobs.service.JobName enum):\" + jobName);\n+    }\n \n-                // Executing Scheduler Job\n-                runSchedulerJob(this.requestSpec, jobId.toString());\n+    @Deprecated // FINERACT-922 TODO Gradually replace use of this method with new executeAndAwaitJob() below, if it proves to be more stable than this one\n+    public void executeJob(String jobName) throws InterruptedException {\n+        // Stop the Scheduler while we manually trigger execution of job, to avoid side effects and simplify debugging when readings logs\n+        updateSchedulerStatus(false);\n+\n+        int jobId = getSchedulerJobIdByName(jobName);\n \n-                // Retrieving Scheduler Job by ID\n-                Map schedulerJob = getSchedulerJobById(jobId);\n-                Assert.assertNotNull(schedulerJob);\n+        // Executing Scheduler Job\n+        runSchedulerJob(jobId);\n \n-                // Waiting for Job to complete\n-                while ((Boolean) schedulerJob.get(\"currentlyRunning\") == true) {\n-                    Thread.sleep(15000);\n-                    schedulerJob = getSchedulerJobById(jobId);\n-                    Assert.assertNotNull(schedulerJob);\n-                    System.out.println(\"Job is Still Running\");\n-                }\n+        // Retrieving Scheduler Job by ID\n+        Map<String, Object> schedulerJob = getSchedulerJobById(jobId);\n \n-                List<Map> jobHistoryData = getSchedulerJobHistory(jobId);\n+        // Waiting for Job to complete\n+        while ((Boolean) schedulerJob.get(\"currentlyRunning\") == true) {\n+            Thread.sleep(15000);\n+            schedulerJob = getSchedulerJobById(jobId);\n+            assertNotNull(schedulerJob);\n+            System.out.println(\"Job is Still Running\");\n+        }\n \n-                Assert.assertFalse(\"Job History is empty :(  Was it too slow? Failures in background job?\", jobHistoryData.isEmpty());\n+        List<Map<String, Object>> jobHistoryData = getSchedulerJobHistory(jobId);\n \n-                // print error associated with recent job failure (if any)\n-                System.out.println(\"Job run error message (printed only if the job fails: \"\n-                        + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorMessage\"));\n-                System.out.println(\"Job failure error log (printed only if the job fails: \"\n-                        + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorLog\"));\n+        assertFalse(\"Job History is empty :(  Was it too slow? Failures in background job?\", jobHistoryData.isEmpty());\n \n-                // Verifying the Status of the Recently executed Scheduler Job\n-                Assert.assertEquals(\"Verifying Last Scheduler Job Status\", \"success\",\n-                        jobHistoryData.get(jobHistoryData.size() - 1).get(\"status\"));\n+        // print error associated with recent job failure (if any)\n+        System.out.println(\"Job run error message (printed only if the job fails: \"\n+                + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorMessage\"));\n+        System.out.println(\"Job failure error log (printed only if the job fails: \"\n+                + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorLog\"));\n+\n+        // Verifying the Status of the Recently executed Scheduler Job\n+        assertEquals(\"Verifying Last Scheduler Job Status\", \"success\",\n+                jobHistoryData.get(jobHistoryData.size() - 1).get(\"status\"));\n+    }\n \n-                break;\n+    /**\n+     * Launches a Job and awaits its completion.\n+     * @param jobName displayName (see {@link org.apache.fineract.infrastructure.jobs.service.JobName}) of Scheduler Job\n+     *\n+     * @author Michael Vorburger.ch\n+     */\n+    public void executeAndAwaitJob(String jobName) {\n+        Duration TIMEOUT = Duration.ofSeconds(30);\n+        Duration PAUSE = Duration.ofMillis(500);\n+        DateTimeFormatter df = DateTimeFormatter.ISO_INSTANT; // FINERACT-926\n+        Instant beforeExecuteTime = now().truncatedTo(ChronoUnit.SECONDS);\n+\n+        // Stop the Scheduler while we manually trigger execution of job, to avoid side effects and simplify debugging when readings logs\n+        updateSchedulerStatus(false);\n+\n+        // Executing Scheduler Job\n+        int jobId = getSchedulerJobIdByName(jobName);\n+        runSchedulerJob(jobId);\n+\n+        // Await JobDetailData.lastRunHistory [JobDetailHistoryData] jobRunStartTime >= beforeExecuteTime (or timeout)\n+        await().atMost(TIMEOUT).pollInterval(PAUSE).until(jobLastRunHistorySupplier(jobId), lastRunHistory -> {\n+            String jobRunStartText = lastRunHistory.get(\"jobRunStartTime\");\n+            if (jobRunStartText == null) {\n+                return false;\n             }\n+            Instant jobRunStartTime = df.parse(jobRunStartText, Instant::from);\n+            return jobRunStartTime.equals(jobRunStartTime) || jobRunStartTime.isAfter(beforeExecuteTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc3MjA4Mg==", "bodyText": "@ptuomola thank you for having taken the time for a \"real\" (full, detailed - as opposed to just \"waving through\") code review - I appreciate that very much! So yeah testing that jobRunStartTime is equal to itself was definitely wrong here. But I don't think we want to beforeExecuteTime and jobRunStartTime either - that should always be the case (job should always have started just on or later than the test start). What I really wanted to do here is jobRunEndTime.equals(jobRunStartTime) || jobRunEndTime.isAfter(jobRunStartTime) - makes sense? Now so done. Please do ask if unclear!", "url": "https://github.com/apache/fineract/pull/817#discussion_r428772082", "createdAt": "2020-05-21T16:36:25Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/common/SchedulerJobHelper.java", "diffHunk": "@@ -122,45 +139,112 @@ private static String runSchedulerJobAsJSON() {\n         return runSchedulerJob;\n     }\n \n-    public void executeJob(String jobName) throws InterruptedException {\n-        List<Map> allSchedulerJobsData = getAllSchedulerJobs();\n-        Assert.assertNotNull(allSchedulerJobsData);\n-\n+    private int getSchedulerJobIdByName(String jobName) {\n+        List<Map<String, Object>> allSchedulerJobsData = getAllSchedulerJobs();\n         for (Integer jobIndex = 0; jobIndex < allSchedulerJobsData.size(); jobIndex++) {\n             if (allSchedulerJobsData.get(jobIndex).get(\"displayName\").equals(jobName)) {\n-                Integer jobId = (Integer) allSchedulerJobsData.get(jobIndex).get(\"jobId\");\n+                return (Integer) allSchedulerJobsData.get(jobIndex).get(\"jobId\");\n+            }\n+        }\n+        throw new IllegalArgumentException(\"No such named Job (see org.apache.fineract.infrastructure.jobs.service.JobName enum):\" + jobName);\n+    }\n \n-                // Executing Scheduler Job\n-                runSchedulerJob(this.requestSpec, jobId.toString());\n+    @Deprecated // FINERACT-922 TODO Gradually replace use of this method with new executeAndAwaitJob() below, if it proves to be more stable than this one\n+    public void executeJob(String jobName) throws InterruptedException {\n+        // Stop the Scheduler while we manually trigger execution of job, to avoid side effects and simplify debugging when readings logs\n+        updateSchedulerStatus(false);\n+\n+        int jobId = getSchedulerJobIdByName(jobName);\n \n-                // Retrieving Scheduler Job by ID\n-                Map schedulerJob = getSchedulerJobById(jobId);\n-                Assert.assertNotNull(schedulerJob);\n+        // Executing Scheduler Job\n+        runSchedulerJob(jobId);\n \n-                // Waiting for Job to complete\n-                while ((Boolean) schedulerJob.get(\"currentlyRunning\") == true) {\n-                    Thread.sleep(15000);\n-                    schedulerJob = getSchedulerJobById(jobId);\n-                    Assert.assertNotNull(schedulerJob);\n-                    System.out.println(\"Job is Still Running\");\n-                }\n+        // Retrieving Scheduler Job by ID\n+        Map<String, Object> schedulerJob = getSchedulerJobById(jobId);\n \n-                List<Map> jobHistoryData = getSchedulerJobHistory(jobId);\n+        // Waiting for Job to complete\n+        while ((Boolean) schedulerJob.get(\"currentlyRunning\") == true) {\n+            Thread.sleep(15000);\n+            schedulerJob = getSchedulerJobById(jobId);\n+            assertNotNull(schedulerJob);\n+            System.out.println(\"Job is Still Running\");\n+        }\n \n-                Assert.assertFalse(\"Job History is empty :(  Was it too slow? Failures in background job?\", jobHistoryData.isEmpty());\n+        List<Map<String, Object>> jobHistoryData = getSchedulerJobHistory(jobId);\n \n-                // print error associated with recent job failure (if any)\n-                System.out.println(\"Job run error message (printed only if the job fails: \"\n-                        + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorMessage\"));\n-                System.out.println(\"Job failure error log (printed only if the job fails: \"\n-                        + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorLog\"));\n+        assertFalse(\"Job History is empty :(  Was it too slow? Failures in background job?\", jobHistoryData.isEmpty());\n \n-                // Verifying the Status of the Recently executed Scheduler Job\n-                Assert.assertEquals(\"Verifying Last Scheduler Job Status\", \"success\",\n-                        jobHistoryData.get(jobHistoryData.size() - 1).get(\"status\"));\n+        // print error associated with recent job failure (if any)\n+        System.out.println(\"Job run error message (printed only if the job fails: \"\n+                + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorMessage\"));\n+        System.out.println(\"Job failure error log (printed only if the job fails: \"\n+                + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorLog\"));\n+\n+        // Verifying the Status of the Recently executed Scheduler Job\n+        assertEquals(\"Verifying Last Scheduler Job Status\", \"success\",\n+                jobHistoryData.get(jobHistoryData.size() - 1).get(\"status\"));\n+    }\n \n-                break;\n+    /**\n+     * Launches a Job and awaits its completion.\n+     * @param jobName displayName (see {@link org.apache.fineract.infrastructure.jobs.service.JobName}) of Scheduler Job\n+     *\n+     * @author Michael Vorburger.ch\n+     */\n+    public void executeAndAwaitJob(String jobName) {\n+        Duration TIMEOUT = Duration.ofSeconds(30);\n+        Duration PAUSE = Duration.ofMillis(500);\n+        DateTimeFormatter df = DateTimeFormatter.ISO_INSTANT; // FINERACT-926\n+        Instant beforeExecuteTime = now().truncatedTo(ChronoUnit.SECONDS);\n+\n+        // Stop the Scheduler while we manually trigger execution of job, to avoid side effects and simplify debugging when readings logs\n+        updateSchedulerStatus(false);\n+\n+        // Executing Scheduler Job\n+        int jobId = getSchedulerJobIdByName(jobName);\n+        runSchedulerJob(jobId);\n+\n+        // Await JobDetailData.lastRunHistory [JobDetailHistoryData] jobRunStartTime >= beforeExecuteTime (or timeout)\n+        await().atMost(TIMEOUT).pollInterval(PAUSE).until(jobLastRunHistorySupplier(jobId), lastRunHistory -> {\n+            String jobRunStartText = lastRunHistory.get(\"jobRunStartTime\");\n+            if (jobRunStartText == null) {\n+                return false;\n             }\n+            Instant jobRunStartTime = df.parse(jobRunStartText, Instant::from);\n+            return jobRunStartTime.equals(jobRunStartTime) || jobRunStartTime.isAfter(beforeExecuteTime);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNjkxMg=="}, "originalCommit": null, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgyODI4Mw==", "bodyText": "@vorburger I think the second check (row 228) is correct as you state (i.e. jobRunEndTime.equals(jobRunStartTime) || jobRunEndTime.isAfter(jobRunStartTime))\nBut the first check I was commenting on (row 217) would still make most sense to me as:\njobRunStartTime.equals(beforeExecuteTime) || jobRunStartTime.isAfter(beforeExecuteTime)\nin order to make sure that the job has had a chance to start, before we start looking at its history.\nIf we don't do this and go straight to comparing jobRunStartTime and jobRunEndTime, I think there's a risk of hitting the same issue as I observed earlier: i.e. that we started looking for the history before the job even had had a chance to start for this test.\nIn such case we would get the previous execution history of the job, jobRunEndTime would still be >= jobRunStartTime - but this would be the previous run of the job, not the current one we had triggered.\nOr am I missing something here?", "url": "https://github.com/apache/fineract/pull/817#discussion_r428828283", "createdAt": "2020-05-21T18:16:29Z", "author": {"login": "ptuomola"}, "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/common/SchedulerJobHelper.java", "diffHunk": "@@ -122,45 +139,112 @@ private static String runSchedulerJobAsJSON() {\n         return runSchedulerJob;\n     }\n \n-    public void executeJob(String jobName) throws InterruptedException {\n-        List<Map> allSchedulerJobsData = getAllSchedulerJobs();\n-        Assert.assertNotNull(allSchedulerJobsData);\n-\n+    private int getSchedulerJobIdByName(String jobName) {\n+        List<Map<String, Object>> allSchedulerJobsData = getAllSchedulerJobs();\n         for (Integer jobIndex = 0; jobIndex < allSchedulerJobsData.size(); jobIndex++) {\n             if (allSchedulerJobsData.get(jobIndex).get(\"displayName\").equals(jobName)) {\n-                Integer jobId = (Integer) allSchedulerJobsData.get(jobIndex).get(\"jobId\");\n+                return (Integer) allSchedulerJobsData.get(jobIndex).get(\"jobId\");\n+            }\n+        }\n+        throw new IllegalArgumentException(\"No such named Job (see org.apache.fineract.infrastructure.jobs.service.JobName enum):\" + jobName);\n+    }\n \n-                // Executing Scheduler Job\n-                runSchedulerJob(this.requestSpec, jobId.toString());\n+    @Deprecated // FINERACT-922 TODO Gradually replace use of this method with new executeAndAwaitJob() below, if it proves to be more stable than this one\n+    public void executeJob(String jobName) throws InterruptedException {\n+        // Stop the Scheduler while we manually trigger execution of job, to avoid side effects and simplify debugging when readings logs\n+        updateSchedulerStatus(false);\n+\n+        int jobId = getSchedulerJobIdByName(jobName);\n \n-                // Retrieving Scheduler Job by ID\n-                Map schedulerJob = getSchedulerJobById(jobId);\n-                Assert.assertNotNull(schedulerJob);\n+        // Executing Scheduler Job\n+        runSchedulerJob(jobId);\n \n-                // Waiting for Job to complete\n-                while ((Boolean) schedulerJob.get(\"currentlyRunning\") == true) {\n-                    Thread.sleep(15000);\n-                    schedulerJob = getSchedulerJobById(jobId);\n-                    Assert.assertNotNull(schedulerJob);\n-                    System.out.println(\"Job is Still Running\");\n-                }\n+        // Retrieving Scheduler Job by ID\n+        Map<String, Object> schedulerJob = getSchedulerJobById(jobId);\n \n-                List<Map> jobHistoryData = getSchedulerJobHistory(jobId);\n+        // Waiting for Job to complete\n+        while ((Boolean) schedulerJob.get(\"currentlyRunning\") == true) {\n+            Thread.sleep(15000);\n+            schedulerJob = getSchedulerJobById(jobId);\n+            assertNotNull(schedulerJob);\n+            System.out.println(\"Job is Still Running\");\n+        }\n \n-                Assert.assertFalse(\"Job History is empty :(  Was it too slow? Failures in background job?\", jobHistoryData.isEmpty());\n+        List<Map<String, Object>> jobHistoryData = getSchedulerJobHistory(jobId);\n \n-                // print error associated with recent job failure (if any)\n-                System.out.println(\"Job run error message (printed only if the job fails: \"\n-                        + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorMessage\"));\n-                System.out.println(\"Job failure error log (printed only if the job fails: \"\n-                        + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorLog\"));\n+        assertFalse(\"Job History is empty :(  Was it too slow? Failures in background job?\", jobHistoryData.isEmpty());\n \n-                // Verifying the Status of the Recently executed Scheduler Job\n-                Assert.assertEquals(\"Verifying Last Scheduler Job Status\", \"success\",\n-                        jobHistoryData.get(jobHistoryData.size() - 1).get(\"status\"));\n+        // print error associated with recent job failure (if any)\n+        System.out.println(\"Job run error message (printed only if the job fails: \"\n+                + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorMessage\"));\n+        System.out.println(\"Job failure error log (printed only if the job fails: \"\n+                + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorLog\"));\n+\n+        // Verifying the Status of the Recently executed Scheduler Job\n+        assertEquals(\"Verifying Last Scheduler Job Status\", \"success\",\n+                jobHistoryData.get(jobHistoryData.size() - 1).get(\"status\"));\n+    }\n \n-                break;\n+    /**\n+     * Launches a Job and awaits its completion.\n+     * @param jobName displayName (see {@link org.apache.fineract.infrastructure.jobs.service.JobName}) of Scheduler Job\n+     *\n+     * @author Michael Vorburger.ch\n+     */\n+    public void executeAndAwaitJob(String jobName) {\n+        Duration TIMEOUT = Duration.ofSeconds(30);\n+        Duration PAUSE = Duration.ofMillis(500);\n+        DateTimeFormatter df = DateTimeFormatter.ISO_INSTANT; // FINERACT-926\n+        Instant beforeExecuteTime = now().truncatedTo(ChronoUnit.SECONDS);\n+\n+        // Stop the Scheduler while we manually trigger execution of job, to avoid side effects and simplify debugging when readings logs\n+        updateSchedulerStatus(false);\n+\n+        // Executing Scheduler Job\n+        int jobId = getSchedulerJobIdByName(jobName);\n+        runSchedulerJob(jobId);\n+\n+        // Await JobDetailData.lastRunHistory [JobDetailHistoryData] jobRunStartTime >= beforeExecuteTime (or timeout)\n+        await().atMost(TIMEOUT).pollInterval(PAUSE).until(jobLastRunHistorySupplier(jobId), lastRunHistory -> {\n+            String jobRunStartText = lastRunHistory.get(\"jobRunStartTime\");\n+            if (jobRunStartText == null) {\n+                return false;\n             }\n+            Instant jobRunStartTime = df.parse(jobRunStartText, Instant::from);\n+            return jobRunStartTime.equals(jobRunStartTime) || jobRunStartTime.isAfter(beforeExecuteTime);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNjkxMg=="}, "originalCommit": null, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzNjU0Mw==", "bodyText": "No you're not missing anything, I was just looking at the wrong line! Yes, absolutely agree - better now? However this actually now reveals a new real bug! See FINERACT-992... do you happen to have any interest in taking that? Just asking! I'm marking this PR Draft again after all, as we probably have to fix that issue before this can be merged.", "url": "https://github.com/apache/fineract/pull/817#discussion_r428936543", "createdAt": "2020-05-21T21:52:53Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/common/SchedulerJobHelper.java", "diffHunk": "@@ -122,45 +139,112 @@ private static String runSchedulerJobAsJSON() {\n         return runSchedulerJob;\n     }\n \n-    public void executeJob(String jobName) throws InterruptedException {\n-        List<Map> allSchedulerJobsData = getAllSchedulerJobs();\n-        Assert.assertNotNull(allSchedulerJobsData);\n-\n+    private int getSchedulerJobIdByName(String jobName) {\n+        List<Map<String, Object>> allSchedulerJobsData = getAllSchedulerJobs();\n         for (Integer jobIndex = 0; jobIndex < allSchedulerJobsData.size(); jobIndex++) {\n             if (allSchedulerJobsData.get(jobIndex).get(\"displayName\").equals(jobName)) {\n-                Integer jobId = (Integer) allSchedulerJobsData.get(jobIndex).get(\"jobId\");\n+                return (Integer) allSchedulerJobsData.get(jobIndex).get(\"jobId\");\n+            }\n+        }\n+        throw new IllegalArgumentException(\"No such named Job (see org.apache.fineract.infrastructure.jobs.service.JobName enum):\" + jobName);\n+    }\n \n-                // Executing Scheduler Job\n-                runSchedulerJob(this.requestSpec, jobId.toString());\n+    @Deprecated // FINERACT-922 TODO Gradually replace use of this method with new executeAndAwaitJob() below, if it proves to be more stable than this one\n+    public void executeJob(String jobName) throws InterruptedException {\n+        // Stop the Scheduler while we manually trigger execution of job, to avoid side effects and simplify debugging when readings logs\n+        updateSchedulerStatus(false);\n+\n+        int jobId = getSchedulerJobIdByName(jobName);\n \n-                // Retrieving Scheduler Job by ID\n-                Map schedulerJob = getSchedulerJobById(jobId);\n-                Assert.assertNotNull(schedulerJob);\n+        // Executing Scheduler Job\n+        runSchedulerJob(jobId);\n \n-                // Waiting for Job to complete\n-                while ((Boolean) schedulerJob.get(\"currentlyRunning\") == true) {\n-                    Thread.sleep(15000);\n-                    schedulerJob = getSchedulerJobById(jobId);\n-                    Assert.assertNotNull(schedulerJob);\n-                    System.out.println(\"Job is Still Running\");\n-                }\n+        // Retrieving Scheduler Job by ID\n+        Map<String, Object> schedulerJob = getSchedulerJobById(jobId);\n \n-                List<Map> jobHistoryData = getSchedulerJobHistory(jobId);\n+        // Waiting for Job to complete\n+        while ((Boolean) schedulerJob.get(\"currentlyRunning\") == true) {\n+            Thread.sleep(15000);\n+            schedulerJob = getSchedulerJobById(jobId);\n+            assertNotNull(schedulerJob);\n+            System.out.println(\"Job is Still Running\");\n+        }\n \n-                Assert.assertFalse(\"Job History is empty :(  Was it too slow? Failures in background job?\", jobHistoryData.isEmpty());\n+        List<Map<String, Object>> jobHistoryData = getSchedulerJobHistory(jobId);\n \n-                // print error associated with recent job failure (if any)\n-                System.out.println(\"Job run error message (printed only if the job fails: \"\n-                        + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorMessage\"));\n-                System.out.println(\"Job failure error log (printed only if the job fails: \"\n-                        + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorLog\"));\n+        assertFalse(\"Job History is empty :(  Was it too slow? Failures in background job?\", jobHistoryData.isEmpty());\n \n-                // Verifying the Status of the Recently executed Scheduler Job\n-                Assert.assertEquals(\"Verifying Last Scheduler Job Status\", \"success\",\n-                        jobHistoryData.get(jobHistoryData.size() - 1).get(\"status\"));\n+        // print error associated with recent job failure (if any)\n+        System.out.println(\"Job run error message (printed only if the job fails: \"\n+                + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorMessage\"));\n+        System.out.println(\"Job failure error log (printed only if the job fails: \"\n+                + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorLog\"));\n+\n+        // Verifying the Status of the Recently executed Scheduler Job\n+        assertEquals(\"Verifying Last Scheduler Job Status\", \"success\",\n+                jobHistoryData.get(jobHistoryData.size() - 1).get(\"status\"));\n+    }\n \n-                break;\n+    /**\n+     * Launches a Job and awaits its completion.\n+     * @param jobName displayName (see {@link org.apache.fineract.infrastructure.jobs.service.JobName}) of Scheduler Job\n+     *\n+     * @author Michael Vorburger.ch\n+     */\n+    public void executeAndAwaitJob(String jobName) {\n+        Duration TIMEOUT = Duration.ofSeconds(30);\n+        Duration PAUSE = Duration.ofMillis(500);\n+        DateTimeFormatter df = DateTimeFormatter.ISO_INSTANT; // FINERACT-926\n+        Instant beforeExecuteTime = now().truncatedTo(ChronoUnit.SECONDS);\n+\n+        // Stop the Scheduler while we manually trigger execution of job, to avoid side effects and simplify debugging when readings logs\n+        updateSchedulerStatus(false);\n+\n+        // Executing Scheduler Job\n+        int jobId = getSchedulerJobIdByName(jobName);\n+        runSchedulerJob(jobId);\n+\n+        // Await JobDetailData.lastRunHistory [JobDetailHistoryData] jobRunStartTime >= beforeExecuteTime (or timeout)\n+        await().atMost(TIMEOUT).pollInterval(PAUSE).until(jobLastRunHistorySupplier(jobId), lastRunHistory -> {\n+            String jobRunStartText = lastRunHistory.get(\"jobRunStartTime\");\n+            if (jobRunStartText == null) {\n+                return false;\n             }\n+            Instant jobRunStartTime = df.parse(jobRunStartText, Instant::from);\n+            return jobRunStartTime.equals(jobRunStartTime) || jobRunStartTime.isAfter(beforeExecuteTime);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNjkxMg=="}, "originalCommit": null, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2MTE2OQ==", "bodyText": "@ptuomola I'm resolving this because I have just closed  FINERACT-992.\nPlease re-open if NOK for you.", "url": "https://github.com/apache/fineract/pull/817#discussion_r429661169", "createdAt": "2020-05-24T18:11:21Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/common/SchedulerJobHelper.java", "diffHunk": "@@ -122,45 +139,112 @@ private static String runSchedulerJobAsJSON() {\n         return runSchedulerJob;\n     }\n \n-    public void executeJob(String jobName) throws InterruptedException {\n-        List<Map> allSchedulerJobsData = getAllSchedulerJobs();\n-        Assert.assertNotNull(allSchedulerJobsData);\n-\n+    private int getSchedulerJobIdByName(String jobName) {\n+        List<Map<String, Object>> allSchedulerJobsData = getAllSchedulerJobs();\n         for (Integer jobIndex = 0; jobIndex < allSchedulerJobsData.size(); jobIndex++) {\n             if (allSchedulerJobsData.get(jobIndex).get(\"displayName\").equals(jobName)) {\n-                Integer jobId = (Integer) allSchedulerJobsData.get(jobIndex).get(\"jobId\");\n+                return (Integer) allSchedulerJobsData.get(jobIndex).get(\"jobId\");\n+            }\n+        }\n+        throw new IllegalArgumentException(\"No such named Job (see org.apache.fineract.infrastructure.jobs.service.JobName enum):\" + jobName);\n+    }\n \n-                // Executing Scheduler Job\n-                runSchedulerJob(this.requestSpec, jobId.toString());\n+    @Deprecated // FINERACT-922 TODO Gradually replace use of this method with new executeAndAwaitJob() below, if it proves to be more stable than this one\n+    public void executeJob(String jobName) throws InterruptedException {\n+        // Stop the Scheduler while we manually trigger execution of job, to avoid side effects and simplify debugging when readings logs\n+        updateSchedulerStatus(false);\n+\n+        int jobId = getSchedulerJobIdByName(jobName);\n \n-                // Retrieving Scheduler Job by ID\n-                Map schedulerJob = getSchedulerJobById(jobId);\n-                Assert.assertNotNull(schedulerJob);\n+        // Executing Scheduler Job\n+        runSchedulerJob(jobId);\n \n-                // Waiting for Job to complete\n-                while ((Boolean) schedulerJob.get(\"currentlyRunning\") == true) {\n-                    Thread.sleep(15000);\n-                    schedulerJob = getSchedulerJobById(jobId);\n-                    Assert.assertNotNull(schedulerJob);\n-                    System.out.println(\"Job is Still Running\");\n-                }\n+        // Retrieving Scheduler Job by ID\n+        Map<String, Object> schedulerJob = getSchedulerJobById(jobId);\n \n-                List<Map> jobHistoryData = getSchedulerJobHistory(jobId);\n+        // Waiting for Job to complete\n+        while ((Boolean) schedulerJob.get(\"currentlyRunning\") == true) {\n+            Thread.sleep(15000);\n+            schedulerJob = getSchedulerJobById(jobId);\n+            assertNotNull(schedulerJob);\n+            System.out.println(\"Job is Still Running\");\n+        }\n \n-                Assert.assertFalse(\"Job History is empty :(  Was it too slow? Failures in background job?\", jobHistoryData.isEmpty());\n+        List<Map<String, Object>> jobHistoryData = getSchedulerJobHistory(jobId);\n \n-                // print error associated with recent job failure (if any)\n-                System.out.println(\"Job run error message (printed only if the job fails: \"\n-                        + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorMessage\"));\n-                System.out.println(\"Job failure error log (printed only if the job fails: \"\n-                        + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorLog\"));\n+        assertFalse(\"Job History is empty :(  Was it too slow? Failures in background job?\", jobHistoryData.isEmpty());\n \n-                // Verifying the Status of the Recently executed Scheduler Job\n-                Assert.assertEquals(\"Verifying Last Scheduler Job Status\", \"success\",\n-                        jobHistoryData.get(jobHistoryData.size() - 1).get(\"status\"));\n+        // print error associated with recent job failure (if any)\n+        System.out.println(\"Job run error message (printed only if the job fails: \"\n+                + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorMessage\"));\n+        System.out.println(\"Job failure error log (printed only if the job fails: \"\n+                + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorLog\"));\n+\n+        // Verifying the Status of the Recently executed Scheduler Job\n+        assertEquals(\"Verifying Last Scheduler Job Status\", \"success\",\n+                jobHistoryData.get(jobHistoryData.size() - 1).get(\"status\"));\n+    }\n \n-                break;\n+    /**\n+     * Launches a Job and awaits its completion.\n+     * @param jobName displayName (see {@link org.apache.fineract.infrastructure.jobs.service.JobName}) of Scheduler Job\n+     *\n+     * @author Michael Vorburger.ch\n+     */\n+    public void executeAndAwaitJob(String jobName) {\n+        Duration TIMEOUT = Duration.ofSeconds(30);\n+        Duration PAUSE = Duration.ofMillis(500);\n+        DateTimeFormatter df = DateTimeFormatter.ISO_INSTANT; // FINERACT-926\n+        Instant beforeExecuteTime = now().truncatedTo(ChronoUnit.SECONDS);\n+\n+        // Stop the Scheduler while we manually trigger execution of job, to avoid side effects and simplify debugging when readings logs\n+        updateSchedulerStatus(false);\n+\n+        // Executing Scheduler Job\n+        int jobId = getSchedulerJobIdByName(jobName);\n+        runSchedulerJob(jobId);\n+\n+        // Await JobDetailData.lastRunHistory [JobDetailHistoryData] jobRunStartTime >= beforeExecuteTime (or timeout)\n+        await().atMost(TIMEOUT).pollInterval(PAUSE).until(jobLastRunHistorySupplier(jobId), lastRunHistory -> {\n+            String jobRunStartText = lastRunHistory.get(\"jobRunStartTime\");\n+            if (jobRunStartText == null) {\n+                return false;\n             }\n+            Instant jobRunStartTime = df.parse(jobRunStartText, Instant::from);\n+            return jobRunStartTime.equals(jobRunStartTime) || jobRunStartTime.isAfter(beforeExecuteTime);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNjkxMg=="}, "originalCommit": null, "originalPosition": 193}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDMxNzU4OnYy", "diffSide": "LEFT", "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/common/SchedulerJobHelper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNDo0OTo0NVrOGWeOSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMzo0NTo1M1rOGZJyCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNzAzNQ==", "bodyText": "Just a cosmetic comment: with this, the logging from the different requests is not uniform. All the other calls log the \"---  ---\" text, this one logs the response. Is there a reason for this?", "url": "https://github.com/apache/fineract/pull/817#discussion_r426217035", "createdAt": "2020-05-17T04:49:45Z", "author": {"login": "ptuomola"}, "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/common/SchedulerJobHelper.java", "diffHunk": "@@ -51,21 +60,28 @@ public SchedulerJobHelper(final RequestSpecification requestSpec, final Response\n         this.response202Spec = responseSpec;\n     }\n \n-    private List getAllSchedulerJobs() {\n+    private List<Map<String, Object>> getAllSchedulerJobs() {\n         final String GET_ALL_SCHEDULER_JOBS_URL = \"/fineract-provider/api/v1/jobs?\" + Utils.TENANT_IDENTIFIER;\n         System.out.println(\"------------------------ RETRIEVING ALL SCHEDULER JOBS -------------------------\");\n-        final ArrayList response = Utils.performServerGet(requestSpec, response200Spec, GET_ALL_SCHEDULER_JOBS_URL, \"\");\n+        List<Map<String, Object>> response = Utils.performServerGet(requestSpec, response200Spec, GET_ALL_SCHEDULER_JOBS_URL, \"\");\n+        assertNotNull(response);\n         return response;\n     }\n \n+    private <T> List<T> getAllSchedulerJobDetails(Function<Map<String, Object>, T> mapper) {\n+        return getAllSchedulerJobs().stream().map(mapper).collect(Collectors.toList());\n+    }\n+\n     public List<Integer> getAllSchedulerJobIds() {\n-        ToIntFunction<Map> mapper = map -> (Integer) map.get(\"jobId\");\n-        return getAllSchedulerJobs().stream().mapToInt(mapper).boxed().collect(Collectors.toList());\n+        return getAllSchedulerJobDetails(map -> (Integer) map.get(\"jobId\"));\n+    }\n+\n+    public List<String> getAllSchedulerJobNames() {\n+        return getAllSchedulerJobDetails(map -> (String) map.get(\"displayName\"));\n     }\n \n     public Map<String, Object> getSchedulerJobById(int jobId) {\n         final String GET_SCHEDULER_JOB_BY_ID_URL = \"/fineract-provider/api/v1/jobs/\" + jobId + \"?\" + Utils.TENANT_IDENTIFIER;\n-        System.out.println(\"------------------------ RETRIEVING SCHEDULER JOB BY ID -------------------------\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzNjcyOQ==", "bodyText": "It's just something that was useful while debugging.. as it's a test, let's keep it, if you don't mind. OK to resolve this point?", "url": "https://github.com/apache/fineract/pull/817#discussion_r428936729", "createdAt": "2020-05-21T21:53:18Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/common/SchedulerJobHelper.java", "diffHunk": "@@ -51,21 +60,28 @@ public SchedulerJobHelper(final RequestSpecification requestSpec, final Response\n         this.response202Spec = responseSpec;\n     }\n \n-    private List getAllSchedulerJobs() {\n+    private List<Map<String, Object>> getAllSchedulerJobs() {\n         final String GET_ALL_SCHEDULER_JOBS_URL = \"/fineract-provider/api/v1/jobs?\" + Utils.TENANT_IDENTIFIER;\n         System.out.println(\"------------------------ RETRIEVING ALL SCHEDULER JOBS -------------------------\");\n-        final ArrayList response = Utils.performServerGet(requestSpec, response200Spec, GET_ALL_SCHEDULER_JOBS_URL, \"\");\n+        List<Map<String, Object>> response = Utils.performServerGet(requestSpec, response200Spec, GET_ALL_SCHEDULER_JOBS_URL, \"\");\n+        assertNotNull(response);\n         return response;\n     }\n \n+    private <T> List<T> getAllSchedulerJobDetails(Function<Map<String, Object>, T> mapper) {\n+        return getAllSchedulerJobs().stream().map(mapper).collect(Collectors.toList());\n+    }\n+\n     public List<Integer> getAllSchedulerJobIds() {\n-        ToIntFunction<Map> mapper = map -> (Integer) map.get(\"jobId\");\n-        return getAllSchedulerJobs().stream().mapToInt(mapper).boxed().collect(Collectors.toList());\n+        return getAllSchedulerJobDetails(map -> (Integer) map.get(\"jobId\"));\n+    }\n+\n+    public List<String> getAllSchedulerJobNames() {\n+        return getAllSchedulerJobDetails(map -> (String) map.get(\"displayName\"));\n     }\n \n     public Map<String, Object> getSchedulerJobById(int jobId) {\n         final String GET_SCHEDULER_JOB_BY_ID_URL = \"/fineract-provider/api/v1/jobs/\" + jobId + \"?\" + Utils.TENANT_IDENTIFIER;\n-        System.out.println(\"------------------------ RETRIEVING SCHEDULER JOB BY ID -------------------------\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNzAzNQ=="}, "originalCommit": null, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyNzg0OA==", "bodyText": "Yep - OK to resolve.", "url": "https://github.com/apache/fineract/pull/817#discussion_r429027848", "createdAt": "2020-05-22T03:45:53Z", "author": {"login": "ptuomola"}, "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/common/SchedulerJobHelper.java", "diffHunk": "@@ -51,21 +60,28 @@ public SchedulerJobHelper(final RequestSpecification requestSpec, final Response\n         this.response202Spec = responseSpec;\n     }\n \n-    private List getAllSchedulerJobs() {\n+    private List<Map<String, Object>> getAllSchedulerJobs() {\n         final String GET_ALL_SCHEDULER_JOBS_URL = \"/fineract-provider/api/v1/jobs?\" + Utils.TENANT_IDENTIFIER;\n         System.out.println(\"------------------------ RETRIEVING ALL SCHEDULER JOBS -------------------------\");\n-        final ArrayList response = Utils.performServerGet(requestSpec, response200Spec, GET_ALL_SCHEDULER_JOBS_URL, \"\");\n+        List<Map<String, Object>> response = Utils.performServerGet(requestSpec, response200Spec, GET_ALL_SCHEDULER_JOBS_URL, \"\");\n+        assertNotNull(response);\n         return response;\n     }\n \n+    private <T> List<T> getAllSchedulerJobDetails(Function<Map<String, Object>, T> mapper) {\n+        return getAllSchedulerJobs().stream().map(mapper).collect(Collectors.toList());\n+    }\n+\n     public List<Integer> getAllSchedulerJobIds() {\n-        ToIntFunction<Map> mapper = map -> (Integer) map.get(\"jobId\");\n-        return getAllSchedulerJobs().stream().mapToInt(mapper).boxed().collect(Collectors.toList());\n+        return getAllSchedulerJobDetails(map -> (Integer) map.get(\"jobId\"));\n+    }\n+\n+    public List<String> getAllSchedulerJobNames() {\n+        return getAllSchedulerJobDetails(map -> (String) map.get(\"displayName\"));\n     }\n \n     public Map<String, Object> getSchedulerJobById(int jobId) {\n         final String GET_SCHEDULER_JOB_BY_ID_URL = \"/fineract-provider/api/v1/jobs/\" + jobId + \"?\" + Utils.TENANT_IDENTIFIER;\n-        System.out.println(\"------------------------ RETRIEVING SCHEDULER JOB BY ID -------------------------\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNzAzNQ=="}, "originalCommit": null, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDMxODM2OnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/common/SchedulerJobHelper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNDo1MDo0NFrOGWeOoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMzo0NToxOFrOGZJxeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNzEyMA==", "bodyText": "Should we not just replace the old implementation with the new, and skip with the gradual transition? Or are there concerns that the new one may not work in some cases?", "url": "https://github.com/apache/fineract/pull/817#discussion_r426217120", "createdAt": "2020-05-17T04:50:44Z", "author": {"login": "ptuomola"}, "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/common/SchedulerJobHelper.java", "diffHunk": "@@ -122,45 +139,112 @@ private static String runSchedulerJobAsJSON() {\n         return runSchedulerJob;\n     }\n \n-    public void executeJob(String jobName) throws InterruptedException {\n-        List<Map> allSchedulerJobsData = getAllSchedulerJobs();\n-        Assert.assertNotNull(allSchedulerJobsData);\n-\n+    private int getSchedulerJobIdByName(String jobName) {\n+        List<Map<String, Object>> allSchedulerJobsData = getAllSchedulerJobs();\n         for (Integer jobIndex = 0; jobIndex < allSchedulerJobsData.size(); jobIndex++) {\n             if (allSchedulerJobsData.get(jobIndex).get(\"displayName\").equals(jobName)) {\n-                Integer jobId = (Integer) allSchedulerJobsData.get(jobIndex).get(\"jobId\");\n+                return (Integer) allSchedulerJobsData.get(jobIndex).get(\"jobId\");\n+            }\n+        }\n+        throw new IllegalArgumentException(\"No such named Job (see org.apache.fineract.infrastructure.jobs.service.JobName enum):\" + jobName);\n+    }\n \n-                // Executing Scheduler Job\n-                runSchedulerJob(this.requestSpec, jobId.toString());\n+    @Deprecated // FINERACT-922 TODO Gradually replace use of this method with new executeAndAwaitJob() below, if it proves to be more stable than this one", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzNjg2NQ==", "bodyText": "When I tried that while originally creating this, it didn't \"just work\" yet, so I wanted to get this in, and then more gradually attempt to \"switch over\", one by one, and further investigate related problems. Wanna help? \ud83d\ude3a OK to resolve this point?", "url": "https://github.com/apache/fineract/pull/817#discussion_r428936865", "createdAt": "2020-05-21T21:53:39Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/common/SchedulerJobHelper.java", "diffHunk": "@@ -122,45 +139,112 @@ private static String runSchedulerJobAsJSON() {\n         return runSchedulerJob;\n     }\n \n-    public void executeJob(String jobName) throws InterruptedException {\n-        List<Map> allSchedulerJobsData = getAllSchedulerJobs();\n-        Assert.assertNotNull(allSchedulerJobsData);\n-\n+    private int getSchedulerJobIdByName(String jobName) {\n+        List<Map<String, Object>> allSchedulerJobsData = getAllSchedulerJobs();\n         for (Integer jobIndex = 0; jobIndex < allSchedulerJobsData.size(); jobIndex++) {\n             if (allSchedulerJobsData.get(jobIndex).get(\"displayName\").equals(jobName)) {\n-                Integer jobId = (Integer) allSchedulerJobsData.get(jobIndex).get(\"jobId\");\n+                return (Integer) allSchedulerJobsData.get(jobIndex).get(\"jobId\");\n+            }\n+        }\n+        throw new IllegalArgumentException(\"No such named Job (see org.apache.fineract.infrastructure.jobs.service.JobName enum):\" + jobName);\n+    }\n \n-                // Executing Scheduler Job\n-                runSchedulerJob(this.requestSpec, jobId.toString());\n+    @Deprecated // FINERACT-922 TODO Gradually replace use of this method with new executeAndAwaitJob() below, if it proves to be more stable than this one", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNzEyMA=="}, "originalCommit": null, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyNzcwNQ==", "bodyText": "Sounds good - OK to resolve.", "url": "https://github.com/apache/fineract/pull/817#discussion_r429027705", "createdAt": "2020-05-22T03:45:18Z", "author": {"login": "ptuomola"}, "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/common/SchedulerJobHelper.java", "diffHunk": "@@ -122,45 +139,112 @@ private static String runSchedulerJobAsJSON() {\n         return runSchedulerJob;\n     }\n \n-    public void executeJob(String jobName) throws InterruptedException {\n-        List<Map> allSchedulerJobsData = getAllSchedulerJobs();\n-        Assert.assertNotNull(allSchedulerJobsData);\n-\n+    private int getSchedulerJobIdByName(String jobName) {\n+        List<Map<String, Object>> allSchedulerJobsData = getAllSchedulerJobs();\n         for (Integer jobIndex = 0; jobIndex < allSchedulerJobsData.size(); jobIndex++) {\n             if (allSchedulerJobsData.get(jobIndex).get(\"displayName\").equals(jobName)) {\n-                Integer jobId = (Integer) allSchedulerJobsData.get(jobIndex).get(\"jobId\");\n+                return (Integer) allSchedulerJobsData.get(jobIndex).get(\"jobId\");\n+            }\n+        }\n+        throw new IllegalArgumentException(\"No such named Job (see org.apache.fineract.infrastructure.jobs.service.JobName enum):\" + jobName);\n+    }\n \n-                // Executing Scheduler Job\n-                runSchedulerJob(this.requestSpec, jobId.toString());\n+    @Deprecated // FINERACT-922 TODO Gradually replace use of this method with new executeAndAwaitJob() below, if it proves to be more stable than this one", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNzEyMA=="}, "originalCommit": null, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDMyMjc1OnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/common/SchedulerJobHelper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNTowMTo1N1rOGWeQxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMzo0NDo0NVrOGZJxBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNzY2OA==", "bodyText": "Would be great to get rid of the SuppressWarnings... I wonder if there's any clever solution to achieve that?", "url": "https://github.com/apache/fineract/pull/817#discussion_r426217668", "createdAt": "2020-05-17T05:01:57Z", "author": {"login": "ptuomola"}, "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/common/SchedulerJobHelper.java", "diffHunk": "@@ -122,45 +139,112 @@ private static String runSchedulerJobAsJSON() {\n         return runSchedulerJob;\n     }\n \n-    public void executeJob(String jobName) throws InterruptedException {\n-        List<Map> allSchedulerJobsData = getAllSchedulerJobs();\n-        Assert.assertNotNull(allSchedulerJobsData);\n-\n+    private int getSchedulerJobIdByName(String jobName) {\n+        List<Map<String, Object>> allSchedulerJobsData = getAllSchedulerJobs();\n         for (Integer jobIndex = 0; jobIndex < allSchedulerJobsData.size(); jobIndex++) {\n             if (allSchedulerJobsData.get(jobIndex).get(\"displayName\").equals(jobName)) {\n-                Integer jobId = (Integer) allSchedulerJobsData.get(jobIndex).get(\"jobId\");\n+                return (Integer) allSchedulerJobsData.get(jobIndex).get(\"jobId\");\n+            }\n+        }\n+        throw new IllegalArgumentException(\"No such named Job (see org.apache.fineract.infrastructure.jobs.service.JobName enum):\" + jobName);\n+    }\n \n-                // Executing Scheduler Job\n-                runSchedulerJob(this.requestSpec, jobId.toString());\n+    @Deprecated // FINERACT-922 TODO Gradually replace use of this method with new executeAndAwaitJob() below, if it proves to be more stable than this one\n+    public void executeJob(String jobName) throws InterruptedException {\n+        // Stop the Scheduler while we manually trigger execution of job, to avoid side effects and simplify debugging when readings logs\n+        updateSchedulerStatus(false);\n+\n+        int jobId = getSchedulerJobIdByName(jobName);\n \n-                // Retrieving Scheduler Job by ID\n-                Map schedulerJob = getSchedulerJobById(jobId);\n-                Assert.assertNotNull(schedulerJob);\n+        // Executing Scheduler Job\n+        runSchedulerJob(jobId);\n \n-                // Waiting for Job to complete\n-                while ((Boolean) schedulerJob.get(\"currentlyRunning\") == true) {\n-                    Thread.sleep(15000);\n-                    schedulerJob = getSchedulerJobById(jobId);\n-                    Assert.assertNotNull(schedulerJob);\n-                    System.out.println(\"Job is Still Running\");\n-                }\n+        // Retrieving Scheduler Job by ID\n+        Map<String, Object> schedulerJob = getSchedulerJobById(jobId);\n \n-                List<Map> jobHistoryData = getSchedulerJobHistory(jobId);\n+        // Waiting for Job to complete\n+        while ((Boolean) schedulerJob.get(\"currentlyRunning\") == true) {\n+            Thread.sleep(15000);\n+            schedulerJob = getSchedulerJobById(jobId);\n+            assertNotNull(schedulerJob);\n+            System.out.println(\"Job is Still Running\");\n+        }\n \n-                Assert.assertFalse(\"Job History is empty :(  Was it too slow? Failures in background job?\", jobHistoryData.isEmpty());\n+        List<Map<String, Object>> jobHistoryData = getSchedulerJobHistory(jobId);\n \n-                // print error associated with recent job failure (if any)\n-                System.out.println(\"Job run error message (printed only if the job fails: \"\n-                        + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorMessage\"));\n-                System.out.println(\"Job failure error log (printed only if the job fails: \"\n-                        + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorLog\"));\n+        assertFalse(\"Job History is empty :(  Was it too slow? Failures in background job?\", jobHistoryData.isEmpty());\n \n-                // Verifying the Status of the Recently executed Scheduler Job\n-                Assert.assertEquals(\"Verifying Last Scheduler Job Status\", \"success\",\n-                        jobHistoryData.get(jobHistoryData.size() - 1).get(\"status\"));\n+        // print error associated with recent job failure (if any)\n+        System.out.println(\"Job run error message (printed only if the job fails: \"\n+                + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorMessage\"));\n+        System.out.println(\"Job failure error log (printed only if the job fails: \"\n+                + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorLog\"));\n+\n+        // Verifying the Status of the Recently executed Scheduler Job\n+        assertEquals(\"Verifying Last Scheduler Job Status\", \"success\",\n+                jobHistoryData.get(jobHistoryData.size() - 1).get(\"status\"));\n+    }\n \n-                break;\n+    /**\n+     * Launches a Job and awaits its completion.\n+     * @param jobName displayName (see {@link org.apache.fineract.infrastructure.jobs.service.JobName}) of Scheduler Job\n+     *\n+     * @author Michael Vorburger.ch\n+     */\n+    public void executeAndAwaitJob(String jobName) {\n+        Duration TIMEOUT = Duration.ofSeconds(30);\n+        Duration PAUSE = Duration.ofMillis(500);\n+        DateTimeFormatter df = DateTimeFormatter.ISO_INSTANT; // FINERACT-926\n+        Instant beforeExecuteTime = now().truncatedTo(ChronoUnit.SECONDS);\n+\n+        // Stop the Scheduler while we manually trigger execution of job, to avoid side effects and simplify debugging when readings logs\n+        updateSchedulerStatus(false);\n+\n+        // Executing Scheduler Job\n+        int jobId = getSchedulerJobIdByName(jobName);\n+        runSchedulerJob(jobId);\n+\n+        // Await JobDetailData.lastRunHistory [JobDetailHistoryData] jobRunStartTime >= beforeExecuteTime (or timeout)\n+        await().atMost(TIMEOUT).pollInterval(PAUSE).until(jobLastRunHistorySupplier(jobId), lastRunHistory -> {\n+            String jobRunStartText = lastRunHistory.get(\"jobRunStartTime\");\n+            if (jobRunStartText == null) {\n+                return false;\n             }\n+            Instant jobRunStartTime = df.parse(jobRunStartText, Instant::from);\n+            return jobRunStartTime.equals(jobRunStartTime) || jobRunStartTime.isAfter(beforeExecuteTime);\n+        });\n+\n+        // Await JobDetailData.lastRunHistory [JobDetailHistoryData] jobRunEndTime to be both set and >= jobRunStartTime (or timeout)\n+        Map<String, String> finalLastRunHistory = await().atMost(TIMEOUT).pollInterval(PAUSE).until(jobLastRunHistorySupplier(jobId), lastRunHistory -> {\n+            String jobRunEndText = lastRunHistory.get(\"jobRunEndTime\");\n+            if (jobRunEndText == null) {\n+                return false;\n+            }\n+            Instant jobRunEndTime = df.parse(jobRunEndText, Instant::from);\n+            Instant jobRunStartTime = df.parse(lastRunHistory.get(\"jobRunStartTime\"), Instant::from);\n+            return jobRunEndTime.equals(jobRunStartTime) || jobRunEndTime.isAfter(jobRunStartTime);\n+        });\n+\n+        // Verify triggerType\n+        assertThat(finalLastRunHistory.get(\"triggerType\"), is(\"application\"));\n+\n+        // Verify status & propagate jobRunErrorMessage and/or jobRunErrorLog (if any)\n+        String status = finalLastRunHistory.get(\"status\");\n+        if (!status.equals(\"success\")) {\n+            fail(\"Job status is not success: \" + finalLastRunHistory.toString());\n         }\n+\n+        // PS: Checking getSchedulerJobHistory() [/runhistory] is pointless, because the lastRunHistory JobDetailHistoryData is already part of JobDetailData anyway.\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 219}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzNjg1Mg==", "bodyText": "As far as I can see, no, not easily unfortunately. Why? Vaguely related to what I blabbered on about in FINERACT-949 re. JSON mapping. I do want to think further about that some fine day, but not as part of this PR. OK to resolve this point?", "url": "https://github.com/apache/fineract/pull/817#discussion_r428936852", "createdAt": "2020-05-21T21:53:38Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/common/SchedulerJobHelper.java", "diffHunk": "@@ -122,45 +139,112 @@ private static String runSchedulerJobAsJSON() {\n         return runSchedulerJob;\n     }\n \n-    public void executeJob(String jobName) throws InterruptedException {\n-        List<Map> allSchedulerJobsData = getAllSchedulerJobs();\n-        Assert.assertNotNull(allSchedulerJobsData);\n-\n+    private int getSchedulerJobIdByName(String jobName) {\n+        List<Map<String, Object>> allSchedulerJobsData = getAllSchedulerJobs();\n         for (Integer jobIndex = 0; jobIndex < allSchedulerJobsData.size(); jobIndex++) {\n             if (allSchedulerJobsData.get(jobIndex).get(\"displayName\").equals(jobName)) {\n-                Integer jobId = (Integer) allSchedulerJobsData.get(jobIndex).get(\"jobId\");\n+                return (Integer) allSchedulerJobsData.get(jobIndex).get(\"jobId\");\n+            }\n+        }\n+        throw new IllegalArgumentException(\"No such named Job (see org.apache.fineract.infrastructure.jobs.service.JobName enum):\" + jobName);\n+    }\n \n-                // Executing Scheduler Job\n-                runSchedulerJob(this.requestSpec, jobId.toString());\n+    @Deprecated // FINERACT-922 TODO Gradually replace use of this method with new executeAndAwaitJob() below, if it proves to be more stable than this one\n+    public void executeJob(String jobName) throws InterruptedException {\n+        // Stop the Scheduler while we manually trigger execution of job, to avoid side effects and simplify debugging when readings logs\n+        updateSchedulerStatus(false);\n+\n+        int jobId = getSchedulerJobIdByName(jobName);\n \n-                // Retrieving Scheduler Job by ID\n-                Map schedulerJob = getSchedulerJobById(jobId);\n-                Assert.assertNotNull(schedulerJob);\n+        // Executing Scheduler Job\n+        runSchedulerJob(jobId);\n \n-                // Waiting for Job to complete\n-                while ((Boolean) schedulerJob.get(\"currentlyRunning\") == true) {\n-                    Thread.sleep(15000);\n-                    schedulerJob = getSchedulerJobById(jobId);\n-                    Assert.assertNotNull(schedulerJob);\n-                    System.out.println(\"Job is Still Running\");\n-                }\n+        // Retrieving Scheduler Job by ID\n+        Map<String, Object> schedulerJob = getSchedulerJobById(jobId);\n \n-                List<Map> jobHistoryData = getSchedulerJobHistory(jobId);\n+        // Waiting for Job to complete\n+        while ((Boolean) schedulerJob.get(\"currentlyRunning\") == true) {\n+            Thread.sleep(15000);\n+            schedulerJob = getSchedulerJobById(jobId);\n+            assertNotNull(schedulerJob);\n+            System.out.println(\"Job is Still Running\");\n+        }\n \n-                Assert.assertFalse(\"Job History is empty :(  Was it too slow? Failures in background job?\", jobHistoryData.isEmpty());\n+        List<Map<String, Object>> jobHistoryData = getSchedulerJobHistory(jobId);\n \n-                // print error associated with recent job failure (if any)\n-                System.out.println(\"Job run error message (printed only if the job fails: \"\n-                        + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorMessage\"));\n-                System.out.println(\"Job failure error log (printed only if the job fails: \"\n-                        + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorLog\"));\n+        assertFalse(\"Job History is empty :(  Was it too slow? Failures in background job?\", jobHistoryData.isEmpty());\n \n-                // Verifying the Status of the Recently executed Scheduler Job\n-                Assert.assertEquals(\"Verifying Last Scheduler Job Status\", \"success\",\n-                        jobHistoryData.get(jobHistoryData.size() - 1).get(\"status\"));\n+        // print error associated with recent job failure (if any)\n+        System.out.println(\"Job run error message (printed only if the job fails: \"\n+                + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorMessage\"));\n+        System.out.println(\"Job failure error log (printed only if the job fails: \"\n+                + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorLog\"));\n+\n+        // Verifying the Status of the Recently executed Scheduler Job\n+        assertEquals(\"Verifying Last Scheduler Job Status\", \"success\",\n+                jobHistoryData.get(jobHistoryData.size() - 1).get(\"status\"));\n+    }\n \n-                break;\n+    /**\n+     * Launches a Job and awaits its completion.\n+     * @param jobName displayName (see {@link org.apache.fineract.infrastructure.jobs.service.JobName}) of Scheduler Job\n+     *\n+     * @author Michael Vorburger.ch\n+     */\n+    public void executeAndAwaitJob(String jobName) {\n+        Duration TIMEOUT = Duration.ofSeconds(30);\n+        Duration PAUSE = Duration.ofMillis(500);\n+        DateTimeFormatter df = DateTimeFormatter.ISO_INSTANT; // FINERACT-926\n+        Instant beforeExecuteTime = now().truncatedTo(ChronoUnit.SECONDS);\n+\n+        // Stop the Scheduler while we manually trigger execution of job, to avoid side effects and simplify debugging when readings logs\n+        updateSchedulerStatus(false);\n+\n+        // Executing Scheduler Job\n+        int jobId = getSchedulerJobIdByName(jobName);\n+        runSchedulerJob(jobId);\n+\n+        // Await JobDetailData.lastRunHistory [JobDetailHistoryData] jobRunStartTime >= beforeExecuteTime (or timeout)\n+        await().atMost(TIMEOUT).pollInterval(PAUSE).until(jobLastRunHistorySupplier(jobId), lastRunHistory -> {\n+            String jobRunStartText = lastRunHistory.get(\"jobRunStartTime\");\n+            if (jobRunStartText == null) {\n+                return false;\n             }\n+            Instant jobRunStartTime = df.parse(jobRunStartText, Instant::from);\n+            return jobRunStartTime.equals(jobRunStartTime) || jobRunStartTime.isAfter(beforeExecuteTime);\n+        });\n+\n+        // Await JobDetailData.lastRunHistory [JobDetailHistoryData] jobRunEndTime to be both set and >= jobRunStartTime (or timeout)\n+        Map<String, String> finalLastRunHistory = await().atMost(TIMEOUT).pollInterval(PAUSE).until(jobLastRunHistorySupplier(jobId), lastRunHistory -> {\n+            String jobRunEndText = lastRunHistory.get(\"jobRunEndTime\");\n+            if (jobRunEndText == null) {\n+                return false;\n+            }\n+            Instant jobRunEndTime = df.parse(jobRunEndText, Instant::from);\n+            Instant jobRunStartTime = df.parse(lastRunHistory.get(\"jobRunStartTime\"), Instant::from);\n+            return jobRunEndTime.equals(jobRunStartTime) || jobRunEndTime.isAfter(jobRunStartTime);\n+        });\n+\n+        // Verify triggerType\n+        assertThat(finalLastRunHistory.get(\"triggerType\"), is(\"application\"));\n+\n+        // Verify status & propagate jobRunErrorMessage and/or jobRunErrorLog (if any)\n+        String status = finalLastRunHistory.get(\"status\");\n+        if (!status.equals(\"success\")) {\n+            fail(\"Job status is not success: \" + finalLastRunHistory.toString());\n         }\n+\n+        // PS: Checking getSchedulerJobHistory() [/runhistory] is pointless, because the lastRunHistory JobDetailHistoryData is already part of JobDetailData anyway.\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNzY2OA=="}, "originalCommit": null, "originalPosition": 219}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyNzU5MA==", "bodyText": "Of course - makes sense. One solution that I thought could work for FINERACT-949 in general would be to use the responseSpec for checking response correctness (instead of looking at return values). But let's continue the discussion under that issue. So OK to resolve.", "url": "https://github.com/apache/fineract/pull/817#discussion_r429027590", "createdAt": "2020-05-22T03:44:45Z", "author": {"login": "ptuomola"}, "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/common/SchedulerJobHelper.java", "diffHunk": "@@ -122,45 +139,112 @@ private static String runSchedulerJobAsJSON() {\n         return runSchedulerJob;\n     }\n \n-    public void executeJob(String jobName) throws InterruptedException {\n-        List<Map> allSchedulerJobsData = getAllSchedulerJobs();\n-        Assert.assertNotNull(allSchedulerJobsData);\n-\n+    private int getSchedulerJobIdByName(String jobName) {\n+        List<Map<String, Object>> allSchedulerJobsData = getAllSchedulerJobs();\n         for (Integer jobIndex = 0; jobIndex < allSchedulerJobsData.size(); jobIndex++) {\n             if (allSchedulerJobsData.get(jobIndex).get(\"displayName\").equals(jobName)) {\n-                Integer jobId = (Integer) allSchedulerJobsData.get(jobIndex).get(\"jobId\");\n+                return (Integer) allSchedulerJobsData.get(jobIndex).get(\"jobId\");\n+            }\n+        }\n+        throw new IllegalArgumentException(\"No such named Job (see org.apache.fineract.infrastructure.jobs.service.JobName enum):\" + jobName);\n+    }\n \n-                // Executing Scheduler Job\n-                runSchedulerJob(this.requestSpec, jobId.toString());\n+    @Deprecated // FINERACT-922 TODO Gradually replace use of this method with new executeAndAwaitJob() below, if it proves to be more stable than this one\n+    public void executeJob(String jobName) throws InterruptedException {\n+        // Stop the Scheduler while we manually trigger execution of job, to avoid side effects and simplify debugging when readings logs\n+        updateSchedulerStatus(false);\n+\n+        int jobId = getSchedulerJobIdByName(jobName);\n \n-                // Retrieving Scheduler Job by ID\n-                Map schedulerJob = getSchedulerJobById(jobId);\n-                Assert.assertNotNull(schedulerJob);\n+        // Executing Scheduler Job\n+        runSchedulerJob(jobId);\n \n-                // Waiting for Job to complete\n-                while ((Boolean) schedulerJob.get(\"currentlyRunning\") == true) {\n-                    Thread.sleep(15000);\n-                    schedulerJob = getSchedulerJobById(jobId);\n-                    Assert.assertNotNull(schedulerJob);\n-                    System.out.println(\"Job is Still Running\");\n-                }\n+        // Retrieving Scheduler Job by ID\n+        Map<String, Object> schedulerJob = getSchedulerJobById(jobId);\n \n-                List<Map> jobHistoryData = getSchedulerJobHistory(jobId);\n+        // Waiting for Job to complete\n+        while ((Boolean) schedulerJob.get(\"currentlyRunning\") == true) {\n+            Thread.sleep(15000);\n+            schedulerJob = getSchedulerJobById(jobId);\n+            assertNotNull(schedulerJob);\n+            System.out.println(\"Job is Still Running\");\n+        }\n \n-                Assert.assertFalse(\"Job History is empty :(  Was it too slow? Failures in background job?\", jobHistoryData.isEmpty());\n+        List<Map<String, Object>> jobHistoryData = getSchedulerJobHistory(jobId);\n \n-                // print error associated with recent job failure (if any)\n-                System.out.println(\"Job run error message (printed only if the job fails: \"\n-                        + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorMessage\"));\n-                System.out.println(\"Job failure error log (printed only if the job fails: \"\n-                        + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorLog\"));\n+        assertFalse(\"Job History is empty :(  Was it too slow? Failures in background job?\", jobHistoryData.isEmpty());\n \n-                // Verifying the Status of the Recently executed Scheduler Job\n-                Assert.assertEquals(\"Verifying Last Scheduler Job Status\", \"success\",\n-                        jobHistoryData.get(jobHistoryData.size() - 1).get(\"status\"));\n+        // print error associated with recent job failure (if any)\n+        System.out.println(\"Job run error message (printed only if the job fails: \"\n+                + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorMessage\"));\n+        System.out.println(\"Job failure error log (printed only if the job fails: \"\n+                + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorLog\"));\n+\n+        // Verifying the Status of the Recently executed Scheduler Job\n+        assertEquals(\"Verifying Last Scheduler Job Status\", \"success\",\n+                jobHistoryData.get(jobHistoryData.size() - 1).get(\"status\"));\n+    }\n \n-                break;\n+    /**\n+     * Launches a Job and awaits its completion.\n+     * @param jobName displayName (see {@link org.apache.fineract.infrastructure.jobs.service.JobName}) of Scheduler Job\n+     *\n+     * @author Michael Vorburger.ch\n+     */\n+    public void executeAndAwaitJob(String jobName) {\n+        Duration TIMEOUT = Duration.ofSeconds(30);\n+        Duration PAUSE = Duration.ofMillis(500);\n+        DateTimeFormatter df = DateTimeFormatter.ISO_INSTANT; // FINERACT-926\n+        Instant beforeExecuteTime = now().truncatedTo(ChronoUnit.SECONDS);\n+\n+        // Stop the Scheduler while we manually trigger execution of job, to avoid side effects and simplify debugging when readings logs\n+        updateSchedulerStatus(false);\n+\n+        // Executing Scheduler Job\n+        int jobId = getSchedulerJobIdByName(jobName);\n+        runSchedulerJob(jobId);\n+\n+        // Await JobDetailData.lastRunHistory [JobDetailHistoryData] jobRunStartTime >= beforeExecuteTime (or timeout)\n+        await().atMost(TIMEOUT).pollInterval(PAUSE).until(jobLastRunHistorySupplier(jobId), lastRunHistory -> {\n+            String jobRunStartText = lastRunHistory.get(\"jobRunStartTime\");\n+            if (jobRunStartText == null) {\n+                return false;\n             }\n+            Instant jobRunStartTime = df.parse(jobRunStartText, Instant::from);\n+            return jobRunStartTime.equals(jobRunStartTime) || jobRunStartTime.isAfter(beforeExecuteTime);\n+        });\n+\n+        // Await JobDetailData.lastRunHistory [JobDetailHistoryData] jobRunEndTime to be both set and >= jobRunStartTime (or timeout)\n+        Map<String, String> finalLastRunHistory = await().atMost(TIMEOUT).pollInterval(PAUSE).until(jobLastRunHistorySupplier(jobId), lastRunHistory -> {\n+            String jobRunEndText = lastRunHistory.get(\"jobRunEndTime\");\n+            if (jobRunEndText == null) {\n+                return false;\n+            }\n+            Instant jobRunEndTime = df.parse(jobRunEndText, Instant::from);\n+            Instant jobRunStartTime = df.parse(lastRunHistory.get(\"jobRunStartTime\"), Instant::from);\n+            return jobRunEndTime.equals(jobRunStartTime) || jobRunEndTime.isAfter(jobRunStartTime);\n+        });\n+\n+        // Verify triggerType\n+        assertThat(finalLastRunHistory.get(\"triggerType\"), is(\"application\"));\n+\n+        // Verify status & propagate jobRunErrorMessage and/or jobRunErrorLog (if any)\n+        String status = finalLastRunHistory.get(\"status\");\n+        if (!status.equals(\"success\")) {\n+            fail(\"Job status is not success: \" + finalLastRunHistory.toString());\n         }\n+\n+        // PS: Checking getSchedulerJobHistory() [/runhistory] is pointless, because the lastRunHistory JobDetailHistoryData is already part of JobDetailData anyway.\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNzY2OA=="}, "originalCommit": null, "originalPosition": 219}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2011, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}