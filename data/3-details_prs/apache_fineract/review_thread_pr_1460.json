{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3ODQ4MjQ4", "number": 1460, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNDoyODowMFrOExOt5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNDozMTowNlrOExOzaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDU2ODA2OnYy", "diffSide": "RIGHT", "path": "fineract-client/src/test/java/org/apache/fineract/integrationtests/newstyle/DocumentTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNDoyODowMFrOHnQRQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNjozNzo1OVrOHnVWpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkyMzA3NA==", "bodyText": "Probably would make sense to check that get doesn't return the deleted document?", "url": "https://github.com/apache/fineract/pull/1460#discussion_r510923074", "createdAt": "2020-10-23T14:28:00Z", "author": {"login": "ptuomola"}, "path": "fineract-client/src/test/java/org/apache/fineract/integrationtests/newstyle/DocumentTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.fineract.integrationtests.newstyle;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import okhttp3.MediaType;\n+import okhttp3.MultipartBody.Part;\n+import okhttp3.ResponseBody;\n+import org.apache.fineract.client.models.GetEntityTypeEntityIdDocumentsResponse;\n+import org.apache.fineract.client.models.PostEntityTypeEntityIdDocumentsResponse;\n+import org.apache.fineract.client.util.Parts;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Integration Test for /documents API.\n+ *\n+ * @author Michael Vorburger.ch\n+ */\n+public class DocumentTest extends IntegrationTest {\n+\n+    final File testFile = new File(getClass().getResource(\"/michael.vorburger-crepes.jpg\").getFile());\n+\n+    Long clientId = new ClientTest().getClientId();\n+    Long documentId;\n+\n+    @Test\n+    @Order(1)\n+    void retrieveAllDocuments() throws IOException {\n+        assertThat(ok(fineract().documents.retreiveAllDocuments(\"clients\", clientId))).isNotNull();\n+    }\n+\n+    @Test\n+    @Order(2)\n+    void createDocument() throws IOException {\n+        String name = \"Test\";\n+        Part part = Parts.fromFile(testFile);\n+        String description = null;\n+        // TODO used var in tests when moved from fineract-client (Java 8 only) to new module\n+        PostEntityTypeEntityIdDocumentsResponse response = ok(\n+                fineract().documents.createDocument(\"clients\", clientId, part, name, description));\n+        assertThat(response.getResourceId()).isNotNull();\n+        assertThat(response.getResourceIdentifier()).isNotEmpty();\n+        documentId = response.getResourceId();\n+    }\n+\n+    @Test\n+    @Order(3)\n+    void getDocument() throws IOException {\n+        GetEntityTypeEntityIdDocumentsResponse doc = ok(fineract().documents.getDocument(\"clients\", clientId, documentId));\n+        assertThat(doc.getName()).isEqualTo(\"Test\");\n+        assertThat(doc.getFileName()).isEqualTo(testFile.getName());\n+        assertThat(doc.getDescription()).isNull();\n+        assertThat(doc.getId()).isEqualTo(documentId);\n+        assertThat(doc.getParentEntityType()).isEqualTo(\"clients\");\n+        assertThat(doc.getParentEntityId()).isEqualTo(clientId);\n+        // TODO huh?! It's more than uploaded file; seems like a bug - it's including create body, not just file size\n+        assertThat(doc.getSize()).isEqualTo(testFile.length() + 385);\n+        // TODO huh?! MIME is always text/plain instead of image/jpeg... :(\n+        assertThat(doc.getType()).isEqualTo(\"text/plain\");\n+        // TODO doc.getStorageType() shouldn't be exposed by the API?!\n+    }\n+\n+    @Test\n+    @Order(4)\n+    void downloadFile() throws IOException {\n+        ResponseBody r = ok(fineract().documents.downloadFile(\"clients\", clientId, documentId));\n+        assertThat(r.contentType()).isEqualTo(MediaType.get(\"text/plain\")); // TODO wrong, bug; needs to be \"image/jpeg\"\n+                                                                            // (as above)\n+        assertThat(r.bytes().length).isEqualTo(testFile.length());\n+        // NOK: assertThat(r.contentLength()).isEqualTo(testFile.length());\n+    }\n+\n+    @Test\n+    @Order(10)\n+    void updateDocument() throws IOException {\n+        String newName = \"Test changed name\";\n+        String newDescription = getClass().getName();\n+        ok(fineract().documents.updateDocument(\"clients\", clientId, documentId, null, newName, newDescription));\n+\n+        GetEntityTypeEntityIdDocumentsResponse doc = ok(fineract().documents.getDocument(\"clients\", clientId, documentId));\n+        assertThat(doc.getName()).isEqualTo(newName);\n+        assertThat(doc.getDescription()).isEqualTo(newDescription);\n+    }\n+\n+    @Test\n+    @Order(99)\n+    void deleteDocument() throws IOException {\n+        ok(fineract().documents.deleteDocument(\"clients\", clientId, documentId));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAwNjM3NA==", "bodyText": "done, added: assertThat(fineract().documents.getDocument(\"clients\", clientId, documentId)).hasHttpStatus(404);", "url": "https://github.com/apache/fineract/pull/1460#discussion_r511006374", "createdAt": "2020-10-23T16:37:59Z", "author": {"login": "vorburger"}, "path": "fineract-client/src/test/java/org/apache/fineract/integrationtests/newstyle/DocumentTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.fineract.integrationtests.newstyle;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import okhttp3.MediaType;\n+import okhttp3.MultipartBody.Part;\n+import okhttp3.ResponseBody;\n+import org.apache.fineract.client.models.GetEntityTypeEntityIdDocumentsResponse;\n+import org.apache.fineract.client.models.PostEntityTypeEntityIdDocumentsResponse;\n+import org.apache.fineract.client.util.Parts;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Integration Test for /documents API.\n+ *\n+ * @author Michael Vorburger.ch\n+ */\n+public class DocumentTest extends IntegrationTest {\n+\n+    final File testFile = new File(getClass().getResource(\"/michael.vorburger-crepes.jpg\").getFile());\n+\n+    Long clientId = new ClientTest().getClientId();\n+    Long documentId;\n+\n+    @Test\n+    @Order(1)\n+    void retrieveAllDocuments() throws IOException {\n+        assertThat(ok(fineract().documents.retreiveAllDocuments(\"clients\", clientId))).isNotNull();\n+    }\n+\n+    @Test\n+    @Order(2)\n+    void createDocument() throws IOException {\n+        String name = \"Test\";\n+        Part part = Parts.fromFile(testFile);\n+        String description = null;\n+        // TODO used var in tests when moved from fineract-client (Java 8 only) to new module\n+        PostEntityTypeEntityIdDocumentsResponse response = ok(\n+                fineract().documents.createDocument(\"clients\", clientId, part, name, description));\n+        assertThat(response.getResourceId()).isNotNull();\n+        assertThat(response.getResourceIdentifier()).isNotEmpty();\n+        documentId = response.getResourceId();\n+    }\n+\n+    @Test\n+    @Order(3)\n+    void getDocument() throws IOException {\n+        GetEntityTypeEntityIdDocumentsResponse doc = ok(fineract().documents.getDocument(\"clients\", clientId, documentId));\n+        assertThat(doc.getName()).isEqualTo(\"Test\");\n+        assertThat(doc.getFileName()).isEqualTo(testFile.getName());\n+        assertThat(doc.getDescription()).isNull();\n+        assertThat(doc.getId()).isEqualTo(documentId);\n+        assertThat(doc.getParentEntityType()).isEqualTo(\"clients\");\n+        assertThat(doc.getParentEntityId()).isEqualTo(clientId);\n+        // TODO huh?! It's more than uploaded file; seems like a bug - it's including create body, not just file size\n+        assertThat(doc.getSize()).isEqualTo(testFile.length() + 385);\n+        // TODO huh?! MIME is always text/plain instead of image/jpeg... :(\n+        assertThat(doc.getType()).isEqualTo(\"text/plain\");\n+        // TODO doc.getStorageType() shouldn't be exposed by the API?!\n+    }\n+\n+    @Test\n+    @Order(4)\n+    void downloadFile() throws IOException {\n+        ResponseBody r = ok(fineract().documents.downloadFile(\"clients\", clientId, documentId));\n+        assertThat(r.contentType()).isEqualTo(MediaType.get(\"text/plain\")); // TODO wrong, bug; needs to be \"image/jpeg\"\n+                                                                            // (as above)\n+        assertThat(r.bytes().length).isEqualTo(testFile.length());\n+        // NOK: assertThat(r.contentLength()).isEqualTo(testFile.length());\n+    }\n+\n+    @Test\n+    @Order(10)\n+    void updateDocument() throws IOException {\n+        String newName = \"Test changed name\";\n+        String newDescription = getClass().getName();\n+        ok(fineract().documents.updateDocument(\"clients\", clientId, documentId, null, newName, newDescription));\n+\n+        GetEntityTypeEntityIdDocumentsResponse doc = ok(fineract().documents.getDocument(\"clients\", clientId, documentId));\n+        assertThat(doc.getName()).isEqualTo(newName);\n+        assertThat(doc.getDescription()).isEqualTo(newDescription);\n+    }\n+\n+    @Test\n+    @Order(99)\n+    void deleteDocument() throws IOException {\n+        ok(fineract().documents.deleteDocument(\"clients\", clientId, documentId));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkyMzA3NA=="}, "originalCommit": null, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDU3MjcyOnYy", "diffSide": "RIGHT", "path": "fineract-client/src/test/java/org/apache/fineract/integrationtests/newstyle/DocumentTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNDoyOTowMVrOHnQUBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNjozODo1NlrOHnVYyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkyMzc4MA==", "bodyText": "Spelling mistake - should be retrieve not retreive", "url": "https://github.com/apache/fineract/pull/1460#discussion_r510923780", "createdAt": "2020-10-23T14:29:01Z", "author": {"login": "ptuomola"}, "path": "fineract-client/src/test/java/org/apache/fineract/integrationtests/newstyle/DocumentTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.fineract.integrationtests.newstyle;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import okhttp3.MediaType;\n+import okhttp3.MultipartBody.Part;\n+import okhttp3.ResponseBody;\n+import org.apache.fineract.client.models.GetEntityTypeEntityIdDocumentsResponse;\n+import org.apache.fineract.client.models.PostEntityTypeEntityIdDocumentsResponse;\n+import org.apache.fineract.client.util.Parts;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Integration Test for /documents API.\n+ *\n+ * @author Michael Vorburger.ch\n+ */\n+public class DocumentTest extends IntegrationTest {\n+\n+    final File testFile = new File(getClass().getResource(\"/michael.vorburger-crepes.jpg\").getFile());\n+\n+    Long clientId = new ClientTest().getClientId();\n+    Long documentId;\n+\n+    @Test\n+    @Order(1)\n+    void retrieveAllDocuments() throws IOException {\n+        assertThat(ok(fineract().documents.retreiveAllDocuments(\"clients\", clientId))).isNotNull();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAwNjkyMw==", "bodyText": "fixed (in 2 places)", "url": "https://github.com/apache/fineract/pull/1460#discussion_r511006923", "createdAt": "2020-10-23T16:38:56Z", "author": {"login": "vorburger"}, "path": "fineract-client/src/test/java/org/apache/fineract/integrationtests/newstyle/DocumentTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.fineract.integrationtests.newstyle;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import okhttp3.MediaType;\n+import okhttp3.MultipartBody.Part;\n+import okhttp3.ResponseBody;\n+import org.apache.fineract.client.models.GetEntityTypeEntityIdDocumentsResponse;\n+import org.apache.fineract.client.models.PostEntityTypeEntityIdDocumentsResponse;\n+import org.apache.fineract.client.util.Parts;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Integration Test for /documents API.\n+ *\n+ * @author Michael Vorburger.ch\n+ */\n+public class DocumentTest extends IntegrationTest {\n+\n+    final File testFile = new File(getClass().getResource(\"/michael.vorburger-crepes.jpg\").getFile());\n+\n+    Long clientId = new ClientTest().getClientId();\n+    Long documentId;\n+\n+    @Test\n+    @Order(1)\n+    void retrieveAllDocuments() throws IOException {\n+        assertThat(ok(fineract().documents.retreiveAllDocuments(\"clients\", clientId))).isNotNull();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkyMzc4MA=="}, "originalCommit": null, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDU3ODEzOnYy", "diffSide": "RIGHT", "path": "fineract-client/src/main/java/org/apache/fineract/client/services/DocumentsApiFixed.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNDozMDowOVrOHnQXXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNjozODoyMVrOHnVXdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkyNDYzNg==", "bodyText": "Clearly would be great not to have to create this file but to have it autogenerated. I should have some time this weekend so can try to see if I can find a way to get this to work...", "url": "https://github.com/apache/fineract/pull/1460#discussion_r510924636", "createdAt": "2020-10-23T14:30:09Z", "author": {"login": "ptuomola"}, "path": "fineract-client/src/main/java/org/apache/fineract/client/services/DocumentsApiFixed.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.fineract.client.services;\n+\n+import java.util.List;\n+import okhttp3.ResponseBody;\n+import org.apache.fineract.client.models.DeleteEntityTypeEntityIdDocumentsResponse;\n+import org.apache.fineract.client.models.GetEntityTypeEntityIdDocumentsResponse;\n+import org.apache.fineract.client.models.PostEntityTypeEntityIdDocumentsResponse;\n+import org.apache.fineract.client.models.PutEntityTypeEntityIdDocumentsResponse;\n+import retrofit2.Call;\n+import retrofit2.http.DELETE;\n+import retrofit2.http.GET;\n+import retrofit2.http.POST;\n+import retrofit2.http.PUT;\n+\n+// This class was originally generated by OpenAPI Generator (https://openapi-generator.tech),\n+// but then had to be manually edited by Michael Vorburger.ch to manually fix https://issues.apache.org/jira/browse/FINERACT-1227.\n+// If we could fix our OpenAPI / Swagger YAML generation from the JAX RS and OpenAPI annotation to have the correct notation for binary document files and images, then this could be removed again.\n+public interface DocumentsApiFixed {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk5OTQ4MA==", "bodyText": "If you do, take FINERACT-1227. (I'm not entirely sure if this is completely trival; curious myself how you would fix that.)", "url": "https://github.com/apache/fineract/pull/1460#discussion_r510999480", "createdAt": "2020-10-23T16:25:06Z", "author": {"login": "vorburger"}, "path": "fineract-client/src/main/java/org/apache/fineract/client/services/DocumentsApiFixed.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.fineract.client.services;\n+\n+import java.util.List;\n+import okhttp3.ResponseBody;\n+import org.apache.fineract.client.models.DeleteEntityTypeEntityIdDocumentsResponse;\n+import org.apache.fineract.client.models.GetEntityTypeEntityIdDocumentsResponse;\n+import org.apache.fineract.client.models.PostEntityTypeEntityIdDocumentsResponse;\n+import org.apache.fineract.client.models.PutEntityTypeEntityIdDocumentsResponse;\n+import retrofit2.Call;\n+import retrofit2.http.DELETE;\n+import retrofit2.http.GET;\n+import retrofit2.http.POST;\n+import retrofit2.http.PUT;\n+\n+// This class was originally generated by OpenAPI Generator (https://openapi-generator.tech),\n+// but then had to be manually edited by Michael Vorburger.ch to manually fix https://issues.apache.org/jira/browse/FINERACT-1227.\n+// If we could fix our OpenAPI / Swagger YAML generation from the JAX RS and OpenAPI annotation to have the correct notation for binary document files and images, then this could be removed again.\n+public interface DocumentsApiFixed {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkyNDYzNg=="}, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAwNjU4MQ==", "bodyText": "Agreed, see FINERACT-1227.", "url": "https://github.com/apache/fineract/pull/1460#discussion_r511006581", "createdAt": "2020-10-23T16:38:21Z", "author": {"login": "vorburger"}, "path": "fineract-client/src/main/java/org/apache/fineract/client/services/DocumentsApiFixed.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.fineract.client.services;\n+\n+import java.util.List;\n+import okhttp3.ResponseBody;\n+import org.apache.fineract.client.models.DeleteEntityTypeEntityIdDocumentsResponse;\n+import org.apache.fineract.client.models.GetEntityTypeEntityIdDocumentsResponse;\n+import org.apache.fineract.client.models.PostEntityTypeEntityIdDocumentsResponse;\n+import org.apache.fineract.client.models.PutEntityTypeEntityIdDocumentsResponse;\n+import retrofit2.Call;\n+import retrofit2.http.DELETE;\n+import retrofit2.http.GET;\n+import retrofit2.http.POST;\n+import retrofit2.http.PUT;\n+\n+// This class was originally generated by OpenAPI Generator (https://openapi-generator.tech),\n+// but then had to be manually edited by Michael Vorburger.ch to manually fix https://issues.apache.org/jira/browse/FINERACT-1227.\n+// If we could fix our OpenAPI / Swagger YAML generation from the JAX RS and OpenAPI annotation to have the correct notation for binary document files and images, then this could be removed again.\n+public interface DocumentsApiFixed {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkyNDYzNg=="}, "originalCommit": null, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDU4MjE5OnYy", "diffSide": "RIGHT", "path": "fineract-client/src/test/java/org/apache/fineract/integrationtests/newstyle/DocumentTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNDozMTowNlrOHnQZzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNjo0MDoxMVrOHnVbkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkyNTI2Mg==", "bodyText": "Brilliant to see how many bugs writing a decent test uncovers! :-)", "url": "https://github.com/apache/fineract/pull/1460#discussion_r510925262", "createdAt": "2020-10-23T14:31:06Z", "author": {"login": "ptuomola"}, "path": "fineract-client/src/test/java/org/apache/fineract/integrationtests/newstyle/DocumentTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.fineract.integrationtests.newstyle;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import okhttp3.MediaType;\n+import okhttp3.MultipartBody.Part;\n+import okhttp3.ResponseBody;\n+import org.apache.fineract.client.models.GetEntityTypeEntityIdDocumentsResponse;\n+import org.apache.fineract.client.models.PostEntityTypeEntityIdDocumentsResponse;\n+import org.apache.fineract.client.util.Parts;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Integration Test for /documents API.\n+ *\n+ * @author Michael Vorburger.ch\n+ */\n+public class DocumentTest extends IntegrationTest {\n+\n+    final File testFile = new File(getClass().getResource(\"/michael.vorburger-crepes.jpg\").getFile());\n+\n+    Long clientId = new ClientTest().getClientId();\n+    Long documentId;\n+\n+    @Test\n+    @Order(1)\n+    void retrieveAllDocuments() throws IOException {\n+        assertThat(ok(fineract().documents.retreiveAllDocuments(\"clients\", clientId))).isNotNull();\n+    }\n+\n+    @Test\n+    @Order(2)\n+    void createDocument() throws IOException {\n+        String name = \"Test\";\n+        Part part = Parts.fromFile(testFile);\n+        String description = null;\n+        // TODO used var in tests when moved from fineract-client (Java 8 only) to new module\n+        PostEntityTypeEntityIdDocumentsResponse response = ok(\n+                fineract().documents.createDocument(\"clients\", clientId, part, name, description));\n+        assertThat(response.getResourceId()).isNotNull();\n+        assertThat(response.getResourceIdentifier()).isNotEmpty();\n+        documentId = response.getResourceId();\n+    }\n+\n+    @Test\n+    @Order(3)\n+    void getDocument() throws IOException {\n+        GetEntityTypeEntityIdDocumentsResponse doc = ok(fineract().documents.getDocument(\"clients\", clientId, documentId));\n+        assertThat(doc.getName()).isEqualTo(\"Test\");\n+        assertThat(doc.getFileName()).isEqualTo(testFile.getName());\n+        assertThat(doc.getDescription()).isNull();\n+        assertThat(doc.getId()).isEqualTo(documentId);\n+        assertThat(doc.getParentEntityType()).isEqualTo(\"clients\");\n+        assertThat(doc.getParentEntityId()).isEqualTo(clientId);\n+        // TODO huh?! It's more than uploaded file; seems like a bug - it's including create body, not just file size\n+        assertThat(doc.getSize()).isEqualTo(testFile.length() + 385);\n+        // TODO huh?! MIME is always text/plain instead of image/jpeg... :(\n+        assertThat(doc.getType()).isEqualTo(\"text/plain\");\n+        // TODO doc.getStorageType() shouldn't be exposed by the API?!\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAwNzYzNA==", "bodyText": "Indeed. As well as how easy it now is to write decent tests, using the shiny new client API! PS: The MIME thing is a bug in the test util, not core - fix for that coming up as soon as this PR is merged... \ud83d\ude38", "url": "https://github.com/apache/fineract/pull/1460#discussion_r511007634", "createdAt": "2020-10-23T16:40:11Z", "author": {"login": "vorburger"}, "path": "fineract-client/src/test/java/org/apache/fineract/integrationtests/newstyle/DocumentTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.fineract.integrationtests.newstyle;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import okhttp3.MediaType;\n+import okhttp3.MultipartBody.Part;\n+import okhttp3.ResponseBody;\n+import org.apache.fineract.client.models.GetEntityTypeEntityIdDocumentsResponse;\n+import org.apache.fineract.client.models.PostEntityTypeEntityIdDocumentsResponse;\n+import org.apache.fineract.client.util.Parts;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Integration Test for /documents API.\n+ *\n+ * @author Michael Vorburger.ch\n+ */\n+public class DocumentTest extends IntegrationTest {\n+\n+    final File testFile = new File(getClass().getResource(\"/michael.vorburger-crepes.jpg\").getFile());\n+\n+    Long clientId = new ClientTest().getClientId();\n+    Long documentId;\n+\n+    @Test\n+    @Order(1)\n+    void retrieveAllDocuments() throws IOException {\n+        assertThat(ok(fineract().documents.retreiveAllDocuments(\"clients\", clientId))).isNotNull();\n+    }\n+\n+    @Test\n+    @Order(2)\n+    void createDocument() throws IOException {\n+        String name = \"Test\";\n+        Part part = Parts.fromFile(testFile);\n+        String description = null;\n+        // TODO used var in tests when moved from fineract-client (Java 8 only) to new module\n+        PostEntityTypeEntityIdDocumentsResponse response = ok(\n+                fineract().documents.createDocument(\"clients\", clientId, part, name, description));\n+        assertThat(response.getResourceId()).isNotNull();\n+        assertThat(response.getResourceIdentifier()).isNotEmpty();\n+        documentId = response.getResourceId();\n+    }\n+\n+    @Test\n+    @Order(3)\n+    void getDocument() throws IOException {\n+        GetEntityTypeEntityIdDocumentsResponse doc = ok(fineract().documents.getDocument(\"clients\", clientId, documentId));\n+        assertThat(doc.getName()).isEqualTo(\"Test\");\n+        assertThat(doc.getFileName()).isEqualTo(testFile.getName());\n+        assertThat(doc.getDescription()).isNull();\n+        assertThat(doc.getId()).isEqualTo(documentId);\n+        assertThat(doc.getParentEntityType()).isEqualTo(\"clients\");\n+        assertThat(doc.getParentEntityId()).isEqualTo(clientId);\n+        // TODO huh?! It's more than uploaded file; seems like a bug - it's including create body, not just file size\n+        assertThat(doc.getSize()).isEqualTo(testFile.length() + 385);\n+        // TODO huh?! MIME is always text/plain instead of image/jpeg... :(\n+        assertThat(doc.getType()).isEqualTo(\"text/plain\");\n+        // TODO doc.getStorageType() shouldn't be exposed by the API?!\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkyNTI2Mg=="}, "originalCommit": null, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1800, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}