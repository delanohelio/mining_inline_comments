{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MDY0NTIz", "number": 1079, "title": "Added and Enforced AvoidHidingCauseException Checkstyle (FINERACT-942)", "bodyText": "FINERACT-942\nEdit: For Discussions currently\nAccording to the logging guidelines by @vorburger  I am quoting\n\nWhen catching exceptions, either rethrow them, or log them. Either way, include the root cause by using catch (SomeException e) and then either throw AnotherException(\"..details..\", e) or LOG.error(\"...context...\", e).\n\nThe AvoidHidingCauseException required that an exception that caused the exception \"SomeException\" must be thrown and not \"AnotherException\" as in guidelines.\nEg:\ntry{\nthrow type(x));\n}catch(type(x))\n{\nthrow type(y);\n}\n\nHow should I follow on this?", "createdAt": "2020-06-17T19:58:26Z", "url": "https://github.com/apache/fineract/pull/1079", "merged": true, "mergeCommit": {"oid": "022f214ad5adec3134458cda226320189d70e9cc"}, "closed": true, "closedAt": "2020-06-29T21:16:54Z", "author": {"login": "thesmallstar"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcvFgaVgBqjM0ODcyMTc4ODQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwHwcpAFqTQzOTUwNjgwNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "68128819945652cbe00b917dd3fb07fc3ac023ff", "author": {"user": {"login": "thesmallstar", "name": "Manthan Surkar"}}, "url": "https://github.com/apache/fineract/commit/68128819945652cbe00b917dd3fb07fc3ac023ff", "committedDate": "2020-06-17T19:49:07Z", "message": "[WIP] Added AvoidHidingCauseException Checkstyle"}, "afterCommit": {"oid": "ee4d8243add64755d752a029b4558269661a828d", "author": {"user": {"login": "thesmallstar", "name": "Manthan Surkar"}}, "url": "https://github.com/apache/fineract/commit/ee4d8243add64755d752a029b4558269661a828d", "committedDate": "2020-06-26T16:04:23Z", "message": "FINERACT-942 Added and Enforced AvoidHidingCauseException Checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NDUyNzA0", "url": "https://github.com/apache/fineract/pull/1079#pullrequestreview-438452704", "createdAt": "2020-06-26T16:57:17Z", "commit": {"oid": "ee4d8243add64755d752a029b4558269661a828d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjo1NzoxN1rOGpoE5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzowNToxMlrOGpoT1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMwMTQxMw==", "bodyText": "In this case, where there is no Object... defaultUserMessageArgs in the original far, you should not introduce it. Just have constructors which take an additional last new argument like , Throwable cause) - makes sense?", "url": "https://github.com/apache/fineract/pull/1079#discussion_r446301413", "createdAt": "2020-06-26T16:57:17Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/exception/PlatformApiDataValidationException.java", "diffHunk": "@@ -43,6 +43,30 @@ public PlatformApiDataValidationException(final String globalisationMessageCode,\n         this.errors = errors;\n     }\n \n+    public PlatformApiDataValidationException(final String globalisationMessageCode, final String defaultUserMessage,\n+            final List<ApiParameterError> errors, final Object... defaultUserMessageArgs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee4d8243add64755d752a029b4558269661a828d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMwMjc2NQ==", "bodyText": "copy pasting (my) findThrowableCause() & filterThrowableCause() seems like a shame... always try to avoid copy/paste, as much as you can. How about introducing a new e.g. public abstract class AbstractPlatformException extends RuntimeException with suitable protected constructors, and these two methods as protected static methods?", "url": "https://github.com/apache/fineract/pull/1079#discussion_r446302765", "createdAt": "2020-06-26T17:00:05Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/exception/PlatformDataIntegrityException.java", "diffHunk": "@@ -30,18 +33,39 @@\n \n     public PlatformDataIntegrityException(final String globalisationMessageCode, final String defaultUserMessage,\n             final Object... defaultUserMessageArgs) {\n+        super(findThrowableCause(defaultUserMessageArgs));\n         this.globalisationMessageCode = globalisationMessageCode;\n         this.defaultUserMessage = defaultUserMessage;\n         this.parameterName = null;\n-        this.defaultUserMessageArgs = defaultUserMessageArgs;\n+        this.defaultUserMessageArgs = filterThrowableCause(defaultUserMessageArgs);\n     }\n \n     public PlatformDataIntegrityException(final String globalisationMessageCode, final String defaultUserMessage,\n             final String parameterName, final Object... defaultUserMessageArgs) {\n+        super(findThrowableCause(defaultUserMessageArgs));\n         this.globalisationMessageCode = globalisationMessageCode;\n         this.defaultUserMessage = defaultUserMessage;\n         this.parameterName = parameterName;\n-        this.defaultUserMessageArgs = defaultUserMessageArgs;\n+        this.defaultUserMessageArgs = filterThrowableCause(defaultUserMessageArgs);\n+    }\n+\n+    private static Throwable findThrowableCause(Object[] defaultUserMessageArgs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee4d8243add64755d752a029b4558269661a828d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMwNDA0Mg==", "bodyText": "you forgot actually propagating the cause here... ;-)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    super(\"error.msg.provisioning.criteria.id.invalid\", \"Provisioning Criteria with identifier \" + id + \" does not exist\", id);\n          \n          \n            \n                    super(\"error.msg.provisioning.criteria.id.invalid\", \"Provisioning Criteria with identifier \" + id + \" does not exist\", id, e);", "url": "https://github.com/apache/fineract/pull/1079#discussion_r446304042", "createdAt": "2020-06-26T17:02:34Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/main/java/org/apache/fineract/organisation/provisioning/exception/ProvisioningCriteriaNotFoundException.java", "diffHunk": "@@ -19,10 +19,15 @@\n package org.apache.fineract.organisation.provisioning.exception;\n \n import org.apache.fineract.infrastructure.core.exception.AbstractPlatformResourceNotFoundException;\n+import org.springframework.dao.EmptyResultDataAccessException;\n \n public class ProvisioningCriteriaNotFoundException extends AbstractPlatformResourceNotFoundException {\n \n     public ProvisioningCriteriaNotFoundException(final Long id) {\n         super(\"error.msg.provisioning.criteria.id.invalid\", \"Provisioning Criteria with identifier \" + id + \" does not exist\", id);\n     }\n+\n+    public ProvisioningCriteriaNotFoundException(Long id, EmptyResultDataAccessException e) {\n+        super(\"error.msg.provisioning.criteria.id.invalid\", \"Provisioning Criteria with identifier \" + id + \" does not exist\", id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee4d8243add64755d752a029b4558269661a828d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMwNTIzNw==", "bodyText": "I'm not 100% sure and haven't looked much at this, but could it make sense to:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                \"Loan product may only have one charge of each type.`\", \"charges\");\n          \n          \n            \n                                \"Loan product may only have one charge of each type.`\", \"charges\", realCause);", "url": "https://github.com/apache/fineract/pull/1079#discussion_r446305237", "createdAt": "2020-06-26T17:05:12Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/loanproduct/service/LoanProductWritePlatformServiceJpaRepositoryImpl.java", "diffHunk": "@@ -357,9 +357,8 @@ private void handleDataIntegrityIssues(final JsonCommand command, final Throwabl\n             throw new PlatformDataIntegrityException(\"error.msg.product.loan.duplicate.short.name\",\n                     \"Loan product with short name `\" + shortName + \"` already exists\", \"shortName\", shortName);\n         } else if (realCause.getMessage().contains(\"Duplicate entry\")) {\n-            final Object[] args = null;\n             throw new PlatformDataIntegrityException(\"error.msg.product.loan.duplicate.charge\",\n-                    \"Loan product may only have one charge of each type.`\", \"charges\", args);\n+                    \"Loan product may only have one charge of each type.`\", \"charges\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee4d8243add64755d752a029b4558269661a828d"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NzAyOTM5", "url": "https://github.com/apache/fineract/pull/1079#pullrequestreview-438702939", "createdAt": "2020-06-27T14:43:42Z", "commit": {"oid": "ee4d8243add64755d752a029b4558269661a828d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxNDo0Mzo0MlrOGp2Pig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxNDo0Mzo0MlrOGp2Pig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUzMzUxNA==", "bodyText": "Just curious but wouldn't it be better to add the 3rd param here instead of duplicating the method? cause I can see the 2param method will just be history and unused.", "url": "https://github.com/apache/fineract/pull/1079#discussion_r446533514", "createdAt": "2020-06-27T14:43:42Z", "author": {"login": "xurror"}, "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/campaigns/email/exception/EmailConfigurationNotFoundException.java", "diffHunk": "@@ -28,4 +29,9 @@\n     public EmailConfigurationNotFoundException(final String name) {\n         super(\"error.msg.email.configuration.name.not.found\", \"Email configuration with name \" + name + \" does not exist\", name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee4d8243add64755d752a029b4558269661a828d"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ebcaf0e333df626dbe7e3335a850935d7b75632", "author": {"user": {"login": "thesmallstar", "name": "Manthan Surkar"}}, "url": "https://github.com/apache/fineract/commit/6ebcaf0e333df626dbe7e3335a850935d7b75632", "committedDate": "2020-06-27T14:54:48Z", "message": "FINERACT-942 Added and Enforced AvoidHidingCauseException Checkstyle"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ee4d8243add64755d752a029b4558269661a828d", "author": {"user": {"login": "thesmallstar", "name": "Manthan Surkar"}}, "url": "https://github.com/apache/fineract/commit/ee4d8243add64755d752a029b4558269661a828d", "committedDate": "2020-06-26T16:04:23Z", "message": "FINERACT-942 Added and Enforced AvoidHidingCauseException Checkstyle"}, "afterCommit": {"oid": "6ebcaf0e333df626dbe7e3335a850935d7b75632", "author": {"user": {"login": "thesmallstar", "name": "Manthan Surkar"}}, "url": "https://github.com/apache/fineract/commit/6ebcaf0e333df626dbe7e3335a850935d7b75632", "committedDate": "2020-06-27T14:54:48Z", "message": "FINERACT-942 Added and Enforced AvoidHidingCauseException Checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NTA2ODA1", "url": "https://github.com/apache/fineract/pull/1079#pullrequestreview-439506805", "createdAt": "2020-06-29T21:16:42Z", "commit": {"oid": "6ebcaf0e333df626dbe7e3335a850935d7b75632"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1805, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}