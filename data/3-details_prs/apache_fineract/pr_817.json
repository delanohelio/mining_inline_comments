{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyNjgwMjg3", "number": 817, "title": "Step 1 of improving SchedulerJobHelper to be more reliable and prevent flaky tests (FINERACT-922)", "bodyText": "see FINERACT-922\nThis PR includes #816 (FINERACT-926). Re. FINERACT-922, please only review the last commit, as the other commits will disappear when I rebase this once we've reached agreement about the best solution re. FINERACT-926 on the dev list, merged that, and rebased this.", "createdAt": "2020-05-03T22:54:40Z", "url": "https://github.com/apache/fineract/pull/817", "merged": true, "mergeCommit": {"oid": "b3da50c96063cef75b8e9ea2a42c8d509ad75e8d"}, "closed": true, "closedAt": "2020-05-24T19:54:38Z", "author": {"login": "vorburger"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcdzdKjABqjMyOTc5NDc2OTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjk5hzgBqjMzNjI0Nzg3MzY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c00801905366786315567d1c3ccd4a17e2bc6042", "author": {"user": {"login": "vorburger", "name": "Michael Vorburger \u26d1\ufe0f"}}, "url": "https://github.com/apache/fineract/commit/c00801905366786315567d1c3ccd4a17e2bc6042", "committedDate": "2020-05-03T22:49:26Z", "message": "intro. SchedulerJobsHelper.executeAndAwaitJob() (solves FINERACT-922 ?)"}, "afterCommit": {"oid": "749a4f450c683ceca1612f06f155adaebb165764", "author": {"user": {"login": "vorburger", "name": "Michael Vorburger \u26d1\ufe0f"}}, "url": "https://github.com/apache/fineract/commit/749a4f450c683ceca1612f06f155adaebb165764", "committedDate": "2020-05-03T23:26:19Z", "message": "intro. SchedulerJobsHelper.executeAndAwaitJob() (solves FINERACT-922 ?)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "749a4f450c683ceca1612f06f155adaebb165764", "author": {"user": {"login": "vorburger", "name": "Michael Vorburger \u26d1\ufe0f"}}, "url": "https://github.com/apache/fineract/commit/749a4f450c683ceca1612f06f155adaebb165764", "committedDate": "2020-05-03T23:26:19Z", "message": "intro. SchedulerJobsHelper.executeAndAwaitJob() (solves FINERACT-922 ?)"}, "afterCommit": {"oid": "57deb88b9641b126588821cde3ddc0790c33bd91", "author": {"user": {"login": "vorburger", "name": "Michael Vorburger \u26d1\ufe0f"}}, "url": "https://github.com/apache/fineract/commit/57deb88b9641b126588821cde3ddc0790c33bd91", "committedDate": "2020-05-09T01:13:44Z", "message": "replace my Awaitility inspired code by the real deal (FINERACT-922)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "35ad72add663327f848f0f9782b14dd648fb5d23", "author": {"user": {"login": "vorburger", "name": "Michael Vorburger \u26d1\ufe0f"}}, "url": "https://github.com/apache/fineract/commit/35ad72add663327f848f0f9782b14dd648fb5d23", "committedDate": "2020-05-09T01:48:36Z", "message": "remove fixed Slfj4j versions to fix broken logging (FINERACT-956)"}, "afterCommit": {"oid": "e39986e62090c9573dc19fb5e34bc84b1d51df48", "author": {"user": {"login": "vorburger", "name": "Michael Vorburger \u26d1\ufe0f"}}, "url": "https://github.com/apache/fineract/commit/e39986e62090c9573dc19fb5e34bc84b1d51df48", "committedDate": "2020-05-09T15:13:46Z", "message": "replace my Awaitility inspired code by the real deal (FINERACT-922)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMTI2NzUy", "url": "https://github.com/apache/fineract/pull/817#pullrequestreview-413126752", "createdAt": "2020-05-17T04:47:12Z", "commit": {"oid": "e39986e62090c9573dc19fb5e34bc84b1d51df48"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNDo0NzoxM1rOGWeN0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNTowMTo1N1rOGWeQxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNjkxMg==", "bodyText": "Shouldn't the first condition be comparing beforeExecuteTime and jobRunStartTime?", "url": "https://github.com/apache/fineract/pull/817#discussion_r426216912", "createdAt": "2020-05-17T04:47:13Z", "author": {"login": "ptuomola"}, "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/common/SchedulerJobHelper.java", "diffHunk": "@@ -122,45 +139,112 @@ private static String runSchedulerJobAsJSON() {\n         return runSchedulerJob;\n     }\n \n-    public void executeJob(String jobName) throws InterruptedException {\n-        List<Map> allSchedulerJobsData = getAllSchedulerJobs();\n-        Assert.assertNotNull(allSchedulerJobsData);\n-\n+    private int getSchedulerJobIdByName(String jobName) {\n+        List<Map<String, Object>> allSchedulerJobsData = getAllSchedulerJobs();\n         for (Integer jobIndex = 0; jobIndex < allSchedulerJobsData.size(); jobIndex++) {\n             if (allSchedulerJobsData.get(jobIndex).get(\"displayName\").equals(jobName)) {\n-                Integer jobId = (Integer) allSchedulerJobsData.get(jobIndex).get(\"jobId\");\n+                return (Integer) allSchedulerJobsData.get(jobIndex).get(\"jobId\");\n+            }\n+        }\n+        throw new IllegalArgumentException(\"No such named Job (see org.apache.fineract.infrastructure.jobs.service.JobName enum):\" + jobName);\n+    }\n \n-                // Executing Scheduler Job\n-                runSchedulerJob(this.requestSpec, jobId.toString());\n+    @Deprecated // FINERACT-922 TODO Gradually replace use of this method with new executeAndAwaitJob() below, if it proves to be more stable than this one\n+    public void executeJob(String jobName) throws InterruptedException {\n+        // Stop the Scheduler while we manually trigger execution of job, to avoid side effects and simplify debugging when readings logs\n+        updateSchedulerStatus(false);\n+\n+        int jobId = getSchedulerJobIdByName(jobName);\n \n-                // Retrieving Scheduler Job by ID\n-                Map schedulerJob = getSchedulerJobById(jobId);\n-                Assert.assertNotNull(schedulerJob);\n+        // Executing Scheduler Job\n+        runSchedulerJob(jobId);\n \n-                // Waiting for Job to complete\n-                while ((Boolean) schedulerJob.get(\"currentlyRunning\") == true) {\n-                    Thread.sleep(15000);\n-                    schedulerJob = getSchedulerJobById(jobId);\n-                    Assert.assertNotNull(schedulerJob);\n-                    System.out.println(\"Job is Still Running\");\n-                }\n+        // Retrieving Scheduler Job by ID\n+        Map<String, Object> schedulerJob = getSchedulerJobById(jobId);\n \n-                List<Map> jobHistoryData = getSchedulerJobHistory(jobId);\n+        // Waiting for Job to complete\n+        while ((Boolean) schedulerJob.get(\"currentlyRunning\") == true) {\n+            Thread.sleep(15000);\n+            schedulerJob = getSchedulerJobById(jobId);\n+            assertNotNull(schedulerJob);\n+            System.out.println(\"Job is Still Running\");\n+        }\n \n-                Assert.assertFalse(\"Job History is empty :(  Was it too slow? Failures in background job?\", jobHistoryData.isEmpty());\n+        List<Map<String, Object>> jobHistoryData = getSchedulerJobHistory(jobId);\n \n-                // print error associated with recent job failure (if any)\n-                System.out.println(\"Job run error message (printed only if the job fails: \"\n-                        + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorMessage\"));\n-                System.out.println(\"Job failure error log (printed only if the job fails: \"\n-                        + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorLog\"));\n+        assertFalse(\"Job History is empty :(  Was it too slow? Failures in background job?\", jobHistoryData.isEmpty());\n \n-                // Verifying the Status of the Recently executed Scheduler Job\n-                Assert.assertEquals(\"Verifying Last Scheduler Job Status\", \"success\",\n-                        jobHistoryData.get(jobHistoryData.size() - 1).get(\"status\"));\n+        // print error associated with recent job failure (if any)\n+        System.out.println(\"Job run error message (printed only if the job fails: \"\n+                + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorMessage\"));\n+        System.out.println(\"Job failure error log (printed only if the job fails: \"\n+                + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorLog\"));\n+\n+        // Verifying the Status of the Recently executed Scheduler Job\n+        assertEquals(\"Verifying Last Scheduler Job Status\", \"success\",\n+                jobHistoryData.get(jobHistoryData.size() - 1).get(\"status\"));\n+    }\n \n-                break;\n+    /**\n+     * Launches a Job and awaits its completion.\n+     * @param jobName displayName (see {@link org.apache.fineract.infrastructure.jobs.service.JobName}) of Scheduler Job\n+     *\n+     * @author Michael Vorburger.ch\n+     */\n+    public void executeAndAwaitJob(String jobName) {\n+        Duration TIMEOUT = Duration.ofSeconds(30);\n+        Duration PAUSE = Duration.ofMillis(500);\n+        DateTimeFormatter df = DateTimeFormatter.ISO_INSTANT; // FINERACT-926\n+        Instant beforeExecuteTime = now().truncatedTo(ChronoUnit.SECONDS);\n+\n+        // Stop the Scheduler while we manually trigger execution of job, to avoid side effects and simplify debugging when readings logs\n+        updateSchedulerStatus(false);\n+\n+        // Executing Scheduler Job\n+        int jobId = getSchedulerJobIdByName(jobName);\n+        runSchedulerJob(jobId);\n+\n+        // Await JobDetailData.lastRunHistory [JobDetailHistoryData] jobRunStartTime >= beforeExecuteTime (or timeout)\n+        await().atMost(TIMEOUT).pollInterval(PAUSE).until(jobLastRunHistorySupplier(jobId), lastRunHistory -> {\n+            String jobRunStartText = lastRunHistory.get(\"jobRunStartTime\");\n+            if (jobRunStartText == null) {\n+                return false;\n             }\n+            Instant jobRunStartTime = df.parse(jobRunStartText, Instant::from);\n+            return jobRunStartTime.equals(jobRunStartTime) || jobRunStartTime.isAfter(beforeExecuteTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e39986e62090c9573dc19fb5e34bc84b1d51df48"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNzAzNQ==", "bodyText": "Just a cosmetic comment: with this, the logging from the different requests is not uniform. All the other calls log the \"---  ---\" text, this one logs the response. Is there a reason for this?", "url": "https://github.com/apache/fineract/pull/817#discussion_r426217035", "createdAt": "2020-05-17T04:49:45Z", "author": {"login": "ptuomola"}, "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/common/SchedulerJobHelper.java", "diffHunk": "@@ -51,21 +60,28 @@ public SchedulerJobHelper(final RequestSpecification requestSpec, final Response\n         this.response202Spec = responseSpec;\n     }\n \n-    private List getAllSchedulerJobs() {\n+    private List<Map<String, Object>> getAllSchedulerJobs() {\n         final String GET_ALL_SCHEDULER_JOBS_URL = \"/fineract-provider/api/v1/jobs?\" + Utils.TENANT_IDENTIFIER;\n         System.out.println(\"------------------------ RETRIEVING ALL SCHEDULER JOBS -------------------------\");\n-        final ArrayList response = Utils.performServerGet(requestSpec, response200Spec, GET_ALL_SCHEDULER_JOBS_URL, \"\");\n+        List<Map<String, Object>> response = Utils.performServerGet(requestSpec, response200Spec, GET_ALL_SCHEDULER_JOBS_URL, \"\");\n+        assertNotNull(response);\n         return response;\n     }\n \n+    private <T> List<T> getAllSchedulerJobDetails(Function<Map<String, Object>, T> mapper) {\n+        return getAllSchedulerJobs().stream().map(mapper).collect(Collectors.toList());\n+    }\n+\n     public List<Integer> getAllSchedulerJobIds() {\n-        ToIntFunction<Map> mapper = map -> (Integer) map.get(\"jobId\");\n-        return getAllSchedulerJobs().stream().mapToInt(mapper).boxed().collect(Collectors.toList());\n+        return getAllSchedulerJobDetails(map -> (Integer) map.get(\"jobId\"));\n+    }\n+\n+    public List<String> getAllSchedulerJobNames() {\n+        return getAllSchedulerJobDetails(map -> (String) map.get(\"displayName\"));\n     }\n \n     public Map<String, Object> getSchedulerJobById(int jobId) {\n         final String GET_SCHEDULER_JOB_BY_ID_URL = \"/fineract-provider/api/v1/jobs/\" + jobId + \"?\" + Utils.TENANT_IDENTIFIER;\n-        System.out.println(\"------------------------ RETRIEVING SCHEDULER JOB BY ID -------------------------\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e39986e62090c9573dc19fb5e34bc84b1d51df48"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNzEyMA==", "bodyText": "Should we not just replace the old implementation with the new, and skip with the gradual transition? Or are there concerns that the new one may not work in some cases?", "url": "https://github.com/apache/fineract/pull/817#discussion_r426217120", "createdAt": "2020-05-17T04:50:44Z", "author": {"login": "ptuomola"}, "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/common/SchedulerJobHelper.java", "diffHunk": "@@ -122,45 +139,112 @@ private static String runSchedulerJobAsJSON() {\n         return runSchedulerJob;\n     }\n \n-    public void executeJob(String jobName) throws InterruptedException {\n-        List<Map> allSchedulerJobsData = getAllSchedulerJobs();\n-        Assert.assertNotNull(allSchedulerJobsData);\n-\n+    private int getSchedulerJobIdByName(String jobName) {\n+        List<Map<String, Object>> allSchedulerJobsData = getAllSchedulerJobs();\n         for (Integer jobIndex = 0; jobIndex < allSchedulerJobsData.size(); jobIndex++) {\n             if (allSchedulerJobsData.get(jobIndex).get(\"displayName\").equals(jobName)) {\n-                Integer jobId = (Integer) allSchedulerJobsData.get(jobIndex).get(\"jobId\");\n+                return (Integer) allSchedulerJobsData.get(jobIndex).get(\"jobId\");\n+            }\n+        }\n+        throw new IllegalArgumentException(\"No such named Job (see org.apache.fineract.infrastructure.jobs.service.JobName enum):\" + jobName);\n+    }\n \n-                // Executing Scheduler Job\n-                runSchedulerJob(this.requestSpec, jobId.toString());\n+    @Deprecated // FINERACT-922 TODO Gradually replace use of this method with new executeAndAwaitJob() below, if it proves to be more stable than this one", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e39986e62090c9573dc19fb5e34bc84b1d51df48"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNzY2OA==", "bodyText": "Would be great to get rid of the SuppressWarnings... I wonder if there's any clever solution to achieve that?", "url": "https://github.com/apache/fineract/pull/817#discussion_r426217668", "createdAt": "2020-05-17T05:01:57Z", "author": {"login": "ptuomola"}, "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/common/SchedulerJobHelper.java", "diffHunk": "@@ -122,45 +139,112 @@ private static String runSchedulerJobAsJSON() {\n         return runSchedulerJob;\n     }\n \n-    public void executeJob(String jobName) throws InterruptedException {\n-        List<Map> allSchedulerJobsData = getAllSchedulerJobs();\n-        Assert.assertNotNull(allSchedulerJobsData);\n-\n+    private int getSchedulerJobIdByName(String jobName) {\n+        List<Map<String, Object>> allSchedulerJobsData = getAllSchedulerJobs();\n         for (Integer jobIndex = 0; jobIndex < allSchedulerJobsData.size(); jobIndex++) {\n             if (allSchedulerJobsData.get(jobIndex).get(\"displayName\").equals(jobName)) {\n-                Integer jobId = (Integer) allSchedulerJobsData.get(jobIndex).get(\"jobId\");\n+                return (Integer) allSchedulerJobsData.get(jobIndex).get(\"jobId\");\n+            }\n+        }\n+        throw new IllegalArgumentException(\"No such named Job (see org.apache.fineract.infrastructure.jobs.service.JobName enum):\" + jobName);\n+    }\n \n-                // Executing Scheduler Job\n-                runSchedulerJob(this.requestSpec, jobId.toString());\n+    @Deprecated // FINERACT-922 TODO Gradually replace use of this method with new executeAndAwaitJob() below, if it proves to be more stable than this one\n+    public void executeJob(String jobName) throws InterruptedException {\n+        // Stop the Scheduler while we manually trigger execution of job, to avoid side effects and simplify debugging when readings logs\n+        updateSchedulerStatus(false);\n+\n+        int jobId = getSchedulerJobIdByName(jobName);\n \n-                // Retrieving Scheduler Job by ID\n-                Map schedulerJob = getSchedulerJobById(jobId);\n-                Assert.assertNotNull(schedulerJob);\n+        // Executing Scheduler Job\n+        runSchedulerJob(jobId);\n \n-                // Waiting for Job to complete\n-                while ((Boolean) schedulerJob.get(\"currentlyRunning\") == true) {\n-                    Thread.sleep(15000);\n-                    schedulerJob = getSchedulerJobById(jobId);\n-                    Assert.assertNotNull(schedulerJob);\n-                    System.out.println(\"Job is Still Running\");\n-                }\n+        // Retrieving Scheduler Job by ID\n+        Map<String, Object> schedulerJob = getSchedulerJobById(jobId);\n \n-                List<Map> jobHistoryData = getSchedulerJobHistory(jobId);\n+        // Waiting for Job to complete\n+        while ((Boolean) schedulerJob.get(\"currentlyRunning\") == true) {\n+            Thread.sleep(15000);\n+            schedulerJob = getSchedulerJobById(jobId);\n+            assertNotNull(schedulerJob);\n+            System.out.println(\"Job is Still Running\");\n+        }\n \n-                Assert.assertFalse(\"Job History is empty :(  Was it too slow? Failures in background job?\", jobHistoryData.isEmpty());\n+        List<Map<String, Object>> jobHistoryData = getSchedulerJobHistory(jobId);\n \n-                // print error associated with recent job failure (if any)\n-                System.out.println(\"Job run error message (printed only if the job fails: \"\n-                        + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorMessage\"));\n-                System.out.println(\"Job failure error log (printed only if the job fails: \"\n-                        + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorLog\"));\n+        assertFalse(\"Job History is empty :(  Was it too slow? Failures in background job?\", jobHistoryData.isEmpty());\n \n-                // Verifying the Status of the Recently executed Scheduler Job\n-                Assert.assertEquals(\"Verifying Last Scheduler Job Status\", \"success\",\n-                        jobHistoryData.get(jobHistoryData.size() - 1).get(\"status\"));\n+        // print error associated with recent job failure (if any)\n+        System.out.println(\"Job run error message (printed only if the job fails: \"\n+                + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorMessage\"));\n+        System.out.println(\"Job failure error log (printed only if the job fails: \"\n+                + jobHistoryData.get(jobHistoryData.size() - 1).get(\"jobRunErrorLog\"));\n+\n+        // Verifying the Status of the Recently executed Scheduler Job\n+        assertEquals(\"Verifying Last Scheduler Job Status\", \"success\",\n+                jobHistoryData.get(jobHistoryData.size() - 1).get(\"status\"));\n+    }\n \n-                break;\n+    /**\n+     * Launches a Job and awaits its completion.\n+     * @param jobName displayName (see {@link org.apache.fineract.infrastructure.jobs.service.JobName}) of Scheduler Job\n+     *\n+     * @author Michael Vorburger.ch\n+     */\n+    public void executeAndAwaitJob(String jobName) {\n+        Duration TIMEOUT = Duration.ofSeconds(30);\n+        Duration PAUSE = Duration.ofMillis(500);\n+        DateTimeFormatter df = DateTimeFormatter.ISO_INSTANT; // FINERACT-926\n+        Instant beforeExecuteTime = now().truncatedTo(ChronoUnit.SECONDS);\n+\n+        // Stop the Scheduler while we manually trigger execution of job, to avoid side effects and simplify debugging when readings logs\n+        updateSchedulerStatus(false);\n+\n+        // Executing Scheduler Job\n+        int jobId = getSchedulerJobIdByName(jobName);\n+        runSchedulerJob(jobId);\n+\n+        // Await JobDetailData.lastRunHistory [JobDetailHistoryData] jobRunStartTime >= beforeExecuteTime (or timeout)\n+        await().atMost(TIMEOUT).pollInterval(PAUSE).until(jobLastRunHistorySupplier(jobId), lastRunHistory -> {\n+            String jobRunStartText = lastRunHistory.get(\"jobRunStartTime\");\n+            if (jobRunStartText == null) {\n+                return false;\n             }\n+            Instant jobRunStartTime = df.parse(jobRunStartText, Instant::from);\n+            return jobRunStartTime.equals(jobRunStartTime) || jobRunStartTime.isAfter(beforeExecuteTime);\n+        });\n+\n+        // Await JobDetailData.lastRunHistory [JobDetailHistoryData] jobRunEndTime to be both set and >= jobRunStartTime (or timeout)\n+        Map<String, String> finalLastRunHistory = await().atMost(TIMEOUT).pollInterval(PAUSE).until(jobLastRunHistorySupplier(jobId), lastRunHistory -> {\n+            String jobRunEndText = lastRunHistory.get(\"jobRunEndTime\");\n+            if (jobRunEndText == null) {\n+                return false;\n+            }\n+            Instant jobRunEndTime = df.parse(jobRunEndText, Instant::from);\n+            Instant jobRunStartTime = df.parse(lastRunHistory.get(\"jobRunStartTime\"), Instant::from);\n+            return jobRunEndTime.equals(jobRunStartTime) || jobRunEndTime.isAfter(jobRunStartTime);\n+        });\n+\n+        // Verify triggerType\n+        assertThat(finalLastRunHistory.get(\"triggerType\"), is(\"application\"));\n+\n+        // Verify status & propagate jobRunErrorMessage and/or jobRunErrorLog (if any)\n+        String status = finalLastRunHistory.get(\"status\");\n+        if (!status.equals(\"success\")) {\n+            fail(\"Job status is not success: \" + finalLastRunHistory.toString());\n         }\n+\n+        // PS: Checking getSchedulerJobHistory() [/runhistory] is pointless, because the lastRunHistory JobDetailHistoryData is already part of JobDetailData anyway.\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e39986e62090c9573dc19fb5e34bc84b1d51df48"}, "originalPosition": 219}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e39986e62090c9573dc19fb5e34bc84b1d51df48", "author": {"user": {"login": "vorburger", "name": "Michael Vorburger \u26d1\ufe0f"}}, "url": "https://github.com/apache/fineract/commit/e39986e62090c9573dc19fb5e34bc84b1d51df48", "committedDate": "2020-05-09T15:13:46Z", "message": "replace my Awaitility inspired code by the real deal (FINERACT-922)"}, "afterCommit": {"oid": "2f3df9a1e14ae9a767f29fd9eff6ece7a99319ad", "author": {"user": {"login": "vorburger", "name": "Michael Vorburger \u26d1\ufe0f"}}, "url": "https://github.com/apache/fineract/commit/2f3df9a1e14ae9a767f29fd9eff6ece7a99319ad", "committedDate": "2020-05-21T16:10:24Z", "message": "intro. SchedulerJobsHelper.executeAndAwaitJob() [FINERACT-922]"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1b3fe165588e5f4ada32669469bdfa208fb6c46", "author": {"user": {"login": "vorburger", "name": "Michael Vorburger \u26d1\ufe0f"}}, "url": "https://github.com/apache/fineract/commit/e1b3fe165588e5f4ada32669469bdfa208fb6c46", "committedDate": "2020-05-21T21:52:37Z", "message": "intro. SchedulerJobsHelper.executeAndAwaitJob() [FINERACT-922]"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2f3df9a1e14ae9a767f29fd9eff6ece7a99319ad", "author": {"user": {"login": "vorburger", "name": "Michael Vorburger \u26d1\ufe0f"}}, "url": "https://github.com/apache/fineract/commit/2f3df9a1e14ae9a767f29fd9eff6ece7a99319ad", "committedDate": "2020-05-21T16:10:24Z", "message": "intro. SchedulerJobsHelper.executeAndAwaitJob() [FINERACT-922]"}, "afterCommit": {"oid": "e1b3fe165588e5f4ada32669469bdfa208fb6c46", "author": {"user": {"login": "vorburger", "name": "Michael Vorburger \u26d1\ufe0f"}}, "url": "https://github.com/apache/fineract/commit/e1b3fe165588e5f4ada32669469bdfa208fb6c46", "committedDate": "2020-05-21T21:52:37Z", "message": "intro. SchedulerJobsHelper.executeAndAwaitJob() [FINERACT-922]"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1974, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}