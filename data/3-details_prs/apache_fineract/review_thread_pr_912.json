{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMzc1ODQ1", "number": 912, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMToxMjowNlrOD-KuMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMToxMjowNlrOD-KuMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTEzOTY4OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMToxMjowNlrOGYGo8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMjozMDozOFrOGYxBhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzkyNzc5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * In tests, you'll typically never catch exceptions, but just propagate them, with `@Test void testXYZ() throws SomeException, AnotherException`...`, so that the test fails if the exception happens.  Unless you actually really want to test for the occurence of a problem - in that case, use [JUnit's Assert.assertThrows()](https://github.com/junit-team/junit4/wiki/Exception-testing) (but not `@Test(expected = SomeException.class)`).\n          \n          \n            \n            * In tests, you'll typically never catch exceptions, but just propagate them, with `@Test void testXYZ() throws SomeException, AnotherException`..., so that the test fails if the exception happens.  Unless you actually really want to test for the occurence of a problem - in that case, use [JUnit's Assert.assertThrows()](https://github.com/junit-team/junit4/wiki/Exception-testing) (but not `@Test(expected = SomeException.class)`).\n          \n      \n    \n    \n  \n\nI noticed an extra \"`\" in the guide. It didn't look good in the preview", "url": "https://github.com/apache/fineract/pull/912#discussion_r427927795", "createdAt": "2020-05-20T11:12:06Z", "author": {"login": "xurror"}, "path": "README.md", "diffHunk": "@@ -268,6 +268,13 @@ Governance and Policies\n documents the process through which you can become a committer in this project.\n \n \n+Logging Guidelines\n+------------------\n+* Never, ever, use `System.out` and `System.err` or `printStackTrace()` anywhere, but `LOG.info()` or `LOG.error()` instead.\n+* When catching exceptions, either rethrow them, or log them.  Either way, include the root cause by using `catch (SomeException e)` and then either `throw AnotherException(\"..details..\", e)` or `LOG.error(\"...context...\", e)`.\n+* In tests, you'll typically never catch exceptions, but just propagate them, with `@Test void testXYZ() throws SomeException, AnotherException`...`, so that the test fails if the exception happens.  Unless you actually really want to test for the occurence of a problem - in that case, use [JUnit's Assert.assertThrows()](https://github.com/junit-team/junit4/wiki/Exception-testing) (but not `@Test(expected = SomeException.class)`).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25dff61af692d35914131148c1def345985214aa"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYyMjIxNQ==", "bodyText": "done - thanks for noticing", "url": "https://github.com/apache/fineract/pull/912#discussion_r428622215", "createdAt": "2020-05-21T12:30:38Z", "author": {"login": "vorburger"}, "path": "README.md", "diffHunk": "@@ -268,6 +268,13 @@ Governance and Policies\n documents the process through which you can become a committer in this project.\n \n \n+Logging Guidelines\n+------------------\n+* Never, ever, use `System.out` and `System.err` or `printStackTrace()` anywhere, but `LOG.info()` or `LOG.error()` instead.\n+* When catching exceptions, either rethrow them, or log them.  Either way, include the root cause by using `catch (SomeException e)` and then either `throw AnotherException(\"..details..\", e)` or `LOG.error(\"...context...\", e)`.\n+* In tests, you'll typically never catch exceptions, but just propagate them, with `@Test void testXYZ() throws SomeException, AnotherException`...`, so that the test fails if the exception happens.  Unless you actually really want to test for the occurence of a problem - in that case, use [JUnit's Assert.assertThrows()](https://github.com/junit-team/junit4/wiki/Exception-testing) (but not `@Test(expected = SomeException.class)`).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzkyNzc5NQ=="}, "originalCommit": {"oid": "25dff61af692d35914131148c1def345985214aa"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1980, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}