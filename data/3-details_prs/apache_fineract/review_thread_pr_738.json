{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwOTkzODUw", "number": 738, "reviewThreads": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMTo1MzoxN1rODzDl0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQyMDo1Mjo1N1rOD4sdVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODYyODAzOnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/service/SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMTo1MzoxN1rOGHeMmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMTo1MzoxN1rOGHeMmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4Nzk2MA==", "bodyText": "@rrpawar96 if client/front end application generates same applicationID for two applications- it would mix up the child applications.  Although the chances are very low, we should see if we can synchronize access to submitApplication() through its parent submitGSIMApplication().", "url": "https://github.com/apache/fineract/pull/738#discussion_r410487960", "createdAt": "2020-04-17T21:53:17Z", "author": {"login": "nikpawar89"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/service/SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl.java", "diffHunk": "@@ -86,470 +93,715 @@\n import org.springframework.transaction.annotation.Transactional;\n \n @Service\n-public class SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl implements SavingsApplicationProcessWritePlatformService {\n-\n-    private final static Logger logger = LoggerFactory.getLogger(SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl.class);\n-\n-    private final PlatformSecurityContext context;\n-    private final SavingsAccountRepositoryWrapper savingAccountRepository;\n-    private final SavingsAccountAssembler savingAccountAssembler;\n-    private final SavingsAccountDataValidator savingsAccountDataValidator;\n-    private final AccountNumberGenerator accountNumberGenerator;\n-    private final ClientRepositoryWrapper clientRepository;\n-    private final GroupRepository groupRepository;\n-    private final SavingsProductRepository savingsProductRepository;\n-    private final NoteRepository noteRepository;\n-    private final StaffRepositoryWrapper staffRepository;\n-    private final SavingsAccountApplicationTransitionApiJsonValidator savingsAccountApplicationTransitionApiJsonValidator;\n-    private final SavingsAccountChargeAssembler savingsAccountChargeAssembler;\n-    private final CommandProcessingService commandProcessingService;\n-    private final SavingsAccountDomainService savingsAccountDomainService;\n-    private final SavingsAccountWritePlatformService savingsAccountWritePlatformService;\n-    private final AccountNumberFormatRepositoryWrapper accountNumberFormatRepository;\n-    private final BusinessEventNotifierService businessEventNotifierService;\n-    private final EntityDatatableChecksWritePlatformService entityDatatableChecksWritePlatformService;\n-\n-    @Autowired\n-    public SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl(final PlatformSecurityContext context,\n-            final SavingsAccountRepositoryWrapper savingAccountRepository, final SavingsAccountAssembler savingAccountAssembler,\n-            final SavingsAccountDataValidator savingsAccountDataValidator, final AccountNumberGenerator accountNumberGenerator,\n-            final ClientRepositoryWrapper clientRepository, final GroupRepository groupRepository,\n-            final SavingsProductRepository savingsProductRepository, final NoteRepository noteRepository,\n-            final StaffRepositoryWrapper staffRepository,\n-            final SavingsAccountApplicationTransitionApiJsonValidator savingsAccountApplicationTransitionApiJsonValidator,\n-            final SavingsAccountChargeAssembler savingsAccountChargeAssembler, final CommandProcessingService commandProcessingService,\n-            final SavingsAccountDomainService savingsAccountDomainService,\n-            final SavingsAccountWritePlatformService savingsAccountWritePlatformService,\n-            final AccountNumberFormatRepositoryWrapper accountNumberFormatRepository,\n-            final BusinessEventNotifierService businessEventNotifierService,\n-            final EntityDatatableChecksWritePlatformService entityDatatableChecksWritePlatformService) {\n-        this.context = context;\n-        this.savingAccountRepository = savingAccountRepository;\n-        this.savingAccountAssembler = savingAccountAssembler;\n-        this.accountNumberGenerator = accountNumberGenerator;\n-        this.savingsAccountDataValidator = savingsAccountDataValidator;\n-        this.clientRepository = clientRepository;\n-        this.groupRepository = groupRepository;\n-        this.savingsProductRepository = savingsProductRepository;\n-        this.noteRepository = noteRepository;\n-        this.staffRepository = staffRepository;\n-        this.savingsAccountApplicationTransitionApiJsonValidator = savingsAccountApplicationTransitionApiJsonValidator;\n-        this.savingsAccountChargeAssembler = savingsAccountChargeAssembler;\n-        this.commandProcessingService = commandProcessingService;\n-        this.savingsAccountDomainService = savingsAccountDomainService;\n-        this.accountNumberFormatRepository = accountNumberFormatRepository;\n-        this.savingsAccountWritePlatformService = savingsAccountWritePlatformService;\n-        this.businessEventNotifierService = businessEventNotifierService ;\n-        this.entityDatatableChecksWritePlatformService = entityDatatableChecksWritePlatformService;\n-    }\n-\n     /*\n      * Guaranteed to throw an exception no matter what the data integrity issue\n      * is.\n      */\n-    private void handleDataIntegrityIssues(final JsonCommand command, final Throwable realCause, final Exception dve) {\n-\n-        final StringBuilder errorCodeBuilder = new StringBuilder(\"error.msg.\").append(SavingsApiConstants.SAVINGS_ACCOUNT_RESOURCE_NAME);\n-\n-        if (realCause.getMessage().contains(\"sa_account_no_UNIQUE\")) {\n-            final String accountNo = command.stringValueOfParameterNamed(\"accountNo\");\n-            errorCodeBuilder.append(\".duplicate.accountNo\");\n-            throw new PlatformDataIntegrityException(errorCodeBuilder.toString(), \"Savings account with accountNo \" + accountNo\n-                    + \" already exists\", \"accountNo\", accountNo);\n-\n-        } else if (realCause.getMessage().contains(\"sa_externalid_UNIQUE\")) {\n-\n-            final String externalId = command.stringValueOfParameterNamed(\"externalId\");\n-            errorCodeBuilder.append(\".duplicate.externalId\");\n-            throw new PlatformDataIntegrityException(errorCodeBuilder.toString(), \"Savings account with externalId \" + externalId\n-                    + \" already exists\", \"externalId\", externalId);\n-        }\n-\n-        errorCodeBuilder.append(\".unknown.data.integrity.issue\");\n-        logger.error(\"Error occured.\", dve);\n-        throw new PlatformDataIntegrityException(errorCodeBuilder.toString(), \"Unknown data integrity issue with savings account.\");\n-    }\n-\n-    @Transactional\n-    @Override\n-    public CommandProcessingResult submitApplication(final JsonCommand command) {\n-        try {\n-            this.savingsAccountDataValidator.validateForSubmit(command.json());\n-            final AppUser submittedBy = this.context.authenticatedUser();\n-\n-            final SavingsAccount account = this.savingAccountAssembler.assembleFrom(command, submittedBy);\n-            this.savingAccountRepository.save(account);\n-\n-            generateAccountNumber(account);\n-\n-            final Long savingsId = account.getId();\n-            if(command.parameterExists(SavingsApiConstants.datatables)){\n-                this.entityDatatableChecksWritePlatformService.saveDatatables(StatusEnum.CREATE.getCode().longValue(),\n-                        EntityTables.SAVING.getName(), savingsId, account.productId(),\n-                        command.arrayOfParameterNamed(SavingsApiConstants.datatables));\n-            }\n-            this.entityDatatableChecksWritePlatformService.runTheCheckForProduct(savingsId,\n-                    EntityTables.SAVING.getName(), StatusEnum.CREATE.getCode().longValue(),\n-                    EntityTables.SAVING.getForeignKeyColumnNameOnDatatable(), account.productId());\n-\n-            this.businessEventNotifierService.notifyBusinessEventWasExecuted(BUSINESS_EVENTS.SAVINGS_CREATE,\n-                    constructEntityMap(BUSINESS_ENTITY.SAVING, account));\n-\n-            return new CommandProcessingResultBuilder() //\n-                    .withCommandId(command.commandId()) //\n+public class SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl\n+          implements SavingsApplicationProcessWritePlatformService {\n+\n+     private final static Logger logger = LoggerFactory\n+               .getLogger(SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl.class);\n+\n+     private final PlatformSecurityContext context;\n+     private final SavingsAccountRepositoryWrapper savingAccountRepository;\n+     private final SavingsAccountAssembler savingAccountAssembler;\n+     private final SavingsAccountDataValidator savingsAccountDataValidator;\n+     private final AccountNumberGenerator accountNumberGenerator;\n+     private final ClientRepositoryWrapper clientRepository;\n+     private final GroupRepository groupRepository;\n+     private final SavingsProductRepository savingsProductRepository;\n+     private final NoteRepository noteRepository;\n+     private final StaffRepositoryWrapper staffRepository;\n+     private final SavingsAccountApplicationTransitionApiJsonValidator savingsAccountApplicationTransitionApiJsonValidator;\n+     private final SavingsAccountChargeAssembler savingsAccountChargeAssembler;\n+     private final CommandProcessingService commandProcessingService;\n+     private final SavingsAccountDomainService savingsAccountDomainService;\n+     private final SavingsAccountWritePlatformService savingsAccountWritePlatformService;\n+     private final AccountNumberFormatRepositoryWrapper accountNumberFormatRepository;\n+     private final BusinessEventNotifierService businessEventNotifierService;\n+     private final EntityDatatableChecksWritePlatformService entityDatatableChecksWritePlatformService;\n+     private final GSIMRepositoy gsimRepository;\n+     private final GroupRepositoryWrapper groupRepositoryWrapper;\n+     private final GroupSavingsIndividualMonitoringWritePlatformService gsimWritePlatformService;\n+\n+     @Autowired\n+     public SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl(final PlatformSecurityContext context,\n+               final SavingsAccountRepositoryWrapper savingAccountRepository,\n+               final SavingsAccountAssembler savingAccountAssembler,\n+               final SavingsAccountDataValidator savingsAccountDataValidator,\n+               final AccountNumberGenerator accountNumberGenerator, final ClientRepositoryWrapper clientRepository,\n+               final GroupRepository groupRepository, final SavingsProductRepository savingsProductRepository,\n+               final NoteRepository noteRepository, final StaffRepositoryWrapper staffRepository,\n+               final SavingsAccountApplicationTransitionApiJsonValidator savingsAccountApplicationTransitionApiJsonValidator,\n+               final SavingsAccountChargeAssembler savingsAccountChargeAssembler,\n+               final CommandProcessingService commandProcessingService,\n+               final SavingsAccountDomainService savingsAccountDomainService,\n+               final SavingsAccountWritePlatformService savingsAccountWritePlatformService,\n+               final AccountNumberFormatRepositoryWrapper accountNumberFormatRepository,\n+               final BusinessEventNotifierService businessEventNotifierService,\n+               final EntityDatatableChecksWritePlatformService entityDatatableChecksWritePlatformService,\n+               final GSIMRepositoy gsimRepository, final GroupRepositoryWrapper groupRepositoryWrapper,\n+               final GroupSavingsIndividualMonitoringWritePlatformService gsimWritePlatformService) {\n+          this.context = context;\n+          this.savingAccountRepository = savingAccountRepository;\n+          this.savingAccountAssembler = savingAccountAssembler;\n+          this.accountNumberGenerator = accountNumberGenerator;\n+          this.savingsAccountDataValidator = savingsAccountDataValidator;\n+          this.clientRepository = clientRepository;\n+          this.groupRepository = groupRepository;\n+          this.savingsProductRepository = savingsProductRepository;\n+          this.noteRepository = noteRepository;\n+          this.staffRepository = staffRepository;\n+          this.savingsAccountApplicationTransitionApiJsonValidator = savingsAccountApplicationTransitionApiJsonValidator;\n+          this.savingsAccountChargeAssembler = savingsAccountChargeAssembler;\n+          this.commandProcessingService = commandProcessingService;\n+          this.savingsAccountDomainService = savingsAccountDomainService;\n+          this.accountNumberFormatRepository = accountNumberFormatRepository;\n+          this.savingsAccountWritePlatformService = savingsAccountWritePlatformService;\n+          this.businessEventNotifierService = businessEventNotifierService;\n+          this.entityDatatableChecksWritePlatformService = entityDatatableChecksWritePlatformService;\n+          this.gsimRepository = gsimRepository;\n+          this.groupRepositoryWrapper = groupRepositoryWrapper;\n+          this.gsimWritePlatformService = gsimWritePlatformService;\n+     }\n+\n+     /*\n+      * Guaranteed to throw an exception no matter what the data integrity issue\n+      * is.\n+      */\n+     private void handleDataIntegrityIssues(final JsonCommand command, final Throwable realCause, final Exception dve) {\n+\n+          final StringBuilder errorCodeBuilder = new StringBuilder(\"error.msg.\")\n+                    .append(SavingsApiConstants.SAVINGS_ACCOUNT_RESOURCE_NAME);\n+\n+          if (realCause.getMessage().contains(\"sa_account_no_UNIQUE\")) {\n+               final String accountNo = command.stringValueOfParameterNamed(\"accountNo\");\n+               errorCodeBuilder.append(\".duplicate.accountNo\");\n+               throw new PlatformDataIntegrityException(errorCodeBuilder.toString(),\n+                         \"Savings account with accountNo \" + accountNo + \" already exists\", \"accountNo\", accountNo);\n+\n+          } else if (realCause.getMessage().contains(\"sa_externalid_UNIQUE\")) {\n+\n+               final String externalId = command.stringValueOfParameterNamed(\"externalId\");\n+               errorCodeBuilder.append(\".duplicate.externalId\");\n+               throw new PlatformDataIntegrityException(errorCodeBuilder.toString(),\n+                         \"Savings account with externalId \" + externalId + \" already exists\", \"externalId\", externalId);\n+          }\n+\n+          errorCodeBuilder.append(\".unknown.data.integrity.issue\");\n+          logger.error(\"{}\", dve.getMessage(), dve);\n+          throw new PlatformDataIntegrityException(errorCodeBuilder.toString(),\n+                    \"Unknown data integrity issue with savings account.\");\n+     }\n+\n+     @Transactional\n+     @Override\n+     public CommandProcessingResult submitGSIMApplication(final JsonCommand command) {\n+\n+          CommandProcessingResult result = null;\n+\n+          JsonArray gsimApplications = command.arrayOfParameterNamed(\"clientArray\");\n+\n+          for (JsonElement gsimApplication : gsimApplications) {\n+               // result=submitApplication(JsonCommand.fromExistingCommand(command,\n+               // gsimApplication));\n+               result = submitApplication(JsonCommand.fromExistingCommand(command, gsimApplication,\n+                         gsimApplication.getAsJsonObject().get(\"clientId\").getAsLong()));\n+          }\n+\n+          return result;\n+     }\n+\n+     @Transactional\n+     @Override\n+     public CommandProcessingResult submitApplication(final JsonCommand command) {\n+          try {\n+               this.savingsAccountDataValidator.validateForSubmit(command.json());\n+               final AppUser submittedBy = this.context.authenticatedUser();\n+\n+               final SavingsAccount account = this.savingAccountAssembler.assembleFrom(command, submittedBy);\n+               this.savingAccountRepository.save(account);\n+               String accountNumber = \"\";\n+               GroupSavingsIndividualMonitoring gsimAccount = null;\n+               BigDecimal applicationId = BigDecimal.ZERO;\n+               Boolean isLastChildApplication = false;\n+\n+               // gsim\n+               if (account.isAccountNumberRequiresAutoGeneration()) {\n+\n+                    final AccountNumberFormat accountNumberFormat = this.accountNumberFormatRepository\n+                              .findByAccountType(EntityAccountType.SAVINGS);\n+                    // if application is of GSIM type\n+                    if (account.getAccountTypes() == 5) {\n+                         final Long groupId = command.longValueOfParameterNamed(\"groupId\");\n+                         // GSIM specific parameters\n+                         if (command.bigDecimalValueOfParameterNamedDefaultToNullIfZero(\"applicationId\") != null) {\n+                              applicationId = command.bigDecimalValueOfParameterNamedDefaultToNullIfZero(\"applicationId\");\n+                         }\n+\n+                         if (command.booleanObjectValueOfParameterNamed(\"lastApplication\") != null) {\n+                              isLastChildApplication = command.booleanPrimitiveValueOfParameterNamed(\"lastApplication\");\n+                         }\n+\n+                         Group group = this.groupRepositoryWrapper.findOneWithNotFoundDetection(groupId);\n+\n+                         if (command.booleanObjectValueOfParameterNamed(\"isParentAccount\") != null)\n+                         {\n+                                   // empty table check\n+                              if (gsimRepository.count() != 0) {\n+                                   // Parent-Not an empty table\n+\n+                                   accountNumber = this.accountNumberGenerator.generate(account, accountNumberFormat);\n+                                   account.updateAccountNo(accountNumber + \"-1\");\n+                                   gsimAccount = gsimWritePlatformService.addGSIMAccountInfo(accountNumber, group, BigDecimal.ZERO,\n+                                             Long.valueOf(1), true,\n+                                             SavingsAccountStatusType.SUBMITTED_AND_PENDING_APPROVAL.getValue(),applicationId);\n+                                   account.setGsim(gsimAccount);\n+                                   this.savingAccountRepository.save(account);\n+\n+                              } else {\n+                                   // Parent-empty table\n+                                   accountNumber = this.accountNumberGenerator.generate(account, accountNumberFormat);\n+                                   account.updateAccountNo(accountNumber + \"-1\");\n+                                   gsimWritePlatformService.addGSIMAccountInfo(accountNumber, group, BigDecimal.ZERO,\n+                                             Long.valueOf(1), true,\n+                                             SavingsAccountStatusType.SUBMITTED_AND_PENDING_APPROVAL.getValue(),applicationId);\n+                                   account.setGsim(gsimRepository.findOneByAccountNumber(accountNumber));\n+                                   this.savingAccountRepository.save(account);\n+\n+                              }\n+\n+                         } else {\n+\n+                              if (gsimRepository.count() != 0) {\n+                                   // Child-Not an empty table check\n+                                   gsimAccount = gsimRepository.findOneByIsAcceptingChildAndApplicationId(true,applicationId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 328}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODYzMzc5OnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/service/SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMTo1NToyNFrOGHeP2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMTo1NToyNFrOGHeP2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4ODc5NA==", "bodyText": "@rrpawar96  you may want to create an object and lock this loop until it completes processing. If you are able to do it, you can remove applicationID param altogether.", "url": "https://github.com/apache/fineract/pull/738#discussion_r410488794", "createdAt": "2020-04-17T21:55:24Z", "author": {"login": "nikpawar89"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/service/SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl.java", "diffHunk": "@@ -86,470 +93,715 @@\n import org.springframework.transaction.annotation.Transactional;\n \n @Service\n-public class SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl implements SavingsApplicationProcessWritePlatformService {\n-\n-    private final static Logger logger = LoggerFactory.getLogger(SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl.class);\n-\n-    private final PlatformSecurityContext context;\n-    private final SavingsAccountRepositoryWrapper savingAccountRepository;\n-    private final SavingsAccountAssembler savingAccountAssembler;\n-    private final SavingsAccountDataValidator savingsAccountDataValidator;\n-    private final AccountNumberGenerator accountNumberGenerator;\n-    private final ClientRepositoryWrapper clientRepository;\n-    private final GroupRepository groupRepository;\n-    private final SavingsProductRepository savingsProductRepository;\n-    private final NoteRepository noteRepository;\n-    private final StaffRepositoryWrapper staffRepository;\n-    private final SavingsAccountApplicationTransitionApiJsonValidator savingsAccountApplicationTransitionApiJsonValidator;\n-    private final SavingsAccountChargeAssembler savingsAccountChargeAssembler;\n-    private final CommandProcessingService commandProcessingService;\n-    private final SavingsAccountDomainService savingsAccountDomainService;\n-    private final SavingsAccountWritePlatformService savingsAccountWritePlatformService;\n-    private final AccountNumberFormatRepositoryWrapper accountNumberFormatRepository;\n-    private final BusinessEventNotifierService businessEventNotifierService;\n-    private final EntityDatatableChecksWritePlatformService entityDatatableChecksWritePlatformService;\n-\n-    @Autowired\n-    public SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl(final PlatformSecurityContext context,\n-            final SavingsAccountRepositoryWrapper savingAccountRepository, final SavingsAccountAssembler savingAccountAssembler,\n-            final SavingsAccountDataValidator savingsAccountDataValidator, final AccountNumberGenerator accountNumberGenerator,\n-            final ClientRepositoryWrapper clientRepository, final GroupRepository groupRepository,\n-            final SavingsProductRepository savingsProductRepository, final NoteRepository noteRepository,\n-            final StaffRepositoryWrapper staffRepository,\n-            final SavingsAccountApplicationTransitionApiJsonValidator savingsAccountApplicationTransitionApiJsonValidator,\n-            final SavingsAccountChargeAssembler savingsAccountChargeAssembler, final CommandProcessingService commandProcessingService,\n-            final SavingsAccountDomainService savingsAccountDomainService,\n-            final SavingsAccountWritePlatformService savingsAccountWritePlatformService,\n-            final AccountNumberFormatRepositoryWrapper accountNumberFormatRepository,\n-            final BusinessEventNotifierService businessEventNotifierService,\n-            final EntityDatatableChecksWritePlatformService entityDatatableChecksWritePlatformService) {\n-        this.context = context;\n-        this.savingAccountRepository = savingAccountRepository;\n-        this.savingAccountAssembler = savingAccountAssembler;\n-        this.accountNumberGenerator = accountNumberGenerator;\n-        this.savingsAccountDataValidator = savingsAccountDataValidator;\n-        this.clientRepository = clientRepository;\n-        this.groupRepository = groupRepository;\n-        this.savingsProductRepository = savingsProductRepository;\n-        this.noteRepository = noteRepository;\n-        this.staffRepository = staffRepository;\n-        this.savingsAccountApplicationTransitionApiJsonValidator = savingsAccountApplicationTransitionApiJsonValidator;\n-        this.savingsAccountChargeAssembler = savingsAccountChargeAssembler;\n-        this.commandProcessingService = commandProcessingService;\n-        this.savingsAccountDomainService = savingsAccountDomainService;\n-        this.accountNumberFormatRepository = accountNumberFormatRepository;\n-        this.savingsAccountWritePlatformService = savingsAccountWritePlatformService;\n-        this.businessEventNotifierService = businessEventNotifierService ;\n-        this.entityDatatableChecksWritePlatformService = entityDatatableChecksWritePlatformService;\n-    }\n-\n     /*\n      * Guaranteed to throw an exception no matter what the data integrity issue\n      * is.\n      */\n-    private void handleDataIntegrityIssues(final JsonCommand command, final Throwable realCause, final Exception dve) {\n-\n-        final StringBuilder errorCodeBuilder = new StringBuilder(\"error.msg.\").append(SavingsApiConstants.SAVINGS_ACCOUNT_RESOURCE_NAME);\n-\n-        if (realCause.getMessage().contains(\"sa_account_no_UNIQUE\")) {\n-            final String accountNo = command.stringValueOfParameterNamed(\"accountNo\");\n-            errorCodeBuilder.append(\".duplicate.accountNo\");\n-            throw new PlatformDataIntegrityException(errorCodeBuilder.toString(), \"Savings account with accountNo \" + accountNo\n-                    + \" already exists\", \"accountNo\", accountNo);\n-\n-        } else if (realCause.getMessage().contains(\"sa_externalid_UNIQUE\")) {\n-\n-            final String externalId = command.stringValueOfParameterNamed(\"externalId\");\n-            errorCodeBuilder.append(\".duplicate.externalId\");\n-            throw new PlatformDataIntegrityException(errorCodeBuilder.toString(), \"Savings account with externalId \" + externalId\n-                    + \" already exists\", \"externalId\", externalId);\n-        }\n-\n-        errorCodeBuilder.append(\".unknown.data.integrity.issue\");\n-        logger.error(\"Error occured.\", dve);\n-        throw new PlatformDataIntegrityException(errorCodeBuilder.toString(), \"Unknown data integrity issue with savings account.\");\n-    }\n-\n-    @Transactional\n-    @Override\n-    public CommandProcessingResult submitApplication(final JsonCommand command) {\n-        try {\n-            this.savingsAccountDataValidator.validateForSubmit(command.json());\n-            final AppUser submittedBy = this.context.authenticatedUser();\n-\n-            final SavingsAccount account = this.savingAccountAssembler.assembleFrom(command, submittedBy);\n-            this.savingAccountRepository.save(account);\n-\n-            generateAccountNumber(account);\n-\n-            final Long savingsId = account.getId();\n-            if(command.parameterExists(SavingsApiConstants.datatables)){\n-                this.entityDatatableChecksWritePlatformService.saveDatatables(StatusEnum.CREATE.getCode().longValue(),\n-                        EntityTables.SAVING.getName(), savingsId, account.productId(),\n-                        command.arrayOfParameterNamed(SavingsApiConstants.datatables));\n-            }\n-            this.entityDatatableChecksWritePlatformService.runTheCheckForProduct(savingsId,\n-                    EntityTables.SAVING.getName(), StatusEnum.CREATE.getCode().longValue(),\n-                    EntityTables.SAVING.getForeignKeyColumnNameOnDatatable(), account.productId());\n-\n-            this.businessEventNotifierService.notifyBusinessEventWasExecuted(BUSINESS_EVENTS.SAVINGS_CREATE,\n-                    constructEntityMap(BUSINESS_ENTITY.SAVING, account));\n-\n-            return new CommandProcessingResultBuilder() //\n-                    .withCommandId(command.commandId()) //\n+public class SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl\n+          implements SavingsApplicationProcessWritePlatformService {\n+\n+     private final static Logger logger = LoggerFactory\n+               .getLogger(SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl.class);\n+\n+     private final PlatformSecurityContext context;\n+     private final SavingsAccountRepositoryWrapper savingAccountRepository;\n+     private final SavingsAccountAssembler savingAccountAssembler;\n+     private final SavingsAccountDataValidator savingsAccountDataValidator;\n+     private final AccountNumberGenerator accountNumberGenerator;\n+     private final ClientRepositoryWrapper clientRepository;\n+     private final GroupRepository groupRepository;\n+     private final SavingsProductRepository savingsProductRepository;\n+     private final NoteRepository noteRepository;\n+     private final StaffRepositoryWrapper staffRepository;\n+     private final SavingsAccountApplicationTransitionApiJsonValidator savingsAccountApplicationTransitionApiJsonValidator;\n+     private final SavingsAccountChargeAssembler savingsAccountChargeAssembler;\n+     private final CommandProcessingService commandProcessingService;\n+     private final SavingsAccountDomainService savingsAccountDomainService;\n+     private final SavingsAccountWritePlatformService savingsAccountWritePlatformService;\n+     private final AccountNumberFormatRepositoryWrapper accountNumberFormatRepository;\n+     private final BusinessEventNotifierService businessEventNotifierService;\n+     private final EntityDatatableChecksWritePlatformService entityDatatableChecksWritePlatformService;\n+     private final GSIMRepositoy gsimRepository;\n+     private final GroupRepositoryWrapper groupRepositoryWrapper;\n+     private final GroupSavingsIndividualMonitoringWritePlatformService gsimWritePlatformService;\n+\n+     @Autowired\n+     public SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl(final PlatformSecurityContext context,\n+               final SavingsAccountRepositoryWrapper savingAccountRepository,\n+               final SavingsAccountAssembler savingAccountAssembler,\n+               final SavingsAccountDataValidator savingsAccountDataValidator,\n+               final AccountNumberGenerator accountNumberGenerator, final ClientRepositoryWrapper clientRepository,\n+               final GroupRepository groupRepository, final SavingsProductRepository savingsProductRepository,\n+               final NoteRepository noteRepository, final StaffRepositoryWrapper staffRepository,\n+               final SavingsAccountApplicationTransitionApiJsonValidator savingsAccountApplicationTransitionApiJsonValidator,\n+               final SavingsAccountChargeAssembler savingsAccountChargeAssembler,\n+               final CommandProcessingService commandProcessingService,\n+               final SavingsAccountDomainService savingsAccountDomainService,\n+               final SavingsAccountWritePlatformService savingsAccountWritePlatformService,\n+               final AccountNumberFormatRepositoryWrapper accountNumberFormatRepository,\n+               final BusinessEventNotifierService businessEventNotifierService,\n+               final EntityDatatableChecksWritePlatformService entityDatatableChecksWritePlatformService,\n+               final GSIMRepositoy gsimRepository, final GroupRepositoryWrapper groupRepositoryWrapper,\n+               final GroupSavingsIndividualMonitoringWritePlatformService gsimWritePlatformService) {\n+          this.context = context;\n+          this.savingAccountRepository = savingAccountRepository;\n+          this.savingAccountAssembler = savingAccountAssembler;\n+          this.accountNumberGenerator = accountNumberGenerator;\n+          this.savingsAccountDataValidator = savingsAccountDataValidator;\n+          this.clientRepository = clientRepository;\n+          this.groupRepository = groupRepository;\n+          this.savingsProductRepository = savingsProductRepository;\n+          this.noteRepository = noteRepository;\n+          this.staffRepository = staffRepository;\n+          this.savingsAccountApplicationTransitionApiJsonValidator = savingsAccountApplicationTransitionApiJsonValidator;\n+          this.savingsAccountChargeAssembler = savingsAccountChargeAssembler;\n+          this.commandProcessingService = commandProcessingService;\n+          this.savingsAccountDomainService = savingsAccountDomainService;\n+          this.accountNumberFormatRepository = accountNumberFormatRepository;\n+          this.savingsAccountWritePlatformService = savingsAccountWritePlatformService;\n+          this.businessEventNotifierService = businessEventNotifierService;\n+          this.entityDatatableChecksWritePlatformService = entityDatatableChecksWritePlatformService;\n+          this.gsimRepository = gsimRepository;\n+          this.groupRepositoryWrapper = groupRepositoryWrapper;\n+          this.gsimWritePlatformService = gsimWritePlatformService;\n+     }\n+\n+     /*\n+      * Guaranteed to throw an exception no matter what the data integrity issue\n+      * is.\n+      */\n+     private void handleDataIntegrityIssues(final JsonCommand command, final Throwable realCause, final Exception dve) {\n+\n+          final StringBuilder errorCodeBuilder = new StringBuilder(\"error.msg.\")\n+                    .append(SavingsApiConstants.SAVINGS_ACCOUNT_RESOURCE_NAME);\n+\n+          if (realCause.getMessage().contains(\"sa_account_no_UNIQUE\")) {\n+               final String accountNo = command.stringValueOfParameterNamed(\"accountNo\");\n+               errorCodeBuilder.append(\".duplicate.accountNo\");\n+               throw new PlatformDataIntegrityException(errorCodeBuilder.toString(),\n+                         \"Savings account with accountNo \" + accountNo + \" already exists\", \"accountNo\", accountNo);\n+\n+          } else if (realCause.getMessage().contains(\"sa_externalid_UNIQUE\")) {\n+\n+               final String externalId = command.stringValueOfParameterNamed(\"externalId\");\n+               errorCodeBuilder.append(\".duplicate.externalId\");\n+               throw new PlatformDataIntegrityException(errorCodeBuilder.toString(),\n+                         \"Savings account with externalId \" + externalId + \" already exists\", \"externalId\", externalId);\n+          }\n+\n+          errorCodeBuilder.append(\".unknown.data.integrity.issue\");\n+          logger.error(\"{}\", dve.getMessage(), dve);\n+          throw new PlatformDataIntegrityException(errorCodeBuilder.toString(),\n+                    \"Unknown data integrity issue with savings account.\");\n+     }\n+\n+     @Transactional\n+     @Override\n+     public CommandProcessingResult submitGSIMApplication(final JsonCommand command) {\n+\n+          CommandProcessingResult result = null;\n+\n+          JsonArray gsimApplications = command.arrayOfParameterNamed(\"clientArray\");\n+\n+          for (JsonElement gsimApplication : gsimApplications) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 255}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDUzNDMyOnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/main/resources/META-INF/persistence.xml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNjoyNzoyNFrOGHsSeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDoyNDoxOFrOGJIlig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcxODg0MQ==", "bodyText": "These two OpenJPA configuration changes here (EagerFetchMode & SubclassFetchMode) strike me as major data access changes that perhaps should not be \"hidden\" within this PR.. would you be willing to raise a new JIRA and a separate PR and remove this from here so that it can be reviewed and discussed in its own right?", "url": "https://github.com/apache/fineract/pull/738#discussion_r410718841", "createdAt": "2020-04-18T16:27:24Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/main/resources/META-INF/persistence.xml", "diffHunk": "@@ -28,6 +28,8 @@\n \t<persistence-unit name=\"jpa-pu\" transaction-type=\"RESOURCE_LOCAL\">\n \t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n \t<properties>\n+\t\t<property name=\"openjpa.jdbc.EagerFetchMode\" value=\"none\"/>\n+\t\t<property name=\"openjpa.jdbc.SubclassFetchMode\" value=\"none\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk4NTg0NA==", "bodyText": "i agree with @vorburger", "url": "https://github.com/apache/fineract/pull/738#discussion_r410985844", "createdAt": "2020-04-19T20:35:50Z", "author": {"login": "nikpawar89"}, "path": "fineract-provider/src/main/resources/META-INF/persistence.xml", "diffHunk": "@@ -28,6 +28,8 @@\n \t<persistence-unit name=\"jpa-pu\" transaction-type=\"RESOURCE_LOCAL\">\n \t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n \t<properties>\n+\t\t<property name=\"openjpa.jdbc.EagerFetchMode\" value=\"none\"/>\n+\t\t<property name=\"openjpa.jdbc.SubclassFetchMode\" value=\"none\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcxODg0MQ=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIzMTA1MA==", "bodyText": "Comment has been addressed and new PR has been created: #777", "url": "https://github.com/apache/fineract/pull/738#discussion_r412231050", "createdAt": "2020-04-21T14:24:18Z", "author": {"login": "rrpawar96"}, "path": "fineract-provider/src/main/resources/META-INF/persistence.xml", "diffHunk": "@@ -28,6 +28,8 @@\n \t<persistence-unit name=\"jpa-pu\" transaction-type=\"RESOURCE_LOCAL\">\n \t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n \t<properties>\n+\t\t<property name=\"openjpa.jdbc.EagerFetchMode\" value=\"none\"/>\n+\t\t<property name=\"openjpa.jdbc.SubclassFetchMode\" value=\"none\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcxODg0MQ=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MjYwNDc2OnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/accountdetails/service/AccountDetailsReadPlatformServiceJpaRepositoryImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxNzozNzo0OFrOGH6nsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxODowOTo0NlrOGPuNFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk1MzY0OQ==", "bodyText": "can we pass GLIM account number as we are passing group id, appending it in string doesn't look good.", "url": "https://github.com/apache/fineract/pull/738#discussion_r410953649", "createdAt": "2020-04-19T17:37:48Z", "author": {"login": "nikpawar89"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/accountdetails/service/AccountDetailsReadPlatformServiceJpaRepositoryImpl.java", "diffHunk": "@@ -131,6 +162,16 @@ public AccountSummaryCollectionData retrieveGroupAccountDetails(final Long group\n         return retrieveLoanAccountDetails(loanWhereClause, new Object[] { clientId });\n     }\n \n+    @Override\n+        public List<LoanAccountSummaryData> retrieveLoanAccountDetailsByGroupIdAndGlimAccountNumber(final Long groupId,final String glimAccount) {\n+        final LoanAccountSummaryDataMapper rm = new LoanAccountSummaryDataMapper();\n+        final String loanWhereClauseForGroupAndLoanType = \" where l.group_id =? and glim.account_number=\"+glimAccount+\" and l.loan_type_enum=4\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzODgzNw==", "bodyText": "please look into this.", "url": "https://github.com/apache/fineract/pull/738#discussion_r419138837", "createdAt": "2020-05-03T18:09:46Z", "author": {"login": "nikpawar89"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/accountdetails/service/AccountDetailsReadPlatformServiceJpaRepositoryImpl.java", "diffHunk": "@@ -131,6 +162,16 @@ public AccountSummaryCollectionData retrieveGroupAccountDetails(final Long group\n         return retrieveLoanAccountDetails(loanWhereClause, new Object[] { clientId });\n     }\n \n+    @Override\n+        public List<LoanAccountSummaryData> retrieveLoanAccountDetailsByGroupIdAndGlimAccountNumber(final Long groupId,final String glimAccount) {\n+        final LoanAccountSummaryDataMapper rm = new LoanAccountSummaryDataMapper();\n+        final String loanWhereClauseForGroupAndLoanType = \" where l.group_id =? and glim.account_number=\"+glimAccount+\" and l.loan_type_enum=4\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk1MzY0OQ=="}, "originalCommit": null, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MjYxMjM3OnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/group/api/GroupsApiResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxNzo0MjowNlrOGH6rIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxNzo0MjowNlrOGH6rIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk1NDUzMA==", "bodyText": "Try using  Collections.emptyList() to initialize container variables, it helps to avoid ugly null pointer exceptions", "url": "https://github.com/apache/fineract/pull/738#discussion_r410954530", "createdAt": "2020-04-19T17:42:06Z", "author": {"login": "nikpawar89"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/group/api/GroupsApiResource.java", "diffHunk": "@@ -508,4 +524,64 @@ public String postGroupTemplate(@FormDataParam(\"file\") InputStream uploadedInput\n                 uploadedInputStream,fileDetail,locale,dateFormat);\n         return this.toApiJsonSerializer.serialize(importDocumentId);\n     }\n+\n+    @GET\n+    @Path(\"{groupId}/glimaccounts\")\n+    @Consumes({ MediaType.APPLICATION_JSON })\n+    @Produces({ MediaType.APPLICATION_JSON })\n+    public String retrieveglimAccounts(@PathParam(\"groupId\") final Long groupId, @QueryParam(\"parentLoanAccountNo\")final String parentLoanAccountNo,  @Context final UriInfo uriInfo)\n+    {\n+         this.context.authenticatedUser().validateHasReadPermission(\"GROUP\");\n+         List<GLIMContainer> glimContainer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MjYzNTk2OnYy", "diffSide": "LEFT", "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/api/LoansApiResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxNzo1Njo1NVrOGH617w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxODoxMzoxNFrOGPuOhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk1NzI5NQ==", "bodyText": "I think this swagger end point here was for Loan StateTransition, please switch the position of glimStateTransitions with stateTransitions. Later, you can add swagger end point for your API as well.", "url": "https://github.com/apache/fineract/pull/738#discussion_r410957295", "createdAt": "2020-04-19T17:56:55Z", "author": {"login": "nikpawar89"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/api/LoansApiResource.java", "diffHunk": "@@ -848,59 +862,121 @@ public String deleteLoanApplication(@PathParam(\"loanId\") @ApiParam(value = \"loan\n         return this.toApiJsonSerializer.serialize(result);\n     }\n \n+\n+    @GET\n+    @Path(\"glimAccount/{glimId}\")\n+    @Consumes({ MediaType.APPLICATION_JSON })\n+    @Produces({ MediaType.APPLICATION_JSON })\n+    public String getGlimRepaymentTemplate(@PathParam(\"glimId\") final Long glimId,@Context final UriInfo uriInfo)\n+    {\n+          this.context.authenticatedUser().validateHasReadPermission(this.resourceNameForPermissions);\n+          Collection<GlimRepaymentTemplate> glimRepaymentTemplate=this.glimAccountInfoReadPlatformService.findglimRepaymentTemplate(glimId);\n+          final ApiRequestJsonSerializationSettings settings = this.apiRequestParameterHelper.process(uriInfo.getQueryParameters());\n+         return this.glimTemplateToApiJsonSerializer.serialize(settings, glimRepaymentTemplate, this.GLIM_ACCOUNTS_DATA_PARAMETERS);\n+\n+    }\n+\n+\n     @POST\n-    @Path(\"{loanId}\")\n+    @Path(\"glimAccount/{glimId}\")\n     @Consumes({ MediaType.APPLICATION_JSON })\n     @Produces({ MediaType.APPLICATION_JSON })\n+\n     @ApiOperation(value = \"Approve Loan Application | Recover Loan Guarantee | Undo Loan Application Approval | Assign a Loan Officer | Unassign a Loan Officer | Reject Loan Application | Applicant Withdraws from Loan Application | Disburse Loan Disburse Loan To Savings Account | Undo Loan Disbursal\", httpMethod = \"POST\", notes = \"Approve Loan Application:\\n\" + \"Mandatory Fields: approvedOnDate\\n\" + \"Optional Fields: approvedLoanAmount and expectedDisbursementDate\\n\" + \"Approves the loan application\\n\\n\" + \"Recover Loan Guarantee:\\n\" + \"Recovers the loan guarantee\\n\\n\" + \"Undo Loan Application Approval:\\n\" + \"Undoes the Loan Application Approval\\n\\n\" + \"Assign a Loan Officer:\\n\" + \"Allows you to assign Loan Officer for existing Loan.\\n\\n\" + \"Unassign a Loan Officer:\\n\" + \"Allows you to unassign the Loan Officer.\\n\\n\" + \"Reject Loan Application:\\n\" + \"Mandatory Fields: rejectedOnDate\\n\" + \"Allows you to reject the loan application\\n\\n\" + \"Applicant Withdraws from Loan Application:\\n\" + \"Mandatory Fields: withdrawnOnDate\\n\" + \"Allows the applicant to withdraw the loan application\\n\\n\" + \"Disburse Loan:\\n\" + \"Mandatory Fields: actualDisbursementDate\\n\" + \"Optional Fields: transactionAmount and fixedEmiAmount\\n\" + \"Disburses the Loan\\n\\n\" + \"Disburse Loan To Savings Account:\\n\" + \"Mandatory Fields: actualDisbursementDate\\n\" + \"Optional Fields: transactionAmount and fixedEmiAmount\\n\" + \"Disburses the loan to Saving Account\\n\\n\" + \"Undo Loan Disbursal:\\n\" + \"Undoes the Loan Disbursal\\n\" + \"Showing request and response for Assign a Loan Officer\")\n     @ApiImplicitParams({@ApiImplicitParam(value = \"body\", required = true, paramType = \"body\", dataType = \"body\", format = \"body\", dataTypeClass = LoansApiResourceSwagger.PostLoansLoanIdRequest.class)})\n     @ApiResponses({@ApiResponse(code = 200, message = \"OK\", response = LoansApiResourceSwagger.PostLoansLoanIdResponse.class)})\n-    public String stateTransitions(@PathParam(\"loanId\") @ApiParam(value = \"loanId\") final Long loanId, @QueryParam(\"command\") @ApiParam(value = \"command\") final String commandParam,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzOTIwNA==", "bodyText": "could you please check this.", "url": "https://github.com/apache/fineract/pull/738#discussion_r419139204", "createdAt": "2020-05-03T18:13:14Z", "author": {"login": "nikpawar89"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/api/LoansApiResource.java", "diffHunk": "@@ -848,59 +862,121 @@ public String deleteLoanApplication(@PathParam(\"loanId\") @ApiParam(value = \"loan\n         return this.toApiJsonSerializer.serialize(result);\n     }\n \n+\n+    @GET\n+    @Path(\"glimAccount/{glimId}\")\n+    @Consumes({ MediaType.APPLICATION_JSON })\n+    @Produces({ MediaType.APPLICATION_JSON })\n+    public String getGlimRepaymentTemplate(@PathParam(\"glimId\") final Long glimId,@Context final UriInfo uriInfo)\n+    {\n+          this.context.authenticatedUser().validateHasReadPermission(this.resourceNameForPermissions);\n+          Collection<GlimRepaymentTemplate> glimRepaymentTemplate=this.glimAccountInfoReadPlatformService.findglimRepaymentTemplate(glimId);\n+          final ApiRequestJsonSerializationSettings settings = this.apiRequestParameterHelper.process(uriInfo.getQueryParameters());\n+         return this.glimTemplateToApiJsonSerializer.serialize(settings, glimRepaymentTemplate, this.GLIM_ACCOUNTS_DATA_PARAMETERS);\n+\n+    }\n+\n+\n     @POST\n-    @Path(\"{loanId}\")\n+    @Path(\"glimAccount/{glimId}\")\n     @Consumes({ MediaType.APPLICATION_JSON })\n     @Produces({ MediaType.APPLICATION_JSON })\n+\n     @ApiOperation(value = \"Approve Loan Application | Recover Loan Guarantee | Undo Loan Application Approval | Assign a Loan Officer | Unassign a Loan Officer | Reject Loan Application | Applicant Withdraws from Loan Application | Disburse Loan Disburse Loan To Savings Account | Undo Loan Disbursal\", httpMethod = \"POST\", notes = \"Approve Loan Application:\\n\" + \"Mandatory Fields: approvedOnDate\\n\" + \"Optional Fields: approvedLoanAmount and expectedDisbursementDate\\n\" + \"Approves the loan application\\n\\n\" + \"Recover Loan Guarantee:\\n\" + \"Recovers the loan guarantee\\n\\n\" + \"Undo Loan Application Approval:\\n\" + \"Undoes the Loan Application Approval\\n\\n\" + \"Assign a Loan Officer:\\n\" + \"Allows you to assign Loan Officer for existing Loan.\\n\\n\" + \"Unassign a Loan Officer:\\n\" + \"Allows you to unassign the Loan Officer.\\n\\n\" + \"Reject Loan Application:\\n\" + \"Mandatory Fields: rejectedOnDate\\n\" + \"Allows you to reject the loan application\\n\\n\" + \"Applicant Withdraws from Loan Application:\\n\" + \"Mandatory Fields: withdrawnOnDate\\n\" + \"Allows the applicant to withdraw the loan application\\n\\n\" + \"Disburse Loan:\\n\" + \"Mandatory Fields: actualDisbursementDate\\n\" + \"Optional Fields: transactionAmount and fixedEmiAmount\\n\" + \"Disburses the Loan\\n\\n\" + \"Disburse Loan To Savings Account:\\n\" + \"Mandatory Fields: actualDisbursementDate\\n\" + \"Optional Fields: transactionAmount and fixedEmiAmount\\n\" + \"Disburses the loan to Saving Account\\n\\n\" + \"Undo Loan Disbursal:\\n\" + \"Undoes the Loan Disbursal\\n\" + \"Showing request and response for Assign a Loan Officer\")\n     @ApiImplicitParams({@ApiImplicitParam(value = \"body\", required = true, paramType = \"body\", dataType = \"body\", format = \"body\", dataTypeClass = LoansApiResourceSwagger.PostLoansLoanIdRequest.class)})\n     @ApiResponses({@ApiResponse(code = 200, message = \"OK\", response = LoansApiResourceSwagger.PostLoansLoanIdResponse.class)})\n-    public String stateTransitions(@PathParam(\"loanId\") @ApiParam(value = \"loanId\") final Long loanId, @QueryParam(\"command\") @ApiParam(value = \"command\") final String commandParam,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk1NzI5NQ=="}, "originalCommit": null, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MjY0NjExOnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/api/LoansApiResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxODowMzoxMFrOGH66KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxODoxMjozMVrOGPuOOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk1ODM3Ng==", "bodyText": "I think instead of throwing exception over here, we should let Client know about about incorrect param.\nBy throwing exceptions, we sometimes reveal too much of inner mechanism to clients- just my thought.", "url": "https://github.com/apache/fineract/pull/738#discussion_r410958376", "createdAt": "2020-04-19T18:03:10Z", "author": {"login": "nikpawar89"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/api/LoansApiResource.java", "diffHunk": "@@ -848,59 +862,121 @@ public String deleteLoanApplication(@PathParam(\"loanId\") @ApiParam(value = \"loan\n         return this.toApiJsonSerializer.serialize(result);\n     }\n \n+\n+    @GET\n+    @Path(\"glimAccount/{glimId}\")\n+    @Consumes({ MediaType.APPLICATION_JSON })\n+    @Produces({ MediaType.APPLICATION_JSON })\n+    public String getGlimRepaymentTemplate(@PathParam(\"glimId\") final Long glimId,@Context final UriInfo uriInfo)\n+    {\n+          this.context.authenticatedUser().validateHasReadPermission(this.resourceNameForPermissions);\n+          Collection<GlimRepaymentTemplate> glimRepaymentTemplate=this.glimAccountInfoReadPlatformService.findglimRepaymentTemplate(glimId);\n+          final ApiRequestJsonSerializationSettings settings = this.apiRequestParameterHelper.process(uriInfo.getQueryParameters());\n+         return this.glimTemplateToApiJsonSerializer.serialize(settings, glimRepaymentTemplate, this.GLIM_ACCOUNTS_DATA_PARAMETERS);\n+\n+    }\n+\n+\n     @POST\n-    @Path(\"{loanId}\")\n+    @Path(\"glimAccount/{glimId}\")\n     @Consumes({ MediaType.APPLICATION_JSON })\n     @Produces({ MediaType.APPLICATION_JSON })\n+\n     @ApiOperation(value = \"Approve Loan Application | Recover Loan Guarantee | Undo Loan Application Approval | Assign a Loan Officer | Unassign a Loan Officer | Reject Loan Application | Applicant Withdraws from Loan Application | Disburse Loan Disburse Loan To Savings Account | Undo Loan Disbursal\", httpMethod = \"POST\", notes = \"Approve Loan Application:\\n\" + \"Mandatory Fields: approvedOnDate\\n\" + \"Optional Fields: approvedLoanAmount and expectedDisbursementDate\\n\" + \"Approves the loan application\\n\\n\" + \"Recover Loan Guarantee:\\n\" + \"Recovers the loan guarantee\\n\\n\" + \"Undo Loan Application Approval:\\n\" + \"Undoes the Loan Application Approval\\n\\n\" + \"Assign a Loan Officer:\\n\" + \"Allows you to assign Loan Officer for existing Loan.\\n\\n\" + \"Unassign a Loan Officer:\\n\" + \"Allows you to unassign the Loan Officer.\\n\\n\" + \"Reject Loan Application:\\n\" + \"Mandatory Fields: rejectedOnDate\\n\" + \"Allows you to reject the loan application\\n\\n\" + \"Applicant Withdraws from Loan Application:\\n\" + \"Mandatory Fields: withdrawnOnDate\\n\" + \"Allows the applicant to withdraw the loan application\\n\\n\" + \"Disburse Loan:\\n\" + \"Mandatory Fields: actualDisbursementDate\\n\" + \"Optional Fields: transactionAmount and fixedEmiAmount\\n\" + \"Disburses the Loan\\n\\n\" + \"Disburse Loan To Savings Account:\\n\" + \"Mandatory Fields: actualDisbursementDate\\n\" + \"Optional Fields: transactionAmount and fixedEmiAmount\\n\" + \"Disburses the loan to Saving Account\\n\\n\" + \"Undo Loan Disbursal:\\n\" + \"Undoes the Loan Disbursal\\n\" + \"Showing request and response for Assign a Loan Officer\")\n     @ApiImplicitParams({@ApiImplicitParam(value = \"body\", required = true, paramType = \"body\", dataType = \"body\", format = \"body\", dataTypeClass = LoansApiResourceSwagger.PostLoansLoanIdRequest.class)})\n     @ApiResponses({@ApiResponse(code = 200, message = \"OK\", response = LoansApiResourceSwagger.PostLoansLoanIdResponse.class)})\n-    public String stateTransitions(@PathParam(\"loanId\") @ApiParam(value = \"loanId\") final Long loanId, @QueryParam(\"command\") @ApiParam(value = \"command\") final String commandParam,\n-           @ApiParam(hidden = true) final String apiRequestBodyAsJson) {\n+\n+    public String glimStateTransitions(@PathParam(\"glimId\") final Long glimId, @QueryParam(\"command\") final String commandParam,\n+          final String apiRequestBodyAsJson) {\n+\n \n         final CommandWrapperBuilder builder = new CommandWrapperBuilder().withJson(apiRequestBodyAsJson);\n \n         CommandProcessingResult result = null;\n \n         if (is(commandParam, \"reject\")) {\n-            final CommandWrapper commandRequest = builder.rejectLoanApplication(loanId).build();\n+            final CommandWrapper commandRequest = builder.rejectGLIMApplication(glimId).build();\n             result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n-        } else if (is(commandParam, \"withdrawnByApplicant\")) {\n-            final CommandWrapper commandRequest = builder.withdrawLoanApplication(loanId).build();\n-            result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n-        } else if (is(commandParam, \"approve\")) {\n-            final CommandWrapper commandRequest = builder.approveLoanApplication(loanId).build();\n-            result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n-        } else if (is(commandParam, \"disburse\")) {\n-            final CommandWrapper commandRequest = builder.disburseLoanApplication(loanId).build();\n-            result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n-        } else if (is(commandParam, \"disburseToSavings\")) {\n-            final CommandWrapper commandRequest = builder.disburseLoanToSavingsApplication(loanId).build();\n+        }else if (is(commandParam, \"approve\")) {\n+            final CommandWrapper commandRequest = builder.approveGLIMLoanApplication(glimId).build();\n             result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n         }\n-\n-        if (is(commandParam, \"undoapproval\")) {\n-            final CommandWrapper commandRequest = builder.undoLoanApplicationApproval(loanId).build();\n-            result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n-        } else if (is(commandParam, \"undodisbursal\")) {\n-            final CommandWrapper commandRequest = builder.undoLoanApplicationDisbursal(loanId).build();\n+        else if (is(commandParam, \"disburse\")) {\n+            final CommandWrapper commandRequest = builder.disburseGlimLoanApplication(glimId).build();\n             result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n-        }else if (is(commandParam, \"undolastdisbursal\")) {\n-            final CommandWrapper commandRequest = builder.undoLastDisbursalLoanApplication(loanId).build();\n+        }  else if (is(commandParam, \"glimrepayment\")) {\n+            final CommandWrapper commandRequest = builder.repaymentGlimLoanApplication(glimId).build();\n             result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n         }\n-\n-        if (is(commandParam, \"assignloanofficer\")) {\n-            final CommandWrapper commandRequest = builder.assignLoanOfficer(loanId).build();\n+        else if (is(commandParam, \"glimrepayment\")) {\n+            final CommandWrapper commandRequest = builder.repaymentGlimLoanApplication(glimId).build();\n             result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n-        } else if (is(commandParam, \"unassignloanofficer\")) {\n-            final CommandWrapper commandRequest = builder.unassignLoanOfficer(loanId).build();\n+        }\n+        else if (is(commandParam, \"undodisbursal\")) {\n+            final CommandWrapper commandRequest = builder.undoGLIMLoanDisbursal(glimId).build();\n             result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n-        } else if (is(commandParam, \"recoverGuarantees\")) {\n-            final CommandWrapper commandRequest = new CommandWrapperBuilder().recoverFromGuarantor(loanId).build();\n+        }\n+        else if (is(commandParam, \"undoapproval\")) {\n+            final CommandWrapper commandRequest = builder.undoGLIMLoanApproval(glimId).build();\n             result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n         }\n \n+\n+        if (result == null) { throw new UnrecognizedQueryParamException(\"command\", commandParam); }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzOTEzMQ==", "bodyText": "you can ignore this.", "url": "https://github.com/apache/fineract/pull/738#discussion_r419139131", "createdAt": "2020-05-03T18:12:31Z", "author": {"login": "nikpawar89"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/api/LoansApiResource.java", "diffHunk": "@@ -848,59 +862,121 @@ public String deleteLoanApplication(@PathParam(\"loanId\") @ApiParam(value = \"loan\n         return this.toApiJsonSerializer.serialize(result);\n     }\n \n+\n+    @GET\n+    @Path(\"glimAccount/{glimId}\")\n+    @Consumes({ MediaType.APPLICATION_JSON })\n+    @Produces({ MediaType.APPLICATION_JSON })\n+    public String getGlimRepaymentTemplate(@PathParam(\"glimId\") final Long glimId,@Context final UriInfo uriInfo)\n+    {\n+          this.context.authenticatedUser().validateHasReadPermission(this.resourceNameForPermissions);\n+          Collection<GlimRepaymentTemplate> glimRepaymentTemplate=this.glimAccountInfoReadPlatformService.findglimRepaymentTemplate(glimId);\n+          final ApiRequestJsonSerializationSettings settings = this.apiRequestParameterHelper.process(uriInfo.getQueryParameters());\n+         return this.glimTemplateToApiJsonSerializer.serialize(settings, glimRepaymentTemplate, this.GLIM_ACCOUNTS_DATA_PARAMETERS);\n+\n+    }\n+\n+\n     @POST\n-    @Path(\"{loanId}\")\n+    @Path(\"glimAccount/{glimId}\")\n     @Consumes({ MediaType.APPLICATION_JSON })\n     @Produces({ MediaType.APPLICATION_JSON })\n+\n     @ApiOperation(value = \"Approve Loan Application | Recover Loan Guarantee | Undo Loan Application Approval | Assign a Loan Officer | Unassign a Loan Officer | Reject Loan Application | Applicant Withdraws from Loan Application | Disburse Loan Disburse Loan To Savings Account | Undo Loan Disbursal\", httpMethod = \"POST\", notes = \"Approve Loan Application:\\n\" + \"Mandatory Fields: approvedOnDate\\n\" + \"Optional Fields: approvedLoanAmount and expectedDisbursementDate\\n\" + \"Approves the loan application\\n\\n\" + \"Recover Loan Guarantee:\\n\" + \"Recovers the loan guarantee\\n\\n\" + \"Undo Loan Application Approval:\\n\" + \"Undoes the Loan Application Approval\\n\\n\" + \"Assign a Loan Officer:\\n\" + \"Allows you to assign Loan Officer for existing Loan.\\n\\n\" + \"Unassign a Loan Officer:\\n\" + \"Allows you to unassign the Loan Officer.\\n\\n\" + \"Reject Loan Application:\\n\" + \"Mandatory Fields: rejectedOnDate\\n\" + \"Allows you to reject the loan application\\n\\n\" + \"Applicant Withdraws from Loan Application:\\n\" + \"Mandatory Fields: withdrawnOnDate\\n\" + \"Allows the applicant to withdraw the loan application\\n\\n\" + \"Disburse Loan:\\n\" + \"Mandatory Fields: actualDisbursementDate\\n\" + \"Optional Fields: transactionAmount and fixedEmiAmount\\n\" + \"Disburses the Loan\\n\\n\" + \"Disburse Loan To Savings Account:\\n\" + \"Mandatory Fields: actualDisbursementDate\\n\" + \"Optional Fields: transactionAmount and fixedEmiAmount\\n\" + \"Disburses the loan to Saving Account\\n\\n\" + \"Undo Loan Disbursal:\\n\" + \"Undoes the Loan Disbursal\\n\" + \"Showing request and response for Assign a Loan Officer\")\n     @ApiImplicitParams({@ApiImplicitParam(value = \"body\", required = true, paramType = \"body\", dataType = \"body\", format = \"body\", dataTypeClass = LoansApiResourceSwagger.PostLoansLoanIdRequest.class)})\n     @ApiResponses({@ApiResponse(code = 200, message = \"OK\", response = LoansApiResourceSwagger.PostLoansLoanIdResponse.class)})\n-    public String stateTransitions(@PathParam(\"loanId\") @ApiParam(value = \"loanId\") final Long loanId, @QueryParam(\"command\") @ApiParam(value = \"command\") final String commandParam,\n-           @ApiParam(hidden = true) final String apiRequestBodyAsJson) {\n+\n+    public String glimStateTransitions(@PathParam(\"glimId\") final Long glimId, @QueryParam(\"command\") final String commandParam,\n+          final String apiRequestBodyAsJson) {\n+\n \n         final CommandWrapperBuilder builder = new CommandWrapperBuilder().withJson(apiRequestBodyAsJson);\n \n         CommandProcessingResult result = null;\n \n         if (is(commandParam, \"reject\")) {\n-            final CommandWrapper commandRequest = builder.rejectLoanApplication(loanId).build();\n+            final CommandWrapper commandRequest = builder.rejectGLIMApplication(glimId).build();\n             result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n-        } else if (is(commandParam, \"withdrawnByApplicant\")) {\n-            final CommandWrapper commandRequest = builder.withdrawLoanApplication(loanId).build();\n-            result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n-        } else if (is(commandParam, \"approve\")) {\n-            final CommandWrapper commandRequest = builder.approveLoanApplication(loanId).build();\n-            result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n-        } else if (is(commandParam, \"disburse\")) {\n-            final CommandWrapper commandRequest = builder.disburseLoanApplication(loanId).build();\n-            result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n-        } else if (is(commandParam, \"disburseToSavings\")) {\n-            final CommandWrapper commandRequest = builder.disburseLoanToSavingsApplication(loanId).build();\n+        }else if (is(commandParam, \"approve\")) {\n+            final CommandWrapper commandRequest = builder.approveGLIMLoanApplication(glimId).build();\n             result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n         }\n-\n-        if (is(commandParam, \"undoapproval\")) {\n-            final CommandWrapper commandRequest = builder.undoLoanApplicationApproval(loanId).build();\n-            result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n-        } else if (is(commandParam, \"undodisbursal\")) {\n-            final CommandWrapper commandRequest = builder.undoLoanApplicationDisbursal(loanId).build();\n+        else if (is(commandParam, \"disburse\")) {\n+            final CommandWrapper commandRequest = builder.disburseGlimLoanApplication(glimId).build();\n             result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n-        }else if (is(commandParam, \"undolastdisbursal\")) {\n-            final CommandWrapper commandRequest = builder.undoLastDisbursalLoanApplication(loanId).build();\n+        }  else if (is(commandParam, \"glimrepayment\")) {\n+            final CommandWrapper commandRequest = builder.repaymentGlimLoanApplication(glimId).build();\n             result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n         }\n-\n-        if (is(commandParam, \"assignloanofficer\")) {\n-            final CommandWrapper commandRequest = builder.assignLoanOfficer(loanId).build();\n+        else if (is(commandParam, \"glimrepayment\")) {\n+            final CommandWrapper commandRequest = builder.repaymentGlimLoanApplication(glimId).build();\n             result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n-        } else if (is(commandParam, \"unassignloanofficer\")) {\n-            final CommandWrapper commandRequest = builder.unassignLoanOfficer(loanId).build();\n+        }\n+        else if (is(commandParam, \"undodisbursal\")) {\n+            final CommandWrapper commandRequest = builder.undoGLIMLoanDisbursal(glimId).build();\n             result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n-        } else if (is(commandParam, \"recoverGuarantees\")) {\n-            final CommandWrapper commandRequest = new CommandWrapperBuilder().recoverFromGuarantor(loanId).build();\n+        }\n+        else if (is(commandParam, \"undoapproval\")) {\n+            final CommandWrapper commandRequest = builder.undoGLIMLoanApproval(glimId).build();\n             result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n         }\n \n+\n+        if (result == null) { throw new UnrecognizedQueryParamException(\"command\", commandParam); }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk1ODM3Ng=="}, "originalCommit": null, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MjY0OTc3OnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/data/GroupLoanIndividualMonitoringAccountData.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxODowNToyNFrOGH67xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxODowNToyNFrOGH67xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk1ODc5MQ==", "bodyText": "There are too many whitespaces and new line throughout the PR- just try to eliminate them, if possible.", "url": "https://github.com/apache/fineract/pull/738#discussion_r410958791", "createdAt": "2020-04-19T18:05:24Z", "author": {"login": "nikpawar89"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/data/GroupLoanIndividualMonitoringAccountData.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.fineract.portfolio.loanaccount.data;\n+\n+import java.math.BigDecimal;\n+\n+public class GroupLoanIndividualMonitoringAccountData\n+{\n+    private final BigDecimal glimId;\n+\n+    private final BigDecimal groupId;\n+\n+    private final String accountNumber;\n+\n+    private final String childAccountNumber;\n+\n+    private final BigDecimal childPrincipalAmount;\n+\n+    private final BigDecimal parentPrincipalAmount;\n+\n+    private final Long childAccountsCount;\n+\n+    private final String loanStatus;\n+\n+    private GroupLoanIndividualMonitoringAccountData(final BigDecimal glimId,final BigDecimal groupId,final String accountNumber, final String childAccountNumber,\n+            final BigDecimal childPrincipalAmount, final BigDecimal parentPrincipalAmount,\n+            final Long childAccountsCount,final String loanStatus) {\n+        this.glimId=glimId;\n+        this.groupId=groupId;\n+        this.accountNumber = accountNumber;\n+        this.childAccountNumber = childAccountNumber;\n+        this.childPrincipalAmount = childPrincipalAmount;\n+        this.parentPrincipalAmount = parentPrincipalAmount;\n+        this.childAccountsCount = childAccountsCount;\n+        this.loanStatus=loanStatus;\n+    }\n+\n+    public static GroupLoanIndividualMonitoringAccountData getInstance(final BigDecimal glimId, final BigDecimal groupId,final String accountNumber, final String childAccountNumber,\n+            final BigDecimal childPrincipalAmount, final BigDecimal parentPrincipalAmount,\n+            final Long childAccountsCount,final String loanStatus)\n+    {\n+        return new GroupLoanIndividualMonitoringAccountData(glimId,groupId,accountNumber,childAccountNumber,\n+                childPrincipalAmount,parentPrincipalAmount,childAccountsCount,loanStatus);\n+    }\n+\n+    public static GroupLoanIndividualMonitoringAccountData getInstance1(final BigDecimal glimId,final BigDecimal groupId,final String accountNumber,\n+            final BigDecimal parentPrincipalAmount,final String loanStatus)\n+    {\n+        return new GroupLoanIndividualMonitoringAccountData(glimId,groupId,accountNumber,null,null,parentPrincipalAmount,null,loanStatus);\n+    }\n+\n+\n+\n+    public BigDecimal getGlimId() {\n+        return glimId;\n+    }\n+\n+    public BigDecimal getGroupId() {\n+        return groupId;\n+    }\n+\n+\n+    public String getAccountNumber() {\n+        return accountNumber;\n+    }\n+\n+    public String getChildAccountNumber() {\n+        return childAccountNumber;\n+    }\n+\n+    public BigDecimal getChildPrincipalAmount() {\n+        return childPrincipalAmount;\n+    }\n+\n+    public BigDecimal getParentPrincipalAmount() {\n+        return parentPrincipalAmount;\n+    }\n+\n+    public Long getChildAccountsCount() {\n+        return childAccountsCount;\n+    }\n+\n+    public String getLoanStatus() {\n+        return loanStatus;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MjY3MzMzOnYy", "diffSide": "LEFT", "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/domain/Loan.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxODoyMTo1N1rOGH7G5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxODoyMTo1N1rOGH7G5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk2MTYzNw==", "bodyText": "Please note, whenever we send a PR, it should contain either refactoring commit or new change commit. If the PR contains both then we should have first refactoring and then new feature commit.\nI know its difficult, to judge initially whether the change you are going to make is going to be either refactoring or new change. But practicing such behavior makes it easy for reviewer. It also helps to understand the impact the PR is going to have on the existing functionality.", "url": "https://github.com/apache/fineract/pull/738#discussion_r410961637", "createdAt": "2020-04-19T18:21:57Z", "author": {"login": "nikpawar89"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/domain/Loan.java", "diffHunk": "@@ -145,6417 +145,6708 @@\n \n @Entity\n @Component\n-@Table(name = \"m_loan\", uniqueConstraints = { @UniqueConstraint(columnNames = { \"account_no\" }, name = \"loan_account_no_UNIQUE\"),\n-        @UniqueConstraint(columnNames = { \"external_id\" }, name = \"loan_externalid_UNIQUE\") })\n+@Table(name = \"m_loan\", uniqueConstraints = {\n+          @UniqueConstraint(columnNames = { \"account_no\" }, name = \"loan_account_no_UNIQUE\"),\n+          @UniqueConstraint(columnNames = { \"external_id\" }, name = \"loan_externalid_UNIQUE\") })\n public class Loan extends AbstractPersistableCustom {\n \n-    /** Disable optimistic locking till batch jobs failures can be fixed **/\n-    @Version\n-    int version;\n+     /** Disable optimistic locking till batch jobs failures can be fixed **/\n+     @Version\n+     int version;\n \n-    @Column(name = \"account_no\", length = 20, unique = true, nullable = false)\n-    private String accountNumber;\n+     @Column(name = \"account_no\", length = 20, unique = true, nullable = false)\n+     private String accountNumber;\n \n-    @Column(name = \"external_id\")\n-    private String externalId;\n+     @Column(name = \"external_id\")\n+     private String externalId;\n \n-    @ManyToOne\n-    @JoinColumn(name = \"client_id\", nullable = true)\n-    private Client client;\n+     @ManyToOne\n+     @JoinColumn(name = \"client_id\", nullable = true)\n+     private Client client;\n \n-    @ManyToOne\n-    @JoinColumn(name = \"group_id\", nullable = true)\n-    private Group group;\n+     @ManyToOne\n+     @JoinColumn(name = \"group_id\", nullable = true)\n+     private Group group;\n \n-    @Column(name = \"loan_type_enum\", nullable = false)\n-    private Integer loanType;\n+     @ManyToOne\n+     @JoinColumn(name = \"glim_id\", nullable = true)\n+     private GroupLoanIndividualMonitoringAccount glim;\n \n-    @ManyToOne(fetch=FetchType.EAGER)\n-    @JoinColumn(name = \"product_id\", nullable = false)\n-    private LoanProduct loanProduct;\n+     @Column(name = \"loan_type_enum\", nullable = false)\n+     private Integer loanType;\n \n-    @ManyToOne(optional = true, fetch=FetchType.EAGER)\n-    @JoinColumn(name = \"fund_id\", nullable = true)\n-    private Fund fund;\n+     @ManyToOne(fetch = FetchType.EAGER)\n+     @JoinColumn(name = \"product_id\", nullable = false)\n+     private LoanProduct loanProduct;\n \n-    @ManyToOne(fetch=FetchType.EAGER)\n-    @JoinColumn(name = \"loan_officer_id\", nullable = true)\n-    private Staff loanOfficer;\n+     @ManyToOne(optional = true, fetch = FetchType.EAGER)\n+     @JoinColumn(name = \"fund_id\", nullable = true)\n+     private Fund fund;\n \n-    @ManyToOne(fetch=FetchType.LAZY)\n-    @JoinColumn(name = \"loanpurpose_cv_id\", nullable = true)\n-    private CodeValue loanPurpose;\n+     @ManyToOne(fetch = FetchType.EAGER)\n+     @JoinColumn(name = \"loan_officer_id\", nullable = true)\n+     private Staff loanOfficer;\n \n-    @ManyToOne(fetch=FetchType.EAGER)\n-    @JoinColumn(name = \"loan_transaction_strategy_id\", nullable = true)\n-    private LoanTransactionProcessingStrategy transactionProcessingStrategy;\n+     @ManyToOne(fetch = FetchType.LAZY)\n+     @JoinColumn(name = \"loanpurpose_cv_id\", nullable = true)\n+     private CodeValue loanPurpose;\n \n-    @Embedded\n-    private LoanProductRelatedDetail loanRepaymentScheduleDetail;\n+     @ManyToOne(fetch = FetchType.EAGER)\n+     @JoinColumn(name = \"loan_transaction_strategy_id\", nullable = true)\n+     private LoanTransactionProcessingStrategy transactionProcessingStrategy;\n \n-    @Column(name = \"term_frequency\", nullable = false)\n-    private Integer termFrequency;\n+     @Embedded\n+     private LoanProductRelatedDetail loanRepaymentScheduleDetail;\n \n-    @Column(name = \"term_period_frequency_enum\", nullable = false)\n-    private Integer termPeriodFrequencyType;\n+     @Column(name = \"term_frequency\", nullable = false)\n+     private Integer termFrequency;\n \n-    @Column(name = \"loan_status_id\", nullable = false)\n-    private Integer loanStatus;\n+     @Column(name = \"term_period_frequency_enum\", nullable = false)\n+     private Integer termPeriodFrequencyType;\n \n-    @Column(name = \"sync_disbursement_with_meeting\", nullable = true)\n-    private Boolean syncDisbursementWithMeeting;\n+     @Column(name = \"loan_status_id\", nullable = false)\n+     private Integer loanStatus;\n \n-    // loan application states\n-    @Temporal(TemporalType.DATE)\n-    @Column(name = \"submittedon_date\")\n-    private Date submittedOnDate;\n+     @Column(name = \"sync_disbursement_with_meeting\", nullable = true)\n+     private Boolean syncDisbursementWithMeeting;\n \n-    @ManyToOne(optional = true, fetch=FetchType.LAZY)\n-    @JoinColumn(name = \"submittedon_userid\", nullable = true)\n-    private AppUser submittedBy;\n+     // loan application states\n+     @Temporal(TemporalType.DATE)\n+     @Column(name = \"submittedon_date\")\n+     private Date submittedOnDate;\n \n-    @Temporal(TemporalType.DATE)\n-    @Column(name = \"rejectedon_date\")\n-    private Date rejectedOnDate;\n+     @ManyToOne(optional = true, fetch = FetchType.LAZY)\n+     @JoinColumn(name = \"submittedon_userid\", nullable = true)\n+     private AppUser submittedBy;\n \n-    @ManyToOne(optional = true, fetch=FetchType.LAZY)\n-    @JoinColumn(name = \"rejectedon_userid\", nullable = true)\n-    private AppUser rejectedBy;\n+     @Temporal(TemporalType.DATE)\n+     @Column(name = \"rejectedon_date\")\n+     private Date rejectedOnDate;\n \n-    @Temporal(TemporalType.DATE)\n-    @Column(name = \"withdrawnon_date\")\n-    private Date withdrawnOnDate;\n+     @ManyToOne(optional = true, fetch = FetchType.LAZY)\n+     @JoinColumn(name = \"rejectedon_userid\", nullable = true)\n+     private AppUser rejectedBy;\n \n-    @ManyToOne(optional = true, fetch=FetchType.LAZY)\n-    @JoinColumn(name = \"withdrawnon_userid\", nullable = true)\n-    private AppUser withdrawnBy;\n+     @Temporal(TemporalType.DATE)\n+     @Column(name = \"withdrawnon_date\")\n+     private Date withdrawnOnDate;\n \n-    @Temporal(TemporalType.DATE)\n-    @Column(name = \"approvedon_date\")\n-    private Date approvedOnDate;\n+     @ManyToOne(optional = true, fetch = FetchType.LAZY)\n+     @JoinColumn(name = \"withdrawnon_userid\", nullable = true)\n+     private AppUser withdrawnBy;\n \n-    @ManyToOne(optional = true, fetch=FetchType.LAZY)\n-    @JoinColumn(name = \"approvedon_userid\", nullable = true)\n-    private AppUser approvedBy;\n+     @Temporal(TemporalType.DATE)\n+     @Column(name = \"approvedon_date\")\n+     private Date approvedOnDate;\n \n-    @Temporal(TemporalType.DATE)\n-    @Column(name = \"expected_disbursedon_date\")\n-    private Date expectedDisbursementDate;\n+     @ManyToOne(optional = true, fetch = FetchType.LAZY)\n+     @JoinColumn(name = \"approvedon_userid\", nullable = true)\n+     private AppUser approvedBy;\n \n-    @Temporal(TemporalType.DATE)\n-    @Column(name = \"disbursedon_date\")\n-    private Date actualDisbursementDate;\n+     @Temporal(TemporalType.DATE)\n+     @Column(name = \"expected_disbursedon_date\")\n+     private Date expectedDisbursementDate;\n \n-    @ManyToOne(optional = true, fetch=FetchType.LAZY)\n-    @JoinColumn(name = \"disbursedon_userid\", nullable = true)\n-    private AppUser disbursedBy;\n+     @Temporal(TemporalType.DATE)\n+     @Column(name = \"disbursedon_date\")\n+     private Date actualDisbursementDate;\n \n-    @Temporal(TemporalType.DATE)\n-    @Column(name = \"closedon_date\")\n-    private Date closedOnDate;\n+     @ManyToOne(optional = true, fetch = FetchType.LAZY)\n+     @JoinColumn(name = \"disbursedon_userid\", nullable = true)\n+     private AppUser disbursedBy;\n \n-    @ManyToOne(optional = true, fetch=FetchType.LAZY)\n-    @JoinColumn(name = \"closedon_userid\", nullable = true)\n-    private AppUser closedBy;\n+     @Temporal(TemporalType.DATE)\n+     @Column(name = \"closedon_date\")\n+     private Date closedOnDate;\n \n-    @Temporal(TemporalType.DATE)\n-    @Column(name = \"writtenoffon_date\")\n-    private Date writtenOffOnDate;\n+     @ManyToOne(optional = true, fetch = FetchType.LAZY)\n+     @JoinColumn(name = \"closedon_userid\", nullable = true)\n+     private AppUser closedBy;\n \n-    @Temporal(TemporalType.DATE)\n-    @Column(name = \"rescheduledon_date\")\n-    private Date rescheduledOnDate;\n+     @Temporal(TemporalType.DATE)\n+     @Column(name = \"writtenoffon_date\")\n+     private Date writtenOffOnDate;\n \n-    @ManyToOne(optional = true, fetch=FetchType.LAZY)\n-    @JoinColumn(name = \"rescheduledon_userid\", nullable = true)\n-    private AppUser rescheduledByUser;\n+     @Temporal(TemporalType.DATE)\n+     @Column(name = \"rescheduledon_date\")\n+     private Date rescheduledOnDate;\n \n-    @Temporal(TemporalType.DATE)\n-    @Column(name = \"expected_maturedon_date\")\n-    private Date expectedMaturityDate;\n+     @ManyToOne(optional = true, fetch = FetchType.LAZY)\n+     @JoinColumn(name = \"rescheduledon_userid\", nullable = true)\n+     private AppUser rescheduledByUser;\n \n-    @Temporal(TemporalType.DATE)\n-    @Column(name = \"maturedon_date\")\n-    private Date actualMaturityDate;\n+     @Temporal(TemporalType.DATE)\n+     @Column(name = \"expected_maturedon_date\")\n+     private Date expectedMaturityDate;\n \n-    @Temporal(TemporalType.DATE)\n-    @Column(name = \"expected_firstrepaymenton_date\")\n-    private Date expectedFirstRepaymentOnDate;\n+     @Temporal(TemporalType.DATE)\n+     @Column(name = \"maturedon_date\")\n+     private Date actualMaturityDate;\n \n-    @Temporal(TemporalType.DATE)\n-    @Column(name = \"interest_calculated_from_date\")\n-    private Date interestChargedFromDate;\n+     @Temporal(TemporalType.DATE)\n+     @Column(name = \"expected_firstrepaymenton_date\")\n+     private Date expectedFirstRepaymentOnDate;\n \n-    @Column(name = \"total_overpaid_derived\", scale = 6, precision = 19)\n-    private BigDecimal totalOverpaid;\n+     @Temporal(TemporalType.DATE)\n+     @Column(name = \"interest_calculated_from_date\")\n+     private Date interestChargedFromDate;\n \n-    @Column(name = \"loan_counter\")\n-    private Integer loanCounter;\n+     @Column(name = \"total_overpaid_derived\", scale = 6, precision = 19)\n+     private BigDecimal totalOverpaid;\n \n-    @Column(name = \"loan_product_counter\")\n-    private Integer loanProductCounter;\n+     @Column(name = \"loan_counter\")\n+     private Integer loanCounter;\n \n-    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"loan\", orphanRemoval = true, fetch=FetchType.LAZY)\n-    private Set<LoanCharge> charges = new HashSet<>();\n+     @Column(name = \"loan_product_counter\")\n+     private Integer loanProductCounter;\n \n-    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"loan\", orphanRemoval = true, fetch=FetchType.LAZY)\n-    private Set<LoanTrancheCharge> trancheCharges = new HashSet<>();\n+     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"loan\", orphanRemoval = true, fetch = FetchType.LAZY)\n+     private Set<LoanCharge> charges = new HashSet<>();\n \n-    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"loan\", orphanRemoval = true, fetch=FetchType.LAZY)\n-    private Set<LoanCollateral> collateral = null;\n+     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"loan\", orphanRemoval = true, fetch = FetchType.LAZY)\n+     private Set<LoanTrancheCharge> trancheCharges = new HashSet<>();\n \n-    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"loan\", orphanRemoval = true, fetch=FetchType.LAZY)\n-    private Set<LoanOfficerAssignmentHistory> loanOfficerHistory;\n+     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"loan\", orphanRemoval = true, fetch = FetchType.LAZY)\n+     private Set<LoanCollateral> collateral = null;\n \n-    @OrderBy(value = \"installmentNumber\")\n-    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"loan\", orphanRemoval = true, fetch=FetchType.LAZY)\n-    private List<LoanRepaymentScheduleInstallment> repaymentScheduleInstallments = new ArrayList<>();\n+     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"loan\", orphanRemoval = true, fetch = FetchType.LAZY)\n+     private Set<LoanOfficerAssignmentHistory> loanOfficerHistory;\n \n-    @OrderBy(value = \"dateOf, id\")\n-    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"loan\", orphanRemoval = true, fetch=FetchType.LAZY)\n-    private List<LoanTransaction> loanTransactions = new ArrayList<>();\n+     @OrderBy(value = \"installmentNumber\")\n+     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"loan\", orphanRemoval = true, fetch = FetchType.LAZY)\n+     private List<LoanRepaymentScheduleInstallment> repaymentScheduleInstallments = new ArrayList<>();\n \n-    @Embedded\n-    private LoanSummary summary;\n+     @OrderBy(value = \"dateOf, id\")\n+     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"loan\", orphanRemoval = true, fetch = FetchType.LAZY)\n+     private List<LoanTransaction> loanTransactions = new ArrayList<>();\n \n-    @Transient\n-    private boolean accountNumberRequiresAutoGeneration = false;\n-    @Transient\n-    private LoanRepaymentScheduleTransactionProcessorFactory transactionProcessorFactory;\n-\n-    @Transient\n-    private LoanLifecycleStateMachine loanLifecycleStateMachine;\n-    @Transient\n-    private LoanSummaryWrapper loanSummaryWrapper;\n-\n-    @Column(name = \"principal_amount_proposed\", scale = 6, precision = 19, nullable = false)\n-    private BigDecimal proposedPrincipal;\n-\n-    @Column(name = \"approved_principal\", scale = 6, precision = 19, nullable = false)\n-    private BigDecimal approvedPrincipal;\n-\n-    @Column(name = \"fixed_emi_amount\", scale = 6, precision = 19, nullable = true)\n-    private BigDecimal fixedEmiAmount;\n-\n-    @Column(name = \"max_outstanding_loan_balance\", scale = 6, precision = 19, nullable = true)\n-    private BigDecimal maxOutstandingLoanBalance;\n-\n-    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"loan\", orphanRemoval = true, fetch=FetchType.LAZY)\n-    @OrderBy(value = \"expectedDisbursementDate, id\")\n-    private List<LoanDisbursementDetails> disbursementDetails = new ArrayList<>();\n-\n-    @OrderBy(value = \"termApplicableFrom, id\")\n-    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"loan\", orphanRemoval = true, fetch=FetchType.LAZY)\n-    private List<LoanTermVariations> loanTermVariations = new ArrayList<>();\n-\n-    @Column(name = \"total_recovered_derived\", scale = 6, precision = 19)\n-    private BigDecimal totalRecovered;\n-\n-    @OneToOne(cascade = CascadeType.ALL, mappedBy = \"loan\", optional = true, orphanRemoval = true, fetch=FetchType.EAGER)\n-    private LoanInterestRecalculationDetails loanInterestRecalculationDetails;\n-\n-    @Column(name = \"is_npa\", nullable = false)\n-    private boolean isNpa;\n-\n-    @Temporal(TemporalType.DATE)\n-    @Column(name = \"accrued_till\")\n-    private Date accruedTill;\n-\n-    @Column(name = \"create_standing_instruction_at_disbursement\", nullable = true)\n-    private Boolean createStandingInstructionAtDisbursement;\n-\n-    @Column(name = \"guarantee_amount_derived\", scale = 6, precision = 19, nullable = true)\n-    private BigDecimal guaranteeAmountDerived;\n-\n-    @Temporal(TemporalType.DATE)\n-    @Column(name = \"interest_recalcualated_on\")\n-    private Date interestRecalculatedOn;\n-\n-    @Column(name = \"is_floating_interest_rate\", nullable = true)\n-    private Boolean isFloatingInterestRate;\n-\n-    @Column(name = \"interest_rate_differential\", scale = 6, precision = 19, nullable = true)\n-    private BigDecimal interestRateDifferential;\n-\n-    @ManyToOne(fetch=FetchType.LAZY)\n-    @JoinColumn(name = \"writeoff_reason_cv_id\", nullable = true)\n-    private CodeValue writeOffReason;\n-\n-    @Column(name = \"loan_sub_status_id\", nullable = true)\n-    private Integer loanSubStatus;\n-\n-    @Column(name = \"is_topup\", nullable = false)\n-    private boolean isTopup = false;\n-\n-    @OneToOne(cascade = CascadeType.ALL, mappedBy = \"loan\", optional = true, orphanRemoval = true, fetch=FetchType.EAGER)\n-    private LoanTopupDetails loanTopupDetails;\n-\n-    @OneToMany(fetch = FetchType.LAZY)\n-    @JoinTable(name = \"m_loan_rate\", joinColumns = @JoinColumn(name = \"loan_id\"), inverseJoinColumns = @JoinColumn(name = \"rate_id\"))\n-    private List<Rate> rates;\n-\n-    public static Loan newIndividualLoanApplication(final String accountNo, final Client client, final Integer loanType,\n-            final LoanProduct loanProduct, final Fund fund, final Staff officer, final CodeValue loanPurpose,\n-            final LoanTransactionProcessingStrategy transactionProcessingStrategy,\n-            final LoanProductRelatedDetail loanRepaymentScheduleDetail, final Set<LoanCharge> loanCharges,\n-            final Set<LoanCollateral> collateral, final BigDecimal fixedEmiAmount, final List<LoanDisbursementDetails> disbursementDetails,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 384}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MjcwNDk4OnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/domain/Loan.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxODo0MjozOVrOGH7VNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxODo0MjozOVrOGH7VNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk2NTMwMg==", "bodyText": "Note to self: in this mammoth file there are two effective changes : getter setter for loan type and GLIM object.", "url": "https://github.com/apache/fineract/pull/738#discussion_r410965302", "createdAt": "2020-04-19T18:42:39Z", "author": {"login": "nikpawar89"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/domain/Loan.java", "diffHunk": "@@ -145,6417 +145,6708 @@\n \n @Entity", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1Mjc2NDEwOnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/data/CommandProcessingResultBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxOToyMDoxN1rOGH7v3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxODowODo0OVrOGPuMfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk3MjEyNA==", "bodyText": "This would have been painful during writing test cases and cause of many NPEs, I see gsimID and glimID added in commandProcessingResult result but in commandWrapper, we are mapping glimID and gsimID to entityID.\nThis has made it asymmetric and doesn't go well with Test infra. If possible take these new  instance variables out.", "url": "https://github.com/apache/fineract/pull/738#discussion_r410972124", "createdAt": "2020-04-19T19:20:17Z", "author": {"login": "nikpawar89"}, "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/data/CommandProcessingResultBuilder.java", "diffHunk": "@@ -106,6 +108,16 @@ public CommandProcessingResultBuilder withProductId(final Long productId) {\n         return this;\n     }\n \n+    public CommandProcessingResultBuilder withGsimId(final Long gsimId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzODY4NA==", "bodyText": "For now you can keep this, we will revisit these two new params when we do more testing and see if refactoring is possible.", "url": "https://github.com/apache/fineract/pull/738#discussion_r419138684", "createdAt": "2020-05-03T18:08:49Z", "author": {"login": "nikpawar89"}, "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/data/CommandProcessingResultBuilder.java", "diffHunk": "@@ -106,6 +108,16 @@ public CommandProcessingResultBuilder withProductId(final Long productId) {\n         return this;\n     }\n \n+    public CommandProcessingResultBuilder withGsimId(final Long gsimId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk3MjEyNA=="}, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1Mjc3MzA2OnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/serialization/LoanApplicationCommandFromApiJsonHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxOToyNTozMFrOGH7z5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxODoyMzoyNFrOGPuTbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk3MzE1Ng==", "bodyText": "If locking mechanism is added- applicationID can be removed altogether. Try the synchronization i suggested and omit this change if possible.", "url": "https://github.com/apache/fineract/pull/738#discussion_r410973156", "createdAt": "2020-04-19T19:25:30Z", "author": {"login": "nikpawar89"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/serialization/LoanApplicationCommandFromApiJsonHelper.java", "diffHunk": "@@ -91,7 +91,9 @@\n             LoanApiConstants.linkAccountIdParameterName, LoanApiConstants.disbursementDataParameterName,\n             LoanApiConstants.emiAmountParameterName, LoanApiConstants.maxOutstandingBalanceParameterName,\n             LoanProductConstants.graceOnArrearsAgeingParameterName, LoanApiConstants.createStandingInstructionAtDisbursementParameterName,\n-            LoanApiConstants.isTopup, LoanApiConstants.loanIdToClose, LoanApiConstants.datatables, LoanApiConstants.isEqualAmortizationParam, LoanProductConstants.ratesParamName));\n+            LoanApiConstants.isTopup, LoanApiConstants.loanIdToClose, LoanApiConstants.datatables, LoanApiConstants.isEqualAmortizationParam,LoanProductConstants.ratesParamName,\n+            LoanApiConstants.applicationId,                   // glim specific", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE0MDQ2Mg==", "bodyText": "let us revisit this when we have UI.", "url": "https://github.com/apache/fineract/pull/738#discussion_r419140462", "createdAt": "2020-05-03T18:23:24Z", "author": {"login": "nikpawar89"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/serialization/LoanApplicationCommandFromApiJsonHelper.java", "diffHunk": "@@ -91,7 +91,9 @@\n             LoanApiConstants.linkAccountIdParameterName, LoanApiConstants.disbursementDataParameterName,\n             LoanApiConstants.emiAmountParameterName, LoanApiConstants.maxOutstandingBalanceParameterName,\n             LoanProductConstants.graceOnArrearsAgeingParameterName, LoanApiConstants.createStandingInstructionAtDisbursementParameterName,\n-            LoanApiConstants.isTopup, LoanApiConstants.loanIdToClose, LoanApiConstants.datatables, LoanApiConstants.isEqualAmortizationParam, LoanProductConstants.ratesParamName));\n+            LoanApiConstants.isTopup, LoanApiConstants.loanIdToClose, LoanApiConstants.datatables, LoanApiConstants.isEqualAmortizationParam,LoanProductConstants.ratesParamName,\n+            LoanApiConstants.applicationId,                   // glim specific", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk3MzE1Ng=="}, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1Mjc4OTg5OnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanApplicationWritePlatformServiceJpaRepositoryImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxOTozNTo0OFrOGH77YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjowNzoyNlrOGIpqzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk3NTA3Mg==", "bodyText": "Including hyphens in account number would increase readability but some of the central banks won't like.\nI am aware of such incident, where one of the MF had account number with hyphen printed on cheque and clearing house refused to process it.", "url": "https://github.com/apache/fineract/pull/738#discussion_r410975072", "createdAt": "2020-04-19T19:35:48Z", "author": {"login": "nikpawar89"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanApplicationWritePlatformServiceJpaRepositoryImpl.java", "diffHunk": "@@ -365,11 +387,106 @@ public CommandProcessingResult submitApplication(final JsonCommand command) {\n                 createAndPersistCalendarInstanceForInterestRecalculation(newLoanApplication);\n             }\n \n+\n+            // loan account number generation\n+            String accountNumber=\"\";\n+            GroupLoanIndividualMonitoringAccount glimAccount;\n+            BigDecimal applicationId=BigDecimal.ZERO;\n+            Boolean isLastChildApplication=false;\n+\n+\n             if (newLoanApplication.isAccountNumberRequiresAutoGeneration()) {\n-                final AccountNumberFormat accountNumberFormat = this.accountNumberFormatRepository\n-                        .findByAccountType(EntityAccountType.LOAN);\n-                newLoanApplication.updateAccountNo(this.accountNumberGenerator.generate(newLoanApplication, accountNumberFormat));\n-                this.loanRepositoryWrapper.save(newLoanApplication);\n+\n+                 final AccountNumberFormat accountNumberFormat = this.accountNumberFormatRepository.findByAccountType(EntityAccountType.LOAN);\n+                // if application is of GLIM type\n+                if(newLoanApplication.getLoanType()==4)\n+                {\n+                    Group group= this.groupRepository.findOneWithNotFoundDetection(groupId);\n+\n+                    //GLIM specific parameters\n+                    if(command.bigDecimalValueOfParameterNamedDefaultToNullIfZero(\"applicationId\")!=null)\n+                    {\n+                        applicationId=command.bigDecimalValueOfParameterNamedDefaultToNullIfZero(\"applicationId\");\n+                    }\n+\n+                    if(command.booleanObjectValueOfParameterNamed(\"lastApplication\")!=null)\n+                    {\n+                        isLastChildApplication=command.booleanPrimitiveValueOfParameterNamed(\"lastApplication\");\n+                    }\n+\n+                    if(command.booleanObjectValueOfParameterNamed(\"isParentAccount\")!=null)\n+                    {\n+\n+                        //empty table check\n+                            if(glimRepository.count()!=0)\n+                            {\n+                                //**************Parent-Not an empty table********************\n+                                accountNumber=this.accountNumberGenerator.generate(newLoanApplication, accountNumberFormat);\n+                                newLoanApplication.updateAccountNo(accountNumber+\"-1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcyNDQ5Mg==", "bodyText": "Yes, hyphens have been removed.", "url": "https://github.com/apache/fineract/pull/738#discussion_r411724492", "createdAt": "2020-04-20T22:07:26Z", "author": {"login": "rrpawar96"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanApplicationWritePlatformServiceJpaRepositoryImpl.java", "diffHunk": "@@ -365,11 +387,106 @@ public CommandProcessingResult submitApplication(final JsonCommand command) {\n                 createAndPersistCalendarInstanceForInterestRecalculation(newLoanApplication);\n             }\n \n+\n+            // loan account number generation\n+            String accountNumber=\"\";\n+            GroupLoanIndividualMonitoringAccount glimAccount;\n+            BigDecimal applicationId=BigDecimal.ZERO;\n+            Boolean isLastChildApplication=false;\n+\n+\n             if (newLoanApplication.isAccountNumberRequiresAutoGeneration()) {\n-                final AccountNumberFormat accountNumberFormat = this.accountNumberFormatRepository\n-                        .findByAccountType(EntityAccountType.LOAN);\n-                newLoanApplication.updateAccountNo(this.accountNumberGenerator.generate(newLoanApplication, accountNumberFormat));\n-                this.loanRepositoryWrapper.save(newLoanApplication);\n+\n+                 final AccountNumberFormat accountNumberFormat = this.accountNumberFormatRepository.findByAccountType(EntityAccountType.LOAN);\n+                // if application is of GLIM type\n+                if(newLoanApplication.getLoanType()==4)\n+                {\n+                    Group group= this.groupRepository.findOneWithNotFoundDetection(groupId);\n+\n+                    //GLIM specific parameters\n+                    if(command.bigDecimalValueOfParameterNamedDefaultToNullIfZero(\"applicationId\")!=null)\n+                    {\n+                        applicationId=command.bigDecimalValueOfParameterNamedDefaultToNullIfZero(\"applicationId\");\n+                    }\n+\n+                    if(command.booleanObjectValueOfParameterNamed(\"lastApplication\")!=null)\n+                    {\n+                        isLastChildApplication=command.booleanPrimitiveValueOfParameterNamed(\"lastApplication\");\n+                    }\n+\n+                    if(command.booleanObjectValueOfParameterNamed(\"isParentAccount\")!=null)\n+                    {\n+\n+                        //empty table check\n+                            if(glimRepository.count()!=0)\n+                            {\n+                                //**************Parent-Not an empty table********************\n+                                accountNumber=this.accountNumberGenerator.generate(newLoanApplication, accountNumberFormat);\n+                                newLoanApplication.updateAccountNo(accountNumber+\"-1\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk3NTA3Mg=="}, "originalCommit": null, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1Mjc5OTY5OnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanApplicationWritePlatformServiceJpaRepositoryImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxOTo0MTo0OFrOGH7_sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxODozMjowNFrOGPuXfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk3NjE3OA==", "bodyText": "most of the stuff is repetitive while creating child account, try extracting function so it becomes readable and will reduce lines of code.", "url": "https://github.com/apache/fineract/pull/738#discussion_r410976178", "createdAt": "2020-04-19T19:41:48Z", "author": {"login": "nikpawar89"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanApplicationWritePlatformServiceJpaRepositoryImpl.java", "diffHunk": "@@ -365,11 +387,106 @@ public CommandProcessingResult submitApplication(final JsonCommand command) {\n                 createAndPersistCalendarInstanceForInterestRecalculation(newLoanApplication);\n             }\n \n+\n+            // loan account number generation\n+            String accountNumber=\"\";\n+            GroupLoanIndividualMonitoringAccount glimAccount;\n+            BigDecimal applicationId=BigDecimal.ZERO;\n+            Boolean isLastChildApplication=false;\n+\n+\n             if (newLoanApplication.isAccountNumberRequiresAutoGeneration()) {\n-                final AccountNumberFormat accountNumberFormat = this.accountNumberFormatRepository\n-                        .findByAccountType(EntityAccountType.LOAN);\n-                newLoanApplication.updateAccountNo(this.accountNumberGenerator.generate(newLoanApplication, accountNumberFormat));\n-                this.loanRepositoryWrapper.save(newLoanApplication);\n+\n+                 final AccountNumberFormat accountNumberFormat = this.accountNumberFormatRepository.findByAccountType(EntityAccountType.LOAN);\n+                // if application is of GLIM type\n+                if(newLoanApplication.getLoanType()==4)\n+                {\n+                    Group group= this.groupRepository.findOneWithNotFoundDetection(groupId);\n+\n+                    //GLIM specific parameters\n+                    if(command.bigDecimalValueOfParameterNamedDefaultToNullIfZero(\"applicationId\")!=null)\n+                    {\n+                        applicationId=command.bigDecimalValueOfParameterNamedDefaultToNullIfZero(\"applicationId\");\n+                    }\n+\n+                    if(command.booleanObjectValueOfParameterNamed(\"lastApplication\")!=null)\n+                    {\n+                        isLastChildApplication=command.booleanPrimitiveValueOfParameterNamed(\"lastApplication\");\n+                    }\n+\n+                    if(command.booleanObjectValueOfParameterNamed(\"isParentAccount\")!=null)\n+                    {\n+\n+                        //empty table check\n+                            if(glimRepository.count()!=0)\n+                            {\n+                                //**************Parent-Not an empty table********************\n+                                accountNumber=this.accountNumberGenerator.generate(newLoanApplication, accountNumberFormat);\n+                                newLoanApplication.updateAccountNo(accountNumber+\"-1\");\n+                                glimAccountInfoWritePlatformService.addGLIMAccountInfo(accountNumber,group, command.bigDecimalValueOfParameterNamedDefaultToNullIfZero(\"totalLoan\"),Long.valueOf(1),true,\n+                                        LoanStatus.SUBMITTED_AND_PENDING_APPROVAL.getValue(),applicationId);\n+                                newLoanApplication.setGlim(glimRepository.findOneByAccountNumber(accountNumber));\n+                                 this.loanRepositoryWrapper.save(newLoanApplication);\n+\n+                            }\n+                            else\n+                            {\n+                                //************** Parent-empty table********************\n+\n+                                accountNumber=this.accountNumberGenerator.generate(newLoanApplication, accountNumberFormat);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE0MTUwMg==", "bodyText": "we will revisit this later.", "url": "https://github.com/apache/fineract/pull/738#discussion_r419141502", "createdAt": "2020-05-03T18:32:04Z", "author": {"login": "nikpawar89"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanApplicationWritePlatformServiceJpaRepositoryImpl.java", "diffHunk": "@@ -365,11 +387,106 @@ public CommandProcessingResult submitApplication(final JsonCommand command) {\n                 createAndPersistCalendarInstanceForInterestRecalculation(newLoanApplication);\n             }\n \n+\n+            // loan account number generation\n+            String accountNumber=\"\";\n+            GroupLoanIndividualMonitoringAccount glimAccount;\n+            BigDecimal applicationId=BigDecimal.ZERO;\n+            Boolean isLastChildApplication=false;\n+\n+\n             if (newLoanApplication.isAccountNumberRequiresAutoGeneration()) {\n-                final AccountNumberFormat accountNumberFormat = this.accountNumberFormatRepository\n-                        .findByAccountType(EntityAccountType.LOAN);\n-                newLoanApplication.updateAccountNo(this.accountNumberGenerator.generate(newLoanApplication, accountNumberFormat));\n-                this.loanRepositoryWrapper.save(newLoanApplication);\n+\n+                 final AccountNumberFormat accountNumberFormat = this.accountNumberFormatRepository.findByAccountType(EntityAccountType.LOAN);\n+                // if application is of GLIM type\n+                if(newLoanApplication.getLoanType()==4)\n+                {\n+                    Group group= this.groupRepository.findOneWithNotFoundDetection(groupId);\n+\n+                    //GLIM specific parameters\n+                    if(command.bigDecimalValueOfParameterNamedDefaultToNullIfZero(\"applicationId\")!=null)\n+                    {\n+                        applicationId=command.bigDecimalValueOfParameterNamedDefaultToNullIfZero(\"applicationId\");\n+                    }\n+\n+                    if(command.booleanObjectValueOfParameterNamed(\"lastApplication\")!=null)\n+                    {\n+                        isLastChildApplication=command.booleanPrimitiveValueOfParameterNamed(\"lastApplication\");\n+                    }\n+\n+                    if(command.booleanObjectValueOfParameterNamed(\"isParentAccount\")!=null)\n+                    {\n+\n+                        //empty table check\n+                            if(glimRepository.count()!=0)\n+                            {\n+                                //**************Parent-Not an empty table********************\n+                                accountNumber=this.accountNumberGenerator.generate(newLoanApplication, accountNumberFormat);\n+                                newLoanApplication.updateAccountNo(accountNumber+\"-1\");\n+                                glimAccountInfoWritePlatformService.addGLIMAccountInfo(accountNumber,group, command.bigDecimalValueOfParameterNamedDefaultToNullIfZero(\"totalLoan\"),Long.valueOf(1),true,\n+                                        LoanStatus.SUBMITTED_AND_PENDING_APPROVAL.getValue(),applicationId);\n+                                newLoanApplication.setGlim(glimRepository.findOneByAccountNumber(accountNumber));\n+                                 this.loanRepositoryWrapper.save(newLoanApplication);\n+\n+                            }\n+                            else\n+                            {\n+                                //************** Parent-empty table********************\n+\n+                                accountNumber=this.accountNumberGenerator.generate(newLoanApplication, accountNumberFormat);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk3NjE3OA=="}, "originalCommit": null, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1Mjg2MTIyOnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanApplicationWritePlatformServiceJpaRepositoryImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMDoyMDozNFrOGH8a_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMDoyMDozNFrOGH8a_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk4MzE2NQ==", "bodyText": "Can we align GLIM creation with that of GSIM creation, I dont' see bulk creation in GLIM.", "url": "https://github.com/apache/fineract/pull/738#discussion_r410983165", "createdAt": "2020-04-19T20:20:34Z", "author": {"login": "nikpawar89"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanApplicationWritePlatformServiceJpaRepositoryImpl.java", "diffHunk": "@@ -365,11 +387,106 @@ public CommandProcessingResult submitApplication(final JsonCommand command) {\n                 createAndPersistCalendarInstanceForInterestRecalculation(newLoanApplication);\n             }\n \n+\n+            // loan account number generation\n+            String accountNumber=\"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1Mjg2NzE2OnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/service/GSIMReadPlatformServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMDoyMzo0OFrOGH8dow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMDoyMzo0OFrOGH8dow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk4Mzg0Mw==", "bodyText": "pass gsimID as object param.", "url": "https://github.com/apache/fineract/pull/738#discussion_r410983843", "createdAt": "2020-04-19T20:23:48Z", "author": {"login": "nikpawar89"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/service/GSIMReadPlatformServiceImpl.java", "diffHunk": "@@ -0,0 +1,388 @@\n+\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.fineract.portfolio.savings.service;\n+\n+import java.math.BigDecimal;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import org.apache.fineract.infrastructure.core.data.EnumOptionData;\n+import org.apache.fineract.infrastructure.core.domain.JdbcSupport;\n+import org.apache.fineract.infrastructure.core.service.RoutingDataSource;\n+import org.apache.fineract.infrastructure.security.service.PlatformSecurityContext;\n+import org.apache.fineract.infrastructure.security.utils.ColumnValidator;\n+import org.apache.fineract.organisation.monetary.data.CurrencyData;\n+import org.apache.fineract.portfolio.accountdetails.data.SavingsSummaryCustom;\n+import org.apache.fineract.portfolio.accountdetails.service.AccountEnumerations;\n+import org.apache.fineract.portfolio.loanaccount.domain.LoanStatus;\n+import org.apache.fineract.portfolio.savings.data.GSIMContainer;\n+import org.apache.fineract.portfolio.savings.data.GroupSavingsIndividualMonitoringAccountData;\n+import org.apache.fineract.portfolio.savings.data.SavingsAccountApplicationTimelineData;\n+import org.apache.fineract.portfolio.savings.data.SavingsAccountStatusEnumData;\n+import org.apache.fineract.portfolio.savings.data.SavingsAccountSubStatusEnumData;\n+import org.apache.fineract.portfolio.savings.domain.SavingsAccountStatusType;\n+import org.joda.time.LocalDate;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.RowMapper;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class GSIMReadPlatformServiceImpl implements GSIMReadPlatformService\n+{\n+\n+     private final JdbcTemplate jdbcTemplate;\n+     private final PlatformSecurityContext context;\n+     private final ColumnValidator columnValidator;\n+\n+\n+\n+     @Autowired\n+     public GSIMReadPlatformServiceImpl(final PlatformSecurityContext context, final RoutingDataSource dataSource\n+               ,final ColumnValidator columnValidator) {\n+          this.context = context;\n+          this.jdbcTemplate = new JdbcTemplate(dataSource);\n+          this.columnValidator = columnValidator;\n+\n+          }\n+\n+     private static final class GSIMFieldsMapper implements RowMapper<GroupSavingsIndividualMonitoringAccountData> {\n+          public String schema() {\n+               return \"gsim.id as gsimId,sv.group_id as groupId,sv.client_id as clientId,gsim.account_number as accountNumber, sv.id as childAccountId,sv.account_no as childAccountNumber,sv.account_balance_derived as childBalance,gsim.parent_deposit as parentBalance,gsim.child_accounts_count as childAccountsCount,\"\n+                         +\"gsim.savings_status_id as savingsStatus from gsim_accounts gsim,m_savings_account sv where gsim.id=sv.gsim_id\";\n+          }\n+\n+          @Override\n+          public GroupSavingsIndividualMonitoringAccountData mapRow(final ResultSet rs, @SuppressWarnings(\"unused\") final int rowNum)\n+                    throws SQLException {\n+\n+          final BigDecimal gsimId=rs.getBigDecimal(\"gsimId\");\n+          final BigDecimal groupId=rs.getBigDecimal(\"groupId\");\n+          final BigDecimal clientId=rs.getBigDecimal(\"clientId\");\n+          final String accountNumber=rs.getString(\"accountNumber\");\n+          final BigDecimal childAccountId=rs.getBigDecimal(\"childAccountId\");\n+          final String childAccountNumber=rs.getString(\"childAccountNumber\");\n+          final Long childAccountsCount=rs.getLong(\"childAccountsCount\");\n+          final BigDecimal parentBalance=rs.getBigDecimal(\"parentBalance\");\n+          final BigDecimal childBalance=rs.getBigDecimal(\"childBalance\");\n+          final String savingsStatus=SavingsAccountStatusType.fromInt((int)rs.getLong(\"savingsStatus\")).toString();\n+          return GroupSavingsIndividualMonitoringAccountData.getInstance2(gsimId,groupId,clientId,accountNumber,childAccountId,childAccountNumber,parentBalance,childBalance,\n+                    childAccountsCount,savingsStatus);\n+          }\n+     }\n+\n+     private static final class GSIMMapper implements RowMapper<GroupSavingsIndividualMonitoringAccountData> {\n+          public String schema() {\n+               return \"gsim.id as gsimId,gsim.group_id as groupId,gsim.account_number as accountNumber,gsim.parent_deposit as parentDeposit,gsim.child_accounts_count as childAccountsCount,\"\n+                         +\"gsim.savings_status_id as savingsStatus from gsim_accounts gsim\";\n+          }\n+\n+          @Override\n+          public GroupSavingsIndividualMonitoringAccountData mapRow(final ResultSet rs, @SuppressWarnings(\"unused\") final int rowNum)\n+                    throws SQLException {\n+\n+          final BigDecimal glimId=rs.getBigDecimal(\"gsimId\");\n+\n+          final BigDecimal groupId=rs.getBigDecimal(\"groupId\");\n+\n+          final String accountNumber=rs.getString(\"accountNumber\");\n+\n+          final BigDecimal parentDeposit=rs.getBigDecimal(\"parentDeposit\");\n+\n+          final String loanStatus=LoanStatus.fromInt((int)rs.getLong(\"savingsStatus\")).toString();\n+\n+          return GroupSavingsIndividualMonitoringAccountData.getInstance1(glimId,groupId, accountNumber, parentDeposit,loanStatus);\n+\n+          }\n+     }\n+\n+     @Override\n+     public  Collection<GSIMContainer> findGSIMAccountContainerByGroupId(Long groupId) {\n+          this.context.authenticatedUser();\n+          Collection<GroupSavingsIndividualMonitoringAccountData> gsimInfo=findGSIMAccountsByGroupId(groupId+\"\");\n+\n+          //List<LoanAccountSummaryData> glimAccounts = retrieveLoanAccountDetails(loanWhereClauseForGroupAndLoanType, new Object[] { groupId });\n+            String savingswhereClauseForGroup;\n+\n+          List<GSIMContainer> gsimAccounts=new ArrayList<GSIMContainer>();\n+          List<SavingsSummaryCustom> childSavings;\n+          for(GroupSavingsIndividualMonitoringAccountData gsimAccount:gsimInfo)\n+          {\n+               savingswhereClauseForGroup = \" where sa.group_id = ? and sa.gsim_id=\"+gsimAccount.getGsimId()+\" order by sa.status_enum ASC, sa.account_no ASC\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1Mjg2OTUwOnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/service/SavingsAccountReadPlatformServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMDoyNTozOVrOGH8euA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxOToyMzo0NVrOGPuvTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk4NDEyMA==", "bodyText": "do we need this?- please remove if not.", "url": "https://github.com/apache/fineract/pull/738#discussion_r410984120", "createdAt": "2020-04-19T20:25:39Z", "author": {"login": "nikpawar89"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/service/SavingsAccountReadPlatformServiceImpl.java", "diffHunk": "@@ -789,7 +789,7 @@ public SavingsAccountTransactionsMapper() {\n             sqlBuilder.append(\"tr.created_date as submittedOnDate,\");\n             sqlBuilder.append(\" au.username as submittedByUsername, \");\n             sqlBuilder.append(\" nt.note as transactionNote, \") ;\n-            sqlBuilder.append(\"tr.running_balance_derived as runningBalance, tr.is_reversed as reversed,\");\n+            sqlBuilder.append(\"tr.running_balance_derived as runningBalance, tr.is_reversed as reversed,tr.is_loan_disbursement as isLoanDisbursement,\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE0NzU5OQ==", "bodyText": "did you get a chance to look in to this?", "url": "https://github.com/apache/fineract/pull/738#discussion_r419147599", "createdAt": "2020-05-03T19:23:45Z", "author": {"login": "nikpawar89"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/service/SavingsAccountReadPlatformServiceImpl.java", "diffHunk": "@@ -789,7 +789,7 @@ public SavingsAccountTransactionsMapper() {\n             sqlBuilder.append(\"tr.created_date as submittedOnDate,\");\n             sqlBuilder.append(\" au.username as submittedByUsername, \");\n             sqlBuilder.append(\" nt.note as transactionNote, \") ;\n-            sqlBuilder.append(\"tr.running_balance_derived as runningBalance, tr.is_reversed as reversed,\");\n+            sqlBuilder.append(\"tr.running_balance_derived as runningBalance, tr.is_reversed as reversed,tr.is_loan_disbursement as isLoanDisbursement,\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk4NDEyMA=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1Mjg3OTA1OnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/service/SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMDozMjoxMVrOGH8i_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMDozMjoxMVrOGH8i_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk4NTIxNA==", "bodyText": "extract function of repetitive code.", "url": "https://github.com/apache/fineract/pull/738#discussion_r410985214", "createdAt": "2020-04-19T20:32:11Z", "author": {"login": "nikpawar89"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/service/SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl.java", "diffHunk": "@@ -86,470 +93,715 @@\n import org.springframework.transaction.annotation.Transactional;\n \n @Service\n-public class SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl implements SavingsApplicationProcessWritePlatformService {\n-\n-    private final static Logger logger = LoggerFactory.getLogger(SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl.class);\n-\n-    private final PlatformSecurityContext context;\n-    private final SavingsAccountRepositoryWrapper savingAccountRepository;\n-    private final SavingsAccountAssembler savingAccountAssembler;\n-    private final SavingsAccountDataValidator savingsAccountDataValidator;\n-    private final AccountNumberGenerator accountNumberGenerator;\n-    private final ClientRepositoryWrapper clientRepository;\n-    private final GroupRepository groupRepository;\n-    private final SavingsProductRepository savingsProductRepository;\n-    private final NoteRepository noteRepository;\n-    private final StaffRepositoryWrapper staffRepository;\n-    private final SavingsAccountApplicationTransitionApiJsonValidator savingsAccountApplicationTransitionApiJsonValidator;\n-    private final SavingsAccountChargeAssembler savingsAccountChargeAssembler;\n-    private final CommandProcessingService commandProcessingService;\n-    private final SavingsAccountDomainService savingsAccountDomainService;\n-    private final SavingsAccountWritePlatformService savingsAccountWritePlatformService;\n-    private final AccountNumberFormatRepositoryWrapper accountNumberFormatRepository;\n-    private final BusinessEventNotifierService businessEventNotifierService;\n-    private final EntityDatatableChecksWritePlatformService entityDatatableChecksWritePlatformService;\n-\n-    @Autowired\n-    public SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl(final PlatformSecurityContext context,\n-            final SavingsAccountRepositoryWrapper savingAccountRepository, final SavingsAccountAssembler savingAccountAssembler,\n-            final SavingsAccountDataValidator savingsAccountDataValidator, final AccountNumberGenerator accountNumberGenerator,\n-            final ClientRepositoryWrapper clientRepository, final GroupRepository groupRepository,\n-            final SavingsProductRepository savingsProductRepository, final NoteRepository noteRepository,\n-            final StaffRepositoryWrapper staffRepository,\n-            final SavingsAccountApplicationTransitionApiJsonValidator savingsAccountApplicationTransitionApiJsonValidator,\n-            final SavingsAccountChargeAssembler savingsAccountChargeAssembler, final CommandProcessingService commandProcessingService,\n-            final SavingsAccountDomainService savingsAccountDomainService,\n-            final SavingsAccountWritePlatformService savingsAccountWritePlatformService,\n-            final AccountNumberFormatRepositoryWrapper accountNumberFormatRepository,\n-            final BusinessEventNotifierService businessEventNotifierService,\n-            final EntityDatatableChecksWritePlatformService entityDatatableChecksWritePlatformService) {\n-        this.context = context;\n-        this.savingAccountRepository = savingAccountRepository;\n-        this.savingAccountAssembler = savingAccountAssembler;\n-        this.accountNumberGenerator = accountNumberGenerator;\n-        this.savingsAccountDataValidator = savingsAccountDataValidator;\n-        this.clientRepository = clientRepository;\n-        this.groupRepository = groupRepository;\n-        this.savingsProductRepository = savingsProductRepository;\n-        this.noteRepository = noteRepository;\n-        this.staffRepository = staffRepository;\n-        this.savingsAccountApplicationTransitionApiJsonValidator = savingsAccountApplicationTransitionApiJsonValidator;\n-        this.savingsAccountChargeAssembler = savingsAccountChargeAssembler;\n-        this.commandProcessingService = commandProcessingService;\n-        this.savingsAccountDomainService = savingsAccountDomainService;\n-        this.accountNumberFormatRepository = accountNumberFormatRepository;\n-        this.savingsAccountWritePlatformService = savingsAccountWritePlatformService;\n-        this.businessEventNotifierService = businessEventNotifierService ;\n-        this.entityDatatableChecksWritePlatformService = entityDatatableChecksWritePlatformService;\n-    }\n-\n     /*\n      * Guaranteed to throw an exception no matter what the data integrity issue\n      * is.\n      */\n-    private void handleDataIntegrityIssues(final JsonCommand command, final Throwable realCause, final Exception dve) {\n-\n-        final StringBuilder errorCodeBuilder = new StringBuilder(\"error.msg.\").append(SavingsApiConstants.SAVINGS_ACCOUNT_RESOURCE_NAME);\n-\n-        if (realCause.getMessage().contains(\"sa_account_no_UNIQUE\")) {\n-            final String accountNo = command.stringValueOfParameterNamed(\"accountNo\");\n-            errorCodeBuilder.append(\".duplicate.accountNo\");\n-            throw new PlatformDataIntegrityException(errorCodeBuilder.toString(), \"Savings account with accountNo \" + accountNo\n-                    + \" already exists\", \"accountNo\", accountNo);\n-\n-        } else if (realCause.getMessage().contains(\"sa_externalid_UNIQUE\")) {\n-\n-            final String externalId = command.stringValueOfParameterNamed(\"externalId\");\n-            errorCodeBuilder.append(\".duplicate.externalId\");\n-            throw new PlatformDataIntegrityException(errorCodeBuilder.toString(), \"Savings account with externalId \" + externalId\n-                    + \" already exists\", \"externalId\", externalId);\n-        }\n-\n-        errorCodeBuilder.append(\".unknown.data.integrity.issue\");\n-        logger.error(\"Error occured.\", dve);\n-        throw new PlatformDataIntegrityException(errorCodeBuilder.toString(), \"Unknown data integrity issue with savings account.\");\n-    }\n-\n-    @Transactional\n-    @Override\n-    public CommandProcessingResult submitApplication(final JsonCommand command) {\n-        try {\n-            this.savingsAccountDataValidator.validateForSubmit(command.json());\n-            final AppUser submittedBy = this.context.authenticatedUser();\n-\n-            final SavingsAccount account = this.savingAccountAssembler.assembleFrom(command, submittedBy);\n-            this.savingAccountRepository.save(account);\n-\n-            generateAccountNumber(account);\n-\n-            final Long savingsId = account.getId();\n-            if(command.parameterExists(SavingsApiConstants.datatables)){\n-                this.entityDatatableChecksWritePlatformService.saveDatatables(StatusEnum.CREATE.getCode().longValue(),\n-                        EntityTables.SAVING.getName(), savingsId, account.productId(),\n-                        command.arrayOfParameterNamed(SavingsApiConstants.datatables));\n-            }\n-            this.entityDatatableChecksWritePlatformService.runTheCheckForProduct(savingsId,\n-                    EntityTables.SAVING.getName(), StatusEnum.CREATE.getCode().longValue(),\n-                    EntityTables.SAVING.getForeignKeyColumnNameOnDatatable(), account.productId());\n-\n-            this.businessEventNotifierService.notifyBusinessEventWasExecuted(BUSINESS_EVENTS.SAVINGS_CREATE,\n-                    constructEntityMap(BUSINESS_ENTITY.SAVING, account));\n-\n-            return new CommandProcessingResultBuilder() //\n-                    .withCommandId(command.commandId()) //\n+public class SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl\n+          implements SavingsApplicationProcessWritePlatformService {\n+\n+     private final static Logger logger = LoggerFactory\n+               .getLogger(SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl.class);\n+\n+     private final PlatformSecurityContext context;\n+     private final SavingsAccountRepositoryWrapper savingAccountRepository;\n+     private final SavingsAccountAssembler savingAccountAssembler;\n+     private final SavingsAccountDataValidator savingsAccountDataValidator;\n+     private final AccountNumberGenerator accountNumberGenerator;\n+     private final ClientRepositoryWrapper clientRepository;\n+     private final GroupRepository groupRepository;\n+     private final SavingsProductRepository savingsProductRepository;\n+     private final NoteRepository noteRepository;\n+     private final StaffRepositoryWrapper staffRepository;\n+     private final SavingsAccountApplicationTransitionApiJsonValidator savingsAccountApplicationTransitionApiJsonValidator;\n+     private final SavingsAccountChargeAssembler savingsAccountChargeAssembler;\n+     private final CommandProcessingService commandProcessingService;\n+     private final SavingsAccountDomainService savingsAccountDomainService;\n+     private final SavingsAccountWritePlatformService savingsAccountWritePlatformService;\n+     private final AccountNumberFormatRepositoryWrapper accountNumberFormatRepository;\n+     private final BusinessEventNotifierService businessEventNotifierService;\n+     private final EntityDatatableChecksWritePlatformService entityDatatableChecksWritePlatformService;\n+     private final GSIMRepositoy gsimRepository;\n+     private final GroupRepositoryWrapper groupRepositoryWrapper;\n+     private final GroupSavingsIndividualMonitoringWritePlatformService gsimWritePlatformService;\n+\n+     @Autowired\n+     public SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl(final PlatformSecurityContext context,\n+               final SavingsAccountRepositoryWrapper savingAccountRepository,\n+               final SavingsAccountAssembler savingAccountAssembler,\n+               final SavingsAccountDataValidator savingsAccountDataValidator,\n+               final AccountNumberGenerator accountNumberGenerator, final ClientRepositoryWrapper clientRepository,\n+               final GroupRepository groupRepository, final SavingsProductRepository savingsProductRepository,\n+               final NoteRepository noteRepository, final StaffRepositoryWrapper staffRepository,\n+               final SavingsAccountApplicationTransitionApiJsonValidator savingsAccountApplicationTransitionApiJsonValidator,\n+               final SavingsAccountChargeAssembler savingsAccountChargeAssembler,\n+               final CommandProcessingService commandProcessingService,\n+               final SavingsAccountDomainService savingsAccountDomainService,\n+               final SavingsAccountWritePlatformService savingsAccountWritePlatformService,\n+               final AccountNumberFormatRepositoryWrapper accountNumberFormatRepository,\n+               final BusinessEventNotifierService businessEventNotifierService,\n+               final EntityDatatableChecksWritePlatformService entityDatatableChecksWritePlatformService,\n+               final GSIMRepositoy gsimRepository, final GroupRepositoryWrapper groupRepositoryWrapper,\n+               final GroupSavingsIndividualMonitoringWritePlatformService gsimWritePlatformService) {\n+          this.context = context;\n+          this.savingAccountRepository = savingAccountRepository;\n+          this.savingAccountAssembler = savingAccountAssembler;\n+          this.accountNumberGenerator = accountNumberGenerator;\n+          this.savingsAccountDataValidator = savingsAccountDataValidator;\n+          this.clientRepository = clientRepository;\n+          this.groupRepository = groupRepository;\n+          this.savingsProductRepository = savingsProductRepository;\n+          this.noteRepository = noteRepository;\n+          this.staffRepository = staffRepository;\n+          this.savingsAccountApplicationTransitionApiJsonValidator = savingsAccountApplicationTransitionApiJsonValidator;\n+          this.savingsAccountChargeAssembler = savingsAccountChargeAssembler;\n+          this.commandProcessingService = commandProcessingService;\n+          this.savingsAccountDomainService = savingsAccountDomainService;\n+          this.accountNumberFormatRepository = accountNumberFormatRepository;\n+          this.savingsAccountWritePlatformService = savingsAccountWritePlatformService;\n+          this.businessEventNotifierService = businessEventNotifierService;\n+          this.entityDatatableChecksWritePlatformService = entityDatatableChecksWritePlatformService;\n+          this.gsimRepository = gsimRepository;\n+          this.groupRepositoryWrapper = groupRepositoryWrapper;\n+          this.gsimWritePlatformService = gsimWritePlatformService;\n+     }\n+\n+     /*\n+      * Guaranteed to throw an exception no matter what the data integrity issue\n+      * is.\n+      */\n+     private void handleDataIntegrityIssues(final JsonCommand command, final Throwable realCause, final Exception dve) {\n+\n+          final StringBuilder errorCodeBuilder = new StringBuilder(\"error.msg.\")\n+                    .append(SavingsApiConstants.SAVINGS_ACCOUNT_RESOURCE_NAME);\n+\n+          if (realCause.getMessage().contains(\"sa_account_no_UNIQUE\")) {\n+               final String accountNo = command.stringValueOfParameterNamed(\"accountNo\");\n+               errorCodeBuilder.append(\".duplicate.accountNo\");\n+               throw new PlatformDataIntegrityException(errorCodeBuilder.toString(),\n+                         \"Savings account with accountNo \" + accountNo + \" already exists\", \"accountNo\", accountNo);\n+\n+          } else if (realCause.getMessage().contains(\"sa_externalid_UNIQUE\")) {\n+\n+               final String externalId = command.stringValueOfParameterNamed(\"externalId\");\n+               errorCodeBuilder.append(\".duplicate.externalId\");\n+               throw new PlatformDataIntegrityException(errorCodeBuilder.toString(),\n+                         \"Savings account with externalId \" + externalId + \" already exists\", \"externalId\", externalId);\n+          }\n+\n+          errorCodeBuilder.append(\".unknown.data.integrity.issue\");\n+          logger.error(\"{}\", dve.getMessage(), dve);\n+          throw new PlatformDataIntegrityException(errorCodeBuilder.toString(),\n+                    \"Unknown data integrity issue with savings account.\");\n+     }\n+\n+     @Transactional\n+     @Override\n+     public CommandProcessingResult submitGSIMApplication(final JsonCommand command) {\n+\n+          CommandProcessingResult result = null;\n+\n+          JsonArray gsimApplications = command.arrayOfParameterNamed(\"clientArray\");\n+\n+          for (JsonElement gsimApplication : gsimApplications) {\n+               // result=submitApplication(JsonCommand.fromExistingCommand(command,\n+               // gsimApplication));\n+               result = submitApplication(JsonCommand.fromExistingCommand(command, gsimApplication,\n+                         gsimApplication.getAsJsonObject().get(\"clientId\").getAsLong()));\n+          }\n+\n+          return result;\n+     }\n+\n+     @Transactional\n+     @Override\n+     public CommandProcessingResult submitApplication(final JsonCommand command) {\n+          try {\n+               this.savingsAccountDataValidator.validateForSubmit(command.json());\n+               final AppUser submittedBy = this.context.authenticatedUser();\n+\n+               final SavingsAccount account = this.savingAccountAssembler.assembleFrom(command, submittedBy);\n+               this.savingAccountRepository.save(account);\n+               String accountNumber = \"\";\n+               GroupSavingsIndividualMonitoring gsimAccount = null;\n+               BigDecimal applicationId = BigDecimal.ZERO;\n+               Boolean isLastChildApplication = false;\n+\n+               // gsim\n+               if (account.isAccountNumberRequiresAutoGeneration()) {\n+\n+                    final AccountNumberFormat accountNumberFormat = this.accountNumberFormatRepository\n+                              .findByAccountType(EntityAccountType.SAVINGS);\n+                    // if application is of GSIM type\n+                    if (account.getAccountTypes() == 5) {\n+                         final Long groupId = command.longValueOfParameterNamed(\"groupId\");\n+                         // GSIM specific parameters\n+                         if (command.bigDecimalValueOfParameterNamedDefaultToNullIfZero(\"applicationId\") != null) {\n+                              applicationId = command.bigDecimalValueOfParameterNamedDefaultToNullIfZero(\"applicationId\");\n+                         }\n+\n+                         if (command.booleanObjectValueOfParameterNamed(\"lastApplication\") != null) {\n+                              isLastChildApplication = command.booleanPrimitiveValueOfParameterNamed(\"lastApplication\");\n+                         }\n+\n+                         Group group = this.groupRepositoryWrapper.findOneWithNotFoundDetection(groupId);\n+\n+                         if (command.booleanObjectValueOfParameterNamed(\"isParentAccount\") != null)\n+                         {\n+                                   // empty table check\n+                              if (gsimRepository.count() != 0) {\n+                                   // Parent-Not an empty table\n+\n+                                   accountNumber = this.accountNumberGenerator.generate(account, accountNumberFormat);\n+                                   account.updateAccountNo(accountNumber + \"-1\");\n+                                   gsimAccount = gsimWritePlatformService.addGSIMAccountInfo(accountNumber, group, BigDecimal.ZERO,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 306}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1Mjg4MDQ4OnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/service/SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMDozMzoxNFrOGH8jow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMDozMzoxNFrOGH8jow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk4NTM3OQ==", "bodyText": "see if you can remove gsim id altogether from commandProcessingResult.", "url": "https://github.com/apache/fineract/pull/738#discussion_r410985379", "createdAt": "2020-04-19T20:33:14Z", "author": {"login": "nikpawar89"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/service/SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl.java", "diffHunk": "@@ -86,470 +93,715 @@\n import org.springframework.transaction.annotation.Transactional;\n \n @Service\n-public class SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl implements SavingsApplicationProcessWritePlatformService {\n-\n-    private final static Logger logger = LoggerFactory.getLogger(SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl.class);\n-\n-    private final PlatformSecurityContext context;\n-    private final SavingsAccountRepositoryWrapper savingAccountRepository;\n-    private final SavingsAccountAssembler savingAccountAssembler;\n-    private final SavingsAccountDataValidator savingsAccountDataValidator;\n-    private final AccountNumberGenerator accountNumberGenerator;\n-    private final ClientRepositoryWrapper clientRepository;\n-    private final GroupRepository groupRepository;\n-    private final SavingsProductRepository savingsProductRepository;\n-    private final NoteRepository noteRepository;\n-    private final StaffRepositoryWrapper staffRepository;\n-    private final SavingsAccountApplicationTransitionApiJsonValidator savingsAccountApplicationTransitionApiJsonValidator;\n-    private final SavingsAccountChargeAssembler savingsAccountChargeAssembler;\n-    private final CommandProcessingService commandProcessingService;\n-    private final SavingsAccountDomainService savingsAccountDomainService;\n-    private final SavingsAccountWritePlatformService savingsAccountWritePlatformService;\n-    private final AccountNumberFormatRepositoryWrapper accountNumberFormatRepository;\n-    private final BusinessEventNotifierService businessEventNotifierService;\n-    private final EntityDatatableChecksWritePlatformService entityDatatableChecksWritePlatformService;\n-\n-    @Autowired\n-    public SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl(final PlatformSecurityContext context,\n-            final SavingsAccountRepositoryWrapper savingAccountRepository, final SavingsAccountAssembler savingAccountAssembler,\n-            final SavingsAccountDataValidator savingsAccountDataValidator, final AccountNumberGenerator accountNumberGenerator,\n-            final ClientRepositoryWrapper clientRepository, final GroupRepository groupRepository,\n-            final SavingsProductRepository savingsProductRepository, final NoteRepository noteRepository,\n-            final StaffRepositoryWrapper staffRepository,\n-            final SavingsAccountApplicationTransitionApiJsonValidator savingsAccountApplicationTransitionApiJsonValidator,\n-            final SavingsAccountChargeAssembler savingsAccountChargeAssembler, final CommandProcessingService commandProcessingService,\n-            final SavingsAccountDomainService savingsAccountDomainService,\n-            final SavingsAccountWritePlatformService savingsAccountWritePlatformService,\n-            final AccountNumberFormatRepositoryWrapper accountNumberFormatRepository,\n-            final BusinessEventNotifierService businessEventNotifierService,\n-            final EntityDatatableChecksWritePlatformService entityDatatableChecksWritePlatformService) {\n-        this.context = context;\n-        this.savingAccountRepository = savingAccountRepository;\n-        this.savingAccountAssembler = savingAccountAssembler;\n-        this.accountNumberGenerator = accountNumberGenerator;\n-        this.savingsAccountDataValidator = savingsAccountDataValidator;\n-        this.clientRepository = clientRepository;\n-        this.groupRepository = groupRepository;\n-        this.savingsProductRepository = savingsProductRepository;\n-        this.noteRepository = noteRepository;\n-        this.staffRepository = staffRepository;\n-        this.savingsAccountApplicationTransitionApiJsonValidator = savingsAccountApplicationTransitionApiJsonValidator;\n-        this.savingsAccountChargeAssembler = savingsAccountChargeAssembler;\n-        this.commandProcessingService = commandProcessingService;\n-        this.savingsAccountDomainService = savingsAccountDomainService;\n-        this.accountNumberFormatRepository = accountNumberFormatRepository;\n-        this.savingsAccountWritePlatformService = savingsAccountWritePlatformService;\n-        this.businessEventNotifierService = businessEventNotifierService ;\n-        this.entityDatatableChecksWritePlatformService = entityDatatableChecksWritePlatformService;\n-    }\n-\n     /*\n      * Guaranteed to throw an exception no matter what the data integrity issue\n      * is.\n      */\n-    private void handleDataIntegrityIssues(final JsonCommand command, final Throwable realCause, final Exception dve) {\n-\n-        final StringBuilder errorCodeBuilder = new StringBuilder(\"error.msg.\").append(SavingsApiConstants.SAVINGS_ACCOUNT_RESOURCE_NAME);\n-\n-        if (realCause.getMessage().contains(\"sa_account_no_UNIQUE\")) {\n-            final String accountNo = command.stringValueOfParameterNamed(\"accountNo\");\n-            errorCodeBuilder.append(\".duplicate.accountNo\");\n-            throw new PlatformDataIntegrityException(errorCodeBuilder.toString(), \"Savings account with accountNo \" + accountNo\n-                    + \" already exists\", \"accountNo\", accountNo);\n-\n-        } else if (realCause.getMessage().contains(\"sa_externalid_UNIQUE\")) {\n-\n-            final String externalId = command.stringValueOfParameterNamed(\"externalId\");\n-            errorCodeBuilder.append(\".duplicate.externalId\");\n-            throw new PlatformDataIntegrityException(errorCodeBuilder.toString(), \"Savings account with externalId \" + externalId\n-                    + \" already exists\", \"externalId\", externalId);\n-        }\n-\n-        errorCodeBuilder.append(\".unknown.data.integrity.issue\");\n-        logger.error(\"Error occured.\", dve);\n-        throw new PlatformDataIntegrityException(errorCodeBuilder.toString(), \"Unknown data integrity issue with savings account.\");\n-    }\n-\n-    @Transactional\n-    @Override\n-    public CommandProcessingResult submitApplication(final JsonCommand command) {\n-        try {\n-            this.savingsAccountDataValidator.validateForSubmit(command.json());\n-            final AppUser submittedBy = this.context.authenticatedUser();\n-\n-            final SavingsAccount account = this.savingAccountAssembler.assembleFrom(command, submittedBy);\n-            this.savingAccountRepository.save(account);\n-\n-            generateAccountNumber(account);\n-\n-            final Long savingsId = account.getId();\n-            if(command.parameterExists(SavingsApiConstants.datatables)){\n-                this.entityDatatableChecksWritePlatformService.saveDatatables(StatusEnum.CREATE.getCode().longValue(),\n-                        EntityTables.SAVING.getName(), savingsId, account.productId(),\n-                        command.arrayOfParameterNamed(SavingsApiConstants.datatables));\n-            }\n-            this.entityDatatableChecksWritePlatformService.runTheCheckForProduct(savingsId,\n-                    EntityTables.SAVING.getName(), StatusEnum.CREATE.getCode().longValue(),\n-                    EntityTables.SAVING.getForeignKeyColumnNameOnDatatable(), account.productId());\n-\n-            this.businessEventNotifierService.notifyBusinessEventWasExecuted(BUSINESS_EVENTS.SAVINGS_CREATE,\n-                    constructEntityMap(BUSINESS_ENTITY.SAVING, account));\n-\n-            return new CommandProcessingResultBuilder() //\n-                    .withCommandId(command.commandId()) //\n+public class SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl\n+          implements SavingsApplicationProcessWritePlatformService {\n+\n+     private final static Logger logger = LoggerFactory\n+               .getLogger(SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl.class);\n+\n+     private final PlatformSecurityContext context;\n+     private final SavingsAccountRepositoryWrapper savingAccountRepository;\n+     private final SavingsAccountAssembler savingAccountAssembler;\n+     private final SavingsAccountDataValidator savingsAccountDataValidator;\n+     private final AccountNumberGenerator accountNumberGenerator;\n+     private final ClientRepositoryWrapper clientRepository;\n+     private final GroupRepository groupRepository;\n+     private final SavingsProductRepository savingsProductRepository;\n+     private final NoteRepository noteRepository;\n+     private final StaffRepositoryWrapper staffRepository;\n+     private final SavingsAccountApplicationTransitionApiJsonValidator savingsAccountApplicationTransitionApiJsonValidator;\n+     private final SavingsAccountChargeAssembler savingsAccountChargeAssembler;\n+     private final CommandProcessingService commandProcessingService;\n+     private final SavingsAccountDomainService savingsAccountDomainService;\n+     private final SavingsAccountWritePlatformService savingsAccountWritePlatformService;\n+     private final AccountNumberFormatRepositoryWrapper accountNumberFormatRepository;\n+     private final BusinessEventNotifierService businessEventNotifierService;\n+     private final EntityDatatableChecksWritePlatformService entityDatatableChecksWritePlatformService;\n+     private final GSIMRepositoy gsimRepository;\n+     private final GroupRepositoryWrapper groupRepositoryWrapper;\n+     private final GroupSavingsIndividualMonitoringWritePlatformService gsimWritePlatformService;\n+\n+     @Autowired\n+     public SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl(final PlatformSecurityContext context,\n+               final SavingsAccountRepositoryWrapper savingAccountRepository,\n+               final SavingsAccountAssembler savingAccountAssembler,\n+               final SavingsAccountDataValidator savingsAccountDataValidator,\n+               final AccountNumberGenerator accountNumberGenerator, final ClientRepositoryWrapper clientRepository,\n+               final GroupRepository groupRepository, final SavingsProductRepository savingsProductRepository,\n+               final NoteRepository noteRepository, final StaffRepositoryWrapper staffRepository,\n+               final SavingsAccountApplicationTransitionApiJsonValidator savingsAccountApplicationTransitionApiJsonValidator,\n+               final SavingsAccountChargeAssembler savingsAccountChargeAssembler,\n+               final CommandProcessingService commandProcessingService,\n+               final SavingsAccountDomainService savingsAccountDomainService,\n+               final SavingsAccountWritePlatformService savingsAccountWritePlatformService,\n+               final AccountNumberFormatRepositoryWrapper accountNumberFormatRepository,\n+               final BusinessEventNotifierService businessEventNotifierService,\n+               final EntityDatatableChecksWritePlatformService entityDatatableChecksWritePlatformService,\n+               final GSIMRepositoy gsimRepository, final GroupRepositoryWrapper groupRepositoryWrapper,\n+               final GroupSavingsIndividualMonitoringWritePlatformService gsimWritePlatformService) {\n+          this.context = context;\n+          this.savingAccountRepository = savingAccountRepository;\n+          this.savingAccountAssembler = savingAccountAssembler;\n+          this.accountNumberGenerator = accountNumberGenerator;\n+          this.savingsAccountDataValidator = savingsAccountDataValidator;\n+          this.clientRepository = clientRepository;\n+          this.groupRepository = groupRepository;\n+          this.savingsProductRepository = savingsProductRepository;\n+          this.noteRepository = noteRepository;\n+          this.staffRepository = staffRepository;\n+          this.savingsAccountApplicationTransitionApiJsonValidator = savingsAccountApplicationTransitionApiJsonValidator;\n+          this.savingsAccountChargeAssembler = savingsAccountChargeAssembler;\n+          this.commandProcessingService = commandProcessingService;\n+          this.savingsAccountDomainService = savingsAccountDomainService;\n+          this.accountNumberFormatRepository = accountNumberFormatRepository;\n+          this.savingsAccountWritePlatformService = savingsAccountWritePlatformService;\n+          this.businessEventNotifierService = businessEventNotifierService;\n+          this.entityDatatableChecksWritePlatformService = entityDatatableChecksWritePlatformService;\n+          this.gsimRepository = gsimRepository;\n+          this.groupRepositoryWrapper = groupRepositoryWrapper;\n+          this.gsimWritePlatformService = gsimWritePlatformService;\n+     }\n+\n+     /*\n+      * Guaranteed to throw an exception no matter what the data integrity issue\n+      * is.\n+      */\n+     private void handleDataIntegrityIssues(final JsonCommand command, final Throwable realCause, final Exception dve) {\n+\n+          final StringBuilder errorCodeBuilder = new StringBuilder(\"error.msg.\")\n+                    .append(SavingsApiConstants.SAVINGS_ACCOUNT_RESOURCE_NAME);\n+\n+          if (realCause.getMessage().contains(\"sa_account_no_UNIQUE\")) {\n+               final String accountNo = command.stringValueOfParameterNamed(\"accountNo\");\n+               errorCodeBuilder.append(\".duplicate.accountNo\");\n+               throw new PlatformDataIntegrityException(errorCodeBuilder.toString(),\n+                         \"Savings account with accountNo \" + accountNo + \" already exists\", \"accountNo\", accountNo);\n+\n+          } else if (realCause.getMessage().contains(\"sa_externalid_UNIQUE\")) {\n+\n+               final String externalId = command.stringValueOfParameterNamed(\"externalId\");\n+               errorCodeBuilder.append(\".duplicate.externalId\");\n+               throw new PlatformDataIntegrityException(errorCodeBuilder.toString(),\n+                         \"Savings account with externalId \" + externalId + \" already exists\", \"externalId\", externalId);\n+          }\n+\n+          errorCodeBuilder.append(\".unknown.data.integrity.issue\");\n+          logger.error(\"{}\", dve.getMessage(), dve);\n+          throw new PlatformDataIntegrityException(errorCodeBuilder.toString(),\n+                    \"Unknown data integrity issue with savings account.\");\n+     }\n+\n+     @Transactional\n+     @Override\n+     public CommandProcessingResult submitGSIMApplication(final JsonCommand command) {\n+\n+          CommandProcessingResult result = null;\n+\n+          JsonArray gsimApplications = command.arrayOfParameterNamed(\"clientArray\");\n+\n+          for (JsonElement gsimApplication : gsimApplications) {\n+               // result=submitApplication(JsonCommand.fromExistingCommand(command,\n+               // gsimApplication));\n+               result = submitApplication(JsonCommand.fromExistingCommand(command, gsimApplication,\n+                         gsimApplication.getAsJsonObject().get(\"clientId\").getAsLong()));\n+          }\n+\n+          return result;\n+     }\n+\n+     @Transactional\n+     @Override\n+     public CommandProcessingResult submitApplication(final JsonCommand command) {\n+          try {\n+               this.savingsAccountDataValidator.validateForSubmit(command.json());\n+               final AppUser submittedBy = this.context.authenticatedUser();\n+\n+               final SavingsAccount account = this.savingAccountAssembler.assembleFrom(command, submittedBy);\n+               this.savingAccountRepository.save(account);\n+               String accountNumber = \"\";\n+               GroupSavingsIndividualMonitoring gsimAccount = null;\n+               BigDecimal applicationId = BigDecimal.ZERO;\n+               Boolean isLastChildApplication = false;\n+\n+               // gsim\n+               if (account.isAccountNumberRequiresAutoGeneration()) {\n+\n+                    final AccountNumberFormat accountNumberFormat = this.accountNumberFormatRepository\n+                              .findByAccountType(EntityAccountType.SAVINGS);\n+                    // if application is of GSIM type\n+                    if (account.getAccountTypes() == 5) {\n+                         final Long groupId = command.longValueOfParameterNamed(\"groupId\");\n+                         // GSIM specific parameters\n+                         if (command.bigDecimalValueOfParameterNamedDefaultToNullIfZero(\"applicationId\") != null) {\n+                              applicationId = command.bigDecimalValueOfParameterNamedDefaultToNullIfZero(\"applicationId\");\n+                         }\n+\n+                         if (command.booleanObjectValueOfParameterNamed(\"lastApplication\") != null) {\n+                              isLastChildApplication = command.booleanPrimitiveValueOfParameterNamed(\"lastApplication\");\n+                         }\n+\n+                         Group group = this.groupRepositoryWrapper.findOneWithNotFoundDetection(groupId);\n+\n+                         if (command.booleanObjectValueOfParameterNamed(\"isParentAccount\") != null)\n+                         {\n+                                   // empty table check\n+                              if (gsimRepository.count() != 0) {\n+                                   // Parent-Not an empty table\n+\n+                                   accountNumber = this.accountNumberGenerator.generate(account, accountNumberFormat);\n+                                   account.updateAccountNo(accountNumber + \"-1\");\n+                                   gsimAccount = gsimWritePlatformService.addGSIMAccountInfo(accountNumber, group, BigDecimal.ZERO,\n+                                             Long.valueOf(1), true,\n+                                             SavingsAccountStatusType.SUBMITTED_AND_PENDING_APPROVAL.getValue(),applicationId);\n+                                   account.setGsim(gsimAccount);\n+                                   this.savingAccountRepository.save(account);\n+\n+                              } else {\n+                                   // Parent-empty table\n+                                   accountNumber = this.accountNumberGenerator.generate(account, accountNumberFormat);\n+                                   account.updateAccountNo(accountNumber + \"-1\");\n+                                   gsimWritePlatformService.addGSIMAccountInfo(accountNumber, group, BigDecimal.ZERO,\n+                                             Long.valueOf(1), true,\n+                                             SavingsAccountStatusType.SUBMITTED_AND_PENDING_APPROVAL.getValue(),applicationId);\n+                                   account.setGsim(gsimRepository.findOneByAccountNumber(accountNumber));\n+                                   this.savingAccountRepository.save(account);\n+\n+                              }\n+\n+                         } else {\n+\n+                              if (gsimRepository.count() != 0) {\n+                                   // Child-Not an empty table check\n+                                   gsimAccount = gsimRepository.findOneByIsAcceptingChildAndApplicationId(true,applicationId);\n+                                   accountNumber = gsimAccount.getAccountNumber() + \"-\"\n+                                             + (gsimAccount.getChildAccountsCount() + 1);\n+                                   account.updateAccountNo(accountNumber);\n+                                   this.gsimWritePlatformService.incrementChildAccountCount(gsimAccount);\n+                                   account.setGsim(gsimAccount);\n+                                   this.savingAccountRepository.save(account);\n+\n+                              } else {\n+                                   // Child-empty table\n+                                   // if the gsim info is empty set the current account as parent\n+                                   accountNumber = this.accountNumberGenerator.generate(account, accountNumberFormat);\n+                                   account.updateAccountNo(accountNumber + \"-1\");\n+                                   gsimWritePlatformService.addGSIMAccountInfo(accountNumber, group, BigDecimal.ZERO,\n+                                             Long.valueOf(1), true,\n+                                             SavingsAccountStatusType.SUBMITTED_AND_PENDING_APPROVAL.getValue(),applicationId);\n+                                   account.setGsim(gsimAccount);\n+                                   this.savingAccountRepository.save(account);\n+\n+                              }\n+\n+                              //reset isAcceptingChild when processing last application of GSIM\n+                              if (isLastChildApplication) {\n+                                   this.gsimWritePlatformService.resetIsAcceptingChild(\n+                                             gsimRepository.findOneByIsAcceptingChildAndApplicationId(true, applicationId));\n+                              }\n+\n+                         }\n+                    } else // for applications other than GSIM\n+                    {\n+                         generateAccountNumber(account);\n+                    }\n+\n+               }\n+\n+               // end of gsim\n+\n+               final Long savingsId = account.getId();\n+\n+               if (command.parameterExists(SavingsApiConstants.datatables)) {\n+                    this.entityDatatableChecksWritePlatformService.saveDatatables(StatusEnum.CREATE.getCode().longValue(),\n+                              EntityTables.SAVING.getName(), savingsId, account.productId(),\n+                              command.arrayOfParameterNamed(SavingsApiConstants.datatables));\n+               }\n+               this.entityDatatableChecksWritePlatformService.runTheCheckForProduct(savingsId,\n+                         EntityTables.SAVING.getName(), StatusEnum.CREATE.getCode().longValue(),\n+                         EntityTables.SAVING.getForeignKeyColumnNameOnDatatable(), account.productId());\n+\n+               this.businessEventNotifierService.notifyBusinessEventWasExecuted(BUSINESS_EVENTS.SAVINGS_CREATE,\n+                         constructEntityMap(BUSINESS_ENTITY.SAVING, account));\n+\n+               return new CommandProcessingResultBuilder() //\n+                         .withCommandId(command.commandId()) //command.commandId()\n+                         .withEntityId(savingsId)                //\n+                         .withOfficeId(account.officeId()) //\n+                         .withClientId(account.clientId()) //\n+                         .withGroupId(account.groupId()) //\n+                         .withSavingsId(savingsId) //\n+                        .withGsimId(gsimAccount==null ? 0 : gsimAccount.getId())", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 386}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1Mjg4MjI3OnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/service/SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMDozNDoxOFrOGH8kYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjowNzowMlrOGIpqGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk4NTU3MA==", "bodyText": "omit hyphens in account numbers.", "url": "https://github.com/apache/fineract/pull/738#discussion_r410985570", "createdAt": "2020-04-19T20:34:18Z", "author": {"login": "nikpawar89"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/service/SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl.java", "diffHunk": "@@ -86,470 +93,715 @@\n import org.springframework.transaction.annotation.Transactional;\n \n @Service\n-public class SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl implements SavingsApplicationProcessWritePlatformService {\n-\n-    private final static Logger logger = LoggerFactory.getLogger(SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl.class);\n-\n-    private final PlatformSecurityContext context;\n-    private final SavingsAccountRepositoryWrapper savingAccountRepository;\n-    private final SavingsAccountAssembler savingAccountAssembler;\n-    private final SavingsAccountDataValidator savingsAccountDataValidator;\n-    private final AccountNumberGenerator accountNumberGenerator;\n-    private final ClientRepositoryWrapper clientRepository;\n-    private final GroupRepository groupRepository;\n-    private final SavingsProductRepository savingsProductRepository;\n-    private final NoteRepository noteRepository;\n-    private final StaffRepositoryWrapper staffRepository;\n-    private final SavingsAccountApplicationTransitionApiJsonValidator savingsAccountApplicationTransitionApiJsonValidator;\n-    private final SavingsAccountChargeAssembler savingsAccountChargeAssembler;\n-    private final CommandProcessingService commandProcessingService;\n-    private final SavingsAccountDomainService savingsAccountDomainService;\n-    private final SavingsAccountWritePlatformService savingsAccountWritePlatformService;\n-    private final AccountNumberFormatRepositoryWrapper accountNumberFormatRepository;\n-    private final BusinessEventNotifierService businessEventNotifierService;\n-    private final EntityDatatableChecksWritePlatformService entityDatatableChecksWritePlatformService;\n-\n-    @Autowired\n-    public SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl(final PlatformSecurityContext context,\n-            final SavingsAccountRepositoryWrapper savingAccountRepository, final SavingsAccountAssembler savingAccountAssembler,\n-            final SavingsAccountDataValidator savingsAccountDataValidator, final AccountNumberGenerator accountNumberGenerator,\n-            final ClientRepositoryWrapper clientRepository, final GroupRepository groupRepository,\n-            final SavingsProductRepository savingsProductRepository, final NoteRepository noteRepository,\n-            final StaffRepositoryWrapper staffRepository,\n-            final SavingsAccountApplicationTransitionApiJsonValidator savingsAccountApplicationTransitionApiJsonValidator,\n-            final SavingsAccountChargeAssembler savingsAccountChargeAssembler, final CommandProcessingService commandProcessingService,\n-            final SavingsAccountDomainService savingsAccountDomainService,\n-            final SavingsAccountWritePlatformService savingsAccountWritePlatformService,\n-            final AccountNumberFormatRepositoryWrapper accountNumberFormatRepository,\n-            final BusinessEventNotifierService businessEventNotifierService,\n-            final EntityDatatableChecksWritePlatformService entityDatatableChecksWritePlatformService) {\n-        this.context = context;\n-        this.savingAccountRepository = savingAccountRepository;\n-        this.savingAccountAssembler = savingAccountAssembler;\n-        this.accountNumberGenerator = accountNumberGenerator;\n-        this.savingsAccountDataValidator = savingsAccountDataValidator;\n-        this.clientRepository = clientRepository;\n-        this.groupRepository = groupRepository;\n-        this.savingsProductRepository = savingsProductRepository;\n-        this.noteRepository = noteRepository;\n-        this.staffRepository = staffRepository;\n-        this.savingsAccountApplicationTransitionApiJsonValidator = savingsAccountApplicationTransitionApiJsonValidator;\n-        this.savingsAccountChargeAssembler = savingsAccountChargeAssembler;\n-        this.commandProcessingService = commandProcessingService;\n-        this.savingsAccountDomainService = savingsAccountDomainService;\n-        this.accountNumberFormatRepository = accountNumberFormatRepository;\n-        this.savingsAccountWritePlatformService = savingsAccountWritePlatformService;\n-        this.businessEventNotifierService = businessEventNotifierService ;\n-        this.entityDatatableChecksWritePlatformService = entityDatatableChecksWritePlatformService;\n-    }\n-\n     /*\n      * Guaranteed to throw an exception no matter what the data integrity issue\n      * is.\n      */\n-    private void handleDataIntegrityIssues(final JsonCommand command, final Throwable realCause, final Exception dve) {\n-\n-        final StringBuilder errorCodeBuilder = new StringBuilder(\"error.msg.\").append(SavingsApiConstants.SAVINGS_ACCOUNT_RESOURCE_NAME);\n-\n-        if (realCause.getMessage().contains(\"sa_account_no_UNIQUE\")) {\n-            final String accountNo = command.stringValueOfParameterNamed(\"accountNo\");\n-            errorCodeBuilder.append(\".duplicate.accountNo\");\n-            throw new PlatformDataIntegrityException(errorCodeBuilder.toString(), \"Savings account with accountNo \" + accountNo\n-                    + \" already exists\", \"accountNo\", accountNo);\n-\n-        } else if (realCause.getMessage().contains(\"sa_externalid_UNIQUE\")) {\n-\n-            final String externalId = command.stringValueOfParameterNamed(\"externalId\");\n-            errorCodeBuilder.append(\".duplicate.externalId\");\n-            throw new PlatformDataIntegrityException(errorCodeBuilder.toString(), \"Savings account with externalId \" + externalId\n-                    + \" already exists\", \"externalId\", externalId);\n-        }\n-\n-        errorCodeBuilder.append(\".unknown.data.integrity.issue\");\n-        logger.error(\"Error occured.\", dve);\n-        throw new PlatformDataIntegrityException(errorCodeBuilder.toString(), \"Unknown data integrity issue with savings account.\");\n-    }\n-\n-    @Transactional\n-    @Override\n-    public CommandProcessingResult submitApplication(final JsonCommand command) {\n-        try {\n-            this.savingsAccountDataValidator.validateForSubmit(command.json());\n-            final AppUser submittedBy = this.context.authenticatedUser();\n-\n-            final SavingsAccount account = this.savingAccountAssembler.assembleFrom(command, submittedBy);\n-            this.savingAccountRepository.save(account);\n-\n-            generateAccountNumber(account);\n-\n-            final Long savingsId = account.getId();\n-            if(command.parameterExists(SavingsApiConstants.datatables)){\n-                this.entityDatatableChecksWritePlatformService.saveDatatables(StatusEnum.CREATE.getCode().longValue(),\n-                        EntityTables.SAVING.getName(), savingsId, account.productId(),\n-                        command.arrayOfParameterNamed(SavingsApiConstants.datatables));\n-            }\n-            this.entityDatatableChecksWritePlatformService.runTheCheckForProduct(savingsId,\n-                    EntityTables.SAVING.getName(), StatusEnum.CREATE.getCode().longValue(),\n-                    EntityTables.SAVING.getForeignKeyColumnNameOnDatatable(), account.productId());\n-\n-            this.businessEventNotifierService.notifyBusinessEventWasExecuted(BUSINESS_EVENTS.SAVINGS_CREATE,\n-                    constructEntityMap(BUSINESS_ENTITY.SAVING, account));\n-\n-            return new CommandProcessingResultBuilder() //\n-                    .withCommandId(command.commandId()) //\n+public class SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl\n+          implements SavingsApplicationProcessWritePlatformService {\n+\n+     private final static Logger logger = LoggerFactory\n+               .getLogger(SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl.class);\n+\n+     private final PlatformSecurityContext context;\n+     private final SavingsAccountRepositoryWrapper savingAccountRepository;\n+     private final SavingsAccountAssembler savingAccountAssembler;\n+     private final SavingsAccountDataValidator savingsAccountDataValidator;\n+     private final AccountNumberGenerator accountNumberGenerator;\n+     private final ClientRepositoryWrapper clientRepository;\n+     private final GroupRepository groupRepository;\n+     private final SavingsProductRepository savingsProductRepository;\n+     private final NoteRepository noteRepository;\n+     private final StaffRepositoryWrapper staffRepository;\n+     private final SavingsAccountApplicationTransitionApiJsonValidator savingsAccountApplicationTransitionApiJsonValidator;\n+     private final SavingsAccountChargeAssembler savingsAccountChargeAssembler;\n+     private final CommandProcessingService commandProcessingService;\n+     private final SavingsAccountDomainService savingsAccountDomainService;\n+     private final SavingsAccountWritePlatformService savingsAccountWritePlatformService;\n+     private final AccountNumberFormatRepositoryWrapper accountNumberFormatRepository;\n+     private final BusinessEventNotifierService businessEventNotifierService;\n+     private final EntityDatatableChecksWritePlatformService entityDatatableChecksWritePlatformService;\n+     private final GSIMRepositoy gsimRepository;\n+     private final GroupRepositoryWrapper groupRepositoryWrapper;\n+     private final GroupSavingsIndividualMonitoringWritePlatformService gsimWritePlatformService;\n+\n+     @Autowired\n+     public SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl(final PlatformSecurityContext context,\n+               final SavingsAccountRepositoryWrapper savingAccountRepository,\n+               final SavingsAccountAssembler savingAccountAssembler,\n+               final SavingsAccountDataValidator savingsAccountDataValidator,\n+               final AccountNumberGenerator accountNumberGenerator, final ClientRepositoryWrapper clientRepository,\n+               final GroupRepository groupRepository, final SavingsProductRepository savingsProductRepository,\n+               final NoteRepository noteRepository, final StaffRepositoryWrapper staffRepository,\n+               final SavingsAccountApplicationTransitionApiJsonValidator savingsAccountApplicationTransitionApiJsonValidator,\n+               final SavingsAccountChargeAssembler savingsAccountChargeAssembler,\n+               final CommandProcessingService commandProcessingService,\n+               final SavingsAccountDomainService savingsAccountDomainService,\n+               final SavingsAccountWritePlatformService savingsAccountWritePlatformService,\n+               final AccountNumberFormatRepositoryWrapper accountNumberFormatRepository,\n+               final BusinessEventNotifierService businessEventNotifierService,\n+               final EntityDatatableChecksWritePlatformService entityDatatableChecksWritePlatformService,\n+               final GSIMRepositoy gsimRepository, final GroupRepositoryWrapper groupRepositoryWrapper,\n+               final GroupSavingsIndividualMonitoringWritePlatformService gsimWritePlatformService) {\n+          this.context = context;\n+          this.savingAccountRepository = savingAccountRepository;\n+          this.savingAccountAssembler = savingAccountAssembler;\n+          this.accountNumberGenerator = accountNumberGenerator;\n+          this.savingsAccountDataValidator = savingsAccountDataValidator;\n+          this.clientRepository = clientRepository;\n+          this.groupRepository = groupRepository;\n+          this.savingsProductRepository = savingsProductRepository;\n+          this.noteRepository = noteRepository;\n+          this.staffRepository = staffRepository;\n+          this.savingsAccountApplicationTransitionApiJsonValidator = savingsAccountApplicationTransitionApiJsonValidator;\n+          this.savingsAccountChargeAssembler = savingsAccountChargeAssembler;\n+          this.commandProcessingService = commandProcessingService;\n+          this.savingsAccountDomainService = savingsAccountDomainService;\n+          this.accountNumberFormatRepository = accountNumberFormatRepository;\n+          this.savingsAccountWritePlatformService = savingsAccountWritePlatformService;\n+          this.businessEventNotifierService = businessEventNotifierService;\n+          this.entityDatatableChecksWritePlatformService = entityDatatableChecksWritePlatformService;\n+          this.gsimRepository = gsimRepository;\n+          this.groupRepositoryWrapper = groupRepositoryWrapper;\n+          this.gsimWritePlatformService = gsimWritePlatformService;\n+     }\n+\n+     /*\n+      * Guaranteed to throw an exception no matter what the data integrity issue\n+      * is.\n+      */\n+     private void handleDataIntegrityIssues(final JsonCommand command, final Throwable realCause, final Exception dve) {\n+\n+          final StringBuilder errorCodeBuilder = new StringBuilder(\"error.msg.\")\n+                    .append(SavingsApiConstants.SAVINGS_ACCOUNT_RESOURCE_NAME);\n+\n+          if (realCause.getMessage().contains(\"sa_account_no_UNIQUE\")) {\n+               final String accountNo = command.stringValueOfParameterNamed(\"accountNo\");\n+               errorCodeBuilder.append(\".duplicate.accountNo\");\n+               throw new PlatformDataIntegrityException(errorCodeBuilder.toString(),\n+                         \"Savings account with accountNo \" + accountNo + \" already exists\", \"accountNo\", accountNo);\n+\n+          } else if (realCause.getMessage().contains(\"sa_externalid_UNIQUE\")) {\n+\n+               final String externalId = command.stringValueOfParameterNamed(\"externalId\");\n+               errorCodeBuilder.append(\".duplicate.externalId\");\n+               throw new PlatformDataIntegrityException(errorCodeBuilder.toString(),\n+                         \"Savings account with externalId \" + externalId + \" already exists\", \"externalId\", externalId);\n+          }\n+\n+          errorCodeBuilder.append(\".unknown.data.integrity.issue\");\n+          logger.error(\"{}\", dve.getMessage(), dve);\n+          throw new PlatformDataIntegrityException(errorCodeBuilder.toString(),\n+                    \"Unknown data integrity issue with savings account.\");\n+     }\n+\n+     @Transactional\n+     @Override\n+     public CommandProcessingResult submitGSIMApplication(final JsonCommand command) {\n+\n+          CommandProcessingResult result = null;\n+\n+          JsonArray gsimApplications = command.arrayOfParameterNamed(\"clientArray\");\n+\n+          for (JsonElement gsimApplication : gsimApplications) {\n+               // result=submitApplication(JsonCommand.fromExistingCommand(command,\n+               // gsimApplication));\n+               result = submitApplication(JsonCommand.fromExistingCommand(command, gsimApplication,\n+                         gsimApplication.getAsJsonObject().get(\"clientId\").getAsLong()));\n+          }\n+\n+          return result;\n+     }\n+\n+     @Transactional\n+     @Override\n+     public CommandProcessingResult submitApplication(final JsonCommand command) {\n+          try {\n+               this.savingsAccountDataValidator.validateForSubmit(command.json());\n+               final AppUser submittedBy = this.context.authenticatedUser();\n+\n+               final SavingsAccount account = this.savingAccountAssembler.assembleFrom(command, submittedBy);\n+               this.savingAccountRepository.save(account);\n+               String accountNumber = \"\";\n+               GroupSavingsIndividualMonitoring gsimAccount = null;\n+               BigDecimal applicationId = BigDecimal.ZERO;\n+               Boolean isLastChildApplication = false;\n+\n+               // gsim\n+               if (account.isAccountNumberRequiresAutoGeneration()) {\n+\n+                    final AccountNumberFormat accountNumberFormat = this.accountNumberFormatRepository\n+                              .findByAccountType(EntityAccountType.SAVINGS);\n+                    // if application is of GSIM type\n+                    if (account.getAccountTypes() == 5) {\n+                         final Long groupId = command.longValueOfParameterNamed(\"groupId\");\n+                         // GSIM specific parameters\n+                         if (command.bigDecimalValueOfParameterNamedDefaultToNullIfZero(\"applicationId\") != null) {\n+                              applicationId = command.bigDecimalValueOfParameterNamedDefaultToNullIfZero(\"applicationId\");\n+                         }\n+\n+                         if (command.booleanObjectValueOfParameterNamed(\"lastApplication\") != null) {\n+                              isLastChildApplication = command.booleanPrimitiveValueOfParameterNamed(\"lastApplication\");\n+                         }\n+\n+                         Group group = this.groupRepositoryWrapper.findOneWithNotFoundDetection(groupId);\n+\n+                         if (command.booleanObjectValueOfParameterNamed(\"isParentAccount\") != null)\n+                         {\n+                                   // empty table check\n+                              if (gsimRepository.count() != 0) {\n+                                   // Parent-Not an empty table\n+\n+                                   accountNumber = this.accountNumberGenerator.generate(account, accountNumberFormat);\n+                                   account.updateAccountNo(accountNumber + \"-1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 305}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyODI2Mw==", "bodyText": "I agree with @nikpawar on removal of hyphens", "url": "https://github.com/apache/fineract/pull/738#discussion_r411428263", "createdAt": "2020-04-20T14:33:42Z", "author": {"login": "francisguchie"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/service/SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl.java", "diffHunk": "@@ -86,470 +93,715 @@\n import org.springframework.transaction.annotation.Transactional;\n \n @Service\n-public class SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl implements SavingsApplicationProcessWritePlatformService {\n-\n-    private final static Logger logger = LoggerFactory.getLogger(SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl.class);\n-\n-    private final PlatformSecurityContext context;\n-    private final SavingsAccountRepositoryWrapper savingAccountRepository;\n-    private final SavingsAccountAssembler savingAccountAssembler;\n-    private final SavingsAccountDataValidator savingsAccountDataValidator;\n-    private final AccountNumberGenerator accountNumberGenerator;\n-    private final ClientRepositoryWrapper clientRepository;\n-    private final GroupRepository groupRepository;\n-    private final SavingsProductRepository savingsProductRepository;\n-    private final NoteRepository noteRepository;\n-    private final StaffRepositoryWrapper staffRepository;\n-    private final SavingsAccountApplicationTransitionApiJsonValidator savingsAccountApplicationTransitionApiJsonValidator;\n-    private final SavingsAccountChargeAssembler savingsAccountChargeAssembler;\n-    private final CommandProcessingService commandProcessingService;\n-    private final SavingsAccountDomainService savingsAccountDomainService;\n-    private final SavingsAccountWritePlatformService savingsAccountWritePlatformService;\n-    private final AccountNumberFormatRepositoryWrapper accountNumberFormatRepository;\n-    private final BusinessEventNotifierService businessEventNotifierService;\n-    private final EntityDatatableChecksWritePlatformService entityDatatableChecksWritePlatformService;\n-\n-    @Autowired\n-    public SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl(final PlatformSecurityContext context,\n-            final SavingsAccountRepositoryWrapper savingAccountRepository, final SavingsAccountAssembler savingAccountAssembler,\n-            final SavingsAccountDataValidator savingsAccountDataValidator, final AccountNumberGenerator accountNumberGenerator,\n-            final ClientRepositoryWrapper clientRepository, final GroupRepository groupRepository,\n-            final SavingsProductRepository savingsProductRepository, final NoteRepository noteRepository,\n-            final StaffRepositoryWrapper staffRepository,\n-            final SavingsAccountApplicationTransitionApiJsonValidator savingsAccountApplicationTransitionApiJsonValidator,\n-            final SavingsAccountChargeAssembler savingsAccountChargeAssembler, final CommandProcessingService commandProcessingService,\n-            final SavingsAccountDomainService savingsAccountDomainService,\n-            final SavingsAccountWritePlatformService savingsAccountWritePlatformService,\n-            final AccountNumberFormatRepositoryWrapper accountNumberFormatRepository,\n-            final BusinessEventNotifierService businessEventNotifierService,\n-            final EntityDatatableChecksWritePlatformService entityDatatableChecksWritePlatformService) {\n-        this.context = context;\n-        this.savingAccountRepository = savingAccountRepository;\n-        this.savingAccountAssembler = savingAccountAssembler;\n-        this.accountNumberGenerator = accountNumberGenerator;\n-        this.savingsAccountDataValidator = savingsAccountDataValidator;\n-        this.clientRepository = clientRepository;\n-        this.groupRepository = groupRepository;\n-        this.savingsProductRepository = savingsProductRepository;\n-        this.noteRepository = noteRepository;\n-        this.staffRepository = staffRepository;\n-        this.savingsAccountApplicationTransitionApiJsonValidator = savingsAccountApplicationTransitionApiJsonValidator;\n-        this.savingsAccountChargeAssembler = savingsAccountChargeAssembler;\n-        this.commandProcessingService = commandProcessingService;\n-        this.savingsAccountDomainService = savingsAccountDomainService;\n-        this.accountNumberFormatRepository = accountNumberFormatRepository;\n-        this.savingsAccountWritePlatformService = savingsAccountWritePlatformService;\n-        this.businessEventNotifierService = businessEventNotifierService ;\n-        this.entityDatatableChecksWritePlatformService = entityDatatableChecksWritePlatformService;\n-    }\n-\n     /*\n      * Guaranteed to throw an exception no matter what the data integrity issue\n      * is.\n      */\n-    private void handleDataIntegrityIssues(final JsonCommand command, final Throwable realCause, final Exception dve) {\n-\n-        final StringBuilder errorCodeBuilder = new StringBuilder(\"error.msg.\").append(SavingsApiConstants.SAVINGS_ACCOUNT_RESOURCE_NAME);\n-\n-        if (realCause.getMessage().contains(\"sa_account_no_UNIQUE\")) {\n-            final String accountNo = command.stringValueOfParameterNamed(\"accountNo\");\n-            errorCodeBuilder.append(\".duplicate.accountNo\");\n-            throw new PlatformDataIntegrityException(errorCodeBuilder.toString(), \"Savings account with accountNo \" + accountNo\n-                    + \" already exists\", \"accountNo\", accountNo);\n-\n-        } else if (realCause.getMessage().contains(\"sa_externalid_UNIQUE\")) {\n-\n-            final String externalId = command.stringValueOfParameterNamed(\"externalId\");\n-            errorCodeBuilder.append(\".duplicate.externalId\");\n-            throw new PlatformDataIntegrityException(errorCodeBuilder.toString(), \"Savings account with externalId \" + externalId\n-                    + \" already exists\", \"externalId\", externalId);\n-        }\n-\n-        errorCodeBuilder.append(\".unknown.data.integrity.issue\");\n-        logger.error(\"Error occured.\", dve);\n-        throw new PlatformDataIntegrityException(errorCodeBuilder.toString(), \"Unknown data integrity issue with savings account.\");\n-    }\n-\n-    @Transactional\n-    @Override\n-    public CommandProcessingResult submitApplication(final JsonCommand command) {\n-        try {\n-            this.savingsAccountDataValidator.validateForSubmit(command.json());\n-            final AppUser submittedBy = this.context.authenticatedUser();\n-\n-            final SavingsAccount account = this.savingAccountAssembler.assembleFrom(command, submittedBy);\n-            this.savingAccountRepository.save(account);\n-\n-            generateAccountNumber(account);\n-\n-            final Long savingsId = account.getId();\n-            if(command.parameterExists(SavingsApiConstants.datatables)){\n-                this.entityDatatableChecksWritePlatformService.saveDatatables(StatusEnum.CREATE.getCode().longValue(),\n-                        EntityTables.SAVING.getName(), savingsId, account.productId(),\n-                        command.arrayOfParameterNamed(SavingsApiConstants.datatables));\n-            }\n-            this.entityDatatableChecksWritePlatformService.runTheCheckForProduct(savingsId,\n-                    EntityTables.SAVING.getName(), StatusEnum.CREATE.getCode().longValue(),\n-                    EntityTables.SAVING.getForeignKeyColumnNameOnDatatable(), account.productId());\n-\n-            this.businessEventNotifierService.notifyBusinessEventWasExecuted(BUSINESS_EVENTS.SAVINGS_CREATE,\n-                    constructEntityMap(BUSINESS_ENTITY.SAVING, account));\n-\n-            return new CommandProcessingResultBuilder() //\n-                    .withCommandId(command.commandId()) //\n+public class SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl\n+          implements SavingsApplicationProcessWritePlatformService {\n+\n+     private final static Logger logger = LoggerFactory\n+               .getLogger(SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl.class);\n+\n+     private final PlatformSecurityContext context;\n+     private final SavingsAccountRepositoryWrapper savingAccountRepository;\n+     private final SavingsAccountAssembler savingAccountAssembler;\n+     private final SavingsAccountDataValidator savingsAccountDataValidator;\n+     private final AccountNumberGenerator accountNumberGenerator;\n+     private final ClientRepositoryWrapper clientRepository;\n+     private final GroupRepository groupRepository;\n+     private final SavingsProductRepository savingsProductRepository;\n+     private final NoteRepository noteRepository;\n+     private final StaffRepositoryWrapper staffRepository;\n+     private final SavingsAccountApplicationTransitionApiJsonValidator savingsAccountApplicationTransitionApiJsonValidator;\n+     private final SavingsAccountChargeAssembler savingsAccountChargeAssembler;\n+     private final CommandProcessingService commandProcessingService;\n+     private final SavingsAccountDomainService savingsAccountDomainService;\n+     private final SavingsAccountWritePlatformService savingsAccountWritePlatformService;\n+     private final AccountNumberFormatRepositoryWrapper accountNumberFormatRepository;\n+     private final BusinessEventNotifierService businessEventNotifierService;\n+     private final EntityDatatableChecksWritePlatformService entityDatatableChecksWritePlatformService;\n+     private final GSIMRepositoy gsimRepository;\n+     private final GroupRepositoryWrapper groupRepositoryWrapper;\n+     private final GroupSavingsIndividualMonitoringWritePlatformService gsimWritePlatformService;\n+\n+     @Autowired\n+     public SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl(final PlatformSecurityContext context,\n+               final SavingsAccountRepositoryWrapper savingAccountRepository,\n+               final SavingsAccountAssembler savingAccountAssembler,\n+               final SavingsAccountDataValidator savingsAccountDataValidator,\n+               final AccountNumberGenerator accountNumberGenerator, final ClientRepositoryWrapper clientRepository,\n+               final GroupRepository groupRepository, final SavingsProductRepository savingsProductRepository,\n+               final NoteRepository noteRepository, final StaffRepositoryWrapper staffRepository,\n+               final SavingsAccountApplicationTransitionApiJsonValidator savingsAccountApplicationTransitionApiJsonValidator,\n+               final SavingsAccountChargeAssembler savingsAccountChargeAssembler,\n+               final CommandProcessingService commandProcessingService,\n+               final SavingsAccountDomainService savingsAccountDomainService,\n+               final SavingsAccountWritePlatformService savingsAccountWritePlatformService,\n+               final AccountNumberFormatRepositoryWrapper accountNumberFormatRepository,\n+               final BusinessEventNotifierService businessEventNotifierService,\n+               final EntityDatatableChecksWritePlatformService entityDatatableChecksWritePlatformService,\n+               final GSIMRepositoy gsimRepository, final GroupRepositoryWrapper groupRepositoryWrapper,\n+               final GroupSavingsIndividualMonitoringWritePlatformService gsimWritePlatformService) {\n+          this.context = context;\n+          this.savingAccountRepository = savingAccountRepository;\n+          this.savingAccountAssembler = savingAccountAssembler;\n+          this.accountNumberGenerator = accountNumberGenerator;\n+          this.savingsAccountDataValidator = savingsAccountDataValidator;\n+          this.clientRepository = clientRepository;\n+          this.groupRepository = groupRepository;\n+          this.savingsProductRepository = savingsProductRepository;\n+          this.noteRepository = noteRepository;\n+          this.staffRepository = staffRepository;\n+          this.savingsAccountApplicationTransitionApiJsonValidator = savingsAccountApplicationTransitionApiJsonValidator;\n+          this.savingsAccountChargeAssembler = savingsAccountChargeAssembler;\n+          this.commandProcessingService = commandProcessingService;\n+          this.savingsAccountDomainService = savingsAccountDomainService;\n+          this.accountNumberFormatRepository = accountNumberFormatRepository;\n+          this.savingsAccountWritePlatformService = savingsAccountWritePlatformService;\n+          this.businessEventNotifierService = businessEventNotifierService;\n+          this.entityDatatableChecksWritePlatformService = entityDatatableChecksWritePlatformService;\n+          this.gsimRepository = gsimRepository;\n+          this.groupRepositoryWrapper = groupRepositoryWrapper;\n+          this.gsimWritePlatformService = gsimWritePlatformService;\n+     }\n+\n+     /*\n+      * Guaranteed to throw an exception no matter what the data integrity issue\n+      * is.\n+      */\n+     private void handleDataIntegrityIssues(final JsonCommand command, final Throwable realCause, final Exception dve) {\n+\n+          final StringBuilder errorCodeBuilder = new StringBuilder(\"error.msg.\")\n+                    .append(SavingsApiConstants.SAVINGS_ACCOUNT_RESOURCE_NAME);\n+\n+          if (realCause.getMessage().contains(\"sa_account_no_UNIQUE\")) {\n+               final String accountNo = command.stringValueOfParameterNamed(\"accountNo\");\n+               errorCodeBuilder.append(\".duplicate.accountNo\");\n+               throw new PlatformDataIntegrityException(errorCodeBuilder.toString(),\n+                         \"Savings account with accountNo \" + accountNo + \" already exists\", \"accountNo\", accountNo);\n+\n+          } else if (realCause.getMessage().contains(\"sa_externalid_UNIQUE\")) {\n+\n+               final String externalId = command.stringValueOfParameterNamed(\"externalId\");\n+               errorCodeBuilder.append(\".duplicate.externalId\");\n+               throw new PlatformDataIntegrityException(errorCodeBuilder.toString(),\n+                         \"Savings account with externalId \" + externalId + \" already exists\", \"externalId\", externalId);\n+          }\n+\n+          errorCodeBuilder.append(\".unknown.data.integrity.issue\");\n+          logger.error(\"{}\", dve.getMessage(), dve);\n+          throw new PlatformDataIntegrityException(errorCodeBuilder.toString(),\n+                    \"Unknown data integrity issue with savings account.\");\n+     }\n+\n+     @Transactional\n+     @Override\n+     public CommandProcessingResult submitGSIMApplication(final JsonCommand command) {\n+\n+          CommandProcessingResult result = null;\n+\n+          JsonArray gsimApplications = command.arrayOfParameterNamed(\"clientArray\");\n+\n+          for (JsonElement gsimApplication : gsimApplications) {\n+               // result=submitApplication(JsonCommand.fromExistingCommand(command,\n+               // gsimApplication));\n+               result = submitApplication(JsonCommand.fromExistingCommand(command, gsimApplication,\n+                         gsimApplication.getAsJsonObject().get(\"clientId\").getAsLong()));\n+          }\n+\n+          return result;\n+     }\n+\n+     @Transactional\n+     @Override\n+     public CommandProcessingResult submitApplication(final JsonCommand command) {\n+          try {\n+               this.savingsAccountDataValidator.validateForSubmit(command.json());\n+               final AppUser submittedBy = this.context.authenticatedUser();\n+\n+               final SavingsAccount account = this.savingAccountAssembler.assembleFrom(command, submittedBy);\n+               this.savingAccountRepository.save(account);\n+               String accountNumber = \"\";\n+               GroupSavingsIndividualMonitoring gsimAccount = null;\n+               BigDecimal applicationId = BigDecimal.ZERO;\n+               Boolean isLastChildApplication = false;\n+\n+               // gsim\n+               if (account.isAccountNumberRequiresAutoGeneration()) {\n+\n+                    final AccountNumberFormat accountNumberFormat = this.accountNumberFormatRepository\n+                              .findByAccountType(EntityAccountType.SAVINGS);\n+                    // if application is of GSIM type\n+                    if (account.getAccountTypes() == 5) {\n+                         final Long groupId = command.longValueOfParameterNamed(\"groupId\");\n+                         // GSIM specific parameters\n+                         if (command.bigDecimalValueOfParameterNamedDefaultToNullIfZero(\"applicationId\") != null) {\n+                              applicationId = command.bigDecimalValueOfParameterNamedDefaultToNullIfZero(\"applicationId\");\n+                         }\n+\n+                         if (command.booleanObjectValueOfParameterNamed(\"lastApplication\") != null) {\n+                              isLastChildApplication = command.booleanPrimitiveValueOfParameterNamed(\"lastApplication\");\n+                         }\n+\n+                         Group group = this.groupRepositoryWrapper.findOneWithNotFoundDetection(groupId);\n+\n+                         if (command.booleanObjectValueOfParameterNamed(\"isParentAccount\") != null)\n+                         {\n+                                   // empty table check\n+                              if (gsimRepository.count() != 0) {\n+                                   // Parent-Not an empty table\n+\n+                                   accountNumber = this.accountNumberGenerator.generate(account, accountNumberFormat);\n+                                   account.updateAccountNo(accountNumber + \"-1\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk4NTU3MA=="}, "originalCommit": null, "originalPosition": 305}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyOTkxMQ==", "bodyText": "@nikpawar89\nWithout hyphens the user can easily generate BBANs, issue check books to account holders\nstandard account numbers should be 10 digits", "url": "https://github.com/apache/fineract/pull/738#discussion_r411429911", "createdAt": "2020-04-20T14:35:50Z", "author": {"login": "francisguchie"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/service/SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl.java", "diffHunk": "@@ -86,470 +93,715 @@\n import org.springframework.transaction.annotation.Transactional;\n \n @Service\n-public class SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl implements SavingsApplicationProcessWritePlatformService {\n-\n-    private final static Logger logger = LoggerFactory.getLogger(SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl.class);\n-\n-    private final PlatformSecurityContext context;\n-    private final SavingsAccountRepositoryWrapper savingAccountRepository;\n-    private final SavingsAccountAssembler savingAccountAssembler;\n-    private final SavingsAccountDataValidator savingsAccountDataValidator;\n-    private final AccountNumberGenerator accountNumberGenerator;\n-    private final ClientRepositoryWrapper clientRepository;\n-    private final GroupRepository groupRepository;\n-    private final SavingsProductRepository savingsProductRepository;\n-    private final NoteRepository noteRepository;\n-    private final StaffRepositoryWrapper staffRepository;\n-    private final SavingsAccountApplicationTransitionApiJsonValidator savingsAccountApplicationTransitionApiJsonValidator;\n-    private final SavingsAccountChargeAssembler savingsAccountChargeAssembler;\n-    private final CommandProcessingService commandProcessingService;\n-    private final SavingsAccountDomainService savingsAccountDomainService;\n-    private final SavingsAccountWritePlatformService savingsAccountWritePlatformService;\n-    private final AccountNumberFormatRepositoryWrapper accountNumberFormatRepository;\n-    private final BusinessEventNotifierService businessEventNotifierService;\n-    private final EntityDatatableChecksWritePlatformService entityDatatableChecksWritePlatformService;\n-\n-    @Autowired\n-    public SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl(final PlatformSecurityContext context,\n-            final SavingsAccountRepositoryWrapper savingAccountRepository, final SavingsAccountAssembler savingAccountAssembler,\n-            final SavingsAccountDataValidator savingsAccountDataValidator, final AccountNumberGenerator accountNumberGenerator,\n-            final ClientRepositoryWrapper clientRepository, final GroupRepository groupRepository,\n-            final SavingsProductRepository savingsProductRepository, final NoteRepository noteRepository,\n-            final StaffRepositoryWrapper staffRepository,\n-            final SavingsAccountApplicationTransitionApiJsonValidator savingsAccountApplicationTransitionApiJsonValidator,\n-            final SavingsAccountChargeAssembler savingsAccountChargeAssembler, final CommandProcessingService commandProcessingService,\n-            final SavingsAccountDomainService savingsAccountDomainService,\n-            final SavingsAccountWritePlatformService savingsAccountWritePlatformService,\n-            final AccountNumberFormatRepositoryWrapper accountNumberFormatRepository,\n-            final BusinessEventNotifierService businessEventNotifierService,\n-            final EntityDatatableChecksWritePlatformService entityDatatableChecksWritePlatformService) {\n-        this.context = context;\n-        this.savingAccountRepository = savingAccountRepository;\n-        this.savingAccountAssembler = savingAccountAssembler;\n-        this.accountNumberGenerator = accountNumberGenerator;\n-        this.savingsAccountDataValidator = savingsAccountDataValidator;\n-        this.clientRepository = clientRepository;\n-        this.groupRepository = groupRepository;\n-        this.savingsProductRepository = savingsProductRepository;\n-        this.noteRepository = noteRepository;\n-        this.staffRepository = staffRepository;\n-        this.savingsAccountApplicationTransitionApiJsonValidator = savingsAccountApplicationTransitionApiJsonValidator;\n-        this.savingsAccountChargeAssembler = savingsAccountChargeAssembler;\n-        this.commandProcessingService = commandProcessingService;\n-        this.savingsAccountDomainService = savingsAccountDomainService;\n-        this.accountNumberFormatRepository = accountNumberFormatRepository;\n-        this.savingsAccountWritePlatformService = savingsAccountWritePlatformService;\n-        this.businessEventNotifierService = businessEventNotifierService ;\n-        this.entityDatatableChecksWritePlatformService = entityDatatableChecksWritePlatformService;\n-    }\n-\n     /*\n      * Guaranteed to throw an exception no matter what the data integrity issue\n      * is.\n      */\n-    private void handleDataIntegrityIssues(final JsonCommand command, final Throwable realCause, final Exception dve) {\n-\n-        final StringBuilder errorCodeBuilder = new StringBuilder(\"error.msg.\").append(SavingsApiConstants.SAVINGS_ACCOUNT_RESOURCE_NAME);\n-\n-        if (realCause.getMessage().contains(\"sa_account_no_UNIQUE\")) {\n-            final String accountNo = command.stringValueOfParameterNamed(\"accountNo\");\n-            errorCodeBuilder.append(\".duplicate.accountNo\");\n-            throw new PlatformDataIntegrityException(errorCodeBuilder.toString(), \"Savings account with accountNo \" + accountNo\n-                    + \" already exists\", \"accountNo\", accountNo);\n-\n-        } else if (realCause.getMessage().contains(\"sa_externalid_UNIQUE\")) {\n-\n-            final String externalId = command.stringValueOfParameterNamed(\"externalId\");\n-            errorCodeBuilder.append(\".duplicate.externalId\");\n-            throw new PlatformDataIntegrityException(errorCodeBuilder.toString(), \"Savings account with externalId \" + externalId\n-                    + \" already exists\", \"externalId\", externalId);\n-        }\n-\n-        errorCodeBuilder.append(\".unknown.data.integrity.issue\");\n-        logger.error(\"Error occured.\", dve);\n-        throw new PlatformDataIntegrityException(errorCodeBuilder.toString(), \"Unknown data integrity issue with savings account.\");\n-    }\n-\n-    @Transactional\n-    @Override\n-    public CommandProcessingResult submitApplication(final JsonCommand command) {\n-        try {\n-            this.savingsAccountDataValidator.validateForSubmit(command.json());\n-            final AppUser submittedBy = this.context.authenticatedUser();\n-\n-            final SavingsAccount account = this.savingAccountAssembler.assembleFrom(command, submittedBy);\n-            this.savingAccountRepository.save(account);\n-\n-            generateAccountNumber(account);\n-\n-            final Long savingsId = account.getId();\n-            if(command.parameterExists(SavingsApiConstants.datatables)){\n-                this.entityDatatableChecksWritePlatformService.saveDatatables(StatusEnum.CREATE.getCode().longValue(),\n-                        EntityTables.SAVING.getName(), savingsId, account.productId(),\n-                        command.arrayOfParameterNamed(SavingsApiConstants.datatables));\n-            }\n-            this.entityDatatableChecksWritePlatformService.runTheCheckForProduct(savingsId,\n-                    EntityTables.SAVING.getName(), StatusEnum.CREATE.getCode().longValue(),\n-                    EntityTables.SAVING.getForeignKeyColumnNameOnDatatable(), account.productId());\n-\n-            this.businessEventNotifierService.notifyBusinessEventWasExecuted(BUSINESS_EVENTS.SAVINGS_CREATE,\n-                    constructEntityMap(BUSINESS_ENTITY.SAVING, account));\n-\n-            return new CommandProcessingResultBuilder() //\n-                    .withCommandId(command.commandId()) //\n+public class SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl\n+          implements SavingsApplicationProcessWritePlatformService {\n+\n+     private final static Logger logger = LoggerFactory\n+               .getLogger(SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl.class);\n+\n+     private final PlatformSecurityContext context;\n+     private final SavingsAccountRepositoryWrapper savingAccountRepository;\n+     private final SavingsAccountAssembler savingAccountAssembler;\n+     private final SavingsAccountDataValidator savingsAccountDataValidator;\n+     private final AccountNumberGenerator accountNumberGenerator;\n+     private final ClientRepositoryWrapper clientRepository;\n+     private final GroupRepository groupRepository;\n+     private final SavingsProductRepository savingsProductRepository;\n+     private final NoteRepository noteRepository;\n+     private final StaffRepositoryWrapper staffRepository;\n+     private final SavingsAccountApplicationTransitionApiJsonValidator savingsAccountApplicationTransitionApiJsonValidator;\n+     private final SavingsAccountChargeAssembler savingsAccountChargeAssembler;\n+     private final CommandProcessingService commandProcessingService;\n+     private final SavingsAccountDomainService savingsAccountDomainService;\n+     private final SavingsAccountWritePlatformService savingsAccountWritePlatformService;\n+     private final AccountNumberFormatRepositoryWrapper accountNumberFormatRepository;\n+     private final BusinessEventNotifierService businessEventNotifierService;\n+     private final EntityDatatableChecksWritePlatformService entityDatatableChecksWritePlatformService;\n+     private final GSIMRepositoy gsimRepository;\n+     private final GroupRepositoryWrapper groupRepositoryWrapper;\n+     private final GroupSavingsIndividualMonitoringWritePlatformService gsimWritePlatformService;\n+\n+     @Autowired\n+     public SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl(final PlatformSecurityContext context,\n+               final SavingsAccountRepositoryWrapper savingAccountRepository,\n+               final SavingsAccountAssembler savingAccountAssembler,\n+               final SavingsAccountDataValidator savingsAccountDataValidator,\n+               final AccountNumberGenerator accountNumberGenerator, final ClientRepositoryWrapper clientRepository,\n+               final GroupRepository groupRepository, final SavingsProductRepository savingsProductRepository,\n+               final NoteRepository noteRepository, final StaffRepositoryWrapper staffRepository,\n+               final SavingsAccountApplicationTransitionApiJsonValidator savingsAccountApplicationTransitionApiJsonValidator,\n+               final SavingsAccountChargeAssembler savingsAccountChargeAssembler,\n+               final CommandProcessingService commandProcessingService,\n+               final SavingsAccountDomainService savingsAccountDomainService,\n+               final SavingsAccountWritePlatformService savingsAccountWritePlatformService,\n+               final AccountNumberFormatRepositoryWrapper accountNumberFormatRepository,\n+               final BusinessEventNotifierService businessEventNotifierService,\n+               final EntityDatatableChecksWritePlatformService entityDatatableChecksWritePlatformService,\n+               final GSIMRepositoy gsimRepository, final GroupRepositoryWrapper groupRepositoryWrapper,\n+               final GroupSavingsIndividualMonitoringWritePlatformService gsimWritePlatformService) {\n+          this.context = context;\n+          this.savingAccountRepository = savingAccountRepository;\n+          this.savingAccountAssembler = savingAccountAssembler;\n+          this.accountNumberGenerator = accountNumberGenerator;\n+          this.savingsAccountDataValidator = savingsAccountDataValidator;\n+          this.clientRepository = clientRepository;\n+          this.groupRepository = groupRepository;\n+          this.savingsProductRepository = savingsProductRepository;\n+          this.noteRepository = noteRepository;\n+          this.staffRepository = staffRepository;\n+          this.savingsAccountApplicationTransitionApiJsonValidator = savingsAccountApplicationTransitionApiJsonValidator;\n+          this.savingsAccountChargeAssembler = savingsAccountChargeAssembler;\n+          this.commandProcessingService = commandProcessingService;\n+          this.savingsAccountDomainService = savingsAccountDomainService;\n+          this.accountNumberFormatRepository = accountNumberFormatRepository;\n+          this.savingsAccountWritePlatformService = savingsAccountWritePlatformService;\n+          this.businessEventNotifierService = businessEventNotifierService;\n+          this.entityDatatableChecksWritePlatformService = entityDatatableChecksWritePlatformService;\n+          this.gsimRepository = gsimRepository;\n+          this.groupRepositoryWrapper = groupRepositoryWrapper;\n+          this.gsimWritePlatformService = gsimWritePlatformService;\n+     }\n+\n+     /*\n+      * Guaranteed to throw an exception no matter what the data integrity issue\n+      * is.\n+      */\n+     private void handleDataIntegrityIssues(final JsonCommand command, final Throwable realCause, final Exception dve) {\n+\n+          final StringBuilder errorCodeBuilder = new StringBuilder(\"error.msg.\")\n+                    .append(SavingsApiConstants.SAVINGS_ACCOUNT_RESOURCE_NAME);\n+\n+          if (realCause.getMessage().contains(\"sa_account_no_UNIQUE\")) {\n+               final String accountNo = command.stringValueOfParameterNamed(\"accountNo\");\n+               errorCodeBuilder.append(\".duplicate.accountNo\");\n+               throw new PlatformDataIntegrityException(errorCodeBuilder.toString(),\n+                         \"Savings account with accountNo \" + accountNo + \" already exists\", \"accountNo\", accountNo);\n+\n+          } else if (realCause.getMessage().contains(\"sa_externalid_UNIQUE\")) {\n+\n+               final String externalId = command.stringValueOfParameterNamed(\"externalId\");\n+               errorCodeBuilder.append(\".duplicate.externalId\");\n+               throw new PlatformDataIntegrityException(errorCodeBuilder.toString(),\n+                         \"Savings account with externalId \" + externalId + \" already exists\", \"externalId\", externalId);\n+          }\n+\n+          errorCodeBuilder.append(\".unknown.data.integrity.issue\");\n+          logger.error(\"{}\", dve.getMessage(), dve);\n+          throw new PlatformDataIntegrityException(errorCodeBuilder.toString(),\n+                    \"Unknown data integrity issue with savings account.\");\n+     }\n+\n+     @Transactional\n+     @Override\n+     public CommandProcessingResult submitGSIMApplication(final JsonCommand command) {\n+\n+          CommandProcessingResult result = null;\n+\n+          JsonArray gsimApplications = command.arrayOfParameterNamed(\"clientArray\");\n+\n+          for (JsonElement gsimApplication : gsimApplications) {\n+               // result=submitApplication(JsonCommand.fromExistingCommand(command,\n+               // gsimApplication));\n+               result = submitApplication(JsonCommand.fromExistingCommand(command, gsimApplication,\n+                         gsimApplication.getAsJsonObject().get(\"clientId\").getAsLong()));\n+          }\n+\n+          return result;\n+     }\n+\n+     @Transactional\n+     @Override\n+     public CommandProcessingResult submitApplication(final JsonCommand command) {\n+          try {\n+               this.savingsAccountDataValidator.validateForSubmit(command.json());\n+               final AppUser submittedBy = this.context.authenticatedUser();\n+\n+               final SavingsAccount account = this.savingAccountAssembler.assembleFrom(command, submittedBy);\n+               this.savingAccountRepository.save(account);\n+               String accountNumber = \"\";\n+               GroupSavingsIndividualMonitoring gsimAccount = null;\n+               BigDecimal applicationId = BigDecimal.ZERO;\n+               Boolean isLastChildApplication = false;\n+\n+               // gsim\n+               if (account.isAccountNumberRequiresAutoGeneration()) {\n+\n+                    final AccountNumberFormat accountNumberFormat = this.accountNumberFormatRepository\n+                              .findByAccountType(EntityAccountType.SAVINGS);\n+                    // if application is of GSIM type\n+                    if (account.getAccountTypes() == 5) {\n+                         final Long groupId = command.longValueOfParameterNamed(\"groupId\");\n+                         // GSIM specific parameters\n+                         if (command.bigDecimalValueOfParameterNamedDefaultToNullIfZero(\"applicationId\") != null) {\n+                              applicationId = command.bigDecimalValueOfParameterNamedDefaultToNullIfZero(\"applicationId\");\n+                         }\n+\n+                         if (command.booleanObjectValueOfParameterNamed(\"lastApplication\") != null) {\n+                              isLastChildApplication = command.booleanPrimitiveValueOfParameterNamed(\"lastApplication\");\n+                         }\n+\n+                         Group group = this.groupRepositoryWrapper.findOneWithNotFoundDetection(groupId);\n+\n+                         if (command.booleanObjectValueOfParameterNamed(\"isParentAccount\") != null)\n+                         {\n+                                   // empty table check\n+                              if (gsimRepository.count() != 0) {\n+                                   // Parent-Not an empty table\n+\n+                                   accountNumber = this.accountNumberGenerator.generate(account, accountNumberFormat);\n+                                   account.updateAccountNo(accountNumber + \"-1\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk4NTU3MA=="}, "originalCommit": null, "originalPosition": 305}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcyNDMxNA==", "bodyText": "Yes, hyphens have been removed.", "url": "https://github.com/apache/fineract/pull/738#discussion_r411724314", "createdAt": "2020-04-20T22:07:02Z", "author": {"login": "rrpawar96"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/service/SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl.java", "diffHunk": "@@ -86,470 +93,715 @@\n import org.springframework.transaction.annotation.Transactional;\n \n @Service\n-public class SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl implements SavingsApplicationProcessWritePlatformService {\n-\n-    private final static Logger logger = LoggerFactory.getLogger(SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl.class);\n-\n-    private final PlatformSecurityContext context;\n-    private final SavingsAccountRepositoryWrapper savingAccountRepository;\n-    private final SavingsAccountAssembler savingAccountAssembler;\n-    private final SavingsAccountDataValidator savingsAccountDataValidator;\n-    private final AccountNumberGenerator accountNumberGenerator;\n-    private final ClientRepositoryWrapper clientRepository;\n-    private final GroupRepository groupRepository;\n-    private final SavingsProductRepository savingsProductRepository;\n-    private final NoteRepository noteRepository;\n-    private final StaffRepositoryWrapper staffRepository;\n-    private final SavingsAccountApplicationTransitionApiJsonValidator savingsAccountApplicationTransitionApiJsonValidator;\n-    private final SavingsAccountChargeAssembler savingsAccountChargeAssembler;\n-    private final CommandProcessingService commandProcessingService;\n-    private final SavingsAccountDomainService savingsAccountDomainService;\n-    private final SavingsAccountWritePlatformService savingsAccountWritePlatformService;\n-    private final AccountNumberFormatRepositoryWrapper accountNumberFormatRepository;\n-    private final BusinessEventNotifierService businessEventNotifierService;\n-    private final EntityDatatableChecksWritePlatformService entityDatatableChecksWritePlatformService;\n-\n-    @Autowired\n-    public SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl(final PlatformSecurityContext context,\n-            final SavingsAccountRepositoryWrapper savingAccountRepository, final SavingsAccountAssembler savingAccountAssembler,\n-            final SavingsAccountDataValidator savingsAccountDataValidator, final AccountNumberGenerator accountNumberGenerator,\n-            final ClientRepositoryWrapper clientRepository, final GroupRepository groupRepository,\n-            final SavingsProductRepository savingsProductRepository, final NoteRepository noteRepository,\n-            final StaffRepositoryWrapper staffRepository,\n-            final SavingsAccountApplicationTransitionApiJsonValidator savingsAccountApplicationTransitionApiJsonValidator,\n-            final SavingsAccountChargeAssembler savingsAccountChargeAssembler, final CommandProcessingService commandProcessingService,\n-            final SavingsAccountDomainService savingsAccountDomainService,\n-            final SavingsAccountWritePlatformService savingsAccountWritePlatformService,\n-            final AccountNumberFormatRepositoryWrapper accountNumberFormatRepository,\n-            final BusinessEventNotifierService businessEventNotifierService,\n-            final EntityDatatableChecksWritePlatformService entityDatatableChecksWritePlatformService) {\n-        this.context = context;\n-        this.savingAccountRepository = savingAccountRepository;\n-        this.savingAccountAssembler = savingAccountAssembler;\n-        this.accountNumberGenerator = accountNumberGenerator;\n-        this.savingsAccountDataValidator = savingsAccountDataValidator;\n-        this.clientRepository = clientRepository;\n-        this.groupRepository = groupRepository;\n-        this.savingsProductRepository = savingsProductRepository;\n-        this.noteRepository = noteRepository;\n-        this.staffRepository = staffRepository;\n-        this.savingsAccountApplicationTransitionApiJsonValidator = savingsAccountApplicationTransitionApiJsonValidator;\n-        this.savingsAccountChargeAssembler = savingsAccountChargeAssembler;\n-        this.commandProcessingService = commandProcessingService;\n-        this.savingsAccountDomainService = savingsAccountDomainService;\n-        this.accountNumberFormatRepository = accountNumberFormatRepository;\n-        this.savingsAccountWritePlatformService = savingsAccountWritePlatformService;\n-        this.businessEventNotifierService = businessEventNotifierService ;\n-        this.entityDatatableChecksWritePlatformService = entityDatatableChecksWritePlatformService;\n-    }\n-\n     /*\n      * Guaranteed to throw an exception no matter what the data integrity issue\n      * is.\n      */\n-    private void handleDataIntegrityIssues(final JsonCommand command, final Throwable realCause, final Exception dve) {\n-\n-        final StringBuilder errorCodeBuilder = new StringBuilder(\"error.msg.\").append(SavingsApiConstants.SAVINGS_ACCOUNT_RESOURCE_NAME);\n-\n-        if (realCause.getMessage().contains(\"sa_account_no_UNIQUE\")) {\n-            final String accountNo = command.stringValueOfParameterNamed(\"accountNo\");\n-            errorCodeBuilder.append(\".duplicate.accountNo\");\n-            throw new PlatformDataIntegrityException(errorCodeBuilder.toString(), \"Savings account with accountNo \" + accountNo\n-                    + \" already exists\", \"accountNo\", accountNo);\n-\n-        } else if (realCause.getMessage().contains(\"sa_externalid_UNIQUE\")) {\n-\n-            final String externalId = command.stringValueOfParameterNamed(\"externalId\");\n-            errorCodeBuilder.append(\".duplicate.externalId\");\n-            throw new PlatformDataIntegrityException(errorCodeBuilder.toString(), \"Savings account with externalId \" + externalId\n-                    + \" already exists\", \"externalId\", externalId);\n-        }\n-\n-        errorCodeBuilder.append(\".unknown.data.integrity.issue\");\n-        logger.error(\"Error occured.\", dve);\n-        throw new PlatformDataIntegrityException(errorCodeBuilder.toString(), \"Unknown data integrity issue with savings account.\");\n-    }\n-\n-    @Transactional\n-    @Override\n-    public CommandProcessingResult submitApplication(final JsonCommand command) {\n-        try {\n-            this.savingsAccountDataValidator.validateForSubmit(command.json());\n-            final AppUser submittedBy = this.context.authenticatedUser();\n-\n-            final SavingsAccount account = this.savingAccountAssembler.assembleFrom(command, submittedBy);\n-            this.savingAccountRepository.save(account);\n-\n-            generateAccountNumber(account);\n-\n-            final Long savingsId = account.getId();\n-            if(command.parameterExists(SavingsApiConstants.datatables)){\n-                this.entityDatatableChecksWritePlatformService.saveDatatables(StatusEnum.CREATE.getCode().longValue(),\n-                        EntityTables.SAVING.getName(), savingsId, account.productId(),\n-                        command.arrayOfParameterNamed(SavingsApiConstants.datatables));\n-            }\n-            this.entityDatatableChecksWritePlatformService.runTheCheckForProduct(savingsId,\n-                    EntityTables.SAVING.getName(), StatusEnum.CREATE.getCode().longValue(),\n-                    EntityTables.SAVING.getForeignKeyColumnNameOnDatatable(), account.productId());\n-\n-            this.businessEventNotifierService.notifyBusinessEventWasExecuted(BUSINESS_EVENTS.SAVINGS_CREATE,\n-                    constructEntityMap(BUSINESS_ENTITY.SAVING, account));\n-\n-            return new CommandProcessingResultBuilder() //\n-                    .withCommandId(command.commandId()) //\n+public class SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl\n+          implements SavingsApplicationProcessWritePlatformService {\n+\n+     private final static Logger logger = LoggerFactory\n+               .getLogger(SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl.class);\n+\n+     private final PlatformSecurityContext context;\n+     private final SavingsAccountRepositoryWrapper savingAccountRepository;\n+     private final SavingsAccountAssembler savingAccountAssembler;\n+     private final SavingsAccountDataValidator savingsAccountDataValidator;\n+     private final AccountNumberGenerator accountNumberGenerator;\n+     private final ClientRepositoryWrapper clientRepository;\n+     private final GroupRepository groupRepository;\n+     private final SavingsProductRepository savingsProductRepository;\n+     private final NoteRepository noteRepository;\n+     private final StaffRepositoryWrapper staffRepository;\n+     private final SavingsAccountApplicationTransitionApiJsonValidator savingsAccountApplicationTransitionApiJsonValidator;\n+     private final SavingsAccountChargeAssembler savingsAccountChargeAssembler;\n+     private final CommandProcessingService commandProcessingService;\n+     private final SavingsAccountDomainService savingsAccountDomainService;\n+     private final SavingsAccountWritePlatformService savingsAccountWritePlatformService;\n+     private final AccountNumberFormatRepositoryWrapper accountNumberFormatRepository;\n+     private final BusinessEventNotifierService businessEventNotifierService;\n+     private final EntityDatatableChecksWritePlatformService entityDatatableChecksWritePlatformService;\n+     private final GSIMRepositoy gsimRepository;\n+     private final GroupRepositoryWrapper groupRepositoryWrapper;\n+     private final GroupSavingsIndividualMonitoringWritePlatformService gsimWritePlatformService;\n+\n+     @Autowired\n+     public SavingsApplicationProcessWritePlatformServiceJpaRepositoryImpl(final PlatformSecurityContext context,\n+               final SavingsAccountRepositoryWrapper savingAccountRepository,\n+               final SavingsAccountAssembler savingAccountAssembler,\n+               final SavingsAccountDataValidator savingsAccountDataValidator,\n+               final AccountNumberGenerator accountNumberGenerator, final ClientRepositoryWrapper clientRepository,\n+               final GroupRepository groupRepository, final SavingsProductRepository savingsProductRepository,\n+               final NoteRepository noteRepository, final StaffRepositoryWrapper staffRepository,\n+               final SavingsAccountApplicationTransitionApiJsonValidator savingsAccountApplicationTransitionApiJsonValidator,\n+               final SavingsAccountChargeAssembler savingsAccountChargeAssembler,\n+               final CommandProcessingService commandProcessingService,\n+               final SavingsAccountDomainService savingsAccountDomainService,\n+               final SavingsAccountWritePlatformService savingsAccountWritePlatformService,\n+               final AccountNumberFormatRepositoryWrapper accountNumberFormatRepository,\n+               final BusinessEventNotifierService businessEventNotifierService,\n+               final EntityDatatableChecksWritePlatformService entityDatatableChecksWritePlatformService,\n+               final GSIMRepositoy gsimRepository, final GroupRepositoryWrapper groupRepositoryWrapper,\n+               final GroupSavingsIndividualMonitoringWritePlatformService gsimWritePlatformService) {\n+          this.context = context;\n+          this.savingAccountRepository = savingAccountRepository;\n+          this.savingAccountAssembler = savingAccountAssembler;\n+          this.accountNumberGenerator = accountNumberGenerator;\n+          this.savingsAccountDataValidator = savingsAccountDataValidator;\n+          this.clientRepository = clientRepository;\n+          this.groupRepository = groupRepository;\n+          this.savingsProductRepository = savingsProductRepository;\n+          this.noteRepository = noteRepository;\n+          this.staffRepository = staffRepository;\n+          this.savingsAccountApplicationTransitionApiJsonValidator = savingsAccountApplicationTransitionApiJsonValidator;\n+          this.savingsAccountChargeAssembler = savingsAccountChargeAssembler;\n+          this.commandProcessingService = commandProcessingService;\n+          this.savingsAccountDomainService = savingsAccountDomainService;\n+          this.accountNumberFormatRepository = accountNumberFormatRepository;\n+          this.savingsAccountWritePlatformService = savingsAccountWritePlatformService;\n+          this.businessEventNotifierService = businessEventNotifierService;\n+          this.entityDatatableChecksWritePlatformService = entityDatatableChecksWritePlatformService;\n+          this.gsimRepository = gsimRepository;\n+          this.groupRepositoryWrapper = groupRepositoryWrapper;\n+          this.gsimWritePlatformService = gsimWritePlatformService;\n+     }\n+\n+     /*\n+      * Guaranteed to throw an exception no matter what the data integrity issue\n+      * is.\n+      */\n+     private void handleDataIntegrityIssues(final JsonCommand command, final Throwable realCause, final Exception dve) {\n+\n+          final StringBuilder errorCodeBuilder = new StringBuilder(\"error.msg.\")\n+                    .append(SavingsApiConstants.SAVINGS_ACCOUNT_RESOURCE_NAME);\n+\n+          if (realCause.getMessage().contains(\"sa_account_no_UNIQUE\")) {\n+               final String accountNo = command.stringValueOfParameterNamed(\"accountNo\");\n+               errorCodeBuilder.append(\".duplicate.accountNo\");\n+               throw new PlatformDataIntegrityException(errorCodeBuilder.toString(),\n+                         \"Savings account with accountNo \" + accountNo + \" already exists\", \"accountNo\", accountNo);\n+\n+          } else if (realCause.getMessage().contains(\"sa_externalid_UNIQUE\")) {\n+\n+               final String externalId = command.stringValueOfParameterNamed(\"externalId\");\n+               errorCodeBuilder.append(\".duplicate.externalId\");\n+               throw new PlatformDataIntegrityException(errorCodeBuilder.toString(),\n+                         \"Savings account with externalId \" + externalId + \" already exists\", \"externalId\", externalId);\n+          }\n+\n+          errorCodeBuilder.append(\".unknown.data.integrity.issue\");\n+          logger.error(\"{}\", dve.getMessage(), dve);\n+          throw new PlatformDataIntegrityException(errorCodeBuilder.toString(),\n+                    \"Unknown data integrity issue with savings account.\");\n+     }\n+\n+     @Transactional\n+     @Override\n+     public CommandProcessingResult submitGSIMApplication(final JsonCommand command) {\n+\n+          CommandProcessingResult result = null;\n+\n+          JsonArray gsimApplications = command.arrayOfParameterNamed(\"clientArray\");\n+\n+          for (JsonElement gsimApplication : gsimApplications) {\n+               // result=submitApplication(JsonCommand.fromExistingCommand(command,\n+               // gsimApplication));\n+               result = submitApplication(JsonCommand.fromExistingCommand(command, gsimApplication,\n+                         gsimApplication.getAsJsonObject().get(\"clientId\").getAsLong()));\n+          }\n+\n+          return result;\n+     }\n+\n+     @Transactional\n+     @Override\n+     public CommandProcessingResult submitApplication(final JsonCommand command) {\n+          try {\n+               this.savingsAccountDataValidator.validateForSubmit(command.json());\n+               final AppUser submittedBy = this.context.authenticatedUser();\n+\n+               final SavingsAccount account = this.savingAccountAssembler.assembleFrom(command, submittedBy);\n+               this.savingAccountRepository.save(account);\n+               String accountNumber = \"\";\n+               GroupSavingsIndividualMonitoring gsimAccount = null;\n+               BigDecimal applicationId = BigDecimal.ZERO;\n+               Boolean isLastChildApplication = false;\n+\n+               // gsim\n+               if (account.isAccountNumberRequiresAutoGeneration()) {\n+\n+                    final AccountNumberFormat accountNumberFormat = this.accountNumberFormatRepository\n+                              .findByAccountType(EntityAccountType.SAVINGS);\n+                    // if application is of GSIM type\n+                    if (account.getAccountTypes() == 5) {\n+                         final Long groupId = command.longValueOfParameterNamed(\"groupId\");\n+                         // GSIM specific parameters\n+                         if (command.bigDecimalValueOfParameterNamedDefaultToNullIfZero(\"applicationId\") != null) {\n+                              applicationId = command.bigDecimalValueOfParameterNamedDefaultToNullIfZero(\"applicationId\");\n+                         }\n+\n+                         if (command.booleanObjectValueOfParameterNamed(\"lastApplication\") != null) {\n+                              isLastChildApplication = command.booleanPrimitiveValueOfParameterNamed(\"lastApplication\");\n+                         }\n+\n+                         Group group = this.groupRepositoryWrapper.findOneWithNotFoundDetection(groupId);\n+\n+                         if (command.booleanObjectValueOfParameterNamed(\"isParentAccount\") != null)\n+                         {\n+                                   // empty table check\n+                              if (gsimRepository.count() != 0) {\n+                                   // Parent-Not an empty table\n+\n+                                   accountNumber = this.accountNumberGenerator.generate(account, accountNumberFormat);\n+                                   account.updateAccountNo(accountNumber + \"-1\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk4NTU3MA=="}, "originalCommit": null, "originalPosition": 305}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjYzOTg5OnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/domain/SavingsAccount.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMDo0Nzo1NVrOGMCpyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjo0OTozNlrOGP-yiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI3OTU2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @ManyToOne(fetch=FetchType.LAZY)\n          \n          \n            \n                @ManyToOne(fetch=FetchType.LAZY) // see FINERACT-902", "url": "https://github.com/apache/fineract/pull/738#discussion_r415279563", "createdAt": "2020-04-26T10:47:55Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/domain/SavingsAccount.java", "diffHunk": "@@ -140,11 +140,11 @@\n     @JoinColumn(name = \"client_id\", nullable = true)\n     protected Client client;\n \n-    @ManyToOne(optional = true)\n+    @ManyToOne(optional = true, fetch=FetchType.LAZY)\n     @JoinColumn(name = \"group_id\", nullable = true)\n     protected Group group;\n \n-    @ManyToOne\n+    @ManyToOne(fetch=FetchType.LAZY)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwNTg4Mw==", "bodyText": "@rrpawar96 did you want to add this?", "url": "https://github.com/apache/fineract/pull/738#discussion_r419005883", "createdAt": "2020-05-02T20:45:37Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/domain/SavingsAccount.java", "diffHunk": "@@ -140,11 +140,11 @@\n     @JoinColumn(name = \"client_id\", nullable = true)\n     protected Client client;\n \n-    @ManyToOne(optional = true)\n+    @ManyToOne(optional = true, fetch=FetchType.LAZY)\n     @JoinColumn(name = \"group_id\", nullable = true)\n     protected Group group;\n \n-    @ManyToOne\n+    @ManyToOne(fetch=FetchType.LAZY)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI3OTU2Mw=="}, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQxMDU2OA==", "bodyText": "Yes @vorburger, I want to add this annotation and I will implement the fetchplan() in the future enhancement.", "url": "https://github.com/apache/fineract/pull/738#discussion_r419410568", "createdAt": "2020-05-04T12:49:36Z", "author": {"login": "rrpawar96"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/domain/SavingsAccount.java", "diffHunk": "@@ -140,11 +140,11 @@\n     @JoinColumn(name = \"client_id\", nullable = true)\n     protected Client client;\n \n-    @ManyToOne(optional = true)\n+    @ManyToOne(optional = true, fetch=FetchType.LAZY)\n     @JoinColumn(name = \"group_id\", nullable = true)\n     protected Group group;\n \n-    @ManyToOne\n+    @ManyToOne(fetch=FetchType.LAZY)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI3OTU2Mw=="}, "originalCommit": null, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjY0MDAzOnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/domain/SavingsAccount.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMDo0ODowNFrOGMCp2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDo0MzoxOVrOGQjzog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI3OTU3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @ManyToOne(optional = true, fetch=FetchType.LAZY)\n          \n          \n            \n                @ManyToOne(optional = true, fetch=FetchType.LAZY)  // see FINERACT-902", "url": "https://github.com/apache/fineract/pull/738#discussion_r415279578", "createdAt": "2020-04-26T10:48:04Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/domain/SavingsAccount.java", "diffHunk": "@@ -140,11 +140,11 @@\n     @JoinColumn(name = \"client_id\", nullable = true)\n     protected Client client;\n \n-    @ManyToOne(optional = true)\n+    @ManyToOne(optional = true, fetch=FetchType.LAZY)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwNTg5Mw==", "bodyText": "@rrpawar96 did you want to add this?", "url": "https://github.com/apache/fineract/pull/738#discussion_r419005893", "createdAt": "2020-05-02T20:45:43Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/domain/SavingsAccount.java", "diffHunk": "@@ -140,11 +140,11 @@\n     @JoinColumn(name = \"client_id\", nullable = true)\n     protected Client client;\n \n-    @ManyToOne(optional = true)\n+    @ManyToOne(optional = true, fetch=FetchType.LAZY)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI3OTU3OA=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQxMDk2MQ==", "bodyText": "Yes", "url": "https://github.com/apache/fineract/pull/738#discussion_r419410961", "createdAt": "2020-05-04T12:50:16Z", "author": {"login": "rrpawar96"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/domain/SavingsAccount.java", "diffHunk": "@@ -140,11 +140,11 @@\n     @JoinColumn(name = \"client_id\", nullable = true)\n     protected Client client;\n \n-    @ManyToOne(optional = true)\n+    @ManyToOne(optional = true, fetch=FetchType.LAZY)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI3OTU3OA=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAxNzA1OA==", "bodyText": "@rrpawar96 I think you still forgot this? I'll finally merge it anyway \ud83d\ude04\nPerhaps you want to follow-up and add it in a subsequent PR.", "url": "https://github.com/apache/fineract/pull/738#discussion_r420017058", "createdAt": "2020-05-05T10:43:19Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/domain/SavingsAccount.java", "diffHunk": "@@ -140,11 +140,11 @@\n     @JoinColumn(name = \"client_id\", nullable = true)\n     protected Client client;\n \n-    @ManyToOne(optional = true)\n+    @ManyToOne(optional = true, fetch=FetchType.LAZY)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI3OTU3OA=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzc1MjUzOnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/domain/SavingsAccountAssembler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQyMDo1Mjo1N1rOGPmIsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjo1MToyM1rOGP-2uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwNjY0MQ==", "bodyText": "?", "url": "https://github.com/apache/fineract/pull/738#discussion_r419006641", "createdAt": "2020-05-02T20:52:57Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/domain/SavingsAccountAssembler.java", "diffHunk": "@@ -147,6 +152,20 @@ public SavingsAccount assembleFrom(final JsonCommand command, final AppUser subm\n             accountType = AccountType.JLG;\n         }\n \n+        if((Boolean)command.booleanPrimitiveValueOfParameterNamed(\"isGSIM\")!=null)\n+        {\n+             LOG.info(\"setting system to gsim\");\n+             if(command.booleanPrimitiveValueOfParameterNamed(\"isGSIM\"))\n+             {\n+                  accountType = AccountType.GSIM;\n+             }\n+        }\n+\n+       /* if(((Boolean)command.booleanPrimitiveValueOfParameterNamed(\"isGSIM\"))!=null)\n+        {\n+             accountType = AccountType.GSIM;\n+        }*/", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQxMTY0MA==", "bodyText": "These comment lines has been removed.", "url": "https://github.com/apache/fineract/pull/738#discussion_r419411640", "createdAt": "2020-05-04T12:51:23Z", "author": {"login": "rrpawar96"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/domain/SavingsAccountAssembler.java", "diffHunk": "@@ -147,6 +152,20 @@ public SavingsAccount assembleFrom(final JsonCommand command, final AppUser subm\n             accountType = AccountType.JLG;\n         }\n \n+        if((Boolean)command.booleanPrimitiveValueOfParameterNamed(\"isGSIM\")!=null)\n+        {\n+             LOG.info(\"setting system to gsim\");\n+             if(command.booleanPrimitiveValueOfParameterNamed(\"isGSIM\"))\n+             {\n+                  accountType = AccountType.GSIM;\n+             }\n+        }\n+\n+       /* if(((Boolean)command.booleanPrimitiveValueOfParameterNamed(\"isGSIM\"))!=null)\n+        {\n+             accountType = AccountType.GSIM;\n+        }*/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwNjY0MQ=="}, "originalCommit": null, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1767, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}