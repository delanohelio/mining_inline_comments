{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5NDU3ODEy", "number": 1466, "title": "FINERACT-1241-elastic-web-hook", "bodyText": "FINERACT-1241\nDescription\nDescribe the changes made and why they were made.\nIgnore if these details are present on the associated Apache Fineract JIRA ticket.\nChecklist\nPlease make sure these boxes are checked before submitting your pull request - thanks!\n\n\n Write the commit message as per https://github.com/apache/fineract/#pull-requests\n\n\n Acknowledge that we will not review PRs that are not passing the build (\"green\") - it is your responsibility to get a proposed PR to pass the build, not primarily the project's maintainers.\n\n\n Create/update unit or integration tests for verifying the changes made.\n\n\n Follow coding conventions at https://cwiki.apache.org/confluence/display/FINERACT/Coding+Conventions.\n\n\n Add required Swagger annotation and update API documentation at fineract-provider/src/main/resources/static/api-docs/apiLive.htm with details of any API changes\n\n\n Submission is not a \"code dump\".  (Large changes can be made \"in repository\" via a branch.  Ask on the developer mailing list for guidance, if required.)\n\n\nFYI our guidelines for code reviews are at https://cwiki.apache.org/confluence/display/FINERACT/Code+Review+Guide.", "createdAt": "2020-10-24T16:33:04Z", "url": "https://github.com/apache/fineract/pull/1466", "merged": true, "mergeCommit": {"oid": "0a41cdc9d9564c586dc33b371318e1648adcd7d9"}, "closed": true, "closedAt": "2020-10-27T18:15:32Z", "author": {"login": "fynmanoj"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWEYZLAFqTUxNjM4NjczNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWt1SVAFqTUxODA0OTIwOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2Mzg2NzM2", "url": "https://github.com/apache/fineract/pull/1466#pullrequestreview-516386736", "createdAt": "2020-10-25T18:47:02Z", "commit": {"oid": "a484d5e6f6193584eba853cdf9868bfa1fc4dbb0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQxODo0NzowMlrOHn7piw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQxODo0OTowNlrOHn7qYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTYzMzgwMw==", "bodyText": "Joda Time support has just been removed.. use java.time.", "url": "https://github.com/apache/fineract/pull/1466#discussion_r511633803", "createdAt": "2020-10-25T18:47:02Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/main/java/org/apache/fineract/commands/service/SynchronousCommandProcessingService.java", "diffHunk": "@@ -37,6 +44,9 @@\n import org.apache.fineract.infrastructure.security.service.PlatformSecurityContext;\n import org.apache.fineract.useradministration.domain.AppUser;\n import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a484d5e6f6193584eba853cdf9868bfa1fc4dbb0"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTYzNDAxOA==", "bodyText": "LOG.error() is probably better here?", "url": "https://github.com/apache/fineract/pull/1466#discussion_r511634018", "createdAt": "2020-10-25T18:49:06Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/hooks/processor/ProcessorHelper.java", "diffHunk": "@@ -121,4 +121,20 @@ public WebHookService createWebHookService(final String url) {\n         final RestAdapter restAdapter = new RestAdapter.Builder().setEndpoint(url).setClient(new OkClient(client)).build();\n         return restAdapter.create(WebHookService.class);\n     }\n+\n+    public Callback createCallback(final String url, String payload) {\n+\n+        return new Callback() {\n+\n+            @Override\n+            public void success(final Object o, final Response response) {\n+                LOG.info(\"URL : {} \\tStatus : {}\", url, response.getStatus());\n+            }\n+\n+            @Override\n+            public void failure(final RetrofitError retrofitError) {\n+                LOG.info(\"{}\", retrofitError.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a484d5e6f6193584eba853cdf9868bfa1fc4dbb0"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3ODEyNjg0", "url": "https://github.com/apache/fineract/pull/1466#pullrequestreview-517812684", "createdAt": "2020-10-27T15:07:53Z", "commit": {"oid": "a484d5e6f6193584eba853cdf9868bfa1fc4dbb0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNTowNzo1M1rOHpBN5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNTowNzo1M1rOHpBN5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc3MzYwNA==", "bodyText": "Don't think this receiptObj exists in any APIs.", "url": "https://github.com/apache/fineract/pull/1466#discussion_r512773604", "createdAt": "2020-10-27T15:07:53Z", "author": {"login": "avikganguly01"}, "path": "fineract-provider/src/main/java/org/apache/fineract/commands/service/SynchronousCommandProcessingService.java", "diffHunk": "@@ -205,18 +225,80 @@ public boolean validateCommand(final CommandWrapper commandWrapper, final AppUse\n         return rollbackTransaction;\n     }\n \n-    private void publishEvent(final String entityName, final String actionName, final CommandProcessingResult result) {\n+    private void publishErrorEvent(CommandWrapper wrapper, JsonCommand command, Throwable t) {\n+\n+        ErrorInfo ex;\n+        if (t instanceof RuntimeException) {\n+            final RuntimeException e = (RuntimeException) t;\n+            ex = ErrorHandler.handler(e);\n+        } else {\n+            ex = new ErrorInfo(500, 9999, \"{\\\"Exception\\\": \" + t.toString() + \"}\");\n+        }\n+\n+        publishEvent(wrapper.entityName(), wrapper.actionName(), command, ex);\n+    }\n+\n+    private void publishEvent(final String entityName, final String actionName, JsonCommand command, final Object result) {\n+        Gson gson = new Gson();\n+        try {\n+            final String authToken = ThreadLocalContextUtil.getAuthToken();\n+            final String tenantIdentifier = ThreadLocalContextUtil.getTenant().getTenantIdentifier();\n+            final AppUser appUser = this.context.authenticatedUser(CommandWrapper.wrap(actionName, entityName, null, null));\n+\n+            final HookEventSource hookEventSource = new HookEventSource(entityName, actionName);\n \n-        final String authToken = ThreadLocalContextUtil.getAuthToken();\n-        final String tenantIdentifier = ThreadLocalContextUtil.getTenant().getTenantIdentifier();\n-        final AppUser appUser = this.context.authenticatedUser(CommandWrapper.wrap(actionName, entityName, null, null));\n+            // TODO: Add support for publishing array events\n+            if (command.json() != null && command.json().startsWith(\"{\")) {\n+                Type type = new TypeToken<Map<String, Object>>() {}.getType();\n+                Map<String, Object> myMap = gson.fromJson(command.json(), type);\n \n-        final HookEventSource hookEventSource = new HookEventSource(entityName, actionName);\n+                Map<String, Object> reqmap = new HashMap<>();\n+                reqmap.put(\"entityName\", entityName);\n+                reqmap.put(\"actionName\", actionName);\n+                reqmap.put(\"createdBy\", context.authenticatedUser().getId());\n+                reqmap.put(\"createdByName\", context.authenticatedUser().getUsername());\n+                reqmap.put(\"createdByFullName\", context.authenticatedUser().getDisplayName());\n \n-        final String serializedResult = this.toApiResultJsonSerializer.serialize(result);\n+                reqmap.put(\"request\", myMap);\n+                if (result instanceof CommandProcessingResult) {\n+                    CommandProcessingResult resultCopy = CommandProcessingResult\n+                            .fromCommandProcessingResult((CommandProcessingResult) result);\n+                    if (resultCopy.hasChanges() && resultCopy.getChanges().containsKey(\"receipt\")\n+                            && resultCopy.getChanges().get(\"receipt\") instanceof String) {\n+                        String receipt = (String) resultCopy.getChanges().get(\"receipt\");\n+                        if (receipt.startsWith(\"{\")) {\n+                            try {\n+                                resultCopy.getChanges().put(\"receiptObj\", gson.fromJson(receipt, JsonObject.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a484d5e6f6193584eba853cdf9868bfa1fc4dbb0"}, "originalPosition": 113}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9b8f94a3f87ca84a92533dabd4117d325f3af10", "author": {"user": {"login": "fynmanoj", "name": "Manoj"}}, "url": "https://github.com/apache/fineract/commit/a9b8f94a3f87ca84a92533dabd4117d325f3af10", "committedDate": "2020-10-27T16:37:36Z", "message": "FINERACT-1241-elastic-web-hook"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a484d5e6f6193584eba853cdf9868bfa1fc4dbb0", "author": {"user": {"login": "fynmanoj", "name": "Manoj"}}, "url": "https://github.com/apache/fineract/commit/a484d5e6f6193584eba853cdf9868bfa1fc4dbb0", "committedDate": "2020-10-24T16:31:37Z", "message": "FINERACT-1241-elastic-web-hook"}, "afterCommit": {"oid": "a9b8f94a3f87ca84a92533dabd4117d325f3af10", "author": {"user": {"login": "fynmanoj", "name": "Manoj"}}, "url": "https://github.com/apache/fineract/commit/a9b8f94a3f87ca84a92533dabd4117d325f3af10", "committedDate": "2020-10-27T16:37:36Z", "message": "FINERACT-1241-elastic-web-hook"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MDA4MzM4", "url": "https://github.com/apache/fineract/pull/1466#pullrequestreview-518008338", "createdAt": "2020-10-27T18:15:04Z", "commit": {"oid": "a9b8f94a3f87ca84a92533dabd4117d325f3af10"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MDQ5MjA5", "url": "https://github.com/apache/fineract/pull/1466#pullrequestreview-518049209", "createdAt": "2020-10-27T19:07:24Z", "commit": {"oid": "a9b8f94a3f87ca84a92533dabd4117d325f3af10"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxOTowNzoyNFrOHpMWBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxOTowNzoyNFrOHpMWBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1NTkxMQ==", "bodyText": "This looks like it's not multi thread safe? Or am I missing anything?", "url": "https://github.com/apache/fineract/pull/1466#discussion_r512955911", "createdAt": "2020-10-27T19:07:24Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/hooks/processor/ElasticSearchHookProcessor.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.fineract.infrastructure.hooks.processor;\n+\n+import static org.apache.fineract.infrastructure.hooks.api.HookApiConstants.contentTypeName;\n+import static org.apache.fineract.infrastructure.hooks.api.HookApiConstants.payloadURLName;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import java.io.PrintWriter;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.fineract.infrastructure.hooks.domain.Hook;\n+import org.apache.fineract.infrastructure.hooks.domain.HookConfiguration;\n+import org.apache.fineract.useradministration.domain.AppUser;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import retrofit.Callback;\n+\n+@Service\n+public class ElasticSearchHookProcessor implements HookProcessor {\n+\n+    @Autowired\n+    private ProcessorHelper processorHelper;\n+\n+    private PrintWriter out = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9b8f94a3f87ca84a92533dabd4117d325f3af10"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1709, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}