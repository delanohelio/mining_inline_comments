{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MTE3NjIw", "number": 1207, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMzo0MjoyMVrOET60qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQwMzoxOToxMlrOEUV0MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MzIyMTUzOnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/client/service/ClientReadPlatformServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMzo0MjoyMVrOG57Chg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMzoxMzowNFrOG6ZItQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM4OTMxOA==", "bodyText": "If you look at org.apache.fineract.portfolio.client.domain.ClientStatus, there seems to be more values for this enum than shown here. Was there a reason why only this subset is relevant for this?\nAlso for mapping from string to value,  would it make sense to put this into the ClientStatus class and make it reusable? The same way as for example for GLAccountType.fromString() or CalendarFrequencyType.fromString()? That way we would be maintaining the logic in one place only...", "url": "https://github.com/apache/fineract/pull/1207#discussion_r463389318", "createdAt": "2020-07-31T03:42:21Z", "author": {"login": "ptuomola"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/client/service/ClientReadPlatformServiceImpl.java", "diffHunk": "@@ -258,6 +261,19 @@ private String buildSqlStringFromClientCriteria(String schemaSql, final SearchPa\n             extraCriteria += \" and c.display_name like ? \";\n         }\n \n+        if (status != null) {\n+            final String lowerCaseStatus = status.toLowerCase();\n+            Map<String, Integer> statusNumber = new HashMap<String, Integer>();\n+            statusNumber.put(\"active\", 300);\n+            statusNumber.put(\"withdrawn\", 800);\n+            statusNumber.put(\"closed\", 600);\n+            statusNumber.put(\"rejected\", 700);\n+            statusNumber.put(\"pending\", 100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg4MjQyMQ==", "bodyText": "@ptuomola updated!", "url": "https://github.com/apache/fineract/pull/1207#discussion_r463882421", "createdAt": "2020-07-31T23:13:04Z", "author": {"login": "thesmallstar"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/client/service/ClientReadPlatformServiceImpl.java", "diffHunk": "@@ -258,6 +261,19 @@ private String buildSqlStringFromClientCriteria(String schemaSql, final SearchPa\n             extraCriteria += \" and c.display_name like ? \";\n         }\n \n+        if (status != null) {\n+            final String lowerCaseStatus = status.toLowerCase();\n+            Map<String, Integer> statusNumber = new HashMap<String, Integer>();\n+            statusNumber.put(\"active\", 300);\n+            statusNumber.put(\"withdrawn\", 800);\n+            statusNumber.put(\"closed\", 600);\n+            statusNumber.put(\"rejected\", 700);\n+            statusNumber.put(\"pending\", 100);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM4OTMxOA=="}, "originalCommit": null, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzYzOTgxOnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/ClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQwMzoxMzoyOFrOG6h1dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQwMzoxMzoyOFrOG6h1dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAyNDk0OA==", "bodyText": "Should we not check that we receive at least some clients? As far as I can see, this test will still pass if the search doesn't actually work and returns nothing...\nIdeally we should check that we receive some of the same clients that we set to status pending above - but at the very least we should check that we've received something...", "url": "https://github.com/apache/fineract/pull/1207#discussion_r464024948", "createdAt": "2020-08-02T03:13:28Z", "author": {"login": "ptuomola"}, "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/ClientTest.java", "diffHunk": "@@ -143,4 +143,36 @@ public void testClientAsEntityStatus() {\n \n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    @Test\n+    public void testPendingOnlyClientRequest() {\n+\n+        Random rand = new Random();\n+        // Add a few clients to the server and activate a random amount of them\n+        for (int i = 0; i < 15; i++) {\n+            final Integer clientId = ClientHelper.createClientAsEntity(this.requestSpec, this.responseSpec);\n+            if (rand.nextInt(10) % 2 == 0) {\n+                // Takes Client to pending status\n+                this.clientHelper.closeClient(clientId);\n+                this.clientHelper.reactivateClient(clientId);\n+            }\n+            // Other clients stay in Active status\n+        }\n+        List<HashMap<String, Object>> clientsRecieved = (List<HashMap<String, Object>>) clientHelper.getClientWithStatus(50, \"pending\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzY0MDE3OnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/ClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQwMzoxNDowMVrOG6h1nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQwMzoxNDowMVrOG6h1nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAyNDk4OA==", "bodyText": "Same here as above - shouldn't we check we received at least one active client?", "url": "https://github.com/apache/fineract/pull/1207#discussion_r464024988", "createdAt": "2020-08-02T03:14:01Z", "author": {"login": "ptuomola"}, "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/ClientTest.java", "diffHunk": "@@ -143,4 +143,36 @@ public void testClientAsEntityStatus() {\n \n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    @Test\n+    public void testPendingOnlyClientRequest() {\n+\n+        Random rand = new Random();\n+        // Add a few clients to the server and activate a random amount of them\n+        for (int i = 0; i < 15; i++) {\n+            final Integer clientId = ClientHelper.createClientAsEntity(this.requestSpec, this.responseSpec);\n+            if (rand.nextInt(10) % 2 == 0) {\n+                // Takes Client to pending status\n+                this.clientHelper.closeClient(clientId);\n+                this.clientHelper.reactivateClient(clientId);\n+            }\n+            // Other clients stay in Active status\n+        }\n+        List<HashMap<String, Object>> clientsRecieved = (List<HashMap<String, Object>>) clientHelper.getClientWithStatus(50, \"pending\");\n+\n+        for (int i = 0; i < clientsRecieved.size(); i++) {\n+            HashMap<String, Object> clientStatus = ClientHelper.getClientStatus(requestSpec, responseSpec,\n+                    String.valueOf(clientsRecieved.get(i).get(\"id\")));\n+            ClientStatusChecker.verifyClientPending(clientStatus);\n+        }\n+\n+        clientsRecieved = (List<HashMap<String, Object>>) clientHelper.getClientWithStatus(50, \"active\");\n+\n+        for (int i = 0; i < clientsRecieved.size(); i++) {\n+            HashMap<String, Object> clientStatus = ClientHelper.getClientStatus(requestSpec, responseSpec,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzY0MjUxOnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/client/domain/ClientStatus.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQwMzoxNTo0NVrOG6h2kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxODowMjoxM1rOG7rhbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAyNTIzNQ==", "bodyText": "Hmm... couldn't spot any difference except removal of the formatting (one status per line) - was there something changed here?", "url": "https://github.com/apache/fineract/pull/1207#discussion_r464025235", "createdAt": "2020-08-02T03:15:45Z", "author": {"login": "ptuomola"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/client/domain/ClientStatus.java", "diffHunk": "@@ -18,17 +18,17 @@\n  */\n package org.apache.fineract.portfolio.client.domain;\n \n+import org.springframework.util.StringUtils;\n+\n /**\n  * Enum representation of client status states.\n  */\n public enum ClientStatus {\n \n-    INVALID(0, \"clientStatusType.invalid\"), //\n-    PENDING(100, \"clientStatusType.pending\"), //\n-    ACTIVE(300, \"clientStatusType.active\"), //\n-    TRANSFER_IN_PROGRESS(303, \"clientStatusType.transfer.in.progress\"), //\n-    TRANSFER_ON_HOLD(304, \"clientStatusType.transfer.on.hold\"), //\n-    CLOSED(600, \"clientStatusType.closed\"), REJECTED(700, \"clientStatusType.rejected\"), WITHDRAWN(800, \"clientStatusType.withdraw\");\n+    INVALID(0, \"clientStatusType.invalid\"), PENDING(100, \"clientStatusType.pending\"), ACTIVE(300,\n+            \"clientStatusType.active\"), TRANSFER_IN_PROGRESS(303, \"clientStatusType.transfer.in.progress\"), TRANSFER_ON_HOLD(304,\n+                    \"clientStatusType.transfer.on.hold\"), CLOSED(600, \"clientStatusType.closed\"), REJECTED(700,\n+                            \"clientStatusType.rejected\"), WITHDRAWN(800, \"clientStatusType.withdraw\");\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIzMjIzOQ==", "bodyText": "I removed the useless comments, that made it happen.\nWeird, we might need to change some spotless rules.", "url": "https://github.com/apache/fineract/pull/1207#discussion_r465232239", "createdAt": "2020-08-04T18:02:13Z", "author": {"login": "thesmallstar"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/client/domain/ClientStatus.java", "diffHunk": "@@ -18,17 +18,17 @@\n  */\n package org.apache.fineract.portfolio.client.domain;\n \n+import org.springframework.util.StringUtils;\n+\n /**\n  * Enum representation of client status states.\n  */\n public enum ClientStatus {\n \n-    INVALID(0, \"clientStatusType.invalid\"), //\n-    PENDING(100, \"clientStatusType.pending\"), //\n-    ACTIVE(300, \"clientStatusType.active\"), //\n-    TRANSFER_IN_PROGRESS(303, \"clientStatusType.transfer.in.progress\"), //\n-    TRANSFER_ON_HOLD(304, \"clientStatusType.transfer.on.hold\"), //\n-    CLOSED(600, \"clientStatusType.closed\"), REJECTED(700, \"clientStatusType.rejected\"), WITHDRAWN(800, \"clientStatusType.withdraw\");\n+    INVALID(0, \"clientStatusType.invalid\"), PENDING(100, \"clientStatusType.pending\"), ACTIVE(300,\n+            \"clientStatusType.active\"), TRANSFER_IN_PROGRESS(303, \"clientStatusType.transfer.in.progress\"), TRANSFER_ON_HOLD(304,\n+                    \"clientStatusType.transfer.on.hold\"), CLOSED(600, \"clientStatusType.closed\"), REJECTED(700,\n+                            \"clientStatusType.rejected\"), WITHDRAWN(800, \"clientStatusType.withdraw\");\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAyNTIzNQ=="}, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzY0MzE4OnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/client/domain/ClientStatus.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQwMzoxNzoxOVrOG6h25A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQwMzoxNzoxOVrOG6h25A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAyNTMxNg==", "bodyText": "Hmmm... how does this actually work now? Here we are comparing to the strings as defined in the enum (e.g. clientStatusType.active) but the test is passing in just \"active\". So it should not match / return anything. What did I miss here?", "url": "https://github.com/apache/fineract/pull/1207#discussion_r464025316", "createdAt": "2020-08-02T03:17:19Z", "author": {"login": "ptuomola"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/client/domain/ClientStatus.java", "diffHunk": "@@ -63,6 +63,33 @@ public static ClientStatus fromInt(final Integer statusValue) {\n         return enumeration;\n     }\n \n+    public static ClientStatus fromString(final String clientString) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzY0NDAwOnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/client/service/ClientReadPlatformServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQwMzoxOToxMlrOG6h3RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQwMzoxOToxMlrOG6h3RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAyNTQxMw==", "bodyText": "So this would mean you can't search for clients with status = INVALID. Is this correct behaviour - shouldn't we still allow searching even if the value you pass in is INVALID? I.e. to find any INVALID entries (if any)...\nAt the same time it would be good to validate the provided input string to ensure it has actually mapped to a valid value, and throw PlatformValidationException if it doesn't.\nSo you should be able to search for any invalid entries by sending in clientStatusType.invalid - but if you send in clientStatusType.blah then you should get a validation exception.", "url": "https://github.com/apache/fineract/pull/1207#discussion_r464025413", "createdAt": "2020-08-02T03:19:12Z", "author": {"login": "ptuomola"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/client/service/ClientReadPlatformServiceImpl.java", "diffHunk": "@@ -258,6 +259,13 @@ private String buildSqlStringFromClientCriteria(String schemaSql, final SearchPa\n             extraCriteria += \" and c.display_name like ? \";\n         }\n \n+        if (status != null) {\n+            ClientStatus clientStatus = ClientStatus.fromString(status);\n+            if (clientStatus.getValue() != 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1856, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}