{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMTkyOTQy", "number": 1024, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMTowMTozOFrOEE5j9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMDozMTozN1rOEHUPpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTcyODUzOnYy", "diffSide": "LEFT", "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanArrearsAgingServiceImpl.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMTowMTozOFrOGizzEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxMDoxMzo0MlrOGml29Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE1MzQyNQ==", "bodyText": "I'm trying to understand this to the best I can but I just have the feeling that this piece of logic is missing. Can you maybe make it a little clearer for me?\nThanks.", "url": "https://github.com/apache/fineract/pull/1024#discussion_r439153425", "createdAt": "2020-06-12T01:01:38Z", "author": {"login": "xurror"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanArrearsAgingServiceImpl.java", "diffHunk": "@@ -423,18 +423,14 @@ public OriginalScheduleExtractor(final String loanIdsAsString) {\n \n             while (rs.next()) {\n                 Long loanId = rs.getLong(\"loanId\");\n-                List<LoanSchedulePeriodData> periodDatas = new ArrayList<>();\n-                LoanSchedulePeriodData loanSchedulePeriodData = fetchLoanSchedulePeriodData(rs);\n-                periodDatas.add(loanSchedulePeriodData);\n-                while (rs.next()) {\n-                    Long tempLoanId = rs.getLong(\"loanId\");\n-                    if (loanId.equals(tempLoanId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE5NzM4Nw==", "bodyText": "As far as I can see, the logic is trying to build a map of (loanId, periodData). There may be multiple rows in the ResultSet and these must therefore be merged to be part of the same entry in the map.\nThe previous code does it by:\n\nRead one LoanId from resultset and create a map entry\nIn a loop, keep fetching next row from result set.\n\nIf the next row has the same loanId, then add it to the same map entry and fetch next\nIf the next row has a different loanId, go back one row in result set and start from step 1\n\n\n\nThe problem is the \"go back one row\" which is not supported by some JDBC drivers.\nBut an equivalent way of building the same map (at least in my view would be):\n\nIterate through the result set. For each row's loanId:\n\n\nIf we already have a map entry for that loanId, add the dates to the existing entry\nIf we don't yet have a map entry for that loanId, create a new one and add the dates to that\n\nNo rs.previous() required, and either way you should end up with the same Map - as far as I can see..\nBut I don't have a way to test this code, so a bit concerned I may have missed something...", "url": "https://github.com/apache/fineract/pull/1024#discussion_r439197387", "createdAt": "2020-06-12T04:14:08Z", "author": {"login": "ptuomola"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanArrearsAgingServiceImpl.java", "diffHunk": "@@ -423,18 +423,14 @@ public OriginalScheduleExtractor(final String loanIdsAsString) {\n \n             while (rs.next()) {\n                 Long loanId = rs.getLong(\"loanId\");\n-                List<LoanSchedulePeriodData> periodDatas = new ArrayList<>();\n-                LoanSchedulePeriodData loanSchedulePeriodData = fetchLoanSchedulePeriodData(rs);\n-                periodDatas.add(loanSchedulePeriodData);\n-                while (rs.next()) {\n-                    Long tempLoanId = rs.getLong(\"loanId\");\n-                    if (loanId.equals(tempLoanId)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE1MzQyNQ=="}, "originalCommit": null, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIxNjMwMQ==", "bodyText": "Totally makes sense now. Thanks for helping me understand this better.\nI actually read a comment that suggested doing this or using caching or hashmap or any other collection to hold all the resultset and instead iterate through it as you did but it just wasn't clear to me.\nUnfortunately we don't have a way testing this but I agree with your approach. Since it passes all IT tests, we can just blindly merge this 2 or 3 days if there are no objections and hope for the best \ud83d\ude01.", "url": "https://github.com/apache/fineract/pull/1024#discussion_r439216301", "createdAt": "2020-06-12T05:37:29Z", "author": {"login": "xurror"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanArrearsAgingServiceImpl.java", "diffHunk": "@@ -423,18 +423,14 @@ public OriginalScheduleExtractor(final String loanIdsAsString) {\n \n             while (rs.next()) {\n                 Long loanId = rs.getLong(\"loanId\");\n-                List<LoanSchedulePeriodData> periodDatas = new ArrayList<>();\n-                LoanSchedulePeriodData loanSchedulePeriodData = fetchLoanSchedulePeriodData(rs);\n-                periodDatas.add(loanSchedulePeriodData);\n-                while (rs.next()) {\n-                    Long tempLoanId = rs.getLong(\"loanId\");\n-                    if (loanId.equals(tempLoanId)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE1MzQyNQ=="}, "originalCommit": null, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzExOTM0OQ==", "bodyText": "@ptuomola sorry for delay in reviewing this (I wanted to do it with a clear mind instead of clicking through it half asleep a night after day job work...) and after staring at this a little bit, I get it now - this makes good sense to me as well, and I have no objection to merging this even without having any way to functionally test this myself either (no idea if existing ITs, recently re-enable, would catch this, but doesn't matter, it \"makes sense\").\nOne very small feedback I would have is that, now that I understand this logic, it seems to me that moving that scheduleDate.put(loanId, periodDatas); now in line 449 (originally 434) up into the if(periodDatas == null) right after the periodDatas = new ArrayList<>(); would make it a tiny bit more clear and explicit what we're doing here? It's too minor to hold back merging this important fix, so I'll just go ahead and merge it ASAP, and let you raise a very small minor follow-up PR, if you like (or not, fine). I originally wrote this before seeing the Spotless style failure, if you're going over this again, might as well do that too here - if you agree that makes sense?", "url": "https://github.com/apache/fineract/pull/1024#discussion_r443119349", "createdAt": "2020-06-20T10:13:42Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanArrearsAgingServiceImpl.java", "diffHunk": "@@ -423,18 +423,14 @@ public OriginalScheduleExtractor(final String loanIdsAsString) {\n \n             while (rs.next()) {\n                 Long loanId = rs.getLong(\"loanId\");\n-                List<LoanSchedulePeriodData> periodDatas = new ArrayList<>();\n-                LoanSchedulePeriodData loanSchedulePeriodData = fetchLoanSchedulePeriodData(rs);\n-                periodDatas.add(loanSchedulePeriodData);\n-                while (rs.next()) {\n-                    Long tempLoanId = rs.getLong(\"loanId\");\n-                    if (loanId.equals(tempLoanId)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE1MzQyNQ=="}, "originalCommit": null, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTA3MTc0OnYy", "diffSide": "RIGHT", "path": ".travis.yml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMDozMTozN1rOGmoNog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMDozMTozN1rOGmoNog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1NzkyMg==", "bodyText": "@ptuomola just noticed while merging this that you haven't actually changed the sleep 30s so this comment is perhaps a left over? I'll merge this PR anyway, you can always clean it up later, if you like.", "url": "https://github.com/apache/fineract/pull/1024#discussion_r443157922", "createdAt": "2020-06-20T20:31:37Z", "author": {"login": "vorburger"}, "path": ".travis.yml", "diffHunk": "@@ -73,6 +73,7 @@ script:\n # using \"&&\" instead of several \"-\" means that integrationTest does not run if test fails,\n # and Docker test does not run if integration test fails, which makes PR failure easier to understand.\n # @see https://docs.travis-ci.com/user/job-lifecycle/#customizing-the-build-phase\n+# NOTE: Sleep after docker-compose increased to 60 seconds as often Travis would fail to get Docker up in 30 seconds", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bba9323e07c0bc863cc7cee1bc315f722705381"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1950, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}