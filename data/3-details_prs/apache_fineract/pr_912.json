{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMzc1ODQ1", "number": 912, "title": " add new Logging Guidelines section to README (re. FINERACT-942)", "bodyText": "@thesmallstar would this LGTY as a start? You can subsequently extend it, if there's more to say...\n@ptuomola @xurror @awasum FYI and feel free to amend in follow-up PRs, if you have additional points.\nrelated to FINERACT-942 and motivated by #906", "createdAt": "2020-05-19T21:29:51Z", "url": "https://github.com/apache/fineract/pull/912", "merged": true, "mergeCommit": {"oid": "4194da2b90479f63e6a8ead2b2dd6d47092c1657"}, "closed": true, "closedAt": "2020-05-23T18:48:45Z", "author": {"login": "vorburger"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjHIzdgFqTQxNTIyODMxMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjf7D-AFqTQxNjI4NDA4NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MjI4MzEy", "url": "https://github.com/apache/fineract/pull/912#pullrequestreview-415228312", "createdAt": "2020-05-20T11:12:06Z", "commit": {"oid": "25dff61af692d35914131148c1def345985214aa"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMToxMjowNlrOGYGo8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMToxMjowNlrOGYGo8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzkyNzc5NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * In tests, you'll typically never catch exceptions, but just propagate them, with `@Test void testXYZ() throws SomeException, AnotherException`...`, so that the test fails if the exception happens.  Unless you actually really want to test for the occurence of a problem - in that case, use [JUnit's Assert.assertThrows()](https://github.com/junit-team/junit4/wiki/Exception-testing) (but not `@Test(expected = SomeException.class)`).\n          \n          \n            \n            * In tests, you'll typically never catch exceptions, but just propagate them, with `@Test void testXYZ() throws SomeException, AnotherException`..., so that the test fails if the exception happens.  Unless you actually really want to test for the occurence of a problem - in that case, use [JUnit's Assert.assertThrows()](https://github.com/junit-team/junit4/wiki/Exception-testing) (but not `@Test(expected = SomeException.class)`).\n          \n      \n    \n    \n  \n\nI noticed an extra \"`\" in the guide. It didn't look good in the preview", "url": "https://github.com/apache/fineract/pull/912#discussion_r427927795", "createdAt": "2020-05-20T11:12:06Z", "author": {"login": "xurror"}, "path": "README.md", "diffHunk": "@@ -268,6 +268,13 @@ Governance and Policies\n documents the process through which you can become a committer in this project.\n \n \n+Logging Guidelines\n+------------------\n+* Never, ever, use `System.out` and `System.err` or `printStackTrace()` anywhere, but `LOG.info()` or `LOG.error()` instead.\n+* When catching exceptions, either rethrow them, or log them.  Either way, include the root cause by using `catch (SomeException e)` and then either `throw AnotherException(\"..details..\", e)` or `LOG.error(\"...context...\", e)`.\n+* In tests, you'll typically never catch exceptions, but just propagate them, with `@Test void testXYZ() throws SomeException, AnotherException`...`, so that the test fails if the exception happens.  Unless you actually really want to test for the occurence of a problem - in that case, use [JUnit's Assert.assertThrows()](https://github.com/junit-team/junit4/wiki/Exception-testing) (but not `@Test(expected = SomeException.class)`).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25dff61af692d35914131148c1def345985214aa"}, "originalPosition": 8}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cee32ed9c4210cdeaace5657c1f9362100aa030b", "author": {"user": {"login": "vorburger", "name": "Michael Vorburger \u26d1\ufe0f"}}, "url": "https://github.com/apache/fineract/commit/cee32ed9c4210cdeaace5657c1f9362100aa030b", "committedDate": "2020-05-21T12:28:32Z", "message": "Update README.md\n\nCo-authored-by: Yemdjih Kaze Nasser <kaze.nasser@outlook.com>"}, "afterCommit": {"oid": "ed0181bf710b167a1e048f15a5125b88a13caf82", "author": {"user": {"login": "vorburger", "name": "Michael Vorburger \u26d1\ufe0f"}}, "url": "https://github.com/apache/fineract/commit/ed0181bf710b167a1e048f15a5125b88a13caf82", "committedDate": "2020-05-21T13:00:31Z", "message": " add new Logging Guidelines section to README (re. FINERACT-942)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40409912643788d5b11f7a4ca9df9a4d45d09e64", "author": {"user": {"login": "vorburger", "name": "Michael Vorburger \u26d1\ufe0f"}}, "url": "https://github.com/apache/fineract/commit/40409912643788d5b11f7a4ca9df9a4d45d09e64", "committedDate": "2020-05-21T13:05:15Z", "message": " add new Logging Guidelines section to README (re. FINERACT-942)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ed0181bf710b167a1e048f15a5125b88a13caf82", "author": {"user": {"login": "vorburger", "name": "Michael Vorburger \u26d1\ufe0f"}}, "url": "https://github.com/apache/fineract/commit/ed0181bf710b167a1e048f15a5125b88a13caf82", "committedDate": "2020-05-21T13:00:31Z", "message": " add new Logging Guidelines section to README (re. FINERACT-942)"}, "afterCommit": {"oid": "40409912643788d5b11f7a4ca9df9a4d45d09e64", "author": {"user": {"login": "vorburger", "name": "Michael Vorburger \u26d1\ufe0f"}}, "url": "https://github.com/apache/fineract/commit/40409912643788d5b11f7a4ca9df9a4d45d09e64", "committedDate": "2020-05-21T13:05:15Z", "message": " add new Logging Guidelines section to README (re. FINERACT-942)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2Mjg0MDg0", "url": "https://github.com/apache/fineract/pull/912#pullrequestreview-416284084", "createdAt": "2020-05-21T16:05:00Z", "commit": {"oid": "40409912643788d5b11f7a4ca9df9a4d45d09e64"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1925, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}