{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMzExNDY0", "number": 4503, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTowMzowOFrOEEmh8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMjo0ODoxMFrOEl3bkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjYxMDQxOnYy", "diffSide": "RIGHT", "path": "core-common/src/main/java11/org/glassfish/jersey/internal/jsr166/SubmissionPublisher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTowMzowOFrOGiUxqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjo1Mzo1NlrOGimQOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY0NTE2MQ==", "bodyText": "Change to this file seems unnecessary.", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r438645161", "createdAt": "2020-06-11T09:03:08Z", "author": {"login": "tomas-langer"}, "path": "core-common/src/main/java11/org/glassfish/jersey/internal/jsr166/SubmissionPublisher.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fec4143271eafa043394de61bbc90fa6751d75c"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkzMTUxNA==", "bodyText": "fixed", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r438931514", "createdAt": "2020-06-11T16:53:56Z", "author": {"login": "danielkec"}, "path": "core-common/src/main/java11/org/glassfish/jersey/internal/jsr166/SubmissionPublisher.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY0NTE2MQ=="}, "originalCommit": {"oid": "4fec4143271eafa043394de61bbc90fa6751d75c"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODA3OTQ5OnYy", "diffSide": "RIGHT", "path": "core-server/src/main/java/org/glassfish/jersey/server/ChunkedOutput.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjo0MjowM1rOGjKuHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMDozMjo1MlrOG7arlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyODk4OA==", "bodyText": "@jansupol Is this proper way to propagate close from client to JerseyEventSink?", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r439528988", "createdAt": "2020-06-12T16:42:03Z", "author": {"login": "danielkec"}, "path": "core-server/src/main/java/org/glassfish/jersey/server/ChunkedOutput.java", "diffHunk": "@@ -290,6 +290,7 @@ public Void call() throws IOException {\n         } finally {\n             if (closed) {\n                 try {\n+                    closeByClient();\n                     responseContext.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10ee8d8a787f2890264329fa69907994e04ed323"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI4NjM1NQ==", "bodyText": "how about to name it \u00f2nClose()?", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r444286355", "createdAt": "2020-06-23T14:51:41Z", "author": {"login": "jansupol"}, "path": "core-server/src/main/java/org/glassfish/jersey/server/ChunkedOutput.java", "diffHunk": "@@ -290,6 +290,7 @@ public Void call() throws IOException {\n         } finally {\n             if (closed) {\n                 try {\n+                    closeByClient();\n                     responseContext.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyODk4OA=="}, "originalCommit": {"oid": "10ee8d8a787f2890264329fa69907994e04ed323"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk1NjMwOA==", "bodyText": "fixed", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r464956308", "createdAt": "2020-08-04T10:32:52Z", "author": {"login": "danielkec"}, "path": "core-server/src/main/java/org/glassfish/jersey/server/ChunkedOutput.java", "diffHunk": "@@ -290,6 +290,7 @@ public Void call() throws IOException {\n         } finally {\n             if (closed) {\n                 try {\n+                    closeByClient();\n                     responseContext.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyODk4OA=="}, "originalCommit": {"oid": "10ee8d8a787f2890264329fa69907994e04ed323"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODI0MDUwOnYy", "diffSide": "RIGHT", "path": "core-server/src/main/java/org/glassfish/jersey/server/model/internal/SseTypeResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDozODoxOFrOGnscnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMDozODoxN1rOG7a1og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI3NTg2OQ==", "bodyText": "clazz = AccessController.doPrivileged(ReflectionHelper.classForNamePA(\"java.util.concurrent.Flow.Subscriber\", null)", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r444275869", "createdAt": "2020-06-23T14:38:18Z", "author": {"login": "jansupol"}, "path": "core-server/src/main/java/org/glassfish/jersey/server/model/internal/SseTypeResolver.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.glassfish.jersey.server.model.internal;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class SseTypeResolver {\n+\n+    private static final Set<Class<?>> SUPPORTED_SSE_SINK_TYPES;\n+\n+    static {\n+        Set<Class<?>> set = new HashSet<>(8);\n+\n+        set.add(org.glassfish.jersey.internal.jsr166.Flow.Subscriber.class);\n+        set.add(javax.ws.rs.sse.SseEventSink.class);\n+        try {\n+            Class<?> clazz = Class.forName(\"java.util.concurrent.Flow.Subscriber\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58d0a4fabe7a42d5ff528b266a28d94660fe9a39"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk1ODg4Mg==", "bodyText": "thx fixed", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r464958882", "createdAt": "2020-08-04T10:38:17Z", "author": {"login": "danielkec"}, "path": "core-server/src/main/java/org/glassfish/jersey/server/model/internal/SseTypeResolver.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.glassfish.jersey.server.model.internal;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class SseTypeResolver {\n+\n+    private static final Set<Class<?>> SUPPORTED_SSE_SINK_TYPES;\n+\n+    static {\n+        Set<Class<?>> set = new HashSet<>(8);\n+\n+        set.add(org.glassfish.jersey.internal.jsr166.Flow.Subscriber.class);\n+        set.add(javax.ws.rs.sse.SseEventSink.class);\n+        try {\n+            Class<?> clazz = Class.forName(\"java.util.concurrent.Flow.Subscriber\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI3NTg2OQ=="}, "originalCommit": {"oid": "58d0a4fabe7a42d5ff528b266a28d94660fe9a39"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODI1NTI1OnYy", "diffSide": "RIGHT", "path": "core-server/src/main/java/org/glassfish/jersey/server/model/internal/SseTypeResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDo0MToxOFrOGnslwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMDozMzowM1rOG7ar4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI3ODIxMA==", "bodyText": "Please make it final with private constructor", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r444278210", "createdAt": "2020-06-23T14:41:18Z", "author": {"login": "jansupol"}, "path": "core-server/src/main/java/org/glassfish/jersey/server/model/internal/SseTypeResolver.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.glassfish.jersey.server.model.internal;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class SseTypeResolver {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58d0a4fabe7a42d5ff528b266a28d94660fe9a39"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk1NjM4NQ==", "bodyText": "fixed", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r464956385", "createdAt": "2020-08-04T10:33:03Z", "author": {"login": "danielkec"}, "path": "core-server/src/main/java/org/glassfish/jersey/server/model/internal/SseTypeResolver.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.glassfish.jersey.server.model.internal;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class SseTypeResolver {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI3ODIxMA=="}, "originalCommit": {"oid": "58d0a4fabe7a42d5ff528b266a28d94660fe9a39"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODM4MzI0OnYy", "diffSide": "RIGHT", "path": "media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTowOTozOFrOGnt41w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMDozODowMlrOG7a1Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI5OTQ3OQ==", "bodyText": "how about calling this.close()? Same as onComplete? Would you still need the onClose()?", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r444299479", "createdAt": "2020-06-23T15:09:38Z", "author": {"login": "jansupol"}, "path": "media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java", "diffHunk": "@@ -39,55 +45,109 @@\n  * <p>\n  * The reference should be obtained via injection into the resource method.\n  *\n- * @author Adam Lindenthal]\n+ * @author Adam Lindenthal\n  */\n class JerseyEventSink extends ChunkedOutput<OutboundSseEvent>\n-        implements SseEventSink, Flushable, Flow.Subscriber<OutboundSseEvent> {\n+        implements SseEventSink, Flushable, JerseyFlowSubscriber<Object> {\n \n     private static final Logger LOGGER = Logger.getLogger(JerseyEventSink.class.getName());\n-    private static final byte[] SSE_EVENT_DELIMITER = \"\\n\".getBytes(Charset.forName(\"UTF-8\"));\n+    private static final byte[] SSE_EVENT_DELIMITER = \"\\n\".getBytes(StandardCharsets.UTF_8);\n     private Flow.Subscription subscription = null;\n+    private final AtomicBoolean subscribed = new AtomicBoolean(false);\n+    private volatile MediaType implicitMediaType = null;\n+\n+    private static final Map<Class<?>, MediaType> IMPLICIT_MEDIA_TYPE;\n+\n+    static {\n+        Map<Class<?>, MediaType> map = new HashMap<>(8);\n+\n+        // Already wrapped\n+        map.put(OutboundSseEvent.class, MediaType.SERVER_SENT_EVENTS_TYPE);\n+\n+        // No wrapping for raw types\n+        map.put(String.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Character.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Boolean.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Byte.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Short.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Integer.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Long.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Double.class, MediaType.TEXT_PLAIN_TYPE);\n+\n+        IMPLICIT_MEDIA_TYPE = Collections.unmodifiableMap(map);\n+    }\n \n     JerseyEventSink(Provider<AsyncContext> asyncContextProvider) {\n         super(SSE_EVENT_DELIMITER, asyncContextProvider);\n     }\n \n     @Override\n     public void onSubscribe(final Flow.Subscription subscription) {\n-        checkClosed();\n         if (subscription == null) {\n             throw new NullPointerException(LocalizationMessages.PARAM_NULL(\"subscription\"));\n         }\n+        if (subscribed.getAndSet(true)) {\n+            subscription.cancel();\n+            return;\n+        }\n+\n         this.subscription = subscription;\n-        subscription.request(Long.MAX_VALUE);\n+        if (isClosed()) {\n+            subscription.cancel();\n+        } else {\n+            subscription.request(Long.MAX_VALUE);\n+        }\n     }\n \n \n     @Override\n-    public void onNext(final OutboundSseEvent item) {\n-        checkClosed();\n+    public void onNext(final Object item) {\n         if (item == null) {\n             throw new NullPointerException(LocalizationMessages.PARAM_NULL(\"outboundSseEvent\"));\n         }\n         try {\n-            write(item);\n-        } catch (final IOException e) {\n-            onError(e);\n+            checkClosed();\n+            MediaType implicitType = resolveMediaType(item);\n+            if (MediaType.SERVER_SENT_EVENTS_TYPE == implicitType) {\n+                // already wrapped\n+                write((OutboundSseEvent) item);\n+            } else {\n+                // implicit wrapping\n+                // TODO: Jersey annotation for explicit media type\n+                write(new OutboundEvent.Builder()\n+                        .mediaType(implicitType)\n+                        .data(item)\n+                        .build());\n+            }\n+        } catch (final Throwable e) {\n+            LOGGER.log(Level.INFO, LocalizationMessages.EVENT_SOURCE_DEFAULT_ONERROR(), e);\n         }\n     }\n \n     @Override\n     public void onError(final Throwable throwable) {\n-        checkClosed();\n         if (throwable == null) {\n             throw new NullPointerException(LocalizationMessages.PARAM_NULL(\"throwable\"));\n         }\n-        subscription.cancel();\n+        try {\n+            super.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58d0a4fabe7a42d5ff528b266a28d94660fe9a39"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk1ODc2Ng==", "bodyText": "Intention was differentiate client side close(disconnect) where cancel is expected, from upstream close where cancel is not desirable as upstream is cause of closing. Change should avoid similar issues as oracle/helidon/issues/806 in the future.", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r464958766", "createdAt": "2020-08-04T10:38:02Z", "author": {"login": "danielkec"}, "path": "media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java", "diffHunk": "@@ -39,55 +45,109 @@\n  * <p>\n  * The reference should be obtained via injection into the resource method.\n  *\n- * @author Adam Lindenthal]\n+ * @author Adam Lindenthal\n  */\n class JerseyEventSink extends ChunkedOutput<OutboundSseEvent>\n-        implements SseEventSink, Flushable, Flow.Subscriber<OutboundSseEvent> {\n+        implements SseEventSink, Flushable, JerseyFlowSubscriber<Object> {\n \n     private static final Logger LOGGER = Logger.getLogger(JerseyEventSink.class.getName());\n-    private static final byte[] SSE_EVENT_DELIMITER = \"\\n\".getBytes(Charset.forName(\"UTF-8\"));\n+    private static final byte[] SSE_EVENT_DELIMITER = \"\\n\".getBytes(StandardCharsets.UTF_8);\n     private Flow.Subscription subscription = null;\n+    private final AtomicBoolean subscribed = new AtomicBoolean(false);\n+    private volatile MediaType implicitMediaType = null;\n+\n+    private static final Map<Class<?>, MediaType> IMPLICIT_MEDIA_TYPE;\n+\n+    static {\n+        Map<Class<?>, MediaType> map = new HashMap<>(8);\n+\n+        // Already wrapped\n+        map.put(OutboundSseEvent.class, MediaType.SERVER_SENT_EVENTS_TYPE);\n+\n+        // No wrapping for raw types\n+        map.put(String.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Character.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Boolean.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Byte.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Short.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Integer.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Long.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Double.class, MediaType.TEXT_PLAIN_TYPE);\n+\n+        IMPLICIT_MEDIA_TYPE = Collections.unmodifiableMap(map);\n+    }\n \n     JerseyEventSink(Provider<AsyncContext> asyncContextProvider) {\n         super(SSE_EVENT_DELIMITER, asyncContextProvider);\n     }\n \n     @Override\n     public void onSubscribe(final Flow.Subscription subscription) {\n-        checkClosed();\n         if (subscription == null) {\n             throw new NullPointerException(LocalizationMessages.PARAM_NULL(\"subscription\"));\n         }\n+        if (subscribed.getAndSet(true)) {\n+            subscription.cancel();\n+            return;\n+        }\n+\n         this.subscription = subscription;\n-        subscription.request(Long.MAX_VALUE);\n+        if (isClosed()) {\n+            subscription.cancel();\n+        } else {\n+            subscription.request(Long.MAX_VALUE);\n+        }\n     }\n \n \n     @Override\n-    public void onNext(final OutboundSseEvent item) {\n-        checkClosed();\n+    public void onNext(final Object item) {\n         if (item == null) {\n             throw new NullPointerException(LocalizationMessages.PARAM_NULL(\"outboundSseEvent\"));\n         }\n         try {\n-            write(item);\n-        } catch (final IOException e) {\n-            onError(e);\n+            checkClosed();\n+            MediaType implicitType = resolveMediaType(item);\n+            if (MediaType.SERVER_SENT_EVENTS_TYPE == implicitType) {\n+                // already wrapped\n+                write((OutboundSseEvent) item);\n+            } else {\n+                // implicit wrapping\n+                // TODO: Jersey annotation for explicit media type\n+                write(new OutboundEvent.Builder()\n+                        .mediaType(implicitType)\n+                        .data(item)\n+                        .build());\n+            }\n+        } catch (final Throwable e) {\n+            LOGGER.log(Level.INFO, LocalizationMessages.EVENT_SOURCE_DEFAULT_ONERROR(), e);\n         }\n     }\n \n     @Override\n     public void onError(final Throwable throwable) {\n-        checkClosed();\n         if (throwable == null) {\n             throw new NullPointerException(LocalizationMessages.PARAM_NULL(\"throwable\"));\n         }\n-        subscription.cancel();\n+        try {\n+            super.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI5OTQ3OQ=="}, "originalCommit": {"oid": "58d0a4fabe7a42d5ff528b266a28d94660fe9a39"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MjQyMDA3OnYy", "diffSide": "RIGHT", "path": "core-server/src/main/java/org/glassfish/jersey/server/ChunkedOutput.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzoyODoyOVrOHSw29A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODozNDo1NVrOHVdj8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQzNjkxNg==", "bodyText": "Please update copyright to ChunkedOutput", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r489436916", "createdAt": "2020-09-16T13:28:29Z", "author": {"login": "jansupol"}, "path": "core-server/src/main/java/org/glassfish/jersey/server/ChunkedOutput.java", "diffHunk": "@@ -287,6 +287,7 @@ public Void call() throws IOException {\n             closed = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aed6eb4741ce964c139e008ee706384db0ec7a4b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2NjQ4MA==", "bodyText": "updated", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r492266480", "createdAt": "2020-09-21T18:34:55Z", "author": {"login": "danielkec"}, "path": "core-server/src/main/java/org/glassfish/jersey/server/ChunkedOutput.java", "diffHunk": "@@ -287,6 +287,7 @@ public Void call() throws IOException {\n             closed = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQzNjkxNg=="}, "originalCommit": {"oid": "aed6eb4741ce964c139e008ee706384db0ec7a4b"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MjQyNDE3OnYy", "diffSide": "RIGHT", "path": "core-server/src/main/java/org/glassfish/jersey/server/model/internal/SseTypeResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzoyOToxN1rOHSw5WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODozMzozM1rOHVdhFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQzNzUyOA==", "bodyText": "Please add copyright", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r489437528", "createdAt": "2020-09-16T13:29:17Z", "author": {"login": "jansupol"}, "path": "core-server/src/main/java/org/glassfish/jersey/server/model/internal/SseTypeResolver.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.glassfish.jersey.server.model.internal;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aed6eb4741ce964c139e008ee706384db0ec7a4b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2NTc0OA==", "bodyText": "added", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r492265748", "createdAt": "2020-09-21T18:33:33Z", "author": {"login": "danielkec"}, "path": "core-server/src/main/java/org/glassfish/jersey/server/model/internal/SseTypeResolver.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.glassfish.jersey.server.model.internal;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQzNzUyOA=="}, "originalCommit": {"oid": "aed6eb4741ce964c139e008ee706384db0ec7a4b"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MjU4NjE2OnYy", "diffSide": "RIGHT", "path": "media/sse/src/test/java/org/glassfish/jersey/media/sse/JerseyFlowAdapters.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDowMzoxOVrOHSyc6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODozMzo0NlrOHVdhkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ2MzAxNw==", "bodyText": "This class is duplicated. One in SSE module, one in the test module. Does it make sense to move the test from SSE module to the test module to contain just a single copy of the class?", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r489463017", "createdAt": "2020-09-16T14:03:19Z", "author": {"login": "jansupol"}, "path": "media/sse/src/test/java/org/glassfish/jersey/media/sse/JerseyFlowAdapters.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aed6eb4741ce964c139e008ee706384db0ec7a4b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2NTg3Mw==", "bodyText": "moved", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r492265873", "createdAt": "2020-09-21T18:33:46Z", "author": {"login": "danielkec"}, "path": "media/sse/src/test/java/org/glassfish/jersey/media/sse/JerseyFlowAdapters.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ2MzAxNw=="}, "originalCommit": {"oid": "aed6eb4741ce964c139e008ee706384db0ec7a4b"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MjU5MDYzOnYy", "diffSide": "RIGHT", "path": "tests/integration/reactive-streams/sse/tck-suite.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDowNDoyM1rOHSyfvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODozMzo1NFrOHVdhxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ2Mzc0Mw==", "bodyText": "2020", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r489463743", "createdAt": "2020-09-16T14:04:23Z", "author": {"login": "jansupol"}, "path": "tests/integration/reactive-streams/sse/tck-suite.xml", "diffHunk": "@@ -0,0 +1,28 @@\n+<!DOCTYPE suite SYSTEM \"http://testng.org/testng-1.0.dtd\" >\n+<!--\n+\n+    Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aed6eb4741ce964c139e008ee706384db0ec7a4b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2NTkyNA==", "bodyText": "fixed", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r492265924", "createdAt": "2020-09-21T18:33:54Z", "author": {"login": "danielkec"}, "path": "tests/integration/reactive-streams/sse/tck-suite.xml", "diffHunk": "@@ -0,0 +1,28 @@\n+<!DOCTYPE suite SYSTEM \"http://testng.org/testng-1.0.dtd\" >\n+<!--\n+\n+    Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ2Mzc0Mw=="}, "originalCommit": {"oid": "aed6eb4741ce964c139e008ee706384db0ec7a4b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MjYyNjQ0OnYy", "diffSide": "RIGHT", "path": "media/sse/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDoxMjowOVrOHSy2Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODozNDoxMFrOHVdiVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ2OTQ4Mg==", "bodyText": "Please update copyright year", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r489469482", "createdAt": "2020-09-16T14:12:09Z", "author": {"login": "jansupol"}, "path": "media/sse/pom.xml", "diffHunk": "@@ -56,6 +56,34 @@\n             <type>pom</type>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aed6eb4741ce964c139e008ee706384db0ec7a4b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2NjA3MA==", "bodyText": "updated", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r492266070", "createdAt": "2020-09-21T18:34:10Z", "author": {"login": "danielkec"}, "path": "media/sse/pom.xml", "diffHunk": "@@ -56,6 +56,34 @@\n             <type>pom</type>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ2OTQ4Mg=="}, "originalCommit": {"oid": "aed6eb4741ce964c139e008ee706384db0ec7a4b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MjcwNTgwOnYy", "diffSide": "RIGHT", "path": "media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDoyODo0MFrOHSznPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODozNDo0M1rOHVdjjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ4MjA0Ng==", "bodyText": "Would this work correctly for Float.class, BigDecimal.class? Perhaps check if Number.class.isAssignableFrom(item.getClass()) + Character & String & Boolean?", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r489482046", "createdAt": "2020-09-16T14:28:40Z", "author": {"login": "jansupol"}, "path": "media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java", "diffHunk": "@@ -118,15 +180,30 @@ public void flush() throws IOException {\n         super.flushQueue();\n     }\n \n-    public void onComplete() {\n-        checkClosed();\n-        subscription.cancel();\n-        close();\n+    @Override\n+    protected void onClose(Exception e) {\n+        cancelUpstream();\n+    }\n+\n+    private void cancelUpstream() {\n+        if (subscription != null) {\n+            subscription.cancel();\n+        }\n     }\n \n     private void checkClosed() {\n         if (isClosed()) {\n+            cancelUpstream();\n             throw new IllegalStateException(LocalizationMessages.EVENT_SOURCE_ALREADY_CLOSED());\n         }\n     }\n+\n+    private MediaType resolveMediaType(Object item) {\n+        // all stream is presumed to be of items with same type\n+        if (implicitMediaType == null) {\n+            // unknown unwrapped objects are treated as json media type\n+            implicitMediaType = IMPLICIT_MEDIA_TYPE.getOrDefault(item.getClass(), MediaType.APPLICATION_JSON_TYPE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aed6eb4741ce964c139e008ee706384db0ec7a4b"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2NjM4Mw==", "bodyText": "\ud83e\udd26 sorry, fixed", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r492266383", "createdAt": "2020-09-21T18:34:43Z", "author": {"login": "danielkec"}, "path": "media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java", "diffHunk": "@@ -118,15 +180,30 @@ public void flush() throws IOException {\n         super.flushQueue();\n     }\n \n-    public void onComplete() {\n-        checkClosed();\n-        subscription.cancel();\n-        close();\n+    @Override\n+    protected void onClose(Exception e) {\n+        cancelUpstream();\n+    }\n+\n+    private void cancelUpstream() {\n+        if (subscription != null) {\n+            subscription.cancel();\n+        }\n     }\n \n     private void checkClosed() {\n         if (isClosed()) {\n+            cancelUpstream();\n             throw new IllegalStateException(LocalizationMessages.EVENT_SOURCE_ALREADY_CLOSED());\n         }\n     }\n+\n+    private MediaType resolveMediaType(Object item) {\n+        // all stream is presumed to be of items with same type\n+        if (implicitMediaType == null) {\n+            // unknown unwrapped objects are treated as json media type\n+            implicitMediaType = IMPLICIT_MEDIA_TYPE.getOrDefault(item.getClass(), MediaType.APPLICATION_JSON_TYPE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ4MjA0Ng=="}, "originalCommit": {"oid": "aed6eb4741ce964c139e008ee706384db0ec7a4b"}, "originalPosition": 206}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Mjc1NTI3OnYy", "diffSide": "RIGHT", "path": "media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDozODo0N1rOHS0GhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODozNTowNVrOHVdkUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ5MDA1Mw==", "bodyText": "if (MediaType.SERVER_SENT_EVENTS_TYPE.equals(implicitType)) {", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r489490053", "createdAt": "2020-09-16T14:38:47Z", "author": {"login": "jansupol"}, "path": "media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java", "diffHunk": "@@ -39,55 +45,109 @@\n  * <p>\n  * The reference should be obtained via injection into the resource method.\n  *\n- * @author Adam Lindenthal]\n+ * @author Adam Lindenthal\n  */\n class JerseyEventSink extends ChunkedOutput<OutboundSseEvent>\n-        implements SseEventSink, Flushable, Flow.Subscriber<OutboundSseEvent> {\n+        implements SseEventSink, Flushable, JerseyFlowSubscriber<Object> {\n \n     private static final Logger LOGGER = Logger.getLogger(JerseyEventSink.class.getName());\n-    private static final byte[] SSE_EVENT_DELIMITER = \"\\n\".getBytes(Charset.forName(\"UTF-8\"));\n+    private static final byte[] SSE_EVENT_DELIMITER = \"\\n\".getBytes(StandardCharsets.UTF_8);\n     private Flow.Subscription subscription = null;\n+    private final AtomicBoolean subscribed = new AtomicBoolean(false);\n+    private volatile MediaType implicitMediaType = null;\n+\n+    private static final Map<Class<?>, MediaType> IMPLICIT_MEDIA_TYPE;\n+\n+    static {\n+        Map<Class<?>, MediaType> map = new HashMap<>(8);\n+\n+        // Already wrapped\n+        map.put(OutboundSseEvent.class, MediaType.SERVER_SENT_EVENTS_TYPE);\n+\n+        // No wrapping for raw types\n+        map.put(String.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Character.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Boolean.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Byte.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Short.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Integer.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Long.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Double.class, MediaType.TEXT_PLAIN_TYPE);\n+\n+        IMPLICIT_MEDIA_TYPE = Collections.unmodifiableMap(map);\n+    }\n \n     JerseyEventSink(Provider<AsyncContext> asyncContextProvider) {\n         super(SSE_EVENT_DELIMITER, asyncContextProvider);\n     }\n \n     @Override\n     public void onSubscribe(final Flow.Subscription subscription) {\n-        checkClosed();\n         if (subscription == null) {\n             throw new NullPointerException(LocalizationMessages.PARAM_NULL(\"subscription\"));\n         }\n+        if (subscribed.getAndSet(true)) {\n+            subscription.cancel();\n+            return;\n+        }\n+\n         this.subscription = subscription;\n-        subscription.request(Long.MAX_VALUE);\n+        if (isClosed()) {\n+            subscription.cancel();\n+        } else {\n+            subscription.request(Long.MAX_VALUE);\n+        }\n     }\n \n \n     @Override\n-    public void onNext(final OutboundSseEvent item) {\n-        checkClosed();\n+    public void onNext(final Object item) {\n         if (item == null) {\n             throw new NullPointerException(LocalizationMessages.PARAM_NULL(\"outboundSseEvent\"));\n         }\n         try {\n-            write(item);\n-        } catch (final IOException e) {\n-            onError(e);\n+            checkClosed();\n+            MediaType implicitType = resolveMediaType(item);\n+            if (MediaType.SERVER_SENT_EVENTS_TYPE == implicitType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aed6eb4741ce964c139e008ee706384db0ec7a4b"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2NjU3Ng==", "bodyText": "fixed", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r492266576", "createdAt": "2020-09-21T18:35:05Z", "author": {"login": "danielkec"}, "path": "media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java", "diffHunk": "@@ -39,55 +45,109 @@\n  * <p>\n  * The reference should be obtained via injection into the resource method.\n  *\n- * @author Adam Lindenthal]\n+ * @author Adam Lindenthal\n  */\n class JerseyEventSink extends ChunkedOutput<OutboundSseEvent>\n-        implements SseEventSink, Flushable, Flow.Subscriber<OutboundSseEvent> {\n+        implements SseEventSink, Flushable, JerseyFlowSubscriber<Object> {\n \n     private static final Logger LOGGER = Logger.getLogger(JerseyEventSink.class.getName());\n-    private static final byte[] SSE_EVENT_DELIMITER = \"\\n\".getBytes(Charset.forName(\"UTF-8\"));\n+    private static final byte[] SSE_EVENT_DELIMITER = \"\\n\".getBytes(StandardCharsets.UTF_8);\n     private Flow.Subscription subscription = null;\n+    private final AtomicBoolean subscribed = new AtomicBoolean(false);\n+    private volatile MediaType implicitMediaType = null;\n+\n+    private static final Map<Class<?>, MediaType> IMPLICIT_MEDIA_TYPE;\n+\n+    static {\n+        Map<Class<?>, MediaType> map = new HashMap<>(8);\n+\n+        // Already wrapped\n+        map.put(OutboundSseEvent.class, MediaType.SERVER_SENT_EVENTS_TYPE);\n+\n+        // No wrapping for raw types\n+        map.put(String.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Character.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Boolean.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Byte.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Short.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Integer.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Long.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Double.class, MediaType.TEXT_PLAIN_TYPE);\n+\n+        IMPLICIT_MEDIA_TYPE = Collections.unmodifiableMap(map);\n+    }\n \n     JerseyEventSink(Provider<AsyncContext> asyncContextProvider) {\n         super(SSE_EVENT_DELIMITER, asyncContextProvider);\n     }\n \n     @Override\n     public void onSubscribe(final Flow.Subscription subscription) {\n-        checkClosed();\n         if (subscription == null) {\n             throw new NullPointerException(LocalizationMessages.PARAM_NULL(\"subscription\"));\n         }\n+        if (subscribed.getAndSet(true)) {\n+            subscription.cancel();\n+            return;\n+        }\n+\n         this.subscription = subscription;\n-        subscription.request(Long.MAX_VALUE);\n+        if (isClosed()) {\n+            subscription.cancel();\n+        } else {\n+            subscription.request(Long.MAX_VALUE);\n+        }\n     }\n \n \n     @Override\n-    public void onNext(final OutboundSseEvent item) {\n-        checkClosed();\n+    public void onNext(final Object item) {\n         if (item == null) {\n             throw new NullPointerException(LocalizationMessages.PARAM_NULL(\"outboundSseEvent\"));\n         }\n         try {\n-            write(item);\n-        } catch (final IOException e) {\n-            onError(e);\n+            checkClosed();\n+            MediaType implicitType = resolveMediaType(item);\n+            if (MediaType.SERVER_SENT_EVENTS_TYPE == implicitType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ5MDA1Mw=="}, "originalCommit": {"oid": "aed6eb4741ce964c139e008ee706384db0ec7a4b"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MjgxODMyOnYy", "diffSide": "RIGHT", "path": "media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDo1MTozMVrOHS0t0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODozNTo0MFrOHVdlog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUwMDExMg==", "bodyText": "INFO ? It's an exception, we should not consume it silently with info level.\nMaybe catch IOException only, checkClosed is called just from onError, and the exeception is not propagated, so checkClosed should only log, not throw.", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r489500112", "createdAt": "2020-09-16T14:51:31Z", "author": {"login": "jansupol"}, "path": "media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java", "diffHunk": "@@ -39,55 +45,109 @@\n  * <p>\n  * The reference should be obtained via injection into the resource method.\n  *\n- * @author Adam Lindenthal]\n+ * @author Adam Lindenthal\n  */\n class JerseyEventSink extends ChunkedOutput<OutboundSseEvent>\n-        implements SseEventSink, Flushable, Flow.Subscriber<OutboundSseEvent> {\n+        implements SseEventSink, Flushable, JerseyFlowSubscriber<Object> {\n \n     private static final Logger LOGGER = Logger.getLogger(JerseyEventSink.class.getName());\n-    private static final byte[] SSE_EVENT_DELIMITER = \"\\n\".getBytes(Charset.forName(\"UTF-8\"));\n+    private static final byte[] SSE_EVENT_DELIMITER = \"\\n\".getBytes(StandardCharsets.UTF_8);\n     private Flow.Subscription subscription = null;\n+    private final AtomicBoolean subscribed = new AtomicBoolean(false);\n+    private volatile MediaType implicitMediaType = null;\n+\n+    private static final Map<Class<?>, MediaType> IMPLICIT_MEDIA_TYPE;\n+\n+    static {\n+        Map<Class<?>, MediaType> map = new HashMap<>(8);\n+\n+        // Already wrapped\n+        map.put(OutboundSseEvent.class, MediaType.SERVER_SENT_EVENTS_TYPE);\n+\n+        // No wrapping for raw types\n+        map.put(String.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Character.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Boolean.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Byte.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Short.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Integer.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Long.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Double.class, MediaType.TEXT_PLAIN_TYPE);\n+\n+        IMPLICIT_MEDIA_TYPE = Collections.unmodifiableMap(map);\n+    }\n \n     JerseyEventSink(Provider<AsyncContext> asyncContextProvider) {\n         super(SSE_EVENT_DELIMITER, asyncContextProvider);\n     }\n \n     @Override\n     public void onSubscribe(final Flow.Subscription subscription) {\n-        checkClosed();\n         if (subscription == null) {\n             throw new NullPointerException(LocalizationMessages.PARAM_NULL(\"subscription\"));\n         }\n+        if (subscribed.getAndSet(true)) {\n+            subscription.cancel();\n+            return;\n+        }\n+\n         this.subscription = subscription;\n-        subscription.request(Long.MAX_VALUE);\n+        if (isClosed()) {\n+            subscription.cancel();\n+        } else {\n+            subscription.request(Long.MAX_VALUE);\n+        }\n     }\n \n \n     @Override\n-    public void onNext(final OutboundSseEvent item) {\n-        checkClosed();\n+    public void onNext(final Object item) {\n         if (item == null) {\n             throw new NullPointerException(LocalizationMessages.PARAM_NULL(\"outboundSseEvent\"));\n         }\n         try {\n-            write(item);\n-        } catch (final IOException e) {\n-            onError(e);\n+            checkClosed();\n+            MediaType implicitType = resolveMediaType(item);\n+            if (MediaType.SERVER_SENT_EVENTS_TYPE == implicitType) {\n+                // already wrapped\n+                write((OutboundSseEvent) item);\n+            } else {\n+                // implicit wrapping\n+                // TODO: Jersey annotation for explicit media type\n+                write(new OutboundEvent.Builder()\n+                        .mediaType(implicitType)\n+                        .data(item)\n+                        .build());\n+            }\n+        } catch (final Throwable e) {\n+            LOGGER.log(Level.INFO, LocalizationMessages.EVENT_SOURCE_DEFAULT_ONERROR(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aed6eb4741ce964c139e008ee706384db0ec7a4b"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxMTg0Nw==", "bodyText": "There can be also Runtime exception propagated from flushQueue, specs forbids Subscriber from throwing anything else than NPE from onNext", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r492211847", "createdAt": "2020-09-21T17:00:10Z", "author": {"login": "danielkec"}, "path": "media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java", "diffHunk": "@@ -39,55 +45,109 @@\n  * <p>\n  * The reference should be obtained via injection into the resource method.\n  *\n- * @author Adam Lindenthal]\n+ * @author Adam Lindenthal\n  */\n class JerseyEventSink extends ChunkedOutput<OutboundSseEvent>\n-        implements SseEventSink, Flushable, Flow.Subscriber<OutboundSseEvent> {\n+        implements SseEventSink, Flushable, JerseyFlowSubscriber<Object> {\n \n     private static final Logger LOGGER = Logger.getLogger(JerseyEventSink.class.getName());\n-    private static final byte[] SSE_EVENT_DELIMITER = \"\\n\".getBytes(Charset.forName(\"UTF-8\"));\n+    private static final byte[] SSE_EVENT_DELIMITER = \"\\n\".getBytes(StandardCharsets.UTF_8);\n     private Flow.Subscription subscription = null;\n+    private final AtomicBoolean subscribed = new AtomicBoolean(false);\n+    private volatile MediaType implicitMediaType = null;\n+\n+    private static final Map<Class<?>, MediaType> IMPLICIT_MEDIA_TYPE;\n+\n+    static {\n+        Map<Class<?>, MediaType> map = new HashMap<>(8);\n+\n+        // Already wrapped\n+        map.put(OutboundSseEvent.class, MediaType.SERVER_SENT_EVENTS_TYPE);\n+\n+        // No wrapping for raw types\n+        map.put(String.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Character.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Boolean.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Byte.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Short.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Integer.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Long.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Double.class, MediaType.TEXT_PLAIN_TYPE);\n+\n+        IMPLICIT_MEDIA_TYPE = Collections.unmodifiableMap(map);\n+    }\n \n     JerseyEventSink(Provider<AsyncContext> asyncContextProvider) {\n         super(SSE_EVENT_DELIMITER, asyncContextProvider);\n     }\n \n     @Override\n     public void onSubscribe(final Flow.Subscription subscription) {\n-        checkClosed();\n         if (subscription == null) {\n             throw new NullPointerException(LocalizationMessages.PARAM_NULL(\"subscription\"));\n         }\n+        if (subscribed.getAndSet(true)) {\n+            subscription.cancel();\n+            return;\n+        }\n+\n         this.subscription = subscription;\n-        subscription.request(Long.MAX_VALUE);\n+        if (isClosed()) {\n+            subscription.cancel();\n+        } else {\n+            subscription.request(Long.MAX_VALUE);\n+        }\n     }\n \n \n     @Override\n-    public void onNext(final OutboundSseEvent item) {\n-        checkClosed();\n+    public void onNext(final Object item) {\n         if (item == null) {\n             throw new NullPointerException(LocalizationMessages.PARAM_NULL(\"outboundSseEvent\"));\n         }\n         try {\n-            write(item);\n-        } catch (final IOException e) {\n-            onError(e);\n+            checkClosed();\n+            MediaType implicitType = resolveMediaType(item);\n+            if (MediaType.SERVER_SENT_EVENTS_TYPE == implicitType) {\n+                // already wrapped\n+                write((OutboundSseEvent) item);\n+            } else {\n+                // implicit wrapping\n+                // TODO: Jersey annotation for explicit media type\n+                write(new OutboundEvent.Builder()\n+                        .mediaType(implicitType)\n+                        .data(item)\n+                        .build());\n+            }\n+        } catch (final Throwable e) {\n+            LOGGER.log(Level.INFO, LocalizationMessages.EVENT_SOURCE_DEFAULT_ONERROR(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUwMDExMg=="}, "originalCommit": {"oid": "aed6eb4741ce964c139e008ee706384db0ec7a4b"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxMzk5OA==", "bodyText": "This time I have checked to be sure \ud83d\ude01 https://github.com/reactive-streams/reactive-streams-jvm#2.13", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r492213998", "createdAt": "2020-09-21T17:04:02Z", "author": {"login": "danielkec"}, "path": "media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java", "diffHunk": "@@ -39,55 +45,109 @@\n  * <p>\n  * The reference should be obtained via injection into the resource method.\n  *\n- * @author Adam Lindenthal]\n+ * @author Adam Lindenthal\n  */\n class JerseyEventSink extends ChunkedOutput<OutboundSseEvent>\n-        implements SseEventSink, Flushable, Flow.Subscriber<OutboundSseEvent> {\n+        implements SseEventSink, Flushable, JerseyFlowSubscriber<Object> {\n \n     private static final Logger LOGGER = Logger.getLogger(JerseyEventSink.class.getName());\n-    private static final byte[] SSE_EVENT_DELIMITER = \"\\n\".getBytes(Charset.forName(\"UTF-8\"));\n+    private static final byte[] SSE_EVENT_DELIMITER = \"\\n\".getBytes(StandardCharsets.UTF_8);\n     private Flow.Subscription subscription = null;\n+    private final AtomicBoolean subscribed = new AtomicBoolean(false);\n+    private volatile MediaType implicitMediaType = null;\n+\n+    private static final Map<Class<?>, MediaType> IMPLICIT_MEDIA_TYPE;\n+\n+    static {\n+        Map<Class<?>, MediaType> map = new HashMap<>(8);\n+\n+        // Already wrapped\n+        map.put(OutboundSseEvent.class, MediaType.SERVER_SENT_EVENTS_TYPE);\n+\n+        // No wrapping for raw types\n+        map.put(String.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Character.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Boolean.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Byte.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Short.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Integer.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Long.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Double.class, MediaType.TEXT_PLAIN_TYPE);\n+\n+        IMPLICIT_MEDIA_TYPE = Collections.unmodifiableMap(map);\n+    }\n \n     JerseyEventSink(Provider<AsyncContext> asyncContextProvider) {\n         super(SSE_EVENT_DELIMITER, asyncContextProvider);\n     }\n \n     @Override\n     public void onSubscribe(final Flow.Subscription subscription) {\n-        checkClosed();\n         if (subscription == null) {\n             throw new NullPointerException(LocalizationMessages.PARAM_NULL(\"subscription\"));\n         }\n+        if (subscribed.getAndSet(true)) {\n+            subscription.cancel();\n+            return;\n+        }\n+\n         this.subscription = subscription;\n-        subscription.request(Long.MAX_VALUE);\n+        if (isClosed()) {\n+            subscription.cancel();\n+        } else {\n+            subscription.request(Long.MAX_VALUE);\n+        }\n     }\n \n \n     @Override\n-    public void onNext(final OutboundSseEvent item) {\n-        checkClosed();\n+    public void onNext(final Object item) {\n         if (item == null) {\n             throw new NullPointerException(LocalizationMessages.PARAM_NULL(\"outboundSseEvent\"));\n         }\n         try {\n-            write(item);\n-        } catch (final IOException e) {\n-            onError(e);\n+            checkClosed();\n+            MediaType implicitType = resolveMediaType(item);\n+            if (MediaType.SERVER_SENT_EVENTS_TYPE == implicitType) {\n+                // already wrapped\n+                write((OutboundSseEvent) item);\n+            } else {\n+                // implicit wrapping\n+                // TODO: Jersey annotation for explicit media type\n+                write(new OutboundEvent.Builder()\n+                        .mediaType(implicitType)\n+                        .data(item)\n+                        .build());\n+            }\n+        } catch (final Throwable e) {\n+            LOGGER.log(Level.INFO, LocalizationMessages.EVENT_SOURCE_DEFAULT_ONERROR(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUwMDExMg=="}, "originalCommit": {"oid": "aed6eb4741ce964c139e008ee706384db0ec7a4b"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2NjkxNA==", "bodyText": "SEVERE it is", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r492266914", "createdAt": "2020-09-21T18:35:40Z", "author": {"login": "danielkec"}, "path": "media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java", "diffHunk": "@@ -39,55 +45,109 @@\n  * <p>\n  * The reference should be obtained via injection into the resource method.\n  *\n- * @author Adam Lindenthal]\n+ * @author Adam Lindenthal\n  */\n class JerseyEventSink extends ChunkedOutput<OutboundSseEvent>\n-        implements SseEventSink, Flushable, Flow.Subscriber<OutboundSseEvent> {\n+        implements SseEventSink, Flushable, JerseyFlowSubscriber<Object> {\n \n     private static final Logger LOGGER = Logger.getLogger(JerseyEventSink.class.getName());\n-    private static final byte[] SSE_EVENT_DELIMITER = \"\\n\".getBytes(Charset.forName(\"UTF-8\"));\n+    private static final byte[] SSE_EVENT_DELIMITER = \"\\n\".getBytes(StandardCharsets.UTF_8);\n     private Flow.Subscription subscription = null;\n+    private final AtomicBoolean subscribed = new AtomicBoolean(false);\n+    private volatile MediaType implicitMediaType = null;\n+\n+    private static final Map<Class<?>, MediaType> IMPLICIT_MEDIA_TYPE;\n+\n+    static {\n+        Map<Class<?>, MediaType> map = new HashMap<>(8);\n+\n+        // Already wrapped\n+        map.put(OutboundSseEvent.class, MediaType.SERVER_SENT_EVENTS_TYPE);\n+\n+        // No wrapping for raw types\n+        map.put(String.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Character.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Boolean.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Byte.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Short.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Integer.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Long.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Double.class, MediaType.TEXT_PLAIN_TYPE);\n+\n+        IMPLICIT_MEDIA_TYPE = Collections.unmodifiableMap(map);\n+    }\n \n     JerseyEventSink(Provider<AsyncContext> asyncContextProvider) {\n         super(SSE_EVENT_DELIMITER, asyncContextProvider);\n     }\n \n     @Override\n     public void onSubscribe(final Flow.Subscription subscription) {\n-        checkClosed();\n         if (subscription == null) {\n             throw new NullPointerException(LocalizationMessages.PARAM_NULL(\"subscription\"));\n         }\n+        if (subscribed.getAndSet(true)) {\n+            subscription.cancel();\n+            return;\n+        }\n+\n         this.subscription = subscription;\n-        subscription.request(Long.MAX_VALUE);\n+        if (isClosed()) {\n+            subscription.cancel();\n+        } else {\n+            subscription.request(Long.MAX_VALUE);\n+        }\n     }\n \n \n     @Override\n-    public void onNext(final OutboundSseEvent item) {\n-        checkClosed();\n+    public void onNext(final Object item) {\n         if (item == null) {\n             throw new NullPointerException(LocalizationMessages.PARAM_NULL(\"outboundSseEvent\"));\n         }\n         try {\n-            write(item);\n-        } catch (final IOException e) {\n-            onError(e);\n+            checkClosed();\n+            MediaType implicitType = resolveMediaType(item);\n+            if (MediaType.SERVER_SENT_EVENTS_TYPE == implicitType) {\n+                // already wrapped\n+                write((OutboundSseEvent) item);\n+            } else {\n+                // implicit wrapping\n+                // TODO: Jersey annotation for explicit media type\n+                write(new OutboundEvent.Builder()\n+                        .mediaType(implicitType)\n+                        .data(item)\n+                        .build());\n+            }\n+        } catch (final Throwable e) {\n+            LOGGER.log(Level.INFO, LocalizationMessages.EVENT_SOURCE_DEFAULT_ONERROR(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUwMDExMg=="}, "originalCommit": {"oid": "aed6eb4741ce964c139e008ee706384db0ec7a4b"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Mjk3NTY0OnYy", "diffSide": "RIGHT", "path": "media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNToyNDo1MlrOHS2Q7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODozNTo0N1rOHVdl4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUyNTQ4NQ==", "bodyText": "Can you name this cancelSubscription()?", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r489525485", "createdAt": "2020-09-16T15:24:52Z", "author": {"login": "jansupol"}, "path": "media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java", "diffHunk": "@@ -118,15 +180,30 @@ public void flush() throws IOException {\n         super.flushQueue();\n     }\n \n-    public void onComplete() {\n-        checkClosed();\n-        subscription.cancel();\n-        close();\n+    @Override\n+    protected void onClose(Exception e) {\n+        cancelUpstream();\n+    }\n+\n+    private void cancelUpstream() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aed6eb4741ce964c139e008ee706384db0ec7a4b"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2Njk3OA==", "bodyText": "sure", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r492266978", "createdAt": "2020-09-21T18:35:47Z", "author": {"login": "danielkec"}, "path": "media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java", "diffHunk": "@@ -118,15 +180,30 @@ public void flush() throws IOException {\n         super.flushQueue();\n     }\n \n-    public void onComplete() {\n-        checkClosed();\n-        subscription.cancel();\n-        close();\n+    @Override\n+    protected void onClose(Exception e) {\n+        cancelUpstream();\n+    }\n+\n+    private void cancelUpstream() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUyNTQ4NQ=="}, "originalCommit": {"oid": "aed6eb4741ce964c139e008ee706384db0ec7a4b"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTQwOTQ2OnYy", "diffSide": "RIGHT", "path": "media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMjo0ODoxMFrOHVlB2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNzoyNDoxM1rOHVtPAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM4ODgyNw==", "bodyText": "Character, String and Boolean are final classes. Faster is just to compare them.", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r492388827", "createdAt": "2020-09-21T22:48:10Z", "author": {"login": "jansupol"}, "path": "media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java", "diffHunk": "@@ -118,15 +158,38 @@ public void flush() throws IOException {\n         super.flushQueue();\n     }\n \n-    public void onComplete() {\n-        checkClosed();\n-        subscription.cancel();\n-        close();\n+    @Override\n+    protected void onClose(Exception e) {\n+        cancelSubscription();\n+    }\n+\n+    private void cancelSubscription() {\n+        if (subscription != null) {\n+            subscription.cancel();\n+        }\n     }\n \n     private void checkClosed() {\n         if (isClosed()) {\n+            cancelSubscription();\n             throw new IllegalStateException(LocalizationMessages.EVENT_SOURCE_ALREADY_CLOSED());\n         }\n     }\n+\n+    private MediaType resolveMediaType(Object item) {\n+        // all stream is presumed to be of items with same type\n+        if (implicitMediaType == null) {\n+            Class<?> clazz = item.getClass();\n+            if (Number.class.isAssignableFrom(clazz)\n+                    || Character.class.isAssignableFrom(clazz)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7e62e3fa332c1c1c8720f9d3edef87d5bd4d4cb"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUyMzI2Nw==", "bodyText": "My bad sorry", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r492523267", "createdAt": "2020-09-22T07:24:13Z", "author": {"login": "danielkec"}, "path": "media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java", "diffHunk": "@@ -118,15 +158,38 @@ public void flush() throws IOException {\n         super.flushQueue();\n     }\n \n-    public void onComplete() {\n-        checkClosed();\n-        subscription.cancel();\n-        close();\n+    @Override\n+    protected void onClose(Exception e) {\n+        cancelSubscription();\n+    }\n+\n+    private void cancelSubscription() {\n+        if (subscription != null) {\n+            subscription.cancel();\n+        }\n     }\n \n     private void checkClosed() {\n         if (isClosed()) {\n+            cancelSubscription();\n             throw new IllegalStateException(LocalizationMessages.EVENT_SOURCE_ALREADY_CLOSED());\n         }\n     }\n+\n+    private MediaType resolveMediaType(Object item) {\n+        // all stream is presumed to be of items with same type\n+        if (implicitMediaType == null) {\n+            Class<?> clazz = item.getClass();\n+            if (Number.class.isAssignableFrom(clazz)\n+                    || Character.class.isAssignableFrom(clazz)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM4ODgyNw=="}, "originalCommit": {"oid": "c7e62e3fa332c1c1c8720f9d3edef87d5bd4d4cb"}, "originalPosition": 189}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1344, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}