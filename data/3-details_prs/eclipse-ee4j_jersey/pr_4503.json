{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMzExNDY0", "number": 4503, "title": "SSE Flow.Subscriber injectable as event sink", "bodyText": "Fixes #4501\nFixes #4500\nNow its possible in Java 11+\n    @GET\n    @Path(\"sse\")\n    @Produces(MediaType.SERVER_SENT_EVENTS)\n    public void listenToEvents(@Context java.util.concurrent.Flow.Subscriber<String> eventSink)\n    public void listenToEvents(@Context java.util.concurrent.Flow.Subscriber<OutboundEvent> eventSink)\n    public void listenToEvents(@Context org.glassfish.jersey.internal.jsr166.Flow.Subscriber<String> eventSink)\n    public void listenToEvents(@Context org.glassfish.jersey.internal.jsr166.Flow.Subscriber<OutboundEvent> eventSink)\nJava 8\n    @GET\n    @Path(\"sse\")\n    @Produces(MediaType.SERVER_SENT_EVENTS)\n    public void listenToEvents(@Context org.glassfish.jersey.internal.jsr166.Flow.Subscriber<String> eventSink)\n    public void listenToEvents(@Context org.glassfish.jersey.internal.jsr166.Flow.Subscriber<OutboundEvent> eventSink)", "createdAt": "2020-06-10T09:01:06Z", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503", "merged": true, "mergeCommit": {"oid": "0f65e5d6428098dfa724c0ef3510a8aea77f74fc"}, "closed": true, "closedAt": "2020-09-23T16:40:04Z", "author": {"login": "danielkec"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcp15FlABqjM0Mjg2MzQ1OTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLtKGrAFqTQ5NDY5OTg5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7f1e6f91484df7648cbadffc1a927227d4c65daf", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/eclipse-ee4j/jersey/commit/7f1e6f91484df7648cbadffc1a927227d4c65daf", "committedDate": "2020-06-10T08:59:57Z", "message": "SSE Flow.Subscriber injectable as event sink"}, "afterCommit": {"oid": "7a95ecf1258aad146e309b10491af85dbd345483", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/eclipse-ee4j/jersey/commit/7a95ecf1258aad146e309b10491af85dbd345483", "committedDate": "2020-06-10T09:04:04Z", "message": "SSE Flow.Subscriber injectable as event sink\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cb3d761c27a670d6ab7c5fdc328eb057b7f6e8bb", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/eclipse-ee4j/jersey/commit/cb3d761c27a670d6ab7c5fdc328eb057b7f6e8bb", "committedDate": "2020-06-11T08:34:33Z", "message": "Rename JerseySink to JerseyFlowSubscriber\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}, "afterCommit": {"oid": "4fec4143271eafa043394de61bbc90fa6751d75c", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/eclipse-ee4j/jersey/commit/4fec4143271eafa043394de61bbc90fa6751d75c", "committedDate": "2020-06-11T08:49:39Z", "message": "Rename JerseySink to JerseyFlowSubscriber\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NzI1MTc0", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#pullrequestreview-428725174", "createdAt": "2020-06-11T09:03:08Z", "commit": {"oid": "4fec4143271eafa043394de61bbc90fa6751d75c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTowMzowOFrOGiUxqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTowMzowOFrOGiUxqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY0NTE2MQ==", "bodyText": "Change to this file seems unnecessary.", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r438645161", "createdAt": "2020-06-11T09:03:08Z", "author": {"login": "tomas-langer"}, "path": "core-common/src/main/java11/org/glassfish/jersey/internal/jsr166/SubmissionPublisher.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fec4143271eafa043394de61bbc90fa6751d75c"}, "originalPosition": 3}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "804558d421cf3b193b5405421371e2fa188dbc5a", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/eclipse-ee4j/jersey/commit/804558d421cf3b193b5405421371e2fa188dbc5a", "committedDate": "2020-06-11T16:52:49Z", "message": "Tests for Sse with injected Flow.Subscriber\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}, "afterCommit": {"oid": "a3c9ad4de965282ebb4c5aa581505a91fb35962e", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/eclipse-ee4j/jersey/commit/a3c9ad4de965282ebb4c5aa581505a91fb35962e", "committedDate": "2020-06-11T18:04:20Z", "message": "Tests for Sse with injected Flow.Subscriber\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a446b684230318037ef12fae383fdb706be9e017", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/eclipse-ee4j/jersey/commit/a446b684230318037ef12fae383fdb706be9e017", "committedDate": "2020-06-12T14:31:25Z", "message": "Reactive streams tck tests for JerseyEventSink\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}, "afterCommit": {"oid": "a014999495e4d9d8e76f642f52ccaaa0eb2959b3", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/eclipse-ee4j/jersey/commit/a014999495e4d9d8e76f642f52ccaaa0eb2959b3", "committedDate": "2020-06-12T14:42:21Z", "message": "Reactive streams tck tests for JerseyEventSink\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5ODg4Nzcz", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#pullrequestreview-429888773", "createdAt": "2020-06-12T16:42:03Z", "commit": {"oid": "10ee8d8a787f2890264329fa69907994e04ed323"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjo0MjowM1rOGjKuHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjo0MjowM1rOGjKuHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyODk4OA==", "bodyText": "@jansupol Is this proper way to propagate close from client to JerseyEventSink?", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r439528988", "createdAt": "2020-06-12T16:42:03Z", "author": {"login": "danielkec"}, "path": "core-server/src/main/java/org/glassfish/jersey/server/ChunkedOutput.java", "diffHunk": "@@ -290,6 +290,7 @@ public Void call() throws IOException {\n         } finally {\n             if (closed) {\n                 try {\n+                    closeByClient();\n                     responseContext.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10ee8d8a787f2890264329fa69907994e04ed323"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "10ee8d8a787f2890264329fa69907994e04ed323", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/eclipse-ee4j/jersey/commit/10ee8d8a787f2890264329fa69907994e04ed323", "committedDate": "2020-06-12T16:38:48Z", "message": "Cancel on close propagation"}, "afterCommit": {"oid": "135a0eaa1d12c6f9852b1f106893f5870305f14e", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/eclipse-ee4j/jersey/commit/135a0eaa1d12c6f9852b1f106893f5870305f14e", "committedDate": "2020-06-12T16:47:22Z", "message": "Cancel on close propagation\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "acf87abe500bfa140f051d53f91a8d5884dae01a", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/eclipse-ee4j/jersey/commit/acf87abe500bfa140f051d53f91a8d5884dae01a", "committedDate": "2020-06-15T12:35:26Z", "message": "SseTypeResolver"}, "afterCommit": {"oid": "58d0a4fabe7a42d5ff528b266a28d94660fe9a39", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/eclipse-ee4j/jersey/commit/58d0a4fabe7a42d5ff528b266a28d94660fe9a39", "committedDate": "2020-06-15T12:43:23Z", "message": "SseTypeResolver\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1ODUxMTQ0", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#pullrequestreview-435851144", "createdAt": "2020-06-23T14:38:18Z", "commit": {"oid": "58d0a4fabe7a42d5ff528b266a28d94660fe9a39"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDozODoxOFrOGnscnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDozODoxOFrOGnscnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI3NTg2OQ==", "bodyText": "clazz = AccessController.doPrivileged(ReflectionHelper.classForNamePA(\"java.util.concurrent.Flow.Subscriber\", null)", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r444275869", "createdAt": "2020-06-23T14:38:18Z", "author": {"login": "jansupol"}, "path": "core-server/src/main/java/org/glassfish/jersey/server/model/internal/SseTypeResolver.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.glassfish.jersey.server.model.internal;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class SseTypeResolver {\n+\n+    private static final Set<Class<?>> SUPPORTED_SSE_SINK_TYPES;\n+\n+    static {\n+        Set<Class<?>> set = new HashSet<>(8);\n+\n+        set.add(org.glassfish.jersey.internal.jsr166.Flow.Subscriber.class);\n+        set.add(javax.ws.rs.sse.SseEventSink.class);\n+        try {\n+            Class<?> clazz = Class.forName(\"java.util.concurrent.Flow.Subscriber\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58d0a4fabe7a42d5ff528b266a28d94660fe9a39"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1ODU0MjMw", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#pullrequestreview-435854230", "createdAt": "2020-06-23T14:41:17Z", "commit": {"oid": "58d0a4fabe7a42d5ff528b266a28d94660fe9a39"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDo0MToxOFrOGnslwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDo0MToxOFrOGnslwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI3ODIxMA==", "bodyText": "Please make it final with private constructor", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r444278210", "createdAt": "2020-06-23T14:41:18Z", "author": {"login": "jansupol"}, "path": "core-server/src/main/java/org/glassfish/jersey/server/model/internal/SseTypeResolver.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.glassfish.jersey.server.model.internal;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class SseTypeResolver {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58d0a4fabe7a42d5ff528b266a28d94660fe9a39"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1ODgyNTkw", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#pullrequestreview-435882590", "createdAt": "2020-06-23T15:09:38Z", "commit": {"oid": "58d0a4fabe7a42d5ff528b266a28d94660fe9a39"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTowOTozOFrOGnt41w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTowOTozOFrOGnt41w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI5OTQ3OQ==", "bodyText": "how about calling this.close()? Same as onComplete? Would you still need the onClose()?", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r444299479", "createdAt": "2020-06-23T15:09:38Z", "author": {"login": "jansupol"}, "path": "media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java", "diffHunk": "@@ -39,55 +45,109 @@\n  * <p>\n  * The reference should be obtained via injection into the resource method.\n  *\n- * @author Adam Lindenthal]\n+ * @author Adam Lindenthal\n  */\n class JerseyEventSink extends ChunkedOutput<OutboundSseEvent>\n-        implements SseEventSink, Flushable, Flow.Subscriber<OutboundSseEvent> {\n+        implements SseEventSink, Flushable, JerseyFlowSubscriber<Object> {\n \n     private static final Logger LOGGER = Logger.getLogger(JerseyEventSink.class.getName());\n-    private static final byte[] SSE_EVENT_DELIMITER = \"\\n\".getBytes(Charset.forName(\"UTF-8\"));\n+    private static final byte[] SSE_EVENT_DELIMITER = \"\\n\".getBytes(StandardCharsets.UTF_8);\n     private Flow.Subscription subscription = null;\n+    private final AtomicBoolean subscribed = new AtomicBoolean(false);\n+    private volatile MediaType implicitMediaType = null;\n+\n+    private static final Map<Class<?>, MediaType> IMPLICIT_MEDIA_TYPE;\n+\n+    static {\n+        Map<Class<?>, MediaType> map = new HashMap<>(8);\n+\n+        // Already wrapped\n+        map.put(OutboundSseEvent.class, MediaType.SERVER_SENT_EVENTS_TYPE);\n+\n+        // No wrapping for raw types\n+        map.put(String.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Character.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Boolean.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Byte.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Short.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Integer.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Long.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Double.class, MediaType.TEXT_PLAIN_TYPE);\n+\n+        IMPLICIT_MEDIA_TYPE = Collections.unmodifiableMap(map);\n+    }\n \n     JerseyEventSink(Provider<AsyncContext> asyncContextProvider) {\n         super(SSE_EVENT_DELIMITER, asyncContextProvider);\n     }\n \n     @Override\n     public void onSubscribe(final Flow.Subscription subscription) {\n-        checkClosed();\n         if (subscription == null) {\n             throw new NullPointerException(LocalizationMessages.PARAM_NULL(\"subscription\"));\n         }\n+        if (subscribed.getAndSet(true)) {\n+            subscription.cancel();\n+            return;\n+        }\n+\n         this.subscription = subscription;\n-        subscription.request(Long.MAX_VALUE);\n+        if (isClosed()) {\n+            subscription.cancel();\n+        } else {\n+            subscription.request(Long.MAX_VALUE);\n+        }\n     }\n \n \n     @Override\n-    public void onNext(final OutboundSseEvent item) {\n-        checkClosed();\n+    public void onNext(final Object item) {\n         if (item == null) {\n             throw new NullPointerException(LocalizationMessages.PARAM_NULL(\"outboundSseEvent\"));\n         }\n         try {\n-            write(item);\n-        } catch (final IOException e) {\n-            onError(e);\n+            checkClosed();\n+            MediaType implicitType = resolveMediaType(item);\n+            if (MediaType.SERVER_SENT_EVENTS_TYPE == implicitType) {\n+                // already wrapped\n+                write((OutboundSseEvent) item);\n+            } else {\n+                // implicit wrapping\n+                // TODO: Jersey annotation for explicit media type\n+                write(new OutboundEvent.Builder()\n+                        .mediaType(implicitType)\n+                        .data(item)\n+                        .build());\n+            }\n+        } catch (final Throwable e) {\n+            LOGGER.log(Level.INFO, LocalizationMessages.EVENT_SOURCE_DEFAULT_ONERROR(), e);\n         }\n     }\n \n     @Override\n     public void onError(final Throwable throwable) {\n-        checkClosed();\n         if (throwable == null) {\n             throw new NullPointerException(LocalizationMessages.PARAM_NULL(\"throwable\"));\n         }\n-        subscription.cancel();\n+        try {\n+            super.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58d0a4fabe7a42d5ff528b266a28d94660fe9a39"}, "originalPosition": 137}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "58d0a4fabe7a42d5ff528b266a28d94660fe9a39", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/eclipse-ee4j/jersey/commit/58d0a4fabe7a42d5ff528b266a28d94660fe9a39", "committedDate": "2020-06-15T12:43:23Z", "message": "SseTypeResolver\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}, "afterCommit": {"oid": "d2d7cd33c6b8752563628c5db2b8a668800bd610", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/eclipse-ee4j/jersey/commit/d2d7cd33c6b8752563628c5db2b8a668800bd610", "committedDate": "2020-08-03T15:03:00Z", "message": "Review issues"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d2d7cd33c6b8752563628c5db2b8a668800bd610", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/eclipse-ee4j/jersey/commit/d2d7cd33c6b8752563628c5db2b8a668800bd610", "committedDate": "2020-08-03T15:03:00Z", "message": "Review issues"}, "afterCommit": {"oid": "680068c5e848b44202994426f1ebca4e79597a52", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/eclipse-ee4j/jersey/commit/680068c5e848b44202994426f1ebca4e79597a52", "committedDate": "2020-08-03T15:05:30Z", "message": "Review issues\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NjI0NzQ5", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#pullrequestreview-489624749", "createdAt": "2020-09-16T13:28:29Z", "commit": {"oid": "aed6eb4741ce964c139e008ee706384db0ec7a4b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzoyODoyOVrOHSw29A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNToyNDo1MlrOHS2Q7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQzNjkxNg==", "bodyText": "Please update copyright to ChunkedOutput", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r489436916", "createdAt": "2020-09-16T13:28:29Z", "author": {"login": "jansupol"}, "path": "core-server/src/main/java/org/glassfish/jersey/server/ChunkedOutput.java", "diffHunk": "@@ -287,6 +287,7 @@ public Void call() throws IOException {\n             closed = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aed6eb4741ce964c139e008ee706384db0ec7a4b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQzNzUyOA==", "bodyText": "Please add copyright", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r489437528", "createdAt": "2020-09-16T13:29:17Z", "author": {"login": "jansupol"}, "path": "core-server/src/main/java/org/glassfish/jersey/server/model/internal/SseTypeResolver.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.glassfish.jersey.server.model.internal;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aed6eb4741ce964c139e008ee706384db0ec7a4b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ2MzAxNw==", "bodyText": "This class is duplicated. One in SSE module, one in the test module. Does it make sense to move the test from SSE module to the test module to contain just a single copy of the class?", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r489463017", "createdAt": "2020-09-16T14:03:19Z", "author": {"login": "jansupol"}, "path": "media/sse/src/test/java/org/glassfish/jersey/media/sse/JerseyFlowAdapters.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aed6eb4741ce964c139e008ee706384db0ec7a4b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ2Mzc0Mw==", "bodyText": "2020", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r489463743", "createdAt": "2020-09-16T14:04:23Z", "author": {"login": "jansupol"}, "path": "tests/integration/reactive-streams/sse/tck-suite.xml", "diffHunk": "@@ -0,0 +1,28 @@\n+<!DOCTYPE suite SYSTEM \"http://testng.org/testng-1.0.dtd\" >\n+<!--\n+\n+    Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aed6eb4741ce964c139e008ee706384db0ec7a4b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ2OTQ4Mg==", "bodyText": "Please update copyright year", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r489469482", "createdAt": "2020-09-16T14:12:09Z", "author": {"login": "jansupol"}, "path": "media/sse/pom.xml", "diffHunk": "@@ -56,6 +56,34 @@\n             <type>pom</type>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aed6eb4741ce964c139e008ee706384db0ec7a4b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ4MjA0Ng==", "bodyText": "Would this work correctly for Float.class, BigDecimal.class? Perhaps check if Number.class.isAssignableFrom(item.getClass()) + Character & String & Boolean?", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r489482046", "createdAt": "2020-09-16T14:28:40Z", "author": {"login": "jansupol"}, "path": "media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java", "diffHunk": "@@ -118,15 +180,30 @@ public void flush() throws IOException {\n         super.flushQueue();\n     }\n \n-    public void onComplete() {\n-        checkClosed();\n-        subscription.cancel();\n-        close();\n+    @Override\n+    protected void onClose(Exception e) {\n+        cancelUpstream();\n+    }\n+\n+    private void cancelUpstream() {\n+        if (subscription != null) {\n+            subscription.cancel();\n+        }\n     }\n \n     private void checkClosed() {\n         if (isClosed()) {\n+            cancelUpstream();\n             throw new IllegalStateException(LocalizationMessages.EVENT_SOURCE_ALREADY_CLOSED());\n         }\n     }\n+\n+    private MediaType resolveMediaType(Object item) {\n+        // all stream is presumed to be of items with same type\n+        if (implicitMediaType == null) {\n+            // unknown unwrapped objects are treated as json media type\n+            implicitMediaType = IMPLICIT_MEDIA_TYPE.getOrDefault(item.getClass(), MediaType.APPLICATION_JSON_TYPE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aed6eb4741ce964c139e008ee706384db0ec7a4b"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ5MDA1Mw==", "bodyText": "if (MediaType.SERVER_SENT_EVENTS_TYPE.equals(implicitType)) {", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r489490053", "createdAt": "2020-09-16T14:38:47Z", "author": {"login": "jansupol"}, "path": "media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java", "diffHunk": "@@ -39,55 +45,109 @@\n  * <p>\n  * The reference should be obtained via injection into the resource method.\n  *\n- * @author Adam Lindenthal]\n+ * @author Adam Lindenthal\n  */\n class JerseyEventSink extends ChunkedOutput<OutboundSseEvent>\n-        implements SseEventSink, Flushable, Flow.Subscriber<OutboundSseEvent> {\n+        implements SseEventSink, Flushable, JerseyFlowSubscriber<Object> {\n \n     private static final Logger LOGGER = Logger.getLogger(JerseyEventSink.class.getName());\n-    private static final byte[] SSE_EVENT_DELIMITER = \"\\n\".getBytes(Charset.forName(\"UTF-8\"));\n+    private static final byte[] SSE_EVENT_DELIMITER = \"\\n\".getBytes(StandardCharsets.UTF_8);\n     private Flow.Subscription subscription = null;\n+    private final AtomicBoolean subscribed = new AtomicBoolean(false);\n+    private volatile MediaType implicitMediaType = null;\n+\n+    private static final Map<Class<?>, MediaType> IMPLICIT_MEDIA_TYPE;\n+\n+    static {\n+        Map<Class<?>, MediaType> map = new HashMap<>(8);\n+\n+        // Already wrapped\n+        map.put(OutboundSseEvent.class, MediaType.SERVER_SENT_EVENTS_TYPE);\n+\n+        // No wrapping for raw types\n+        map.put(String.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Character.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Boolean.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Byte.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Short.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Integer.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Long.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Double.class, MediaType.TEXT_PLAIN_TYPE);\n+\n+        IMPLICIT_MEDIA_TYPE = Collections.unmodifiableMap(map);\n+    }\n \n     JerseyEventSink(Provider<AsyncContext> asyncContextProvider) {\n         super(SSE_EVENT_DELIMITER, asyncContextProvider);\n     }\n \n     @Override\n     public void onSubscribe(final Flow.Subscription subscription) {\n-        checkClosed();\n         if (subscription == null) {\n             throw new NullPointerException(LocalizationMessages.PARAM_NULL(\"subscription\"));\n         }\n+        if (subscribed.getAndSet(true)) {\n+            subscription.cancel();\n+            return;\n+        }\n+\n         this.subscription = subscription;\n-        subscription.request(Long.MAX_VALUE);\n+        if (isClosed()) {\n+            subscription.cancel();\n+        } else {\n+            subscription.request(Long.MAX_VALUE);\n+        }\n     }\n \n \n     @Override\n-    public void onNext(final OutboundSseEvent item) {\n-        checkClosed();\n+    public void onNext(final Object item) {\n         if (item == null) {\n             throw new NullPointerException(LocalizationMessages.PARAM_NULL(\"outboundSseEvent\"));\n         }\n         try {\n-            write(item);\n-        } catch (final IOException e) {\n-            onError(e);\n+            checkClosed();\n+            MediaType implicitType = resolveMediaType(item);\n+            if (MediaType.SERVER_SENT_EVENTS_TYPE == implicitType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aed6eb4741ce964c139e008ee706384db0ec7a4b"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUwMDExMg==", "bodyText": "INFO ? It's an exception, we should not consume it silently with info level.\nMaybe catch IOException only, checkClosed is called just from onError, and the exeception is not propagated, so checkClosed should only log, not throw.", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r489500112", "createdAt": "2020-09-16T14:51:31Z", "author": {"login": "jansupol"}, "path": "media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java", "diffHunk": "@@ -39,55 +45,109 @@\n  * <p>\n  * The reference should be obtained via injection into the resource method.\n  *\n- * @author Adam Lindenthal]\n+ * @author Adam Lindenthal\n  */\n class JerseyEventSink extends ChunkedOutput<OutboundSseEvent>\n-        implements SseEventSink, Flushable, Flow.Subscriber<OutboundSseEvent> {\n+        implements SseEventSink, Flushable, JerseyFlowSubscriber<Object> {\n \n     private static final Logger LOGGER = Logger.getLogger(JerseyEventSink.class.getName());\n-    private static final byte[] SSE_EVENT_DELIMITER = \"\\n\".getBytes(Charset.forName(\"UTF-8\"));\n+    private static final byte[] SSE_EVENT_DELIMITER = \"\\n\".getBytes(StandardCharsets.UTF_8);\n     private Flow.Subscription subscription = null;\n+    private final AtomicBoolean subscribed = new AtomicBoolean(false);\n+    private volatile MediaType implicitMediaType = null;\n+\n+    private static final Map<Class<?>, MediaType> IMPLICIT_MEDIA_TYPE;\n+\n+    static {\n+        Map<Class<?>, MediaType> map = new HashMap<>(8);\n+\n+        // Already wrapped\n+        map.put(OutboundSseEvent.class, MediaType.SERVER_SENT_EVENTS_TYPE);\n+\n+        // No wrapping for raw types\n+        map.put(String.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Character.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Boolean.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Byte.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Short.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Integer.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Long.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Double.class, MediaType.TEXT_PLAIN_TYPE);\n+\n+        IMPLICIT_MEDIA_TYPE = Collections.unmodifiableMap(map);\n+    }\n \n     JerseyEventSink(Provider<AsyncContext> asyncContextProvider) {\n         super(SSE_EVENT_DELIMITER, asyncContextProvider);\n     }\n \n     @Override\n     public void onSubscribe(final Flow.Subscription subscription) {\n-        checkClosed();\n         if (subscription == null) {\n             throw new NullPointerException(LocalizationMessages.PARAM_NULL(\"subscription\"));\n         }\n+        if (subscribed.getAndSet(true)) {\n+            subscription.cancel();\n+            return;\n+        }\n+\n         this.subscription = subscription;\n-        subscription.request(Long.MAX_VALUE);\n+        if (isClosed()) {\n+            subscription.cancel();\n+        } else {\n+            subscription.request(Long.MAX_VALUE);\n+        }\n     }\n \n \n     @Override\n-    public void onNext(final OutboundSseEvent item) {\n-        checkClosed();\n+    public void onNext(final Object item) {\n         if (item == null) {\n             throw new NullPointerException(LocalizationMessages.PARAM_NULL(\"outboundSseEvent\"));\n         }\n         try {\n-            write(item);\n-        } catch (final IOException e) {\n-            onError(e);\n+            checkClosed();\n+            MediaType implicitType = resolveMediaType(item);\n+            if (MediaType.SERVER_SENT_EVENTS_TYPE == implicitType) {\n+                // already wrapped\n+                write((OutboundSseEvent) item);\n+            } else {\n+                // implicit wrapping\n+                // TODO: Jersey annotation for explicit media type\n+                write(new OutboundEvent.Builder()\n+                        .mediaType(implicitType)\n+                        .data(item)\n+                        .build());\n+            }\n+        } catch (final Throwable e) {\n+            LOGGER.log(Level.INFO, LocalizationMessages.EVENT_SOURCE_DEFAULT_ONERROR(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aed6eb4741ce964c139e008ee706384db0ec7a4b"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUyNTQ4NQ==", "bodyText": "Can you name this cancelSubscription()?", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r489525485", "createdAt": "2020-09-16T15:24:52Z", "author": {"login": "jansupol"}, "path": "media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java", "diffHunk": "@@ -118,15 +180,30 @@ public void flush() throws IOException {\n         super.flushQueue();\n     }\n \n-    public void onComplete() {\n-        checkClosed();\n-        subscription.cancel();\n-        close();\n+    @Override\n+    protected void onClose(Exception e) {\n+        cancelUpstream();\n+    }\n+\n+    private void cancelUpstream() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aed6eb4741ce964c139e008ee706384db0ec7a4b"}, "originalPosition": 189}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzMDMyNzIx", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#pullrequestreview-493032721", "createdAt": "2020-09-21T22:48:10Z", "commit": {"oid": "c7e62e3fa332c1c1c8720f9d3edef87d5bd4d4cb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMjo0ODoxMFrOHVlB2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMjo0ODoxMFrOHVlB2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM4ODgyNw==", "bodyText": "Character, String and Boolean are final classes. Faster is just to compare them.", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r492388827", "createdAt": "2020-09-21T22:48:10Z", "author": {"login": "jansupol"}, "path": "media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java", "diffHunk": "@@ -118,15 +158,38 @@ public void flush() throws IOException {\n         super.flushQueue();\n     }\n \n-    public void onComplete() {\n-        checkClosed();\n-        subscription.cancel();\n-        close();\n+    @Override\n+    protected void onClose(Exception e) {\n+        cancelSubscription();\n+    }\n+\n+    private void cancelSubscription() {\n+        if (subscription != null) {\n+            subscription.cancel();\n+        }\n     }\n \n     private void checkClosed() {\n         if (isClosed()) {\n+            cancelSubscription();\n             throw new IllegalStateException(LocalizationMessages.EVENT_SOURCE_ALREADY_CLOSED());\n         }\n     }\n+\n+    private MediaType resolveMediaType(Object item) {\n+        // all stream is presumed to be of items with same type\n+        if (implicitMediaType == null) {\n+            Class<?> clazz = item.getClass();\n+            if (Number.class.isAssignableFrom(clazz)\n+                    || Character.class.isAssignableFrom(clazz)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7e62e3fa332c1c1c8720f9d3edef87d5bd4d4cb"}, "originalPosition": 189}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzNjk2MDg4", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#pullrequestreview-493696088", "createdAt": "2020-09-22T17:35:09Z", "commit": {"oid": "cb5eca992134d8d4e340bfee27d8fa0935474944"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2ba4868a8b50f3b74665db589efcd5024cc4b0a", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/eclipse-ee4j/jersey/commit/e2ba4868a8b50f3b74665db589efcd5024cc4b0a", "committedDate": "2020-09-23T13:54:56Z", "message": "SSE Flow.Subscriber injectable as event sink\n\n  * Java Flow api used only by JerseyEventSink in java 11+\n  * Reactive streams tck tests for JerseyEventSink\n  * Cancel on close propagation\n  * Remove tests contradicting reactive streams spec https://github.com/reactive-streams/reactive-streams-jvm#2.13\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cb5eca992134d8d4e340bfee27d8fa0935474944", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/eclipse-ee4j/jersey/commit/cb5eca992134d8d4e340bfee27d8fa0935474944", "committedDate": "2020-09-22T14:29:14Z", "message": "doc fix 2\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}, "afterCommit": {"oid": "e2ba4868a8b50f3b74665db589efcd5024cc4b0a", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/eclipse-ee4j/jersey/commit/e2ba4868a8b50f3b74665db589efcd5024cc4b0a", "committedDate": "2020-09-23T13:54:56Z", "message": "SSE Flow.Subscriber injectable as event sink\n\n  * Java Flow api used only by JerseyEventSink in java 11+\n  * Reactive streams tck tests for JerseyEventSink\n  * Cancel on close propagation\n  * Remove tests contradicting reactive streams spec https://github.com/reactive-streams/reactive-streams-jvm#2.13\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0Njk5ODk0", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#pullrequestreview-494699894", "createdAt": "2020-09-23T14:07:11Z", "commit": {"oid": "e2ba4868a8b50f3b74665db589efcd5024cc4b0a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1249, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}