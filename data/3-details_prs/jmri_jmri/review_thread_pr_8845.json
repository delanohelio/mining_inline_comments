{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5OTI5NTMz", "number": 8845, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwODo1MjowOFrOEPCPgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOToxNjo0MlrOEPC1lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjAwODMyOnYy", "diffSide": "RIGHT", "path": "java/test/jmri/swing/PreferencesPanelTestBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwODo1MjowOFrOGyhaAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMjowNzoxNFrOGyn9wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYyOTMxNA==", "bodyText": "This class should use a generic PreferencesPanelTestBase<P extends PreferencesPanel> to avoid any potential need to cast prefsPanel to the tested class in the actual test classes.", "url": "https://github.com/JMRI/JMRI/pull/8845#discussion_r455629314", "createdAt": "2020-07-16T08:52:08Z", "author": {"login": "rhwood"}, "path": "java/test/jmri/swing/PreferencesPanelTestBase.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package jmri.swing;\n+\n+import jmri.util.JUnitUtil;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.assertj.core.api.Java6Assertions.assertThat;\n+import static org.assertj.core.api.Java6Assertions.catchThrowable;\n+\n+/**\n+ *  Base Tests for implementations of the PreferenesPanel interface.\n+ *\n+ * @author Paul Bender Colyright (C) 2020\n+ */\n+abstract public class PreferencesPanelTestBase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271ec3f36df8832d93f1390b4055a84aa14d1a8f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTczNjc2OA==", "bodyText": "thanks. will fix", "url": "https://github.com/JMRI/JMRI/pull/8845#discussion_r455736768", "createdAt": "2020-07-16T12:07:14Z", "author": {"login": "pabender"}, "path": "java/test/jmri/swing/PreferencesPanelTestBase.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package jmri.swing;\n+\n+import jmri.util.JUnitUtil;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.assertj.core.api.Java6Assertions.assertThat;\n+import static org.assertj.core.api.Java6Assertions.catchThrowable;\n+\n+/**\n+ *  Base Tests for implementations of the PreferenesPanel interface.\n+ *\n+ * @author Paul Bender Colyright (C) 2020\n+ */\n+abstract public class PreferencesPanelTestBase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYyOTMxNA=="}, "originalCommit": {"oid": "271ec3f36df8832d93f1390b4055a84aa14d1a8f"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjA1MDE0OnYy", "diffSide": "RIGHT", "path": "java/test/apps/FileLocationPaneTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTowMjoyOVrOGyhzTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMTo0Mzo1OVrOGynPRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYzNTc5MQ==", "bodyText": "We have not stipulated that all preferences tabs in a tabbed pane require a tooltip, so, yes, those classes that return null for the preferences tooltip should return null (the method that cares is javax.swing.JTabbedPane.insertTab(...) and it accepts null for a tooltip).", "url": "https://github.com/JMRI/JMRI/pull/8845#discussion_r455635791", "createdAt": "2020-07-16T09:02:29Z", "author": {"login": "rhwood"}, "path": "java/test/apps/FileLocationPaneTest.java", "diffHunk": "@@ -1,33 +1,41 @@\n package apps;\n \n+import jmri.InstanceManager;\n+import jmri.implementation.FileLocationsPreferences;\n+import jmri.swing.PreferencesPanelTestBase;\n import jmri.util.JUnitUtil;\n \n import org.junit.jupiter.api.*;\n import org.junit.Assert;\n import org.junit.Assume;\n+import org.mockito.Mockito;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n \n /**\n  *\n  * @author Paul Bender Copyright (C) 2017\n  */\n-public class FileLocationPaneTest {\n-\n-    @Test\n-    public void testCTor() {\n-        Assume.assumeFalse(java.awt.GraphicsEnvironment.isHeadless());\n-        \n-        FileLocationPane t = new FileLocationPane();\n-        Assert.assertNotNull(\"exists\",t);\n-    }\n+public class FileLocationPaneTest extends PreferencesPanelTestBase {\n \n     @BeforeEach\n     public void setUp() {\n         JUnitUtil.setUp();\n+        InstanceManager.setDefault(FileLocationsPreferences.class, Mockito.mock(FileLocationsPreferences.class));\n+        prefsPanel = new FileLocationPane();\n     }\n \n-    @AfterEach\n-    public void tearDown() {\n-        JUnitUtil.tearDown();\n+    @Override\n+    @Test\n+    public void isPersistant() {\n+        assertThat(prefsPanel.isPersistant()).isTrue();\n+    }\n+\n+    @Override\n+    @Test\n+    public void getPreferencesTooltip() {\n+        // should this actually return null?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271ec3f36df8832d93f1390b4055a84aa14d1a8f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTcyNDg3MQ==", "bodyText": "Thanks.  Will Fix", "url": "https://github.com/JMRI/JMRI/pull/8845#discussion_r455724871", "createdAt": "2020-07-16T11:43:59Z", "author": {"login": "pabender"}, "path": "java/test/apps/FileLocationPaneTest.java", "diffHunk": "@@ -1,33 +1,41 @@\n package apps;\n \n+import jmri.InstanceManager;\n+import jmri.implementation.FileLocationsPreferences;\n+import jmri.swing.PreferencesPanelTestBase;\n import jmri.util.JUnitUtil;\n \n import org.junit.jupiter.api.*;\n import org.junit.Assert;\n import org.junit.Assume;\n+import org.mockito.Mockito;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n \n /**\n  *\n  * @author Paul Bender Copyright (C) 2017\n  */\n-public class FileLocationPaneTest {\n-\n-    @Test\n-    public void testCTor() {\n-        Assume.assumeFalse(java.awt.GraphicsEnvironment.isHeadless());\n-        \n-        FileLocationPane t = new FileLocationPane();\n-        Assert.assertNotNull(\"exists\",t);\n-    }\n+public class FileLocationPaneTest extends PreferencesPanelTestBase {\n \n     @BeforeEach\n     public void setUp() {\n         JUnitUtil.setUp();\n+        InstanceManager.setDefault(FileLocationsPreferences.class, Mockito.mock(FileLocationsPreferences.class));\n+        prefsPanel = new FileLocationPane();\n     }\n \n-    @AfterEach\n-    public void tearDown() {\n-        JUnitUtil.tearDown();\n+    @Override\n+    @Test\n+    public void isPersistant() {\n+        assertThat(prefsPanel.isPersistant()).isTrue();\n+    }\n+\n+    @Override\n+    @Test\n+    public void getPreferencesTooltip() {\n+        // should this actually return null?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYzNTc5MQ=="}, "originalCommit": {"oid": "271ec3f36df8832d93f1390b4055a84aa14d1a8f"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjA2MjQxOnYy", "diffSide": "RIGHT", "path": "java/src/jmri/jmrit/consisttool/ConsistTool.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTowNTozNVrOGyh60g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMjoxMDo0OFrOGyoFMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYzNzcxNA==", "bodyText": "Tooltips should only be used when they can provide more information, and a tooltip displayed in the Preferences window over \"Consist Control\" that reads \"Preferences for the consist tool\" doesn't. I would remove this.", "url": "https://github.com/JMRI/JMRI/pull/8845#discussion_r455637714", "createdAt": "2020-07-16T09:05:35Z", "author": {"login": "rhwood"}, "path": "java/src/jmri/jmrit/consisttool/ConsistTool.properties", "diffHunk": "@@ -53,3 +53,4 @@ ScanConsists = Scan Roster for Consists\n WriteCVToRosterOption = Update CV19 in roster when modifying advanced consists\n WriteCVToRosterToolTip = When modifying advanced consists, CV19 is changed.  Selecting this option to update the roster entry, when known, when CV19 is updated.\n StartupConsistToolAction=Open Consisting Tool\n+ConsistPreferencesToolTip = Preferences for the consist tool.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271ec3f36df8832d93f1390b4055a84aa14d1a8f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTczODY3NA==", "bodyText": "thanks, will fix", "url": "https://github.com/JMRI/JMRI/pull/8845#discussion_r455738674", "createdAt": "2020-07-16T12:10:48Z", "author": {"login": "pabender"}, "path": "java/src/jmri/jmrit/consisttool/ConsistTool.properties", "diffHunk": "@@ -53,3 +53,4 @@ ScanConsists = Scan Roster for Consists\n WriteCVToRosterOption = Update CV19 in roster when modifying advanced consists\n WriteCVToRosterToolTip = When modifying advanced consists, CV19 is changed.  Selecting this option to update the roster entry, when known, when CV19 is updated.\n StartupConsistToolAction=Open Consisting Tool\n+ConsistPreferencesToolTip = Preferences for the consist tool.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYzNzcxNA=="}, "originalCommit": {"oid": "271ec3f36df8832d93f1390b4055a84aa14d1a8f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjA2OTQ2OnYy", "diffSide": "RIGHT", "path": "java/test/apps/ManagerDefaultsConfigPaneTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTowNzoyMlrOGyh_Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTowNzoyMlrOGyh_Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYzODgwNg==", "bodyText": "Yes it should.", "url": "https://github.com/JMRI/JMRI/pull/8845#discussion_r455638806", "createdAt": "2020-07-16T09:07:22Z", "author": {"login": "rhwood"}, "path": "java/test/apps/ManagerDefaultsConfigPaneTest.java", "diffHunk": "@@ -1,35 +1,39 @@\n package apps;\n \n+import jmri.swing.PreferencesPanelTestBase;\n import jmri.util.JUnitUtil;\n \n import org.junit.jupiter.api.*;\n-import org.junit.Assert;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n \n /**\n  *\n  * @author Paul Bender Copyright (C) 2017\n  */\n-public class ManagerDefaultsConfigPaneTest {\n-\n-    @Test\n-    public void testCTor() {\n-        ManagerDefaultsConfigPane t = new ManagerDefaultsConfigPane();\n-        Assert.assertNotNull(\"exists\",t);\n-    }\n+public class ManagerDefaultsConfigPaneTest extends PreferencesPanelTestBase {\n \n     @BeforeEach\n     public void setUp() {\n         JUnitUtil.setUp();\n         JUnitUtil.resetInstanceManager();\n         JUnitUtil.resetPreferencesProviders();\n         JUnitUtil.initConfigureManager();\n+        prefsPanel = new ManagerDefaultsConfigPane();\n     }\n \n-    @AfterEach\n-    public void tearDown() {\n-        JUnitUtil.tearDown();\n+    @Override\n+    @Test\n+    public void isPersistant() {\n+        assertThat(prefsPanel.isPersistant()).isTrue();\n     }\n \n+    @Override\n+    @Test\n+    public void getPreferencesTooltip() {\n+        // should this actually return null?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271ec3f36df8832d93f1390b4055a84aa14d1a8f"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjA3MDM1OnYy", "diffSide": "RIGHT", "path": "java/test/apps/SystemConsoleConfigPanelTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTowNzozNVrOGyh_rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTowNzozNVrOGyh_rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYzODk1Ng==", "bodyText": "Yes, it should.", "url": "https://github.com/JMRI/JMRI/pull/8845#discussion_r455638956", "createdAt": "2020-07-16T09:07:35Z", "author": {"login": "rhwood"}, "path": "java/test/apps/SystemConsoleConfigPanelTest.java", "diffHunk": "@@ -1,33 +1,38 @@\n package apps;\n \n+import jmri.swing.PreferencesPanelTestBase;\n import jmri.util.JUnitUtil;\n \n import org.junit.jupiter.api.*;\n-import org.junit.Assert;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n \n /**\n  *\n  * @author Paul Bender Copyright (C) 2017\n  */\n-public class SystemConsoleConfigPanelTest {\n-\n-    @Test\n-    public void testCTor() {\n-        SystemConsoleConfigPanel t = new SystemConsoleConfigPanel();\n-        Assert.assertNotNull(\"exists\",t);\n-    }\n+public class SystemConsoleConfigPanelTest extends PreferencesPanelTestBase {\n \n+    @Override\n     @BeforeEach\n     public void setUp() {\n         JUnitUtil.setUp();\n         jmri.InstanceManager.setDefault(apps.systemconsole.SystemConsolePreferencesManager.class,new apps.systemconsole.SystemConsolePreferencesManager());\n+        prefsPanel = new SystemConsoleConfigPanel();\n     }\n \n-    @AfterEach\n-    public void tearDown() {\n-        JUnitUtil.tearDown();\n+    @Override\n+    @Test\n+    public void isPersistant() {\n+        assertThat(prefsPanel.isPersistant()).isTrue();\n     }\n \n+    @Override\n+    @Test\n+    public void getPreferencesTooltip() {\n+        // should this actually return null?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271ec3f36df8832d93f1390b4055a84aa14d1a8f"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjA3MjI4OnYy", "diffSide": "RIGHT", "path": "java/test/apps/startup/StartupActionsPreferencesPanelTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTowODowNVrOGyiA2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMTo0ODozOVrOGynZAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYzOTI1Nw==", "bodyText": "Yes, it should.", "url": "https://github.com/JMRI/JMRI/pull/8845#discussion_r455639257", "createdAt": "2020-07-16T09:08:05Z", "author": {"login": "rhwood"}, "path": "java/test/apps/startup/StartupActionsPreferencesPanelTest.java", "diffHunk": "@@ -1,32 +1,52 @@\n package apps.startup;\n \n+import jmri.swing.PreferencesPanelTestBase;\n import jmri.util.JUnitUtil;\n \n import org.junit.jupiter.api.*;\n import org.junit.Assert;\n \n+import static org.assertj.core.api.Assertions.assertThat;\n+\n /**\n- *\n  * @author Paul Bender Copyright (C) 2017\n  */\n-public class StartupActionsPreferencesPanelTest {\n+public class StartupActionsPreferencesPanelTest extends PreferencesPanelTestBase {\n+\n+    @Override\n+    @BeforeEach\n+    public void setUp() {\n+        JUnitUtil.setUp();\n+        jmri.util.JUnitUtil.initStartupActionsManager();\n+        prefsPanel = new StartupActionsPreferencesPanel();\n+    }\n \n+    @Override\n     @Test\n-    public void testCTor() {\n-        StartupActionsPreferencesPanel t = new StartupActionsPreferencesPanel();\n-        Assert.assertNotNull(\"exists\",t);\n+    public void getLabelKey(){\n+        // This class returns null for label key, but should it?\n+        assertThat(prefsPanel.getLabelKey()).isNull();\n     }\n \n-    @BeforeEach\n-    public void setUp() {\n-        JUnitUtil.setUp();        jmri.util.JUnitUtil.initStartupActionsManager();\n+    @Override\n+    @Test\n+    public void getPreferencesTooltip(){\n+        // This class returns null for preferences tool tip, but should it?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271ec3f36df8832d93f1390b4055a84aa14d1a8f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTcyNzM2MQ==", "bodyText": "thanks. will fix.", "url": "https://github.com/JMRI/JMRI/pull/8845#discussion_r455727361", "createdAt": "2020-07-16T11:48:39Z", "author": {"login": "pabender"}, "path": "java/test/apps/startup/StartupActionsPreferencesPanelTest.java", "diffHunk": "@@ -1,32 +1,52 @@\n package apps.startup;\n \n+import jmri.swing.PreferencesPanelTestBase;\n import jmri.util.JUnitUtil;\n \n import org.junit.jupiter.api.*;\n import org.junit.Assert;\n \n+import static org.assertj.core.api.Assertions.assertThat;\n+\n /**\n- *\n  * @author Paul Bender Copyright (C) 2017\n  */\n-public class StartupActionsPreferencesPanelTest {\n+public class StartupActionsPreferencesPanelTest extends PreferencesPanelTestBase {\n+\n+    @Override\n+    @BeforeEach\n+    public void setUp() {\n+        JUnitUtil.setUp();\n+        jmri.util.JUnitUtil.initStartupActionsManager();\n+        prefsPanel = new StartupActionsPreferencesPanel();\n+    }\n \n+    @Override\n     @Test\n-    public void testCTor() {\n-        StartupActionsPreferencesPanel t = new StartupActionsPreferencesPanel();\n-        Assert.assertNotNull(\"exists\",t);\n+    public void getLabelKey(){\n+        // This class returns null for label key, but should it?\n+        assertThat(prefsPanel.getLabelKey()).isNull();\n     }\n \n-    @BeforeEach\n-    public void setUp() {\n-        JUnitUtil.setUp();        jmri.util.JUnitUtil.initStartupActionsManager();\n+    @Override\n+    @Test\n+    public void getPreferencesTooltip(){\n+        // This class returns null for preferences tool tip, but should it?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYzOTI1Nw=="}, "originalCommit": {"oid": "271ec3f36df8832d93f1390b4055a84aa14d1a8f"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjA3OTEzOnYy", "diffSide": "RIGHT", "path": "java/test/apps/startup/StartupActionsPreferencesPanelTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTowOTo0NlrOGyiFHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMTo0OTowNlrOGynZ9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY0MDM1MA==", "bodyText": "Since a preferences panel controls if it is put into a tab with another preference panel or not, you should expect that preferences panels that are not under tabs will return null for the title for the tab.", "url": "https://github.com/JMRI/JMRI/pull/8845#discussion_r455640350", "createdAt": "2020-07-16T09:09:46Z", "author": {"login": "rhwood"}, "path": "java/test/apps/startup/StartupActionsPreferencesPanelTest.java", "diffHunk": "@@ -1,32 +1,52 @@\n package apps.startup;\n \n+import jmri.swing.PreferencesPanelTestBase;\n import jmri.util.JUnitUtil;\n \n import org.junit.jupiter.api.*;\n import org.junit.Assert;\n \n+import static org.assertj.core.api.Assertions.assertThat;\n+\n /**\n- *\n  * @author Paul Bender Copyright (C) 2017\n  */\n-public class StartupActionsPreferencesPanelTest {\n+public class StartupActionsPreferencesPanelTest extends PreferencesPanelTestBase {\n+\n+    @Override\n+    @BeforeEach\n+    public void setUp() {\n+        JUnitUtil.setUp();\n+        jmri.util.JUnitUtil.initStartupActionsManager();\n+        prefsPanel = new StartupActionsPreferencesPanel();\n+    }\n \n+    @Override\n     @Test\n-    public void testCTor() {\n-        StartupActionsPreferencesPanel t = new StartupActionsPreferencesPanel();\n-        Assert.assertNotNull(\"exists\",t);\n+    public void getLabelKey(){\n+        // This class returns null for label key, but should it?\n+        assertThat(prefsPanel.getLabelKey()).isNull();\n     }\n \n-    @BeforeEach\n-    public void setUp() {\n-        JUnitUtil.setUp();        jmri.util.JUnitUtil.initStartupActionsManager();\n+    @Override\n+    @Test\n+    public void getPreferencesTooltip(){\n+        // This class returns null for preferences tool tip, but should it?\n+        assertThat(prefsPanel.getPreferencesTooltip()).isNull();\n     }\n \n-    @AfterEach\n-    public void tearDown() {\n-        JUnitUtil.tearDown();\n+    @Override\n+    @Test\n+    public void getTabbedPreferencesTitle(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271ec3f36df8832d93f1390b4055a84aa14d1a8f"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTcyNzYwNw==", "bodyText": "thanks.  will fix.", "url": "https://github.com/JMRI/JMRI/pull/8845#discussion_r455727607", "createdAt": "2020-07-16T11:49:06Z", "author": {"login": "pabender"}, "path": "java/test/apps/startup/StartupActionsPreferencesPanelTest.java", "diffHunk": "@@ -1,32 +1,52 @@\n package apps.startup;\n \n+import jmri.swing.PreferencesPanelTestBase;\n import jmri.util.JUnitUtil;\n \n import org.junit.jupiter.api.*;\n import org.junit.Assert;\n \n+import static org.assertj.core.api.Assertions.assertThat;\n+\n /**\n- *\n  * @author Paul Bender Copyright (C) 2017\n  */\n-public class StartupActionsPreferencesPanelTest {\n+public class StartupActionsPreferencesPanelTest extends PreferencesPanelTestBase {\n+\n+    @Override\n+    @BeforeEach\n+    public void setUp() {\n+        JUnitUtil.setUp();\n+        jmri.util.JUnitUtil.initStartupActionsManager();\n+        prefsPanel = new StartupActionsPreferencesPanel();\n+    }\n \n+    @Override\n     @Test\n-    public void testCTor() {\n-        StartupActionsPreferencesPanel t = new StartupActionsPreferencesPanel();\n-        Assert.assertNotNull(\"exists\",t);\n+    public void getLabelKey(){\n+        // This class returns null for label key, but should it?\n+        assertThat(prefsPanel.getLabelKey()).isNull();\n     }\n \n-    @BeforeEach\n-    public void setUp() {\n-        JUnitUtil.setUp();        jmri.util.JUnitUtil.initStartupActionsManager();\n+    @Override\n+    @Test\n+    public void getPreferencesTooltip(){\n+        // This class returns null for preferences tool tip, but should it?\n+        assertThat(prefsPanel.getPreferencesTooltip()).isNull();\n     }\n \n-    @AfterEach\n-    public void tearDown() {\n-        JUnitUtil.tearDown();\n+    @Override\n+    @Test\n+    public void getTabbedPreferencesTitle(){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY0MDM1MA=="}, "originalCommit": {"oid": "271ec3f36df8832d93f1390b4055a84aa14d1a8f"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjA4NjU4OnYy", "diffSide": "RIGHT", "path": "java/test/jmri/jmris/json/JsonServerPreferencesPanelTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOToxMTozOFrOGyiJuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMTo1NToyMVrOGynmYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY0MTUyOA==", "bodyText": "The only preferences panels that should not be returning null label keys are preferences panels that are tabbed together with other preferences panels. Panels showing up in the list on the preferences window should be returning null for label keys.", "url": "https://github.com/JMRI/JMRI/pull/8845#discussion_r455641528", "createdAt": "2020-07-16T09:11:38Z", "author": {"login": "rhwood"}, "path": "java/test/jmri/jmris/json/JsonServerPreferencesPanelTest.java", "diffHunk": "@@ -11,23 +12,21 @@\n  *\n  * @author Paul Bender Copyright (C) 2017\n  */\n-public class JsonServerPreferencesPanelTest {\n-\n-    @Test\n-    public void testCTor() {\n-        JsonServerPreferencesPanel t = new JsonServerPreferencesPanel();\n-        assertThat(t).withFailMessage(\"exists\").isNotNull();\n-    }\n+public class JsonServerPreferencesPanelTest extends PreferencesPanelTestBase {\n \n+    @Override\n     @BeforeEach\n     public void setUp() {\n         JUnitUtil.setUp();\n         jmri.util.JUnitUtil.resetProfileManager();\n+        prefsPanel = new JsonServerPreferencesPanel();\n     }\n \n-    @AfterEach\n-    public void tearDown() {\n-        JUnitUtil.tearDown();\n+    @Override\n+    @Test\n+    public void getLabelKey(){\n+        // This class returns null for label key, but should it?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271ec3f36df8832d93f1390b4055a84aa14d1a8f"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTczMDc4NQ==", "bodyText": "Thanks, will fix", "url": "https://github.com/JMRI/JMRI/pull/8845#discussion_r455730785", "createdAt": "2020-07-16T11:55:21Z", "author": {"login": "pabender"}, "path": "java/test/jmri/jmris/json/JsonServerPreferencesPanelTest.java", "diffHunk": "@@ -11,23 +12,21 @@\n  *\n  * @author Paul Bender Copyright (C) 2017\n  */\n-public class JsonServerPreferencesPanelTest {\n-\n-    @Test\n-    public void testCTor() {\n-        JsonServerPreferencesPanel t = new JsonServerPreferencesPanel();\n-        assertThat(t).withFailMessage(\"exists\").isNotNull();\n-    }\n+public class JsonServerPreferencesPanelTest extends PreferencesPanelTestBase {\n \n+    @Override\n     @BeforeEach\n     public void setUp() {\n         JUnitUtil.setUp();\n         jmri.util.JUnitUtil.resetProfileManager();\n+        prefsPanel = new JsonServerPreferencesPanel();\n     }\n \n-    @AfterEach\n-    public void tearDown() {\n-        JUnitUtil.tearDown();\n+    @Override\n+    @Test\n+    public void getLabelKey(){\n+        // This class returns null for label key, but should it?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY0MTUyOA=="}, "originalCommit": {"oid": "271ec3f36df8832d93f1390b4055a84aa14d1a8f"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjEwNDc3OnYy", "diffSide": "RIGHT", "path": "java/test/jmri/swing/PreferencesPanelTestBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOToxNjoyNVrOGyiU4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMjowNzo1NFrOGyn_Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY0NDM4NA==", "bodyText": "Since the PreferencesPanel interface stipulates no requirement of nullness, this test should not assert is not null. If it is to assert anything, it should assert there is no exception.", "url": "https://github.com/JMRI/JMRI/pull/8845#discussion_r455644384", "createdAt": "2020-07-16T09:16:25Z", "author": {"login": "rhwood"}, "path": "java/test/jmri/swing/PreferencesPanelTestBase.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package jmri.swing;\n+\n+import jmri.util.JUnitUtil;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.assertj.core.api.Java6Assertions.assertThat;\n+import static org.assertj.core.api.Java6Assertions.catchThrowable;\n+\n+/**\n+ *  Base Tests for implementations of the PreferenesPanel interface.\n+ *\n+ * @author Paul Bender Colyright (C) 2020\n+ */\n+abstract public class PreferencesPanelTestBase {\n+\n+    protected PreferencesPanel prefsPanel;\n+\n+    /**\n+     * Implementing classes should set the value of prefsPanel in setUp.\n+     */\n+    @BeforeEach\n+    abstract public void setUp();\n+\n+    @AfterEach\n+    public void tearDown(){\n+        prefsPanel = null;\n+        JUnitUtil.tearDown();\n+    }\n+\n+    @Test\n+    public void testCtor(){\n+        assertThat(prefsPanel).isNotNull();\n+    }\n+\n+    @Test\n+    public void getPreferencesItem() {\n+        assertThat(prefsPanel.getPreferencesItem()).isNotNull();\n+    }\n+\n+    @Test\n+    public void getPreferencesItemText() {\n+        assertThat(prefsPanel.getPreferencesItemText()).isNotNull();\n+    }\n+\n+    @Test\n+    public void getTabbedPreferencesTitle() {\n+        assertThat(prefsPanel.getTabbedPreferencesTitle()).isNotNull();\n+    }\n+\n+    @Test\n+    public void getLabelKey() {\n+        assertThat(prefsPanel.getLabelKey()).isNotNull();\n+    }\n+\n+    @Test\n+    public void getPreferencesComponent() {\n+        assertThat(prefsPanel.getPreferencesComponent()).isNotNull();\n+    }\n+\n+    @Test\n+    public void isPersistant() {\n+        assertThat(prefsPanel.isPersistant()).isFalse();\n+    }\n+\n+    @Test\n+    public void getPreferencesTooltip() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271ec3f36df8832d93f1390b4055a84aa14d1a8f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTczNzEyMg==", "bodyText": "thanks, will fix", "url": "https://github.com/JMRI/JMRI/pull/8845#discussion_r455737122", "createdAt": "2020-07-16T12:07:54Z", "author": {"login": "pabender"}, "path": "java/test/jmri/swing/PreferencesPanelTestBase.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package jmri.swing;\n+\n+import jmri.util.JUnitUtil;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.assertj.core.api.Java6Assertions.assertThat;\n+import static org.assertj.core.api.Java6Assertions.catchThrowable;\n+\n+/**\n+ *  Base Tests for implementations of the PreferenesPanel interface.\n+ *\n+ * @author Paul Bender Colyright (C) 2020\n+ */\n+abstract public class PreferencesPanelTestBase {\n+\n+    protected PreferencesPanel prefsPanel;\n+\n+    /**\n+     * Implementing classes should set the value of prefsPanel in setUp.\n+     */\n+    @BeforeEach\n+    abstract public void setUp();\n+\n+    @AfterEach\n+    public void tearDown(){\n+        prefsPanel = null;\n+        JUnitUtil.tearDown();\n+    }\n+\n+    @Test\n+    public void testCtor(){\n+        assertThat(prefsPanel).isNotNull();\n+    }\n+\n+    @Test\n+    public void getPreferencesItem() {\n+        assertThat(prefsPanel.getPreferencesItem()).isNotNull();\n+    }\n+\n+    @Test\n+    public void getPreferencesItemText() {\n+        assertThat(prefsPanel.getPreferencesItemText()).isNotNull();\n+    }\n+\n+    @Test\n+    public void getTabbedPreferencesTitle() {\n+        assertThat(prefsPanel.getTabbedPreferencesTitle()).isNotNull();\n+    }\n+\n+    @Test\n+    public void getLabelKey() {\n+        assertThat(prefsPanel.getLabelKey()).isNotNull();\n+    }\n+\n+    @Test\n+    public void getPreferencesComponent() {\n+        assertThat(prefsPanel.getPreferencesComponent()).isNotNull();\n+    }\n+\n+    @Test\n+    public void isPersistant() {\n+        assertThat(prefsPanel.isPersistant()).isFalse();\n+    }\n+\n+    @Test\n+    public void getPreferencesTooltip() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY0NDM4NA=="}, "originalCommit": {"oid": "271ec3f36df8832d93f1390b4055a84aa14d1a8f"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjEwNTgwOnYy", "diffSide": "RIGHT", "path": "java/test/jmri/swing/PreferencesPanelTestBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOToxNjo0MlrOGyiVjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMjowNzo0MlrOGyn-oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY0NDU1OA==", "bodyText": "Since the PreferencesPanel interface stipulates no requirement of nullness, this test should not assert is not null. If it is to assert anything, it should assert there is no exception.", "url": "https://github.com/JMRI/JMRI/pull/8845#discussion_r455644558", "createdAt": "2020-07-16T09:16:42Z", "author": {"login": "rhwood"}, "path": "java/test/jmri/swing/PreferencesPanelTestBase.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package jmri.swing;\n+\n+import jmri.util.JUnitUtil;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.assertj.core.api.Java6Assertions.assertThat;\n+import static org.assertj.core.api.Java6Assertions.catchThrowable;\n+\n+/**\n+ *  Base Tests for implementations of the PreferenesPanel interface.\n+ *\n+ * @author Paul Bender Colyright (C) 2020\n+ */\n+abstract public class PreferencesPanelTestBase {\n+\n+    protected PreferencesPanel prefsPanel;\n+\n+    /**\n+     * Implementing classes should set the value of prefsPanel in setUp.\n+     */\n+    @BeforeEach\n+    abstract public void setUp();\n+\n+    @AfterEach\n+    public void tearDown(){\n+        prefsPanel = null;\n+        JUnitUtil.tearDown();\n+    }\n+\n+    @Test\n+    public void testCtor(){\n+        assertThat(prefsPanel).isNotNull();\n+    }\n+\n+    @Test\n+    public void getPreferencesItem() {\n+        assertThat(prefsPanel.getPreferencesItem()).isNotNull();\n+    }\n+\n+    @Test\n+    public void getPreferencesItemText() {\n+        assertThat(prefsPanel.getPreferencesItemText()).isNotNull();\n+    }\n+\n+    @Test\n+    public void getTabbedPreferencesTitle() {\n+        assertThat(prefsPanel.getTabbedPreferencesTitle()).isNotNull();\n+    }\n+\n+    @Test\n+    public void getLabelKey() {\n+        assertThat(prefsPanel.getLabelKey()).isNotNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271ec3f36df8832d93f1390b4055a84aa14d1a8f"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTczNjk5Mw==", "bodyText": "thanks, will fix", "url": "https://github.com/JMRI/JMRI/pull/8845#discussion_r455736993", "createdAt": "2020-07-16T12:07:42Z", "author": {"login": "pabender"}, "path": "java/test/jmri/swing/PreferencesPanelTestBase.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package jmri.swing;\n+\n+import jmri.util.JUnitUtil;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.assertj.core.api.Java6Assertions.assertThat;\n+import static org.assertj.core.api.Java6Assertions.catchThrowable;\n+\n+/**\n+ *  Base Tests for implementations of the PreferenesPanel interface.\n+ *\n+ * @author Paul Bender Colyright (C) 2020\n+ */\n+abstract public class PreferencesPanelTestBase {\n+\n+    protected PreferencesPanel prefsPanel;\n+\n+    /**\n+     * Implementing classes should set the value of prefsPanel in setUp.\n+     */\n+    @BeforeEach\n+    abstract public void setUp();\n+\n+    @AfterEach\n+    public void tearDown(){\n+        prefsPanel = null;\n+        JUnitUtil.tearDown();\n+    }\n+\n+    @Test\n+    public void testCtor(){\n+        assertThat(prefsPanel).isNotNull();\n+    }\n+\n+    @Test\n+    public void getPreferencesItem() {\n+        assertThat(prefsPanel.getPreferencesItem()).isNotNull();\n+    }\n+\n+    @Test\n+    public void getPreferencesItemText() {\n+        assertThat(prefsPanel.getPreferencesItemText()).isNotNull();\n+    }\n+\n+    @Test\n+    public void getTabbedPreferencesTitle() {\n+        assertThat(prefsPanel.getTabbedPreferencesTitle()).isNotNull();\n+    }\n+\n+    @Test\n+    public void getLabelKey() {\n+        assertThat(prefsPanel.getLabelKey()).isNotNull();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY0NDU1OA=="}, "originalCommit": {"oid": "271ec3f36df8832d93f1390b4055a84aa14d1a8f"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4516, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}