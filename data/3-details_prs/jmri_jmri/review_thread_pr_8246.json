{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4NzY0NTAz", "number": 8246, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNzo1MTozOVrODoIZFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNzo1Mjo1MFrODoIZWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDA3MTI2OnYy", "diffSide": "RIGHT", "path": "java/src/jmri/util/ImmediatePipeOutputStream.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNzo1MTozOVrOF2gS4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNzo1MTozOVrOF2gS4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY5NjU0NQ==", "bodyText": "Can you rename this class from ImmediatePipeOutputStream to ImmediatePipedOutputStream (Piped instead of Pipe)?", "url": "https://github.com/JMRI/JMRI/pull/8246#discussion_r392696545", "createdAt": "2020-03-15T17:51:39Z", "author": {"login": "rhwood"}, "path": "java/src/jmri/util/ImmediatePipeOutputStream.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package jmri.util;\n+\n+import java.io.IOException;\n+import java.io.PipedInputStream;\n+import java.io.PipedOutputStream;\n+\n+/**\n+ * Makes a workaround for standard {@link PipedOutputStream} wait.\n+ * <p>The {@link PipedInputStream#read()}, in case the receive buffer is\n+ * empty at the time of the call, waits for up to 1000ms.\n+ * {@link PipedOutputStream#write(int)} does call <code>sink.receive</code>,\n+ * but does not <code>notify()</code> the sink object so that read's\n+ * wait() terminates.\n+ * </p><p>\n+ * As a result, the read side of the pipe waits full 1000ms even though data\n+ * become available during the wait.\n+ * </p><p>\n+ * The workaround is to simply {@link PipedOutputStream#flush} after write,\n+ * which returns from wait()s immediately.\n+ * </p>\n+ */\n+public class ImmediatePipeOutputStream extends PipedOutputStream {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88c3109c08a330c433b2b92307362c00bc9c3ef0"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDA3MTk1OnYy", "diffSide": "RIGHT", "path": "java/src/jmri/util/ImmediatePipeOutputStream.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNzo1Mjo1MFrOF2gTRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxODo0MTo1M1rOF2gjEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY5NjY0NQ==", "bodyText": "The terminating </p> is not needed in Javadocs, and just makes it harder to read. Can you remove these?", "url": "https://github.com/JMRI/JMRI/pull/8246#discussion_r392696645", "createdAt": "2020-03-15T17:52:50Z", "author": {"login": "rhwood"}, "path": "java/src/jmri/util/ImmediatePipeOutputStream.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package jmri.util;\n+\n+import java.io.IOException;\n+import java.io.PipedInputStream;\n+import java.io.PipedOutputStream;\n+\n+/**\n+ * Makes a workaround for standard {@link PipedOutputStream} wait.\n+ * <p>The {@link PipedInputStream#read()}, in case the receive buffer is\n+ * empty at the time of the call, waits for up to 1000ms.\n+ * {@link PipedOutputStream#write(int)} does call <code>sink.receive</code>,\n+ * but does not <code>notify()</code> the sink object so that read's\n+ * wait() terminates.\n+ * </p><p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88c3109c08a330c433b2b92307362c00bc9c3ef0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcwMDY5MA==", "bodyText": "I will fix that, but that actually was copied verbatim from what @svatoun wrote in #8213.", "url": "https://github.com/JMRI/JMRI/pull/8246#discussion_r392700690", "createdAt": "2020-03-15T18:41:53Z", "author": {"login": "pabender"}, "path": "java/src/jmri/util/ImmediatePipeOutputStream.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package jmri.util;\n+\n+import java.io.IOException;\n+import java.io.PipedInputStream;\n+import java.io.PipedOutputStream;\n+\n+/**\n+ * Makes a workaround for standard {@link PipedOutputStream} wait.\n+ * <p>The {@link PipedInputStream#read()}, in case the receive buffer is\n+ * empty at the time of the call, waits for up to 1000ms.\n+ * {@link PipedOutputStream#write(int)} does call <code>sink.receive</code>,\n+ * but does not <code>notify()</code> the sink object so that read's\n+ * wait() terminates.\n+ * </p><p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY5NjY0NQ=="}, "originalCommit": {"oid": "88c3109c08a330c433b2b92307362c00bc9c3ef0"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4653, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}