{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MzIzOTA3", "number": 8716, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNDo1MTo1NlrOEHbTtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNDo1MTo1NlrOEHbTtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjIyOTAxOnYy", "diffSide": "RIGHT", "path": "java/src/jmri/managers/AbstractProxyManager.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNDo1MTo1NlrOGmx20Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDozMzo1NFrOGnsOWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMxNTkyMQ==", "bodyText": "I think it would be good to send the event on muted -> false regardless of which propertyName is provided.  Otherwise somebody is going to track code other property some day and get a confusing surprise.\n\n\nIs the behavior specified if setPropertyChangeMuted(.. , false) is called twice?", "url": "https://github.com/JMRI/JMRI/pull/8716#discussion_r443315921", "createdAt": "2020-06-22T04:51:56Z", "author": {"login": "bobjacobsen"}, "path": "java/src/jmri/managers/AbstractProxyManager.java", "diffHunk": "@@ -613,6 +615,18 @@ protected void recomputeNamedBeanSet() {\n         return Collections.unmodifiableSortedSet(namedBeanSet);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    @OverridingMethodsMustInvokeSuper\n+    public void setPropertyChangesMuted(String propertyName, boolean muted) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd84dc78b2cc6433f336c7d388c611d998100078"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ0NDMzNA==", "bodyText": "I think it would be good to send the event on muted -> false regardless of which propertyName is provided.  Otherwise somebody is going to track code other property some day and get a confusing surprise.\n\n\nI'll have to think about how to do that. A naive approach would be to just always fire a PropertyChangeEvent with null property values whenever setting muted to false. A more sophisticated approach would involve retaining the old value and sending the current value for any property that is muted while it is muted, and then firing the event with the old value and the current value when unmuted a muted property.\n\n\nIs the behavior specified if setPropertyChangeMuted(.. , false) is called twice?\n\n\nI have not specified any behavior if setPropertyChangeMuted(..., false) is called twice. Do you prefer that I define setPropertyChangeMuted(...) be idempotent if the parameter equals the current state of muted?", "url": "https://github.com/JMRI/JMRI/pull/8716#discussion_r443444334", "createdAt": "2020-06-22T09:51:41Z", "author": {"login": "rhwood"}, "path": "java/src/jmri/managers/AbstractProxyManager.java", "diffHunk": "@@ -613,6 +615,18 @@ protected void recomputeNamedBeanSet() {\n         return Collections.unmodifiableSortedSet(namedBeanSet);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    @OverridingMethodsMustInvokeSuper\n+    public void setPropertyChangesMuted(String propertyName, boolean muted) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMxNTkyMQ=="}, "originalCommit": {"oid": "dd84dc78b2cc6433f336c7d388c611d998100078"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwMTMwMg==", "bodyText": "re: any property name - that's probably more effort than needed for the concern. How about throwing an IllegalArgumentException so somebody coding it releases it's missing?  Or logging at Error so it fails CI? (Assuming the tests trip it)\nre behavior: I think it would be helpful to add a line or two in the Manager Javadoc, something like \"resetting to false will fire a property event that represents state after any muted events, but is not necessarily exactly those events; don't expect it to be an exact queue. Setting to false twice may or may not fire the same events.\"", "url": "https://github.com/JMRI/JMRI/pull/8716#discussion_r443601302", "createdAt": "2020-06-22T14:30:32Z", "author": {"login": "bobjacobsen"}, "path": "java/src/jmri/managers/AbstractProxyManager.java", "diffHunk": "@@ -613,6 +615,18 @@ protected void recomputeNamedBeanSet() {\n         return Collections.unmodifiableSortedSet(namedBeanSet);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    @OverridingMethodsMustInvokeSuper\n+    public void setPropertyChangesMuted(String propertyName, boolean muted) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMxNTkyMQ=="}, "originalCommit": {"oid": "dd84dc78b2cc6433f336c7d388c611d998100078"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwMjAyMQ==", "bodyText": "(Sorry, pushed comment too soon). What I'd like to avoid is \"Oh, if I just set that false, I can fire events through the system; cool!\"", "url": "https://github.com/JMRI/JMRI/pull/8716#discussion_r443602021", "createdAt": "2020-06-22T14:31:30Z", "author": {"login": "bobjacobsen"}, "path": "java/src/jmri/managers/AbstractProxyManager.java", "diffHunk": "@@ -613,6 +615,18 @@ protected void recomputeNamedBeanSet() {\n         return Collections.unmodifiableSortedSet(namedBeanSet);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    @OverridingMethodsMustInvokeSuper\n+    public void setPropertyChangesMuted(String propertyName, boolean muted) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMxNTkyMQ=="}, "originalCommit": {"oid": "dd84dc78b2cc6433f336c7d388c611d998100078"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA4ODc2Mg==", "bodyText": "What I'd like to avoid is \"Oh, if I just set that false, I can fire events through the system; cool!\"\n\nI'm beginning to think that if that is a desired side effect, I need to track the state of the property to prevent\nm.setPropertyChangeMuted(\"foo\", true);\nm.setPropertyChangeMuted(\"foo\", false);\n\nfrom being such a trigger.", "url": "https://github.com/JMRI/JMRI/pull/8716#discussion_r444088762", "createdAt": "2020-06-23T09:27:31Z", "author": {"login": "rhwood"}, "path": "java/src/jmri/managers/AbstractProxyManager.java", "diffHunk": "@@ -613,6 +615,18 @@ protected void recomputeNamedBeanSet() {\n         return Collections.unmodifiableSortedSet(namedBeanSet);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    @OverridingMethodsMustInvokeSuper\n+    public void setPropertyChangesMuted(String propertyName, boolean muted) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMxNTkyMQ=="}, "originalCommit": {"oid": "dd84dc78b2cc6433f336c7d388c611d998100078"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE5NjQ3NQ==", "bodyText": "@bobjacobsen\n\nWhat I'd like to avoid is \"Oh, if I just set that false, I can fire events through the system; cool!\"\n\nI'm reading the thread, but I don't really understand all the comments. Can you explain what you mean with this?", "url": "https://github.com/JMRI/JMRI/pull/8716#discussion_r444196475", "createdAt": "2020-06-23T12:48:54Z", "author": {"login": "danielb987"}, "path": "java/src/jmri/managers/AbstractProxyManager.java", "diffHunk": "@@ -613,6 +615,18 @@ protected void recomputeNamedBeanSet() {\n         return Collections.unmodifiableSortedSet(namedBeanSet);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    @OverridingMethodsMustInvokeSuper\n+    public void setPropertyChangesMuted(String propertyName, boolean muted) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMxNTkyMQ=="}, "originalCommit": {"oid": "dd84dc78b2cc6433f336c7d388c611d998100078"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI3MjIxNg==", "bodyText": "I'm beginning to think that if that is a desired side effect, I need to track the state of the property\n\nOr, as it's doing now, check for a particular property name that's allowed to be muted, and throw an exception if there's an attempt to mute any other one.\n\nCan you explain what you mean with this?\n\nPeople tend to grab and ad-hoc solution at hand in JMRI, particularly new people. There have been multiple cases where, faced with \"well, I updated stuff, but it's not updating on the screen\", instead of fixing the underlying problem the (new) programmer looks around for something that has the side-effect of firing semi-random events until the screen eventually does update.  (I just took a case of that out of LayoutEditor; it was a pain to fix right) So I prefer to keep event-firing things focused on just what they need to do. But it's not an absolute rule, just a preference for avoiding code smells.  If it's hard to implement in the code, a Javadoc comment is an OK 2nd choice.", "url": "https://github.com/JMRI/JMRI/pull/8716#discussion_r444272216", "createdAt": "2020-06-23T14:33:54Z", "author": {"login": "bobjacobsen"}, "path": "java/src/jmri/managers/AbstractProxyManager.java", "diffHunk": "@@ -613,6 +615,18 @@ protected void recomputeNamedBeanSet() {\n         return Collections.unmodifiableSortedSet(namedBeanSet);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    @OverridingMethodsMustInvokeSuper\n+    public void setPropertyChangesMuted(String propertyName, boolean muted) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMxNTkyMQ=="}, "originalCommit": {"oid": "dd84dc78b2cc6433f336c7d388c611d998100078"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4544, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}