{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzMzkyNDc0", "number": 9159, "title": "Preparation for LogixNG", "bodyText": "I hope to create a PR for LogixNG before christmas and this PR is a preparation for that.\nLogixNG has almost 700 new files. To make it somewhat easier to review that, I have broken out the files that can be released separately.", "createdAt": "2020-11-18T18:35:58Z", "url": "https://github.com/JMRI/JMRI/pull/9159", "merged": true, "mergeCommit": {"oid": "1cd55a71d6c279a228249049a5dbb1f0c1ba4aa6"}, "closed": true, "closedAt": "2020-11-22T21:21:21Z", "author": {"login": "danielb987"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddyffGgH2gAyNTIzMzkyNDc0OmRhMGM3MDZmZDE2ZDE0ZTdhODlmZjA2ODkyMDc1ZDI3MjIxNTA3OTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdfHU6gAFqTUzNjExNjM2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "da0c706fd16d14e7a89ff06892075d2722150791", "author": {"user": {"login": "danielb987", "name": "Daniel"}}, "url": "https://github.com/JMRI/JMRI/commit/da0c706fd16d14e7a89ff06892075d2722150791", "committedDate": "2020-11-18T18:30:41Z", "message": "Preparation for LogixNG"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzNzc2MjUx", "url": "https://github.com/JMRI/JMRI/pull/9159#pullrequestreview-533776251", "createdAt": "2020-11-18T18:54:57Z", "commit": {"oid": "da0c706fd16d14e7a89ff06892075d2722150791"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODo1NDo1N1rOH19W9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODo1NDo1N1rOH19W9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM0MTg3OA==", "bodyText": "Could you say a bit more about the motivation for this?  it's replacing a one-line common Java idiom with something JMRI specific.", "url": "https://github.com/JMRI/JMRI/pull/9159#discussion_r526341878", "createdAt": "2020-11-18T18:54:57Z", "author": {"login": "bobjacobsen"}, "path": "java/src/jmri/util/TypeConversionUtil.java", "diffHunk": "@@ -0,0 +1,321 @@\n+package jmri.util;\n+\n+import java.text.ParseException;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nonnull;\n+import javax.annotation.CheckForNull;\n+import jmri.Reportable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Converts between java types, for example String to Double and double to boolean.\n+ * \n+ * @author Daniel Bergqvist Copyright 2019\n+ */\n+public final class TypeConversionUtil {\n+    \n+    /**\n+     * Is this object a Boolean?\n+     * @param object the object to check\n+     * @return true if the object is a Boolean, false otherwise\n+     */\n+    public static boolean isBoolean(Object object) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da0c706fd16d14e7a89ff06892075d2722150791"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzNzc3MDEz", "url": "https://github.com/JMRI/JMRI/pull/9159#pullrequestreview-533777013", "createdAt": "2020-11-18T18:55:52Z", "commit": {"oid": "da0c706fd16d14e7a89ff06892075d2722150791"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODo1NTo1M1rOH19ZWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODo1NTo1M1rOH19ZWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM0MjQ4OQ==", "bodyText": "This comment looks like a copy and paste, as it mentions integers instead of floats", "url": "https://github.com/JMRI/JMRI/pull/9159#discussion_r526342489", "createdAt": "2020-11-18T18:55:53Z", "author": {"login": "bobjacobsen"}, "path": "java/src/jmri/util/TypeConversionUtil.java", "diffHunk": "@@ -0,0 +1,321 @@\n+package jmri.util;\n+\n+import java.text.ParseException;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nonnull;\n+import javax.annotation.CheckForNull;\n+import jmri.Reportable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Converts between java types, for example String to Double and double to boolean.\n+ * \n+ * @author Daniel Bergqvist Copyright 2019\n+ */\n+public final class TypeConversionUtil {\n+    \n+    /**\n+     * Is this object a Boolean?\n+     * @param object the object to check\n+     * @return true if the object is a Boolean, false otherwise\n+     */\n+    public static boolean isBoolean(Object object) {\n+        return object instanceof Boolean;\n+    }\n+    \n+    /**\n+     * Is this object an integer number?\n+     * <P>\n+     * The method returns true if the object is any of these classes:\n+     * <ul>\n+     *   <li>AtomicInteger</li>\n+     *   <li>AtomicLong</li>\n+     *   <li>BigInteger</li>\n+     *   <li>Byte</li>\n+     *   <li>Short</li>\n+     *   <li>Integer</li>\n+     *   <li>Long</li>\n+     * </ul>\n+     * @param object the object to check\n+     * @return true if the object is an object that is an integer, false otherwise\n+     */\n+    public static boolean isIntegerNumber(Object object) {\n+        return (object instanceof java.util.concurrent.atomic.AtomicInteger)\n+                || (object instanceof java.util.concurrent.atomic.AtomicLong)\n+                || (object instanceof java.math.BigInteger)\n+                || (object instanceof Byte)\n+                || (object instanceof Short)\n+                || (object instanceof Integer)\n+                || (object instanceof Long);\n+    }\n+    \n+    /**\n+     * Is this object an integer number?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da0c706fd16d14e7a89ff06892075d2722150791"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzNzgwNzQw", "url": "https://github.com/JMRI/JMRI/pull/9159#pullrequestreview-533780740", "createdAt": "2020-11-18T19:00:19Z", "commit": {"oid": "da0c706fd16d14e7a89ff06892075d2722150791"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxOTowMDoxOVrOH19kZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxOTowMDoxOVrOH19kZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM0NTMxNw==", "bodyText": "Could you please add some discussion as to when this type-not-safe method should be used, and when not?  Java has spent a decade moving toward type-safety via generics, multiple methods, etc.  So this is a bit off to the side.\nFor example, another approach would be have parallel methods with arguments typed Map, Collection, etc instead of decoding the type.\nIs there some motivation for actually carrying variables of Object type around?", "url": "https://github.com/JMRI/JMRI/pull/9159#discussion_r526345317", "createdAt": "2020-11-18T19:00:19Z", "author": {"login": "bobjacobsen"}, "path": "java/src/jmri/util/TypeConversionUtil.java", "diffHunk": "@@ -0,0 +1,321 @@\n+package jmri.util;\n+\n+import java.text.ParseException;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nonnull;\n+import javax.annotation.CheckForNull;\n+import jmri.Reportable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Converts between java types, for example String to Double and double to boolean.\n+ * \n+ * @author Daniel Bergqvist Copyright 2019\n+ */\n+public final class TypeConversionUtil {\n+    \n+    /**\n+     * Is this object a Boolean?\n+     * @param object the object to check\n+     * @return true if the object is a Boolean, false otherwise\n+     */\n+    public static boolean isBoolean(Object object) {\n+        return object instanceof Boolean;\n+    }\n+    \n+    /**\n+     * Is this object an integer number?\n+     * <P>\n+     * The method returns true if the object is any of these classes:\n+     * <ul>\n+     *   <li>AtomicInteger</li>\n+     *   <li>AtomicLong</li>\n+     *   <li>BigInteger</li>\n+     *   <li>Byte</li>\n+     *   <li>Short</li>\n+     *   <li>Integer</li>\n+     *   <li>Long</li>\n+     * </ul>\n+     * @param object the object to check\n+     * @return true if the object is an object that is an integer, false otherwise\n+     */\n+    public static boolean isIntegerNumber(Object object) {\n+        return (object instanceof java.util.concurrent.atomic.AtomicInteger)\n+                || (object instanceof java.util.concurrent.atomic.AtomicLong)\n+                || (object instanceof java.math.BigInteger)\n+                || (object instanceof Byte)\n+                || (object instanceof Short)\n+                || (object instanceof Integer)\n+                || (object instanceof Long);\n+    }\n+    \n+    /**\n+     * Is this object an integer number?\n+     * <P>\n+     * The method returns true if the object is any of these classes:\n+     * <ul>\n+     *   <li>AtomicInteger</li>\n+     *   <li>AtomicLong</li>\n+     *   <li>BigInteger</li>\n+     *   <li>Byte</li>\n+     *   <li>Short</li>\n+     *   <li>Integer</li>\n+     *   <li>Long</li>\n+     *   <li>BigDecimal</li>\n+     *   <li>Float</li>\n+     *   <li>Double</li>\n+     * </ul>\n+     * @param object the object to check\n+     * @return true if the object is an object that is either an integer or a\n+     * float, false otherwise\n+     */\n+    public static boolean isFloatingNumber(Object object) {\n+        return isIntegerNumber(object)\n+                || (object instanceof java.math.BigDecimal)\n+                || (object instanceof Float)\n+                || (object instanceof Double);\n+    }\n+    \n+    /**\n+     * Is this object a String?\n+     * @param object the object to check\n+     * @return true if the object is a String, false otherwise\n+     */\n+    public static boolean isString(Object object) {\n+        return object instanceof String;\n+    }\n+    \n+    \n+    private static boolean convertStringToBoolean(@Nonnull String str, boolean do_i18n) {\n+        // try to parse the string as a number\n+        try {\n+            double number;\n+            if (do_i18n) {\n+                number = IntlUtilities.doubleValue(str);\n+            } else {\n+                number = Double.parseDouble(str);\n+            }\n+//                System.err.format(\"The string: '%s', result: %1.4f%n\", str, (float)number);\n+            return ! ((-0.5 < number) && (number < 0.5));\n+        } catch (NumberFormatException | ParseException ex) {\n+            log.debug(\"The string '{}' cannot be parsed as a number\", str);\n+        }\n+\n+//            System.err.format(\"The string: %s, %s%n\", str, value.getClass().getName());\n+        String patternString = \"^0(\\\\.0+)?$\";\n+        Pattern pattern = Pattern.compile(patternString, Pattern.CASE_INSENSITIVE);\n+        Matcher matcher = pattern.matcher(str);\n+        if (matcher.matches()) {\n+//                System.err.format(\"The string: '%s', result: %b%n\", str, false);\n+            return false;\n+        }\n+//            System.err.format(\"The string: '%s', result: %b%n\", str, !str.isEmpty());\n+        return !str.isEmpty();\n+    }\n+    \n+    /**\n+     * Convert a value to a boolean.\n+     * <P>\n+     * Rules:\n+     * null is converted to false\n+     * empty string is converted to false\n+     * \"0\" string is converted to false\n+     * \"0.000\" string is converted to false, if the number of decimals is &gt; 0\n+     * empty map is converted to false\n+     * empty collection is converted to false\n+     * An integer number is converted to false if the number is 0\n+     * A floating number is converted to false if the number is -0.5 &lt; x &lt; 0.5\n+     * Everything else is converted to true\n+     * <P>\n+     * For objects that implement the Reportable interface, the value is fetched\n+     * from the method toReportString().\n+     * \n+     * @param value the value to convert\n+     * @param do_i18n true if internationalization should be done, false otherwise\n+     * @return the boolean value\n+     */\n+    public static boolean convertToBoolean(@CheckForNull Object value, boolean do_i18n) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da0c706fd16d14e7a89ff06892075d2722150791"}, "originalPosition": 141}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "152088207e2f64416f49119ae443941b1d3d6e15", "author": {"user": {"login": "danielb987", "name": "Daniel"}}, "url": "https://github.com/JMRI/JMRI/commit/152088207e2f64416f49119ae443941b1d3d6e15", "committedDate": "2020-11-18T19:23:13Z", "message": "Remove unneeded method. Fix copy/paste error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2MTE2MzYx", "url": "https://github.com/JMRI/JMRI/pull/9159#pullrequestreview-536116361", "createdAt": "2020-11-22T21:21:04Z", "commit": {"oid": "152088207e2f64416f49119ae443941b1d3d6e15"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3848, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}