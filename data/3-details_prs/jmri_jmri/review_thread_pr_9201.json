{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzMDczMjA3", "number": 9201, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQyMjowODo0MVrOFBU6Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQyMjowOTozMFrOFBU62w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2OTM1NTIyOnYy", "diffSide": "RIGHT", "path": "java/test/jmri/jmrit/logix/LearnWarrantTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQyMjowODo0MVrOIAB4og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQyMjowODo0MVrOIAB4og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkwMTc5NA==", "bodyText": "If rlist.get(0) is not a WarrantShutdownTask, this will be an infinite loop. I suggest an else statement that throws an exception or breaks out of the loop.", "url": "https://github.com/JMRI/JMRI/pull/9201#discussion_r536901794", "createdAt": "2020-12-05T22:08:41Z", "author": {"login": "danielb987"}, "path": "java/test/jmri/jmrit/logix/LearnWarrantTest.java", "diffHunk": "@@ -201,25 +200,31 @@ private Sensor recordtimes(String[] route, DccThrottle throttle) throws Exceptio\n     @BeforeEach\n     public void setUp() {\n         JUnitUtil.setUp();\n+        JUnitUtil.resetInstanceManager();\n         jmri.util.JUnitUtil.resetProfileManager();\n         JUnitUtil.initConfigureManager();\n         JUnitUtil.initInternalTurnoutManager();\n-        JUnitUtil.initInternalLightManager();\n         JUnitUtil.initInternalSensorManager();\n-        JUnitUtil.initInternalSignalHeadManager();\n         JUnitUtil.initDebugPowerManager();\n-        JUnitUtil.initDebugThrottleManager();\n-        JUnitUtil.initMemoryManager();\n         JUnitUtil.initOBlockManager();\n         JUnitUtil.initLogixManager();\n-        JUnitUtil.initConditionalManager();\n         WarrantPreferences.getDefault().setShutdown(WarrantPreferences.Shutdown.NO_MERGE);\n         JUnitUtil.initWarrantManager();\n+        JUnitUtil.initDebugThrottleManager();\n     }\n \n     @AfterEach\n     public void tearDown() {\n-        JUnitUtil.clearShutDownManager(); // should be converted to check of scheduled ShutDownActions\n+        if (InstanceManager.containsDefault(ShutDownManager.class)) {\n+            ShutDownManager sm = InstanceManager.getDefault(jmri.ShutDownManager.class);\n+            List<Runnable> rlist = sm.getRunnables();\n+            while (!rlist.isEmpty()) {\n+                if (rlist.get(0) instanceof jmri.jmrit.logix.WarrantShutdownTask) {\n+                    sm.deregister((ShutDownTask)rlist.get(0));\n+                    rlist = sm.getRunnables();\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f83bf42415c2bba5a26ae51332521c49ec018224"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2OTM1NjQzOnYy", "diffSide": "RIGHT", "path": "java/test/jmri/jmrit/logix/LinkedWarrantTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQyMjowOTozMFrOIAB5Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQyMjowOTozMFrOIAB5Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkwMTkyMw==", "bodyText": "If rlist.get(0) is not a WarrantShutdownTask, this will be an infinite loop. I suggest an else statement that throws an exception or breaks out of the loop.", "url": "https://github.com/JMRI/JMRI/pull/9201#discussion_r536901923", "createdAt": "2020-12-05T22:09:30Z", "author": {"login": "danielb987"}, "path": "java/test/jmri/jmrit/logix/LinkedWarrantTest.java", "diffHunk": "@@ -354,7 +356,16 @@ public void tearDown() {\n         _sensorMgr.dispose();\n         _sensorMgr = null;\n         \n-        JUnitUtil.clearShutDownManager(); // should be converted to check of scheduled ShutDownActions\n+        if (InstanceManager.containsDefault(ShutDownManager.class)) {\n+            ShutDownManager sm = InstanceManager.getDefault(jmri.ShutDownManager.class);\n+            List<Runnable> rlist = sm.getRunnables();\n+            while (!rlist.isEmpty()) {\n+                if (rlist.get(0) instanceof jmri.jmrit.logix.WarrantShutdownTask) {\n+                    sm.deregister((ShutDownTask)rlist.get(0));\n+                    rlist = sm.getRunnables();\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f83bf42415c2bba5a26ae51332521c49ec018224"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4347, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}