{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0MTg0NDgy", "number": 8494, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNDozOTo0MVrOD76AMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNDo1MDowMVrOD76F6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTQyODk5OnYy", "diffSide": "RIGHT", "path": "java/src/jmri/jmrix/can/cbus/swing/modeswitcher/SprogCbusModeSwitcherPane.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNDozOTo0MVrOGUhLOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODo1NzoyMVrOGUoE-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2ODI1MA==", "bodyText": "What kind of errors lead to this comment?  It looks strange having a Pane on the class name, but inheriting from a frame.  We either need to fix the class or change the name.", "url": "https://github.com/JMRI/JMRI/pull/8494#discussion_r424168250", "createdAt": "2020-05-13T04:39:41Z", "author": {"login": "pabender"}, "path": "java/src/jmri/jmrix/can/cbus/swing/modeswitcher/SprogCbusModeSwitcherPane.java", "diffHunk": "@@ -0,0 +1,236 @@\n+package jmri.jmrix.can.cbus.swing.modeswitcher;\n+\n+import java.awt.BorderLayout;\n+import java.awt.event.ActionListener;\n+import javax.swing.BorderFactory;\n+import javax.swing.BoxLayout;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.JRadioButton;\n+import jmri.GlobalProgrammerManager;\n+import jmri.InstanceManager;\n+import jmri.jmrix.can.CanListener;\n+import jmri.jmrix.can.CanMessage;\n+import jmri.jmrix.can.CanReply;\n+import jmri.jmrix.can.CanSystemConnectionMemo;\n+import jmri.jmrix.can.TrafficController;\n+import jmri.jmrix.can.cbus.CbusDccProgrammerManager;\n+import jmri.jmrix.can.cbus.CbusPreferences;\n+import jmri.jmrix.can.cbus.CbusSend;\n+import jmri.jmrix.can.cbus.node.CbusNode;\n+import jmri.jmrix.can.cbus.node.CbusNodeTableDataModel;\n+import jmri.util.JmriJFrame;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Mode Switcher to switch modes between programmer and command station.\n+ *\n+ * No matter what I tried, I cannot get the label text to wrap when added to a\n+ * CanNamedPane, so this is implemented as a JmriJFrame.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65d20bde832c6917a9c27c373ddbfabd39471c5a"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI4MTMzOA==", "bodyText": "Ah, that's left over from trying to use a CanNamedPane. See https://jmri-developers.groups.io/g/jmri/message/3326 I switched to a JmriJFrame instead . I have now renamed the class.", "url": "https://github.com/JMRI/JMRI/pull/8494#discussion_r424281338", "createdAt": "2020-05-13T08:57:21Z", "author": {"login": "crosland"}, "path": "java/src/jmri/jmrix/can/cbus/swing/modeswitcher/SprogCbusModeSwitcherPane.java", "diffHunk": "@@ -0,0 +1,236 @@\n+package jmri.jmrix.can.cbus.swing.modeswitcher;\n+\n+import java.awt.BorderLayout;\n+import java.awt.event.ActionListener;\n+import javax.swing.BorderFactory;\n+import javax.swing.BoxLayout;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.JRadioButton;\n+import jmri.GlobalProgrammerManager;\n+import jmri.InstanceManager;\n+import jmri.jmrix.can.CanListener;\n+import jmri.jmrix.can.CanMessage;\n+import jmri.jmrix.can.CanReply;\n+import jmri.jmrix.can.CanSystemConnectionMemo;\n+import jmri.jmrix.can.TrafficController;\n+import jmri.jmrix.can.cbus.CbusDccProgrammerManager;\n+import jmri.jmrix.can.cbus.CbusPreferences;\n+import jmri.jmrix.can.cbus.CbusSend;\n+import jmri.jmrix.can.cbus.node.CbusNode;\n+import jmri.jmrix.can.cbus.node.CbusNodeTableDataModel;\n+import jmri.util.JmriJFrame;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Mode Switcher to switch modes between programmer and command station.\n+ *\n+ * No matter what I tried, I cannot get the label text to wrap when added to a\n+ * CanNamedPane, so this is implemented as a JmriJFrame.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2ODI1MA=="}, "originalCommit": {"oid": "65d20bde832c6917a9c27c373ddbfabd39471c5a"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTQzODQ3OnYy", "diffSide": "RIGHT", "path": "java/test/jmri/jmrix/can/cbus/swing/modeswitcher/SprogCbusModeSwitcherPaneTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNDo0Njo0MlrOGUhRPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODo1ODowMFrOGUoGqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2OTc5MA==", "bodyText": "You don\u2019t want to call JUnitUtil.resetWindows before the call to super.tearDown.  super.tearDown disposes of the frame and then calls resetWindows.", "url": "https://github.com/JMRI/JMRI/pull/8494#discussion_r424169790", "createdAt": "2020-05-13T04:46:42Z", "author": {"login": "pabender"}, "path": "java/test/jmri/jmrix/can/cbus/swing/modeswitcher/SprogCbusModeSwitcherPaneTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package jmri.jmrix.can.cbus.swing.modeswitcher;\n+\n+import java.awt.GraphicsEnvironment;\n+import jmri.GlobalProgrammerManager;\n+import jmri.jmrix.can.CanSystemConnectionMemo;\n+import jmri.jmrix.can.TrafficControllerScaffold;\n+import jmri.jmrix.can.cbus.CbusDccProgrammer;\n+import jmri.jmrix.can.cbus.CbusDccProgrammerManager;\n+import jmri.jmrix.can.cbus.CbusPreferences;\n+import jmri.util.JUnitUtil;\n+import org.junit.After;\n+import org.junit.Assume;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Tests for the ModeSwitcherPane class\n+ *\n+ * @author Andrew Crosland (C) 2020\n+ */\n+public class SprogCbusModeSwitcherPaneTest extends jmri.util.JmriJFrameTestBase {\n+\n+    CanSystemConnectionMemo memo;\n+    CbusDccProgrammer prog;\n+    jmri.jmrix.can.TrafficController tc;\n+    \n+    @Test\n+    public void testInitComponents() throws Exception{\n+        Assume.assumeFalse(GraphicsEnvironment.isHeadless());\n+        // for now, just make sure there isn't an exception.\n+        ((SprogCbusModeSwitcherPane) frame).initComponents();\n+    }\n+\n+    @Before\n+    @Override\n+    public void setUp() {\n+        JUnitUtil.setUp();\n+        \n+        jmri.InstanceManager.setDefault(jmri.jmrix.can.cbus.CbusPreferences.class,new CbusPreferences() );\n+\n+        tc = new TrafficControllerScaffold();\n+        memo = new CanSystemConnectionMemo();\n+        memo.setTrafficController(tc);\n+        prog = new CbusDccProgrammer(tc);\n+        \n+        jmri.InstanceManager.setDefault(GlobalProgrammerManager.class,new CbusDccProgrammerManager(prog, memo) );\n+        if (!GraphicsEnvironment.isHeadless()) {\n+            frame = new SprogCbusModeSwitcherPane(memo);\n+        }\n+    }\n+\n+    @After\n+    @Override\n+    public void tearDown() {\n+        prog = null;\n+        tc.terminateThreads();\n+        memo.dispose();\n+        tc = null;\n+        memo = null;\n+        JUnitUtil.resetWindows(false,false);\n+        super.tearDown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65d20bde832c6917a9c27c373ddbfabd39471c5a"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI4MTc3MA==", "bodyText": "OK, I added that as I saw it used in another test and thought it may help.", "url": "https://github.com/JMRI/JMRI/pull/8494#discussion_r424281770", "createdAt": "2020-05-13T08:58:00Z", "author": {"login": "crosland"}, "path": "java/test/jmri/jmrix/can/cbus/swing/modeswitcher/SprogCbusModeSwitcherPaneTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package jmri.jmrix.can.cbus.swing.modeswitcher;\n+\n+import java.awt.GraphicsEnvironment;\n+import jmri.GlobalProgrammerManager;\n+import jmri.jmrix.can.CanSystemConnectionMemo;\n+import jmri.jmrix.can.TrafficControllerScaffold;\n+import jmri.jmrix.can.cbus.CbusDccProgrammer;\n+import jmri.jmrix.can.cbus.CbusDccProgrammerManager;\n+import jmri.jmrix.can.cbus.CbusPreferences;\n+import jmri.util.JUnitUtil;\n+import org.junit.After;\n+import org.junit.Assume;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Tests for the ModeSwitcherPane class\n+ *\n+ * @author Andrew Crosland (C) 2020\n+ */\n+public class SprogCbusModeSwitcherPaneTest extends jmri.util.JmriJFrameTestBase {\n+\n+    CanSystemConnectionMemo memo;\n+    CbusDccProgrammer prog;\n+    jmri.jmrix.can.TrafficController tc;\n+    \n+    @Test\n+    public void testInitComponents() throws Exception{\n+        Assume.assumeFalse(GraphicsEnvironment.isHeadless());\n+        // for now, just make sure there isn't an exception.\n+        ((SprogCbusModeSwitcherPane) frame).initComponents();\n+    }\n+\n+    @Before\n+    @Override\n+    public void setUp() {\n+        JUnitUtil.setUp();\n+        \n+        jmri.InstanceManager.setDefault(jmri.jmrix.can.cbus.CbusPreferences.class,new CbusPreferences() );\n+\n+        tc = new TrafficControllerScaffold();\n+        memo = new CanSystemConnectionMemo();\n+        memo.setTrafficController(tc);\n+        prog = new CbusDccProgrammer(tc);\n+        \n+        jmri.InstanceManager.setDefault(GlobalProgrammerManager.class,new CbusDccProgrammerManager(prog, memo) );\n+        if (!GraphicsEnvironment.isHeadless()) {\n+            frame = new SprogCbusModeSwitcherPane(memo);\n+        }\n+    }\n+\n+    @After\n+    @Override\n+    public void tearDown() {\n+        prog = null;\n+        tc.terminateThreads();\n+        memo.dispose();\n+        tc = null;\n+        memo = null;\n+        JUnitUtil.resetWindows(false,false);\n+        super.tearDown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2OTc5MA=="}, "originalCommit": {"oid": "65d20bde832c6917a9c27c373ddbfabd39471c5a"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTQ0MzYyOnYy", "diffSide": "RIGHT", "path": "java/test/jmri/jmrix/can/cbus/swing/modeswitcher/SprogCbusModeSwitcherPaneTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNDo1MDowMVrOGUhUTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODo1OTozOVrOGUoKmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MDU3NQ==", "bodyText": "You really don\u2019t need this test.  initComponets is called as part of testShowAndClose in the base class.", "url": "https://github.com/JMRI/JMRI/pull/8494#discussion_r424170575", "createdAt": "2020-05-13T04:50:01Z", "author": {"login": "pabender"}, "path": "java/test/jmri/jmrix/can/cbus/swing/modeswitcher/SprogCbusModeSwitcherPaneTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package jmri.jmrix.can.cbus.swing.modeswitcher;\n+\n+import java.awt.GraphicsEnvironment;\n+import jmri.GlobalProgrammerManager;\n+import jmri.jmrix.can.CanSystemConnectionMemo;\n+import jmri.jmrix.can.TrafficControllerScaffold;\n+import jmri.jmrix.can.cbus.CbusDccProgrammer;\n+import jmri.jmrix.can.cbus.CbusDccProgrammerManager;\n+import jmri.jmrix.can.cbus.CbusPreferences;\n+import jmri.util.JUnitUtil;\n+import org.junit.After;\n+import org.junit.Assume;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Tests for the ModeSwitcherPane class\n+ *\n+ * @author Andrew Crosland (C) 2020\n+ */\n+public class SprogCbusModeSwitcherPaneTest extends jmri.util.JmriJFrameTestBase {\n+\n+    CanSystemConnectionMemo memo;\n+    CbusDccProgrammer prog;\n+    jmri.jmrix.can.TrafficController tc;\n+    \n+    @Test\n+    public void testInitComponents() throws Exception{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65d20bde832c6917a9c27c373ddbfabd39471c5a"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI4Mjc3Nw==", "bodyText": "OK. Again, I think this is copied from another test that I used as a template but I may be confusing between testing JmriJFrames and other panes.", "url": "https://github.com/JMRI/JMRI/pull/8494#discussion_r424282777", "createdAt": "2020-05-13T08:59:39Z", "author": {"login": "crosland"}, "path": "java/test/jmri/jmrix/can/cbus/swing/modeswitcher/SprogCbusModeSwitcherPaneTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package jmri.jmrix.can.cbus.swing.modeswitcher;\n+\n+import java.awt.GraphicsEnvironment;\n+import jmri.GlobalProgrammerManager;\n+import jmri.jmrix.can.CanSystemConnectionMemo;\n+import jmri.jmrix.can.TrafficControllerScaffold;\n+import jmri.jmrix.can.cbus.CbusDccProgrammer;\n+import jmri.jmrix.can.cbus.CbusDccProgrammerManager;\n+import jmri.jmrix.can.cbus.CbusPreferences;\n+import jmri.util.JUnitUtil;\n+import org.junit.After;\n+import org.junit.Assume;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Tests for the ModeSwitcherPane class\n+ *\n+ * @author Andrew Crosland (C) 2020\n+ */\n+public class SprogCbusModeSwitcherPaneTest extends jmri.util.JmriJFrameTestBase {\n+\n+    CanSystemConnectionMemo memo;\n+    CbusDccProgrammer prog;\n+    jmri.jmrix.can.TrafficController tc;\n+    \n+    @Test\n+    public void testInitComponents() throws Exception{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MDU3NQ=="}, "originalCommit": {"oid": "65d20bde832c6917a9c27c373ddbfabd39471c5a"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4551, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}