{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNjQxOTYy", "number": 8754, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDo1MToxNFrOEJ03kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDo1MToxNFrOEJ03kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzM4ODM0OnYy", "diffSide": "RIGHT", "path": "java/src/jmri/server/json/memory/JsonMemoryHttpService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDo1MToxNFrOGqhvlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMTowMDo0OFrOGqiDBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI0NjIzMA==", "bodyText": "@rhwood I'd appreciate suggestions for handling the id here. (last parm, set to 0 for now)", "url": "https://github.com/JMRI/JMRI/pull/8754#discussion_r447246230", "createdAt": "2020-06-29T20:51:14Z", "author": {"login": "mstevetodd"}, "path": "java/src/jmri/server/json/memory/JsonMemoryHttpService.java", "diffHunk": "@@ -50,6 +53,9 @@ public ObjectNode doGet(Memory memory, String name, String type, JsonRequest req\n                 } else if (val instanceof jmri.Reporter) {\n                     ObjectNode reporterValue = reporterService.doGet((jmri.Reporter) val, name, REPORTER, request);\n                     data.set(VALUE, reporterValue);\n+                } else if (val instanceof jmri.BasicRosterEntry) {\n+                    ObjectNode rosterValue = (ObjectNode) rosterService.getRosterEntry(request.locale, ((BasicRosterEntry) val).getId(), 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2754a10c7a454af5edf8738a4945b79d3f3661f1"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI1MTIwNQ==", "bodyText": "Use request.id instead of 0.  request is a JsonRequest and will have the correct value for any context (the JsonRequest is a container  for data about the JSON message which avoids many methods needing 6 or more parameters).", "url": "https://github.com/JMRI/JMRI/pull/8754#discussion_r447251205", "createdAt": "2020-06-29T21:00:48Z", "author": {"login": "rhwood"}, "path": "java/src/jmri/server/json/memory/JsonMemoryHttpService.java", "diffHunk": "@@ -50,6 +53,9 @@ public ObjectNode doGet(Memory memory, String name, String type, JsonRequest req\n                 } else if (val instanceof jmri.Reporter) {\n                     ObjectNode reporterValue = reporterService.doGet((jmri.Reporter) val, name, REPORTER, request);\n                     data.set(VALUE, reporterValue);\n+                } else if (val instanceof jmri.BasicRosterEntry) {\n+                    ObjectNode rosterValue = (ObjectNode) rosterService.getRosterEntry(request.locale, ((BasicRosterEntry) val).getId(), 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI0NjIzMA=="}, "originalCommit": {"oid": "2754a10c7a454af5edf8738a4945b79d3f3661f1"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4487, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}