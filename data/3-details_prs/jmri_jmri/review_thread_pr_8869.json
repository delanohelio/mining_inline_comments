{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2Nzk2NDIx", "number": 8869, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoxNzoyOVrOEV-mfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoxNzozMFrOEV-mhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDgxMjE0OnYy", "diffSide": "RIGHT", "path": "java/test/jmri/jmrix/mqtt/MqttSensorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoxNzoyOVrOG9CzLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoxNzoyOVrOG9CzLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MjE4OA==", "bodyText": "Doesn't these two tests always fail? Seems like you forgot to change from turnout to sensor and the states here...", "url": "https://github.com/JMRI/JMRI/pull/8869#discussion_r466662188", "createdAt": "2020-08-06T20:17:29Z", "author": {"login": "elestedt"}, "path": "java/test/jmri/jmrix/mqtt/MqttSensorTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package jmri.jmrix.mqtt;\n+\n+import jmri.util.*;\n+\n+import org.junit.Assert;\n+import org.junit.jupiter.api.*;\n+\n+/**\n+ *\n+ * @author Bob Jacobsen Coyright (C) 2020\n+ */\n+public class MqttSensorTest extends jmri.implementation.AbstractSensorTestBase {\n+    \n+    @Override\n+    public int numListeners() {return 0;}\n+\n+    @Override\n+    public void checkStatusRequestMsgSent() {}\n+\n+\n+    MqttAdapter a;\n+    String saveTopic;\n+    byte[] savePayload;\n+    \n+    @Override\n+    @BeforeEach\n+    public void setUp() {\n+        jmri.util.JUnitUtil.setUp();\n+        JUnitUtil.initDefaultUserMessagePreferences();\n+        // prepare an interface\n+        saveTopic = null;\n+        savePayload = null;\n+        a = new MqttAdapter(){\n+                @Override\n+                public void publish(String topic, byte[] payload) {\n+                    saveTopic = topic;\n+                    savePayload = payload;\n+                }\n+            };\n+        t = new MqttSensor(a, \"MS1\", \"track/sensor/1\");\n+        JUnitAppender.assertWarnMessage(\"Trying to subscribe before connect/configure is done\");\n+    }\n+\n+    @Override\n+    @AfterEach\n+    public void tearDown() {\n+        t.dispose();\n+        JUnitUtil.tearDown();\n+    }\n+\n+    @Override\n+    public void checkOnMsgSent() {\n+        Assert.assertEquals(\"topic\", \"track/turnout/2\", saveTopic);\n+        Assert.assertEquals(\"topic\", \"THROWN\", new String(savePayload));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33dc1fd1ec079bb27b45f9d9ede161dc2cedcd8e"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDgxMjIwOnYy", "diffSide": "RIGHT", "path": "java/test/jmri/jmrix/mqtt/MqttSensorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoxNzozMFrOG9CzMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoxNzozMFrOG9CzMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MjE5NQ==", "bodyText": "... and here", "url": "https://github.com/JMRI/JMRI/pull/8869#discussion_r466662195", "createdAt": "2020-08-06T20:17:30Z", "author": {"login": "elestedt"}, "path": "java/test/jmri/jmrix/mqtt/MqttSensorTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package jmri.jmrix.mqtt;\n+\n+import jmri.util.*;\n+\n+import org.junit.Assert;\n+import org.junit.jupiter.api.*;\n+\n+/**\n+ *\n+ * @author Bob Jacobsen Coyright (C) 2020\n+ */\n+public class MqttSensorTest extends jmri.implementation.AbstractSensorTestBase {\n+    \n+    @Override\n+    public int numListeners() {return 0;}\n+\n+    @Override\n+    public void checkStatusRequestMsgSent() {}\n+\n+\n+    MqttAdapter a;\n+    String saveTopic;\n+    byte[] savePayload;\n+    \n+    @Override\n+    @BeforeEach\n+    public void setUp() {\n+        jmri.util.JUnitUtil.setUp();\n+        JUnitUtil.initDefaultUserMessagePreferences();\n+        // prepare an interface\n+        saveTopic = null;\n+        savePayload = null;\n+        a = new MqttAdapter(){\n+                @Override\n+                public void publish(String topic, byte[] payload) {\n+                    saveTopic = topic;\n+                    savePayload = payload;\n+                }\n+            };\n+        t = new MqttSensor(a, \"MS1\", \"track/sensor/1\");\n+        JUnitAppender.assertWarnMessage(\"Trying to subscribe before connect/configure is done\");\n+    }\n+\n+    @Override\n+    @AfterEach\n+    public void tearDown() {\n+        t.dispose();\n+        JUnitUtil.tearDown();\n+    }\n+\n+    @Override\n+    public void checkOnMsgSent() {\n+        Assert.assertEquals(\"topic\", \"track/turnout/2\", saveTopic);\n+        Assert.assertEquals(\"topic\", \"THROWN\", new String(savePayload));\n+    }\n+\n+    @Override\n+    public void checkOffMsgSent() {\n+        Assert.assertEquals(\"topic\", \"track/turnout/2\", saveTopic);\n+        Assert.assertEquals(\"topic\", \"CLOSED\", new String(savePayload));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33dc1fd1ec079bb27b45f9d9ede161dc2cedcd8e"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4429, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}