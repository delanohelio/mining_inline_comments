{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0MDEyMjU3", "number": 9009, "title": "Initial IPOCS implementation", "bodyText": "", "createdAt": "2020-09-10T15:38:08Z", "url": "https://github.com/JMRI/JMRI/pull/9009", "merged": true, "mergeCommit": {"oid": "affeca6a00c4af6120c204765ddf9d65c107e69e"}, "closed": true, "closedAt": "2020-09-16T18:38:35Z", "author": {"login": "elestedt"}, "timelineItems": {"totalCount": 46, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHi2ocgFqTQ4NjA3NzkzNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJPhZ6gFqTQ4OTE1MDc5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MDc3OTM1", "url": "https://github.com/JMRI/JMRI/pull/9009#pullrequestreview-486077935", "createdAt": "2020-09-10T15:51:08Z", "commit": {"oid": "dc3aefd2de316567bc55de9cbcd0776753b1896f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNTo1MTowOVrOHP6org==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNTo1MTowOVrOHP6org==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ1MTM3NA==", "bodyText": "It looks like this line and the next were Windows-ized, with / path separators replaced by \\ characters.  Could you change this back, please?", "url": "https://github.com/JMRI/JMRI/pull/9009#discussion_r486451374", "createdAt": "2020-09-10T15:51:09Z", "author": {"login": "bobjacobsen"}, "path": ".settings/org.eclipse.jdt.apt.core.prefs", "diffHunk": "@@ -1,4 +1,4 @@\n eclipse.preferences.version=1\n org.eclipse.jdt.apt.aptEnabled=true\n-org.eclipse.jdt.apt.genSrcDir=target/generated-sources/annotations\n-org.eclipse.jdt.apt.genTestSrcDir=target/generated-test-sources/test-annotations\n+org.eclipse.jdt.apt.genSrcDir=target\\\\generated-sources\\\\annotations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc3aefd2de316567bc55de9cbcd0776753b1896f"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dc3aefd2de316567bc55de9cbcd0776753b1896f", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/dc3aefd2de316567bc55de9cbcd0776753b1896f", "committedDate": "2020-09-10T15:36:19Z", "message": "Initial IPOCS implementation"}, "afterCommit": {"oid": "456c45254dcb0c00fea88dbfbdb31e1d23a01626", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/456c45254dcb0c00fea88dbfbdb31e1d23a01626", "committedDate": "2020-09-10T15:51:15Z", "message": "Initial IPOCS implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "456c45254dcb0c00fea88dbfbdb31e1d23a01626", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/456c45254dcb0c00fea88dbfbdb31e1d23a01626", "committedDate": "2020-09-10T15:51:15Z", "message": "Initial IPOCS implementation"}, "afterCommit": {"oid": "19e22710996229c22d5b5b48fd9fb0ea253d1a30", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/19e22710996229c22d5b5b48fd9fb0ea253d1a30", "committedDate": "2020-09-10T15:54:04Z", "message": "Initial IPOCS implementation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MTA2NzA5", "url": "https://github.com/JMRI/JMRI/pull/9009#pullrequestreview-486106709", "createdAt": "2020-09-10T16:23:12Z", "commit": {"oid": "19e22710996229c22d5b5b48fd9fb0ea253d1a30"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjoyMzoxMlrOHP7_3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjoyMzoxMlrOHP7_3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ3MzY5NA==", "bodyText": "This class is in the src tree but I think it should be in the test tree.\njava/src/jmri/jmrix/configurexml/AbstractConfigXmlTestBase.java\nshould be\njava/test/jmri/jmrix/configurexml/AbstractConfigXmlTestBase.java", "url": "https://github.com/JMRI/JMRI/pull/9009#discussion_r486473694", "createdAt": "2020-09-10T16:23:12Z", "author": {"login": "danielb987"}, "path": "java/src/jmri/jmrix/configurexml/AbstractConfigXmlTestBase.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package jmri.jmrix.configurexml;\n+\n+public class AbstractConfigXmlTestBase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19e22710996229c22d5b5b48fd9fb0ea253d1a30"}, "originalPosition": 3}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "19e22710996229c22d5b5b48fd9fb0ea253d1a30", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/19e22710996229c22d5b5b48fd9fb0ea253d1a30", "committedDate": "2020-09-10T15:54:04Z", "message": "Initial IPOCS implementation"}, "afterCommit": {"oid": "1d38c6dcedb53862f81cb83a0916cbd60b717a7b", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/1d38c6dcedb53862f81cb83a0916cbd60b717a7b", "committedDate": "2020-09-10T16:39:40Z", "message": "Initial IPOCS implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "605d4d36c6f8a770e08321408c9c874690cf3457", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/605d4d36c6f8a770e08321408c9c874690cf3457", "committedDate": "2020-09-11T18:24:05Z", "message": "Fix compilation issues"}, "afterCommit": {"oid": "cf8e2128ecd0c1355fc18a6dffc8356a6c5364fa", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/cf8e2128ecd0c1355fc18a6dffc8356a6c5364fa", "committedDate": "2020-09-11T18:34:10Z", "message": "Fix compilation issues"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cf8e2128ecd0c1355fc18a6dffc8356a6c5364fa", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/cf8e2128ecd0c1355fc18a6dffc8356a6c5364fa", "committedDate": "2020-09-11T18:34:10Z", "message": "Fix compilation issues"}, "afterCommit": {"oid": "e50ca88068736cc453122e2011c3839364c1dfe9", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/e50ca88068736cc453122e2011c3839364c1dfe9", "committedDate": "2020-09-11T18:43:43Z", "message": "Fix compilation issues"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e50ca88068736cc453122e2011c3839364c1dfe9", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/e50ca88068736cc453122e2011c3839364c1dfe9", "committedDate": "2020-09-11T18:43:43Z", "message": "Fix compilation issues"}, "afterCommit": {"oid": "e8994f2705dedcd787494d0b1f7d7b2d127c4730", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/e8994f2705dedcd787494d0b1f7d7b2d127c4730", "committedDate": "2020-09-11T19:55:07Z", "message": "Fix compilation issues"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e8994f2705dedcd787494d0b1f7d7b2d127c4730", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/e8994f2705dedcd787494d0b1f7d7b2d127c4730", "committedDate": "2020-09-11T19:55:07Z", "message": "Fix compilation issues"}, "afterCommit": {"oid": "139a9c5681df98126b897deebba68291a3ea3f1d", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/139a9c5681df98126b897deebba68291a3ea3f1d", "committedDate": "2020-09-11T21:00:45Z", "message": "Fix compilation issues"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0b329b40503ee90e9a266ad4e6a54fcfdd116490", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/0b329b40503ee90e9a266ad4e6a54fcfdd116490", "committedDate": "2020-09-12T14:56:04Z", "message": "Upgrade mockito and to tests"}, "afterCommit": {"oid": "6782ee9f348e9f2106daacae4893722cc57e8e01", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/6782ee9f348e9f2106daacae4893722cc57e8e01", "committedDate": "2020-09-12T15:30:38Z", "message": "Upgrade mockito and to tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "059542cc27fed860566f4001d3557b6a8baaeb57", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/059542cc27fed860566f4001d3557b6a8baaeb57", "committedDate": "2020-09-12T16:44:40Z", "message": "Last tests"}, "afterCommit": {"oid": "914d551f607a8024360a02b6b73ee0f2c89e9505", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/914d551f607a8024360a02b6b73ee0f2c89e9505", "committedDate": "2020-09-12T17:33:20Z", "message": "Last tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "53e8179802f2ae9c4137a2405cc27af2c09fda75", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/53e8179802f2ae9c4137a2405cc27af2c09fda75", "committedDate": "2020-09-12T18:38:14Z", "message": "Updated documentation"}, "afterCommit": {"oid": "41f5ab5f0f126ce4242ad346a95af19e6a619f74", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/41f5ab5f0f126ce4242ad346a95af19e6a619f74", "committedDate": "2020-09-12T18:41:21Z", "message": "Updated documentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "31b33c11dc24efe7caed72c71c84c50006302bd5", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/31b33c11dc24efe7caed72c71c84c50006302bd5", "committedDate": "2020-09-12T19:12:53Z", "message": "Futureproof unit ID"}, "afterCommit": {"oid": "a40c02e6f1dea59c150681fa38a89da7224f81fa", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/a40c02e6f1dea59c150681fa38a89da7224f81fa", "committedDate": "2020-09-12T19:14:06Z", "message": "Futureproof unit ID"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a40c02e6f1dea59c150681fa38a89da7224f81fa", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/a40c02e6f1dea59c150681fa38a89da7224f81fa", "committedDate": "2020-09-12T19:14:06Z", "message": "Futureproof unit ID"}, "afterCommit": {"oid": "159990ee7cd5b68608fb1ca054d1eabb85d4b605", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/159990ee7cd5b68608fb1ca054d1eabb85d4b605", "committedDate": "2020-09-12T19:38:04Z", "message": "Futureproof unit ID"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "afad7eb459b624a5ec7c6a6995648ff583d6151d", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/afad7eb459b624a5ec7c6a6995648ff583d6151d", "committedDate": "2020-09-13T07:15:39Z", "message": "Add class comments/copyright notice"}, "afterCommit": {"oid": "99f9303761f40e679e10e92fe4214a57e55631f1", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/99f9303761f40e679e10e92fe4214a57e55631f1", "committedDate": "2020-09-13T07:41:27Z", "message": "Add class comments/copyright notice"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MzQ5OTU2", "url": "https://github.com/JMRI/JMRI/pull/9009#pullrequestreview-487349956", "createdAt": "2020-09-13T23:30:28Z", "commit": {"oid": "99f9303761f40e679e10e92fe4214a57e55631f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QyMzozMDoyOFrOHRAOzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QyMzozMDoyOFrOHRAOzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU5MTYyOA==", "bodyText": "What does this do? I'm not at all against it, just curious.", "url": "https://github.com/JMRI/JMRI/pull/9009#discussion_r487591628", "createdAt": "2020-09-13T23:30:28Z", "author": {"login": "danielb987"}, "path": ".project", "diffHunk": "@@ -30,5 +30,14 @@\n \t\t\t\t<arguments>1.0-name-matches-false-false-nbproject</arguments>\n \t\t\t</matcher>\n \t\t</filter>\n+\t\t<filter>\n+\t\t\t<id>1599077280157</id>\n+\t\t\t<name></name>\n+\t\t\t<type>30</type>\n+\t\t\t<matcher>\n+\t\t\t\t<id>org.eclipse.core.resources.regexFilterMatcher</id>\n+\t\t\t\t<arguments>node_modules|.git|__CREATED_BY_JAVA_LANGUAGE_SERVER__</arguments>\n+\t\t\t</matcher>\n+\t\t</filter>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f9303761f40e679e10e92fe4214a57e55631f1"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MzUxNDA2", "url": "https://github.com/JMRI/JMRI/pull/9009#pullrequestreview-487351406", "createdAt": "2020-09-13T23:45:45Z", "commit": {"oid": "99f9303761f40e679e10e92fe4214a57e55631f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QyMzo0NTo0NVrOHRAViw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QyMzo0NTo0NVrOHRAViw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU5MzM1NQ==", "bodyText": "Should these methods never be called? If so, it would be better if they throw an UnsupportedOperationException(\"Not supported\"), since that would throw an exception when the method is called and not when the returned stream is used.", "url": "https://github.com/JMRI/JMRI/pull/9009#discussion_r487593355", "createdAt": "2020-09-13T23:45:45Z", "author": {"login": "danielb987"}, "path": "java/src/jmri/jmrix/ipocs/IpocsPortController.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package jmri.jmrix.ipocs;\n+\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.net.StandardSocketOptions;\n+import java.nio.channels.AsynchronousServerSocketChannel;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import jmri.jmrix.AbstractPortController;\n+import jmri.jmrix.ipocs.protocol.Message;\n+import jmri.util.zeroconf.ZeroConfService;\n+\n+/**\n+ *\n+ * @author Fredrik Elestedt Copyright (C) 2020\n+ * @since 4.21.2\n+ */\n+public class IpocsPortController extends AbstractPortController implements IpocsClientListener {\n+  private final static Logger log = LoggerFactory.getLogger(IpocsPortController.class);\n+  private static String INADDR_ANY = \"0.0.0.0\";\n+  private AsynchronousServerSocketChannel serverSocket = null;\n+  private IpocsSocketAcceptor socketAcceptor;\n+  private ZeroConfService zeroConfService = null;\n+  private final List<IpocsClientListener> clientListeners = new ArrayList<IpocsClientListener>();\n+  private Map<String, IpocsClientHandler> clients = new HashMap<>();\n+  private Map<String, Message> lastMessage = new HashMap<>();\n+\n+  public IpocsPortController(IpocsSystemConnectionMemo memo) {\n+    super(memo);\n+    super.setManufacturer(IpocsConnectionTypeList.IPOCSMR);\n+    final Option o1 = new Option(\"Listing port\", new String[]{\"10000\"}, false, Option.Type.TEXT);\n+    super.options.put(super.option1Name, o1);\n+  }\n+\n+  @Override\n+  public IpocsSystemConnectionMemo getSystemConnectionMemo() {\n+    return (IpocsSystemConnectionMemo) super.getSystemConnectionMemo();\n+  }\n+\n+  @Override\n+  public void configure() {\n+    if (getSystemConnectionMemo().getPortController() == null) {\n+      getSystemConnectionMemo().setPortController(this);\n+    }\n+    getSystemConnectionMemo().configureManagers();\n+  }\n+\n+  @Override\n+  public void connect() throws IOException {\n+    log.info(\"Setting up service\");\n+    serverSocket = AsynchronousServerSocketChannel.open();\n+    socketAcceptor = new IpocsSocketAcceptor(this, serverSocket);\n+    final int port = Integer.parseInt(super.getOptionState(super.option1Name));\n+    final InetSocketAddress address = new InetSocketAddress(INADDR_ANY, port);\n+    serverSocket.bind(address);\n+    serverSocket.setOption(StandardSocketOptions.SO_REUSEADDR, true);\n+    serverSocket.accept(null, socketAcceptor);\n+    log.info(\"Starting ZeroConfService _ipocs._tcp.local\");\n+    zeroConfService = ZeroConfService.create(\"_ipocs._tcp.local.\", \"ipocs\", 10000, 0, 0, new HashMap<String, String>());\n+    zeroConfService.publish();\n+  }\n+\n+  @Override\n+  public DataInputStream getInputStream() {\n+    // This will never return anything, since this is a server port controller\n+    return null;\n+  }\n+\n+  @Override\n+  public DataOutputStream getOutputStream() {\n+    // This will never return anything, since this is a server port controller\n+    return null;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f9303761f40e679e10e92fe4214a57e55631f1"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MzUxODY4", "url": "https://github.com/JMRI/JMRI/pull/9009#pullrequestreview-487351868", "createdAt": "2020-09-13T23:50:38Z", "commit": {"oid": "99f9303761f40e679e10e92fe4214a57e55631f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QyMzo1MDozOFrOHRAXog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QyMzo1MDozOFrOHRAXog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU5Mzg5MA==", "bodyText": "Is this code that's not finished? Just checking so you haven't forgotten about it.", "url": "https://github.com/JMRI/JMRI/pull/9009#discussion_r487593890", "createdAt": "2020-09-13T23:50:38Z", "author": {"login": "danielb987"}, "path": "java/src/jmri/jmrix/ipocs/configurexml/IpocsConnectionConfigXml.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package jmri.jmrix.ipocs.configurexml;\n+\n+import java.io.IOException;\n+\n+import org.jdom2.Element;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import jmri.configurexml.JmriConfigureXmlException;\n+import jmri.jmrix.configurexml.AbstractConnectionConfigXml;\n+import jmri.jmrix.ipocs.IpocsConnectionConfig;\n+import jmri.jmrix.ipocs.IpocsPortController;\n+import jmri.jmrix.ipocs.IpocsSystemConnectionMemo;\n+\n+/**\n+ *\n+ * @author Fredrik Elestedt Copyright (C) 2020\n+ * @since 4.21.2\n+ */\n+public class IpocsConnectionConfigXml extends AbstractConnectionConfigXml {\n+  private final static Logger log = LoggerFactory.getLogger(IpocsConnectionConfigXml.class);\n+  IpocsPortController portController;\n+\n+  public IpocsConnectionConfigXml() {\n+    super();\n+  }\n+\n+  @Override\n+  public Element store(Object o) {\n+    Element e = new Element(\"connection\");\n+    getInstance((IpocsConnectionConfig)o);\n+\n+    storeCommon(e, portController);\n+    e.setAttribute(\"port\", \"10000\");\n+    e.setAttribute(\"enableAutoConf\", \"true\");\n+    e.setAttribute(\"class\", this.getClass().getName());\n+\n+    extendElement(e);\n+    return e;\n+  }\n+\n+  @Override\n+  public boolean load(Element shared, Element perNode) throws JmriConfigureXmlException {\n+    getInstance();\n+    try {\n+      // TODO do this\n+      //int port = Integer.parseInt(shared.getAttribute(\"port\").getValue());\n+      //portController.setPort(port);\n+    } catch (NullPointerException ex) {\n+    }\n+    try {\n+      // TODO do this\n+      //boolean autoConf = shared.getAttribute(\"enableAutoConf\").getValue().equals(\"true\");\n+      //portController.setAutoConf(hostName);\n+    } catch (NullPointerException ex) {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f9303761f40e679e10e92fe4214a57e55631f1"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MzUzNzk0", "url": "https://github.com/JMRI/JMRI/pull/9009#pullrequestreview-487353794", "createdAt": "2020-09-14T00:08:57Z", "commit": {"oid": "99f9303761f40e679e10e92fe4214a57e55631f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwMDowODo1OFrOHRAggw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwMDowODo1OFrOHRAggw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU5NjE2Mw==", "bodyText": "Should this line put the size of the buffer at byte 0? If so, are you sure that the length of the serialized packets will not exceed 255 bytes?", "url": "https://github.com/JMRI/JMRI/pull/9009#discussion_r487596163", "createdAt": "2020-09-14T00:08:58Z", "author": {"login": "danielb987"}, "path": "java/src/jmri/jmrix/ipocs/protocol/Message.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package jmri.jmrix.ipocs.protocol;\n+\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import jmri.jmrix.ipocs.protocol.packets.Packet;\n+\n+/**\n+ * Represents a IPOCS Message.\n+ *\n+ * Protocol details can be found on the project website, https://ipocsmr.github.io\n+ *\n+ * @author Fredrik Elestedt Copyright (C) 2020\n+ * @since 4.21.2\n+ */\n+public class Message {\n+  private final static Logger log = LoggerFactory.getLogger(Message.class);\n+  private byte length;\n+  private String objectName;\n+  private List<Packet> packets = new ArrayList<Packet>();\n+\n+  public byte getLength() {\n+    return length;\n+  }\n+\n+  public String getObjectName() {\n+    return objectName;\n+  }\n+\n+  public void setObjectName(String objectName) {\n+      this.objectName = objectName;\n+  }\n+\n+  public List<Packet> getPackets() {\n+    return packets;\n+  }\n+\n+  public static Message parse(ByteBuffer buffer, Integer contentSize) {\n+    int startPos = buffer.position();\n+    Message msg = new Message();\n+    // Get length\n+    msg.length = buffer.get();\n+    // Ensure that there are enough bytes in the buffer:\n+    if (msg.length > contentSize) {\n+      return null;\n+    }\n+    // Get object name\n+    StringBuilder sb = new StringBuilder();\n+    byte last;\n+    while ((last = buffer.get()) != 0x00) {\n+      sb.append((char) last);\n+    }\n+    msg.objectName = sb.toString();\n+    // Parse packets\n+    Packet packet;\n+    log.debug(\"Message for {}\", msg.objectName);\n+    while (buffer.position() - startPos < msg.length && (packet = Packet.parse(buffer)) != null) {\n+      msg.packets.add(packet);\n+    }\n+    return msg;\n+  }\n+\n+  public ByteBuffer serialize() {\n+    ByteBuffer buffer = ByteBuffer.allocate(1 + objectName.length() + 1);\n+    buffer.put(length);\n+    buffer.put(objectName.getBytes());\n+    buffer.put((byte)0);\n+    for (Packet packet : packets) {\n+      ByteBuffer serPacket = packet.serialize();\n+      ByteBuffer oldBuffer = buffer;\n+      oldBuffer.rewind();\n+      serPacket.rewind();\n+      buffer = ByteBuffer.allocate(buffer.capacity() + serPacket.capacity());\n+      buffer.put(oldBuffer);\n+      buffer.put(serPacket);\n+    }\n+    buffer.put(0, (byte)buffer.capacity());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f9303761f40e679e10e92fe4214a57e55631f1"}, "originalPosition": 81}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "99f9303761f40e679e10e92fe4214a57e55631f1", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/99f9303761f40e679e10e92fe4214a57e55631f1", "committedDate": "2020-09-13T07:41:27Z", "message": "Add class comments/copyright notice"}, "afterCommit": {"oid": "6366f0be10426c52ec2b31664883dff2e07acd01", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/6366f0be10426c52ec2b31664883dff2e07acd01", "committedDate": "2020-09-15T10:13:44Z", "message": "Allow changing listening port"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e83d20195fb6c8b1a6267557f9557aea804ffa4d", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/e83d20195fb6c8b1a6267557f9557aea804ffa4d", "committedDate": "2020-09-15T11:54:03Z", "message": "Add bundle"}, "afterCommit": {"oid": "6cc4ec2a65b18199162d0231b617cc3fab699870", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/6cc4ec2a65b18199162d0231b617cc3fab699870", "committedDate": "2020-09-15T11:59:13Z", "message": "Add bundle"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6cc4ec2a65b18199162d0231b617cc3fab699870", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/6cc4ec2a65b18199162d0231b617cc3fab699870", "committedDate": "2020-09-15T11:59:13Z", "message": "Add bundle"}, "afterCommit": {"oid": "d52d03778cf3bd2716f29a42e732a153a9a663fe", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/d52d03778cf3bd2716f29a42e732a153a9a663fe", "committedDate": "2020-09-15T12:37:11Z", "message": "Add bundle"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d52d03778cf3bd2716f29a42e732a153a9a663fe", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/d52d03778cf3bd2716f29a42e732a153a9a663fe", "committedDate": "2020-09-15T12:37:11Z", "message": "Add bundle"}, "afterCommit": {"oid": "3d0488529a4ed597ae19f51376db2dc04ad3f8a3", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/3d0488529a4ed597ae19f51376db2dc04ad3f8a3", "committedDate": "2020-09-15T13:14:01Z", "message": "Add bundle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4NzcwMTEz", "url": "https://github.com/JMRI/JMRI/pull/9009#pullrequestreview-488770113", "createdAt": "2020-09-15T14:52:56Z", "commit": {"oid": "3d0488529a4ed597ae19f51376db2dc04ad3f8a3"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MTAzNzY3", "url": "https://github.com/JMRI/JMRI/pull/9009#pullrequestreview-489103767", "createdAt": "2020-09-15T21:23:34Z", "commit": {"oid": "3d0488529a4ed597ae19f51376db2dc04ad3f8a3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMToyMzozNVrOHSVC0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMToyMzozNVrOHSVC0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk4MTIwMw==", "bodyText": "What does this script do and what is it used for?\nWe have the scripts in the folder \"scripts\", and this script is in the folder java/test.\nI apologize for not have noticed it until now, but I haven't had time to go thru all the files in this PR until now.", "url": "https://github.com/JMRI/JMRI/pull/9009#discussion_r488981203", "createdAt": "2020-09-15T21:23:35Z", "author": {"login": "danielb987"}, "path": "java/test/buildtests.sh", "diffHunk": "@@ -0,0 +1,7 @@\n+\n+for I in $( find . -name \"Ipocs*Test.java\"); do\n+  echo $I\n+  TestName=$(basename $I)\n+\n+  echo $(  basename $I ) \n+done", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d0488529a4ed597ae19f51376db2dc04ad3f8a3"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MTA3NDQ2", "url": "https://github.com/JMRI/JMRI/pull/9009#pullrequestreview-489107446", "createdAt": "2020-09-15T21:25:31Z", "commit": {"oid": "3d0488529a4ed597ae19f51376db2dc04ad3f8a3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMToyNTozMlrOHSVGaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMToyNTozMlrOHSVGaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk4MjEyMw==", "bodyText": "What is the commented code for? Old code that isn't used any more or an unfinished test?", "url": "https://github.com/JMRI/JMRI/pull/9009#discussion_r488982123", "createdAt": "2020-09-15T21:25:32Z", "author": {"login": "danielb987"}, "path": "java/test/jmri/jmrix/ipocs/IpocsClientHandlerTest.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package jmri.jmrix.ipocs;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.AsynchronousSocketChannel;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+\n+import jmri.jmrix.ipocs.protocol.Message;\n+import jmri.jmrix.ipocs.protocol.packets.ConnectionRequestPacket;\n+import jmri.jmrix.ipocs.protocol.packets.SignOfLifePacket;\n+\n+public class IpocsClientHandlerTest {\n+\n+  @Mock\n+  public AsynchronousSocketChannel client;\n+\n+  @Rule\n+  public MockitoRule mockitoRule = MockitoJUnit.rule();\n+\n+  private final IpocsClientListener listener = new IpocsClientListener() {\n+    @Override\n+    public String getUserName() {\n+      return null;\n+    }\n+\n+    @Override\n+    public void clientConnected(final IpocsClientHandler client) {\n+    }\n+\n+    @Override\n+    public void clientDisconnected(final IpocsClientHandler client) {\n+    }\n+\n+    @Override\n+    public void onMessage(final IpocsClientHandler client, final Message msg) {\n+    }\n+  };\n+\n+  @Test\n+  public void constructorTest() {\n+    assertNotNull(new IpocsClientHandler(client));\n+  }\n+\n+  @Test\n+  public void getUnitIdTest() {\n+    assertEquals(null, new IpocsClientHandler(client).getUnitId());\n+  }\n+\n+  @Test\n+  public void completedClosedTest() throws IOException {\n+    final IpocsClientHandler ch = new IpocsClientHandler(client);\n+    ch.addClientListener(listener);\n+    ch.completed(-1, null);\n+    doThrow(new IOException()).when(client).close();\n+    ch.completed(-1, null);\n+  }\n+\n+  @Test\n+  public void completedReceived1Test() throws IOException {\n+    final IpocsClientHandler ch = new IpocsClientHandler(client);\n+    ch.addClientListener(listener);\n+    final Message msg = new Message();\n+    msg.setObjectName(\"testing\");\n+    final ByteBuffer buff = msg.serialize();\n+    buff.position(buff.capacity());\n+    ch.completed(buff.capacity(), buff);\n+  }\n+\n+  @Test\n+  public void completedReceived2Test() throws IOException {\n+    final IpocsClientHandler ch = new IpocsClientHandler(client);\n+    ch.addClientListener(listener);\n+    final Message msg = new Message();\n+    msg.setObjectName(\"testing\");\n+    msg.getPackets().add(new SignOfLifePacket());\n+    final ByteBuffer buff = msg.serialize();\n+    buff.position(buff.capacity());\n+    ch.completed(buff.capacity(), buff);\n+  }\n+\n+  @Test\n+  public void completedReceived3Test() throws IOException {\n+    final IpocsClientHandler ch = new IpocsClientHandler(client);\n+    ch.addClientListener(listener);\n+    final Message msg = new Message();\n+    msg.setObjectName(\"5\");\n+    final ConnectionRequestPacket pkt = new ConnectionRequestPacket();\n+    pkt.setProtocolVersion((short) 0x0000);\n+    pkt.setSiteDataVersion(\"3df43d\");\n+    msg.getPackets().add(pkt);\n+    final ByteBuffer buff = msg.serialize();\n+    buff.position(buff.capacity());\n+    ch.completed(buff.capacity(), buff);\n+  }\n+\n+  @Test\n+  public void failedTest() throws IOException {\n+    final IpocsClientHandler ch = new IpocsClientHandler(client);\n+    ch.failed(new Exception(\"Error\"), null);\n+    jmri.util.JUnitAppender.suppressErrorMessage(\"Error closing connection\");\n+    ch.addClientListener(listener);\n+    doThrow(new IOException()).when(client).close();\n+    ch.failed(new Exception(\"Error\"), null);\n+    jmri.util.JUnitAppender.suppressErrorMessage(\"Error closing connection\");\n+  }\n+\n+  @Test\n+  public void addClientListenerTest() {\n+    final IpocsClientHandler ch = new IpocsClientHandler(client);\n+    ch.addClientListener(listener);\n+  }\n+\n+  @Test\n+  public void removeClientListenerTest() {\n+    final IpocsClientHandler ch = new IpocsClientHandler(client);\n+    ch.removeClientListener(listener);\n+  }\n+\n+  @Test\n+  public void sendMessageTest() {\n+    final IpocsClientHandler ch = new IpocsClientHandler(client);\n+    final Message msg = mock(Message.class);\n+    //final ArgumentCaptor<ByteBuffer> captor = ArgumentCaptor.forClass(ByteBuffer.class);\n+    when(msg.serialize()).thenReturn(ByteBuffer.wrap(new byte[] {}));\n+    //verify(client).write(captor.capture());\n+    ch.send(msg);\n+    //final ByteBuffer argument = captor.getValue();\n+\n+    //assertEquals(0, argument.capacity());\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d0488529a4ed597ae19f51376db2dc04ad3f8a3"}, "originalPosition": 141}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MTE2MTEw", "url": "https://github.com/JMRI/JMRI/pull/9009#pullrequestreview-489116110", "createdAt": "2020-09-15T21:30:27Z", "commit": {"oid": "3d0488529a4ed597ae19f51376db2dc04ad3f8a3"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "decc0d5b754ca56548d97bdad5d21f8e6eb58951", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/decc0d5b754ca56548d97bdad5d21f8e6eb58951", "committedDate": "2020-09-15T21:30:48Z", "message": "Initial IPOCS implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "809116d4f60fb285e751b841d714d6504fa7086a", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/809116d4f60fb285e751b841d714d6504fa7086a", "committedDate": "2020-09-15T21:30:56Z", "message": "Add Message test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4d87254ce7b8e97dab754efa6ca62607759053a", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/e4d87254ce7b8e97dab754efa6ca62607759053a", "committedDate": "2020-09-15T21:30:56Z", "message": "Added more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a86632153c161736601311397aaa3e36dd9a5537", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/a86632153c161736601311397aaa3e36dd9a5537", "committedDate": "2020-09-15T21:30:56Z", "message": "Fix compilation issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b53f813b121bf9b5fc7663bcf70fabdd6711487", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/4b53f813b121bf9b5fc7663bcf70fabdd6711487", "committedDate": "2020-09-15T21:30:57Z", "message": "Fixed tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e3db6486203c9f671158a933faccbe3958473ec", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/6e3db6486203c9f671158a933faccbe3958473ec", "committedDate": "2020-09-15T21:32:20Z", "message": "More tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d452f063ee11ce40cbcbe80455623c67f95c39b9", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/d452f063ee11ce40cbcbe80455623c67f95c39b9", "committedDate": "2020-09-15T21:33:37Z", "message": "Upgrade mockito and to tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d5c958f3a606ec66d270637662bd56473784979", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/5d5c958f3a606ec66d270637662bd56473784979", "committedDate": "2020-09-15T21:33:42Z", "message": "Last tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fee183bbe90c54bf8e3956635c6aeda7c7b6103", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/4fee183bbe90c54bf8e3956635c6aeda7c7b6103", "committedDate": "2020-09-15T21:33:43Z", "message": "Updated documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f9b6e35cec6032cb7a115eb14efada9fffa137c", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/5f9b6e35cec6032cb7a115eb14efada9fffa137c", "committedDate": "2020-09-15T21:33:43Z", "message": "Futureproof unit ID"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19e7118b9fd13c41c876bc3eb985f3e0b5eb5a59", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/19e7118b9fd13c41c876bc3eb985f3e0b5eb5a59", "committedDate": "2020-09-15T21:33:43Z", "message": "Draft release notes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7a741d7501f2b3ea50387b5e7e769ef1df1245a", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/f7a741d7501f2b3ea50387b5e7e769ef1df1245a", "committedDate": "2020-09-15T21:33:43Z", "message": "Fix styles import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00b0c48a4504d79249f03d45ea3b7e4f060aaad2", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/00b0c48a4504d79249f03d45ea3b7e4f060aaad2", "committedDate": "2020-09-15T21:33:43Z", "message": "Add class comments/copyright notice"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e70d8621b6dbd30bd7bddb24a1e051bba2d304a2", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/e70d8621b6dbd30bd7bddb24a1e051bba2d304a2", "committedDate": "2020-09-15T21:33:43Z", "message": "Throw exception on calls which should not happen"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6d9e88a2964ab77910d7e3eab88def5aaef4494", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/e6d9e88a2964ab77910d7e3eab88def5aaef4494", "committedDate": "2020-09-15T21:33:43Z", "message": "Allow changing listening port"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc5002fce1816d7fddc9407bd8fd48bdcd7a305a", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/dc5002fce1816d7fddc9407bd8fd48bdcd7a305a", "committedDate": "2020-09-15T21:33:44Z", "message": "Throw exception if Message is too long"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbd4440c2dcc50e5ab23b52d0b79c86932cd33d5", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/bbd4440c2dcc50e5ab23b52d0b79c86932cd33d5", "committedDate": "2020-09-15T21:33:44Z", "message": "Add bundle"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3d0488529a4ed597ae19f51376db2dc04ad3f8a3", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/3d0488529a4ed597ae19f51376db2dc04ad3f8a3", "committedDate": "2020-09-15T13:14:01Z", "message": "Add bundle"}, "afterCommit": {"oid": "bbd4440c2dcc50e5ab23b52d0b79c86932cd33d5", "author": {"user": {"login": "elestedt", "name": "Fredrik Elestedt"}}, "url": "https://github.com/JMRI/JMRI/commit/bbd4440c2dcc50e5ab23b52d0b79c86932cd33d5", "committedDate": "2020-09-15T21:33:44Z", "message": "Add bundle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MTUwNzk0", "url": "https://github.com/JMRI/JMRI/pull/9009#pullrequestreview-489150794", "createdAt": "2020-09-15T22:27:37Z", "commit": {"oid": "bbd4440c2dcc50e5ab23b52d0b79c86932cd33d5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3908, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}