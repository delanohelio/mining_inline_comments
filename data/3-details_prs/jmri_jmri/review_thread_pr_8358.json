{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzOTY5NDYx", "number": 8358, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMTozMjoyOFrODyQFNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMTozMzowNFrODyQF9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDE4ODcxOnYy", "diffSide": "RIGHT", "path": "java/src/jmri/server/json/block/JsonBlockHttpService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMTozMjoyOFrOGGMUOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMTowOToyMlrOGGQ7kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE0NjQyNw==", "bodyText": "Please leave instanceof alone and change the cast instead.", "url": "https://github.com/JMRI/JMRI/pull/8358#discussion_r409146427", "createdAt": "2020-04-15T21:32:28Z", "author": {"login": "rhwood"}, "path": "java/src/jmri/server/json/block/JsonBlockHttpService.java", "diffHunk": "@@ -63,7 +63,7 @@ public ObjectNode doGet(Block block, String name, String type, JsonRequest reque\n         } else if (bv instanceof jmri.IdTag) {\n             ObjectNode idTagValue = idTagService.doGet((jmri.IdTag) bv, name, IDTAG, request);\n             data.set(VALUE, idTagValue);\n-        } else if (bv instanceof Reportable) {\n+        } else if (bv instanceof jmri.Reporter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a8226fcdcdda11c1887b1a650c0e0c58e3c4bd6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE2MzY2NQ==", "bodyText": "@rhwood has this right.  Reportable and reporter are not the same thing.  Reportable objects are returned by reporters.", "url": "https://github.com/JMRI/JMRI/pull/8358#discussion_r409163665", "createdAt": "2020-04-15T22:09:09Z", "author": {"login": "pabender"}, "path": "java/src/jmri/server/json/block/JsonBlockHttpService.java", "diffHunk": "@@ -63,7 +63,7 @@ public ObjectNode doGet(Block block, String name, String type, JsonRequest reque\n         } else if (bv instanceof jmri.IdTag) {\n             ObjectNode idTagValue = idTagService.doGet((jmri.IdTag) bv, name, IDTAG, request);\n             data.set(VALUE, idTagValue);\n-        } else if (bv instanceof Reportable) {\n+        } else if (bv instanceof jmri.Reporter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE0NjQyNw=="}, "originalCommit": {"oid": "6a8226fcdcdda11c1887b1a650c0e0c58e3c4bd6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyMjAzNA==", "bodyText": "The method it's being passed to is expecting a Reporter, not a Reportable?", "url": "https://github.com/JMRI/JMRI/pull/8358#discussion_r409222034", "createdAt": "2020-04-16T01:09:22Z", "author": {"login": "icklesteve"}, "path": "java/src/jmri/server/json/block/JsonBlockHttpService.java", "diffHunk": "@@ -63,7 +63,7 @@ public ObjectNode doGet(Block block, String name, String type, JsonRequest reque\n         } else if (bv instanceof jmri.IdTag) {\n             ObjectNode idTagValue = idTagService.doGet((jmri.IdTag) bv, name, IDTAG, request);\n             data.set(VALUE, idTagValue);\n-        } else if (bv instanceof Reportable) {\n+        } else if (bv instanceof jmri.Reporter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE0NjQyNw=="}, "originalCommit": {"oid": "6a8226fcdcdda11c1887b1a650c0e0c58e3c4bd6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDE5MDYzOnYy", "diffSide": "LEFT", "path": "java/src/jmri/server/json/memory/JsonMemoryHttpService.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMTozMzowNFrOGGMVYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwOToyNTo1NlrOGGcjWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE0NjcyMQ==", "bodyText": "Please leave instanceof alone and change the cast instead.", "url": "https://github.com/JMRI/JMRI/pull/8358#discussion_r409146721", "createdAt": "2020-04-15T21:33:04Z", "author": {"login": "rhwood"}, "path": "java/src/jmri/server/json/memory/JsonMemoryHttpService.java", "diffHunk": "@@ -48,7 +48,7 @@ public ObjectNode doGet(Memory memory, String name, String type, JsonRequest req\n                 if (val instanceof jmri.IdTag) {\n                     ObjectNode idTagValue = idTagService.doGet((jmri.IdTag) val, name, IDTAG, request);\n                     data.set(VALUE, idTagValue);\n-                } else if (val instanceof Reportable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a8226fcdcdda11c1887b1a650c0e0c58e3c4bd6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE2MzY4MA==", "bodyText": "@rhwood has this right.  Reportable and reporter are not the same thing.  Reportable objects are returned by reporters.", "url": "https://github.com/JMRI/JMRI/pull/8358#discussion_r409163680", "createdAt": "2020-04-15T22:09:12Z", "author": {"login": "pabender"}, "path": "java/src/jmri/server/json/memory/JsonMemoryHttpService.java", "diffHunk": "@@ -48,7 +48,7 @@ public ObjectNode doGet(Memory memory, String name, String type, JsonRequest req\n                 if (val instanceof jmri.IdTag) {\n                     ObjectNode idTagValue = idTagService.doGet((jmri.IdTag) val, name, IDTAG, request);\n                     data.set(VALUE, idTagValue);\n-                } else if (val instanceof Reportable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE0NjcyMQ=="}, "originalCommit": {"oid": "6a8226fcdcdda11c1887b1a650c0e0c58e3c4bd6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyMjA4MA==", "bodyText": "The method it's being passed to is expecting a Reporter, not a Reportable?", "url": "https://github.com/JMRI/JMRI/pull/8358#discussion_r409222080", "createdAt": "2020-04-16T01:09:31Z", "author": {"login": "icklesteve"}, "path": "java/src/jmri/server/json/memory/JsonMemoryHttpService.java", "diffHunk": "@@ -48,7 +48,7 @@ public ObjectNode doGet(Memory memory, String name, String type, JsonRequest req\n                 if (val instanceof jmri.IdTag) {\n                     ObjectNode idTagValue = idTagService.doGet((jmri.IdTag) val, name, IDTAG, request);\n                     data.set(VALUE, idTagValue);\n-                } else if (val instanceof Reportable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE0NjcyMQ=="}, "originalCommit": {"oid": "6a8226fcdcdda11c1887b1a650c0e0c58e3c4bd6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyODY3OQ==", "bodyText": "The method it's being passed to is expecting a Reporter, not a Reportable?\n\n\nIt is entirely possible that there is an error here, but based on context, I would expect special handling for a Reportable object here, but I\u2019ll defer to @rhwood who knows this code  better than I do.", "url": "https://github.com/JMRI/JMRI/pull/8358#discussion_r409228679", "createdAt": "2020-04-16T01:33:12Z", "author": {"login": "pabender"}, "path": "java/src/jmri/server/json/memory/JsonMemoryHttpService.java", "diffHunk": "@@ -48,7 +48,7 @@ public ObjectNode doGet(Memory memory, String name, String type, JsonRequest req\n                 if (val instanceof jmri.IdTag) {\n                     ObjectNode idTagValue = idTagService.doGet((jmri.IdTag) val, name, IDTAG, request);\n                     data.set(VALUE, idTagValue);\n-                } else if (val instanceof Reportable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE0NjcyMQ=="}, "originalCommit": {"oid": "6a8226fcdcdda11c1887b1a650c0e0c58e3c4bd6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQxMjQ0Mg==", "bodyText": "I missed that, there is no manager for Reportables, but there are managers for Reporters, so I withdraw my request for changes.", "url": "https://github.com/JMRI/JMRI/pull/8358#discussion_r409412442", "createdAt": "2020-04-16T09:25:56Z", "author": {"login": "rhwood"}, "path": "java/src/jmri/server/json/memory/JsonMemoryHttpService.java", "diffHunk": "@@ -48,7 +48,7 @@ public ObjectNode doGet(Memory memory, String name, String type, JsonRequest req\n                 if (val instanceof jmri.IdTag) {\n                     ObjectNode idTagValue = idTagService.doGet((jmri.IdTag) val, name, IDTAG, request);\n                     data.set(VALUE, idTagValue);\n-                } else if (val instanceof Reportable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE0NjcyMQ=="}, "originalCommit": {"oid": "6a8226fcdcdda11c1887b1a650c0e0c58e3c4bd6"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4640, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}