{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxMTEyNzA0", "number": 8746, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMTo1NzoxOVrOEJfLyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMTo1ODo1NFrOEJfMNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzgzNTYzOnYy", "diffSide": "RIGHT", "path": "java/src/jmri/server/json/throttle/JsonThrottle.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMTo1NzoxOVrOGqAmSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwMDoyOTo1NlrOGqBkDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcwMzE3OQ==", "bodyText": "the else should not be on a line by itself, but should be on the same line as the closing brace of prior block.", "url": "https://github.com/JMRI/JMRI/pull/8746#discussion_r446703179", "createdAt": "2020-06-28T21:57:19Z", "author": {"login": "rhwood"}, "path": "java/src/jmri/server/json/throttle/JsonThrottle.java", "diffHunk": "@@ -139,18 +139,26 @@ public static JsonThrottle getThrottle(String throttleId, JsonNode data, JsonThr\n                     manager.getServers(throttle).size()));\n         } else {\n             throttle = new JsonThrottle(address, server);\n-            if (!manager.requestThrottle(address, throttle)) {\n-                log.error(\"Unable to get throttle for \\\"{}\\\".\", address);\n-                throw new JsonException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, Bundle\n-                        .getMessage(server.getConnection().getLocale(), \"ErrorThrottleUnableToGetThrottle\", address),\n-                        id);\n+            if (entry!=null) {\n+                if (!manager.requestThrottle(entry, throttle)) {\n+                    log.error(\"Unable to get rostered throttle for \\\"{}\\\".\", address);\n+                    throw new JsonException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, Bundle\n+                            .getMessage(server.getConnection().getLocale(), \"ErrorThrottleUnableToGetThrottle\", address),\n+                            id);\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3555e24a40a354fe2a31cf3a1af37dbed4d43163"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcxODk5MA==", "bodyText": "Fair enough but a bit of a shame, it's no longer collapsible in notepad++ !", "url": "https://github.com/JMRI/JMRI/pull/8746#discussion_r446718990", "createdAt": "2020-06-29T00:29:56Z", "author": {"login": "icklesteve"}, "path": "java/src/jmri/server/json/throttle/JsonThrottle.java", "diffHunk": "@@ -139,18 +139,26 @@ public static JsonThrottle getThrottle(String throttleId, JsonNode data, JsonThr\n                     manager.getServers(throttle).size()));\n         } else {\n             throttle = new JsonThrottle(address, server);\n-            if (!manager.requestThrottle(address, throttle)) {\n-                log.error(\"Unable to get throttle for \\\"{}\\\".\", address);\n-                throw new JsonException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, Bundle\n-                        .getMessage(server.getConnection().getLocale(), \"ErrorThrottleUnableToGetThrottle\", address),\n-                        id);\n+            if (entry!=null) {\n+                if (!manager.requestThrottle(entry, throttle)) {\n+                    log.error(\"Unable to get rostered throttle for \\\"{}\\\".\", address);\n+                    throw new JsonException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, Bundle\n+                            .getMessage(server.getConnection().getLocale(), \"ErrorThrottleUnableToGetThrottle\", address),\n+                            id);\n+                }\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcwMzE3OQ=="}, "originalCommit": {"oid": "3555e24a40a354fe2a31cf3a1af37dbed4d43163"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzgzNjUzOnYy", "diffSide": "RIGHT", "path": "java/src/jmri/server/json/throttle/JsonThrottle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMTo1ODoyN1rOGqAmsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMTo1ODoyN1rOGqAmsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcwMzI4Mw==", "bodyText": "Replace this address with the entry id.", "url": "https://github.com/JMRI/JMRI/pull/8746#discussion_r446703283", "createdAt": "2020-06-28T21:58:27Z", "author": {"login": "rhwood"}, "path": "java/src/jmri/server/json/throttle/JsonThrottle.java", "diffHunk": "@@ -139,18 +139,26 @@ public static JsonThrottle getThrottle(String throttleId, JsonNode data, JsonThr\n                     manager.getServers(throttle).size()));\n         } else {\n             throttle = new JsonThrottle(address, server);\n-            if (!manager.requestThrottle(address, throttle)) {\n-                log.error(\"Unable to get throttle for \\\"{}\\\".\", address);\n-                throw new JsonException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, Bundle\n-                        .getMessage(server.getConnection().getLocale(), \"ErrorThrottleUnableToGetThrottle\", address),\n-                        id);\n+            if (entry!=null) {\n+                if (!manager.requestThrottle(entry, throttle)) {\n+                    log.error(\"Unable to get rostered throttle for \\\"{}\\\".\", address);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3555e24a40a354fe2a31cf3a1af37dbed4d43163"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzgzNjcxOnYy", "diffSide": "RIGHT", "path": "java/src/jmri/server/json/throttle/JsonThrottle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMTo1ODo1NFrOGqAmyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMTo1ODo1NFrOGqAmyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcwMzMwNw==", "bodyText": "Replace this address with the entry id.", "url": "https://github.com/JMRI/JMRI/pull/8746#discussion_r446703307", "createdAt": "2020-06-28T21:58:54Z", "author": {"login": "rhwood"}, "path": "java/src/jmri/server/json/throttle/JsonThrottle.java", "diffHunk": "@@ -139,18 +139,26 @@ public static JsonThrottle getThrottle(String throttleId, JsonNode data, JsonThr\n                     manager.getServers(throttle).size()));\n         } else {\n             throttle = new JsonThrottle(address, server);\n-            if (!manager.requestThrottle(address, throttle)) {\n-                log.error(\"Unable to get throttle for \\\"{}\\\".\", address);\n-                throw new JsonException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, Bundle\n-                        .getMessage(server.getConnection().getLocale(), \"ErrorThrottleUnableToGetThrottle\", address),\n-                        id);\n+            if (entry!=null) {\n+                if (!manager.requestThrottle(entry, throttle)) {\n+                    log.error(\"Unable to get rostered throttle for \\\"{}\\\".\", address);\n+                    throw new JsonException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, Bundle\n+                            .getMessage(server.getConnection().getLocale(), \"ErrorThrottleUnableToGetThrottle\", address),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3555e24a40a354fe2a31cf3a1af37dbed4d43163"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4485, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}