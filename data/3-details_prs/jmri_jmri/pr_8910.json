{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1MTk4MzI4", "number": 8910, "title": "Separate topic strings for MQTT turnout send and receive", "bodyText": "This adds the ability to separately specify the MQTT topics for \"from\" and \"to\" JMRI communications for Turnouts. It follows from Jmriusers discussions and #8902, #8903.", "createdAt": "2020-08-09T20:25:20Z", "url": "https://github.com/JMRI/JMRI/pull/8910", "merged": true, "mergeCommit": {"oid": "f23d425f94837bdafb1849feffa98bc67eb4dccc"}, "closed": true, "closedAt": "2020-08-11T22:12:10Z", "author": {"login": "bobjacobsen"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc9TkHBAH2gAyNDY1MTk4MzI4OmIwMGVhMjg4NjQ0ZmE3Njk4NTE3ZjUyMTY2YWI4ZjViMjg5Y2I3YzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc9V4wsAH2gAyNDY1MTk4MzI4OmU5ZjQwN2E3NzRkNjVhZGNiOTFlZWY4NGFkY2JhNzEzZDQyZGNkM2I=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b00ea288644fa7698517f52166ab8f5b289cb7c4", "author": {"user": {"login": "bobjacobsen", "name": "Bob Jacobsen"}}, "url": "https://github.com/JMRI/JMRI/commit/b00ea288644fa7698517f52166ab8f5b289cb7c4", "committedDate": "2020-08-09T20:23:06Z", "message": "separate topic strings for send and receive"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzOTAxNjE1", "url": "https://github.com/JMRI/JMRI/pull/8910#pullrequestreview-463901615", "createdAt": "2020-08-09T20:35:13Z", "commit": {"oid": "b00ea288644fa7698517f52166ab8f5b289cb7c4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzOTAzMDIx", "url": "https://github.com/JMRI/JMRI/pull/8910#pullrequestreview-463903021", "createdAt": "2020-08-09T21:00:48Z", "commit": {"oid": "b00ea288644fa7698517f52166ab8f5b289cb7c4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQyMTowMDo0OFrOG99xNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQyMTowMDo0OFrOG99xNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYyODM0Mg==", "bodyText": "Noticed now that this state is removed. This is not the same as inconsistent.\nMOVING is a controlled state showing that the turnout is switching position. It should not be removed.", "url": "https://github.com/JMRI/JMRI/pull/8910#discussion_r467628342", "createdAt": "2020-08-09T21:00:48Z", "author": {"login": "elestedt"}, "path": "java/src/jmri/jmrix/mqtt/MqttTurnout.java", "diffHunk": "@@ -12,85 +12,83 @@\n public class MqttTurnout extends AbstractTurnout implements MqttEventListener {\n \n     private final MqttAdapter mqttAdapter;\n-    private final String topic;\n-    private final static String stateTopicPrefix = \"state/\";\n-    private final static String commandTopicPrefix = \"command/\";\n+    private final String sendTopic;\n+    private final String rcvTopic;\n \n     /**\n      * Requires, but does not check, that the system name and topic be consistent\n      * @param ma Adapter to reference for connection\n      * @param systemName System name of turnout\n-     * @param topic MQTT topic being used\n+     * @param sendTopicFormat MQTT topic to use when sending (full string, including systemName part)\n+     * @param sendTopicFormat MQTT topic to use when receiving (full string, including systemName part)\n      */\n-    MqttTurnout(MqttAdapter ma, String systemName, String topic) {\n+    MqttTurnout(MqttAdapter ma, String systemName, String sendTopic, String rcvTopic) {\n         super(systemName);\n-        this.topic = topic;\n+        this.sendTopic = sendTopic;\n+        this.rcvTopic  = rcvTopic;\n         mqttAdapter = ma;\n-        mqttAdapter.subscribe(getStateTopicPrefix() + topic, this);\n-        _validFeedbackNames = new String[] {\"DIRECT\", \"ONESENSOR\", \"TWOSENSOR\", \"DELAYED\", \"MONITORING\", \"EXACT\"};\n-        _validFeedbackModes = new int[] {DIRECT, ONESENSOR, TWOSENSOR, DELAYED, MONITORING, EXACT};\n+        mqttAdapter.subscribe(rcvTopic, this);  // only receive receive topic, not send one\n+        _validFeedbackNames = new String[] {\"DIRECT\", \"ONESENSOR\", \"TWOSENSOR\", \"DELAYED\", \"MONITORING\"};\n+        _validFeedbackModes = new int[] {DIRECT, ONESENSOR, TWOSENSOR, DELAYED, MONITORING};\n         _validFeedbackTypes = DIRECT | ONESENSOR | TWOSENSOR | DELAYED | MONITORING;\n     }\n \n-    private String getStateTopicPrefix() {\n-        return (getFeedbackMode() == EXACT ? stateTopicPrefix : \"\");\n-    }\n-\n-    private String getCommandTopicPrefix() {\n-        return (getFeedbackMode() == EXACT ? commandTopicPrefix : \"\");\n-    }\n-\n-    @Override\n-    public void setFeedbackMode(int mode) throws IllegalArgumentException {\n-        mqttAdapter.unsubscribe(getStateTopicPrefix() + topic, this);\n-        try {\n-            super.setFeedbackMode(mode);\n-        } finally {\n-            mqttAdapter.subscribe(getStateTopicPrefix() + topic, this);\n-        }\n-    }\n-\n     public void setParser(MqttContentParser<Turnout> parser) {\n         this.parser = parser;\n     }\n-    \n+        \n     MqttContentParser<Turnout> parser = new MqttContentParser<Turnout>() {\n         private final static String closedText = \"CLOSED\";\n         private final static String thrownText = \"THROWN\";\n         private final static String unknownText = \"UNKNOWN\";\n         private final static String inconsistentText = \"INCONSISTENT\";\n-        private final static String movingText = \"MOVING\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b00ea288644fa7698517f52166ab8f5b289cb7c4"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a371fc0fecdc8cb6c530b493e22d1a0f30f325d", "author": {"user": {"login": "bobjacobsen", "name": "Bob Jacobsen"}}, "url": "https://github.com/JMRI/JMRI/commit/9a371fc0fecdc8cb6c530b493e22d1a0f30f325d", "committedDate": "2020-08-09T21:05:01Z", "message": "migrate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d3950f509252c7bbc89fc031f5ba5ae123e7b80", "author": {"user": {"login": "bobjacobsen", "name": "Bob Jacobsen"}}, "url": "https://github.com/JMRI/JMRI/commit/0d3950f509252c7bbc89fc031f5ba5ae123e7b80", "committedDate": "2020-08-09T21:05:16Z", "message": "doc, javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9890b298578f7ef9722492a99f2d955f907ec8b6", "author": {"user": {"login": "bobjacobsen", "name": "Bob Jacobsen"}}, "url": "https://github.com/JMRI/JMRI/commit/9890b298578f7ef9722492a99f2d955f907ec8b6", "committedDate": "2020-08-09T21:52:30Z", "message": "add sensors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9f407a774d65adcb91eef84adcba713d42dcd3b", "author": {"user": {"login": "bobjacobsen", "name": "Bob Jacobsen"}}, "url": "https://github.com/JMRI/JMRI/commit/e9f407a774d65adcb91eef84adcba713d42dcd3b", "committedDate": "2020-08-09T23:05:28Z", "message": "javadoc"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3981, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}