{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUyNTczODQ0", "number": 8850, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxMzo1NjozOVrOEP22Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjoyMzozOVrOEP61kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MDYyNzE5OnYy", "diffSide": "RIGHT", "path": "java/test/jmri/util/LoggingTestUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxMzo1NjozOVrOGzvsgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQyMDozODoyNFrOGzyMTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkxMjAwMw==", "bodyText": "Why a new class and not adding logging initialization to jmri.util.JUnitLoggingUtil? (its likely going to be confusing having JUnitLoggingUtil and LoggingTestUtil)", "url": "https://github.com/JMRI/JMRI/pull/8850#discussion_r456912003", "createdAt": "2020-07-19T13:56:39Z", "author": {"login": "rhwood"}, "path": "java/test/jmri/util/LoggingTestUtil.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package jmri.util;\n+\n+import java.io.*;\n+import java.nio.file.Files;\n+import java.util.*;\n+\n+import javax.annotation.Nonnull;\n+\n+import jmri.util.exceptionhandler.UncaughtExceptionHandler;\n+\n+import org.apache.log4j.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Common utility methods for working with Log4J in tests.\n+ * <p>\n+ * Two system properties influence how logging is configured in JMRI:\n+ * <dl>\n+ * <dt>jmri.log</dt><dd>The logging control file. If this file is not an\n+ * absolute path, this file is searched for in the following order:<ol>\n+ * <li>JMRI settings directory</li>\n+ * <li>JMRI installation (program) directory</li>\n+ * </ol>\n+ * If this property is not specified, the logging control file\n+ * <i>default.lcf</i> is used, following the above search order to find it.\n+ * </dd>\n+ * <dt>jmri.log.path</dt><dd>The directory for storing logs. If not specified,\n+ * logs are stored in the JMRI preferences directory.</dd>\n+ * </dl>\n+ *\n+ * @author Bob Jacobsen Copyright 2009, 2010\n+ * @author Randall Wood Copyright 2014, 2020\n+ */\n+public class LoggingTestUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c22476c864ef991d7d19d03494b5d735cc200a46"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkxODE1Mw==", "bodyText": "LoggingTestUtil handles initialization of the logger.\nJUnitLoggingUtil is, per the the class description, utilities for handling special case logging messages in tests.\nPutting both tasks in a single class violates the single responsibility principle.\nI would have named the new class Log4JUtil, but there is a, now deprecated, class with that name already in the package.", "url": "https://github.com/JMRI/JMRI/pull/8850#discussion_r456918153", "createdAt": "2020-07-19T14:53:03Z", "author": {"login": "pabender"}, "path": "java/test/jmri/util/LoggingTestUtil.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package jmri.util;\n+\n+import java.io.*;\n+import java.nio.file.Files;\n+import java.util.*;\n+\n+import javax.annotation.Nonnull;\n+\n+import jmri.util.exceptionhandler.UncaughtExceptionHandler;\n+\n+import org.apache.log4j.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Common utility methods for working with Log4J in tests.\n+ * <p>\n+ * Two system properties influence how logging is configured in JMRI:\n+ * <dl>\n+ * <dt>jmri.log</dt><dd>The logging control file. If this file is not an\n+ * absolute path, this file is searched for in the following order:<ol>\n+ * <li>JMRI settings directory</li>\n+ * <li>JMRI installation (program) directory</li>\n+ * </ol>\n+ * If this property is not specified, the logging control file\n+ * <i>default.lcf</i> is used, following the above search order to find it.\n+ * </dd>\n+ * <dt>jmri.log.path</dt><dd>The directory for storing logs. If not specified,\n+ * logs are stored in the JMRI preferences directory.</dd>\n+ * </dl>\n+ *\n+ * @author Bob Jacobsen Copyright 2009, 2010\n+ * @author Randall Wood Copyright 2014, 2020\n+ */\n+public class LoggingTestUtil {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkxMjAwMw=="}, "originalCommit": {"oid": "c22476c864ef991d7d19d03494b5d735cc200a46"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1MjkwOA==", "bodyText": "@rhwood I renamed the class TesttingLoggerConfiguration. That should eliminate the confusion.", "url": "https://github.com/JMRI/JMRI/pull/8850#discussion_r456952908", "createdAt": "2020-07-19T20:38:24Z", "author": {"login": "pabender"}, "path": "java/test/jmri/util/LoggingTestUtil.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package jmri.util;\n+\n+import java.io.*;\n+import java.nio.file.Files;\n+import java.util.*;\n+\n+import javax.annotation.Nonnull;\n+\n+import jmri.util.exceptionhandler.UncaughtExceptionHandler;\n+\n+import org.apache.log4j.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Common utility methods for working with Log4J in tests.\n+ * <p>\n+ * Two system properties influence how logging is configured in JMRI:\n+ * <dl>\n+ * <dt>jmri.log</dt><dd>The logging control file. If this file is not an\n+ * absolute path, this file is searched for in the following order:<ol>\n+ * <li>JMRI settings directory</li>\n+ * <li>JMRI installation (program) directory</li>\n+ * </ol>\n+ * If this property is not specified, the logging control file\n+ * <i>default.lcf</i> is used, following the above search order to find it.\n+ * </dd>\n+ * <dt>jmri.log.path</dt><dd>The directory for storing logs. If not specified,\n+ * logs are stored in the JMRI preferences directory.</dd>\n+ * </dl>\n+ *\n+ * @author Bob Jacobsen Copyright 2009, 2010\n+ * @author Randall Wood Copyright 2014, 2020\n+ */\n+public class LoggingTestUtil {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkxMjAwMw=="}, "originalCommit": {"oid": "c22476c864ef991d7d19d03494b5d735cc200a46"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MDY4Nzg4OnYy", "diffSide": "LEFT", "path": "java/test/jmri/jmrit/logix/LearnWarrantTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxNTowNToyNVrOGzwKLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxNTowNToyNVrOGzwKLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkxOTU5Nw==", "bodyText": "I just wanted to point out the subtle bug in this line.\nThe & happens before the |, so the result of the & doesn\u2019t matter because the | with a constant always makes the value nonzero.\nThe solution is to put the | in parentheses. I moved that line to the oBlockOccupiedOrAllocated method.", "url": "https://github.com/JMRI/JMRI/pull/8850#discussion_r456919597", "createdAt": "2020-07-19T15:05:25Z", "author": {"login": "pabender"}, "path": "java/test/jmri/jmrit/logix/LearnWarrantTest.java", "diffHunk": "@@ -96,24 +84,18 @@ public void testLearnWarrant() throws Exception {\n         Sensor sensor = block0.getSensor();\n         NXFrameTest.setAndConfirmSensorAction(sensor, Sensor.ACTIVE, block0);\n \n-        JUnitUtil.waitFor(() -> {\n-            return  (block0.getState() & OBlock.ALLOCATED | OBlock.OCCUPIED) != 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c22476c864ef991d7d19d03494b5d735cc200a46"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTI4MDgwOnYy", "diffSide": "RIGHT", "path": "java/test/jmri/configurexml/LoadAndStoreTestBase.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjoyMzozOVrOGz0yPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNToyNzoyMVrOGz49tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5NTM4OA==", "bodyText": "Please do this for X as well as Y. When I run this test on my laptop with Debian Linux, I consistent get wrong X values on some items. I don't know why, but by adding your code, but for the X axis, removes the problem.\nIn the tests that failes, x=0 is expected, but I get x=-5.", "url": "https://github.com/JMRI/JMRI/pull/8850#discussion_r456995388", "createdAt": "2020-07-20T02:23:39Z", "author": {"login": "danielb987"}, "path": "java/test/jmri/configurexml/LoadAndStoreTestBase.java", "diffHunk": "@@ -196,6 +196,24 @@ public static void checkFile(File inFile1, File inFile2) throws Exception {\n                 }\n             }\n \n+            // window y positions will sometimes differ based on window decorations.\n+            if (!match) {\n+                if (line1.contains(\"  <LayoutEditor\") ||\n+                    line1.contains(\" <switchboardeditor\")) {\n+                    // if either line contains a y position attribute\n+                    String yposition_regexe = \"( y=\\\"[^\\\"]*\\\")\";\n+                    String[] splits1 = line1.split(yposition_regexe);\n+                    if (splits1.length == 2) {  // (yes) remove it\n+                        line1 = splits1[0] + splits1[1];\n+                    }\n+                    String[] splits2 = line2.split(yposition_regexe);\n+                    if (splits2.length == 2) {  // (yes) remove it\n+                        line2 = splits2[0] + splits2[1];\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbc6f64612f1a1d70e51373d7da3ceb69b570728"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA1ODQzNQ==", "bodyText": "sure, thanks for the suggestion.  I did a little refactoring at the same time.", "url": "https://github.com/JMRI/JMRI/pull/8850#discussion_r457058435", "createdAt": "2020-07-20T05:15:07Z", "author": {"login": "pabender"}, "path": "java/test/jmri/configurexml/LoadAndStoreTestBase.java", "diffHunk": "@@ -196,6 +196,24 @@ public static void checkFile(File inFile1, File inFile2) throws Exception {\n                 }\n             }\n \n+            // window y positions will sometimes differ based on window decorations.\n+            if (!match) {\n+                if (line1.contains(\"  <LayoutEditor\") ||\n+                    line1.contains(\" <switchboardeditor\")) {\n+                    // if either line contains a y position attribute\n+                    String yposition_regexe = \"( y=\\\"[^\\\"]*\\\")\";\n+                    String[] splits1 = line1.split(yposition_regexe);\n+                    if (splits1.length == 2) {  // (yes) remove it\n+                        line1 = splits1[0] + splits1[1];\n+                    }\n+                    String[] splits2 = line2.split(yposition_regexe);\n+                    if (splits2.length == 2) {  // (yes) remove it\n+                        line2 = splits2[0] + splits2[1];\n+                    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5NTM4OA=="}, "originalCommit": {"oid": "cbc6f64612f1a1d70e51373d7da3ceb69b570728"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA2Mjg3NQ==", "bodyText": "Thanks. The static analysis failed since line 197 and 198 of LoadAndStoreTestBase should have xposition_regexe instead of yposition_regexe.", "url": "https://github.com/JMRI/JMRI/pull/8850#discussion_r457062875", "createdAt": "2020-07-20T05:25:00Z", "author": {"login": "danielb987"}, "path": "java/test/jmri/configurexml/LoadAndStoreTestBase.java", "diffHunk": "@@ -196,6 +196,24 @@ public static void checkFile(File inFile1, File inFile2) throws Exception {\n                 }\n             }\n \n+            // window y positions will sometimes differ based on window decorations.\n+            if (!match) {\n+                if (line1.contains(\"  <LayoutEditor\") ||\n+                    line1.contains(\" <switchboardeditor\")) {\n+                    // if either line contains a y position attribute\n+                    String yposition_regexe = \"( y=\\\"[^\\\"]*\\\")\";\n+                    String[] splits1 = line1.split(yposition_regexe);\n+                    if (splits1.length == 2) {  // (yes) remove it\n+                        line1 = splits1[0] + splits1[1];\n+                    }\n+                    String[] splits2 = line2.split(yposition_regexe);\n+                    if (splits2.length == 2) {  // (yes) remove it\n+                        line2 = splits2[0] + splits2[1];\n+                    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5NTM4OA=="}, "originalCommit": {"oid": "cbc6f64612f1a1d70e51373d7da3ceb69b570728"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA2Mzg2MQ==", "bodyText": "Yeah, I saw that.  should be fixed now.", "url": "https://github.com/JMRI/JMRI/pull/8850#discussion_r457063861", "createdAt": "2020-07-20T05:27:21Z", "author": {"login": "pabender"}, "path": "java/test/jmri/configurexml/LoadAndStoreTestBase.java", "diffHunk": "@@ -196,6 +196,24 @@ public static void checkFile(File inFile1, File inFile2) throws Exception {\n                 }\n             }\n \n+            // window y positions will sometimes differ based on window decorations.\n+            if (!match) {\n+                if (line1.contains(\"  <LayoutEditor\") ||\n+                    line1.contains(\" <switchboardeditor\")) {\n+                    // if either line contains a y position attribute\n+                    String yposition_regexe = \"( y=\\\"[^\\\"]*\\\")\";\n+                    String[] splits1 = line1.split(yposition_regexe);\n+                    if (splits1.length == 2) {  // (yes) remove it\n+                        line1 = splits1[0] + splits1[1];\n+                    }\n+                    String[] splits2 = line2.split(yposition_regexe);\n+                    if (splits2.length == 2) {  // (yes) remove it\n+                        line2 = splits2[0] + splits2[1];\n+                    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5NTM4OA=="}, "originalCommit": {"oid": "cbc6f64612f1a1d70e51373d7da3ceb69b570728"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4520, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}