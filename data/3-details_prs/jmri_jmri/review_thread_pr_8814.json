{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2NTcxNTQ3", "number": 8814, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwOToxNDo1MFrOEMz6ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwOToxNzoyN1rOEMz-SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODY4OTM4OnYy", "diffSide": "RIGHT", "path": "java/src/jmri/jmrit/roster/swing/RosterFrame.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwOToxNDo1MFrOGvIsLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMToyODowNVrOGvNA7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA3ODYzNg==", "bodyText": "Do you intend to leave this reference to apps intact?", "url": "https://github.com/JMRI/JMRI/pull/8814#discussion_r452078636", "createdAt": "2020-07-09T09:14:50Z", "author": {"login": "rhwood"}, "path": "java/src/jmri/jmrit/roster/swing/RosterFrame.java", "diffHunk": "@@ -140,58 +140,58 @@ public RosterFrame(String name, String menubarFile, String toolbarFile) {\n     }\n \n     int clickDelay = 0;\n-    JRadioButtonMenuItem contextEdit = new JRadioButtonMenuItem(Bundle.getMessage(\"ButtonEdit\"));\n-    JRadioButtonMenuItem contextOps = new JRadioButtonMenuItem(Bundle.getMessage(\"ProgrammingOnMain\"));\n-    JRadioButtonMenuItem contextService = new JRadioButtonMenuItem(Bundle.getMessage(\"ProgrammingTrack\"));\n-    JTextPane dateUpdated = new JTextPane();\n-    JTextPane dccAddress = new JTextPane();\n-    JTextPane decoderFamily = new JTextPane();\n-    JTextPane decoderModel = new JTextPane();\n-    JRadioButton edit = new JRadioButton(Bundle.getMessage(\"EditOnly\"));\n-    JTextPane filename = new JTextPane();\n+    final JRadioButtonMenuItem contextEdit = new JRadioButtonMenuItem(Bundle.getMessage(\"ButtonEdit\"));\n+    final JRadioButtonMenuItem contextOps = new JRadioButtonMenuItem(Bundle.getMessage(\"ProgrammingOnMain\"));\n+    final JRadioButtonMenuItem contextService = new JRadioButtonMenuItem(Bundle.getMessage(\"ProgrammingTrack\"));\n+    final JTextPane dateUpdated = new JTextPane();\n+    final JTextPane dccAddress = new JTextPane();\n+    final JTextPane decoderFamily = new JTextPane();\n+    final JTextPane decoderModel = new JTextPane();\n+    final JRadioButton edit = new JRadioButton(Bundle.getMessage(\"EditOnly\"));\n+    final JTextPane filename = new JTextPane();\n     JLabel firstHelpLabel;\n     //int firstTimeAddedEntry = 0x00;\n     int groupSplitPaneLocation = 0;\n     RosterGroupsPanel groups;\n     boolean hideGroups = false;\n     boolean hideRosterImage = false;\n-    JTextPane id = new JTextPane();\n+    final JTextPane id = new JTextPane();\n     boolean inStartProgrammer = false;\n     ResizableImagePanel locoImage;\n     JTextPane maxSpeed = new JTextPane();\n-    JTextPane mfg = new JTextPane();\n-    ProgModeSelector modePanel = new ProgServiceModeComboBox();\n-    JTextPane model = new JTextPane();\n-    JLabel operationsModeProgrammerLabel = new JLabel();\n-    JRadioButton ops = new JRadioButton(Bundle.getMessage(\"ProgrammingOnMain\"));\n+    final JTextPane mfg = new JTextPane();\n+    final ProgModeSelector modePanel = new ProgServiceModeComboBox();\n+    final JTextPane model = new JTextPane();\n+    final JLabel operationsModeProgrammerLabel = new JLabel();\n+    final JRadioButton ops = new JRadioButton(Bundle.getMessage(\"ProgrammingOnMain\"));\n     ConnectionConfig opsModeProCon = null;\n-    JTextPane owner = new JTextPane();\n+    final JTextPane owner = new JTextPane();\n     UserPreferencesManager prefsMgr;\n-    JButton prog1Button = new JButton(Bundle.getMessage(\"Program\"));\n-    JButton prog2Button = new JButton(Bundle.getMessage(\"BasicProgrammer\"));\n+    final JButton prog1Button = new JButton(Bundle.getMessage(\"Program\"));\n+    final JButton prog2Button = new JButton(Bundle.getMessage(\"BasicProgrammer\"));\n     ActionListener programModeListener;\n \n     // These are the names of the programmer _files_, not what should be displayed to the user\n     String programmer1 = \"Comprehensive\"; // NOI18N\n     String programmer2 = \"Basic\"; // NOI18N\n \n-    java.util.ResourceBundle rb = java.util.ResourceBundle.getBundle(\"apps.AppsBundle\");\n+    final java.util.ResourceBundle rb = java.util.ResourceBundle.getBundle(\"apps.AppsBundle\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55cfaed7c694e81e6a9160dc776ddc1c6c9d0f23"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE0OTQ4NQ==", "bodyText": "We'll fix that, along with any other references to bundles, but the first goal is to make the code compile separately.\nI missed it in my other PR.", "url": "https://github.com/JMRI/JMRI/pull/8814#discussion_r452149485", "createdAt": "2020-07-09T11:28:05Z", "author": {"login": "pabender"}, "path": "java/src/jmri/jmrit/roster/swing/RosterFrame.java", "diffHunk": "@@ -140,58 +140,58 @@ public RosterFrame(String name, String menubarFile, String toolbarFile) {\n     }\n \n     int clickDelay = 0;\n-    JRadioButtonMenuItem contextEdit = new JRadioButtonMenuItem(Bundle.getMessage(\"ButtonEdit\"));\n-    JRadioButtonMenuItem contextOps = new JRadioButtonMenuItem(Bundle.getMessage(\"ProgrammingOnMain\"));\n-    JRadioButtonMenuItem contextService = new JRadioButtonMenuItem(Bundle.getMessage(\"ProgrammingTrack\"));\n-    JTextPane dateUpdated = new JTextPane();\n-    JTextPane dccAddress = new JTextPane();\n-    JTextPane decoderFamily = new JTextPane();\n-    JTextPane decoderModel = new JTextPane();\n-    JRadioButton edit = new JRadioButton(Bundle.getMessage(\"EditOnly\"));\n-    JTextPane filename = new JTextPane();\n+    final JRadioButtonMenuItem contextEdit = new JRadioButtonMenuItem(Bundle.getMessage(\"ButtonEdit\"));\n+    final JRadioButtonMenuItem contextOps = new JRadioButtonMenuItem(Bundle.getMessage(\"ProgrammingOnMain\"));\n+    final JRadioButtonMenuItem contextService = new JRadioButtonMenuItem(Bundle.getMessage(\"ProgrammingTrack\"));\n+    final JTextPane dateUpdated = new JTextPane();\n+    final JTextPane dccAddress = new JTextPane();\n+    final JTextPane decoderFamily = new JTextPane();\n+    final JTextPane decoderModel = new JTextPane();\n+    final JRadioButton edit = new JRadioButton(Bundle.getMessage(\"EditOnly\"));\n+    final JTextPane filename = new JTextPane();\n     JLabel firstHelpLabel;\n     //int firstTimeAddedEntry = 0x00;\n     int groupSplitPaneLocation = 0;\n     RosterGroupsPanel groups;\n     boolean hideGroups = false;\n     boolean hideRosterImage = false;\n-    JTextPane id = new JTextPane();\n+    final JTextPane id = new JTextPane();\n     boolean inStartProgrammer = false;\n     ResizableImagePanel locoImage;\n     JTextPane maxSpeed = new JTextPane();\n-    JTextPane mfg = new JTextPane();\n-    ProgModeSelector modePanel = new ProgServiceModeComboBox();\n-    JTextPane model = new JTextPane();\n-    JLabel operationsModeProgrammerLabel = new JLabel();\n-    JRadioButton ops = new JRadioButton(Bundle.getMessage(\"ProgrammingOnMain\"));\n+    final JTextPane mfg = new JTextPane();\n+    final ProgModeSelector modePanel = new ProgServiceModeComboBox();\n+    final JTextPane model = new JTextPane();\n+    final JLabel operationsModeProgrammerLabel = new JLabel();\n+    final JRadioButton ops = new JRadioButton(Bundle.getMessage(\"ProgrammingOnMain\"));\n     ConnectionConfig opsModeProCon = null;\n-    JTextPane owner = new JTextPane();\n+    final JTextPane owner = new JTextPane();\n     UserPreferencesManager prefsMgr;\n-    JButton prog1Button = new JButton(Bundle.getMessage(\"Program\"));\n-    JButton prog2Button = new JButton(Bundle.getMessage(\"BasicProgrammer\"));\n+    final JButton prog1Button = new JButton(Bundle.getMessage(\"Program\"));\n+    final JButton prog2Button = new JButton(Bundle.getMessage(\"BasicProgrammer\"));\n     ActionListener programModeListener;\n \n     // These are the names of the programmer _files_, not what should be displayed to the user\n     String programmer1 = \"Comprehensive\"; // NOI18N\n     String programmer2 = \"Basic\"; // NOI18N\n \n-    java.util.ResourceBundle rb = java.util.ResourceBundle.getBundle(\"apps.AppsBundle\");\n+    final java.util.ResourceBundle rb = java.util.ResourceBundle.getBundle(\"apps.AppsBundle\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA3ODYzNg=="}, "originalCommit": {"oid": "55cfaed7c694e81e6a9160dc776ddc1c6c9d0f23"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODY5ODk2OnYy", "diffSide": "RIGHT", "path": "java/src/apps/AppsConfigurationManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwOToxNzoyN1rOGvIyMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMToyOToyM1rOGvNDPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA4MDE3OQ==", "bodyText": "Given that 3 other classes in jmri also use TabbedPreferencesAction, it would be better to provide a preferences window launching action that does not rely on apps instead of breaking apart JmriConfigurationManager.", "url": "https://github.com/JMRI/JMRI/pull/8814#discussion_r452080179", "createdAt": "2020-07-09T09:17:27Z", "author": {"login": "rhwood"}, "path": "java/src/apps/AppsConfigurationManager.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package apps;\n+\n+import apps.gui3.tabbedpreferences.EditConnectionPreferencesDialog;\n+import apps.gui3.tabbedpreferences.TabbedPreferencesAction;\n+import jmri.Application;\n+import jmri.implementation.JmriConfigurationManager;\n+\n+import javax.swing.*;\n+\n+public class AppsConfigurationManager extends JmriConfigurationManager {\n+\n+    @Override\n+    protected void displayErrorListDialog(Object list) {\n+        super.displayErrorListDialog(list);\n+        (new TabbedPreferencesAction()).actionPerformed();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55cfaed7c694e81e6a9160dc776ddc1c6c9d0f23"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1MDA3OA==", "bodyText": "Cleaning up JmriConfigurationManager needed to be done in any case.\nI will look into those other uses you mention.", "url": "https://github.com/JMRI/JMRI/pull/8814#discussion_r452150078", "createdAt": "2020-07-09T11:29:23Z", "author": {"login": "pabender"}, "path": "java/src/apps/AppsConfigurationManager.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package apps;\n+\n+import apps.gui3.tabbedpreferences.EditConnectionPreferencesDialog;\n+import apps.gui3.tabbedpreferences.TabbedPreferencesAction;\n+import jmri.Application;\n+import jmri.implementation.JmriConfigurationManager;\n+\n+import javax.swing.*;\n+\n+public class AppsConfigurationManager extends JmriConfigurationManager {\n+\n+    @Override\n+    protected void displayErrorListDialog(Object list) {\n+        super.displayErrorListDialog(list);\n+        (new TabbedPreferencesAction()).actionPerformed();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA4MDE3OQ=="}, "originalCommit": {"oid": "55cfaed7c694e81e6a9160dc776ddc1c6c9d0f23"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4499, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}