{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0MTIxNTc1", "number": 8855, "title": "Update Testing documentation for JUnit 5", "bodyText": "This is still a WIP, but it starts to update the testing documentation for JUnit5.\nAs of the initial commit to the PR, I have reached the Swing testing portion of the page, but I have not started to update that section.  There are probably other things before that I will tweak as I go through this again.", "createdAt": "2020-07-21T04:47:18Z", "url": "https://github.com/JMRI/JMRI/pull/8855", "merged": true, "mergeCommit": {"oid": "8a79b729291946915b5fbbed6a2cd44259446a5f"}, "closed": true, "closedAt": "2020-08-05T03:32:05Z", "author": {"login": "pabender"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc2-tvWAH2gAyNDU0MTIxNTc1OjkyZTgwMDQ0YzFkODE1N2RhZDZjODgzYTlhM2ZmYTJlZDRjMTMyZTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7TqVXgFqTQ2MDExNzcwMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "92e80044c1d8157dad6c883a9a3ffa2ed4c132e4", "author": {"user": {"login": "pabender", "name": "Paul Bender"}}, "url": "https://github.com/JMRI/JMRI/commit/92e80044c1d8157dad6c883a9a3ffa2ed4c132e4", "committedDate": "2020-07-21T04:42:04Z", "message": "start updating testing documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b07c55eb5708a21e155e7d4b1c6d16fbc24ea33", "author": {"user": {"login": "pabender", "name": "Paul Bender"}}, "url": "https://github.com/JMRI/JMRI/commit/0b07c55eb5708a21e155e7d4b1c6d16fbc24ea33", "committedDate": "2020-07-25T15:38:05Z", "message": "more doc updates for JUnit5"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMTE3NzAw", "url": "https://github.com/JMRI/JMRI/pull/8855#pullrequestreview-460117700", "createdAt": "2020-08-03T15:21:52Z", "commit": {"oid": "0b07c55eb5708a21e155e7d4b1c6d16fbc24ea33"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNToyMTo1MlrOG692KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNToyMTo1MlrOG692KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ4Mzg4MA==", "bodyText": "Would this be a good place to add a discussion of @ToDo?  If so, I can do that using your explanation from #8845 after this is merged.", "url": "https://github.com/JMRI/JMRI/pull/8855#discussion_r464483880", "createdAt": "2020-08-03T15:21:52Z", "author": {"login": "bobjacobsen"}, "path": "help/en/html/doc/Technical/JUnit.shtml", "diffHunk": "@@ -880,107 +911,111 @@ setenv JMRI_OPTIONS -Djmri.util.JUnitUtil.checkRemnantThreads=true\n         <a href=\"#tempFileCreation\">above section</a> for more on using that.\n       <li><a href=\"https://github.com/junit-team/junit4/wiki/rules#expectedexception-rules\">ExpectedException</a>\n         - handles test methods that are expected to throw exceptions\n-    \n+\n       </ul>\n-      \n+\n       <h4>\n       <a name=\"TimeoutRule\" id=\"TimeoutRule\">Timeout - limit duration</a></h4>\n-      \n+\n       The <a href=\"https://github.com/junit-team/junit4/wiki/rules#timeout-rule\">Timeout rule</a>\n       imposes a timeout on all test methods in a class.\n-      \n+\n <pre style=\"font-family: monospace;\">\n     @Rule\n     public org.junit.rules.Timeout globalTimeout = org.junit.rules.Timeout.seconds(10);\n-</pre>   \n+</pre>\n \n       <p>\n       Note that you can also add a timeout option to an individual test via an\n       argument to the @Test annotation. For example,\n <pre style=\"font-family: monospace;\">\n     @Test(timeout=2000)\n-</pre>   \n+</pre>\n       will put a 2 second (2,000 milliseconds) timeout on that test. If you use\n       both the rule and the option, the option will control the behavior.\n       For a bit more info, see the\n       <a href=\n         \"https://github.com/junit-team/junit4/wiki/Timeout-for-tests\">\n         JUnit Timeouts for Tests page</a>.\n-      \n+\n       <h4>\n       <a name=\"RetryRule\" id=\"RetryRule\">RetryRule - run test several times</a></h4>\n-      \n-      JMRI has \n+\n+      JMRI has\n       <code><a href=\"https://github.com/JMRI/JMRI/tree/master/java/test/jmri/util/junit/rules/RetryRule.java\">jmri.util.junit.rules.RetryRule</a></code>\n       which can rerun a test multiple times until\n       it reaches a limit or finally passes. Although it's\n-      better to write reliable tests, this can be a way \n-      to make the CI system more reliable while you \n+      better to write reliable tests, this can be a way\n+      to make the CI system more reliable while you\n       try to find out why a test isn't reliable.\n       <p>\n       For a working example, see\n       <a href=\"https://github.com/JMRI/JMRI/tree/master/java/test/jmri/jmrit/logix/LearnWarrantTest.java\">java/test/jmri/jmrit/logix/LearnWarrantTest.java</a>\n       <p>\n-      Briefly, you just add the lines \n+      Briefly, you just add the lines\n <pre style=\"font-family: monospace;\">\n     import jmri.util.junit.rules.RetryRule;\n-    \n+\n     @Rule\n     public RetryRule retryRule = new RetryRule(3);  // allow 3 retries\n-</pre>   \n+</pre>\n       to your test class.  This will modify how JUnit\n       handles errors during all of the tests in that class.\n \n     <h3><a id=\"control\" name=\"control\"></a>Tools for Controlling JUnit tests</h3>\n-      <ul>\n+      <li>\n \n-        <li><a href=\n-        \"https://github.com/junit-team/junit4/wiki/Categories\">Categories</a>\n+        <li><a href=\"https://junit.org/junit5/docs/current/user-guide/#writing-tests-tagging-and-filtering\">Tags and Filters</a>\n         - useful ones in our case could be headless/not headless,\n         hardware specific (loco buffer attached, NCE PowerPro\n         attached, etc)</li>\n \n-        <li><a href=\n-        \"http://junit.sourceforge.net/javadoc/org/junit/Assume.html\">\n-        Assumptions</a> - to conditionally ignore a test. For\n-        example, a test that would fail in a headless environment\n-        can be ignored in headless mode if the first line of the\n-        test method is:<br>\n-        <code>Assume.assumeFalse(GraphicsEnvironment.isHeadless());</code></li>\n-        \n+        <li>JUnit 5 provides a collection of <a\n+                  href=\"https://junit.org/junit5/docs/5.1.0/api/org/junit/jupiter/api/condition/package-summary.html\">conditional annotations</a>.\n+              JMRI makes extensive use of <a href=\n+          \"https://junit.org/junit5/docs/5.1.0/api/org/junit/jupiter/api/condition/DisabledIfSystemProperty.html\">\n+              <code>@DisabledIfSystemProperty</code></a> to conditionally ignore a test. For example, a test that would\n+              fail in a headless environment should be ignored in headless mode.  Adding the following annotation to\n+              the tet method<br>\n+          <code>@DisabledIfSystemProperty(named =\"java.awt.headless\", matches =\"true\")</code>\n+          <br>\n+              will cause the test to be ignored in headless mode.  If a whole class is to be disable din headless\n+              mode, this same annotation may be applied to the test class.\n+      </li>\n+\n         <li>\n         <a href=\"http://builds.jmri.org/jenkins/job/Development/job/Ignored%20Test%20Scan/lastBuild/testReport/\">\n                     <img src=\"http://builds.jmri.org/jenkins/job/Development/job/Ignored%20Test%20Scan/warnings7/trendGraph/png?url=PRIORITY\" align=\"right\">\n-                </a>        \n-        <a href=\"http://junit.sourceforge.net/javadoc/org/junit/Ignore.html\">Ignore</a> - \n+                </a>\n+        <a href=\"https://junit.org/junit5/docs/5.0.0-M2/api/org/junit/jupiter/api/Disabled.html\">@Disabled</a> -\n         mark a test to be unconditionally ignored. For\n         example, a test that fails because it isn't fully implemented yet can be marked to be ignored:<br>\n <pre style=\"font-family: monospace;\">\n-        @org.junit.Ignore(\"not done yet\")\n+        @org.junit.jupiter.api.Disabled(\"not done yet\")\n         @jmri.util.junit.annotations.ToDo(\"Need to create some mock Framistat Objects\")\n         @Test\n         public void notDoneYet() {\n             // some code that compiles but doesn't run\n         }\n </pre><br>\n-        You should provide the reason for ignoring this test in the <code>@Ignore</code> argument. \n-        <code>@Ignore</code> without an argument\n+        You should provide the reason for ignoring this test in the <code>@Disabled</code> argument.\n+        <code>@Disabled</code> without an argument", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b07c55eb5708a21e155e7d4b1c6d16fbc24ea33"}, "originalPosition": 752}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4044, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}