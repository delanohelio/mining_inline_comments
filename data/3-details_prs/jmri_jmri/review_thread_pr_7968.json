{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0NDI0MzQ0", "number": 7968, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxMzozODozN1rODY_4bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxMzozODozN1rODY_4bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTM5MDU1OnYy", "diffSide": "RIGHT", "path": "java/src/jmri/jmrit/logix/Engineer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxMzozODozN1rOFfK0VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxODoxMTowNlrOFfLmvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIyNzQxMw==", "bodyText": "It seems this means that if there are multiple Engineers, they all share the same synchronization lock, and is that really what\u2019s wanted?", "url": "https://github.com/JMRI/JMRI/pull/7968#discussion_r368227413", "createdAt": "2020-01-18T13:38:37Z", "author": {"login": "rhwood"}, "path": "java/src/jmri/jmrit/logix/Engineer.java", "diffHunk": "@@ -40,16 +42,17 @@\n     private boolean _waitForClear = false;  // waits for signals/occupancy/allocation to clear\n     private boolean _waitForSync = false;  // waits for train to catch up to commands\n     private boolean _waitForSensor = false; // wait for sensor event\n-    private boolean _runOnET = false;   // Execute commands on ET only - do not synch\n+    private boolean _runOnET = false;   // Execute commands on ET only - do not synchn\n     private boolean _setRunOnET = false; // Need to delay _runOnET from the block that set it\n     private int _syncIdx;           // block order index of current command\n     protected DccThrottle _throttle;\n     private final Warrant _warrant;\n     private final List<ThrottleSetting> _commands;\n     private Sensor _waitSensor;\n     private int _sensorWaitState;\n-    private ThrottleRamp _ramp;\n     final ReentrantLock _lock = new ReentrantLock(true);    // Ramp needs to block script speeds\n+    private static Object _lockObject = new Object(); // used for synchronizing threads for _ramp", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9ba29f2e6467ff893078ce69fbecf3c1079b24a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIzMTg5NQ==", "bodyText": "I am actually not sure.\nPreviously, the synchronization was using a thread instance, which shouldn\u2019t be done.\nAt least one of those references was in a static method, hence turning this into a static....\nBut some of the tests are failing on Travis , so this probably needs to be rethought, as it isn\u2019t right.", "url": "https://github.com/JMRI/JMRI/pull/7968#discussion_r368231895", "createdAt": "2020-01-18T15:16:06Z", "author": {"login": "pabender"}, "path": "java/src/jmri/jmrit/logix/Engineer.java", "diffHunk": "@@ -40,16 +42,17 @@\n     private boolean _waitForClear = false;  // waits for signals/occupancy/allocation to clear\n     private boolean _waitForSync = false;  // waits for train to catch up to commands\n     private boolean _waitForSensor = false; // wait for sensor event\n-    private boolean _runOnET = false;   // Execute commands on ET only - do not synch\n+    private boolean _runOnET = false;   // Execute commands on ET only - do not synchn\n     private boolean _setRunOnET = false; // Need to delay _runOnET from the block that set it\n     private int _syncIdx;           // block order index of current command\n     protected DccThrottle _throttle;\n     private final Warrant _warrant;\n     private final List<ThrottleSetting> _commands;\n     private Sensor _waitSensor;\n     private int _sensorWaitState;\n-    private ThrottleRamp _ramp;\n     final ReentrantLock _lock = new ReentrantLock(true);    // Ramp needs to block script speeds\n+    private static Object _lockObject = new Object(); // used for synchronizing threads for _ramp", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIyNzQxMw=="}, "originalCommit": {"oid": "d9ba29f2e6467ff893078ce69fbecf3c1079b24a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI0MDMxNw==", "bodyText": "This should be fixed now.  The static reference was on an intern class, soI have it a lock object of its own.", "url": "https://github.com/JMRI/JMRI/pull/7968#discussion_r368240317", "createdAt": "2020-01-18T18:11:06Z", "author": {"login": "pabender"}, "path": "java/src/jmri/jmrit/logix/Engineer.java", "diffHunk": "@@ -40,16 +42,17 @@\n     private boolean _waitForClear = false;  // waits for signals/occupancy/allocation to clear\n     private boolean _waitForSync = false;  // waits for train to catch up to commands\n     private boolean _waitForSensor = false; // wait for sensor event\n-    private boolean _runOnET = false;   // Execute commands on ET only - do not synch\n+    private boolean _runOnET = false;   // Execute commands on ET only - do not synchn\n     private boolean _setRunOnET = false; // Need to delay _runOnET from the block that set it\n     private int _syncIdx;           // block order index of current command\n     protected DccThrottle _throttle;\n     private final Warrant _warrant;\n     private final List<ThrottleSetting> _commands;\n     private Sensor _waitSensor;\n     private int _sensorWaitState;\n-    private ThrottleRamp _ramp;\n     final ReentrantLock _lock = new ReentrantLock(true);    // Ramp needs to block script speeds\n+    private static Object _lockObject = new Object(); // used for synchronizing threads for _ramp", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIyNzQxMw=="}, "originalCommit": {"oid": "d9ba29f2e6467ff893078ce69fbecf3c1079b24a"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4680, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}