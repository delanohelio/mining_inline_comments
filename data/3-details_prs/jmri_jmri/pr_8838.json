{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5NDk2ODk2", "number": 8838, "title": "ThrottleServers - use standard function method over reflection", "bodyText": "No functional changes intended.\nIf @rhwood could review that would be appreciated.", "createdAt": "2020-07-15T13:54:24Z", "url": "https://github.com/JMRI/JMRI/pull/8838", "merged": true, "mergeCommit": {"oid": "3624e59418a62b55e02b96b410026362f5cde532"}, "closed": true, "closedAt": "2020-08-05T00:35:05Z", "author": {"login": "icklesteve"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1KctwgH2gAyNDQ5NDk2ODk2OmEzMzliYmU0M2MzN2QzZjI4YzA4YTZlNmVhZDZlYzIwZDg4YTFmMjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc26vFfgFqTQ1MjAzNzcyMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a339bbe43c37d3f28c08a6e6ead6ec20d88a1f28", "author": {"user": {"login": "icklesteve", "name": "Steve Young"}}, "url": "https://github.com/JMRI/JMRI/commit/a339bbe43c37d3f28c08a6e6ead6ec20d88a1f28", "committedDate": "2020-07-15T13:14:29Z", "message": "ThrottleServers - use standard function method over reflection"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5Mjk1NzYy", "url": "https://github.com/JMRI/JMRI/pull/8838#pullrequestreview-449295762", "createdAt": "2020-07-15T20:13:47Z", "commit": {"oid": "a339bbe43c37d3f28c08a6e6ead6ec20d88a1f28"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMDoxMzo0OFrOGyOMUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMDoxNDowMlrOGyOMtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxNDUxNA==", "bodyText": "This sets the function value and then ALWAYS sends an error status.  That isn't right.\nThe If statement needs to be before the t.setFunction() call with the send of error status as the else.", "url": "https://github.com/JMRI/JMRI/pull/8838#discussion_r455314514", "createdAt": "2020-07-15T20:13:48Z", "author": {"login": "pabender"}, "path": "java/src/jmri/jmris/AbstractThrottleServer.java", "diffHunk": "@@ -66,14 +66,8 @@ public void setThrottleFunctions(LocoAddress l, ArrayList<Boolean> fList) {\n         throttleList.forEach(t -> {\n             if (t.getLocoAddress() == l) {\n                 for (int i = 0; i < fList.size(); i++) {\n-                    try {\n-                        java.lang.reflect.Method setter = t.getClass()\n-                                .getMethod(\"setF\" + i, boolean.class);\n-                        setter.invoke(t, fList.get(i));\n-                    } catch (java.lang.NoSuchMethodException\n-                            | java.lang.IllegalAccessException\n-                            | java.lang.reflect.InvocationTargetException ex1) {\n-                        log.error(\"\", ex1);\n+                    t.setFunction(i, fList.get(i));\n+                    if ( i > t.getFunctions().length-1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a339bbe43c37d3f28c08a6e6ead6ec20d88a1f28"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxNDYxNQ==", "bodyText": "This sets the function value and then ALWAYS sends an error status.  That isn't right.\nThe If statement needs to be before the t.setFunction() call with the send of error status as the else.", "url": "https://github.com/JMRI/JMRI/pull/8838#discussion_r455314615", "createdAt": "2020-07-15T20:14:02Z", "author": {"login": "pabender"}, "path": "java/src/jmri/jmris/srcp/JmriSRCPThrottleServer.java", "diffHunk": "@@ -331,14 +331,8 @@ public void setThrottleFunctions(int bus, int address, ArrayList<Boolean> fList)\n                 log.debug(\"Throttle in throttle list\");\n                 Throttle t = throttleList.get(addressList.indexOf(addr));\n                 for (int i = 0; i < fList.size(); i++) {\n-                    try {\n-                        java.lang.reflect.Method setter = t.getClass()\n-                                .getMethod(\"setF\" + i, boolean.class);\n-                        setter.invoke(t, fList.get(i));\n-                    } catch (java.lang.NoSuchMethodException\n-                            | java.lang.IllegalAccessException\n-                            | java.lang.reflect.InvocationTargetException ex1) {\n-                        log.error(\"\", ex1);\n+                    t.setFunction(i, fList.get(i));\n+                    if ( i > t.getFunctions().length-1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a339bbe43c37d3f28c08a6e6ead6ec20d88a1f28"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "105ce350a6ecdf42b835826dba158410f9680409", "author": {"user": {"login": "icklesteve", "name": "Steve Young"}}, "url": "https://github.com/JMRI/JMRI/commit/105ce350a6ecdf42b835826dba158410f9680409", "committedDate": "2020-07-16T12:44:50Z", "message": "add setFunctionsByThrottle method\n\nmove setFunction to else\nnow setFunction isn't called, add error logging to fail"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5ODM2MDIx", "url": "https://github.com/JMRI/JMRI/pull/8838#pullrequestreview-449836021", "createdAt": "2020-07-16T13:16:46Z", "commit": {"oid": "105ce350a6ecdf42b835826dba158410f9680409"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMDM3NzIz", "url": "https://github.com/JMRI/JMRI/pull/8838#pullrequestreview-452037723", "createdAt": "2020-07-21T00:02:23Z", "commit": {"oid": "105ce350a6ecdf42b835826dba158410f9680409"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMDowMjoyM1rOG0jVlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMDowMjoyM1rOG0jVlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc1ODEwMw==", "bodyText": "I think i >= ... would much clearer than i > ... -1", "url": "https://github.com/JMRI/JMRI/pull/8838#discussion_r457758103", "createdAt": "2020-07-21T00:02:23Z", "author": {"login": "rhwood"}, "path": "java/src/jmri/jmris/AbstractThrottleServer.java", "diffHunk": "@@ -65,26 +65,32 @@ public void setThrottleFunctions(LocoAddress l, ArrayList<Boolean> fList) {\n         // get the throttle for the address.\n         throttleList.forEach(t -> {\n             if (t.getLocoAddress() == l) {\n-                for (int i = 0; i < fList.size(); i++) {\n-                    try {\n-                        java.lang.reflect.Method setter = t.getClass()\n-                                .getMethod(\"setF\" + i, boolean.class);\n-                        setter.invoke(t, fList.get(i));\n-                    } catch (java.lang.NoSuchMethodException\n-                            | java.lang.IllegalAccessException\n-                            | java.lang.reflect.InvocationTargetException ex1) {\n-                        log.error(\"\", ex1);\n-                        try {\n-                            sendErrorStatus();\n-                        } catch (IOException ioe) {\n-                            log.error(\"Error writing to network port\");\n-                        }\n-                    }\n-                }\n+                setFunctionsByThrottle(t,fList);\n             }\n         });\n     }\n-\n+    \n+    /**\n+     * Set Throttle Functions on/off.\n+     *\n+     * @param t Throttle to change speed of.\n+     * @param fList an ArrayList of boolean values indicating whether the\n+     *         function is active or not.\n+     */\n+    protected void setFunctionsByThrottle(Throttle t, ArrayList<Boolean> fList){\n+        for (int i = 0; i < fList.size(); i++) {\n+            if ( i > t.getFunctions().length-1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "105ce350a6ecdf42b835826dba158410f9680409"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4037, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}