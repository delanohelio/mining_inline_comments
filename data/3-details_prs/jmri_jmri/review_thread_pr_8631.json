{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NTA0NjMw", "number": 8631, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTozMTo1OVrOECvf5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTozMTo1OVrOECvf5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzEwODIzOnYy", "diffSide": "LEFT", "path": "java/src/jmri/jmrix/lenz/XNetTurnout.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTozMTo1OVrOGfYxUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMTowMjoyMVrOGf9Q-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2NDg4MQ==", "bodyText": "This is interesting. On public mailing list, it was said:\n\nThe series of off messages, including the delays, ensure that the command station tells the turnout to throw then actually stops sending the message to the rails, confirms the stop was received, and doesn\u2019t tell us \u201cI\u2019m busy, go away for a while\u201d in the process.\nIt was a hard fought painful process to get it to the point where it is and simplification of the process is not an option.\n\nNow I see that a delay between ON message and a corresponding OFF goes away. It was also said that (some) delay is necessary\nIt was also defined that\n\n\nQ3: I understood that if OFF message was sent \"immediately\", in less than 30ms after the \"ON\" message, the command station/turnout decoder might not have enough time to even start the operation - the turnout might not be switched. Correct ?\n\n\n\nCorrect.\n\nNow it seems the OFF message enters the high priority queue immediately; where is that safety delay ensured  - or is it no longer necessary ?", "url": "https://github.com/JMRI/JMRI/pull/8631#discussion_r435564881", "createdAt": "2020-06-04T21:31:59Z", "author": {"login": "svatoun"}, "path": "java/src/jmri/jmrix/lenz/XNetTurnout.java", "diffHunk": "@@ -526,19 +538,9 @@ protected synchronized void sendOffMessage() {\n             log.debug(\"Current Thread ID: {} Thread Name {}\", java.lang.Thread.currentThread().getId(), java.lang.Thread.currentThread().getName());\n         }\n         XNetMessage msg = getOffMessage();\n-        // Set the known state to the commanded state.\n-        // To avoid some of the command station busy\n-        // messages, add a short delay before sending the\n-        // first off message.\n-            if (internalState != OFFSENT) {\n-            jmri.util.ThreadingUtil.runOnLayoutDelayed( () ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "470ae827bcd360537f1bae654418c25b1ed27e7b"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3NzYyMA==", "bodyText": "It isn\u2019t ensured.\nBut you convinced me it may not be needed, because if we triggered two turnouts nearly simultaneously, the second off request might have actually been sent before the first one.\nIf we need to add it back in, we will, but it might not be in the same place.\nThis is part of the reason for putting this into the 4.21 series instead of the 4.19 series.  We can put it in the hands of users without creating a bug in the 4.20 production release.", "url": "https://github.com/JMRI/JMRI/pull/8631#discussion_r435577620", "createdAt": "2020-06-04T22:02:53Z", "author": {"login": "pabender"}, "path": "java/src/jmri/jmrix/lenz/XNetTurnout.java", "diffHunk": "@@ -526,19 +538,9 @@ protected synchronized void sendOffMessage() {\n             log.debug(\"Current Thread ID: {} Thread Name {}\", java.lang.Thread.currentThread().getId(), java.lang.Thread.currentThread().getName());\n         }\n         XNetMessage msg = getOffMessage();\n-        // Set the known state to the commanded state.\n-        // To avoid some of the command station busy\n-        // messages, add a short delay before sending the\n-        // first off message.\n-            if (internalState != OFFSENT) {\n-            jmri.util.ThreadingUtil.runOnLayoutDelayed( () ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2NDg4MQ=="}, "originalCommit": {"oid": "470ae827bcd360537f1bae654418c25b1ed27e7b"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE1ODY5MA==", "bodyText": "Well, that was never the intent - because your explanation (paraphrase) \"to give the command station the time to REPEAT the instruction\" on DCC is perfectly reasonable.\nI never seen that happen, but IMHO ensure certain delay between ON and OFF is very reasonable - and I happen to know hardware designs which can easily miss a DCC packet occasionally, for example when its tiny CPU is doing something important, like timing signal for a servo.\nThe intent was to bring other bugs to attention that cause one OFF to be scheduled, while other (duplicite) OFFs were sent right away without any delays by this particular code.", "url": "https://github.com/JMRI/JMRI/pull/8631#discussion_r436158690", "createdAt": "2020-06-05T20:52:00Z", "author": {"login": "svatoun"}, "path": "java/src/jmri/jmrix/lenz/XNetTurnout.java", "diffHunk": "@@ -526,19 +538,9 @@ protected synchronized void sendOffMessage() {\n             log.debug(\"Current Thread ID: {} Thread Name {}\", java.lang.Thread.currentThread().getId(), java.lang.Thread.currentThread().getName());\n         }\n         XNetMessage msg = getOffMessage();\n-        // Set the known state to the commanded state.\n-        // To avoid some of the command station busy\n-        // messages, add a short delay before sending the\n-        // first off message.\n-            if (internalState != OFFSENT) {\n-            jmri.util.ThreadingUtil.runOnLayoutDelayed( () ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2NDg4MQ=="}, "originalCommit": {"oid": "470ae827bcd360537f1bae654418c25b1ed27e7b"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2MjgwOQ==", "bodyText": "On a second thought, there won't be any bug reports; because of the way how 'high priority' packets are processed for the last 10 years or so, they will be delayed after all pending messages are sent +100ms at least.", "url": "https://github.com/JMRI/JMRI/pull/8631#discussion_r436162809", "createdAt": "2020-06-05T21:02:21Z", "author": {"login": "svatoun"}, "path": "java/src/jmri/jmrix/lenz/XNetTurnout.java", "diffHunk": "@@ -526,19 +538,9 @@ protected synchronized void sendOffMessage() {\n             log.debug(\"Current Thread ID: {} Thread Name {}\", java.lang.Thread.currentThread().getId(), java.lang.Thread.currentThread().getName());\n         }\n         XNetMessage msg = getOffMessage();\n-        // Set the known state to the commanded state.\n-        // To avoid some of the command station busy\n-        // messages, add a short delay before sending the\n-        // first off message.\n-            if (internalState != OFFSENT) {\n-            jmri.util.ThreadingUtil.runOnLayoutDelayed( () ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2NDg4MQ=="}, "originalCommit": {"oid": "470ae827bcd360537f1bae654418c25b1ed27e7b"}, "originalPosition": 91}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4535, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}