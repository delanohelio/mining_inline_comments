{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3NTQzMTM3", "number": 8720, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxNDozMzowNlrOEHXbYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNTozODoyMVrOEHbtng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTU5MzI4OnYy", "diffSide": "RIGHT", "path": "java/test/jmri/implementation/AbstractReporterTestBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxNDozMzowNlrOGmsVjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxNTozMDoxNlrOGmsqDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyNTQ4NQ==", "bodyText": "The expected behavior of NamedBean.dispose() is that the NamedBean is no longer valid after the dispose call.\nWhat this means is that when the call to get the number of property change listeners is made after the call to dispose a numeric result is not the only valid outcome.\nAn exception may occur and, as a developer, I would anticipate this occurring based on the Javadoc.", "url": "https://github.com/JMRI/JMRI/pull/8720#discussion_r443225485", "createdAt": "2020-06-21T14:33:06Z", "author": {"login": "pabender"}, "path": "java/test/jmri/implementation/AbstractReporterTestBase.java", "diffHunk": "@@ -78,6 +78,14 @@ public void testPropertyChange() {\n         // Check that LastReport was not seen (no change on null)\n         Assert.assertFalse(\"LastReport seen after null\", lastReportSeen);\n     }\n+    \n+    @Test\n+    public void testDispose() {\n+        r.addPropertyChangeListener(new TestReporterListener());\n+        Assert.assertEquals(\"controller listener added\", 1, r.getNumPropertyChangeListeners());\n+        r.dispose();\n+        Assert.assertEquals(\"controller listeners remaining\", 0, r.getNumPropertyChangeListeners());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "705135ad468354d8e3f64abc9d2dfb37099478ea"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIzMDczNA==", "bodyText": "Have modified the test to comply with the NamedBean.getNumPropertyChangeListeners Javadoc, \"Number of current listeners. May return -1 if the information is not available for some reason.\"", "url": "https://github.com/JMRI/JMRI/pull/8720#discussion_r443230734", "createdAt": "2020-06-21T15:30:16Z", "author": {"login": "icklesteve"}, "path": "java/test/jmri/implementation/AbstractReporterTestBase.java", "diffHunk": "@@ -78,6 +78,14 @@ public void testPropertyChange() {\n         // Check that LastReport was not seen (no change on null)\n         Assert.assertFalse(\"LastReport seen after null\", lastReportSeen);\n     }\n+    \n+    @Test\n+    public void testDispose() {\n+        r.addPropertyChangeListener(new TestReporterListener());\n+        Assert.assertEquals(\"controller listener added\", 1, r.getNumPropertyChangeListeners());\n+        r.dispose();\n+        Assert.assertEquals(\"controller listeners remaining\", 0, r.getNumPropertyChangeListeners());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyNTQ4NQ=="}, "originalCommit": {"oid": "705135ad468354d8e3f64abc9d2dfb37099478ea"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTc1Mzg3OnYy", "diffSide": "RIGHT", "path": "java/test/jmri/implementation/AbstractReporterTestBase.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxODo1ODo0MlrOGmtqGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMjowMjoyNlrOGmv-3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0NzEyOA==", "bodyText": "This is still making a call to the object after the dispose call.", "url": "https://github.com/JMRI/JMRI/pull/8720#discussion_r443247128", "createdAt": "2020-06-21T18:58:42Z", "author": {"login": "pabender"}, "path": "java/test/jmri/implementation/AbstractReporterTestBase.java", "diffHunk": "@@ -78,6 +78,15 @@ public void testPropertyChange() {\n         // Check that LastReport was not seen (no change on null)\n         Assert.assertFalse(\"LastReport seen after null\", lastReportSeen);\n     }\n+    \n+    @Test\n+    public void testDispose() {\n+        Assert.assertEquals(\"starts 0 listeners\", 0, r.getNumPropertyChangeListeners());\n+        r.addPropertyChangeListener(new TestReporterListener());\n+        Assert.assertEquals(\"controller listener added\", 1, r.getNumPropertyChangeListeners());\n+        r.dispose();\n+        Assert.assertTrue(\"controller listeners remaining < 1\", r.getNumPropertyChangeListeners() < 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43185bb5d146e43270821e78d2b62ea4f73ccc95"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0OTE1OA==", "bodyText": "My suggestion for fixing this is that it is a valid result for a runtime exception to be thrown here.  So put a try catch block around the assert.  If a runtime exception  is thrown, that passes the test.", "url": "https://github.com/JMRI/JMRI/pull/8720#discussion_r443249158", "createdAt": "2020-06-21T19:24:03Z", "author": {"login": "pabender"}, "path": "java/test/jmri/implementation/AbstractReporterTestBase.java", "diffHunk": "@@ -78,6 +78,15 @@ public void testPropertyChange() {\n         // Check that LastReport was not seen (no change on null)\n         Assert.assertFalse(\"LastReport seen after null\", lastReportSeen);\n     }\n+    \n+    @Test\n+    public void testDispose() {\n+        Assert.assertEquals(\"starts 0 listeners\", 0, r.getNumPropertyChangeListeners());\n+        r.addPropertyChangeListener(new TestReporterListener());\n+        Assert.assertEquals(\"controller listener added\", 1, r.getNumPropertyChangeListeners());\n+        r.dispose();\n+        Assert.assertTrue(\"controller listeners remaining < 1\", r.getNumPropertyChangeListeners() < 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0NzEyOA=="}, "originalCommit": {"oid": "43185bb5d146e43270821e78d2b62ea4f73ccc95"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4NTIxNA==", "bodyText": "Thanks for fix suggestion, try catch block added.", "url": "https://github.com/JMRI/JMRI/pull/8720#discussion_r443285214", "createdAt": "2020-06-22T02:02:26Z", "author": {"login": "icklesteve"}, "path": "java/test/jmri/implementation/AbstractReporterTestBase.java", "diffHunk": "@@ -78,6 +78,15 @@ public void testPropertyChange() {\n         // Check that LastReport was not seen (no change on null)\n         Assert.assertFalse(\"LastReport seen after null\", lastReportSeen);\n     }\n+    \n+    @Test\n+    public void testDispose() {\n+        Assert.assertEquals(\"starts 0 listeners\", 0, r.getNumPropertyChangeListeners());\n+        r.addPropertyChangeListener(new TestReporterListener());\n+        Assert.assertEquals(\"controller listener added\", 1, r.getNumPropertyChangeListeners());\n+        r.dispose();\n+        Assert.assertTrue(\"controller listeners remaining < 1\", r.getNumPropertyChangeListeners() < 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0NzEyOA=="}, "originalCommit": {"oid": "43185bb5d146e43270821e78d2b62ea4f73ccc95"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjI5MzUwOnYy", "diffSide": "RIGHT", "path": "java/test/jmri/implementation/AbstractLightTestBase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNTozNzoxN1rOGmyeRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNTozNzoxN1rOGmyeRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMyNjAyMw==", "bodyText": "This needs to specifically be a RuntimeException and not just an Exception.", "url": "https://github.com/JMRI/JMRI/pull/8720#discussion_r443326023", "createdAt": "2020-06-22T05:37:17Z", "author": {"login": "pabender"}, "path": "java/test/jmri/implementation/AbstractLightTestBase.java", "diffHunk": "@@ -75,6 +75,20 @@ public void testDispose() {\n         t.dispose();\n         Assert.assertEquals(\"controller listeners remaining\", 0, numListeners());\n     }\n+    \n+    @Test\n+    public void testRemoveListenerOnDispose() {\n+        Assert.assertEquals(\"starts 0 listeners\", 0, t.getNumPropertyChangeListeners());\n+        t.addPropertyChangeListener(new Listen());\n+        Assert.assertEquals(\"controller listener added\", 1, t.getNumPropertyChangeListeners());\n+        t.dispose();\n+        try {\n+            Assert.assertTrue(\"controller listeners remaining < 1\", t.getNumPropertyChangeListeners() < 1);\n+        }\n+        catch ( Exception e){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5578afe7c29d6123e582e3a7e71baf7e5e7ac1ba"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjI5NDQ5OnYy", "diffSide": "RIGHT", "path": "java/test/jmri/implementation/AbstractReporterTestBase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNTozNzo0OFrOGmye0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNTozNzo0OFrOGmye0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMyNjE2Mg==", "bodyText": "This needs to specifically be a RuntimeException and not just an Exception.", "url": "https://github.com/JMRI/JMRI/pull/8720#discussion_r443326162", "createdAt": "2020-06-22T05:37:48Z", "author": {"login": "pabender"}, "path": "java/test/jmri/implementation/AbstractReporterTestBase.java", "diffHunk": "@@ -80,12 +80,17 @@ public void testPropertyChange() {\n     }\n     \n     @Test\n-    public void testDispose() {\n+    public void testAddRemoveListener() {\n         Assert.assertEquals(\"starts 0 listeners\", 0, r.getNumPropertyChangeListeners());\n         r.addPropertyChangeListener(new TestReporterListener());\n         Assert.assertEquals(\"controller listener added\", 1, r.getNumPropertyChangeListeners());\n         r.dispose();\n-        Assert.assertTrue(\"controller listeners remaining < 1\", r.getNumPropertyChangeListeners() < 1);\n+        try {\n+            Assert.assertTrue(\"controller listeners remaining < 1\", r.getNumPropertyChangeListeners() < 1);\n+        }\n+        catch ( Exception e){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5578afe7c29d6123e582e3a7e71baf7e5e7ac1ba"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjI5NTAyOnYy", "diffSide": "RIGHT", "path": "java/test/jmri/implementation/AbstractSensorTestBase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNTozODowNlrOGmyfHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNTozODowNlrOGmyfHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMyNjIzOQ==", "bodyText": "This needs to specifically be a RuntimeException and not just an Exception.", "url": "https://github.com/JMRI/JMRI/pull/8720#discussion_r443326239", "createdAt": "2020-06-22T05:38:06Z", "author": {"login": "pabender"}, "path": "java/test/jmri/implementation/AbstractSensorTestBase.java", "diffHunk": "@@ -83,6 +83,20 @@ public void testDispose() throws JmriException {\n         t.dispose();\n         Assert.assertEquals(\"controller listeners remaining\", 0, numListeners());\n     }\n+    \n+    @Test\n+    public void testRemoveListenerOnDispose() {\n+        Assert.assertEquals(\"starts 0 listeners\", 0, t.getNumPropertyChangeListeners());\n+        t.addPropertyChangeListener(new Listen());\n+        Assert.assertEquals(\"controller listener added\", 1, t.getNumPropertyChangeListeners());\n+        t.dispose();\n+        try {\n+            Assert.assertTrue(\"controller listeners remaining < 1\", t.getNumPropertyChangeListeners() < 1);\n+        }\n+        catch ( Exception e){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5578afe7c29d6123e582e3a7e71baf7e5e7ac1ba"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjI5NTM0OnYy", "diffSide": "RIGHT", "path": "java/test/jmri/implementation/AbstractTurnoutTestBase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNTozODoyMVrOGmyfUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNTozODoyMVrOGmyfUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMyNjI4OQ==", "bodyText": "This needs to specifically be a RuntimeException and not just an Exception.", "url": "https://github.com/JMRI/JMRI/pull/8720#discussion_r443326289", "createdAt": "2020-06-22T05:38:21Z", "author": {"login": "pabender"}, "path": "java/test/jmri/implementation/AbstractTurnoutTestBase.java", "diffHunk": "@@ -100,6 +100,20 @@ public void testDispose() {\n         t.dispose();\n         Assert.assertEquals(\"controller listeners remaining\", 0, numListeners());\n     }\n+    \n+    @Test\n+    public void testRemoveListenerOnDispose() {\n+        int startListeners =  t.getNumPropertyChangeListeners();\n+        t.addPropertyChangeListener(new Listen());\n+        Assert.assertEquals(\"controller listener added\", startListeners+1, t.getNumPropertyChangeListeners());\n+        t.dispose();\n+        try {\n+            Assert.assertTrue(\"controller listeners remaining < 1\", t.getNumPropertyChangeListeners() < 1);\n+        }\n+        catch ( Exception e){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5578afe7c29d6123e582e3a7e71baf7e5e7ac1ba"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4546, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}