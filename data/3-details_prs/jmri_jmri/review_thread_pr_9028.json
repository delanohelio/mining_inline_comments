{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5ODIxNDE4", "number": 9028, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMToxMzowOFrOElU4IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNjozODoyMlrOElwAPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NTc0ODE3OnYy", "diffSide": "RIGHT", "path": "java/src/jmri/jmrit/symbolicprog/LongAddrVariableValue.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMToxMzowOFrOHUxAZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxNjozNTozOVrOHU7hCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTUzNjQ4Ng==", "bodyText": "Not sure why this return was commented out.  It's the parallel construction to all the other switch cases.", "url": "https://github.com/JMRI/JMRI/pull/9028#discussion_r491536486", "createdAt": "2020-09-19T21:13:08Z", "author": {"login": "bobjacobsen"}, "path": "java/src/jmri/jmrit/symbolicprog/LongAddrVariableValue.java", "diffHunk": "@@ -327,46 +314,36 @@ public void propertyChange(@Nonnull java.beans.PropertyChangeEvent e) {\n             // busy transitions drive the state\n             switch (_progState) {\n                 case IDLE:  // no, just a CV update\n-                    if (log.isDebugEnabled()) {\n-                        log.error(\"Busy goes false with state IDLE\");\n-                    }\n+                    log.error(\"Busy goes false with state IDLE\");\n                     return;\n                 case READING_FIRST:   // read first CV, now read second\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"Busy goes false with state READING_FIRST\");\n-                    }\n+                    log.debug(\"Busy goes false with state READING_FIRST\");\n                     _progState = READING_SECOND;\n                     highCV.read(_status);\n                     return;\n                 case READING_SECOND:  // finally done, set not busy\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"Busy goes false with state READING_SECOND\");\n-                    }\n+                    log.debug(\"Busy goes false with state READING_SECOND\");\n                     _progState = IDLE;\n                     (_cvMap.get(getCvNum())).setState(READ);\n                     highCV.setState(READ);\n                     //super.setState(READ);\n                     setBusy(false);\n                     return;\n                 case WRITING_FIRST:  // no, just a CV update\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"Busy goes false with state WRITING_FIRST\");\n-                    }\n+                    log.debug(\"Busy goes false with state WRITING_FIRST\");\n                     _progState = WRITING_SECOND;\n                     highCV.write(_status);\n                     return;\n                 case WRITING_SECOND:  // now done with complete request\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"Busy goes false with state WRITING_SECOND\");\n-                    }\n+                    log.debug(\"Busy goes false with state WRITING_SECOND\");\n                     _progState = IDLE;\n                     super.setState(STORED);\n                     setBusy(false);\n                     return;\n                 default:  // unexpected!\n                     log.error(\"Unexpected state found: {}\", _progState);\n                     _progState = IDLE;\n-                    return;\n+                    //return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb4f1170627f36c7ea112452beec5844249c5e0f"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY2MTc4Mg==", "bodyText": "As it is the last case, IntelliJ flags it as \" 'return' unnecessary as the last statement in a 'void' method\" (inside the if).", "url": "https://github.com/JMRI/JMRI/pull/9028#discussion_r491661782", "createdAt": "2020-09-20T07:08:20Z", "author": {"login": "silverailscolo"}, "path": "java/src/jmri/jmrit/symbolicprog/LongAddrVariableValue.java", "diffHunk": "@@ -327,46 +314,36 @@ public void propertyChange(@Nonnull java.beans.PropertyChangeEvent e) {\n             // busy transitions drive the state\n             switch (_progState) {\n                 case IDLE:  // no, just a CV update\n-                    if (log.isDebugEnabled()) {\n-                        log.error(\"Busy goes false with state IDLE\");\n-                    }\n+                    log.error(\"Busy goes false with state IDLE\");\n                     return;\n                 case READING_FIRST:   // read first CV, now read second\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"Busy goes false with state READING_FIRST\");\n-                    }\n+                    log.debug(\"Busy goes false with state READING_FIRST\");\n                     _progState = READING_SECOND;\n                     highCV.read(_status);\n                     return;\n                 case READING_SECOND:  // finally done, set not busy\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"Busy goes false with state READING_SECOND\");\n-                    }\n+                    log.debug(\"Busy goes false with state READING_SECOND\");\n                     _progState = IDLE;\n                     (_cvMap.get(getCvNum())).setState(READ);\n                     highCV.setState(READ);\n                     //super.setState(READ);\n                     setBusy(false);\n                     return;\n                 case WRITING_FIRST:  // no, just a CV update\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"Busy goes false with state WRITING_FIRST\");\n-                    }\n+                    log.debug(\"Busy goes false with state WRITING_FIRST\");\n                     _progState = WRITING_SECOND;\n                     highCV.write(_status);\n                     return;\n                 case WRITING_SECOND:  // now done with complete request\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"Busy goes false with state WRITING_SECOND\");\n-                    }\n+                    log.debug(\"Busy goes false with state WRITING_SECOND\");\n                     _progState = IDLE;\n                     super.setState(STORED);\n                     setBusy(false);\n                     return;\n                 default:  // unexpected!\n                     log.error(\"Unexpected state found: {}\", _progState);\n                     _progState = IDLE;\n-                    return;\n+                    //return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTUzNjQ4Ng=="}, "originalCommit": {"oid": "bb4f1170627f36c7ea112452beec5844249c5e0f"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcwODY4MA==", "bodyText": "Is there a way to turn that flagging off?\nLots of things are formally 'unnecessary' to the compiler:  No comments are necessary for a program to run, as just one example.  But something that's unnecessary can never-the-less add clarity for the reader.\nIn this case, it causes extra cognitive load to have to figure out why that return isn't there, and others are.\nIts also not a parallel & independent construction:  If I add something after the case block, one case clause will suddenly start working differently, but only one.  The parallel & independent construction would be to have all the other case statements end with break, in which case the missing break (instead of return) would be a common idiom.", "url": "https://github.com/JMRI/JMRI/pull/9028#discussion_r491708680", "createdAt": "2020-09-20T16:35:39Z", "author": {"login": "bobjacobsen"}, "path": "java/src/jmri/jmrit/symbolicprog/LongAddrVariableValue.java", "diffHunk": "@@ -327,46 +314,36 @@ public void propertyChange(@Nonnull java.beans.PropertyChangeEvent e) {\n             // busy transitions drive the state\n             switch (_progState) {\n                 case IDLE:  // no, just a CV update\n-                    if (log.isDebugEnabled()) {\n-                        log.error(\"Busy goes false with state IDLE\");\n-                    }\n+                    log.error(\"Busy goes false with state IDLE\");\n                     return;\n                 case READING_FIRST:   // read first CV, now read second\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"Busy goes false with state READING_FIRST\");\n-                    }\n+                    log.debug(\"Busy goes false with state READING_FIRST\");\n                     _progState = READING_SECOND;\n                     highCV.read(_status);\n                     return;\n                 case READING_SECOND:  // finally done, set not busy\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"Busy goes false with state READING_SECOND\");\n-                    }\n+                    log.debug(\"Busy goes false with state READING_SECOND\");\n                     _progState = IDLE;\n                     (_cvMap.get(getCvNum())).setState(READ);\n                     highCV.setState(READ);\n                     //super.setState(READ);\n                     setBusy(false);\n                     return;\n                 case WRITING_FIRST:  // no, just a CV update\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"Busy goes false with state WRITING_FIRST\");\n-                    }\n+                    log.debug(\"Busy goes false with state WRITING_FIRST\");\n                     _progState = WRITING_SECOND;\n                     highCV.write(_status);\n                     return;\n                 case WRITING_SECOND:  // now done with complete request\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"Busy goes false with state WRITING_SECOND\");\n-                    }\n+                    log.debug(\"Busy goes false with state WRITING_SECOND\");\n                     _progState = IDLE;\n                     super.setState(STORED);\n                     setBusy(false);\n                     return;\n                 default:  // unexpected!\n                     log.error(\"Unexpected state found: {}\", _progState);\n                     _progState = IDLE;\n-                    return;\n+                    //return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTUzNjQ4Ng=="}, "originalCommit": {"oid": "bb4f1170627f36c7ea112452beec5844249c5e0f"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDE4OTgxOnYy", "diffSide": "LEFT", "path": "java/src/jmri/jmrit/symbolicprog/LongAddrVariableValue.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNjozNzo0MFrOHVZaZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODo0MTozOFrOHVdyFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE5ODUwMQ==", "bodyText": "Maybe this return should be restored as well?", "url": "https://github.com/JMRI/JMRI/pull/9028#discussion_r492198501", "createdAt": "2020-09-21T16:37:40Z", "author": {"login": "danielb987"}, "path": "java/src/jmri/jmrit/symbolicprog/LongAddrVariableValue.java", "diffHunk": "@@ -379,30 +356,23 @@ public void propertyChange(@Nonnull java.beans.PropertyChangeEvent e) {\n             CvValue cv0 = _cvMap.get(getCvNum());\n             CvValue cv1 = highCV;\n             int newVal = (cv0.getValue() & 0x3f) * 256 + cv1.getValue();\n-            setValue(newVal);  // check for duplicate done inside setVal\n+            setValue(newVal);  // check for duplicate done inside setValue\n             // state change due to CV state change, so propagate that\n             setState(cv0.getState());\n             // see if this was a read or write operation\n             switch (_progState) {\n                 case IDLE:  // no, just a CV update\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"Value changed with state IDLE\");\n-                    }\n+                    log.debug(\"Value changed with state IDLE\");\n                     return;\n                 case READING_FIRST:  // yes, now read second\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"Value changed with state READING_FIRST\");\n-                    }\n+                    log.debug(\"Value changed with state READING_FIRST\");\n                     return;\n                 case READING_SECOND:  // now done with complete request\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"Value changed with state READING_SECOND\");\n-                    }\n+                    log.debug(\"Value changed with state READING_SECOND\");\n                     return;\n                 default:  // unexpected!\n                     log.error(\"Unexpected state found: {}\", _progState);\n                     _progState = IDLE;\n-                    return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e445f7fea42a3b945e12b03b540d2bc71347d06"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3MDEwMA==", "bodyText": "I see a pattern, done", "url": "https://github.com/JMRI/JMRI/pull/9028#discussion_r492270100", "createdAt": "2020-09-21T18:41:38Z", "author": {"login": "silverailscolo"}, "path": "java/src/jmri/jmrit/symbolicprog/LongAddrVariableValue.java", "diffHunk": "@@ -379,30 +356,23 @@ public void propertyChange(@Nonnull java.beans.PropertyChangeEvent e) {\n             CvValue cv0 = _cvMap.get(getCvNum());\n             CvValue cv1 = highCV;\n             int newVal = (cv0.getValue() & 0x3f) * 256 + cv1.getValue();\n-            setValue(newVal);  // check for duplicate done inside setVal\n+            setValue(newVal);  // check for duplicate done inside setValue\n             // state change due to CV state change, so propagate that\n             setState(cv0.getState());\n             // see if this was a read or write operation\n             switch (_progState) {\n                 case IDLE:  // no, just a CV update\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"Value changed with state IDLE\");\n-                    }\n+                    log.debug(\"Value changed with state IDLE\");\n                     return;\n                 case READING_FIRST:  // yes, now read second\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"Value changed with state READING_FIRST\");\n-                    }\n+                    log.debug(\"Value changed with state READING_FIRST\");\n                     return;\n                 case READING_SECOND:  // now done with complete request\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"Value changed with state READING_SECOND\");\n-                    }\n+                    log.debug(\"Value changed with state READING_SECOND\");\n                     return;\n                 default:  // unexpected!\n                     log.error(\"Unexpected state found: {}\", _progState);\n                     _progState = IDLE;\n-                    return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE5ODUwMQ=="}, "originalCommit": {"oid": "9e445f7fea42a3b945e12b03b540d2bc71347d06"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDE5MDgxOnYy", "diffSide": "LEFT", "path": "java/src/jmri/jmrix/loconet/locoio/LocoIOData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNjozNzo1NVrOHVZbAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODo0NDo0MVrOHVd4fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE5ODY1OA==", "bodyText": "Maybe this return should be restored as well?", "url": "https://github.com/JMRI/JMRI/pull/9028#discussion_r492198658", "createdAt": "2020-09-21T16:37:55Z", "author": {"login": "danielb987"}, "path": "java/src/jmri/jmrix/loconet/locoio/LocoIOData.java", "diffHunk": "@@ -541,7 +545,6 @@ protected synchronized void replyReceived() {\n             default:\n                 log.error(\"Pin {} unexpected write state, can't advance {}\", currentPin, writeState[currentPin]); // NOI18N\n                 writeState[currentPin] = NONE;\n-                return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e445f7fea42a3b945e12b03b540d2bc71347d06"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3MTc0Mw==", "bodyText": "Done, thanks for spotting", "url": "https://github.com/JMRI/JMRI/pull/9028#discussion_r492271743", "createdAt": "2020-09-21T18:44:41Z", "author": {"login": "silverailscolo"}, "path": "java/src/jmri/jmrix/loconet/locoio/LocoIOData.java", "diffHunk": "@@ -541,7 +545,6 @@ protected synchronized void replyReceived() {\n             default:\n                 log.error(\"Pin {} unexpected write state, can't advance {}\", currentPin, writeState[currentPin]); // NOI18N\n                 writeState[currentPin] = NONE;\n-                return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE5ODY1OA=="}, "originalCommit": {"oid": "9e445f7fea42a3b945e12b03b540d2bc71347d06"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDE5MTk5OnYy", "diffSide": "LEFT", "path": "java/src/jmri/jmrit/symbolicprog/CompositeVariableValue.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNjozODoxM1rOHVZbtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODo0MTowMFrOHVdwzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE5ODgzOA==", "bodyText": "Maybe these return should be restored as well?", "url": "https://github.com/JMRI/JMRI/pull/9028#discussion_r492198838", "createdAt": "2020-09-21T16:38:13Z", "author": {"login": "danielb987"}, "path": "java/src/jmri/jmrit/symbolicprog/CompositeVariableValue.java", "diffHunk": "@@ -493,10 +505,8 @@ public void propertyChange(java.beans.PropertyChangeEvent e) {\n                 // some programming operation just finished\n                 if (amReading) {\n                     continueRead();\n-                    return;\n                 } else if (amWriting) {\n                     continueWrite();\n-                    return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e445f7fea42a3b945e12b03b540d2bc71347d06"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2OTc3Mw==", "bodyText": "No, not at the end of a void method", "url": "https://github.com/JMRI/JMRI/pull/9028#discussion_r492269773", "createdAt": "2020-09-21T18:41:00Z", "author": {"login": "silverailscolo"}, "path": "java/src/jmri/jmrit/symbolicprog/CompositeVariableValue.java", "diffHunk": "@@ -493,10 +505,8 @@ public void propertyChange(java.beans.PropertyChangeEvent e) {\n                 // some programming operation just finished\n                 if (amReading) {\n                     continueRead();\n-                    return;\n                 } else if (amWriting) {\n                     continueWrite();\n-                    return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE5ODgzOA=="}, "originalCommit": {"oid": "9e445f7fea42a3b945e12b03b540d2bc71347d06"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDE5MjYzOnYy", "diffSide": "LEFT", "path": "java/src/jmri/jmrix/loconet/locoio/LocoIOData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNjozODoyMlrOHVZcCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNjozODoyMlrOHVZcCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE5ODkyMA==", "bodyText": "Maybe this return should be restored as well?", "url": "https://github.com/JMRI/JMRI/pull/9028#discussion_r492198920", "createdAt": "2020-09-21T16:38:22Z", "author": {"login": "danielb987"}, "path": "java/src/jmri/jmrix/loconet/locoio/LocoIOData.java", "diffHunk": "@@ -541,7 +545,6 @@ protected synchronized void replyReceived() {\n             default:\n                 log.error(\"Pin {} unexpected write state, can't advance {}\", currentPin, writeState[currentPin]); // NOI18N\n                 writeState[currentPin] = NONE;\n-                return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e445f7fea42a3b945e12b03b540d2bc71347d06"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4382, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}