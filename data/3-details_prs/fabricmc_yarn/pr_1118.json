{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1NzM5MDcw", "number": 1118, "title": "named and commented various seeding methods", "bodyText": "The previous method names were repetitive and arbitrary \"x\" and \"z\" parameters didn't explain what was going on. I mostly stuck with the names seed finding has been using.", "createdAt": "2020-02-15T17:27:55Z", "url": "https://github.com/FabricMC/yarn/pull/1118", "merged": true, "mergeCommit": {"oid": "c552e79ea15e0bff76fd1664eb4d5f32f65b1b25"}, "closed": true, "closedAt": "2020-03-05T23:59:17Z", "author": {"login": "KaptainWutax"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcEnZ4ogH2gAyMzc1NzM5MDcwOjgyYTJmNWVhMGM5MWZhNjczNjY4OGMwMTI1NTkzN2VhNzhmNjA4MTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcK0hyzAFqTM2OTk5NTI3Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "82a2f5ea0c91fa6736688c01255937ea78f60810", "author": {"user": {"login": "KaptainWutax", "name": null}}, "url": "https://github.com/FabricMC/yarn/commit/82a2f5ea0c91fa6736688c01255937ea78f60810", "committedDate": "2020-02-15T17:16:21Z", "message": "named and commented various seeding methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdddcec9c6ee1b1f062af03ef59a73542b4a3357", "author": {"user": {"login": "KaptainWutax", "name": null}}, "url": "https://github.com/FabricMC/yarn/commit/bdddcec9c6ee1b1f062af03ef59a73542b4a3357", "committedDate": "2020-02-15T17:20:28Z", "message": "finished commenting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MzYxODc1", "url": "https://github.com/FabricMC/yarn/pull/1118#pullrequestreview-359361875", "createdAt": "2020-02-15T19:23:17Z", "commit": {"oid": "bdddcec9c6ee1b1f062af03ef59a73542b4a3357"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxOToyMzoxN1rOFqQP5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxOToyNTowMlrOFqQQQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MDcyNg==", "bodyText": "You don't need to map the name of unobfuscated methods.\n(Edit: clarified)", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r379850726", "createdAt": "2020-02-15T19:23:17Z", "author": {"login": "Juuxel"}, "path": "mappings/net/minecraft/world/gen/ChunkRandom.mapping", "diffHunk": "@@ -2,32 +2,76 @@ CLASS net/minecraft/class_2919 net/minecraft/world/gen/ChunkRandom\n \tFIELD field_13276 sampleCount I\n \tMETHOD <init> (J)V\n \t\tARG 1 seed\n-\tMETHOD method_12659 setSeed (II)J\n-\t\tARG 1 x\n-\t\tARG 2 z\n-\tMETHOD method_12660 consume (I)V\n-\t\tARG 1 count\n-\tMETHOD method_12661 setSeed (JII)J\n+\tMETHOD method_12659 setTerrainSeed (II)J\n+\t\tCOMMENT Seeds the randomizer to generate the surface terrain blocks(such as grass, sand, etc)\n+\t\tCOMMENT and the bedrock patterns.\n+\t\tCOMMENT\n+\t\tCOMMENT Note that the terrain seed is NOT world seed dependant and only gets affected by\n+\t\tCOMMENT chunk coordinates.\n+\t\tARG 1 chunkX\n+\t\tARG 2 chunkZ\n+\tMETHOD method_12660 skip (I)V\n+\t\tCOMMENT Skips the provided number of calls to the randomizer.\n+\t\tCOMMENT\n+\t\tCOMMENT Functionally, this method serves no purpose since the combination of multiple linear\n+\t\tCOMMENT congruential calls is equivalent to another LCG.\n+\t\tARG 1 callsCount\n+\tMETHOD method_12661 setPopulationSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to create population features such as decorators and animals.\n+\t\tCOMMENT\n+\t\tCOMMENT This method takes in the world seed and the negative-most block coordinates of the\n+\t\tCOMMENT chunk. The coordinate pair provided is equivalent to (chunkX * 16, chunkZ * 16). The\n+\t\tCOMMENT three values are mixed together through some layers of hashing to produce the\n+\t\tCOMMENT population seed.\n+\t\tCOMMENT\n+\t\tCOMMENT This function has been proved to be reversible through some exploitation of the underlying\n+\t\tCOMMENT nextLong() weaknesses. It is also important to remember that since setSeed()\n+\t\tCOMMENT truncates the 16 upper bits of world seed, only the 48 lowest bits affect the population\n+\t\tCOMMENT seed output.\n \t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\tMETHOD method_12662 create (IIJJ)Ljava/util/Random;\n-\t\tARG 0 x\n-\t\tARG 1 z\n+\t\tARG 3 posX\n+\t\tARG 4 posZ\n+\tMETHOD method_12662 getSlimeRandom (IIJJ)Ljava/util/Random;\n+\t\tARG 0 chunkX\n+\t\tARG 1 chunkZ\n \t\tARG 2 worldSeed\n-\t\tARG 4 localSeed\n-\tMETHOD method_12663 setStructureSeed (JII)J\n-\t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\tMETHOD method_12664 setFeatureSeed (JII)J\n+\t\tARG 4 scrambler\n+\tMETHOD method_12663 setCarverSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to generate larger features such as caves, ravines, minehafts\n+\t\tCOMMENT and strongholds.\n+\t\tCOMMENT\n+\t\tCOMMENT Similar to the population seed, only the 48 lowest bits of the world seed affect the\n+\t\tCOMMENT output since it the upper 16 bits are truncated in the setSeed() call.\n \t\tARG 1 worldSeed\n+\t\tARG 3 chunkX\n+\t\tARG 4 chunkZ\n+\tMETHOD method_12664 setDecoratorSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to generate a given feature.\n+\t\tCOMMENT\n+\t\tCOMMENT @param populationSeed The population seed computed in setPopulationSeed().\n+\t\tCOMMENT @param index The index of the feature in the feature list.\n+\t\tCOMMENT @param step The generation step's ordinal for this feature.\n+\t\tCOMMENT\n+\t\tCOMMENT The salt, in the form of {index + 10000 * step} assures that each feature is seeded\n+\t\tCOMMENT differently, making the decoration feel more random. Even though it does a good job\n+\t\tCOMMENT at doing so, many entropy issues arise from the salt being so small and result in\n+\t\tCOMMENT weird alignments between features that have an index close apart.\n+\t\tARG 1 populationSeed\n \t\tARG 3 index\n \t\tARG 4 step\n-\tMETHOD method_12665 setStructureSeed (JIII)J\n+\tMETHOD method_12665 setRegionSeed (JIII)J\n+\t\tCOMMENT Seeds the randomizer to determine the start position of structure features such as\n+\t\tCOMMENT temples, monuments and buried treasures within a region.\n+\t\tCOMMENT\n+\t\tCOMMENT The region coordinates pair corresponds to the coordinates of the region the seeded\n+\t\tCOMMENT chunk lies in. For example, a swamp hut region is 32 by 32 chunks meaning that all\n+\t\tCOMMENT chunks that lie within that region get seeded the same way.\n+\t\tCOMMENT\n+\t\tCOMMENT Similarly, the upper 16 bits of world seed also do not affect the region seed because\n+\t\tCOMMENT they get truncated in the setSeed() call.\n \t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\t\tARG 5 seedModifier\n-\tMETHOD next (I)I\n+\t\tARG 3 regionX\n+\t\tARG 4 regionZ\n+\t\tARG 5 salt\n+\tMETHOD next next (I)I", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdddcec9c6ee1b1f062af03ef59a73542b4a3357"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MDc1Mg==", "bodyText": "Why rename this if it's just used for structures?", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r379850752", "createdAt": "2020-02-15T19:23:41Z", "author": {"login": "Juuxel"}, "path": "mappings/net/minecraft/world/gen/ChunkRandom.mapping", "diffHunk": "@@ -2,32 +2,76 @@ CLASS net/minecraft/class_2919 net/minecraft/world/gen/ChunkRandom\n \tFIELD field_13276 sampleCount I\n \tMETHOD <init> (J)V\n \t\tARG 1 seed\n-\tMETHOD method_12659 setSeed (II)J\n-\t\tARG 1 x\n-\t\tARG 2 z\n-\tMETHOD method_12660 consume (I)V\n-\t\tARG 1 count\n-\tMETHOD method_12661 setSeed (JII)J\n+\tMETHOD method_12659 setTerrainSeed (II)J\n+\t\tCOMMENT Seeds the randomizer to generate the surface terrain blocks(such as grass, sand, etc)\n+\t\tCOMMENT and the bedrock patterns.\n+\t\tCOMMENT\n+\t\tCOMMENT Note that the terrain seed is NOT world seed dependant and only gets affected by\n+\t\tCOMMENT chunk coordinates.\n+\t\tARG 1 chunkX\n+\t\tARG 2 chunkZ\n+\tMETHOD method_12660 skip (I)V\n+\t\tCOMMENT Skips the provided number of calls to the randomizer.\n+\t\tCOMMENT\n+\t\tCOMMENT Functionally, this method serves no purpose since the combination of multiple linear\n+\t\tCOMMENT congruential calls is equivalent to another LCG.\n+\t\tARG 1 callsCount\n+\tMETHOD method_12661 setPopulationSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to create population features such as decorators and animals.\n+\t\tCOMMENT\n+\t\tCOMMENT This method takes in the world seed and the negative-most block coordinates of the\n+\t\tCOMMENT chunk. The coordinate pair provided is equivalent to (chunkX * 16, chunkZ * 16). The\n+\t\tCOMMENT three values are mixed together through some layers of hashing to produce the\n+\t\tCOMMENT population seed.\n+\t\tCOMMENT\n+\t\tCOMMENT This function has been proved to be reversible through some exploitation of the underlying\n+\t\tCOMMENT nextLong() weaknesses. It is also important to remember that since setSeed()\n+\t\tCOMMENT truncates the 16 upper bits of world seed, only the 48 lowest bits affect the population\n+\t\tCOMMENT seed output.\n \t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\tMETHOD method_12662 create (IIJJ)Ljava/util/Random;\n-\t\tARG 0 x\n-\t\tARG 1 z\n+\t\tARG 3 posX\n+\t\tARG 4 posZ\n+\tMETHOD method_12662 getSlimeRandom (IIJJ)Ljava/util/Random;\n+\t\tARG 0 chunkX\n+\t\tARG 1 chunkZ\n \t\tARG 2 worldSeed\n-\t\tARG 4 localSeed\n-\tMETHOD method_12663 setStructureSeed (JII)J\n-\t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\tMETHOD method_12664 setFeatureSeed (JII)J\n+\t\tARG 4 scrambler\n+\tMETHOD method_12663 setCarverSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to generate larger features such as caves, ravines, minehafts\n+\t\tCOMMENT and strongholds.\n+\t\tCOMMENT\n+\t\tCOMMENT Similar to the population seed, only the 48 lowest bits of the world seed affect the\n+\t\tCOMMENT output since it the upper 16 bits are truncated in the setSeed() call.\n \t\tARG 1 worldSeed\n+\t\tARG 3 chunkX\n+\t\tARG 4 chunkZ\n+\tMETHOD method_12664 setDecoratorSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to generate a given feature.\n+\t\tCOMMENT\n+\t\tCOMMENT @param populationSeed The population seed computed in setPopulationSeed().\n+\t\tCOMMENT @param index The index of the feature in the feature list.\n+\t\tCOMMENT @param step The generation step's ordinal for this feature.\n+\t\tCOMMENT\n+\t\tCOMMENT The salt, in the form of {index + 10000 * step} assures that each feature is seeded\n+\t\tCOMMENT differently, making the decoration feel more random. Even though it does a good job\n+\t\tCOMMENT at doing so, many entropy issues arise from the salt being so small and result in\n+\t\tCOMMENT weird alignments between features that have an index close apart.\n+\t\tARG 1 populationSeed\n \t\tARG 3 index\n \t\tARG 4 step\n-\tMETHOD method_12665 setStructureSeed (JIII)J\n+\tMETHOD method_12665 setRegionSeed (JIII)J", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdddcec9c6ee1b1f062af03ef59a73542b4a3357"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MDgxNw==", "bodyText": "These should be comments on the arguments themselves.", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r379850817", "createdAt": "2020-02-15T19:25:02Z", "author": {"login": "Juuxel"}, "path": "mappings/net/minecraft/world/gen/ChunkRandom.mapping", "diffHunk": "@@ -2,32 +2,76 @@ CLASS net/minecraft/class_2919 net/minecraft/world/gen/ChunkRandom\n \tFIELD field_13276 sampleCount I\n \tMETHOD <init> (J)V\n \t\tARG 1 seed\n-\tMETHOD method_12659 setSeed (II)J\n-\t\tARG 1 x\n-\t\tARG 2 z\n-\tMETHOD method_12660 consume (I)V\n-\t\tARG 1 count\n-\tMETHOD method_12661 setSeed (JII)J\n+\tMETHOD method_12659 setTerrainSeed (II)J\n+\t\tCOMMENT Seeds the randomizer to generate the surface terrain blocks(such as grass, sand, etc)\n+\t\tCOMMENT and the bedrock patterns.\n+\t\tCOMMENT\n+\t\tCOMMENT Note that the terrain seed is NOT world seed dependant and only gets affected by\n+\t\tCOMMENT chunk coordinates.\n+\t\tARG 1 chunkX\n+\t\tARG 2 chunkZ\n+\tMETHOD method_12660 skip (I)V\n+\t\tCOMMENT Skips the provided number of calls to the randomizer.\n+\t\tCOMMENT\n+\t\tCOMMENT Functionally, this method serves no purpose since the combination of multiple linear\n+\t\tCOMMENT congruential calls is equivalent to another LCG.\n+\t\tARG 1 callsCount\n+\tMETHOD method_12661 setPopulationSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to create population features such as decorators and animals.\n+\t\tCOMMENT\n+\t\tCOMMENT This method takes in the world seed and the negative-most block coordinates of the\n+\t\tCOMMENT chunk. The coordinate pair provided is equivalent to (chunkX * 16, chunkZ * 16). The\n+\t\tCOMMENT three values are mixed together through some layers of hashing to produce the\n+\t\tCOMMENT population seed.\n+\t\tCOMMENT\n+\t\tCOMMENT This function has been proved to be reversible through some exploitation of the underlying\n+\t\tCOMMENT nextLong() weaknesses. It is also important to remember that since setSeed()\n+\t\tCOMMENT truncates the 16 upper bits of world seed, only the 48 lowest bits affect the population\n+\t\tCOMMENT seed output.\n \t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\tMETHOD method_12662 create (IIJJ)Ljava/util/Random;\n-\t\tARG 0 x\n-\t\tARG 1 z\n+\t\tARG 3 posX\n+\t\tARG 4 posZ\n+\tMETHOD method_12662 getSlimeRandom (IIJJ)Ljava/util/Random;\n+\t\tARG 0 chunkX\n+\t\tARG 1 chunkZ\n \t\tARG 2 worldSeed\n-\t\tARG 4 localSeed\n-\tMETHOD method_12663 setStructureSeed (JII)J\n-\t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\tMETHOD method_12664 setFeatureSeed (JII)J\n+\t\tARG 4 scrambler\n+\tMETHOD method_12663 setCarverSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to generate larger features such as caves, ravines, minehafts\n+\t\tCOMMENT and strongholds.\n+\t\tCOMMENT\n+\t\tCOMMENT Similar to the population seed, only the 48 lowest bits of the world seed affect the\n+\t\tCOMMENT output since it the upper 16 bits are truncated in the setSeed() call.\n \t\tARG 1 worldSeed\n+\t\tARG 3 chunkX\n+\t\tARG 4 chunkZ\n+\tMETHOD method_12664 setDecoratorSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to generate a given feature.\n+\t\tCOMMENT\n+\t\tCOMMENT @param populationSeed The population seed computed in setPopulationSeed().\n+\t\tCOMMENT @param index The index of the feature in the feature list.\n+\t\tCOMMENT @param step The generation step's ordinal for this feature.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdddcec9c6ee1b1f062af03ef59a73542b4a3357"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MzYyMjg4", "url": "https://github.com/FabricMC/yarn/pull/1118#pullrequestreview-359362288", "createdAt": "2020-02-15T19:31:38Z", "commit": {"oid": "bdddcec9c6ee1b1f062af03ef59a73542b4a3357"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxOTozMTozOFrOFqQRvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxOTozMjozMFrOFqQR8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MTE5OA==", "bodyText": "This seems like an unnecessary change to me.", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r379851198", "createdAt": "2020-02-15T19:31:38Z", "author": {"login": "SuperCoder7979"}, "path": "mappings/net/minecraft/world/biome/Biome.mapping", "diffHunk": "@@ -58,7 +58,7 @@ CLASS net/minecraft/class_1959 net/minecraft/world/biome/Biome\n \t\tARG 1 step\n \t\tARG 2 chunkGenerator\n \t\tARG 3 world\n-\t\tARG 4 seed\n+\t\tARG 4 populationSeed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdddcec9c6ee1b1f062af03ef59a73542b4a3357"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MTI0OA==", "bodyText": "callsCount is redundant; count is fine here.", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r379851248", "createdAt": "2020-02-15T19:32:30Z", "author": {"login": "SuperCoder7979"}, "path": "mappings/net/minecraft/world/gen/ChunkRandom.mapping", "diffHunk": "@@ -2,32 +2,76 @@ CLASS net/minecraft/class_2919 net/minecraft/world/gen/ChunkRandom\n \tFIELD field_13276 sampleCount I\n \tMETHOD <init> (J)V\n \t\tARG 1 seed\n-\tMETHOD method_12659 setSeed (II)J\n-\t\tARG 1 x\n-\t\tARG 2 z\n-\tMETHOD method_12660 consume (I)V\n-\t\tARG 1 count\n-\tMETHOD method_12661 setSeed (JII)J\n+\tMETHOD method_12659 setTerrainSeed (II)J\n+\t\tCOMMENT Seeds the randomizer to generate the surface terrain blocks(such as grass, sand, etc)\n+\t\tCOMMENT and the bedrock patterns.\n+\t\tCOMMENT\n+\t\tCOMMENT Note that the terrain seed is NOT world seed dependant and only gets affected by\n+\t\tCOMMENT chunk coordinates.\n+\t\tARG 1 chunkX\n+\t\tARG 2 chunkZ\n+\tMETHOD method_12660 skip (I)V\n+\t\tCOMMENT Skips the provided number of calls to the randomizer.\n+\t\tCOMMENT\n+\t\tCOMMENT Functionally, this method serves no purpose since the combination of multiple linear\n+\t\tCOMMENT congruential calls is equivalent to another LCG.\n+\t\tARG 1 callsCount", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdddcec9c6ee1b1f062af03ef59a73542b4a3357"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MzY2NjIw", "url": "https://github.com/FabricMC/yarn/pull/1118#pullrequestreview-359366620", "createdAt": "2020-02-15T21:11:32Z", "commit": {"oid": "bdddcec9c6ee1b1f062af03ef59a73542b4a3357"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQyMToxMTozM1rOFqQl3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQyMToxNDo1OFrOFqQmjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NjM0OA==", "bodyText": "Shouldn't this be salt, to be consistent with the other names in this PR?", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r379856348", "createdAt": "2020-02-15T21:11:33Z", "author": {"login": "Earthcomputer"}, "path": "mappings/net/minecraft/world/gen/ChunkRandom.mapping", "diffHunk": "@@ -2,32 +2,76 @@ CLASS net/minecraft/class_2919 net/minecraft/world/gen/ChunkRandom\n \tFIELD field_13276 sampleCount I\n \tMETHOD <init> (J)V\n \t\tARG 1 seed\n-\tMETHOD method_12659 setSeed (II)J\n-\t\tARG 1 x\n-\t\tARG 2 z\n-\tMETHOD method_12660 consume (I)V\n-\t\tARG 1 count\n-\tMETHOD method_12661 setSeed (JII)J\n+\tMETHOD method_12659 setTerrainSeed (II)J\n+\t\tCOMMENT Seeds the randomizer to generate the surface terrain blocks(such as grass, sand, etc)\n+\t\tCOMMENT and the bedrock patterns.\n+\t\tCOMMENT\n+\t\tCOMMENT Note that the terrain seed is NOT world seed dependant and only gets affected by\n+\t\tCOMMENT chunk coordinates.\n+\t\tARG 1 chunkX\n+\t\tARG 2 chunkZ\n+\tMETHOD method_12660 skip (I)V\n+\t\tCOMMENT Skips the provided number of calls to the randomizer.\n+\t\tCOMMENT\n+\t\tCOMMENT Functionally, this method serves no purpose since the combination of multiple linear\n+\t\tCOMMENT congruential calls is equivalent to another LCG.\n+\t\tARG 1 callsCount\n+\tMETHOD method_12661 setPopulationSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to create population features such as decorators and animals.\n+\t\tCOMMENT\n+\t\tCOMMENT This method takes in the world seed and the negative-most block coordinates of the\n+\t\tCOMMENT chunk. The coordinate pair provided is equivalent to (chunkX * 16, chunkZ * 16). The\n+\t\tCOMMENT three values are mixed together through some layers of hashing to produce the\n+\t\tCOMMENT population seed.\n+\t\tCOMMENT\n+\t\tCOMMENT This function has been proved to be reversible through some exploitation of the underlying\n+\t\tCOMMENT nextLong() weaknesses. It is also important to remember that since setSeed()\n+\t\tCOMMENT truncates the 16 upper bits of world seed, only the 48 lowest bits affect the population\n+\t\tCOMMENT seed output.\n \t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\tMETHOD method_12662 create (IIJJ)Ljava/util/Random;\n-\t\tARG 0 x\n-\t\tARG 1 z\n+\t\tARG 3 posX\n+\t\tARG 4 posZ\n+\tMETHOD method_12662 getSlimeRandom (IIJJ)Ljava/util/Random;\n+\t\tARG 0 chunkX\n+\t\tARG 1 chunkZ\n \t\tARG 2 worldSeed\n-\t\tARG 4 localSeed\n-\tMETHOD method_12663 setStructureSeed (JII)J\n-\t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\tMETHOD method_12664 setFeatureSeed (JII)J\n+\t\tARG 4 scrambler", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdddcec9c6ee1b1f062af03ef59a73542b4a3357"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NjUyNw==", "bodyText": "It's not that this method serves \"no\" purpose, it serves the purpose to skip a certain number of calls. It's just that it's inefficient.", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r379856527", "createdAt": "2020-02-15T21:14:58Z", "author": {"login": "Earthcomputer"}, "path": "mappings/net/minecraft/world/gen/ChunkRandom.mapping", "diffHunk": "@@ -2,32 +2,76 @@ CLASS net/minecraft/class_2919 net/minecraft/world/gen/ChunkRandom\n \tFIELD field_13276 sampleCount I\n \tMETHOD <init> (J)V\n \t\tARG 1 seed\n-\tMETHOD method_12659 setSeed (II)J\n-\t\tARG 1 x\n-\t\tARG 2 z\n-\tMETHOD method_12660 consume (I)V\n-\t\tARG 1 count\n-\tMETHOD method_12661 setSeed (JII)J\n+\tMETHOD method_12659 setTerrainSeed (II)J\n+\t\tCOMMENT Seeds the randomizer to generate the surface terrain blocks(such as grass, sand, etc)\n+\t\tCOMMENT and the bedrock patterns.\n+\t\tCOMMENT\n+\t\tCOMMENT Note that the terrain seed is NOT world seed dependant and only gets affected by\n+\t\tCOMMENT chunk coordinates.\n+\t\tARG 1 chunkX\n+\t\tARG 2 chunkZ\n+\tMETHOD method_12660 skip (I)V\n+\t\tCOMMENT Skips the provided number of calls to the randomizer.\n+\t\tCOMMENT\n+\t\tCOMMENT Functionally, this method serves no purpose since the combination of multiple linear", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdddcec9c6ee1b1f062af03ef59a73542b4a3357"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af3c3aa5092de1cdd6eb13118071fc6bfcaf599a", "author": {"user": {"login": "KaptainWutax", "name": null}}, "url": "https://github.com/FabricMC/yarn/commit/af3c3aa5092de1cdd6eb13118071fc6bfcaf599a", "committedDate": "2020-02-17T13:48:18Z", "message": "various changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5NzU0ODU0", "url": "https://github.com/FabricMC/yarn/pull/1118#pullrequestreview-359754854", "createdAt": "2020-02-17T14:01:23Z", "commit": {"oid": "af3c3aa5092de1cdd6eb13118071fc6bfcaf599a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDowMToyM1rOFqldcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDowNzoxNFrOFqlpIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE5ODI1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tCOMMENT <p>Note that the terrain seed is NOT world seed dependant and only gets affected by\n          \n          \n            \n            \t\tCOMMENT <p>Note that the terrain seed is NOT world seed dependent and only gets affected by", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r380198259", "createdAt": "2020-02-17T14:01:23Z", "author": {"login": "Earthcomputer"}, "path": "mappings/net/minecraft/world/gen/ChunkRandom.mapping", "diffHunk": "@@ -2,32 +2,77 @@ CLASS net/minecraft/class_2919 net/minecraft/world/gen/ChunkRandom\n \tFIELD field_13276 sampleCount I\n \tMETHOD <init> (J)V\n \t\tARG 1 seed\n-\tMETHOD method_12659 setSeed (II)J\n-\t\tARG 1 x\n-\t\tARG 2 z\n+\tMETHOD method_12659 setTerrainSeed (II)J\n+\t\tCOMMENT Seeds the randomizer to generate the surface terrain blocks(such as grass, sand, etc)\n+\t\tCOMMENT and the bedrock patterns.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>Note that the terrain seed is NOT world seed dependant and only gets affected by", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af3c3aa5092de1cdd6eb13118071fc6bfcaf599a"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE5OTA2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tCOMMENT linearly dependant. Note that since multiple calls to a linear congruential generator is\n          \n          \n            \n            \t\tCOMMENT linearly dependent. Note that since multiple calls to a linear congruential generator is\n          \n      \n    \n    \n  \n\nAlso, I'm not sure that \"linearly dependent\" is the correct term to use here. Linear dependence relates to how a vector can be written as the weighted sum of other vectors, how does that apply here?", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r380199067", "createdAt": "2020-02-17T14:02:57Z", "author": {"login": "Earthcomputer"}, "path": "mappings/net/minecraft/world/gen/ChunkRandom.mapping", "diffHunk": "@@ -2,32 +2,77 @@ CLASS net/minecraft/class_2919 net/minecraft/world/gen/ChunkRandom\n \tFIELD field_13276 sampleCount I\n \tMETHOD <init> (J)V\n \t\tARG 1 seed\n-\tMETHOD method_12659 setSeed (II)J\n-\t\tARG 1 x\n-\t\tARG 2 z\n+\tMETHOD method_12659 setTerrainSeed (II)J\n+\t\tCOMMENT Seeds the randomizer to generate the surface terrain blocks(such as grass, sand, etc)\n+\t\tCOMMENT and the bedrock patterns.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>Note that the terrain seed is NOT world seed dependant and only gets affected by\n+\t\tCOMMENT chunk coordinates.</p>\n+\t\tARG 1 chunkX\n+\t\tARG 2 chunkZ\n \tMETHOD method_12660 consume (I)V\n+\t\tCOMMENT Skips the provided number of calls to the randomizer.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>The skips give the effect of \"scrambling\" the randomizer but the output is still\n+\t\tCOMMENT linearly dependant. Note that since multiple calls to a linear congruential generator is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af3c3aa5092de1cdd6eb13118071fc6bfcaf599a"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIwMDc5OA==", "bodyText": "This should be two paragraphs", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r380200798", "createdAt": "2020-02-17T14:06:23Z", "author": {"login": "Earthcomputer"}, "path": "mappings/net/minecraft/world/gen/ChunkRandom.mapping", "diffHunk": "@@ -2,32 +2,77 @@ CLASS net/minecraft/class_2919 net/minecraft/world/gen/ChunkRandom\n \tFIELD field_13276 sampleCount I\n \tMETHOD <init> (J)V\n \t\tARG 1 seed\n-\tMETHOD method_12659 setSeed (II)J\n-\t\tARG 1 x\n-\t\tARG 2 z\n+\tMETHOD method_12659 setTerrainSeed (II)J\n+\t\tCOMMENT Seeds the randomizer to generate the surface terrain blocks(such as grass, sand, etc)\n+\t\tCOMMENT and the bedrock patterns.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>Note that the terrain seed is NOT world seed dependant and only gets affected by\n+\t\tCOMMENT chunk coordinates.</p>\n+\t\tARG 1 chunkX\n+\t\tARG 2 chunkZ\n \tMETHOD method_12660 consume (I)V\n+\t\tCOMMENT Skips the provided number of calls to the randomizer.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>The skips give the effect of \"scrambling\" the randomizer but the output is still\n+\t\tCOMMENT linearly dependant. Note that since multiple calls to a linear congruential generator is\n+\t\tCOMMENT equivalent to another linear congruence, this method could be optimized to combine\n+\t\tCOMMENT the calls into one.</p>\n \t\tARG 1 count\n-\tMETHOD method_12661 setSeed (JII)J\n+\tMETHOD method_12661 setPopulationSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to create population features such as decorators and animals.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>This method takes in the world seed and the negative-most block coordinates of the\n+\t\tCOMMENT chunk. The coordinate pair provided is equivalent to (chunkX * 16, chunkZ * 16). The\n+\t\tCOMMENT three values are mixed together through some layers of hashing to produce the\n+\t\tCOMMENT population seed.\n+\t\tCOMMENT\n+\t\tCOMMENT This function has been proved to be reversible through some exploitation of the underlying", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af3c3aa5092de1cdd6eb13118071fc6bfcaf599a"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIwMDk4OA==", "bodyText": "This should be in a <p> tag", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r380200988", "createdAt": "2020-02-17T14:06:44Z", "author": {"login": "Earthcomputer"}, "path": "mappings/net/minecraft/world/gen/ChunkRandom.mapping", "diffHunk": "@@ -2,32 +2,77 @@ CLASS net/minecraft/class_2919 net/minecraft/world/gen/ChunkRandom\n \tFIELD field_13276 sampleCount I\n \tMETHOD <init> (J)V\n \t\tARG 1 seed\n-\tMETHOD method_12659 setSeed (II)J\n-\t\tARG 1 x\n-\t\tARG 2 z\n+\tMETHOD method_12659 setTerrainSeed (II)J\n+\t\tCOMMENT Seeds the randomizer to generate the surface terrain blocks(such as grass, sand, etc)\n+\t\tCOMMENT and the bedrock patterns.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>Note that the terrain seed is NOT world seed dependant and only gets affected by\n+\t\tCOMMENT chunk coordinates.</p>\n+\t\tARG 1 chunkX\n+\t\tARG 2 chunkZ\n \tMETHOD method_12660 consume (I)V\n+\t\tCOMMENT Skips the provided number of calls to the randomizer.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>The skips give the effect of \"scrambling\" the randomizer but the output is still\n+\t\tCOMMENT linearly dependant. Note that since multiple calls to a linear congruential generator is\n+\t\tCOMMENT equivalent to another linear congruence, this method could be optimized to combine\n+\t\tCOMMENT the calls into one.</p>\n \t\tARG 1 count\n-\tMETHOD method_12661 setSeed (JII)J\n+\tMETHOD method_12661 setPopulationSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to create population features such as decorators and animals.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>This method takes in the world seed and the negative-most block coordinates of the\n+\t\tCOMMENT chunk. The coordinate pair provided is equivalent to (chunkX * 16, chunkZ * 16). The\n+\t\tCOMMENT three values are mixed together through some layers of hashing to produce the\n+\t\tCOMMENT population seed.\n+\t\tCOMMENT\n+\t\tCOMMENT This function has been proved to be reversible through some exploitation of the underlying\n+\t\tCOMMENT nextLong() weaknesses. It is also important to remember that since setSeed()\n+\t\tCOMMENT truncates the 16 upper bits of world seed, only the 48 lowest bits affect the population\n+\t\tCOMMENT seed output.</p>\n \t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\tMETHOD method_12662 create (IIJJ)Ljava/util/Random;\n-\t\tARG 0 x\n-\t\tARG 1 z\n+\t\tARG 3 posX\n+\t\tARG 4 posZ\n+\tMETHOD method_12662 getSlimeRandom (IIJJ)Ljava/util/Random;\n+\t\tARG 0 chunkX\n+\t\tARG 1 chunkZ\n \t\tARG 2 worldSeed\n-\t\tARG 4 localSeed\n-\tMETHOD method_12663 setStructureSeed (JII)J\n-\t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\tMETHOD method_12664 setFeatureSeed (JII)J\n+\t\tARG 4 scrambler\n+\tMETHOD method_12663 setCarverSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to generate larger features such as caves, ravines, minehafts\n+\t\tCOMMENT and strongholds. It is also used to initiate structure start behaviour such as rotation.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>Similar to the population seed, only the 48 lowest bits of the world seed affect the\n+\t\tCOMMENT output since it the upper 16 bits are truncated in the setSeed() call.</p>\n \t\tARG 1 worldSeed\n+\t\tARG 3 chunkX\n+\t\tARG 4 chunkZ\n+\tMETHOD method_12664 setDecoratorSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to generate a given feature.\n+\t\tCOMMENT\n+\t\tCOMMENT The salt, in the form of {index + 10000 * step} assures that each feature is seeded\n+\t\tCOMMENT differently, making the decoration feel more random. Even though it does a good job\n+\t\tCOMMENT at doing so, many entropy issues arise from the salt being so small and result in\n+\t\tCOMMENT weird alignments between features that have an index close apart.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af3c3aa5092de1cdd6eb13118071fc6bfcaf599a"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIwMTI1MQ==", "bodyText": "This should be two paragraphs", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r380201251", "createdAt": "2020-02-17T14:07:14Z", "author": {"login": "Earthcomputer"}, "path": "mappings/net/minecraft/world/gen/ChunkRandom.mapping", "diffHunk": "@@ -2,32 +2,77 @@ CLASS net/minecraft/class_2919 net/minecraft/world/gen/ChunkRandom\n \tFIELD field_13276 sampleCount I\n \tMETHOD <init> (J)V\n \t\tARG 1 seed\n-\tMETHOD method_12659 setSeed (II)J\n-\t\tARG 1 x\n-\t\tARG 2 z\n+\tMETHOD method_12659 setTerrainSeed (II)J\n+\t\tCOMMENT Seeds the randomizer to generate the surface terrain blocks(such as grass, sand, etc)\n+\t\tCOMMENT and the bedrock patterns.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>Note that the terrain seed is NOT world seed dependant and only gets affected by\n+\t\tCOMMENT chunk coordinates.</p>\n+\t\tARG 1 chunkX\n+\t\tARG 2 chunkZ\n \tMETHOD method_12660 consume (I)V\n+\t\tCOMMENT Skips the provided number of calls to the randomizer.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>The skips give the effect of \"scrambling\" the randomizer but the output is still\n+\t\tCOMMENT linearly dependant. Note that since multiple calls to a linear congruential generator is\n+\t\tCOMMENT equivalent to another linear congruence, this method could be optimized to combine\n+\t\tCOMMENT the calls into one.</p>\n \t\tARG 1 count\n-\tMETHOD method_12661 setSeed (JII)J\n+\tMETHOD method_12661 setPopulationSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to create population features such as decorators and animals.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>This method takes in the world seed and the negative-most block coordinates of the\n+\t\tCOMMENT chunk. The coordinate pair provided is equivalent to (chunkX * 16, chunkZ * 16). The\n+\t\tCOMMENT three values are mixed together through some layers of hashing to produce the\n+\t\tCOMMENT population seed.\n+\t\tCOMMENT\n+\t\tCOMMENT This function has been proved to be reversible through some exploitation of the underlying\n+\t\tCOMMENT nextLong() weaknesses. It is also important to remember that since setSeed()\n+\t\tCOMMENT truncates the 16 upper bits of world seed, only the 48 lowest bits affect the population\n+\t\tCOMMENT seed output.</p>\n \t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\tMETHOD method_12662 create (IIJJ)Ljava/util/Random;\n-\t\tARG 0 x\n-\t\tARG 1 z\n+\t\tARG 3 posX\n+\t\tARG 4 posZ\n+\tMETHOD method_12662 getSlimeRandom (IIJJ)Ljava/util/Random;\n+\t\tARG 0 chunkX\n+\t\tARG 1 chunkZ\n \t\tARG 2 worldSeed\n-\t\tARG 4 localSeed\n-\tMETHOD method_12663 setStructureSeed (JII)J\n-\t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\tMETHOD method_12664 setFeatureSeed (JII)J\n+\t\tARG 4 scrambler\n+\tMETHOD method_12663 setCarverSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to generate larger features such as caves, ravines, minehafts\n+\t\tCOMMENT and strongholds. It is also used to initiate structure start behaviour such as rotation.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>Similar to the population seed, only the 48 lowest bits of the world seed affect the\n+\t\tCOMMENT output since it the upper 16 bits are truncated in the setSeed() call.</p>\n \t\tARG 1 worldSeed\n+\t\tARG 3 chunkX\n+\t\tARG 4 chunkZ\n+\tMETHOD method_12664 setDecoratorSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to generate a given feature.\n+\t\tCOMMENT\n+\t\tCOMMENT The salt, in the form of {index + 10000 * step} assures that each feature is seeded\n+\t\tCOMMENT differently, making the decoration feel more random. Even though it does a good job\n+\t\tCOMMENT at doing so, many entropy issues arise from the salt being so small and result in\n+\t\tCOMMENT weird alignments between features that have an index close apart.\n+\t\tARG 1 populationSeed\n+\t\t\tCOMMENT The population seed computed in setPopulationSeed().\n \t\tARG 3 index\n+\t\t\tCOMMENT The index of the feature in the feature list.\n \t\tARG 4 step\n-\tMETHOD method_12665 setStructureSeed (JIII)J\n+\t\t\tCOMMENT The generation step's ordinal for this feature.\n+\tMETHOD method_12665 setRegionSeed (JIII)J\n+\t\tCOMMENT Seeds the randomizer to determine the start position of structure features such as\n+\t\tCOMMENT temples, monuments and buried treasures within a region.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>The region coordinates pair corresponds to the coordinates of the region the seeded\n+\t\tCOMMENT chunk lies in. For example, a swamp hut region is 32 by 32 chunks meaning that all\n+\t\tCOMMENT chunks that lie within that region get seeded the same way.\n+\t\tCOMMENT\n+\t\tCOMMENT Similarly, the upper 16 bits of world seed also do not affect the region seed because", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af3c3aa5092de1cdd6eb13118071fc6bfcaf599a"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bafff76c8d2d752eef42272205ef4f1283fd79d7", "author": {"user": {"login": "KaptainWutax", "name": null}}, "url": "https://github.com/FabricMC/yarn/commit/bafff76c8d2d752eef42272205ef4f1283fd79d7", "committedDate": "2020-02-17T14:10:42Z", "message": "fixed my bad spelling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad2d3a2f7a9267d02a15b2d510cb0ca8c7a6f3da", "author": {"user": {"login": "KaptainWutax", "name": null}}, "url": "https://github.com/FabricMC/yarn/commit/ad2d3a2f7a9267d02a15b2d510cb0ca8c7a6f3da", "committedDate": "2020-02-17T14:12:29Z", "message": "split paragraphs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5Nzc1OTM5", "url": "https://github.com/FabricMC/yarn/pull/1118#pullrequestreview-359775939", "createdAt": "2020-02-17T14:31:42Z", "commit": {"oid": "ad2d3a2f7a9267d02a15b2d510cb0ca8c7a6f3da"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDozMTo0MlrOFqmb1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDozMTo0MlrOFqmb1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIxNDIzMA==", "bodyText": "Need help for a better name. This method is responsible for:\n\nGenerating all carvers. (caves, ravines, etc)\nComputing the start chunk of mineshafts. (doesn't use setRegionSeed for some reason.)\nComputing the stronghold piece layout(not to be confused with the generation.)\nAll StructureFeature's structure starts. Examples of this include rotation, random structure pieces and templates.", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r380214230", "createdAt": "2020-02-17T14:31:42Z", "author": {"login": "KaptainWutax"}, "path": "mappings/net/minecraft/world/gen/ChunkRandom.mapping", "diffHunk": "@@ -2,32 +2,77 @@ CLASS net/minecraft/class_2919 net/minecraft/world/gen/ChunkRandom\n \tFIELD field_13276 sampleCount I\n \tMETHOD <init> (J)V\n \t\tARG 1 seed\n-\tMETHOD method_12659 setSeed (II)J\n-\t\tARG 1 x\n-\t\tARG 2 z\n+\tMETHOD method_12659 setTerrainSeed (II)J\n+\t\tCOMMENT Seeds the randomizer to generate the surface terrain blocks(such as grass, sand, etc)\n+\t\tCOMMENT and the bedrock patterns.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>Note that the terrain seed is NOT world seed dependent and only gets affected by\n+\t\tCOMMENT chunk coordinates.</p>\n+\t\tARG 1 chunkX\n+\t\tARG 2 chunkZ\n \tMETHOD method_12660 consume (I)V\n+\t\tCOMMENT Skips the provided number of calls to the randomizer.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>The skips give the effect of \"scrambling\" the randomizer but the output is still\n+\t\tCOMMENT linearly dependent. Note that since multiple calls to a linear congruential generator is\n+\t\tCOMMENT equivalent to another linear congruence, this method could be optimized to combine\n+\t\tCOMMENT the calls into one.</p>\n \t\tARG 1 count\n-\tMETHOD method_12661 setSeed (JII)J\n+\tMETHOD method_12661 setPopulationSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to create population features such as decorators and animals.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>This method takes in the world seed and the negative-most block coordinates of the\n+\t\tCOMMENT chunk. The coordinate pair provided is equivalent to (chunkX * 16, chunkZ * 16). The\n+\t\tCOMMENT three values are mixed together through some layers of hashing to produce the\n+\t\tCOMMENT population seed.</p>\n+\t\tCOMMENT\n+\t\tCOMMENT <p>This function has been proved to be reversible through some exploitation of the underlying\n+\t\tCOMMENT nextLong() weaknesses. It is also important to remember that since setSeed()\n+\t\tCOMMENT truncates the 16 upper bits of world seed, only the 48 lowest bits affect the population\n+\t\tCOMMENT seed output.</p>\n \t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\tMETHOD method_12662 create (IIJJ)Ljava/util/Random;\n-\t\tARG 0 x\n-\t\tARG 1 z\n+\t\tARG 3 posX\n+\t\tARG 4 posZ\n+\tMETHOD method_12662 getSlimeRandom (IIJJ)Ljava/util/Random;\n+\t\tARG 0 chunkX\n+\t\tARG 1 chunkZ\n \t\tARG 2 worldSeed\n-\t\tARG 4 localSeed\n-\tMETHOD method_12663 setStructureSeed (JII)J\n-\t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\tMETHOD method_12664 setFeatureSeed (JII)J\n+\t\tARG 4 scrambler\n+\tMETHOD method_12663 setCarverSeed (JII)J", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad2d3a2f7a9267d02a15b2d510cb0ca8c7a6f3da"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5ODY0OTk4", "url": "https://github.com/FabricMC/yarn/pull/1118#pullrequestreview-359864998", "createdAt": "2020-02-17T16:43:49Z", "commit": {"oid": "ad2d3a2f7a9267d02a15b2d510cb0ca8c7a6f3da"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjo0Mzo1MFrOFqqsmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjo0Mzo1MFrOFqqsmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI4NDA1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tCOMMENT Seeds the randomizer to generate the surface terrain blocks(such as grass, sand, etc)\n          \n          \n            \n            \t\tCOMMENT Seeds the randomizer to generate the surface terrain blocks (such as grass, sand, etc.)", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r380284057", "createdAt": "2020-02-17T16:43:50Z", "author": {"login": "Runemoro"}, "path": "mappings/net/minecraft/world/gen/ChunkRandom.mapping", "diffHunk": "@@ -2,32 +2,77 @@ CLASS net/minecraft/class_2919 net/minecraft/world/gen/ChunkRandom\n \tFIELD field_13276 sampleCount I\n \tMETHOD <init> (J)V\n \t\tARG 1 seed\n-\tMETHOD method_12659 setSeed (II)J\n-\t\tARG 1 x\n-\t\tARG 2 z\n+\tMETHOD method_12659 setTerrainSeed (II)J\n+\t\tCOMMENT Seeds the randomizer to generate the surface terrain blocks(such as grass, sand, etc)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad2d3a2f7a9267d02a15b2d510cb0ca8c7a6f3da"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5ODY1Mzk0", "url": "https://github.com/FabricMC/yarn/pull/1118#pullrequestreview-359865394", "createdAt": "2020-02-17T16:44:32Z", "commit": {"oid": "ad2d3a2f7a9267d02a15b2d510cb0ca8c7a6f3da"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjo0NDozMlrOFqqtyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjo0NDozMlrOFqqtyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI4NDM2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tCOMMENT <p>Note that the terrain seed is NOT world seed dependent and only gets affected by\n          \n          \n            \n            \t\tCOMMENT <p>Note that the terrain seed does not depend on the world seed and only gets affected by", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r380284362", "createdAt": "2020-02-17T16:44:32Z", "author": {"login": "Runemoro"}, "path": "mappings/net/minecraft/world/gen/ChunkRandom.mapping", "diffHunk": "@@ -2,32 +2,77 @@ CLASS net/minecraft/class_2919 net/minecraft/world/gen/ChunkRandom\n \tFIELD field_13276 sampleCount I\n \tMETHOD <init> (J)V\n \t\tARG 1 seed\n-\tMETHOD method_12659 setSeed (II)J\n-\t\tARG 1 x\n-\t\tARG 2 z\n+\tMETHOD method_12659 setTerrainSeed (II)J\n+\t\tCOMMENT Seeds the randomizer to generate the surface terrain blocks(such as grass, sand, etc)\n+\t\tCOMMENT and the bedrock patterns.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>Note that the terrain seed is NOT world seed dependent and only gets affected by", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad2d3a2f7a9267d02a15b2d510cb0ca8c7a6f3da"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5ODY2NjQ1", "url": "https://github.com/FabricMC/yarn/pull/1118#pullrequestreview-359866645", "createdAt": "2020-02-17T16:46:40Z", "commit": {"oid": "ad2d3a2f7a9267d02a15b2d510cb0ca8c7a6f3da"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjo0Njo0MFrOFqqxmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjo0Njo0MFrOFqqxmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI4NTMzNw==", "bodyText": "I think the convention is to not use pos prefixes. It's understood that x and z are components of a position.", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r380285337", "createdAt": "2020-02-17T16:46:40Z", "author": {"login": "Runemoro"}, "path": "mappings/net/minecraft/world/gen/ChunkRandom.mapping", "diffHunk": "@@ -2,32 +2,77 @@ CLASS net/minecraft/class_2919 net/minecraft/world/gen/ChunkRandom\n \tFIELD field_13276 sampleCount I\n \tMETHOD <init> (J)V\n \t\tARG 1 seed\n-\tMETHOD method_12659 setSeed (II)J\n-\t\tARG 1 x\n-\t\tARG 2 z\n+\tMETHOD method_12659 setTerrainSeed (II)J\n+\t\tCOMMENT Seeds the randomizer to generate the surface terrain blocks(such as grass, sand, etc)\n+\t\tCOMMENT and the bedrock patterns.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>Note that the terrain seed is NOT world seed dependent and only gets affected by\n+\t\tCOMMENT chunk coordinates.</p>\n+\t\tARG 1 chunkX\n+\t\tARG 2 chunkZ\n \tMETHOD method_12660 consume (I)V\n+\t\tCOMMENT Skips the provided number of calls to the randomizer.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>The skips give the effect of \"scrambling\" the randomizer but the output is still\n+\t\tCOMMENT linearly dependent. Note that since multiple calls to a linear congruential generator is\n+\t\tCOMMENT equivalent to another linear congruence, this method could be optimized to combine\n+\t\tCOMMENT the calls into one.</p>\n \t\tARG 1 count\n-\tMETHOD method_12661 setSeed (JII)J\n+\tMETHOD method_12661 setPopulationSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to create population features such as decorators and animals.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>This method takes in the world seed and the negative-most block coordinates of the\n+\t\tCOMMENT chunk. The coordinate pair provided is equivalent to (chunkX * 16, chunkZ * 16). The\n+\t\tCOMMENT three values are mixed together through some layers of hashing to produce the\n+\t\tCOMMENT population seed.</p>\n+\t\tCOMMENT\n+\t\tCOMMENT <p>This function has been proved to be reversible through some exploitation of the underlying\n+\t\tCOMMENT nextLong() weaknesses. It is also important to remember that since setSeed()\n+\t\tCOMMENT truncates the 16 upper bits of world seed, only the 48 lowest bits affect the population\n+\t\tCOMMENT seed output.</p>\n \t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\tMETHOD method_12662 create (IIJJ)Ljava/util/Random;\n-\t\tARG 0 x\n-\t\tARG 1 z\n+\t\tARG 3 posX\n+\t\tARG 4 posZ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad2d3a2f7a9267d02a15b2d510cb0ca8c7a6f3da"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5ODY2ODk4", "url": "https://github.com/FabricMC/yarn/pull/1118#pullrequestreview-359866898", "createdAt": "2020-02-17T16:47:06Z", "commit": {"oid": "ad2d3a2f7a9267d02a15b2d510cb0ca8c7a6f3da"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjo0NzowNlrOFqqyVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjo0NzowNlrOFqqyVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI4NTUyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tCOMMENT Seeds the randomizer to generate larger features such as caves, ravines, minehafts\n          \n          \n            \n            \t\tCOMMENT Seeds the randomizer to generate larger features such as caves, ravines, mineshafts", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r380285526", "createdAt": "2020-02-17T16:47:06Z", "author": {"login": "Runemoro"}, "path": "mappings/net/minecraft/world/gen/ChunkRandom.mapping", "diffHunk": "@@ -2,32 +2,77 @@ CLASS net/minecraft/class_2919 net/minecraft/world/gen/ChunkRandom\n \tFIELD field_13276 sampleCount I\n \tMETHOD <init> (J)V\n \t\tARG 1 seed\n-\tMETHOD method_12659 setSeed (II)J\n-\t\tARG 1 x\n-\t\tARG 2 z\n+\tMETHOD method_12659 setTerrainSeed (II)J\n+\t\tCOMMENT Seeds the randomizer to generate the surface terrain blocks(such as grass, sand, etc)\n+\t\tCOMMENT and the bedrock patterns.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>Note that the terrain seed is NOT world seed dependent and only gets affected by\n+\t\tCOMMENT chunk coordinates.</p>\n+\t\tARG 1 chunkX\n+\t\tARG 2 chunkZ\n \tMETHOD method_12660 consume (I)V\n+\t\tCOMMENT Skips the provided number of calls to the randomizer.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>The skips give the effect of \"scrambling\" the randomizer but the output is still\n+\t\tCOMMENT linearly dependent. Note that since multiple calls to a linear congruential generator is\n+\t\tCOMMENT equivalent to another linear congruence, this method could be optimized to combine\n+\t\tCOMMENT the calls into one.</p>\n \t\tARG 1 count\n-\tMETHOD method_12661 setSeed (JII)J\n+\tMETHOD method_12661 setPopulationSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to create population features such as decorators and animals.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>This method takes in the world seed and the negative-most block coordinates of the\n+\t\tCOMMENT chunk. The coordinate pair provided is equivalent to (chunkX * 16, chunkZ * 16). The\n+\t\tCOMMENT three values are mixed together through some layers of hashing to produce the\n+\t\tCOMMENT population seed.</p>\n+\t\tCOMMENT\n+\t\tCOMMENT <p>This function has been proved to be reversible through some exploitation of the underlying\n+\t\tCOMMENT nextLong() weaknesses. It is also important to remember that since setSeed()\n+\t\tCOMMENT truncates the 16 upper bits of world seed, only the 48 lowest bits affect the population\n+\t\tCOMMENT seed output.</p>\n \t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\tMETHOD method_12662 create (IIJJ)Ljava/util/Random;\n-\t\tARG 0 x\n-\t\tARG 1 z\n+\t\tARG 3 posX\n+\t\tARG 4 posZ\n+\tMETHOD method_12662 getSlimeRandom (IIJJ)Ljava/util/Random;\n+\t\tARG 0 chunkX\n+\t\tARG 1 chunkZ\n \t\tARG 2 worldSeed\n-\t\tARG 4 localSeed\n-\tMETHOD method_12663 setStructureSeed (JII)J\n-\t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\tMETHOD method_12664 setFeatureSeed (JII)J\n+\t\tARG 4 scrambler\n+\tMETHOD method_12663 setCarverSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to generate larger features such as caves, ravines, minehafts", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad2d3a2f7a9267d02a15b2d510cb0ca8c7a6f3da"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5ODY3MzA3", "url": "https://github.com/FabricMC/yarn/pull/1118#pullrequestreview-359867307", "createdAt": "2020-02-17T16:47:55Z", "commit": {"oid": "ad2d3a2f7a9267d02a15b2d510cb0ca8c7a6f3da"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjo0Nzo1NVrOFqqzig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjo0Nzo1NVrOFqqzig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI4NTgzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tCOMMENT The salt, in the form of {index + 10000 * step} assures that each feature is seeded\n          \n          \n            \n            \t\tCOMMENT The salt, in the form of {@code index + 10000 * step} assures that each feature is seeded", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r380285834", "createdAt": "2020-02-17T16:47:55Z", "author": {"login": "Runemoro"}, "path": "mappings/net/minecraft/world/gen/ChunkRandom.mapping", "diffHunk": "@@ -2,32 +2,77 @@ CLASS net/minecraft/class_2919 net/minecraft/world/gen/ChunkRandom\n \tFIELD field_13276 sampleCount I\n \tMETHOD <init> (J)V\n \t\tARG 1 seed\n-\tMETHOD method_12659 setSeed (II)J\n-\t\tARG 1 x\n-\t\tARG 2 z\n+\tMETHOD method_12659 setTerrainSeed (II)J\n+\t\tCOMMENT Seeds the randomizer to generate the surface terrain blocks(such as grass, sand, etc)\n+\t\tCOMMENT and the bedrock patterns.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>Note that the terrain seed is NOT world seed dependent and only gets affected by\n+\t\tCOMMENT chunk coordinates.</p>\n+\t\tARG 1 chunkX\n+\t\tARG 2 chunkZ\n \tMETHOD method_12660 consume (I)V\n+\t\tCOMMENT Skips the provided number of calls to the randomizer.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>The skips give the effect of \"scrambling\" the randomizer but the output is still\n+\t\tCOMMENT linearly dependent. Note that since multiple calls to a linear congruential generator is\n+\t\tCOMMENT equivalent to another linear congruence, this method could be optimized to combine\n+\t\tCOMMENT the calls into one.</p>\n \t\tARG 1 count\n-\tMETHOD method_12661 setSeed (JII)J\n+\tMETHOD method_12661 setPopulationSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to create population features such as decorators and animals.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>This method takes in the world seed and the negative-most block coordinates of the\n+\t\tCOMMENT chunk. The coordinate pair provided is equivalent to (chunkX * 16, chunkZ * 16). The\n+\t\tCOMMENT three values are mixed together through some layers of hashing to produce the\n+\t\tCOMMENT population seed.</p>\n+\t\tCOMMENT\n+\t\tCOMMENT <p>This function has been proved to be reversible through some exploitation of the underlying\n+\t\tCOMMENT nextLong() weaknesses. It is also important to remember that since setSeed()\n+\t\tCOMMENT truncates the 16 upper bits of world seed, only the 48 lowest bits affect the population\n+\t\tCOMMENT seed output.</p>\n \t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\tMETHOD method_12662 create (IIJJ)Ljava/util/Random;\n-\t\tARG 0 x\n-\t\tARG 1 z\n+\t\tARG 3 posX\n+\t\tARG 4 posZ\n+\tMETHOD method_12662 getSlimeRandom (IIJJ)Ljava/util/Random;\n+\t\tARG 0 chunkX\n+\t\tARG 1 chunkZ\n \t\tARG 2 worldSeed\n-\t\tARG 4 localSeed\n-\tMETHOD method_12663 setStructureSeed (JII)J\n-\t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\tMETHOD method_12664 setFeatureSeed (JII)J\n+\t\tARG 4 scrambler\n+\tMETHOD method_12663 setCarverSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to generate larger features such as caves, ravines, minehafts\n+\t\tCOMMENT and strongholds. It is also used to initiate structure start behaviour such as rotation.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>Similar to the population seed, only the 48 lowest bits of the world seed affect the\n+\t\tCOMMENT output since it the upper 16 bits are truncated in the setSeed() call.</p>\n \t\tARG 1 worldSeed\n+\t\tARG 3 chunkX\n+\t\tARG 4 chunkZ\n+\tMETHOD method_12664 setDecoratorSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to generate a given feature.\n+\t\tCOMMENT\n+\t\tCOMMENT The salt, in the form of {index + 10000 * step} assures that each feature is seeded", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad2d3a2f7a9267d02a15b2d510cb0ca8c7a6f3da"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67a56859934360a3462764c615abb9f241a67d17", "author": {"user": {"login": "KaptainWutax", "name": null}}, "url": "https://github.com/FabricMC/yarn/commit/67a56859934360a3462764c615abb9f241a67d17", "committedDate": "2020-02-20T23:38:08Z", "message": "Update mappings/net/minecraft/world/gen/ChunkRandom.mapping\n\nCo-Authored-By: Runemoro <runemoro1@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43a081c63952b2ae8af8bdfbdc986f401ce96cf7", "author": {"user": {"login": "KaptainWutax", "name": null}}, "url": "https://github.com/FabricMC/yarn/commit/43a081c63952b2ae8af8bdfbdc986f401ce96cf7", "committedDate": "2020-02-20T23:38:30Z", "message": "Update mappings/net/minecraft/world/gen/ChunkRandom.mapping\n\nCo-Authored-By: Runemoro <runemoro1@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99a09700e02209c1d09eef870661eb8f5468ccb8", "author": {"user": {"login": "KaptainWutax", "name": null}}, "url": "https://github.com/FabricMC/yarn/commit/99a09700e02209c1d09eef870661eb8f5468ccb8", "committedDate": "2020-02-20T23:40:51Z", "message": "Update mappings/net/minecraft/world/gen/ChunkRandom.mapping\n\nCo-Authored-By: Runemoro <runemoro1@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "961640c702c3ef7fc6ee324be70bc255ae30a078", "author": {"user": {"login": "KaptainWutax", "name": null}}, "url": "https://github.com/FabricMC/yarn/commit/961640c702c3ef7fc6ee324be70bc255ae30a078", "committedDate": "2020-02-20T23:41:55Z", "message": "Update mappings/net/minecraft/world/gen/ChunkRandom.mapping\n\nCo-Authored-By: Runemoro <runemoro1@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMzQxODg0", "url": "https://github.com/FabricMC/yarn/pull/1118#pullrequestreview-362341884", "createdAt": "2020-02-21T01:03:36Z", "commit": {"oid": "961640c702c3ef7fc6ee324be70bc255ae30a078"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMDExNDUy", "url": "https://github.com/FabricMC/yarn/pull/1118#pullrequestreview-363011452", "createdAt": "2020-02-22T05:31:38Z", "commit": {"oid": "961640c702c3ef7fc6ee324be70bc255ae30a078"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MjQ4ODQ2", "url": "https://github.com/FabricMC/yarn/pull/1118#pullrequestreview-369248846", "createdAt": "2020-03-05T01:55:47Z", "commit": {"oid": "961640c702c3ef7fc6ee324be70bc255ae30a078"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85b2c05df61b9afdaf677e81f5f312f3bd7739c5", "author": {"user": {"login": "KaptainWutax", "name": null}}, "url": "https://github.com/FabricMC/yarn/commit/85b2c05df61b9afdaf677e81f5f312f3bd7739c5", "committedDate": "2020-03-05T22:04:17Z", "message": "changed pos to block"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5OTUyMzgx", "url": "https://github.com/FabricMC/yarn/pull/1118#pullrequestreview-369952381", "createdAt": "2020-03-05T22:11:29Z", "commit": {"oid": "85b2c05df61b9afdaf677e81f5f312f3bd7739c5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5OTk1Mjcy", "url": "https://github.com/FabricMC/yarn/pull/1118#pullrequestreview-369995272", "createdAt": "2020-03-05T23:57:18Z", "commit": {"oid": "85b2c05df61b9afdaf677e81f5f312f3bd7739c5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3944, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}