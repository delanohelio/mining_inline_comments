{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4MjIyMzc3", "number": 3855, "title": "Metrics in cm", "bodyText": "Type of change\n\nEnhancement\n\nDescription\nMoves metrics from Model CR into CM. Metrics as Map<String, Object> are deprecated.\nExample CR:\nmetricsConfig:\n   type: jmxPrometheusExporter\n   valueFrom:\n     configMapKeyRef:\n       name: my-config-map\n       key: my-key\n\nFixes #2826\nChecklist\nPlease go through this checklist and make sure all applicable tasks have been done\n\n Write tests\n Make sure all tests pass\n Update documentation\n Check RBAC rights for Kubernetes / OpenShift roles\n Try your changes from Pod inside your Kubernetes and OpenShift cluster, not just locally\n Reference relevant issue(s) and close them after merging\n Update CHANGELOG.md\n Supply screenshots for visual changes, such as Grafana dashboards", "createdAt": "2020-10-22T11:34:00Z", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855", "merged": true, "mergeCommit": {"oid": "08e4b9862489c423e06905479988ccbdd9974116"}, "closed": true, "closedAt": "2020-12-03T00:35:11Z", "author": {"login": "sknot-rh"}, "timelineItems": {"totalCount": 57, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdVAZFxgFqTUxNDYzMDIwNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdiXWrjgFqTU0MzMyOTk3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0NjMwMjA3", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#pullrequestreview-514630207", "createdAt": "2020-10-22T11:37:03Z", "commit": {"oid": "f1d4c93d740f1d9c8e4ce3a4d343cae1ebed9229"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "41c916a27ae35e157b475f4e6d8536cdbc92d577", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/41c916a27ae35e157b475f4e6d8536cdbc92d577", "committedDate": "2020-10-22T13:53:57Z", "message": "weird fixes\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "112962a5c47edd78c5945a961d3fc27425574b3a", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/112962a5c47edd78c5945a961d3fc27425574b3a", "committedDate": "2020-10-22T14:11:03Z", "message": "weird fixes\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9446d57a1fcd33a2374c86083000e7a31135ef74", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/9446d57a1fcd33a2374c86083000e7a31135ef74", "committedDate": "2020-10-26T11:16:11Z", "message": "preserve compatibility\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "d49f981411ddf28408f7c41b108e74c69c8e8194", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d49f981411ddf28408f7c41b108e74c69c8e8194", "committedDate": "2020-10-26T11:50:07Z", "message": "reverting tests\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5719ac53fbadcd6341a5bf994ee850af30716ce0", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/5719ac53fbadcd6341a5bf994ee850af30716ce0", "committedDate": "2020-10-26T11:53:14Z", "message": "revert indent\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "3f2feb8ef467fb2a3b0c6c7ad4b73936c1814b1d", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3f2feb8ef467fb2a3b0c6c7ad4b73936c1814b1d", "committedDate": "2020-10-26T11:54:01Z", "message": "revert indent\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "736364646b1a49cdb5982de6e795f40f9452ea8e", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/736364646b1a49cdb5982de6e795f40f9452ea8e", "committedDate": "2020-10-26T12:49:26Z", "message": "sb\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "de8251101877dbbdea588ac38f6a9a61cf34ec8a", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/de8251101877dbbdea588ac38f6a9a61cf34ec8a", "committedDate": "2020-10-26T13:17:47Z", "message": "sb\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwMDExNzU5", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#pullrequestreview-520011759", "createdAt": "2020-10-29T19:39:35Z", "commit": {"oid": "de8251101877dbbdea588ac38f6a9a61cf34ec8a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxOTozOTozNVrOHqrr6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxOTo0NDoxNFrOHqr1Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUxNzk5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Support configuring metrics by a ConfigMap\n          \n          \n            \n            * Support passing metrics configuration as an external ConfigMap", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r514517993", "createdAt": "2020-10-29T19:39:35Z", "author": {"login": "scholzj"}, "path": "CHANGELOG.md", "diffHunk": "@@ -5,6 +5,7 @@\n * Add support for `secretPrefix` property for User Operator to prefix all secret names created from KafkaUser resource.\n * Allow configuring labels and annotations for Cluster CA certificate secrets\n * Add the JAAS configuration string in the sasl.jaas.config property to the generated secrets for KafkaUser with SCRAM-SHA-512 authentication.\n+* Support configuring metrics by a ConfigMap", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de8251101877dbbdea588ac38f6a9a61cf34ec8a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUyMDM1OQ==", "bodyText": "I think the test should test the actual metrics. I think you should also consider:\n\nHaving the test for all affected resources\nTest things such as updates to the metrics\nEventually migrations from one set of metrics to another", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r514520359", "createdAt": "2020-10-29T19:44:14Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "diffHunk": "@@ -385,6 +391,62 @@ void testCruiseControlMetrics() {\n         }\n     }\n \n+    @Test\n+    void testKafkaMetricsSettings() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de8251101877dbbdea588ac38f6a9a61cf34ec8a"}, "originalPosition": 32}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9ab44bacde62d4d4489978950c8aca5ac2755e97", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/9ab44bacde62d4d4489978950c8aca5ac2755e97", "committedDate": "2020-11-04T11:03:11Z", "message": "fix\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "4f2a4e06a9500a8b57b9c43b7e6866fba906721a", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/4f2a4e06a9500a8b57b9c43b7e6866fba906721a", "committedDate": "2020-11-04T11:04:53Z", "message": "fix\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzM3MTYz", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#pullrequestreview-523337163", "createdAt": "2020-11-04T13:01:13Z", "commit": {"oid": "d3f1c4bea45915351e2fbc39a535c3ad23a536cf"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e8e1a2f71252480649ab3c425b5110f8e787b3b4", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/e8e1a2f71252480649ab3c425b5110f8e787b3b4", "committedDate": "2020-11-09T14:17:03Z", "message": "tests + mm2\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "20647ca01e7fb1f5d05a6fd6da8bbda7efba9f9d", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/20647ca01e7fb1f5d05a6fd6da8bbda7efba9f9d", "committedDate": "2020-11-09T14:18:31Z", "message": "tests + mm2\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNjU2NzA3", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#pullrequestreview-521656707", "createdAt": "2020-11-02T14:06:21Z", "commit": {"oid": "de8251101877dbbdea588ac38f6a9a61cf34ec8a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNDowNjoyMVrOHsFvzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo0Njo1MlrOHwoQSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTk5MzU1MA==", "bodyText": "long line", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r515993550", "createdAt": "2020-11-02T14:06:21Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java", "diffHunk": "@@ -513,28 +513,63 @@ protected String maybeAddMonitorIntervalToExternalLogging(String data) {\n     /**\n      * Generates a metrics and logging ConfigMap according to configured defaults.\n      *\n-     * @param externalConfigMap The ConfigMap used if Logging is an instance of ExternalLogging\n+     * @param externalLoggingConfigMap The ConfigMap used if Logging is an instance of ExternalLogging\n+     * @param externalMetricsConfigMap The ConfigMap used if Metrics is an instance of ExternalMetrics\n      * @return The generated ConfigMap.\n      */\n-    public ConfigMap generateMetricsAndLogConfigMap(ConfigMap externalConfigMap) {\n+    public ConfigMap generateMetricsAndLogConfigMap(ConfigMap externalLoggingConfigMap, ConfigMap externalMetricsConfigMap) {\n         Map<String, String> data = new HashMap<>(2);\n-        data.put(getAncillaryConfigMapKeyLogConfig(), parseLogging(getLogging(), externalConfigMap));\n+        data.put(getAncillaryConfigMapKeyLogConfig(), parseLogging(getLogging(), externalLoggingConfigMap));\n         if (isMetricsEnabled() && getMetricsConfig() != null) {\n-            HashMap<String, Object> m = new HashMap<>();\n-            for (Map.Entry<String, Object> entry : getMetricsConfig()) {\n-                m.put(entry.getKey(), entry.getValue());\n-            }\n-            data.put(ANCILLARY_CM_KEY_METRICS, new JsonObject(m).toString());\n+            data.put(ANCILLARY_CM_KEY_METRICS, parseMetrics(externalMetricsConfigMap));\n         }\n-\n         return createConfigMap(ancillaryConfigMapName, data);\n     }\n \n-    protected Iterable<Map.Entry<String, Object>> getMetricsConfig() {\n+    public Map<String, Object> getMetricsConfig() {\n         return metricsConfig;\n     }\n \n-    protected void setMetricsConfig(Iterable<Map.Entry<String, Object>> metricsConfig) {\n+    public boolean isExternalMetricsConfigured() {\n+        return getMetricsConfig() != null && getMetricsConfig().get(\"type\") != null && getMetricsConfig().get(\"type\").equals(\"external\") && getMetricsConfig().get(\"name\") != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de8251101877dbbdea588ac38f6a9a61cf34ec8a"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1MzIyNQ==", "bodyText": "I'm seeing this repeated enough times to think we should have a method: kafkaClienter.isMetricsJmxPrometheusExporter()", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r520753225", "createdAt": "2020-11-10T17:46:52Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -2401,12 +2413,19 @@ String getCertificateThumbprint(Secret certSecret, CertAndKeySecretSource custom\n \n         ConfigMap getKafkaAncillaryCm()    {\n             ConfigMap loggingCm = null;\n+            ConfigMap metricsCm = null;\n \n             if (kafkaCluster.getLogging() instanceof ExternalLogging) {\n                 loggingCm = configMapOperations.get(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) kafkaCluster.getLogging()).getName());\n             }\n \n-            ConfigMap brokerCm = kafkaCluster.generateAncillaryConfigMap(loggingCm, kafkaAdvertisedHostnames, kafkaAdvertisedPorts);\n+            if (kafkaCluster.isMetricsConfigured()) {\n+                if (kafkaCluster.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c221536d9a1abdc1cb0baa79312ee3d6d46a887"}, "originalPosition": 52}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5641b3d999110320e9c250ea517e8aaa902854be", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/5641b3d999110320e9c250ea517e8aaa902854be", "committedDate": "2020-11-11T11:58:39Z", "message": "adjust STs to use cm\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "08282e1ea747eb70ec242f2f1df5548a8e381491", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/08282e1ea747eb70ec242f2f1df5548a8e381491", "committedDate": "2020-11-11T12:07:57Z", "message": "ribejs\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5OTQzNTYx", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#pullrequestreview-529943561", "createdAt": "2020-11-13T10:23:09Z", "commit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "state": "COMMENTED", "comments": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMDoyMzowOVrOHyoxrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMjoxMTozOVrOHysApQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg1ODkyNA==", "bodyText": "Similarly to previous releases - could you add section for deprecated things and mention there that the old metrics is deprecated and will be removed?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522858924", "createdAt": "2020-11-13T10:23:09Z", "author": {"login": "scholzj"}, "path": "CHANGELOG.md", "diffHunk": "@@ -8,6 +8,7 @@\n * Strimzi `test-container` has been renamed to `strimzi-test-container` to make the name more clear\n * Updated the CPU usage metric in the Kafka, ZooKeeper and Cruise Control dashboards to include the CPU kernel time (other than the current user time)\n * Allow disabling ownerReference on CA secrets\n+* Support passing metrics configuration as an external ConfigMap", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NjM4Mw==", "bodyText": "@tombentley Do we need to add to the old fields some markers that they will not be in v1beta2 anymore? I know you worked on some annotations like that for the CRD v1.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522866383", "createdAt": "2020-11-13T10:37:29Z", "author": {"login": "scholzj"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/AbstractKafkaConnectSpec.java", "diffHunk": "@@ -132,6 +133,18 @@ public void setJvmOptions(JvmOptions jvmOptions) {\n         this.jvmOptions = jvmOptions;\n     }\n \n+    @Description(\"Metrics configuration.\")\n+    @JsonInclude(JsonInclude.Include.NON_EMPTY)\n+    public MetricsConfig getMetricsConfig() {\n+        return metricsConfig;\n+    }\n+\n+    public void setMetricsConfig(MetricsConfig metricsConfig) {\n+        this.metricsConfig = metricsConfig;\n+    }\n+\n+    @DeprecatedProperty(movedToPath = \"spec.metricsConfig\")\n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NzgwMg==", "bodyText": "You seem to use somewhere getMetricsConfigInCm() (line 526) and the other time just metricsConfigInCm. Any reasons? Maybe you could use the same everywhere?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522867802", "createdAt": "2020-11-13T10:40:12Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java", "diffHunk": "@@ -513,23 +516,54 @@ protected String maybeAddMonitorIntervalToExternalLogging(String data) {\n     /**\n      * Generates a metrics and logging ConfigMap according to configured defaults.\n      *\n-     * @param externalConfigMap The ConfigMap used if Logging is an instance of ExternalLogging\n+     * @param externalLoggingConfigMap The ConfigMap used if Logging is an instance of ExternalLogging\n+     * @param externalMetricsConfigMap The ConfigMap used if Metrics is an instance of ExternalMetrics\n      * @return The generated ConfigMap.\n      */\n-    public ConfigMap generateMetricsAndLogConfigMap(ConfigMap externalConfigMap) {\n+    public ConfigMap generateMetricsAndLogConfigMap(ConfigMap externalLoggingConfigMap, ConfigMap externalMetricsConfigMap) {\n         Map<String, String> data = new HashMap<>(2);\n-        data.put(getAncillaryConfigMapKeyLogConfig(), parseLogging(getLogging(), externalConfigMap));\n-        if (isMetricsEnabled() && getMetricsConfig() != null) {\n-            HashMap<String, Object> m = new HashMap<>();\n-            for (Map.Entry<String, Object> entry : getMetricsConfig()) {\n-                m.put(entry.getKey(), entry.getValue());\n+        data.put(getAncillaryConfigMapKeyLogConfig(), parseLogging(getLogging(), externalLoggingConfigMap));\n+        if (getMetricsConfigInCm() != null || (isMetricsEnabled() && getMetricsConfig() != null)) {\n+            String parseResult = parseMetrics(externalMetricsConfigMap);\n+            if (parseResult != null) {\n+                this.setMetricsEnabled(true);\n+                data.put(ANCILLARY_CM_KEY_METRICS, parseResult);\n             }\n-            data.put(ANCILLARY_CM_KEY_METRICS, new JsonObject(m).toString());\n         }\n-\n         return createConfigMap(ancillaryConfigMapName, data);\n     }\n \n+    protected String parseMetrics(ConfigMap externalCm) {\n+        if (metricsConfigInCm != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2ODM1Mw==", "bodyText": "If nothing else, this should add to the warning conditions. But maybe it would be fine to just fail the reconciliation for this?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522868353", "createdAt": "2020-11-13T10:41:13Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java", "diffHunk": "@@ -513,23 +516,54 @@ protected String maybeAddMonitorIntervalToExternalLogging(String data) {\n     /**\n      * Generates a metrics and logging ConfigMap according to configured defaults.\n      *\n-     * @param externalConfigMap The ConfigMap used if Logging is an instance of ExternalLogging\n+     * @param externalLoggingConfigMap The ConfigMap used if Logging is an instance of ExternalLogging\n+     * @param externalMetricsConfigMap The ConfigMap used if Metrics is an instance of ExternalMetrics\n      * @return The generated ConfigMap.\n      */\n-    public ConfigMap generateMetricsAndLogConfigMap(ConfigMap externalConfigMap) {\n+    public ConfigMap generateMetricsAndLogConfigMap(ConfigMap externalLoggingConfigMap, ConfigMap externalMetricsConfigMap) {\n         Map<String, String> data = new HashMap<>(2);\n-        data.put(getAncillaryConfigMapKeyLogConfig(), parseLogging(getLogging(), externalConfigMap));\n-        if (isMetricsEnabled() && getMetricsConfig() != null) {\n-            HashMap<String, Object> m = new HashMap<>();\n-            for (Map.Entry<String, Object> entry : getMetricsConfig()) {\n-                m.put(entry.getKey(), entry.getValue());\n+        data.put(getAncillaryConfigMapKeyLogConfig(), parseLogging(getLogging(), externalLoggingConfigMap));\n+        if (getMetricsConfigInCm() != null || (isMetricsEnabled() && getMetricsConfig() != null)) {\n+            String parseResult = parseMetrics(externalMetricsConfigMap);\n+            if (parseResult != null) {\n+                this.setMetricsEnabled(true);\n+                data.put(ANCILLARY_CM_KEY_METRICS, parseResult);\n             }\n-            data.put(ANCILLARY_CM_KEY_METRICS, new JsonObject(m).toString());\n         }\n-\n         return createConfigMap(ancillaryConfigMapName, data);\n     }\n \n+    protected String parseMetrics(ConfigMap externalCm) {\n+        if (metricsConfigInCm != null) {\n+            if (metricsConfigInCm instanceof JmxPrometheusExporterMetrics) {\n+                if (externalCm == null) {\n+                    log.warn(\"ConfigMap {} does not exist. Metrics disabled.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2ODQ2Nw==", "bodyText": "Same as above.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522868467", "createdAt": "2020-11-13T10:41:27Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java", "diffHunk": "@@ -513,23 +516,54 @@ protected String maybeAddMonitorIntervalToExternalLogging(String data) {\n     /**\n      * Generates a metrics and logging ConfigMap according to configured defaults.\n      *\n-     * @param externalConfigMap The ConfigMap used if Logging is an instance of ExternalLogging\n+     * @param externalLoggingConfigMap The ConfigMap used if Logging is an instance of ExternalLogging\n+     * @param externalMetricsConfigMap The ConfigMap used if Metrics is an instance of ExternalMetrics\n      * @return The generated ConfigMap.\n      */\n-    public ConfigMap generateMetricsAndLogConfigMap(ConfigMap externalConfigMap) {\n+    public ConfigMap generateMetricsAndLogConfigMap(ConfigMap externalLoggingConfigMap, ConfigMap externalMetricsConfigMap) {\n         Map<String, String> data = new HashMap<>(2);\n-        data.put(getAncillaryConfigMapKeyLogConfig(), parseLogging(getLogging(), externalConfigMap));\n-        if (isMetricsEnabled() && getMetricsConfig() != null) {\n-            HashMap<String, Object> m = new HashMap<>();\n-            for (Map.Entry<String, Object> entry : getMetricsConfig()) {\n-                m.put(entry.getKey(), entry.getValue());\n+        data.put(getAncillaryConfigMapKeyLogConfig(), parseLogging(getLogging(), externalLoggingConfigMap));\n+        if (getMetricsConfigInCm() != null || (isMetricsEnabled() && getMetricsConfig() != null)) {\n+            String parseResult = parseMetrics(externalMetricsConfigMap);\n+            if (parseResult != null) {\n+                this.setMetricsEnabled(true);\n+                data.put(ANCILLARY_CM_KEY_METRICS, parseResult);\n             }\n-            data.put(ANCILLARY_CM_KEY_METRICS, new JsonObject(m).toString());\n         }\n-\n         return createConfigMap(ancillaryConfigMapName, data);\n     }\n \n+    protected String parseMetrics(ConfigMap externalCm) {\n+        if (metricsConfigInCm != null) {\n+            if (metricsConfigInCm instanceof JmxPrometheusExporterMetrics) {\n+                if (externalCm == null) {\n+                    log.warn(\"ConfigMap {} does not exist. Metrics disabled.\",\n+                            ((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getName());\n+                } else {\n+                    String data = externalCm.getData().get(((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getKey());\n+                    if (data == null) {\n+                        log.warn(\"ConfigMap {} does not contain specified key {}. Metrics disabled.\", ((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getName(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2ODYyMg==", "bodyText": "Same as above.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522868622", "createdAt": "2020-11-13T10:41:43Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java", "diffHunk": "@@ -513,23 +516,54 @@ protected String maybeAddMonitorIntervalToExternalLogging(String data) {\n     /**\n      * Generates a metrics and logging ConfigMap according to configured defaults.\n      *\n-     * @param externalConfigMap The ConfigMap used if Logging is an instance of ExternalLogging\n+     * @param externalLoggingConfigMap The ConfigMap used if Logging is an instance of ExternalLogging\n+     * @param externalMetricsConfigMap The ConfigMap used if Metrics is an instance of ExternalMetrics\n      * @return The generated ConfigMap.\n      */\n-    public ConfigMap generateMetricsAndLogConfigMap(ConfigMap externalConfigMap) {\n+    public ConfigMap generateMetricsAndLogConfigMap(ConfigMap externalLoggingConfigMap, ConfigMap externalMetricsConfigMap) {\n         Map<String, String> data = new HashMap<>(2);\n-        data.put(getAncillaryConfigMapKeyLogConfig(), parseLogging(getLogging(), externalConfigMap));\n-        if (isMetricsEnabled() && getMetricsConfig() != null) {\n-            HashMap<String, Object> m = new HashMap<>();\n-            for (Map.Entry<String, Object> entry : getMetricsConfig()) {\n-                m.put(entry.getKey(), entry.getValue());\n+        data.put(getAncillaryConfigMapKeyLogConfig(), parseLogging(getLogging(), externalLoggingConfigMap));\n+        if (getMetricsConfigInCm() != null || (isMetricsEnabled() && getMetricsConfig() != null)) {\n+            String parseResult = parseMetrics(externalMetricsConfigMap);\n+            if (parseResult != null) {\n+                this.setMetricsEnabled(true);\n+                data.put(ANCILLARY_CM_KEY_METRICS, parseResult);\n             }\n-            data.put(ANCILLARY_CM_KEY_METRICS, new JsonObject(m).toString());\n         }\n-\n         return createConfigMap(ancillaryConfigMapName, data);\n     }\n \n+    protected String parseMetrics(ConfigMap externalCm) {\n+        if (metricsConfigInCm != null) {\n+            if (metricsConfigInCm instanceof JmxPrometheusExporterMetrics) {\n+                if (externalCm == null) {\n+                    log.warn(\"ConfigMap {} does not exist. Metrics disabled.\",\n+                            ((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getName());\n+                } else {\n+                    String data = externalCm.getData().get(((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getKey());\n+                    if (data == null) {\n+                        log.warn(\"ConfigMap {} does not contain specified key {}. Metrics disabled.\", ((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getName(),\n+                                ((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getKey());\n+                    } else {\n+                        return data;\n+                    }\n+                }\n+            } else {\n+                log.warn(\"Unknown type of metrics {}\", metricsConfigInCm.getClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2ODk0NA==", "bodyText": "Any reason why not just use else if (isMetricsEnabled() && getMetricsConfig() != null)?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522868944", "createdAt": "2020-11-13T10:42:25Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java", "diffHunk": "@@ -513,23 +516,54 @@ protected String maybeAddMonitorIntervalToExternalLogging(String data) {\n     /**\n      * Generates a metrics and logging ConfigMap according to configured defaults.\n      *\n-     * @param externalConfigMap The ConfigMap used if Logging is an instance of ExternalLogging\n+     * @param externalLoggingConfigMap The ConfigMap used if Logging is an instance of ExternalLogging\n+     * @param externalMetricsConfigMap The ConfigMap used if Metrics is an instance of ExternalMetrics\n      * @return The generated ConfigMap.\n      */\n-    public ConfigMap generateMetricsAndLogConfigMap(ConfigMap externalConfigMap) {\n+    public ConfigMap generateMetricsAndLogConfigMap(ConfigMap externalLoggingConfigMap, ConfigMap externalMetricsConfigMap) {\n         Map<String, String> data = new HashMap<>(2);\n-        data.put(getAncillaryConfigMapKeyLogConfig(), parseLogging(getLogging(), externalConfigMap));\n-        if (isMetricsEnabled() && getMetricsConfig() != null) {\n-            HashMap<String, Object> m = new HashMap<>();\n-            for (Map.Entry<String, Object> entry : getMetricsConfig()) {\n-                m.put(entry.getKey(), entry.getValue());\n+        data.put(getAncillaryConfigMapKeyLogConfig(), parseLogging(getLogging(), externalLoggingConfigMap));\n+        if (getMetricsConfigInCm() != null || (isMetricsEnabled() && getMetricsConfig() != null)) {\n+            String parseResult = parseMetrics(externalMetricsConfigMap);\n+            if (parseResult != null) {\n+                this.setMetricsEnabled(true);\n+                data.put(ANCILLARY_CM_KEY_METRICS, parseResult);\n             }\n-            data.put(ANCILLARY_CM_KEY_METRICS, new JsonObject(m).toString());\n         }\n-\n         return createConfigMap(ancillaryConfigMapName, data);\n     }\n \n+    protected String parseMetrics(ConfigMap externalCm) {\n+        if (metricsConfigInCm != null) {\n+            if (metricsConfigInCm instanceof JmxPrometheusExporterMetrics) {\n+                if (externalCm == null) {\n+                    log.warn(\"ConfigMap {} does not exist. Metrics disabled.\",\n+                            ((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getName());\n+                } else {\n+                    String data = externalCm.getData().get(((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getKey());\n+                    if (data == null) {\n+                        log.warn(\"ConfigMap {} does not contain specified key {}. Metrics disabled.\", ((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getName(),\n+                                ((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getKey());\n+                    } else {\n+                        return data;\n+                    }\n+                }\n+            } else {\n+                log.warn(\"Unknown type of metrics {}\", metricsConfigInCm.getClass());\n+            }\n+        } else {\n+            if (isMetricsEnabled() && getMetricsConfig() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5Mzc0NQ==", "bodyText": "Any reason to use ArrayList for the type and not just List<Future>?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522893745", "createdAt": "2020-11-13T11:31:11Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -1374,14 +1375,25 @@ protected CompositeFuture adminClientSecrets() {\n                             zkCluster.getConfiguration().setConfigOption(\"ssl.enabledProtocols\", \"TLSv1.2,TLSv1.1,TLSv1\");\n                         }\n \n-                        if (zkCluster.getLogging() instanceof  ExternalLogging) {\n-                            return configMapOperations.getAsync(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) zkCluster.getLogging()).getName());\n+                        ArrayList<Future> configMaps = new ArrayList<>(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5NDUxNA==", "bodyText": "Please use getAsync().", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522894514", "createdAt": "2020-11-13T11:32:50Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -2401,12 +2413,19 @@ String getCertificateThumbprint(Secret certSecret, CertAndKeySecretSource custom\n \n         ConfigMap getKafkaAncillaryCm()    {\n             ConfigMap loggingCm = null;\n+            ConfigMap metricsCm = null;\n \n             if (kafkaCluster.getLogging() instanceof ExternalLogging) {\n                 loggingCm = configMapOperations.get(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) kafkaCluster.getLogging()).getName());\n             }\n \n-            ConfigMap brokerCm = kafkaCluster.generateAncillaryConfigMap(loggingCm, kafkaAdvertisedHostnames, kafkaAdvertisedPorts);\n+            if (kafkaCluster.isMetricsConfigured()) {\n+                if (kafkaCluster.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n+                    metricsCm = configMapOperations.get(kafkaAssembly.getMetadata().getNamespace(), ((JmxPrometheusExporterMetrics) (kafkaCluster.getMetricsConfigInCm())).getValueFrom().getConfigMapKeyRef().getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5NTUyMA==", "bodyText": "Wait ... TO and UO do not have any metrics configurations. So why do we need these changes?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522895520", "createdAt": "2020-11-13T11:35:04Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -2981,33 +3000,55 @@ StatefulSet getKafkaStatefulSet()   {\n                 EntityTopicOperator topicOperator = entityOperator.getTopicOperator();\n                 EntityUserOperator userOperator = entityOperator.getUserOperator();\n \n-                Future<ConfigMap> futToConfigMap;\n-\n+                Future<ConfigMap> futToLogConfigMap;\n                 if (topicOperator != null && topicOperator.getLogging() instanceof ExternalLogging)  {\n-                    futToConfigMap = configMapOperations.getAsync(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) topicOperator.getLogging()).getName());\n+                    futToLogConfigMap = configMapOperations.getAsync(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) topicOperator.getLogging()).getName());\n                 } else {\n-                    futToConfigMap = Future.succeededFuture(null);\n+                    futToLogConfigMap = Future.succeededFuture(null);\n                 }\n \n-                Future<ConfigMap> futUoConfigMap;\n+                Future<ConfigMap> futToMetricsConfigMap;\n+                if (topicOperator != null && topicOperator.isMetricsConfigured()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5NTY4MA==", "bodyText": "Same as above.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522895680", "createdAt": "2020-11-13T11:35:26Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -2981,33 +3000,55 @@ StatefulSet getKafkaStatefulSet()   {\n                 EntityTopicOperator topicOperator = entityOperator.getTopicOperator();\n                 EntityUserOperator userOperator = entityOperator.getUserOperator();\n \n-                Future<ConfigMap> futToConfigMap;\n-\n+                Future<ConfigMap> futToLogConfigMap;\n                 if (topicOperator != null && topicOperator.getLogging() instanceof ExternalLogging)  {\n-                    futToConfigMap = configMapOperations.getAsync(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) topicOperator.getLogging()).getName());\n+                    futToLogConfigMap = configMapOperations.getAsync(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) topicOperator.getLogging()).getName());\n                 } else {\n-                    futToConfigMap = Future.succeededFuture(null);\n+                    futToLogConfigMap = Future.succeededFuture(null);\n                 }\n \n-                Future<ConfigMap> futUoConfigMap;\n+                Future<ConfigMap> futToMetricsConfigMap;\n+                if (topicOperator != null && topicOperator.isMetricsConfigured()) {\n+                    if (topicOperator.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n+                        futToMetricsConfigMap = configMapOperations.getAsync(kafkaAssembly.getMetadata().getNamespace(), ((JmxPrometheusExporterMetrics) (topicOperator.getMetricsConfigInCm())).getValueFrom().getConfigMapKeyRef().getName());\n+                    } else {\n+                        return Future.failedFuture(\"Unknown metrics type \" + topicOperator.getMetricsConfigInCm().getType());\n+                    }\n+                } else {\n+                    futToMetricsConfigMap = Future.succeededFuture(null);\n+                }\n \n+                Future<ConfigMap> futUoLogConfigMap;\n                 if (userOperator != null && userOperator.getLogging() instanceof ExternalLogging)  {\n-                    futUoConfigMap = configMapOperations.getAsync(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) userOperator.getLogging()).getName());\n+                    futUoLogConfigMap = configMapOperations.getAsync(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) userOperator.getLogging()).getName());\n+                } else {\n+                    futUoLogConfigMap = Future.succeededFuture(null);\n+                }\n+\n+                Future<ConfigMap> futUoMetricsConfigMap;\n+                if (userOperator != null && userOperator.isMetricsConfigured()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5NjM0OQ==", "bodyText": "Please use getAsync() ... ideally also for the logging CM (I know that that was there already before, sorry).", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522896349", "createdAt": "2020-11-13T11:36:58Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -3150,10 +3191,21 @@ private boolean isPodUpToDate(StatefulSet sts, Pod pod) {\n         private final Future<ReconciliationState> getCruiseControlDescription() {\n             CruiseControl cruiseControl = CruiseControl.fromCrd(kafkaAssembly, versions);\n             if (cruiseControl != null) {\n-                ConfigMap logAndMetricsConfigMap = cruiseControl.generateMetricsAndLogConfigMap(\n-                        cruiseControl.getLogging() instanceof ExternalLogging ?\n-                                configMapOperations.get(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) cruiseControl.getLogging()).getName()) :\n-                                null);\n+                ConfigMap loggingCm = cruiseControl.getLogging() instanceof ExternalLogging ?\n+                        configMapOperations.get(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) cruiseControl.getLogging()).getName()) :\n+                        null;\n+\n+                ConfigMap metricsCm = null;\n+                if (cruiseControl.isMetricsConfigured()) {\n+                    if (cruiseControl.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n+                        metricsCm = configMapOperations.get(kafkaAssembly.getMetadata().getNamespace(), ((JmxPrometheusExporterMetrics) cruiseControl.getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5NjU1Nw==", "bodyText": "Again, this should at least add warning condition or maybe fail the reocnciliation.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522896557", "createdAt": "2020-11-13T11:37:24Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -3150,10 +3191,21 @@ private boolean isPodUpToDate(StatefulSet sts, Pod pod) {\n         private final Future<ReconciliationState> getCruiseControlDescription() {\n             CruiseControl cruiseControl = CruiseControl.fromCrd(kafkaAssembly, versions);\n             if (cruiseControl != null) {\n-                ConfigMap logAndMetricsConfigMap = cruiseControl.generateMetricsAndLogConfigMap(\n-                        cruiseControl.getLogging() instanceof ExternalLogging ?\n-                                configMapOperations.get(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) cruiseControl.getLogging()).getName()) :\n-                                null);\n+                ConfigMap loggingCm = cruiseControl.getLogging() instanceof ExternalLogging ?\n+                        configMapOperations.get(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) cruiseControl.getLogging()).getName()) :\n+                        null;\n+\n+                ConfigMap metricsCm = null;\n+                if (cruiseControl.isMetricsConfigured()) {\n+                    if (cruiseControl.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n+                        metricsCm = configMapOperations.get(kafkaAssembly.getMetadata().getNamespace(), ((JmxPrometheusExporterMetrics) cruiseControl.getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName());\n+                    } else {\n+                        log.warn(\"Unknown metrics type {}\", cruiseControl.getMetricsConfigInCm().getType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5Njg2MQ==", "bodyText": "Should we handle the else as in other places you use this?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522896861", "createdAt": "2020-11-13T11:38:05Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -2401,12 +2413,19 @@ String getCertificateThumbprint(Secret certSecret, CertAndKeySecretSource custom\n \n         ConfigMap getKafkaAncillaryCm()    {\n             ConfigMap loggingCm = null;\n+            ConfigMap metricsCm = null;\n \n             if (kafkaCluster.getLogging() instanceof ExternalLogging) {\n                 loggingCm = configMapOperations.get(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) kafkaCluster.getLogging()).getName());\n             }\n \n-            ConfigMap brokerCm = kafkaCluster.generateAncillaryConfigMap(loggingCm, kafkaAdvertisedHostnames, kafkaAdvertisedPorts);\n+            if (kafkaCluster.isMetricsConfigured()) {\n+                if (kafkaCluster.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n+                    metricsCm = configMapOperations.get(kafkaAssembly.getMetadata().getNamespace(), ((JmxPrometheusExporterMetrics) (kafkaCluster.getMetricsConfigInCm())).getValueFrom().getConfigMapKeyRef().getName());\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5NzEwNA==", "bodyText": "Should we handle the else as in other places you use this?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522897104", "createdAt": "2020-11-13T11:38:43Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -1374,14 +1375,25 @@ protected CompositeFuture adminClientSecrets() {\n                             zkCluster.getConfiguration().setConfigOption(\"ssl.enabledProtocols\", \"TLSv1.2,TLSv1.1,TLSv1\");\n                         }\n \n-                        if (zkCluster.getLogging() instanceof  ExternalLogging) {\n-                            return configMapOperations.getAsync(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) zkCluster.getLogging()).getName());\n+                        ArrayList<Future> configMaps = new ArrayList<>(2);\n+                        if (zkCluster.getLogging() instanceof ExternalLogging) {\n+                            configMaps.add(configMapOperations.getAsync(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) zkCluster.getLogging()).getName()));\n                         } else {\n-                            return Future.succeededFuture(null);\n+                            configMaps.add(Future.succeededFuture(null));\n                         }\n-                    }).compose(cm -> {\n-                        ConfigMap logAndMetricsConfigMap = zkCluster.generateConfigurationConfigMap(cm);\n-                        this.zkMetricsAndLogsConfigMap = zkCluster.generateConfigurationConfigMap(logAndMetricsConfigMap);\n+\n+                        if (zkCluster.isMetricsConfigured()) {\n+                            if (zkCluster.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n+                                configMaps.add(configMapOperations.getAsync(kafkaAssembly.getMetadata().getNamespace(), ((JmxPrometheusExporterMetrics) (zkCluster.getMetricsConfigInCm())).getValueFrom().getConfigMapKeyRef().getName()));\n+                            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5NzU3Mg==", "bodyText": "I didn't saw you changing the Bridge API - which I actually raised as a comment ... so is this really needed?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522897572", "createdAt": "2020-11-13T11:39:40Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperator.java", "diffHunk": "@@ -78,9 +79,20 @@ public KafkaBridgeAssemblyOperator(Vertx vertx, PlatformFeaturesAvailability pfa\n             return Future.failedFuture(new ReconciliationException(kafkaBridgeStatus, e));\n         }\n \n-        ConfigMap logAndMetricsConfigMap = bridge.generateMetricsAndLogConfigMap(bridge.getLogging() instanceof ExternalLogging ?\n+        ConfigMap loggingCm = bridge.getLogging() instanceof ExternalLogging ?\n                 configMapOperations.get(namespace, ((ExternalLogging) bridge.getLogging()).getName()) :\n-                null);\n+                null;\n+\n+        ConfigMap metricsCm = null;\n+        if (bridge.isMetricsConfigured()) {\n+            if (bridge.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n+                metricsCm = configMapOperations.get(namespace, ((JmxPrometheusExporterMetrics) bridge.getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName());\n+            } else {\n+                log.warn(\"Unknown metrics type {}\", bridge.getMetricsConfigInCm().getType());\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5Nzc2Mg==", "bodyText": "getAsync() please.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522897762", "createdAt": "2020-11-13T11:40:05Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectAssemblyOperator.java", "diffHunk": "@@ -102,9 +103,20 @@ public KafkaConnectAssemblyOperator(Vertx vertx, PlatformFeaturesAvailability pf\n         Promise<KafkaConnectStatus> createOrUpdatePromise = Promise.promise();\n         String namespace = reconciliation.namespace();\n \n-        ConfigMap logAndMetricsConfigMap = connect.generateMetricsAndLogConfigMap(connect.getLogging() instanceof ExternalLogging ?\n+        ConfigMap loggingCm = connect.getLogging() instanceof ExternalLogging ?\n                 configMapOperations.get(namespace, ((ExternalLogging) connect.getLogging()).getName()) :\n-                null);\n+                null;\n+\n+        ConfigMap metricsCm = null;\n+        if (connect.isMetricsConfigured()) {\n+            if (connect.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n+                metricsCm = configMapOperations.get(namespace, ((JmxPrometheusExporterMetrics) connect.getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5Nzg0MQ==", "bodyText": "Warning condition or failure?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522897841", "createdAt": "2020-11-13T11:40:16Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectAssemblyOperator.java", "diffHunk": "@@ -102,9 +103,20 @@ public KafkaConnectAssemblyOperator(Vertx vertx, PlatformFeaturesAvailability pf\n         Promise<KafkaConnectStatus> createOrUpdatePromise = Promise.promise();\n         String namespace = reconciliation.namespace();\n \n-        ConfigMap logAndMetricsConfigMap = connect.generateMetricsAndLogConfigMap(connect.getLogging() instanceof ExternalLogging ?\n+        ConfigMap loggingCm = connect.getLogging() instanceof ExternalLogging ?\n                 configMapOperations.get(namespace, ((ExternalLogging) connect.getLogging()).getName()) :\n-                null);\n+                null;\n+\n+        ConfigMap metricsCm = null;\n+        if (connect.isMetricsConfigured()) {\n+            if (connect.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n+                metricsCm = configMapOperations.get(namespace, ((JmxPrometheusExporterMetrics) connect.getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName());\n+            } else {\n+                log.warn(\"Unknown metrics type {}\", connect.getMetricsConfigInCm().getType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5ODA2MA==", "bodyText": "Same as above.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522898060", "createdAt": "2020-11-13T11:40:34Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectS2IAssemblyOperator.java", "diffHunk": "@@ -111,9 +112,20 @@ public KafkaConnectS2IAssemblyOperator(Vertx vertx, PlatformFeaturesAvailability\n         String namespace = reconciliation.namespace();\n \n         connect.generateBuildConfig();\n-        ConfigMap logAndMetricsConfigMap = connect.generateMetricsAndLogConfigMap(connect.getLogging() instanceof ExternalLogging ?\n+\n+        ConfigMap loggingCm = connect.getLogging() instanceof ExternalLogging ?\n                 configMapOperations.get(namespace, ((ExternalLogging) connect.getLogging()).getName()) :\n-                null);\n+                null;\n+        ConfigMap metricsCm = null;\n+        if (connect.isMetricsConfigured()) {\n+            if (connect.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n+                metricsCm = configMapOperations.get(namespace, ((JmxPrometheusExporterMetrics) connect.getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName());\n+            } else {\n+                log.warn(\"Unknown metrics type {}\", connect.getMetricsConfigInCm().getType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5ODE1MA==", "bodyText": "Same as above.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522898150", "createdAt": "2020-11-13T11:40:46Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaMirrorMaker2AssemblyOperator.java", "diffHunk": "@@ -133,9 +134,19 @@ public KafkaMirrorMaker2AssemblyOperator(Vertx vertx, PlatformFeaturesAvailabili\n         Promise<KafkaMirrorMaker2Status> createOrUpdatePromise = Promise.promise();\n         String namespace = reconciliation.namespace();\n \n-        ConfigMap logAndMetricsConfigMap = mirrorMaker2Cluster.generateMetricsAndLogConfigMap(mirrorMaker2Cluster.getLogging() instanceof ExternalLogging ?\n+        ConfigMap loggingCm = mirrorMaker2Cluster.getLogging() instanceof ExternalLogging ?\n                 configMapOperations.get(namespace, ((ExternalLogging) mirrorMaker2Cluster.getLogging()).getName()) :\n-                null);\n+                null;\n+        ConfigMap metricsCm = null;\n+        if (mirrorMaker2Cluster.isMetricsConfigured()) {\n+            if (mirrorMaker2Cluster.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n+                metricsCm = configMapOperations.get(namespace, ((JmxPrometheusExporterMetrics) mirrorMaker2Cluster.getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName());\n+            } else {\n+                log.warn(\"Unknown metrics type {}\", mirrorMaker2Cluster.getMetricsConfigInCm().getType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5ODI0OA==", "bodyText": "Same as above.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522898248", "createdAt": "2020-11-13T11:41:00Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaMirrorMakerAssemblyOperator.java", "diffHunk": "@@ -80,9 +81,18 @@ public KafkaMirrorMakerAssemblyOperator(Vertx vertx, PlatformFeaturesAvailabilit\n             return Future.failedFuture(new ReconciliationException(kafkaMirrorMakerStatus, e));\n         }\n \n-        ConfigMap logAndMetricsConfigMap = mirror.generateMetricsAndLogConfigMap(mirror.getLogging() instanceof ExternalLogging ?\n+        ConfigMap loggingCm = mirror.getLogging() instanceof ExternalLogging ?\n                 configMapOperations.get(namespace, ((ExternalLogging) mirror.getLogging()).getName()) :\n-                null);\n+                null;\n+        ConfigMap metricsCm = null;\n+        if (mirror.isMetricsConfigured()) {\n+            if (mirror.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n+                metricsCm = configMapOperations.get(namespace, ((JmxPrometheusExporterMetrics) mirror.getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName());\n+            } else {\n+                log.warn(\"Unknown metrics type {}\", mirror.getMetricsConfigInCm().getType());\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5ODgzMQ==", "bodyText": "Maybe you can rename the metricsCm to something else? It suggests to be config map which it is not.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522898831", "createdAt": "2020-11-13T11:42:18Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/ResourceUtils.java", "diffHunk": "@@ -179,17 +180,20 @@ public static Kafka createKafka(String namespace, String name, int replicas,\n     public static Kafka createKafka(String namespace, String name, int replicas,\n                                     String image, int healthDelay, int healthTimeout,\n                                     Map<String, Object> metricsCm,\n+                                    MetricsConfig metricsConfig,\n                                     Map<String, Object> kafkaConfigurationJson,\n                                     Map<String, Object> zooConfigurationJson) {\n         return new KafkaBuilder(createKafka(namespace, name, replicas, image, healthDelay, healthTimeout))\n                 .editSpec()\n                     .editKafka()\n                         .withMetrics(metricsCm)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkwNDU1NQ==", "bodyText": "I do not think this should be here. This is a class containing tests for AbstractModel. This is not an abstract class where you put some shared methods used elsewhere. You should put this probably into some utils class.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522904555", "createdAt": "2020-11-13T11:55:21Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/model/AbstractModelTest.java", "diffHunk": "@@ -214,4 +219,23 @@ public void testDetermineImagePullPolicy()  {\n         assertThat(am.determineImagePullPolicy(null, \"docker.io/repo/image:not-so-latest\"), is(ImagePullPolicy.IFNOTPRESENT.toString()));\n         assertThat(am.determineImagePullPolicy(null, \"docker.io/repo/image:latest-kafka-2.6.0\"), is(ImagePullPolicy.ALWAYS.toString()));\n     }\n+\n+    public static JmxPrometheusExporterMetrics getJmxPrometheusExporterMetrics(String key, String name) {\n+        JmxPrometheusExporterMetrics metricsConfig = new JmxPrometheusExporterMetricsBuilder()\n+                .withNewValueFrom()\n+                    .withNewConfigMapKeyRef(key, name, true)\n+                .endValueFrom()\n+                .build();\n+        return metricsConfig;\n+    }\n+\n+    public static ConfigMap getJmxMetricsCm(String data, String metricsCMName) {\n+        ConfigMap metricsCM = new ConfigMapBuilder()\n+                .withNewMetadata()\n+                    .withName(metricsCMName)\n+                .endMetadata()\n+                .withData(singletonMap(AbstractModel.ANCILLARY_CM_KEY_METRICS, data))\n+                .build();\n+        return metricsCM;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkwNzM5Nw==", "bodyText": "Why are you adding this? I do not think this should be in the examples - maybe you didn't planned to commit this?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522907397", "createdAt": "2020-11-13T12:01:39Z", "author": {"login": "scholzj"}, "path": "examples/kafka/kafka-ephemeral.yaml", "diffHunk": "@@ -22,6 +22,9 @@ spec:\n       log.message.format.version: \"2.6\"\n     storage:\n       type: ephemeral\n+    logging:\n+      type: external\n+      name: my-external-config-map  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkwNzY0Mw==", "bodyText": "Is it YAML or JSON? Looks like JSON to me, so the file should ba probably named accordingly?\nAlso, does this mean users will have to convert the metrics configuration they have instead of just copy-pasting it? That would be rather inconvenient \ud83e\udd14\nIn any case you should make the example file nicer and prettyprint the json to make it easily readable and maybe use something like multiline string.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522907643", "createdAt": "2020-11-13T12:02:14Z", "author": {"login": "scholzj"}, "path": "examples/metrics/kafka-connect-metrics.yaml", "diffHunk": "@@ -8,113 +8,40 @@ spec:\n   version: 2.6.0\n   replicas: 1\n   bootstrapServers: my-cluster-kafka-bootstrap:9092\n-  metrics:\n-    # Inspired by kafka-connect rules\n-    # https://github.com/prometheus/jmx_exporter/blob/master/example_configs/kafka-connect.yml\n-    lowercaseOutputName: true\n-    lowercaseOutputLabelNames: true\n-    rules:\n-      #kafka.connect:type=app-info,client-id=\"{clientid}\"\n-      #kafka.consumer:type=app-info,client-id=\"{clientid}\"\n-      #kafka.producer:type=app-info,client-id=\"{clientid}\"\n-      - pattern: 'kafka.(.+)<type=app-info, client-id=(.+)><>start-time-ms'\n-        name: kafka_$1_start_time_seconds\n-        labels:\n-          clientId: \"$2\"\n-        help: \"Kafka $1 JMX metric start time seconds\"\n-        type: GAUGE\n-        valueFactor: 0.001\n-      - pattern: 'kafka.(.+)<type=app-info, client-id=(.+)><>(commit-id|version): (.+)'\n-        name: kafka_$1_$3_info\n-        value: 1\n-        labels:\n-          clientId: \"$2\"\n-          $3: \"$4\"\n-        help: \"Kafka $1 JMX metric info version and commit-id\"\n-        type: GAUGE\n-\n-      #kafka.producer:type=producer-topic-metrics,client-id=\"{clientid}\",topic=\"{topic}\"\", partition=\"{partition}\"\n-      #kafka.consumer:type=consumer-fetch-manager-metrics,client-id=\"{clientid}\",topic=\"{topic}\"\", partition=\"{partition}\"\n-      - pattern: kafka.(.+)<type=(.+)-metrics, client-id=(.+), topic=(.+), partition=(.+)><>(.+-total|compression-rate|.+-avg|.+-replica|.+-lag|.+-lead)\n-        name: kafka_$2_$6\n-        labels:\n-          clientId: \"$3\"\n-          topic: \"$4\"\n-          partition: \"$5\"\n-        help: \"Kafka $1 JMX metric type $2\"\n-        type: GAUGE\n-\n-      #kafka.producer:type=producer-topic-metrics,client-id=\"{clientid}\",topic=\"{topic}\"\n-      #kafka.consumer:type=consumer-fetch-manager-metrics,client-id=\"{clientid}\",topic=\"{topic}\"\", partition=\"{partition}\"\n-      - pattern: kafka.(.+)<type=(.+)-metrics, client-id=(.+), topic=(.+)><>(.+-total|compression-rate|.+-avg)\n-        name: kafka_$2_$5\n-        labels:\n-          clientId: \"$3\"\n-          topic: \"$4\"\n-        help: \"Kafka $1 JMX metric type $2\"\n-        type: GAUGE\n-\n-      #kafka.connect:type=connect-node-metrics,client-id=\"{clientid}\",node-id=\"{nodeid}\"\n-      #kafka.consumer:type=consumer-node-metrics,client-id=consumer-1,node-id=\"{nodeid}\"\n-      - pattern: kafka.(.+)<type=(.+)-metrics, client-id=(.+), node-id=(.+)><>(.+-total|.+-avg)\n-        name: kafka_$2_$5\n-        labels:\n-          clientId: \"$3\"\n-          nodeId: \"$4\"\n-        help: \"Kafka $1 JMX metric type $2\"\n-        type: UNTYPED\n-\n-      #kafka.connect:type=kafka-metrics-count,client-id=\"{clientid}\"\n-      #kafka.consumer:type=consumer-fetch-manager-metrics,client-id=\"{clientid}\"\n-      #kafka.consumer:type=consumer-coordinator-metrics,client-id=\"{clientid}\"\n-      #kafka.consumer:type=consumer-metrics,client-id=\"{clientid}\"\n-      - pattern: kafka.(.+)<type=(.+)-metrics, client-id=(.*)><>(.+-total|.+-avg|.+-bytes|.+-count|.+-ratio|.+-age|.+-flight|.+-threads|.+-connectors|.+-tasks|.+-ago)\n-        name: kafka_$2_$4\n-        labels:\n-          clientId: \"$3\"\n-        help: \"Kafka $1 JMX metric type $2\"\n-        type: GAUGE\n-\n-      #kafka.connect:type=connector-task-metrics,connector=\"{connector}\",task=\"{task}<> status\"\n-      - pattern: 'kafka.connect<type=connector-task-metrics, connector=(.+), task=(.+)><>status: ([a-z-]+)'\n-        name: kafka_connect_connector_status\n-        value: 1\n-        labels:\n-          connector: \"$1\"\n-          task: \"$2\"\n-          status: \"$3\"\n-        help: \"Kafka Connect JMX Connector status\"\n-        type: GAUGE\n-\n-      #kafka.connect:type=task-error-metrics,connector=\"{connector}\",task=\"{task}\"\n-      #kafka.connect:type=source-task-metrics,connector=\"{connector}\",task=\"{task}\"\n-      #kafka.connect:type=sink-task-metrics,connector=\"{connector}\",task=\"{task}\"\n-      #kafka.connect:type=connector-task-metrics,connector=\"{connector}\",task=\"{task}\"\n-      - pattern: kafka.connect<type=(.+)-metrics, connector=(.+), task=(.+)><>(.+-total|.+-count|.+-ms|.+-ratio|.+-avg|.+-failures|.+-requests|.+-timestamp|.+-logged|.+-errors|.+-retries|.+-skipped)\n-        name: kafka_connect_$1_$4\n-        labels:\n-          connector: \"$2\"\n-          task: \"$3\"\n-        help: \"Kafka Connect JMX metric type $1\"\n-        type: GAUGE\n-\n-      #kafka.connect:type=connector-metrics,connector=\"{connector}\"\n-      #kafka.connect:type=connect-worker-metrics,connector=\"{connector}\"\n-      - pattern: kafka.connect<type=connect-worker-metrics, connector=(.+)><>([a-z-]+)\n-        name: kafka_connect_worker_$2\n-        labels:\n-          connector: \"$1\"\n-        help: \"Kafka Connect JMX metric $1\"\n-        type: GAUGE\n-\n-      #kafka.connect:type=connect-worker-metrics\n-      - pattern: kafka.connect<type=connect-worker-metrics><>([a-z-]+)\n-        name: kafka_connect_worker_$1\n-        help: \"Kafka Connect JMX metric worker\"\n-        type: GAUGE\n+  metricsConfig:\n+    type: jmxPrometheusExporter\n+    valueFrom:\n+      configMapKeyRef:\n+        name: connect-metrics\n+        key: metrics-config.yml\n+\n+---\n+kind: ConfigMap\n+apiVersion: v1\n+metadata:\n+  name: connect-metrics\n+  labels:\n+    app: strimzi\n+data:\n+  metrics-config.yml: '{\"lowercaseOutputLabelNames\":true,\"lowercaseOutputName\":true,\"rules\":[{\"help\":\"Kafka", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkwOTQ2MQ==", "bodyText": "Same as above.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522909461", "createdAt": "2020-11-13T12:06:11Z", "author": {"login": "scholzj"}, "path": "examples/metrics/kafka-cruise-control-metrics.yaml", "diffHunk": "@@ -30,9 +30,18 @@ spec:\n     topicOperator: {}\n     userOperator: {}\n   cruiseControl:\n-    metrics:\n-      lowercaseOutputName: true\n-      rules:\n-      - pattern: kafka.cruisecontrol<name=(.+)><>(\\w+)\n-        name: kafka_cruisecontrol_$1_$2\n-        type: GAUGE\n+    metricsConfig:\n+      type: jmxPrometheusExporter\n+      valueFrom:\n+        configMapKeyRef:\n+          name: cruise-control-metrics\n+          key: metrics-config.yml\n+---\n+kind: ConfigMap\n+apiVersion: v1\n+metadata:\n+  name: cruise-control-metrics\n+  labels:\n+    app: strimzi\n+data:\n+  metrics-config.yml: '{\"lowercaseOutputName\":true,\"rules\":[{\"name\":\"kafka_cruisecontrol_$1_$2\",\"pattern\":\"kafka.cruisecontrol<name=(.+)><>(\\\\w+)\",\"type\":\"GAUGE\"}]}'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkwOTU2NA==", "bodyText": "Same as above.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522909564", "createdAt": "2020-11-13T12:06:26Z", "author": {"login": "scholzj"}, "path": "examples/metrics/kafka-metrics.yaml", "diffHunk": "@@ -170,41 +51,58 @@ spec:\n       type: persistent-claim\n       size: 100Gi\n       deleteClaim: false\n-    metrics:\n-      # Inspired by Zookeeper rules\n-      # https://github.com/prometheus/jmx_exporter/blob/master/example_configs/zookeeper.yaml\n-      lowercaseOutputName: true\n-      rules:\n-      # replicated Zookeeper\n-      - pattern: \"org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\\\d+)><>(\\\\w+)\"\n-        name: \"zookeeper_$2\"\n-        type: GAUGE\n-      - pattern: \"org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\\\d+), name1=replica.(\\\\d+)><>(\\\\w+)\"\n-        name: \"zookeeper_$3\"\n-        type: GAUGE\n-        labels:\n-          replicaId: \"$2\"\n-      - pattern: \"org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\\\d+), name1=replica.(\\\\d+), name2=(\\\\w+)><>(Packets\\\\w+)\"\n-        name: \"zookeeper_$4\"\n-        type: COUNTER\n-        labels:\n-          replicaId: \"$2\"\n-          memberType: \"$3\"\n-      - pattern: \"org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\\\d+), name1=replica.(\\\\d+), name2=(\\\\w+)><>(\\\\w+)\"\n-        name: \"zookeeper_$4\"\n-        type: GAUGE\n-        labels:\n-          replicaId: \"$2\"\n-          memberType: \"$3\"\n-      - pattern: \"org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\\\d+), name1=replica.(\\\\d+), name2=(\\\\w+), name3=(\\\\w+)><>(\\\\w+)\"\n-        name: \"zookeeper_$4_$5\"\n-        type: GAUGE\n-        labels:\n-          replicaId: \"$2\"\n-          memberType: \"$3\"\n+    metricsConfig:\n+      type: jmxPrometheusExporter\n+      valueFrom:\n+        configMapKeyRef:\n+          name: zookeeper-metrics\n+          key: metrics-config.yml\n   entityOperator:\n     topicOperator: {}\n     userOperator: {}\n   kafkaExporter:\n     topicRegex: \".*\"\n     groupRegex: \".*\"\n+---\n+kind: ConfigMap\n+apiVersion: v1\n+metadata:\n+  name: kafka-metrics\n+  labels:\n+    app: strimzi\n+data:\n+  metrics-config.yml: '{\"lowercaseOutputName\":true,\"rules\":[{\"labels\":{\"clientId\":\"$3\",\"partition\":\"$5\",\"topic\":\"$4\"},\"name\":\"kafka_server_$1_$2\",\"pattern\":\"kafka.server<type=(.+),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkwOTcyMg==", "bodyText": "Same as above. Plus maybe you could use single config map for both files?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522909722", "createdAt": "2020-11-13T12:06:51Z", "author": {"login": "scholzj"}, "path": "examples/metrics/kafka-metrics.yaml", "diffHunk": "@@ -170,41 +51,58 @@ spec:\n       type: persistent-claim\n       size: 100Gi\n       deleteClaim: false\n-    metrics:\n-      # Inspired by Zookeeper rules\n-      # https://github.com/prometheus/jmx_exporter/blob/master/example_configs/zookeeper.yaml\n-      lowercaseOutputName: true\n-      rules:\n-      # replicated Zookeeper\n-      - pattern: \"org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\\\d+)><>(\\\\w+)\"\n-        name: \"zookeeper_$2\"\n-        type: GAUGE\n-      - pattern: \"org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\\\d+), name1=replica.(\\\\d+)><>(\\\\w+)\"\n-        name: \"zookeeper_$3\"\n-        type: GAUGE\n-        labels:\n-          replicaId: \"$2\"\n-      - pattern: \"org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\\\d+), name1=replica.(\\\\d+), name2=(\\\\w+)><>(Packets\\\\w+)\"\n-        name: \"zookeeper_$4\"\n-        type: COUNTER\n-        labels:\n-          replicaId: \"$2\"\n-          memberType: \"$3\"\n-      - pattern: \"org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\\\d+), name1=replica.(\\\\d+), name2=(\\\\w+)><>(\\\\w+)\"\n-        name: \"zookeeper_$4\"\n-        type: GAUGE\n-        labels:\n-          replicaId: \"$2\"\n-          memberType: \"$3\"\n-      - pattern: \"org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\\\d+), name1=replica.(\\\\d+), name2=(\\\\w+), name3=(\\\\w+)><>(\\\\w+)\"\n-        name: \"zookeeper_$4_$5\"\n-        type: GAUGE\n-        labels:\n-          replicaId: \"$2\"\n-          memberType: \"$3\"\n+    metricsConfig:\n+      type: jmxPrometheusExporter\n+      valueFrom:\n+        configMapKeyRef:\n+          name: zookeeper-metrics\n+          key: metrics-config.yml\n   entityOperator:\n     topicOperator: {}\n     userOperator: {}\n   kafkaExporter:\n     topicRegex: \".*\"\n     groupRegex: \".*\"\n+---\n+kind: ConfigMap\n+apiVersion: v1\n+metadata:\n+  name: kafka-metrics\n+  labels:\n+    app: strimzi\n+data:\n+  metrics-config.yml: '{\"lowercaseOutputName\":true,\"rules\":[{\"labels\":{\"clientId\":\"$3\",\"partition\":\"$5\",\"topic\":\"$4\"},\"name\":\"kafka_server_$1_$2\",\"pattern\":\"kafka.server<type=(.+),\n+      name=(.+), clientId=(.+), topic=(.+), partition=(.*)><>Value\",\"type\":\"GAUGE\"},{\"labels\":{\"broker\":\"$4:$5\",\"clientId\":\"$3\"},\"name\":\"kafka_server_$1_$2\",\"pattern\":\"kafka.server<type=(.+),\n+      name=(.+), clientId=(.+), brokerHost=(.+), brokerPort=(.+)><>Value\",\"type\":\"GAUGE\"},{\"labels\":{\"cipher\":\"$5\",\"listener\":\"$2\",\"networkProcessor\":\"$3\",\"protocol\":\"$4\"},\"name\":\"kafka_server_$1_connections_tls_info\",\"pattern\":\"kafka.server<type=(.+),\n+      cipher=(.+), protocol=(.+), listener=(.+), networkProcessor=(.+)><>connections\",\"type\":\"GAUGE\"},{\"labels\":{\"clientSoftwareName\":\"$2\",\"clientSoftwareVersion\":\"$3\",\"listener\":\"$4\",\"networkProcessor\":\"$5\"},\"name\":\"kafka_server_$1_connections_software\",\"pattern\":\"kafka.server<type=(.+),\n+      clientSoftwareName=(.+), clientSoftwareVersion=(.+), listener=(.+), networkProcessor=(.+)><>connections\",\"type\":\"GAUGE\"},{\"labels\":{\"listener\":\"$2\",\"networkProcessor\":\"$3\"},\"name\":\"kafka_server_$1_$4\",\"pattern\":\"kafka.server<type=(.+),\n+      listener=(.+), networkProcessor=(.+)><>(.+):\",\"type\":\"GAUGE\"},{\"labels\":{\"listener\":\"$2\",\"networkProcessor\":\"$3\"},\"name\":\"kafka_server_$1_$4\",\"pattern\":\"kafka.server<type=(.+),\n+      listener=(.+), networkProcessor=(.+)><>(.+)\",\"type\":\"GAUGE\"},{\"name\":\"kafka_$1_$2_$3_percent\",\"pattern\":\"kafka.(\\\\w+)<type=(.+),\n+      name=(.+)Percent\\\\w*><>MeanRate\",\"type\":\"GAUGE\"},{\"name\":\"kafka_$1_$2_$3_percent\",\"pattern\":\"kafka.(\\\\w+)<type=(.+),\n+      name=(.+)Percent\\\\w*><>Value\",\"type\":\"GAUGE\"},{\"labels\":{\"$4\":\"$5\"},\"name\":\"kafka_$1_$2_$3_percent\",\"pattern\":\"kafka.(\\\\w+)<type=(.+),\n+      name=(.+)Percent\\\\w*, (.+)=(.+)><>Value\",\"type\":\"GAUGE\"},{\"labels\":{\"$4\":\"$5\",\"$6\":\"$7\"},\"name\":\"kafka_$1_$2_$3_total\",\"pattern\":\"kafka.(\\\\w+)<type=(.+),\n+      name=(.+)PerSec\\\\w*, (.+)=(.+), (.+)=(.+)><>Count\",\"type\":\"COUNTER\"},{\"labels\":{\"$4\":\"$5\"},\"name\":\"kafka_$1_$2_$3_total\",\"pattern\":\"kafka.(\\\\w+)<type=(.+),\n+      name=(.+)PerSec\\\\w*, (.+)=(.+)><>Count\",\"type\":\"COUNTER\"},{\"name\":\"kafka_$1_$2_$3_total\",\"pattern\":\"kafka.(\\\\w+)<type=(.+),\n+      name=(.+)PerSec\\\\w*><>Count\",\"type\":\"COUNTER\"},{\"labels\":{\"$4\":\"$5\",\"$6\":\"$7\"},\"name\":\"kafka_$1_$2_$3\",\"pattern\":\"kafka.(\\\\w+)<type=(.+),\n+      name=(.+), (.+)=(.+), (.+)=(.+)><>Value\",\"type\":\"GAUGE\"},{\"labels\":{\"$4\":\"$5\"},\"name\":\"kafka_$1_$2_$3\",\"pattern\":\"kafka.(\\\\w+)<type=(.+),\n+      name=(.+), (.+)=(.+)><>Value\",\"type\":\"GAUGE\"},{\"name\":\"kafka_$1_$2_$3\",\"pattern\":\"kafka.(\\\\w+)<type=(.+),\n+      name=(.+)><>Value\",\"type\":\"GAUGE\"},{\"labels\":{\"$4\":\"$5\",\"$6\":\"$7\"},\"name\":\"kafka_$1_$2_$3_count\",\"pattern\":\"kafka.(\\\\w+)<type=(.+),\n+      name=(.+), (.+)=(.+), (.+)=(.+)><>Count\",\"type\":\"COUNTER\"},{\"labels\":{\"$4\":\"$5\",\"$6\":\"$7\",\"quantile\":\"0.$8\"},\"name\":\"kafka_$1_$2_$3\",\"pattern\":\"kafka.(\\\\w+)<type=(.+),\n+      name=(.+), (.+)=(.*), (.+)=(.+)><>(\\\\d+)thPercentile\",\"type\":\"GAUGE\"},{\"labels\":{\"$4\":\"$5\"},\"name\":\"kafka_$1_$2_$3_count\",\"pattern\":\"kafka.(\\\\w+)<type=(.+),\n+      name=(.+), (.+)=(.+)><>Count\",\"type\":\"COUNTER\"},{\"labels\":{\"$4\":\"$5\",\"quantile\":\"0.$6\"},\"name\":\"kafka_$1_$2_$3\",\"pattern\":\"kafka.(\\\\w+)<type=(.+),\n+      name=(.+), (.+)=(.*)><>(\\\\d+)thPercentile\",\"type\":\"GAUGE\"},{\"name\":\"kafka_$1_$2_$3_count\",\"pattern\":\"kafka.(\\\\w+)<type=(.+),\n+      name=(.+)><>Count\",\"type\":\"COUNTER\"},{\"labels\":{\"quantile\":\"0.$4\"},\"name\":\"kafka_$1_$2_$3\",\"pattern\":\"kafka.(\\\\w+)<type=(.+),\n+      name=(.+)><>(\\\\d+)thPercentile\",\"type\":\"GAUGE\"}]}'\n+---\n+kind: ConfigMap\n+apiVersion: v1\n+metadata:\n+  name: zookeeper-metrics\n+  labels:\n+    app: strimzi\n+data:\n+  metrics-config.yml: '{\"lowercaseOutputName\":true,\"rules\":[{\"name\":\"zookeeper_$2\",\"pattern\":\"org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\\\d+)><>(\\\\w+)\",\"type\":\"GAUGE\"},{\"labels\":{\"replicaId\":\"$2\"},\"name\":\"zookeeper_$3\",\"pattern\":\"org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\\\d+),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkwOTgxNA==", "bodyText": "Same as above.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522909814", "createdAt": "2020-11-13T12:07:03Z", "author": {"login": "scholzj"}, "path": "examples/metrics/kafka-mirror-maker-2-metrics.yaml", "diffHunk": "@@ -33,113 +33,38 @@ spec:\n           checkpoints.topic.replication.factor: 1\n       topicsPattern: \".*\"\n       groupsPattern: \".*\"\n-  metrics:\n-    # Inspired by kafka-connect rules\n-    # https://github.com/prometheus/jmx_exporter/blob/master/example_configs/kafka-connect.yml\n-    lowercaseOutputName: true\n-    lowercaseOutputLabelNames: true\n-    rules:\n-      #kafka.connect:type=app-info,client-id=\"{clientid}\"\n-      #kafka.consumer:type=app-info,client-id=\"{clientid}\"\n-      #kafka.producer:type=app-info,client-id=\"{clientid}\"\n-      - pattern: 'kafka.(.+)<type=app-info, client-id=(.+)><>start-time-ms'\n-        name: kafka_$1_start_time_seconds\n-        labels:\n-          clientId: \"$2\"\n-        help: \"Kafka $1 JMX metric start time seconds\"\n-        type: GAUGE\n-        valueFactor: 0.001\n-      - pattern: 'kafka.(.+)<type=app-info, client-id=(.+)><>(commit-id|version): (.+)'\n-        name: kafka_$1_$3_info\n-        value: 1\n-        labels:\n-          clientId: \"$2\"\n-          $3: \"$4\"\n-        help: \"Kafka $1 JMX metric info version and commit-id\"\n-        type: GAUGE\n-\n-      #kafka.producer:type=producer-topic-metrics,client-id=\"{clientid}\",topic=\"{topic}\"\", partition=\"{partition}\"\n-      #kafka.consumer:type=consumer-fetch-manager-metrics,client-id=\"{clientid}\",topic=\"{topic}\"\", partition=\"{partition}\"\n-      - pattern: kafka.(.+)<type=(.+)-metrics, client-id=(.+), topic=(.+), partition=(.+)><>(.+-total|compression-rate|.+-avg|.+-replica|.+-lag|.+-lead)\n-        name: kafka_$2_$6\n-        labels:\n-          clientId: \"$3\"\n-          topic: \"$4\"\n-          partition: \"$5\"\n-        help: \"Kafka $1 JMX metric type $2\"\n-        type: GAUGE\n-\n-      #kafka.producer:type=producer-topic-metrics,client-id=\"{clientid}\",topic=\"{topic}\"\n-      #kafka.consumer:type=consumer-fetch-manager-metrics,client-id=\"{clientid}\",topic=\"{topic}\"\", partition=\"{partition}\"\n-      - pattern: kafka.(.+)<type=(.+)-metrics, client-id=(.+), topic=(.+)><>(.+-total|compression-rate|.+-avg)\n-        name: kafka_$2_$5\n-        labels:\n-          clientId: \"$3\"\n-          topic: \"$4\"\n-        help: \"Kafka $1 JMX metric type $2\"\n-        type: GAUGE\n-\n-      #kafka.connect:type=connect-node-metrics,client-id=\"{clientid}\",node-id=\"{nodeid}\"\n-      #kafka.consumer:type=consumer-node-metrics,client-id=consumer-1,node-id=\"{nodeid}\"\n-      - pattern: kafka.(.+)<type=(.+)-metrics, client-id=(.+), node-id=(.+)><>(.+-total|.+-avg)\n-        name: kafka_$2_$5\n-        labels:\n-          clientId: \"$3\"\n-          nodeId: \"$4\"\n-        help: \"Kafka $1 JMX metric type $2\"\n-        type: UNTYPED\n-\n-      #kafka.connect:type=kafka-metrics-count,client-id=\"{clientid}\"\n-      #kafka.consumer:type=consumer-fetch-manager-metrics,client-id=\"{clientid}\"\n-      #kafka.consumer:type=consumer-coordinator-metrics,client-id=\"{clientid}\"\n-      #kafka.consumer:type=consumer-metrics,client-id=\"{clientid}\"\n-      - pattern: kafka.(.+)<type=(.+)-metrics, client-id=(.*)><>(.+-total|.+-avg|.+-bytes|.+-count|.+-ratio|.+-age|.+-flight|.+-threads|.+-connectors|.+-tasks|.+-ago)\n-        name: kafka_$2_$4\n-        labels:\n-          clientId: \"$3\"\n-        help: \"Kafka $1 JMX metric type $2\"\n-        type: GAUGE\n-\n-      #kafka.connect:type=connector-task-metrics,connector=\"{connector}\",task=\"{task}<> status\"\n-      - pattern: 'kafka.connect<type=connector-task-metrics, connector=(.+), task=(.+)><>status: ([a-z-]+)'\n-        name: kafka_connect_connector_status\n-        value: 1\n-        labels:\n-          connector: \"$1\"\n-          task: \"$2\"\n-          status: \"$3\"\n-        help: \"Kafka Connect JMX Connector status\"\n-        type: GAUGE\n-\n-      #kafka.connect:type=task-error-metrics,connector=\"{connector}\",task=\"{task}\"\n-      #kafka.connect:type=source-task-metrics,connector=\"{connector}\",task=\"{task}\"\n-      #kafka.connect:type=sink-task-metrics,connector=\"{connector}\",task=\"{task}\"\n-      #kafka.connect:type=connector-task-metrics,connector=\"{connector}\",task=\"{task}\"\n-      - pattern: kafka.connect<type=(.+)-metrics, connector=(.+), task=(.+)><>(.+-total|.+-count|.+-ms|.+-ratio|.+-avg|.+-failures|.+-requests|.+-timestamp|.+-logged|.+-errors|.+-retries|.+-skipped)\n-        name: kafka_connect_$1_$4\n-        labels:\n-          connector: \"$2\"\n-          task: \"$3\"\n-        help: \"Kafka Connect JMX metric type $1\"\n-        type: GAUGE\n-\n-      #kafka.connect:type=connector-metrics,connector=\"{connector}\"\n-      #kafka.connect:type=connect-worker-metrics,connector=\"{connector}\"\n-      - pattern: kafka.connect<type=connect-worker-metrics, connector=(.+)><>([a-z-]+)\n-        name: kafka_connect_worker_$2\n-        labels:\n-          connector: \"$1\"\n-        help: \"Kafka Connect JMX metric $1\"\n-        type: GAUGE\n-\n-      #kafka.connect:type=connect-worker-metrics\n-      - pattern: kafka.connect<type=connect-worker-metrics><>([a-z-]+)\n-        name: kafka_connect_worker_$1\n-        help: \"Kafka Connect JMX metric worker\"\n-        type: GAUGE\n-\n-      #kafka.connect:type=connect-worker-rebalance-metrics\n-      - pattern: kafka.connect<type=connect-worker-rebalance-metrics><>([a-z-]+)\n-        name: kafka_connect_worker_rebalance_$1\n-        help: \"Kafka Connect JMX metric rebalance information\"\n-        type: GAUGE\n+  metricsConfig:\n+    type: jmxPrometheusExporter\n+    valueFrom:\n+      configMapKeyRef:\n+        name: mirror-maker-2-metrics\n+        key: metrics-config.yml\n+---\n+kind: ConfigMap\n+apiVersion: v1\n+metadata:\n+  name: mirror-maker-2-metrics\n+  labels:\n+    app: strimzi\n+data:\n+  metrics-config.yml: '{\"lowercaseOutputLabelNames\":true,\"lowercaseOutputName\":true,\"rules\":[{\"help\":\"Kafka", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkxMTkwOQ==", "bodyText": "So what does this actually test? I'm not entirely sure after reading the test. Maybe it should start with some Javadoc explaining it.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522911909", "createdAt": "2020-11-13T12:11:39Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "diffHunk": "@@ -385,6 +397,157 @@ void testCruiseControlMetrics() {\n         }\n     }\n \n+    @Test\n+    void testKafkaMetricsSettings() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwMDkyNTc5", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#pullrequestreview-530092579", "createdAt": "2020-11-13T14:12:13Z", "commit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNDoxMjoxM1rOHyvzeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNDoxNDozOVrOHyv5RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk3NDA3NA==", "bodyText": "Wouldn't be better actually check the metrics exported by Kafka instead of just checking the configuration? I think Jakub is proposing the same.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522974074", "createdAt": "2020-11-13T14:12:13Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "diffHunk": "@@ -385,6 +397,157 @@ void testCruiseControlMetrics() {\n         }\n     }\n \n+    @Test\n+    void testKafkaMetricsSettings() {\n+        String expectedMetricsConfig = \"{\\\"lowercaseOutputName\\\":true,\\\"rules\\\":[{\\\"labels\\\":{\\\"clientId\\\":\\\"$3\\\",\\\"partition\\\":\\\"$5\\\",\\\"topic\\\":\\\"$4\\\"},\\\"name\\\":\\\"kafka_server_$1_$2\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk3NDc2NA==", "bodyText": "You should wait there for rolling update, not just for pods readiness.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522974764", "createdAt": "2020-11-13T14:13:28Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "diffHunk": "@@ -385,6 +397,157 @@ void testCruiseControlMetrics() {\n         }\n     }\n \n+    @Test\n+    void testKafkaMetricsSettings() {\n+        String expectedMetricsConfig = \"{\\\"lowercaseOutputName\\\":true,\\\"rules\\\":[{\\\"labels\\\":{\\\"clientId\\\":\\\"$3\\\",\\\"partition\\\":\\\"$5\\\",\\\"topic\\\":\\\"$4\\\"},\\\"name\\\":\\\"kafka_server_$1_$2\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n+                        \"name=(.+), clientId=(.+), topic=(.+), partition=(.*)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"broker\\\":\\\"$4:$5\\\",\\\"clientId\\\":\\\"$3\\\"},\\\"name\\\":\\\"kafka_server_$1_$2\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n+                        \"name=(.+), clientId=(.+), brokerHost=(.+), brokerPort=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"cipher\\\":\\\"$5\\\",\\\"listener\\\":\\\"$2\\\",\\\"networkProcessor\\\":\\\"$3\\\",\\\"protocol\\\":\\\"$4\\\"},\\\"name\\\":\\\"kafka_server_$1_connections_tls_info\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n+                        \"cipher=(.+), protocol=(.+), listener=(.+), networkProcessor=(.+)><>connections\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"clientSoftwareName\\\":\\\"$2\\\",\\\"clientSoftwareVersion\\\":\\\"$3\\\",\\\"listener\\\":\\\"$4\\\",\\\"networkProcessor\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_server_$1_connections_software\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n+                        \"clientSoftwareName=(.+), clientSoftwareVersion=(.+), listener=(.+), networkProcessor=(.+)><>connections\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"listener\\\":\\\"$2\\\",\\\"networkProcessor\\\":\\\"$3\\\"},\\\"name\\\":\\\"kafka_server_$1_$4\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n+                        \"listener=(.+), networkProcessor=(.+)><>(.+):\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"listener\\\":\\\"$2\\\",\\\"networkProcessor\\\":\\\"$3\\\"},\\\"name\\\":\\\"kafka_server_$1_$4\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n+                        \"listener=(.+), networkProcessor=(.+)><>(.+)\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3_percent\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+)Percent\\\\\\\\w*><>MeanRate\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3_percent\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+)Percent\\\\\\\\w*><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_percent\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+)Percent\\\\\\\\w*, (.+)=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"$6\\\":\\\"$7\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_total\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+)PerSec\\\\\\\\w*, (.+)=(.+), (.+)=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_total\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+)PerSec\\\\\\\\w*, (.+)=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3_total\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+)PerSec\\\\\\\\w*><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"$6\\\":\\\"$7\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+), (.+)=(.+), (.+)=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+), (.+)=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"$6\\\":\\\"$7\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_count\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+), (.+)=(.+), (.+)=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"$6\\\":\\\"$7\\\",\\\"quantile\\\":\\\"0.$8\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+), (.+)=(.*), (.+)=(.+)><>(\\\\\\\\d+)thPercentile\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_count\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+), (.+)=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"quantile\\\":\\\"0.$6\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+), (.+)=(.*)><>(\\\\\\\\d+)thPercentile\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3_count\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"quantile\\\":\\\"0.$4\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+)><>(\\\\\\\\d+)thPercentile\\\",\\\"type\\\":\\\"GAUGE\\\"}]}\";\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.configure(\n+                JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(),\n+                true\n+        );\n+\n+        ConfigMap actualCm = kubeClient().getConfigMap(KafkaResources.kafkaMetricsAndLogConfigMapName(SECOND_CLUSTER));\n+\n+        assertThat(actualCm.getData().get(\"metrics-config.yml\"), is(expectedMetricsConfig.replace(\"\\n\", \" \")));\n+\n+        ConfigMap externalMetricsCm = new ConfigMapBuilder()\n+                .withData(Collections.singletonMap(\"metrics-config.yml\", expectedMetricsConfig))\n+                .withNewMetadata()\n+                    .withName(\"external-metrics-cm\")\n+                    .withNamespace(NAMESPACE)\n+                .endMetadata()\n+                .build();\n+\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(externalMetricsCm);\n+\n+        // spec.kafka.metrics -> spec.kafka.jmxExporterMetrics\n+        ConfigMapKeySelector cmks = new ConfigMapKeySelectorBuilder()\n+                .withName(\"external-metrics-cm\")\n+                .withKey(\"metrics-config.yml\")\n+                .build();\n+        JmxPrometheusExporterMetrics jmxPrometheusExporterMetrics = new JmxPrometheusExporterMetricsBuilder()\n+                .withNewValueFrom()\n+                    .withConfigMapKeyRef(cmks)\n+                .endValueFrom()\n+                .build();\n+        KafkaResource.replaceKafkaResource(SECOND_CLUSTER, k -> {\n+            // JMX metrics have higher priority\n+            k.getSpec().getKafka().setMetricsConfig(jmxPrometheusExporterMetrics);\n+            k.getSpec().getKafka().setMetrics(null);\n+        });\n+\n+        PodUtils.verifyThatRunningPodsAreStable(SECOND_CLUSTER);\n+        actualCm = kubeClient().getConfigMap(KafkaResources.kafkaMetricsAndLogConfigMapName(SECOND_CLUSTER));\n+        assertThat(actualCm.getData().get(\"metrics-config.yml\"), is(expectedMetricsConfig));\n+\n+        // update metrics\n+        ConfigMap externalMetricsUpdatedCm = new ConfigMapBuilder()\n+                .withData(Collections.singletonMap(\"metrics-config.yml\", expectedMetricsConfig.replace(\"true\", \"false\")))\n+                .withNewMetadata()\n+                    .withName(\"external-metrics-cm\")\n+                    .withNamespace(NAMESPACE)\n+                .endMetadata()\n+                .build();\n+\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(externalMetricsUpdatedCm);\n+        PodUtils.verifyThatRunningPodsAreStable(SECOND_CLUSTER);\n+        actualCm = kubeClient().getConfigMap(KafkaResources.kafkaMetricsAndLogConfigMapName(SECOND_CLUSTER));\n+        assertThat(actualCm.getData().get(\"metrics-config.yml\"), is(expectedMetricsConfig.replace(\"true\", \"false\")));\n+    }\n+\n+    @Test\n+    void testMetricsConfigMapErrors() {\n+        // specified ConfigMap does exist - disabled metrics\n+        ConfigMapKeySelector cmks = new ConfigMapKeySelectorBuilder()\n+                .withName(\"external-metrics-cm-error\")\n+                .withKey(\"metrics-config-error.yml\")\n+                .build();\n+        JmxPrometheusExporterMetrics jmxPrometheusExporterMetrics = new JmxPrometheusExporterMetricsBuilder()\n+                .withNewValueFrom()\n+                .withConfigMapKeyRef(cmks)\n+                .endValueFrom()\n+                .build();\n+        KafkaResource.replaceKafkaResource(SECOND_CLUSTER, k -> {\n+            k.getSpec().getKafka().setMetricsConfig(jmxPrometheusExporterMetrics);\n+            k.getSpec().getKafka().setMetrics(null);\n+        });\n+\n+        // Changing metrics on -> off triggers RU (envar was changed)\n+        StatefulSetUtils.waitForAllStatefulSetPodsReady(KafkaResources.kafkaStatefulSetName(SECOND_CLUSTER), 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk3NTAyMg==", "bodyText": "Probably same as above?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522975022", "createdAt": "2020-11-13T14:13:53Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "diffHunk": "@@ -385,6 +397,157 @@ void testCruiseControlMetrics() {\n         }\n     }\n \n+    @Test\n+    void testKafkaMetricsSettings() {\n+        String expectedMetricsConfig = \"{\\\"lowercaseOutputName\\\":true,\\\"rules\\\":[{\\\"labels\\\":{\\\"clientId\\\":\\\"$3\\\",\\\"partition\\\":\\\"$5\\\",\\\"topic\\\":\\\"$4\\\"},\\\"name\\\":\\\"kafka_server_$1_$2\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n+                        \"name=(.+), clientId=(.+), topic=(.+), partition=(.*)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"broker\\\":\\\"$4:$5\\\",\\\"clientId\\\":\\\"$3\\\"},\\\"name\\\":\\\"kafka_server_$1_$2\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n+                        \"name=(.+), clientId=(.+), brokerHost=(.+), brokerPort=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"cipher\\\":\\\"$5\\\",\\\"listener\\\":\\\"$2\\\",\\\"networkProcessor\\\":\\\"$3\\\",\\\"protocol\\\":\\\"$4\\\"},\\\"name\\\":\\\"kafka_server_$1_connections_tls_info\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n+                        \"cipher=(.+), protocol=(.+), listener=(.+), networkProcessor=(.+)><>connections\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"clientSoftwareName\\\":\\\"$2\\\",\\\"clientSoftwareVersion\\\":\\\"$3\\\",\\\"listener\\\":\\\"$4\\\",\\\"networkProcessor\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_server_$1_connections_software\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n+                        \"clientSoftwareName=(.+), clientSoftwareVersion=(.+), listener=(.+), networkProcessor=(.+)><>connections\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"listener\\\":\\\"$2\\\",\\\"networkProcessor\\\":\\\"$3\\\"},\\\"name\\\":\\\"kafka_server_$1_$4\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n+                        \"listener=(.+), networkProcessor=(.+)><>(.+):\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"listener\\\":\\\"$2\\\",\\\"networkProcessor\\\":\\\"$3\\\"},\\\"name\\\":\\\"kafka_server_$1_$4\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n+                        \"listener=(.+), networkProcessor=(.+)><>(.+)\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3_percent\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+)Percent\\\\\\\\w*><>MeanRate\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3_percent\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+)Percent\\\\\\\\w*><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_percent\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+)Percent\\\\\\\\w*, (.+)=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"$6\\\":\\\"$7\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_total\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+)PerSec\\\\\\\\w*, (.+)=(.+), (.+)=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_total\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+)PerSec\\\\\\\\w*, (.+)=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3_total\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+)PerSec\\\\\\\\w*><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"$6\\\":\\\"$7\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+), (.+)=(.+), (.+)=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+), (.+)=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"$6\\\":\\\"$7\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_count\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+), (.+)=(.+), (.+)=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"$6\\\":\\\"$7\\\",\\\"quantile\\\":\\\"0.$8\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+), (.+)=(.*), (.+)=(.+)><>(\\\\\\\\d+)thPercentile\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_count\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+), (.+)=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"quantile\\\":\\\"0.$6\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+), (.+)=(.*)><>(\\\\\\\\d+)thPercentile\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3_count\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"quantile\\\":\\\"0.$4\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+)><>(\\\\\\\\d+)thPercentile\\\",\\\"type\\\":\\\"GAUGE\\\"}]}\";\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.configure(\n+                JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(),\n+                true\n+        );\n+\n+        ConfigMap actualCm = kubeClient().getConfigMap(KafkaResources.kafkaMetricsAndLogConfigMapName(SECOND_CLUSTER));\n+\n+        assertThat(actualCm.getData().get(\"metrics-config.yml\"), is(expectedMetricsConfig.replace(\"\\n\", \" \")));\n+\n+        ConfigMap externalMetricsCm = new ConfigMapBuilder()\n+                .withData(Collections.singletonMap(\"metrics-config.yml\", expectedMetricsConfig))\n+                .withNewMetadata()\n+                    .withName(\"external-metrics-cm\")\n+                    .withNamespace(NAMESPACE)\n+                .endMetadata()\n+                .build();\n+\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(externalMetricsCm);\n+\n+        // spec.kafka.metrics -> spec.kafka.jmxExporterMetrics\n+        ConfigMapKeySelector cmks = new ConfigMapKeySelectorBuilder()\n+                .withName(\"external-metrics-cm\")\n+                .withKey(\"metrics-config.yml\")\n+                .build();\n+        JmxPrometheusExporterMetrics jmxPrometheusExporterMetrics = new JmxPrometheusExporterMetricsBuilder()\n+                .withNewValueFrom()\n+                    .withConfigMapKeyRef(cmks)\n+                .endValueFrom()\n+                .build();\n+        KafkaResource.replaceKafkaResource(SECOND_CLUSTER, k -> {\n+            // JMX metrics have higher priority\n+            k.getSpec().getKafka().setMetricsConfig(jmxPrometheusExporterMetrics);\n+            k.getSpec().getKafka().setMetrics(null);\n+        });\n+\n+        PodUtils.verifyThatRunningPodsAreStable(SECOND_CLUSTER);\n+        actualCm = kubeClient().getConfigMap(KafkaResources.kafkaMetricsAndLogConfigMapName(SECOND_CLUSTER));\n+        assertThat(actualCm.getData().get(\"metrics-config.yml\"), is(expectedMetricsConfig));\n+\n+        // update metrics\n+        ConfigMap externalMetricsUpdatedCm = new ConfigMapBuilder()\n+                .withData(Collections.singletonMap(\"metrics-config.yml\", expectedMetricsConfig.replace(\"true\", \"false\")))\n+                .withNewMetadata()\n+                    .withName(\"external-metrics-cm\")\n+                    .withNamespace(NAMESPACE)\n+                .endMetadata()\n+                .build();\n+\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(externalMetricsUpdatedCm);\n+        PodUtils.verifyThatRunningPodsAreStable(SECOND_CLUSTER);\n+        actualCm = kubeClient().getConfigMap(KafkaResources.kafkaMetricsAndLogConfigMapName(SECOND_CLUSTER));\n+        assertThat(actualCm.getData().get(\"metrics-config.yml\"), is(expectedMetricsConfig.replace(\"true\", \"false\")));\n+    }\n+\n+    @Test\n+    void testMetricsConfigMapErrors() {\n+        // specified ConfigMap does exist - disabled metrics\n+        ConfigMapKeySelector cmks = new ConfigMapKeySelectorBuilder()\n+                .withName(\"external-metrics-cm-error\")\n+                .withKey(\"metrics-config-error.yml\")\n+                .build();\n+        JmxPrometheusExporterMetrics jmxPrometheusExporterMetrics = new JmxPrometheusExporterMetricsBuilder()\n+                .withNewValueFrom()\n+                .withConfigMapKeyRef(cmks)\n+                .endValueFrom()\n+                .build();\n+        KafkaResource.replaceKafkaResource(SECOND_CLUSTER, k -> {\n+            k.getSpec().getKafka().setMetricsConfig(jmxPrometheusExporterMetrics);\n+            k.getSpec().getKafka().setMetrics(null);\n+        });\n+\n+        // Changing metrics on -> off triggers RU (envar was changed)\n+        StatefulSetUtils.waitForAllStatefulSetPodsReady(KafkaResources.kafkaStatefulSetName(SECOND_CLUSTER), 1);\n+\n+        assertThat(StUtils.checkEnvVarInPod(KafkaResources.kafkaPodName(SECOND_CLUSTER, 0), \"KAFKA_METRICS_ENABLED\"), is(\"false\"));\n+\n+        ConfigMap externalMetricsCm = new ConfigMapBuilder()\n+                .withData(Collections.singletonMap(\"metrics-config.yml\", \"\"))\n+                .withNewMetadata()\n+                .withName(\"external-metrics-cm\")\n+                .withNamespace(NAMESPACE)\n+                .endMetadata()\n+                .build();\n+\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(externalMetricsCm);\n+\n+        // specified ConfigMap does exist but does not contain specified key - metrics disabled\n+        cmks = new ConfigMapKeySelectorBuilder()\n+                .withName(\"external-metrics-cm\")\n+                .withKey(\"metrics-config-error.yml\")\n+                .build();\n+        JmxPrometheusExporterMetrics jmxPrometheusExporterMetrics2 = new JmxPrometheusExporterMetricsBuilder()\n+                .withNewValueFrom()\n+                .withConfigMapKeyRef(cmks)\n+                .endValueFrom()\n+                .build();\n+\n+        KafkaResource.replaceKafkaResource(SECOND_CLUSTER, k -> {\n+            k.getSpec().getKafka().setMetricsConfig(jmxPrometheusExporterMetrics2);\n+            k.getSpec().getKafka().setMetrics(null);\n+        });\n+\n+        PodUtils.verifyThatRunningPodsAreStable(SECOND_CLUSTER);\n+        assertThat(StUtils.checkEnvVarInPod(KafkaResources.kafkaPodName(SECOND_CLUSTER, 0), \"KAFKA_METRICS_ENABLED\"), is(\"false\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk3NTU1Nw==", "bodyText": "Please, keep indent as it was before your changes.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522975557", "createdAt": "2020-11-13T14:14:39Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/RollingUpdateST.java", "diffHunk": "@@ -625,16 +642,33 @@ void testMetricsChange() {\n         zookeeperMetrics.put(\"lowercaseOutputName\", true);\n         zookeeperMetrics.put(\"rules\", Collections.singletonList(zookeeperRule));\n \n+        String metricsCMNameZk = \"zk-metrics-cm\";\n+        ConfigMap metricsCMZk = new ConfigMapBuilder()\n+                .withNewMetadata()\n+                .withName(metricsCMNameZk)\n+                .endMetadata()\n+                .withData(singletonMap(\"metrics-config.yml\", new JsonObject(zookeeperMetrics).toString()))\n+                .build();\n+\n+        JmxPrometheusExporterMetrics zkMetricsConfig = new JmxPrometheusExporterMetricsBuilder()\n+                .withNewValueFrom()\n+                .withNewConfigMapKeyRef(\"metrics-config.yml\", metricsCMNameZk, true)\n+                .endValueFrom()\n+                .build();\n+\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(metricsCMK);\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(metricsCMZk);\n+\n         KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 3)\n                 .editSpec()\n-                    .editKafka()\n-                        .withMetrics(kafkaMetrics)\n-                    .endKafka()\n-                    .editOrNewZookeeper()\n-                        .withMetrics(zookeeperMetrics)\n-                    .endZookeeper()\n-                    .withNewKafkaExporter()\n-                    .endKafkaExporter()\n+                .editKafka()\n+                .withMetricsConfig(kafkaMetricsConfig)\n+                .endKafka()\n+                .editOrNewZookeeper()\n+                .withMetricsConfig(zkMetricsConfig)\n+                .endZookeeper()\n+                .withNewKafkaExporter()\n+                .endKafkaExporter()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0MTg2OTg5", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#pullrequestreview-534186989", "createdAt": "2020-11-19T08:39:12Z", "commit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwODozOToxMlrOH2SFlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwODozOToxMlrOH2SFlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY4MTQ5NQ==", "bodyText": "I would be more explicit and clear with \"Reference to the key in the ConfigMap containing the metrics configuration\"", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r526681495", "createdAt": "2020-11-19T08:39:12Z", "author": {"login": "ppatierno"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/ExternalConfigurationMetrics.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.api.kafka.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import io.fabric8.kubernetes.api.model.ConfigMapKeySelector;\n+import io.strimzi.crdgenerator.annotations.Description;\n+import io.strimzi.crdgenerator.annotations.KubeLink;\n+import io.sundr.builder.annotations.Buildable;\n+import lombok.EqualsAndHashCode;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Representation for metrics configuration\n+ */\n+@Buildable(\n+        editableEnabled = false,\n+        builderPackage = Constants.FABRIC8_KUBERNETES_API\n+)\n+@JsonInclude(JsonInclude.Include.NON_DEFAULT)\n+@EqualsAndHashCode\n+public class ExternalConfigurationMetrics implements Serializable, UnknownPropertyPreserving {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private ConfigMapKeySelector configMapKeyRef;\n+    private Map<String, Object> additionalProperties = new HashMap<>(0);\n+\n+    @Description(\"Reference to a key in a ConfigMap.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "originalPosition": 34}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/cdd5fd9647f947f868f3da459678b8711dcc75cd", "committedDate": "2020-11-12T14:06:49Z", "message": "improvements + st\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "e6ee817d82a464cd093f98be5d44729a37a603ff", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/e6ee817d82a464cd093f98be5d44729a37a603ff", "committedDate": "2020-11-19T15:59:04Z", "message": "phew\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e6ee817d82a464cd093f98be5d44729a37a603ff", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/e6ee817d82a464cd093f98be5d44729a37a603ff", "committedDate": "2020-11-19T15:59:04Z", "message": "phew\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "f880b9caae0fe2c8cc8942cc73b8210efb06b0fb", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/f880b9caae0fe2c8cc8942cc73b8210efb06b0fb", "committedDate": "2020-11-20T07:39:58Z", "message": "phew\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0632e8dcb28956a5b9ce399afb63a8a65f997875", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/0632e8dcb28956a5b9ce399afb63a8a65f997875", "committedDate": "2020-11-20T12:16:13Z", "message": "fixes\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "a9732d7cbee91406f4510af893edc6c27c887338", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a9732d7cbee91406f4510af893edc6c27c887338", "committedDate": "2020-11-24T13:50:58Z", "message": "fixes\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxNzYzNDAw", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#pullrequestreview-541763400", "createdAt": "2020-12-01T10:34:18Z", "commit": {"oid": "629207be6bb388f68ff0088dcbc17c4577507b9a"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMDozNDoxOVrOH8l_Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMjo0NzoxMlrOH8rCug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI5ODk1OA==", "bodyText": "Maybe this would be better? You are only deprecating it, not removing it. That needs to be clear.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Metrics were moved from the model CR to the external ConfigMap\n          \n          \n            \n            * The `metrics` field in the Strimzi custom resources has been deprecated and will be removed in the future. For configuring metrics, use the new `metricsConfig` field and pass the configuration via ConfigMap.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533298958", "createdAt": "2020-12-01T10:34:19Z", "author": {"login": "scholzj"}, "path": "CHANGELOG.md", "diffHunk": "@@ -10,6 +10,10 @@\n * Allow disabling ownerReference on CA secrets\n * Move from Docker Hub to Quay.io as our container registry\n * Add possibility to configure DeploymentStrategy for Kafka Connect, Kafka Mirror Maker (1 and 2), and Kafka Bridge\n+* Support passing metrics configuration as an external ConfigMap\n+\n+### Deprecations and removals\n+* Metrics were moved from the model CR to the external ConfigMap", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "629207be6bb388f68ff0088dcbc17c4577507b9a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI5OTYzNA==", "bodyText": "@sknot-rh Please check with @tombentley about whether this needs to also list the specific versions or not. (here as well as on the other places)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533299634", "createdAt": "2020-12-01T10:34:54Z", "author": {"login": "scholzj"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/AbstractKafkaConnectSpec.java", "diffHunk": "@@ -132,6 +133,18 @@ public void setJvmOptions(JvmOptions jvmOptions) {\n         this.jvmOptions = jvmOptions;\n     }\n \n+    @Description(\"Metrics configuration.\")\n+    @JsonInclude(JsonInclude.Include.NON_EMPTY)\n+    public MetricsConfig getMetricsConfig() {\n+        return metricsConfig;\n+    }\n+\n+    public void setMetricsConfig(MetricsConfig metricsConfig) {\n+        this.metricsConfig = metricsConfig;\n+    }\n+\n+    @DeprecatedProperty(movedToPath = \"spec.metricsConfig\")\n+    @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NjM4Mw=="}, "originalCommit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMwODQ0Nw==", "bodyText": "I'm not sure I like this ... you create the Future here but in many cases it will not be used.  I think you could better use if ... else ... and return directly.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533308447", "createdAt": "2020-12-01T10:41:51Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/AbstractConnectOperator.java", "diffHunk": "@@ -690,4 +693,17 @@ protected JsonObject asJson(KafkaConnectorSpec spec) {\n \n         return updateStatusPromise.future();\n     }\n+\n+    protected Future<ConfigMap> connectMetricsConfigMap(String namespace, KafkaConnectCluster connect) {\n+        Future<ConfigMap> metricsCmFut = Future.succeededFuture(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "629207be6bb388f68ff0088dcbc17c4577507b9a"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM2NTAwMQ==", "bodyText": "Same as above ... create the succeeded future only when it is really needed. This might be also on other places.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533365001", "createdAt": "2020-12-01T12:16:57Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -2399,33 +2414,45 @@ String getCertificateThumbprint(Secret certSecret, CertAndKeySecretSource custom\n             }\n         }\n \n-        ConfigMap getKafkaAncillaryCm()    {\n-            ConfigMap loggingCm = null;\n+        Future<ConfigMap> getKafkaAncillaryCm()    {\n+            Future<ConfigMap> metricsCm = Future.succeededFuture(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "629207be6bb388f68ff0088dcbc17c4577507b9a"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM2NTkzMA==", "bodyText": "See, this is better then above ;-)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533365930", "createdAt": "2020-12-01T12:18:41Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -2981,33 +3008,31 @@ StatefulSet getKafkaStatefulSet()   {\n                 EntityTopicOperator topicOperator = entityOperator.getTopicOperator();\n                 EntityUserOperator userOperator = entityOperator.getUserOperator();\n \n-                Future<ConfigMap> futToConfigMap;\n-\n+                Future<ConfigMap> futToLogConfigMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "629207be6bb388f68ff0088dcbc17c4577507b9a"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM2ODMxNQ==", "bodyText": "Just a nit ... but maybe you can try to fix the alignment to make it more readable.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533368315", "createdAt": "2020-12-01T12:22:41Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/model/KafkaConnectClusterTest.java", "diffHunk": "@@ -116,9 +122,29 @@\n             .build();\n     private final KafkaConnectCluster kc = KafkaConnectCluster.fromCrd(resource, VERSIONS);\n \n+    @Deprecated\n+    @Test\n+    public void testMetricsConfigMapDeprecatedMetrics() {\n+        KafkaConnect resource = new KafkaConnectBuilder(ResourceUtils.createEmptyKafkaConnect(namespace, cluster))\n+                .withNewSpec()\n+                .withMetrics((Map<String, Object>) TestUtils.fromJson(metricsCmJson, Map.class))\n+                .withMetricsConfig(null)\n+                .withConfig((Map<String, Object>) TestUtils.fromJson(configurationJson, Map.class))\n+                .withImage(image)\n+                .withReplicas(replicas)\n+                .withReadinessProbe(new Probe(healthDelay, healthTimeout))\n+                .withLivenessProbe(new Probe(healthDelay, healthTimeout))\n+                .withBootstrapServers(bootstrapServers)\n+                .endSpec()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "629207be6bb388f68ff0088dcbc17c4577507b9a"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM2ODQ4OQ==", "bodyText": "Same as above.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533368489", "createdAt": "2020-12-01T12:23:04Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/model/KafkaMirrorMaker2ClusterTest.java", "diffHunk": "@@ -116,10 +121,37 @@\n             .endSpec()\n             .build();\n     private final KafkaMirrorMaker2Cluster kmm2 = KafkaMirrorMaker2Cluster.fromCrd(resource, VERSIONS);\n+    {\n+        // we were setting metricsEnabled in fromCrd, which was just checking it for non-null. With metrics in CM, we have to check\n+        // its content, what is done in generateMetricsAndLogConfigMap\n+        kmm2.generateMetricsAndLogConfigMap(null, metricsCM);\n+    }\n+\n+    @Deprecated\n+    @Test\n+    public void testMetricsConfigMapDeprecatedMetrics() {\n+        KafkaMirrorMaker2 resource = new KafkaMirrorMaker2Builder(ResourceUtils.createEmptyKafkaMirrorMaker2(namespace, cluster))\n+                .withNewSpec()\n+                .withMetrics((Map<String, Object>) TestUtils.fromJson(metricsCmJson, Map.class))\n+                .withMetricsConfig(null)\n+                .withImage(image)\n+                .withReplicas(replicas)\n+                .withReadinessProbe(new Probe(healthDelay, healthTimeout))\n+                .withLivenessProbe(new Probe(healthDelay, healthTimeout))\n+                .withConnectCluster(targetClusterAlias)\n+                .withClusters(targetCluster)\n+                .endSpec()\n+                .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "629207be6bb388f68ff0088dcbc17c4577507b9a"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM2OTc2Nw==", "bodyText": "This is weird ... within this file you remove Collections. from one emptyMap but leave it with the rest of them. Any reason for it? If not, maybe we could keep it consistent at least within the file or within the same line.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533369767", "createdAt": "2020-12-01T12:25:35Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/resource/KafkaSpecCheckerTest.java", "diffHunk": "@@ -64,7 +64,7 @@ public void checkEmptyWarnings() {\n     @Test\n     public void checkKafkaStorage() {\n         Kafka kafka = new KafkaBuilder(ResourceUtils.createKafka(NAMESPACE, NAME, 1, IMAGE, HEALTH_DELAY, HEALTH_TIMEOUT,\n-            Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap(),\n+            emptyMap(), null, Collections.emptyMap(), Collections.emptyMap(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "629207be6bb388f68ff0088dcbc17c4577507b9a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM4MTgxOA==", "bodyText": "Should the deprecated metrics tests added also for the other components? Or do you think we do not need it?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533381818", "createdAt": "2020-12-01T12:47:12Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "diffHunk": "@@ -385,6 +397,107 @@ void testCruiseControlMetrics() {\n         }\n     }\n \n+    /**\n+     * 1. Update metrics form whatever it is to @metricsConfigJson in spec.kafka.metrics\n+     * 2. Check, whether the metrics ConfigMap is changed\n+     * 3. Updates ConfigMap linked as metrics on\n+     * 4. Check, whether the metrics ConfigMap is changed\n+     */\n+    @Deprecated\n+    @Test\n+    void testKafkaMetricsSettingsDeprecatedMetrics() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "629207be6bb388f68ff0088dcbc17c4577507b9a"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxOTU5MjUx", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#pullrequestreview-541959251", "createdAt": "2020-12-01T14:37:15Z", "commit": {"oid": "629207be6bb388f68ff0088dcbc17c4577507b9a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNDozNzoxNlrOH8vgGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNDozNzoxNlrOH8vgGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ1NDg3NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `type` property is a discriminator that distinguishes the use of the type `JmxPrometheusExporterMetrics` from other subtypes which may be added in the future.\n          \n          \n            \n            The `type` property is a discriminator that distinguishes use of the `JmxPrometheusExporterMetrics` type from other subtypes which may be added in the future.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533454875", "createdAt": "2020-12-01T14:37:16Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/appendix_crds.adoc", "diffHunk": "@@ -1058,6 +1060,38 @@ It must have the value `password` for the type `KafkaJmxAuthenticationPassword`.\n |string\n |====\n \n+[id='type-JmxPrometheusExporterMetrics-{context}']\n+### `JmxPrometheusExporterMetrics` schema reference\n+\n+Used in: xref:type-CruiseControlSpec-{context}[`CruiseControlSpec`], xref:type-KafkaClusterSpec-{context}[`KafkaClusterSpec`], xref:type-KafkaConnectS2ISpec-{context}[`KafkaConnectS2ISpec`], xref:type-KafkaConnectSpec-{context}[`KafkaConnectSpec`], xref:type-KafkaMirrorMaker2Spec-{context}[`KafkaMirrorMaker2Spec`], xref:type-KafkaMirrorMakerSpec-{context}[`KafkaMirrorMakerSpec`], xref:type-ZookeeperClusterSpec-{context}[`ZookeeperClusterSpec`]\n+\n+\n+The `type` property is a discriminator that distinguishes the use of the type `JmxPrometheusExporterMetrics` from other subtypes which may be added in the future.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "629207be6bb388f68ff0088dcbc17c4577507b9a"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxOTYxNDA1", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#pullrequestreview-541961405", "createdAt": "2020-12-01T14:38:13Z", "commit": {"oid": "629207be6bb388f68ff0088dcbc17c4577507b9a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNDozODoxM1rOH8vi3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNDozODoxM1rOH8vi3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ1NTU4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            It must have the value `jmxPrometheusExporter` for the type `JmxPrometheusExporterMetrics`.\n          \n          \n            \n            The value must be `jmxPrometheusExporter` for the `JmxPrometheusExporterMetrics` type.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533455583", "createdAt": "2020-12-01T14:38:13Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/appendix_crds.adoc", "diffHunk": "@@ -1058,6 +1060,38 @@ It must have the value `password` for the type `KafkaJmxAuthenticationPassword`.\n |string\n |====\n \n+[id='type-JmxPrometheusExporterMetrics-{context}']\n+### `JmxPrometheusExporterMetrics` schema reference\n+\n+Used in: xref:type-CruiseControlSpec-{context}[`CruiseControlSpec`], xref:type-KafkaClusterSpec-{context}[`KafkaClusterSpec`], xref:type-KafkaConnectS2ISpec-{context}[`KafkaConnectS2ISpec`], xref:type-KafkaConnectSpec-{context}[`KafkaConnectSpec`], xref:type-KafkaMirrorMaker2Spec-{context}[`KafkaMirrorMaker2Spec`], xref:type-KafkaMirrorMakerSpec-{context}[`KafkaMirrorMakerSpec`], xref:type-ZookeeperClusterSpec-{context}[`ZookeeperClusterSpec`]\n+\n+\n+The `type` property is a discriminator that distinguishes the use of the type `JmxPrometheusExporterMetrics` from other subtypes which may be added in the future.\n+It must have the value `jmxPrometheusExporter` for the type `JmxPrometheusExporterMetrics`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "629207be6bb388f68ff0088dcbc17c4577507b9a"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxOTY2NjQ4", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#pullrequestreview-541966648", "createdAt": "2020-12-01T14:41:44Z", "commit": {"oid": "629207be6bb388f68ff0088dcbc17c4577507b9a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNDo0MTo0NFrOH8vzHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNDo0MTo0NFrOH8vzHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ1OTc0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |valueFrom  1.2+<.<|ConfigMap where Prometheus JMX Exporter configuration is stored. See https://github.com/prometheus/jmx_exporter for details of the structure of this configuration.\n          \n          \n            \n            |valueFrom  1.2+<.<|ConfigMap where the Prometheus JMX Exporter configuration is stored. For details of the structure of this configuration, see the {JMXExporter}.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533459741", "createdAt": "2020-12-01T14:41:44Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/appendix_crds.adoc", "diffHunk": "@@ -1058,6 +1060,38 @@ It must have the value `password` for the type `KafkaJmxAuthenticationPassword`.\n |string\n |====\n \n+[id='type-JmxPrometheusExporterMetrics-{context}']\n+### `JmxPrometheusExporterMetrics` schema reference\n+\n+Used in: xref:type-CruiseControlSpec-{context}[`CruiseControlSpec`], xref:type-KafkaClusterSpec-{context}[`KafkaClusterSpec`], xref:type-KafkaConnectS2ISpec-{context}[`KafkaConnectS2ISpec`], xref:type-KafkaConnectSpec-{context}[`KafkaConnectSpec`], xref:type-KafkaMirrorMaker2Spec-{context}[`KafkaMirrorMaker2Spec`], xref:type-KafkaMirrorMakerSpec-{context}[`KafkaMirrorMakerSpec`], xref:type-ZookeeperClusterSpec-{context}[`ZookeeperClusterSpec`]\n+\n+\n+The `type` property is a discriminator that distinguishes the use of the type `JmxPrometheusExporterMetrics` from other subtypes which may be added in the future.\n+It must have the value `jmxPrometheusExporter` for the type `JmxPrometheusExporterMetrics`.\n+[options=\"header\"]\n+|====\n+|Property          |Description\n+|type       1.2+<.<|Must be `jmxPrometheusExporter`.\n+|string\n+|valueFrom  1.2+<.<|ConfigMap where Prometheus JMX Exporter configuration is stored. See https://github.com/prometheus/jmx_exporter for details of the structure of this configuration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "629207be6bb388f68ff0088dcbc17c4577507b9a"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxOTQyNDQy", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#pullrequestreview-541942442", "createdAt": "2020-12-01T14:23:43Z", "commit": {"oid": "629207be6bb388f68ff0088dcbc17c4577507b9a"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNDoyMzo0M1rOH8u4Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNDo0NDo0NlrOH8wDAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ0NDY0Mw==", "bodyText": "@PresentInVersions(\"v1alpha1-b1beta1\") should do it.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533444643", "createdAt": "2020-12-01T14:23:43Z", "author": {"login": "tombentley"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/AbstractKafkaConnectSpec.java", "diffHunk": "@@ -132,6 +133,18 @@ public void setJvmOptions(JvmOptions jvmOptions) {\n         this.jvmOptions = jvmOptions;\n     }\n \n+    @Description(\"Metrics configuration.\")\n+    @JsonInclude(JsonInclude.Include.NON_EMPTY)\n+    public MetricsConfig getMetricsConfig() {\n+        return metricsConfig;\n+    }\n+\n+    public void setMetricsConfig(MetricsConfig metricsConfig) {\n+        this.metricsConfig = metricsConfig;\n+    }\n+\n+    @DeprecatedProperty(movedToPath = \"spec.metricsConfig\")\n+    @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NjM4Mw=="}, "originalCommit": {"oid": "cdd5fd9647f947f868f3da459678b8711dcc75cd"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ0OTQyMg==", "bodyText": "But better still if you make the declaration final.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533449422", "createdAt": "2020-12-01T14:29:57Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -2981,33 +3008,31 @@ StatefulSet getKafkaStatefulSet()   {\n                 EntityTopicOperator topicOperator = entityOperator.getTopicOperator();\n                 EntityUserOperator userOperator = entityOperator.getUserOperator();\n \n-                Future<ConfigMap> futToConfigMap;\n-\n+                Future<ConfigMap> futToLogConfigMap;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM2NTkzMA=="}, "originalCommit": {"oid": "629207be6bb388f68ff0088dcbc17c4577507b9a"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ1MDk2Ng==", "bodyText": "Unless you know that the write-site and read-site will be running on the same thread (and maybe they are, but I'm not 100% certain about that) then you should use an AtomicReference.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533450966", "createdAt": "2020-12-01T14:32:00Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectAssemblyOperator.java", "diffHunk": "@@ -123,6 +119,7 @@ public KafkaConnectAssemblyOperator(Vertx vertx, PlatformFeaturesAvailability pf\n \n         boolean connectHasZeroReplicas = connect.getReplicas() == 0;\n \n+        final String[] desiredLogging = new String[1];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "629207be6bb388f68ff0088dcbc17c4577507b9a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ1MTA5OA==", "bodyText": "Same comment", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533451098", "createdAt": "2020-12-01T14:32:12Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectS2IAssemblyOperator.java", "diffHunk": "@@ -111,15 +111,13 @@ public KafkaConnectS2IAssemblyOperator(Vertx vertx, PlatformFeaturesAvailability\n         String namespace = reconciliation.namespace();\n \n         connect.generateBuildConfig();\n-        ConfigMap logAndMetricsConfigMap = connect.generateMetricsAndLogConfigMap(connect.getLogging() instanceof ExternalLogging ?\n+\n+        ConfigMap loggingCm = connect.getLogging() instanceof ExternalLogging ?\n                 configMapOperations.get(namespace, ((ExternalLogging) connect.getLogging()).getName()) :\n-                null);\n+                null;\n \n         Map<String, String> annotations = new HashMap<>(1);\n-        annotations.put(Annotations.ANNO_STRIMZI_LOGGING_DYNAMICALLY_UNCHANGEABLE_HASH,\n-                Util.stringHash(Util.getLoggingDynamicallyUnmodifiableEntries(logAndMetricsConfigMap.getData().get(AbstractModel.ANCILLARY_CM_KEY_LOG_CONFIG))));\n-\n-        String desiredLogging = logAndMetricsConfigMap.getData().get(AbstractModel.ANCILLARY_CM_KEY_LOG_CONFIG);\n+        final String[] desiredLogging = new String[1];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "629207be6bb388f68ff0088dcbc17c4577507b9a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ1MTI1NQ==", "bodyText": "Same comment", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533451255", "createdAt": "2020-12-01T14:32:26Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaMirrorMaker2AssemblyOperator.java", "diffHunk": "@@ -133,14 +133,12 @@ public KafkaMirrorMaker2AssemblyOperator(Vertx vertx, PlatformFeaturesAvailabili\n         Promise<KafkaMirrorMaker2Status> createOrUpdatePromise = Promise.promise();\n         String namespace = reconciliation.namespace();\n \n-        ConfigMap logAndMetricsConfigMap = mirrorMaker2Cluster.generateMetricsAndLogConfigMap(mirrorMaker2Cluster.getLogging() instanceof ExternalLogging ?\n+        ConfigMap loggingCm = mirrorMaker2Cluster.getLogging() instanceof ExternalLogging ?\n                 configMapOperations.get(namespace, ((ExternalLogging) mirrorMaker2Cluster.getLogging()).getName()) :\n-                null);\n+                null;\n \n         Map<String, String> annotations = new HashMap<>(1);\n-        annotations.put(Annotations.ANNO_STRIMZI_LOGGING_DYNAMICALLY_UNCHANGEABLE_HASH,\n-                Util.stringHash(Util.getLoggingDynamicallyUnmodifiableEntries(logAndMetricsConfigMap.getData().get(AbstractModel.ANCILLARY_CM_KEY_LOG_CONFIG))));\n-        String desiredLogging = logAndMetricsConfigMap.getData().get(AbstractModel.ANCILLARY_CM_KEY_LOG_CONFIG);\n+        final String[] desiredLogging = new String[1];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "629207be6bb388f68ff0088dcbc17c4577507b9a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ1MTkxNg==", "bodyText": "Three (count them, three!) blank lines! They're not free you know!", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533451916", "createdAt": "2020-12-01T14:33:23Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/model/EntityUserOperatorTest.java", "diffHunk": "@@ -68,6 +70,12 @@\n     private final int uoReconciliationInterval = 90;\n     private final int uoZookeeperSessionTimeout = 20;\n \n+    private final String metricsCmJson = \"{\\\"animal\\\":\\\"wombat\\\"}\";\n+    private final String metricsCMName = \"metrics-cm\";\n+    private final ConfigMap metricsCM = io.strimzi.operator.cluster.TestUtils.getJmxMetricsCm(metricsCmJson, metricsCMName);\n+    private final JmxPrometheusExporterMetrics jmxMetricsConfig = io.strimzi.operator.cluster.TestUtils.getJmxPrometheusExporterMetrics(AbstractModel.ANCILLARY_CM_KEY_METRICS, metricsCMName);\n+\n+\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "629207be6bb388f68ff0088dcbc17c4577507b9a"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ2MTcwMA==", "bodyText": "A comment with a reference to the docs for the jmx exporter config would not hurt.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533461700", "createdAt": "2020-12-01T14:43:14Z", "author": {"login": "tombentley"}, "path": "examples/metrics/kafka-connect-metrics.yaml", "diffHunk": "@@ -8,7 +8,22 @@ spec:\n   version: 2.6.0\n   replicas: 1\n   bootstrapServers: my-cluster-kafka-bootstrap:9092\n-  metrics:\n+  metricsConfig:\n+    type: jmxPrometheusExporter\n+    valueFrom:\n+      configMapKeyRef:\n+        name: connect-metrics\n+        key: metrics-config.yml\n+\n+---\n+kind: ConfigMap\n+apiVersion: v1\n+metadata:\n+  name: connect-metrics\n+  labels:\n+    app: strimzi\n+data:\n+  metrics-config.yml: |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "629207be6bb388f68ff0088dcbc17c4577507b9a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ2MzM4MQ==", "bodyText": "Again, a link would be good.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533463381", "createdAt": "2020-12-01T14:44:29Z", "author": {"login": "tombentley"}, "path": "examples/metrics/kafka-metrics.yaml", "diffHunk": "@@ -170,41 +51,176 @@ spec:\n       type: persistent-claim\n       size: 100Gi\n       deleteClaim: false\n-    metrics:\n-      # Inspired by Zookeeper rules\n-      # https://github.com/prometheus/jmx_exporter/blob/master/example_configs/zookeeper.yaml\n-      lowercaseOutputName: true\n-      rules:\n-      # replicated Zookeeper\n-      - pattern: \"org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\\\d+)><>(\\\\w+)\"\n-        name: \"zookeeper_$2\"\n-        type: GAUGE\n-      - pattern: \"org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\\\d+), name1=replica.(\\\\d+)><>(\\\\w+)\"\n-        name: \"zookeeper_$3\"\n-        type: GAUGE\n-        labels:\n-          replicaId: \"$2\"\n-      - pattern: \"org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\\\d+), name1=replica.(\\\\d+), name2=(\\\\w+)><>(Packets\\\\w+)\"\n-        name: \"zookeeper_$4\"\n-        type: COUNTER\n-        labels:\n-          replicaId: \"$2\"\n-          memberType: \"$3\"\n-      - pattern: \"org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\\\d+), name1=replica.(\\\\d+), name2=(\\\\w+)><>(\\\\w+)\"\n-        name: \"zookeeper_$4\"\n-        type: GAUGE\n-        labels:\n-          replicaId: \"$2\"\n-          memberType: \"$3\"\n-      - pattern: \"org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\\\d+), name1=replica.(\\\\d+), name2=(\\\\w+), name3=(\\\\w+)><>(\\\\w+)\"\n-        name: \"zookeeper_$4_$5\"\n-        type: GAUGE\n-        labels:\n-          replicaId: \"$2\"\n-          memberType: \"$3\"\n+    metricsConfig:\n+      type: jmxPrometheusExporter\n+      valueFrom:\n+        configMapKeyRef:\n+          name: kafka-metrics\n+          key: zookeeper-metrics-config.yml\n   entityOperator:\n     topicOperator: {}\n     userOperator: {}\n   kafkaExporter:\n     topicRegex: \".*\"\n     groupRegex: \".*\"\n+---\n+kind: ConfigMap\n+apiVersion: v1\n+metadata:\n+  name: kafka-metrics\n+  labels:\n+    app: strimzi\n+data:\n+  kafka-metrics-config.yml: |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "629207be6bb388f68ff0088dcbc17c4577507b9a"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ2MzgwOQ==", "bodyText": "link", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533463809", "createdAt": "2020-12-01T14:44:46Z", "author": {"login": "tombentley"}, "path": "examples/metrics/kafka-mirror-maker-2-metrics.yaml", "diffHunk": "@@ -33,9 +33,21 @@ spec:\n           checkpoints.topic.replication.factor: 1\n       topicsPattern: \".*\"\n       groupsPattern: \".*\"\n-  metrics:\n-    # Inspired by kafka-connect rules\n-    # https://github.com/prometheus/jmx_exporter/blob/master/example_configs/kafka-connect.yml\n+  metricsConfig:\n+    type: jmxPrometheusExporter\n+    valueFrom:\n+      configMapKeyRef:\n+        name: mirror-maker-2-metrics\n+        key: metrics-config.yml\n+---\n+kind: ConfigMap\n+apiVersion: v1\n+metadata:\n+  name: mirror-maker-2-metrics\n+  labels:\n+    app: strimzi\n+data:\n+  metrics-config.yml: |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "629207be6bb388f68ff0088dcbc17c4577507b9a"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxOTcxMTgw", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#pullrequestreview-541971180", "createdAt": "2020-12-01T14:46:01Z", "commit": {"oid": "629207be6bb388f68ff0088dcbc17c4577507b9a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNDo0NjowMlrOH8wJqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNDo0NjowMlrOH8wJqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ2NTUxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |configMapKeyRef  1.2+<.<|Reference to the key in the ConfigMap containing the metrics configuration. See external documentation of https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#configmapkeyselector-v1-core[core/v1 configmapkeyselector].\n          \n          \n            \n            |configMapKeyRef  1.2+<.<|Reference to the key in the ConfigMap containing the metrics configuration. For more information, see the https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#configmapkeyselector-v1-core[external documentation for core/v1 configmapkeyselector].", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533465514", "createdAt": "2020-12-01T14:46:02Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/appendix_crds.adoc", "diffHunk": "@@ -1058,6 +1060,38 @@ It must have the value `password` for the type `KafkaJmxAuthenticationPassword`.\n |string\n |====\n \n+[id='type-JmxPrometheusExporterMetrics-{context}']\n+### `JmxPrometheusExporterMetrics` schema reference\n+\n+Used in: xref:type-CruiseControlSpec-{context}[`CruiseControlSpec`], xref:type-KafkaClusterSpec-{context}[`KafkaClusterSpec`], xref:type-KafkaConnectS2ISpec-{context}[`KafkaConnectS2ISpec`], xref:type-KafkaConnectSpec-{context}[`KafkaConnectSpec`], xref:type-KafkaMirrorMaker2Spec-{context}[`KafkaMirrorMaker2Spec`], xref:type-KafkaMirrorMakerSpec-{context}[`KafkaMirrorMakerSpec`], xref:type-ZookeeperClusterSpec-{context}[`ZookeeperClusterSpec`]\n+\n+\n+The `type` property is a discriminator that distinguishes the use of the type `JmxPrometheusExporterMetrics` from other subtypes which may be added in the future.\n+It must have the value `jmxPrometheusExporter` for the type `JmxPrometheusExporterMetrics`.\n+[options=\"header\"]\n+|====\n+|Property          |Description\n+|type       1.2+<.<|Must be `jmxPrometheusExporter`.\n+|string\n+|valueFrom  1.2+<.<|ConfigMap where Prometheus JMX Exporter configuration is stored. See https://github.com/prometheus/jmx_exporter for details of the structure of this configuration.\n+|xref:type-ExternalConfigurationMetrics-{context}[`ExternalConfigurationMetrics`]\n+|====\n+\n+[id='type-ExternalConfigurationMetrics-{context}']\n+### `ExternalConfigurationMetrics` schema reference\n+\n+Used in: xref:type-JmxPrometheusExporterMetrics-{context}[`JmxPrometheusExporterMetrics`]\n+\n+\n+[options=\"header\"]\n+|====\n+|Property                |Description\n+|configMapKeyRef  1.2+<.<|Reference to the key in the ConfigMap containing the metrics configuration. See external documentation of https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#configmapkeyselector-v1-core[core/v1 configmapkeyselector].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "629207be6bb388f68ff0088dcbc17c4577507b9a"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxOTgyNTAw", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#pullrequestreview-541982500", "createdAt": "2020-12-01T14:56:41Z", "commit": {"oid": "629207be6bb388f68ff0088dcbc17c4577507b9a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "629207be6bb388f68ff0088dcbc17c4577507b9a", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/629207be6bb388f68ff0088dcbc17c4577507b9a", "committedDate": "2020-11-24T14:56:57Z", "message": "rebasE\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "f1cb698a8586a6c8485151879552598aa65acc79", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/f1cb698a8586a6c8485151879552598aa65acc79", "committedDate": "2020-12-01T15:39:44Z", "message": "addressing comments\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMzEwMDgy", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#pullrequestreview-542310082", "createdAt": "2020-12-01T21:27:35Z", "commit": {"oid": "f1cb698a8586a6c8485151879552598aa65acc79"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMToyNzozNVrOH9AbtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTozNjoxMFrOH9AtTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzczMjI3Nw==", "bodyText": "\"Exporter\"", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533732277", "createdAt": "2020-12-01T21:27:35Z", "author": {"login": "ppatierno"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/JmxPrometheusExporterMetrics.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.api.kafka.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import io.strimzi.crdgenerator.annotations.Description;\n+import io.sundr.builder.annotations.Buildable;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * JMX Prometheus metrics config", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1cb698a8586a6c8485151879552598aa65acc79"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzczNDI4NA==", "bodyText": "why in the previous YAML, the metrics: {} was not replaced by just deleted?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533734284", "createdAt": "2020-12-01T21:31:21Z", "author": {"login": "ppatierno"}, "path": "api/src/test/resources/io/strimzi/api/kafka/model/KafkaV1alpha1.yaml", "diffHunk": "@@ -147,7 +136,12 @@ spec:\n       -Xms: \"512Mi\"\n     storage:\n       type: ephemeral\n-    metrics: {}\n+    metricsConfig:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1cb698a8586a6c8485151879552598aa65acc79"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzczNjc4Mg==", "bodyText": "I was wondering if we really still need the isMetricsEnabled when everything depends on the metrics field. If the field is not specified it just means no metrics. Or there is something missing  why it's still needed?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533736782", "createdAt": "2020-12-01T21:36:10Z", "author": {"login": "ppatierno"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java", "diffHunk": "@@ -516,21 +522,63 @@ protected String maybeAddMonitorIntervalToExternalLogging(String data) {\n     /**\n      * Generates a metrics and logging ConfigMap according to configured defaults.\n      *\n-     * @param externalConfigMap The ConfigMap used if Logging is an instance of ExternalLogging\n+     * @param externalLoggingConfigMap The ConfigMap used if Logging is an instance of ExternalLogging\n+     * @param externalMetricsConfigMap The ConfigMap used if Metrics is an instance of ExternalMetrics\n      * @return The generated ConfigMap.\n      */\n-    public ConfigMap generateMetricsAndLogConfigMap(ConfigMap externalConfigMap) {\n+    public ConfigMap generateMetricsAndLogConfigMap(ConfigMap externalLoggingConfigMap, ConfigMap externalMetricsConfigMap) {\n         Map<String, String> data = new HashMap<>(2);\n-        data.put(getAncillaryConfigMapKeyLogConfig(), parseLogging(getLogging(), externalConfigMap));\n-        if (isMetricsEnabled() && getMetricsConfig() != null) {\n+        data.put(getAncillaryConfigMapKeyLogConfig(), parseLogging(getLogging(), externalLoggingConfigMap));\n+        if (getMetricsConfigInCm() != null || (isMetricsEnabled() && getMetricsConfig() != null)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1cb698a8586a6c8485151879552598aa65acc79"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMzI1MTAx", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#pullrequestreview-542325101", "createdAt": "2020-12-01T21:50:07Z", "commit": {"oid": "f1cb698a8586a6c8485151879552598aa65acc79"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTo1MDowN1rOH9BJdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTo1MDo1NlrOH9BLLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0Mzk4OQ==", "bodyText": "The @PresentInVersions(\"v1alpha1-v1beta1\") needs to be added everywhere ;-)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533743989", "createdAt": "2020-12-01T21:50:07Z", "author": {"login": "scholzj"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/CruiseControlSpec.java", "diffHunk": "@@ -96,6 +98,8 @@ public void setConfig(Map<String, Object> config) {\n         this.config = config;\n     }\n \n+    @DeprecatedProperty(movedToPath = \"spec.cruiseControl.metricsConfig\")\n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1cb698a8586a6c8485151879552598aa65acc79"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0NDI3NA==", "bodyText": "@PresentInVersions(\"v1alpha1-v1beta1\")", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533744274", "createdAt": "2020-12-01T21:50:37Z", "author": {"login": "scholzj"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaClusterSpec.java", "diffHunk": "@@ -234,6 +235,8 @@ public void setJmxOptions(KafkaJmxOptions jmxOptions) {\n         this.jmxOptions = jmxOptions;\n     }\n \n+    @DeprecatedProperty(movedToPath = \"spec.kafka.metricsConfig\")\n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1cb698a8586a6c8485151879552598aa65acc79"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0NDMzOA==", "bodyText": "@PresentInVersions(\"v1alpha1-v1beta1\")", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533744338", "createdAt": "2020-12-01T21:50:44Z", "author": {"login": "scholzj"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaMirrorMakerSpec.java", "diffHunk": "@@ -121,6 +122,8 @@ public void setProducer(KafkaMirrorMakerProducerSpec producer) {\n         this.producer = producer;\n     }\n \n+    @DeprecatedProperty(movedToPath = \"spec.metricsConfig\")\n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1cb698a8586a6c8485151879552598aa65acc79"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0NDQyOQ==", "bodyText": "@PresentInVersions(\"v1alpha1-v1beta1\")", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533744429", "createdAt": "2020-12-01T21:50:56Z", "author": {"login": "scholzj"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/ZookeeperClusterSpec.java", "diffHunk": "@@ -177,6 +178,8 @@ public void setJvmOptions(JvmOptions jvmOptions) {\n         this.jvmOptions = jvmOptions;\n     }\n \n+    @DeprecatedProperty(movedToPath = \"spec.zookeeper.metricsConfig\")\n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1cb698a8586a6c8485151879552598aa65acc79"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "033a0f86089c1611dadac8682863f91b8ccda237", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/033a0f86089c1611dadac8682863f91b8ccda237", "committedDate": "2020-12-02T07:59:18Z", "message": "init\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f711abfd8cd80de0293efd7a38aa13a850e699c", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/4f711abfd8cd80de0293efd7a38aa13a850e699c", "committedDate": "2020-12-02T07:59:56Z", "message": "tests\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23aa595d1e4ea52c090cb24f30071646cdf092f4", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/23aa595d1e4ea52c090cb24f30071646cdf092f4", "committedDate": "2020-12-02T07:59:59Z", "message": "changelog\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9dc997cc4e9151553ac9bc53a185f6401e773e93", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/9dc997cc4e9151553ac9bc53a185f6401e773e93", "committedDate": "2020-12-02T07:59:59Z", "message": "weird fixes\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87bcf542546a523fe5fc892f8883ee57175ce883", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/87bcf542546a523fe5fc892f8883ee57175ce883", "committedDate": "2020-12-02T08:00:14Z", "message": "preserve compatibility\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90a5adab1baa82f4dc607c2c44154436a6434864", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/90a5adab1baa82f4dc607c2c44154436a6434864", "committedDate": "2020-12-02T08:00:17Z", "message": "reverting tests\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16d92f8ee48e5cb66ba5391486a8827031381e88", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/16d92f8ee48e5cb66ba5391486a8827031381e88", "committedDate": "2020-12-02T08:00:17Z", "message": "revert indent\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdfe2eff67f287cbd722621b2eb0e396a60a89a9", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/bdfe2eff67f287cbd722621b2eb0e396a60a89a9", "committedDate": "2020-12-02T08:00:17Z", "message": "sb\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42968b0741bbb73f240fa5a8a63e0bd69387308a", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/42968b0741bbb73f240fa5a8a63e0bd69387308a", "committedDate": "2020-12-02T08:00:18Z", "message": "Tom's suggestion\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f8a7515b8a13feee727c744057c0fe0d97908a1", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3f8a7515b8a13feee727c744057c0fe0d97908a1", "committedDate": "2020-12-02T08:00:18Z", "message": "fix\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1afe7c7de587243eba6bb005427f59dba5d25b7", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/f1afe7c7de587243eba6bb005427f59dba5d25b7", "committedDate": "2020-12-02T08:00:18Z", "message": "fix\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54ae7bb63fa16abc226113d377ab6fbea12d0708", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/54ae7bb63fa16abc226113d377ab6fbea12d0708", "committedDate": "2020-12-02T08:00:18Z", "message": "rename\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05e1d7fccf665ae2041fb6bf6928245cb4982324", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/05e1d7fccf665ae2041fb6bf6928245cb4982324", "committedDate": "2020-12-02T08:00:47Z", "message": "tests + mm2\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bc6f9a59fd572e4389fb7da79ebb517fc5d2552", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3bc6f9a59fd572e4389fb7da79ebb517fc5d2552", "committedDate": "2020-12-02T08:00:50Z", "message": "ST\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7648ecbd575a7869ed6422561fedd013edab1ce3", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/7648ecbd575a7869ed6422561fedd013edab1ce3", "committedDate": "2020-12-02T08:00:50Z", "message": "adjust STs to use cm\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2313e4d9c7f52000db959d10a746584a06525bd6", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/2313e4d9c7f52000db959d10a746584a06525bd6", "committedDate": "2020-12-02T08:00:50Z", "message": "ribejs\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7fb50810f9ad984947afb2422677b93674209100", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/7fb50810f9ad984947afb2422677b93674209100", "committedDate": "2020-12-02T08:00:50Z", "message": "api ITs\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b739519a8d8d5242c09678a28e9433e886ef2df4", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b739519a8d8d5242c09678a28e9433e886ef2df4", "committedDate": "2020-12-02T08:00:50Z", "message": "improvements + st\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d32da60e04a5cad390433a7bea5eed61fbdbf063", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d32da60e04a5cad390433a7bea5eed61fbdbf063", "committedDate": "2020-12-02T08:00:50Z", "message": "phew\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c55f710b1fc0f6fd62486c0490483033b80cfc4", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/9c55f710b1fc0f6fd62486c0490483033b80cfc4", "committedDate": "2020-12-02T08:00:50Z", "message": "fixes\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee6077e5c4980b683e9531ec20031e8f4632a327", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ee6077e5c4980b683e9531ec20031e8f4632a327", "committedDate": "2020-12-02T08:00:50Z", "message": "rebasE\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63ecdf5959e41ab70efb761aea1044af4bfe8610", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/63ecdf5959e41ab70efb761aea1044af4bfe8610", "committedDate": "2020-12-02T08:00:50Z", "message": "addressing comments\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99b3f46934588f69292a2b6ed56fbf2e65721cc0", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/99b3f46934588f69292a2b6ed56fbf2e65721cc0", "committedDate": "2020-12-02T09:28:01Z", "message": "rebase + comments\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f1cb698a8586a6c8485151879552598aa65acc79", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/f1cb698a8586a6c8485151879552598aa65acc79", "committedDate": "2020-12-01T15:39:44Z", "message": "addressing comments\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "99b3f46934588f69292a2b6ed56fbf2e65721cc0", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/99b3f46934588f69292a2b6ed56fbf2e65721cc0", "committedDate": "2020-12-02T09:28:01Z", "message": "rebase + comments\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19fad3458dd3392b905f0df9d858136f685707b8", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/19fad3458dd3392b905f0df9d858136f685707b8", "committedDate": "2020-12-02T10:47:36Z", "message": "fix\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "280d048c6c78dc6a163f122cbf4b7d1c505ae9ed", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/280d048c6c78dc6a163f122cbf4b7d1c505ae9ed", "committedDate": "2020-12-02T10:14:14Z", "message": "fix\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "19fad3458dd3392b905f0df9d858136f685707b8", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/19fad3458dd3392b905f0df9d858136f685707b8", "committedDate": "2020-12-02T10:47:36Z", "message": "fix\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMDQ4ODU5", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#pullrequestreview-543048859", "createdAt": "2020-12-02T17:02:43Z", "commit": {"oid": "19fad3458dd3392b905f0df9d858136f685707b8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMDY1MzU1", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#pullrequestreview-543065355", "createdAt": "2020-12-02T17:20:27Z", "commit": {"oid": "19fad3458dd3392b905f0df9d858136f685707b8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMjQwMTUz", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#pullrequestreview-543240153", "createdAt": "2020-12-02T21:11:44Z", "commit": {"oid": "19fad3458dd3392b905f0df9d858136f685707b8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMzI5OTcw", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#pullrequestreview-543329970", "createdAt": "2020-12-02T23:43:15Z", "commit": {"oid": "19fad3458dd3392b905f0df9d858136f685707b8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 846, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}