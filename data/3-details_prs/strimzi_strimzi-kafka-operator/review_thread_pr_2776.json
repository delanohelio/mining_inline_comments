{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MjQzNTMz", "number": 2776, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTowODo1OFrODt3TMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTowODo1OFrODt3TMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDE4NTQ2OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/StUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTowODo1OFrOF_iIow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTowODo1OFrOF_iIow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2Mzg3NQ==", "bodyText": "This should be in test, not in utils class", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2776#discussion_r402163875", "createdAt": "2020-04-02T09:08:58Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/StUtils.java", "diffHunk": "@@ -125,11 +126,13 @@ private static String buildTag(String currentTag) {\n         return testEnvs;\n     }\n \n-    public static void checkCologForUsedVariable(String varName) {\n-        LOGGER.info(\"Check if ClusterOperator logs already defined variable occurrence\");\n-        String coLog = kubeClient().logs(kubeClient().listPodNames(\"name\", \"strimzi-cluster-operator\").get(0));\n-        assertThat(coLog.contains(\"User defined container template environment variable \" + varName + \" is already in use and will be ignored\"), is(true));\n-        LOGGER.info(\"ClusterOperator logs contains proper warning\");\n+    public static void checkEnvVarInPod(String podName, String envVarName, String value) {\n+        LOGGER.info(\"Check if actual env variable {} has different value than {}\", envVarName, value);\n+        String actualValue = kubeClient().getPod(podName).getSpec().getContainers().get(0).getEnv()\n+                .stream().filter(envVar -> envVar.getName().equals(envVarName)).findFirst().get().getValue();\n+\n+        assertThat(actualValue, is(not(value)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3603887ee54c63e5ab1a9f41ee0bc50c8b206ec"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 391, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}