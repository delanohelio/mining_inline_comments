{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwNzQ2MDI0", "number": 4114, "title": "feat: Add annotations to perform connector/task restart operations", "bodyText": "Type of change\n\nEnhancement / new feature\n\nDescription\nThis PR implements the first part of the 'Restarting Kafka Connect connectors and tasks' proposal (https://github.com/strimzi/proposals/blob/master/007-restarting-kafka-connect-connectors-and-tasks.md),\nadding new annotations that cause the operator to restart connectors or tasks. The annotations can be applied to the KafkaConnector, and the KafkaMirrorMaker2 custom resources. The annotation acts as a trigger for a single restart call\nby the operator, and is removed from the CR when the restart REST API call is successfully called.\nChecklist\nPlease go through this checklist and make sure all applicable tasks have been done\n\n Write tests\n Make sure all tests pass\n Update documentation\n Check RBAC rights for Kubernetes / OpenShift roles\n Try your changes from Pod inside your Kubernetes and OpenShift cluster, not just locally\n Reference relevant issue(s) and close them after merging\n Update CHANGELOG.md\n Supply screenshots for visual changes, such as Grafana dashboards", "createdAt": "2020-12-15T21:59:55Z", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4114", "merged": true, "mergeCommit": {"oid": "c292f1ef27fa493d163e8f7bfad4071a9b82e15c"}, "closed": true, "closedAt": "2021-01-12T16:01:05Z", "author": {"login": "ajborley"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmjvl0gFqTU1MzE2Mzg0NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdvX70lABqjQxOTQ5MzcyMTQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzMTYzODQ0", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4114#pullrequestreview-553163844", "createdAt": "2020-12-16T00:22:25Z", "commit": {"oid": "eefc53e1a41f5a2dc0b1796298823d42f93b9519"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMDoyMjoyNVrOIGl9_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMDoyMjoyNVrOIGl9_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc4NDQ0Ng==", "bodyText": "Not sure I understand why do we call this at the end. Could you please explain?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4114#discussion_r543784446", "createdAt": "2020-12-16T00:22:25Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/AbstractConnectOperator.java", "diffHunk": "@@ -563,6 +566,91 @@ private boolean needsReconfiguring(Reconciliation reconciliation, String connect\n         }\n     }\n \n+    private Future<Map<String, Object>> maybeRestartConnector(Reconciliation reconciliation, String host, KafkaConnectApi apiClient, String connectorName, CustomResource resource, Map<String, Object> status) {\n+        if (hasRestartAnnotation(resource, connectorName)) {\n+            log.debug(\"{}: Restarting connector {}\", reconciliation, connectorName);\n+            return apiClient.restart(host, port, connectorName)\n+                    .compose(ignored -> removeRestartAnnotation(reconciliation, resource),\n+                        throwable -> {\n+                            // Ignore restart failures - just try again on the next reconcile\n+                            log.warn(\"{}: Failed to restart connector {}. {}\", reconciliation, connectorName, throwable.getMessage());\n+                            return Future.succeededFuture();\n+                        })\n+                    .compose(ignored -> apiClient.statusWithBackOff(new BackOff(200L, 2, 10), host, port,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eefc53e1a41f5a2dc0b1796298823d42f93b9519"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNTI3ODQw", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4114#pullrequestreview-553527840", "createdAt": "2020-12-16T10:01:29Z", "commit": {"oid": "eefc53e1a41f5a2dc0b1796298823d42f93b9519"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMDowMToyOVrOIG9Q1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMDowNDowNVrOIG9XrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE2NjEwMg==", "bodyText": "I wonder if we should support a list of ids. It would make it simpler to restart several failed tasks.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4114#discussion_r544166102", "createdAt": "2020-12-16T10:01:29Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/AbstractConnectOperator.java", "diffHunk": "@@ -563,6 +566,91 @@ private boolean needsReconfiguring(Reconciliation reconciliation, String connect\n         }\n     }\n \n+    private Future<Map<String, Object>> maybeRestartConnector(Reconciliation reconciliation, String host, KafkaConnectApi apiClient, String connectorName, CustomResource resource, Map<String, Object> status) {\n+        if (hasRestartAnnotation(resource, connectorName)) {\n+            log.debug(\"{}: Restarting connector {}\", reconciliation, connectorName);\n+            return apiClient.restart(host, port, connectorName)\n+                    .compose(ignored -> removeRestartAnnotation(reconciliation, resource),\n+                        throwable -> {\n+                            // Ignore restart failures - just try again on the next reconcile\n+                            log.warn(\"{}: Failed to restart connector {}. {}\", reconciliation, connectorName, throwable.getMessage());\n+                            return Future.succeededFuture();\n+                        })\n+                    .compose(ignored -> apiClient.statusWithBackOff(new BackOff(200L, 2, 10), host, port,\n+                        connectorName));\n+        } else {\n+            return Future.succeededFuture(status);\n+        }\n+    }\n+\n+    private Future<Map<String, Object>> maybeRestartConnectorTask(Reconciliation reconciliation, String host, KafkaConnectApi apiClient, String connectorName, CustomResource resource, Map<String, Object> status) {\n+        int taskID = getRestartTaskAnnotationTaskID(resource, connectorName);\n+        if (taskID >= 0) {\n+            log.debug(\"{}: Restarting connector task {}:{}\", reconciliation, connectorName, taskID);\n+            return apiClient.restartTask(host, port, connectorName, taskID)\n+                    .compose(ignored -> removeRestartTaskAnnotation(reconciliation, resource),\n+                        throwable -> {\n+                            // Ignore restart failures - just try again on the next reconcile\n+                            log.warn(\"{}: Failed to restart connector task {}:{}. {}\", reconciliation, connectorName, taskID, throwable.getMessage());\n+                            return Future.succeededFuture();\n+                        })\n+                    .compose(ignored -> apiClient.statusWithBackOff(new BackOff(200L, 2, 10), host, port,\n+                        connectorName));\n+        } else {\n+            return Future.succeededFuture(status);\n+        }\n+    }\n+\n+    /**\n+     * Whether the provided resource instance is a KafkaConnector and has the strimzi.io/restart annotation\n+     *\n+     * @param resource resource instance to check\n+     * @param resource connectorName name of the connector to check\n+     * @return true if the provided resource instance has the strimzi.io/restart annotation; false otherwise\n+     */\n+    protected boolean hasRestartAnnotation(CustomResource resource, String connectorName) {\n+        return Annotations.booleanAnnotation(resource, ANNO_STRIMZI_IO_RESTART, false);\n+    }\n+\n+    /**\n+     * Return the ID of the connector task to be restarted if the provided KafkaConnector resource instance has the strimzio.io/restart-task annotation\n+     *\n+     * @param resource resource instance to check\n+     * @param connectorName KafkaConnector resource instance to check\n+     * @return the ID of the task to be restarted if the provided KafkaConnector resource instance has the strimzio.io/restart-task annotation or -1 otherwise.\n+     */\n+    protected int getRestartTaskAnnotationTaskID(CustomResource resource, String connectorName) {\n+        return Annotations.intAnnotation(resource, ANNO_STRIMZI_IO_RESTART_TASK, -1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eefc53e1a41f5a2dc0b1796298823d42f93b9519"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE2Nzg1Mw==", "bodyText": "I'm guessing because ultimately maybeCreateOrUpdateConnector needs to return the status. But it would probably be better to make pauseResume, maybeRestartConnector and maybeRestartConnectorTask all return Future<Void> and make the call the apiClient.statusWithBackOff directly from maybeCreateOrUpdateConnector.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4114#discussion_r544167853", "createdAt": "2020-12-16T10:04:05Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/AbstractConnectOperator.java", "diffHunk": "@@ -563,6 +566,91 @@ private boolean needsReconfiguring(Reconciliation reconciliation, String connect\n         }\n     }\n \n+    private Future<Map<String, Object>> maybeRestartConnector(Reconciliation reconciliation, String host, KafkaConnectApi apiClient, String connectorName, CustomResource resource, Map<String, Object> status) {\n+        if (hasRestartAnnotation(resource, connectorName)) {\n+            log.debug(\"{}: Restarting connector {}\", reconciliation, connectorName);\n+            return apiClient.restart(host, port, connectorName)\n+                    .compose(ignored -> removeRestartAnnotation(reconciliation, resource),\n+                        throwable -> {\n+                            // Ignore restart failures - just try again on the next reconcile\n+                            log.warn(\"{}: Failed to restart connector {}. {}\", reconciliation, connectorName, throwable.getMessage());\n+                            return Future.succeededFuture();\n+                        })\n+                    .compose(ignored -> apiClient.statusWithBackOff(new BackOff(200L, 2, 10), host, port,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc4NDQ0Ng=="}, "originalCommit": {"oid": "eefc53e1a41f5a2dc0b1796298823d42f93b9519"}, "originalPosition": 56}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eefc53e1a41f5a2dc0b1796298823d42f93b9519", "author": {"user": {"login": "ajborley", "name": "Andrew Borley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/eefc53e1a41f5a2dc0b1796298823d42f93b9519", "committedDate": "2020-12-15T21:54:24Z", "message": "feat: Add annotations to perform connector/task restart operations\n\n - This commit implements the first part of the 'Restarting Kafka\nConnect connectors and tasks' proposal\n(https://github.com/strimzi/proposals), adding new annotations that\ncause the operator to restart connectors or tasks. The annotations can\nbe applied to the KafkaConnector, and the KafkaMirrorMaker2 custom\nresources. The annotation acts as a trigger for a single restart call\nby the operator, and is removed from the CR when the restart REST API\ncall is successfully called.\n\nSigned-off-by: Andrew Borley <borley@uk.ibm.com>"}, "afterCommit": {"oid": "40ab8eda1e05204d00ecf60fc09e34720706710b", "author": {"user": {"login": "ajborley", "name": "Andrew Borley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/40ab8eda1e05204d00ecf60fc09e34720706710b", "committedDate": "2020-12-16T22:27:54Z", "message": "Address review comments\n\n - Add doc, CHANGELOG\n - Reduce calls to connector status.\n\nSigned-off-by: Andrew Borley <borley@uk.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0Mzc4MjEx", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4114#pullrequestreview-554378211", "createdAt": "2020-12-17T08:35:26Z", "commit": {"oid": "40ab8eda1e05204d00ecf60fc09e34720706710b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwODozNToyN1rOIHqQ1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwODozNToyN1rOIHqQ1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkwMzM4Mg==", "bodyText": "I have my doubts about this, particularly in the case that the connector task doesn't exist (i.e. bad id, presumably an http 404). If it's only in the logs then the user might not realise why the annotation wasn't removed. For transient errors it will likely succeed, so leaving it in the annotation for another try is not a bad idea. But for permanent errors like non-existence its more of a problem, especially if the user doesn't have access to the logs. I think we should propagate the error as a warning in the status.\nThe error case doesn't seem to be covered by the tests.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4114#discussion_r544903382", "createdAt": "2020-12-17T08:35:27Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/AbstractConnectOperator.java", "diffHunk": "@@ -544,25 +549,98 @@ private boolean needsReconfiguring(Reconciliation reconciliation, String connect\n             boolean shouldPause = Boolean.TRUE.equals(connectorSpec.getPause());\n             if (\"RUNNING\".equals(state) && shouldPause) {\n                 log.debug(\"{}: Pausing connector {}\", reconciliation, connectorName);\n-                return apiClient.pause(host, port,\n-                        connectorName)\n-                        .compose(ignored ->\n-                                apiClient.status(host, port,\n-                                        connectorName));\n+                return apiClient.pause(host, port, connectorName);\n             } else if (\"PAUSED\".equals(state) && !shouldPause) {\n                 log.debug(\"{}: Resuming connector {}\", reconciliation, connectorName);\n-                return apiClient.resume(host, port,\n-                        connectorName)\n-                        .compose(ignored ->\n-                                apiClient.status(host, port,\n-                                        connectorName));\n-\n+                return apiClient.resume(host, port, connectorName);\n             } else {\n-                return Future.succeededFuture(status);\n+                return Future.succeededFuture();\n             }\n         }\n     }\n \n+    private Future<Void> maybeRestartConnector(Reconciliation reconciliation, String host, KafkaConnectApi apiClient, String connectorName, CustomResource resource) {\n+        if (hasRestartAnnotation(resource, connectorName)) {\n+            log.debug(\"{}: Restarting connector {}\", reconciliation, connectorName);\n+            return apiClient.restart(host, port, connectorName)\n+                    .compose(ignored -> removeRestartAnnotation(reconciliation, resource),\n+                        throwable -> {\n+                            // Ignore restart failures - just try again on the next reconcile\n+                            log.warn(\"{}: Failed to restart connector {}. {}\", reconciliation, connectorName, throwable.getMessage());\n+                            return Future.succeededFuture();\n+                        });\n+        } else {\n+            return Future.succeededFuture();\n+        }\n+    }\n+\n+    private Future<Void> maybeRestartConnectorTask(Reconciliation reconciliation, String host, KafkaConnectApi apiClient, String connectorName, CustomResource resource) {\n+        int taskID = getRestartTaskAnnotationTaskID(resource, connectorName);\n+        if (taskID >= 0) {\n+            log.debug(\"{}: Restarting connector task {}:{}\", reconciliation, connectorName, taskID);\n+            return apiClient.restartTask(host, port, connectorName, taskID)\n+                    .compose(ignored -> removeRestartTaskAnnotation(reconciliation, resource),\n+                        throwable -> {\n+                            // Ignore restart failures - just try again on the next reconcile\n+                            log.warn(\"{}: Failed to restart connector task {}:{}. {}\", reconciliation, connectorName, taskID, throwable.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40ab8eda1e05204d00ecf60fc09e34720706710b"}, "originalPosition": 110}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1MDA0ODY5", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4114#pullrequestreview-555004869", "createdAt": "2020-12-17T21:33:06Z", "commit": {"oid": "e3717e20dd2aa7ea9c78fa0d4dd13f282c20ba76"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMTozMzowNlrOIIJoRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMTozMzowNlrOIIJoRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQxNzI4Ng==", "bodyText": "Was it intentional to remove include::modules/proc-deploying-kafkaconnector.adoc[leveloffset=+1]? I do not see it included anywhere else.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4114#discussion_r545417286", "createdAt": "2020-12-17T21:33:06Z", "author": {"login": "scholzj"}, "path": "documentation/assemblies/deploying/assembly-deploy-kafka-connect.adoc", "diffHunk": "@@ -34,5 +36,7 @@ include::../../modules/configuring/con-config-kafka-connect-multiple-instances.a\n include::assembly-deploy-kafka-connect-with-plugins.adoc[leveloffset=+1]\n //Overview of creating connectors through API\n include::modules/con-deploy-kafka-connect-managing-connectors.adoc[leveloffset=+1]\n-//Procedure to deploy a KafkaConnector resource\n-include::modules/proc-deploying-kafkaconnector.adoc[leveloffset=+1]\n+//Procedure to restart a Kafka connector\n+include::../../modules/proc-manual-restart-connector.adoc[leveloffset=+1]\n+//Procedure to restart a Kafka connector task\n+include::../../modules/proc-manual-restart-connector-task.adoc[leveloffset=+1]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3717e20dd2aa7ea9c78fa0d4dd13f282c20ba76"}, "originalPosition": 18}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e3717e20dd2aa7ea9c78fa0d4dd13f282c20ba76", "author": {"user": {"login": "ajborley", "name": "Andrew Borley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/e3717e20dd2aa7ea9c78fa0d4dd13f282c20ba76", "committedDate": "2020-12-17T09:28:18Z", "message": "Fix doc references\n\nSigned-off-by: Andrew Borley <borley@uk.ibm.com>"}, "afterCommit": {"oid": "456fe3e859f265ed7d0d6cfa7ffc38fbb1e91fe7", "author": {"user": {"login": "ajborley", "name": "Andrew Borley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/456fe3e859f265ed7d0d6cfa7ffc38fbb1e91fe7", "committedDate": "2020-12-23T15:38:15Z", "message": "Add warning condition to status on restart failure\n\n- Also fix accidental doc deletion.\n\nSigned-off-by: Andrew Borley <borley@uk.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4Njc5NTQ5", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4114#pullrequestreview-558679549", "createdAt": "2020-12-24T16:27:09Z", "commit": {"oid": "456fe3e859f265ed7d0d6cfa7ffc38fbb1e91fe7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwODY4NzEy", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4114#pullrequestreview-560868712", "createdAt": "2021-01-04T09:05:12Z", "commit": {"oid": "456fe3e859f265ed7d0d6cfa7ffc38fbb1e91fe7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwOTowNToxMlrOINp7nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwOTowNToxMlrOINp7nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE4OTQwNQ==", "bodyText": "Needs amending", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4114#discussion_r551189405", "createdAt": "2021-01-04T09:05:12Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/AbstractConnectOperator.java", "diffHunk": "@@ -476,28 +480,34 @@ protected KafkaConnectApi getKafkaConnectApi() {\n      * @param apiClient The client instance.\n      * @param connectorName The connector name.\n      * @param connectorSpec The desired connector spec.\n+     * @param resource The resource that defines the connector.\n      * @return A Future whose result, when successfully completed, is a map of the current connector state.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "456fe3e859f265ed7d0d6cfa7ffc38fbb1e91fe7"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwODcwNDc2", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4114#pullrequestreview-560870476", "createdAt": "2021-01-04T09:08:03Z", "commit": {"oid": "456fe3e859f265ed7d0d6cfa7ffc38fbb1e91fe7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwOTowODowM1rOINqBBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwOTowODowM1rOINqBBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE5MDc4OA==", "bodyText": "I wonder if this should be restart-connector, so it's consistent with restart-task?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4114#discussion_r551190788", "createdAt": "2021-01-04T09:08:03Z", "author": {"login": "tombentley"}, "path": "documentation/modules/proc-manual-restart-connector.adoc", "diffHunk": "@@ -0,0 +1,27 @@\n+// Module included in the following assemblies:\n+//\n+//\n+\n+[id='proc-manual-restart-connector-{context}']\n+= Performing a restart of a Kafka connector\n+\n+This procedure describes how to manually trigger a restart of a Kafka connector by using a Kubernetes annotation.\n+\n+.Prerequisites\n+\n+* The Cluster Operator is running.\n+\n+.Procedure\n+\n+. Find the name of the `KafkaConnector` custom resource that controls the Kafka connector you want to restart:\n+[source,shell,subs=+quotes]\n+kubectl get KafkaConnector\n+\n+. To restart the connector, annotate the `KafkaConnector` resource in Kubernetes.\n+For example, using `kubectl annotate`:\n+[source,shell,subs=+quotes]\n+kubectl annotate KafkaConnector _KafkaConnector-name_ strimzi.io/restart=true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "456fe3e859f265ed7d0d6cfa7ffc38fbb1e91fe7"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwODcwOTQ3", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4114#pullrequestreview-560870947", "createdAt": "2021-01-04T09:08:49Z", "commit": {"oid": "456fe3e859f265ed7d0d6cfa7ffc38fbb1e91fe7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "456fe3e859f265ed7d0d6cfa7ffc38fbb1e91fe7", "author": {"user": {"login": "ajborley", "name": "Andrew Borley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/456fe3e859f265ed7d0d6cfa7ffc38fbb1e91fe7", "committedDate": "2020-12-23T15:38:15Z", "message": "Add warning condition to status on restart failure\n\n- Also fix accidental doc deletion.\n\nSigned-off-by: Andrew Borley <borley@uk.ibm.com>"}, "afterCommit": {"oid": "274a8cc494341c0ffb4a7cb6078f807a4cddee07", "author": {"user": {"login": "ajborley", "name": "Andrew Borley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/274a8cc494341c0ffb4a7cb6078f807a4cddee07", "committedDate": "2021-01-04T09:49:21Z", "message": "Update javadoc\n\nSigned-off-by: Andrew Borley <borley@uk.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0ODY5MTAx", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4114#pullrequestreview-564869101", "createdAt": "2021-01-10T14:31:04Z", "commit": {"oid": "274a8cc494341c0ffb4a7cb6078f807a4cddee07"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1dc869e95d532d127333919a73aba9e2428679e4", "author": {"user": {"login": "ajborley", "name": "Andrew Borley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/1dc869e95d532d127333919a73aba9e2428679e4", "committedDate": "2021-01-12T09:43:41Z", "message": "feat: Add annotations to perform connector/task restart operations\n\n - This commit implements the first part of the 'Restarting Kafka\nConnect connectors and tasks' proposal\n(https://github.com/strimzi/proposals), adding new annotations that\ncause the operator to restart connectors or tasks. The annotations can\nbe applied to the KafkaConnector, and the KafkaMirrorMaker2 custom\nresources. The annotation acts as a trigger for a single restart call\nby the operator, and is removed from the CR when the restart REST API\ncall is successfully called.\n\nSigned-off-by: Andrew Borley <borley@uk.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42cb464271fbcbf487b50193e3bac4abf5a09f3a", "author": {"user": {"login": "ajborley", "name": "Andrew Borley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/42cb464271fbcbf487b50193e3bac4abf5a09f3a", "committedDate": "2021-01-12T09:44:36Z", "message": "Address review comments\n\n - Add doc, CHANGELOG\n - Reduce calls to connector status.\n\nSigned-off-by: Andrew Borley <borley@uk.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0cc4a7873b9d4825fa1ed9eb9f5fa9e81f49f0c", "author": {"user": {"login": "ajborley", "name": "Andrew Borley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c0cc4a7873b9d4825fa1ed9eb9f5fa9e81f49f0c", "committedDate": "2021-01-12T09:44:36Z", "message": "Fix doc references\n\nSigned-off-by: Andrew Borley <borley@uk.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0c99b14b0c611871f26d6f1bd06e7eb1aedfc4d", "author": {"user": {"login": "ajborley", "name": "Andrew Borley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c0c99b14b0c611871f26d6f1bd06e7eb1aedfc4d", "committedDate": "2021-01-12T09:44:36Z", "message": "Add warning condition to status on restart failure\n\n- Also fix accidental doc deletion.\n\nSigned-off-by: Andrew Borley <borley@uk.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d81b208092cf7f806f5b4a8465aee7dfe26004fe", "author": {"user": {"login": "ajborley", "name": "Andrew Borley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d81b208092cf7f806f5b4a8465aee7dfe26004fe", "committedDate": "2021-01-12T09:44:36Z", "message": "Update javadoc\n\nSigned-off-by: Andrew Borley <borley@uk.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "274a8cc494341c0ffb4a7cb6078f807a4cddee07", "author": {"user": {"login": "ajborley", "name": "Andrew Borley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/274a8cc494341c0ffb4a7cb6078f807a4cddee07", "committedDate": "2021-01-04T09:49:21Z", "message": "Update javadoc\n\nSigned-off-by: Andrew Borley <borley@uk.ibm.com>"}, "afterCommit": {"oid": "d81b208092cf7f806f5b4a8465aee7dfe26004fe", "author": {"user": {"login": "ajborley", "name": "Andrew Borley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d81b208092cf7f806f5b4a8465aee7dfe26004fe", "committedDate": "2021-01-12T09:44:36Z", "message": "Update javadoc\n\nSigned-off-by: Andrew Borley <borley@uk.ibm.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 750, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}