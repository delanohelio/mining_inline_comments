{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0MDU2MzAz", "number": 3555, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzo1ODoxMlrOEcr5lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODowMzozMVrOEcsA-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTE0ODM3OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/annotations/RequiredMinKubeApiVersionCondition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzo1ODoxMlrOHHXZyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODozODoxMVrOHHYw1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ4NTUxNA==", "bodyText": "Guess you want to use there different log message.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3555#discussion_r477485514", "createdAt": "2020-08-26T17:58:12Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/annotations/RequiredMinKubeApiVersionCondition.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.annotations;\n+\n+import io.strimzi.test.k8s.KubeClusterResource;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.jupiter.api.extension.ConditionEvaluationResult;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+import java.util.Optional;\n+\n+import static org.junit.platform.commons.support.AnnotationSupport.findAnnotation;\n+\n+public class RequiredMinKubeApiVersionCondition implements ExecutionCondition {\n+    private static final Logger LOGGER = LogManager.getLogger(RequiredMinKubeApiVersionCondition.class);\n+\n+    @Override\n+    public ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext extensionContext) {\n+        Optional<RequiredMinKubeApiVersion> annotation = findAnnotation(extensionContext.getElement(), RequiredMinKubeApiVersion.class);\n+        KubeClusterResource clusterResource = KubeClusterResource.getInstance();\n+        double version = annotation.get().version();\n+\n+        if (Double.parseDouble(clusterResource.client().clusterKubernetesVersion()) >= version) {\n+            return ConditionEvaluationResult.enabled(\"Test is enabled\");\n+        } else {\n+            LOGGER.info(\"{} is @MultiNodeClusterOnly, but the running cluster is not multi-node cluster: Ignoring {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62ec650acadbc91ac8dc856c2499365573ac4e55"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUwNzc5OA==", "bodyText": "right, will fix it", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3555#discussion_r477507798", "createdAt": "2020-08-26T18:38:11Z", "author": {"login": "kornys"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/annotations/RequiredMinKubeApiVersionCondition.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.annotations;\n+\n+import io.strimzi.test.k8s.KubeClusterResource;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.jupiter.api.extension.ConditionEvaluationResult;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+import java.util.Optional;\n+\n+import static org.junit.platform.commons.support.AnnotationSupport.findAnnotation;\n+\n+public class RequiredMinKubeApiVersionCondition implements ExecutionCondition {\n+    private static final Logger LOGGER = LogManager.getLogger(RequiredMinKubeApiVersionCondition.class);\n+\n+    @Override\n+    public ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext extensionContext) {\n+        Optional<RequiredMinKubeApiVersion> annotation = findAnnotation(extensionContext.getElement(), RequiredMinKubeApiVersion.class);\n+        KubeClusterResource clusterResource = KubeClusterResource.getInstance();\n+        double version = annotation.get().version();\n+\n+        if (Double.parseDouble(clusterResource.client().clusterKubernetesVersion()) >= version) {\n+            return ConditionEvaluationResult.enabled(\"Test is enabled\");\n+        } else {\n+            LOGGER.info(\"{} is @MultiNodeClusterOnly, but the running cluster is not multi-node cluster: Ignoring {}\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ4NTUxNA=="}, "originalCommit": {"oid": "62ec650acadbc91ac8dc856c2499365573ac4e55"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTE0OTg5OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/annotations/RequiredMinKubeApiVersion.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzo1ODozNVrOHHXawA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODozNzo1OFrOHHYweA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ4NTc2MA==", "bodyText": "Wouldn't be better to use there real version instead of 0 ?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3555#discussion_r477485760", "createdAt": "2020-08-26T17:58:35Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/annotations/RequiredMinKubeApiVersion.java", "diffHunk": "@@ -0,0 +1,19 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.annotations;\n+\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+@Target({ElementType.METHOD, ElementType.TYPE})\n+@Retention(RetentionPolicy.RUNTIME)\n+@ExtendWith(RequiredMinKubeApiVersionCondition.class)\n+public @interface RequiredMinKubeApiVersion {\n+    double version() default 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62ec650acadbc91ac8dc856c2499365573ac4e55"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUwNzcwNA==", "bodyText": "impossible, you have to use constant value in annotation, so 0 is the best value I guess", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3555#discussion_r477507704", "createdAt": "2020-08-26T18:37:58Z", "author": {"login": "kornys"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/annotations/RequiredMinKubeApiVersion.java", "diffHunk": "@@ -0,0 +1,19 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.annotations;\n+\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+@Target({ElementType.METHOD, ElementType.TYPE})\n+@Retention(RetentionPolicy.RUNTIME)\n+@ExtendWith(RequiredMinKubeApiVersionCondition.class)\n+public @interface RequiredMinKubeApiVersion {\n+    double version() default 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ4NTc2MA=="}, "originalCommit": {"oid": "62ec650acadbc91ac8dc856c2499365573ac4e55"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTE1NTM5OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/specific/ClusterOperationST.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODowMDowNVrOHHXeNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODozODoyMVrOHHYxJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ4NjY0NA==", "bodyText": "We use indentation across whole project for piece of code like this. You should follow our current practice.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3555#discussion_r477486644", "createdAt": "2020-08-26T18:00:05Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/specific/ClusterOperationST.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.specific;\n+\n+import io.fabric8.kubernetes.api.model.Node;\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.systemtest.AbstractST;\n+import io.strimzi.systemtest.annotations.MultiNodeClusterOnly;\n+import io.strimzi.systemtest.annotations.RequiredMinKubeApiVersion;\n+import io.strimzi.systemtest.resources.ResourceManager;\n+import io.strimzi.systemtest.resources.crd.KafkaClientsResource;\n+import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.resources.operator.BundleResource;\n+import io.strimzi.systemtest.utils.ClientUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import static io.strimzi.systemtest.Constants.SPECIFIC;\n+import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+\n+@Tag(SPECIFIC)\n+public class ClusterOperationST extends AbstractST {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(ClusterOperationST.class);\n+    public static final String NAMESPACE = \"cluster-operations-test\";\n+\n+    @Test\n+    @MultiNodeClusterOnly\n+    @RequiredMinKubeApiVersion(version = 1.15)\n+    void testAvailabilityDuringNodeDrain() {\n+        List<String> topicNames = IntStream.range(0, 5).boxed().map(i -> \"test-topic-\" + i).collect(Collectors.toList());\n+        List<String> producerNames = IntStream.range(0, 5).boxed().map(i -> \"hello-world-producer-\" + i).collect(Collectors.toList());\n+        List<String> consumerNames = IntStream.range(0, 5).boxed().map(i -> \"hello-world-consumer-\" + i).collect(Collectors.toList());\n+        List<String> continuousConsumerGroups = IntStream.range(0, 5).boxed().map(i -> \"continuous-consumer-group-\" + i).collect(Collectors.toList());\n+        int continuousClientsMessageCount = 300;\n+        List<Node> nodes = kubeClient().getClusterWorkers();\n+\n+        KafkaResource.kafkaPersistent(CLUSTER_NAME, 3, 3)\n+                .editOrNewSpec()\n+                .editEntityOperator()\n+                .editUserOperator()\n+                .withReconciliationIntervalSeconds(30)\n+                .endUserOperator()\n+                .endEntityOperator()\n+                .endSpec()\n+                .done();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62ec650acadbc91ac8dc856c2499365573ac4e55"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUwNzg3Nw==", "bodyText": "weird, but I will fix it", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3555#discussion_r477507877", "createdAt": "2020-08-26T18:38:21Z", "author": {"login": "kornys"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/specific/ClusterOperationST.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.specific;\n+\n+import io.fabric8.kubernetes.api.model.Node;\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.systemtest.AbstractST;\n+import io.strimzi.systemtest.annotations.MultiNodeClusterOnly;\n+import io.strimzi.systemtest.annotations.RequiredMinKubeApiVersion;\n+import io.strimzi.systemtest.resources.ResourceManager;\n+import io.strimzi.systemtest.resources.crd.KafkaClientsResource;\n+import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.resources.operator.BundleResource;\n+import io.strimzi.systemtest.utils.ClientUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import static io.strimzi.systemtest.Constants.SPECIFIC;\n+import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+\n+@Tag(SPECIFIC)\n+public class ClusterOperationST extends AbstractST {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(ClusterOperationST.class);\n+    public static final String NAMESPACE = \"cluster-operations-test\";\n+\n+    @Test\n+    @MultiNodeClusterOnly\n+    @RequiredMinKubeApiVersion(version = 1.15)\n+    void testAvailabilityDuringNodeDrain() {\n+        List<String> topicNames = IntStream.range(0, 5).boxed().map(i -> \"test-topic-\" + i).collect(Collectors.toList());\n+        List<String> producerNames = IntStream.range(0, 5).boxed().map(i -> \"hello-world-producer-\" + i).collect(Collectors.toList());\n+        List<String> consumerNames = IntStream.range(0, 5).boxed().map(i -> \"hello-world-consumer-\" + i).collect(Collectors.toList());\n+        List<String> continuousConsumerGroups = IntStream.range(0, 5).boxed().map(i -> \"continuous-consumer-group-\" + i).collect(Collectors.toList());\n+        int continuousClientsMessageCount = 300;\n+        List<Node> nodes = kubeClient().getClusterWorkers();\n+\n+        KafkaResource.kafkaPersistent(CLUSTER_NAME, 3, 3)\n+                .editOrNewSpec()\n+                .editEntityOperator()\n+                .editUserOperator()\n+                .withReconciliationIntervalSeconds(30)\n+                .endUserOperator()\n+                .endEntityOperator()\n+                .endSpec()\n+                .done();\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ4NjY0NA=="}, "originalCommit": {"oid": "62ec650acadbc91ac8dc856c2499365573ac4e55"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTE2MjA1OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/specific/ClusterOperationST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODowMTo1NFrOHHXibg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODowMTo1NFrOHHXibg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ4NzcyNg==", "bodyText": "Just a note: this is used to kinda simulate worse environment for clients cause we already had issues, that tests were green, but users were able to hit issues with producers and lost messages.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3555#discussion_r477487726", "createdAt": "2020-08-26T18:01:54Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/specific/ClusterOperationST.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.specific;\n+\n+import io.fabric8.kubernetes.api.model.Node;\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.systemtest.AbstractST;\n+import io.strimzi.systemtest.annotations.MultiNodeClusterOnly;\n+import io.strimzi.systemtest.annotations.RequiredMinKubeApiVersion;\n+import io.strimzi.systemtest.resources.ResourceManager;\n+import io.strimzi.systemtest.resources.crd.KafkaClientsResource;\n+import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.resources.operator.BundleResource;\n+import io.strimzi.systemtest.utils.ClientUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import static io.strimzi.systemtest.Constants.SPECIFIC;\n+import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+\n+@Tag(SPECIFIC)\n+public class ClusterOperationST extends AbstractST {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(ClusterOperationST.class);\n+    public static final String NAMESPACE = \"cluster-operations-test\";\n+\n+    @Test\n+    @MultiNodeClusterOnly\n+    @RequiredMinKubeApiVersion(version = 1.15)\n+    void testAvailabilityDuringNodeDrain() {\n+        List<String> topicNames = IntStream.range(0, 5).boxed().map(i -> \"test-topic-\" + i).collect(Collectors.toList());\n+        List<String> producerNames = IntStream.range(0, 5).boxed().map(i -> \"hello-world-producer-\" + i).collect(Collectors.toList());\n+        List<String> consumerNames = IntStream.range(0, 5).boxed().map(i -> \"hello-world-consumer-\" + i).collect(Collectors.toList());\n+        List<String> continuousConsumerGroups = IntStream.range(0, 5).boxed().map(i -> \"continuous-consumer-group-\" + i).collect(Collectors.toList());\n+        int continuousClientsMessageCount = 300;\n+        List<Node> nodes = kubeClient().getClusterWorkers();\n+\n+        KafkaResource.kafkaPersistent(CLUSTER_NAME, 3, 3)\n+                .editOrNewSpec()\n+                .editEntityOperator()\n+                .editUserOperator()\n+                .withReconciliationIntervalSeconds(30)\n+                .endUserOperator()\n+                .endEntityOperator()\n+                .endSpec()\n+                .done();\n+\n+        topicNames.forEach(topicName -> KafkaTopicResource.topic(CLUSTER_NAME, topicName, 3, 3, 2).done());\n+\n+        String producerAdditionConfiguration = \"delivery.timeout.ms=20000\\nrequest.timeout.ms=20000\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62ec650acadbc91ac8dc856c2499365573ac4e55"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTE2NzI4OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/specific/ClusterOperationST.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODowMzozMVrOHHXl8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODozODozNlrOHHYxmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ4ODYyNQ==", "bodyText": "Does it means we cannot use OLM/Helm install for this scenario?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3555#discussion_r477488625", "createdAt": "2020-08-26T18:03:31Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/specific/ClusterOperationST.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.specific;\n+\n+import io.fabric8.kubernetes.api.model.Node;\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.systemtest.AbstractST;\n+import io.strimzi.systemtest.annotations.MultiNodeClusterOnly;\n+import io.strimzi.systemtest.annotations.RequiredMinKubeApiVersion;\n+import io.strimzi.systemtest.resources.ResourceManager;\n+import io.strimzi.systemtest.resources.crd.KafkaClientsResource;\n+import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.resources.operator.BundleResource;\n+import io.strimzi.systemtest.utils.ClientUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import static io.strimzi.systemtest.Constants.SPECIFIC;\n+import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+\n+@Tag(SPECIFIC)\n+public class ClusterOperationST extends AbstractST {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(ClusterOperationST.class);\n+    public static final String NAMESPACE = \"cluster-operations-test\";\n+\n+    @Test\n+    @MultiNodeClusterOnly\n+    @RequiredMinKubeApiVersion(version = 1.15)\n+    void testAvailabilityDuringNodeDrain() {\n+        List<String> topicNames = IntStream.range(0, 5).boxed().map(i -> \"test-topic-\" + i).collect(Collectors.toList());\n+        List<String> producerNames = IntStream.range(0, 5).boxed().map(i -> \"hello-world-producer-\" + i).collect(Collectors.toList());\n+        List<String> consumerNames = IntStream.range(0, 5).boxed().map(i -> \"hello-world-consumer-\" + i).collect(Collectors.toList());\n+        List<String> continuousConsumerGroups = IntStream.range(0, 5).boxed().map(i -> \"continuous-consumer-group-\" + i).collect(Collectors.toList());\n+        int continuousClientsMessageCount = 300;\n+        List<Node> nodes = kubeClient().getClusterWorkers();\n+\n+        KafkaResource.kafkaPersistent(CLUSTER_NAME, 3, 3)\n+                .editOrNewSpec()\n+                .editEntityOperator()\n+                .editUserOperator()\n+                .withReconciliationIntervalSeconds(30)\n+                .endUserOperator()\n+                .endEntityOperator()\n+                .endSpec()\n+                .done();\n+\n+        topicNames.forEach(topicName -> KafkaTopicResource.topic(CLUSTER_NAME, topicName, 3, 3, 2).done());\n+\n+        String producerAdditionConfiguration = \"delivery.timeout.ms=20000\\nrequest.timeout.ms=20000\";\n+        producerNames.forEach(producerName -> KafkaClientsResource.producerStrimzi(\n+                producerName,\n+                KafkaResources.plainBootstrapAddress(CLUSTER_NAME),\n+                topicNames.get(producerNames.indexOf(producerName)),\n+                continuousClientsMessageCount, producerAdditionConfiguration).done());\n+\n+\n+        consumerNames.forEach(consumerName -> KafkaClientsResource.consumerStrimzi(\n+                consumerName,\n+                KafkaResources.plainBootstrapAddress(CLUSTER_NAME),\n+                topicNames.get(consumerNames.indexOf(consumerName)),\n+                continuousClientsMessageCount, \"\",\n+                continuousConsumerGroups.get(consumerNames.indexOf(consumerName))).done());\n+\n+        // ##############################\n+        // Nodes draining\n+        // ##############################\n+        for (Node node : nodes) {\n+            drainNode(node.getMetadata().getName());\n+            setNodeSchedule(node.getMetadata().getName(), true);\n+        }\n+\n+        producerNames.forEach(producerName -> ClientUtils.waitTillContinuousClientsFinish(producerName, consumerNames.get(producerName.indexOf(producerName)), NAMESPACE, continuousClientsMessageCount));\n+        producerNames.forEach(producerName -> kubeClient().getClient().batch().jobs().inNamespace(NAMESPACE).withName(producerName).delete());\n+        consumerNames.forEach(consumerName -> kubeClient().getClient().batch().jobs().inNamespace(NAMESPACE).withName(consumerName).delete());\n+    }\n+\n+    @BeforeAll\n+    void setup() {\n+        ResourceManager.setClassResources();\n+        prepareEnvForOperator(NAMESPACE);\n+\n+        applyRoleBindings(NAMESPACE);\n+        BundleResource.clusterOperator(NAMESPACE).done();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62ec650acadbc91ac8dc856c2499365573ac4e55"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUwNzk5NQ==", "bodyText": "just copied :) I will fix it", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3555#discussion_r477507995", "createdAt": "2020-08-26T18:38:36Z", "author": {"login": "kornys"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/specific/ClusterOperationST.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.specific;\n+\n+import io.fabric8.kubernetes.api.model.Node;\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.systemtest.AbstractST;\n+import io.strimzi.systemtest.annotations.MultiNodeClusterOnly;\n+import io.strimzi.systemtest.annotations.RequiredMinKubeApiVersion;\n+import io.strimzi.systemtest.resources.ResourceManager;\n+import io.strimzi.systemtest.resources.crd.KafkaClientsResource;\n+import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.resources.operator.BundleResource;\n+import io.strimzi.systemtest.utils.ClientUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import static io.strimzi.systemtest.Constants.SPECIFIC;\n+import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+\n+@Tag(SPECIFIC)\n+public class ClusterOperationST extends AbstractST {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(ClusterOperationST.class);\n+    public static final String NAMESPACE = \"cluster-operations-test\";\n+\n+    @Test\n+    @MultiNodeClusterOnly\n+    @RequiredMinKubeApiVersion(version = 1.15)\n+    void testAvailabilityDuringNodeDrain() {\n+        List<String> topicNames = IntStream.range(0, 5).boxed().map(i -> \"test-topic-\" + i).collect(Collectors.toList());\n+        List<String> producerNames = IntStream.range(0, 5).boxed().map(i -> \"hello-world-producer-\" + i).collect(Collectors.toList());\n+        List<String> consumerNames = IntStream.range(0, 5).boxed().map(i -> \"hello-world-consumer-\" + i).collect(Collectors.toList());\n+        List<String> continuousConsumerGroups = IntStream.range(0, 5).boxed().map(i -> \"continuous-consumer-group-\" + i).collect(Collectors.toList());\n+        int continuousClientsMessageCount = 300;\n+        List<Node> nodes = kubeClient().getClusterWorkers();\n+\n+        KafkaResource.kafkaPersistent(CLUSTER_NAME, 3, 3)\n+                .editOrNewSpec()\n+                .editEntityOperator()\n+                .editUserOperator()\n+                .withReconciliationIntervalSeconds(30)\n+                .endUserOperator()\n+                .endEntityOperator()\n+                .endSpec()\n+                .done();\n+\n+        topicNames.forEach(topicName -> KafkaTopicResource.topic(CLUSTER_NAME, topicName, 3, 3, 2).done());\n+\n+        String producerAdditionConfiguration = \"delivery.timeout.ms=20000\\nrequest.timeout.ms=20000\";\n+        producerNames.forEach(producerName -> KafkaClientsResource.producerStrimzi(\n+                producerName,\n+                KafkaResources.plainBootstrapAddress(CLUSTER_NAME),\n+                topicNames.get(producerNames.indexOf(producerName)),\n+                continuousClientsMessageCount, producerAdditionConfiguration).done());\n+\n+\n+        consumerNames.forEach(consumerName -> KafkaClientsResource.consumerStrimzi(\n+                consumerName,\n+                KafkaResources.plainBootstrapAddress(CLUSTER_NAME),\n+                topicNames.get(consumerNames.indexOf(consumerName)),\n+                continuousClientsMessageCount, \"\",\n+                continuousConsumerGroups.get(consumerNames.indexOf(consumerName))).done());\n+\n+        // ##############################\n+        // Nodes draining\n+        // ##############################\n+        for (Node node : nodes) {\n+            drainNode(node.getMetadata().getName());\n+            setNodeSchedule(node.getMetadata().getName(), true);\n+        }\n+\n+        producerNames.forEach(producerName -> ClientUtils.waitTillContinuousClientsFinish(producerName, consumerNames.get(producerName.indexOf(producerName)), NAMESPACE, continuousClientsMessageCount));\n+        producerNames.forEach(producerName -> kubeClient().getClient().batch().jobs().inNamespace(NAMESPACE).withName(producerName).delete());\n+        consumerNames.forEach(consumerName -> kubeClient().getClient().batch().jobs().inNamespace(NAMESPACE).withName(consumerName).delete());\n+    }\n+\n+    @BeforeAll\n+    void setup() {\n+        ResourceManager.setClassResources();\n+        prepareEnvForOperator(NAMESPACE);\n+\n+        applyRoleBindings(NAMESPACE);\n+        BundleResource.clusterOperator(NAMESPACE).done();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ4ODYyNQ=="}, "originalCommit": {"oid": "62ec650acadbc91ac8dc856c2499365573ac4e55"}, "originalPosition": 96}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1364, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}