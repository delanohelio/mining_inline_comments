{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4ODc1NzI5", "number": 2894, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwOTo1NzoyOVrOD2mDHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMDoxMDoyMFrOD2mZjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTczMDg2OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/PodUtils.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwOTo1NzoyOVrOGMa2YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjoxOTo1NFrOGMgNhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY3NjAwMQ==", "bodyText": "Just a minor question. Why are you using an int[] here instead of just an int. You only ever refer to the first cell of the array and don't use the array outside of the lambda given to waitFor. Not saying you should change it, just interested why?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2894#discussion_r415676001", "createdAt": "2020-04-27T09:57:29Z", "author": {"login": "tomncooper"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/PodUtils.java", "diffHunk": "@@ -243,13 +243,16 @@ public static void waitUntilPodsStability(List<Pod> pods) {\n \n         TestUtils.waitFor(\"Pods stability\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n             () -> {\n-                for (Pod pod : pods) {\n+                List<Pod> actualPods = pods.stream().map(p -> kubeClient().getPod(p.getMetadata().getName())).collect(Collectors.toList());\n+\n+                for (Pod pod : actualPods) {\n                     if (pod.getStatus().getPhase().equals(\"Running\")) {\n                         LOGGER.info(\"Pod {} is in the {} state. Remaining seconds pod to be stable {}\",\n                             pod.getMetadata().getName(), pod.getStatus().getPhase(),\n                             Constants.GLOBAL_RECONCILIATION_COUNT - stabilityCounter[0]);\n                     } else {\n                         LOGGER.info(\"Pod {} is not stable with phase {}\", pod.getMetadata().getName(), pod.getStatus().getPhase());\n+                        stabilityCounter[0] = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f38ad2050712d3a64fdd44cefeace6beadcece57"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY4MzUyNA==", "bodyText": "He needs a final to use it within the lambda, but he also needs it to be mutable.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2894#discussion_r415683524", "createdAt": "2020-04-27T10:08:43Z", "author": {"login": "tombentley"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/PodUtils.java", "diffHunk": "@@ -243,13 +243,16 @@ public static void waitUntilPodsStability(List<Pod> pods) {\n \n         TestUtils.waitFor(\"Pods stability\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n             () -> {\n-                for (Pod pod : pods) {\n+                List<Pod> actualPods = pods.stream().map(p -> kubeClient().getPod(p.getMetadata().getName())).collect(Collectors.toList());\n+\n+                for (Pod pod : actualPods) {\n                     if (pod.getStatus().getPhase().equals(\"Running\")) {\n                         LOGGER.info(\"Pod {} is in the {} state. Remaining seconds pod to be stable {}\",\n                             pod.getMetadata().getName(), pod.getStatus().getPhase(),\n                             Constants.GLOBAL_RECONCILIATION_COUNT - stabilityCounter[0]);\n                     } else {\n                         LOGGER.info(\"Pod {} is not stable with phase {}\", pod.getMetadata().getName(), pod.getStatus().getPhase());\n+                        stabilityCounter[0] = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY3NjAwMQ=="}, "originalCommit": {"oid": "f38ad2050712d3a64fdd44cefeace6beadcece57"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY4NDQxMA==", "bodyText": "Getting the actual pods is good, but don't we need to check that exactly the given pods are present in the actualPods too?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2894#discussion_r415684410", "createdAt": "2020-04-27T10:10:08Z", "author": {"login": "tombentley"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/PodUtils.java", "diffHunk": "@@ -243,13 +243,16 @@ public static void waitUntilPodsStability(List<Pod> pods) {\n \n         TestUtils.waitFor(\"Pods stability\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n             () -> {\n-                for (Pod pod : pods) {\n+                List<Pod> actualPods = pods.stream().map(p -> kubeClient().getPod(p.getMetadata().getName())).collect(Collectors.toList());\n+\n+                for (Pod pod : actualPods) {\n                     if (pod.getStatus().getPhase().equals(\"Running\")) {\n                         LOGGER.info(\"Pod {} is in the {} state. Remaining seconds pod to be stable {}\",\n                             pod.getMetadata().getName(), pod.getStatus().getPhase(),\n                             Constants.GLOBAL_RECONCILIATION_COUNT - stabilityCounter[0]);\n                     } else {\n                         LOGGER.info(\"Pod {} is not stable with phase {}\", pod.getMetadata().getName(), pod.getStatus().getPhase());\n+                        stabilityCounter[0] = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY3NjAwMQ=="}, "originalCommit": {"oid": "f38ad2050712d3a64fdd44cefeace6beadcece57"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY4NjY0NA==", "bodyText": "The array with one cell is there because of one simple reason. If you look at the whole method, you will see that this variable needs to be changed whenever the BooleanSupplier condition is TRUE. In this case, with each tick(poll) the whole code will be executed. If pods are all in running state we will increment the stability counter. Moreover, you need some outside reference from the scope of Lambda and this problem can be resolved by two options:\n\nuse atomic variables - which is not good approach to do it and should be used only in concurrent stuff...\nuse array - which completely resolve that problem", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2894#discussion_r415686644", "createdAt": "2020-04-27T10:13:37Z", "author": {"login": "see-quick"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/PodUtils.java", "diffHunk": "@@ -243,13 +243,16 @@ public static void waitUntilPodsStability(List<Pod> pods) {\n \n         TestUtils.waitFor(\"Pods stability\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n             () -> {\n-                for (Pod pod : pods) {\n+                List<Pod> actualPods = pods.stream().map(p -> kubeClient().getPod(p.getMetadata().getName())).collect(Collectors.toList());\n+\n+                for (Pod pod : actualPods) {\n                     if (pod.getStatus().getPhase().equals(\"Running\")) {\n                         LOGGER.info(\"Pod {} is in the {} state. Remaining seconds pod to be stable {}\",\n                             pod.getMetadata().getName(), pod.getStatus().getPhase(),\n                             Constants.GLOBAL_RECONCILIATION_COUNT - stabilityCounter[0]);\n                     } else {\n                         LOGGER.info(\"Pod {} is not stable with phase {}\", pod.getMetadata().getName(), pod.getStatus().getPhase());\n+                        stabilityCounter[0] = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY3NjAwMQ=="}, "originalCommit": {"oid": "f38ad2050712d3a64fdd44cefeace6beadcece57"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY5MjIzMw==", "bodyText": "Well, see that I did not refresh and you were quicker @tombentley  :D", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2894#discussion_r415692233", "createdAt": "2020-04-27T10:22:30Z", "author": {"login": "see-quick"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/PodUtils.java", "diffHunk": "@@ -243,13 +243,16 @@ public static void waitUntilPodsStability(List<Pod> pods) {\n \n         TestUtils.waitFor(\"Pods stability\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n             () -> {\n-                for (Pod pod : pods) {\n+                List<Pod> actualPods = pods.stream().map(p -> kubeClient().getPod(p.getMetadata().getName())).collect(Collectors.toList());\n+\n+                for (Pod pod : actualPods) {\n                     if (pod.getStatus().getPhase().equals(\"Running\")) {\n                         LOGGER.info(\"Pod {} is in the {} state. Remaining seconds pod to be stable {}\",\n                             pod.getMetadata().getName(), pod.getStatus().getPhase(),\n                             Constants.GLOBAL_RECONCILIATION_COUNT - stabilityCounter[0]);\n                     } else {\n                         LOGGER.info(\"Pod {} is not stable with phase {}\", pod.getMetadata().getName(), pod.getStatus().getPhase());\n+                        stabilityCounter[0] = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY3NjAwMQ=="}, "originalCommit": {"oid": "f38ad2050712d3a64fdd44cefeace6beadcece57"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY5MzIxNA==", "bodyText": "I think I am missing something, this lambda just checks that all the pods are ready by counting how many are ready and comparing it to a constant, and repeating that at the configured interval, why does the counter need to be outside the lambda?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2894#discussion_r415693214", "createdAt": "2020-04-27T10:24:06Z", "author": {"login": "tomncooper"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/PodUtils.java", "diffHunk": "@@ -243,13 +243,16 @@ public static void waitUntilPodsStability(List<Pod> pods) {\n \n         TestUtils.waitFor(\"Pods stability\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n             () -> {\n-                for (Pod pod : pods) {\n+                List<Pod> actualPods = pods.stream().map(p -> kubeClient().getPod(p.getMetadata().getName())).collect(Collectors.toList());\n+\n+                for (Pod pod : actualPods) {\n                     if (pod.getStatus().getPhase().equals(\"Running\")) {\n                         LOGGER.info(\"Pod {} is in the {} state. Remaining seconds pod to be stable {}\",\n                             pod.getMetadata().getName(), pod.getStatus().getPhase(),\n                             Constants.GLOBAL_RECONCILIATION_COUNT - stabilityCounter[0]);\n                     } else {\n                         LOGGER.info(\"Pod {} is not stable with phase {}\", pod.getMetadata().getName(), pod.getStatus().getPhase());\n+                        stabilityCounter[0] = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY3NjAwMQ=="}, "originalCommit": {"oid": "f38ad2050712d3a64fdd44cefeace6beadcece57"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY5Nzk4MA==", "bodyText": "If you use counter inside the lambda you will override him at each poll interval(tick).", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2894#discussion_r415697980", "createdAt": "2020-04-27T10:31:36Z", "author": {"login": "see-quick"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/PodUtils.java", "diffHunk": "@@ -243,13 +243,16 @@ public static void waitUntilPodsStability(List<Pod> pods) {\n \n         TestUtils.waitFor(\"Pods stability\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n             () -> {\n-                for (Pod pod : pods) {\n+                List<Pod> actualPods = pods.stream().map(p -> kubeClient().getPod(p.getMetadata().getName())).collect(Collectors.toList());\n+\n+                for (Pod pod : actualPods) {\n                     if (pod.getStatus().getPhase().equals(\"Running\")) {\n                         LOGGER.info(\"Pod {} is in the {} state. Remaining seconds pod to be stable {}\",\n                             pod.getMetadata().getName(), pod.getStatus().getPhase(),\n                             Constants.GLOBAL_RECONCILIATION_COUNT - stabilityCounter[0]);\n                     } else {\n                         LOGGER.info(\"Pod {} is not stable with phase {}\", pod.getMetadata().getName(), pod.getStatus().getPhase());\n+                        stabilityCounter[0] = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY3NjAwMQ=="}, "originalCommit": {"oid": "f38ad2050712d3a64fdd44cefeace6beadcece57"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcwMTk5OA==", "bodyText": "Yeah I get that, but isn't it set to zero every time a pod isn't ready anyway? Maybe this is something to do with the phases?\nAnyway, if you guys are happy, I'm happy.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2894#discussion_r415701998", "createdAt": "2020-04-27T10:38:02Z", "author": {"login": "tomncooper"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/PodUtils.java", "diffHunk": "@@ -243,13 +243,16 @@ public static void waitUntilPodsStability(List<Pod> pods) {\n \n         TestUtils.waitFor(\"Pods stability\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n             () -> {\n-                for (Pod pod : pods) {\n+                List<Pod> actualPods = pods.stream().map(p -> kubeClient().getPod(p.getMetadata().getName())).collect(Collectors.toList());\n+\n+                for (Pod pod : actualPods) {\n                     if (pod.getStatus().getPhase().equals(\"Running\")) {\n                         LOGGER.info(\"Pod {} is in the {} state. Remaining seconds pod to be stable {}\",\n                             pod.getMetadata().getName(), pod.getStatus().getPhase(),\n                             Constants.GLOBAL_RECONCILIATION_COUNT - stabilityCounter[0]);\n                     } else {\n                         LOGGER.info(\"Pod {} is not stable with phase {}\", pod.getMetadata().getName(), pod.getStatus().getPhase());\n+                        stabilityCounter[0] = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY3NjAwMQ=="}, "originalCommit": {"oid": "f38ad2050712d3a64fdd44cefeace6beadcece57"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc2Mzg0Ng==", "bodyText": "@tombentley I discuss that with @see-quick and it's enough from our POV. Now we can use it in situations when rolling update is not completely finished. We can override it for usage you suggested for tests, where we are for 100% sure that we don't want any rolling update during this wait.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2894#discussion_r415763846", "createdAt": "2020-04-27T12:19:54Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/PodUtils.java", "diffHunk": "@@ -243,13 +243,16 @@ public static void waitUntilPodsStability(List<Pod> pods) {\n \n         TestUtils.waitFor(\"Pods stability\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n             () -> {\n-                for (Pod pod : pods) {\n+                List<Pod> actualPods = pods.stream().map(p -> kubeClient().getPod(p.getMetadata().getName())).collect(Collectors.toList());\n+\n+                for (Pod pod : actualPods) {\n                     if (pod.getStatus().getPhase().equals(\"Running\")) {\n                         LOGGER.info(\"Pod {} is in the {} state. Remaining seconds pod to be stable {}\",\n                             pod.getMetadata().getName(), pod.getStatus().getPhase(),\n                             Constants.GLOBAL_RECONCILIATION_COUNT - stabilityCounter[0]);\n                     } else {\n                         LOGGER.info(\"Pod {} is not stable with phase {}\", pod.getMetadata().getName(), pod.getStatus().getPhase());\n+                        stabilityCounter[0] = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY3NjAwMQ=="}, "originalCommit": {"oid": "f38ad2050712d3a64fdd44cefeace6beadcece57"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTc4ODI5OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/upgrade/ZookeeperUpgradeST.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMDoxMDoyMFrOGMbXrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTo1NzoxOVrOGMfX2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY4NDUyNA==", "bodyText": "Should this be sameMinorVersion?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2894#discussion_r415684524", "createdAt": "2020-04-27T10:10:20Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/upgrade/ZookeeperUpgradeST.java", "diffHunk": "@@ -66,16 +71,34 @@ void runVersionChange(TestKafkaVersion initialVersion, TestKafkaVersion newVersi\n             logMsgFormat = newVersion.messageVersion();\n         }\n \n-        LOGGER.info(\"Deploying initial Kafka version (\" + initialVersion.version() + \")\");\n+        boolean sameMajorVersion = initialVersion.protocolVersion().equals(newVersion.protocolVersion());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f38ad2050712d3a64fdd44cefeace6beadcece57"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc1MDEwNQ==", "bodyText": "Yes, I will fix it", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2894#discussion_r415750105", "createdAt": "2020-04-27T11:57:19Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/upgrade/ZookeeperUpgradeST.java", "diffHunk": "@@ -66,16 +71,34 @@ void runVersionChange(TestKafkaVersion initialVersion, TestKafkaVersion newVersi\n             logMsgFormat = newVersion.messageVersion();\n         }\n \n-        LOGGER.info(\"Deploying initial Kafka version (\" + initialVersion.version() + \")\");\n+        boolean sameMajorVersion = initialVersion.protocolVersion().equals(newVersion.protocolVersion());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY4NDUyNA=="}, "originalCommit": {"oid": "f38ad2050712d3a64fdd44cefeace6beadcece57"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 234, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}