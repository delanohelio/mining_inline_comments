{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1MDA4NTcx", "number": 2432, "title": "Added Keycloak Authorization configuration", "bodyText": "Signed-off-by: Paolo Patierno ppatierno@live.com\nType of change\n\nEnhancement / new feature\n\nDescription\nThis PR fixes #2428.\nIt's still missing tests and including the kafka-oauth-keycloak-authorizer JAR coming from this other PR strimzi/strimzi-kafka-oauth#24 still in progress.\nChecklist\nPlease go through this checklist and make sure all applicable tasks have been done\n\n Update/write design documentation in ./design\n Write tests\n Make sure all tests pass\n Update documentation\n Check RBAC rights for Kubernetes / OpenShift roles\n Try your changes from Pod inside your Kubernetes and OpenShift cluster, not just locally\n Reference relevant issue(s) and close them after merging\n Update CHANGELOG.md", "createdAt": "2020-01-20T21:28:04Z", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2432", "merged": true, "mergeCommit": {"oid": "4f533bfa0f6d41e3f3aa280f1039287b82851caa"}, "closed": true, "closedAt": "2020-01-30T17:28:22Z", "author": {"login": "ppatierno"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb8dUwNAFqTM0NTcxNTIxOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_cuAWgH2gAyMzY1MDA4NTcxOjZhMzM3MmZhNzI2YjA3ZDI2ZWRiNjNmZWEyYzBhMDg2NGZiYzFhZTQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1NzE1MjE5", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2432#pullrequestreview-345715219", "createdAt": "2020-01-21T08:57:26Z", "commit": {"oid": "fecbfe54fb8c01a5243dba44e431ce25ef048b30"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwODo1NzoyN1rOFfyZAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwOTowMDoxM1rOFfyd9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg3NTc3Nw==", "bodyText": "Should we maybe split this into two methods? configureSimpleAuthorization and configureKeycloakAuthorization?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2432#discussion_r368875777", "createdAt": "2020-01-21T08:57:27Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaBrokerConfigurationBuilder.java", "diffHunk": "@@ -369,32 +370,64 @@ private String getSecurityProtocol(boolean tls, boolean sasl)   {\n     public KafkaBrokerConfigurationBuilder withAuthorization(String clusterName, KafkaAuthorization authorization)  {\n         if (authorization != null) {\n             List<String> superUsers = new ArrayList<>();\n-            String authorizerClass = \"\";\n \n             // Broker super users\n             superUsers.add(String.format(\"User:CN=%s,O=io.strimzi\", KafkaResources.kafkaStatefulSetName(clusterName)));\n             superUsers.add(String.format(\"User:CN=%s-%s,O=io.strimzi\", clusterName, \"entity-operator\"));\n             superUsers.add(String.format(\"User:CN=%s-%s,O=io.strimzi\", clusterName, \"kafka-exporter\"));\n \n-            // User configured super users\n-            if (KafkaAuthorizationSimple.TYPE_SIMPLE.equals(authorization.getType())) {\n-                KafkaAuthorizationSimple simpleAuthz = (KafkaAuthorizationSimple) authorization;\n-                authorizerClass = KafkaAuthorizationSimple.AUTHORIZER_CLASS_NAME;\n-\n-                if (simpleAuthz.getSuperUsers() != null && simpleAuthz.getSuperUsers().size() > 0) {\n-                    superUsers.addAll(simpleAuthz.getSuperUsers().stream().map(e -> String.format(\"User:%s\", e)).collect(Collectors.toList()));\n-                }\n-            }\n-\n             printSectionHeader(\"Authorization\");\n-            writer.println(\"authorizer.class.name=\" + authorizerClass);\n+            configureAuthorization(clusterName, superUsers, authorization);\n             writer.println(\"super.users=\" + String.join(\";\", superUsers));\n             writer.println();\n         }\n \n         return this;\n     }\n \n+    /**\n+     * Configures authorization for the Kafka brokers. This method is used only internally.\n+     *\n+     * @param clusterName Name of the cluster\n+     * @param superUsers Super users list who have all the rights on the cluster\n+     * @param authorization The authorization configuration from the Kafka CR\n+     */\n+    private void configureAuthorization(String clusterName, List<String> superUsers, KafkaAuthorization authorization) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fecbfe54fb8c01a5243dba44e431ce25ef048b30"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg3NjQ5Ng==", "bodyText": "Maybe I forgot something, but don't you need to also add it to the volumes somewhere?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2432#discussion_r368876496", "createdAt": "2020-01-21T08:58:59Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaCluster.java", "diffHunk": "@@ -1475,6 +1484,11 @@ private void setDataVolumesClaimsAndMountPaths(Storage storage) {\n             }\n         }\n \n+        if (authorization instanceof KafkaAuthorizationKeycloak) {\n+            KafkaAuthorizationKeycloak keycloakAuthz = (KafkaAuthorizationKeycloak) authorization;\n+            volumeMountList.addAll(AuthenticationUtils.configureOauthCertificateVolumeMounts(\"authz-keycloak\", keycloakAuthz.getTlsTrustedCertificates(), OAUTH_TRUSTED_CERTS_BASE_VOLUME_MOUNT + \"/authz-keycloak-certs\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fecbfe54fb8c01a5243dba44e431ce25ef048b30"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg3NzA0Nw==", "bodyText": "Can you double check what impact does this have on the internal super users? Do they still keey their own names?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2432#discussion_r368877047", "createdAt": "2020-01-21T09:00:13Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaBrokerConfigurationBuilder.java", "diffHunk": "@@ -369,32 +370,64 @@ private String getSecurityProtocol(boolean tls, boolean sasl)   {\n     public KafkaBrokerConfigurationBuilder withAuthorization(String clusterName, KafkaAuthorization authorization)  {\n         if (authorization != null) {\n             List<String> superUsers = new ArrayList<>();\n-            String authorizerClass = \"\";\n \n             // Broker super users\n             superUsers.add(String.format(\"User:CN=%s,O=io.strimzi\", KafkaResources.kafkaStatefulSetName(clusterName)));\n             superUsers.add(String.format(\"User:CN=%s-%s,O=io.strimzi\", clusterName, \"entity-operator\"));\n             superUsers.add(String.format(\"User:CN=%s-%s,O=io.strimzi\", clusterName, \"kafka-exporter\"));\n \n-            // User configured super users\n-            if (KafkaAuthorizationSimple.TYPE_SIMPLE.equals(authorization.getType())) {\n-                KafkaAuthorizationSimple simpleAuthz = (KafkaAuthorizationSimple) authorization;\n-                authorizerClass = KafkaAuthorizationSimple.AUTHORIZER_CLASS_NAME;\n-\n-                if (simpleAuthz.getSuperUsers() != null && simpleAuthz.getSuperUsers().size() > 0) {\n-                    superUsers.addAll(simpleAuthz.getSuperUsers().stream().map(e -> String.format(\"User:%s\", e)).collect(Collectors.toList()));\n-                }\n-            }\n-\n             printSectionHeader(\"Authorization\");\n-            writer.println(\"authorizer.class.name=\" + authorizerClass);\n+            configureAuthorization(clusterName, superUsers, authorization);\n             writer.println(\"super.users=\" + String.join(\";\", superUsers));\n             writer.println();\n         }\n \n         return this;\n     }\n \n+    /**\n+     * Configures authorization for the Kafka brokers. This method is used only internally.\n+     *\n+     * @param clusterName Name of the cluster\n+     * @param superUsers Super users list who have all the rights on the cluster\n+     * @param authorization The authorization configuration from the Kafka CR\n+     */\n+    private void configureAuthorization(String clusterName, List<String> superUsers, KafkaAuthorization authorization) {\n+        if (KafkaAuthorizationSimple.TYPE_SIMPLE.equals(authorization.getType())) {\n+            KafkaAuthorizationSimple simpleAuthz = (KafkaAuthorizationSimple) authorization;\n+            writer.println(\"authorizer.class.name=\" + KafkaAuthorizationSimple.AUTHORIZER_CLASS_NAME);\n+\n+            // User configured super users\n+            if (simpleAuthz.getSuperUsers() != null && simpleAuthz.getSuperUsers().size() > 0) {\n+                superUsers.addAll(simpleAuthz.getSuperUsers().stream().map(e -> String.format(\"User:%s\", e)).collect(Collectors.toList()));\n+            }\n+        } else if (KafkaAuthorizationKeycloak.TYPE_KEYCLOAK.equals(authorization.getType())) {\n+            KafkaAuthorizationKeycloak keycloakAuthz = (KafkaAuthorizationKeycloak) authorization;\n+            writer.println(\"authorizer.class.name=\" + KafkaAuthorizationKeycloak.AUTHORIZER_CLASS_NAME);\n+            writer.println(\"principal.builder.class=\" + KafkaAuthorizationKeycloak.PRINCIPAL_BUILDER_CLASS_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fecbfe54fb8c01a5243dba44e431ce25ef048b30"}, "originalPosition": 58}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b6c93cdb6537bf3f88f2040adb2d41a758ca9ae5", "author": {"user": {"login": "ppatierno", "name": "Paolo Patierno"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b6c93cdb6537bf3f88f2040adb2d41a758ca9ae5", "committedDate": "2020-01-21T13:01:09Z", "message": "Set required properties for Keycloak authorization\nFixed a minor bug\n\nSigned-off-by: Paolo Patierno <ppatierno@live.com>"}, "afterCommit": {"oid": "524883aee80904682ee41d296f5d242cd2bcbffc", "author": {"user": {"login": "ppatierno", "name": "Paolo Patierno"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/524883aee80904682ee41d296f5d242cd2bcbffc", "committedDate": "2020-01-24T11:46:59Z", "message": "Set required properties for Keycloak authorization\nFixed a minor bug\n\nSigned-off-by: Paolo Patierno <ppatierno@live.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4Njc3NjE5", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2432#pullrequestreview-348677619", "createdAt": "2020-01-27T13:55:38Z", "commit": {"oid": "af2861e52c6a40d3e9d11574ee26ac0cbecbe99e"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMzo1NTozOVrOFiDaog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMzo1ODo1OVrOFiDhuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI1MTg3NA==", "bodyText": "hostname verification of what? Presumably the authz serverm but you should say that.\nAnd should it be \"enable...\", defaulting to true?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2432#discussion_r371251874", "createdAt": "2020-01-27T13:55:39Z", "author": {"login": "tombentley"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaAuthorizationKeycloak.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.api.kafka.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import io.strimzi.crdgenerator.annotations.Description;\n+import io.strimzi.crdgenerator.annotations.Example;\n+import io.sundr.builder.annotations.Buildable;\n+import lombok.EqualsAndHashCode;\n+\n+import java.util.List;\n+\n+/**\n+ * Configures Keycloak authorization on the brokers\n+ */\n+@Buildable(\n+        editableEnabled = false,\n+        generateBuilderPackage = false,\n+        builderPackage = \"io.fabric8.kubernetes.api.builder\"\n+)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonPropertyOrder({\"type\", \"clientId\", \"tokenEndpointUri\",\n+                    \"tlsTrustedCertificates\", \"disableTlsHostnameVerification\",\n+                    \"delegateToKafkaAcls\", \"superUsers\"})\n+@EqualsAndHashCode\n+public class KafkaAuthorizationKeycloak extends KafkaAuthorization {\n+    private static final long serialVersionUID = 1L;\n+\n+    public static final String TYPE_KEYCLOAK = \"keycloak\";\n+\n+    public static final String AUTHORIZER_CLASS_NAME = \"io.strimzi.kafka.oauth.server.authorizer.KeycloakRBACAuthorizer\";\n+    public static final String PRINCIPAL_BUILDER_CLASS_NAME = \"io.strimzi.kafka.oauth.server.authorizer.JwtKafkaPrincipalBuilder\";\n+\n+    private String clientId;\n+    private String tokenEndpointUri;\n+    private List<CertSecretSource> tlsTrustedCertificates;\n+    private boolean disableTlsHostnameVerification = false;\n+    private boolean delegateToKafkaAcls = false;\n+    private List<String> superUsers;\n+\n+    @Description(\"Must be `\" + TYPE_KEYCLOAK + \"`\")\n+    @Override\n+    public String getType() {\n+        return TYPE_KEYCLOAK;\n+    }\n+\n+    @Description(\"OAuth Client ID which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI.\")\n+    @JsonProperty(required = true)\n+    public String getClientId() {\n+        return clientId;\n+    }\n+\n+    public void setClientId(String clientId) {\n+        this.clientId = clientId;\n+    }\n+\n+    @Description(\"Authorization server token endpoint URI.\")\n+    @JsonProperty(required = true)\n+    public String getTokenEndpointUri() {\n+        return tokenEndpointUri;\n+    }\n+\n+    public void setTokenEndpointUri(String tokenEndpointUri) {\n+        this.tokenEndpointUri = tokenEndpointUri;\n+    }\n+\n+    @Description(\"Trusted certificates for TLS connection to the OAuth server.\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public List<CertSecretSource> getTlsTrustedCertificates() {\n+        return tlsTrustedCertificates;\n+    }\n+\n+    public void setTlsTrustedCertificates(List<CertSecretSource> tlsTrustedCertificates) {\n+        this.tlsTrustedCertificates = tlsTrustedCertificates;\n+    }\n+\n+    @Description(\"Enable or disable TLS hostname verification. \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af2861e52c6a40d3e9d11574ee26ac0cbecbe99e"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI1MzY4OQ==", "bodyText": "There are a couple of variables you can usefully factor out here.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2432#discussion_r371253689", "createdAt": "2020-01-27T13:58:59Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/model/KafkaClusterTest.java", "diffHunk": "@@ -3222,4 +3223,83 @@ public void testCustomCertificateTls() {\n         assertThat(k.getSecretSourceTls().getKey(), is(key));\n         assertThat(k.getSecretSourceTls().getCertificate(), is(cert));\n     }\n+\n+    @Test\n+    public void testGenerateDeploymentWithKeycloakAuthorizationMissingOAuthListeners() {\n+        assertThrows(InvalidResourceException.class, () -> {\n+            Kafka kafkaAssembly = new KafkaBuilder(ResourceUtils.createKafkaCluster(namespace, cluster, replicas,\n+                    image, healthDelay, healthTimeout, metricsCm, configuration, emptyMap()))\n+                    .editSpec()\n+                    .editKafka()\n+                    .withAuthorization(\n+                            new KafkaAuthorizationKeycloakBuilder()\n+                                    .build())\n+                    .endKafka()\n+                    .endSpec()\n+                    .build();\n+\n+            KafkaCluster.fromCrd(kafkaAssembly, VERSIONS);\n+        });\n+    }\n+\n+    @Test\n+    public void testGenerateDeploymentWithKeycloakAuthorization() {\n+        CertSecretSource cert1 = new CertSecretSourceBuilder()\n+                .withSecretName(\"first-certificate\")\n+                .withCertificate(\"ca.crt\")\n+                .build();\n+\n+        CertSecretSource cert2 = new CertSecretSourceBuilder()\n+                .withSecretName(\"second-certificate\")\n+                .withCertificate(\"tls.crt\")\n+                .build();\n+\n+        Kafka kafkaAssembly = new KafkaBuilder(ResourceUtils.createKafkaCluster(namespace, cluster, replicas,\n+                image, healthDelay, healthTimeout, metricsCm, configuration, emptyMap()))\n+                .editSpec()\n+                .editKafka()\n+                .withNewListeners()\n+                    .withNewPlain()\n+                        .withAuth(\n+                                new KafkaListenerAuthenticationOAuthBuilder()\n+                                        .withClientId(\"my-client-id\")\n+                                        .withValidIssuerUri(\"http://valid-issuer\")\n+                                        .withIntrospectionEndpointUri(\"http://introspection\")\n+                                        .withNewClientSecret()\n+                                            .withSecretName(\"my-secret-secret\")\n+                                            .withKey(\"my-secret-key\")\n+                                        .endClientSecret()\n+                                        .withDisableTlsHostnameVerification(true)\n+                                        .withTlsTrustedCertificates(cert1, cert2)\n+                                        .build())\n+                    .endPlain()\n+                .endListeners()\n+                .withAuthorization(\n+                        new KafkaAuthorizationKeycloakBuilder()\n+                                .withClientId(\"my-client-id\")\n+                                .withTokenEndpointUri(\"http://token-endpoint-uri\")\n+                                .withDisableTlsHostnameVerification(true)\n+                                .withDelegateToKafkaAcls(false)\n+                                .withTlsTrustedCertificates(cert1, cert2)\n+                                .build())\n+                .endKafka()\n+                .endSpec()\n+                .build();\n+\n+        KafkaCluster kc = KafkaCluster.fromCrd(kafkaAssembly, VERSIONS);\n+        StatefulSet sts = kc.generateStatefulSet(true, null, null);\n+        Container cont = sts.getSpec().getTemplate().getSpec().getContainers().get(0);\n+\n+        // Volume mounts\n+        assertThat(cont.getVolumeMounts().stream().filter(mount -> \"authz-keycloak-0\".equals(mount.getName())).findFirst().orElse(null).getMountPath(), is(KafkaCluster.OAUTH_TRUSTED_CERTS_BASE_VOLUME_MOUNT + \"/authz-keycloak-certs/first-certificate-0\"));\n+        assertThat(cont.getVolumeMounts().stream().filter(mount -> \"authz-keycloak-1\".equals(mount.getName())).findFirst().orElse(null).getMountPath(), is(KafkaCluster.OAUTH_TRUSTED_CERTS_BASE_VOLUME_MOUNT + \"/authz-keycloak-certs/second-certificate-1\"));\n+\n+        // Volumes\n+        assertThat(sts.getSpec().getTemplate().getSpec().getVolumes().stream().filter(vol -> \"authz-keycloak-0\".equals(vol.getName())).findFirst().orElse(null).getSecret().getItems().size(), is(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af2861e52c6a40d3e9d11574ee26ac0cbecbe99e"}, "originalPosition": 84}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70468c896e036970038001ea7251380c04f6c7c8", "author": {"user": {"login": "ppatierno", "name": "Paolo Patierno"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/70468c896e036970038001ea7251380c04f6c7c8", "committedDate": "2020-01-30T09:33:48Z", "message": "Added Keycloak Authorization configuration\n\nSigned-off-by: Paolo Patierno <ppatierno@live.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6bf09a9613659a26bcf50b5a67d25d34c90466ad", "author": {"user": {"login": "ppatierno", "name": "Paolo Patierno"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/6bf09a9613659a26bcf50b5a67d25d34c90466ad", "committedDate": "2020-01-30T09:33:48Z", "message": "Update derived resources\n\nSigned-off-by: Paolo Patierno <ppatierno@live.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6feb156ec0daf9623e3566004622a041d4cd27f", "author": {"user": {"login": "ppatierno", "name": "Paolo Patierno"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b6feb156ec0daf9623e3566004622a041d4cd27f", "committedDate": "2020-01-30T09:33:48Z", "message": "Fixed adding certificates volume\n\nSigned-off-by: Paolo Patierno <ppatierno@live.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "936521ec460a3b7641ee1d069a38571db116ade2", "author": {"user": {"login": "ppatierno", "name": "Paolo Patierno"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/936521ec460a3b7641ee1d069a38571db116ade2", "committedDate": "2020-01-30T09:33:48Z", "message": "Added Keycloak authorization tests\n\nSigned-off-by: Paolo Patierno <ppatierno@live.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b7e134cbe7054bbd94b13feabfd5c96ae51bace", "author": {"user": {"login": "ppatierno", "name": "Paolo Patierno"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/6b7e134cbe7054bbd94b13feabfd5c96ae51bace", "committedDate": "2020-01-30T09:33:48Z", "message": "Set required properties for Keycloak authorization\nFixed a minor bug\n\nSigned-off-by: Paolo Patierno <ppatierno@live.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51615d1d1aac76766fda34712c424a6b4cb6b6b3", "author": {"user": {"login": "ppatierno", "name": "Paolo Patierno"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/51615d1d1aac76766fda34712c424a6b4cb6b6b3", "committedDate": "2020-01-30T09:33:48Z", "message": "Added kafka-oauth-keycloak-authorizer third party dependency\n\nSigned-off-by: Paolo Patierno <ppatierno@live.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7be7e599ae2a3afb1ff5b0127ef79306c1478b18", "author": {"user": {"login": "ppatierno", "name": "Paolo Patierno"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/7be7e599ae2a3afb1ff5b0127ef79306c1478b18", "committedDate": "2020-01-30T09:33:48Z", "message": "Review comments\n\nSigned-off-by: Paolo Patierno <ppatierno@live.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8cffa389f574c48f2cf7f7bf6d2dd0f07a23f53", "author": {"user": {"login": "ppatierno", "name": "Paolo Patierno"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c8cffa389f574c48f2cf7f7bf6d2dd0f07a23f53", "committedDate": "2020-01-30T09:33:48Z", "message": "Updated keycloack authorizer library parameters prefix\n\nSigned-off-by: Paolo Patierno <ppatierno@live.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8c63d45617bc9b0749ee54c9d6b2e99b290c40d", "author": {"user": {"login": "ppatierno", "name": "Paolo Patierno"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c8c63d45617bc9b0749ee54c9d6b2e99b290c40d", "committedDate": "2020-01-30T09:33:48Z", "message": "Updated OAuth library version\n\nSigned-off-by: Paolo Patierno <ppatierno@live.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdadec11f11deccda8d29a325e541511c8e9730b", "author": {"user": {"login": "ppatierno", "name": "Paolo Patierno"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/cdadec11f11deccda8d29a325e541511c8e9730b", "committedDate": "2020-01-30T09:33:48Z", "message": "Updated oauth library version for Kafka thirdparty libs\n\nSigned-off-by: Paolo Patierno <ppatierno@live.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e504025ae62d455c39a3f5485d9a5ab58233299", "author": {"user": {"login": "ppatierno", "name": "Paolo Patierno"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/4e504025ae62d455c39a3f5485d9a5ab58233299", "committedDate": "2020-01-30T09:33:48Z", "message": "Fixed certificates generation for Keycloak authorization\n\nSigned-off-by: Paolo Patierno <ppatierno@live.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48c7eb63d7084baf71890193cac992da87e74b30", "author": {"user": {"login": "ppatierno", "name": "Paolo Patierno"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/48c7eb63d7084baf71890193cac992da87e74b30", "committedDate": "2020-01-30T09:33:48Z", "message": "Fixed CRD problem with required field now checked by CO\n\nSigned-off-by: Paolo Patierno <ppatierno@live.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bca703998e34c4d06a05d92e075fe98d0d099d3f", "author": {"user": {"login": "ppatierno", "name": "Paolo Patierno"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/bca703998e34c4d06a05d92e075fe98d0d099d3f", "committedDate": "2020-01-30T09:33:48Z", "message": "Added missing file\n\nSigned-off-by: Paolo Patierno <ppatierno@live.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b8ffb4b8c19190cd39104e69fa7775c0e6c13d4f", "author": {"user": {"login": "ppatierno", "name": "Paolo Patierno"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b8ffb4b8c19190cd39104e69fa7775c0e6c13d4f", "committedDate": "2020-01-29T17:08:47Z", "message": "Added missing file\n\nSigned-off-by: Paolo Patierno <ppatierno@live.com>"}, "afterCommit": {"oid": "bca703998e34c4d06a05d92e075fe98d0d099d3f", "author": {"user": {"login": "ppatierno", "name": "Paolo Patierno"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/bca703998e34c4d06a05d92e075fe98d0d099d3f", "committedDate": "2020-01-30T09:33:48Z", "message": "Added missing file\n\nSigned-off-by: Paolo Patierno <ppatierno@live.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae4beced0eb9660cf420bfbc8b83b1311b1881f7", "author": {"user": {"login": "ppatierno", "name": "Paolo Patierno"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ae4beced0eb9660cf420bfbc8b83b1311b1881f7", "committedDate": "2020-01-30T09:44:29Z", "message": "Adding staging repo for testing oauth library 0.3.0 RC\n\nSigned-off-by: Paolo Patierno <ppatierno@live.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwODgyNDg4", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2432#pullrequestreview-350882488", "createdAt": "2020-01-30T14:52:52Z", "commit": {"oid": "ae4beced0eb9660cf420bfbc8b83b1311b1881f7"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNDo1Mjo1M1rOFjtyMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNDo1MzoyNFrOFjtzsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk5NDYwOQ==", "bodyText": "Should we change the name of the property? It is not just cllback anymore, so maybe strimzi-oauth.version would be better", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2432#discussion_r372994609", "createdAt": "2020-01-30T14:52:53Z", "author": {"login": "scholzj"}, "path": "docker-images/kafka/kafka-thirdparty-libs/2.3.x/pom.xml", "diffHunk": "@@ -107,5 +107,35 @@\n                 </exclusion>\n             </exclusions>\n         </dependency>\n+        <dependency>\n+            <groupId>io.strimzi</groupId>\n+            <artifactId>kafka-oauth-keycloak-authorizer</artifactId>\n+            <version>${strimzi-oauth-callback.version}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4beced0eb9660cf420bfbc8b83b1311b1881f7"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk5NDk5NQ==", "bodyText": "We are now released, so we can remov this again.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2432#discussion_r372994995", "createdAt": "2020-01-30T14:53:24Z", "author": {"login": "scholzj"}, "path": "docker-images/kafka/kafka-thirdparty-libs/2.3.x/pom.xml", "diffHunk": "@@ -107,5 +107,35 @@\n                 </exclusion>\n             </exclusions>\n         </dependency>\n+        <dependency>\n+            <groupId>io.strimzi</groupId>\n+            <artifactId>kafka-oauth-keycloak-authorizer</artifactId>\n+            <version>${strimzi-oauth-callback.version}</version>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.apache.kafka</groupId>\n+                    <artifactId>kafka-clients</artifactId>\n+                </exclusion>\n+                <exclusion>\n+                    <groupId>com.fasterxml.jackson.core</groupId>\n+                    <artifactId>jackson-databind</artifactId>\n+                </exclusion>\n+                <exclusion>\n+                    <groupId>com.github.spotbugs</groupId>\n+                    <artifactId>spotbugs-annotations</artifactId>\n+                </exclusion>\n+                <exclusion>\n+                    <groupId>com.fasterxml.jackson.core</groupId>\n+                    <artifactId>jackson-core</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n     </dependencies>\n+\n+    <repositories>\n+        <repository>\n+            <id>staging</id>\n+            <url>https://oss.sonatype.org/content/repositories/iostrimzi-1054/</url>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4beced0eb9660cf420bfbc8b83b1311b1881f7"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a3372fa726b07d26edb63fea2c0a0864fbc1ae4", "author": {"user": {"login": "ppatierno", "name": "Paolo Patierno"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/6a3372fa726b07d26edb63fea2c0a0864fbc1ae4", "committedDate": "2020-01-30T15:59:45Z", "message": "Removing staging repo for oauth library 0.3.0\n\nSigned-off-by: Paolo Patierno <ppatierno@live.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1837, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}