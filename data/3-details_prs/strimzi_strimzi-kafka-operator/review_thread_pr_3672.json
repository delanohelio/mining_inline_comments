{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5MTQwNDM1", "number": 3672, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNjoxNTo0OFrOElg3Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNjoxODo0N1rOEm474g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzcxMTQ3OnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaBrokerLoggingConfigurationDiff.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNjoxNTo0OFrOHVBx4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMTozNzowNFrOHXB2pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgxMTI5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                int p = line.indexOf(\"=\", 13);\n          \n          \n            \n                                int p = line.indexOf(\"=\", \"log4j.logger.\".length());", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3672#discussion_r491811298", "createdAt": "2020-09-21T06:15:48Z", "author": {"login": "sknot-rh"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaBrokerLoggingConfigurationDiff.java", "diffHunk": "@@ -96,6 +95,80 @@ public int getDiffSize() {\n         return updatedCE;\n     }\n \n+    private static Map<String, String> readLog4jConfig(String config) {\n+\n+        Map<String, String> parsed = new LinkedHashMap<>();\n+        Map<String, String> env = new HashMap<>();\n+        BufferedReader reader = new BufferedReader(new StringReader(config));\n+        String line;\n+        try {\n+            while ((line = reader.readLine()) != null) {\n+                // skip comments\n+                if (line.startsWith(\"#\")) continue;\n+\n+                // ignore empty lines\n+                line = line.trim();\n+                if (line.length() == 0) continue;\n+\n+                // everything that does not start with 'log4j.' is a variable definition\n+                if (!line.startsWith(\"log4j.\")) {\n+                    int p = line.indexOf(\"=\");\n+                    if (p >= 0) {\n+                        env.put(line.substring(0, p).trim(), line.substring(p + 1).trim());\n+                    } else {\n+                        env.put(line.trim(), \"\");\n+                    }\n+                    log.debug(\"Treating the line as ENV var declaration: {}\", line);\n+                    continue;\n+                }\n+\n+                // we ignore appenders (log4j.appender.*)\n+                // and only handle loggers (log4j.logger.*)\n+                if (line.startsWith(\"log4j.logger.\")) {\n+                    int p = line.indexOf(\"=\", 13);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55324fce3181012c2a3b5d21457df7477666eadd"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgxNDEyNw==", "bodyText": "Multiple occurrences.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3672#discussion_r491814127", "createdAt": "2020-09-21T06:24:45Z", "author": {"login": "sknot-rh"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaBrokerLoggingConfigurationDiff.java", "diffHunk": "@@ -96,6 +95,80 @@ public int getDiffSize() {\n         return updatedCE;\n     }\n \n+    private static Map<String, String> readLog4jConfig(String config) {\n+\n+        Map<String, String> parsed = new LinkedHashMap<>();\n+        Map<String, String> env = new HashMap<>();\n+        BufferedReader reader = new BufferedReader(new StringReader(config));\n+        String line;\n+        try {\n+            while ((line = reader.readLine()) != null) {\n+                // skip comments\n+                if (line.startsWith(\"#\")) continue;\n+\n+                // ignore empty lines\n+                line = line.trim();\n+                if (line.length() == 0) continue;\n+\n+                // everything that does not start with 'log4j.' is a variable definition\n+                if (!line.startsWith(\"log4j.\")) {\n+                    int p = line.indexOf(\"=\");\n+                    if (p >= 0) {\n+                        env.put(line.substring(0, p).trim(), line.substring(p + 1).trim());\n+                    } else {\n+                        env.put(line.trim(), \"\");\n+                    }\n+                    log.debug(\"Treating the line as ENV var declaration: {}\", line);\n+                    continue;\n+                }\n+\n+                // we ignore appenders (log4j.appender.*)\n+                // and only handle loggers (log4j.logger.*)\n+                if (line.startsWith(\"log4j.logger.\")) {\n+                    int p = line.indexOf(\"=\", 13);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgxMTI5OA=="}, "originalCommit": {"oid": "55324fce3181012c2a3b5d21457df7477666eadd"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkwOTY2OQ==", "bodyText": "Yeah, makes it easier to read.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3672#discussion_r493909669", "createdAt": "2020-09-23T21:37:04Z", "author": {"login": "mstruk"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaBrokerLoggingConfigurationDiff.java", "diffHunk": "@@ -96,6 +95,80 @@ public int getDiffSize() {\n         return updatedCE;\n     }\n \n+    private static Map<String, String> readLog4jConfig(String config) {\n+\n+        Map<String, String> parsed = new LinkedHashMap<>();\n+        Map<String, String> env = new HashMap<>();\n+        BufferedReader reader = new BufferedReader(new StringReader(config));\n+        String line;\n+        try {\n+            while ((line = reader.readLine()) != null) {\n+                // skip comments\n+                if (line.startsWith(\"#\")) continue;\n+\n+                // ignore empty lines\n+                line = line.trim();\n+                if (line.length() == 0) continue;\n+\n+                // everything that does not start with 'log4j.' is a variable definition\n+                if (!line.startsWith(\"log4j.\")) {\n+                    int p = line.indexOf(\"=\");\n+                    if (p >= 0) {\n+                        env.put(line.substring(0, p).trim(), line.substring(p + 1).trim());\n+                    } else {\n+                        env.put(line.trim(), \"\");\n+                    }\n+                    log.debug(\"Treating the line as ENV var declaration: {}\", line);\n+                    continue;\n+                }\n+\n+                // we ignore appenders (log4j.appender.*)\n+                // and only handle loggers (log4j.logger.*)\n+                if (line.startsWith(\"log4j.logger.\")) {\n+                    int p = line.indexOf(\"=\", 13);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgxMTI5OA=="}, "originalCommit": {"oid": "55324fce3181012c2a3b5d21457df7477666eadd"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzcxNTY2OnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaBrokerLoggingConfigurationDiff.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNjoxNzo0M1rOHVB0KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwODoyMzozMFrOHcSYQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgxMTg4MA==", "bodyText": "What about spaces before =?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3672#discussion_r491811880", "createdAt": "2020-09-21T06:17:43Z", "author": {"login": "sknot-rh"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaBrokerLoggingConfigurationDiff.java", "diffHunk": "@@ -96,6 +95,80 @@ public int getDiffSize() {\n         return updatedCE;\n     }\n \n+    private static Map<String, String> readLog4jConfig(String config) {\n+\n+        Map<String, String> parsed = new LinkedHashMap<>();\n+        Map<String, String> env = new HashMap<>();\n+        BufferedReader reader = new BufferedReader(new StringReader(config));\n+        String line;\n+        try {\n+            while ((line = reader.readLine()) != null) {\n+                // skip comments\n+                if (line.startsWith(\"#\")) continue;\n+\n+                // ignore empty lines\n+                line = line.trim();\n+                if (line.length() == 0) continue;\n+\n+                // everything that does not start with 'log4j.' is a variable definition\n+                if (!line.startsWith(\"log4j.\")) {\n+                    int p = line.indexOf(\"=\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55324fce3181012c2a3b5d21457df7477666eadd"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkxMDMyMQ==", "bodyText": "trim() takes care of those, or do you have something else in mind?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3672#discussion_r493910321", "createdAt": "2020-09-23T21:38:40Z", "author": {"login": "mstruk"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaBrokerLoggingConfigurationDiff.java", "diffHunk": "@@ -96,6 +95,80 @@ public int getDiffSize() {\n         return updatedCE;\n     }\n \n+    private static Map<String, String> readLog4jConfig(String config) {\n+\n+        Map<String, String> parsed = new LinkedHashMap<>();\n+        Map<String, String> env = new HashMap<>();\n+        BufferedReader reader = new BufferedReader(new StringReader(config));\n+        String line;\n+        try {\n+            while ((line = reader.readLine()) != null) {\n+                // skip comments\n+                if (line.startsWith(\"#\")) continue;\n+\n+                // ignore empty lines\n+                line = line.trim();\n+                if (line.length() == 0) continue;\n+\n+                // everything that does not start with 'log4j.' is a variable definition\n+                if (!line.startsWith(\"log4j.\")) {\n+                    int p = line.indexOf(\"=\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgxMTg4MA=="}, "originalCommit": {"oid": "55324fce3181012c2a3b5d21457df7477666eadd"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA2MTU5Mw==", "bodyText": "Ah, yes, you are right", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3672#discussion_r494061593", "createdAt": "2020-09-24T06:13:48Z", "author": {"login": "sknot-rh"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaBrokerLoggingConfigurationDiff.java", "diffHunk": "@@ -96,6 +95,80 @@ public int getDiffSize() {\n         return updatedCE;\n     }\n \n+    private static Map<String, String> readLog4jConfig(String config) {\n+\n+        Map<String, String> parsed = new LinkedHashMap<>();\n+        Map<String, String> env = new HashMap<>();\n+        BufferedReader reader = new BufferedReader(new StringReader(config));\n+        String line;\n+        try {\n+            while ((line = reader.readLine()) != null) {\n+                // skip comments\n+                if (line.startsWith(\"#\")) continue;\n+\n+                // ignore empty lines\n+                line = line.trim();\n+                if (line.length() == 0) continue;\n+\n+                // everything that does not start with 'log4j.' is a variable definition\n+                if (!line.startsWith(\"log4j.\")) {\n+                    int p = line.indexOf(\"=\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgxMTg4MA=="}, "originalCommit": {"oid": "55324fce3181012c2a3b5d21457df7477666eadd"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA2Mjk3NA==", "bodyText": "Can we have a better variable name than p?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3672#discussion_r494062974", "createdAt": "2020-09-24T06:17:36Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaBrokerLoggingConfigurationDiff.java", "diffHunk": "@@ -96,6 +95,80 @@ public int getDiffSize() {\n         return updatedCE;\n     }\n \n+    private static Map<String, String> readLog4jConfig(String config) {\n+\n+        Map<String, String> parsed = new LinkedHashMap<>();\n+        Map<String, String> env = new HashMap<>();\n+        BufferedReader reader = new BufferedReader(new StringReader(config));\n+        String line;\n+        try {\n+            while ((line = reader.readLine()) != null) {\n+                // skip comments\n+                if (line.startsWith(\"#\")) continue;\n+\n+                // ignore empty lines\n+                line = line.trim();\n+                if (line.length() == 0) continue;\n+\n+                // everything that does not start with 'log4j.' is a variable definition\n+                if (!line.startsWith(\"log4j.\")) {\n+                    int p = line.indexOf(\"=\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgxMTg4MA=="}, "originalCommit": {"oid": "55324fce3181012c2a3b5d21457df7477666eadd"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQxMzAyNg==", "bodyText": "Can we have a better variable name than p?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3672#discussion_r499413026", "createdAt": "2020-10-05T08:04:03Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaBrokerLoggingConfigurationDiff.java", "diffHunk": "@@ -96,6 +95,80 @@ public int getDiffSize() {\n         return updatedCE;\n     }\n \n+    private static Map<String, String> readLog4jConfig(String config) {\n+\n+        Map<String, String> parsed = new LinkedHashMap<>();\n+        Map<String, String> env = new HashMap<>();\n+        BufferedReader reader = new BufferedReader(new StringReader(config));\n+        String line;\n+        try {\n+            while ((line = reader.readLine()) != null) {\n+                // skip comments\n+                if (line.startsWith(\"#\")) continue;\n+\n+                // ignore empty lines\n+                line = line.trim();\n+                if (line.length() == 0) continue;\n+\n+                // everything that does not start with 'log4j.' is a variable definition\n+                if (!line.startsWith(\"log4j.\")) {\n+                    int p = line.indexOf(\"=\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgxMTg4MA=="}, "originalCommit": {"oid": "55324fce3181012c2a3b5d21457df7477666eadd"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQyMzI5Ng==", "bodyText": "Hmm, looks like I missed this one.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3672#discussion_r499423296", "createdAt": "2020-10-05T08:23:30Z", "author": {"login": "mstruk"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaBrokerLoggingConfigurationDiff.java", "diffHunk": "@@ -96,6 +95,80 @@ public int getDiffSize() {\n         return updatedCE;\n     }\n \n+    private static Map<String, String> readLog4jConfig(String config) {\n+\n+        Map<String, String> parsed = new LinkedHashMap<>();\n+        Map<String, String> env = new HashMap<>();\n+        BufferedReader reader = new BufferedReader(new StringReader(config));\n+        String line;\n+        try {\n+            while ((line = reader.readLine()) != null) {\n+                // skip comments\n+                if (line.startsWith(\"#\")) continue;\n+\n+                // ignore empty lines\n+                line = line.trim();\n+                if (line.length() == 0) continue;\n+\n+                // everything that does not start with 'log4j.' is a variable definition\n+                if (!line.startsWith(\"log4j.\")) {\n+                    int p = line.indexOf(\"=\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgxMTg4MA=="}, "originalCommit": {"oid": "55324fce3181012c2a3b5d21457df7477666eadd"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MjE0MTc4OnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaBrokerLoggingConfigurationDiff.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNjoxODo0N1rOHXLPMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNDowMzo0MFrOHYFA_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA2MzQwOA==", "bodyText": "Likewise, why we are using single letter variable here? The rest of the Strimzi codebase is pretty consistently using descriptive names for variables like these.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3672#discussion_r494063408", "createdAt": "2020-09-24T06:18:47Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaBrokerLoggingConfigurationDiff.java", "diffHunk": "@@ -96,6 +95,80 @@ public int getDiffSize() {\n         return updatedCE;\n     }\n \n+    private static Map<String, String> readLog4jConfig(String config) {\n+\n+        Map<String, String> parsed = new LinkedHashMap<>();\n+        Map<String, String> env = new HashMap<>();\n+        BufferedReader reader = new BufferedReader(new StringReader(config));\n+        String line;\n+        try {\n+            while ((line = reader.readLine()) != null) {\n+                // skip comments\n+                if (line.startsWith(\"#\")) continue;\n+\n+                // ignore empty lines\n+                line = line.trim();\n+                if (line.length() == 0) continue;\n+\n+                // everything that does not start with 'log4j.' is a variable definition\n+                if (!line.startsWith(\"log4j.\")) {\n+                    int p = line.indexOf(\"=\");\n+                    if (p >= 0) {\n+                        env.put(line.substring(0, p).trim(), line.substring(p + 1).trim());\n+                    } else {\n+                        env.put(line.trim(), \"\");\n+                    }\n+                    log.debug(\"Treating the line as ENV var declaration: {}\", line);\n+                    continue;\n+                }\n+\n+                // we ignore appenders (log4j.appender.*)\n+                // and only handle loggers (log4j.logger.*)\n+                if (line.startsWith(\"log4j.logger.\")) {\n+                    int p = line.indexOf(\"=\", 13);\n+                    if (p == -1) {\n+                        log.debug(\"Skipping log4j.logger.* declaration without level: {}\", line);\n+                        continue;\n+                    }\n+                    String name = line.substring(13, p).trim();\n+                    String value = line.substring(p + 1).trim();\n+\n+                    value = expandVars(value, env);\n+                    parsed.put(name, value);\n+\n+                } else if (line.startsWith(\"log4j.rootLogger=\")) {\n+                    parsed.put(\"root\", expandVars(line.substring(17).trim(), env));\n+\n+                } else {\n+                    log.debug(\"Skipping log4j line: {}\", line);\n+                }\n+            }\n+        } catch (Exception e) {\n+            log.error(\"Failed to parse logging configuration: \" + config, e);\n+            return Collections.emptyMap();\n+        }\n+        return parsed;\n+    }\n+\n+    private static String expandVars(String value, Map<String, String> env) {\n+        StringBuilder sb = new StringBuilder();\n+        int e = -1;\n+        int b;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55324fce3181012c2a3b5d21457df7477666eadd"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE4NzU5Ng==", "bodyText": "I agree with Tom. It's hard to read code with one letter variables.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3672#discussion_r494187596", "createdAt": "2020-09-24T09:55:28Z", "author": {"login": "Frawless"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaBrokerLoggingConfigurationDiff.java", "diffHunk": "@@ -96,6 +95,80 @@ public int getDiffSize() {\n         return updatedCE;\n     }\n \n+    private static Map<String, String> readLog4jConfig(String config) {\n+\n+        Map<String, String> parsed = new LinkedHashMap<>();\n+        Map<String, String> env = new HashMap<>();\n+        BufferedReader reader = new BufferedReader(new StringReader(config));\n+        String line;\n+        try {\n+            while ((line = reader.readLine()) != null) {\n+                // skip comments\n+                if (line.startsWith(\"#\")) continue;\n+\n+                // ignore empty lines\n+                line = line.trim();\n+                if (line.length() == 0) continue;\n+\n+                // everything that does not start with 'log4j.' is a variable definition\n+                if (!line.startsWith(\"log4j.\")) {\n+                    int p = line.indexOf(\"=\");\n+                    if (p >= 0) {\n+                        env.put(line.substring(0, p).trim(), line.substring(p + 1).trim());\n+                    } else {\n+                        env.put(line.trim(), \"\");\n+                    }\n+                    log.debug(\"Treating the line as ENV var declaration: {}\", line);\n+                    continue;\n+                }\n+\n+                // we ignore appenders (log4j.appender.*)\n+                // and only handle loggers (log4j.logger.*)\n+                if (line.startsWith(\"log4j.logger.\")) {\n+                    int p = line.indexOf(\"=\", 13);\n+                    if (p == -1) {\n+                        log.debug(\"Skipping log4j.logger.* declaration without level: {}\", line);\n+                        continue;\n+                    }\n+                    String name = line.substring(13, p).trim();\n+                    String value = line.substring(p + 1).trim();\n+\n+                    value = expandVars(value, env);\n+                    parsed.put(name, value);\n+\n+                } else if (line.startsWith(\"log4j.rootLogger=\")) {\n+                    parsed.put(\"root\", expandVars(line.substring(17).trim(), env));\n+\n+                } else {\n+                    log.debug(\"Skipping log4j line: {}\", line);\n+                }\n+            }\n+        } catch (Exception e) {\n+            log.error(\"Failed to parse logging configuration: \" + config, e);\n+            return Collections.emptyMap();\n+        }\n+        return parsed;\n+    }\n+\n+    private static String expandVars(String value, Map<String, String> env) {\n+        StringBuilder sb = new StringBuilder();\n+        int e = -1;\n+        int b;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA2MzQwOA=="}, "originalCommit": {"oid": "55324fce3181012c2a3b5d21457df7477666eadd"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTAxMDA0Nw==", "bodyText": "I can see the majority opinion is against me on this one :)\nI'll call these startIdx and endIdx then.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3672#discussion_r495010047", "createdAt": "2020-09-25T14:03:40Z", "author": {"login": "mstruk"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaBrokerLoggingConfigurationDiff.java", "diffHunk": "@@ -96,6 +95,80 @@ public int getDiffSize() {\n         return updatedCE;\n     }\n \n+    private static Map<String, String> readLog4jConfig(String config) {\n+\n+        Map<String, String> parsed = new LinkedHashMap<>();\n+        Map<String, String> env = new HashMap<>();\n+        BufferedReader reader = new BufferedReader(new StringReader(config));\n+        String line;\n+        try {\n+            while ((line = reader.readLine()) != null) {\n+                // skip comments\n+                if (line.startsWith(\"#\")) continue;\n+\n+                // ignore empty lines\n+                line = line.trim();\n+                if (line.length() == 0) continue;\n+\n+                // everything that does not start with 'log4j.' is a variable definition\n+                if (!line.startsWith(\"log4j.\")) {\n+                    int p = line.indexOf(\"=\");\n+                    if (p >= 0) {\n+                        env.put(line.substring(0, p).trim(), line.substring(p + 1).trim());\n+                    } else {\n+                        env.put(line.trim(), \"\");\n+                    }\n+                    log.debug(\"Treating the line as ENV var declaration: {}\", line);\n+                    continue;\n+                }\n+\n+                // we ignore appenders (log4j.appender.*)\n+                // and only handle loggers (log4j.logger.*)\n+                if (line.startsWith(\"log4j.logger.\")) {\n+                    int p = line.indexOf(\"=\", 13);\n+                    if (p == -1) {\n+                        log.debug(\"Skipping log4j.logger.* declaration without level: {}\", line);\n+                        continue;\n+                    }\n+                    String name = line.substring(13, p).trim();\n+                    String value = line.substring(p + 1).trim();\n+\n+                    value = expandVars(value, env);\n+                    parsed.put(name, value);\n+\n+                } else if (line.startsWith(\"log4j.rootLogger=\")) {\n+                    parsed.put(\"root\", expandVars(line.substring(17).trim(), env));\n+\n+                } else {\n+                    log.debug(\"Skipping log4j line: {}\", line);\n+                }\n+            }\n+        } catch (Exception e) {\n+            log.error(\"Failed to parse logging configuration: \" + config, e);\n+            return Collections.emptyMap();\n+        }\n+        return parsed;\n+    }\n+\n+    private static String expandVars(String value, Map<String, String> env) {\n+        StringBuilder sb = new StringBuilder();\n+        int e = -1;\n+        int b;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA2MzQwOA=="}, "originalCommit": {"oid": "55324fce3181012c2a3b5d21457df7477666eadd"}, "originalPosition": 110}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1147, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}