{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMTM1MzA3", "number": 2797, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNTo1NTo0MVrODv17Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNjowNToxOFrODv2Fxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDkzMTk1OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/FileUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNTo1NTo0MVrOGCf-6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNTo1NTo0MVrOGCf-6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI3NDM0NQ==", "bodyText": "if adding this line, maybe the previous one is not needed anymore?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2797#discussion_r405274345", "createdAt": "2020-04-08T05:55:41Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/FileUtils.java", "diffHunk": "@@ -107,6 +107,7 @@ public static File updateNamespaceOfYamlFile(String pathToOrigin, String namespa\n \n             String yaml = new String(encoded, StandardCharsets.UTF_8);\n             yaml = yaml.replaceAll(\"namespace: .*\", \"namespace: \" + namespace);\n+            yaml = yaml.replaceAll(\"myproject\", namespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65dc441110ace049679b4c48a749992d195a1c9d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDkzNTM1OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/specific/MetricsUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNTo1NzowNFrOGCgA8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNTo1NzowNFrOGCgA8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI3NDg2NA==", "bodyText": "what do you think about defining a constant for this metric port (9404) ?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2797#discussion_r405274864", "createdAt": "2020-04-08T05:57:04Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/specific/MetricsUtils.java", "diffHunk": "@@ -55,22 +57,37 @@ public static String collectMetrics(String podName, String metricsPath) throws I\n \n     public static HashMap<String, String> collectKafkaPodsMetrics(String clusterName) {\n         LabelSelector kafkaSelector = kubeClient().getStatefulSetSelectors(KafkaResources.kafkaStatefulSetName(clusterName));\n-        return collectMetricsFromPods(kafkaSelector);\n+        return collectMetricsFromPods(kafkaSelector, 9404);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65dc441110ace049679b4c48a749992d195a1c9d"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDk1MjM0OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNjowMzowMVrOGCgKQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNjowMzowMVrOGCgKQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI3NzI0OQ==", "bodyText": "Pay attention at #2800 , it's going to change kafka_connect_connect_worker_metrics_connector_count to kafka_connect_worker_connector_count", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2797#discussion_r405277249", "createdAt": "2020-04-08T06:03:01Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "diffHunk": "@@ -179,6 +187,77 @@ void testKafkaExporterDifferentSetting() throws InterruptedException, ExecutionE\n         assertThat(\"Exporter starting script has wrong setting than it's specified in CR\", runScriptContent.contains(\"--topic.filter=\\\"\" + TEST_TOPIC_NAME + \"\\\"\"));\n     }\n \n+    @Test\n+    void testClusterOperatorMetrics() {\n+        List<String> resourcesList = Arrays.asList(\"Kafka\", \"KafkaBridge\", \"KafkaConnect\", \"KafkaConnectS2I\", \"KafkaConnector\", \"KafkaMirrorMaker\", \"KafkaMirrorMaker2\");\n+\n+        for (String resource : resourcesList) {\n+            assertCoMetricNotNull(\"strimzi_reconciliations_periodical_total\", resource);\n+            assertCoMetricNotNull(\"strimzi_reconciliations_duration_seconds_count\", resource);\n+            assertCoMetricNotNull(\"strimzi_reconciliations_duration_seconds_sum\", resource);\n+            assertCoMetricNotNull(\"strimzi_reconciliations_duration_seconds_max\", resource);\n+            assertCoMetricNotNull(\"strimzi_reconciliations_locked_total\", resource);\n+            assertCoMetricNotNull(\"strimzi_reconciliations_successful_total\", resource);\n+            assertCoMetricNotNull(\"strimzi_reconciliations_periodical_total\", resource);\n+            assertCoMetricNotNull(\"strimzi_reconciliations_failed_total\", resource);\n+        }\n+\n+        Pattern connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"Kafka\\\",} ([\\\\d.][^\\\\n]+)\");\n+        ArrayList<Double> values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n+        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 2));\n+\n+        connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"KafkaBridge\\\",} ([\\\\d.][^\\\\n]+)\");\n+        values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n+        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 0));\n+\n+        connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"KafkaConnect\\\",} ([\\\\d.][^\\\\n]+)\");\n+        values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n+        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 1));\n+\n+        connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"KafkaConnectS2I\\\",} ([\\\\d.][^\\\\n]+)\");\n+        values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n+        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 0));\n+\n+        connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"KafkaMirrorMaker\\\",} ([\\\\d.][^\\\\n]+)\");\n+        values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n+        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 0));\n+\n+        connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"KafkaMirrorMaker2\\\",} ([\\\\d.][^\\\\n]+)\");\n+        values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n+        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 1));\n+\n+        connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"KafkaConnector\\\",} ([\\\\d.][^\\\\n]+)\");\n+        values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n+        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 0));\n+    }\n+\n+    @Test\n+    void testUserOperatorMetrics() {\n+        assertCoMetricNotNull(\"strimzi_reconciliations_locked_total\", \"KafkaUser\");\n+        assertCoMetricNotNull(\"strimzi_reconciliations_successful_total\", \"KafkaUser\");\n+        assertCoMetricNotNull(\"strimzi_reconciliations_duration_seconds_count\", \"KafkaUser\");\n+        assertCoMetricNotNull(\"strimzi_reconciliations_duration_seconds_sum\", \"KafkaUser\");\n+        assertCoMetricNotNull(\"strimzi_reconciliations_duration_seconds_max\", \"KafkaUser\");\n+        assertCoMetricNotNull(\"strimzi_reconciliations_periodical_total\", \"KafkaUser\");\n+        assertCoMetricNotNull(\"strimzi_reconciliations_failed_total\", \"KafkaUser\");\n+        assertCoMetricNotNull(\"strimzi_reconciliations_total\", \"KafkaUser\");\n+\n+        Pattern connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"KafkaUser\\\",} ([\\\\d.][^\\\\n]+)\");\n+        ArrayList<Double> values = MetricsUtils.collectSpecificMetric(connectResponse, userOperatorMetricsData);\n+        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 2));\n+    }\n+\n+    @Test\n+    void testMirrorMaker2Metrics() {\n+        Pattern connectResponse = Pattern.compile(\"kafka_connect_connect_worker_metrics_connector_count ([\\\\d.][^\\\\n]+)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65dc441110ace049679b4c48a749992d195a1c9d"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDk1ODc5OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNjowNToxOFrOGCgNyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNjowNToxOFrOGCgNyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI3ODE1Mg==", "bodyText": "Ditto as above, it's going to be replaced by kafka_connect_worker_task_count", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2797#discussion_r405278152", "createdAt": "2020-04-08T06:05:18Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "diffHunk": "@@ -179,6 +187,77 @@ void testKafkaExporterDifferentSetting() throws InterruptedException, ExecutionE\n         assertThat(\"Exporter starting script has wrong setting than it's specified in CR\", runScriptContent.contains(\"--topic.filter=\\\"\" + TEST_TOPIC_NAME + \"\\\"\"));\n     }\n \n+    @Test\n+    void testClusterOperatorMetrics() {\n+        List<String> resourcesList = Arrays.asList(\"Kafka\", \"KafkaBridge\", \"KafkaConnect\", \"KafkaConnectS2I\", \"KafkaConnector\", \"KafkaMirrorMaker\", \"KafkaMirrorMaker2\");\n+\n+        for (String resource : resourcesList) {\n+            assertCoMetricNotNull(\"strimzi_reconciliations_periodical_total\", resource);\n+            assertCoMetricNotNull(\"strimzi_reconciliations_duration_seconds_count\", resource);\n+            assertCoMetricNotNull(\"strimzi_reconciliations_duration_seconds_sum\", resource);\n+            assertCoMetricNotNull(\"strimzi_reconciliations_duration_seconds_max\", resource);\n+            assertCoMetricNotNull(\"strimzi_reconciliations_locked_total\", resource);\n+            assertCoMetricNotNull(\"strimzi_reconciliations_successful_total\", resource);\n+            assertCoMetricNotNull(\"strimzi_reconciliations_periodical_total\", resource);\n+            assertCoMetricNotNull(\"strimzi_reconciliations_failed_total\", resource);\n+        }\n+\n+        Pattern connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"Kafka\\\",} ([\\\\d.][^\\\\n]+)\");\n+        ArrayList<Double> values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n+        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 2));\n+\n+        connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"KafkaBridge\\\",} ([\\\\d.][^\\\\n]+)\");\n+        values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n+        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 0));\n+\n+        connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"KafkaConnect\\\",} ([\\\\d.][^\\\\n]+)\");\n+        values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n+        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 1));\n+\n+        connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"KafkaConnectS2I\\\",} ([\\\\d.][^\\\\n]+)\");\n+        values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n+        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 0));\n+\n+        connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"KafkaMirrorMaker\\\",} ([\\\\d.][^\\\\n]+)\");\n+        values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n+        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 0));\n+\n+        connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"KafkaMirrorMaker2\\\",} ([\\\\d.][^\\\\n]+)\");\n+        values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n+        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 1));\n+\n+        connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"KafkaConnector\\\",} ([\\\\d.][^\\\\n]+)\");\n+        values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n+        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 0));\n+    }\n+\n+    @Test\n+    void testUserOperatorMetrics() {\n+        assertCoMetricNotNull(\"strimzi_reconciliations_locked_total\", \"KafkaUser\");\n+        assertCoMetricNotNull(\"strimzi_reconciliations_successful_total\", \"KafkaUser\");\n+        assertCoMetricNotNull(\"strimzi_reconciliations_duration_seconds_count\", \"KafkaUser\");\n+        assertCoMetricNotNull(\"strimzi_reconciliations_duration_seconds_sum\", \"KafkaUser\");\n+        assertCoMetricNotNull(\"strimzi_reconciliations_duration_seconds_max\", \"KafkaUser\");\n+        assertCoMetricNotNull(\"strimzi_reconciliations_periodical_total\", \"KafkaUser\");\n+        assertCoMetricNotNull(\"strimzi_reconciliations_failed_total\", \"KafkaUser\");\n+        assertCoMetricNotNull(\"strimzi_reconciliations_total\", \"KafkaUser\");\n+\n+        Pattern connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"KafkaUser\\\",} ([\\\\d.][^\\\\n]+)\");\n+        ArrayList<Double> values = MetricsUtils.collectSpecificMetric(connectResponse, userOperatorMetricsData);\n+        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 2));\n+    }\n+\n+    @Test\n+    void testMirrorMaker2Metrics() {\n+        Pattern connectResponse = Pattern.compile(\"kafka_connect_connect_worker_metrics_connector_count ([\\\\d.][^\\\\n]+)\");\n+        ArrayList<Double> values = MetricsUtils.collectSpecificMetric(connectResponse, kafkaMirrorMaker2MetricsData);\n+        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 3));\n+\n+        connectResponse = Pattern.compile(\"kafka_connect_connect_worker_metrics_task_count ([\\\\d.][^\\\\n]+)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65dc441110ace049679b4c48a749992d195a1c9d"}, "originalPosition": 114}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 120, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}