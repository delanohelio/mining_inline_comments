{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxNTYxNjA1", "number": 3961, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMjozODo1OVrOE5dzIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxNzoyNTozN1rOFVTaQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NjkyNTEyOnYy", "diffSide": "RIGHT", "path": "install/cluster-operator/020-RoleBinding-strimzi-cluster-operator.yaml-e", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMjozODo1OVrOHz8c0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMDo1MzoxMFrOH0vPag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIyOTg0MQ==", "bodyText": "Wrongly committed file? There seems to be a bunch of them.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3961#discussion_r524229841", "createdAt": "2020-11-16T12:38:59Z", "author": {"login": "scholzj"}, "path": "install/cluster-operator/020-RoleBinding-strimzi-cluster-operator.yaml-e", "diffHunk": "@@ -0,0 +1,14 @@\n+apiVersion: rbac.authorization.k8s.io/v1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5d91d9fa9b79befdce4d2ac9325203115456f09"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ3ODEzNg==", "bodyText": "The build produced a bunch of these inside the source tree - I assumed these should be added like most of the other autogenerated things inside the source tree. So these yaml-e files should be generated as they currently are, but should not be included in git? What are they for?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3961#discussion_r524478136", "createdAt": "2020-11-16T18:19:40Z", "author": {"login": "mstruk"}, "path": "install/cluster-operator/020-RoleBinding-strimzi-cluster-operator.yaml-e", "diffHunk": "@@ -0,0 +1,14 @@\n+apiVersion: rbac.authorization.k8s.io/v1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIyOTg0MQ=="}, "originalCommit": {"oid": "f5d91d9fa9b79befdce4d2ac9325203115456f09"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ4MDI5MA==", "bodyText": "They should not have the .yaml-e extension. It should be just .yaml. This has to be something in your environment causing this.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3961#discussion_r524480290", "createdAt": "2020-11-16T18:23:23Z", "author": {"login": "scholzj"}, "path": "install/cluster-operator/020-RoleBinding-strimzi-cluster-operator.yaml-e", "diffHunk": "@@ -0,0 +1,14 @@\n+apiVersion: rbac.authorization.k8s.io/v1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIyOTg0MQ=="}, "originalCommit": {"oid": "f5d91d9fa9b79befdce4d2ac9325203115456f09"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA2MTk5NA==", "bodyText": "No idea how they got generated, can't reproduce it.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3961#discussion_r525061994", "createdAt": "2020-11-17T10:53:10Z", "author": {"login": "mstruk"}, "path": "install/cluster-operator/020-RoleBinding-strimzi-cluster-operator.yaml-e", "diffHunk": "@@ -0,0 +1,14 @@\n+apiVersion: rbac.authorization.k8s.io/v1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIyOTg0MQ=="}, "originalCommit": {"oid": "f5d91d9fa9b79befdce4d2ac9325203115456f09"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NjkzMzg3OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/proc-oauth-authentication-broker-config.adoc", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMjo0MDoyNFrOHz8ipQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMzowNDo1M1rOH0z2Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIzMTMzMw==", "bodyText": "For easier readability, should the enablePlain and enableOAuthBearer be next to each other?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3961#discussion_r524231333", "createdAt": "2020-11-16T12:40:24Z", "author": {"login": "scholzj"}, "path": "documentation/modules/oauth/proc-oauth-authentication-broker-config.adoc", "diffHunk": "@@ -121,12 +121,18 @@ Depending on how you apply OAuth 2.0 authentication, and the type of authorizati\n     fallbackUserNamePrefix: client-account- <3>\n     validTokenType: bearer <4>\n     userInfoEndpointUri: __https://OAUTH-SERVER-ADDRESS/auth/realms/external/protocol/openid-connect/userinfo__ <5>\n+    enablePlain: true <6>\n+    tokenEndpointUri: __https://OAUTH-SERVER-ADDRESS/auth/realms/external/protocol/openid-connect/token__ <7>\n+    enableOAuthBearer: false <8>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5d91d9fa9b79befdce4d2ac9325203115456f09"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ3OTI2Ng==", "bodyText": "I put tokenEndpointUri after enablePlain because it's relevant only when enablePlain is true, so it made sense to me to put it there. But we can also put it after enableOAuthBearer so the other two are next to each other.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3961#discussion_r524479266", "createdAt": "2020-11-16T18:21:34Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/proc-oauth-authentication-broker-config.adoc", "diffHunk": "@@ -121,12 +121,18 @@ Depending on how you apply OAuth 2.0 authentication, and the type of authorizati\n     fallbackUserNamePrefix: client-account- <3>\n     validTokenType: bearer <4>\n     userInfoEndpointUri: __https://OAUTH-SERVER-ADDRESS/auth/realms/external/protocol/openid-connect/userinfo__ <5>\n+    enablePlain: true <6>\n+    tokenEndpointUri: __https://OAUTH-SERVER-ADDRESS/auth/realms/external/protocol/openid-connect/token__ <7>\n+    enableOAuthBearer: false <8>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIzMTMzMw=="}, "originalCommit": {"oid": "f5d91d9fa9b79befdce4d2ac9325203115456f09"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ4MTA1Mw==", "bodyText": "But we can also put it after enableOAuthBearer so the other two are next to each other.\n\nI guess that makes sense then.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3961#discussion_r524481053", "createdAt": "2020-11-16T18:24:34Z", "author": {"login": "scholzj"}, "path": "documentation/modules/oauth/proc-oauth-authentication-broker-config.adoc", "diffHunk": "@@ -121,12 +121,18 @@ Depending on how you apply OAuth 2.0 authentication, and the type of authorizati\n     fallbackUserNamePrefix: client-account- <3>\n     validTokenType: bearer <4>\n     userInfoEndpointUri: __https://OAUTH-SERVER-ADDRESS/auth/realms/external/protocol/openid-connect/userinfo__ <5>\n+    enablePlain: true <6>\n+    tokenEndpointUri: __https://OAUTH-SERVER-ADDRESS/auth/realms/external/protocol/openid-connect/token__ <7>\n+    enableOAuthBearer: false <8>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIzMTMzMw=="}, "originalCommit": {"oid": "f5d91d9fa9b79befdce4d2ac9325203115456f09"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA4NzM5OA==", "bodyText": "What about flipping the order like this:\nenableOAuthBearer: false\nenablePlain: true\ntokenEndpointUri: https://...", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3961#discussion_r525087398", "createdAt": "2020-11-17T11:36:40Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/proc-oauth-authentication-broker-config.adoc", "diffHunk": "@@ -121,12 +121,18 @@ Depending on how you apply OAuth 2.0 authentication, and the type of authorizati\n     fallbackUserNamePrefix: client-account- <3>\n     validTokenType: bearer <4>\n     userInfoEndpointUri: __https://OAUTH-SERVER-ADDRESS/auth/realms/external/protocol/openid-connect/userinfo__ <5>\n+    enablePlain: true <6>\n+    tokenEndpointUri: __https://OAUTH-SERVER-ADDRESS/auth/realms/external/protocol/openid-connect/token__ <7>\n+    enableOAuthBearer: false <8>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIzMTMzMw=="}, "originalCommit": {"oid": "f5d91d9fa9b79befdce4d2ac9325203115456f09"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEzNzQxOA==", "bodyText": "Yeah, that works for me perfectly fine.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3961#discussion_r525137418", "createdAt": "2020-11-17T13:04:53Z", "author": {"login": "scholzj"}, "path": "documentation/modules/oauth/proc-oauth-authentication-broker-config.adoc", "diffHunk": "@@ -121,12 +121,18 @@ Depending on how you apply OAuth 2.0 authentication, and the type of authorizati\n     fallbackUserNamePrefix: client-account- <3>\n     validTokenType: bearer <4>\n     userInfoEndpointUri: __https://OAUTH-SERVER-ADDRESS/auth/realms/external/protocol/openid-connect/userinfo__ <5>\n+    enablePlain: true <6>\n+    tokenEndpointUri: __https://OAUTH-SERVER-ADDRESS/auth/realms/external/protocol/openid-connect/token__ <7>\n+    enableOAuthBearer: false <8>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIzMTMzMw=="}, "originalCommit": {"oid": "f5d91d9fa9b79befdce4d2ac9325203115456f09"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NjkzODk5OnYy", "diffSide": "RIGHT", "path": "docker-images/kafka/scripts/jwt.sh", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMjo0MToxNVrOHz8mNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDo0NjowM1rOH0QsOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIzMjI0NA==", "bodyText": "What is the purpose of this script? Should it really be added?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3961#discussion_r524232244", "createdAt": "2020-11-16T12:41:15Z", "author": {"login": "scholzj"}, "path": "docker-images/kafka/scripts/jwt.sh", "diffHunk": "@@ -0,0 +1,14 @@\n+#!/bin/bash", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5d91d9fa9b79befdce4d2ac9325203115456f09"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ4MDE0MA==", "bodyText": "It's a little tool that allows you to peer into a JWT token. You can see some useful information - like when it expires, and who it was issued for. It's can be useful in combination with oauth.sh.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3961#discussion_r524480140", "createdAt": "2020-11-16T18:23:05Z", "author": {"login": "mstruk"}, "path": "docker-images/kafka/scripts/jwt.sh", "diffHunk": "@@ -0,0 +1,14 @@\n+#!/bin/bash", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIzMjI0NA=="}, "originalCommit": {"oid": "f5d91d9fa9b79befdce4d2ac9325203115456f09"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ4MTQzOQ==", "bodyText": "So why should it be in the container images? Should it be in /tools instead?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3961#discussion_r524481439", "createdAt": "2020-11-16T18:25:11Z", "author": {"login": "scholzj"}, "path": "docker-images/kafka/scripts/jwt.sh", "diffHunk": "@@ -0,0 +1,14 @@\n+#!/bin/bash", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIzMjI0NA=="}, "originalCommit": {"oid": "f5d91d9fa9b79befdce4d2ac9325203115456f09"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUzNTY2MA==", "bodyText": "This script needs to connect to the authorization server using the same hostname that the Kafka Broker uses. For that reason it may need to be executed from the pod running in the same Kubernetes cluster.\nDo we have a better candidate image?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3961#discussion_r524535660", "createdAt": "2020-11-16T19:57:58Z", "author": {"login": "mstruk"}, "path": "docker-images/kafka/scripts/jwt.sh", "diffHunk": "@@ -0,0 +1,14 @@\n+#!/bin/bash", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIzMjI0NA=="}, "originalCommit": {"oid": "f5d91d9fa9b79befdce4d2ac9325203115456f09"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU0MDA4MQ==", "bodyText": "Running something in the broker pod is a bad practice from several different angles. The tool does not have any help, but it looks like it just base64 decodes the token. So why does it need to run from the broker pod? Why can't it run from a local machine?\nWhat are the scenarios where one needs to run it? And who is expected to run this? In production environment only absolute minimum of people should have the access levels to do so. So it should be avoided.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3961#discussion_r524540081", "createdAt": "2020-11-16T20:06:11Z", "author": {"login": "scholzj"}, "path": "docker-images/kafka/scripts/jwt.sh", "diffHunk": "@@ -0,0 +1,14 @@\n+#!/bin/bash", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIzMjI0NA=="}, "originalCommit": {"oid": "f5d91d9fa9b79befdce4d2ac9325203115456f09"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU2MTQ2NA==", "bodyText": "This tool can be run outside the pod, but base64 it relies on differs between platforms so having it in the image gives it a predictable environment where it's guaranteed to work. It's true that only a small portion of users will ever be interested in this tool. You'd only use it on the token you just got with oauth.sh, so it is only useful if oauth.sh is also there.\nIn order to connect to the Kafka Cluster using Kafka CLI tools you need Kafka image. While you maybe wouldn't use kubectl exec on the production broker, you'd still use the Strimzi Kafka image:\nkubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 cli -- /bin/sh", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3961#discussion_r524561464", "createdAt": "2020-11-16T20:46:03Z", "author": {"login": "mstruk"}, "path": "docker-images/kafka/scripts/jwt.sh", "diffHunk": "@@ -0,0 +1,14 @@\n+#!/bin/bash", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIzMjI0NA=="}, "originalCommit": {"oid": "f5d91d9fa9b79befdce4d2ac9325203115456f09"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NjkzOTYyOnYy", "diffSide": "RIGHT", "path": "docker-images/kafka/scripts/oauth.sh", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMjo0MToyMVrOHz8mmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDo1MToyOVrOH0Q3Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIzMjM0Ng==", "bodyText": "What is the purpose of this script? Should it really be added?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3961#discussion_r524232346", "createdAt": "2020-11-16T12:41:21Z", "author": {"login": "scholzj"}, "path": "docker-images/kafka/scripts/oauth.sh", "diffHunk": "@@ -0,0 +1,133 @@\n+#!/bin/bash", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5d91d9fa9b79befdce4d2ac9325203115456f09"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ4MTIxOQ==", "bodyText": "This is the script that allows you to login as a client or as a user to an OAuth2 authorization server and get an access token or a refresh token which you can then use to authenticate when running kafka CLI tools.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3961#discussion_r524481219", "createdAt": "2020-11-16T18:24:49Z", "author": {"login": "mstruk"}, "path": "docker-images/kafka/scripts/oauth.sh", "diffHunk": "@@ -0,0 +1,133 @@\n+#!/bin/bash", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIzMjM0Ng=="}, "originalCommit": {"oid": "f5d91d9fa9b79befdce4d2ac9325203115456f09"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ4MjAxOQ==", "bodyText": "Again ... not sure this should be in the container.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3961#discussion_r524482019", "createdAt": "2020-11-16T18:26:06Z", "author": {"login": "scholzj"}, "path": "docker-images/kafka/scripts/oauth.sh", "diffHunk": "@@ -0,0 +1,133 @@\n+#!/bin/bash", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIzMjM0Ng=="}, "originalCommit": {"oid": "f5d91d9fa9b79befdce4d2ac9325203115456f09"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUzMTU4OQ==", "bodyText": "It is certainly a matter of convenience to have it in this image.\nIt allows for the following usage pattern:\nkubectl exec -ti my-cluster-kafka-0 -- /bin/sh\n\nACCESS_TOKEN=$(./oauth.sh --endpoint http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token --client-id team-a-client --secret team-a-client-secret --access -q)\necho $ACCESS_TOKEN\n\ncat > /tmp/team-a-client-plain.properties << EOF\nsecurity.protocol=SASL_PLAINTEXT\nsasl.mechanism=PLAIN\nsasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required \\\n username=\"team-a-client\" \\\n password=\"$ACCESS_TOKEN\" ;\nEOF\n\nbin/kafka-console-producer.sh --broker-list my-cluster-kafka-0:9092 --topic a_messages \\\n --producer.config=/tmp/team-a-client-plain.properties\n\nWithout the oauth.sh script present I have two options:\n\nUse kubectl cp to copy the script into the running container, every OAuth example using this pattern would have to include this step\nUse some other image with oauth.sh prepackaged. Probably that image won't contain kafka CLI tools, therefore the obtained access token will have to be copied over into the other shell. But in any case, is there another image in the project that would be appropriate for this?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3961#discussion_r524531589", "createdAt": "2020-11-16T19:50:55Z", "author": {"login": "mstruk"}, "path": "docker-images/kafka/scripts/oauth.sh", "diffHunk": "@@ -0,0 +1,133 @@\n+#!/bin/bash", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIzMjM0Ng=="}, "originalCommit": {"oid": "f5d91d9fa9b79befdce4d2ac9325203115456f09"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU0MzM5OA==", "bodyText": "Similar to the script above:\n\nYou do not want to run this inside the broker pod\nIn real production environments you should not have access to run this inside the pod. So what are the scenarios where you expect to run it?\n\nIf any, I think the test-client image would be more appropriate for this. Since this seems to be pretty much them same - a tool useful for testing. But it looks like some standard tool for development and testing. So having it in the tools directory seems appropriate.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3961#discussion_r524543398", "createdAt": "2020-11-16T20:12:23Z", "author": {"login": "scholzj"}, "path": "docker-images/kafka/scripts/oauth.sh", "diffHunk": "@@ -0,0 +1,133 @@\n+#!/bin/bash", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIzMjM0Ng=="}, "originalCommit": {"oid": "f5d91d9fa9b79befdce4d2ac9325203115456f09"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU2NDI3MQ==", "bodyText": "See above.\nI'm fine with having it in another image. I want to use it in examples so it should be something we propose people use / consider a 'good practice'.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3961#discussion_r524564271", "createdAt": "2020-11-16T20:51:29Z", "author": {"login": "mstruk"}, "path": "docker-images/kafka/scripts/oauth.sh", "diffHunk": "@@ -0,0 +1,133 @@\n+#!/bin/bash", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIzMjM0Ng=="}, "originalCommit": {"oid": "f5d91d9fa9b79befdce4d2ac9325203115456f09"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NDI4Nzc1OnYy", "diffSide": "RIGHT", "path": "api/src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka-crdApi-v1.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNDowOTowOVrOIAoehA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNTowODoyOFrOIArUQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzNDA4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            over SASL_OAUTHBEARER.Default value is `true`.\n          \n          \n            \n                                            over SASL_OAUTHBEARER. Default value is `true`.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3961#discussion_r537534084", "createdAt": "2020-12-07T14:09:09Z", "author": {"login": "tombentley"}, "path": "api/src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka-crdApi-v1.yaml", "diffHunk": "@@ -275,6 +275,15 @@ spec:\n                               type: boolean\n                               description: Enable or disable ECDSA support by installing\n                                 BouncyCastle crypto provider. Default value is `false`.\n+                            enableOauthBearer:\n+                              type: boolean\n+                              description: Enable or disable OAuth authentication\n+                                over SASL_OAUTHBEARER.Default value is `true`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9de4e480e69ec58fcad226574ee93ce9a83504d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU4MDYxMQ==", "bodyText": "Will have to fix this in the annotation in the CR class since that's the source from where this is generated as part of the build.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3961#discussion_r537580611", "createdAt": "2020-12-07T15:08:28Z", "author": {"login": "mstruk"}, "path": "api/src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka-crdApi-v1.yaml", "diffHunk": "@@ -275,6 +275,15 @@ spec:\n                               type: boolean\n                               description: Enable or disable ECDSA support by installing\n                                 BouncyCastle crypto provider. Default value is `false`.\n+                            enableOauthBearer:\n+                              type: boolean\n+                              description: Enable or disable OAuth authentication\n+                                over SASL_OAUTHBEARER.Default value is `true`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzNDA4NA=="}, "originalCommit": {"oid": "c9de4e480e69ec58fcad226574ee93ce9a83504d"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NDI4ODQ5OnYy", "diffSide": "RIGHT", "path": "api/src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka-crdApi-v1.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNDowOToxNlrOIAoe6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNDowOToxNlrOIAoe6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzNDE4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            when this mechanism is used.Default value is `false`.\n          \n          \n            \n                                            when this mechanism is used. Default value is `false`.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3961#discussion_r537534186", "createdAt": "2020-12-07T14:09:16Z", "author": {"login": "tombentley"}, "path": "api/src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka-crdApi-v1.yaml", "diffHunk": "@@ -275,6 +275,15 @@ spec:\n                               type: boolean\n                               description: Enable or disable ECDSA support by installing\n                                 BouncyCastle crypto provider. Default value is `false`.\n+                            enableOauthBearer:\n+                              type: boolean\n+                              description: Enable or disable OAuth authentication\n+                                over SASL_OAUTHBEARER.Default value is `true`.\n+                            enablePlain:\n+                              type: boolean\n+                              description: Enable or disable OAuth authentication\n+                                over SASL_PLAIN. There is no re-authentication support\n+                                when this mechanism is used.Default value is `false`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9de4e480e69ec58fcad226574ee93ce9a83504d"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NDMyNDQxOnYy", "diffSide": "RIGHT", "path": "helm-charts/helm3/strimzi-kafka-operator/crds/040-Crd-kafka.yaml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNDoxNjowMlrOIAozsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwOToyMTo1OFrOICKgiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzOTUwNA==", "bodyText": "Aside: I do see the Uri in this name and feel bad about the inconsistency with enableECDSA. In hindsight it should have been enableEcdsa. Maybe that's something we should change for v1beta2, WDYT @scholzj @ppatierno @alesj ?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3961#discussion_r537539504", "createdAt": "2020-12-07T14:16:02Z", "author": {"login": "tombentley"}, "path": "helm-charts/helm3/strimzi-kafka-operator/crds/040-Crd-kafka.yaml", "diffHunk": "@@ -848,6 +881,9 @@ spec:\n                                       - certificate\n                                       - secretName\n                                   description: Trusted certificates for TLS connection to the OAuth server.\n+                                tokenEndpointUri:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9de4e480e69ec58fcad226574ee93ce9a83504d"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE0MDIzMw==", "bodyText": "If we replace keycloak-core with nimbus-jose-jwt we could possibly remove the enableECDSA flag altogether because I think it would be enabled automatically without the need to install Bouncycastle crypto providers.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3961#discussion_r539140233", "createdAt": "2020-12-09T09:21:58Z", "author": {"login": "mstruk"}, "path": "helm-charts/helm3/strimzi-kafka-operator/crds/040-Crd-kafka.yaml", "diffHunk": "@@ -848,6 +881,9 @@ spec:\n                                       - certificate\n                                       - secretName\n                                   description: Trusted certificates for TLS connection to the OAuth server.\n+                                tokenEndpointUri:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzOTUwNA=="}, "originalCommit": {"oid": "c9de4e480e69ec58fcad226574ee93ce9a83504d"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MDU5NzYyOnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaBrokerConfigurationBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwODozNTo0NFrOIC9XwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDo0MToxNlrOIDCxKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk3MzU2OA==", "bodyText": "so as far as I understood both mechanisms can be enabled at the same time? How it's going to work in that case?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3961#discussion_r539973568", "createdAt": "2020-12-10T08:35:44Z", "author": {"login": "ppatierno"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaBrokerConfigurationBuilder.java", "diffHunk": "@@ -273,9 +274,24 @@ private void configureAuthentication(String listenerName, List<String> securityP\n                 options.add(\"oauth.ssl.truststore.type=\\\"PKCS12\\\"\");\n             }\n \n-            writer.println(String.format(\"listener.name.%s.oauthbearer.sasl.server.callback.handler.class=io.strimzi.kafka.oauth.server.JaasServerOauthValidatorCallbackHandler\", listenerNameInProperty));\n-            writer.println(String.format(\"listener.name.%s.oauthbearer.sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required unsecuredLoginStringClaim_sub=\\\"thePrincipalName\\\" %s;\", listenerNameInProperty, String.join(\" \", options)));\n-            writer.println(String.format(\"listener.name.%s.sasl.enabled.mechanisms=OAUTHBEARER\", listenerNameInProperty));\n+            StringBuilder enabledMechanisms = new StringBuilder();\n+            if (oauth.isEnableOauthBearer()) {\n+                writer.println(String.format(\"listener.name.%s.oauthbearer.sasl.server.callback.handler.class=io.strimzi.kafka.oauth.server.JaasServerOauthValidatorCallbackHandler\", listenerNameInProperty));\n+                writer.println(String.format(\"listener.name.%s.oauthbearer.sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required unsecuredLoginStringClaim_sub=\\\"thePrincipalName\\\" %s;\", listenerNameInProperty, String.join(\" \", options)));\n+                enabledMechanisms.append(\"OAUTHBEARER\");\n+            }\n+\n+            if (oauth.isEnablePlain()) {\n+                addOption(options, ServerPlainConfig.OAUTH_TOKEN_ENDPOINT_URI, oauth.getTokenEndpointUri());\n+                writer.println(String.format(\"listener.name.%s.plain.sasl.server.callback.handler.class=io.strimzi.kafka.oauth.server.plain.JaasServerOauthOverPlainValidatorCallbackHandler\", listenerNameInProperty));\n+                writer.println(String.format(\"listener.name.%s.plain.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required %s;\", listenerNameInProperty, String.join(\" \", options)));\n+                if (enabledMechanisms.length() > 0) {\n+                    enabledMechanisms.append(\",\");\n+                }\n+                enabledMechanisms.append(\"PLAIN\");\n+            }\n+\n+            writer.println(String.format(\"listener.name.%s.sasl.enabled.mechanisms=%s\", listenerNameInProperty, enabledMechanisms));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ac3fb4f8ba1ae9f1ad75c95411dccc9aa3e650f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA2MTk5NA==", "bodyText": "SASL works by client specifying which mechanism it wants to use, and simply attempting to use that mechanism on the listener. If it fails it is free to try with some other mechanism. The broker simply delegates to the requested mechanism if it was configured and enabled, otherwise it responds to the client that the mechanism is not available.\nOn the server you therefore get multiple enabled SASL mechanisms on the listener:\nlistener.name.external-9094.sasl.enabled.mechanisms: OAUTHBEARER, PLAIN\n\nAnd then each mechanism is properly configured with correct server-side callback handlers:\nlistener.name.external-9094.oauthbearer.sasl.server.callback.handler.class=io.strimzi.kafka.oauth.server.JaasServerOauthValidatorCallbackHandler\nlistener.name.external-9094.oauthbearer.sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required  OPTIONS ...;\n\nlistener.name.external-9094.plain.sasl.server.callback.handler.class: io.strimzi.kafka.oauth.server.plain.JaasServerOauthOverPlainValidatorCallbackHandler\nlistener.name.external-9094.plain.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required OPTIONS ...;", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3961#discussion_r540061994", "createdAt": "2020-12-10T10:41:16Z", "author": {"login": "mstruk"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaBrokerConfigurationBuilder.java", "diffHunk": "@@ -273,9 +274,24 @@ private void configureAuthentication(String listenerName, List<String> securityP\n                 options.add(\"oauth.ssl.truststore.type=\\\"PKCS12\\\"\");\n             }\n \n-            writer.println(String.format(\"listener.name.%s.oauthbearer.sasl.server.callback.handler.class=io.strimzi.kafka.oauth.server.JaasServerOauthValidatorCallbackHandler\", listenerNameInProperty));\n-            writer.println(String.format(\"listener.name.%s.oauthbearer.sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required unsecuredLoginStringClaim_sub=\\\"thePrincipalName\\\" %s;\", listenerNameInProperty, String.join(\" \", options)));\n-            writer.println(String.format(\"listener.name.%s.sasl.enabled.mechanisms=OAUTHBEARER\", listenerNameInProperty));\n+            StringBuilder enabledMechanisms = new StringBuilder();\n+            if (oauth.isEnableOauthBearer()) {\n+                writer.println(String.format(\"listener.name.%s.oauthbearer.sasl.server.callback.handler.class=io.strimzi.kafka.oauth.server.JaasServerOauthValidatorCallbackHandler\", listenerNameInProperty));\n+                writer.println(String.format(\"listener.name.%s.oauthbearer.sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required unsecuredLoginStringClaim_sub=\\\"thePrincipalName\\\" %s;\", listenerNameInProperty, String.join(\" \", options)));\n+                enabledMechanisms.append(\"OAUTHBEARER\");\n+            }\n+\n+            if (oauth.isEnablePlain()) {\n+                addOption(options, ServerPlainConfig.OAUTH_TOKEN_ENDPOINT_URI, oauth.getTokenEndpointUri());\n+                writer.println(String.format(\"listener.name.%s.plain.sasl.server.callback.handler.class=io.strimzi.kafka.oauth.server.plain.JaasServerOauthOverPlainValidatorCallbackHandler\", listenerNameInProperty));\n+                writer.println(String.format(\"listener.name.%s.plain.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required %s;\", listenerNameInProperty, String.join(\" \", options)));\n+                if (enabledMechanisms.length() > 0) {\n+                    enabledMechanisms.append(\",\");\n+                }\n+                enabledMechanisms.append(\"PLAIN\");\n+            }\n+\n+            writer.println(String.format(\"listener.name.%s.sasl.enabled.mechanisms=%s\", listenerNameInProperty, enabledMechanisms));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk3MzU2OA=="}, "originalCommit": {"oid": "8ac3fb4f8ba1ae9f1ad75c95411dccc9aa3e650f"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3ODgxOTAxOnYy", "diffSide": "RIGHT", "path": "docker-images/kafka/kafka-thirdparty-libs/2.5.x/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxNzoyNDoxNVrOIdsLbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxNzoyNDoxNVrOIdsLbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODAwMzQzOQ==", "bodyText": "Why do we need this?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3961#discussion_r568003439", "createdAt": "2021-02-01T17:24:15Z", "author": {"login": "scholzj"}, "path": "docker-images/kafka/kafka-thirdparty-libs/2.5.x/pom.xml", "diffHunk": "@@ -26,6 +26,14 @@\n             <id>jcenter</id>\n             <url>https://jcenter.bintray.com/</url>\n         </repository>\n+        <repository>\n+            <id>staging</id>\n+            <url>https://oss.sonatype.org/content/repositories/snapshots/</url>\n+        </repository>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c43f2a2b8258bfafaf32c45660ac6904a7f7e0"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3ODgyMDQ3OnYy", "diffSide": "RIGHT", "path": "docker-images/kafka/kafka-thirdparty-libs/2.6.x/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxNzoyNDozOFrOIdsMXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxNzoyNDozOFrOIdsMXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODAwMzY3Ng==", "bodyText": "Same as above, why do we need this?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3961#discussion_r568003676", "createdAt": "2021-02-01T17:24:38Z", "author": {"login": "scholzj"}, "path": "docker-images/kafka/kafka-thirdparty-libs/2.6.x/pom.xml", "diffHunk": "@@ -26,6 +26,14 @@\n             <id>jcenter</id>\n             <url>https://jcenter.bintray.com/</url>\n         </repository>\n+        <repository>\n+            <id>staging</id>\n+            <url>https://oss.sonatype.org/content/repositories/snapshots/</url>\n+        </repository>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c43f2a2b8258bfafaf32c45660ac6904a7f7e0"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3ODgyMjI3OnYy", "diffSide": "RIGHT", "path": "docker-images/kafka/kafka-thirdparty-libs/2.7.x/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxNzoyNTowNVrOIdsNfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxNzoyNTowNVrOIdsNfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODAwMzk2Nw==", "bodyText": "Same as above, why do we need this?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3961#discussion_r568003967", "createdAt": "2021-02-01T17:25:05Z", "author": {"login": "scholzj"}, "path": "docker-images/kafka/kafka-thirdparty-libs/2.7.x/pom.xml", "diffHunk": "@@ -26,6 +26,14 @@\n             <id>jcenter</id>\n             <url>https://jcenter.bintray.com/</url>\n         </repository>\n+        <repository>\n+            <id>staging</id>\n+            <url>https://oss.sonatype.org/content/repositories/snapshots/</url>\n+        </repository>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c43f2a2b8258bfafaf32c45660ac6904a7f7e0"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3ODgyNDMyOnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxNzoyNTozN1rOIdsO1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxNzoyNTozN1rOIdsO1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODAwNDMwOA==", "bodyText": "Same as above, why do we need this?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3961#discussion_r568004308", "createdAt": "2021-02-01T17:25:37Z", "author": {"login": "scholzj"}, "path": "pom.xml", "diffHunk": "@@ -147,6 +147,17 @@\n         </repository>\n     </distributionManagement>\n \n+    <repositories>\n+        <repository>\n+            <id>staging</id>\n+            <url>https://oss.sonatype.org/content/repositories/snapshots/</url>\n+        </repository>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c43f2a2b8258bfafaf32c45660ac6904a7f7e0"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 706, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}