{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NjUxMDU1", "number": 3124, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwODoxODowNlrOEBSF4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOToyOTo1OFrOEBTU0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzgwNDUxOnYy", "diffSide": "RIGHT", "path": "CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwODoxODowNlrOGdCcKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwODoyMDozM1rOGdCgUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEwMTg2NA==", "bodyText": "Maybe just say\nRemove deprecated `Kafka.spec.topicOperator` classes and deployment logic \n\n?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3124#discussion_r433101864", "createdAt": "2020-06-01T08:18:06Z", "author": {"login": "samuel-hawker"}, "path": "CHANGELOG.md", "diffHunk": "@@ -1,6 +1,10 @@\n \n # CHANGELOG\n \n+## 0.19.0\n+\n+* Remove the code behind `Kafka.spec.topicOperator` which did not work anymore ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "480e127772ce8c3a0f1b27be796767b1280afc50"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEwMjkzMQ==", "bodyText": "Fixed.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3124#discussion_r433102931", "createdAt": "2020-06-01T08:20:33Z", "author": {"login": "scholzj"}, "path": "CHANGELOG.md", "diffHunk": "@@ -1,6 +1,10 @@\n \n # CHANGELOG\n \n+## 0.19.0\n+\n+* Remove the code behind `Kafka.spec.topicOperator` which did not work anymore ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEwMTg2NA=="}, "originalCommit": {"oid": "480e127772ce8c3a0f1b27be796767b1280afc50"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Nzk0ODgxOnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorWithDeprecatedTopicOperatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOTowODo1NlrOGdDzgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOTowODo1NlrOGdDzgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEyNDIyNg==", "bodyText": "I wonder, if, going forward renaming this to something like KafkaAssemblyOperatorUnsupportedFieldsTest might be more extensible and then we just add to this file", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3124#discussion_r433124226", "createdAt": "2020-06-01T09:08:56Z", "author": {"login": "samuel-hawker"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorWithDeprecatedTopicOperatorTest.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.operator.cluster.operator.assembly;\n+\n+import io.strimzi.api.kafka.model.Kafka;\n+import io.strimzi.api.kafka.model.KafkaBuilder;\n+import io.strimzi.api.kafka.model.status.KafkaStatus;\n+import io.strimzi.certs.CertManager;\n+import io.strimzi.operator.KubernetesVersion;\n+import io.strimzi.operator.PlatformFeaturesAvailability;\n+import io.strimzi.operator.cluster.ClusterOperatorConfig;\n+import io.strimzi.operator.cluster.KafkaVersionTestUtils;\n+import io.strimzi.operator.cluster.ResourceUtils;\n+import io.strimzi.operator.cluster.model.KafkaVersion;\n+import io.strimzi.operator.cluster.operator.resource.ResourceOperatorSupplier;\n+import io.strimzi.operator.common.PasswordGenerator;\n+import io.strimzi.operator.common.Reconciliation;\n+import io.strimzi.operator.common.operator.MockCertManager;\n+import io.strimzi.operator.common.operator.resource.CrdOperator;\n+import io.vertx.core.Future;\n+import io.vertx.core.Vertx;\n+import io.vertx.junit5.Checkpoint;\n+import io.vertx.junit5.VertxExtension;\n+import io.vertx.junit5.VertxTestContext;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+\n+import java.text.ParseException;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(VertxExtension.class)\n+public class KafkaAssemblyOperatorWithDeprecatedTopicOperatorTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "480e127772ce8c3a0f1b27be796767b1280afc50"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Nzk3NTY5OnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorWithDeprecatedTopicOperatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOToxODoyMlrOGdEDzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOToxODoyMlrOGdEDzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEyODM5Nw==", "bodyText": "Might be worth a doc comment something like\n/**\n * spec.topicOperator is now unsupported, to ensure the removal does not cause unwanted warnings for users who  \n * do not use the topicOperator. This test checks this\n */\n@Test\n    public void testNoTopicOperatorWarnings(VertxTestContext context) throws ParseException {", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3124#discussion_r433128397", "createdAt": "2020-06-01T09:18:22Z", "author": {"login": "samuel-hawker"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorWithDeprecatedTopicOperatorTest.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.operator.cluster.operator.assembly;\n+\n+import io.strimzi.api.kafka.model.Kafka;\n+import io.strimzi.api.kafka.model.KafkaBuilder;\n+import io.strimzi.api.kafka.model.status.KafkaStatus;\n+import io.strimzi.certs.CertManager;\n+import io.strimzi.operator.KubernetesVersion;\n+import io.strimzi.operator.PlatformFeaturesAvailability;\n+import io.strimzi.operator.cluster.ClusterOperatorConfig;\n+import io.strimzi.operator.cluster.KafkaVersionTestUtils;\n+import io.strimzi.operator.cluster.ResourceUtils;\n+import io.strimzi.operator.cluster.model.KafkaVersion;\n+import io.strimzi.operator.cluster.operator.resource.ResourceOperatorSupplier;\n+import io.strimzi.operator.common.PasswordGenerator;\n+import io.strimzi.operator.common.Reconciliation;\n+import io.strimzi.operator.common.operator.MockCertManager;\n+import io.strimzi.operator.common.operator.resource.CrdOperator;\n+import io.vertx.core.Future;\n+import io.vertx.core.Vertx;\n+import io.vertx.junit5.Checkpoint;\n+import io.vertx.junit5.VertxExtension;\n+import io.vertx.junit5.VertxTestContext;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+\n+import java.text.ParseException;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(VertxExtension.class)\n+public class KafkaAssemblyOperatorWithDeprecatedTopicOperatorTest {\n+    private final KubernetesVersion kubernetesVersion = KubernetesVersion.V1_11;\n+    private final MockCertManager certManager = new MockCertManager();\n+    private final PasswordGenerator passwordGenerator = new PasswordGenerator(10, \"a\", \"a\");\n+    private final ClusterOperatorConfig config = ResourceUtils.dummyClusterOperatorConfig(VERSIONS);\n+    private static final KafkaVersion.Lookup VERSIONS = KafkaVersionTestUtils.getKafkaVersionLookup();\n+    private final String namespace = \"testns\";\n+    private final String clusterName = \"testkafka\";\n+    protected static Vertx vertx;\n+\n+    @BeforeAll\n+    public static void before() {\n+        vertx = Vertx.vertx();\n+    }\n+\n+    @AfterAll\n+    public static void after() {\n+        vertx.close();\n+    }\n+\n+    @Test\n+    public void testNoTopicOperatorWarnings(VertxTestContext context) throws ParseException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "480e127772ce8c3a0f1b27be796767b1280afc50"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Nzk3NzUwOnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorWithDeprecatedTopicOperatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOToxODo1OFrOGdEEzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMTo0MjowMlrOGdHngA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEyODY1NQ==", "bodyText": "Checking conditions size may be a little flaky going forward if we add more default conditions but there is probably no way around this.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3124#discussion_r433128655", "createdAt": "2020-06-01T09:18:58Z", "author": {"login": "samuel-hawker"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorWithDeprecatedTopicOperatorTest.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.operator.cluster.operator.assembly;\n+\n+import io.strimzi.api.kafka.model.Kafka;\n+import io.strimzi.api.kafka.model.KafkaBuilder;\n+import io.strimzi.api.kafka.model.status.KafkaStatus;\n+import io.strimzi.certs.CertManager;\n+import io.strimzi.operator.KubernetesVersion;\n+import io.strimzi.operator.PlatformFeaturesAvailability;\n+import io.strimzi.operator.cluster.ClusterOperatorConfig;\n+import io.strimzi.operator.cluster.KafkaVersionTestUtils;\n+import io.strimzi.operator.cluster.ResourceUtils;\n+import io.strimzi.operator.cluster.model.KafkaVersion;\n+import io.strimzi.operator.cluster.operator.resource.ResourceOperatorSupplier;\n+import io.strimzi.operator.common.PasswordGenerator;\n+import io.strimzi.operator.common.Reconciliation;\n+import io.strimzi.operator.common.operator.MockCertManager;\n+import io.strimzi.operator.common.operator.resource.CrdOperator;\n+import io.vertx.core.Future;\n+import io.vertx.core.Vertx;\n+import io.vertx.junit5.Checkpoint;\n+import io.vertx.junit5.VertxExtension;\n+import io.vertx.junit5.VertxTestContext;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+\n+import java.text.ParseException;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(VertxExtension.class)\n+public class KafkaAssemblyOperatorWithDeprecatedTopicOperatorTest {\n+    private final KubernetesVersion kubernetesVersion = KubernetesVersion.V1_11;\n+    private final MockCertManager certManager = new MockCertManager();\n+    private final PasswordGenerator passwordGenerator = new PasswordGenerator(10, \"a\", \"a\");\n+    private final ClusterOperatorConfig config = ResourceUtils.dummyClusterOperatorConfig(VERSIONS);\n+    private static final KafkaVersion.Lookup VERSIONS = KafkaVersionTestUtils.getKafkaVersionLookup();\n+    private final String namespace = \"testns\";\n+    private final String clusterName = \"testkafka\";\n+    protected static Vertx vertx;\n+\n+    @BeforeAll\n+    public static void before() {\n+        vertx = Vertx.vertx();\n+    }\n+\n+    @AfterAll\n+    public static void after() {\n+        vertx.close();\n+    }\n+\n+    @Test\n+    public void testNoTopicOperatorWarnings(VertxTestContext context) throws ParseException {\n+        Kafka kafka = new KafkaBuilder()\n+                .withNewMetadata()\n+                    .withName(clusterName)\n+                    .withNamespace(namespace)\n+                    .withGeneration(2L)\n+                .endMetadata()\n+                .withNewSpec()\n+                    .withNewKafka()\n+                        .withReplicas(3)\n+                        .withNewListeners()\n+                            .withNewPlain()\n+                            .endPlain()\n+                        .endListeners()\n+                        .withNewEphemeralStorage()\n+                        .endEphemeralStorage()\n+                    .endKafka()\n+                    .withNewZookeeper()\n+                        .withReplicas(3)\n+                        .withNewEphemeralStorage()\n+                        .endEphemeralStorage()\n+                    .endZookeeper()\n+                .endSpec()\n+                .build();\n+\n+        ResourceOperatorSupplier supplier = ResourceUtils.supplierWithMocks(false);\n+\n+        // Mock the CRD Operator for Kafka resources\n+        CrdOperator mockKafkaOps = supplier.kafkaOperator;\n+        when(mockKafkaOps.getAsync(eq(namespace), eq(clusterName))).thenReturn(Future.succeededFuture(kafka));\n+\n+        ArgumentCaptor<Kafka> kafkaCaptor = ArgumentCaptor.forClass(Kafka.class);\n+        when(mockKafkaOps.updateStatusAsync(kafkaCaptor.capture())).thenReturn(Future.succeededFuture());\n+\n+        MockKafkaAssemblyOperator kao = new MockKafkaAssemblyOperator(\n+                vertx, new PlatformFeaturesAvailability(false, kubernetesVersion),\n+                certManager,\n+                passwordGenerator,\n+                supplier,\n+                config);\n+\n+        Checkpoint async = context.checkpoint();\n+        kao.createOrUpdate(new Reconciliation(\"test-trigger\", Kafka.RESOURCE_KIND, namespace, clusterName), kafka)\n+                .onComplete(context.succeeding(v -> context.verify(() -> {\n+                    assertThat(kafkaCaptor.getValue(), is(notNullValue()));\n+                    assertThat(kafkaCaptor.getValue().getStatus(), is(notNullValue()));\n+                    KafkaStatus status = kafkaCaptor.getValue().getStatus();\n+\n+                    assertThat(status.getConditions().size(), is(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "480e127772ce8c3a0f1b27be796767b1280afc50"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE4NjY4OA==", "bodyText": "I filter through the conditions now to find the two I'm interested in to make it more flexible.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3124#discussion_r433186688", "createdAt": "2020-06-01T11:42:02Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorWithDeprecatedTopicOperatorTest.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.operator.cluster.operator.assembly;\n+\n+import io.strimzi.api.kafka.model.Kafka;\n+import io.strimzi.api.kafka.model.KafkaBuilder;\n+import io.strimzi.api.kafka.model.status.KafkaStatus;\n+import io.strimzi.certs.CertManager;\n+import io.strimzi.operator.KubernetesVersion;\n+import io.strimzi.operator.PlatformFeaturesAvailability;\n+import io.strimzi.operator.cluster.ClusterOperatorConfig;\n+import io.strimzi.operator.cluster.KafkaVersionTestUtils;\n+import io.strimzi.operator.cluster.ResourceUtils;\n+import io.strimzi.operator.cluster.model.KafkaVersion;\n+import io.strimzi.operator.cluster.operator.resource.ResourceOperatorSupplier;\n+import io.strimzi.operator.common.PasswordGenerator;\n+import io.strimzi.operator.common.Reconciliation;\n+import io.strimzi.operator.common.operator.MockCertManager;\n+import io.strimzi.operator.common.operator.resource.CrdOperator;\n+import io.vertx.core.Future;\n+import io.vertx.core.Vertx;\n+import io.vertx.junit5.Checkpoint;\n+import io.vertx.junit5.VertxExtension;\n+import io.vertx.junit5.VertxTestContext;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+\n+import java.text.ParseException;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(VertxExtension.class)\n+public class KafkaAssemblyOperatorWithDeprecatedTopicOperatorTest {\n+    private final KubernetesVersion kubernetesVersion = KubernetesVersion.V1_11;\n+    private final MockCertManager certManager = new MockCertManager();\n+    private final PasswordGenerator passwordGenerator = new PasswordGenerator(10, \"a\", \"a\");\n+    private final ClusterOperatorConfig config = ResourceUtils.dummyClusterOperatorConfig(VERSIONS);\n+    private static final KafkaVersion.Lookup VERSIONS = KafkaVersionTestUtils.getKafkaVersionLookup();\n+    private final String namespace = \"testns\";\n+    private final String clusterName = \"testkafka\";\n+    protected static Vertx vertx;\n+\n+    @BeforeAll\n+    public static void before() {\n+        vertx = Vertx.vertx();\n+    }\n+\n+    @AfterAll\n+    public static void after() {\n+        vertx.close();\n+    }\n+\n+    @Test\n+    public void testNoTopicOperatorWarnings(VertxTestContext context) throws ParseException {\n+        Kafka kafka = new KafkaBuilder()\n+                .withNewMetadata()\n+                    .withName(clusterName)\n+                    .withNamespace(namespace)\n+                    .withGeneration(2L)\n+                .endMetadata()\n+                .withNewSpec()\n+                    .withNewKafka()\n+                        .withReplicas(3)\n+                        .withNewListeners()\n+                            .withNewPlain()\n+                            .endPlain()\n+                        .endListeners()\n+                        .withNewEphemeralStorage()\n+                        .endEphemeralStorage()\n+                    .endKafka()\n+                    .withNewZookeeper()\n+                        .withReplicas(3)\n+                        .withNewEphemeralStorage()\n+                        .endEphemeralStorage()\n+                    .endZookeeper()\n+                .endSpec()\n+                .build();\n+\n+        ResourceOperatorSupplier supplier = ResourceUtils.supplierWithMocks(false);\n+\n+        // Mock the CRD Operator for Kafka resources\n+        CrdOperator mockKafkaOps = supplier.kafkaOperator;\n+        when(mockKafkaOps.getAsync(eq(namespace), eq(clusterName))).thenReturn(Future.succeededFuture(kafka));\n+\n+        ArgumentCaptor<Kafka> kafkaCaptor = ArgumentCaptor.forClass(Kafka.class);\n+        when(mockKafkaOps.updateStatusAsync(kafkaCaptor.capture())).thenReturn(Future.succeededFuture());\n+\n+        MockKafkaAssemblyOperator kao = new MockKafkaAssemblyOperator(\n+                vertx, new PlatformFeaturesAvailability(false, kubernetesVersion),\n+                certManager,\n+                passwordGenerator,\n+                supplier,\n+                config);\n+\n+        Checkpoint async = context.checkpoint();\n+        kao.createOrUpdate(new Reconciliation(\"test-trigger\", Kafka.RESOURCE_KIND, namespace, clusterName), kafka)\n+                .onComplete(context.succeeding(v -> context.verify(() -> {\n+                    assertThat(kafkaCaptor.getValue(), is(notNullValue()));\n+                    assertThat(kafkaCaptor.getValue().getStatus(), is(notNullValue()));\n+                    KafkaStatus status = kafkaCaptor.getValue().getStatus();\n+\n+                    assertThat(status.getConditions().size(), is(1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEyODY1NQ=="}, "originalCommit": {"oid": "480e127772ce8c3a0f1b27be796767b1280afc50"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODAwNjU5OnYy", "diffSide": "RIGHT", "path": "design/remove-deprecated-topic-operator-from-kafka-crd.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOToyOTo1OFrOGdEXLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMTo0Mjo1OVrOGdHo7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEzMzM1Ng==", "bodyText": "did we decide to have the state in the design doc at the end?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3124#discussion_r433133356", "createdAt": "2020-06-01T09:29:58Z", "author": {"login": "ppatierno"}, "path": "design/remove-deprecated-topic-operator-from-kafka-crd.md", "diffHunk": "@@ -1,8 +1,8 @@\n # Remove deprecated Topic Operator deployment in Kafka CRD\n \n-| State    |\n-|----------|\n-| Approved |\n+| State       |\n+|-------------|\n+| Implemented |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23eb9524f5f940b751baab4f7370d3254cec5dc9"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE4NzA1Mg==", "bodyText": "The is not related to #3116 which is still open. This was there before the #3116 and the comments there.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3124#discussion_r433187052", "createdAt": "2020-06-01T11:42:59Z", "author": {"login": "scholzj"}, "path": "design/remove-deprecated-topic-operator-from-kafka-crd.md", "diffHunk": "@@ -1,8 +1,8 @@\n # Remove deprecated Topic Operator deployment in Kafka CRD\n \n-| State    |\n-|----------|\n-| Approved |\n+| State       |\n+|-------------|\n+| Implemented |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEzMzM1Ng=="}, "originalCommit": {"oid": "23eb9524f5f940b751baab4f7370d3254cec5dc9"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1601, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}