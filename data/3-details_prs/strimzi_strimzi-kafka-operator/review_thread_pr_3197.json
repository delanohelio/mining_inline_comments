{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0NDY0NzI5", "number": 3197, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMTo0MzozOFrOEFgGkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMTo0MzozOFrOEFgGkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjA0MzA1OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaResource.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMTo0MzozOFrOGjul8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMTo1Mjo1MFrOGju32Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExNjcyMA==", "bodyText": "I wonder if we really need this. In general, the operator would be waiting the operation timeout several times:\n\nfor Zoo pods\nfor Kafka pods\nfor EO pod\nfor KE pod\nfor CC pod\n\nIn the code you seem to take the 3 as one block valid for single TIMEOUT_FOR_RESOURCE_READINESS. And then for some reason you think the KE and CC pods are worth each TIMEOUT_FOR_RESOURCE_READINESS again.\nIf you think it is needed I'm fine with it. But it seems a bit weird why should KE and CC get this special treatment.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3197#discussion_r440116720", "createdAt": "2020-06-15T11:43:38Z", "author": {"login": "scholzj"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaResource.java", "diffHunk": "@@ -234,29 +230,17 @@ private static Kafka getKafkaFromYaml(String yamlPath) {\n      * Wait until the ZK, Kafka and EO are all ready\n      */\n     private static Kafka waitFor(Kafka kafka) {\n-        String kafkaCrName = kafka.getMetadata().getName();\n-        String namespace = kafka.getMetadata().getNamespace();\n+        long timeout = Constants.TIMEOUT_FOR_RESOURCE_READINESS;\n \n-        LOGGER.info(\"Waiting for Kafka {} in namespace {}\", kafkaCrName, namespace);\n-\n-        StatefulSetUtils.waitForAllStatefulSetPodsReady(KafkaResources.zookeeperStatefulSetName(kafkaCrName), kafka.getSpec().getZookeeper().getReplicas());\n-        StatefulSetUtils.waitForAllStatefulSetPodsReady(KafkaResources.kafkaStatefulSetName(kafkaCrName), kafka.getSpec().getKafka().getReplicas());\n-\n-        // EO should not be deployed if it does not contain UO and TO\n-        if (kafka.getSpec().getEntityOperator().getTopicOperator() != null || kafka.getSpec().getEntityOperator().getUserOperator() != null) {\n-            DeploymentUtils.waitForDeploymentReady(KafkaResources.entityOperatorDeploymentName(kafkaCrName));\n-        }\n         // Kafka Exporter is not setup every time\n         if (kafka.getSpec().getKafkaExporter() != null) {\n-            DeploymentUtils.waitForDeploymentReady(KafkaExporterResources.deploymentName(kafkaCrName));\n+            timeout += Constants.TIMEOUT_FOR_RESOURCE_CREATION;\n         }\n         // Cruise Control is not setup every time\n         if (kafka.getSpec().getCruiseControl() != null) {\n-            LOGGER.info(\"Waiting for Cruise Control pods\");\n-            DeploymentUtils.waitForDeploymentReady(CruiseControlResources.deploymentName(kafkaCrName));\n-            LOGGER.info(\"Cruise Control pods are ready\");\n+            timeout += Constants.TIMEOUT_FOR_RESOURCE_CREATION;\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2f371cb1d1d95ac72ca655c0be4b1d6b4b08139"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExODk4NQ==", "bodyText": "I have there TIMEOUT_FOR_RESOURCE_CREATION and that's like 5 minutes. So the whole Kafka CR -> ZK, Kafka, EO - will have 14 minutes to be ready. If we set up KE or CC it will get +5minutes to whole timeout ... how I mentioned in description, it's only prerequisite and I'll change to proper time (3-5 minutes) in next PR, don't want to make a mess in our Constants.\nIs it OK this way?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3197#discussion_r440118985", "createdAt": "2020-06-15T11:48:24Z", "author": {"login": "im-konge"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaResource.java", "diffHunk": "@@ -234,29 +230,17 @@ private static Kafka getKafkaFromYaml(String yamlPath) {\n      * Wait until the ZK, Kafka and EO are all ready\n      */\n     private static Kafka waitFor(Kafka kafka) {\n-        String kafkaCrName = kafka.getMetadata().getName();\n-        String namespace = kafka.getMetadata().getNamespace();\n+        long timeout = Constants.TIMEOUT_FOR_RESOURCE_READINESS;\n \n-        LOGGER.info(\"Waiting for Kafka {} in namespace {}\", kafkaCrName, namespace);\n-\n-        StatefulSetUtils.waitForAllStatefulSetPodsReady(KafkaResources.zookeeperStatefulSetName(kafkaCrName), kafka.getSpec().getZookeeper().getReplicas());\n-        StatefulSetUtils.waitForAllStatefulSetPodsReady(KafkaResources.kafkaStatefulSetName(kafkaCrName), kafka.getSpec().getKafka().getReplicas());\n-\n-        // EO should not be deployed if it does not contain UO and TO\n-        if (kafka.getSpec().getEntityOperator().getTopicOperator() != null || kafka.getSpec().getEntityOperator().getUserOperator() != null) {\n-            DeploymentUtils.waitForDeploymentReady(KafkaResources.entityOperatorDeploymentName(kafkaCrName));\n-        }\n         // Kafka Exporter is not setup every time\n         if (kafka.getSpec().getKafkaExporter() != null) {\n-            DeploymentUtils.waitForDeploymentReady(KafkaExporterResources.deploymentName(kafkaCrName));\n+            timeout += Constants.TIMEOUT_FOR_RESOURCE_CREATION;\n         }\n         // Cruise Control is not setup every time\n         if (kafka.getSpec().getCruiseControl() != null) {\n-            LOGGER.info(\"Waiting for Cruise Control pods\");\n-            DeploymentUtils.waitForDeploymentReady(CruiseControlResources.deploymentName(kafkaCrName));\n-            LOGGER.info(\"Cruise Control pods are ready\");\n+            timeout += Constants.TIMEOUT_FOR_RESOURCE_CREATION;\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExNjcyMA=="}, "originalCommit": {"oid": "c2f371cb1d1d95ac72ca655c0be4b1d6b4b08139"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExOTM0Mw==", "bodyText": "And I hope that KE and CC will get up sooner than in 5 minutes. But, we know our race conditions.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3197#discussion_r440119343", "createdAt": "2020-06-15T11:49:14Z", "author": {"login": "im-konge"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaResource.java", "diffHunk": "@@ -234,29 +230,17 @@ private static Kafka getKafkaFromYaml(String yamlPath) {\n      * Wait until the ZK, Kafka and EO are all ready\n      */\n     private static Kafka waitFor(Kafka kafka) {\n-        String kafkaCrName = kafka.getMetadata().getName();\n-        String namespace = kafka.getMetadata().getNamespace();\n+        long timeout = Constants.TIMEOUT_FOR_RESOURCE_READINESS;\n \n-        LOGGER.info(\"Waiting for Kafka {} in namespace {}\", kafkaCrName, namespace);\n-\n-        StatefulSetUtils.waitForAllStatefulSetPodsReady(KafkaResources.zookeeperStatefulSetName(kafkaCrName), kafka.getSpec().getZookeeper().getReplicas());\n-        StatefulSetUtils.waitForAllStatefulSetPodsReady(KafkaResources.kafkaStatefulSetName(kafkaCrName), kafka.getSpec().getKafka().getReplicas());\n-\n-        // EO should not be deployed if it does not contain UO and TO\n-        if (kafka.getSpec().getEntityOperator().getTopicOperator() != null || kafka.getSpec().getEntityOperator().getUserOperator() != null) {\n-            DeploymentUtils.waitForDeploymentReady(KafkaResources.entityOperatorDeploymentName(kafkaCrName));\n-        }\n         // Kafka Exporter is not setup every time\n         if (kafka.getSpec().getKafkaExporter() != null) {\n-            DeploymentUtils.waitForDeploymentReady(KafkaExporterResources.deploymentName(kafkaCrName));\n+            timeout += Constants.TIMEOUT_FOR_RESOURCE_CREATION;\n         }\n         // Cruise Control is not setup every time\n         if (kafka.getSpec().getCruiseControl() != null) {\n-            LOGGER.info(\"Waiting for Cruise Control pods\");\n-            DeploymentUtils.waitForDeploymentReady(CruiseControlResources.deploymentName(kafkaCrName));\n-            LOGGER.info(\"Cruise Control pods are ready\");\n+            timeout += Constants.TIMEOUT_FOR_RESOURCE_CREATION;\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExNjcyMA=="}, "originalCommit": {"oid": "c2f371cb1d1d95ac72ca655c0be4b1d6b4b08139"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEyMTMwNQ==", "bodyText": "Ok, I guess that makes more sense.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3197#discussion_r440121305", "createdAt": "2020-06-15T11:52:50Z", "author": {"login": "scholzj"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaResource.java", "diffHunk": "@@ -234,29 +230,17 @@ private static Kafka getKafkaFromYaml(String yamlPath) {\n      * Wait until the ZK, Kafka and EO are all ready\n      */\n     private static Kafka waitFor(Kafka kafka) {\n-        String kafkaCrName = kafka.getMetadata().getName();\n-        String namespace = kafka.getMetadata().getNamespace();\n+        long timeout = Constants.TIMEOUT_FOR_RESOURCE_READINESS;\n \n-        LOGGER.info(\"Waiting for Kafka {} in namespace {}\", kafkaCrName, namespace);\n-\n-        StatefulSetUtils.waitForAllStatefulSetPodsReady(KafkaResources.zookeeperStatefulSetName(kafkaCrName), kafka.getSpec().getZookeeper().getReplicas());\n-        StatefulSetUtils.waitForAllStatefulSetPodsReady(KafkaResources.kafkaStatefulSetName(kafkaCrName), kafka.getSpec().getKafka().getReplicas());\n-\n-        // EO should not be deployed if it does not contain UO and TO\n-        if (kafka.getSpec().getEntityOperator().getTopicOperator() != null || kafka.getSpec().getEntityOperator().getUserOperator() != null) {\n-            DeploymentUtils.waitForDeploymentReady(KafkaResources.entityOperatorDeploymentName(kafkaCrName));\n-        }\n         // Kafka Exporter is not setup every time\n         if (kafka.getSpec().getKafkaExporter() != null) {\n-            DeploymentUtils.waitForDeploymentReady(KafkaExporterResources.deploymentName(kafkaCrName));\n+            timeout += Constants.TIMEOUT_FOR_RESOURCE_CREATION;\n         }\n         // Cruise Control is not setup every time\n         if (kafka.getSpec().getCruiseControl() != null) {\n-            LOGGER.info(\"Waiting for Cruise Control pods\");\n-            DeploymentUtils.waitForDeploymentReady(CruiseControlResources.deploymentName(kafkaCrName));\n-            LOGGER.info(\"Cruise Control pods are ready\");\n+            timeout += Constants.TIMEOUT_FOR_RESOURCE_CREATION;\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExNjcyMA=="}, "originalCommit": {"oid": "c2f371cb1d1d95ac72ca655c0be4b1d6b4b08139"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1686, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}