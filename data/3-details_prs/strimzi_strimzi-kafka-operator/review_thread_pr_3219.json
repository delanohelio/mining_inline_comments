{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MjI4Mzkx", "number": 3219, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNjoyODo0N1rOEHcS7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMDo1Mzo0NlrOEHhddw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjM5MDg2OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlIsolatedST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNjoyODo0N1rOGmzYyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNjoyODo0N1rOGmzYyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0MTAwMw==", "bodyText": "this flag doesn't make sense in CC configuration. It's a broker configuration.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3219#discussion_r443341003", "createdAt": "2020-06-22T06:28:47Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlIsolatedST.java", "diffHunk": "@@ -42,47 +42,65 @@\n     private static final String CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC = \"strimzi.cruisecontrol.modeltrainingsamples\"; // partitions 32 , rf - 2\n     private static final String CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC = \"strimzi.cruisecontrol.partitionmetricsamples\"; // partitions 32 , rf - 2\n \n-\n     @Test\n-    @Disabled\n-    void testManuallyCreateMetricsReporterTopic() {\n-        KafkaResource.kafkaWithCruiseControlWithoutWaitAutoCreateTopicsDisable(CLUSTER_NAME, 3, 3);\n-\n-        PodUtils.verifyThatRunningPodsAreStable(KafkaResources.zookeeperStatefulSetName(CLUSTER_NAME));\n-        PodUtils.verifyThatRunningPodsAreStable(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n-        PodUtils.verifyThatRunningPodsAreStable(KafkaResources.entityOperatorDeploymentName(CLUSTER_NAME));\n-\n-        LOGGER.info(\"Verifying that metrics reporter topic is not present because of selected config 'auto.create.topics.enable=false'\");\n-\n-        assertThrows(WaitException.class, () -> CruiseControlUtils.verifyThatKafkaCruiseControlMetricReporterTopicIsPresent(Constants.GLOBAL_CRUISE_CONTROL_EXCEPT_FAIL_TIMEOUT));\n-\n-        PodUtils.waitUntilPodIsPresent(CruiseControlResources.deploymentName(CLUSTER_NAME));\n-        PodUtils.waitUntilPodIsInCrashLoopBackOff(kubeClient().listPodsByPrefixInName(CruiseControlResources.deploymentName(CLUSTER_NAME)).get(0).getMetadata().getName());\n-\n-        LOGGER.info(\"Verifying that samples topics are not present because of \" +\n-            \"'Cruise Control cannot find partitions for the metrics reporter that topic matches strimzi.cruisecontrol.metrics in the target cluster'\");\n-\n-        assertThrows(WaitException.class, () -> CruiseControlUtils.verifyThatCruiseControlSamplesTopicsArePresent(Constants.GLOBAL_CRUISE_CONTROL_EXCEPT_FAIL_TIMEOUT));\n-\n-        // Since log compaction may remove records needed by Cruise Control, all topics created by Cruise Control must\n-        // be configured with cleanup.policy=delete to disable log compaction.\n-        // More in docs 8.5.2. Topic creation and configuration\n-        KafkaTopicResource.topic(CLUSTER_NAME, CRUISE_CONTROL_METRICS_TOPIC)\n-            .editSpec()\n-                .addToConfig(\"cleanup.policy\", \"delete\")\n+    void testAutoCreationOfCruiseControlTopics() throws InterruptedException {\n+        KafkaResource.kafkaWithCruiseControl(CLUSTER_NAME, 3, 3)\n+            .editOrNewSpec()\n+                .editKafka()\n+                    .addToConfig(\"auto.create.topics.enable\", \"false\")\n+                .endKafka()\n+                .editCruiseControl()\n+                    .addToConfig(\"auto.create.topics.enable\", \"false\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06cb3a50a1fbf44d0e99d2e5a4585f1503bdf6f9"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzIzNzAzOnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaTopicUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMDo1Mzo0NlrOGm7puQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMDo1ODoyM1rOGm7ydw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ3NjQwOQ==", "bodyText": "do we still need this method?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3219#discussion_r443476409", "createdAt": "2020-06-22T10:53:46Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaTopicUtils.java", "diffHunk": "@@ -73,6 +73,12 @@ public static void waitForKafkaTopicCreationByNamePrefix(String topicNamePrefix)\n         );\n     }\n \n+    public static void deleteKafkaTopicWithWait(String topicName) {\n+        LOGGER.info(\"Deleting topic {} in namespace {}\", topicName, kubeClient().getNamespace());\n+        KafkaTopicResource.kafkaTopicClient().inNamespace(kubeClient().getNamespace()).withName(topicName).delete();\n+        waitForKafkaTopicDeletion(topicName);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39506bdbc996462acfca4df111523e2672944726"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ3ODY0Nw==", "bodyText": "Not at all, if we will need it in future, we add it in different PR, thanks :)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3219#discussion_r443478647", "createdAt": "2020-06-22T10:58:23Z", "author": {"login": "im-konge"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaTopicUtils.java", "diffHunk": "@@ -73,6 +73,12 @@ public static void waitForKafkaTopicCreationByNamePrefix(String topicNamePrefix)\n         );\n     }\n \n+    public static void deleteKafkaTopicWithWait(String topicName) {\n+        LOGGER.info(\"Deleting topic {} in namespace {}\", topicName, kubeClient().getNamespace());\n+        KafkaTopicResource.kafkaTopicClient().inNamespace(kubeClient().getNamespace()).withName(topicName).delete();\n+        waitForKafkaTopicDeletion(topicName);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ3NjQwOQ=="}, "originalCommit": {"oid": "39506bdbc996462acfca4df111523e2672944726"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1712, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}