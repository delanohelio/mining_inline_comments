{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxMDQyOTIy", "number": 2613, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzozODo0OFrODj0NMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODoxNDo0M1rODlh6Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODgyMDk5OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/matchers/LogHasNoUnexpectedErrors.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzozODo0OFrOFv1NsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzo1MzozMVrOFv1qjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY5OTI0OQ==", "bodyText": "Namespace should be generic here. I think it can occurred in all namespaces which we use.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2613#discussion_r385699249", "createdAt": "2020-02-28T13:38:48Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/matchers/LogHasNoUnexpectedErrors.java", "diffHunk": "@@ -73,7 +73,8 @@ public void describeTo(Description description) {\n         OPERATION_TIMEOUT(\"Util:[0-9]+ - Exceeded timeout of.*while waiting for.*\"),\n         // This is whitelisted cause it's no real problem when this error appears, components are being created even after timeout\n         RECONCILIATION_TIMEOUT(\"ERROR Abstract.*Operator:[0-9]+ - Reconciliation.*\"),\n-        ASSEMBLY_OPERATOR_RECONCILIATION_TIMEOUT(\"ERROR .*AssemblyOperator:[0-9]+ - Reconciliation.*[fF]ailed.*\");\n+        ASSEMBLY_OPERATOR_RECONCILIATION_TIMEOUT(\"ERROR .*AssemblyOperator:[0-9]+ - Reconciliation.*[fF]ailed.*\"),\n+        WATCHER_CLOSED_EXCEPTION(\"ERROR AbstractOperator:* - Watcher closed with exception in namespace connect-cluster-test\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a17fb8ad51131b4c402e225a56a30fbb83e25809"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcwNjYzOQ==", "bodyText": "Yeah my bad, sorry", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2613#discussion_r385706639", "createdAt": "2020-02-28T13:53:31Z", "author": {"login": "im-konge"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/matchers/LogHasNoUnexpectedErrors.java", "diffHunk": "@@ -73,7 +73,8 @@ public void describeTo(Description description) {\n         OPERATION_TIMEOUT(\"Util:[0-9]+ - Exceeded timeout of.*while waiting for.*\"),\n         // This is whitelisted cause it's no real problem when this error appears, components are being created even after timeout\n         RECONCILIATION_TIMEOUT(\"ERROR Abstract.*Operator:[0-9]+ - Reconciliation.*\"),\n-        ASSEMBLY_OPERATOR_RECONCILIATION_TIMEOUT(\"ERROR .*AssemblyOperator:[0-9]+ - Reconciliation.*[fF]ailed.*\");\n+        ASSEMBLY_OPERATOR_RECONCILIATION_TIMEOUT(\"ERROR .*AssemblyOperator:[0-9]+ - Reconciliation.*[fF]ailed.*\"),\n+        WATCHER_CLOSED_EXCEPTION(\"ERROR AbstractOperator:* - Watcher closed with exception in namespace connect-cluster-test\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY5OTI0OQ=="}, "originalCommit": {"oid": "a17fb8ad51131b4c402e225a56a30fbb83e25809"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODgyNzE4OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/BaseST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzo0MDo0MlrOFv1RSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzo0MDo0MlrOFv1RSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcwMDE2OQ==", "bodyText": "This should be in KubernetesResources.java", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2613#discussion_r385700169", "createdAt": "2020-02-28T13:40:42Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/BaseST.java", "diffHunk": "@@ -643,6 +647,64 @@ void verifyLabelsForRoleBindings(String clusterName, String appName) {\n         );\n     }\n \n+    protected NetworkPolicy applyNetworkPolicySettings(String clientNamespace, List<String> namespaces) {\n+        NetworkPolicy networkPolicy = null;\n+\n+        for (String namespace : namespaces) {\n+            if (Environment.ALLOW_NETWORK_POLICIES.equals(\"true\")) {\n+                networkPolicy = allowNetworkPolicies(namespace);\n+            } else {\n+                networkPolicy = denyNetworkPolicies(namespace);\n+            }\n+        }\n+\n+        LOGGER.info(\"NetworkPolicy successfully set to: {} for namespace: {}\", Environment.ALLOW_NETWORK_POLICIES, clientNamespace);\n+\n+        return networkPolicy;\n+    }\n+\n+    protected NetworkPolicy allowNetworkPolicies(String namespace) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a17fb8ad51131b4c402e225a56a30fbb83e25809"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODgyNzUyOnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/BaseST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzo0MDo0OVrOFv1Rgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzo0MDo0OVrOFv1Rgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcwMDIyNw==", "bodyText": "same as above", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2613#discussion_r385700227", "createdAt": "2020-02-28T13:40:49Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/BaseST.java", "diffHunk": "@@ -643,6 +647,64 @@ void verifyLabelsForRoleBindings(String clusterName, String appName) {\n         );\n     }\n \n+    protected NetworkPolicy applyNetworkPolicySettings(String clientNamespace, List<String> namespaces) {\n+        NetworkPolicy networkPolicy = null;\n+\n+        for (String namespace : namespaces) {\n+            if (Environment.ALLOW_NETWORK_POLICIES.equals(\"true\")) {\n+                networkPolicy = allowNetworkPolicies(namespace);\n+            } else {\n+                networkPolicy = denyNetworkPolicies(namespace);\n+            }\n+        }\n+\n+        LOGGER.info(\"NetworkPolicy successfully set to: {} for namespace: {}\", Environment.ALLOW_NETWORK_POLICIES, clientNamespace);\n+\n+        return networkPolicy;\n+    }\n+\n+    protected NetworkPolicy allowNetworkPolicies(String namespace) {\n+        NetworkPolicy networkPolicy = new NetworkPolicyBuilder()\n+                .withNewApiVersion(\"networking.k8s.io/v1\")\n+                .withNewKind(\"NetworkPolicy\")\n+                .withNewMetadata()\n+                    .withName(\"global-network-policy\")\n+                .endMetadata()\n+                .withNewSpec()\n+                    .withNewPodSelector()\n+                    .endPodSelector()\n+                    .addNewIngress()\n+                    .endIngress()\n+                    .withPolicyTypes(\"Ingress\")\n+                .endSpec()\n+                .build();\n+\n+        kubeClient().getClient().network().networkPolicies().inNamespace(namespace).createOrReplace(networkPolicy);\n+        LOGGER.info(\"Network policy successfully set to allow-all\");\n+\n+        return networkPolicy;\n+    }\n+\n+    protected NetworkPolicy denyNetworkPolicies(String namespace) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a17fb8ad51131b4c402e225a56a30fbb83e25809"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODgzMDE1OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/BaseST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzo0MTo0M1rOFv1TGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzo0MTo0M1rOFv1TGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcwMDYzNA==", "bodyText": "also it would be nice to assure automatic deletion with deleteLater()", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2613#discussion_r385700634", "createdAt": "2020-02-28T13:41:43Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/BaseST.java", "diffHunk": "@@ -643,6 +647,64 @@ void verifyLabelsForRoleBindings(String clusterName, String appName) {\n         );\n     }\n \n+    protected NetworkPolicy applyNetworkPolicySettings(String clientNamespace, List<String> namespaces) {\n+        NetworkPolicy networkPolicy = null;\n+\n+        for (String namespace : namespaces) {\n+            if (Environment.ALLOW_NETWORK_POLICIES.equals(\"true\")) {\n+                networkPolicy = allowNetworkPolicies(namespace);\n+            } else {\n+                networkPolicy = denyNetworkPolicies(namespace);\n+            }\n+        }\n+\n+        LOGGER.info(\"NetworkPolicy successfully set to: {} for namespace: {}\", Environment.ALLOW_NETWORK_POLICIES, clientNamespace);\n+\n+        return networkPolicy;\n+    }\n+\n+    protected NetworkPolicy allowNetworkPolicies(String namespace) {\n+        NetworkPolicy networkPolicy = new NetworkPolicyBuilder()\n+                .withNewApiVersion(\"networking.k8s.io/v1\")\n+                .withNewKind(\"NetworkPolicy\")\n+                .withNewMetadata()\n+                    .withName(\"global-network-policy\")\n+                .endMetadata()\n+                .withNewSpec()\n+                    .withNewPodSelector()\n+                    .endPodSelector()\n+                    .addNewIngress()\n+                    .endIngress()\n+                    .withPolicyTypes(\"Ingress\")\n+                .endSpec()\n+                .build();\n+\n+        kubeClient().getClient().network().networkPolicies().inNamespace(namespace).createOrReplace(networkPolicy);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a17fb8ad51131b4c402e225a56a30fbb83e25809"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODgzMDUzOnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/BaseST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzo0MTo1MFrOFv1TVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzo0MTo1MFrOFv1TVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcwMDY5Mg==", "bodyText": "same as above", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2613#discussion_r385700692", "createdAt": "2020-02-28T13:41:50Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/BaseST.java", "diffHunk": "@@ -643,6 +647,64 @@ void verifyLabelsForRoleBindings(String clusterName, String appName) {\n         );\n     }\n \n+    protected NetworkPolicy applyNetworkPolicySettings(String clientNamespace, List<String> namespaces) {\n+        NetworkPolicy networkPolicy = null;\n+\n+        for (String namespace : namespaces) {\n+            if (Environment.ALLOW_NETWORK_POLICIES.equals(\"true\")) {\n+                networkPolicy = allowNetworkPolicies(namespace);\n+            } else {\n+                networkPolicy = denyNetworkPolicies(namespace);\n+            }\n+        }\n+\n+        LOGGER.info(\"NetworkPolicy successfully set to: {} for namespace: {}\", Environment.ALLOW_NETWORK_POLICIES, clientNamespace);\n+\n+        return networkPolicy;\n+    }\n+\n+    protected NetworkPolicy allowNetworkPolicies(String namespace) {\n+        NetworkPolicy networkPolicy = new NetworkPolicyBuilder()\n+                .withNewApiVersion(\"networking.k8s.io/v1\")\n+                .withNewKind(\"NetworkPolicy\")\n+                .withNewMetadata()\n+                    .withName(\"global-network-policy\")\n+                .endMetadata()\n+                .withNewSpec()\n+                    .withNewPodSelector()\n+                    .endPodSelector()\n+                    .addNewIngress()\n+                    .endIngress()\n+                    .withPolicyTypes(\"Ingress\")\n+                .endSpec()\n+                .build();\n+\n+        kubeClient().getClient().network().networkPolicies().inNamespace(namespace).createOrReplace(networkPolicy);\n+        LOGGER.info(\"Network policy successfully set to allow-all\");\n+\n+        return networkPolicy;\n+    }\n+\n+    protected NetworkPolicy denyNetworkPolicies(String namespace) {\n+        NetworkPolicy networkPolicy = new NetworkPolicyBuilder()\n+                .withNewApiVersion(\"networking.k8s.io/v1\")\n+                .withNewKind(\"NetworkPolicy\")\n+                .withNewMetadata()\n+                    .withName(\"global-network-policy\")\n+                .endMetadata()\n+                .withNewSpec()\n+                    .withNewPodSelector()\n+                    .endPodSelector()\n+                    .withPolicyTypes(\"Ingress\")\n+                .endSpec()\n+                .build();\n+\n+        kubeClient().getClient().network().networkPolicies().inNamespace(namespace).createOrReplace(networkPolicy);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a17fb8ad51131b4c402e225a56a30fbb83e25809"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTM3NzM3OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/KubernetesResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjoxNTo0N1rOFv6hxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjoxNTo0N1rOFv6hxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4NjMxMQ==", "bodyText": "You don't need the generics, just declare the parameter as HasMetadata resource. It would also be good to add javadoc. It wasn't immediately clear to me that the resource is something like KafkaConnector. And name probably isn't the best name for the 2nd parameter (the name of what?)\nFinally I think the method name would be clearer with 'allow' it in, since this policy is allowing access", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2613#discussion_r385786311", "createdAt": "2020-02-28T16:15:47Z", "author": {"login": "tombentley"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/KubernetesResource.java", "diffHunk": "@@ -307,6 +312,84 @@ public static Service deployBridgeNodePortService(String bridgeExternalService,\n             .endSpec().build();\n     }\n \n+    public static <T extends HasMetadata> NetworkPolicy applyNetworkPolicySettingsForResource(T resource, String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee8ec7583c8e7d2b1f0a0b195596979820c88fc2"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTQwMjI1OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/KubernetesResource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjoyMjo1OFrOFv6xYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMzo0ODozOFrOFwF4lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc5MDMwNA==", "bodyText": "I think this is too wide. This will open the network even for the CO and therefore the tests will not really test that the CO is able to deal with this on its own. I think you need to make this more specific to allow only connections for the tests.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2613#discussion_r385790304", "createdAt": "2020-02-28T16:22:58Z", "author": {"login": "scholzj"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/KubernetesResource.java", "diffHunk": "@@ -307,6 +312,84 @@ public static Service deployBridgeNodePortService(String bridgeExternalService,\n             .endSpec().build();\n     }\n \n+    public static <T extends HasMetadata> NetworkPolicy applyNetworkPolicySettingsForResource(T resource, String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee8ec7583c8e7d2b1f0a0b195596979820c88fc2"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkxMTQyMQ==", "bodyText": "AFAIU CO deal with NP by it's own in case that Kafka Connector is used. In that case we don't apply any NP changes and we communicate with Connect only via operator. I am not sure about mm2 and bridge atm. Is that what you mean we should do?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2613#discussion_r385911421", "createdAt": "2020-02-28T20:38:45Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/KubernetesResource.java", "diffHunk": "@@ -307,6 +312,84 @@ public static Service deployBridgeNodePortService(String bridgeExternalService,\n             .endSpec().build();\n     }\n \n+    public static <T extends HasMetadata> NetworkPolicy applyNetworkPolicySettingsForResource(T resource, String name) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc5MDMwNA=="}, "originalCommit": {"oid": "ee8ec7583c8e7d2b1f0a0b195596979820c88fc2"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk3MjM3Mg==", "bodyText": "But that is not right, or? That means that this test will test the known issues, but never found any new issues in other areas. AFAIK we have this problem repeatedly and we found about these issues only form user issues. So we need to make sure this test not only covers the known cases but has a chance to find new cases as well.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2613#discussion_r385972372", "createdAt": "2020-02-28T23:48:38Z", "author": {"login": "scholzj"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/KubernetesResource.java", "diffHunk": "@@ -307,6 +312,84 @@ public static Service deployBridgeNodePortService(String bridgeExternalService,\n             .endSpec().build();\n     }\n \n+    public static <T extends HasMetadata> NetworkPolicy applyNetworkPolicySettingsForResource(T resource, String name) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc5MDMwNA=="}, "originalCommit": {"oid": "ee8ec7583c8e7d2b1f0a0b195596979820c88fc2"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTQxODI0OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/KubernetesResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjoyNzozN1rOFv67XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjoyNzozN1rOFv67XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc5Mjg2MQ==", "bodyText": "This is configuring the default policy, so I would put 'default' in the method name somewhere. Also, since it's so similar to the deny case I wonder if it would be better as a single method:\npublic static NetworkPolicy applyDefaultNetworkPolicy(String namespace, DefaultPolicy policy)\n\nwith enum DefaultPolicy { ALLOW, DENY }\nThat would make the call site really clear:\napplyDefaultNetworkPolicy(namespace, DefaultPolicy.ALLOW)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2613#discussion_r385792861", "createdAt": "2020-02-28T16:27:37Z", "author": {"login": "tombentley"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/KubernetesResource.java", "diffHunk": "@@ -307,6 +312,84 @@ public static Service deployBridgeNodePortService(String bridgeExternalService,\n             .endSpec().build();\n     }\n \n+    public static <T extends HasMetadata> NetworkPolicy applyNetworkPolicySettingsForResource(T resource, String name) {\n+        NetworkPolicy networkPolicy = new NetworkPolicyBuilder()\n+                .withNewApiVersion(\"networking.k8s.io/v1\")\n+                .withNewKind(\"NetworkPolicy\")\n+                .withNewMetadata()\n+                    .withName(resource.getMetadata().getName() + \"-allow\")\n+                .endMetadata()\n+                .withNewSpec()\n+                    .addNewIngress()\n+                        .addNewPort()\n+                            .withNewPort(8083)\n+                            .withNewProtocol(\"TCP\")\n+                        .endPort()\n+                        .addNewPort()\n+                            .withNewPort(9404)\n+                            .withNewProtocol(\"TCP\")\n+                        .endPort()\n+                        .addNewPort()\n+                            .withNewPort(8080)\n+                            .withNewProtocol(\"TCP\")\n+                        .endPort()\n+                      .endIngress()\n+                    .withNewPodSelector()\n+                        .addToMatchLabels(\"strimzi.io/cluster\", resource.getMetadata().getName())\n+                        .addToMatchLabels(\"strimzi.io/kind\", resource.getKind())\n+                        .addToMatchLabels(\"strimzi.io/name\", name)\n+                    .endPodSelector()\n+                    .withPolicyTypes(\"Ingress\")\n+                .endSpec()\n+                .build();\n+\n+        deleteLater(kubeClient().getClient().network().networkPolicies().inNamespace(ResourceManager.kubeClient().getNamespace()).createOrReplace(networkPolicy));\n+        return networkPolicy;\n+    }\n+\n+    public static NetworkPolicy allowNetworkPolicies(String namespace) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee8ec7583c8e7d2b1f0a0b195596979820c88fc2"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTQyMjcxOnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/KubernetesResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjoyODo0MFrOFv6-Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjoyODo0MFrOFv6-Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc5MzU0Mw==", "bodyText": "One blank line is enough.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2613#discussion_r385793543", "createdAt": "2020-02-28T16:28:40Z", "author": {"login": "tombentley"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/KubernetesResource.java", "diffHunk": "@@ -307,6 +312,84 @@ public static Service deployBridgeNodePortService(String bridgeExternalService,\n             .endSpec().build();\n     }\n \n+    public static <T extends HasMetadata> NetworkPolicy applyNetworkPolicySettingsForResource(T resource, String name) {\n+        NetworkPolicy networkPolicy = new NetworkPolicyBuilder()\n+                .withNewApiVersion(\"networking.k8s.io/v1\")\n+                .withNewKind(\"NetworkPolicy\")\n+                .withNewMetadata()\n+                    .withName(resource.getMetadata().getName() + \"-allow\")\n+                .endMetadata()\n+                .withNewSpec()\n+                    .addNewIngress()\n+                        .addNewPort()\n+                            .withNewPort(8083)\n+                            .withNewProtocol(\"TCP\")\n+                        .endPort()\n+                        .addNewPort()\n+                            .withNewPort(9404)\n+                            .withNewProtocol(\"TCP\")\n+                        .endPort()\n+                        .addNewPort()\n+                            .withNewPort(8080)\n+                            .withNewProtocol(\"TCP\")\n+                        .endPort()\n+                      .endIngress()\n+                    .withNewPodSelector()\n+                        .addToMatchLabels(\"strimzi.io/cluster\", resource.getMetadata().getName())\n+                        .addToMatchLabels(\"strimzi.io/kind\", resource.getKind())\n+                        .addToMatchLabels(\"strimzi.io/name\", name)\n+                    .endPodSelector()\n+                    .withPolicyTypes(\"Ingress\")\n+                .endSpec()\n+                .build();\n+\n+        deleteLater(kubeClient().getClient().network().networkPolicies().inNamespace(ResourceManager.kubeClient().getNamespace()).createOrReplace(networkPolicy));\n+        return networkPolicy;\n+    }\n+\n+    public static NetworkPolicy allowNetworkPolicies(String namespace) {\n+        NetworkPolicy networkPolicy = new NetworkPolicyBuilder()\n+                .withNewApiVersion(\"networking.k8s.io/v1\")\n+                .withNewKind(\"NetworkPolicy\")\n+                .withNewMetadata()\n+                    .withName(\"global-network-policy\")\n+                .endMetadata()\n+                .withNewSpec()\n+                    .withNewPodSelector()\n+                    .endPodSelector()\n+                    .addNewIngress()\n+                    .endIngress()\n+                    .withPolicyTypes(\"Ingress\")\n+                .endSpec()\n+                .build();\n+\n+        deleteLater(kubeClient().getClient().network().networkPolicies().inNamespace(namespace).createOrReplace(networkPolicy));\n+        LOGGER.info(\"Network policy successfully set to allow-all\");\n+\n+        return networkPolicy;\n+    }\n+\n+    public static NetworkPolicy denyNetworkPolicies(String namespace) {\n+        NetworkPolicy networkPolicy = new NetworkPolicyBuilder()\n+                .withNewApiVersion(\"networking.k8s.io/v1\")\n+                .withNewKind(\"NetworkPolicy\")\n+                .withNewMetadata()\n+                    .withName(\"global-network-policy\")\n+                .endMetadata()\n+                .withNewSpec()\n+                    .withNewPodSelector()\n+                    .endPodSelector()\n+                    .withPolicyTypes(\"Ingress\")\n+                .endSpec()\n+                .build();\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee8ec7583c8e7d2b1f0a0b195596979820c88fc2"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTQ1NDA2OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/Environment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjozNzo0MVrOFv7RFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjozNzo0MVrOFv7RFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc5ODQyMA==", "bodyText": "If I read the code right, this does not allow or disable the network policies. Thsi is rather a swicth between default-to-allow and default-to-deny network policies. So I think we should change the name to make it more clear.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2613#discussion_r385798420", "createdAt": "2020-02-28T16:37:41Z", "author": {"login": "scholzj"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/Environment.java", "diffHunk": "@@ -93,6 +98,7 @@\n     // Image pull policy variables\n     public static final String COMPONENTS_IMAGE_PULL_POLICY = System.getenv().getOrDefault(COMPONENTS_IMAGE_PULL_POLICY_ENV, COMPONENTS_IMAGE_PULL_POLICY_ENV_DEFAULT);\n     public static final String OPERATOR_IMAGE_PULL_POLICY = System.getenv().getOrDefault(OPERATOR_IMAGE_PULL_POLICY_ENV, OPERATOR_IMAGE_PULL_POLICY_ENV_DEFAULT);\n+    public static final String ALLOW_NETWORK_POLICIES = System.getenv().getOrDefault(ALLOW_NETWORK_POLICIES_ENV, ALLOW_NETWORK_POLICIES_DEFAULT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee8ec7583c8e7d2b1f0a0b195596979820c88fc2"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTQ1NTIzOnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaConnectResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjozODowMFrOFv7Rxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjozODowMFrOFv7Rxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc5ODU5OA==", "bodyText": "So as i can see basically you change all our Kafka CR methods is a way that every time when we deploy for instance KafkaConnect, it must be with the additional parameter allowNetworkPolicyAccess. Would it be better to overload  method and encapsulate default value of allowNetworkPolicyAccess?\nCurrently -> You have only these master methods with lot of parameters.\n\n`public static DoneableKafkaConnect kafkaConnect(String name, int kafkaConnectReplicas, boolean allowNetworkPolicyAccess)`\n\nGoal -> Master method with auxiliary methods like \n\n1) public static DoneableKafkaConnect kafkaConnect(String name, int kafkaConnectReplicas, boolean allowNetworkPolicyAccess)\n2) public static DoneableKafkaConnect kafkaConnect(String name, int kafkaConnectReplicas)\n\nwhere is second example you will need to decide has default value for the third argument of method in a 1).\nDoes it make sense?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2613#discussion_r385798598", "createdAt": "2020-02-28T16:38:00Z", "author": {"login": "see-quick"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaConnectResource.java", "diffHunk": "@@ -35,22 +36,22 @@\n         return Crds.kafkaConnectOperation(ResourceManager.kubeClient().getClient());\n     }\n \n-    public static DoneableKafkaConnect kafkaConnect(String name, int kafkaConnectReplicas) {\n-        return kafkaConnect(name, name, kafkaConnectReplicas);\n+    public static DoneableKafkaConnect kafkaConnect(String name, int kafkaConnectReplicas, boolean allowNetworkPolicyAccess) {\n+        return kafkaConnect(name, name, kafkaConnectReplicas, allowNetworkPolicyAccess);\n     }\n \n-    public static DoneableKafkaConnect kafkaConnect(String name, String clusterName, int kafkaConnectReplicas) {\n+    public static DoneableKafkaConnect kafkaConnect(String name, String clusterName, int kafkaConnectReplicas, boolean allowNetworkPolicyAccess) {\n         KafkaConnect kafkaConnect = getKafkaConnectFromYaml(PATH_TO_KAFKA_CONNECT_CONFIG);\n-        return deployKafkaConnect(defaultKafkaConnect(kafkaConnect, name, clusterName, kafkaConnectReplicas).build());\n+        return deployKafkaConnect(defaultKafkaConnect(kafkaConnect, name, clusterName, kafkaConnectReplicas).build(), allowNetworkPolicyAccess);\n     }\n \n-    public static DoneableKafkaConnect kafkaConnectWithMetrics(String name, int kafkaConnectReplicas) {\n-        return kafkaConnectWithMetrics(name, name, kafkaConnectReplicas);\n+    public static DoneableKafkaConnect kafkaConnectWithMetrics(String name, int kafkaConnectReplicas, boolean allowNetworkPolicyAccess) {\n+        return kafkaConnectWithMetrics(name, name, kafkaConnectReplicas, allowNetworkPolicyAccess);\n     }\n \n-    public static DoneableKafkaConnect kafkaConnectWithMetrics(String name, String clusterName, int kafkaConnectReplicas) {\n+    public static DoneableKafkaConnect kafkaConnectWithMetrics(String name, String clusterName, int kafkaConnectReplicas, boolean allowNetworkPolicyAccess) {\n         KafkaConnect kafkaConnect = getKafkaConnectFromYaml(PATH_TO_KAFKA_CONNECT_METRICS_CONFIG);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee8ec7583c8e7d2b1f0a0b195596979820c88fc2"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTQ3NTY2OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/BaseST.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjo0MzoyNVrOFv7d5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMDo0MjoyMFrOFwCPrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwMTcwMw==", "bodyText": "This one i would move to KubeClusterResource class what do you think @Frawless ?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2613#discussion_r385801703", "createdAt": "2020-02-28T16:43:25Z", "author": {"login": "see-quick"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/BaseST.java", "diffHunk": "@@ -643,6 +646,22 @@ void verifyLabelsForRoleBindings(String clusterName, String appName) {\n         );\n     }\n \n+    protected NetworkPolicy applyNetworkPolicySettings(String clientNamespace, List<String> namespaces) {\n+        NetworkPolicy networkPolicy = null;\n+\n+        for (String namespace : namespaces) {\n+            if (Environment.ALLOW_NETWORK_POLICIES.equals(\"true\")) {\n+                networkPolicy = KubernetesResource.allowNetworkPolicies(namespace);\n+            } else {\n+                networkPolicy = KubernetesResource.denyNetworkPolicies(namespace);\n+            }\n+        }\n+\n+        LOGGER.info(\"NetworkPolicy successfully set to: {} for namespace: {}\", Environment.ALLOW_NETWORK_POLICIES, clientNamespace);\n+\n+        return networkPolicy;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee8ec7583c8e7d2b1f0a0b195596979820c88fc2"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkxMjc0OA==", "bodyText": "Yes, I already suggested it I think (or at least I wanted:D )", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2613#discussion_r385912748", "createdAt": "2020-02-28T20:42:20Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/BaseST.java", "diffHunk": "@@ -643,6 +646,22 @@ void verifyLabelsForRoleBindings(String clusterName, String appName) {\n         );\n     }\n \n+    protected NetworkPolicy applyNetworkPolicySettings(String clientNamespace, List<String> namespaces) {\n+        NetworkPolicy networkPolicy = null;\n+\n+        for (String namespace : namespaces) {\n+            if (Environment.ALLOW_NETWORK_POLICIES.equals(\"true\")) {\n+                networkPolicy = KubernetesResource.allowNetworkPolicies(namespace);\n+            } else {\n+                networkPolicy = KubernetesResource.denyNetworkPolicies(namespace);\n+            }\n+        }\n+\n+        LOGGER.info(\"NetworkPolicy successfully set to: {} for namespace: {}\", Environment.ALLOW_NETWORK_POLICIES, clientNamespace);\n+\n+        return networkPolicy;\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwMTcwMw=="}, "originalCommit": {"oid": "ee8ec7583c8e7d2b1f0a0b195596979820c88fc2"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTQ3OTI4OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/KubernetesResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjo0NDoyMVrOFv7gBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjo0NDoyMVrOFv7gBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwMjI0Ng==", "bodyText": "Again, the naming here might be confusing since it doesn't deny or allow network policies. It basically just defines their default behaviour if they are already enabled. If they are disabled, this will do nothing.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2613#discussion_r385802246", "createdAt": "2020-02-28T16:44:21Z", "author": {"login": "scholzj"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/KubernetesResource.java", "diffHunk": "@@ -307,6 +312,84 @@ public static Service deployBridgeNodePortService(String bridgeExternalService,\n             .endSpec().build();\n     }\n \n+    public static <T extends HasMetadata> NetworkPolicy applyNetworkPolicySettingsForResource(T resource, String name) {\n+        NetworkPolicy networkPolicy = new NetworkPolicyBuilder()\n+                .withNewApiVersion(\"networking.k8s.io/v1\")\n+                .withNewKind(\"NetworkPolicy\")\n+                .withNewMetadata()\n+                    .withName(resource.getMetadata().getName() + \"-allow\")\n+                .endMetadata()\n+                .withNewSpec()\n+                    .addNewIngress()\n+                        .addNewPort()\n+                            .withNewPort(8083)\n+                            .withNewProtocol(\"TCP\")\n+                        .endPort()\n+                        .addNewPort()\n+                            .withNewPort(9404)\n+                            .withNewProtocol(\"TCP\")\n+                        .endPort()\n+                        .addNewPort()\n+                            .withNewPort(8080)\n+                            .withNewProtocol(\"TCP\")\n+                        .endPort()\n+                      .endIngress()\n+                    .withNewPodSelector()\n+                        .addToMatchLabels(\"strimzi.io/cluster\", resource.getMetadata().getName())\n+                        .addToMatchLabels(\"strimzi.io/kind\", resource.getKind())\n+                        .addToMatchLabels(\"strimzi.io/name\", name)\n+                    .endPodSelector()\n+                    .withPolicyTypes(\"Ingress\")\n+                .endSpec()\n+                .build();\n+\n+        deleteLater(kubeClient().getClient().network().networkPolicies().inNamespace(ResourceManager.kubeClient().getNamespace()).createOrReplace(networkPolicy));\n+        return networkPolicy;\n+    }\n+\n+    public static NetworkPolicy allowNetworkPolicies(String namespace) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee8ec7583c8e7d2b1f0a0b195596979820c88fc2"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTQ3OTkyOnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/KubernetesResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjo0NDozMVrOFv7gZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjo0NDozMVrOFv7gZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwMjM0Mg==", "bodyText": "Again, the naming here might be confusing since it doesn't deny or allow network policies. It basically just defines their default behaviour if they are already enabled. If they are disabled, this will do nothing.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2613#discussion_r385802342", "createdAt": "2020-02-28T16:44:31Z", "author": {"login": "scholzj"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/KubernetesResource.java", "diffHunk": "@@ -307,6 +312,84 @@ public static Service deployBridgeNodePortService(String bridgeExternalService,\n             .endSpec().build();\n     }\n \n+    public static <T extends HasMetadata> NetworkPolicy applyNetworkPolicySettingsForResource(T resource, String name) {\n+        NetworkPolicy networkPolicy = new NetworkPolicyBuilder()\n+                .withNewApiVersion(\"networking.k8s.io/v1\")\n+                .withNewKind(\"NetworkPolicy\")\n+                .withNewMetadata()\n+                    .withName(resource.getMetadata().getName() + \"-allow\")\n+                .endMetadata()\n+                .withNewSpec()\n+                    .addNewIngress()\n+                        .addNewPort()\n+                            .withNewPort(8083)\n+                            .withNewProtocol(\"TCP\")\n+                        .endPort()\n+                        .addNewPort()\n+                            .withNewPort(9404)\n+                            .withNewProtocol(\"TCP\")\n+                        .endPort()\n+                        .addNewPort()\n+                            .withNewPort(8080)\n+                            .withNewProtocol(\"TCP\")\n+                        .endPort()\n+                      .endIngress()\n+                    .withNewPodSelector()\n+                        .addToMatchLabels(\"strimzi.io/cluster\", resource.getMetadata().getName())\n+                        .addToMatchLabels(\"strimzi.io/kind\", resource.getKind())\n+                        .addToMatchLabels(\"strimzi.io/name\", name)\n+                    .endPodSelector()\n+                    .withPolicyTypes(\"Ingress\")\n+                .endSpec()\n+                .build();\n+\n+        deleteLater(kubeClient().getClient().network().networkPolicies().inNamespace(ResourceManager.kubeClient().getNamespace()).createOrReplace(networkPolicy));\n+        return networkPolicy;\n+    }\n+\n+    public static NetworkPolicy allowNetworkPolicies(String namespace) {\n+        NetworkPolicy networkPolicy = new NetworkPolicyBuilder()\n+                .withNewApiVersion(\"networking.k8s.io/v1\")\n+                .withNewKind(\"NetworkPolicy\")\n+                .withNewMetadata()\n+                    .withName(\"global-network-policy\")\n+                .endMetadata()\n+                .withNewSpec()\n+                    .withNewPodSelector()\n+                    .endPodSelector()\n+                    .addNewIngress()\n+                    .endIngress()\n+                    .withPolicyTypes(\"Ingress\")\n+                .endSpec()\n+                .build();\n+\n+        deleteLater(kubeClient().getClient().network().networkPolicies().inNamespace(namespace).createOrReplace(networkPolicy));\n+        LOGGER.info(\"Network policy successfully set to allow-all\");\n+\n+        return networkPolicy;\n+    }\n+\n+    public static NetworkPolicy denyNetworkPolicies(String namespace) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee8ec7583c8e7d2b1f0a0b195596979820c88fc2"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTQ4NjUxOnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjo0NjowN1rOFv7kEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjo0NjowN1rOFv7kEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwMzI4Mw==", "bodyText": "In all this deployments of Kafka connect will be really great to have encapsulation of this third parameter for the default value...", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2613#discussion_r385803283", "createdAt": "2020-02-28T16:46:07Z", "author": {"login": "see-quick"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java", "diffHunk": "@@ -478,7 +478,7 @@ void testSecretsWithKafkaConnectWithTlsAndScramShaAuthentication() throws Except\n \n         SecretUtils.waitForSecretReady(userName);\n \n-        KafkaConnectResource.kafkaConnect(CLUSTER_NAME, 1)\n+        KafkaConnectResource.kafkaConnect(CLUSTER_NAME, 1, false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee8ec7583c8e7d2b1f0a0b195596979820c88fc2"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Njc2OTcxOnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/Enums.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwOTozMTo0M1rOFw-Luw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwOTozMTo0M1rOFw-Luw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg5NDc3OQ==", "bodyText": "DefaultPolicy -> DefaultNetworkPolicy", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2613#discussion_r386894779", "createdAt": "2020-03-03T09:31:43Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/Enums.java", "diffHunk": "@@ -0,0 +1,12 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest;\n+\n+public class Enums {\n+    public enum DefaultPolicy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed1c4ca57a8849f35002f8768226137146afe611"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Njc3MzMwOnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/Environment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwOTozMjo0MFrOFw-N2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwOTozMjo0MFrOFw-N2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg5NTMyMA==", "bodyText": "ALLOW_NETWORK_POLICIES_DEFAULT -> ALLOW_DEFAULT_NETWORK_POLICIES_DEFAULT", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2613#discussion_r386895320", "createdAt": "2020-03-03T09:32:40Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/Environment.java", "diffHunk": "@@ -75,6 +79,7 @@\n     public static final String COMPONENTS_IMAGE_PULL_POLICY_ENV_DEFAULT = Constants.IF_NOT_PRESENT_IMAGE_PULL_POLICY;\n     public static final String OPERATOR_IMAGE_PULL_POLICY_ENV_DEFAULT = Constants.ALWAYS_IMAGE_PULL_POLICY;\n     public static final int KAFKA_CLIENTS_DEFAULT_PORT = 4242;\n+    private static final String ALLOW_NETWORK_POLICIES_DEFAULT = \"false\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed1c4ca57a8849f35002f8768226137146afe611"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjc5NDM5OnYy", "diffSide": "RIGHT", "path": "TESTING.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODoxNDo0M1rOFyefQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDoxMTo0NFrOFyiY1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ3MjY0Mw==", "bodyText": "Is it ALLOW_NETWORK_POLICIES or ALLOW_DEFAULT_NETWORK_POLICIES? In Environment.java it ays:\nprivate static final String ALLOW_DEFAULT_NETWORK_POLICIES_ENV = \"ALLOW_NETWORK_POLICIES\";\nOne way or another, I wonder if more clear name would be helpfull. the docs laos doens't make it clear what the setting is ... is true -> default-to-allow?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2613#discussion_r388472643", "createdAt": "2020-03-05T18:14:43Z", "author": {"login": "scholzj"}, "path": "TESTING.md", "diffHunk": "@@ -208,6 +208,7 @@ All environment variables can be seen in [Environment](systemtest/src/main/java/\n | OLM_OPERATOR_NAME         | Operator name in manifests CSV                                                       | strimzi                                             |\n | OLM_APP_BUNDLE_PREFIX     | CSV bundle name                                                                      | strimzi                                             |\n | OLM_OPERATOR_VERSION      | Version of the operator which will be installed                                      | v0.16.2                                             |\n+| ALLOW_DEFAULT_NETWORK_POLICIES | Determines how will be network policies set - to allow-all or deny-all          | false                                            |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74b1358910b0d89d7b72de3c344300c71051757c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUzNjUzNA==", "bodyText": "@scholzj thanks, good point, everything changed :) thank you for your comments", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2613#discussion_r388536534", "createdAt": "2020-03-05T20:11:44Z", "author": {"login": "im-konge"}, "path": "TESTING.md", "diffHunk": "@@ -208,6 +208,7 @@ All environment variables can be seen in [Environment](systemtest/src/main/java/\n | OLM_OPERATOR_NAME         | Operator name in manifests CSV                                                       | strimzi                                             |\n | OLM_APP_BUNDLE_PREFIX     | CSV bundle name                                                                      | strimzi                                             |\n | OLM_OPERATOR_VERSION      | Version of the operator which will be installed                                      | v0.16.2                                             |\n+| ALLOW_DEFAULT_NETWORK_POLICIES | Determines how will be network policies set - to allow-all or deny-all          | false                                            |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ3MjY0Mw=="}, "originalCommit": {"oid": "74b1358910b0d89d7b72de3c344300c71051757c"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 503, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}