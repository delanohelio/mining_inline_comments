{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMzIzMjkz", "number": 2711, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTowNjoxNFrODpEFNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDo0NzozNFrODpimZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0Mzg1MDc2OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaConnectorUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTowNjoxNFrOF4AF-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTowNjoxNFrOF4AF-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI2NjEwNA==", "bodyText": "Surely waitForConnectorStability() is a better name?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2711#discussion_r394266104", "createdAt": "2020-03-18T11:06:14Z", "author": {"login": "tombentley"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaConnectorUtils.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.utils.kafkaUtils;\n+\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.test.TestUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class KafkaConnectorUtils {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(KafkaConnectorUtils.class);\n+\n+    private KafkaConnectorUtils() {}\n+\n+    /**\n+     * WaitForStabilityConnector method, verifying stability of connector\n+     * @param connectorName connector name\n+     * @param connectPodName connects2i or connect pod name\n+     */\n+    public static void waitForStabilityConnector(String connectorName, String connectPodName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d0eac395361ab5655eda4164a3ee16eba82fd10"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0Mzk0Mzg4OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/Constants.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTozNTo0M1rOF4BBww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwOTo1Njo1OVrOF4nTKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI4MTQxMQ==", "bodyText": "Might be good to have some comments explaining what these are.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2711#discussion_r394281411", "createdAt": "2020-03-18T11:35:43Z", "author": {"login": "scholzj"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/Constants.java", "diffHunk": "@@ -59,6 +59,9 @@\n     long CO_OPERATION_TIMEOUT_POLL = Duration.ofSeconds(2).toMillis();\n     long RECONCILIATION_INTERVAL = Duration.ofSeconds(30).toMillis();\n \n+    int GLOBAL_STABILITY_COUNT = 20;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d0eac395361ab5655eda4164a3ee16eba82fd10"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkwNzA5Mw==", "bodyText": "I would go for GLOBAL_RECONCILIATION_COUNT = Duration.ofSeconds(30).toMillis() / GLOBAL_POLL_INTERVAL.\nI had also idea to overload method public static long waitFor(String description, long pollIntervalMs, long timeoutMs, BooleanSupplier ready)\n--> to just to waitFor(String description, BooleanSupplier ready) and these two parameters set to some fix value inside parameter long pollIntervalMs, long timeoutMs", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2711#discussion_r394907093", "createdAt": "2020-03-19T09:54:44Z", "author": {"login": "see-quick"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/Constants.java", "diffHunk": "@@ -59,6 +59,9 @@\n     long CO_OPERATION_TIMEOUT_POLL = Duration.ofSeconds(2).toMillis();\n     long RECONCILIATION_INTERVAL = Duration.ofSeconds(30).toMillis();\n \n+    int GLOBAL_STABILITY_COUNT = 20;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI4MTQxMQ=="}, "originalCommit": {"oid": "5d0eac395361ab5655eda4164a3ee16eba82fd10"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkwODQ1Nw==", "bodyText": "updated )", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2711#discussion_r394908457", "createdAt": "2020-03-19T09:56:59Z", "author": {"login": "see-quick"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/Constants.java", "diffHunk": "@@ -59,6 +59,9 @@\n     long CO_OPERATION_TIMEOUT_POLL = Duration.ofSeconds(2).toMillis();\n     long RECONCILIATION_INTERVAL = Duration.ofSeconds(30).toMillis();\n \n+    int GLOBAL_STABILITY_COUNT = 20;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI4MTQxMQ=="}, "originalCommit": {"oid": "5d0eac395361ab5655eda4164a3ee16eba82fd10"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODg0NDM2OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaConnectorUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDo0NjoxMVrOF4x2zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDo0NjoxMVrOF4x2zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA4MTQyMw==", "bodyText": "\"Connector with name {} is present. Remaining seconds for stability {}\"  ?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2711#discussion_r395081423", "createdAt": "2020-03-19T14:46:11Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaConnectorUtils.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.utils.kafkaUtils;\n+\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.test.TestUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class KafkaConnectorUtils {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(KafkaConnectorUtils.class);\n+\n+    private KafkaConnectorUtils() {}\n+\n+    /**\n+     * WaitForStabilityConnector method, verifying stability of connector\n+     * @param connectorName connector name\n+     * @param connectPodName connects2i or connect pod name\n+     */\n+    public static void waitForConnectorStability(String connectorName, String connectPodName) {\n+        // alternative to sync hassling AtomicInteger one could use an integer array instead\n+        // not need to be final because reference to the array does not get another array assigned\n+        int[] i = {0};\n+\n+        TestUtils.waitFor(\"Waiting for stability of connector \" + connectorName, Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n+            () -> {\n+                String availableConnectors = KafkaConnectUtils.getCreatedConnectors(connectPodName);\n+                if (availableConnectors.contains(connectorName)) {\n+                    LOGGER.info(\"Connector with name {} is present remaining seconds for stability {}\", connectorName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d0b7208da1ad26f9436555a7cd2ad2da6a32c9f"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODg1MDkyOnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/controllers/StatefulSetUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDo0NzozNFrOF4x6zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDo0NzozNFrOF4x6zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA4MjQ0NQ==", "bodyText": "Maybe we should use better log text like :{} pods didn't roll. Remaining seconds for stability: {}  wdyt?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2711#discussion_r395082445", "createdAt": "2020-03-19T14:47:34Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/controllers/StatefulSetUtils.java", "diffHunk": "@@ -193,4 +193,22 @@ public static void waitForKafkaStatefulSetLabelsDeletion(String statefulSet, Str\n             LOGGER.info(\"Kafka statefulSet label {} change to {}\", labelKey, null);\n         }\n     }\n+\n+    public static void waitForNoRollingUpdate(String statefulSetName, Map<String, String> pods) {\n+        // alternative to sync hassling AtomicInteger one could use an integer array instead\n+        // not need to be final because reference to the array does not get another array assigned\n+        int[] i = {0};\n+\n+        TestUtils.waitFor(\"Waiting for stability of rolling update will be not triggered\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n+            () -> {\n+                if (!StatefulSetUtils.ssHasRolled(statefulSetName, pods)) {\n+                    LOGGER.info(\"{} pods not rolling waiting, remaining seconds for stability {}\", pods.toString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d0b7208da1ad26f9436555a7cd2ad2da6a32c9f"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 315, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}