{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5NDczMDU4", "number": 2360, "title": "Fix NPE when secret does not contain given crt", "bodyText": "Signed-off-by: Stanislav Knot sknot@redhat.com\nType of change\n\nBugfix\n\nDescription\nWhen the secret with custom crts does not contain given crt, NPE appears in the CO logs.\nChecklist\n\n Update/write design documentation in ./design\n Write tests\n Make sure all tests pass\n Update documentation\n Check RBAC rights for Kubernetes / OpenShift roles\n Try your changes from Pod inside your Kubernetes and OpenShift cluster, not just locally\n Reference relevant issue(s) and close them after merging\n Update CHANGELOG.md", "createdAt": "2020-01-06T10:01:04Z", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2360", "merged": true, "mergeCommit": {"oid": "a6717a301819918a739c5b6855dad4cfb5f51613"}, "closed": true, "closedAt": "2020-01-08T21:17:02Z", "author": {"login": "sknot-rh"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb3sEzbAFqTMzODYzNzgzNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb4To-BABqjI5MzA4MTgzMzU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4NjM3ODM0", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2360#pullrequestreview-338637834", "createdAt": "2020-01-06T13:21:50Z", "commit": {"oid": "437c0831b8abd52432e0b5b526e77d7d2bd4c986"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4NjU5ODU4", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2360#pullrequestreview-338659858", "createdAt": "2020-01-06T14:05:47Z", "commit": {"oid": "1c9c56481b6213286c1f3bcdf199018998e1797b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNDowNTo0N1rOFaedOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNDowNzowOVrOFaefpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMwNjI5Nw==", "bodyText": "Could you make this a bit more readable?\nelse {\n    try {", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2360#discussion_r363306297", "createdAt": "2020-01-06T14:05:47Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -1774,14 +1774,18 @@ public void checkCustomCaSecret(CertificateAuthority ca, Secret certSecret, Secr\n                                 Secret certSecret = result.result();\n \n                                 if (certSecret != null) {\n-                                    try {\n-                                        X509Certificate cert = Ca.cert(certSecret, customCertSecret.getCertificate());\n-                                        byte[] signature = MessageDigest.getInstance(\"SHA-256\").digest(cert.getEncoded());\n-                                        thumbprintPromise.complete(Base64.getEncoder().encodeToString(signature));\n-                                    } catch (CertificateEncodingException | NoSuchAlgorithmException e) {\n-                                        log.warn(\"{}: Failed to get certificate signature of {} from Secret {}.\", reconciliation, customCertSecret.getCertificate(), customCertSecret.getSecretName());\n-                                        thumbprintPromise.fail(new RuntimeException(\"Failed to get certificate signature of \" + customCertSecret.getCertificate() + \" from Secret \" + certSecret.getMetadata().getName(), e));\n-                                    }\n+                                    if (!certSecret.getData().containsKey(customCertSecret.getCertificate())) {\n+                                        thumbprintPromise.fail(\"Secret \" + customCertSecret.getSecretName() + \" does not contain certificate \" + customCertSecret.getCertificate() + \".\");\n+                                    } else if (!certSecret.getData().containsKey(customCertSecret.getKey())) {\n+                                        thumbprintPromise.fail(\"Secret \" + customCertSecret.getSecretName() + \" does not contain key \" + customCertSecret.getKey() + \".\");\n+                                    } else try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c9c56481b6213286c1f3bcdf199018998e1797b"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMwNjg2Mw==", "bodyText": "Could you add the warn messages as we have them with the other errors to make that consistent? Also, I think the message could you some more clarification ... maybe something like Secret xyz does not contian certificate under the key <tls.crt>.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2360#discussion_r363306863", "createdAt": "2020-01-06T14:07:01Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -1774,14 +1774,18 @@ public void checkCustomCaSecret(CertificateAuthority ca, Secret certSecret, Secr\n                                 Secret certSecret = result.result();\n \n                                 if (certSecret != null) {\n-                                    try {\n-                                        X509Certificate cert = Ca.cert(certSecret, customCertSecret.getCertificate());\n-                                        byte[] signature = MessageDigest.getInstance(\"SHA-256\").digest(cert.getEncoded());\n-                                        thumbprintPromise.complete(Base64.getEncoder().encodeToString(signature));\n-                                    } catch (CertificateEncodingException | NoSuchAlgorithmException e) {\n-                                        log.warn(\"{}: Failed to get certificate signature of {} from Secret {}.\", reconciliation, customCertSecret.getCertificate(), customCertSecret.getSecretName());\n-                                        thumbprintPromise.fail(new RuntimeException(\"Failed to get certificate signature of \" + customCertSecret.getCertificate() + \" from Secret \" + certSecret.getMetadata().getName(), e));\n-                                    }\n+                                    if (!certSecret.getData().containsKey(customCertSecret.getCertificate())) {\n+                                        thumbprintPromise.fail(\"Secret \" + customCertSecret.getSecretName() + \" does not contain certificate \" + customCertSecret.getCertificate() + \".\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c9c56481b6213286c1f3bcdf199018998e1797b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMwNjkxOQ==", "bodyText": "Same as above.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2360#discussion_r363306919", "createdAt": "2020-01-06T14:07:09Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -1774,14 +1774,18 @@ public void checkCustomCaSecret(CertificateAuthority ca, Secret certSecret, Secr\n                                 Secret certSecret = result.result();\n \n                                 if (certSecret != null) {\n-                                    try {\n-                                        X509Certificate cert = Ca.cert(certSecret, customCertSecret.getCertificate());\n-                                        byte[] signature = MessageDigest.getInstance(\"SHA-256\").digest(cert.getEncoded());\n-                                        thumbprintPromise.complete(Base64.getEncoder().encodeToString(signature));\n-                                    } catch (CertificateEncodingException | NoSuchAlgorithmException e) {\n-                                        log.warn(\"{}: Failed to get certificate signature of {} from Secret {}.\", reconciliation, customCertSecret.getCertificate(), customCertSecret.getSecretName());\n-                                        thumbprintPromise.fail(new RuntimeException(\"Failed to get certificate signature of \" + customCertSecret.getCertificate() + \" from Secret \" + certSecret.getMetadata().getName(), e));\n-                                    }\n+                                    if (!certSecret.getData().containsKey(customCertSecret.getCertificate())) {\n+                                        thumbprintPromise.fail(\"Secret \" + customCertSecret.getSecretName() + \" does not contain certificate \" + customCertSecret.getCertificate() + \".\");\n+                                    } else if (!certSecret.getData().containsKey(customCertSecret.getKey())) {\n+                                        thumbprintPromise.fail(\"Secret \" + customCertSecret.getSecretName() + \" does not contain key \" + customCertSecret.getKey() + \".\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c9c56481b6213286c1f3bcdf199018998e1797b"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4NzEwNDU3", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2360#pullrequestreview-338710457", "createdAt": "2020-01-06T15:32:27Z", "commit": {"oid": "2489a964d86a41893305936199bafa296b624f1e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4NzExNzk2", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2360#pullrequestreview-338711796", "createdAt": "2020-01-06T15:34:32Z", "commit": {"oid": "2489a964d86a41893305936199bafa296b624f1e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNTozNDozMlrOFagzYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNTo0MDozMlrOFag-Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM0NDczOA==", "bodyText": "Won't the logging here and the failure of the thumbprintPromise with the same message result in the message being logged twice?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2360#discussion_r363344738", "createdAt": "2020-01-06T15:34:32Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -1774,14 +1774,21 @@ public void checkCustomCaSecret(CertificateAuthority ca, Secret certSecret, Secr\n                                 Secret certSecret = result.result();\n \n                                 if (certSecret != null) {\n-                                    try {\n-                                        X509Certificate cert = Ca.cert(certSecret, customCertSecret.getCertificate());\n-                                        byte[] signature = MessageDigest.getInstance(\"SHA-256\").digest(cert.getEncoded());\n-                                        thumbprintPromise.complete(Base64.getEncoder().encodeToString(signature));\n-                                    } catch (CertificateEncodingException | NoSuchAlgorithmException e) {\n-                                        log.warn(\"{}: Failed to get certificate signature of {} from Secret {}.\", reconciliation, customCertSecret.getCertificate(), customCertSecret.getSecretName());\n-                                        thumbprintPromise.fail(new RuntimeException(\"Failed to get certificate signature of \" + customCertSecret.getCertificate() + \" from Secret \" + certSecret.getMetadata().getName(), e));\n-                                    }\n+                                    if (!certSecret.getData().containsKey(customCertSecret.getCertificate())) {\n+                                        log.warn(\"{}: Secret {} does not contain certificate under the key {}.\", reconciliation, customCertSecret.getSecretName(), customCertSecret.getCertificate());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2489a964d86a41893305936199bafa296b624f1e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM0NzUyMg==", "bodyText": "I don't think we should use RuntimeException (at least in the case of a CertificateEncodingException, which would indicate that the user didn't create the Secret with a cert in the correct format). Remember that the exception class name gets set in the resource status, so it ought to be something helpful. I guess we could use the existing InvalidResourceException (though I've always thought of that as being about the consumed CR, rather than other resources)? Or Maybe a new exception class.\nThe above errors for missing cert and key should use the same exception type.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2360#discussion_r363347522", "createdAt": "2020-01-06T15:40:32Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -1774,14 +1774,21 @@ public void checkCustomCaSecret(CertificateAuthority ca, Secret certSecret, Secr\n                                 Secret certSecret = result.result();\n \n                                 if (certSecret != null) {\n-                                    try {\n-                                        X509Certificate cert = Ca.cert(certSecret, customCertSecret.getCertificate());\n-                                        byte[] signature = MessageDigest.getInstance(\"SHA-256\").digest(cert.getEncoded());\n-                                        thumbprintPromise.complete(Base64.getEncoder().encodeToString(signature));\n-                                    } catch (CertificateEncodingException | NoSuchAlgorithmException e) {\n-                                        log.warn(\"{}: Failed to get certificate signature of {} from Secret {}.\", reconciliation, customCertSecret.getCertificate(), customCertSecret.getSecretName());\n-                                        thumbprintPromise.fail(new RuntimeException(\"Failed to get certificate signature of \" + customCertSecret.getCertificate() + \" from Secret \" + certSecret.getMetadata().getName(), e));\n-                                    }\n+                                    if (!certSecret.getData().containsKey(customCertSecret.getCertificate())) {\n+                                        log.warn(\"{}: Secret {} does not contain certificate under the key {}.\", reconciliation, customCertSecret.getSecretName(), customCertSecret.getCertificate());\n+                                        thumbprintPromise.fail(\"Secret \" + customCertSecret.getSecretName() + \" does not contain certificate under the key \" + customCertSecret.getCertificate() + \".\");\n+                                    } else if (!certSecret.getData().containsKey(customCertSecret.getKey())) {\n+                                        log.warn(\"{}: Secret {} does not contain custom certificate private key under the key {}.\", reconciliation, customCertSecret.getSecretName(), customCertSecret.getKey());\n+                                        thumbprintPromise.fail(\"Secret \" + customCertSecret.getSecretName() + \" does not contain custom certificate private key under the key \" + customCertSecret.getKey() + \".\");\n+                                    } else\n+                                        try {\n+                                            X509Certificate cert = Ca.cert(certSecret, customCertSecret.getCertificate());\n+                                            byte[] signature = MessageDigest.getInstance(\"SHA-256\").digest(cert.getEncoded());\n+                                            thumbprintPromise.complete(Base64.getEncoder().encodeToString(signature));\n+                                        } catch (CertificateEncodingException | NoSuchAlgorithmException e) {\n+                                            log.warn(\"{}: Failed to get certificate signature of {} from Secret {}.\", reconciliation, customCertSecret.getCertificate(), customCertSecret.getSecretName());\n+                                            thumbprintPromise.fail(new RuntimeException(\"Failed to get certificate signature of \" + customCertSecret.getCertificate() + \" from Secret \" + certSecret.getMetadata().getName(), e));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2489a964d86a41893305936199bafa296b624f1e"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5Njg1NjAw", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2360#pullrequestreview-339685600", "createdAt": "2020-01-08T07:34:05Z", "commit": {"oid": "4c1dbe0dce5f59e00cae21a0575706ca8ed1ef33"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwNzozNDowNVrOFbOj8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwNzozNDowNVrOFbOj8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA5NDQ1MQ==", "bodyText": "I guess at least this should be a InvalidResourceException as well.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2360#discussion_r364094451", "createdAt": "2020-01-08T07:34:05Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -1774,20 +1775,22 @@ public void checkCustomCaSecret(CertificateAuthority ca, Secret certSecret, Secr\n                                 Secret certSecret = result.result();\n \n                                 if (certSecret != null) {\n-                                    try {\n-                                        X509Certificate cert = Ca.cert(certSecret, customCertSecret.getCertificate());\n-                                        byte[] signature = MessageDigest.getInstance(\"SHA-256\").digest(cert.getEncoded());\n-                                        thumbprintPromise.complete(Base64.getEncoder().encodeToString(signature));\n-                                    } catch (CertificateEncodingException | NoSuchAlgorithmException e) {\n-                                        log.warn(\"{}: Failed to get certificate signature of {} from Secret {}.\", reconciliation, customCertSecret.getCertificate(), customCertSecret.getSecretName());\n-                                        thumbprintPromise.fail(new RuntimeException(\"Failed to get certificate signature of \" + customCertSecret.getCertificate() + \" from Secret \" + certSecret.getMetadata().getName(), e));\n-                                    }\n+                                    if (!certSecret.getData().containsKey(customCertSecret.getCertificate())) {\n+                                        thumbprintPromise.fail(new InvalidResourceException(\"Secret \" + customCertSecret.getSecretName() + \" does not contain certificate under the key \" + customCertSecret.getCertificate() + \".\"));\n+                                    } else if (!certSecret.getData().containsKey(customCertSecret.getKey())) {\n+                                        thumbprintPromise.fail(new InvalidResourceException(\"Secret \" + customCertSecret.getSecretName() + \" does not contain custom certificate private key under the key \" + customCertSecret.getKey() + \".\"));\n+                                    } else\n+                                        try {\n+                                            X509Certificate cert = Ca.cert(certSecret, customCertSecret.getCertificate());\n+                                            byte[] signature = MessageDigest.getInstance(\"SHA-256\").digest(cert.getEncoded());\n+                                            thumbprintPromise.complete(Base64.getEncoder().encodeToString(signature));\n+                                        } catch (CertificateEncodingException | NoSuchAlgorithmException e) {\n+                                            thumbprintPromise.fail(new RuntimeException(\"Failed to get certificate signature of \" + customCertSecret.getCertificate() + \" from Secret \" + certSecret.getMetadata().getName(), e));\n+                                        }\n                                 } else {\n-                                    log.warn(\"{}: Secret {} with custom TLS certificate does not exist.\", reconciliation, customCertSecret.getSecretName());\n                                     thumbprintPromise.fail(\"Secret \" + customCertSecret.getSecretName() + \" with custom TLS certificate does not exist.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c1dbe0dce5f59e00cae21a0575706ca8ed1ef33"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5Njg5MTgw", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2360#pullrequestreview-339689180", "createdAt": "2020-01-08T07:44:41Z", "commit": {"oid": "53c0748f688f61765678b092274abbe887132342"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5NzEzOTE2", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2360#pullrequestreview-339713916", "createdAt": "2020-01-08T08:45:02Z", "commit": {"oid": "53c0748f688f61765678b092274abbe887132342"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5NzIzMjkx", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2360#pullrequestreview-339723291", "createdAt": "2020-01-08T09:03:03Z", "commit": {"oid": "53c0748f688f61765678b092274abbe887132342"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwOTowMzowM1rOFbQYLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwOTowMzowM1rOFbQYLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDEyNDIwNg==", "bodyText": "We have NoSuchResourceException which you can use here.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2360#discussion_r364124206", "createdAt": "2020-01-08T09:03:03Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -1774,20 +1775,22 @@ public void checkCustomCaSecret(CertificateAuthority ca, Secret certSecret, Secr\n                                 Secret certSecret = result.result();\n \n                                 if (certSecret != null) {\n-                                    try {\n-                                        X509Certificate cert = Ca.cert(certSecret, customCertSecret.getCertificate());\n-                                        byte[] signature = MessageDigest.getInstance(\"SHA-256\").digest(cert.getEncoded());\n-                                        thumbprintPromise.complete(Base64.getEncoder().encodeToString(signature));\n-                                    } catch (CertificateEncodingException | NoSuchAlgorithmException e) {\n-                                        log.warn(\"{}: Failed to get certificate signature of {} from Secret {}.\", reconciliation, customCertSecret.getCertificate(), customCertSecret.getSecretName());\n-                                        thumbprintPromise.fail(new RuntimeException(\"Failed to get certificate signature of \" + customCertSecret.getCertificate() + \" from Secret \" + certSecret.getMetadata().getName(), e));\n-                                    }\n+                                    if (!certSecret.getData().containsKey(customCertSecret.getCertificate())) {\n+                                        thumbprintPromise.fail(new InvalidResourceException(\"Secret \" + customCertSecret.getSecretName() + \" does not contain certificate under the key \" + customCertSecret.getCertificate() + \".\"));\n+                                    } else if (!certSecret.getData().containsKey(customCertSecret.getKey())) {\n+                                        thumbprintPromise.fail(new InvalidResourceException(\"Secret \" + customCertSecret.getSecretName() + \" does not contain custom certificate private key under the key \" + customCertSecret.getKey() + \".\"));\n+                                    } else\n+                                        try {\n+                                            X509Certificate cert = Ca.cert(certSecret, customCertSecret.getCertificate());\n+                                            byte[] signature = MessageDigest.getInstance(\"SHA-256\").digest(cert.getEncoded());\n+                                            thumbprintPromise.complete(Base64.getEncoder().encodeToString(signature));\n+                                        } catch (CertificateEncodingException | NoSuchAlgorithmException e) {\n+                                            thumbprintPromise.fail(new RuntimeException(\"Failed to get certificate signature of \" + customCertSecret.getCertificate() + \" from Secret \" + certSecret.getMetadata().getName(), e));\n+                                        }\n                                 } else {\n-                                    log.warn(\"{}: Secret {} with custom TLS certificate does not exist.\", reconciliation, customCertSecret.getSecretName());\n-                                    thumbprintPromise.fail(\"Secret \" + customCertSecret.getSecretName() + \" with custom TLS certificate does not exist.\");\n+                                    thumbprintPromise.fail(new InvalidResourceException(\"Secret \" + customCertSecret.getSecretName() + \" with custom TLS certificate does not exist.\"));\n                                 }\n                             } else {\n-                                log.warn(\"{}: Failed to get secret {} with custom TLS certificate.\", reconciliation, customCertSecret.getSecretName());\n                                 thumbprintPromise.fail(\"Failed to get secret \" + customCertSecret.getSecretName() + \" with custom TLS certificate.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53c0748f688f61765678b092274abbe887132342"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5NzQ0NzA4", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2360#pullrequestreview-339744708", "createdAt": "2020-01-08T09:41:06Z", "commit": {"oid": "2ed96c7aa067279d3e81928c24f0c947c30ea4d8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2e9755777de5406b25e4c3053a44eb6625a18ea", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d2e9755777de5406b25e4c3053a44eb6625a18ea", "committedDate": "2020-01-08T11:24:38Z", "message": "Fix NPE when secret does not contain given crt\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00a41b92ae6dbec413e19a840efcde360fb65737", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/00a41b92ae6dbec413e19a840efcde360fb65737", "committedDate": "2020-01-08T11:24:38Z", "message": "better fix NPE when secret does not contain given crt or key\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0c983981421200d1f4e6a05c036b4527e1f4040", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c0c983981421200d1f4e6a05c036b4527e1f4040", "committedDate": "2020-01-08T11:24:38Z", "message": "Jakub's suggestion\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56a12f2973c25fb6178a308475d11c89f0e5dc48", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/56a12f2973c25fb6178a308475d11c89f0e5dc48", "committedDate": "2020-01-08T11:24:38Z", "message": "logging\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8e89f1a1c7584d7ef20360c50f5359de493d0d9", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d8e89f1a1c7584d7ef20360c50f5359de493d0d9", "committedDate": "2020-01-08T11:24:38Z", "message": "Tom's comments\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cacbcea5421370a694167ca31437babee496c5a7", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/cacbcea5421370a694167ca31437babee496c5a7", "committedDate": "2020-01-08T11:24:38Z", "message": "remove logging\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c4414466075da84b2043cc6ca14f2d58b32a9dc", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/9c4414466075da84b2043cc6ca14f2d58b32a9dc", "committedDate": "2020-01-08T11:24:38Z", "message": "comment\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2356499ff5175060fe110713809f83114c55d1d", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/e2356499ff5175060fe110713809f83114c55d1d", "committedDate": "2020-01-08T11:27:24Z", "message": "comment\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2ed96c7aa067279d3e81928c24f0c947c30ea4d8", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/2ed96c7aa067279d3e81928c24f0c947c30ea4d8", "committedDate": "2020-01-08T09:32:49Z", "message": "comment\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "e2356499ff5175060fe110713809f83114c55d1d", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/e2356499ff5175060fe110713809f83114c55d1d", "committedDate": "2020-01-08T11:27:24Z", "message": "comment\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1768, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}