{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0MDA1MzI4", "number": 2962, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDo1NzoxM1rOD524HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMjo0MDoyMlrOEbi_pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTk0NTI0OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDo1NzoxM1rOGRXMNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNTowMzowNlrOGRXfMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg1ODkzNQ==", "bodyText": "worth getting 4.10.1 ?\nlooks like there was a regression in the 4.10.0 release fabric8io/kubernetes-client#2189 that was addressed in a new release today https://github.com/fabric8io/kubernetes-client/releases/tag/v4.10.1", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r420858935", "createdAt": "2020-05-06T14:57:13Z", "author": {"login": "dalelane"}, "path": "pom.xml", "diffHunk": "@@ -72,9 +72,9 @@\n         <maven-jar-plugin.version>3.1.0</maven-jar-plugin.version>\n         <sundrio.version>0.19.0</sundrio.version>\n \n-        <fabric8.kubernetes-client.version>4.6.4</fabric8.kubernetes-client.version>\n-        <fabric8.openshift-client.version>4.6.4</fabric8.openshift-client.version>\n-        <fabric8.kubernetes-model.version>4.6.4</fabric8.kubernetes-model.version>\n+        <fabric8.kubernetes-client.version>4.10.0</fabric8.kubernetes-client.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc8b99e8a59c0485fa0367076e8f154e07d9dbe1"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg2Mzc5NQ==", "bodyText": "Yeah, in my local branch I have bumped to 4.10.1 but there is some build issue (you can take a look at travis build logs).", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r420863795", "createdAt": "2020-05-06T15:03:06Z", "author": {"login": "sknot-rh"}, "path": "pom.xml", "diffHunk": "@@ -72,9 +72,9 @@\n         <maven-jar-plugin.version>3.1.0</maven-jar-plugin.version>\n         <sundrio.version>0.19.0</sundrio.version>\n \n-        <fabric8.kubernetes-client.version>4.6.4</fabric8.kubernetes-client.version>\n-        <fabric8.openshift-client.version>4.6.4</fabric8.openshift-client.version>\n-        <fabric8.kubernetes-model.version>4.6.4</fabric8.kubernetes-model.version>\n+        <fabric8.kubernetes-client.version>4.10.0</fabric8.kubernetes-client.version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg1ODkzNQ=="}, "originalCommit": {"oid": "bc8b99e8a59c0485fa0367076e8f154e07d9dbe1"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODcxNzQ0OnYy", "diffSide": "RIGHT", "path": ".azure/templates/setup_java.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODozMTo1M1rOGVpNAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODozMTo1M1rOGVpNAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0ODM1NQ==", "bodyText": "Can you explain what this does and why is it needed?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r425348355", "createdAt": "2020-05-14T18:31:53Z", "author": {"login": "scholzj"}, "path": ".azure/templates/setup_java.yaml", "diffHunk": "@@ -21,6 +21,16 @@ steps:\n   displayName: 'Install openjdk11'\n   condition: eq(variables['JDK_VERSION'], '11')\n \n+- bash: |\n+    echo \"##vso[task.setvariable variable=JAVA_VERSION]11\"\n+  displayName: 'Setup JAVA_VERSION=11'\n+  condition: eq(variables['JDK_VERSION'], '11')\n+\n+- bash: |\n+    echo \"##vso[task.setvariable variable=JAVA_VERSION]1.8\"\n+  displayName: 'Setup JAVA_VERSION=1.8'\n+  condition: eq(variables['JDK_VERSION'], '1.8')\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e013f55a32c17044087c6bbaeb8c5e10daca92ba"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODcxODk0OnYy", "diffSide": "RIGHT", "path": ".travis.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODozMjoyMVrOGVpOBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODozMjoyMVrOGVpOBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0ODYxMw==", "bodyText": "Same as above - Can you explain what this does and why is it needed?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r425348613", "createdAt": "2020-05-14T18:32:21Z", "author": {"login": "scholzj"}, "path": ".travis.yml", "diffHunk": "@@ -10,6 +10,7 @@ jdk:\n services:\n - docker\n before_install:\n+- if [ $(java -version 2>&1 | sed -E -n 's/.* version \"([0-9]*).*$/\\1/p') -gt 1 ] ; then export JAVA_VERSION=$(java -version 2>&1 | sed -E -n 's/.* version \"([0-9]*).*$/\\1/p'); else export JAVA_VERSION=$(java -version 2>&1 | sed -E -n 's/.* version \"([0-9]*)\\.([0-9]).*$/\\1.\\2/p'); fi;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e013f55a32c17044087c6bbaeb8c5e10daca92ba"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODcyMDAwOnYy", "diffSide": "RIGHT", "path": "Jenkinsfile-pr", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODozMjo0MlrOGVpOtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODozMjo0MlrOGVpOtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0ODc5MA==", "bodyText": "Why is Jenkins expected to do Java 11?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r425348790", "createdAt": "2020-05-14T18:32:42Z", "author": {"login": "scholzj"}, "path": "Jenkinsfile-pr", "diffHunk": "@@ -37,6 +37,7 @@ pipeline {\n         TEST_CLUSTER_ADMIN = \"admin\"\n         OPERATOR_IMAGE_PULL_POLICY = \"IfNotPresent\"\n         COMPONENTS_IMAGE_PULL_POLICY = \"IfNotPresent\"\n+        JAVA_VERSION = \"11\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e013f55a32c17044087c6bbaeb8c5e10daca92ba"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODcyMjU3OnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODozMzoyN1rOGVpQbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDowODozMlrOGbL8hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0OTIzMQ==", "bodyText": "Why is this needed and wasn't needed before?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r425349231", "createdAt": "2020-05-14T18:33:27Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -2789,6 +2790,7 @@ StatefulSet getKafkaStatefulSet()   {\n         }\n \n         @SuppressWarnings(\"deprecation\")\n+        @SuppressFBWarnings(value = \"UPM_UNCALLED_PRIVATE_METHOD\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e013f55a32c17044087c6bbaeb8c5e10daca92ba"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE2MDQ1Mw==", "bodyText": "How was this resolved?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r431160453", "createdAt": "2020-05-27T14:08:32Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -2789,6 +2790,7 @@ StatefulSet getKafkaStatefulSet()   {\n         }\n \n         @SuppressWarnings(\"deprecation\")\n+        @SuppressFBWarnings(value = \"UPM_UNCALLED_PRIVATE_METHOD\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0OTIzMQ=="}, "originalCommit": {"oid": "e013f55a32c17044087c6bbaeb8c5e10daca92ba"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODcyNzcwOnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/StatefulSetOperator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODozNTowMVrOGVpTvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODozNTowMVrOGVpTvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1MDA3OQ==", "bodyText": "Are you sure this is right? DeletionPropagation.BACKGROUND does not sound like it is the same as cascading(false). I think that DeletionPropagation.ORPHAN sounds more like it.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r425350079", "createdAt": "2020-05-14T18:35:01Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/StatefulSetOperator.java", "diffHunk": "@@ -323,7 +324,7 @@ public static int getPodGeneration(Pod resource) {\n             long pollingIntervalMs = 1_000;\n             long timeoutMs = operationTimeoutMs;\n \n-            operation().inNamespace(namespace).withName(name).cascading(cascading).withGracePeriod(-1L).delete();\n+            operation().inNamespace(namespace).withName(name).withPropagationPolicy(cascading ? DeletionPropagation.FOREGROUND : DeletionPropagation.BACKGROUND).delete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e013f55a32c17044087c6bbaeb8c5e10daca92ba"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODcyOTk0OnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/StatefulSetOperator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODozNTozN1rOGVpVJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODozNTozN1rOGVpVJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1MDQzNg==", "bodyText": "Have you double checked that the gracePeriod is still maintained from the pod when the withGracePeriod is removed?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r425350436", "createdAt": "2020-05-14T18:35:37Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/StatefulSetOperator.java", "diffHunk": "@@ -323,7 +324,7 @@ public static int getPodGeneration(Pod resource) {\n             long pollingIntervalMs = 1_000;\n             long timeoutMs = operationTimeoutMs;\n \n-            operation().inNamespace(namespace).withName(name).cascading(cascading).withGracePeriod(-1L).delete();\n+            operation().inNamespace(namespace).withName(name).withPropagationPolicy(cascading ? DeletionPropagation.FOREGROUND : DeletionPropagation.BACKGROUND).delete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e013f55a32c17044087c6bbaeb8c5e10daca92ba"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODczMzA0OnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/model/KafkaClusterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODozNjozMlrOGVpXFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODozNjozMlrOGVpXFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1MDkzMg==", "bodyText": "This doesn't sound right to me. Why is this needed nd why is this ok to change it?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r425350932", "createdAt": "2020-05-14T18:36:32Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/model/KafkaClusterTest.java", "diffHunk": "@@ -349,7 +349,7 @@ public void testGenerateStatefulSetWithEmptyStorageSelector() {\n \n     @Test\n     public void testGenerateStatefulSetWithSetSizeLimit() {\n-        String sizeLimit = \"1Gi\";\n+        String sizeLimit = \"1\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e013f55a32c17044087c6bbaeb8c5e10daca92ba"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODczNTA4OnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/model/KafkaConnectS2IClusterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODozNzoxOFrOGVpYgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODozNzoxOFrOGVpYgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1MTI5Ng==", "bodyText": "Again, this does not seem to be right. How does this impact the behaviour of the public APIs where you use 4Gi today?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r425351296", "createdAt": "2020-05-14T18:37:18Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/model/KafkaConnectS2IClusterTest.java", "diffHunk": "@@ -284,7 +284,7 @@ public void testGenerateBuildConfig() {\n         assertThat(bc.getSpec().getSuccessfulBuildsHistoryLimit(), is(new Integer(5)));\n         assertThat(bc.getSpec().getFailedBuildsHistoryLimit(), is(new Integer(5)));\n         assertThat(bc.getSpec().getResources().getLimits().get(\"cpu\").getAmount(), is(\"42\"));\n-        assertThat(bc.getSpec().getResources().getRequests().get(\"mem\").getAmount(), is(\"4Gi\"));\n+        assertThat(bc.getSpec().getResources().getRequests().get(\"mem\").getAmount(), is(\"4\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e013f55a32c17044087c6bbaeb8c5e10daca92ba"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODc0MTAyOnYy", "diffSide": "RIGHT", "path": "kafka-agent/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODozODo1OFrOGVpcIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODozODo1OFrOGVpcIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1MjIyNQ==", "bodyText": "AFAIK this should be optional or provided to not mix into the runtime binaries.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r425352225", "createdAt": "2020-05-14T18:38:58Z", "author": {"login": "scholzj"}, "path": "kafka-agent/pom.xml", "diffHunk": "@@ -29,6 +29,11 @@\n             <version>1.7.25</version>\n             <scope>provided</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>com.github.spotbugs</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e013f55a32c17044087c6bbaeb8c5e10daca92ba"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODc1MDMwOnYy", "diffSide": "RIGHT", "path": "operator-common/src/main/java/io/strimzi/operator/PlatformFeaturesAvailability.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODo0MToyOVrOGVpiDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNzo1MTo1NVrOGV6QDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1Mzc0Mg==", "bodyText": "What is the value of having this in Util and not right in this class? It does not seem to be used from other places.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r425353742", "createdAt": "2020-05-14T18:41:29Z", "author": {"login": "scholzj"}, "path": "operator-common/src/main/java/io/strimzi/operator/PlatformFeaturesAvailability.java", "diffHunk": "@@ -103,7 +103,7 @@ private static OkHttpClient getOkHttpClient(KubernetesClient client)   {\n \n         if (kubernetesVersion != null) {\n             try {\n-                futureVersion = Future.succeededFuture(new VersionInfo(Util.parseMap(kubernetesVersion)));\n+                futureVersion = Future.succeededFuture(Util.parseVersionInfo(kubernetesVersion));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e013f55a32c17044087c6bbaeb8c5e10daca92ba"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYxMzE0NQ==", "bodyText": "It was there before o.O", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r425613145", "createdAt": "2020-05-15T07:21:14Z", "author": {"login": "sknot-rh"}, "path": "operator-common/src/main/java/io/strimzi/operator/PlatformFeaturesAvailability.java", "diffHunk": "@@ -103,7 +103,7 @@ private static OkHttpClient getOkHttpClient(KubernetesClient client)   {\n \n         if (kubernetesVersion != null) {\n             try {\n-                futureVersion = Future.succeededFuture(new VersionInfo(Util.parseMap(kubernetesVersion)));\n+                futureVersion = Future.succeededFuture(Util.parseVersionInfo(kubernetesVersion));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1Mzc0Mg=="}, "originalCommit": {"oid": "e013f55a32c17044087c6bbaeb8c5e10daca92ba"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYyNzY2Mw==", "bodyText": "Before you used a method from Util. But it was generic method used on many places. Now you added your own method (which is fine) used only in here and in the related test. So it does not mke sense anymore I guess?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r425627663", "createdAt": "2020-05-15T07:51:55Z", "author": {"login": "scholzj"}, "path": "operator-common/src/main/java/io/strimzi/operator/PlatformFeaturesAvailability.java", "diffHunk": "@@ -103,7 +103,7 @@ private static OkHttpClient getOkHttpClient(KubernetesClient client)   {\n \n         if (kubernetesVersion != null) {\n             try {\n-                futureVersion = Future.succeededFuture(new VersionInfo(Util.parseMap(kubernetesVersion)));\n+                futureVersion = Future.succeededFuture(Util.parseVersionInfo(kubernetesVersion));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1Mzc0Mg=="}, "originalCommit": {"oid": "e013f55a32c17044087c6bbaeb8c5e10daca92ba"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODc1MjI4OnYy", "diffSide": "RIGHT", "path": "operator-common/src/main/java/io/strimzi/operator/common/operator/resource/AbstractNonNamespacedResourceOperator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODo0MjowNFrOGVpjVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODo0MjowNFrOGVpjVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1NDA2OQ==", "bodyText": "Did you checked why we added the cascading here?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r425354069", "createdAt": "2020-05-14T18:42:04Z", "author": {"login": "scholzj"}, "path": "operator-common/src/main/java/io/strimzi/operator/common/operator/resource/AbstractNonNamespacedResourceOperator.java", "diffHunk": "@@ -173,7 +173,7 @@ public AbstractNonNamespacedResourceOperator(Vertx vertx, C client, String resou\n \n     protected Future<ReconcileResult<T>> internalPatch(String name, T current, T desired, boolean cascading) {\n         try {\n-            T result = operation().withName(name).cascading(cascading).patch(desired);\n+            T result = operation().withName(name).patch(desired);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e013f55a32c17044087c6bbaeb8c5e10daca92ba"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODc1ODI1OnYy", "diffSide": "RIGHT", "path": "operator-common/src/test/java/io/strimzi/operator/common/operator/resource/AbstractResourceOperatorIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODo0Mzo0M1rOGVpnLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMjozNDozMFrOGWC8-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1NTA1NQ==", "bodyText": "Why do we have to wait here now and did not had to wait before? That sounds like it will break whatever place is using it and is expecting the old behavior.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r425355055", "createdAt": "2020-05-14T18:43:43Z", "author": {"login": "scholzj"}, "path": "operator-common/src/test/java/io/strimzi/operator/common/operator/resource/AbstractResourceOperatorIT.java", "diffHunk": "@@ -105,6 +106,7 @@ public void testCreateModifyDelete(VertxTestContext context)    {\n             }))\n             .compose(rr -> op.reconcile(namespace, RESOURCE_NAME, null))\n             .setHandler(context.succeeding(rrDeleted -> {\n+                TestUtils.waitFor(\"resouce deleted\", 1_000, 30_000, () -> op.get(namespace, RESOURCE_NAME) == null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e013f55a32c17044087c6bbaeb8c5e10daca92ba"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc3MDIzMw==", "bodyText": "It is flaky now but I am afraid it is the same as https://github.com/strimzi/strimzi-kafka-operator/pull/1424/files#diff-210c63328d6cf1d8f3f414fdd5244bf8R129", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r425770233", "createdAt": "2020-05-15T12:34:30Z", "author": {"login": "sknot-rh"}, "path": "operator-common/src/test/java/io/strimzi/operator/common/operator/resource/AbstractResourceOperatorIT.java", "diffHunk": "@@ -105,6 +106,7 @@ public void testCreateModifyDelete(VertxTestContext context)    {\n             }))\n             .compose(rr -> op.reconcile(namespace, RESOURCE_NAME, null))\n             .setHandler(context.succeeding(rrDeleted -> {\n+                TestUtils.waitFor(\"resouce deleted\", 1_000, 30_000, () -> op.get(namespace, RESOURCE_NAME) == null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1NTA1NQ=="}, "originalCommit": {"oid": "e013f55a32c17044087c6bbaeb8c5e10daca92ba"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTUwOTQxOnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/ConnectorMockTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDowNjo1OFrOGbL4Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNToyMTowOFrOGbmALg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE1OTMzNQ==", "bodyText": "Can we rename x to something a little more descriptive?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r431159335", "createdAt": "2020-05-27T14:06:58Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/ConnectorMockTest.java", "diffHunk": "@@ -277,18 +277,17 @@ public void setup(VertxTestContext testContext) throws InterruptedException {\n         kafkaConnectOperator.createWatch(NAMESPACE, e -> testContext.failNow(e))\n             .onComplete(testContext.succeeding())\n             .compose(watch -> {\n-                kafkaConnectS2iOperator = new KafkaConnectS2IAssemblyOperator(vertx, pfa, ros, config, x -> api);\n+                kafkaConnectS2iOperator = new KafkaConnectS2IAssemblyOperator(vertx,\n+                    pfa,\n+                    ros,\n+                    config,\n+                    x -> api);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b064ab1c38dcad6a9976c8007a0b8aa6f902284"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4NzM3NA==", "bodyText": "Not actually my code but sure.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r431587374", "createdAt": "2020-05-28T05:21:08Z", "author": {"login": "sknot-rh"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/ConnectorMockTest.java", "diffHunk": "@@ -277,18 +277,17 @@ public void setup(VertxTestContext testContext) throws InterruptedException {\n         kafkaConnectOperator.createWatch(NAMESPACE, e -> testContext.failNow(e))\n             .onComplete(testContext.succeeding())\n             .compose(watch -> {\n-                kafkaConnectS2iOperator = new KafkaConnectS2IAssemblyOperator(vertx, pfa, ros, config, x -> api);\n+                kafkaConnectS2iOperator = new KafkaConnectS2IAssemblyOperator(vertx,\n+                    pfa,\n+                    ros,\n+                    config,\n+                    x -> api);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE1OTMzNQ=="}, "originalCommit": {"oid": "8b064ab1c38dcad6a9976c8007a0b8aa6f902284"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTUzMTAyOnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/ResourceUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDoxMTo1NVrOGbMGYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNToyNzo1MFrOGbmHSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE2Mjk3Nw==", "bodyText": "Why is this now necessary?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r431162977", "createdAt": "2020-05-27T14:11:55Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/ResourceUtils.java", "diffHunk": "@@ -456,6 +456,7 @@ public static KafkaConnectS2I createEmptyKafkaConnectS2ICluster(String clusterCm\n                 .withNamespace(clusterCmNamespace)\n                 .withLabels(TestUtils.map(Labels.KUBERNETES_DOMAIN + \"part-of\", \"tests\",\n                         \"my-user-label\", \"cromulent\"))\n+                .withAnnotations(emptyMap())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b064ab1c38dcad6a9976c8007a0b8aa6f902284"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4OTE5Mg==", "bodyText": "It seems to be null by default. Some tests were relying on non null value. See \n  \n    \n      strimzi-kafka-operator/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectS2IAssemblyOperatorTest.java\n    \n    \n         Line 1023\n      in\n      f983bb0\n    \n    \n    \n    \n\n        \n          \n           clusterCm.getMetadata().getAnnotations().put(\"strimzi.io/use-connector-resources\", \"true\");", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r431589192", "createdAt": "2020-05-28T05:27:50Z", "author": {"login": "sknot-rh"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/ResourceUtils.java", "diffHunk": "@@ -456,6 +456,7 @@ public static KafkaConnectS2I createEmptyKafkaConnectS2ICluster(String clusterCm\n                 .withNamespace(clusterCmNamespace)\n                 .withLabels(TestUtils.map(Labels.KUBERNETES_DOMAIN + \"part-of\", \"tests\",\n                         \"my-user-label\", \"cromulent\"))\n+                .withAnnotations(emptyMap())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE2Mjk3Nw=="}, "originalCommit": {"oid": "8b064ab1c38dcad6a9976c8007a0b8aa6f902284"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTU0ODE2OnYy", "diffSide": "RIGHT", "path": "mockkube/src/main/java/io/strimzi/test/mockkube/StatefulSetMockBuilder.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDoxNTozMFrOGbMRaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNzowNTo1MVrOGcRHcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE2NTgwMw==", "bodyText": "So I'm guessing this is necessary because there's some new overloaded create() method which makes the old any() ambiguous. Can you tell me what the new create() method is?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r431165803", "createdAt": "2020-05-27T14:15:30Z", "author": {"login": "tombentley"}, "path": "mockkube/src/main/java/io/strimzi/test/mockkube/StatefulSetMockBuilder.java", "diffHunk": "@@ -126,7 +128,7 @@ private void mockScale(String resourceName, RollableScalableResource<StatefulSet\n \n     @Override\n     protected void mockCreate(String resourceName, RollableScalableResource<StatefulSet, DoneableStatefulSet> resource) {\n-        when(resource.create(any())).thenAnswer(cinvocation -> {\n+        when(resource.create(any(StatefulSet.class))).thenAnswer(cinvocation -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b064ab1c38dcad6a9976c8007a0b8aa6f902284"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4Njk4Mg==", "bodyText": "I believe it is caused by adding this: https://github.com/fabric8io/kubernetes-client/blob/master/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/dsl/Createable.java#L22", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r431586982", "createdAt": "2020-05-28T05:19:32Z", "author": {"login": "sknot-rh"}, "path": "mockkube/src/main/java/io/strimzi/test/mockkube/StatefulSetMockBuilder.java", "diffHunk": "@@ -126,7 +128,7 @@ private void mockScale(String resourceName, RollableScalableResource<StatefulSet\n \n     @Override\n     protected void mockCreate(String resourceName, RollableScalableResource<StatefulSet, DoneableStatefulSet> resource) {\n-        when(resource.create(any())).thenAnswer(cinvocation -> {\n+        when(resource.create(any(StatefulSet.class))).thenAnswer(cinvocation -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE2NTgwMw=="}, "originalCommit": {"oid": "8b064ab1c38dcad6a9976c8007a0b8aa6f902284"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI5Mzc0NQ==", "bodyText": "Ah, excellent, that's a method I requested myself actually. In the AbstractResourceOperator (and similar) we used to get \"generic array creation\" warnings because there was only a varargs method in Creatable. This means that we won't get those warnings now, so the @SuppressWarnings won't be needed any more. Can you hunt down those annotations and remove them? Perhaps in a followup PR?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r432293745", "createdAt": "2020-05-29T07:05:51Z", "author": {"login": "tombentley"}, "path": "mockkube/src/main/java/io/strimzi/test/mockkube/StatefulSetMockBuilder.java", "diffHunk": "@@ -126,7 +128,7 @@ private void mockScale(String resourceName, RollableScalableResource<StatefulSet\n \n     @Override\n     protected void mockCreate(String resourceName, RollableScalableResource<StatefulSet, DoneableStatefulSet> resource) {\n-        when(resource.create(any())).thenAnswer(cinvocation -> {\n+        when(resource.create(any(StatefulSet.class))).thenAnswer(cinvocation -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE2NTgwMw=="}, "originalCommit": {"oid": "8b064ab1c38dcad6a9976c8007a0b8aa6f902284"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTU2OTQ1OnYy", "diffSide": "RIGHT", "path": "topic-operator/src/test/java/io/strimzi/operator/topic/TopicOperatorBaseIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDoyMDoxMlrOGbMfZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNToyMDozMlrOGbl_mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE2OTM4Mw==", "bodyText": "If it's deprecated should we still be using it?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r431169383", "createdAt": "2020-05-27T14:20:12Z", "author": {"login": "tombentley"}, "path": "topic-operator/src/test/java/io/strimzi/operator/topic/TopicOperatorBaseIT.java", "diffHunk": "@@ -566,17 +567,17 @@ protected void waitForEvent(KafkaTopic kafkaTopic, String expectedMessage, Topic\n             List<Event> items = kubeClient.events().inNamespace(NAMESPACE).withLabels(labels.labels()).list().getItems();\n             List<Event> filtered = items.stream().\n                     filter(evt -> !preExistingEvents.contains(evt.getMetadata().getUid())\n-                            && \"KafkaTopic\".equals(evt.getInvolvedObject().getKind())\n-                            && kafkaTopic.getMetadata().getName().equals(evt.getInvolvedObject().getName())).\n+                            && \"KafkaTopic\".equals(evt.getRegarding().getKind())\n+                            && kafkaTopic.getMetadata().getName().equals(evt.getRegarding().getName())).\n                     collect(Collectors.toList());\n-            LOGGER.debug(\"Waiting for events: {}\", filtered.stream().map(evt -> evt.getMessage()).collect(Collectors.toList()));\n+            LOGGER.debug(\"Waiting for events: {}\", filtered.stream().map(evt -> evt.getReason()).collect(Collectors.toList()));\n             return filtered.stream().anyMatch(event ->\n-                    Pattern.matches(expectedMessage, event.getMessage()) &&\n+                    Pattern.matches(expectedMessage, event.getReason()) &&\n                         Objects.equals(expectedType.name, event.getType()) &&\n-                        event.getInvolvedObject() != null &&\n-                        event.getLastTimestamp() != null &&\n-                        Objects.equals(\"KafkaTopic\", event.getInvolvedObject().getKind()) &&\n-                        Objects.equals(kafkaTopic.getMetadata().getName(), event.getInvolvedObject().getName()));\n+                        event.getRegarding() != null &&\n+                        event.getDeprecatedLastTimestamp() != null &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b064ab1c38dcad6a9976c8007a0b8aa6f902284"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4NzIyNg==", "bodyText": "I am not sure how important it is in TO. If you think it is not needed anymore, I can remove it.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r431587226", "createdAt": "2020-05-28T05:20:32Z", "author": {"login": "sknot-rh"}, "path": "topic-operator/src/test/java/io/strimzi/operator/topic/TopicOperatorBaseIT.java", "diffHunk": "@@ -566,17 +567,17 @@ protected void waitForEvent(KafkaTopic kafkaTopic, String expectedMessage, Topic\n             List<Event> items = kubeClient.events().inNamespace(NAMESPACE).withLabels(labels.labels()).list().getItems();\n             List<Event> filtered = items.stream().\n                     filter(evt -> !preExistingEvents.contains(evt.getMetadata().getUid())\n-                            && \"KafkaTopic\".equals(evt.getInvolvedObject().getKind())\n-                            && kafkaTopic.getMetadata().getName().equals(evt.getInvolvedObject().getName())).\n+                            && \"KafkaTopic\".equals(evt.getRegarding().getKind())\n+                            && kafkaTopic.getMetadata().getName().equals(evt.getRegarding().getName())).\n                     collect(Collectors.toList());\n-            LOGGER.debug(\"Waiting for events: {}\", filtered.stream().map(evt -> evt.getMessage()).collect(Collectors.toList()));\n+            LOGGER.debug(\"Waiting for events: {}\", filtered.stream().map(evt -> evt.getReason()).collect(Collectors.toList()));\n             return filtered.stream().anyMatch(event ->\n-                    Pattern.matches(expectedMessage, event.getMessage()) &&\n+                    Pattern.matches(expectedMessage, event.getReason()) &&\n                         Objects.equals(expectedType.name, event.getType()) &&\n-                        event.getInvolvedObject() != null &&\n-                        event.getLastTimestamp() != null &&\n-                        Objects.equals(\"KafkaTopic\", event.getInvolvedObject().getKind()) &&\n-                        Objects.equals(kafkaTopic.getMetadata().getName(), event.getInvolvedObject().getName()));\n+                        event.getRegarding() != null &&\n+                        event.getDeprecatedLastTimestamp() != null &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE2OTM4Mw=="}, "originalCommit": {"oid": "8b064ab1c38dcad6a9976c8007a0b8aa6f902284"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzE5ODUyOnYy", "diffSide": "RIGHT", "path": "operator-common/src/test/java/io/strimzi/operator/common/operator/resource/AbstractNonNamespacedResourceOperatorIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMjozODo1NVrOHFiYlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMjo0ODowOVrOHFisiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU2ODI3Ng==", "bodyText": "Why is this needed? Can you explain?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r475568276", "createdAt": "2020-08-24T12:38:55Z", "author": {"login": "scholzj"}, "path": "operator-common/src/test/java/io/strimzi/operator/common/operator/resource/AbstractNonNamespacedResourceOperatorIT.java", "diffHunk": "@@ -44,6 +49,11 @@ public static void before() {\n         client = new DefaultKubernetesClient();\n     }\n \n+    @BeforeEach\n+    public void renameResource() {\n+        resourceName = getResourceName(RESOURCE_NAME);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824228f064aff83b11171da03c3b4bfaf43b0b2d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU3MzM4NA==", "bodyText": "I was running into some flakiness of the tests because all the resources had the same name.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r475573384", "createdAt": "2020-08-24T12:48:09Z", "author": {"login": "sknot-rh"}, "path": "operator-common/src/test/java/io/strimzi/operator/common/operator/resource/AbstractNonNamespacedResourceOperatorIT.java", "diffHunk": "@@ -44,6 +49,11 @@ public static void before() {\n         client = new DefaultKubernetesClient();\n     }\n \n+    @BeforeEach\n+    public void renameResource() {\n+        resourceName = getResourceName(RESOURCE_NAME);\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU2ODI3Ng=="}, "originalCommit": {"oid": "824228f064aff83b11171da03c3b4bfaf43b0b2d"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzIwMzU2OnYy", "diffSide": "RIGHT", "path": "operator-common/src/test/java/io/strimzi/operator/common/operator/resource/AbstractResourceOperatorIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMjo0MDoyMlrOHFibkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMjo0MDoyMlrOHFibkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU2OTA0Mg==", "bodyText": "Again, could you explain why this is needed?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r475569042", "createdAt": "2020-08-24T12:40:22Z", "author": {"login": "scholzj"}, "path": "operator-common/src/test/java/io/strimzi/operator/common/operator/resource/AbstractResourceOperatorIT.java", "diffHunk": "@@ -40,12 +44,18 @@\n public abstract class AbstractResourceOperatorIT<C extends KubernetesClient, T extends HasMetadata, L extends KubernetesResourceList/*<T>*/, D, R extends Resource<T, D>> {\n     protected static final Logger log = LogManager.getLogger(AbstractResourceOperatorIT.class);\n     public static final String RESOURCE_NAME = \"my-test-resource\";\n+    protected String resourceName;\n     protected static Vertx vertx;\n     protected static KubernetesClient client;\n     protected static String namespace = \"resource-operator-it-namespace\";\n \n     private static KubeClusterResource cluster;\n \n+    @BeforeEach\n+    public void renameResource() {\n+        this.resourceName = getResourceName(RESOURCE_NAME);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824228f064aff83b11171da03c3b4bfaf43b0b2d"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4981, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}