{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0MzQzODA5", "number": 2545, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyNjo0MlrODfRGIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzo0MDoyNFrODfRX4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTEyNTQ1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/strimzi/api/kafka/model/AbstractKafkaConnectSpec.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyNjo0MlrOFo3vvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzo0Mjo0N1rOFo4SaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQwMDcwMA==", "bodyText": "missing .... version, resources and externalConfiguration", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2545#discussion_r378400700", "createdAt": "2020-02-12T17:26:42Z", "author": {"login": "ppatierno"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/AbstractKafkaConnectSpec.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.api.kafka.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import io.fabric8.kubernetes.api.model.Affinity;\n+import io.fabric8.kubernetes.api.model.ResourceRequirements;\n+import io.fabric8.kubernetes.api.model.Toleration;\n+import io.strimzi.api.annotations.DeprecatedProperty;\n+import io.strimzi.api.kafka.model.connect.ExternalConfiguration;\n+import io.strimzi.api.kafka.model.template.KafkaConnectTemplate;\n+import io.strimzi.api.kafka.model.tracing.Tracing;\n+import io.strimzi.crdgenerator.annotations.Description;\n+import io.strimzi.crdgenerator.annotations.KubeLink;\n+import io.sundr.builder.annotations.Buildable;\n+import io.vertx.core.cli.annotations.DefaultValue;\n+import lombok.EqualsAndHashCode;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Buildable(\n+        editableEnabled = false,\n+        generateBuilderPackage = false,\n+        builderPackage = \"io.fabric8.kubernetes.api.builder\"\n+)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonPropertyOrder({ \"replicas\", \"image\",\n+        \"livenessProbe\", \"readinessProbe\", \"jvmOptions\",\n+        \"affinity\", \"tolerations\", \"logging\", \"metrics\", \"tracing\", \"template\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f29861d2620b2e439fb49a819036cdb476d0bdb"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQwNzAyOQ==", "bodyText": "I think we should add this check to the CrdGenerator, if only to deprive Paolo of these low-hanging fruit review comments.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2545#discussion_r378407029", "createdAt": "2020-02-12T17:38:12Z", "author": {"login": "tombentley"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/AbstractKafkaConnectSpec.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.api.kafka.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import io.fabric8.kubernetes.api.model.Affinity;\n+import io.fabric8.kubernetes.api.model.ResourceRequirements;\n+import io.fabric8.kubernetes.api.model.Toleration;\n+import io.strimzi.api.annotations.DeprecatedProperty;\n+import io.strimzi.api.kafka.model.connect.ExternalConfiguration;\n+import io.strimzi.api.kafka.model.template.KafkaConnectTemplate;\n+import io.strimzi.api.kafka.model.tracing.Tracing;\n+import io.strimzi.crdgenerator.annotations.Description;\n+import io.strimzi.crdgenerator.annotations.KubeLink;\n+import io.sundr.builder.annotations.Buildable;\n+import io.vertx.core.cli.annotations.DefaultValue;\n+import lombok.EqualsAndHashCode;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Buildable(\n+        editableEnabled = false,\n+        generateBuilderPackage = false,\n+        builderPackage = \"io.fabric8.kubernetes.api.builder\"\n+)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonPropertyOrder({ \"replicas\", \"image\",\n+        \"livenessProbe\", \"readinessProbe\", \"jvmOptions\",\n+        \"affinity\", \"tolerations\", \"logging\", \"metrics\", \"tracing\", \"template\"})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQwMDcwMA=="}, "originalCommit": {"oid": "5f29861d2620b2e439fb49a819036cdb476d0bdb"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQwOTU3Ng==", "bodyText": "Good idea @tombentley ! Thanks for thinking about me :-)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2545#discussion_r378409576", "createdAt": "2020-02-12T17:42:47Z", "author": {"login": "ppatierno"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/AbstractKafkaConnectSpec.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.api.kafka.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import io.fabric8.kubernetes.api.model.Affinity;\n+import io.fabric8.kubernetes.api.model.ResourceRequirements;\n+import io.fabric8.kubernetes.api.model.Toleration;\n+import io.strimzi.api.annotations.DeprecatedProperty;\n+import io.strimzi.api.kafka.model.connect.ExternalConfiguration;\n+import io.strimzi.api.kafka.model.template.KafkaConnectTemplate;\n+import io.strimzi.api.kafka.model.tracing.Tracing;\n+import io.strimzi.crdgenerator.annotations.Description;\n+import io.strimzi.crdgenerator.annotations.KubeLink;\n+import io.sundr.builder.annotations.Buildable;\n+import io.vertx.core.cli.annotations.DefaultValue;\n+import lombok.EqualsAndHashCode;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Buildable(\n+        editableEnabled = false,\n+        generateBuilderPackage = false,\n+        builderPackage = \"io.fabric8.kubernetes.api.builder\"\n+)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonPropertyOrder({ \"replicas\", \"image\",\n+        \"livenessProbe\", \"readinessProbe\", \"jvmOptions\",\n+        \"affinity\", \"tolerations\", \"logging\", \"metrics\", \"tracing\", \"template\"})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQwMDcwMA=="}, "originalCommit": {"oid": "5f29861d2620b2e439fb49a819036cdb476d0bdb"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTEyODMxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaConnectSpec.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyNzozOVrOFo3xqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyNzozOVrOFo3xqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQwMTE5Mw==", "bodyText": "please check missing values as comment above.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2545#discussion_r378401193", "createdAt": "2020-02-12T17:27:39Z", "author": {"login": "ppatierno"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaConnectSpec.java", "diffHunk": "@@ -32,11 +21,11 @@\n         builderPackage = \"io.fabric8.kubernetes.api.builder\"\n )\n @JsonInclude(JsonInclude.Include.NON_NULL)\n-@JsonPropertyOrder({ \"replicas\", \"config\", \"image\",\n+@JsonPropertyOrder({ \"replicas\", \"image\", \"bootstrapServers\", \"config\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f29861d2620b2e439fb49a819036cdb476d0bdb"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTEyOTcyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaMirrorMaker2Spec.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyODowMVrOFo3yeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyODowMVrOFo3yeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQwMTQwMg==", "bodyText": "ditto as above", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2545#discussion_r378401402", "createdAt": "2020-02-12T17:28:01Z", "author": {"login": "ppatierno"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaMirrorMaker2Spec.java", "diffHunk": "@@ -22,18 +20,17 @@\n         builderPackage = \"io.fabric8.kubernetes.api.builder\"\n )\n @JsonInclude(JsonInclude.Include.NON_NULL)\n-@JsonPropertyOrder({\"replicas\", \"connectCluster\", \"config\", \"image\",\n+@JsonPropertyOrder({\"replicas\", \"connectCluster\", \"image\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f29861d2620b2e439fb49a819036cdb476d0bdb"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTE3MDkxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/strimzi/api/kafka/model/AbstractKafkaConnectSpec.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzo0MDoyNFrOFo4NIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzo0MDoyNFrOFo4NIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQwODIyNQ==", "bodyText": "Can we reword, since it's requests and limits.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2545#discussion_r378408225", "createdAt": "2020-02-12T17:40:24Z", "author": {"login": "tombentley"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/AbstractKafkaConnectSpec.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.api.kafka.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import io.fabric8.kubernetes.api.model.Affinity;\n+import io.fabric8.kubernetes.api.model.ResourceRequirements;\n+import io.fabric8.kubernetes.api.model.Toleration;\n+import io.strimzi.api.annotations.DeprecatedProperty;\n+import io.strimzi.api.kafka.model.connect.ExternalConfiguration;\n+import io.strimzi.api.kafka.model.template.KafkaConnectTemplate;\n+import io.strimzi.api.kafka.model.tracing.Tracing;\n+import io.strimzi.crdgenerator.annotations.Description;\n+import io.strimzi.crdgenerator.annotations.KubeLink;\n+import io.sundr.builder.annotations.Buildable;\n+import io.vertx.core.cli.annotations.DefaultValue;\n+import lombok.EqualsAndHashCode;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Buildable(\n+        editableEnabled = false,\n+        generateBuilderPackage = false,\n+        builderPackage = \"io.fabric8.kubernetes.api.builder\"\n+)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonPropertyOrder({ \"replicas\", \"image\",\n+        \"livenessProbe\", \"readinessProbe\", \"jvmOptions\",\n+        \"affinity\", \"tolerations\", \"logging\", \"metrics\", \"tracing\", \"template\"})\n+@EqualsAndHashCode(doNotUseGetters = true)\n+public abstract class AbstractKafkaConnectSpec implements Serializable, UnknownPropertyPreserving {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private Logging logging;\n+    private Integer replicas;\n+\n+    private String version;\n+    private String image;\n+    private ResourceRequirements resources;\n+    private Probe livenessProbe;\n+    private Probe readinessProbe;\n+    private JvmOptions jvmOptions;\n+    private Map<String, Object> metrics;\n+    private Tracing tracing;\n+    private Affinity affinity;\n+    private List<Toleration> tolerations;\n+    private KafkaConnectTemplate template;\n+    private ExternalConfiguration externalConfiguration;\n+\n+    private Map<String, Object> additionalProperties = new HashMap<>(0);\n+\n+    @Description(\"The number of pods in the Kafka Connect group.\")\n+    @DefaultValue(\"3\")\n+    public Integer getReplicas() {\n+        return replicas;\n+    }\n+\n+    @Description(\"Logging configuration for Kafka Connect\")\n+    @JsonInclude(value = JsonInclude.Include.NON_NULL)\n+    public Logging getLogging() {\n+        return logging == null ? new InlineLogging() : logging;\n+    }\n+\n+    public void setLogging(Logging logging) {\n+        this.logging = logging;\n+    }\n+\n+    public void setReplicas(Integer replicas) {\n+        this.replicas = replicas;\n+    }\n+\n+    @Description(\"The Kafka Connect version. Defaults to {DefaultKafkaVersion}. \" +\n+            \"Consult the user documentation to understand the process required to upgrade or downgrade the version.\")\n+    public String getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(String version) {\n+        this.version = version;\n+    }\n+\n+    @Description(\"The docker image for the pods.\")\n+    @JsonInclude(JsonInclude.Include.NON_DEFAULT)\n+    public String getImage() {\n+        return image;\n+    }\n+\n+    public void setImage(String image) {\n+        this.image = image;\n+    }\n+\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    @Description(\"CPU and memory resources to reserve.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f29861d2620b2e439fb49a819036cdb476d0bdb"}, "originalPosition": 100}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 455, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}