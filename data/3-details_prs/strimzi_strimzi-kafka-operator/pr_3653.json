{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3NDAyNDEx", "number": 3653, "title": "Schema", "bodyText": "Type of change\n\nEnhancement / new feature\n\nDescription\nThis PR adds support for generating different schemas for different versions to the CrdGenerator and makes the CLI of that tool more flexible.\n\n@Crd.spec.version is removed. It's redundant since it's always the first item in the list of @Crd.versions (apiserver enforces this).\n@Crd.apiVersion (which is the version of the CRD API which the generated CRD will have, and nothing to do with the versions of the Kafka CRD which will be generated) is replaced with a CLI option.\nThe CLI gains options for specifying which CR API versions to include in the generated CRD. This is useful primarily for testing and manual experimentation, e.g. it allows to generate a CRD with just v1beta1 and v1beta2 but not v1alpha1.\nThe CLI gains an option for specifying the target Kubernetes version range. The intention here is to catch things like v1 CRD targetting Kube 1.11, or v1beta1 targetting some future version of Kube whith that CRD API version removed.\nClasses to represent Kubernetes and API versions and version ranges are added.\nThe existing @Pattern, @Maximum, @Minimum and @Description annotations are given apiVersions methods and made @Repeatable. This allows for different constraints in different versions.\nThe existing type @Alternative is given an apiVersions method to allow different type alternatives in different API verions.\nA new @PresentInVersions annotation is added for being able to add and remove properties in specific versions.\n\nTogether these changes enable us to start working on a v1beta2 version of Kafka, but still publishing only v1alpha1, v1beta.\nIt's worth pointing out a couple of tests which I wrote in the course of this:\n\nStructuralCrdIT checks that the gestating v1beta2 is structural.\nApiEvolutionCrdIT tests how we might evolve the schema over a number of Strimzi releases. 0.20 already adds listeners (which is not structural), a future 0.2x might add v1beta2, but keep v1beta1 as the stored version, and then a 0.2y (y>x) might make v1beta2 the stored version. Finally 0.2z (z>y) might remove v1beta1 and use CRD v1 API.", "createdAt": "2020-09-15T16:05:13Z", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653", "merged": true, "mergeCommit": {"oid": "703d8cb141de03f1a5aa20c983d6f290f7a02995"}, "closed": true, "closedAt": "2020-10-07T19:09:59Z", "author": {"login": "tombentley"}, "timelineItems": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJL30sgFqTQ4ODk0MTY2Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQR33nAFqTUwNDE4Njk3Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4OTQxNjYz", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#pullrequestreview-488941663", "createdAt": "2020-09-15T18:12:29Z", "commit": {"oid": "6f44863ce8054e309240493821527e26a0034ed7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxODoxMjoyOVrOHSOJTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxODoxMjoyOVrOHSOJTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg2ODE3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        v1beta2Create(name, mapListener(), null);\n          \n          \n            \n                        Exception e = assertThrows(() -> v1beta2Create(name, mapListener(), null))", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#discussion_r488868173", "createdAt": "2020-09-15T18:12:29Z", "author": {"login": "samuel-hawker"}, "path": "api/src/test/java/io/strimzi/api/kafka/model/ApiEvolutionCrdIT.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.api.kafka.model;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;\n+import io.fabric8.kubernetes.api.model.apiextensions.CustomResourceDefinition;\n+import io.fabric8.kubernetes.client.dsl.NonNamespaceOperation;\n+import io.fabric8.kubernetes.client.dsl.Resource;\n+import io.strimzi.api.kafka.Crds;\n+import io.strimzi.api.kafka.KafkaList;\n+import io.strimzi.api.kafka.model.listener.KafkaListeners;\n+import io.strimzi.api.kafka.model.listener.KafkaListenersBuilder;\n+import io.strimzi.api.kafka.model.listener.arraylistener.ArrayOrObjectKafkaListeners;\n+import io.strimzi.api.kafka.model.listener.arraylistener.GenericKafkaListener;\n+import io.strimzi.api.kafka.model.listener.arraylistener.GenericKafkaListenerBuilder;\n+import io.strimzi.api.kafka.model.listener.arraylistener.KafkaListenerType;\n+import io.strimzi.test.TestUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.Collections.singletonList;\n+\n+public class ApiEvolutionCrdIT extends AbstractCrdIT {\n+    private static final Logger LOGGER = LogManager.getLogger(ApiEvolutionCrdIT.class);\n+\n+    public static final String NAMESPACE = \"api-evolution-it\";\n+\n+    @Test\n+    public void kafkaApiEvolution() throws IOException {\n+        assumeKube1_16Plus();\n+        // Create CRD with v1beta1 having map-or-list listeners (and no v1beta2)\n+        LOGGER.info(\"Create CRD\");\n+        long crdGeneration = createOrReplaceCrd(\"src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka-v1alpha1-v1beta1-store-v1beta1.yaml\");\n+        waitForCrd(\"crd\", \"kafkas.kafka.strimzi.io\");\n+\n+        // Create one CR instance with a list listener and one with a map listeners\n+        LOGGER.info(\"Create instances\");\n+        v1beta1Create(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\", mapListener(), null);\n+        v1beta1Create(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\", null, listListener());\n+\n+        // Check we can consume these via v1beta1 endpoint\n+        LOGGER.info(\"Assert instances via v1beta1\");\n+        assertIsMapListener(v1beta1Get(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta1Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+\n+        // Replace CRD with one having v1beta2 which is served but not stored (v1beta1 is stored)\n+        LOGGER.info(\"Replace CRD\");\n+        long crdGeneration2 = createOrReplaceCrd(\"src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka-v1beta1-v1beta2-store-v1beta1.yaml\");\n+        waitForCrdUpdate(crdGeneration2);\n+\n+        // Check we can't create a v1beta2 with a map\n+        assertV1beta2CreateFailure(\"v1beta2.map.v1beta1.stored.via.v1beta2.endpoint\");\n+\n+        // Create a v1beta2 with list\n+        LOGGER.info(\"Create 3rd instance via v1beta2 endpoint\");\n+        v1beta2Create(\"v1beta2.list.v1beta1.stored.via.v1beta1.endpoint\", null, listListener());\n+\n+        // Check we can still consume all CRs via both endpoints\n+        LOGGER.info(\"Assert instances via both endpoints\");\n+        assertIsMapListener(v1beta1Get(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta1Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta1Get(\"v1beta2.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsMapListener(v1beta2Get(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta2Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta2Get(\"v1beta2.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+\n+        // Upgrade CRD so v1beta2 is stored\n+        LOGGER.info(\"Update CRD so v1beta2 is stored\");\n+        long crdGeneration3 = createOrReplaceCrd(\"src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka-v1beta1-v1beta2-store-v1beta2.yaml\");\n+        waitForCrdUpdate(crdGeneration3);\n+\n+        // Check we can still consume all CRs via both endpoints\n+        LOGGER.info(\"Assert instances via both endpoints\");\n+        assertIsMapListener(v1beta1Get(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta1Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta1Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsMapListener(v1beta2Get(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta2Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta2Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+\n+        // Check we can still create/update v1beta1 endpoint with a map listeners\n+        v1beta1Create(\"v1beta1.map.v1beta2.stored.via.v1beta1.endpoint\", mapListener(), null);\n+        // But we can't via the v1beta2 endpoint\n+        assertV1beta2CreateFailure(\"v1beta2.map.v1beta2.stored.via.v1beta2.endpoint\");\n+        // But lists are still OK\n+        v1beta1Create(\"v1beta1.list.v1beta2.stored.via.v1beta1.endpoint\", null, listListener());\n+        v1beta2Create(\"v1beta2.list.v1beta2.stored.via.v1beta2.endpoint\", null, listListener());\n+    }\n+\n+    private void assertV1beta2CreateFailure(String name) {\n+        try {\n+            LOGGER.info(\"Check can't create map-listener via v1beta2\");\n+            v1beta2Create(name, mapListener(), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f44863ce8054e309240493821527e26a0034ed7"}, "originalPosition": 103}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4OTUxMTUy", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#pullrequestreview-488951152", "createdAt": "2020-09-15T18:26:02Z", "commit": {"oid": "6f44863ce8054e309240493821527e26a0034ed7"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxODoyNjowMlrOHSOl_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxODozMjoyNVrOHSOz0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg3NTUxNg==", "bodyText": "Wouldn't be better to name it createInternalPlainListener or am I missing something?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#discussion_r488875516", "createdAt": "2020-09-15T18:26:02Z", "author": {"login": "see-quick"}, "path": "api/src/test/java/io/strimzi/api/kafka/model/ApiEvolutionCrdIT.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.api.kafka.model;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;\n+import io.fabric8.kubernetes.api.model.apiextensions.CustomResourceDefinition;\n+import io.fabric8.kubernetes.client.dsl.NonNamespaceOperation;\n+import io.fabric8.kubernetes.client.dsl.Resource;\n+import io.strimzi.api.kafka.Crds;\n+import io.strimzi.api.kafka.KafkaList;\n+import io.strimzi.api.kafka.model.listener.KafkaListeners;\n+import io.strimzi.api.kafka.model.listener.KafkaListenersBuilder;\n+import io.strimzi.api.kafka.model.listener.arraylistener.ArrayOrObjectKafkaListeners;\n+import io.strimzi.api.kafka.model.listener.arraylistener.GenericKafkaListener;\n+import io.strimzi.api.kafka.model.listener.arraylistener.GenericKafkaListenerBuilder;\n+import io.strimzi.api.kafka.model.listener.arraylistener.KafkaListenerType;\n+import io.strimzi.test.TestUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.Collections.singletonList;\n+\n+public class ApiEvolutionCrdIT extends AbstractCrdIT {\n+    private static final Logger LOGGER = LogManager.getLogger(ApiEvolutionCrdIT.class);\n+\n+    public static final String NAMESPACE = \"api-evolution-it\";\n+\n+    @Test\n+    public void kafkaApiEvolution() throws IOException {\n+        assumeKube1_16Plus();\n+        // Create CRD with v1beta1 having map-or-list listeners (and no v1beta2)\n+        LOGGER.info(\"Create CRD\");\n+        long crdGeneration = createOrReplaceCrd(\"src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka-v1alpha1-v1beta1-store-v1beta1.yaml\");\n+        waitForCrd(\"crd\", \"kafkas.kafka.strimzi.io\");\n+\n+        // Create one CR instance with a list listener and one with a map listeners\n+        LOGGER.info(\"Create instances\");\n+        v1beta1Create(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\", mapListener(), null);\n+        v1beta1Create(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\", null, listListener());\n+\n+        // Check we can consume these via v1beta1 endpoint\n+        LOGGER.info(\"Assert instances via v1beta1\");\n+        assertIsMapListener(v1beta1Get(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta1Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+\n+        // Replace CRD with one having v1beta2 which is served but not stored (v1beta1 is stored)\n+        LOGGER.info(\"Replace CRD\");\n+        long crdGeneration2 = createOrReplaceCrd(\"src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka-v1beta1-v1beta2-store-v1beta1.yaml\");\n+        waitForCrdUpdate(crdGeneration2);\n+\n+        // Check we can't create a v1beta2 with a map\n+        assertV1beta2CreateFailure(\"v1beta2.map.v1beta1.stored.via.v1beta2.endpoint\");\n+\n+        // Create a v1beta2 with list\n+        LOGGER.info(\"Create 3rd instance via v1beta2 endpoint\");\n+        v1beta2Create(\"v1beta2.list.v1beta1.stored.via.v1beta1.endpoint\", null, listListener());\n+\n+        // Check we can still consume all CRs via both endpoints\n+        LOGGER.info(\"Assert instances via both endpoints\");\n+        assertIsMapListener(v1beta1Get(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta1Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta1Get(\"v1beta2.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsMapListener(v1beta2Get(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta2Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta2Get(\"v1beta2.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+\n+        // Upgrade CRD so v1beta2 is stored\n+        LOGGER.info(\"Update CRD so v1beta2 is stored\");\n+        long crdGeneration3 = createOrReplaceCrd(\"src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka-v1beta1-v1beta2-store-v1beta2.yaml\");\n+        waitForCrdUpdate(crdGeneration3);\n+\n+        // Check we can still consume all CRs via both endpoints\n+        LOGGER.info(\"Assert instances via both endpoints\");\n+        assertIsMapListener(v1beta1Get(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta1Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta1Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsMapListener(v1beta2Get(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta2Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta2Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+\n+        // Check we can still create/update v1beta1 endpoint with a map listeners\n+        v1beta1Create(\"v1beta1.map.v1beta2.stored.via.v1beta1.endpoint\", mapListener(), null);\n+        // But we can't via the v1beta2 endpoint\n+        assertV1beta2CreateFailure(\"v1beta2.map.v1beta2.stored.via.v1beta2.endpoint\");\n+        // But lists are still OK\n+        v1beta1Create(\"v1beta1.list.v1beta2.stored.via.v1beta1.endpoint\", null, listListener());\n+        v1beta2Create(\"v1beta2.list.v1beta2.stored.via.v1beta2.endpoint\", null, listListener());\n+    }\n+\n+    private void assertV1beta2CreateFailure(String name) {\n+        try {\n+            LOGGER.info(\"Check can't create map-listener via v1beta2\");\n+            v1beta2Create(name, mapListener(), null);\n+            Assertions.fail();\n+        } catch (RuntimeException e) {\n+            LOGGER.info(\"Exception, good\", e);\n+            Assertions.assertTrue(e.getMessage().contains(\n+                    \"Kafka.kafka.strimzi.io \\\"\" + name + \"\\\" is invalid: \" +\n+                    \"spec.kafka.listeners: Invalid value: \\\"object\\\": \" +\n+                    \"spec.kafka.listeners in body must be of type array:\"));\n+        }\n+    }\n+\n+    private void v1beta1Create(String name, KafkaListeners kafkaListeners, GenericKafkaListener o) {\n+        v1beta1Op().create(buildKafkaCr(Kafka.V1BETA1, name, kafkaListeners, o));\n+    }\n+\n+    private void v1beta2Create(String name, KafkaListeners kafkaListeners, GenericKafkaListener o) {\n+        v1beta2Op().create(buildKafkaCr(Kafka.V1BETA2, name, kafkaListeners, o));\n+    }\n+\n+    private Kafka v1beta1Get(String s) {\n+        return v1beta1Op().withName(s).get();\n+    }\n+\n+    private Kafka v1beta2Get(String s) {\n+        return v1beta2Op().withName(s).get();\n+    }\n+\n+    private void waitForCrdUpdate(long crdGeneration2) {\n+        TestUtils.waitFor(\"CRD update\", 1000, 30000, () ->\n+                crdGeneration2 == cluster.client().getClient().customResourceDefinitions()\n+                        .withName(\"kafkas.kafka.strimzi.io\").get()\n+                        .getMetadata().getGeneration());\n+    }\n+\n+    private Long createOrReplaceCrd(String s) throws IOException {\n+        File src = new File(s);\n+        if (!src.exists()) {\n+            throw new RuntimeException(src.getAbsolutePath() + \" does not exist\");\n+        }\n+        CustomResourceDefinition crd = new YAMLMapper().readValue(src, CustomResourceDefinition.class);\n+        LOGGER.info(\"Create or replacing {} with versions {}\", crd.getMetadata().getName(),\n+                crd.getSpec().getVersions().stream()\n+                        .map(v -> v.getName() + \"{stored=\" + v.getStorage() + \"}\")\n+                        .collect(Collectors.joining(\", \")));\n+        return cluster.client().getClient().customResourceDefinitions().createOrReplace(crd).getMetadata().getGeneration();\n+    }\n+\n+    private void deleteCrd(String s) throws IOException {\n+        File src = new File(s);\n+        if (!src.exists()) {\n+            throw new RuntimeException(src.getAbsolutePath() + \" does not exist\");\n+        }\n+        CustomResourceDefinition crd = new YAMLMapper().readValue(src, CustomResourceDefinition.class);\n+        LOGGER.info(\"Create or replacing {} with versions {}\", crd.getMetadata().getName(),\n+                crd.getSpec().getVersions().stream()\n+                        .map(v -> v.getName() + \"{stored=\" + v.getStorage() + \"}\")\n+                        .collect(Collectors.joining(\", \")));\n+        cluster.client().getClient().customResourceDefinitions().delete(crd);\n+    }\n+\n+    private void assertIsMapListener(Kafka kafka) {\n+        Assertions.assertNotNull(kafka);\n+        Assertions.assertNotNull(kafka.getSpec());\n+        Assertions.assertNotNull(kafka.getSpec().getKafka());\n+        Assertions.assertNotNull(kafka.getSpec().getKafka().getListeners());\n+        Assertions.assertNotNull(kafka.getSpec().getKafka().getListeners().getKafkaListeners());\n+        Assertions.assertNull(kafka.getSpec().getKafka().getListeners().getGenericKafkaListeners());\n+    }\n+\n+    private void assertIsListListener(Kafka kafka) {\n+        Assertions.assertNotNull(kafka);\n+        Assertions.assertNotNull(kafka.getSpec());\n+        Assertions.assertNotNull(kafka.getSpec().getKafka());\n+        Assertions.assertNotNull(kafka.getSpec().getKafka().getListeners());\n+        Assertions.assertNull(kafka.getSpec().getKafka().getListeners().getKafkaListeners());\n+        Assertions.assertNotNull(kafka.getSpec().getKafka().getListeners().getGenericKafkaListeners());\n+    }\n+\n+    private NonNamespaceOperation<Kafka, KafkaList, DoneableKafka, Resource<Kafka, DoneableKafka>> v1beta1Op() {\n+        return Crds.kafkaV1Beta1Operation(cluster.client().getClient()).inNamespace(NAMESPACE);\n+    }\n+\n+    private NonNamespaceOperation<Kafka, KafkaList, DoneableKafka, Resource<Kafka, DoneableKafka>> v1beta2Op() {\n+        return Crds.kafkaV1Beta2Operation(cluster.client().getClient()).inNamespace(NAMESPACE);\n+    }\n+\n+    private GenericKafkaListener listListener() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f44863ce8054e309240493821527e26a0034ed7"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg3OTA1OQ==", "bodyText": "Just curious, but wouldn't be better to use switch construction for the else if?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#discussion_r488879059", "createdAt": "2020-09-15T18:32:25Z", "author": {"login": "see-quick"}, "path": "crd-generator/src/main/java/io/strimzi/crdgenerator/CrdGenerator.java", "diffHunk": "@@ -652,44 +898,91 @@ ArrayNode stringArray(Iterable<String> list) {\n         return arrayNode;\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    public static void main(String[] args) throws IOException, ClassNotFoundException {\n-        boolean yaml = false;\n-        Map<String, String> labels = new LinkedHashMap<>();\n+    static class CommandOptions {\n+        private boolean yaml = false;\n+        private LinkedHashMap<String, String> labels = new LinkedHashMap<>();\n+        VersionRange<KubeVersion> targetKubeVersions = null;\n+        ApiVersion crdApiVersion = null;\n+        List<ApiVersion> apiVersions = null;\n+        ApiVersion storageVersion = null;\n         Map<String, Class<? extends CustomResource>> classes = new HashMap<>();\n-        for (int i = 0; i < args.length; i++) {\n-            String arg = args[i];\n-            if (arg.startsWith(\"--\")) {\n-                if (arg.equals(\"--yaml\")) {\n-                    yaml = true;\n-                } else if (arg.equals(\"--label\")) {\n-                    i++;\n-                    int index = args[i].indexOf(\":\");\n-                    if (index == -1) {\n-                        argParseErr(\"Invalid --label \" + args[i]);\n-                    }\n-                    labels.put(args[i].substring(0, index), args[i].substring(index + 1));\n \n+        @SuppressWarnings({\"unchecked\", \"CyclomaticComplexity\"})\n+        public CommandOptions(String[] args) throws ClassNotFoundException {\n+            for (int i = 0; i < args.length; i++) {\n+                String arg = args[i];\n+                if (arg.startsWith(\"--\")) {\n+                    if (arg.equals(\"--yaml\")) {\n+                        yaml = true;\n+                    } else if (arg.equals(\"--label\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f44863ce8054e309240493821527e26a0034ed7"}, "originalPosition": 750}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MDIyNTE5", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#pullrequestreview-489022519", "createdAt": "2020-09-15T19:54:31Z", "commit": {"oid": "6f44863ce8054e309240493821527e26a0034ed7"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOTo1NDozMlrOHSSQ5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDoxNjoxM1rOHSS9Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkzNTY1Mw==", "bodyText": "Should any of these tests use also CRD v1? Or is that not supported yet?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#discussion_r488935653", "createdAt": "2020-09-15T19:54:32Z", "author": {"login": "scholzj"}, "path": "api/pom.xml", "diffHunk": "@@ -164,6 +169,76 @@\n                             </arguments>\n                         </configuration>\n                     </execution>\n+                    <execution>\n+                        <id>generate-crd-evolution-1</id>\n+                        <phase>process-classes</phase>\n+                        <goals>\n+                            <goal>exec</goal>\n+                        </goals>\n+                        <configuration>\n+                            <executable>java</executable>\n+                            <arguments>\n+                                <argument>-classpath</argument>\n+                                <argument>${pom.basedir}${file.separator}target${file.separator}classes${path.separator}${pom.basedir}${file.separator}..${file.separator}crd-generator${file.separator}target${file.separator}crd-generator-${project.version}.jar</argument>\n+                                <argument>io.strimzi.crdgenerator.CrdGenerator</argument>\n+                                <argument>--label</argument><argument>app:strimzi</argument>\n+                                <argument>--label</argument><argument>strimzi.io/crd-install:true</argument>\n+                                <argument>--target-kube</argument><argument>1.16+</argument>\n+                                <argument>--crd-api-version</argument><argument>v1beta1</argument>\n+                                <argument>--api-versions</argument><argument>v1alpha1,v1beta1</argument>\n+                                <argument>--storage-version</argument><argument>v1beta1</argument>\n+                                <argument>--yaml</argument>\n+\n+                                <argument>io.strimzi.api.kafka.model.Kafka=src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka-v1alpha1-v1beta1-store-v1beta1.yaml</argument>\n+                            </arguments>\n+                        </configuration>\n+                    </execution>\n+                    <execution>\n+                        <id>generate-crd-evolution-2</id>\n+                        <phase>process-classes</phase>\n+                        <goals>\n+                            <goal>exec</goal>\n+                        </goals>\n+                        <configuration>\n+                            <executable>java</executable>\n+                            <arguments>\n+                                <argument>-classpath</argument>\n+                                <argument>${pom.basedir}${file.separator}target${file.separator}classes${path.separator}${pom.basedir}${file.separator}..${file.separator}crd-generator${file.separator}target${file.separator}crd-generator-${project.version}.jar</argument>\n+                                <argument>io.strimzi.crdgenerator.CrdGenerator</argument>\n+                                <argument>--label</argument><argument>app:strimzi</argument>\n+                                <argument>--label</argument><argument>strimzi.io/crd-install:true</argument>\n+                                <argument>--target-kube</argument><argument>1.16+</argument>\n+                                <argument>--crd-api-version</argument><argument>v1beta1</argument>\n+                                <argument>--api-versions</argument><argument>v1beta1,v1beta2</argument>\n+                                <argument>--storage-version</argument><argument>v1beta1</argument>\n+                                <argument>--yaml</argument>\n+                                <argument>io.strimzi.api.kafka.model.Kafka=src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka-v1beta1-v1beta2-store-v1beta1.yaml</argument>\n+                            </arguments>\n+                        </configuration>\n+                    </execution>\n+                    <execution>\n+                        <id>generate-crd-evolution-3</id>\n+                        <phase>process-classes</phase>\n+                        <goals>\n+                            <goal>exec</goal>\n+                        </goals>\n+                        <configuration>\n+                            <executable>java</executable>\n+                            <arguments>\n+                                <argument>-classpath</argument>\n+                                <argument>${pom.basedir}${file.separator}target${file.separator}classes${path.separator}${pom.basedir}${file.separator}..${file.separator}crd-generator${file.separator}target${file.separator}crd-generator-${project.version}.jar</argument>\n+                                <argument>io.strimzi.crdgenerator.CrdGenerator</argument>\n+                                <argument>--label</argument><argument>app:strimzi</argument>\n+                                <argument>--label</argument><argument>strimzi.io/crd-install:true</argument>\n+                                <argument>--target-kube</argument><argument>1.16+</argument>\n+                                <argument>--crd-api-version</argument><argument>v1beta1</argument>\n+                                <argument>--api-versions</argument><argument>v1beta1,v1beta2</argument>\n+                                <argument>--storage-version</argument><argument>v1beta2</argument>\n+                                <argument>--yaml</argument>\n+                                <argument>io.strimzi.api.kafka.model.Kafka=src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka-v1beta1-v1beta2-store-v1beta2.yaml</argument>\n+                            </arguments>\n+                        </configuration>\n+                    </execution>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f44863ce8054e309240493821527e26a0034ed7"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk0NzAzOA==", "bodyText": "What is the difference for these two? Will each of these watch for another version resource? Will we need to do everything twice in the operators?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#discussion_r488947038", "createdAt": "2020-09-15T20:16:13Z", "author": {"login": "scholzj"}, "path": "api/src/main/java/io/strimzi/api/kafka/Crds.java", "diffHunk": "@@ -269,6 +269,14 @@ public static CustomResourceDefinition kafka() {\n         return client.customResources(CustomResourceDefinitionContext.fromCrd(crd(Kafka.class, Constants.V1ALPHA1)), Kafka.class, KafkaList.class, DoneableKafka.class);\n     }\n \n+    public static MixedOperation<Kafka, KafkaList, DoneableKafka, Resource<Kafka, DoneableKafka>> kafkaV1Beta1Operation(KubernetesClient client) {\n+        return client.customResources(CustomResourceDefinitionContext.fromCrd(crd(Kafka.class, Constants.V1BETA1)), Kafka.class, KafkaList.class, DoneableKafka.class);\n+    }\n+\n+    public static MixedOperation<Kafka, KafkaList, DoneableKafka, Resource<Kafka, DoneableKafka>> kafkaV1Beta2Operation(KubernetesClient client) {\n+        return client.customResources(CustomResourceDefinitionContext.fromCrd(crd(Kafka.class, Constants.V1BETA2)), Kafka.class, KafkaList.class, DoneableKafka.class);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f44863ce8054e309240493821527e26a0034ed7"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MzQ0NzI2", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#pullrequestreview-489344726", "createdAt": "2020-09-16T07:26:10Z", "commit": {"oid": "6f44863ce8054e309240493821527e26a0034ed7"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzoyNjoxMFrOHSjp2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzozMjoxNVrOHSj3mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyMDU3MA==", "bodyText": "What's the syntax for the value of this annotation? It's an interval or a list? or something different?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#discussion_r489220570", "createdAt": "2020-09-16T07:26:10Z", "author": {"login": "ppatierno"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaClusterSpec.java", "diffHunk": "@@ -146,6 +147,7 @@ public void setLogging(Logging logging) {\n         this.logging = logging;\n     }\n \n+    @PresentInVersions(\"v1alpha1-v1beta1\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f44863ce8054e309240493821527e26a0034ed7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyNDA4OA==", "bodyText": "can we think more about using an enum as Alpha, Beta and Stable instead of short values 0, 1 and 2 (that anyway could be the corresponding underlying values of the enum)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#discussion_r489224088", "createdAt": "2020-09-16T07:32:15Z", "author": {"login": "ppatierno"}, "path": "crd-generator/src/main/java/io/strimzi/crdgenerator/ApiVersion.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.crdgenerator;\n+\n+\n+import java.util.Objects;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static java.lang.Short.parseShort;\n+\n+/**\n+ * Represents the version of a Kubernetes API, for example {@code v1alpha1} or {@code v2}.\n+ * These version numbers are comparable, so {@code v1alpha1 < v1beta1 < v1 < v2alpha1} etc.\n+ */\n+public class ApiVersion implements Comparable<ApiVersion> {\n+\n+    public static final Pattern PATTERN = Pattern.compile(\"v([0-9]+)((alpha|beta)([0-9]+))?\");\n+    public static final ApiVersion V1ALPHA1 = parse(\"v1alpha1\");\n+    public static final ApiVersion V1BETA1 = parse(\"v1beta1\");\n+    public static final ApiVersion V1 = parse(\"v1\");\n+\n+    private final short major;\n+    private final short ab;\n+    private final short minor;\n+\n+    public ApiVersion(short major, short ab, short minor) {\n+        if (major < 0 || ab < 0 || ab > 2 || minor < 0) {\n+            throw new RuntimeException();\n+        }\n+        this.major = major;\n+        this.ab = ab;\n+        this.minor = minor;\n+    }\n+\n+    private static Matcher matcher(String apiVersion) {\n+        return PATTERN.matcher(apiVersion);\n+    }\n+\n+    public static boolean isVersion(String apiVersion) {\n+        return matcher(apiVersion).matches();\n+    }\n+\n+    public static ApiVersion parse(String apiVersion) {\n+        Matcher matcher = matcher(apiVersion);\n+        if (!matcher.matches()) {\n+            throw new IllegalArgumentException(\"Invalid version \" + apiVersion);\n+        }\n+        short major = parseShort(matcher.group(1));\n+        short ab;\n+        short minor;\n+        String alphaBeta = matcher.group(3);\n+        if (matcher.groupCount() > 1 && alphaBeta != null) {\n+            if (\"alpha\".equals(alphaBeta)) {\n+                ab = 0;\n+            } else if (\"beta\".equals(alphaBeta)) {\n+                ab = 1;\n+            } else {\n+                throw new IllegalStateException(alphaBeta);\n+            }\n+            minor = parseShort(matcher.group(4));\n+        } else {\n+            ab = 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f44863ce8054e309240493821527e26a0034ed7"}, "originalPosition": 65}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6f44863ce8054e309240493821527e26a0034ed7", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/6f44863ce8054e309240493821527e26a0034ed7", "committedDate": "2020-09-15T17:49:13Z", "message": "default\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}, "afterCommit": {"oid": "e0f92c6fc18b6dd3638f33950c4fc16da6f3d7c5", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/e0f92c6fc18b6dd3638f33950c4fc16da6f3d7c5", "committedDate": "2020-09-22T17:17:40Z", "message": "fix\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f72359d0bc8094a195046ec68e0665a63e5bc8fd", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/f72359d0bc8094a195046ec68e0665a63e5bc8fd", "committedDate": "2020-09-23T09:48:57Z", "message": "Test\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}, "afterCommit": {"oid": "d6c128f5ad0763ee832b255088a1fe936ac001d1", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d6c128f5ad0763ee832b255088a1fe936ac001d1", "committedDate": "2020-10-05T08:47:03Z", "message": "Rebase fix\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2aeb50ef0497a39e49106539b6d506b86cfbf91", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a2aeb50ef0497a39e49106539b6d506b86cfbf91", "committedDate": "2020-10-05T09:00:11Z", "message": "Add ApiVersion and range. Allow @Pattern, @Description and @Alternative to declare a version\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4815308c7d19fc21416c9c75eb60c1c88518330c", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/4815308c7d19fc21416c9c75eb60c1c88518330c", "committedDate": "2020-10-05T09:00:11Z", "message": "Support for versiond schemas\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe93c86b32d7c3fc719e9098cddb484fae8ff439", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/fe93c86b32d7c3fc719e9098cddb484fae8ff439", "committedDate": "2020-10-05T09:00:11Z", "message": "Generify version ranges and versions\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46f2298df9981a7d9b2dcf34fbc579f9628f7a36", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/46f2298df9981a7d9b2dcf34fbc579f9628f7a36", "committedDate": "2020-10-05T09:00:11Z", "message": "Fix tests\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cb598b884d57bad7dc898ebc3f7354b53e87948", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/6cb598b884d57bad7dc898ebc3f7354b53e87948", "committedDate": "2020-10-05T09:00:11Z", "message": "Nasty compromise for dealing with properties\n\nProbably need to assert that either annotations have no `apiVersion`, or that the `apiVersions` cover the versions in the CR in which they're embedded.\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e5c41b5ecf1aa3e3ac264a547f8044485a43624", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/0e5c41b5ecf1aa3e3ac264a547f8044485a43624", "committedDate": "2020-10-05T09:00:11Z", "message": "fixes\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fd1c47d430f252006d43af89c99ea552b3c1267", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/1fd1c47d430f252006d43af89c99ea552b3c1267", "committedDate": "2020-10-05T09:00:11Z", "message": "fix\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1193cce2281dc1805fc2ca04981f027de50bc8f3", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/1193cce2281dc1805fc2ca04981f027de50bc8f3", "committedDate": "2020-10-05T09:00:11Z", "message": "Make prerequisites-check.sh respect DOCKER_CMD\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3577b7170a381cfc97d3e058c1c41d93e672ac3d", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3577b7170a381cfc97d3e058c1c41d93e672ac3d", "committedDate": "2020-10-05T09:00:11Z", "message": "wip\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa69907115f821c055c58da967ee7462bd75ce98", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/fa69907115f821c055c58da967ee7462bd75ce98", "committedDate": "2020-10-05T09:00:11Z", "message": "Fix test\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cae94f4d0ff23bb4fbc7c40c2444a84ba81410e", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/4cae94f4d0ff23bb4fbc7c40c2444a84ba81410e", "committedDate": "2020-10-05T09:00:11Z", "message": "fixup\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2e0014450b0c36f7b1502db547a79c33b3b6176", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d2e0014450b0c36f7b1502db547a79c33b3b6176", "committedDate": "2020-10-05T09:00:11Z", "message": "java11ism\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c9dd4387efbd69fdb1e510077db9a157b965454", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/9c9dd4387efbd69fdb1e510077db9a157b965454", "committedDate": "2020-10-05T09:00:11Z", "message": "spotbuts\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40dda7cafd9817fc98cff9bc3c0adc1dd96db354", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/40dda7cafd9817fc98cff9bc3c0adc1dd96db354", "committedDate": "2020-10-05T09:00:11Z", "message": "default\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "428b522fbc1f92cb0ccc8477643382475e99409e", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/428b522fbc1f92cb0ccc8477643382475e99409e", "committedDate": "2020-10-05T09:00:11Z", "message": "Some code review comments\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0c0ca15a9ec252fcb1c5f5816bef20b2ce8064c", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c0c0ca15a9ec252fcb1c5f5816bef20b2ce8064c", "committedDate": "2020-10-05T09:00:11Z", "message": "More review comments and fixes for CRD v1\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d35a149d84d2fb0267853c7fea9db5d99f5e85b4", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d35a149d84d2fb0267853c7fea9db5d99f5e85b4", "committedDate": "2020-10-05T09:00:11Z", "message": "wip\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f550da68e8756ea25dd2847d9c75d08246421d19", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/f550da68e8756ea25dd2847d9c75d08246421d19", "committedDate": "2020-10-05T09:00:11Z", "message": "to revert\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74c23bbb3050105bf424594cfc876f2c1cd9018d", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/74c23bbb3050105bf424594cfc876f2c1cd9018d", "committedDate": "2020-10-05T09:00:11Z", "message": "Revert \"to revert\"\n\nThis reverts commit 54ad402d6f080b3eba1b5f012518d58ca014c924.\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "651a6a425367cc52e97c95fd6bf8a5368100eb04", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/651a6a425367cc52e97c95fd6bf8a5368100eb04", "committedDate": "2020-10-05T09:00:11Z", "message": "fix\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "371ee692cea6ac9109455567d48f6bf12fe8427d", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/371ee692cea6ac9109455567d48f6bf12fe8427d", "committedDate": "2020-10-05T09:00:11Z", "message": "fix\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce181dbe29bad4cb06d087c3a9762d24ac644741", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ce181dbe29bad4cb06d087c3a9762d24ac644741", "committedDate": "2020-10-05T09:00:11Z", "message": "Fix problem with map types with CRD v1\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6df319248f3401a618e9866dc199c2926371878b", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/6df319248f3401a618e9866dc199c2926371878b", "committedDate": "2020-10-05T09:00:11Z", "message": "Update derived resources\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a09baad32000aded2cf76d6673cab116c4dc369f", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a09baad32000aded2cf76d6673cab116c4dc369f", "committedDate": "2020-10-05T09:00:12Z", "message": "Test\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c053bb54b6e72f35a5bbdf9b0f285077cbb2f6a0", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c053bb54b6e72f35a5bbdf9b0f285077cbb2f6a0", "committedDate": "2020-10-05T09:00:12Z", "message": "Test\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2db69873eb92218c1ee290746c423ae82fd6619", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d2db69873eb92218c1ee290746c423ae82fd6619", "committedDate": "2020-10-05T09:00:12Z", "message": "Rebase fix\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "735307cf158ccff0882fab3c9e14997d8fc7307e", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/735307cf158ccff0882fab3c9e14997d8fc7307e", "committedDate": "2020-10-05T09:00:12Z", "message": "derived\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d6c128f5ad0763ee832b255088a1fe936ac001d1", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d6c128f5ad0763ee832b255088a1fe936ac001d1", "committedDate": "2020-10-05T08:47:03Z", "message": "Rebase fix\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}, "afterCommit": {"oid": "735307cf158ccff0882fab3c9e14997d8fc7307e", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/735307cf158ccff0882fab3c9e14997d8fc7307e", "committedDate": "2020-10-05T09:00:12Z", "message": "derived\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzNDA4NTU1", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#pullrequestreview-503408555", "createdAt": "2020-10-06T22:39:12Z", "commit": {"oid": "735307cf158ccff0882fab3c9e14997d8fc7307e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzNjU1OTE2", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#pullrequestreview-503655916", "createdAt": "2020-10-07T08:46:30Z", "commit": {"oid": "735307cf158ccff0882fab3c9e14997d8fc7307e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MTg2OTcy", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#pullrequestreview-504186972", "createdAt": "2020-10-07T19:09:26Z", "commit": {"oid": "735307cf158ccff0882fab3c9e14997d8fc7307e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 975, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}