{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3MzUyODU4", "number": 3302, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDowNjowOFrOENZrJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMDowMTo0OFrOEOMLnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDg3NTg5OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDowNjowOFrOGwEOqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxMTo0MDowNFrOGwTkGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1NDEyMw==", "bodyText": "Should we have similar check for Kafka Producer and Kafka Consumer metrics?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3302#discussion_r453054123", "createdAt": "2020-07-10T20:06:08Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "diffHunk": "@@ -286,6 +290,18 @@ void testMirrorMaker2Metrics() {\n         assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 1));\n     }\n \n+    @Test\n+    void testKafkaBridgeMetrics() {\n+        kafkaBridgeMetricsData = MetricsUtils.collectKafkaBridgePodMetrics(BRIDGE_CLUSTER);\n+        assertThat(\"Collected KafkaBridge metrics are empty\", kafkaBridgeMetricsData.size() > 0);\n+        assertThat(\"Collected KafkaBridge metrics doesn't contains vertx metrics\", kafkaBridgeMetricsData.values().toString().contains(\"vertx\"));\n+        assertThat(\"Collected KafkaBridge metrics doesn't contains jvm metrics\", kafkaBridgeMetricsData.values().toString().contains(\"jvm\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd01d9ba219a80778ec662bcdded852cc482b2f"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA2NjA5MQ==", "bodyText": "Agreed", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3302#discussion_r453066091", "createdAt": "2020-07-10T20:37:49Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "diffHunk": "@@ -286,6 +290,18 @@ void testMirrorMaker2Metrics() {\n         assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 1));\n     }\n \n+    @Test\n+    void testKafkaBridgeMetrics() {\n+        kafkaBridgeMetricsData = MetricsUtils.collectKafkaBridgePodMetrics(BRIDGE_CLUSTER);\n+        assertThat(\"Collected KafkaBridge metrics are empty\", kafkaBridgeMetricsData.size() > 0);\n+        assertThat(\"Collected KafkaBridge metrics doesn't contains vertx metrics\", kafkaBridgeMetricsData.values().toString().contains(\"vertx\"));\n+        assertThat(\"Collected KafkaBridge metrics doesn't contains jvm metrics\", kafkaBridgeMetricsData.values().toString().contains(\"jvm\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1NDEyMw=="}, "originalCommit": {"oid": "acd01d9ba219a80778ec662bcdded852cc482b2f"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE5MDY2NQ==", "bodyText": "I was able to see those metrics in grafana, but when I fetch metrics from bridge:8080/metrics I can see only this https://gist.github.com/Frawless/4d04010dd2e9d7dfbd3276f1ccf8f2a1, do I need update rules in CR as we have it for Kafka for example?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3302#discussion_r453190665", "createdAt": "2020-07-11T12:32:31Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "diffHunk": "@@ -286,6 +290,18 @@ void testMirrorMaker2Metrics() {\n         assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 1));\n     }\n \n+    @Test\n+    void testKafkaBridgeMetrics() {\n+        kafkaBridgeMetricsData = MetricsUtils.collectKafkaBridgePodMetrics(BRIDGE_CLUSTER);\n+        assertThat(\"Collected KafkaBridge metrics are empty\", kafkaBridgeMetricsData.size() > 0);\n+        assertThat(\"Collected KafkaBridge metrics doesn't contains vertx metrics\", kafkaBridgeMetricsData.values().toString().contains(\"vertx\"));\n+        assertThat(\"Collected KafkaBridge metrics doesn't contains jvm metrics\", kafkaBridgeMetricsData.values().toString().contains(\"jvm\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1NDEyMw=="}, "originalCommit": {"oid": "acd01d9ba219a80778ec662bcdded852cc482b2f"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE5MjIzNQ==", "bodyText": "Yes you are right to see kafka consumer and producer metrics you need to start consumer/producer applications otherwise JMX doesn't collect/expose any metrics.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3302#discussion_r453192235", "createdAt": "2020-07-11T12:52:01Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "diffHunk": "@@ -286,6 +290,18 @@ void testMirrorMaker2Metrics() {\n         assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 1));\n     }\n \n+    @Test\n+    void testKafkaBridgeMetrics() {\n+        kafkaBridgeMetricsData = MetricsUtils.collectKafkaBridgePodMetrics(BRIDGE_CLUSTER);\n+        assertThat(\"Collected KafkaBridge metrics are empty\", kafkaBridgeMetricsData.size() > 0);\n+        assertThat(\"Collected KafkaBridge metrics doesn't contains vertx metrics\", kafkaBridgeMetricsData.values().toString().contains(\"vertx\"));\n+        assertThat(\"Collected KafkaBridge metrics doesn't contains jvm metrics\", kafkaBridgeMetricsData.values().toString().contains(\"jvm\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1NDEyMw=="}, "originalCommit": {"oid": "acd01d9ba219a80778ec662bcdded852cc482b2f"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMwNTM2OA==", "bodyText": "Ah make sense. I will add it to the test. Thanks", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3302#discussion_r453305368", "createdAt": "2020-07-12T11:40:04Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "diffHunk": "@@ -286,6 +290,18 @@ void testMirrorMaker2Metrics() {\n         assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 1));\n     }\n \n+    @Test\n+    void testKafkaBridgeMetrics() {\n+        kafkaBridgeMetricsData = MetricsUtils.collectKafkaBridgePodMetrics(BRIDGE_CLUSTER);\n+        assertThat(\"Collected KafkaBridge metrics are empty\", kafkaBridgeMetricsData.size() > 0);\n+        assertThat(\"Collected KafkaBridge metrics doesn't contains vertx metrics\", kafkaBridgeMetricsData.values().toString().contains(\"vertx\"));\n+        assertThat(\"Collected KafkaBridge metrics doesn't contains jvm metrics\", kafkaBridgeMetricsData.values().toString().contains(\"jvm\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1NDEyMw=="}, "originalCommit": {"oid": "acd01d9ba219a80778ec662bcdded852cc482b2f"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDk1MTc2OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDozNzo0MlrOGwE9Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDozNzo0MlrOGwE9Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA2NjA0Mw==", "bodyText": "Let's remember that when the new bridge 0.18.0 will be out, the metrics will contain strimzi_bridge", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3302#discussion_r453066043", "createdAt": "2020-07-10T20:37:42Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "diffHunk": "@@ -286,6 +290,18 @@ void testMirrorMaker2Metrics() {\n         assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 1));\n     }\n \n+    @Test\n+    void testKafkaBridgeMetrics() {\n+        kafkaBridgeMetricsData = MetricsUtils.collectKafkaBridgePodMetrics(BRIDGE_CLUSTER);\n+        assertThat(\"Collected KafkaBridge metrics are empty\", kafkaBridgeMetricsData.size() > 0);\n+        assertThat(\"Collected KafkaBridge metrics doesn't contains vertx metrics\", kafkaBridgeMetricsData.values().toString().contains(\"vertx\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd01d9ba219a80778ec662bcdded852cc482b2f"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMzEzMzg3OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/Constants.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOTo1NzoxMlrOGxMwKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOTo1NzoxMlrOGxMwKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDI0MjM0Nw==", "bodyText": "typo \"BRIDGE\"", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3302#discussion_r454242347", "createdAt": "2020-07-14T09:57:12Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/Constants.java", "diffHunk": "@@ -77,6 +77,7 @@\n      */\n     String KAFKA_CLIENTS_LABEL_KEY = \"user-test-app\";\n     String KAFKA_CLIENTS_LABEL_VALUE = \"kafka-clients\";\n+    String KAFKA_BRDIGE_CLIENTS_LABEL_VALUE = \"kafka-clients\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcf50cdf66043feb28325efe463665385621958f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMzE1MTAzOnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMDowMTo0OFrOGxM6Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMDowMTo0OFrOGxM6Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDI0NDkzMA==", "bodyText": "\"HTTP metrics\"", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3302#discussion_r454244930", "createdAt": "2020-07-14T10:01:48Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "diffHunk": "@@ -286,6 +295,40 @@ void testMirrorMaker2Metrics() {\n         assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 1));\n     }\n \n+    @Test\n+    @Tag(BRIDGE)\n+    void testKafkaBridgeMetrics() {\n+        String producerName = \"bridge-producer\";\n+        String consumerName = \"bridge-consumer\";\n+\n+        // Attach consumer before producer\n+        KafkaClientsResource.consumerStrimziBridge(consumerName, KafkaBridgeResources.serviceName(BRIDGE_CLUSTER), Constants.HTTP_BRIDGE_DEFAULT_PORT, bridgeTopic, 200).done();\n+        KafkaClientsResource.producerStrimziBridge(producerName, KafkaBridgeResources.serviceName(BRIDGE_CLUSTER), Constants.HTTP_BRIDGE_DEFAULT_PORT, bridgeTopic, 200).done();\n+\n+        TestUtils.waitFor(\"KafkaProducer metrics will be available\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT, () -> {\n+            LOGGER.info(\"Looking for 'strimzi_bridge_kafka_producer_count' in bridge metrics\");\n+            kafkaBridgeMetricsData = MetricsUtils.collectKafkaBridgePodMetrics(BRIDGE_CLUSTER);\n+            Pattern producerCountPattern = Pattern.compile(\"strimzi_bridge_kafka_producer_count\\\\{.*,} ([\\\\d.][^\\\\n]+)\");\n+            ArrayList<Double> producerCountValues = MetricsUtils.collectSpecificMetric(producerCountPattern, kafkaBridgeMetricsData);\n+            return producerCountValues.stream().mapToDouble(i -> i).count() == (double) 1;\n+        });\n+\n+        TestUtils.waitFor(\"KafkaConsumer metrics will be available\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT, () -> {\n+            LOGGER.info(\"Looking for 'strimzi_bridge_kafka_consumer_connection_count' in bridge metrics\");\n+            kafkaBridgeMetricsData = MetricsUtils.collectKafkaBridgePodMetrics(BRIDGE_CLUSTER);\n+            Pattern consumerConnectionsPattern = Pattern.compile(\"strimzi_bridge_kafka_consumer_connection_count\\\\{.*,} ([\\\\d.][^\\\\n]+)\");\n+            ArrayList<Double> consumerConnectionsValues = MetricsUtils.collectSpecificMetric(consumerConnectionsPattern, kafkaBridgeMetricsData);\n+            return consumerConnectionsValues.stream().mapToDouble(i -> i).count() > 0;\n+        });\n+\n+        assertThat(\"Collected KafkaBridge metrics doesn't contains jvm metrics\", kafkaBridgeMetricsData.values().toString().contains(\"jvm\"));\n+        assertThat(\"Collected KafkaBridge metrics doesn't contains strimzi metrics\", kafkaBridgeMetricsData.values().toString().contains(\"strimzi_bridge_http_server\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcf50cdf66043feb28325efe463665385621958f"}, "originalPosition": 115}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1436, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}