{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5MTMzNTg2", "number": 3671, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwOTozNDo0MFrOElkvhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwOTozNjozMlrOElkyGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODM0NzU5OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwOTozNDo0MFrOHVHnhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMToyOTo1OFrOHVLciA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkwNjk1MA==", "bodyText": "should we add the new one strimzi_resource_state to the check in this list as well?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3671#discussion_r491906950", "createdAt": "2020-09-21T09:34:40Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "diffHunk": "@@ -228,33 +236,30 @@ void testClusterOperatorMetrics() {\n             assertCoMetricNotNull(\"strimzi_reconciliations_failed_total\", resource, clusterOperatorMetricsData);\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6301ebbba460fa0a08b08ab9b2be33cea49546aa"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkyMzI1MA==", "bodyText": "Ye I can add it", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3671#discussion_r491923250", "createdAt": "2020-09-21T09:59:58Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "diffHunk": "@@ -228,33 +236,30 @@ void testClusterOperatorMetrics() {\n             assertCoMetricNotNull(\"strimzi_reconciliations_failed_total\", resource, clusterOperatorMetricsData);\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkwNjk1MA=="}, "originalCommit": {"oid": "6301ebbba460fa0a08b08ab9b2be33cea49546aa"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk2OTY3Mg==", "bodyText": "I checked the code and it kinda doesn't make sense to add it into this loop. Basically if the metric is set properly is tested by new asserts which I added after this loop.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3671#discussion_r491969672", "createdAt": "2020-09-21T11:29:58Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "diffHunk": "@@ -228,33 +236,30 @@ void testClusterOperatorMetrics() {\n             assertCoMetricNotNull(\"strimzi_reconciliations_failed_total\", resource, clusterOperatorMetricsData);\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkwNjk1MA=="}, "originalCommit": {"oid": "6301ebbba460fa0a08b08ab9b2be33cea49546aa"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODM1NDE2OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwOTozNjozMlrOHVHrcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMDoyNzoxNlrOHVJkfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkwNzk1NA==", "bodyText": "if there is no resource of a specific kind, the corresponding state_resource_state metric should not exist. Do you see it existing but with 0 value?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3671#discussion_r491907954", "createdAt": "2020-09-21T09:36:32Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "diffHunk": "@@ -228,33 +236,30 @@ void testClusterOperatorMetrics() {\n             assertCoMetricNotNull(\"strimzi_reconciliations_failed_total\", resource, clusterOperatorMetricsData);\n         }\n \n-        Pattern connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"Kafka\\\",} ([\\\\d.][^\\\\n]+)\");\n-        ArrayList<Double> values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n-        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 2));\n+        assertCoMetricResources(Kafka.RESOURCE_KIND, 2);\n+        assertCoMetricResourceState(Kafka.RESOURCE_KIND, CLUSTER_NAME, 1);\n+        assertCoMetricResourceState(Kafka.RESOURCE_KIND, SECOND_CLUSTER, 1);\n \n-        connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"KafkaBridge\\\",} ([\\\\d.][^\\\\n]+)\");\n-        values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n-        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 1));\n+        assertCoMetricResources(KafkaBridge.RESOURCE_KIND, 1);\n+        assertCoMetricResourceState(KafkaBridge.RESOURCE_KIND, BRIDGE_CLUSTER, 1);\n \n-        connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"KafkaConnect\\\",} ([\\\\d.][^\\\\n]+)\");\n-        values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n-        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 1));\n+        assertCoMetricResources(KafkaConnect.RESOURCE_KIND, 1);\n+        assertCoMetricResourceState(KafkaConnect.RESOURCE_KIND, CLUSTER_NAME, 1);\n \n-        connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"KafkaConnectS2I\\\",} ([\\\\d.][^\\\\n]+)\");\n-        values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n-        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 0));\n+        assertCoMetricResources(KafkaConnectS2I.RESOURCE_KIND, 0);\n+        assertCoMetricResourceState(KafkaConnectS2I.RESOURCE_KIND, CLUSTER_NAME, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6301ebbba460fa0a08b08ab9b2be33cea49546aa"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkyMzA0NQ==", "bodyText": "In case it's not exists, the check return 0, but it return 0 in case the resource is nto ready. I can try to rewrite it a little bit and check that metric is not expsoed in case the resource is nto created.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3671#discussion_r491923045", "createdAt": "2020-09-21T09:59:37Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "diffHunk": "@@ -228,33 +236,30 @@ void testClusterOperatorMetrics() {\n             assertCoMetricNotNull(\"strimzi_reconciliations_failed_total\", resource, clusterOperatorMetricsData);\n         }\n \n-        Pattern connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"Kafka\\\",} ([\\\\d.][^\\\\n]+)\");\n-        ArrayList<Double> values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n-        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 2));\n+        assertCoMetricResources(Kafka.RESOURCE_KIND, 2);\n+        assertCoMetricResourceState(Kafka.RESOURCE_KIND, CLUSTER_NAME, 1);\n+        assertCoMetricResourceState(Kafka.RESOURCE_KIND, SECOND_CLUSTER, 1);\n \n-        connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"KafkaBridge\\\",} ([\\\\d.][^\\\\n]+)\");\n-        values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n-        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 1));\n+        assertCoMetricResources(KafkaBridge.RESOURCE_KIND, 1);\n+        assertCoMetricResourceState(KafkaBridge.RESOURCE_KIND, BRIDGE_CLUSTER, 1);\n \n-        connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"KafkaConnect\\\",} ([\\\\d.][^\\\\n]+)\");\n-        values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n-        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 1));\n+        assertCoMetricResources(KafkaConnect.RESOURCE_KIND, 1);\n+        assertCoMetricResourceState(KafkaConnect.RESOURCE_KIND, CLUSTER_NAME, 1);\n \n-        connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"KafkaConnectS2I\\\",} ([\\\\d.][^\\\\n]+)\");\n-        values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n-        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 0));\n+        assertCoMetricResources(KafkaConnectS2I.RESOURCE_KIND, 0);\n+        assertCoMetricResourceState(KafkaConnectS2I.RESOURCE_KIND, CLUSTER_NAME, 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkwNzk1NA=="}, "originalCommit": {"oid": "6301ebbba460fa0a08b08ab9b2be33cea49546aa"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkzODk0Mw==", "bodyText": "Yeah exactly, they are two different things: metric doesn't exist vs metric 0 (resource not ready). I would test them differently.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3671#discussion_r491938943", "createdAt": "2020-09-21T10:27:16Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "diffHunk": "@@ -228,33 +236,30 @@ void testClusterOperatorMetrics() {\n             assertCoMetricNotNull(\"strimzi_reconciliations_failed_total\", resource, clusterOperatorMetricsData);\n         }\n \n-        Pattern connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"Kafka\\\",} ([\\\\d.][^\\\\n]+)\");\n-        ArrayList<Double> values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n-        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 2));\n+        assertCoMetricResources(Kafka.RESOURCE_KIND, 2);\n+        assertCoMetricResourceState(Kafka.RESOURCE_KIND, CLUSTER_NAME, 1);\n+        assertCoMetricResourceState(Kafka.RESOURCE_KIND, SECOND_CLUSTER, 1);\n \n-        connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"KafkaBridge\\\",} ([\\\\d.][^\\\\n]+)\");\n-        values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n-        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 1));\n+        assertCoMetricResources(KafkaBridge.RESOURCE_KIND, 1);\n+        assertCoMetricResourceState(KafkaBridge.RESOURCE_KIND, BRIDGE_CLUSTER, 1);\n \n-        connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"KafkaConnect\\\",} ([\\\\d.][^\\\\n]+)\");\n-        values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n-        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 1));\n+        assertCoMetricResources(KafkaConnect.RESOURCE_KIND, 1);\n+        assertCoMetricResourceState(KafkaConnect.RESOURCE_KIND, CLUSTER_NAME, 1);\n \n-        connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"KafkaConnectS2I\\\",} ([\\\\d.][^\\\\n]+)\");\n-        values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n-        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 0));\n+        assertCoMetricResources(KafkaConnectS2I.RESOURCE_KIND, 0);\n+        assertCoMetricResourceState(KafkaConnectS2I.RESOURCE_KIND, CLUSTER_NAME, 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkwNzk1NA=="}, "originalCommit": {"oid": "6301ebbba460fa0a08b08ab9b2be33cea49546aa"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1144, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}