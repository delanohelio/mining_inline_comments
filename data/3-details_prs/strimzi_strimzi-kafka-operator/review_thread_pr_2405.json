{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzMDk0MDYw", "number": 2405, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMTo1NDozM1rODZL50A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMDoxNToyMFrODZxxbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzM2MDE2OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/StUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMTo1NDozM1rOFfcBfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMTo1NDozM1rOFfcBfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUwOTMwOQ==", "bodyText": "Do we really need this log every poll interval? This operation use executor and oc logs command so it's very slow. Maybe rewrite it with some kubernetes watchers will be better, but till that I would remove this log.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2405#discussion_r368509309", "createdAt": "2020-01-20T11:54:33Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/StUtils.java", "diffHunk": "@@ -48,9 +48,15 @@ public static void waitForReconciliation(String testClass, String testName, Stri\n         LOGGER.info(\"Waiting for reconciliation\");\n         String reconciliation = timeMeasuringSystem.startOperation(Operation.NEXT_RECONCILIATION);\n         TestUtils.waitFor(\"Wait till another rolling update starts\", Constants.CO_OPERATION_TIMEOUT_POLL, Constants.RECONCILIATION_INTERVAL + 30000,\n-            () -> !cmdKubeClient().searchInLog(\"deploy\", \"strimzi-cluster-operator\",\n+            () -> {\n+                LOGGER.info(\"Logging reconciliation for time {}\", timeMeasuringSystem.getCurrentDuration(testClass, testName, reconciliation));\n+                LOGGER.info(\"Reconciliation log:\\n{}\", cmdKubeClient().searchInLog(\"deploy\", \"strimzi-cluster-operator\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99de7cf4ef36eb222cc79140fbace4cdbb5d06cd"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzM2MjUzOnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMTo1NTo0MFrOFfcC9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMTo1NTo0MFrOFfcC9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUwOTY4NA==", "bodyText": "You can store Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0) in variable and then check proper values.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2405#discussion_r368509684", "createdAt": "2020-01-20T11:55:40Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaUtils.java", "diffHunk": "@@ -34,11 +34,13 @@ public static void waitUntilKafkaCRIsReady(String clusterName) {\n         LOGGER.info(\"Kafka CR will be ready\");\n     }\n \n-    public static void waitUntilKafkaStatusConditionIsPresent(String clusterName) {\n+    public static void waitUntilKafkaStatusConditionIsNotReady(String clusterName) throws InterruptedException {\n         LOGGER.info(\"Waiting till kafka resource status is present\");\n         TestUtils.waitFor(\"Waiting for Kafka resource status is ready\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n-            () ->  Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0) != null\n+            () ->  Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0).getType().equals(\"NotReady\") &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99de7cf4ef36eb222cc79140fbace4cdbb5d06cd"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTg1NzgwOnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwOToyODowNlrOFfzRdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMTo1Mjo1NlrOFf3ZSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg5MDIzMQ==", "bodyText": "Maybe I'm reading it wrong. But we have:\n\nMethod named waitUntilKafkaStatusConditionIsNotReady\na Log message Waiting till kafka resource status is present\nsome other message saying Waiting for Kafka resource status is ready\nA condition which seems to check if the pod has condition NotReady\n\nSo I wonder which of these does it actually do.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2405#discussion_r368890231", "createdAt": "2020-01-21T09:28:06Z", "author": {"login": "scholzj"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaUtils.java", "diffHunk": "@@ -34,11 +34,13 @@ public static void waitUntilKafkaCRIsReady(String clusterName) {\n         LOGGER.info(\"Kafka CR will be ready\");\n     }\n \n-    public static void waitUntilKafkaStatusConditionIsPresent(String clusterName) {\n+    public static void waitUntilKafkaStatusConditionIsNotReady(String clusterName) throws InterruptedException {\n         LOGGER.info(\"Waiting till kafka resource status is present\");\n         TestUtils.waitFor(\"Waiting for Kafka resource status is ready\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n-            () ->  Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0) != null\n+            () ->  Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0).getType().equals(\"NotReady\") &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99de7cf4ef36eb222cc79140fbace4cdbb5d06cd"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk1Nzc2OA==", "bodyText": "Yeah i see, i forgot rewrite logs. This usage of method is basically, when we expect that something will did not work and from status Ready will change to NotReady. Logs rewrited and sorry for creating confusion.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2405#discussion_r368957768", "createdAt": "2020-01-21T11:52:56Z", "author": {"login": "see-quick"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaUtils.java", "diffHunk": "@@ -34,11 +34,13 @@ public static void waitUntilKafkaCRIsReady(String clusterName) {\n         LOGGER.info(\"Kafka CR will be ready\");\n     }\n \n-    public static void waitUntilKafkaStatusConditionIsPresent(String clusterName) {\n+    public static void waitUntilKafkaStatusConditionIsNotReady(String clusterName) throws InterruptedException {\n         LOGGER.info(\"Waiting till kafka resource status is present\");\n         TestUtils.waitFor(\"Waiting for Kafka resource status is ready\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n-            () ->  Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0) != null\n+            () ->  Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0).getType().equals(\"NotReady\") &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg5MDIzMQ=="}, "originalCommit": {"oid": "99de7cf4ef36eb222cc79140fbace4cdbb5d06cd"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzEzNzc0OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaUtils.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwNzo0MToxOFrOFgSzWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwOTo0MDo1NVrOFgVv4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNjgwOA==", "bodyText": "Sorry to be nitpicking ... but some more inconsistencies ...\n\nFew lines above you have method waitUntilKafkaCRIsReady which does the same just for Ready state. Could we have some naming consistency?\nThe method above doesn't seem to need the Thread.sleep(...). Why do we need it here?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2405#discussion_r369406808", "createdAt": "2020-01-22T07:41:18Z", "author": {"login": "scholzj"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaUtils.java", "diffHunk": "@@ -27,19 +28,23 @@ private KafkaUtils() {}\n \n     public static void waitUntilKafkaCRIsReady(String clusterName) {\n         LOGGER.info(\"Waiting till Kafka CR will be ready\");\n+        Condition condition = Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0);\n+\n         TestUtils.waitFor(\"Waiting for Kafka resource status is ready\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n-            () ->   Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0).getType().equals(\"Ready\") &&\n-                Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0).getStatus().equals(\"True\")\n+            () ->   condition.getType().equals(\"Ready\") && condition.getStatus().equals(\"True\")\n         );\n         LOGGER.info(\"Kafka CR will be ready\");\n     }\n \n-    public static void waitUntilKafkaStatusConditionIsPresent(String clusterName) {\n-        LOGGER.info(\"Waiting till kafka resource status is present\");\n-        TestUtils.waitFor(\"Waiting for Kafka resource status is ready\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n-            () ->  Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0) != null\n+    public static void waitUntilKafkaStatusConditionIsNotReady(String clusterName) throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22b793610888c042d033cb21731c3864065349e3"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQxNzYwMA==", "bodyText": "First point solved.\nSecond point, previously i did some experiments. Actually, i need there Thread.sleep(....), because the default status when first appears correctly i was getting Null Pointers exception for some reason.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2405#discussion_r369417600", "createdAt": "2020-01-22T08:14:53Z", "author": {"login": "see-quick"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaUtils.java", "diffHunk": "@@ -27,19 +28,23 @@ private KafkaUtils() {}\n \n     public static void waitUntilKafkaCRIsReady(String clusterName) {\n         LOGGER.info(\"Waiting till Kafka CR will be ready\");\n+        Condition condition = Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0);\n+\n         TestUtils.waitFor(\"Waiting for Kafka resource status is ready\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n-            () ->   Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0).getType().equals(\"Ready\") &&\n-                Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0).getStatus().equals(\"True\")\n+            () ->   condition.getType().equals(\"Ready\") && condition.getStatus().equals(\"True\")\n         );\n         LOGGER.info(\"Kafka CR will be ready\");\n     }\n \n-    public static void waitUntilKafkaStatusConditionIsPresent(String clusterName) {\n-        LOGGER.info(\"Waiting till kafka resource status is present\");\n-        TestUtils.waitFor(\"Waiting for Kafka resource status is ready\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n-            () ->  Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0) != null\n+    public static void waitUntilKafkaStatusConditionIsNotReady(String clusterName) throws InterruptedException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNjgwOA=="}, "originalCommit": {"oid": "22b793610888c042d033cb21731c3864065349e3"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQyOTEzMQ==", "bodyText": "Basically, this one without explicitly waiting.\nExpected :a string containing \"Version 6.6.6 is not supported.\"\nActual   :\"Kafka cluster is being deployed\"\n\nIn status we can see that in message is Kafka cluster is being deployed but after a one second will change to message a string containing \"Version 6.6.6 is not supported", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2405#discussion_r369429131", "createdAt": "2020-01-22T08:43:48Z", "author": {"login": "see-quick"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaUtils.java", "diffHunk": "@@ -27,19 +28,23 @@ private KafkaUtils() {}\n \n     public static void waitUntilKafkaCRIsReady(String clusterName) {\n         LOGGER.info(\"Waiting till Kafka CR will be ready\");\n+        Condition condition = Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0);\n+\n         TestUtils.waitFor(\"Waiting for Kafka resource status is ready\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n-            () ->   Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0).getType().equals(\"Ready\") &&\n-                Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0).getStatus().equals(\"True\")\n+            () ->   condition.getType().equals(\"Ready\") && condition.getStatus().equals(\"True\")\n         );\n         LOGGER.info(\"Kafka CR will be ready\");\n     }\n \n-    public static void waitUntilKafkaStatusConditionIsPresent(String clusterName) {\n-        LOGGER.info(\"Waiting till kafka resource status is present\");\n-        TestUtils.waitFor(\"Waiting for Kafka resource status is ready\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n-            () ->  Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0) != null\n+    public static void waitUntilKafkaStatusConditionIsNotReady(String clusterName) throws InterruptedException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNjgwOA=="}, "originalCommit": {"oid": "22b793610888c042d033cb21731c3864065349e3"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQzMjA3NQ==", "bodyText": "Wait ... that is silly solution. They way this works is following:\n\nWhen you deploy the new resource we first thing off set a new status that we are deploying with NotReady=true.\nWe start the reconciliation\nIn this case, we fail pretty quickly because of configuration error and set the status to NotReady=true with new message.\n\nNow I can see why the 1000ms sleep helps you. But\n\nIt might not be always 1000ms.\nNot in every case this is needed. If you would have usecase which tests some NotReady=true state on running cluster, this 1000ms sleeep would be useless because the initial state would be not invovled.\n\nSo I think you should do one of these:\n\nMove the sleep into the test cases from the wait method (still kind stupid)\nChange the method to something liek waitForNotReadyAndMessage and not wait just for the NotReady state but also for some specific message to go with it.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2405#discussion_r369432075", "createdAt": "2020-01-22T08:50:58Z", "author": {"login": "scholzj"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaUtils.java", "diffHunk": "@@ -27,19 +28,23 @@ private KafkaUtils() {}\n \n     public static void waitUntilKafkaCRIsReady(String clusterName) {\n         LOGGER.info(\"Waiting till Kafka CR will be ready\");\n+        Condition condition = Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0);\n+\n         TestUtils.waitFor(\"Waiting for Kafka resource status is ready\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n-            () ->   Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0).getType().equals(\"Ready\") &&\n-                Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0).getStatus().equals(\"True\")\n+            () ->   condition.getType().equals(\"Ready\") && condition.getStatus().equals(\"True\")\n         );\n         LOGGER.info(\"Kafka CR will be ready\");\n     }\n \n-    public static void waitUntilKafkaStatusConditionIsPresent(String clusterName) {\n-        LOGGER.info(\"Waiting till kafka resource status is present\");\n-        TestUtils.waitFor(\"Waiting for Kafka resource status is ready\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n-            () ->  Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0) != null\n+    public static void waitUntilKafkaStatusConditionIsNotReady(String clusterName) throws InterruptedException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNjgwOA=="}, "originalCommit": {"oid": "22b793610888c042d033cb21731c3864065349e3"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ1NTA3Mg==", "bodyText": "I modify method with also waiting on concrete message and it seems that everything is correct. Thanks :)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2405#discussion_r369455072", "createdAt": "2020-01-22T09:40:55Z", "author": {"login": "see-quick"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaUtils.java", "diffHunk": "@@ -27,19 +28,23 @@ private KafkaUtils() {}\n \n     public static void waitUntilKafkaCRIsReady(String clusterName) {\n         LOGGER.info(\"Waiting till Kafka CR will be ready\");\n+        Condition condition = Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0);\n+\n         TestUtils.waitFor(\"Waiting for Kafka resource status is ready\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n-            () ->   Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0).getType().equals(\"Ready\") &&\n-                Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0).getStatus().equals(\"True\")\n+            () ->   condition.getType().equals(\"Ready\") && condition.getStatus().equals(\"True\")\n         );\n         LOGGER.info(\"Kafka CR will be ready\");\n     }\n \n-    public static void waitUntilKafkaStatusConditionIsPresent(String clusterName) {\n-        LOGGER.info(\"Waiting till kafka resource status is present\");\n-        TestUtils.waitFor(\"Waiting for Kafka resource status is ready\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n-            () ->  Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0) != null\n+    public static void waitUntilKafkaStatusConditionIsNotReady(String clusterName) throws InterruptedException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNjgwOA=="}, "originalCommit": {"oid": "22b793610888c042d033cb21731c3864065349e3"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzU2NDYzOnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMDoxNToyMFrOFgW2cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMDoxNToyMFrOFgW2cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ3MzEzNg==", "bodyText": "A nit pick, maybe you can add the message to the log message here and to the message on line 44. But that is just a detail.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2405#discussion_r369473136", "createdAt": "2020-01-22T10:15:20Z", "author": {"login": "scholzj"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaUtils.java", "diffHunk": "@@ -25,21 +26,29 @@\n \n     private KafkaUtils() {}\n \n-    public static void waitUntilKafkaCRIsReady(String clusterName) {\n+    public static void waitUntilKafkaStatusConditionIsReady(String clusterName) {\n         LOGGER.info(\"Waiting till Kafka CR will be ready\");\n+\n         TestUtils.waitFor(\"Waiting for Kafka resource status is ready\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n-            () ->   Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0).getType().equals(\"Ready\") &&\n-                Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0).getStatus().equals(\"True\")\n+            () ->  {\n+                Condition condition = Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0);\n+                return condition.getType().equals(\"Ready\") && condition.getStatus().equals(\"True\");\n+            }\n         );\n         LOGGER.info(\"Kafka CR will be ready\");\n     }\n \n-    public static void waitUntilKafkaStatusConditionIsPresent(String clusterName) {\n-        LOGGER.info(\"Waiting till kafka resource status is present\");\n-        TestUtils.waitFor(\"Waiting for Kafka resource status is ready\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n-            () ->  Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0) != null\n+    public static void waitUntilKafkaStatusConditionIsNotReady(String clusterName, String message) {\n+        LOGGER.info(\"Waiting till kafka resource status is not ready\");\n+\n+        TestUtils.waitFor(\"Waiting for Kafka resource status is not ready\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n+            () ->  {\n+                Condition condition = Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0);\n+                LOGGER.info(\"Type:{}, Status:{}, Message:{}\", condition.getType(), condition.getStatus(), condition.getMessage());\n+                return condition.getType().equals(\"NotReady\") && condition.getStatus().equals(\"True\") && condition.getMessage().contains(message);\n+            }\n         );\n-        LOGGER.info(\"Kafka resource status is present\");\n+        LOGGER.info(\"Kafka resource status is not ready\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecbbaaa26077f6c04581ecee96a08bc32986afe2"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 609, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}