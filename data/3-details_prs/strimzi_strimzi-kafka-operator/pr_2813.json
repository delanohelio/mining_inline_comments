{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxMDYxMzAx", "number": 2813, "title": "[systemtest][refactor] CRs and ST refactor", "bodyText": "Signed-off-by: Lukas Kral lkral@redhat.com\nType of change\n\nRefactoring\n\nDescription\nThis PR refactors our Utils classes and all STs.\nFirst thing is adding wait methods for each CR and not using only DeploymentUtils - now it will be more clear what to use. I'm also removing unnecessary waits for CR creation from tests - this waits are implemented to deploy methods, so there is no reason to have more waits for CR to be ready.\nI changed all Crds operations from tests and Utils classes to client for each CR.\nTODO list:\n[\u2714] Remove Crds operations from resource classes\n[\u2714] Add statuses to CRs classes\n[\u2714] Change waits in CRs creation\n[\u2714] Change all methods in STs\n\nChecklist\n\n Make sure all tests pass", "createdAt": "2020-04-08T20:23:42Z", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2813", "merged": true, "mergeCommit": {"oid": "b305a7e185772f3b657b827471b8283dcc4b0846"}, "closed": true, "closedAt": "2020-04-27T20:55:49Z", "author": {"login": "im-konge"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcV6i2VgFqTM5MDY5Njc5Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcbyACgAH2gAyNDAxMDYxMzAxOjUwYmRkODUxYThkMzVhYzczOWY5MDU1OGQxZWY3Y2UzZDk0NGRhOWM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNjk2Nzk3", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2813#pullrequestreview-390696797", "createdAt": "2020-04-09T11:06:31Z", "commit": {"oid": "ca89bfece7cdd53ce129acebfa9b2ef00872db8b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMTowNjozMlrOGDUGQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMTowODozMlrOGDUJ7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEyODE5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static void waitForKafkaBridgeIsReady(String clusterName, int expectPods) {\n          \n          \n            \n                public static void waitForKafkaBridgePodIsReady(String clusterName, int expectPods) {\n          \n      \n    \n    \n  \n\nThis is maybe a thing that we can take into consideration. I think this could be generalized on the more abstract way. For instance, create a generic method in the PodUtils? What do you think @Frawless  ?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2813#discussion_r406128194", "createdAt": "2020-04-09T11:06:32Z", "author": {"login": "see-quick"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaBridgeUtils.java", "diffHunk": "@@ -64,11 +68,40 @@ public static void checkSendResponse(JsonObject response, int messageCount) {\n         }\n     }\n \n-    public static void waitUntilKafkaBridgeStatus(String clusterName, String state) {\n+    /**\n+     * Wait until KafkaBridge is in desired state\n+     * @param clusterName name of KafkaBridge cluster\n+     * @param state desired state\n+     */\n+    public static void waitForKafkaBridgeStatus(String clusterName, String state) {\n         LOGGER.info(\"Waiting till Kafka Bridge CR will be in state: {}\", state);\n         TestUtils.waitFor(\"Waiting for Kafka resource status is: \" + state, Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n-            () -> KafkaBridgeResource.kafkaBridgeClient().inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0).getType().equals(state)\n+            () -> kafkaBridgeClient().inNamespace(namespace).withName(clusterName).get().getStatus().getConditions().get(0).getType().equals(state),\n+            () -> StUtils.logCurrentStatus(kafkaBridgeClient().inNamespace(namespace).withName(clusterName).get())\n         );\n         LOGGER.info(\"Kafka Bridge CR is in state: {}\", state);\n     }\n+\n+    public static void waitForKafkaBridgeIsReady(String clusterName) {\n+        waitForKafkaBridgeStatus(clusterName, \"Ready\");\n+    }\n+\n+    public static void waitForKafkaBridgeIsNotReady(String clusterName) {\n+        waitForKafkaBridgeStatus(clusterName, \"NotReady\");\n+    }\n+\n+    /**\n+     * Wait until KafkaBridge and its pods will be in Ready state\n+     * @param clusterName name of KafkaBridge cluster\n+     * @param expectPods number of expected pods to be ready\n+     */\n+    public static void waitForKafkaBridgeIsReady(String clusterName, int expectPods) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca89bfece7cdd53ce129acebfa9b2ef00872db8b"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEyOTEzMg==", "bodyText": "same here..This is related to the Kubernetes Pod Object not the Connect itself.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2813#discussion_r406129132", "createdAt": "2020-04-09T11:08:32Z", "author": {"login": "see-quick"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaConnectUtils.java", "diffHunk": "@@ -5,36 +5,58 @@\n package io.strimzi.systemtest.utils.kafkaUtils;\n \n import io.strimzi.systemtest.Constants;\n-import io.strimzi.systemtest.resources.crd.KafkaConnectResource;\n+import io.strimzi.systemtest.utils.StUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n import io.strimzi.test.TestUtils;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n \n+import static io.strimzi.systemtest.resources.crd.KafkaConnectResource.kafkaConnectClient;\n import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n \n public class KafkaConnectUtils {\n \n     private static final Logger LOGGER = LogManager.getLogger(KafkaConnectUtils.class);\n+    private static String namespace = kubeClient().getNamespace();\n \n     private KafkaConnectUtils() {}\n \n-    public static void createFileSinkConnector(String podName, String topicName, String sinkFileName, String apiUrl) {\n-        cmdKubeClient().execInPod(podName, \"/bin/bash\", \"-c\",\n-            \"curl -X POST -H \\\"Content-Type: application/json\\\" \" + \"--data '{ \\\"name\\\": \\\"sink-test\\\", \" +\n-                \"\\\"config\\\": \" + \"{ \\\"connector.class\\\": \\\"FileStreamSink\\\", \" +\n-                \"\\\"tasks.max\\\": \\\"1\\\", \\\"topics\\\": \\\"\" + topicName + \"\\\",\" + \" \\\"file\\\": \\\"\" + sinkFileName + \"\\\" } }' \" +\n-                    apiUrl + \"/connectors\"\n-        );\n+    /**\n+     * Wait until the given Kafka Connect is in desired state.\n+     * @param clusterName name of KafkaConnect cluster\n+     * @param status desired state\n+     */\n+    public static void waitForConnectStatus(String clusterName, String status) {\n+        LOGGER.info(\"Waiting for Kafka Connect {} state: {}\", clusterName, status);\n+        TestUtils.waitFor(\"Kafka Connect \" + clusterName + \" state: \" + status, Constants.POLL_INTERVAL_FOR_RESOURCE_READINESS, Constants.TIMEOUT_FOR_RESOURCE_READINESS,\n+            () -> kafkaConnectClient().inNamespace(namespace).withName(clusterName).get().getStatus().getConditions().get(0).getType().equals(status),\n+            () -> StUtils.logCurrentStatus(kafkaConnectClient().inNamespace(namespace).withName(clusterName).get()));\n+        LOGGER.info(\"Kafka Connect {} is in desired state: {}\", clusterName, status);\n     }\n \n-    public static void waitForConnectStatus(String name, String status) {\n-        LOGGER.info(\"Waiting for Kafka Connect {} state: {}\", name, status);\n-        TestUtils.waitFor(\"Kafka Connect \" + name + \" state: \" + status, Constants.POLL_INTERVAL_FOR_RESOURCE_READINESS, Constants.TIMEOUT_FOR_RESOURCE_READINESS,\n-            () -> KafkaConnectResource.kafkaConnectClient().inNamespace(kubeClient().getNamespace()).withName(name).get().getStatus().getConditions().get(0).getType().equals(status));\n-        LOGGER.info(\"Kafka Connect {} is in desired state: {}\", name, status);\n+    public static void waitForConnectIsReady(String clusterName) {\n+        waitForConnectStatus(clusterName, \"Ready\");\n     }\n \n+    public static void waitForConnectIsNotReady(String clusterName) {\n+        waitForConnectStatus(clusterName, \"NotReady\");\n+    }\n+\n+    /**\n+     * Wait until KafkaConnect and its pods to be in Ready state\n+     * @param clusterName name of KafkaConnect cluster\n+     * @param expectPods expected pods to be ready\n+     */\n+    public static void waitForConnectIsReady(String clusterName, int expectPods) {\n+        waitForConnectIsReady(clusterName);\n+        LOGGER.info(\"Wait for KafkaConnect pods to be ready\");\n+        PodUtils.waitForPodsReady(kubeClient().getDeploymentSelectors(clusterName), expectPods, true,\n+            () -> StUtils.logCurrentStatus(kafkaConnectClient().inNamespace(namespace).withName(clusterName).get()));\n+        LOGGER.info(\"Expected pods are ready\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca89bfece7cdd53ce129acebfa9b2ef00872db8b"}, "originalPosition": 66}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ca89bfece7cdd53ce129acebfa9b2ef00872db8b", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ca89bfece7cdd53ce129acebfa9b2ef00872db8b", "committedDate": "2020-04-08T20:17:54Z", "message": "refactor all cr resources classes and sts\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}, "afterCommit": {"oid": "36bae195c208e87a276361785fceaec1efaa64f7", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/36bae195c208e87a276361785fceaec1efaa64f7", "committedDate": "2020-04-22T15:24:37Z", "message": "refactor all cr resources classes and sts\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NDYxMTM5", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2813#pullrequestreview-398461139", "createdAt": "2020-04-22T18:24:03Z", "commit": {"oid": "494e94370b6388575ac1aeb0152fc08ab9e0f9a2"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODoyNDowNFrOGKEuLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODoyNDowNFrOGKEuLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIxNjMwMg==", "bodyText": "The capitalization of S2IIs is a ugly! Maybe it should be S2iIs, or maybe just drop the Is entirely (I guess for this and all the other IsReady/IsNotReady methods?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2813#discussion_r413216302", "createdAt": "2020-04-22T18:24:04Z", "author": {"login": "tombentley"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaConnectS2IUtils.java", "diffHunk": "@@ -5,43 +5,54 @@\n package io.strimzi.systemtest.utils.kafkaUtils;\n \n import io.strimzi.systemtest.Constants;\n-import io.strimzi.systemtest.resources.crd.KafkaConnectS2IResource;\n import io.strimzi.systemtest.utils.StUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n import io.strimzi.test.TestUtils;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n \n+import static io.strimzi.systemtest.resources.crd.KafkaConnectS2IResource.kafkaConnectS2IClient;\n import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n \n public class KafkaConnectS2IUtils {\n \n     private static final Logger LOGGER = LogManager.getLogger(KafkaConnectS2IUtils.class);\n+    private static String namespace = kubeClient().getNamespace();\n \n     private KafkaConnectS2IUtils() {}\n \n     /**\n      * Wait until the given Kafka Connect S2I cluster is in desired state.\n-     * @param name The name of the Kafka Connect S2I cluster.\n+     * @param clusterName The name of the Kafka Connect S2I cluster.\n      * @param status desired status value\n      */\n-    public static void waitForConnectS2IStatus(String name, String status) {\n-        LOGGER.info(\"Waiting for Kafka Connect S2I {} state: {}\", name, status);\n-        TestUtils.waitFor(\"Kafka Connect S2I \" + name + \" state: \" + status, Constants.POLL_INTERVAL_FOR_RESOURCE_READINESS, Constants.TIMEOUT_FOR_RESOURCE_READINESS,\n-            () -> KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(kubeClient().getNamespace())\n-                    .withName(name).get().getStatus().getConditions().get(0).getType().equals(status),\n-            () -> StUtils.logCurrentStatus(KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(kubeClient().getNamespace()).withName(name).get()));\n-        LOGGER.info(\"Kafka Connect S2I {} is in desired state: {}\", name, status);\n+    public static void waitForConnectS2IStatus(String clusterName, String status) {\n+        LOGGER.info(\"Waiting for Kafka Connect S2I {} state: {}\", clusterName, status);\n+        TestUtils.waitFor(\"Kafka Connect S2I \" + clusterName + \" state: \" + status, Constants.POLL_INTERVAL_FOR_RESOURCE_READINESS, Constants.TIMEOUT_FOR_RESOURCE_READINESS,\n+            () -> kafkaConnectS2IClient().inNamespace(namespace)\n+                    .withName(clusterName).get().getStatus().getConditions().get(0).getType().equals(status),\n+            () -> StUtils.logCurrentStatus(kafkaConnectS2IClient().inNamespace(namespace).withName(clusterName).get()));\n+        LOGGER.info(\"Kafka Connect S2I {} is in desired state: {}\", clusterName, status);\n     }\n \n-    public static void waitForRebalancingDone(String name) {\n-        LOGGER.info(\"Waiting for Kafka Connect S2I {} to rebalance\", name);\n-        TestUtils.waitFor(\"Kafka Connect S2I rebalancing\", Constants.POLL_INTERVAL_FOR_RESOURCE_READINESS, Constants.TIMEOUT_FOR_RESOURCE_READINESS,\n-            () -> {\n-                String connect = kubeClient().listPodNames(\"strimzi.io/kind\", \"KafkaConnectS2I\").get(0);\n-                String log = kubeClient().logs(connect);\n-                // wait for second occurrence of message about finished rebalancing\n-                return (log.length() - log.replace(\"Finished starting connectors and tasks\", \"\").length()) / \"Finished starting connectors and tasks\".length() == 2;\n-            });\n-        LOGGER.info(\"Kafka Connect S2I {} rebalanced\", name);\n+    public static void waitForConnectS2IIsReady(String clusterName) {\n+        waitForConnectS2IStatus(clusterName, \"Ready\");\n+    }\n+\n+    public static void waitForConnectS2IIsNotReady(String clusterName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "494e94370b6388575ac1aeb0152fc08ab9e0f9a2"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NTk0ODcz", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2813#pullrequestreview-398594873", "createdAt": "2020-04-22T21:15:06Z", "commit": {"oid": "05775b3423f6508e127fd7cb4ccdd73f84036d06"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMToxNTowNlrOGKMJnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMToxNjo1M1rOGKMOGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMzODAxMg==", "bodyText": "You seem to have two methods waitForKafkaBridgeReady and one waitForKafkaBridgeNotReady. But each works a bit differently -> one checks the pods and KafkaBridge status and one checks the CR status only. Wouldn't that be confusing when using it?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2813#discussion_r413338012", "createdAt": "2020-04-22T21:15:06Z", "author": {"login": "scholzj"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaBridgeUtils.java", "diffHunk": "@@ -64,11 +68,40 @@ public static void checkSendResponse(JsonObject response, int messageCount) {\n         }\n     }\n \n-    public static void waitUntilKafkaBridgeStatus(String clusterName, String state) {\n+    /**\n+     * Wait until KafkaBridge is in desired state\n+     * @param clusterName name of KafkaBridge cluster\n+     * @param state desired state\n+     */\n+    public static void waitForKafkaBridgeStatus(String clusterName, String state) {\n         LOGGER.info(\"Waiting till Kafka Bridge CR will be in state: {}\", state);\n         TestUtils.waitFor(\"Waiting for Kafka resource status is: \" + state, Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n-            () -> KafkaBridgeResource.kafkaBridgeClient().inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0).getType().equals(state)\n+            () -> kafkaBridgeClient().inNamespace(namespace).withName(clusterName).get().getStatus().getConditions().get(0).getType().equals(state),\n+            () -> StUtils.logCurrentStatus(kafkaBridgeClient().inNamespace(namespace).withName(clusterName).get())\n         );\n         LOGGER.info(\"Kafka Bridge CR is in state: {}\", state);\n     }\n+\n+    public static void waitForKafkaBridgeReady(String clusterName) {\n+        waitForKafkaBridgeStatus(clusterName, \"Ready\");\n+    }\n+\n+    public static void waitForKafkaBridgeNotReady(String clusterName) {\n+        waitForKafkaBridgeStatus(clusterName, \"NotReady\");\n+    }\n+\n+    /**\n+     * Wait until KafkaBridge and its pods will be in Ready state\n+     * @param clusterName name of KafkaBridge cluster\n+     * @param expectPods number of expected pods to be ready\n+     */\n+    public static void waitForKafkaBridgeReady(String clusterName, int expectPods) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05775b3423f6508e127fd7cb4ccdd73f84036d06"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMzODM3Nw==", "bodyText": "Should this pass the replicas as well to check the pods as it was doing before?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2813#discussion_r413338377", "createdAt": "2020-04-22T21:15:45Z", "author": {"login": "scholzj"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaBridgeResource.java", "diffHunk": "@@ -93,7 +92,7 @@ private static KafkaBridge waitFor(KafkaBridge kafkaBridge) {\n         String kafkaBridgeCrName = kafkaBridge.getMetadata().getName();\n \n         LOGGER.info(\"Waiting for Kafka Bridge {}\", kafkaBridgeCrName);\n-        DeploymentUtils.waitForDeploymentReady(KafkaBridgeResources.deploymentName(kafkaBridgeCrName), kafkaBridge.getSpec().getReplicas());\n+        KafkaBridgeUtils.waitForKafkaBridgeReady(kafkaBridgeCrName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05775b3423f6508e127fd7cb4ccdd73f84036d06"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMzOTE2Mw==", "bodyText": "Same as above -> this looks like repeated pattern.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2813#discussion_r413339163", "createdAt": "2020-04-22T21:16:53Z", "author": {"login": "scholzj"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaConnectS2IUtils.java", "diffHunk": "@@ -5,43 +5,54 @@\n package io.strimzi.systemtest.utils.kafkaUtils;\n \n import io.strimzi.systemtest.Constants;\n-import io.strimzi.systemtest.resources.crd.KafkaConnectS2IResource;\n import io.strimzi.systemtest.utils.StUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n import io.strimzi.test.TestUtils;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n \n+import static io.strimzi.systemtest.resources.crd.KafkaConnectS2IResource.kafkaConnectS2IClient;\n import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n \n public class KafkaConnectS2IUtils {\n \n     private static final Logger LOGGER = LogManager.getLogger(KafkaConnectS2IUtils.class);\n+    private static String namespace = kubeClient().getNamespace();\n \n     private KafkaConnectS2IUtils() {}\n \n     /**\n      * Wait until the given Kafka Connect S2I cluster is in desired state.\n-     * @param name The name of the Kafka Connect S2I cluster.\n+     * @param clusterName The name of the Kafka Connect S2I cluster.\n      * @param status desired status value\n      */\n-    public static void waitForConnectS2IStatus(String name, String status) {\n-        LOGGER.info(\"Waiting for Kafka Connect S2I {} state: {}\", name, status);\n-        TestUtils.waitFor(\"Kafka Connect S2I \" + name + \" state: \" + status, Constants.POLL_INTERVAL_FOR_RESOURCE_READINESS, Constants.TIMEOUT_FOR_RESOURCE_READINESS,\n-            () -> KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(kubeClient().getNamespace())\n-                    .withName(name).get().getStatus().getConditions().get(0).getType().equals(status),\n-            () -> StUtils.logCurrentStatus(KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(kubeClient().getNamespace()).withName(name).get()));\n-        LOGGER.info(\"Kafka Connect S2I {} is in desired state: {}\", name, status);\n+    public static void waitForConnectS2IStatus(String clusterName, String status) {\n+        LOGGER.info(\"Waiting for Kafka Connect S2I {} state: {}\", clusterName, status);\n+        TestUtils.waitFor(\"Kafka Connect S2I \" + clusterName + \" state: \" + status, Constants.POLL_INTERVAL_FOR_RESOURCE_READINESS, Constants.TIMEOUT_FOR_RESOURCE_READINESS,\n+            () -> kafkaConnectS2IClient().inNamespace(namespace)\n+                    .withName(clusterName).get().getStatus().getConditions().get(0).getType().equals(status),\n+            () -> StUtils.logCurrentStatus(kafkaConnectS2IClient().inNamespace(namespace).withName(clusterName).get()));\n+        LOGGER.info(\"Kafka Connect S2I {} is in desired state: {}\", clusterName, status);\n     }\n \n-    public static void waitForRebalancingDone(String name) {\n-        LOGGER.info(\"Waiting for Kafka Connect S2I {} to rebalance\", name);\n-        TestUtils.waitFor(\"Kafka Connect S2I rebalancing\", Constants.POLL_INTERVAL_FOR_RESOURCE_READINESS, Constants.TIMEOUT_FOR_RESOURCE_READINESS,\n-            () -> {\n-                String connect = kubeClient().listPodNames(\"strimzi.io/kind\", \"KafkaConnectS2I\").get(0);\n-                String log = kubeClient().logs(connect);\n-                // wait for second occurrence of message about finished rebalancing\n-                return (log.length() - log.replace(\"Finished starting connectors and tasks\", \"\").length()) / \"Finished starting connectors and tasks\".length() == 2;\n-            });\n-        LOGGER.info(\"Kafka Connect S2I {} rebalanced\", name);\n+    public static void waitForConnectS2IReady(String clusterName) {\n+        waitForConnectS2IStatus(clusterName, \"Ready\");\n+    }\n+\n+    public static void waitForConnectS2INotReady(String clusterName) {\n+        waitForConnectS2IStatus(clusterName, \"NotReady\");\n+    }\n+\n+    /**\n+     * Wait until KafkaConnectS2I and its pods to be in Ready state\n+     * @param clusterName name of KafkaConnectS2I cluster\n+     * @param expectPods expected number of pods to be ready\n+     */\n+    public static void waitForConnectS2IReady(String clusterName, int expectPods) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05775b3423f6508e127fd7cb4ccdd73f84036d06"}, "originalPosition": 66}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "05775b3423f6508e127fd7cb4ccdd73f84036d06", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/05775b3423f6508e127fd7cb4ccdd73f84036d06", "committedDate": "2020-04-22T19:04:46Z", "message": "removing 'is' from method names\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}, "afterCommit": {"oid": "fb3807f8f48dd8bb2e102068923cce93ada70115", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/fb3807f8f48dd8bb2e102068923cce93ada70115", "committedDate": "2020-04-23T18:23:09Z", "message": "fixup! fixup! removing 'is' from method names\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NzM5Mjc3", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2813#pullrequestreview-399739277", "createdAt": "2020-04-24T08:23:18Z", "commit": {"oid": "59d4de574fb5f5e27efc4fc303afab0710c11664"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "59d4de574fb5f5e27efc4fc303afab0710c11664", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/59d4de574fb5f5e27efc4fc303afab0710c11664", "committedDate": "2020-04-23T18:45:20Z", "message": "fixup! fixup! fixup! removing 'is' from method names\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}, "afterCommit": {"oid": "b0107d7d1be35cb566c641edf0db206955566b5f", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b0107d7d1be35cb566c641edf0db206955566b5f", "committedDate": "2020-04-24T11:11:21Z", "message": "remove big slip from utils classes\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMzcwMTk0", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2813#pullrequestreview-400370194", "createdAt": "2020-04-25T07:52:33Z", "commit": {"oid": "51481c2a014cf31159c33f0b985677725e41fd7a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0cf483d1aa73bc4fb8329bd1424da0673e13e93", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d0cf483d1aa73bc4fb8329bd1424da0673e13e93", "committedDate": "2020-04-27T08:11:47Z", "message": "refactor all cr resources classes and sts\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd70dcc298a47e5bae7664271788f1649211ce94", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/cd70dcc298a47e5bae7664271788f1649211ce94", "committedDate": "2020-04-27T08:11:47Z", "message": "removing unnecessary waits and waits for pods from CR creation\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "620f6cc30b69b5314d1b69b68976c90b0ecba1ec", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/620f6cc30b69b5314d1b69b68976c90b0ecba1ec", "committedDate": "2020-04-27T08:11:47Z", "message": "remove unnecessary exceptions from tests\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea233365ef7c3c6d77a6ee50af19c83b3f2d0811", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ea233365ef7c3c6d77a6ee50af19c83b3f2d0811", "committedDate": "2020-04-27T08:11:47Z", "message": "removing 'is' from method names\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b0f6bf9c85376efb177d8608aeddd648f9b6c9d", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3b0f6bf9c85376efb177d8608aeddd648f9b6c9d", "committedDate": "2020-04-27T08:11:47Z", "message": "fixup! removing 'is' from method names\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88f4f5bd1d9446f9c42074e55f2005dabb223360", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/88f4f5bd1d9446f9c42074e55f2005dabb223360", "committedDate": "2020-04-27T08:11:47Z", "message": "fixup! fixup! removing 'is' from method names\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0c32b1bea2c0caa779c6209ddbcdb5455f9a2f0", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d0c32b1bea2c0caa779c6209ddbcdb5455f9a2f0", "committedDate": "2020-04-27T08:11:47Z", "message": "fixup! fixup! fixup! removing 'is' from method names\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec45263389fe43fa6c1db2d891e9321c5d0d4988", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ec45263389fe43fa6c1db2d891e9321c5d0d4988", "committedDate": "2020-04-27T08:11:47Z", "message": "remove big slip from utils classes\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fddf5c2390198caea27692f3208b5579f0ed13bd", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/fddf5c2390198caea27692f3208b5579f0ed13bd", "committedDate": "2020-04-27T08:11:47Z", "message": "fix another slip\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18b65af06096945b54df72e83d796449e3c5b3f2", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/18b65af06096945b54df72e83d796449e3c5b3f2", "committedDate": "2020-04-27T08:11:47Z", "message": "fixup! fix another slip\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "51481c2a014cf31159c33f0b985677725e41fd7a", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/51481c2a014cf31159c33f0b985677725e41fd7a", "committedDate": "2020-04-24T20:59:50Z", "message": "fix another slip\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}, "afterCommit": {"oid": "18b65af06096945b54df72e83d796449e3c5b3f2", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/18b65af06096945b54df72e83d796449e3c5b3f2", "committedDate": "2020-04-27T08:11:47Z", "message": "fixup! fix another slip\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNzI0NjU2", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2813#pullrequestreview-400724656", "createdAt": "2020-04-27T08:17:03Z", "commit": {"oid": "18b65af06096945b54df72e83d796449e3c5b3f2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50bdd851a8d35ac739f90558d1ef7ce3d944da9c", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/50bdd851a8d35ac739f90558d1ef7ce3d944da9c", "committedDate": "2020-04-27T16:37:20Z", "message": "fix testAppDomainLabels test\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1829, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}