{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNzUwMDMy", "number": 2732, "title": "[systemtest] Add test for enabling JSON format logging for components", "bodyText": "Signed-off-by: Lukas Kral lkral@redhat.com\nType of change\n\nEnhancement / new feature\n\nDescription\nThis PR adds new test for enabling JSON format logging for cluster operator, kafka, zookeeper, entity operator - topic-operator and user-operator.\nEverything was tested manually too.\nChecklist\n\n Write tests\n Make sure all tests pass", "createdAt": "2020-03-20T21:33:41Z", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2732", "merged": true, "mergeCommit": {"oid": "d4c7ff5f6d6902ed770101383da1eaf6ba22a602"}, "closed": true, "closedAt": "2020-03-23T23:29:05Z", "author": {"login": "im-konge"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQKjE3AFqTM3OTAxMDI4OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQbOH4ABqjMxNTQ0MzA5MDk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MDEwMjg4", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2732#pullrequestreview-379010288", "createdAt": "2020-03-22T14:26:14Z", "commit": {"oid": "7010013b94d164bb20e9d090aa3ca6a36258e8b6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MDE0ODg5", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2732#pullrequestreview-379014889", "createdAt": "2020-03-22T15:13:52Z", "commit": {"oid": "7010013b94d164bb20e9d090aa3ca6a36258e8b6"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxNToxMzo1M1rOF5wT3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxNToxMzo1M1rOF5wT3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEwNDY2OA==", "bodyText": "Maybe move to some utils since there is not assert? But I will leave it on you", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2732#discussion_r396104668", "createdAt": "2020-03-22T15:13:53Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/LogSettingST.java", "diffHunk": "@@ -290,6 +301,193 @@ void testKubectlGetStrimzi() {\n         assertThat(strimziCRs, containsString(topicName));\n     }\n \n+    @Test\n+    @Order(13)\n+    @SuppressWarnings({\"checkstyle:MethodLength\"})\n+    void testJSONFormatLogging() {\n+\n+        KafkaResource.kafkaClient().inNamespace(NAMESPACE).withName(GC_LOGGING_SET_NAME).delete();\n+\n+        Map<String, String> kafkaPods = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+        Map<String, String> zkPods = StatefulSetUtils.ssSnapshot(KafkaResources.zookeeperStatefulSetName(CLUSTER_NAME));\n+        Map<String, String> eoPods = DeploymentUtils.depSnapshot(KafkaResources.entityOperatorDeploymentName(CLUSTER_NAME));\n+\n+        String loggersConfigKafka = \"log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender\\n\" +\n+                \"log4j.appender.CONSOLE.layout=net.logstash.log4j.JSONEventLayoutV1\\n\" +\n+                \"kafka.root.logger.level=INFO\\n\" +\n+                \"log4j.rootLogger=${kafka.root.logger.level}, CONSOLE\\n\" +\n+                \"log4j.logger.org.I0Itec.zkclient.ZkClient=INFO\\n\" +\n+                \"log4j.logger.org.apache.zookeeper=INFO\\n\" +\n+                \"log4j.logger.kafka=INFO\\n\" +\n+                \"log4j.logger.org.apache.kafka=INFO\\n\" +\n+                \"log4j.logger.kafka.request.logger=WARN, CONSOLE\\n\" +\n+                \"log4j.logger.kafka.network.Processor=OFF\\n\" +\n+                \"log4j.logger.kafka.server.KafkaApis=OFF\\n\" +\n+                \"log4j.logger.kafka.network.RequestChannel$=WARN\\n\" +\n+                \"log4j.logger.kafka.controller=TRACE\\n\" +\n+                \"log4j.logger.kafka.log.LogCleaner=INFO\\n\" +\n+                \"log4j.logger.state.change.logger=TRACE\\n\" +\n+                \"log4j.logger.kafka.authorizer.logger=INFO\";\n+\n+        String loggersConfigOperators = \"appender.console.type=Console\\n\" +\n+                \"appender.console.name=STDOUT\\n\" +\n+                \"appender.console.layout.type=JsonLayout\\n\" +\n+                \"rootLogger.level=INFO\\n\" +\n+                \"rootLogger.appenderRefs=stdout\\n\" +\n+                \"rootLogger.appenderRef.console.ref=STDOUT\\n\" +\n+                \"rootLogger.additivity=false\";\n+\n+        String loggersConfigZookeeper = \"log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender\\n\" +\n+                \"log4j.appender.CONSOLE.layout=net.logstash.log4j.JSONEventLayoutV1\\n\" +\n+                \"zookeeper.root.logger=INFO\\n\" +\n+                \"log4j.rootLogger=${zookeeper.root.logger}, CONSOLE\";\n+\n+        String loggersConfigCO = \"name = COConfig\\n\" +\n+                \"appender.console.type = Console\\n\" +\n+                \"appender.console.name = STDOUT\\n\" +\n+                \"appender.console.layout.type = JsonLayout\\n\" +\n+                \"rootLogger.level = ${env:STRIMZI_LOG_LEVEL:-INFO}\\n\" +\n+                \"rootLogger.appenderRefs = stdout\\n\" +\n+                \"rootLogger.appenderRef.console.ref = STDOUT\\n\" +\n+                \"rootLogger.additivity = false\\n\" +\n+                \"logger.kafka.name = org.apache.kafka\\n\" +\n+                \"logger.kafka.level = ${env:STRIMZI_AC_LOG_LEVEL:-WARN}\\n\" +\n+                \"logger.kafka.additivity = false\";\n+\n+        String configMapOpName = \"json-layout-operators\";\n+        String configMapZookeeperName = \"json-layout-zookeeper\";\n+        String configMapKafkaName = \"json-layout-kafka\";\n+        String configMapCOName = \"json-layout-cluster-operator\";\n+\n+        ConfigMap configMapKafka = new ConfigMapBuilder()\n+                .withNewMetadata()\n+                    .withNewName(configMapKafkaName)\n+                    .withNamespace(NAMESPACE)\n+                .endMetadata()\n+                .addToData(\"log4j.properties\", loggersConfigKafka)\n+                .build();\n+\n+        ConfigMap configMapOperators = new ConfigMapBuilder()\n+                .withNewMetadata()\n+                    .withNewName(configMapOpName)\n+                    .withNamespace(NAMESPACE)\n+                .endMetadata()\n+                .addToData(\"log4j2.properties\", loggersConfigOperators)\n+                .build();\n+\n+        ConfigMap configMapZookeeper = new ConfigMapBuilder()\n+                .withNewMetadata()\n+                    .withNewName(configMapZookeeperName)\n+                    .withNamespace(NAMESPACE)\n+                .endMetadata()\n+                .addToData(\"log4j.properties\", loggersConfigZookeeper)\n+                .build();\n+\n+        ConfigMap configMapCO = new ConfigMapBuilder()\n+                .withNewMetadata()\n+                    .withNewName(configMapCOName)\n+                    .withNamespace(NAMESPACE)\n+                .endMetadata()\n+                .addToData(\"log4j2.properties\", loggersConfigCO)\n+                .build();\n+\n+        kubeClient().deleteDeployment(Constants.STRIMZI_DEPLOYMENT_NAME);\n+        ResourceManager.setClassResources();\n+        KubernetesResource.clusterOperator(NAMESPACE, Constants.CO_OPERATION_TIMEOUT_DEFAULT).done();\n+        ResourceManager.setMethodResources();\n+\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(configMapKafka);\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(configMapOperators);\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(configMapZookeeper);\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(configMapOperators);\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(configMapCO);\n+\n+        KubernetesResource.clusterOperator(NAMESPACE)\n+                .editOrNewSpec()\n+                    .editOrNewTemplate()\n+                        .editOrNewSpec()\n+                            .addNewVolume()\n+                                .withName(\"logging-config-volume\")\n+                                .editOrNewConfigMap()\n+                                    .withName(configMapCOName)\n+                                .endConfigMap()\n+                            .endVolume()\n+                            .editFirstContainer()\n+                                .withVolumeMounts(new VolumeMountBuilder().withName(\"logging-config-volume\").withMountPath(\"/tmp/log-config-map-file\").build())\n+                                .addToEnv(new EnvVarBuilder().withName(\"JAVA_OPTS\").withValue(\"-Dlog4j2.configurationFile=file:/tmp/log-config-map-file/log4j2.properties\").build())\n+                            .endContainer()\n+                        .endSpec()\n+                    .endTemplate()\n+                .endSpec()\n+                .done();\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+\n+            kafka.getSpec().getKafka().getJvmOptions().setGcLoggingEnabled(false);\n+            kafka.getSpec().getZookeeper().getJvmOptions().setGcLoggingEnabled(false);\n+            kafka.getSpec().getEntityOperator().getUserOperator().getJvmOptions().setGcLoggingEnabled(false);\n+            kafka.getSpec().getEntityOperator().getTopicOperator().getJvmOptions().setGcLoggingEnabled(false);\n+\n+            kafka.getSpec().getKafka()\n+                    .setLogging(new ExternalLoggingBuilder()\n+                        .withName(configMapKafkaName).build());\n+\n+            kafka.getSpec().getZookeeper().setLogging(new ExternalLoggingBuilder()\n+                    .withName(configMapZookeeperName)\n+                    .build());\n+\n+            kafka.getSpec().getEntityOperator().getTopicOperator().setLogging(new ExternalLoggingBuilder()\n+                    .withName(configMapOpName)\n+                    .build());\n+\n+            kafka.getSpec().getEntityOperator().getUserOperator().setLogging(new ExternalLoggingBuilder()\n+                    .withName(configMapOpName)\n+                    .build());\n+\n+        });\n+\n+        zkPods = StatefulSetUtils.waitTillSsHasRolled(KafkaResources.zookeeperStatefulSetName(CLUSTER_NAME), 1, zkPods);\n+        kafkaPods = StatefulSetUtils.waitTillSsHasRolled(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME), 3, kafkaPods);\n+        eoPods = DeploymentUtils.waitTillDepHasRolled(KafkaResources.entityOperatorDeploymentName(CLUSTER_NAME), 1, eoPods);\n+\n+        TestUtils.waitFor(\"Logs in CO\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT, () -> {\n+            String clusterOperatorName = kubeClient().listPodsByPrefixInName(\"strimzi-cluster-operator\").get(0).getMetadata().getName();\n+            String logs = \"{\" + kubeClient().logs(clusterOperatorName).split(\"\\\\+(.*?)\\\\n\\\\{\")[1];\n+            try {\n+                new JsonObject(logs);\n+                LOGGER.info(\"JSON format logging successfully set for {}\", clusterOperatorName);\n+                return true;\n+            } catch (Exception e) {\n+                LOGGER.info(\"Failed to set JSON format logging for {}\", clusterOperatorName);\n+                return false;\n+            }\n+        });\n+\n+        assertThat(checkLogForJSONFormat(kafkaPods, \"kafka\"), is(true));\n+        assertThat(checkLogForJSONFormat(zkPods, \"zookeeper\"), is(true));\n+        assertThat(checkLogForJSONFormat(eoPods, \"topic-operator\"), is(true));\n+        assertThat(checkLogForJSONFormat(eoPods, \"user-operator\"), is(true));\n+    }\n+\n+    private boolean checkLogForJSONFormat(Map<String, String> pods, String containerName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7010013b94d164bb20e9d090aa3ca6a36258e8b6"}, "originalPosition": 215}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "40fd3c26aa5d82a9cc2281ea6bccbbb0eea1f655", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/40fd3c26aa5d82a9cc2281ea6bccbbb0eea1f655", "committedDate": "2020-03-22T21:06:30Z", "message": "fixup! add test for checking json logging\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}, "afterCommit": {"oid": "4c1ab7965915bbc736c3ac47851f736cd2e08fa2", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/4c1ab7965915bbc736c3ac47851f736cd2e08fa2", "committedDate": "2020-03-22T21:22:56Z", "message": "fixup! add test for checking json logging\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MTkyOTYy", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2732#pullrequestreview-379192962", "createdAt": "2020-03-23T07:53:02Z", "commit": {"oid": "4c1ab7965915bbc736c3ac47851f736cd2e08fa2"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNzo1MzowM1rOF556xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNzo1MzowM1rOF556xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI2MjA4NQ==", "bodyText": "There's no need to create podNames AFAICS. You just want to iterate over all the pod names, which you can do using for (String podName : pods.keySet()) { ... }.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2732#discussion_r396262085", "createdAt": "2020-03-23T07:53:03Z", "author": {"login": "tombentley"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/StUtils.java", "diffHunk": "@@ -226,4 +226,23 @@ public static JsonArray expectedServiceDiscoveryInfo(String plainAuth, String tl\n         jsonArray.add(expectedServiceDiscoveryInfo(9093, \"kafka\", tlsAuth).getValue(0));\n         return jsonArray;\n     }\n+\n+    public static boolean checkLogForJSONFormat(Map<String, String> pods, String containerName) {\n+        List<String> podNames = new ArrayList<>(pods.keySet());\n+        boolean isJSON = false;\n+\n+        for (String podName : podNames) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c1ab7965915bbc736c3ac47851f736cd2e08fa2"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "394588c2581cc55b2a832639708a9aaeb9d7d357", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/394588c2581cc55b2a832639708a9aaeb9d7d357", "committedDate": "2020-03-23T08:43:01Z", "message": "add test for checking json logging\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0174c05b8a8dc667dcc9582c71f83ca77ff28a08", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/0174c05b8a8dc667dcc9582c71f83ca77ff28a08", "committedDate": "2020-03-23T09:51:27Z", "message": "fixup! add test for checking json logging\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4c1ab7965915bbc736c3ac47851f736cd2e08fa2", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/4c1ab7965915bbc736c3ac47851f736cd2e08fa2", "committedDate": "2020-03-22T21:22:56Z", "message": "fixup! add test for checking json logging\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}, "afterCommit": {"oid": "0174c05b8a8dc667dcc9582c71f83ca77ff28a08", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/0174c05b8a8dc667dcc9582c71f83ca77ff28a08", "committedDate": "2020-03-23T09:51:27Z", "message": "fixup! add test for checking json logging\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2107, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}