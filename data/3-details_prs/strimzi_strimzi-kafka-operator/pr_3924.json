{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MDEwMjkw", "number": 3924, "title": "[systemtest] Test for user's secret prefix", "bodyText": "Signed-off-by: Lukas Kral lukywill16@gmail.com\nType of change\n\nNew test\n\nDescription\nFrom #3849 we are able to specify prefixes for user's secrets. This is useful when we already have secrets with same name (like user name) and we want another -> so we simply add new secretPrefix to the User Operator.\nThis PR test #3333\nChecklist\n\n Write tests\n Make sure all tests pass", "createdAt": "2020-11-05T11:58:05Z", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3924", "merged": true, "mergeCommit": {"oid": "3c3f10783aafb7006d9e1c12ff86a9439b14a88a"}, "closed": true, "closedAt": "2020-11-12T09:27:07Z", "author": {"login": "im-konge"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZhB0qAH2gAyNTE2MDEwMjkwOmQxYTI5ZmZkZTQ4MDYzNGJiZGVlZjAxNTY4M2VkYTE2MjkxOGU4NjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdbvApTAFqTUyODg5MDY3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d1a29ffde480634bbdeef015683eda162918e862", "author": {"user": {"login": "im-konge", "name": "Luk\u00e1\u0161 Kr\u00e1l"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d1a29ffde480634bbdeef015683eda162918e862", "committedDate": "2020-11-05T11:54:12Z", "message": "add test for user secret prefix\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0MTkyMzI0", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3924#pullrequestreview-524192324", "createdAt": "2020-11-05T12:01:03Z", "commit": {"oid": "d1a29ffde480634bbdeef015683eda162918e862"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMjowMTowM1rOHuAJog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMjowMjozM1rOHuAM6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5OTAxMA==", "bodyText": "Should you check the actual deletion in addition to this?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3924#discussion_r517999010", "createdAt": "2020-11-05T12:01:03Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/user/UserST.java", "diffHunk": "@@ -216,6 +217,42 @@ void testUserWithQuotas(KafkaUser user) {\n         });\n     }\n \n+    @Test\n+    void testCreatingUsersWithSecretPrefix() {\n+        String clusterName = \"second-cluster\";\n+        String secretPrefix = \"top-secret-\";\n+        String tlsUserName = \"encrypted-leopold\";\n+        String scramShaUserName = \"scramed-leopold\";\n+\n+        KafkaResource.kafkaEphemeral(clusterName, 3)\n+            .editSpec()\n+                .editEntityOperator()\n+                    .editUserOperator()\n+                        .withNewSecretPrefix(secretPrefix)\n+                    .endUserOperator()\n+                .endEntityOperator()\n+            .endSpec()\n+            .done();\n+\n+        KafkaUserResource.tlsUser(clusterName, tlsUserName).done();\n+        KafkaUserResource.scramShaUser(clusterName, scramShaUserName).done();\n+\n+        Secret tlsSecret = kubeClient().getSecret(secretPrefix + tlsUserName);\n+        Secret scramShaSecret = kubeClient().getSecret(secretPrefix + scramShaUserName);\n+\n+        LOGGER.info(\"Checking if user secrets with secret prefixes exists\");\n+        assertNotNull(tlsSecret);\n+        assertNotNull(scramShaSecret);\n+\n+        LOGGER.info(\"Checking if secrets contains right user names\");\n+        assertThat(tlsSecret.getMetadata().getOwnerReferences().get(0).getName(), is(tlsUserName));\n+        assertThat(scramShaSecret.getMetadata().getOwnerReferences().get(0).getName(), is(scramShaUserName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1a29ffde480634bbdeef015683eda162918e862"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5OTU0Mg==", "bodyText": "Not sure I see the point of this. The KafkaUser resources are created by you on line 237+238. So you are just checking if you used the right name there. What you really want to check is the username in Kafka and CN of the certificate I guess.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3924#discussion_r517999542", "createdAt": "2020-11-05T12:01:56Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/user/UserST.java", "diffHunk": "@@ -216,6 +217,42 @@ void testUserWithQuotas(KafkaUser user) {\n         });\n     }\n \n+    @Test\n+    void testCreatingUsersWithSecretPrefix() {\n+        String clusterName = \"second-cluster\";\n+        String secretPrefix = \"top-secret-\";\n+        String tlsUserName = \"encrypted-leopold\";\n+        String scramShaUserName = \"scramed-leopold\";\n+\n+        KafkaResource.kafkaEphemeral(clusterName, 3)\n+            .editSpec()\n+                .editEntityOperator()\n+                    .editUserOperator()\n+                        .withNewSecretPrefix(secretPrefix)\n+                    .endUserOperator()\n+                .endEntityOperator()\n+            .endSpec()\n+            .done();\n+\n+        KafkaUserResource.tlsUser(clusterName, tlsUserName).done();\n+        KafkaUserResource.scramShaUser(clusterName, scramShaUserName).done();\n+\n+        Secret tlsSecret = kubeClient().getSecret(secretPrefix + tlsUserName);\n+        Secret scramShaSecret = kubeClient().getSecret(secretPrefix + scramShaUserName);\n+\n+        LOGGER.info(\"Checking if user secrets with secret prefixes exists\");\n+        assertNotNull(tlsSecret);\n+        assertNotNull(scramShaSecret);\n+\n+        LOGGER.info(\"Checking if secrets contains right user names\");\n+        assertThat(tlsSecret.getMetadata().getOwnerReferences().get(0).getName(), is(tlsUserName));\n+        assertThat(scramShaSecret.getMetadata().getOwnerReferences().get(0).getName(), is(scramShaUserName));\n+\n+        LOGGER.info(\"Checking if users are created without the secret prefixes\");\n+        assertNotNull(KafkaUserResource.kafkaUserClient().inNamespace(NAMESPACE).withName(tlsUserName).get());\n+        assertNotNull(KafkaUserResource.kafkaUserClient().inNamespace(NAMESPACE).withName(scramShaUserName).get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1a29ffde480634bbdeef015683eda162918e862"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5OTg1MQ==", "bodyText": "Is there any first cluster?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3924#discussion_r517999851", "createdAt": "2020-11-05T12:02:33Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/user/UserST.java", "diffHunk": "@@ -216,6 +217,42 @@ void testUserWithQuotas(KafkaUser user) {\n         });\n     }\n \n+    @Test\n+    void testCreatingUsersWithSecretPrefix() {\n+        String clusterName = \"second-cluster\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1a29ffde480634bbdeef015683eda162918e862"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be1724891319d9f086500c6ef7f73a13c4900c1c", "author": {"user": {"login": "im-konge", "name": "Luk\u00e1\u0161 Kr\u00e1l"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/be1724891319d9f086500c6ef7f73a13c4900c1c", "committedDate": "2020-11-09T15:58:21Z", "message": "comments and adding prefix for secret to clients\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NTgxNzcy", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3924#pullrequestreview-526581772", "createdAt": "2020-11-09T19:23:56Z", "commit": {"oid": "be1724891319d9f086500c6ef7f73a13c4900c1c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOToyMzo1NlrOHv-KZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOToyMzo1NlrOHv-KZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA2MzU4OQ==", "bodyText": "Should you try to send/receive also for the SCRAM user?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3924#discussion_r520063589", "createdAt": "2020-11-09T19:23:56Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/user/UserST.java", "diffHunk": "@@ -216,6 +223,85 @@ void testUserWithQuotas(KafkaUser user) {\n         });\n     }\n \n+    @Test\n+    void testCreatingUsersWithSecretPrefix() {\n+        String clusterName = \"second-cluster\";\n+        String secretPrefix = \"top-secret-\";\n+        String tlsUserName = \"encrypted-leopold\";\n+        String scramShaUserName = \"scramed-leopold\";\n+\n+        KafkaResource.kafkaEphemeral(clusterName, 3)\n+            .editSpec()\n+                .editKafka()\n+                    .withNewListeners()\n+                        .addNewGenericKafkaListener()\n+                            .withName(Constants.TLS_LISTENER_DEFAULT_NAME)\n+                            .withPort(9093)\n+                            .withType(KafkaListenerType.INTERNAL)\n+                            .withTls(true)\n+                            .withNewKafkaListenerAuthenticationTlsAuth()\n+                            .endKafkaListenerAuthenticationTlsAuth()\n+                        .endGenericKafkaListener()\n+                    .endListeners()\n+                .endKafka()\n+                .editEntityOperator()\n+                    .editUserOperator()\n+                        .withNewSecretPrefix(secretPrefix)\n+                    .endUserOperator()\n+                .endEntityOperator()\n+            .endSpec()\n+            .done();\n+\n+        KafkaTopicResource.topic(clusterName, TOPIC_NAME).done();\n+        KafkaUser tlsUser = KafkaUserResource.tlsUser(clusterName, tlsUserName).done();\n+        KafkaUserResource.scramShaUser(clusterName, scramShaUserName).done();\n+\n+        KafkaClientsResource.deployKafkaClients(true, clusterName + \"-\" + Constants.KAFKA_CLIENTS, true, null, secretPrefix, tlsUser).done();\n+        String kafkaClientsName = kubeClient().listPodsByPrefixInName(clusterName + \"-\" + Constants.KAFKA_CLIENTS).get(0).getMetadata().getName();\n+\n+        InternalKafkaClient internalKafkaClient = new InternalKafkaClient.Builder()\n+            .withUsingPodName(kafkaClientsName)\n+            .withNamespaceName(NAMESPACE)\n+            .withTopicName(TOPIC_NAME)\n+            .withKafkaUsername(tlsUserName)\n+            .withSecurityProtocol(SecurityProtocol.SASL_SSL)\n+            .withListenerName(Constants.TLS_LISTENER_DEFAULT_NAME)\n+            .withClusterName(clusterName)\n+            .withMessageCount(MESSAGE_COUNT)\n+            .withSecretPrefix(secretPrefix)\n+            .build();\n+\n+        internalKafkaClient.assertSentAndReceivedMessages(\n+            internalKafkaClient.sendMessagesTls(),\n+            internalKafkaClient.receiveMessagesTls()\n+        );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be1724891319d9f086500c6ef7f73a13c4900c1c"}, "originalPosition": 85}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49a85788333558d2491518439b0f737bfe231a2b", "author": {"user": {"login": "im-konge", "name": "Luk\u00e1\u0161 Kr\u00e1l"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/49a85788333558d2491518439b0f737bfe231a2b", "committedDate": "2020-11-11T13:40:09Z", "message": "add sending messages for scram-sha\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4MjEzMzgw", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3924#pullrequestreview-528213380", "createdAt": "2020-11-11T14:20:23Z", "commit": {"oid": "49a85788333558d2491518439b0f737bfe231a2b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNDoyMDoyM1rOHxPIEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNDoyMTo0NlrOHxPL9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM5MDA5Ng==", "bodyText": "Should this be SASL_PLAINTEXT?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3924#discussion_r521390096", "createdAt": "2020-11-11T14:20:23Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/user/UserST.java", "diffHunk": "@@ -216,6 +223,112 @@ void testUserWithQuotas(KafkaUser user) {\n         });\n     }\n \n+    @Test\n+    void testCreatingUsersWithSecretPrefix() {\n+        String clusterName = \"second-cluster\";\n+        String secretPrefix = \"top-secret-\";\n+        String tlsUserName = \"encrypted-leopold\";\n+        String scramShaUserName = \"scramed-leopold\";\n+\n+        KafkaResource.kafkaEphemeral(clusterName, 3)\n+            .editSpec()\n+                .editKafka()\n+                    .withNewListeners()\n+                        .addNewGenericKafkaListener()\n+                            .withName(Constants.PLAIN_LISTENER_DEFAULT_NAME)\n+                            .withPort(9092)\n+                            .withType(KafkaListenerType.INTERNAL)\n+                            .withTls(false)\n+                            .withNewKafkaListenerAuthenticationScramSha512Auth()\n+                            .endKafkaListenerAuthenticationScramSha512Auth()\n+                        .endGenericKafkaListener()\n+                        .addNewGenericKafkaListener()\n+                            .withName(Constants.TLS_LISTENER_DEFAULT_NAME)\n+                            .withPort(9093)\n+                            .withType(KafkaListenerType.INTERNAL)\n+                            .withTls(true)\n+                            .withNewKafkaListenerAuthenticationTlsAuth()\n+                            .endKafkaListenerAuthenticationTlsAuth()\n+                        .endGenericKafkaListener()\n+                    .endListeners()\n+                .endKafka()\n+                .editEntityOperator()\n+                    .editUserOperator()\n+                        .withNewSecretPrefix(secretPrefix)\n+                    .endUserOperator()\n+                .endEntityOperator()\n+            .endSpec()\n+            .done();\n+\n+        KafkaTopicResource.topic(clusterName, TOPIC_NAME).done();\n+        KafkaUser tlsUser = KafkaUserResource.tlsUser(clusterName, tlsUserName).done();\n+        KafkaUser scramShaUser = KafkaUserResource.scramShaUser(clusterName, scramShaUserName).done();\n+\n+        LOGGER.info(\"Deploying KafkaClients pod for TLS listener\");\n+        KafkaClientsResource.deployKafkaClients(true, clusterName + \"-tls-\" + Constants.KAFKA_CLIENTS, true, Constants.TLS_LISTENER_DEFAULT_NAME, secretPrefix, tlsUser).done();\n+        String tlsKafkaClientsName = kubeClient().listPodsByPrefixInName(clusterName + \"-tls-\" + Constants.KAFKA_CLIENTS).get(0).getMetadata().getName();\n+\n+        LOGGER.info(\"Deploying KafkaClients pod for PLAIN listener\");\n+        KafkaClientsResource.deployKafkaClients(false, clusterName + \"-plain-\" + Constants.KAFKA_CLIENTS, true, Constants.PLAIN_LISTENER_DEFAULT_NAME, secretPrefix, scramShaUser).done();\n+        String plainKafkaClientsName = kubeClient().listPodsByPrefixInName(clusterName + \"-plain-\" + Constants.KAFKA_CLIENTS).get(0).getMetadata().getName();\n+\n+        InternalKafkaClient internalKafkaClient = new InternalKafkaClient.Builder()\n+            .withUsingPodName(tlsKafkaClientsName)\n+            .withNamespaceName(NAMESPACE)\n+            .withTopicName(TOPIC_NAME)\n+            .withKafkaUsername(tlsUserName)\n+            .withSecurityProtocol(SecurityProtocol.SASL_SSL)\n+            .withListenerName(Constants.TLS_LISTENER_DEFAULT_NAME)\n+            .withClusterName(clusterName)\n+            .withMessageCount(MESSAGE_COUNT)\n+            .withSecretPrefix(secretPrefix)\n+            .build();\n+\n+        LOGGER.info(\"Checking if TLS user is able to send messages\");\n+        internalKafkaClient.assertSentAndReceivedMessages(\n+            internalKafkaClient.sendMessagesTls(),\n+            internalKafkaClient.receiveMessagesTls()\n+        );\n+\n+        internalKafkaClient = internalKafkaClient.toBuilder()\n+            .withUsingPodName(plainKafkaClientsName)\n+            .withSecurityProtocol(SecurityProtocol.PLAINTEXT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49a85788333558d2491518439b0f737bfe231a2b"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM5MTA5Mg==", "bodyText": "Should this be checked before sending the messages? It seems to me like a pre-requisite for it. Withotu the secrets, the clients should not work.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3924#discussion_r521391092", "createdAt": "2020-11-11T14:21:46Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/user/UserST.java", "diffHunk": "@@ -216,6 +223,112 @@ void testUserWithQuotas(KafkaUser user) {\n         });\n     }\n \n+    @Test\n+    void testCreatingUsersWithSecretPrefix() {\n+        String clusterName = \"second-cluster\";\n+        String secretPrefix = \"top-secret-\";\n+        String tlsUserName = \"encrypted-leopold\";\n+        String scramShaUserName = \"scramed-leopold\";\n+\n+        KafkaResource.kafkaEphemeral(clusterName, 3)\n+            .editSpec()\n+                .editKafka()\n+                    .withNewListeners()\n+                        .addNewGenericKafkaListener()\n+                            .withName(Constants.PLAIN_LISTENER_DEFAULT_NAME)\n+                            .withPort(9092)\n+                            .withType(KafkaListenerType.INTERNAL)\n+                            .withTls(false)\n+                            .withNewKafkaListenerAuthenticationScramSha512Auth()\n+                            .endKafkaListenerAuthenticationScramSha512Auth()\n+                        .endGenericKafkaListener()\n+                        .addNewGenericKafkaListener()\n+                            .withName(Constants.TLS_LISTENER_DEFAULT_NAME)\n+                            .withPort(9093)\n+                            .withType(KafkaListenerType.INTERNAL)\n+                            .withTls(true)\n+                            .withNewKafkaListenerAuthenticationTlsAuth()\n+                            .endKafkaListenerAuthenticationTlsAuth()\n+                        .endGenericKafkaListener()\n+                    .endListeners()\n+                .endKafka()\n+                .editEntityOperator()\n+                    .editUserOperator()\n+                        .withNewSecretPrefix(secretPrefix)\n+                    .endUserOperator()\n+                .endEntityOperator()\n+            .endSpec()\n+            .done();\n+\n+        KafkaTopicResource.topic(clusterName, TOPIC_NAME).done();\n+        KafkaUser tlsUser = KafkaUserResource.tlsUser(clusterName, tlsUserName).done();\n+        KafkaUser scramShaUser = KafkaUserResource.scramShaUser(clusterName, scramShaUserName).done();\n+\n+        LOGGER.info(\"Deploying KafkaClients pod for TLS listener\");\n+        KafkaClientsResource.deployKafkaClients(true, clusterName + \"-tls-\" + Constants.KAFKA_CLIENTS, true, Constants.TLS_LISTENER_DEFAULT_NAME, secretPrefix, tlsUser).done();\n+        String tlsKafkaClientsName = kubeClient().listPodsByPrefixInName(clusterName + \"-tls-\" + Constants.KAFKA_CLIENTS).get(0).getMetadata().getName();\n+\n+        LOGGER.info(\"Deploying KafkaClients pod for PLAIN listener\");\n+        KafkaClientsResource.deployKafkaClients(false, clusterName + \"-plain-\" + Constants.KAFKA_CLIENTS, true, Constants.PLAIN_LISTENER_DEFAULT_NAME, secretPrefix, scramShaUser).done();\n+        String plainKafkaClientsName = kubeClient().listPodsByPrefixInName(clusterName + \"-plain-\" + Constants.KAFKA_CLIENTS).get(0).getMetadata().getName();\n+\n+        InternalKafkaClient internalKafkaClient = new InternalKafkaClient.Builder()\n+            .withUsingPodName(tlsKafkaClientsName)\n+            .withNamespaceName(NAMESPACE)\n+            .withTopicName(TOPIC_NAME)\n+            .withKafkaUsername(tlsUserName)\n+            .withSecurityProtocol(SecurityProtocol.SASL_SSL)\n+            .withListenerName(Constants.TLS_LISTENER_DEFAULT_NAME)\n+            .withClusterName(clusterName)\n+            .withMessageCount(MESSAGE_COUNT)\n+            .withSecretPrefix(secretPrefix)\n+            .build();\n+\n+        LOGGER.info(\"Checking if TLS user is able to send messages\");\n+        internalKafkaClient.assertSentAndReceivedMessages(\n+            internalKafkaClient.sendMessagesTls(),\n+            internalKafkaClient.receiveMessagesTls()\n+        );\n+\n+        internalKafkaClient = internalKafkaClient.toBuilder()\n+            .withUsingPodName(plainKafkaClientsName)\n+            .withSecurityProtocol(SecurityProtocol.PLAINTEXT)\n+            .withListenerName(Constants.PLAIN_LISTENER_DEFAULT_NAME)\n+            .withKafkaUsername(scramShaUserName)\n+            .build();\n+\n+        LOGGER.info(\"Checking if SCRAM-SHA user is able to send messages\");\n+        internalKafkaClient.assertSentAndReceivedMessages(\n+            internalKafkaClient.sendMessagesPlain(),\n+            internalKafkaClient.receiveMessagesPlain()\n+        );\n+\n+        Secret tlsSecret = kubeClient().getSecret(secretPrefix + tlsUserName);\n+        Secret scramShaSecret = kubeClient().getSecret(secretPrefix + scramShaUserName);\n+\n+        LOGGER.info(\"Checking if user secrets with secret prefixes exists\");\n+        assertNotNull(tlsSecret);\n+        assertNotNull(scramShaSecret);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49a85788333558d2491518439b0f737bfe231a2b"}, "originalPosition": 119}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0da313db9a1c308d222d4799978bca05c3a0dae", "author": {"user": {"login": "im-konge", "name": "Luk\u00e1\u0161 Kr\u00e1l"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d0da313db9a1c308d222d4799978bca05c3a0dae", "committedDate": "2020-11-11T14:38:26Z", "message": "fixup! add sending messages for scram-sha\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4MjUwMjI1", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3924#pullrequestreview-528250225", "createdAt": "2020-11-11T15:01:08Z", "commit": {"oid": "d0da313db9a1c308d222d4799978bca05c3a0dae"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4ODkwNjc0", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3924#pullrequestreview-528890674", "createdAt": "2020-11-12T09:19:26Z", "commit": {"oid": "d0da313db9a1c308d222d4799978bca05c3a0dae"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 886, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}