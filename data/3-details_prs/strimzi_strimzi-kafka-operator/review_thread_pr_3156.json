{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4MDk0ODcx", "number": 3156, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODoxOTo1OVrOEC3KyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzoxNjowMlrOEC84vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDM2NDg4OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/ManualRollingUpdateST.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODoxOTo1OVrOGfk66g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMToxMTo1MFrOGfqV7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2Mzk0Ng==", "bodyText": "This scenario is a little niche, might it be useful to add a documented comment?\nAlso might we want to also unit test this scenario?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3156#discussion_r435763946", "createdAt": "2020-06-05T08:19:59Z", "author": {"login": "samuel-hawker"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/ManualRollingUpdateST.java", "diffHunk": "@@ -144,6 +145,50 @@ void testManualTriggeringRollingUpdate() {\n         assertThat(received, is(sent));\n     }\n \n+    @Test\n+    void testRollingUpdateOnNextReconciliationAfterClusterCAKeyDel() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be6d950437190066f8e1c4c13273492d37e6da00"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc3NjY5OQ==", "bodyText": "Yeah, I can add it.\nI think the second part is for @scholzj", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3156#discussion_r435776699", "createdAt": "2020-06-05T08:43:09Z", "author": {"login": "im-konge"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/ManualRollingUpdateST.java", "diffHunk": "@@ -144,6 +145,50 @@ void testManualTriggeringRollingUpdate() {\n         assertThat(received, is(sent));\n     }\n \n+    @Test\n+    void testRollingUpdateOnNextReconciliationAfterClusterCAKeyDel() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2Mzk0Ng=="}, "originalCommit": {"oid": "be6d950437190066f8e1c4c13273492d37e6da00"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc4MDc2Nw==", "bodyText": "I guess everything can be unit tested ... But real E2E test has probably more value than something full of mocking etc. which is how the unit test would end. So I think we should definitely keep this ST and if someone writes UT as well, it would be just a bonus.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3156#discussion_r435780767", "createdAt": "2020-06-05T08:50:25Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/ManualRollingUpdateST.java", "diffHunk": "@@ -144,6 +145,50 @@ void testManualTriggeringRollingUpdate() {\n         assertThat(received, is(sent));\n     }\n \n+    @Test\n+    void testRollingUpdateOnNextReconciliationAfterClusterCAKeyDel() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2Mzk0Ng=="}, "originalCommit": {"oid": "be6d950437190066f8e1c4c13273492d37e6da00"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg1Mjc4MA==", "bodyText": "I added the scenario as a comment, thanks :)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3156#discussion_r435852780", "createdAt": "2020-06-05T11:11:50Z", "author": {"login": "im-konge"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/ManualRollingUpdateST.java", "diffHunk": "@@ -144,6 +145,50 @@ void testManualTriggeringRollingUpdate() {\n         assertThat(received, is(sent));\n     }\n \n+    @Test\n+    void testRollingUpdateOnNextReconciliationAfterClusterCAKeyDel() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2Mzk0Ng=="}, "originalCommit": {"oid": "be6d950437190066f8e1c4c13273492d37e6da00"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDM3MDEzOnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/ManualRollingUpdateST.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODoyMToyOVrOGfk-UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMDoyOTo0MFrOGfpMmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2NDgxNg==", "bodyText": "I would avoid using terms like accident, a delete in theory could be intentional.\nbest we cover cases of intentional or accidental removal and refer to it as zookeeperDeletedCert and kafkaDeletedCert ?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3156#discussion_r435764816", "createdAt": "2020-06-05T08:21:29Z", "author": {"login": "samuel-hawker"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/ManualRollingUpdateST.java", "diffHunk": "@@ -144,6 +145,50 @@ void testManualTriggeringRollingUpdate() {\n         assertThat(received, is(sent));\n     }\n \n+    @Test\n+    void testRollingUpdateOnNextReconciliationAfterClusterCAKeyDel() {\n+        KafkaResource.kafkaPersistent(CLUSTER_NAME, 3, 3).done();\n+        String topicName = KafkaTopicUtils.generateRandomNameOfTopic();\n+        KafkaTopicResource.topic(CLUSTER_NAME, topicName, 2, 2).done();\n+\n+        KafkaUser user = KafkaUserResource.tlsUser(CLUSTER_NAME, USER_NAME).done();\n+\n+        KafkaClientsResource.deployKafkaClients(true, CLUSTER_NAME + \"-\" + Constants.KAFKA_CLIENTS, user).done();\n+        final String defaultKafkaClientsPodName =\n+            ResourceManager.kubeClient().listPodsByPrefixInName(CLUSTER_NAME + \"-\" + Constants.KAFKA_CLIENTS).get(0).getMetadata().getName();\n+\n+        InternalKafkaClient internalKafkaClient = new InternalKafkaClient.Builder()\n+            .withUsingPodName(defaultKafkaClientsPodName)\n+            .withTopicName(topicName)\n+            .withNamespaceName(NAMESPACE)\n+            .withClusterName(CLUSTER_NAME)\n+            .withMessageCount(MESSAGE_COUNT)\n+            .withKafkaUsername(USER_NAME)\n+            .build();\n+\n+        Map<String, String> kafkaPods = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+        Map<String, String> zkPods = StatefulSetUtils.ssSnapshot(KafkaResources.zookeeperStatefulSetName(CLUSTER_NAME));\n+\n+        int sent = internalKafkaClient.sendMessagesTls();\n+        assertThat(sent, is(MESSAGE_COUNT));\n+\n+        String zkCrtBeforeAccident = kubeClient(NAMESPACE).getSecret(CLUSTER_NAME + \"-zookeeper-nodes\").getData().get(CLUSTER_NAME + \"-zookeeper-0.crt\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be6d950437190066f8e1c4c13273492d37e6da00"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2NTE5NA==", "bodyText": "I am aware as well that you didn't write these, but if you're moving the code, we should think about enhancing it slightly if we can.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3156#discussion_r435765194", "createdAt": "2020-06-05T08:22:12Z", "author": {"login": "samuel-hawker"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/ManualRollingUpdateST.java", "diffHunk": "@@ -144,6 +145,50 @@ void testManualTriggeringRollingUpdate() {\n         assertThat(received, is(sent));\n     }\n \n+    @Test\n+    void testRollingUpdateOnNextReconciliationAfterClusterCAKeyDel() {\n+        KafkaResource.kafkaPersistent(CLUSTER_NAME, 3, 3).done();\n+        String topicName = KafkaTopicUtils.generateRandomNameOfTopic();\n+        KafkaTopicResource.topic(CLUSTER_NAME, topicName, 2, 2).done();\n+\n+        KafkaUser user = KafkaUserResource.tlsUser(CLUSTER_NAME, USER_NAME).done();\n+\n+        KafkaClientsResource.deployKafkaClients(true, CLUSTER_NAME + \"-\" + Constants.KAFKA_CLIENTS, user).done();\n+        final String defaultKafkaClientsPodName =\n+            ResourceManager.kubeClient().listPodsByPrefixInName(CLUSTER_NAME + \"-\" + Constants.KAFKA_CLIENTS).get(0).getMetadata().getName();\n+\n+        InternalKafkaClient internalKafkaClient = new InternalKafkaClient.Builder()\n+            .withUsingPodName(defaultKafkaClientsPodName)\n+            .withTopicName(topicName)\n+            .withNamespaceName(NAMESPACE)\n+            .withClusterName(CLUSTER_NAME)\n+            .withMessageCount(MESSAGE_COUNT)\n+            .withKafkaUsername(USER_NAME)\n+            .build();\n+\n+        Map<String, String> kafkaPods = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+        Map<String, String> zkPods = StatefulSetUtils.ssSnapshot(KafkaResources.zookeeperStatefulSetName(CLUSTER_NAME));\n+\n+        int sent = internalKafkaClient.sendMessagesTls();\n+        assertThat(sent, is(MESSAGE_COUNT));\n+\n+        String zkCrtBeforeAccident = kubeClient(NAMESPACE).getSecret(CLUSTER_NAME + \"-zookeeper-nodes\").getData().get(CLUSTER_NAME + \"-zookeeper-0.crt\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2NDgxNg=="}, "originalCommit": {"oid": "be6d950437190066f8e1c4c13273492d37e6da00"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgzNDAxMQ==", "bodyText": "I didn't but I'm glad for comments to make the test better. So don't worry. :)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3156#discussion_r435834011", "createdAt": "2020-06-05T10:29:40Z", "author": {"login": "im-konge"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/ManualRollingUpdateST.java", "diffHunk": "@@ -144,6 +145,50 @@ void testManualTriggeringRollingUpdate() {\n         assertThat(received, is(sent));\n     }\n \n+    @Test\n+    void testRollingUpdateOnNextReconciliationAfterClusterCAKeyDel() {\n+        KafkaResource.kafkaPersistent(CLUSTER_NAME, 3, 3).done();\n+        String topicName = KafkaTopicUtils.generateRandomNameOfTopic();\n+        KafkaTopicResource.topic(CLUSTER_NAME, topicName, 2, 2).done();\n+\n+        KafkaUser user = KafkaUserResource.tlsUser(CLUSTER_NAME, USER_NAME).done();\n+\n+        KafkaClientsResource.deployKafkaClients(true, CLUSTER_NAME + \"-\" + Constants.KAFKA_CLIENTS, user).done();\n+        final String defaultKafkaClientsPodName =\n+            ResourceManager.kubeClient().listPodsByPrefixInName(CLUSTER_NAME + \"-\" + Constants.KAFKA_CLIENTS).get(0).getMetadata().getName();\n+\n+        InternalKafkaClient internalKafkaClient = new InternalKafkaClient.Builder()\n+            .withUsingPodName(defaultKafkaClientsPodName)\n+            .withTopicName(topicName)\n+            .withNamespaceName(NAMESPACE)\n+            .withClusterName(CLUSTER_NAME)\n+            .withMessageCount(MESSAGE_COUNT)\n+            .withKafkaUsername(USER_NAME)\n+            .build();\n+\n+        Map<String, String> kafkaPods = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+        Map<String, String> zkPods = StatefulSetUtils.ssSnapshot(KafkaResources.zookeeperStatefulSetName(CLUSTER_NAME));\n+\n+        int sent = internalKafkaClient.sendMessagesTls();\n+        assertThat(sent, is(MESSAGE_COUNT));\n+\n+        String zkCrtBeforeAccident = kubeClient(NAMESPACE).getSecret(CLUSTER_NAME + \"-zookeeper-nodes\").getData().get(CLUSTER_NAME + \"-zookeeper-0.crt\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2NDgxNg=="}, "originalCommit": {"oid": "be6d950437190066f8e1c4c13273492d37e6da00"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTMwMTczOnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/ManualRollingUpdateST.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzoxNjowMlrOGfuBsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNzoyOTowMFrOGf3FsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkxMzEzNw==", "bodyText": "I would prefer more structural comment like:\n\nSetup Kafka persistent with 3 replicas\nCreate KafkaUser\nRun producer and consumer to see if cluster is working\nRemove cluster CA key\nKafka and ZK pods should roll, wiat until rolling update finish\nCheck that CA certificates were renewed\nTry consumer, producer and consume rmeessages again with new certificates", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3156#discussion_r435913137", "createdAt": "2020-06-05T13:16:02Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/ManualRollingUpdateST.java", "diffHunk": "@@ -144,6 +145,57 @@ void testManualTriggeringRollingUpdate() {\n         assertThat(received, is(sent));\n     }\n \n+    /**\n+     * Scenario of the test:\n+     * Firstly customer tries to send messages and checks if he is able to consume the messages,\n+     * then he delete the cluster CA key. Now should Kafka and Zookeper pods roll.\n+     * After the rolling update is done, the CA key/certificate should be renewed,\n+     * but should be different than the previous one. Then, again, he tries to\n+     * send messages with new generated cluster certificate.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "395c24447ae22907e0442372e9d74297c1332ad8"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA2MTYxNg==", "bodyText": "100% agree with Frawless here, the scenario should be brief, precise and not meander.\nE.g.:\nContext of the test in a sentence\n1. Step 1\n2. Step 2\n...\n\nThis means that as the operator evolves if the mechanisms change the disconnect between the comments and the test code are easier to notice and correct or indeed to notice that he operator is not upholding the behaviour our tests are claiming it should have.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3156#discussion_r436061616", "createdAt": "2020-06-05T17:29:00Z", "author": {"login": "samuel-hawker"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/ManualRollingUpdateST.java", "diffHunk": "@@ -144,6 +145,57 @@ void testManualTriggeringRollingUpdate() {\n         assertThat(received, is(sent));\n     }\n \n+    /**\n+     * Scenario of the test:\n+     * Firstly customer tries to send messages and checks if he is able to consume the messages,\n+     * then he delete the cluster CA key. Now should Kafka and Zookeper pods roll.\n+     * After the rolling update is done, the CA key/certificate should be renewed,\n+     * but should be different than the previous one. Then, again, he tries to\n+     * send messages with new generated cluster certificate.\n+     */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkxMzEzNw=="}, "originalCommit": {"oid": "395c24447ae22907e0442372e9d74297c1332ad8"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1625, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}