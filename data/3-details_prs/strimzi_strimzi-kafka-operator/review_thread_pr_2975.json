{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0NTkxMDg3", "number": 2975, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMDoyMDoxOFrOD6L2zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMDo0Mzo1MVrOD6MUnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzM4MjUzOnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/ClientUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMDoyMDoxOFrOGR4Gkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMDoyMDoxOFrOGR4Gkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM5ODE2Mw==", "bodyText": "Use RuntimeException instead of this", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2975#discussion_r421398163", "createdAt": "2020-05-07T10:20:18Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/ClientUtils.java", "diffHunk": "@@ -24,18 +23,21 @@\n     // ensuring that object can not be created outside of class\n     private ClientUtils() {}\n \n-    public static void waitUntilClientReceivedMessagesTls(KafkaClientOperations kafkaClient, int exceptedMessages) {\n-        TestUtils.waitFor(\"Kafka \" + kafkaClient.toString() + \" client received messages\", Constants.GLOBAL_CLIENTS_POLL, Constants.GLOBAL_TIMEOUT,\n-            () -> {\n-                int receivedMessages = 0;\n-                try {\n-                    receivedMessages = kafkaClient.receiveMessagesTls(Constants.GLOBAL_CLIENTS_TIMEOUT);\n-                    return receivedMessages == exceptedMessages;\n-                } catch (Exception e) {\n-                    LOGGER.warn(\"Client not received excepted messages {}, instead received only {}!\", exceptedMessages, receivedMessages);\n-                    return false;\n-                }\n-            });\n+    public static void waitUntilClientReceivedMessagesTls(KafkaClientOperations kafkaClient, int exceptedMessages) throws Throwable {\n+        int receivedMessages;\n+        int tries = 3;\n+\n+        for (; tries > 0; tries--) {\n+            receivedMessages = kafkaClient.receiveMessagesTls(Constants.GLOBAL_CLIENTS_TIMEOUT);\n+\n+            if (receivedMessages == exceptedMessages) {\n+                LOGGER.info(\"Consumer successfully consumed {} messages\", exceptedMessages);\n+                break;\n+            }\n+        }\n+        if (tries == 0) {\n+            throw new Throwable(String.format(\"Consumer wasn't able to consume %s messages for 3 times\", exceptedMessages));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f3cac0db5ff0de9e470c3e7c43f54b40bd2d459"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzQ1NjY2OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/ClientUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMDo0MzoxOVrOGR41tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMDo0MzoxOVrOGR41tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxMDIyOA==", "bodyText": "why do you reverse the counting? Shouldn't be better iterate from 1 to 3 inclusive and use that value in the logging?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2975#discussion_r421410228", "createdAt": "2020-05-07T10:43:19Z", "author": {"login": "see-quick"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/ClientUtils.java", "diffHunk": "@@ -24,18 +23,21 @@\n     // ensuring that object can not be created outside of class\n     private ClientUtils() {}\n \n-    public static void waitUntilClientReceivedMessagesTls(KafkaClientOperations kafkaClient, int exceptedMessages) {\n-        TestUtils.waitFor(\"Kafka \" + kafkaClient.toString() + \" client received messages\", Constants.GLOBAL_CLIENTS_POLL, Constants.GLOBAL_TIMEOUT,\n-            () -> {\n-                int receivedMessages = 0;\n-                try {\n-                    receivedMessages = kafkaClient.receiveMessagesTls(Constants.GLOBAL_CLIENTS_TIMEOUT);\n-                    return receivedMessages == exceptedMessages;\n-                } catch (Exception e) {\n-                    LOGGER.warn(\"Client not received excepted messages {}, instead received only {}!\", exceptedMessages, receivedMessages);\n-                    return false;\n-                }\n-            });\n+    public static void waitUntilClientReceivedMessagesTls(KafkaClientOperations kafkaClient, int exceptedMessages) throws Throwable {\n+        int receivedMessages;\n+        int tries = 3;\n+\n+        for (; tries > 0; tries--) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f3cac0db5ff0de9e470c3e7c43f54b40bd2d459"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzQ1ODg3OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/ClientUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMDo0Mzo1MlrOGR43AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMDo0Mzo1MlrOGR43AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxMDU2MA==", "bodyText": "here you can use it\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            LOGGER.info(\"Consumer successfully consumed {} messages\", exceptedMessages);\n          \n          \n            \n                            LOGGER.info(\"Consumer successfully consumed {} messages for the {} time\", exceptedMessages, tries);", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2975#discussion_r421410560", "createdAt": "2020-05-07T10:43:52Z", "author": {"login": "see-quick"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/ClientUtils.java", "diffHunk": "@@ -24,18 +23,21 @@\n     // ensuring that object can not be created outside of class\n     private ClientUtils() {}\n \n-    public static void waitUntilClientReceivedMessagesTls(KafkaClientOperations kafkaClient, int exceptedMessages) {\n-        TestUtils.waitFor(\"Kafka \" + kafkaClient.toString() + \" client received messages\", Constants.GLOBAL_CLIENTS_POLL, Constants.GLOBAL_TIMEOUT,\n-            () -> {\n-                int receivedMessages = 0;\n-                try {\n-                    receivedMessages = kafkaClient.receiveMessagesTls(Constants.GLOBAL_CLIENTS_TIMEOUT);\n-                    return receivedMessages == exceptedMessages;\n-                } catch (Exception e) {\n-                    LOGGER.warn(\"Client not received excepted messages {}, instead received only {}!\", exceptedMessages, receivedMessages);\n-                    return false;\n-                }\n-            });\n+    public static void waitUntilClientReceivedMessagesTls(KafkaClientOperations kafkaClient, int exceptedMessages) throws Throwable {\n+        int receivedMessages;\n+        int tries = 3;\n+\n+        for (; tries > 0; tries--) {\n+            receivedMessages = kafkaClient.receiveMessagesTls(Constants.GLOBAL_CLIENTS_TIMEOUT);\n+\n+            if (receivedMessages == exceptedMessages) {\n+                LOGGER.info(\"Consumer successfully consumed {} messages\", exceptedMessages);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f3cac0db5ff0de9e470c3e7c43f54b40bd2d459"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 14, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}