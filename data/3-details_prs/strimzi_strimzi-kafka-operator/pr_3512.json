{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MTYyMzQ4", "number": 3512, "title": "Add support for different types under one field in a CRD", "bodyText": "Type of change\n\nEnhancement / new feature\n\nDescription\nIn some cases it is useful to be able to have multiple different types under the same field in the CRD. For example when replacing some fields which are too limited etc. One of the examples of where this will be useful is https://github.com/strimzi/proposals/blob/master/005-improving-configurability-of-kafka-listeners.md\nThis PR adds support for OneOfType annotation which allows you to specify that a single field can accept multiple types. It can be used for example like this:\n    @OneOfType({\n        @OneOfType.Alternative(@OneOfType.Alternative.Field(\"type1Value\")), \n        @OneOfType.Alternative(@OneOfType.Alternative.Field(\"type2Value\"))\n    })\n    public Type1OrType2 getTypedAlternatives() {\n        return typedAlternatives;\n    }\nIn this case the typedAlternatives field can be set either to Type1 or to Type2. It is expected the the field with mixed values would be represented by a single class which will contain the alternating fields. In the example above it would be a class like this:\npublic class Type1OrType2 {\n    private Type1 type1Value;\n    private Type2 type2Value;\n\n    public Type1OrType2(Type1 type1Value)   {\n        type1Value = type1Value;\n        type2Value = null;\n    }\n\n    public Type1OrType2(Type2 type2Value)   {\n        type1Value = null;\n        type2Value = type2Value;\n    }\n}\nThe @OneOfType.Alternative.Field annotation value is pointing to the fields in the Type1OrType2 class.\nIt also adds new annotation DeprecatedType for deprecating the whole type. This renders a deprecation notice in the reference API. This is useful for deprecating one of the alternatives.", "createdAt": "2020-08-14T20:06:06Z", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3512", "merged": true, "mergeCommit": {"oid": "d3e2150dc19dc53050e3568d908848fda1236fc0"}, "closed": true, "closedAt": "2020-08-19T16:52:05Z", "author": {"login": "scholzj"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-5usvgH2gAyNDY4MTYyMzQ4OjM4YmUyOTc1OGM2OTY3YWIzYzU2ZTA0ZjhkMDQ5OTQwNmNhYTMyMjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdAdJEJgFqTQ3MDU2MDYxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "38be29758c6967ab3c56e04f8d0499406caa3221", "author": {"user": {"login": "scholzj", "name": "Jakub Scholz"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/38be29758c6967ab3c56e04f8d0499406caa3221", "committedDate": "2020-08-14T19:24:59Z", "message": "Add support for different types under one field in a CRD\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecb733901e9930689616a32a3531c2fd794ec4b5", "author": {"user": {"login": "scholzj", "name": "Jakub Scholz"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ecb733901e9930689616a32a3531c2fd794ec4b5", "committedDate": "2020-08-14T20:05:36Z", "message": "Add some comments\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b1182f7cac73f7f913a9286ec79be5a1efd9d7a", "author": {"user": {"login": "scholzj", "name": "Jakub Scholz"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/2b1182f7cac73f7f913a9286ec79be5a1efd9d7a", "committedDate": "2020-08-14T22:44:47Z", "message": "Add possibility to deprecate Type\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4eaaa0a9cfe4017e880bb8463a6cb0864e37d1dc", "author": {"user": {"login": "scholzj", "name": "Jakub Scholz"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/4eaaa0a9cfe4017e880bb8463a6cb0864e37d1dc", "committedDate": "2020-08-14T22:56:31Z", "message": "Fix spotbugs\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3OTg2NjY3", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3512#pullrequestreview-467986667", "createdAt": "2020-08-15T13:47:32Z", "commit": {"oid": "4eaaa0a9cfe4017e880bb8463a6cb0864e37d1dc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxMzo0NzozMlrOHBK5qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxMzo0NzozMlrOHBK5qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk4OTIyNQ==", "bodyText": "What's the reasoning behind initializing with this size?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3512#discussion_r470989225", "createdAt": "2020-08-15T13:47:32Z", "author": {"login": "samuel-hawker"}, "path": "crd-generator/src/main/java/io/strimzi/crdgenerator/DocGenerator.java", "diffHunk": "@@ -80,27 +83,57 @@ private void appendHeading(Crd crd, String name) throws IOException {\n     }\n \n     private void usedIn(Class<?> cls, Map<Class<?>, Set<Class<?>>> usedIn) {\n+        Set<Property> memorableProperties = new HashSet<>();\n+\n         for (Property property : properties(cls).values()) {\n             if (property.isAnnotationPresent(KubeLink.class)) {\n                 continue;\n             }\n+\n+            OneOfType oneOfType = property.getAnnotation(OneOfType.class);\n+            if (oneOfType != null && oneOfType.value().length > 0) {\n+                for (OneOfType.Alternative alt : oneOfType.value()) {\n+                    for (OneOfType.Alternative.Field field : alt.value()) {\n+                        try {\n+                            memorableProperties.add(new Property(property.getType().getType().getDeclaredField(field.value())));\n+                        } catch (NoSuchFieldException e) {\n+                            throw new RuntimeException(\"Failed to find field used in OneOfType annotation\", e);\n+                        }\n+                    }\n+                }\n+            } else {\n+                memorableProperties.add(property);\n+            }\n+        }\n+\n+        for (Property property : memorableProperties) {\n             PropertyType propertyType = property.getType();\n             Class<?> type = propertyType.isArray() ? propertyType.arrayBase() : propertyType.getType();\n             for (Class<?> c : subtypesOrSelf(type)) {\n                 if (Schema.isJsonScalarType(c)) {\n                     continue;\n                 }\n-                Set<Class<?>> classes = usedIn.get(c);\n-                if (classes == null) {\n-                    classes = new HashSet<>(2);\n-                    usedIn.put(c, classes);\n-                }\n+\n+                Set<Class<?>> classes = getOrCreateClassesSet(c, usedIn);\n+\n                 classes.add(cls);\n+\n                 usedIn(c, usedIn);\n             }\n         }\n     }\n \n+    private Set<Class<?>> getOrCreateClassesSet(Class<?> c, Map<Class<?>, Set<Class<?>>> usedIn)   {\n+        Set<Class<?>> classes = usedIn.get(c);\n+\n+        if (classes == null) {\n+            classes = new HashSet<>(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eaaa0a9cfe4017e880bb8463a6cb0864e37d1dc"}, "originalPosition": 72}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d19e7bbf98b32c4f48995247c7ed1048fa42258c", "author": {"user": {"login": "scholzj", "name": "Jakub Scholz"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d19e7bbf98b32c4f48995247c7ed1048fa42258c", "committedDate": "2020-08-15T14:56:35Z", "message": "Fix default HashSet size\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4MTk2Mjg5", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3512#pullrequestreview-468196289", "createdAt": "2020-08-17T06:36:28Z", "commit": {"oid": "d19e7bbf98b32c4f48995247c7ed1048fa42258c"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNjozNjoyOVrOHBbW5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNjo0NDo1MVrOHBbiag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI1ODg1Mw==", "bodyText": "Any reason not to use java.lang.Class as the type?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3512#discussion_r471258853", "createdAt": "2020-08-17T06:36:29Z", "author": {"login": "tombentley"}, "path": "crd-annotations/src/main/java/io/strimzi/api/annotations/DeprecatedType.java", "diffHunk": "@@ -0,0 +1,19 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.api.annotations;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+@Target({ElementType.TYPE})\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface DeprecatedType {\n+    /**\n+     * @return The type which should be used as replacement\n+     */\n+    String replacedWithType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d19e7bbf98b32c4f48995247c7ed1048fa42258c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI2MTA2OA==", "bodyText": "ObjectMapper is thread-safe and relatively heavyweight. We should be moving in the direction of using a (few) constants, rather than instantiating every time we want to serialize or deserialize.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3512#discussion_r471261068", "createdAt": "2020-08-17T06:42:47Z", "author": {"login": "tombentley"}, "path": "crd-generator/src/test/java/io/strimzi/crdgenerator/Type1OrType2.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.crdgenerator;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.ObjectCodec;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectReader;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import io.strimzi.api.annotations.DeprecatedType;\n+\n+import java.io.IOException;\n+\n+@JsonDeserialize(using = Type1OrType2.Deserializer.class)\n+@JsonSerialize(using = Type1OrType2.Serializer.class)\n+public class Type1OrType2 {\n+    private Type1 type1Value;\n+    private Type2 type2Value;\n+\n+    public Type1OrType2(Type1 type1Value)   {\n+        type1Value = type1Value;\n+        type2Value = null;\n+    }\n+\n+    public Type1OrType2(Type2 type2Value)   {\n+        type1Value = null;\n+        type2Value = type2Value;\n+    }\n+\n+    public Type1 getMapValue()    {\n+        return type1Value;\n+    }\n+\n+    public Type2 getListValue()    {\n+        return type2Value;\n+    }\n+\n+    public static class Serializer extends JsonSerializer<Type1OrType2> {\n+        @Override\n+        public void serialize(Type1OrType2 value, JsonGenerator generator, SerializerProvider provider) throws IOException {\n+            if (value != null) {\n+                if (value.type1Value != null)    {\n+                    generator.writeObject(value.type1Value);\n+                } else if (value.type2Value != null)  {\n+                    generator.writeObject(value.type2Value);\n+                } else {\n+                    generator.writeNull();\n+                }\n+            } else {\n+                generator.writeNull();\n+            }\n+        }\n+    }\n+\n+    public static class Deserializer extends JsonDeserializer<Type1OrType2> {\n+        @Override\n+        public Type1OrType2 deserialize(JsonParser jsonParser, DeserializationContext context) throws IOException {\n+            ObjectMapper objectMapper = new ObjectMapper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d19e7bbf98b32c4f48995247c7ed1048fa42258c"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI2MTgwMg==", "bodyText": "Have you checked that the Kube API server accepted the generated schema and that it validates it correctly?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3512#discussion_r471261802", "createdAt": "2020-08-17T06:44:51Z", "author": {"login": "tombentley"}, "path": "crd-generator/src/test/resources/io/strimzi/crdgenerator/simpleTest.yaml", "diffHunk": "@@ -427,6 +433,16 @@ spec:\n         stringProperty:\n           type: \"string\"\n           pattern: \".*\"\n+        typedAlternatives:\n+          oneOf:\n+          - type: \"object\"\n+            properties:\n+              key1:\n+                type: \"string\"\n+          - type: \"object\"\n+            properties:\n+              key2:\n+                type: \"string\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d19e7bbf98b32c4f48995247c7ed1048fa42258c"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b044907bf3afadb30e905bd684022141d3ef3678", "author": {"user": {"login": "scholzj", "name": "Jakub Scholz"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b044907bf3afadb30e905bd684022141d3ef3678", "committedDate": "2020-08-17T18:36:51Z", "message": "Use static ObjectMapper\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d30bda65b7a81c1e5bf4ffbbaab398629821b4f", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/4d30bda65b7a81c1e5bf4ffbbaab398629821b4f", "committedDate": "2020-08-18T08:32:52Z", "message": "Replace @OneOfType with @Alternation and @Alternative (#4)\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5MDM1MTUz", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3512#pullrequestreview-469035153", "createdAt": "2020-08-18T06:48:32Z", "commit": {"oid": "b044907bf3afadb30e905bd684022141d3ef3678"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNjo0ODozMlrOHCFm9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjozOTozN1rOHCc5Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk1MTA5Mg==", "bodyText": "AFAICS the string is only used in DocGenerator where it's immediately passed to Class.forName() to obtain a Class instance anyway. I don't understand what the drawback/complication is (I'm not saying there isn't one).", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3512#discussion_r471951092", "createdAt": "2020-08-18T06:48:32Z", "author": {"login": "tombentley"}, "path": "crd-annotations/src/main/java/io/strimzi/api/annotations/DeprecatedType.java", "diffHunk": "@@ -0,0 +1,19 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.api.annotations;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+@Target({ElementType.TYPE})\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface DeprecatedType {\n+    /**\n+     * @return The type which should be used as replacement\n+     */\n+    String replacedWithType();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI1ODg1Mw=="}, "originalCommit": {"oid": "d19e7bbf98b32c4f48995247c7ed1048fa42258c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk1NTQwNg==", "bodyText": "I'm not really sure I understand this. Each of the alternatives in the OneOfType can have a set of fields, but then the fields each get called alternatives?\nAlso, I think a more idiomatic thing to do would be to get a Property via Property.properties(property.getType().getType()). That way it will work correctly with getters and/or fields. It also keeps the reflection in Properties. Same comment goes for the DocGenerator, I think. Can we, at the same time, make the constructors of Property private?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3512#discussion_r471955406", "createdAt": "2020-08-18T06:57:58Z", "author": {"login": "tombentley"}, "path": "crd-generator/src/main/java/io/strimzi/crdgenerator/CrdGenerator.java", "diffHunk": "@@ -466,11 +468,39 @@ private ArrayNode buildSchemaRequired(Class<?> crdClass) {\n     private ObjectNode buildSchemaProperties(Class<?> crdClass) {\n         ObjectNode properties = nf.objectNode();\n         for (Property property : unionOfSubclassProperties(crdClass)) {\n-            buildProperty(properties, property);\n+            OneOfType oneOfType = property.getAnnotation(OneOfType.class);\n+            if (oneOfType != null && oneOfType.value().length > 0)    {\n+                List<Property> alternatives = new ArrayList<>(0);\n+\n+                for (OneOfType.Alternative alt : oneOfType.value()) {\n+                    for (OneOfType.Alternative.Field field : alt.value()) {\n+                        try {\n+                            alternatives.add(new Property(property.getType().getType().getDeclaredField(field.value())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b044907bf3afadb30e905bd684022141d3ef3678"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk1ODcyMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Set<Class<?>> classes = usedIn.get(c);\n          \n          \n            \n            \n          \n          \n            \n                    if (classes == null) {\n          \n          \n            \n                        classes = new HashSet<>(1);\n          \n          \n            \n                        usedIn.put(c, classes);\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    return classes;\n          \n          \n            \n                    return usedIn.computeIfAbsent(c, cls -> new HashSet(1));", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3512#discussion_r471958722", "createdAt": "2020-08-18T07:04:43Z", "author": {"login": "tombentley"}, "path": "crd-generator/src/main/java/io/strimzi/crdgenerator/DocGenerator.java", "diffHunk": "@@ -80,27 +83,57 @@ private void appendHeading(Crd crd, String name) throws IOException {\n     }\n \n     private void usedIn(Class<?> cls, Map<Class<?>, Set<Class<?>>> usedIn) {\n+        Set<Property> memorableProperties = new HashSet<>();\n+\n         for (Property property : properties(cls).values()) {\n             if (property.isAnnotationPresent(KubeLink.class)) {\n                 continue;\n             }\n+\n+            OneOfType oneOfType = property.getAnnotation(OneOfType.class);\n+            if (oneOfType != null && oneOfType.value().length > 0) {\n+                for (OneOfType.Alternative alt : oneOfType.value()) {\n+                    for (OneOfType.Alternative.Field field : alt.value()) {\n+                        try {\n+                            memorableProperties.add(new Property(property.getType().getType().getDeclaredField(field.value())));\n+                        } catch (NoSuchFieldException e) {\n+                            throw new RuntimeException(\"Failed to find field used in OneOfType annotation\", e);\n+                        }\n+                    }\n+                }\n+            } else {\n+                memorableProperties.add(property);\n+            }\n+        }\n+\n+        for (Property property : memorableProperties) {\n             PropertyType propertyType = property.getType();\n             Class<?> type = propertyType.isArray() ? propertyType.arrayBase() : propertyType.getType();\n             for (Class<?> c : subtypesOrSelf(type)) {\n                 if (Schema.isJsonScalarType(c)) {\n                     continue;\n                 }\n-                Set<Class<?>> classes = usedIn.get(c);\n-                if (classes == null) {\n-                    classes = new HashSet<>(2);\n-                    usedIn.put(c, classes);\n-                }\n+\n+                Set<Class<?>> classes = getOrCreateClassesSet(c, usedIn);\n+\n                 classes.add(cls);\n+\n                 usedIn(c, usedIn);\n             }\n         }\n     }\n \n+    private Set<Class<?>> getOrCreateClassesSet(Class<?> c, Map<Class<?>, Set<Class<?>>> usedIn)   {\n+        Set<Class<?>> classes = usedIn.get(c);\n+\n+        if (classes == null) {\n+            classes = new HashSet<>(1);\n+            usedIn.put(c, classes);\n+        }\n+\n+        return classes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b044907bf3afadb30e905bd684022141d3ef3678"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk2MDY3NA==", "bodyText": "What's the value of using Field, couldn't value just be a String[] of the field names.\nAlso, I think we should use the term property, rather than field, since in Java terms these things can be either fields or getters (aka properties).", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3512#discussion_r471960674", "createdAt": "2020-08-18T07:08:48Z", "author": {"login": "tombentley"}, "path": "crd-generator/src/main/java/io/strimzi/crdgenerator/annotations/OneOfType.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.crdgenerator.annotations;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target({ElementType.METHOD})\n+public @interface OneOfType {\n+    /** @return List of alternatives */\n+    Alternative[] value();\n+\n+    @interface Alternative {\n+        @interface Field {\n+            /** @return The name of a field */\n+            String value();\n+        }\n+\n+        /** @return Fields in this alternative */\n+        Field[] value();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b044907bf3afadb30e905bd684022141d3ef3678"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMzMjYxOQ==", "bodyText": "I think you should be able to write the deserializer like this (for this case), which saves having to deserialize the whole tree into JsonNode only to go mapping it to java types:\n        @Override\n        public MapOrList deserialize(JsonParser jsonParser, DeserializationContext context) throws IOException {\n            MapOrList mapOrList;\n            ObjectCodec oc = jsonParser.getCodec();\n            if (jsonParser.currentToken() == JsonToken.START_ARRAY) {\n                mapOrList = new MapOrList(oc.readValue(jsonParser, new TypeReference<List<String>>() { }));\n            } else if (jsonParser.currentToken() == JsonToken.START_OBJECT) {\n                mapOrList = new MapOrList(oc.readValue(jsonParser, new TypeReference<Map<String, String>>() { }));\n            } else {\n                throw new RuntimeException();\n            }\n            return mapOrList;\n        }\nUnfortunately that's not possible for the Type1OrType2 case.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3512#discussion_r472332619", "createdAt": "2020-08-18T16:39:37Z", "author": {"login": "tombentley"}, "path": "crd-generator/src/test/java/io/strimzi/crdgenerator/MapOrList.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.crdgenerator;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.ObjectCodec;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectReader;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import io.strimzi.crdgenerator.annotations.Alternation;\n+import io.strimzi.crdgenerator.annotations.Alternative;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+@JsonDeserialize(using = MapOrList.Deserializer.class)\n+@JsonSerialize(using = MapOrList.Serializer.class)\n+@Alternation\n+public class MapOrList {\n+    private Map<String, String> mapValue;\n+    private List<String> listValue;\n+\n+    public MapOrList(Map<String, String> map)   {\n+        mapValue = map;\n+        listValue = null;\n+    }\n+\n+    public MapOrList(List<String> list)   {\n+        mapValue = null;\n+        listValue = list;\n+    }\n+\n+    @Alternative\n+    public Map<String, String> getMapValue()    {\n+        return mapValue;\n+    }\n+\n+    @Alternative\n+    public List<String> getListValue()    {\n+        return listValue;\n+    }\n+\n+    public static class Serializer extends JsonSerializer<MapOrList> {\n+        @Override\n+        public void serialize(MapOrList value, JsonGenerator generator, SerializerProvider provider) throws IOException {\n+            if (value != null) {\n+                if (value.listValue != null)    {\n+                    generator.writeObject(value.listValue);\n+                } else if (value.mapValue != null)  {\n+                    generator.writeObject(value.mapValue);\n+                } else {\n+                    generator.writeNull();\n+                }\n+            } else {\n+                generator.writeNull();\n+            }\n+        }\n+    }\n+\n+    public static class Deserializer extends JsonDeserializer<MapOrList> {\n+        @Override\n+        public MapOrList deserialize(JsonParser jsonParser, DeserializationContext context) throws IOException {\n+            ObjectMapper objectMapper = new ObjectMapper();\n+            ObjectCodec oc = jsonParser.getCodec();\n+            JsonNode node = oc.readTree(jsonParser);\n+            MapOrList mapOrList;\n+\n+            if (node.isArray()) {\n+                ObjectReader reader = objectMapper.readerFor(new TypeReference<List<String>>() { });\n+                List<String> list = reader.readValue(node);\n+                mapOrList = new MapOrList(list);\n+            } else {\n+                ObjectReader reader = objectMapper.readerFor(new TypeReference<Map<String, String>>() { });\n+                Map<String, String> map = reader.readValue(node);\n+                mapOrList = new MapOrList(map);\n+            }\n+            return mapOrList;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d30bda65b7a81c1e5bf4ffbbaab398629821b4f"}, "originalPosition": 89}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2f509c76073d89982a041a696961c57110efa3b", "author": {"user": {"login": "scholzj", "name": "Jakub Scholz"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/e2f509c76073d89982a041a696961c57110efa3b", "committedDate": "2020-08-19T15:09:59Z", "message": "Improve the MapOrList deserializer\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNTYwNjEz", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3512#pullrequestreview-470560613", "createdAt": "2020-08-19T15:14:23Z", "commit": {"oid": "e2f509c76073d89982a041a696961c57110efa3b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1160, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}