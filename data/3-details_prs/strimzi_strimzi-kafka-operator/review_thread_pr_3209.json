{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MDcwNDA4", "number": 3209, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDoyNDowOVrOEGgRkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMTozMjozNlrOEGtiLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjU1Njk3OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDoyNDowOVrOGlWCXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwODowMTozNlrOGlkCmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgxMTU1MA==", "bodyText": "I think it might make sense to also check the tasksMax in .spec", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3209#discussion_r441811550", "createdAt": "2020-06-17T20:24:09Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java", "diffHunk": "@@ -944,6 +946,53 @@ void testScaleConnectWithConnectorToZero() {\n         assertThat(connectorStatus.getConditions().stream().anyMatch(condition -> condition.getMessage().contains(\"has 0 replicas\")), is(true));\n     }\n \n+    @Test\n+    void testScaleConnectAndConnectorSubresource() {\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3).done();\n+\n+        KafkaConnectResource.kafkaConnect(CLUSTER_NAME, 1)\n+            .editMetadata()\n+                .addToLabels(\"type\", \"kafka-connect\")\n+                .addToAnnotations(Annotations.STRIMZI_IO_USE_CONNECTOR_RESOURCES, \"true\")\n+            .endMetadata()\n+            .done();\n+\n+        KafkaConnectorResource.kafkaConnector(CLUSTER_NAME)\n+            .editSpec()\n+                .withClassName(\"org.apache.kafka.connect.file.FileStreamSinkConnector\")\n+                .addToConfig(\"file\", Constants.DEFAULT_SINK_FILE_PATH)\n+                .addToConfig(\"key.converter\", \"org.apache.kafka.connect.storage.StringConverter\")\n+                .addToConfig(\"value.converter\", \"org.apache.kafka.connect.storage.StringConverter\")\n+                .addToConfig(\"topics\", TOPIC_NAME)\n+            .endSpec()\n+            .done();\n+\n+        int scaleTo = 4;\n+        long connectObsGen = KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration();\n+        String connectGenName = kubeClient().listPods(\"type\", \"kafka-connect\").get(0).getMetadata().getGenerateName();\n+\n+        LOGGER.info(\"-------> Scaling KafkaConnect subresource <-------\");\n+        LOGGER.info(\"Scaling subresource replicas to {}\", scaleTo);\n+        cmdKubeClient().scaleByName(KafkaConnect.RESOURCE_KIND, CLUSTER_NAME, scaleTo);\n+        DeploymentUtils.waitForDeploymentAndPodsReady(KafkaConnectResources.deploymentName(CLUSTER_NAME), scaleTo);\n+\n+        LOGGER.info(\"Check if replicas is set to {}, naming prefix should be same and observed generation higher\", scaleTo);\n+        List<String> connectPods = kubeClient().listPodNames(\"type\", \"kafka-connect\");\n+        assertThat(connectPods.size(), is(4));\n+        assertThat(connectObsGen < KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration(), is(true));\n+        for (String pod : connectPods) {\n+            assertThat(pod.contains(connectGenName), is(true));\n+        }\n+\n+        LOGGER.info(\"-------> Scaling KafkaConnector subresource <-------\");\n+        LOGGER.info(\"Scaling subresource task max to {}\", scaleTo);\n+        cmdKubeClient().scaleByName(KafkaConnector.RESOURCE_KIND, CLUSTER_NAME, scaleTo);\n+\n+        LOGGER.info(\"Check if taskMax is set to {}\", scaleTo);\n+        int tasksMax = KafkaConnectorResource.kafkaConnectorClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getTasksMax();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb8651ef69309296a8516cd53a8b5b63787f6774"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA0MDk4Ng==", "bodyText": "Yes, I was thinking about it, but then I decide to keep assertion this way. I'll add it ASAP :) Thanks Jakub", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3209#discussion_r442040986", "createdAt": "2020-06-18T08:01:36Z", "author": {"login": "im-konge"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java", "diffHunk": "@@ -944,6 +946,53 @@ void testScaleConnectWithConnectorToZero() {\n         assertThat(connectorStatus.getConditions().stream().anyMatch(condition -> condition.getMessage().contains(\"has 0 replicas\")), is(true));\n     }\n \n+    @Test\n+    void testScaleConnectAndConnectorSubresource() {\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3).done();\n+\n+        KafkaConnectResource.kafkaConnect(CLUSTER_NAME, 1)\n+            .editMetadata()\n+                .addToLabels(\"type\", \"kafka-connect\")\n+                .addToAnnotations(Annotations.STRIMZI_IO_USE_CONNECTOR_RESOURCES, \"true\")\n+            .endMetadata()\n+            .done();\n+\n+        KafkaConnectorResource.kafkaConnector(CLUSTER_NAME)\n+            .editSpec()\n+                .withClassName(\"org.apache.kafka.connect.file.FileStreamSinkConnector\")\n+                .addToConfig(\"file\", Constants.DEFAULT_SINK_FILE_PATH)\n+                .addToConfig(\"key.converter\", \"org.apache.kafka.connect.storage.StringConverter\")\n+                .addToConfig(\"value.converter\", \"org.apache.kafka.connect.storage.StringConverter\")\n+                .addToConfig(\"topics\", TOPIC_NAME)\n+            .endSpec()\n+            .done();\n+\n+        int scaleTo = 4;\n+        long connectObsGen = KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration();\n+        String connectGenName = kubeClient().listPods(\"type\", \"kafka-connect\").get(0).getMetadata().getGenerateName();\n+\n+        LOGGER.info(\"-------> Scaling KafkaConnect subresource <-------\");\n+        LOGGER.info(\"Scaling subresource replicas to {}\", scaleTo);\n+        cmdKubeClient().scaleByName(KafkaConnect.RESOURCE_KIND, CLUSTER_NAME, scaleTo);\n+        DeploymentUtils.waitForDeploymentAndPodsReady(KafkaConnectResources.deploymentName(CLUSTER_NAME), scaleTo);\n+\n+        LOGGER.info(\"Check if replicas is set to {}, naming prefix should be same and observed generation higher\", scaleTo);\n+        List<String> connectPods = kubeClient().listPodNames(\"type\", \"kafka-connect\");\n+        assertThat(connectPods.size(), is(4));\n+        assertThat(connectObsGen < KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration(), is(true));\n+        for (String pod : connectPods) {\n+            assertThat(pod.contains(connectGenName), is(true));\n+        }\n+\n+        LOGGER.info(\"-------> Scaling KafkaConnector subresource <-------\");\n+        LOGGER.info(\"Scaling subresource task max to {}\", scaleTo);\n+        cmdKubeClient().scaleByName(KafkaConnector.RESOURCE_KIND, CLUSTER_NAME, scaleTo);\n+\n+        LOGGER.info(\"Check if taskMax is set to {}\", scaleTo);\n+        int tasksMax = KafkaConnectorResource.kafkaConnectorClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getTasksMax();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgxMTU1MA=="}, "originalCommit": {"oid": "bb8651ef69309296a8516cd53a8b5b63787f6774"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjU1ODQ4OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDoyNDo0MFrOGlWDXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDoyNDo0MFrOGlWDXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgxMTgwNQ==", "bodyText": "I think it might make sense to also check the replicas in .spec and .status. Same should apply to all tests I guess.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3209#discussion_r441811805", "createdAt": "2020-06-17T20:24:40Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java", "diffHunk": "@@ -944,6 +946,53 @@ void testScaleConnectWithConnectorToZero() {\n         assertThat(connectorStatus.getConditions().stream().anyMatch(condition -> condition.getMessage().contains(\"has 0 replicas\")), is(true));\n     }\n \n+    @Test\n+    void testScaleConnectAndConnectorSubresource() {\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3).done();\n+\n+        KafkaConnectResource.kafkaConnect(CLUSTER_NAME, 1)\n+            .editMetadata()\n+                .addToLabels(\"type\", \"kafka-connect\")\n+                .addToAnnotations(Annotations.STRIMZI_IO_USE_CONNECTOR_RESOURCES, \"true\")\n+            .endMetadata()\n+            .done();\n+\n+        KafkaConnectorResource.kafkaConnector(CLUSTER_NAME)\n+            .editSpec()\n+                .withClassName(\"org.apache.kafka.connect.file.FileStreamSinkConnector\")\n+                .addToConfig(\"file\", Constants.DEFAULT_SINK_FILE_PATH)\n+                .addToConfig(\"key.converter\", \"org.apache.kafka.connect.storage.StringConverter\")\n+                .addToConfig(\"value.converter\", \"org.apache.kafka.connect.storage.StringConverter\")\n+                .addToConfig(\"topics\", TOPIC_NAME)\n+            .endSpec()\n+            .done();\n+\n+        int scaleTo = 4;\n+        long connectObsGen = KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration();\n+        String connectGenName = kubeClient().listPods(\"type\", \"kafka-connect\").get(0).getMetadata().getGenerateName();\n+\n+        LOGGER.info(\"-------> Scaling KafkaConnect subresource <-------\");\n+        LOGGER.info(\"Scaling subresource replicas to {}\", scaleTo);\n+        cmdKubeClient().scaleByName(KafkaConnect.RESOURCE_KIND, CLUSTER_NAME, scaleTo);\n+        DeploymentUtils.waitForDeploymentAndPodsReady(KafkaConnectResources.deploymentName(CLUSTER_NAME), scaleTo);\n+\n+        LOGGER.info(\"Check if replicas is set to {}, naming prefix should be same and observed generation higher\", scaleTo);\n+        List<String> connectPods = kubeClient().listPodNames(\"type\", \"kafka-connect\");\n+        assertThat(connectPods.size(), is(4));\n+        assertThat(connectObsGen < KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration(), is(true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb8651ef69309296a8516cd53a8b5b63787f6774"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDcwNDQxOnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/ConnectS2IST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMToyNDozOVrOGlrB-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMToyNDozOVrOGlrB-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NTUxNA==", "bodyText": "I would be nice to have a comment why this assert pass", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3209#discussion_r442155514", "createdAt": "2020-06-18T11:24:39Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/ConnectS2IST.java", "diffHunk": "@@ -689,6 +689,36 @@ void testScaleConnectS2IWithConnectorToZero() {\n         assertThat(connectorStatus.getConditions().stream().anyMatch(condition -> condition.getMessage().contains(\"has 0 replicas\")), is(true));\n     }\n \n+    @Test\n+    void testScaleConnectS2ISubresource() {\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3).done();\n+\n+        KafkaConnectS2IResource.kafkaConnectS2I(CLUSTER_NAME, CLUSTER_NAME, 1)\n+            .editMetadata()\n+                .addToLabels(\"type\", \"kafka-connect-s2i\")\n+            .endMetadata()\n+            .done();\n+\n+        int scaleTo = 4;\n+        long connectS2IObsGen = KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration();\n+        String connectS2IGenName = kubeClient().listPods(\"type\", \"kafka-connect-s2i\").get(0).getMetadata().getGenerateName();\n+\n+        LOGGER.info(\"-------> Scaling KafkaConnectS2I subresource <-------\");\n+        LOGGER.info(\"Scaling subresource replicas to {}\", scaleTo);\n+        cmdKubeClient().scaleByName(KafkaConnectS2I.RESOURCE_KIND, CLUSTER_NAME, scaleTo);\n+        DeploymentConfigUtils.waitForDeploymentConfigAndPodsReady(KafkaConnectS2IResources.deploymentName(CLUSTER_NAME), scaleTo);\n+\n+        LOGGER.info(\"Check if replicas is set to {}, naming prefix should be same and observed generation higher\", scaleTo);\n+        List<String> connectS2IPods = kubeClient().listPodNames(\"type\", \"kafka-connect-s2i\");\n+        assertThat(connectS2IPods.size(), is(4));\n+        assertThat(KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getSpec().getReplicas(), is(4));\n+        assertThat(KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getReplicas(), is(4));\n+        assertThat(connectS2IObsGen < KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration(), is(true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "463c4bf64b19c080bf3686053a17bee3619b94bf"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDcwNzYzOnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/ConnectS2IST.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMToyNTo0MlrOGlrD9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMTo0Mzo1NFrOGlrmOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NjAyMQ==", "bodyText": "is this rly needed? I assume the s2i pods will contain it for sure. I see you have it everywhere.  I don't say it's wrong, maybe I just don't see the value of it?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3209#discussion_r442156021", "createdAt": "2020-06-18T11:25:42Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/ConnectS2IST.java", "diffHunk": "@@ -689,6 +689,36 @@ void testScaleConnectS2IWithConnectorToZero() {\n         assertThat(connectorStatus.getConditions().stream().anyMatch(condition -> condition.getMessage().contains(\"has 0 replicas\")), is(true));\n     }\n \n+    @Test\n+    void testScaleConnectS2ISubresource() {\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3).done();\n+\n+        KafkaConnectS2IResource.kafkaConnectS2I(CLUSTER_NAME, CLUSTER_NAME, 1)\n+            .editMetadata()\n+                .addToLabels(\"type\", \"kafka-connect-s2i\")\n+            .endMetadata()\n+            .done();\n+\n+        int scaleTo = 4;\n+        long connectS2IObsGen = KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration();\n+        String connectS2IGenName = kubeClient().listPods(\"type\", \"kafka-connect-s2i\").get(0).getMetadata().getGenerateName();\n+\n+        LOGGER.info(\"-------> Scaling KafkaConnectS2I subresource <-------\");\n+        LOGGER.info(\"Scaling subresource replicas to {}\", scaleTo);\n+        cmdKubeClient().scaleByName(KafkaConnectS2I.RESOURCE_KIND, CLUSTER_NAME, scaleTo);\n+        DeploymentConfigUtils.waitForDeploymentConfigAndPodsReady(KafkaConnectS2IResources.deploymentName(CLUSTER_NAME), scaleTo);\n+\n+        LOGGER.info(\"Check if replicas is set to {}, naming prefix should be same and observed generation higher\", scaleTo);\n+        List<String> connectS2IPods = kubeClient().listPodNames(\"type\", \"kafka-connect-s2i\");\n+        assertThat(connectS2IPods.size(), is(4));\n+        assertThat(KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getSpec().getReplicas(), is(4));\n+        assertThat(KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getReplicas(), is(4));\n+        assertThat(connectS2IObsGen < KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration(), is(true));\n+        for (String pod : connectS2IPods) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "463c4bf64b19c080bf3686053a17bee3619b94bf"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE2NDc5Mg==", "bodyText": "The main thing why I add this to all tests is, that if you scale the replicas like earlier, you'll get completely different names, something like my-cluster-connect-45456a-asd456, my-cluster-connect-weq56a-asd456, but when you scale the sub-resources, the other replicas will have same generated name (this can be seen in the yaml of resource in field generateName: ...) so the result be like my-cluster-connect-45456a-asd456, my-cluster-connect-45456a-asd456 -> only the end will change. So I'm testing, that all replicas are really containing this generateName part.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3209#discussion_r442164792", "createdAt": "2020-06-18T11:43:54Z", "author": {"login": "im-konge"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/ConnectS2IST.java", "diffHunk": "@@ -689,6 +689,36 @@ void testScaleConnectS2IWithConnectorToZero() {\n         assertThat(connectorStatus.getConditions().stream().anyMatch(condition -> condition.getMessage().contains(\"has 0 replicas\")), is(true));\n     }\n \n+    @Test\n+    void testScaleConnectS2ISubresource() {\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3).done();\n+\n+        KafkaConnectS2IResource.kafkaConnectS2I(CLUSTER_NAME, CLUSTER_NAME, 1)\n+            .editMetadata()\n+                .addToLabels(\"type\", \"kafka-connect-s2i\")\n+            .endMetadata()\n+            .done();\n+\n+        int scaleTo = 4;\n+        long connectS2IObsGen = KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration();\n+        String connectS2IGenName = kubeClient().listPods(\"type\", \"kafka-connect-s2i\").get(0).getMetadata().getGenerateName();\n+\n+        LOGGER.info(\"-------> Scaling KafkaConnectS2I subresource <-------\");\n+        LOGGER.info(\"Scaling subresource replicas to {}\", scaleTo);\n+        cmdKubeClient().scaleByName(KafkaConnectS2I.RESOURCE_KIND, CLUSTER_NAME, scaleTo);\n+        DeploymentConfigUtils.waitForDeploymentConfigAndPodsReady(KafkaConnectS2IResources.deploymentName(CLUSTER_NAME), scaleTo);\n+\n+        LOGGER.info(\"Check if replicas is set to {}, naming prefix should be same and observed generation higher\", scaleTo);\n+        List<String> connectS2IPods = kubeClient().listPodNames(\"type\", \"kafka-connect-s2i\");\n+        assertThat(connectS2IPods.size(), is(4));\n+        assertThat(KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getSpec().getReplicas(), is(4));\n+        assertThat(KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getReplicas(), is(4));\n+        assertThat(connectS2IObsGen < KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration(), is(true));\n+        for (String pod : connectS2IPods) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NjAyMQ=="}, "originalCommit": {"oid": "463c4bf64b19c080bf3686053a17bee3619b94bf"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDcyOTQyOnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMTozMjozNlrOGlrRYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMTo0NToxMFrOGlrobA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1OTQ1OQ==", "bodyText": "What about change max.tasks for one connect and see if everything is working and set properly?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3209#discussion_r442159459", "createdAt": "2020-06-18T11:32:36Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java", "diffHunk": "@@ -944,6 +946,56 @@ void testScaleConnectWithConnectorToZero() {\n         assertThat(connectorStatus.getConditions().stream().anyMatch(condition -> condition.getMessage().contains(\"has 0 replicas\")), is(true));\n     }\n \n+    @Test\n+    void testScaleConnectAndConnectorSubresource() {\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3).done();\n+\n+        KafkaConnectResource.kafkaConnect(CLUSTER_NAME, 1)\n+            .editMetadata()\n+                .addToLabels(\"type\", \"kafka-connect\")\n+                .addToAnnotations(Annotations.STRIMZI_IO_USE_CONNECTOR_RESOURCES, \"true\")\n+            .endMetadata()\n+            .done();\n+\n+        KafkaConnectorResource.kafkaConnector(CLUSTER_NAME)\n+            .editSpec()\n+                .withClassName(\"org.apache.kafka.connect.file.FileStreamSinkConnector\")\n+                .addToConfig(\"file\", Constants.DEFAULT_SINK_FILE_PATH)\n+                .addToConfig(\"key.converter\", \"org.apache.kafka.connect.storage.StringConverter\")\n+                .addToConfig(\"value.converter\", \"org.apache.kafka.connect.storage.StringConverter\")\n+                .addToConfig(\"topics\", TOPIC_NAME)\n+            .endSpec()\n+            .done();\n+\n+        int scaleTo = 4;\n+        long connectObsGen = KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration();\n+        String connectGenName = kubeClient().listPods(\"type\", \"kafka-connect\").get(0).getMetadata().getGenerateName();\n+\n+        LOGGER.info(\"-------> Scaling KafkaConnect subresource <-------\");\n+        LOGGER.info(\"Scaling subresource replicas to {}\", scaleTo);\n+        cmdKubeClient().scaleByName(KafkaConnect.RESOURCE_KIND, CLUSTER_NAME, scaleTo);\n+        DeploymentUtils.waitForDeploymentAndPodsReady(KafkaConnectResources.deploymentName(CLUSTER_NAME), scaleTo);\n+\n+        LOGGER.info(\"Check if replicas is set to {}, observed generation is higher - for spec and status - naming prefix should be same\", scaleTo);\n+        List<String> connectPods = kubeClient().listPodNames(\"type\", \"kafka-connect\");\n+        assertThat(connectPods.size(), is(4));\n+        assertThat(KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getSpec().getReplicas(), is(4));\n+        assertThat(KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getReplicas(), is(4));\n+        assertThat(connectObsGen < KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration(), is(true));\n+        for (String pod : connectPods) {\n+            assertThat(pod.contains(connectGenName), is(true));\n+        }\n+\n+        LOGGER.info(\"-------> Scaling KafkaConnector subresource <-------\");\n+        LOGGER.info(\"Scaling subresource task max to {}\", scaleTo);\n+        cmdKubeClient().scaleByName(KafkaConnector.RESOURCE_KIND, CLUSTER_NAME, scaleTo);\n+        KafkaConnectorUtils.waitForConnectorsTaskMaxChange(CLUSTER_NAME, scaleTo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "463c4bf64b19c080bf3686053a17bee3619b94bf"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE2NTM1Ng==", "bodyText": "Yes, I can add it :) thanks", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3209#discussion_r442165356", "createdAt": "2020-06-18T11:45:10Z", "author": {"login": "im-konge"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java", "diffHunk": "@@ -944,6 +946,56 @@ void testScaleConnectWithConnectorToZero() {\n         assertThat(connectorStatus.getConditions().stream().anyMatch(condition -> condition.getMessage().contains(\"has 0 replicas\")), is(true));\n     }\n \n+    @Test\n+    void testScaleConnectAndConnectorSubresource() {\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3).done();\n+\n+        KafkaConnectResource.kafkaConnect(CLUSTER_NAME, 1)\n+            .editMetadata()\n+                .addToLabels(\"type\", \"kafka-connect\")\n+                .addToAnnotations(Annotations.STRIMZI_IO_USE_CONNECTOR_RESOURCES, \"true\")\n+            .endMetadata()\n+            .done();\n+\n+        KafkaConnectorResource.kafkaConnector(CLUSTER_NAME)\n+            .editSpec()\n+                .withClassName(\"org.apache.kafka.connect.file.FileStreamSinkConnector\")\n+                .addToConfig(\"file\", Constants.DEFAULT_SINK_FILE_PATH)\n+                .addToConfig(\"key.converter\", \"org.apache.kafka.connect.storage.StringConverter\")\n+                .addToConfig(\"value.converter\", \"org.apache.kafka.connect.storage.StringConverter\")\n+                .addToConfig(\"topics\", TOPIC_NAME)\n+            .endSpec()\n+            .done();\n+\n+        int scaleTo = 4;\n+        long connectObsGen = KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration();\n+        String connectGenName = kubeClient().listPods(\"type\", \"kafka-connect\").get(0).getMetadata().getGenerateName();\n+\n+        LOGGER.info(\"-------> Scaling KafkaConnect subresource <-------\");\n+        LOGGER.info(\"Scaling subresource replicas to {}\", scaleTo);\n+        cmdKubeClient().scaleByName(KafkaConnect.RESOURCE_KIND, CLUSTER_NAME, scaleTo);\n+        DeploymentUtils.waitForDeploymentAndPodsReady(KafkaConnectResources.deploymentName(CLUSTER_NAME), scaleTo);\n+\n+        LOGGER.info(\"Check if replicas is set to {}, observed generation is higher - for spec and status - naming prefix should be same\", scaleTo);\n+        List<String> connectPods = kubeClient().listPodNames(\"type\", \"kafka-connect\");\n+        assertThat(connectPods.size(), is(4));\n+        assertThat(KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getSpec().getReplicas(), is(4));\n+        assertThat(KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getReplicas(), is(4));\n+        assertThat(connectObsGen < KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration(), is(true));\n+        for (String pod : connectPods) {\n+            assertThat(pod.contains(connectGenName), is(true));\n+        }\n+\n+        LOGGER.info(\"-------> Scaling KafkaConnector subresource <-------\");\n+        LOGGER.info(\"Scaling subresource task max to {}\", scaleTo);\n+        cmdKubeClient().scaleByName(KafkaConnector.RESOURCE_KIND, CLUSTER_NAME, scaleTo);\n+        KafkaConnectorUtils.waitForConnectorsTaskMaxChange(CLUSTER_NAME, scaleTo);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1OTQ1OQ=="}, "originalCommit": {"oid": "463c4bf64b19c080bf3686053a17bee3619b94bf"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1699, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}