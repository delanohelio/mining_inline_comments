{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3MDAxMTUw", "number": 3579, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMjo0MDozMVrOEe4pJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMjo0MjoxOVrOEe4r4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODIwNzc0OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/kafka/KafkaST.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMjo0MDozMVrOHK0Z_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMjo0NzowMFrOHK0pZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEwNjQzMA==", "bodyText": "why it's global constant if it's used in one test?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3579#discussion_r481106430", "createdAt": "2020-09-01T12:40:31Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/kafka/KafkaST.java", "diffHunk": "@@ -106,40 +106,39 @@\n class KafkaST extends AbstractST {\n \n     private static final Logger LOGGER = LogManager.getLogger(KafkaST.class);\n-\n+    private static final String TEMPLATE_PATH = TestUtils.USER_PATH + \"/../examples/templates/cluster-operator\";\n     public static final String NAMESPACE = \"kafka-cluster-test\";\n+    private static final String OPENSHIFT_CLUSTER_NAME = \"openshift-my-cluster\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "251bc74eda2e3bc365bf0e3d249451b50a8fd209"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTExMDM3Mg==", "bodyText": "I used this for the deletion, if you don't agree, I can remove it.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3579#discussion_r481110372", "createdAt": "2020-09-01T12:47:00Z", "author": {"login": "im-konge"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/kafka/KafkaST.java", "diffHunk": "@@ -106,40 +106,39 @@\n class KafkaST extends AbstractST {\n \n     private static final Logger LOGGER = LogManager.getLogger(KafkaST.class);\n-\n+    private static final String TEMPLATE_PATH = TestUtils.USER_PATH + \"/../examples/templates/cluster-operator\";\n     public static final String NAMESPACE = \"kafka-cluster-test\";\n+    private static final String OPENSHIFT_CLUSTER_NAME = \"openshift-my-cluster\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEwNjQzMA=="}, "originalCommit": {"oid": "251bc74eda2e3bc365bf0e3d249451b50a8fd209"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODIwODM4OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/kafka/KafkaST.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMjo0MDo0MFrOHK0aWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMjo0NzowNVrOHK0pmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEwNjUyMw==", "bodyText": "why it's global constant if it's used in one test?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3579#discussion_r481106523", "createdAt": "2020-09-01T12:40:40Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/kafka/KafkaST.java", "diffHunk": "@@ -106,40 +106,39 @@\n class KafkaST extends AbstractST {\n \n     private static final Logger LOGGER = LogManager.getLogger(KafkaST.class);\n-\n+    private static final String TEMPLATE_PATH = TestUtils.USER_PATH + \"/../examples/templates/cluster-operator\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "251bc74eda2e3bc365bf0e3d249451b50a8fd209"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTExMDQyNQ==", "bodyText": "Same as above", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3579#discussion_r481110425", "createdAt": "2020-09-01T12:47:05Z", "author": {"login": "im-konge"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/kafka/KafkaST.java", "diffHunk": "@@ -106,40 +106,39 @@\n class KafkaST extends AbstractST {\n \n     private static final Logger LOGGER = LogManager.getLogger(KafkaST.class);\n-\n+    private static final String TEMPLATE_PATH = TestUtils.USER_PATH + \"/../examples/templates/cluster-operator\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEwNjUyMw=="}, "originalCommit": {"oid": "251bc74eda2e3bc365bf0e3d249451b50a8fd209"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODIxNDc1OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/kafka/KafkaST.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMjo0MjoxOVrOHK0eAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjoyNTozOVrOHLdmBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEwNzQ1Nw==", "bodyText": "Why is this moved from the one scenario where everything is deployed (and deleted) to afterEach?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3579#discussion_r481107457", "createdAt": "2020-09-01T12:42:19Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/kafka/KafkaST.java", "diffHunk": "@@ -1957,6 +1956,14 @@ void setup() throws Exception {\n     @Override\n     protected void tearDownEnvironmentAfterEach() throws Exception {\n         super.tearDownEnvironmentAfterEach();\n+        if (cluster.getListOfDeployedResources().contains(TEMPLATE_PATH)) {\n+            cluster.deleteCustomResources(TEMPLATE_PATH);\n+        }\n+\n+        kubeClient().listPods().stream()\n+            .filter(p -> p.getMetadata().getName().startsWith(OPENSHIFT_CLUSTER_NAME))\n+            .forEach(p -> PodUtils.deletePodWithWait(p.getMetadata().getName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "251bc74eda2e3bc365bf0e3d249451b50a8fd209"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEwOTg2Ng==", "bodyText": "If the test fails for example in Kafka creation (deploying), the resources are not deleted properly. This will ensure that all resources from the testDeployKafkaClusterViaTemplate will be removed and will not affect other tests.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3579#discussion_r481109866", "createdAt": "2020-09-01T12:46:14Z", "author": {"login": "im-konge"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/kafka/KafkaST.java", "diffHunk": "@@ -1957,6 +1956,14 @@ void setup() throws Exception {\n     @Override\n     protected void tearDownEnvironmentAfterEach() throws Exception {\n         super.tearDownEnvironmentAfterEach();\n+        if (cluster.getListOfDeployedResources().contains(TEMPLATE_PATH)) {\n+            cluster.deleteCustomResources(TEMPLATE_PATH);\n+        }\n+\n+        kubeClient().listPods().stream()\n+            .filter(p -> p.getMetadata().getName().startsWith(OPENSHIFT_CLUSTER_NAME))\n+            .forEach(p -> PodUtils.deletePodWithWait(p.getMetadata().getName()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEwNzQ1Nw=="}, "originalCommit": {"oid": "251bc74eda2e3bc365bf0e3d249451b50a8fd209"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTExMjM0MQ==", "bodyText": "I was looking for some solution to be executed only for the testDeployKafkaClusterViaTemplate(), but there is no annotation for that. Only thing what I can add is the try{}catch{} block and that's not good approach from MPOV", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3579#discussion_r481112341", "createdAt": "2020-09-01T12:50:12Z", "author": {"login": "im-konge"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/kafka/KafkaST.java", "diffHunk": "@@ -1957,6 +1956,14 @@ void setup() throws Exception {\n     @Override\n     protected void tearDownEnvironmentAfterEach() throws Exception {\n         super.tearDownEnvironmentAfterEach();\n+        if (cluster.getListOfDeployedResources().contains(TEMPLATE_PATH)) {\n+            cluster.deleteCustomResources(TEMPLATE_PATH);\n+        }\n+\n+        kubeClient().listPods().stream()\n+            .filter(p -> p.getMetadata().getName().startsWith(OPENSHIFT_CLUSTER_NAME))\n+            .forEach(p -> PodUtils.deletePodWithWait(p.getMetadata().getName()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEwNzQ1Nw=="}, "originalCommit": {"oid": "251bc74eda2e3bc365bf0e3d249451b50a8fd209"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEyMjQ1NQ==", "bodyText": "Oh make sense to me!", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3579#discussion_r481122455", "createdAt": "2020-09-01T13:06:22Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/kafka/KafkaST.java", "diffHunk": "@@ -1957,6 +1956,14 @@ void setup() throws Exception {\n     @Override\n     protected void tearDownEnvironmentAfterEach() throws Exception {\n         super.tearDownEnvironmentAfterEach();\n+        if (cluster.getListOfDeployedResources().contains(TEMPLATE_PATH)) {\n+            cluster.deleteCustomResources(TEMPLATE_PATH);\n+        }\n+\n+        kubeClient().listPods().stream()\n+            .filter(p -> p.getMetadata().getName().startsWith(OPENSHIFT_CLUSTER_NAME))\n+            .forEach(p -> PodUtils.deletePodWithWait(p.getMetadata().getName()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEwNzQ1Nw=="}, "originalCommit": {"oid": "251bc74eda2e3bc365bf0e3d249451b50a8fd209"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEyNDczMQ==", "bodyText": "Maybe we can talk to someone from JUnit to add anno to do something after specific test \ud83d\ude04", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3579#discussion_r481124731", "createdAt": "2020-09-01T13:10:03Z", "author": {"login": "im-konge"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/kafka/KafkaST.java", "diffHunk": "@@ -1957,6 +1956,14 @@ void setup() throws Exception {\n     @Override\n     protected void tearDownEnvironmentAfterEach() throws Exception {\n         super.tearDownEnvironmentAfterEach();\n+        if (cluster.getListOfDeployedResources().contains(TEMPLATE_PATH)) {\n+            cluster.deleteCustomResources(TEMPLATE_PATH);\n+        }\n+\n+        kubeClient().listPods().stream()\n+            .filter(p -> p.getMetadata().getName().startsWith(OPENSHIFT_CLUSTER_NAME))\n+            .forEach(p -> PodUtils.deletePodWithWait(p.getMetadata().getName()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEwNzQ1Nw=="}, "originalCommit": {"oid": "251bc74eda2e3bc365bf0e3d249451b50a8fd209"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc4MTI1NQ==", "bodyText": "@after if testName = mySpecific test\nhttps://stackoverflow.com/a/41321322 ;-)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3579#discussion_r481781255", "createdAt": "2020-09-02T06:25:39Z", "author": {"login": "michalxo"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/kafka/KafkaST.java", "diffHunk": "@@ -1957,6 +1956,14 @@ void setup() throws Exception {\n     @Override\n     protected void tearDownEnvironmentAfterEach() throws Exception {\n         super.tearDownEnvironmentAfterEach();\n+        if (cluster.getListOfDeployedResources().contains(TEMPLATE_PATH)) {\n+            cluster.deleteCustomResources(TEMPLATE_PATH);\n+        }\n+\n+        kubeClient().listPods().stream()\n+            .filter(p -> p.getMetadata().getName().startsWith(OPENSHIFT_CLUSTER_NAME))\n+            .forEach(p -> PodUtils.deletePodWithWait(p.getMetadata().getName()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEwNzQ1Nw=="}, "originalCommit": {"oid": "251bc74eda2e3bc365bf0e3d249451b50a8fd209"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1049, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}