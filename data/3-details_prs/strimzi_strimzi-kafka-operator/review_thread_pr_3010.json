{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3NTMxMzc2", "number": 3010, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMDozNjo0N1rOD8Ol3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMDozNjo0N1rOD8Ol3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDgwMjIyOnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/RollingUpdateST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMDozNjo0N1rOGVCm6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMDozNjo0N1rOGVCm6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcxNjAwOA==", "bodyText": "Do we need this check when we wait for rolling update anyway?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3010#discussion_r424716008", "createdAt": "2020-05-13T20:36:47Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/RollingUpdateST.java", "diffHunk": "@@ -972,6 +972,34 @@ void testMetricsChange() {\n         zkMetricsOutput.values().forEach(value -> assertThat(value, is(\"\")));\n     }\n \n+    @Test\n+    void testKafkaTopicRFLowerThanMinInSyncReplicas() {\n+        KafkaResource.kafkaPersistent(CLUSTER_NAME, 2).done();\n+        KafkaTopicResource.topic(CLUSTER_NAME, TOPIC_NAME, 1, 1).done();\n+\n+        String kafkaName = KafkaResources.kafkaStatefulSetName(CLUSTER_NAME);\n+        Map<String, String> kafkaPods = StatefulSetUtils.ssSnapshot(kafkaName);\n+\n+        LOGGER.info(\"Setting KafkaTopic's min.insync.replicas to be higher than replication factor\");\n+        KafkaTopicResource.replaceTopicResource(TOPIC_NAME, kafkaTopic -> kafkaTopic.getSpec().getConfig().replace(\"min.insync.replicas\", 2));\n+\n+        // rolling update for kafka\n+        LOGGER.info(\"Annotate Kafka StatefulSet {} with manual rolling update annotation\", kafkaName);\n+        timeMeasuringSystem.setOperationID(timeMeasuringSystem.startTimeMeasuring(Operation.ROLLING_UPDATE));\n+        // set annotation to trigger Kafka rolling update\n+        kubeClient().statefulSet(kafkaName).cascading(false).edit()\n+            .editMetadata()\n+                .addToAnnotations(Annotations.ANNO_STRIMZI_IO_MANUAL_ROLLING_UPDATE, \"true\")\n+            .endMetadata().done();\n+\n+        // check annotation to trigger rolling update\n+        assertThat(Boolean.parseBoolean(kubeClient().getStatefulSet(kafkaName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38572fe3fa887ced24c4f9cf468f83cd3549ed03"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 48, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}