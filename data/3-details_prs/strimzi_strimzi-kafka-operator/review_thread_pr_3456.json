{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMzA2NDc4", "number": 3456, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjowMzowNlrOEVYhjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNToxMzo1M1rOEVdTaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODU3MzU4OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/mirrormaker/MirrorMaker2ST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjowMzowNlrOG8GpNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjowMzowNlrOG8GpNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY3NjU5OQ==", "bodyText": "Since you already do asserts on the status, maybe you can also check that url is not set.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3456#discussion_r465676599", "createdAt": "2020-08-05T12:03:06Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/mirrormaker/MirrorMaker2ST.java", "diffHunk": "@@ -653,6 +655,39 @@ void testMirrorMaker2CorrectlyMirrorsHeaders() {\n         assertThat(log, containsString(header1));\n         assertThat(log, containsString(header2));\n     }\n+\n+    @Test\n+    void testScaleMirrorMaker2ToZero() {\n+        // Deploy source kafka\n+        KafkaResource.kafkaEphemeral(kafkaClusterSourceName, 1, 1).done();\n+        // Deploy target kafka\n+        KafkaResource.kafkaEphemeral(kafkaClusterTargetName, 1, 1).done();\n+\n+        KafkaMirrorMaker2Resource.kafkaMirrorMaker2(CLUSTER_NAME, kafkaClusterTargetName, kafkaClusterSourceName, 3, false)\n+            .editMetadata()\n+                .addToLabels(\"type\", \"kafka-mirror-maker-2\")\n+            .endMetadata()\n+            .done();\n+\n+        long oldObsGen = KafkaMirrorMaker2Resource.kafkaMirrorMaker2Client().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration();\n+        String mm2DepName = KafkaMirrorMaker2Resources.deploymentName(CLUSTER_NAME);\n+        List<String> mm2Pods = kubeClient().listPodNames(\"type\", \"kafka-mirror-maker-2\");\n+        assertThat(mm2Pods.size(), is(3));\n+\n+        LOGGER.info(\"Scaling MirrorMaker to zero\");\n+        KafkaMirrorMaker2Resource.replaceKafkaMirrorMaker2Resource(CLUSTER_NAME, mm2 -> mm2.getSpec().setReplicas(0));\n+\n+        PodUtils.waitForPodsReady(kubeClient().getDeploymentSelectors(mm2DepName), 0, true);\n+\n+        mm2Pods = kubeClient().listPodNames(\"type\", \"kafka-mirror-maker-2\");\n+        KafkaMirrorMaker2Status mm2Status = KafkaMirrorMaker2Resource.kafkaMirrorMaker2Client().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus();\n+        long actualObsGen = KafkaMirrorMaker2Resource.kafkaMirrorMaker2Client().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration();\n+\n+        assertThat(mm2Pods.size(), is(0));\n+        assertThat(mm2Status.getConditions().get(0).getType(), is(\"Ready\"));\n+        assertThat(actualObsGen, is(not(oldObsGen)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57b1fc1468a79a437ae623d71a146e75668b4abf"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTM1NjU3OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/mirrormaker/MirrorMaker2ST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNToxMzo1M1rOG8OR_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNToxMzo1M1rOG8OR_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgwMTcyNw==", "bodyText": "\"MirrorMaker2\"", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3456#discussion_r465801727", "createdAt": "2020-08-05T15:13:53Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/mirrormaker/MirrorMaker2ST.java", "diffHunk": "@@ -653,6 +655,40 @@ void testMirrorMaker2CorrectlyMirrorsHeaders() {\n         assertThat(log, containsString(header1));\n         assertThat(log, containsString(header2));\n     }\n+\n+    @Test\n+    void testScaleMirrorMaker2ToZero() {\n+        // Deploy source kafka\n+        KafkaResource.kafkaEphemeral(kafkaClusterSourceName, 1, 1).done();\n+        // Deploy target kafka\n+        KafkaResource.kafkaEphemeral(kafkaClusterTargetName, 1, 1).done();\n+\n+        KafkaMirrorMaker2Resource.kafkaMirrorMaker2(CLUSTER_NAME, kafkaClusterTargetName, kafkaClusterSourceName, 3, false)\n+            .editMetadata()\n+                .addToLabels(\"type\", \"kafka-mirror-maker-2\")\n+            .endMetadata()\n+            .done();\n+\n+        long oldObsGen = KafkaMirrorMaker2Resource.kafkaMirrorMaker2Client().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration();\n+        String mm2DepName = KafkaMirrorMaker2Resources.deploymentName(CLUSTER_NAME);\n+        List<String> mm2Pods = kubeClient().listPodNames(\"type\", \"kafka-mirror-maker-2\");\n+        assertThat(mm2Pods.size(), is(3));\n+\n+        LOGGER.info(\"Scaling MirrorMaker to zero\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a081d24404f8f139354671a36b918d4fb223abea"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1258, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}