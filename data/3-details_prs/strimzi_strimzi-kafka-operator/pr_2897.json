{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4OTkxMjUx", "number": 2897, "title": "Make sure KafkaConnect and KafkaConnectS2I can be scaled to zero", "bodyText": "Type of change\n\nBugfix\n\nDescription\nWhen KafkaConnect or KafkaConnectS2I are sclaed to 0 (replicas=0), they currently start failing. This PR updates the behaviour to:\n\nMake sure the Connect reocnciliations are passing in such situation\nMake sure Connector statuses are updated with an error in such situation\n\nThis PR additionally improves the behaviour when the connector reocnciliation failes for not being able to connect to the REST API also for other reasons and sets the appropriatte status in the connectors in that case as well.\nChecklist\n\n Write tests\n Make sure all tests pass\n Try your changes from Pod inside your Kubernetes and OpenShift cluster, not just locally", "createdAt": "2020-04-26T00:20:25Z", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2897", "merged": true, "mergeCommit": {"oid": "9dd1f43586200637184ceff250901193733bb18e"}, "closed": true, "closedAt": "2020-05-06T12:07:25Z", "author": {"login": "scholzj"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcbeeFbgFqTQwMDUzMDgwMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcek_d9gH2gAyNDA4OTkxMjUxOmRkYThkOTRmMjMyMjJjOTkyNzIyNWVmNmJhOGM0NzU5YTViNmIwNzY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNTMwODAx", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2897#pullrequestreview-400530801", "createdAt": "2020-04-26T17:52:02Z", "commit": {"oid": "456c871f34e85df78930db28be1559bc532a535c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNzo1MjowMlrOGMHx3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNzo1MjowMlrOGMHx3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM2MzU1MQ==", "bodyText": "I might be wrong in saying this, but maybe we should tell reconcileConnectors to expect a ConnectTimeoutException if replicas ==  0? Then we don't have to capture the exception here.\n(essentially move this logic into reconcileConnectors and change its behaviour.)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2897#discussion_r415363551", "createdAt": "2020-04-26T17:52:02Z", "author": {"login": "samuel-hawker"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectAssemblyOperator.java", "diffHunk": "@@ -143,8 +144,15 @@ public KafkaConnectAssemblyOperator(Vertx vertx, PlatformFeaturesAvailability pf\n                 .compose(i -> deploymentOperations.reconcile(namespace, connect.getName(), connect.generateDeployment(annotations, pfa.isOpenshift(), imagePullPolicy, imagePullSecrets)))\n                 .compose(i -> deploymentOperations.scaleUp(namespace, connect.getName(), connect.getReplicas()))\n                 .compose(i -> deploymentOperations.waitForObserved(namespace, connect.getName(), 1_000, operationTimeoutMs))\n-                .compose(i -> deploymentOperations.readiness(namespace, connect.getName(), 1_000, operationTimeoutMs))\n-                .compose(i -> reconcileConnectors(reconciliation, kafkaConnect, kafkaConnectStatus))\n+                .compose(i -> connect.getReplicas() > 0 ? deploymentOperations.readiness(namespace, connect.getName(), 1_000, operationTimeoutMs) : Future.succeededFuture())\n+                .compose(i -> reconcileConnectors(reconciliation, kafkaConnect, kafkaConnectStatus)\n+                        .recover(error -> {\n+                            if (error instanceof ConnectTimeoutException && connect.getReplicas() == 0)   {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "456c871f34e85df78930db28be1559bc532a535c"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNTMwODIx", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2897#pullrequestreview-400530821", "createdAt": "2020-04-26T17:52:13Z", "commit": {"oid": "456c871f34e85df78930db28be1559bc532a535c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNzo1MjoxNFrOGMHx8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNzo1MjoxNFrOGMHx8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM2MzU3MQ==", "bodyText": "ditto prev comment", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2897#discussion_r415363571", "createdAt": "2020-04-26T17:52:14Z", "author": {"login": "samuel-hawker"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectS2IAssemblyOperator.java", "diffHunk": "@@ -152,8 +153,15 @@ public KafkaConnectS2IAssemblyOperator(Vertx vertx, PlatformFeaturesAvailability\n                 .compose(i -> buildConfigOperations.reconcile(namespace, KafkaConnectS2IResources.buildConfigName(connect.getCluster()), connect.generateBuildConfig()))\n                 .compose(i -> deploymentConfigOperations.scaleUp(namespace, connect.getName(), connect.getReplicas()))\n                 .compose(i -> deploymentConfigOperations.waitForObserved(namespace, connect.getName(), 1_000, operationTimeoutMs))\n-                .compose(i -> deploymentConfigOperations.readiness(namespace, connect.getName(), 1_000, operationTimeoutMs))\n-                .compose(i -> reconcileConnectors(reconciliation, kafkaConnectS2I, kafkaConnectS2Istatus))\n+                .compose(i -> connect.getReplicas() > 0 ? deploymentConfigOperations.readiness(namespace, connect.getName(), 1_000, operationTimeoutMs) : Future.succeededFuture())\n+                .compose(i -> reconcileConnectors(reconciliation, kafkaConnectS2I, kafkaConnectS2Istatus)\n+                        .recover(error -> {\n+                            if (error instanceof ConnectTimeoutException && connect.getReplicas() == 0)   {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "456c871f34e85df78930db28be1559bc532a535c"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNjc5Mzkz", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2897#pullrequestreview-400679393", "createdAt": "2020-04-27T07:10:34Z", "commit": {"oid": "456c871f34e85df78930db28be1559bc532a535c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzoxMDozNVrOGMUD9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzoxNToyNVrOGMUOlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2NDc4OQ==", "bodyText": "Should the status message include what the connection was being made to? \"Connection to Connect REST API timed out\", or \"Connection to foo.bar:8083 timed out\", or something like that?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2897#discussion_r415564789", "createdAt": "2020-04-27T07:10:35Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/ConnectorMockTest.java", "diffHunk": "@@ -938,4 +939,133 @@ public void testConnectorPauseResume() {\n                 eq(connectorName));\n     }\n \n+    /** Create connect, create connector, Scale to 0 */\n+    @Test\n+    public void testConnectScaleToZero() {\n+        String connectName = \"cluster\";\n+        String connectorName = \"connector\";\n+\n+        // Create KafkaConnect cluster and wait till it's ready\n+        Crds.kafkaConnectOperation(client).inNamespace(NAMESPACE).createNew()\n+                .withNewMetadata()\n+                .withNamespace(NAMESPACE)\n+                .withName(connectName)\n+                .addToAnnotations(Annotations.STRIMZI_IO_USE_CONNECTOR_RESOURCES, \"true\")\n+                .endMetadata()\n+                .withNewSpec()\n+                    .withReplicas(1)\n+                .endSpec()\n+                .done();\n+        waitForConnectReady(connectName);\n+\n+        // triggered twice (creation followed by status update)\n+        verify(api, times(2)).list(\n+                eq(KafkaConnectResources.qualifiedServiceName(connectName, NAMESPACE)), eq(KafkaConnectCluster.REST_API_PORT));\n+\n+        verify(api, never()).createOrUpdatePutRequest(\n+                eq(KafkaConnectResources.qualifiedServiceName(connectName, NAMESPACE)), eq(KafkaConnectCluster.REST_API_PORT),\n+                eq(connectorName), any());\n+\n+        // Create KafkaConnector and wait till it's ready\n+        Crds.kafkaConnectorOperation(client).inNamespace(NAMESPACE).createNew()\n+                .withNewMetadata()\n+                .withName(connectorName)\n+                .withNamespace(NAMESPACE)\n+                .addToLabels(Labels.STRIMZI_CLUSTER_LABEL, connectName)\n+                .endMetadata()\n+                .withNewSpec()\n+                .withTasksMax(1)\n+                .withClassName(\"Dummy\")\n+                .endSpec()\n+                .done();\n+        waitForConnectorReady(connectorName);\n+\n+        verify(api, times(2)).list(\n+                eq(KafkaConnectResources.qualifiedServiceName(connectName, NAMESPACE)), eq(KafkaConnectCluster.REST_API_PORT));\n+        verify(api, times(2)).createOrUpdatePutRequest(\n+                eq(KafkaConnectResources.qualifiedServiceName(connectName, NAMESPACE)), eq(KafkaConnectCluster.REST_API_PORT),\n+                eq(connectorName), any());\n+        assertThat(runningConnectors.keySet(), is(Collections.singleton(key(\"cluster-connect-api.ns.svc\", connectorName))));\n+\n+        when(api.list(any(), anyInt())).thenReturn(Future.failedFuture(new ConnectTimeoutException(\"connection timed out\")));\n+        when(api.listConnectorPlugins(any(), anyInt())).thenReturn(Future.failedFuture(new ConnectTimeoutException(\"connection timed out\")));\n+        when(api.createOrUpdatePutRequest(any(), anyInt(), anyString(), any())).thenReturn(Future.failedFuture(new ConnectTimeoutException(\"connection timed out\")));\n+        when(api.getConnectorConfig(any(), any(), anyInt(), any())).thenReturn(Future.failedFuture(new ConnectTimeoutException(\"connection timed out\")));\n+        when(api.getConnector(any(), anyInt(), any())).thenReturn(Future.failedFuture(new ConnectTimeoutException(\"connection timed out\")));\n+\n+        Crds.kafkaConnectOperation(client).inNamespace(NAMESPACE).withName(connectName).edit()\n+                .editSpec()\n+                    .withReplicas(0)\n+                .endSpec()\n+                .done();\n+\n+        waitForConnectReady(connectName);\n+        waitForConnectorNotReady(connectorName, \"ConnectTimeoutException\", \"connection timed out\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "456c871f34e85df78930db28be1559bc532a535c"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2NzUxMA==", "bodyText": "Won't this error handling result in the Ready status on the KafkaConnect? It's ready in the sense that there wasn't an error in the reconciliation, but not in the sense that the cluster is 'ready' for REST requests, is that what we want?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2897#discussion_r415567510", "createdAt": "2020-04-27T07:15:25Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectAssemblyOperator.java", "diffHunk": "@@ -143,8 +144,15 @@ public KafkaConnectAssemblyOperator(Vertx vertx, PlatformFeaturesAvailability pf\n                 .compose(i -> deploymentOperations.reconcile(namespace, connect.getName(), connect.generateDeployment(annotations, pfa.isOpenshift(), imagePullPolicy, imagePullSecrets)))\n                 .compose(i -> deploymentOperations.scaleUp(namespace, connect.getName(), connect.getReplicas()))\n                 .compose(i -> deploymentOperations.waitForObserved(namespace, connect.getName(), 1_000, operationTimeoutMs))\n-                .compose(i -> deploymentOperations.readiness(namespace, connect.getName(), 1_000, operationTimeoutMs))\n-                .compose(i -> reconcileConnectors(reconciliation, kafkaConnect, kafkaConnectStatus))\n+                .compose(i -> connect.getReplicas() > 0 ? deploymentOperations.readiness(namespace, connect.getName(), 1_000, operationTimeoutMs) : Future.succeededFuture())\n+                .compose(i -> reconcileConnectors(reconciliation, kafkaConnect, kafkaConnectStatus)\n+                        .recover(error -> {\n+                            if (error instanceof ConnectTimeoutException && connect.getReplicas() == 0)   {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM2MzU1MQ=="}, "originalCommit": {"oid": "456c871f34e85df78930db28be1559bc532a535c"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ddf05db343e1280682bbb727a5bd6a7e0bef8120", "author": {"user": {"login": "scholzj", "name": "Jakub Scholz"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ddf05db343e1280682bbb727a5bd6a7e0bef8120", "committedDate": "2020-05-05T21:12:33Z", "message": "Make sure KafkaConnect and KafkaConnectS2I can be scaled to zero\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "725fa51683ae6dd4b2ef13240d4b3b7633c01653", "author": {"user": {"login": "scholzj", "name": "Jakub Scholz"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/725fa51683ae6dd4b2ef13240d4b3b7633c01653", "committedDate": "2020-05-05T21:12:33Z", "message": "Add one more test\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e880bed62b243638911556be7a8a0d1036570c2", "author": {"user": {"login": "scholzj", "name": "Jakub Scholz"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/2e880bed62b243638911556be7a8a0d1036570c2", "committedDate": "2020-05-05T21:12:33Z", "message": "Checkstyle\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5041281a6351e32bd4ea62c6a445970782c3ec72", "author": {"user": {"login": "scholzj", "name": "Jakub Scholz"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/5041281a6351e32bd4ea62c6a445970782c3ec72", "committedDate": "2020-05-05T21:12:33Z", "message": "Do not set API URL and build name when Connect or Connect S2I is scaled to 0\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d48f6224ed4014dd343d9c4d468f6a132383cd0", "author": {"user": {"login": "scholzj", "name": "Jakub Scholz"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/0d48f6224ed4014dd343d9c4d468f6a132383cd0", "committedDate": "2020-05-05T21:12:33Z", "message": "Review comments\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c38541dcedebff490163a5e5b588e8cba277f48f", "author": {"user": {"login": "scholzj", "name": "Jakub Scholz"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c38541dcedebff490163a5e5b588e8cba277f48f", "committedDate": "2020-05-05T22:33:57Z", "message": "Fix message and tests\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0823c2f4f16c6fc23c7f3a35bd87e5bd39fe8786", "author": {"user": {"login": "scholzj", "name": "Jakub Scholz"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/0823c2f4f16c6fc23c7f3a35bd87e5bd39fe8786", "committedDate": "2020-05-01T22:13:58Z", "message": "Do not set API URL and build name when Connect or Connect S2I is scaled to 0\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>"}, "afterCommit": {"oid": "c38541dcedebff490163a5e5b588e8cba277f48f", "author": {"user": {"login": "scholzj", "name": "Jakub Scholz"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c38541dcedebff490163a5e5b588e8cba277f48f", "committedDate": "2020-05-05T22:33:57Z", "message": "Fix message and tests\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MzkzNDg0", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2897#pullrequestreview-406393484", "createdAt": "2020-05-06T08:18:35Z", "commit": {"oid": "c38541dcedebff490163a5e5b588e8cba277f48f"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODoxODozNVrOGRIiRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODoyMzowOFrOGRIrvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxODgyMA==", "bodyText": "Isn't this the same check twice?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2897#discussion_r420618820", "createdAt": "2020-05-06T08:18:35Z", "author": {"login": "samuel-hawker"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/AbstractConnectOperator.java", "diffHunk": "@@ -208,6 +209,11 @@ public void eventReceived(Action action, KafkaConnector kafkaConnector) {\n                                                 log.info(\"{} {} in namespace {} was {}, but Connect cluster {} does not exist\", connectorKind, connectorName, connectorNamespace, action, connectName);\n                                                 updateStatus(noConnectCluster(connectNamespace, connectName), kafkaConnector, connectOperator.connectorOperator);\n                                                 return Future.succeededFuture();\n+                                            } else if ((connect != null && connect.getSpec() != null && connect.getSpec().getReplicas() == 0)\n+                                                    || (connect != null && connect.getSpec() != null && connect.getSpec().getReplicas() == 0))    {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c38541dcedebff490163a5e5b588e8cba277f48f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYyMTEzNg==", "bodyText": "Since we are now computing\nconnect.getReplicas() > 0\nconnect.getReplicas() == 0\nand > 0 again here is it worth setting a boolean before the compose something like:\nconnectHasZeroReplicas = connect.getReplicas() == 0\n\nAnd then re-using this value for logic gating? I think it makes sense from the reconcile loop to have as little logic gating as possible and pre-declaring it on a one-time computed boolean might make the intent a little more clearer.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2897#discussion_r420621136", "createdAt": "2020-05-06T08:22:59Z", "author": {"login": "samuel-hawker"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectAssemblyOperator.java", "diffHunk": "@@ -143,11 +143,14 @@ public KafkaConnectAssemblyOperator(Vertx vertx, PlatformFeaturesAvailability pf\n                 .compose(i -> deploymentOperations.reconcile(namespace, connect.getName(), connect.generateDeployment(annotations, pfa.isOpenshift(), imagePullPolicy, imagePullSecrets)))\n                 .compose(i -> deploymentOperations.scaleUp(namespace, connect.getName(), connect.getReplicas()))\n                 .compose(i -> deploymentOperations.waitForObserved(namespace, connect.getName(), 1_000, operationTimeoutMs))\n-                .compose(i -> deploymentOperations.readiness(namespace, connect.getName(), 1_000, operationTimeoutMs))\n-                .compose(i -> reconcileConnectors(reconciliation, kafkaConnect, kafkaConnectStatus))\n+                .compose(i -> connect.getReplicas() > 0 ? deploymentOperations.readiness(namespace, connect.getName(), 1_000, operationTimeoutMs) : Future.succeededFuture())\n+                .compose(i -> reconcileConnectors(reconciliation, kafkaConnect, kafkaConnectStatus, connect.getReplicas() == 0))\n                 .setHandler(reconciliationResult -> {\n                     StatusUtils.setStatusConditionAndObservedGeneration(kafkaConnect, kafkaConnectStatus, reconciliationResult);\n-                    kafkaConnectStatus.setUrl(KafkaConnectResources.url(connect.getCluster(), namespace, KafkaConnectCluster.REST_API_PORT));\n+\n+                    if (connect.getReplicas() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c38541dcedebff490163a5e5b588e8cba277f48f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYyMTI0NA==", "bodyText": "ditto", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2897#discussion_r420621244", "createdAt": "2020-05-06T08:23:08Z", "author": {"login": "samuel-hawker"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectS2IAssemblyOperator.java", "diffHunk": "@@ -152,12 +152,15 @@ public KafkaConnectS2IAssemblyOperator(Vertx vertx, PlatformFeaturesAvailability\n                 .compose(i -> buildConfigOperations.reconcile(namespace, KafkaConnectS2IResources.buildConfigName(connect.getCluster()), connect.generateBuildConfig()))\n                 .compose(i -> deploymentConfigOperations.scaleUp(namespace, connect.getName(), connect.getReplicas()))\n                 .compose(i -> deploymentConfigOperations.waitForObserved(namespace, connect.getName(), 1_000, operationTimeoutMs))\n-                .compose(i -> deploymentConfigOperations.readiness(namespace, connect.getName(), 1_000, operationTimeoutMs))\n-                .compose(i -> reconcileConnectors(reconciliation, kafkaConnectS2I, kafkaConnectS2Istatus))\n+                .compose(i -> connect.getReplicas() > 0 ? deploymentConfigOperations.readiness(namespace, connect.getName(), 1_000, operationTimeoutMs) : Future.succeededFuture())\n+                .compose(i -> reconcileConnectors(reconciliation, kafkaConnectS2I, kafkaConnectS2Istatus, connect.getReplicas() == 0))\n                 .setHandler(reconciliationResult -> {\n                     StatusUtils.setStatusConditionAndObservedGeneration(kafkaConnectS2I, kafkaConnectS2Istatus, reconciliationResult);\n-                    kafkaConnectS2Istatus.setUrl(KafkaConnectS2IResources.url(connect.getCluster(), namespace, KafkaConnectS2ICluster.REST_API_PORT));\n-                    kafkaConnectS2Istatus.setBuildConfigName(KafkaConnectS2IResources.buildConfigName(connect.getCluster()));\n+\n+                    if (connect.getReplicas() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c38541dcedebff490163a5e5b588e8cba277f48f"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92956f5fb00f2a08a3444af52ec4563c773add7d", "author": {"user": {"login": "scholzj", "name": "Jakub Scholz"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/92956f5fb00f2a08a3444af52ec4563c773add7d", "committedDate": "2020-05-06T08:37:53Z", "message": "Review comments\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NDEzNzAx", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2897#pullrequestreview-406413701", "createdAt": "2020-05-06T08:46:59Z", "commit": {"oid": "92956f5fb00f2a08a3444af52ec4563c773add7d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NDEyMjU4", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2897#pullrequestreview-406412258", "createdAt": "2020-05-06T08:45:03Z", "commit": {"oid": "92956f5fb00f2a08a3444af52ec4563c773add7d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODo0NTowM1rOGRJceg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODo0NTowM1rOGRJceg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYzMzcyMg==", "bodyText": "What about the case where both connect and connectS2i are non null, but connectS2i is scaled to 0? We'd say there were zero replicas via the first branch, but we ought to proceed via the 2nd branch, right?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2897#discussion_r420633722", "createdAt": "2020-05-06T08:45:03Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/AbstractConnectOperator.java", "diffHunk": "@@ -208,6 +209,11 @@ public void eventReceived(Action action, KafkaConnector kafkaConnector) {\n                                                 log.info(\"{} {} in namespace {} was {}, but Connect cluster {} does not exist\", connectorKind, connectorName, connectorNamespace, action, connectName);\n                                                 updateStatus(noConnectCluster(connectNamespace, connectName), kafkaConnector, connectOperator.connectorOperator);\n                                                 return Future.succeededFuture();\n+                                            } else if ((connect != null && connect.getSpec() != null && connect.getSpec().getReplicas() == 0)\n+                                                    || (connectS2i != null && connectS2i.getSpec() != null && connectS2i.getSpec().getReplicas() == 0))    {\n+                                                log.info(\"{} {} in namespace {} was {}, but Connect cluster {} has 0 replicas\", connectorKind, connectorName, connectorNamespace, action, connectName);\n+                                                updateStatus(zeroReplicas(connectNamespace, connectName), kafkaConnector, connectOperator.connectorOperator);\n+                                                return Future.succeededFuture();\n                                             } else if (connect != null && isOlderOrAlone(connect.getMetadata().getCreationTimestamp(), connectS2i)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92956f5fb00f2a08a3444af52ec4563c773add7d"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9219a65c499826825d8d03164bec6496ec9a86c8", "author": {"user": {"login": "scholzj", "name": "Jakub Scholz"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/9219a65c499826825d8d03164bec6496ec9a86c8", "committedDate": "2020-05-06T09:03:48Z", "message": "Review Comments II\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NDI3NzMy", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2897#pullrequestreview-406427732", "createdAt": "2020-05-06T09:05:50Z", "commit": {"oid": "9219a65c499826825d8d03164bec6496ec9a86c8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dda8d94f23222c9927225ef6ba8c4759a5b6b076", "author": {"user": {"login": "scholzj", "name": "Jakub Scholz"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/dda8d94f23222c9927225ef6ba8c4759a5b6b076", "committedDate": "2020-05-06T09:09:43Z", "message": "Fix indentation\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1963, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}