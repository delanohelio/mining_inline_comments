{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNjk3MjEx", "number": 3447, "reviewThreads": {"totalCount": 49, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTozODo1M1rOEVljsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzo0MTozNVrOEcc8oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDcwODk2OnYy", "diffSide": "RIGHT", "path": "documentation/api/io.strimzi.api.kafka.model.listener.IngressListenerConfiguration.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTozODo1M1rOG8bkGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTozODo1M1rOG8bkGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAxOTM1Mg==", "bodyText": "Can we make it more clear that this is an mandatory option?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r466019352", "createdAt": "2020-08-05T21:38:53Z", "author": {"login": "scholzj"}, "path": "documentation/api/io.strimzi.api.kafka.model.listener.IngressListenerConfiguration.adoc", "diffHunk": "@@ -0,0 +1,71 @@\n+Use `IngressListenerConfiguration` properties to add configuration to external ingress listeners.\n+\n+[id='property-ingress-listener-host-{context}']\n+.`host`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4e10c91d20772f8f0af7784fe2cff282eb082c9"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDcxNDgwOnYy", "diffSide": "RIGHT", "path": "documentation/api/io.strimzi.api.kafka.model.listener.KafkaListenerExternalIngress.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTo0MDo0MVrOG8bnbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMDo0MzowMlrOG-yQkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAyMDIwNg==", "bodyText": "The configuration section should be mentioned here as well. It is covered in the IngressListenerConfiguration file. But we should mention here that the configuration and the host fields inside are required. Right now, this is not clear the after reading just this here, user might think this is all what is needed and not click into the configuration details.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r466020206", "createdAt": "2020-08-05T21:40:41Z", "author": {"login": "scholzj"}, "path": "documentation/api/io.strimzi.api.kafka.model.listener.KafkaListenerExternalIngress.adoc", "diffHunk": "@@ -0,0 +1,36 @@\n+Use `KafkaListenerExternalIngress` properties to configure an external listener to expose expose Kafka using Kubernetes `Ingress` and the {NginxIngressController}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4e10c91d20772f8f0af7784fe2cff282eb082c9"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ4ODMzOQ==", "bodyText": "I've added a section/link to the IngressListenerConfiguration schema reference:\n\n.configuration\nYou must specify the hostnames used by the bootstrap and per-broker services using the xref:type-IngressListenerConfiguration-reference[IngressListenerConfiguration properties].", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r468488339", "createdAt": "2020-08-11T10:43:02Z", "author": {"login": "PaulRMellor"}, "path": "documentation/api/io.strimzi.api.kafka.model.listener.KafkaListenerExternalIngress.adoc", "diffHunk": "@@ -0,0 +1,36 @@\n+Use `KafkaListenerExternalIngress` properties to configure an external listener to expose expose Kafka using Kubernetes `Ingress` and the {NginxIngressController}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAyMDIwNg=="}, "originalCommit": {"oid": "f4e10c91d20772f8f0af7784fe2cff282eb082c9"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDcxNzI2OnYy", "diffSide": "RIGHT", "path": "documentation/api/io.strimzi.api.kafka.model.listener.KafkaListenerExternalIngress.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTo0MTozOVrOG8bo_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTo0MTozOVrOG8bo_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAyMDYwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            listeners:\n          \n          \n            \n              external:\n          \n          \n            \n                type: ingress\n          \n          \n            \n                authentication:\n          \n          \n            \n                  type: tls\n          \n          \n            \n            listeners:\n          \n          \n            \n              external:\n          \n          \n            \n                type: ingress\n          \n          \n            \n                authentication:\n          \n          \n            \n                  type: tls\n          \n          \n            \n                configuration:\n          \n          \n            \n                  bootstrap:\n          \n          \n            \n                    host: bootstrap.myingress.com\n          \n          \n            \n                  brokers:\n          \n          \n            \n                  - broker: 0\n          \n          \n            \n                    host: broker-0.myingress.com\n          \n          \n            \n                  - broker: 1\n          \n          \n            \n                    host: broker-1.myingress.com\n          \n          \n            \n                  - broker: 2\n          \n          \n            \n                    host: broker-2.myingress.com\n          \n      \n    \n    \n  \n\nSince it is mandatory, we should have the configuration section in this example.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r466020604", "createdAt": "2020-08-05T21:41:39Z", "author": {"login": "scholzj"}, "path": "documentation/api/io.strimzi.api.kafka.model.listener.KafkaListenerExternalIngress.adoc", "diffHunk": "@@ -0,0 +1,36 @@\n+Use `KafkaListenerExternalIngress` properties to configure an external listener to expose expose Kafka using Kubernetes `Ingress` and the {NginxIngressController}.\n+A dedicated `Ingress` resource is created for every Kafka broker pod.\n+An additional `Ingress` resource is created to serve as a Kafka bootstrap address.\n+Kafka clients can use these `Ingress` resources to connect to Kafka on port 443.\n+\n+.Example of an external listener of type `ingress`\n+[source,yaml,subs=\"attributes+\"]\n+----\n+# ...\n+listeners:\n+  external:\n+    type: ingress\n+    authentication:\n+      type: tls", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4e10c91d20772f8f0af7784fe2cff282eb082c9"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDcyMDE0OnYy", "diffSide": "RIGHT", "path": "documentation/api/io.strimzi.api.kafka.model.listener.KafkaListenerExternalNodePort.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTo0MjozOFrOG8bqvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTo0MjozOFrOG8bqvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAyMTA1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You must enable access to the ports on the Kubernetes nodes for each client (for example, in firewalls or security groups).\n          \n          \n            \n            You must enable access to the ports on the Kubernetes nodes for each node port (for example, in firewalls or security groups).", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r466021054", "createdAt": "2020-08-05T21:42:38Z", "author": {"login": "scholzj"}, "path": "documentation/api/io.strimzi.api.kafka.model.listener.KafkaListenerExternalNodePort.adoc", "diffHunk": "@@ -0,0 +1,38 @@\n+Use `KafkaListenerExternalNodePort` properties to configure an external listener to expose expose Kafka using `NodePort` type `Services`.\n+Kafka clients connect directly to the nodes of Kubernetes.\n+\n+An additional `NodePort` type of service is created to serve as a Kafka bootstrap address.\n+\n+.Example of an external listener of type `nodeport`\n+[source,yaml,subs=\"attributes+\"]\n+----\n+# ...\n+listeners:\n+  external:\n+    type: nodeport\n+    authentication:\n+      type: tls\n+# ...\n+----\n+\n+When configuring the advertised addresses for the Kafka broker pods, Strimzi uses the address of the node on which the given pod is running.\n+Nodes often have multiple addresses.\n+\n+The address type used is based on the first type found in the following order of priority:\n+\n+. ExternalDNS\n+. ExternalIP\n+. Hostname\n+. InternalDNS\n+. InternalIP\n+\n+You must enable access to the ports on the Kubernetes nodes for each client (for example, in firewalls or security groups).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4e10c91d20772f8f0af7784fe2cff282eb082c9"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDcyMjUwOnYy", "diffSide": "RIGHT", "path": "documentation/api/io.strimzi.api.kafka.model.listener.KafkaListenerExternalNodePort.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTo0MzozM1rOG8bsLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTo0MzozM1rOG8bsLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAyMTQyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To disable it, set the `tls` property to `false`.\n          \n          \n            \n            To disable it, set the `tls` property to `false`.\n          \n          \n            \n            \n          \n          \n            \n            .Example of an external listener of type `nodeport` and disabled TLS encryption\n          \n          \n            \n            [source,yaml,subs=\"attributes+\"]\n          \n          \n            \n            ----\n          \n          \n            \n            # ...\n          \n          \n            \n            listeners:\n          \n          \n            \n              external:\n          \n          \n            \n                type: nodeport\n          \n          \n            \n                tls: false\n          \n          \n            \n            # ...\n          \n          \n            \n            ----", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r466021422", "createdAt": "2020-08-05T21:43:33Z", "author": {"login": "scholzj"}, "path": "documentation/api/io.strimzi.api.kafka.model.listener.KafkaListenerExternalNodePort.adoc", "diffHunk": "@@ -0,0 +1,38 @@\n+Use `KafkaListenerExternalNodePort` properties to configure an external listener to expose expose Kafka using `NodePort` type `Services`.\n+Kafka clients connect directly to the nodes of Kubernetes.\n+\n+An additional `NodePort` type of service is created to serve as a Kafka bootstrap address.\n+\n+.Example of an external listener of type `nodeport`\n+[source,yaml,subs=\"attributes+\"]\n+----\n+# ...\n+listeners:\n+  external:\n+    type: nodeport\n+    authentication:\n+      type: tls\n+# ...\n+----\n+\n+When configuring the advertised addresses for the Kafka broker pods, Strimzi uses the address of the node on which the given pod is running.\n+Nodes often have multiple addresses.\n+\n+The address type used is based on the first type found in the following order of priority:\n+\n+. ExternalDNS\n+. ExternalIP\n+. Hostname\n+. InternalDNS\n+. InternalIP\n+\n+You must enable access to the ports on the Kubernetes nodes for each client (for example, in firewalls or security groups).\n+Each Kafka broker pod is then accessible on a separate port.\n+\n+[id='property-nodeport-listener-tls-{context}']\n+.`tls`\n+\n+By default, TLS encryption is enabled.\n+To disable it, set the `tls` property to `false`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4e10c91d20772f8f0af7784fe2cff282eb082c9"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDczMzI0OnYy", "diffSide": "RIGHT", "path": "documentation/assemblies/assembly-configuring-kafka-listeners.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTo0NzoxNlrOG8byvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMTowMDoyM1rOG-yycg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAyMzEwMQ==", "bodyText": "This seems a bit out of place. Why do we mention here only the OAuth 2.0 and not other authentication types?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r466023101", "createdAt": "2020-08-05T21:47:16Z", "author": {"login": "scholzj"}, "path": "documentation/assemblies/assembly-configuring-kafka-listeners.adoc", "diffHunk": "@@ -16,20 +16,16 @@ The following types of listeners are supported:\n * TLS listener on port 9093 (with TLS encryption)\n * External listener on port 9094 for access from outside of Kubernetes\n \n+For more information on listener configuration, see xref:type-KafkaListeners-reference[`KafkaListeners` schema reference].\n+\n+.Configuring listeners to secure access to Kafka brokers\n+You can configure listeners for secure connection using authentication.\n+For more information on securing access to Kafka brokers, see xref:assembly-securing-kafka-str[Managing access to Kafka].\n+\n .OAuth 2.0\n If you are using OAuth 2.0 token-based authentication, you can configure the listeners to connect to your authorization server.\n For more information, see xref:assembly-oauth-authentication_str[Using OAuth 2.0 token-based authentication].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4e10c91d20772f8f0af7784fe2cff282eb082c9"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ5NzAxMA==", "bodyText": "Yes. We don't need it. I've removed.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r468497010", "createdAt": "2020-08-11T11:00:23Z", "author": {"login": "PaulRMellor"}, "path": "documentation/assemblies/assembly-configuring-kafka-listeners.adoc", "diffHunk": "@@ -16,20 +16,16 @@ The following types of listeners are supported:\n * TLS listener on port 9093 (with TLS encryption)\n * External listener on port 9094 for access from outside of Kubernetes\n \n+For more information on listener configuration, see xref:type-KafkaListeners-reference[`KafkaListeners` schema reference].\n+\n+.Configuring listeners to secure access to Kafka brokers\n+You can configure listeners for secure connection using authentication.\n+For more information on securing access to Kafka brokers, see xref:assembly-securing-kafka-str[Managing access to Kafka].\n+\n .OAuth 2.0\n If you are using OAuth 2.0 token-based authentication, you can configure the listeners to connect to your authorization server.\n For more information, see xref:assembly-oauth-authentication_str[Using OAuth 2.0 token-based authentication].", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAyMzEwMQ=="}, "originalCommit": {"oid": "f4e10c91d20772f8f0af7784fe2cff282eb082c9"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDc1MjM5OnYy", "diffSide": "RIGHT", "path": "documentation/assemblies/assembly-securing-access.adoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTo1NDoyMFrOG8b-bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjowOTo1NlrOG-06hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAyNjA5NQ==", "bodyText": "Similarly to one of my previous comments. I'm not sure why OAuth 2 needs to be listed here ... it might confuse user into thinking it is more than just one of the options.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r466026095", "createdAt": "2020-08-05T21:54:20Z", "author": {"login": "scholzj"}, "path": "documentation/assemblies/assembly-securing-access.adoc", "diffHunk": "@@ -0,0 +1,37 @@\n+// This assembly is included in the following assemblies:\n+//\n+// using/master.adoc\n+\n+[id='assembly-securing-access-{context}']\n+= Managing secure access to Kafka\n+\n+You can secure Kafka by managing the access each client has to the Kafka brokers.\n+\n+A secure connection between Kafka brokers and clients can encompass:\n+\n+* Encryption for data exchange\n+* Authentication to prove identity\n+* Authorization to allow or decline actions executed by users\n+\n+This chapter explains how to set up secure connections, with sections describing:\n+\n+* Security options for Kafka clusters and clients\n+* How to secure Kafka brokers\n+* How to configure external listeners\n+* OAuth 2.0 token-based authentication and authorization", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4e10c91d20772f8f0af7784fe2cff282eb082c9"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUzMTg0NQ==", "bodyText": "It's listed here as we have oauth sub-sections in their own right. Maybe we can change to:\n\nSecurity options for Kafka clusters and clients\nHow to secure Kafka brokers\nHow to configure external listeners\nHow to use an authorization server for OAuth 2.0 token-based authentication and authorization\n\nI can remove if it still seems confusing", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r468531845", "createdAt": "2020-08-11T12:09:56Z", "author": {"login": "PaulRMellor"}, "path": "documentation/assemblies/assembly-securing-access.adoc", "diffHunk": "@@ -0,0 +1,37 @@\n+// This assembly is included in the following assemblies:\n+//\n+// using/master.adoc\n+\n+[id='assembly-securing-access-{context}']\n+= Managing secure access to Kafka\n+\n+You can secure Kafka by managing the access each client has to the Kafka brokers.\n+\n+A secure connection between Kafka brokers and clients can encompass:\n+\n+* Encryption for data exchange\n+* Authentication to prove identity\n+* Authorization to allow or decline actions executed by users\n+\n+This chapter explains how to set up secure connections, with sections describing:\n+\n+* Security options for Kafka clusters and clients\n+* How to secure Kafka brokers\n+* How to configure external listeners\n+* OAuth 2.0 token-based authentication and authorization", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAyNjA5NQ=="}, "originalCommit": {"oid": "f4e10c91d20772f8f0af7784fe2cff282eb082c9"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDc2NzY0OnYy", "diffSide": "RIGHT", "path": "documentation/assemblies/assembly-securing-external-listeners.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTo1OTozNVrOG8cHYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjoxNDo1NVrOG-1E3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAyODM4NQ==", "bodyText": "So is this about configuring external listeners? Or securing them? The content looks more like configuring, so maybe we should name that way?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r466028385", "createdAt": "2020-08-05T21:59:35Z", "author": {"login": "scholzj"}, "path": "documentation/assemblies/assembly-securing-external-listeners.adoc", "diffHunk": "@@ -0,0 +1,24 @@\n+// This assembly is included in the following assemblies:\n+//\n+// assembly-securing-access.adoc\n+\n+[id='assembly-securing-external-listeners-{context}']\n+= Configuring external listeners", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4e10c91d20772f8f0af7784fe2cff282eb082c9"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUzNDQ5Mw==", "bodyText": "Changed the id", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r468534493", "createdAt": "2020-08-11T12:14:55Z", "author": {"login": "PaulRMellor"}, "path": "documentation/assemblies/assembly-securing-external-listeners.adoc", "diffHunk": "@@ -0,0 +1,24 @@\n+// This assembly is included in the following assemblies:\n+//\n+// assembly-securing-access.adoc\n+\n+[id='assembly-securing-external-listeners-{context}']\n+= Configuring external listeners", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAyODM4NQ=="}, "originalCommit": {"oid": "f4e10c91d20772f8f0af7784fe2cff282eb082c9"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDgwNTQ1OnYy", "diffSide": "RIGHT", "path": "documentation/assemblies/assembly-securing-kafka.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjoxNTowNlrOG8cemQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzoxMTo0OFrOG-3FsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzNDMyOQ==", "bodyText": "Can we make it clear that the KafkaUser configures the authentication and authorization which the specific user will be allowed to use versus the enabled mechanisms in the Kafka CR? Otherwise I think this will be confusing.\nMaybe we could also mention quotas? It is also slightly related to security.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r466034329", "createdAt": "2020-08-05T22:15:06Z", "author": {"login": "scholzj"}, "path": "documentation/assemblies/assembly-securing-kafka.adoc", "diffHunk": "@@ -0,0 +1,46 @@\n+// This assembly is included in the following assemblies:\n+//\n+// // assembly-securing-access.adoc\n+\n+[id='assembly-securing-kafka-{context}']\n+= Securing access to Kafka brokers\n+\n+To establish secure access to Kafka brokers, you configure and apply:\n+\n+* A `Kafka` resource to create listeners with a specified authentication type\n+* A `KafkaUser` resource to access the Kafka brokers securely through the listeners\n+\n+Configure the `Kafka` resource to set up:\n+\n+* Listener authentication\n+* Network policies that restrict access to Kafka listeners\n+* Kafka authorization\n+* Super users for unconstrained access to brokers\n+\n+Authentication is configured independently for each listener.\n+Authorization is always configured for the whole Kafka cluster.\n+\n+The Cluster Operator creates the listeners and sets up the cluster and client certificate authority (CA) certificates to enable authentication within the Kafka cluster.\n+\n+You can replace the certificates generated by the Cluster Operator by link:{BookURLUsing}#installing-your-own-ca-certificates-str[installing your own certificates^].\n+You can also link:{BookURLUsing}#kafka-listener-certificates-str[configure your listener to use a Kafka listener certificate managed by an external Certificate Authority^].\n+Certificates are available in PKCS #12 format (.p12) and PEM (.crt) formats.\n+\n+Configure the `KafkaUser` resource to set up:\n+\n+* Client authentication to match the listener authentication\n+* Client authorization to match the Kafka authorization", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4e10c91d20772f8f0af7784fe2cff282eb082c9"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2NzQ3Mw==", "bodyText": "Changed to:\n\nUse KafkaUser to enable the authentication and authorization mechanisms that a specific client uses to access Kafka.\nConfigure a KafkaUser resource to set up:\n\nAuthentication to match the enabled listener authentication\nAuthorization to match the enabled Kafka authorization\nQuotas to control the use of resources by clients", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r468567473", "createdAt": "2020-08-11T13:11:48Z", "author": {"login": "PaulRMellor"}, "path": "documentation/assemblies/assembly-securing-kafka.adoc", "diffHunk": "@@ -0,0 +1,46 @@\n+// This assembly is included in the following assemblies:\n+//\n+// // assembly-securing-access.adoc\n+\n+[id='assembly-securing-kafka-{context}']\n+= Securing access to Kafka brokers\n+\n+To establish secure access to Kafka brokers, you configure and apply:\n+\n+* A `Kafka` resource to create listeners with a specified authentication type\n+* A `KafkaUser` resource to access the Kafka brokers securely through the listeners\n+\n+Configure the `Kafka` resource to set up:\n+\n+* Listener authentication\n+* Network policies that restrict access to Kafka listeners\n+* Kafka authorization\n+* Super users for unconstrained access to brokers\n+\n+Authentication is configured independently for each listener.\n+Authorization is always configured for the whole Kafka cluster.\n+\n+The Cluster Operator creates the listeners and sets up the cluster and client certificate authority (CA) certificates to enable authentication within the Kafka cluster.\n+\n+You can replace the certificates generated by the Cluster Operator by link:{BookURLUsing}#installing-your-own-ca-certificates-str[installing your own certificates^].\n+You can also link:{BookURLUsing}#kafka-listener-certificates-str[configure your listener to use a Kafka listener certificate managed by an external Certificate Authority^].\n+Certificates are available in PKCS #12 format (.p12) and PEM (.crt) formats.\n+\n+Configure the `KafkaUser` resource to set up:\n+\n+* Client authentication to match the listener authentication\n+* Client authorization to match the Kafka authorization", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzNDMyOQ=="}, "originalCommit": {"oid": "f4e10c91d20772f8f0af7784fe2cff282eb082c9"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDgwODg3OnYy", "diffSide": "RIGHT", "path": "documentation/assemblies/assembly-using-the-user-operator.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjoxNjozNFrOG8cgpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzoyOTo1MlrOG-31HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzNDg1NA==", "bodyText": "Can we make it clear this this is authentication and authorization mechanisms enabled for this particular user?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r466034854", "createdAt": "2020-08-05T22:16:34Z", "author": {"login": "scholzj"}, "path": "documentation/assemblies/assembly-using-the-user-operator.adoc", "diffHunk": "@@ -13,6 +13,10 @@ The _Deploying Strimzi_ guide provides instructions to deploy the User Operator:\n * link:{BookURLDeploying}#deploying-the-user-operator-using-the-cluster-operator-{context}[Using the Cluster Operator (recommended)^]\n * link:{BookURLDeploying}#deploying-the-user-operator-standalone-{context}[Standalone to operate with Kafka clusters not managed by Strimzi^]\n \n-include::../modules/ref-operator-user.adoc[leveloffset=+1]\n-include::../modules/proc-configuring-kafka-user.adoc[leveloffset=+1]\n+For more information about the schema, see xref:type-KafkaUser-reference[`KafkaUser` schema reference].\n+\n+.Authenticating and authorizing access to Kafka\n+You configure `KafkaUser` properties to set up authentication and authorization mechanisms to manage client access to Kafka.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4e10c91d20772f8f0af7784fe2cff282eb082c9"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3OTYxMg==", "bodyText": "Use KafkaUser to enable the authentication and authorization mechanisms that a specific client uses to access Kafka.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r468579612", "createdAt": "2020-08-11T13:29:52Z", "author": {"login": "PaulRMellor"}, "path": "documentation/assemblies/assembly-using-the-user-operator.adoc", "diffHunk": "@@ -13,6 +13,10 @@ The _Deploying Strimzi_ guide provides instructions to deploy the User Operator:\n * link:{BookURLDeploying}#deploying-the-user-operator-using-the-cluster-operator-{context}[Using the Cluster Operator (recommended)^]\n * link:{BookURLDeploying}#deploying-the-user-operator-standalone-{context}[Standalone to operate with Kafka clusters not managed by Strimzi^]\n \n-include::../modules/ref-operator-user.adoc[leveloffset=+1]\n-include::../modules/proc-configuring-kafka-user.adoc[leveloffset=+1]\n+For more information about the schema, see xref:type-KafkaUser-reference[`KafkaUser` schema reference].\n+\n+.Authenticating and authorizing access to Kafka\n+You configure `KafkaUser` properties to set up authentication and authorization mechanisms to manage client access to Kafka.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzNDg1NA=="}, "originalCommit": {"oid": "f4e10c91d20772f8f0af7784fe2cff282eb082c9"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDgxMTkzOnYy", "diffSide": "RIGHT", "path": "documentation/assemblies/oauth/assembly-oauth-authentication.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjoxNzo1NVrOG8cieQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzo0MzoyMFrOG-4ZzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzNTMyMQ==", "bodyText": "I think this should link to some chapter about configuring authorization in Kafka CR.\nOpen Policy Agent can be used with OAuth 2 authentication as well. So we should mention it here as well.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r466035321", "createdAt": "2020-08-05T22:17:55Z", "author": {"login": "scholzj"}, "path": "documentation/assemblies/oauth/assembly-oauth-authentication.adoc", "diffHunk": "@@ -10,7 +10,7 @@ Strimzi supports the use of OAuth 2.0 authentication using the _SASL OAUTHBEARER\n OAuth 2.0 enables standardized token-based authentication and authorization between applications, using a central authorization server to issue tokens that grant limited access to resources.\n \n You can configure OAuth 2.0 authentication, then xref:assembly-oauth-authorization_{context}[OAuth 2.0 authorization].\n-OAuth 2.0 authentication can also be used in conjunction with xref:simple-acl-{context}[ACL-based Kafka authorization].\n+OAuth 2.0 authentication can also be used in conjunction with xref:type-AclRule-reference[ACL-based Kafka authorization].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4e10c91d20772f8f0af7784fe2cff282eb082c9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU4OTAwNA==", "bodyText": "OAuth 2.0 authentication can also be used in conjunction with ACL or OPA-based xref:on-securing-kafka-authorization-str[Kafka authorization].", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r468589004", "createdAt": "2020-08-11T13:43:20Z", "author": {"login": "PaulRMellor"}, "path": "documentation/assemblies/oauth/assembly-oauth-authentication.adoc", "diffHunk": "@@ -10,7 +10,7 @@ Strimzi supports the use of OAuth 2.0 authentication using the _SASL OAUTHBEARER\n OAuth 2.0 enables standardized token-based authentication and authorization between applications, using a central authorization server to issue tokens that grant limited access to resources.\n \n You can configure OAuth 2.0 authentication, then xref:assembly-oauth-authorization_{context}[OAuth 2.0 authorization].\n-OAuth 2.0 authentication can also be used in conjunction with xref:simple-acl-{context}[ACL-based Kafka authorization].\n+OAuth 2.0 authentication can also be used in conjunction with xref:type-AclRule-reference[ACL-based Kafka authorization].", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzNTMyMQ=="}, "originalCommit": {"oid": "f4e10c91d20772f8f0af7784fe2cff282eb082c9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDgyNDE3OnYy", "diffSide": "RIGHT", "path": "documentation/modules/con-securing-client-labels.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjoyMjo1NFrOG8cpqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjoyMjo1NFrOG8cpqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzNzE2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If the label does not match the Kafka cluster, the User Operator cannot identify the `kafkaUser` and the user is not created.\n          \n          \n            \n            If the label does not match the Kafka cluster, the User Operator cannot identify the `KafkaUser` and the user is not created.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r466037161", "createdAt": "2020-08-05T22:22:54Z", "author": {"login": "scholzj"}, "path": "documentation/modules/con-securing-client-labels.adoc", "diffHunk": "@@ -0,0 +1,22 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-securing-kafka-clients.adoc\n+\n+[id='con-securing-client-labels-{context}']\n+= Identifying a Kafka cluster for user handling\n+\n+A `KafkaUser` resource includes a label that defines the appropriate name of the Kafka cluster (derived from the name of the `Kafka` resource) to which it belongs.\n+\n+[source,yaml,subs=\"attributes+\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: KafkaUser\n+metadata:\n+  name: my-user\n+  labels:\n+    strimzi.io/cluster: my-cluster\n+----\n+\n+The label is used by the User Operator to identify the `KafkaUser` resource and create a new user, and also in subsequent handling of the user.\n+\n+If the label does not match the Kafka cluster, the User Operator cannot identify the `kafkaUser` and the user is not created.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4e10c91d20772f8f0af7784fe2cff282eb082c9"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDgzOTEzOnYy", "diffSide": "RIGHT", "path": "documentation/modules/con-securing-kafka-authorization.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjoyOTowMVrOG8cyMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNDo1Mzo1MVrOG-7w3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzOTM0Ng==", "bodyText": "It is a bit weird that we have here the docs for the simple authorization but link elsewhere for OAuth and OPA. Can we move the simple authorization to the @DescriptionFile as well or something?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r466039346", "createdAt": "2020-08-05T22:29:01Z", "author": {"login": "scholzj"}, "path": "documentation/modules/con-securing-kafka-authorization.adoc", "diffHunk": "@@ -1,25 +1,28 @@\n // Module included in the following assemblies:\n //\n-// assembly-kafka-authentication-and-authorization.adoc\n+// assembly-securing-access.adoc\n \n-[id='ref-kafka-authorization-{context}']\n-= Authorization\n+[id='con-securing-kafka-authorization-{context}']\n+= Kafka authorization\n \n You can configure authorization for Kafka brokers using the `authorization` property in the `Kafka.spec.kafka` resource.\n If the `authorization` property is missing, no authorization is enabled.\n-When enabled, authorization is applied to all enabled xref:assembly-configuring-kafka-broker-listeners-{context}[listeners].\n+When enabled, authorization is applied to all enabled listeners.\n The authorization method is defined in the `type` field.\n \n-You can configure:\n+Supported authorization options:\n \n * Simple authorization\n * xref:assembly-oauth-authorization_str[OAuth 2.0 authorization] (if you are using OAuth 2.0 token based authentication)\n-* xref:type-KafkaAuthorizationOpa-reference[Open Policy Agent authorization]\n+* xref:type-KafkaAuthorizationOpa-reference[Open Policy Agent (OPA) authorization]\n+\n+.Kafka cluster authorization options\n+image::kafka-authorization-config-options.png[options for kafks authorization configuration]\n \n == Simple authorization", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4e10c91d20772f8f0af7784fe2cff282eb082c9"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY0NDA2Mg==", "bodyText": "simple user config now moved to api/io.strimzi.api.kafka.model.KafkaAuthorizationSimple.adoc", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r468644062", "createdAt": "2020-08-11T14:53:51Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/con-securing-kafka-authorization.adoc", "diffHunk": "@@ -1,25 +1,28 @@\n // Module included in the following assemblies:\n //\n-// assembly-kafka-authentication-and-authorization.adoc\n+// assembly-securing-access.adoc\n \n-[id='ref-kafka-authorization-{context}']\n-= Authorization\n+[id='con-securing-kafka-authorization-{context}']\n+= Kafka authorization\n \n You can configure authorization for Kafka brokers using the `authorization` property in the `Kafka.spec.kafka` resource.\n If the `authorization` property is missing, no authorization is enabled.\n-When enabled, authorization is applied to all enabled xref:assembly-configuring-kafka-broker-listeners-{context}[listeners].\n+When enabled, authorization is applied to all enabled listeners.\n The authorization method is defined in the `type` field.\n \n-You can configure:\n+Supported authorization options:\n \n * Simple authorization\n * xref:assembly-oauth-authorization_str[OAuth 2.0 authorization] (if you are using OAuth 2.0 token based authentication)\n-* xref:type-KafkaAuthorizationOpa-reference[Open Policy Agent authorization]\n+* xref:type-KafkaAuthorizationOpa-reference[Open Policy Agent (OPA) authorization]\n+\n+.Kafka cluster authorization options\n+image::kafka-authorization-config-options.png[options for kafks authorization configuration]\n \n == Simple authorization", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzOTM0Ng=="}, "originalCommit": {"oid": "f4e10c91d20772f8f0af7784fe2cff282eb082c9"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDg0MTkwOnYy", "diffSide": "RIGHT", "path": "documentation/modules/con-securing-kafka-authorization.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjozMDowN1rOG8cz0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNTozNTozNlrOG-9o0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzOTc2MQ==", "bodyText": "Should we make it clear that this is supported with all 3 authorization mechanisms?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r466039761", "createdAt": "2020-08-05T22:30:07Z", "author": {"login": "scholzj"}, "path": "documentation/modules/con-securing-kafka-authorization.adoc", "diffHunk": "@@ -30,12 +33,13 @@ authorization:\n # ...\n ----\n \n-Access rules for users are xref:simple-acl-str[defined using Access Control Lists (ACLs)].\n-You can optionally designate a list of super users in the `superUsers` field.\n+Access rules for users are xref:type-AclRule-reference[defined using Access Control Lists (ACLs)].\n \n [id='ref-kafka-authorization-super-user-{context}']\n == Super users", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4e10c91d20772f8f0af7784fe2cff282eb082c9"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY3NDM2NA==", "bodyText": "Yes. I've updated.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r468674364", "createdAt": "2020-08-11T15:35:05Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/con-securing-kafka-authorization.adoc", "diffHunk": "@@ -30,12 +33,13 @@ authorization:\n # ...\n ----\n \n-Access rules for users are xref:simple-acl-str[defined using Access Control Lists (ACLs)].\n-You can optionally designate a list of super users in the `superUsers` field.\n+Access rules for users are xref:type-AclRule-reference[defined using Access Control Lists (ACLs)].\n \n [id='ref-kafka-authorization-super-user-{context}']\n == Super users", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzOTc2MQ=="}, "originalCommit": {"oid": "f4e10c91d20772f8f0af7784fe2cff282eb082c9"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY3NDc2OQ==", "bodyText": "I've also updated the links from the appendix from simple and opa schema refs", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r468674769", "createdAt": "2020-08-11T15:35:36Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/con-securing-kafka-authorization.adoc", "diffHunk": "@@ -30,12 +33,13 @@ authorization:\n # ...\n ----\n \n-Access rules for users are xref:simple-acl-str[defined using Access Control Lists (ACLs)].\n-You can optionally designate a list of super users in the `superUsers` field.\n+Access rules for users are xref:type-AclRule-reference[defined using Access Control Lists (ACLs)].\n \n [id='ref-kafka-authorization-super-user-{context}']\n == Super users", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzOTc2MQ=="}, "originalCommit": {"oid": "f4e10c91d20772f8f0af7784fe2cff282eb082c9"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDg1NTA5OnYy", "diffSide": "RIGHT", "path": "documentation/modules/proc-securing-kafka.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjozNTo0NFrOG8c7kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNTo0Njo1OFrOG--H2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA0MTc0NA==", "bodyText": "I guess this should mention also SCRAM-SHA-512 authentication as alternative.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r466041744", "createdAt": "2020-08-05T22:35:44Z", "author": {"login": "scholzj"}, "path": "documentation/modules/proc-securing-kafka.adoc", "diffHunk": "@@ -0,0 +1,91 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-securing-kafka.adoc\n+\n+[id='proc-securing-kafka-{context}']\n+= Securing Kafka brokers\n+\n+This procedure shows the steps involved in securing Kafka brokers when running Strimzi.\n+\n+The security implemented for Kafka brokers must be compatible with the security implemented for the clients requiring access.\n+\n+* `Kafka.spec.kafka.listeners.*.authentication` matches `KafkaUser.spec.authentication matches`\n+* `Kafka.spec.kafka.authorization` matches `KafkaUser.spec.authorization matches`\n+\n+The steps show the configuration for simple authorization and a listener using TLS authentication.\n+For more information about listener configuration, see the xref:type-KafkaListeners-reference[`KafkaListeners` schema reference].\n+\n+Alternatively, you can use OAuth 2.0 for token-based xref:assembly-oauth-authentication_str[authentication] and xref:assembly-oauth-authorization_str[authorization],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4e10c91d20772f8f0af7784fe2cff282eb082c9"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY4MjcxNA==", "bodyText": "Yes. I've updated to make the links go back to concepts instead of separate procedures.\n\nAlternatively, you can use SCRAM-SHA or OAuth 2.0 for xref:con-securing-kafka-authentication-{context}[listener authentication], and OAuth 2.0 or OPA for xref:con-securing-kafka-authorization-{context}[Kafka authorization].", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r468682714", "createdAt": "2020-08-11T15:46:58Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/proc-securing-kafka.adoc", "diffHunk": "@@ -0,0 +1,91 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-securing-kafka.adoc\n+\n+[id='proc-securing-kafka-{context}']\n+= Securing Kafka brokers\n+\n+This procedure shows the steps involved in securing Kafka brokers when running Strimzi.\n+\n+The security implemented for Kafka brokers must be compatible with the security implemented for the clients requiring access.\n+\n+* `Kafka.spec.kafka.listeners.*.authentication` matches `KafkaUser.spec.authentication matches`\n+* `Kafka.spec.kafka.authorization` matches `KafkaUser.spec.authorization matches`\n+\n+The steps show the configuration for simple authorization and a listener using TLS authentication.\n+For more information about listener configuration, see the xref:type-KafkaListeners-reference[`KafkaListeners` schema reference].\n+\n+Alternatively, you can use OAuth 2.0 for token-based xref:assembly-oauth-authentication_str[authentication] and xref:assembly-oauth-authorization_str[authorization],", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA0MTc0NA=="}, "originalCommit": {"oid": "f4e10c91d20772f8f0af7784fe2cff282eb082c9"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTMxNjY2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/con-securing-kafka-authentication.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDowMDoxNlrOG_HLGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDowMDoxNlrOG_HLGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzMTAwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You can create `plain` (without encryption) or `tls` listener types.\n          \n          \n            \n            For clients inside the Kubernetes cluster, you can create `plain` (without encryption) or `tls` listener types.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r468831001", "createdAt": "2020-08-11T20:00:16Z", "author": {"login": "scholzj"}, "path": "documentation/modules/con-securing-kafka-authentication.adoc", "diffHunk": "@@ -0,0 +1,115 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-securing-kafka-brokers.adoc\n+\n+[id='con-securing-kafka-authentication-{context}']\n+= Listener authentication\n+\n+You can create `plain` (without encryption) or `tls` listener types.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cec43fbfb16aee8706871b1879fedc2c40059689"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTMxODAwOnYy", "diffSide": "RIGHT", "path": "documentation/modules/con-securing-kafka-authentication.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDowMDo0M1rOG_HL9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDowMDo0M1rOG_HL9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzMTIyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            . Mutual TLS authentication (only on the listeners with TLS encryption)\n          \n          \n            \n            . Mutual TLS authentication (only on the listeners with TLS enabled encryption)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r468831221", "createdAt": "2020-08-11T20:00:43Z", "author": {"login": "scholzj"}, "path": "documentation/modules/con-securing-kafka-authentication.adoc", "diffHunk": "@@ -0,0 +1,115 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-securing-kafka-brokers.adoc\n+\n+[id='con-securing-kafka-authentication-{context}']\n+= Listener authentication\n+\n+You can create `plain` (without encryption) or `tls` listener types.\n+For clients outside the Kubernetes cluster, you create `external` listeners and specify a connection mechanism, which can be `nodeport`, `loadbalancer`, `ingress` or `route` (on OpenShift).\n+\n+Supported authentication options:\n+\n+. Mutual TLS authentication (only on the listeners with TLS encryption)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cec43fbfb16aee8706871b1879fedc2c40059689"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTMxODUwOnYy", "diffSide": "RIGHT", "path": "documentation/modules/con-securing-kafka-authentication.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDowMDo1NFrOG_HMSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDowMDo1NFrOG_HMSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzMTMwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            . SCRAM-SHA authentication\n          \n          \n            \n            . SCRAM-SHA-512 authentication", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r468831306", "createdAt": "2020-08-11T20:00:54Z", "author": {"login": "scholzj"}, "path": "documentation/modules/con-securing-kafka-authentication.adoc", "diffHunk": "@@ -0,0 +1,115 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-securing-kafka-brokers.adoc\n+\n+[id='con-securing-kafka-authentication-{context}']\n+= Listener authentication\n+\n+You can create `plain` (without encryption) or `tls` listener types.\n+For clients outside the Kubernetes cluster, you create `external` listeners and specify a connection mechanism, which can be `nodeport`, `loadbalancer`, `ingress` or `route` (on OpenShift).\n+\n+Supported authentication options:\n+\n+. Mutual TLS authentication (only on the listeners with TLS encryption)\n+. SCRAM-SHA authentication", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cec43fbfb16aee8706871b1879fedc2c40059689"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTMyMjA0OnYy", "diffSide": "RIGHT", "path": "documentation/modules/con-securing-kafka-authentication.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDowMjowMFrOG_HOSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDowMjowMFrOG_HOSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzMTgxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * A `plain` listener configured for SCRAM-SHA authentication\n          \n          \n            \n            * A `plain` listener configured for SCRAM-SHA-512 authentication", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r468831818", "createdAt": "2020-08-11T20:02:00Z", "author": {"login": "scholzj"}, "path": "documentation/modules/con-securing-kafka-authentication.adoc", "diffHunk": "@@ -0,0 +1,115 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-securing-kafka-brokers.adoc\n+\n+[id='con-securing-kafka-authentication-{context}']\n+= Listener authentication\n+\n+You can create `plain` (without encryption) or `tls` listener types.\n+For clients outside the Kubernetes cluster, you create `external` listeners and specify a connection mechanism, which can be `nodeport`, `loadbalancer`, `ingress` or `route` (on OpenShift).\n+\n+Supported authentication options:\n+\n+. Mutual TLS authentication (only on the listeners with TLS encryption)\n+. SCRAM-SHA authentication\n+. xref:assembly-oauth-authentication_str[OAuth 2.0 token based authentication]\n+\n+.Kafka listener authentication options\n+image::listener-config-options.png[options for listener authentication configuration]\n+\n+The listener `authentication` property is used to specify an authentication mechanism specific to that listener.\n+\n+The listener authentication mechanism is defined by the `type` field.\n+If no `authentication` property is specified then the listener does not authenticate clients which connect through that listener.\n+The listener will accept all connections without authentication.\n+\n+Authentication must be configured when using the User Operator to manage `KafkaUsers`.\n+\n+The following example shows:\n+\n+* A `plain` listener configured for SCRAM-SHA authentication", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cec43fbfb16aee8706871b1879fedc2c40059689"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTMyNTk2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/con-securing-kafka-authentication.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDowMzoxOVrOG_HQsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDowMzoxOVrOG_HQsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzMjQzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            NOTE: TLS authentication is more commonly one-way, with one party authenticating the identity of another. For example, when HTTPS is used between a web browser and a web server, the server obtains proof of the identity of the browser.\n          \n          \n            \n            NOTE: TLS authentication is more commonly one-way, with one party authenticating the identity of another. For example, when HTTPS is used between a web browser and a web server, the browser obtains proof of the identity of the web server.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r468832432", "createdAt": "2020-08-11T20:03:19Z", "author": {"login": "scholzj"}, "path": "documentation/modules/con-securing-kafka-authentication.adoc", "diffHunk": "@@ -0,0 +1,115 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-securing-kafka-brokers.adoc\n+\n+[id='con-securing-kafka-authentication-{context}']\n+= Listener authentication\n+\n+You can create `plain` (without encryption) or `tls` listener types.\n+For clients outside the Kubernetes cluster, you create `external` listeners and specify a connection mechanism, which can be `nodeport`, `loadbalancer`, `ingress` or `route` (on OpenShift).\n+\n+Supported authentication options:\n+\n+. Mutual TLS authentication (only on the listeners with TLS encryption)\n+. SCRAM-SHA authentication\n+. xref:assembly-oauth-authentication_str[OAuth 2.0 token based authentication]\n+\n+.Kafka listener authentication options\n+image::listener-config-options.png[options for listener authentication configuration]\n+\n+The listener `authentication` property is used to specify an authentication mechanism specific to that listener.\n+\n+The listener authentication mechanism is defined by the `type` field.\n+If no `authentication` property is specified then the listener does not authenticate clients which connect through that listener.\n+The listener will accept all connections without authentication.\n+\n+Authentication must be configured when using the User Operator to manage `KafkaUsers`.\n+\n+The following example shows:\n+\n+* A `plain` listener configured for SCRAM-SHA authentication\n+* A `tls` listener with mutual TLS authentication\n+* An `external` listener with mutual TLS authentication\n+\n+.An example showing listener authentication configuration\n+[source,yaml,subs=\"attributes+\"]\n+----\n+# ...\n+listeners:\n+  plain:\n+    authentication:\n+      type: scram-sha-512\n+  tls:\n+    authentication:\n+      type: tls\n+  external:\n+    type: loadbalancer\n+    tls: true\n+    authentication:\n+      type: tls\n+# ...\n+----\n+\n+[id='con-mutual-tls-authentication-{context}']\n+== Mutual TLS authentication\n+\n+Mutual TLS authentication is always used for the communication between Kafka brokers and ZooKeeper pods.\n+\n+For mutual authentication or two-way authentication, both the server and the client present certificates.\n+Strimzi can configure Kafka to use TLS (Transport Layer Security) to provide encrypted communication between Kafka brokers and clients either with or without mutual authentication. When you configure mutual authentication, the broker authenticates the client and the client authenticates the broker.\n+\n+NOTE: TLS authentication is more commonly one-way, with one party authenticating the identity of another. For example, when HTTPS is used between a web browser and a web server, the server obtains proof of the identity of the browser.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cec43fbfb16aee8706871b1879fedc2c40059689"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTMyNjcyOnYy", "diffSide": "RIGHT", "path": "documentation/modules/con-securing-kafka-authentication.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDowMzozN1rOG_HRIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDowMzozN1rOG_HRIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzMjU0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Strimzi can configure Kafka to use TLS (Transport Layer Security) to provide encrypted communication between Kafka brokers and clients either with or without mutual authentication. When you configure mutual authentication, the broker authenticates the client and the client authenticates the broker.\n          \n          \n            \n            Strimzi can configure Kafka to use TLS (Transport Layer Security) to provide encrypted communication between Kafka brokers and clients either with or without mutual authentication. When you configure mutual authentication, the broker authenticates the client (client authentication) and the client authenticates the broker (server authentication).", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r468832547", "createdAt": "2020-08-11T20:03:37Z", "author": {"login": "scholzj"}, "path": "documentation/modules/con-securing-kafka-authentication.adoc", "diffHunk": "@@ -0,0 +1,115 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-securing-kafka-brokers.adoc\n+\n+[id='con-securing-kafka-authentication-{context}']\n+= Listener authentication\n+\n+You can create `plain` (without encryption) or `tls` listener types.\n+For clients outside the Kubernetes cluster, you create `external` listeners and specify a connection mechanism, which can be `nodeport`, `loadbalancer`, `ingress` or `route` (on OpenShift).\n+\n+Supported authentication options:\n+\n+. Mutual TLS authentication (only on the listeners with TLS encryption)\n+. SCRAM-SHA authentication\n+. xref:assembly-oauth-authentication_str[OAuth 2.0 token based authentication]\n+\n+.Kafka listener authentication options\n+image::listener-config-options.png[options for listener authentication configuration]\n+\n+The listener `authentication` property is used to specify an authentication mechanism specific to that listener.\n+\n+The listener authentication mechanism is defined by the `type` field.\n+If no `authentication` property is specified then the listener does not authenticate clients which connect through that listener.\n+The listener will accept all connections without authentication.\n+\n+Authentication must be configured when using the User Operator to manage `KafkaUsers`.\n+\n+The following example shows:\n+\n+* A `plain` listener configured for SCRAM-SHA authentication\n+* A `tls` listener with mutual TLS authentication\n+* An `external` listener with mutual TLS authentication\n+\n+.An example showing listener authentication configuration\n+[source,yaml,subs=\"attributes+\"]\n+----\n+# ...\n+listeners:\n+  plain:\n+    authentication:\n+      type: scram-sha-512\n+  tls:\n+    authentication:\n+      type: tls\n+  external:\n+    type: loadbalancer\n+    tls: true\n+    authentication:\n+      type: tls\n+# ...\n+----\n+\n+[id='con-mutual-tls-authentication-{context}']\n+== Mutual TLS authentication\n+\n+Mutual TLS authentication is always used for the communication between Kafka brokers and ZooKeeper pods.\n+\n+For mutual authentication or two-way authentication, both the server and the client present certificates.\n+Strimzi can configure Kafka to use TLS (Transport Layer Security) to provide encrypted communication between Kafka brokers and clients either with or without mutual authentication. When you configure mutual authentication, the broker authenticates the client and the client authenticates the broker.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cec43fbfb16aee8706871b1879fedc2c40059689"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTMzMzc5OnYy", "diffSide": "RIGHT", "path": "documentation/modules/con-securing-kafka-authentication.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDowNTo1MFrOG_HVZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwOTo1Mjo1MVrOG_aPDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzMzYzOQ==", "bodyText": "I think we should either make it a heading or remove it completely. In the current state, it is not clickable and cannot be linked but it also doesn't add any value because the text is saying basically the same as the sentence below.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r468833639", "createdAt": "2020-08-11T20:05:50Z", "author": {"login": "scholzj"}, "path": "documentation/modules/con-securing-kafka-authentication.adoc", "diffHunk": "@@ -0,0 +1,115 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-securing-kafka-brokers.adoc\n+\n+[id='con-securing-kafka-authentication-{context}']\n+= Listener authentication\n+\n+You can create `plain` (without encryption) or `tls` listener types.\n+For clients outside the Kubernetes cluster, you create `external` listeners and specify a connection mechanism, which can be `nodeport`, `loadbalancer`, `ingress` or `route` (on OpenShift).\n+\n+Supported authentication options:\n+\n+. Mutual TLS authentication (only on the listeners with TLS encryption)\n+. SCRAM-SHA authentication\n+. xref:assembly-oauth-authentication_str[OAuth 2.0 token based authentication]\n+\n+.Kafka listener authentication options\n+image::listener-config-options.png[options for listener authentication configuration]\n+\n+The listener `authentication` property is used to specify an authentication mechanism specific to that listener.\n+\n+The listener authentication mechanism is defined by the `type` field.\n+If no `authentication` property is specified then the listener does not authenticate clients which connect through that listener.\n+The listener will accept all connections without authentication.\n+\n+Authentication must be configured when using the User Operator to manage `KafkaUsers`.\n+\n+The following example shows:\n+\n+* A `plain` listener configured for SCRAM-SHA authentication\n+* A `tls` listener with mutual TLS authentication\n+* An `external` listener with mutual TLS authentication\n+\n+.An example showing listener authentication configuration\n+[source,yaml,subs=\"attributes+\"]\n+----\n+# ...\n+listeners:\n+  plain:\n+    authentication:\n+      type: scram-sha-512\n+  tls:\n+    authentication:\n+      type: tls\n+  external:\n+    type: loadbalancer\n+    tls: true\n+    authentication:\n+      type: tls\n+# ...\n+----\n+\n+[id='con-mutual-tls-authentication-{context}']\n+== Mutual TLS authentication\n+\n+Mutual TLS authentication is always used for the communication between Kafka brokers and ZooKeeper pods.\n+\n+For mutual authentication or two-way authentication, both the server and the client present certificates.\n+Strimzi can configure Kafka to use TLS (Transport Layer Security) to provide encrypted communication between Kafka brokers and clients either with or without mutual authentication. When you configure mutual authentication, the broker authenticates the client and the client authenticates the broker.\n+\n+NOTE: TLS authentication is more commonly one-way, with one party authenticating the identity of another. For example, when HTTPS is used between a web browser and a web server, the server obtains proof of the identity of the browser.\n+\n+.When to use mutual TLS authentication for clients", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cec43fbfb16aee8706871b1879fedc2c40059689"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0MzMwOA==", "bodyText": "removed", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r469143308", "createdAt": "2020-08-12T09:52:51Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/con-securing-kafka-authentication.adoc", "diffHunk": "@@ -0,0 +1,115 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-securing-kafka-brokers.adoc\n+\n+[id='con-securing-kafka-authentication-{context}']\n+= Listener authentication\n+\n+You can create `plain` (without encryption) or `tls` listener types.\n+For clients outside the Kubernetes cluster, you create `external` listeners and specify a connection mechanism, which can be `nodeport`, `loadbalancer`, `ingress` or `route` (on OpenShift).\n+\n+Supported authentication options:\n+\n+. Mutual TLS authentication (only on the listeners with TLS encryption)\n+. SCRAM-SHA authentication\n+. xref:assembly-oauth-authentication_str[OAuth 2.0 token based authentication]\n+\n+.Kafka listener authentication options\n+image::listener-config-options.png[options for listener authentication configuration]\n+\n+The listener `authentication` property is used to specify an authentication mechanism specific to that listener.\n+\n+The listener authentication mechanism is defined by the `type` field.\n+If no `authentication` property is specified then the listener does not authenticate clients which connect through that listener.\n+The listener will accept all connections without authentication.\n+\n+Authentication must be configured when using the User Operator to manage `KafkaUsers`.\n+\n+The following example shows:\n+\n+* A `plain` listener configured for SCRAM-SHA authentication\n+* A `tls` listener with mutual TLS authentication\n+* An `external` listener with mutual TLS authentication\n+\n+.An example showing listener authentication configuration\n+[source,yaml,subs=\"attributes+\"]\n+----\n+# ...\n+listeners:\n+  plain:\n+    authentication:\n+      type: scram-sha-512\n+  tls:\n+    authentication:\n+      type: tls\n+  external:\n+    type: loadbalancer\n+    tls: true\n+    authentication:\n+      type: tls\n+# ...\n+----\n+\n+[id='con-mutual-tls-authentication-{context}']\n+== Mutual TLS authentication\n+\n+Mutual TLS authentication is always used for the communication between Kafka brokers and ZooKeeper pods.\n+\n+For mutual authentication or two-way authentication, both the server and the client present certificates.\n+Strimzi can configure Kafka to use TLS (Transport Layer Security) to provide encrypted communication between Kafka brokers and clients either with or without mutual authentication. When you configure mutual authentication, the broker authenticates the client and the client authenticates the broker.\n+\n+NOTE: TLS authentication is more commonly one-way, with one party authenticating the identity of another. For example, when HTTPS is used between a web browser and a web server, the server obtains proof of the identity of the browser.\n+\n+.When to use mutual TLS authentication for clients", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzMzYzOQ=="}, "originalCommit": {"oid": "cec43fbfb16aee8706871b1879fedc2c40059689"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTMzNDc4OnYy", "diffSide": "RIGHT", "path": "documentation/modules/con-securing-kafka-authentication.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDowNjowNFrOG_HV9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDowNjowNFrOG_HV9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzMzc4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            == SCRAM-SHA authentication\n          \n          \n            \n            == SCRAM-SHA-512 authentication", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r468833782", "createdAt": "2020-08-11T20:06:04Z", "author": {"login": "scholzj"}, "path": "documentation/modules/con-securing-kafka-authentication.adoc", "diffHunk": "@@ -0,0 +1,115 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-securing-kafka-brokers.adoc\n+\n+[id='con-securing-kafka-authentication-{context}']\n+= Listener authentication\n+\n+You can create `plain` (without encryption) or `tls` listener types.\n+For clients outside the Kubernetes cluster, you create `external` listeners and specify a connection mechanism, which can be `nodeport`, `loadbalancer`, `ingress` or `route` (on OpenShift).\n+\n+Supported authentication options:\n+\n+. Mutual TLS authentication (only on the listeners with TLS encryption)\n+. SCRAM-SHA authentication\n+. xref:assembly-oauth-authentication_str[OAuth 2.0 token based authentication]\n+\n+.Kafka listener authentication options\n+image::listener-config-options.png[options for listener authentication configuration]\n+\n+The listener `authentication` property is used to specify an authentication mechanism specific to that listener.\n+\n+The listener authentication mechanism is defined by the `type` field.\n+If no `authentication` property is specified then the listener does not authenticate clients which connect through that listener.\n+The listener will accept all connections without authentication.\n+\n+Authentication must be configured when using the User Operator to manage `KafkaUsers`.\n+\n+The following example shows:\n+\n+* A `plain` listener configured for SCRAM-SHA authentication\n+* A `tls` listener with mutual TLS authentication\n+* An `external` listener with mutual TLS authentication\n+\n+.An example showing listener authentication configuration\n+[source,yaml,subs=\"attributes+\"]\n+----\n+# ...\n+listeners:\n+  plain:\n+    authentication:\n+      type: scram-sha-512\n+  tls:\n+    authentication:\n+      type: tls\n+  external:\n+    type: loadbalancer\n+    tls: true\n+    authentication:\n+      type: tls\n+# ...\n+----\n+\n+[id='con-mutual-tls-authentication-{context}']\n+== Mutual TLS authentication\n+\n+Mutual TLS authentication is always used for the communication between Kafka brokers and ZooKeeper pods.\n+\n+For mutual authentication or two-way authentication, both the server and the client present certificates.\n+Strimzi can configure Kafka to use TLS (Transport Layer Security) to provide encrypted communication between Kafka brokers and clients either with or without mutual authentication. When you configure mutual authentication, the broker authenticates the client and the client authenticates the broker.\n+\n+NOTE: TLS authentication is more commonly one-way, with one party authenticating the identity of another. For example, when HTTPS is used between a web browser and a web server, the server obtains proof of the identity of the browser.\n+\n+.When to use mutual TLS authentication for clients\n+\n+Mutual TLS authentication is recommended for authenticating Kafka clients when:\n+\n+* The client supports authentication using mutual TLS authentication\n+* It is necessary to use the TLS certificates rather than passwords\n+* You can reconfigure and restart client applications periodically so that they do not use expired certificates.\n+\n+[id='con-scram-sha-authentication-{context}']\n+== SCRAM-SHA authentication", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cec43fbfb16aee8706871b1879fedc2c40059689"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTM0NTYyOnYy", "diffSide": "RIGHT", "path": "documentation/modules/con-securing-kafka-authentication.adoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDowOTozNFrOG_HcqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMDowODoxN1rOG_avPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzNTQ5Ng==", "bodyText": "To be honest, I have some doubts about these:\n\nThis The client supports authentication using mutual TLS authentication is a prerequisite but we do not recommend to use TLS client authentication just because the client supports it.\nThe second point It is necessary to use the TLS certificates rather than passwords is very unspecific. It would be good to explain why would it be necessary.\nThe third point You can reconfigure and restart client applications periodically so that they do not use expired certificates. is imho confusing / misleading since the periodically could be for example every 5 years.\n\nMaybe we should just remove it if we do not have anything better? (I don't right now)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r468835496", "createdAt": "2020-08-11T20:09:34Z", "author": {"login": "scholzj"}, "path": "documentation/modules/con-securing-kafka-authentication.adoc", "diffHunk": "@@ -0,0 +1,115 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-securing-kafka-brokers.adoc\n+\n+[id='con-securing-kafka-authentication-{context}']\n+= Listener authentication\n+\n+You can create `plain` (without encryption) or `tls` listener types.\n+For clients outside the Kubernetes cluster, you create `external` listeners and specify a connection mechanism, which can be `nodeport`, `loadbalancer`, `ingress` or `route` (on OpenShift).\n+\n+Supported authentication options:\n+\n+. Mutual TLS authentication (only on the listeners with TLS encryption)\n+. SCRAM-SHA authentication\n+. xref:assembly-oauth-authentication_str[OAuth 2.0 token based authentication]\n+\n+.Kafka listener authentication options\n+image::listener-config-options.png[options for listener authentication configuration]\n+\n+The listener `authentication` property is used to specify an authentication mechanism specific to that listener.\n+\n+The listener authentication mechanism is defined by the `type` field.\n+If no `authentication` property is specified then the listener does not authenticate clients which connect through that listener.\n+The listener will accept all connections without authentication.\n+\n+Authentication must be configured when using the User Operator to manage `KafkaUsers`.\n+\n+The following example shows:\n+\n+* A `plain` listener configured for SCRAM-SHA authentication\n+* A `tls` listener with mutual TLS authentication\n+* An `external` listener with mutual TLS authentication\n+\n+.An example showing listener authentication configuration\n+[source,yaml,subs=\"attributes+\"]\n+----\n+# ...\n+listeners:\n+  plain:\n+    authentication:\n+      type: scram-sha-512\n+  tls:\n+    authentication:\n+      type: tls\n+  external:\n+    type: loadbalancer\n+    tls: true\n+    authentication:\n+      type: tls\n+# ...\n+----\n+\n+[id='con-mutual-tls-authentication-{context}']\n+== Mutual TLS authentication\n+\n+Mutual TLS authentication is always used for the communication between Kafka brokers and ZooKeeper pods.\n+\n+For mutual authentication or two-way authentication, both the server and the client present certificates.\n+Strimzi can configure Kafka to use TLS (Transport Layer Security) to provide encrypted communication between Kafka brokers and clients either with or without mutual authentication. When you configure mutual authentication, the broker authenticates the client and the client authenticates the broker.\n+\n+NOTE: TLS authentication is more commonly one-way, with one party authenticating the identity of another. For example, when HTTPS is used between a web browser and a web server, the server obtains proof of the identity of the browser.\n+\n+.When to use mutual TLS authentication for clients\n+\n+Mutual TLS authentication is recommended for authenticating Kafka clients when:\n+\n+* The client supports authentication using mutual TLS authentication\n+* It is necessary to use the TLS certificates rather than passwords\n+* You can reconfigure and restart client applications periodically so that they do not use expired certificates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cec43fbfb16aee8706871b1879fedc2c40059689"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE1MTU1MA==", "bodyText": "Okay. Let's remove these 'when to use...' sections. I've added a sentence to the top of the section:\n\nThe authentication option you choose depends on how you wish to authenticate client access to Kafka brokers.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r469151550", "createdAt": "2020-08-12T10:08:17Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/con-securing-kafka-authentication.adoc", "diffHunk": "@@ -0,0 +1,115 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-securing-kafka-brokers.adoc\n+\n+[id='con-securing-kafka-authentication-{context}']\n+= Listener authentication\n+\n+You can create `plain` (without encryption) or `tls` listener types.\n+For clients outside the Kubernetes cluster, you create `external` listeners and specify a connection mechanism, which can be `nodeport`, `loadbalancer`, `ingress` or `route` (on OpenShift).\n+\n+Supported authentication options:\n+\n+. Mutual TLS authentication (only on the listeners with TLS encryption)\n+. SCRAM-SHA authentication\n+. xref:assembly-oauth-authentication_str[OAuth 2.0 token based authentication]\n+\n+.Kafka listener authentication options\n+image::listener-config-options.png[options for listener authentication configuration]\n+\n+The listener `authentication` property is used to specify an authentication mechanism specific to that listener.\n+\n+The listener authentication mechanism is defined by the `type` field.\n+If no `authentication` property is specified then the listener does not authenticate clients which connect through that listener.\n+The listener will accept all connections without authentication.\n+\n+Authentication must be configured when using the User Operator to manage `KafkaUsers`.\n+\n+The following example shows:\n+\n+* A `plain` listener configured for SCRAM-SHA authentication\n+* A `tls` listener with mutual TLS authentication\n+* An `external` listener with mutual TLS authentication\n+\n+.An example showing listener authentication configuration\n+[source,yaml,subs=\"attributes+\"]\n+----\n+# ...\n+listeners:\n+  plain:\n+    authentication:\n+      type: scram-sha-512\n+  tls:\n+    authentication:\n+      type: tls\n+  external:\n+    type: loadbalancer\n+    tls: true\n+    authentication:\n+      type: tls\n+# ...\n+----\n+\n+[id='con-mutual-tls-authentication-{context}']\n+== Mutual TLS authentication\n+\n+Mutual TLS authentication is always used for the communication between Kafka brokers and ZooKeeper pods.\n+\n+For mutual authentication or two-way authentication, both the server and the client present certificates.\n+Strimzi can configure Kafka to use TLS (Transport Layer Security) to provide encrypted communication between Kafka brokers and clients either with or without mutual authentication. When you configure mutual authentication, the broker authenticates the client and the client authenticates the broker.\n+\n+NOTE: TLS authentication is more commonly one-way, with one party authenticating the identity of another. For example, when HTTPS is used between a web browser and a web server, the server obtains proof of the identity of the browser.\n+\n+.When to use mutual TLS authentication for clients\n+\n+Mutual TLS authentication is recommended for authenticating Kafka clients when:\n+\n+* The client supports authentication using mutual TLS authentication\n+* It is necessary to use the TLS certificates rather than passwords\n+* You can reconfigure and restart client applications periodically so that they do not use expired certificates.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzNTQ5Ng=="}, "originalCommit": {"oid": "cec43fbfb16aee8706871b1879fedc2c40059689"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTM0Nzg2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/con-securing-kafka-authentication.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDoxMDoxNVrOG_Hd8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDoxMDoxNVrOG_Hd8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzNTgyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            SCRAM (Salted Challenge Response Authentication Mechanism) is an authentication protocol that can establish mutual authentication using passwords. Strimzi can configure Kafka to use SASL (Simple Authentication and Security Layer) SCRAM-SHA-512 to provide authentication on both unencrypted and TLS-encrypted client connections. TLS authentication is always used internally between Kafka brokers and ZooKeeper nodes. When used with a TLS client connection, the TLS protocol provides encryption, but is not used for authentication.\n          \n          \n            \n            SCRAM (Salted Challenge Response Authentication Mechanism) is an authentication protocol that can establish mutual authentication using passwords. Strimzi can configure Kafka to use SASL (Simple Authentication and Security Layer) SCRAM-SHA-512 to provide authentication on both unencrypted and encrypted client connections. TLS authentication is always used internally between Kafka brokers and ZooKeeper nodes. When used with a TLS client connection, the TLS protocol provides encryption, but is not used for authentication.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r468835826", "createdAt": "2020-08-11T20:10:15Z", "author": {"login": "scholzj"}, "path": "documentation/modules/con-securing-kafka-authentication.adoc", "diffHunk": "@@ -0,0 +1,115 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-securing-kafka-brokers.adoc\n+\n+[id='con-securing-kafka-authentication-{context}']\n+= Listener authentication\n+\n+You can create `plain` (without encryption) or `tls` listener types.\n+For clients outside the Kubernetes cluster, you create `external` listeners and specify a connection mechanism, which can be `nodeport`, `loadbalancer`, `ingress` or `route` (on OpenShift).\n+\n+Supported authentication options:\n+\n+. Mutual TLS authentication (only on the listeners with TLS encryption)\n+. SCRAM-SHA authentication\n+. xref:assembly-oauth-authentication_str[OAuth 2.0 token based authentication]\n+\n+.Kafka listener authentication options\n+image::listener-config-options.png[options for listener authentication configuration]\n+\n+The listener `authentication` property is used to specify an authentication mechanism specific to that listener.\n+\n+The listener authentication mechanism is defined by the `type` field.\n+If no `authentication` property is specified then the listener does not authenticate clients which connect through that listener.\n+The listener will accept all connections without authentication.\n+\n+Authentication must be configured when using the User Operator to manage `KafkaUsers`.\n+\n+The following example shows:\n+\n+* A `plain` listener configured for SCRAM-SHA authentication\n+* A `tls` listener with mutual TLS authentication\n+* An `external` listener with mutual TLS authentication\n+\n+.An example showing listener authentication configuration\n+[source,yaml,subs=\"attributes+\"]\n+----\n+# ...\n+listeners:\n+  plain:\n+    authentication:\n+      type: scram-sha-512\n+  tls:\n+    authentication:\n+      type: tls\n+  external:\n+    type: loadbalancer\n+    tls: true\n+    authentication:\n+      type: tls\n+# ...\n+----\n+\n+[id='con-mutual-tls-authentication-{context}']\n+== Mutual TLS authentication\n+\n+Mutual TLS authentication is always used for the communication between Kafka brokers and ZooKeeper pods.\n+\n+For mutual authentication or two-way authentication, both the server and the client present certificates.\n+Strimzi can configure Kafka to use TLS (Transport Layer Security) to provide encrypted communication between Kafka brokers and clients either with or without mutual authentication. When you configure mutual authentication, the broker authenticates the client and the client authenticates the broker.\n+\n+NOTE: TLS authentication is more commonly one-way, with one party authenticating the identity of another. For example, when HTTPS is used between a web browser and a web server, the server obtains proof of the identity of the browser.\n+\n+.When to use mutual TLS authentication for clients\n+\n+Mutual TLS authentication is recommended for authenticating Kafka clients when:\n+\n+* The client supports authentication using mutual TLS authentication\n+* It is necessary to use the TLS certificates rather than passwords\n+* You can reconfigure and restart client applications periodically so that they do not use expired certificates.\n+\n+[id='con-scram-sha-authentication-{context}']\n+== SCRAM-SHA authentication\n+\n+SCRAM (Salted Challenge Response Authentication Mechanism) is an authentication protocol that can establish mutual authentication using passwords. Strimzi can configure Kafka to use SASL (Simple Authentication and Security Layer) SCRAM-SHA-512 to provide authentication on both unencrypted and TLS-encrypted client connections. TLS authentication is always used internally between Kafka brokers and ZooKeeper nodes. When used with a TLS client connection, the TLS protocol provides encryption, but is not used for authentication.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cec43fbfb16aee8706871b1879fedc2c40059689"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTM0ODgxOnYy", "diffSide": "RIGHT", "path": "documentation/modules/con-securing-kafka-authentication.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDoxMDozOFrOG_HemQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDoxMDozOFrOG_HemQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzNTk5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The following properties of SCRAM make it safe to use SCRAM-SHA even on unencrypted connections:\n          \n          \n            \n            The following properties of SCRAM make it safe to use SCRAM-SHA-512 even on unencrypted connections:", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r468835993", "createdAt": "2020-08-11T20:10:38Z", "author": {"login": "scholzj"}, "path": "documentation/modules/con-securing-kafka-authentication.adoc", "diffHunk": "@@ -0,0 +1,115 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-securing-kafka-brokers.adoc\n+\n+[id='con-securing-kafka-authentication-{context}']\n+= Listener authentication\n+\n+You can create `plain` (without encryption) or `tls` listener types.\n+For clients outside the Kubernetes cluster, you create `external` listeners and specify a connection mechanism, which can be `nodeport`, `loadbalancer`, `ingress` or `route` (on OpenShift).\n+\n+Supported authentication options:\n+\n+. Mutual TLS authentication (only on the listeners with TLS encryption)\n+. SCRAM-SHA authentication\n+. xref:assembly-oauth-authentication_str[OAuth 2.0 token based authentication]\n+\n+.Kafka listener authentication options\n+image::listener-config-options.png[options for listener authentication configuration]\n+\n+The listener `authentication` property is used to specify an authentication mechanism specific to that listener.\n+\n+The listener authentication mechanism is defined by the `type` field.\n+If no `authentication` property is specified then the listener does not authenticate clients which connect through that listener.\n+The listener will accept all connections without authentication.\n+\n+Authentication must be configured when using the User Operator to manage `KafkaUsers`.\n+\n+The following example shows:\n+\n+* A `plain` listener configured for SCRAM-SHA authentication\n+* A `tls` listener with mutual TLS authentication\n+* An `external` listener with mutual TLS authentication\n+\n+.An example showing listener authentication configuration\n+[source,yaml,subs=\"attributes+\"]\n+----\n+# ...\n+listeners:\n+  plain:\n+    authentication:\n+      type: scram-sha-512\n+  tls:\n+    authentication:\n+      type: tls\n+  external:\n+    type: loadbalancer\n+    tls: true\n+    authentication:\n+      type: tls\n+# ...\n+----\n+\n+[id='con-mutual-tls-authentication-{context}']\n+== Mutual TLS authentication\n+\n+Mutual TLS authentication is always used for the communication between Kafka brokers and ZooKeeper pods.\n+\n+For mutual authentication or two-way authentication, both the server and the client present certificates.\n+Strimzi can configure Kafka to use TLS (Transport Layer Security) to provide encrypted communication between Kafka brokers and clients either with or without mutual authentication. When you configure mutual authentication, the broker authenticates the client and the client authenticates the broker.\n+\n+NOTE: TLS authentication is more commonly one-way, with one party authenticating the identity of another. For example, when HTTPS is used between a web browser and a web server, the server obtains proof of the identity of the browser.\n+\n+.When to use mutual TLS authentication for clients\n+\n+Mutual TLS authentication is recommended for authenticating Kafka clients when:\n+\n+* The client supports authentication using mutual TLS authentication\n+* It is necessary to use the TLS certificates rather than passwords\n+* You can reconfigure and restart client applications periodically so that they do not use expired certificates.\n+\n+[id='con-scram-sha-authentication-{context}']\n+== SCRAM-SHA authentication\n+\n+SCRAM (Salted Challenge Response Authentication Mechanism) is an authentication protocol that can establish mutual authentication using passwords. Strimzi can configure Kafka to use SASL (Simple Authentication and Security Layer) SCRAM-SHA-512 to provide authentication on both unencrypted and TLS-encrypted client connections. TLS authentication is always used internally between Kafka brokers and ZooKeeper nodes. When used with a TLS client connection, the TLS protocol provides encryption, but is not used for authentication.\n+\n+The following properties of SCRAM make it safe to use SCRAM-SHA even on unencrypted connections:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cec43fbfb16aee8706871b1879fedc2c40059689"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTM1MzE0OnYy", "diffSide": "RIGHT", "path": "documentation/modules/con-securing-kafka-authentication.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDoxMTo1MlrOG_HhJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMDoxNDowNFrOG_a68w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzNjY0Ng==", "bodyText": "Again, I have some doubts whether this is really needed. It is not clickable heading but adds no new information.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            .When to use SCRAM-SHA authentication for clients\n          \n          \n            \n            .When to use SCRAM-SHA-512 authentication for clients", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r468836646", "createdAt": "2020-08-11T20:11:52Z", "author": {"login": "scholzj"}, "path": "documentation/modules/con-securing-kafka-authentication.adoc", "diffHunk": "@@ -0,0 +1,115 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-securing-kafka-brokers.adoc\n+\n+[id='con-securing-kafka-authentication-{context}']\n+= Listener authentication\n+\n+You can create `plain` (without encryption) or `tls` listener types.\n+For clients outside the Kubernetes cluster, you create `external` listeners and specify a connection mechanism, which can be `nodeport`, `loadbalancer`, `ingress` or `route` (on OpenShift).\n+\n+Supported authentication options:\n+\n+. Mutual TLS authentication (only on the listeners with TLS encryption)\n+. SCRAM-SHA authentication\n+. xref:assembly-oauth-authentication_str[OAuth 2.0 token based authentication]\n+\n+.Kafka listener authentication options\n+image::listener-config-options.png[options for listener authentication configuration]\n+\n+The listener `authentication` property is used to specify an authentication mechanism specific to that listener.\n+\n+The listener authentication mechanism is defined by the `type` field.\n+If no `authentication` property is specified then the listener does not authenticate clients which connect through that listener.\n+The listener will accept all connections without authentication.\n+\n+Authentication must be configured when using the User Operator to manage `KafkaUsers`.\n+\n+The following example shows:\n+\n+* A `plain` listener configured for SCRAM-SHA authentication\n+* A `tls` listener with mutual TLS authentication\n+* An `external` listener with mutual TLS authentication\n+\n+.An example showing listener authentication configuration\n+[source,yaml,subs=\"attributes+\"]\n+----\n+# ...\n+listeners:\n+  plain:\n+    authentication:\n+      type: scram-sha-512\n+  tls:\n+    authentication:\n+      type: tls\n+  external:\n+    type: loadbalancer\n+    tls: true\n+    authentication:\n+      type: tls\n+# ...\n+----\n+\n+[id='con-mutual-tls-authentication-{context}']\n+== Mutual TLS authentication\n+\n+Mutual TLS authentication is always used for the communication between Kafka brokers and ZooKeeper pods.\n+\n+For mutual authentication or two-way authentication, both the server and the client present certificates.\n+Strimzi can configure Kafka to use TLS (Transport Layer Security) to provide encrypted communication between Kafka brokers and clients either with or without mutual authentication. When you configure mutual authentication, the broker authenticates the client and the client authenticates the broker.\n+\n+NOTE: TLS authentication is more commonly one-way, with one party authenticating the identity of another. For example, when HTTPS is used between a web browser and a web server, the server obtains proof of the identity of the browser.\n+\n+.When to use mutual TLS authentication for clients\n+\n+Mutual TLS authentication is recommended for authenticating Kafka clients when:\n+\n+* The client supports authentication using mutual TLS authentication\n+* It is necessary to use the TLS certificates rather than passwords\n+* You can reconfigure and restart client applications periodically so that they do not use expired certificates.\n+\n+[id='con-scram-sha-authentication-{context}']\n+== SCRAM-SHA authentication\n+\n+SCRAM (Salted Challenge Response Authentication Mechanism) is an authentication protocol that can establish mutual authentication using passwords. Strimzi can configure Kafka to use SASL (Simple Authentication and Security Layer) SCRAM-SHA-512 to provide authentication on both unencrypted and TLS-encrypted client connections. TLS authentication is always used internally between Kafka brokers and ZooKeeper nodes. When used with a TLS client connection, the TLS protocol provides encryption, but is not used for authentication.\n+\n+The following properties of SCRAM make it safe to use SCRAM-SHA even on unencrypted connections:\n+\n+* The passwords are not sent in the clear over the communication channel.\n+Instead the client and the server are each challenged by the other to offer proof that they know the password of the authenticating user.\n+\n+* The server and client each generate a new challenge for each authentication exchange.\n+This means that the exchange is resilient against replay attacks.\n+\n+.Supported SCRAM credentials\n+\n+Strimzi supports SCRAM-SHA-512 only.\n+When a `KafkaUser.spec.authentication.type` is configured with `scram-sha-512` the User Operator will generate a random 12 character password consisting of upper and lowercase ASCII letters and numbers.\n+\n+.When to use SCRAM-SHA authentication for clients", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cec43fbfb16aee8706871b1879fedc2c40059689"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE1NDU0Nw==", "bodyText": "Section removed", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r469154547", "createdAt": "2020-08-12T10:14:04Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/con-securing-kafka-authentication.adoc", "diffHunk": "@@ -0,0 +1,115 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-securing-kafka-brokers.adoc\n+\n+[id='con-securing-kafka-authentication-{context}']\n+= Listener authentication\n+\n+You can create `plain` (without encryption) or `tls` listener types.\n+For clients outside the Kubernetes cluster, you create `external` listeners and specify a connection mechanism, which can be `nodeport`, `loadbalancer`, `ingress` or `route` (on OpenShift).\n+\n+Supported authentication options:\n+\n+. Mutual TLS authentication (only on the listeners with TLS encryption)\n+. SCRAM-SHA authentication\n+. xref:assembly-oauth-authentication_str[OAuth 2.0 token based authentication]\n+\n+.Kafka listener authentication options\n+image::listener-config-options.png[options for listener authentication configuration]\n+\n+The listener `authentication` property is used to specify an authentication mechanism specific to that listener.\n+\n+The listener authentication mechanism is defined by the `type` field.\n+If no `authentication` property is specified then the listener does not authenticate clients which connect through that listener.\n+The listener will accept all connections without authentication.\n+\n+Authentication must be configured when using the User Operator to manage `KafkaUsers`.\n+\n+The following example shows:\n+\n+* A `plain` listener configured for SCRAM-SHA authentication\n+* A `tls` listener with mutual TLS authentication\n+* An `external` listener with mutual TLS authentication\n+\n+.An example showing listener authentication configuration\n+[source,yaml,subs=\"attributes+\"]\n+----\n+# ...\n+listeners:\n+  plain:\n+    authentication:\n+      type: scram-sha-512\n+  tls:\n+    authentication:\n+      type: tls\n+  external:\n+    type: loadbalancer\n+    tls: true\n+    authentication:\n+      type: tls\n+# ...\n+----\n+\n+[id='con-mutual-tls-authentication-{context}']\n+== Mutual TLS authentication\n+\n+Mutual TLS authentication is always used for the communication between Kafka brokers and ZooKeeper pods.\n+\n+For mutual authentication or two-way authentication, both the server and the client present certificates.\n+Strimzi can configure Kafka to use TLS (Transport Layer Security) to provide encrypted communication between Kafka brokers and clients either with or without mutual authentication. When you configure mutual authentication, the broker authenticates the client and the client authenticates the broker.\n+\n+NOTE: TLS authentication is more commonly one-way, with one party authenticating the identity of another. For example, when HTTPS is used between a web browser and a web server, the server obtains proof of the identity of the browser.\n+\n+.When to use mutual TLS authentication for clients\n+\n+Mutual TLS authentication is recommended for authenticating Kafka clients when:\n+\n+* The client supports authentication using mutual TLS authentication\n+* It is necessary to use the TLS certificates rather than passwords\n+* You can reconfigure and restart client applications periodically so that they do not use expired certificates.\n+\n+[id='con-scram-sha-authentication-{context}']\n+== SCRAM-SHA authentication\n+\n+SCRAM (Salted Challenge Response Authentication Mechanism) is an authentication protocol that can establish mutual authentication using passwords. Strimzi can configure Kafka to use SASL (Simple Authentication and Security Layer) SCRAM-SHA-512 to provide authentication on both unencrypted and TLS-encrypted client connections. TLS authentication is always used internally between Kafka brokers and ZooKeeper nodes. When used with a TLS client connection, the TLS protocol provides encryption, but is not used for authentication.\n+\n+The following properties of SCRAM make it safe to use SCRAM-SHA even on unencrypted connections:\n+\n+* The passwords are not sent in the clear over the communication channel.\n+Instead the client and the server are each challenged by the other to offer proof that they know the password of the authenticating user.\n+\n+* The server and client each generate a new challenge for each authentication exchange.\n+This means that the exchange is resilient against replay attacks.\n+\n+.Supported SCRAM credentials\n+\n+Strimzi supports SCRAM-SHA-512 only.\n+When a `KafkaUser.spec.authentication.type` is configured with `scram-sha-512` the User Operator will generate a random 12 character password consisting of upper and lowercase ASCII letters and numbers.\n+\n+.When to use SCRAM-SHA authentication for clients", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzNjY0Ng=="}, "originalCommit": {"oid": "cec43fbfb16aee8706871b1879fedc2c40059689"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTM1NDM5OnYy", "diffSide": "RIGHT", "path": "documentation/modules/con-securing-kafka-authentication.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDoxMjoxNFrOG_Hh4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMDoxNjowOVrOG_a--g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzNjgzMw==", "bodyText": "Again, I have some doubts whether this is really needed. It is not clickable heading but adds no new information. Even visually it seems to be rather useless.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r468836833", "createdAt": "2020-08-11T20:12:14Z", "author": {"login": "scholzj"}, "path": "documentation/modules/con-securing-kafka-authentication.adoc", "diffHunk": "@@ -0,0 +1,115 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-securing-kafka-brokers.adoc\n+\n+[id='con-securing-kafka-authentication-{context}']\n+= Listener authentication\n+\n+You can create `plain` (without encryption) or `tls` listener types.\n+For clients outside the Kubernetes cluster, you create `external` listeners and specify a connection mechanism, which can be `nodeport`, `loadbalancer`, `ingress` or `route` (on OpenShift).\n+\n+Supported authentication options:\n+\n+. Mutual TLS authentication (only on the listeners with TLS encryption)\n+. SCRAM-SHA authentication\n+. xref:assembly-oauth-authentication_str[OAuth 2.0 token based authentication]\n+\n+.Kafka listener authentication options\n+image::listener-config-options.png[options for listener authentication configuration]\n+\n+The listener `authentication` property is used to specify an authentication mechanism specific to that listener.\n+\n+The listener authentication mechanism is defined by the `type` field.\n+If no `authentication` property is specified then the listener does not authenticate clients which connect through that listener.\n+The listener will accept all connections without authentication.\n+\n+Authentication must be configured when using the User Operator to manage `KafkaUsers`.\n+\n+The following example shows:\n+\n+* A `plain` listener configured for SCRAM-SHA authentication\n+* A `tls` listener with mutual TLS authentication\n+* An `external` listener with mutual TLS authentication\n+\n+.An example showing listener authentication configuration\n+[source,yaml,subs=\"attributes+\"]\n+----\n+# ...\n+listeners:\n+  plain:\n+    authentication:\n+      type: scram-sha-512\n+  tls:\n+    authentication:\n+      type: tls\n+  external:\n+    type: loadbalancer\n+    tls: true\n+    authentication:\n+      type: tls\n+# ...\n+----\n+\n+[id='con-mutual-tls-authentication-{context}']\n+== Mutual TLS authentication\n+\n+Mutual TLS authentication is always used for the communication between Kafka brokers and ZooKeeper pods.\n+\n+For mutual authentication or two-way authentication, both the server and the client present certificates.\n+Strimzi can configure Kafka to use TLS (Transport Layer Security) to provide encrypted communication between Kafka brokers and clients either with or without mutual authentication. When you configure mutual authentication, the broker authenticates the client and the client authenticates the broker.\n+\n+NOTE: TLS authentication is more commonly one-way, with one party authenticating the identity of another. For example, when HTTPS is used between a web browser and a web server, the server obtains proof of the identity of the browser.\n+\n+.When to use mutual TLS authentication for clients\n+\n+Mutual TLS authentication is recommended for authenticating Kafka clients when:\n+\n+* The client supports authentication using mutual TLS authentication\n+* It is necessary to use the TLS certificates rather than passwords\n+* You can reconfigure and restart client applications periodically so that they do not use expired certificates.\n+\n+[id='con-scram-sha-authentication-{context}']\n+== SCRAM-SHA authentication\n+\n+SCRAM (Salted Challenge Response Authentication Mechanism) is an authentication protocol that can establish mutual authentication using passwords. Strimzi can configure Kafka to use SASL (Simple Authentication and Security Layer) SCRAM-SHA-512 to provide authentication on both unencrypted and TLS-encrypted client connections. TLS authentication is always used internally between Kafka brokers and ZooKeeper nodes. When used with a TLS client connection, the TLS protocol provides encryption, but is not used for authentication.\n+\n+The following properties of SCRAM make it safe to use SCRAM-SHA even on unencrypted connections:\n+\n+* The passwords are not sent in the clear over the communication channel.\n+Instead the client and the server are each challenged by the other to offer proof that they know the password of the authenticating user.\n+\n+* The server and client each generate a new challenge for each authentication exchange.\n+This means that the exchange is resilient against replay attacks.\n+\n+.Supported SCRAM credentials", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cec43fbfb16aee8706871b1879fedc2c40059689"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE1NTU3OA==", "bodyText": "I've changed this:\n\n.Supported SCRAM credentials\nStrimzi supports SCRAM-SHA-512 only.\nWhen a KafkaUser.spec.authentication.type is configured with scram-sha-512 the User Operator will generate a random 12 character password consisting of upper and lowercase ASCII letters and numbers.\n\nTo this:\n\nWhen a KafkaUser.spec.authentication.type is configured with scram-sha-512 the User Operator will generate a random 12 character password consisting of upper and lowercase ASCII letters and numbers.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r469155578", "createdAt": "2020-08-12T10:16:09Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/con-securing-kafka-authentication.adoc", "diffHunk": "@@ -0,0 +1,115 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-securing-kafka-brokers.adoc\n+\n+[id='con-securing-kafka-authentication-{context}']\n+= Listener authentication\n+\n+You can create `plain` (without encryption) or `tls` listener types.\n+For clients outside the Kubernetes cluster, you create `external` listeners and specify a connection mechanism, which can be `nodeport`, `loadbalancer`, `ingress` or `route` (on OpenShift).\n+\n+Supported authentication options:\n+\n+. Mutual TLS authentication (only on the listeners with TLS encryption)\n+. SCRAM-SHA authentication\n+. xref:assembly-oauth-authentication_str[OAuth 2.0 token based authentication]\n+\n+.Kafka listener authentication options\n+image::listener-config-options.png[options for listener authentication configuration]\n+\n+The listener `authentication` property is used to specify an authentication mechanism specific to that listener.\n+\n+The listener authentication mechanism is defined by the `type` field.\n+If no `authentication` property is specified then the listener does not authenticate clients which connect through that listener.\n+The listener will accept all connections without authentication.\n+\n+Authentication must be configured when using the User Operator to manage `KafkaUsers`.\n+\n+The following example shows:\n+\n+* A `plain` listener configured for SCRAM-SHA authentication\n+* A `tls` listener with mutual TLS authentication\n+* An `external` listener with mutual TLS authentication\n+\n+.An example showing listener authentication configuration\n+[source,yaml,subs=\"attributes+\"]\n+----\n+# ...\n+listeners:\n+  plain:\n+    authentication:\n+      type: scram-sha-512\n+  tls:\n+    authentication:\n+      type: tls\n+  external:\n+    type: loadbalancer\n+    tls: true\n+    authentication:\n+      type: tls\n+# ...\n+----\n+\n+[id='con-mutual-tls-authentication-{context}']\n+== Mutual TLS authentication\n+\n+Mutual TLS authentication is always used for the communication between Kafka brokers and ZooKeeper pods.\n+\n+For mutual authentication or two-way authentication, both the server and the client present certificates.\n+Strimzi can configure Kafka to use TLS (Transport Layer Security) to provide encrypted communication between Kafka brokers and clients either with or without mutual authentication. When you configure mutual authentication, the broker authenticates the client and the client authenticates the broker.\n+\n+NOTE: TLS authentication is more commonly one-way, with one party authenticating the identity of another. For example, when HTTPS is used between a web browser and a web server, the server obtains proof of the identity of the browser.\n+\n+.When to use mutual TLS authentication for clients\n+\n+Mutual TLS authentication is recommended for authenticating Kafka clients when:\n+\n+* The client supports authentication using mutual TLS authentication\n+* It is necessary to use the TLS certificates rather than passwords\n+* You can reconfigure and restart client applications periodically so that they do not use expired certificates.\n+\n+[id='con-scram-sha-authentication-{context}']\n+== SCRAM-SHA authentication\n+\n+SCRAM (Salted Challenge Response Authentication Mechanism) is an authentication protocol that can establish mutual authentication using passwords. Strimzi can configure Kafka to use SASL (Simple Authentication and Security Layer) SCRAM-SHA-512 to provide authentication on both unencrypted and TLS-encrypted client connections. TLS authentication is always used internally between Kafka brokers and ZooKeeper nodes. When used with a TLS client connection, the TLS protocol provides encryption, but is not used for authentication.\n+\n+The following properties of SCRAM make it safe to use SCRAM-SHA even on unencrypted connections:\n+\n+* The passwords are not sent in the clear over the communication channel.\n+Instead the client and the server are each challenged by the other to offer proof that they know the password of the authenticating user.\n+\n+* The server and client each generate a new challenge for each authentication exchange.\n+This means that the exchange is resilient against replay attacks.\n+\n+.Supported SCRAM credentials", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzNjgzMw=="}, "originalCommit": {"oid": "cec43fbfb16aee8706871b1879fedc2c40059689"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTM2MjM2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/con-securing-kafka-authentication.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDoxNDo1MVrOG_Hm1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMDoxNjo1MVrOG_bAhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzODEwMw==", "bodyText": "Again, I think these two are bad arguments. The first makes it sound that whenever your clients supports SCRAM-SHA-512 we recommend you to use it. The second does not offer any actual reasons. It basically says If you know that you need to use passwords and not TLS certificates, we recommend you to use passwords which does nto make much sense.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r468838103", "createdAt": "2020-08-11T20:14:51Z", "author": {"login": "scholzj"}, "path": "documentation/modules/con-securing-kafka-authentication.adoc", "diffHunk": "@@ -0,0 +1,115 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-securing-kafka-brokers.adoc\n+\n+[id='con-securing-kafka-authentication-{context}']\n+= Listener authentication\n+\n+You can create `plain` (without encryption) or `tls` listener types.\n+For clients outside the Kubernetes cluster, you create `external` listeners and specify a connection mechanism, which can be `nodeport`, `loadbalancer`, `ingress` or `route` (on OpenShift).\n+\n+Supported authentication options:\n+\n+. Mutual TLS authentication (only on the listeners with TLS encryption)\n+. SCRAM-SHA authentication\n+. xref:assembly-oauth-authentication_str[OAuth 2.0 token based authentication]\n+\n+.Kafka listener authentication options\n+image::listener-config-options.png[options for listener authentication configuration]\n+\n+The listener `authentication` property is used to specify an authentication mechanism specific to that listener.\n+\n+The listener authentication mechanism is defined by the `type` field.\n+If no `authentication` property is specified then the listener does not authenticate clients which connect through that listener.\n+The listener will accept all connections without authentication.\n+\n+Authentication must be configured when using the User Operator to manage `KafkaUsers`.\n+\n+The following example shows:\n+\n+* A `plain` listener configured for SCRAM-SHA authentication\n+* A `tls` listener with mutual TLS authentication\n+* An `external` listener with mutual TLS authentication\n+\n+.An example showing listener authentication configuration\n+[source,yaml,subs=\"attributes+\"]\n+----\n+# ...\n+listeners:\n+  plain:\n+    authentication:\n+      type: scram-sha-512\n+  tls:\n+    authentication:\n+      type: tls\n+  external:\n+    type: loadbalancer\n+    tls: true\n+    authentication:\n+      type: tls\n+# ...\n+----\n+\n+[id='con-mutual-tls-authentication-{context}']\n+== Mutual TLS authentication\n+\n+Mutual TLS authentication is always used for the communication between Kafka brokers and ZooKeeper pods.\n+\n+For mutual authentication or two-way authentication, both the server and the client present certificates.\n+Strimzi can configure Kafka to use TLS (Transport Layer Security) to provide encrypted communication between Kafka brokers and clients either with or without mutual authentication. When you configure mutual authentication, the broker authenticates the client and the client authenticates the broker.\n+\n+NOTE: TLS authentication is more commonly one-way, with one party authenticating the identity of another. For example, when HTTPS is used between a web browser and a web server, the server obtains proof of the identity of the browser.\n+\n+.When to use mutual TLS authentication for clients\n+\n+Mutual TLS authentication is recommended for authenticating Kafka clients when:\n+\n+* The client supports authentication using mutual TLS authentication\n+* It is necessary to use the TLS certificates rather than passwords\n+* You can reconfigure and restart client applications periodically so that they do not use expired certificates.\n+\n+[id='con-scram-sha-authentication-{context}']\n+== SCRAM-SHA authentication\n+\n+SCRAM (Salted Challenge Response Authentication Mechanism) is an authentication protocol that can establish mutual authentication using passwords. Strimzi can configure Kafka to use SASL (Simple Authentication and Security Layer) SCRAM-SHA-512 to provide authentication on both unencrypted and TLS-encrypted client connections. TLS authentication is always used internally between Kafka brokers and ZooKeeper nodes. When used with a TLS client connection, the TLS protocol provides encryption, but is not used for authentication.\n+\n+The following properties of SCRAM make it safe to use SCRAM-SHA even on unencrypted connections:\n+\n+* The passwords are not sent in the clear over the communication channel.\n+Instead the client and the server are each challenged by the other to offer proof that they know the password of the authenticating user.\n+\n+* The server and client each generate a new challenge for each authentication exchange.\n+This means that the exchange is resilient against replay attacks.\n+\n+.Supported SCRAM credentials\n+\n+Strimzi supports SCRAM-SHA-512 only.\n+When a `KafkaUser.spec.authentication.type` is configured with `scram-sha-512` the User Operator will generate a random 12 character password consisting of upper and lowercase ASCII letters and numbers.\n+\n+.When to use SCRAM-SHA authentication for clients\n+\n+SCRAM-SHA is recommended for authenticating Kafka clients when:\n+\n+* The client supports authentication using SCRAM-SHA-512\n+* It is necessary to use passwords rather than the TLS certificates", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cec43fbfb16aee8706871b1879fedc2c40059689"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE1NTk3Mw==", "bodyText": "removed", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r469155973", "createdAt": "2020-08-12T10:16:51Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/con-securing-kafka-authentication.adoc", "diffHunk": "@@ -0,0 +1,115 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-securing-kafka-brokers.adoc\n+\n+[id='con-securing-kafka-authentication-{context}']\n+= Listener authentication\n+\n+You can create `plain` (without encryption) or `tls` listener types.\n+For clients outside the Kubernetes cluster, you create `external` listeners and specify a connection mechanism, which can be `nodeport`, `loadbalancer`, `ingress` or `route` (on OpenShift).\n+\n+Supported authentication options:\n+\n+. Mutual TLS authentication (only on the listeners with TLS encryption)\n+. SCRAM-SHA authentication\n+. xref:assembly-oauth-authentication_str[OAuth 2.0 token based authentication]\n+\n+.Kafka listener authentication options\n+image::listener-config-options.png[options for listener authentication configuration]\n+\n+The listener `authentication` property is used to specify an authentication mechanism specific to that listener.\n+\n+The listener authentication mechanism is defined by the `type` field.\n+If no `authentication` property is specified then the listener does not authenticate clients which connect through that listener.\n+The listener will accept all connections without authentication.\n+\n+Authentication must be configured when using the User Operator to manage `KafkaUsers`.\n+\n+The following example shows:\n+\n+* A `plain` listener configured for SCRAM-SHA authentication\n+* A `tls` listener with mutual TLS authentication\n+* An `external` listener with mutual TLS authentication\n+\n+.An example showing listener authentication configuration\n+[source,yaml,subs=\"attributes+\"]\n+----\n+# ...\n+listeners:\n+  plain:\n+    authentication:\n+      type: scram-sha-512\n+  tls:\n+    authentication:\n+      type: tls\n+  external:\n+    type: loadbalancer\n+    tls: true\n+    authentication:\n+      type: tls\n+# ...\n+----\n+\n+[id='con-mutual-tls-authentication-{context}']\n+== Mutual TLS authentication\n+\n+Mutual TLS authentication is always used for the communication between Kafka brokers and ZooKeeper pods.\n+\n+For mutual authentication or two-way authentication, both the server and the client present certificates.\n+Strimzi can configure Kafka to use TLS (Transport Layer Security) to provide encrypted communication between Kafka brokers and clients either with or without mutual authentication. When you configure mutual authentication, the broker authenticates the client and the client authenticates the broker.\n+\n+NOTE: TLS authentication is more commonly one-way, with one party authenticating the identity of another. For example, when HTTPS is used between a web browser and a web server, the server obtains proof of the identity of the browser.\n+\n+.When to use mutual TLS authentication for clients\n+\n+Mutual TLS authentication is recommended for authenticating Kafka clients when:\n+\n+* The client supports authentication using mutual TLS authentication\n+* It is necessary to use the TLS certificates rather than passwords\n+* You can reconfigure and restart client applications periodically so that they do not use expired certificates.\n+\n+[id='con-scram-sha-authentication-{context}']\n+== SCRAM-SHA authentication\n+\n+SCRAM (Salted Challenge Response Authentication Mechanism) is an authentication protocol that can establish mutual authentication using passwords. Strimzi can configure Kafka to use SASL (Simple Authentication and Security Layer) SCRAM-SHA-512 to provide authentication on both unencrypted and TLS-encrypted client connections. TLS authentication is always used internally between Kafka brokers and ZooKeeper nodes. When used with a TLS client connection, the TLS protocol provides encryption, but is not used for authentication.\n+\n+The following properties of SCRAM make it safe to use SCRAM-SHA even on unencrypted connections:\n+\n+* The passwords are not sent in the clear over the communication channel.\n+Instead the client and the server are each challenged by the other to offer proof that they know the password of the authenticating user.\n+\n+* The server and client each generate a new challenge for each authentication exchange.\n+This means that the exchange is resilient against replay attacks.\n+\n+.Supported SCRAM credentials\n+\n+Strimzi supports SCRAM-SHA-512 only.\n+When a `KafkaUser.spec.authentication.type` is configured with `scram-sha-512` the User Operator will generate a random 12 character password consisting of upper and lowercase ASCII letters and numbers.\n+\n+.When to use SCRAM-SHA authentication for clients\n+\n+SCRAM-SHA is recommended for authenticating Kafka clients when:\n+\n+* The client supports authentication using SCRAM-SHA-512\n+* It is necessary to use passwords rather than the TLS certificates", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzODEwMw=="}, "originalCommit": {"oid": "cec43fbfb16aee8706871b1879fedc2c40059689"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTM2OTAwOnYy", "diffSide": "RIGHT", "path": "documentation/modules/con-securing-kafka-authorization.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDoxNjo1N1rOG_HrBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMDoxODozOFrOG_bESA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzOTE3Mw==", "bodyText": "Let's make this more clear by explaining the consequences of using no authhorization.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If the `authorization` property is missing, no authorization is enabled.\n          \n          \n            \n            If the `authorization` property is missing, no authorization is enabled and all clients are allowed to do anything.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r468839173", "createdAt": "2020-08-11T20:16:57Z", "author": {"login": "scholzj"}, "path": "documentation/modules/con-securing-kafka-authorization.adoc", "diffHunk": "@@ -0,0 +1,39 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-securing-access.adoc\n+\n+[id='con-securing-kafka-authorization-{context}']\n+= Kafka authorization\n+\n+You can configure authorization for Kafka brokers using the `authorization` property in the `Kafka.spec.kafka` resource.\n+If the `authorization` property is missing, no authorization is enabled.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cec43fbfb16aee8706871b1879fedc2c40059689"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE1NjkzNg==", "bodyText": "..no authorization is enabled and clients have no restrictions.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r469156936", "createdAt": "2020-08-12T10:18:38Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/con-securing-kafka-authorization.adoc", "diffHunk": "@@ -0,0 +1,39 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-securing-access.adoc\n+\n+[id='con-securing-kafka-authorization-{context}']\n+= Kafka authorization\n+\n+You can configure authorization for Kafka brokers using the `authorization` property in the `Kafka.spec.kafka` resource.\n+If the `authorization` property is missing, no authorization is enabled.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzOTE3Mw=="}, "originalCommit": {"oid": "cec43fbfb16aee8706871b1879fedc2c40059689"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTM3NDI2OnYy", "diffSide": "RIGHT", "path": "documentation/api/io.strimzi.api.kafka.model.KafkaAuthorizationSimple.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDoxODozOVrOG_HuQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMDoyMjowNlrOG_bLIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg0MDAwMA==", "bodyText": "I'm afraid this changed since this Pr was created.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Simple authorization in Strimzi uses the `SimpleAclAuthorizer` plugin, the default Access Control Lists (ACLs) authorization plugin provided with Apache Kafka.\n          \n          \n            \n            Simple authorization in Strimzi uses the `AclAuthorizer` plugin, the default Access Control Lists (ACLs) authorization plugin provided with Apache Kafka.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r468840000", "createdAt": "2020-08-11T20:18:39Z", "author": {"login": "scholzj"}, "path": "documentation/api/io.strimzi.api.kafka.model.KafkaAuthorizationSimple.adoc", "diffHunk": "@@ -0,0 +1,27 @@\n+Simple authorization in Strimzi uses the `SimpleAclAuthorizer` plugin, the default Access Control Lists (ACLs) authorization plugin provided with Apache Kafka.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cec43fbfb16aee8706871b1879fedc2c40059689"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE1ODY5MA==", "bodyText": "Changed all references in the doc files", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r469158690", "createdAt": "2020-08-12T10:22:06Z", "author": {"login": "PaulRMellor"}, "path": "documentation/api/io.strimzi.api.kafka.model.KafkaAuthorizationSimple.adoc", "diffHunk": "@@ -0,0 +1,27 @@\n+Simple authorization in Strimzi uses the `SimpleAclAuthorizer` plugin, the default Access Control Lists (ACLs) authorization plugin provided with Apache Kafka.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg0MDAwMA=="}, "originalCommit": {"oid": "cec43fbfb16aee8706871b1879fedc2c40059689"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTQwMjA0OnYy", "diffSide": "RIGHT", "path": "documentation/modules/con-securing-client-labels.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDoyNjo1NlrOG_H-2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMDozOToxMVrOG_br2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg0NDI0OQ==", "bodyText": "Maybe we can add that if the .status section of the KafkaUser resource is empty after several minutes, users should double check the label?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r468844249", "createdAt": "2020-08-11T20:26:56Z", "author": {"login": "scholzj"}, "path": "documentation/modules/con-securing-client-labels.adoc", "diffHunk": "@@ -0,0 +1,22 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-securing-kafka-clients.adoc\n+\n+[id='con-securing-client-labels-{context}']\n+= Identifying a Kafka cluster for user handling\n+\n+A `KafkaUser` resource includes a label that defines the appropriate name of the Kafka cluster (derived from the name of the `Kafka` resource) to which it belongs.\n+\n+[source,yaml,subs=\"attributes+\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: KafkaUser\n+metadata:\n+  name: my-user\n+  labels:\n+    strimzi.io/cluster: my-cluster\n+----\n+\n+The label is used by the User Operator to identify the `KafkaUser` resource and create a new user, and also in subsequent handling of the user.\n+\n+If the label does not match the Kafka cluster, the User Operator cannot identify the `KafkaUser` and the user is not created.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cec43fbfb16aee8706871b1879fedc2c40059689"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NzA2NQ==", "bodyText": "Shall we add a check too:\nkubectl get kafkauser my-user -o jsonpath='{.status}'", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r469167065", "createdAt": "2020-08-12T10:39:11Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/con-securing-client-labels.adoc", "diffHunk": "@@ -0,0 +1,22 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-securing-kafka-clients.adoc\n+\n+[id='con-securing-client-labels-{context}']\n+= Identifying a Kafka cluster for user handling\n+\n+A `KafkaUser` resource includes a label that defines the appropriate name of the Kafka cluster (derived from the name of the `Kafka` resource) to which it belongs.\n+\n+[source,yaml,subs=\"attributes+\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: KafkaUser\n+metadata:\n+  name: my-user\n+  labels:\n+    strimzi.io/cluster: my-cluster\n+----\n+\n+The label is used by the User Operator to identify the `KafkaUser` resource and create a new user, and also in subsequent handling of the user.\n+\n+If the label does not match the Kafka cluster, the User Operator cannot identify the `KafkaUser` and the user is not created.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg0NDI0OQ=="}, "originalCommit": {"oid": "cec43fbfb16aee8706871b1879fedc2c40059689"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTQxNjI3OnYy", "diffSide": "RIGHT", "path": "documentation/modules/con-securing-client-authorization.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDozMDowNlrOG_IIOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDozMDowNlrOG_IIOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg0NjY1MA==", "bodyText": "You might need to edit it for better english, but I think we should have something like this:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Alternatively, if you are using OAuth 2.0 token based authentication, you can also xref:assembly-oauth-authorization_str[configure OAuth 2.0 authorization].\n          \n          \n            \n            Alternatively, you can use the Open Policy Agent authorization, or if you are using OAuth 2.0 token based authentication, you can also xref:assembly-oauth-authorization_str[configure OAuth 2.0 authorization].\n          \n          \n            \n            Open Policy Agent and OAuth 2.0 authorization is not managed through `KafkaUser` resources", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r468846650", "createdAt": "2020-08-11T20:30:06Z", "author": {"login": "scholzj"}, "path": "documentation/modules/con-securing-client-authorization.adoc", "diffHunk": "@@ -0,0 +1,56 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-securing-kafka-clients.adoc\n+\n+[id='con-securing-client-authorization-{context}']\n+= User authorization\n+\n+User authorization is configured using the `authorization` property in `KafkaUser.spec`.\n+The authorization type enabled for a user is specified using the `type` field.\n+\n+If no authorization is specified, the User Operator does not provision any access rights for the user.\n+\n+To use simple authorization, you set the `type` property to `simple` in `KafkaUser.spec`.\n+Simple authorization uses the default Kafka authorization plugin, `SimpleAclAuthorizer`.\n+\n+Alternatively, if you are using OAuth 2.0 token based authentication, you can also xref:assembly-oauth-authorization_str[configure OAuth 2.0 authorization].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cec43fbfb16aee8706871b1879fedc2c40059689"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTQxODg2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/con-securing-client-authorization.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDozMDo1MVrOG_IJxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDozMDo1MVrOG_IJxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg0NzA0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If a user is added to a list of super users in a Kafka broker configuration, the user is allowed unlimited access to the cluster regardless of any authorization constraints defined in ACLs.\n          \n          \n            \n            If a user is added to a list of super users in a Kafka broker configuration, the user is allowed unlimited access to the cluster regardless of any authorization constraints defined in ACLs in `KafkaUser`.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r468847044", "createdAt": "2020-08-11T20:30:51Z", "author": {"login": "scholzj"}, "path": "documentation/modules/con-securing-client-authorization.adoc", "diffHunk": "@@ -0,0 +1,56 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-securing-kafka-clients.adoc\n+\n+[id='con-securing-client-authorization-{context}']\n+= User authorization\n+\n+User authorization is configured using the `authorization` property in `KafkaUser.spec`.\n+The authorization type enabled for a user is specified using the `type` field.\n+\n+If no authorization is specified, the User Operator does not provision any access rights for the user.\n+\n+To use simple authorization, you set the `type` property to `simple` in `KafkaUser.spec`.\n+Simple authorization uses the default Kafka authorization plugin, `SimpleAclAuthorizer`.\n+\n+Alternatively, if you are using OAuth 2.0 token based authentication, you can also xref:assembly-oauth-authorization_str[configure OAuth 2.0 authorization].\n+\n+== ACL rules\n+\n+`SimpleAclAuthorizer` uses ACL rules to manage access to Kafka brokers.\n+\n+ACL rules grant access rights to the user, which you specify in the `acls` property.\n+\n+For more information about the `AclRule` object, see the xref:type-AclRule-reference[`AclRule` schema reference].\n+\n+== Super user access to Kafka brokers\n+\n+If a user is added to a list of super users in a Kafka broker configuration, the user is allowed unlimited access to the cluster regardless of any authorization constraints defined in ACLs.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cec43fbfb16aee8706871b1879fedc2c40059689"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTQyMjY4OnYy", "diffSide": "RIGHT", "path": "documentation/assemblies/assembly-securing-kafka.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDozMjowN1rOG_IMPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDozMjowN1rOG_IMPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg0NzY3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * A `Kafka` resource to create listeners with a specified authentication type\n          \n          \n            \n            * A `Kafka` resource to create listeners with a specified authentication type and to configure authorization for the whole Kafka cluster.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r468847678", "createdAt": "2020-08-11T20:32:07Z", "author": {"login": "scholzj"}, "path": "documentation/assemblies/assembly-securing-kafka.adoc", "diffHunk": "@@ -0,0 +1,49 @@\n+// This assembly is included in the following assemblies:\n+//\n+// // assembly-securing-access.adoc\n+\n+[id='assembly-securing-kafka-{context}']\n+= Securing access to Kafka brokers\n+\n+To establish secure access to Kafka brokers, you configure and apply:\n+\n+* A `Kafka` resource to create listeners with a specified authentication type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cec43fbfb16aee8706871b1879fedc2c40059689"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTQyNzQxOnYy", "diffSide": "RIGHT", "path": "documentation/modules/proc-securing-kafka.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDozMzozOFrOG_IPEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMDo1NzoxMVrOG_cN0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg0ODQwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * `Kafka.spec.kafka.listeners.*.authentication` matches `KafkaUser.spec.authentication matches`\n          \n          \n            \n            * `Kafka.spec.kafka.listeners.*.authentication` matches `KafkaUser.spec.authentication`", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r468848402", "createdAt": "2020-08-11T20:33:38Z", "author": {"login": "scholzj"}, "path": "documentation/modules/proc-securing-kafka.adoc", "diffHunk": "@@ -0,0 +1,91 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-securing-kafka.adoc\n+\n+[id='proc-securing-kafka-{context}']\n+= Securing Kafka brokers\n+\n+This procedure shows the steps involved in securing Kafka brokers when running Strimzi.\n+\n+The security implemented for Kafka brokers must be compatible with the security implemented for the clients requiring access.\n+\n+* `Kafka.spec.kafka.listeners.*.authentication` matches `KafkaUser.spec.authentication matches`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cec43fbfb16aee8706871b1879fedc2c40059689"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE3NTc2Mw==", "bodyText": "\ud83d\ude2e", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r469175763", "createdAt": "2020-08-12T10:57:11Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/proc-securing-kafka.adoc", "diffHunk": "@@ -0,0 +1,91 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-securing-kafka.adoc\n+\n+[id='proc-securing-kafka-{context}']\n+= Securing Kafka brokers\n+\n+This procedure shows the steps involved in securing Kafka brokers when running Strimzi.\n+\n+The security implemented for Kafka brokers must be compatible with the security implemented for the clients requiring access.\n+\n+* `Kafka.spec.kafka.listeners.*.authentication` matches `KafkaUser.spec.authentication matches`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg0ODQwMg=="}, "originalCommit": {"oid": "cec43fbfb16aee8706871b1879fedc2c40059689"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTQyODA4OnYy", "diffSide": "RIGHT", "path": "documentation/modules/proc-securing-kafka.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDozMzo0OFrOG_IPcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDozMzo0OFrOG_IPcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg0ODQ5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * `Kafka.spec.kafka.authorization` matches `KafkaUser.spec.authorization matches`\n          \n          \n            \n            * `Kafka.spec.kafka.authorization` matches `KafkaUser.spec.authorization`", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r468848499", "createdAt": "2020-08-11T20:33:48Z", "author": {"login": "scholzj"}, "path": "documentation/modules/proc-securing-kafka.adoc", "diffHunk": "@@ -0,0 +1,91 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-securing-kafka.adoc\n+\n+[id='proc-securing-kafka-{context}']\n+= Securing Kafka brokers\n+\n+This procedure shows the steps involved in securing Kafka brokers when running Strimzi.\n+\n+The security implemented for Kafka brokers must be compatible with the security implemented for the clients requiring access.\n+\n+* `Kafka.spec.kafka.listeners.*.authentication` matches `KafkaUser.spec.authentication matches`\n+* `Kafka.spec.kafka.authorization` matches `KafkaUser.spec.authorization matches`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cec43fbfb16aee8706871b1879fedc2c40059689"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTQzNTU4OnYy", "diffSide": "RIGHT", "path": "documentation/modules/proc-securing-kafka.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDozNjoyOVrOG_IUJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMDo1ODozOFrOG_cQjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg0OTcwMg==", "bodyText": "I think this part is a bit confusing since it talks about external listener now which is not even mentioned in the previous example. It is also not part of the procedure, so I'm not sure why this subchapter really is here.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r468849702", "createdAt": "2020-08-11T20:36:29Z", "author": {"login": "scholzj"}, "path": "documentation/modules/proc-securing-kafka.adoc", "diffHunk": "@@ -0,0 +1,91 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-securing-kafka.adoc\n+\n+[id='proc-securing-kafka-{context}']\n+= Securing Kafka brokers\n+\n+This procedure shows the steps involved in securing Kafka brokers when running Strimzi.\n+\n+The security implemented for Kafka brokers must be compatible with the security implemented for the clients requiring access.\n+\n+* `Kafka.spec.kafka.listeners.*.authentication` matches `KafkaUser.spec.authentication matches`\n+* `Kafka.spec.kafka.authorization` matches `KafkaUser.spec.authorization matches`\n+\n+The steps show the configuration for simple authorization and a listener using TLS authentication.\n+For more information about listener configuration, see the xref:type-KafkaListeners-reference[`KafkaListeners` schema reference].\n+\n+Alternatively, you can use SCRAM-SHA or OAuth 2.0 for xref:con-securing-kafka-authentication-{context}[listener authentication],\n+and OAuth 2.0 or OPA for xref:con-securing-kafka-authorization-{context}[Kafka authorization].\n+\n+.Procedure\n+\n+. Configure the `Kafka` resource.\n+.. Configure the `authorization` property for authorization.\n+.. Configure the `listeners` property to create a listener with authentication.\n++\n+For example:\n++\n+[source,yaml,subs=attributes+]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: Kafka\n+spec:\n+  kafka:\n+    # ...\n+    authorization: <1>\n+      type: simple\n+      superUsers: <2>\n+        - CN=client_1\n+        - user_2\n+        - CN=client_3\n+    listeners:\n+      tls:\n+        authentication:\n+          type: tls <3>\n+    # ...\n+  zookeeper:\n+    # ...\n+----\n+<1> Authorization xref:con-securing-kafka-authorization-str[enables `simple` authorization on the Kafka broker using the `SimpleAclAuthorizer` Kafka plugin].\n+<2> List of user principals with unlimited access to Kafka. _CN_ is the common name from the client certificate when TLS authentication is used.\n+<3> Listener authentication mechanisms may be configured for each listener, and xref:assembly-securing-kafka-brokers-{context}[specified as mutual TLS or SCRAM-SHA].\n++\n+If you are configuring an external listener, the configuration is dependent on the chosen connection mechanism.\n+\n+. Create or update the `Kafka` resource.\n++\n+[source,shell,subs=+quotes]\n+kubectl apply -f _KAFKA-CONFIG-FILE_\n++\n+The Kafka cluster is configured with a Kafka broker listener using TLS authentication.\n++\n+A service is created for each Kafka broker pod.\n++\n+A service is created to serve as the _bootstrap address_ for connection to the Kafka cluster.\n++\n+The cluster CA certificate to verify the identity of the kafka brokers is also created with the same name as the `Kafka` resource.\n+\n+== Retrieving Kafka connection details\n+\n+You can retrieve Kafka connection details and add them as connection properties to a Kafka client.\n+\n+. Find the bootstrap address and port from the status of the `Kafka` resource.\n++\n+[source,shell, subs=+quotes]\n+kubectl get kafka _KAFKA-CLUSTER-NAME_ -o jsonpath='{.status.listeners[?(@.type==\"external\")].bootstrapServers}'\n++\n+Use the bootstrap address in your Kafka client to connect to the Kafka cluster.\n+\n+. Extract the public cluster CA certificate and password from the generated `_KAFKA-CLUSTER-NAME_-cluster-ca-cert` Secret.\n++\n+[source,shell,subs=\"+quotes\"]\n+kubectl get secret _KAFKA-CLUSTER-NAME_-cluster-ca-cert -o jsonpath='{.data.ca\\.p12}' | base64 -d > ca.p12\n++\n+[source,shell,subs=\"+quotes\"]\n+kubectl get secret _KAFKA-CLUSTER-NAME_-cluster-ca-cert -o jsonpath='{.data.ca\\.password}' | base64 -d > ca.password\n++\n+Use the certificate and password in your Kafka client to connect to the Kafka cluster with TLS encryption.\n++\n+NOTE: Cluster CA certificates renew automatically by default. If your are using your own Kafka listener certificates,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cec43fbfb16aee8706871b1879fedc2c40059689"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE3NjQ2MQ==", "bodyText": "Removed.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r469176461", "createdAt": "2020-08-12T10:58:38Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/proc-securing-kafka.adoc", "diffHunk": "@@ -0,0 +1,91 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-securing-kafka.adoc\n+\n+[id='proc-securing-kafka-{context}']\n+= Securing Kafka brokers\n+\n+This procedure shows the steps involved in securing Kafka brokers when running Strimzi.\n+\n+The security implemented for Kafka brokers must be compatible with the security implemented for the clients requiring access.\n+\n+* `Kafka.spec.kafka.listeners.*.authentication` matches `KafkaUser.spec.authentication matches`\n+* `Kafka.spec.kafka.authorization` matches `KafkaUser.spec.authorization matches`\n+\n+The steps show the configuration for simple authorization and a listener using TLS authentication.\n+For more information about listener configuration, see the xref:type-KafkaListeners-reference[`KafkaListeners` schema reference].\n+\n+Alternatively, you can use SCRAM-SHA or OAuth 2.0 for xref:con-securing-kafka-authentication-{context}[listener authentication],\n+and OAuth 2.0 or OPA for xref:con-securing-kafka-authorization-{context}[Kafka authorization].\n+\n+.Procedure\n+\n+. Configure the `Kafka` resource.\n+.. Configure the `authorization` property for authorization.\n+.. Configure the `listeners` property to create a listener with authentication.\n++\n+For example:\n++\n+[source,yaml,subs=attributes+]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: Kafka\n+spec:\n+  kafka:\n+    # ...\n+    authorization: <1>\n+      type: simple\n+      superUsers: <2>\n+        - CN=client_1\n+        - user_2\n+        - CN=client_3\n+    listeners:\n+      tls:\n+        authentication:\n+          type: tls <3>\n+    # ...\n+  zookeeper:\n+    # ...\n+----\n+<1> Authorization xref:con-securing-kafka-authorization-str[enables `simple` authorization on the Kafka broker using the `SimpleAclAuthorizer` Kafka plugin].\n+<2> List of user principals with unlimited access to Kafka. _CN_ is the common name from the client certificate when TLS authentication is used.\n+<3> Listener authentication mechanisms may be configured for each listener, and xref:assembly-securing-kafka-brokers-{context}[specified as mutual TLS or SCRAM-SHA].\n++\n+If you are configuring an external listener, the configuration is dependent on the chosen connection mechanism.\n+\n+. Create or update the `Kafka` resource.\n++\n+[source,shell,subs=+quotes]\n+kubectl apply -f _KAFKA-CONFIG-FILE_\n++\n+The Kafka cluster is configured with a Kafka broker listener using TLS authentication.\n++\n+A service is created for each Kafka broker pod.\n++\n+A service is created to serve as the _bootstrap address_ for connection to the Kafka cluster.\n++\n+The cluster CA certificate to verify the identity of the kafka brokers is also created with the same name as the `Kafka` resource.\n+\n+== Retrieving Kafka connection details\n+\n+You can retrieve Kafka connection details and add them as connection properties to a Kafka client.\n+\n+. Find the bootstrap address and port from the status of the `Kafka` resource.\n++\n+[source,shell, subs=+quotes]\n+kubectl get kafka _KAFKA-CLUSTER-NAME_ -o jsonpath='{.status.listeners[?(@.type==\"external\")].bootstrapServers}'\n++\n+Use the bootstrap address in your Kafka client to connect to the Kafka cluster.\n+\n+. Extract the public cluster CA certificate and password from the generated `_KAFKA-CLUSTER-NAME_-cluster-ca-cert` Secret.\n++\n+[source,shell,subs=\"+quotes\"]\n+kubectl get secret _KAFKA-CLUSTER-NAME_-cluster-ca-cert -o jsonpath='{.data.ca\\.p12}' | base64 -d > ca.p12\n++\n+[source,shell,subs=\"+quotes\"]\n+kubectl get secret _KAFKA-CLUSTER-NAME_-cluster-ca-cert -o jsonpath='{.data.ca\\.password}' | base64 -d > ca.password\n++\n+Use the certificate and password in your Kafka client to connect to the Kafka cluster with TLS encryption.\n++\n+NOTE: Cluster CA certificates renew automatically by default. If your are using your own Kafka listener certificates,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg0OTcwMg=="}, "originalCommit": {"oid": "cec43fbfb16aee8706871b1879fedc2c40059689"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTQ0MTc3OnYy", "diffSide": "RIGHT", "path": "documentation/modules/proc-configuring-kafka-user.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDozODozMlrOG_IYFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDozODozMlrOG_IYFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg1MDcxMQ==", "bodyText": "This seems a bit out of place. I think we should replace it with something generic such as:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If you are using SCRAM-SHA authentication, you need a running Kafka cluster xref:con-scram-sha-authentication-{context}[configured with a Kafka broker listener using SCRAM-SHA authentication].\n          \n          \n            \n            The authentication type in `KafkaUser` should match the authentication configured in `Kafka` brokers.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r468850711", "createdAt": "2020-08-11T20:38:32Z", "author": {"login": "scholzj"}, "path": "documentation/modules/proc-configuring-kafka-user.adoc", "diffHunk": "@@ -22,23 +22,24 @@ When you configure the `KafkaUser` authentication and authorization mechanisms,\n This procedure shows how a user is created with TLS authentication.\n You can also create a user with SCRAM-SHA authentication.\n \n-The authentication required depends on the xref:assembly-kafka-broker-listener-authentication-deployment-configuration-kafka[type of authentication configured for the Kafka broker listener].\n+The authentication required depends on the xref:con-securing-kafka-authentication-{context}[type of authentication configured for the Kafka broker listener].\n \n NOTE: Authentication between Kafka users and Kafka brokers depends on the authentication settings for each.\n For example, it is not possible to authenticate a user with TLS if it is not also enabled in the Kafka configuration.\n \n .Prerequisites\n \n-* A running Kafka cluster xref:con-mutual-tls-authentication-deployment-configuration-kafka[configured with a Kafka broker listener using TLS authentication and encryption].\n+* A running Kafka cluster xref:con-mutual-tls-authentication-{context}[configured with a Kafka broker listener using TLS authentication and encryption].\n * A running User Operator (typically xref:assembly-kafka-entity-operator-deployment-configuration-kafka[deployed with the Entity Operator]).\n \n-If you are using SCRAM-SHA authentication, you need a running Kafka cluster xref:con-scram-sha-authentication-deployment-configuration-kafka[configured with a Kafka broker listener using SCRAM-SHA authentication].\n+If you are using SCRAM-SHA authentication, you need a running Kafka cluster xref:con-scram-sha-authentication-{context}[configured with a Kafka broker listener using SCRAM-SHA authentication].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cec43fbfb16aee8706871b1879fedc2c40059689"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzg0NjU5OnYy", "diffSide": "RIGHT", "path": "documentation/assemblies/oauth/assembly-oauth-authentication.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMDo0NzozN1rOG_yR8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMDo0NzozN1rOG_yR8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUzNzI2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            OAuth 2.0 authentication can also be used in conjunction with ACL or OPA-based xref:con-securing-kafka-authorization-str[Kafka authorization].\n          \n          \n            \n            OAuth 2.0 authentication can also be used in conjunction with `simple` or OPA-based xref:con-securing-kafka-authorization-str[Kafka authorization].", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r469537266", "createdAt": "2020-08-12T20:47:37Z", "author": {"login": "scholzj"}, "path": "documentation/assemblies/oauth/assembly-oauth-authentication.adoc", "diffHunk": "@@ -10,7 +10,8 @@ Strimzi supports the use of OAuth 2.0 authentication using the _SASL OAUTHBEARER\n OAuth 2.0 enables standardized token-based authentication and authorization between applications, using a central authorization server to issue tokens that grant limited access to resources.\n \n You can configure OAuth 2.0 authentication, then xref:assembly-oauth-authorization_{context}[OAuth 2.0 authorization].\n-OAuth 2.0 authentication can also be used in conjunction with xref:simple-acl-{context}[ACL-based Kafka authorization].\n+\n+OAuth 2.0 authentication can also be used in conjunction with ACL or OPA-based xref:con-securing-kafka-authorization-str[Kafka authorization].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00d63cee35e96f5e576fd4212fd9aefb9ad5a071"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjYyMDQ3OnYy", "diffSide": "RIGHT", "path": "documentation/api/io.strimzi.api.kafka.model.AclRule.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzoxOTowM1rOHG_Aww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOToxNTo0OVrOHHDUow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA4NTg5MQ==", "bodyText": "The type name is AclRule. But it would be better to avoid using the type name at all because from the point of view of someone wanting the write valid YAML the type name is irrelevant, it's the structure that counts. This point seems to apply to all the description files in this PR.\nFor this specific example:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Use `ACLRule` properties to configure simple authorization for a `KafkaUser`.\n          \n          \n            \n            Configures a access control rule for a `KafkaUser` when brokers are using the `AclAuthorizer`.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r477085891", "createdAt": "2020-08-26T07:19:03Z", "author": {"login": "tombentley"}, "path": "documentation/api/io.strimzi.api.kafka.model.AclRule.adoc", "diffHunk": "@@ -0,0 +1,93 @@\n+Use `ACLRule` properties to configure simple authorization for a `KafkaUser`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c5d1f826fbc30beca18dbd1d8c675b3d4ce29ea"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE1NjUxNQ==", "bodyText": "Configures access control rules for a KafkaUser when brokers are using the AclAuthorizer.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r477156515", "createdAt": "2020-08-26T09:15:49Z", "author": {"login": "PaulRMellor"}, "path": "documentation/api/io.strimzi.api.kafka.model.AclRule.adoc", "diffHunk": "@@ -0,0 +1,93 @@\n+Use `ACLRule` properties to configure simple authorization for a `KafkaUser`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA4NTg5MQ=="}, "originalCommit": {"oid": "1c5d1f826fbc30beca18dbd1d8c675b3d4ce29ea"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjYzMDc1OnYy", "diffSide": "RIGHT", "path": "documentation/api/io.strimzi.api.kafka.model.KafkaClusterSpec.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzoyMjowNFrOHG_G3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzoyMjowNFrOHG_G3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA4NzQ1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Use `KafkaClusterSpec` properties to configure Kafka clusters.\n          \n          \n            \n            Configures a Kafka cluster.\n          \n      \n    \n    \n  \n\nor\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Use `KafkaClusterSpec` properties to configure Kafka clusters.\n          \n          \n            \n            The configuration of a Kafka cluster.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r477087454", "createdAt": "2020-08-26T07:22:04Z", "author": {"login": "tombentley"}, "path": "documentation/api/io.strimzi.api.kafka.model.KafkaClusterSpec.adoc", "diffHunk": "@@ -1,11 +1,30 @@\n-// Module included in the following assemblies:\n-//\n-// assembly-kafka-broker-configuration.adoc\n+Use `KafkaClusterSpec` properties to configure Kafka clusters.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c5d1f826fbc30beca18dbd1d8c675b3d4ce29ea"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjYzNDAxOnYy", "diffSide": "RIGHT", "path": "documentation/api/io.strimzi.api.kafka.model.KafkaAuthorizationSimple.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzoyMzowMlrOHG_I3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwODo0ODo1M1rOHHCR0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA4Nzk2Nw==", "bodyText": "Should we clarify that it's in the Kafka custom resource?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r477087967", "createdAt": "2020-08-26T07:23:02Z", "author": {"login": "ppatierno"}, "path": "documentation/api/io.strimzi.api.kafka.model.KafkaAuthorizationSimple.adoc", "diffHunk": "@@ -0,0 +1,27 @@\n+Simple authorization in Strimzi uses the `AclAuthorizer` plugin, the default Access Control Lists (ACLs) authorization plugin provided with Apache Kafka.\n+ACLs allow you to define which users have access to which resources at a granular level.\n+\n+To use simple authorization, set the `type` property in the `authorization` section to the value `simple`,\n+and configure super users.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c5d1f826fbc30beca18dbd1d8c675b3d4ce29ea"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEzOTQwOA==", "bodyText": "\ud83d\udc4d\n\nConfigure the Kafka custom resource to use simple authorization.\nSet the type property in the authorization section to the value simple,\nand configure a list of super users.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r477139408", "createdAt": "2020-08-26T08:48:53Z", "author": {"login": "PaulRMellor"}, "path": "documentation/api/io.strimzi.api.kafka.model.KafkaAuthorizationSimple.adoc", "diffHunk": "@@ -0,0 +1,27 @@\n+Simple authorization in Strimzi uses the `AclAuthorizer` plugin, the default Access Control Lists (ACLs) authorization plugin provided with Apache Kafka.\n+ACLs allow you to define which users have access to which resources at a granular level.\n+\n+To use simple authorization, set the `type` property in the `authorization` section to the value `simple`,\n+and configure super users.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA4Nzk2Nw=="}, "originalCommit": {"oid": "1c5d1f826fbc30beca18dbd1d8c675b3d4ce29ea"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjY1NDkzOnYy", "diffSide": "RIGHT", "path": "documentation/api/io.strimzi.api.kafka.model.listener.KafkaListeners.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzoyOTowMFrOHG_Vlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzoyOTowMFrOHG_Vlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5MTIyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            .An example of `listeners` property with all listeners enabled\n          \n          \n            \n            .An example of `listeners` property with all listeners enabled, each using their default configuration", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r477091222", "createdAt": "2020-08-26T07:29:00Z", "author": {"login": "tombentley"}, "path": "documentation/api/io.strimzi.api.kafka.model.listener.KafkaListeners.adoc", "diffHunk": "@@ -0,0 +1,40 @@\n+Use `KafkaListeners` properties to configure types of Kafka listener.\n+\n+[id='property-listeners-{context}']\n+.`listeners`\n+You configure Kafka broker listeners using the `listeners` property in the `Kafka.spec.kafka` resource.\n+The `listeners` property contains three sub-properties:\n+\n+* `plain`\n+* `tls`\n+* `external`\n+\n+Each listener will only be defined when the `listeners` object has the given property.\n+\n+.An example of `listeners` property with all listeners enabled", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c5d1f826fbc30beca18dbd1d8c675b3d4ce29ea"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjY1NjY4OnYy", "diffSide": "RIGHT", "path": "documentation/api/io.strimzi.api.kafka.model.listener.KafkaListeners.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzoyOToyOFrOHG_WnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOToyMzozMFrOHHDruA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5MTQ4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            .An example of `listeners` property with only the plain listener enabled\n          \n          \n            \n            .An example of `listeners` property with only the plain listener enabled and using its default configuration", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r477091484", "createdAt": "2020-08-26T07:29:28Z", "author": {"login": "tombentley"}, "path": "documentation/api/io.strimzi.api.kafka.model.listener.KafkaListeners.adoc", "diffHunk": "@@ -0,0 +1,40 @@\n+Use `KafkaListeners` properties to configure types of Kafka listener.\n+\n+[id='property-listeners-{context}']\n+.`listeners`\n+You configure Kafka broker listeners using the `listeners` property in the `Kafka.spec.kafka` resource.\n+The `listeners` property contains three sub-properties:\n+\n+* `plain`\n+* `tls`\n+* `external`\n+\n+Each listener will only be defined when the `listeners` object has the given property.\n+\n+.An example of `listeners` property with all listeners enabled\n+[source,yaml,subs=\"attributes+\"]\n+----\n+# ...\n+listeners:\n+  plain: {}\n+  tls: {}\n+  external:\n+    type: loadbalancer\n+# ...\n+----\n+\n+.An example of `listeners` property with only the plain listener enabled", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c5d1f826fbc30beca18dbd1d8c675b3d4ce29ea"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE2MjQyNA==", "bodyText": "Added a line above both examples:\n\nAn empty object ({}) means the default configuration is used.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r477162424", "createdAt": "2020-08-26T09:23:30Z", "author": {"login": "PaulRMellor"}, "path": "documentation/api/io.strimzi.api.kafka.model.listener.KafkaListeners.adoc", "diffHunk": "@@ -0,0 +1,40 @@\n+Use `KafkaListeners` properties to configure types of Kafka listener.\n+\n+[id='property-listeners-{context}']\n+.`listeners`\n+You configure Kafka broker listeners using the `listeners` property in the `Kafka.spec.kafka` resource.\n+The `listeners` property contains three sub-properties:\n+\n+* `plain`\n+* `tls`\n+* `external`\n+\n+Each listener will only be defined when the `listeners` object has the given property.\n+\n+.An example of `listeners` property with all listeners enabled\n+[source,yaml,subs=\"attributes+\"]\n+----\n+# ...\n+listeners:\n+  plain: {}\n+  tls: {}\n+  external:\n+    type: loadbalancer\n+# ...\n+----\n+\n+.An example of `listeners` property with only the plain listener enabled", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5MTQ4NA=="}, "originalCommit": {"oid": "1c5d1f826fbc30beca18dbd1d8c675b3d4ce29ea"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjY2MjMzOnYy", "diffSide": "RIGHT", "path": "documentation/api/io.strimzi.api.kafka.model.listener.NodePortListenerConfiguration.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzozMTowNFrOHG_aAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDoyNjoyMFrOHHF2qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5MjM1NQ==", "bodyText": "Can we link to where that standard order is defined?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r477092355", "createdAt": "2020-08-26T07:31:04Z", "author": {"login": "tombentley"}, "path": "documentation/api/io.strimzi.api.kafka.model.listener.NodePortListenerConfiguration.adoc", "diffHunk": "@@ -0,0 +1,30 @@\n+Use `NodePortListenerConfiguration` properties to add configuration to external node port listeners.\n+\n+[id='property-nodeport-listener-preferredAddressType-{context}']\n+.`preferredAddressType`\n+\n+Use the `preferredAddressType` property in your listener configuration to specify the first address type checked as the node address.\n+This property is useful, for example, if your deployment does not have DNS support, or you only want to expose a broker internally through an internal DNS or IP address.\n+If an address of this type is found, it is used.\n+If the preferred address type is not found, Strimzi proceeds through the types in the standard order of priority.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c5d1f826fbc30beca18dbd1d8c675b3d4ce29ea"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE5Nzk5NA==", "bodyText": "Strimzi proceeds through the types in the xref:nodeport-listener-{context}[standard order of priority].", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r477197994", "createdAt": "2020-08-26T10:26:20Z", "author": {"login": "PaulRMellor"}, "path": "documentation/api/io.strimzi.api.kafka.model.listener.NodePortListenerConfiguration.adoc", "diffHunk": "@@ -0,0 +1,30 @@\n+Use `NodePortListenerConfiguration` properties to add configuration to external node port listeners.\n+\n+[id='property-nodeport-listener-preferredAddressType-{context}']\n+.`preferredAddressType`\n+\n+Use the `preferredAddressType` property in your listener configuration to specify the first address type checked as the node address.\n+This property is useful, for example, if your deployment does not have DNS support, or you only want to expose a broker internally through an internal DNS or IP address.\n+If an address of this type is found, it is used.\n+If the preferred address type is not found, Strimzi proceeds through the types in the standard order of priority.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5MjM1NQ=="}, "originalCommit": {"oid": "1c5d1f826fbc30beca18dbd1d8c675b3d4ce29ea"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjY3ODkzOnYy", "diffSide": "RIGHT", "path": "documentation/modules/con-securing-client-authentication.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzozNjowNFrOHG_j9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDozMToxOVrOHHGAng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5NDkwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              password: Z2VuZXJhdGVkcGFzc3dvcmQ= # Generated password\n          \n          \n            \n              password: Z2VuZXJhdGVkcGFzc3dvcmQ= # The generated password, base64 encoded", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r477094900", "createdAt": "2020-08-26T07:36:04Z", "author": {"login": "tombentley"}, "path": "documentation/modules/con-securing-client-authentication.adoc", "diffHunk": "@@ -0,0 +1,111 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-securing-kafka-clients.adoc\n+\n+[id='con-securing-client-authentication-{context}']\n+= User authentication\n+\n+User authentication is configured using the `authentication` property in `KafkaUser.spec`.\n+The authentication mechanism enabled for the user is specified using the `type` field.\n+\n+Supported authentication mechanisms:\n+\n+* TLS client authentication\n+* SCRAM-SHA-512 authentication\n+\n+When no authentication mechanism is specified, the User Operator does not create the user or its credentials.\n+\n+.Additional resources\n+\n+* xref:con-securing-kafka-authentication-{context}[When to use mutual TLS authentication or SCRAM-SHA Authentication authentication for clients]\n+\n+== TLS Client Authentication\n+\n+To use TLS client authentication, you set the `type` field to `tls`.\n+\n+.An example `KafkaUser` with TLS client authentication enabled\n+[source,yaml,subs=\"attributes+\"]\n+----\n+apiVersion: {KafkaUserApiVersion}\n+kind: KafkaUser\n+metadata:\n+  name: my-user\n+  labels:\n+    strimzi.io/cluster: my-cluster\n+spec:\n+  authentication:\n+    type: tls\n+  # ...\n+----\n+\n+When the user is created by the User Operator, it creates a new Secret with the same name as the `KafkaUser` resource.\n+The Secret contains a private and public key for TLS client authentication.\n+The public key is contained in a user certificate, which is signed by the client Certificate Authority (CA).\n+\n+All keys are in X.509 format.\n+\n+Secrets provide private keys and certificates in PEM and PKCS #12 formats.\n+\n+For more information on securing Kafka communication with Secrets, see xref:security-{context}[].\n+\n+.An example `Secret` with user credentials\n+[source,yaml,subs=\"attributes+\"]\n+----\n+apiVersion: v1\n+kind: Secret\n+metadata:\n+  name: my-user\n+  labels:\n+    strimzi.io/kind: KafkaUser\n+    strimzi.io/cluster: my-cluster\n+type: Opaque\n+data:\n+  ca.crt: # Public key of the client CA\n+  user.crt: # User certificate that contains the public key of the user\n+  user.key: # Private key of the user\n+  user.p12: # PKCS #12 archive file for storing certificates and keys\n+  user.password: # Password for protecting the PKCS #12 archive file\n+----\n+\n+== SCRAM-SHA-512 Authentication\n+\n+To use the SCRAM-SHA-512 authentication mechanism, you set the `type` field to `scram-sha-512`.\n+\n+.An example `KafkaUser` with SCRAM-SHA-512 authentication enabled\n+[source,yaml,subs=\"attributes+\"]\n+----\n+apiVersion: {KafkaUserApiVersion}\n+kind: KafkaUser\n+metadata:\n+  name: my-user\n+  labels:\n+    strimzi.io/cluster: my-cluster\n+spec:\n+  authentication:\n+    type: scram-sha-512\n+  # ...\n+----\n+\n+When the user is created by the User Operator, it creates a new secret with the same name as the `KafkaUser` resource.\n+The secret contains the generated password in the `password` key, which is encoded with base64.\n+In order to use the password, it must be decoded.\n+\n+.An example `Secret` with user credentials\n+[source,yaml,subs=\"attributes+\"]\n+----\n+apiVersion: v1\n+kind: Secret\n+metadata:\n+  name: my-user\n+  labels:\n+    strimzi.io/kind: KafkaUser\n+    strimzi.io/cluster: my-cluster\n+type: Opaque\n+data:\n+  password: Z2VuZXJhdGVkcGFzc3dvcmQ= # Generated password", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c5d1f826fbc30beca18dbd1d8c675b3d4ce29ea"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIwMDU0Mg==", "bodyText": "Made into a callout\ndata:\npassword: Z2VuZXJhdGVkcGFzc3dvcmQ= <1>\n ----\n\n\n<1> The generated password, base64 encoded.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r477200542", "createdAt": "2020-08-26T10:31:19Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/con-securing-client-authentication.adoc", "diffHunk": "@@ -0,0 +1,111 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-securing-kafka-clients.adoc\n+\n+[id='con-securing-client-authentication-{context}']\n+= User authentication\n+\n+User authentication is configured using the `authentication` property in `KafkaUser.spec`.\n+The authentication mechanism enabled for the user is specified using the `type` field.\n+\n+Supported authentication mechanisms:\n+\n+* TLS client authentication\n+* SCRAM-SHA-512 authentication\n+\n+When no authentication mechanism is specified, the User Operator does not create the user or its credentials.\n+\n+.Additional resources\n+\n+* xref:con-securing-kafka-authentication-{context}[When to use mutual TLS authentication or SCRAM-SHA Authentication authentication for clients]\n+\n+== TLS Client Authentication\n+\n+To use TLS client authentication, you set the `type` field to `tls`.\n+\n+.An example `KafkaUser` with TLS client authentication enabled\n+[source,yaml,subs=\"attributes+\"]\n+----\n+apiVersion: {KafkaUserApiVersion}\n+kind: KafkaUser\n+metadata:\n+  name: my-user\n+  labels:\n+    strimzi.io/cluster: my-cluster\n+spec:\n+  authentication:\n+    type: tls\n+  # ...\n+----\n+\n+When the user is created by the User Operator, it creates a new Secret with the same name as the `KafkaUser` resource.\n+The Secret contains a private and public key for TLS client authentication.\n+The public key is contained in a user certificate, which is signed by the client Certificate Authority (CA).\n+\n+All keys are in X.509 format.\n+\n+Secrets provide private keys and certificates in PEM and PKCS #12 formats.\n+\n+For more information on securing Kafka communication with Secrets, see xref:security-{context}[].\n+\n+.An example `Secret` with user credentials\n+[source,yaml,subs=\"attributes+\"]\n+----\n+apiVersion: v1\n+kind: Secret\n+metadata:\n+  name: my-user\n+  labels:\n+    strimzi.io/kind: KafkaUser\n+    strimzi.io/cluster: my-cluster\n+type: Opaque\n+data:\n+  ca.crt: # Public key of the client CA\n+  user.crt: # User certificate that contains the public key of the user\n+  user.key: # Private key of the user\n+  user.p12: # PKCS #12 archive file for storing certificates and keys\n+  user.password: # Password for protecting the PKCS #12 archive file\n+----\n+\n+== SCRAM-SHA-512 Authentication\n+\n+To use the SCRAM-SHA-512 authentication mechanism, you set the `type` field to `scram-sha-512`.\n+\n+.An example `KafkaUser` with SCRAM-SHA-512 authentication enabled\n+[source,yaml,subs=\"attributes+\"]\n+----\n+apiVersion: {KafkaUserApiVersion}\n+kind: KafkaUser\n+metadata:\n+  name: my-user\n+  labels:\n+    strimzi.io/cluster: my-cluster\n+spec:\n+  authentication:\n+    type: scram-sha-512\n+  # ...\n+----\n+\n+When the user is created by the User Operator, it creates a new secret with the same name as the `KafkaUser` resource.\n+The secret contains the generated password in the `password` key, which is encoded with base64.\n+In order to use the password, it must be decoded.\n+\n+.An example `Secret` with user credentials\n+[source,yaml,subs=\"attributes+\"]\n+----\n+apiVersion: v1\n+kind: Secret\n+metadata:\n+  name: my-user\n+  labels:\n+    strimzi.io/kind: KafkaUser\n+    strimzi.io/cluster: my-cluster\n+type: Opaque\n+data:\n+  password: Z2VuZXJhdGVkcGFzc3dvcmQ= # Generated password", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5NDkwMA=="}, "originalCommit": {"oid": "1c5d1f826fbc30beca18dbd1d8c675b3d4ce29ea"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjY4Njc2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/con-securing-client-authorization.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzozODoxNFrOHG_onA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzozODoxNFrOHG_onA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5NjA5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To use simple authorization, you set the `type` property to `simple` in `KafkaUser.spec`.\n          \n          \n            \n            To use simple authorization, you set the `type` property to `simple` in `KafkaUser.spec.authroization`.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r477096092", "createdAt": "2020-08-26T07:38:14Z", "author": {"login": "tombentley"}, "path": "documentation/modules/con-securing-client-authorization.adoc", "diffHunk": "@@ -0,0 +1,59 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-securing-kafka-clients.adoc\n+\n+[id='con-securing-client-authorization-{context}']\n+= User authorization\n+\n+User authorization is configured using the `authorization` property in `KafkaUser.spec`.\n+The authorization type enabled for a user is specified using the `type` field.\n+\n+If no authorization is specified, the User Operator does not provision any access rights for the user.\n+\n+To use simple authorization, you set the `type` property to `simple` in `KafkaUser.spec`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c5d1f826fbc30beca18dbd1d8c675b3d4ce29ea"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjY5ODU2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/con-securing-client-authorization.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzo0MTozNVrOHG_v_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDozNTowNlrOHHGIKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5Nzk4Mw==", "bodyText": "I feel we need to be explicit about whether  such users get access or not. And that depends on the authoriser. Not completely sure about this suggestion because it brings in the AclAuthoriser before it's really been discussed:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If no authorization is specified, the User Operator does not provision any access rights for the user.\n          \n          \n            \n            If no authorization is specified, the User Operator does not provision any access rights for the user.\n          \n          \n            \n            Whether such a `KafkaUser` can access resources depends on the authorizer being used. For example, for the `AclAuthorizer` this is determined by its `allow.everyone.if.no.acl.found` configuration.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r477097983", "createdAt": "2020-08-26T07:41:35Z", "author": {"login": "tombentley"}, "path": "documentation/modules/con-securing-client-authorization.adoc", "diffHunk": "@@ -0,0 +1,59 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-securing-kafka-clients.adoc\n+\n+[id='con-securing-client-authorization-{context}']\n+= User authorization\n+\n+User authorization is configured using the `authorization` property in `KafkaUser.spec`.\n+The authorization type enabled for a user is specified using the `type` field.\n+\n+If no authorization is specified, the User Operator does not provision any access rights for the user.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c5d1f826fbc30beca18dbd1d8c675b3d4ce29ea"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIwMjQ3Mg==", "bodyText": "I've moved it to the bottom of the section, so we've already introduced the options for specifying authorization.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3447#discussion_r477202472", "createdAt": "2020-08-26T10:35:06Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/con-securing-client-authorization.adoc", "diffHunk": "@@ -0,0 +1,59 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-securing-kafka-clients.adoc\n+\n+[id='con-securing-client-authorization-{context}']\n+= User authorization\n+\n+User authorization is configured using the `authorization` property in `KafkaUser.spec`.\n+The authorization type enabled for a user is specified using the `type` field.\n+\n+If no authorization is specified, the User Operator does not provision any access rights for the user.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5Nzk4Mw=="}, "originalCommit": {"oid": "1c5d1f826fbc30beca18dbd1d8c675b3d4ce29ea"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1246, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}