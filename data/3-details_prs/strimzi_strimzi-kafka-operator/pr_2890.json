{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4NjEzOTY3", "number": 2890, "title": "[systemtest] Make wait for CR status methods more generic way", "bodyText": "Type of change\n\nEnhancement / new feature\nRefactoring\n\nDescription\nThis PR gonna add generic method waitForStatus to ResourceManager and also move there logCurrentStatus method from StUtils. By this we will make code cleaner and more readable.\nAlso editing all methods waitFor*Status in utils to use this generic method.\nChecklist\n\n Make sure all tests pass", "createdAt": "2020-04-24T15:20:32Z", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890", "merged": true, "mergeCommit": {"oid": "0c7e423ea6e181345671cb4d91edc8d01b9797dc"}, "closed": true, "closedAt": "2020-05-01T21:02:18Z", "author": {"login": "im-konge"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABca0XacgFqTQwMDA2Mzc2OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABccscmAgFqTQwMzQ4MTQ0NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMDYzNzY4", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#pullrequestreview-400063768", "createdAt": "2020-04-24T15:45:49Z", "commit": {"oid": "a665fe87cddbfd2c32fe3aa9309972df2ab8985e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNTo0NTo0OVrOGLd4qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNjo0ODozNlrOGLgYzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY3NzE2MQ==", "bodyText": "I think here you can use something like KafkaConnect.RESOURCE_KIND etc.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r414677161", "createdAt": "2020-04-24T15:45:49Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/ResourceManager.java", "diffHunk": "@@ -358,6 +363,51 @@ public static String getImageValueFromCO(String name) {\n         }\n         return \"\";\n     }\n+    /**\n+     * Log actual status of custom resource with pods.\n+     * @param customResource - Kafka, KafkaConnect etc. - every resource that HasMetadata and HasStatus (Strimzi status)\n+     */\n+    public static <T extends HasMetadata & HasStatus> void logCurrentStatus(T customResource) {\n+        String kind = customResource.getKind();\n+        String name = customResource.getMetadata().getName();\n+\n+        List<String> log = new ArrayList<>(asList(\"\\n\", kind, \" status:\\n\", \"\\nConditions:\\n\"));\n+\n+        for (Condition condition : customResource.getStatus().getConditions()) {\n+            log.add(\"\\tType: \" + condition.getType() + \"\\n\");\n+            log.add(\"\\tMessage: \" + condition.getMessage() + \"\\n\");\n+        }\n+\n+        PodUtils.logCurrentPodStatus(name, log);\n+    }\n+\n+    /**\n+     * Wait until the CR is in desired state\n+     * @param operation - client of CR - for example kafkaClient()\n+     * @param resource - custom resource\n+     * @param status - desired status\n+     * @return returns CR\n+     */\n+    public static <T extends HasMetadata & HasStatus> T waitForStatus(MixedOperation<T, ?, ?, ?> operation, T resource, String status) {\n+        List<String> printWholeCr = new ArrayList<>(asList(\"KafkaConnector\", \"KafkaTopic\", \"KafkaUser\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a665fe87cddbfd2c32fe3aa9309972df2ab8985e"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY3ODQ2MA==", "bodyText": "Wouldn't it be better to decide that in logCurrentStatus ?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r414678460", "createdAt": "2020-04-24T15:47:32Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/ResourceManager.java", "diffHunk": "@@ -358,6 +363,51 @@ public static String getImageValueFromCO(String name) {\n         }\n         return \"\";\n     }\n+    /**\n+     * Log actual status of custom resource with pods.\n+     * @param customResource - Kafka, KafkaConnect etc. - every resource that HasMetadata and HasStatus (Strimzi status)\n+     */\n+    public static <T extends HasMetadata & HasStatus> void logCurrentStatus(T customResource) {\n+        String kind = customResource.getKind();\n+        String name = customResource.getMetadata().getName();\n+\n+        List<String> log = new ArrayList<>(asList(\"\\n\", kind, \" status:\\n\", \"\\nConditions:\\n\"));\n+\n+        for (Condition condition : customResource.getStatus().getConditions()) {\n+            log.add(\"\\tType: \" + condition.getType() + \"\\n\");\n+            log.add(\"\\tMessage: \" + condition.getMessage() + \"\\n\");\n+        }\n+\n+        PodUtils.logCurrentPodStatus(name, log);\n+    }\n+\n+    /**\n+     * Wait until the CR is in desired state\n+     * @param operation - client of CR - for example kafkaClient()\n+     * @param resource - custom resource\n+     * @param status - desired status\n+     * @return returns CR\n+     */\n+    public static <T extends HasMetadata & HasStatus> T waitForStatus(MixedOperation<T, ?, ?, ?> operation, T resource, String status) {\n+        List<String> printWholeCr = new ArrayList<>(asList(\"KafkaConnector\", \"KafkaTopic\", \"KafkaUser\"));\n+\n+        TestUtils.waitFor(\"Wait for {}\" + resource.getKind() + \":{} \" + resource.getMetadata().getName() + \"will have desired state {}\" + status,\n+            Constants.POLL_INTERVAL_FOR_RESOURCE_READINESS, Constants.TIMEOUT_FOR_RESOURCE_READINESS,\n+            () -> operation.inNamespace(resource.getMetadata().getNamespace())\n+            .withName(resource.getMetadata().getName())\n+            .get().getStatus().getConditions().stream().anyMatch(condition -> condition.getType().equals(status)),\n+            () -> {\n+                if (printWholeCr.contains(resource.getKind())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a665fe87cddbfd2c32fe3aa9309972df2ab8985e"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY3OTUxOQ==", "bodyText": "waitForResourceStatus is better name from my POV", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r414679519", "createdAt": "2020-04-24T15:49:01Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/ResourceManager.java", "diffHunk": "@@ -358,6 +363,51 @@ public static String getImageValueFromCO(String name) {\n         }\n         return \"\";\n     }\n+    /**\n+     * Log actual status of custom resource with pods.\n+     * @param customResource - Kafka, KafkaConnect etc. - every resource that HasMetadata and HasStatus (Strimzi status)\n+     */\n+    public static <T extends HasMetadata & HasStatus> void logCurrentStatus(T customResource) {\n+        String kind = customResource.getKind();\n+        String name = customResource.getMetadata().getName();\n+\n+        List<String> log = new ArrayList<>(asList(\"\\n\", kind, \" status:\\n\", \"\\nConditions:\\n\"));\n+\n+        for (Condition condition : customResource.getStatus().getConditions()) {\n+            log.add(\"\\tType: \" + condition.getType() + \"\\n\");\n+            log.add(\"\\tMessage: \" + condition.getMessage() + \"\\n\");\n+        }\n+\n+        PodUtils.logCurrentPodStatus(name, log);\n+    }\n+\n+    /**\n+     * Wait until the CR is in desired state\n+     * @param operation - client of CR - for example kafkaClient()\n+     * @param resource - custom resource\n+     * @param status - desired status\n+     * @return returns CR\n+     */\n+    public static <T extends HasMetadata & HasStatus> T waitForStatus(MixedOperation<T, ?, ?, ?> operation, T resource, String status) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a665fe87cddbfd2c32fe3aa9309972df2ab8985e"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY4MDYyMA==", "bodyText": "Why did you rename it? Now it's not consistent with other resources", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r414680620", "createdAt": "2020-04-24T15:50:39Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaTopicResource.java", "diffHunk": "@@ -64,7 +63,7 @@ static DoneableKafkaTopic topic(KafkaTopic topic) {\n         return new DoneableKafkaTopic(topic, kt -> {\n             kafkaTopicClient().inNamespace(topic.getMetadata().getNamespace()).createOrReplace(kt);\n             LOGGER.info(\"Created KafkaTopic {}\", kt.getMetadata().getName());\n-            return waitFor(deleteLater(kt));\n+            return waitForStatus(deleteLater(kt));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a665fe87cddbfd2c32fe3aa9309972df2ab8985e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY4MTMwNA==", "bodyText": "Do we really need it? I think CO do this check as well, or maybe we should check it when KafkaUser is rdy", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r414681304", "createdAt": "2020-04-24T15:51:36Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaUserResource.java", "diffHunk": "@@ -68,13 +70,10 @@ public static KafkaUser kafkaUserWithoutWait(KafkaUser user) {\n     }\n \n     private static KafkaUser waitFor(KafkaUser kafkaUser) {\n-        String kafkaUserCrName = kafkaUser.getMetadata().getName();\n-\n-        LOGGER.info(\"Waiting for KafkaUser {}\", kafkaUserCrName);\n-        KafkaUserUtils.waitForKafkaUserCreation(kafkaUserCrName);\n-        LOGGER.info(\"KafkaUser {} is ready\", kafkaUserCrName);\n-\n-        return kafkaUser;\n+        SecretUtils.waitForSecretReady(kafkaUser.getMetadata().getName(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a665fe87cddbfd2c32fe3aa9309972df2ab8985e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY4MjcyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ResourceManager.waitForStatus(kafkaBridgeClient(), kafkaBridge, state);\n          \n          \n            \n                    ResourceManager.waitForStatus(KafkaBridgeResource.kafkaBridgeClient(), kafkaBridge, state);\n          \n      \n    \n    \n  \n\nCould you please use this syntax? Or is there any specific reason for this way?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r414682724", "createdAt": "2020-04-24T15:53:33Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaBridgeUtils.java", "diffHunk": "@@ -65,10 +66,7 @@ public static void checkSendResponse(JsonObject response, int messageCount) {\n     }\n \n     public static void waitUntilKafkaBridgeStatus(String clusterName, String state) {\n-        LOGGER.info(\"Wait until KafkaBridge {} will be in state: {}\", clusterName, state);\n-        TestUtils.waitFor(\"Waiting for Kafka resource status is: \" + state, Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n-            () -> KafkaBridgeResource.kafkaBridgeClient().inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0).getType().equals(state)\n-        );\n-        LOGGER.info(\"KafkaBridge {}} is in state: {}\", clusterName, state);\n+        KafkaBridge kafkaBridge = kafkaBridgeClient().inNamespace(kubeClient().getNamespace()).withName(clusterName).get();\n+        ResourceManager.waitForStatus(kafkaBridgeClient(), kafkaBridge, state);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a665fe87cddbfd2c32fe3aa9309972df2ab8985e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY4MzAxOA==", "bodyText": "Same as above", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r414683018", "createdAt": "2020-04-24T15:53:57Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaConnectS2IUtils.java", "diffHunk": "@@ -25,12 +26,8 @@ private KafkaConnectS2IUtils() {}\n      * @param status desired status value\n      */\n     public static void waitForConnectS2IStatus(String name, String status) {\n-        LOGGER.info(\"Wait until KafkaConnectS2I {} will be in state: {}\", name, status);\n-        TestUtils.waitFor(\"KafkaConnectS2I \" + name + \" state: \" + status, Constants.POLL_INTERVAL_FOR_RESOURCE_READINESS, Constants.TIMEOUT_FOR_RESOURCE_READINESS,\n-            () -> KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(kubeClient().getNamespace())\n-                    .withName(name).get().getStatus().getConditions().get(0).getType().equals(status),\n-            () -> StUtils.logCurrentStatus(KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(kubeClient().getNamespace()).withName(name).get()));\n-        LOGGER.info(\"KafkaConnectS2I {} is in desired state: {}\", name, status);\n+        KafkaConnectS2I kafkaConnectS2I = kafkaConnectS2IClient().inNamespace(kubeClient().getNamespace()).withName(name).get();\n+        ResourceManager.waitForStatus(kafkaConnectS2IClient(), kafkaConnectS2I, status);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a665fe87cddbfd2c32fe3aa9309972df2ab8985e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY4MzUyNg==", "bodyText": "Indent. Are you sure it will take proper condition? In Kafka case for example.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r414683526", "createdAt": "2020-04-24T15:54:43Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/ResourceManager.java", "diffHunk": "@@ -358,6 +363,51 @@ public static String getImageValueFromCO(String name) {\n         }\n         return \"\";\n     }\n+    /**\n+     * Log actual status of custom resource with pods.\n+     * @param customResource - Kafka, KafkaConnect etc. - every resource that HasMetadata and HasStatus (Strimzi status)\n+     */\n+    public static <T extends HasMetadata & HasStatus> void logCurrentStatus(T customResource) {\n+        String kind = customResource.getKind();\n+        String name = customResource.getMetadata().getName();\n+\n+        List<String> log = new ArrayList<>(asList(\"\\n\", kind, \" status:\\n\", \"\\nConditions:\\n\"));\n+\n+        for (Condition condition : customResource.getStatus().getConditions()) {\n+            log.add(\"\\tType: \" + condition.getType() + \"\\n\");\n+            log.add(\"\\tMessage: \" + condition.getMessage() + \"\\n\");\n+        }\n+\n+        PodUtils.logCurrentPodStatus(name, log);\n+    }\n+\n+    /**\n+     * Wait until the CR is in desired state\n+     * @param operation - client of CR - for example kafkaClient()\n+     * @param resource - custom resource\n+     * @param status - desired status\n+     * @return returns CR\n+     */\n+    public static <T extends HasMetadata & HasStatus> T waitForStatus(MixedOperation<T, ?, ?, ?> operation, T resource, String status) {\n+        List<String> printWholeCr = new ArrayList<>(asList(\"KafkaConnector\", \"KafkaTopic\", \"KafkaUser\"));\n+\n+        TestUtils.waitFor(\"Wait for {}\" + resource.getKind() + \":{} \" + resource.getMetadata().getName() + \"will have desired state {}\" + status,\n+            Constants.POLL_INTERVAL_FOR_RESOURCE_READINESS, Constants.TIMEOUT_FOR_RESOURCE_READINESS,\n+            () -> operation.inNamespace(resource.getMetadata().getNamespace())\n+            .withName(resource.getMetadata().getName())\n+            .get().getStatus().getConditions().stream().anyMatch(condition -> condition.getType().equals(status)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a665fe87cddbfd2c32fe3aa9309972df2ab8985e"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY4NDkwMA==", "bodyText": "same as above", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r414684900", "createdAt": "2020-04-24T15:56:35Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaConnectUtils.java", "diffHunk": "@@ -29,10 +31,8 @@ public static void createFileSinkConnector(String podName, String topicName, Str\n     }\n \n     public static void waitForConnectStatus(String name, String status) {\n-        LOGGER.info(\"Waiting for KafkaConnect {} state: {}\", name, status);\n-        TestUtils.waitFor(\"KafkaConnect \" + name + \" state: \" + status, Constants.POLL_INTERVAL_FOR_RESOURCE_READINESS, Constants.TIMEOUT_FOR_RESOURCE_READINESS,\n-            () -> KafkaConnectResource.kafkaConnectClient().inNamespace(kubeClient().getNamespace()).withName(name).get().getStatus().getConditions().get(0).getType().equals(status));\n-        LOGGER.info(\"KafkaConnect {} is in desired state: {}\", name, status);\n+        KafkaConnect kafkaConnect = kafkaConnectClient().inNamespace(kubeClient().getNamespace()).withName(name).get();\n+        ResourceManager.waitForStatus(kafkaConnectClient(), kafkaConnect, status);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a665fe87cddbfd2c32fe3aa9309972df2ab8985e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcxNDg3Ng==", "bodyText": "Same as above", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r414714876", "createdAt": "2020-04-24T16:43:15Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaConnectorUtils.java", "diffHunk": "@@ -40,17 +42,13 @@ public static void waitForConnectorStability(String connectorName, String connec\n                 } else {\n                     throw new RuntimeException(\"Connector\" + connectorName + \" is not stable!\");\n                 }\n-            }, () -> StUtils.logCurrentStatus(KafkaConnectorResource.kafkaConnectorClient().inNamespace(kubeClient().getNamespace()).withName(connectorName).get())\n+            }, () -> logCurrentStatus(kafkaConnectorClient().inNamespace(kubeClient().getNamespace()).withName(connectorName).get())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a665fe87cddbfd2c32fe3aa9309972df2ab8985e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcxNjEyMA==", "bodyText": "Guess we can add log, which will tell us that test is waiting for status", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r414716120", "createdAt": "2020-04-24T16:45:19Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/ResourceManager.java", "diffHunk": "@@ -358,6 +363,51 @@ public static String getImageValueFromCO(String name) {\n         }\n         return \"\";\n     }\n+    /**\n+     * Log actual status of custom resource with pods.\n+     * @param customResource - Kafka, KafkaConnect etc. - every resource that HasMetadata and HasStatus (Strimzi status)\n+     */\n+    public static <T extends HasMetadata & HasStatus> void logCurrentStatus(T customResource) {\n+        String kind = customResource.getKind();\n+        String name = customResource.getMetadata().getName();\n+\n+        List<String> log = new ArrayList<>(asList(\"\\n\", kind, \" status:\\n\", \"\\nConditions:\\n\"));\n+\n+        for (Condition condition : customResource.getStatus().getConditions()) {\n+            log.add(\"\\tType: \" + condition.getType() + \"\\n\");\n+            log.add(\"\\tMessage: \" + condition.getMessage() + \"\\n\");\n+        }\n+\n+        PodUtils.logCurrentPodStatus(name, log);\n+    }\n+\n+    /**\n+     * Wait until the CR is in desired state\n+     * @param operation - client of CR - for example kafkaClient()\n+     * @param resource - custom resource\n+     * @param status - desired status\n+     * @return returns CR\n+     */\n+    public static <T extends HasMetadata & HasStatus> T waitForStatus(MixedOperation<T, ?, ?, ?> operation, T resource, String status) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a665fe87cddbfd2c32fe3aa9309972df2ab8985e"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcxNjkxNg==", "bodyText": "Again, use ResourceManager.logCurrentStatus instead.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r414716916", "createdAt": "2020-04-24T16:46:34Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/controllers/StatefulSetUtils.java", "diffHunk": "@@ -137,11 +137,11 @@ public static void waitForAllStatefulSetPodsReady(String statefulSetName, int ex\n         LOGGER.info(\"Waiting for StatefulSet {} to be ready\", statefulSetName);\n         TestUtils.waitFor(\"statefulset \" + statefulSetName + \" to be ready\", Constants.POLL_INTERVAL_FOR_RESOURCE_READINESS, Constants.TIMEOUT_FOR_RESOURCE_READINESS,\n             () -> kubeClient().getStatefulSetStatus(statefulSetName),\n-            () -> StUtils.logCurrentStatus(KafkaResource.kafkaClient().inNamespace(kubeClient().getNamespace()).withName(resourceName).get()));\n+            () -> logCurrentStatus(KafkaResource.kafkaClient().inNamespace(kubeClient().getNamespace()).withName(resourceName).get()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a665fe87cddbfd2c32fe3aa9309972df2ab8985e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcxODE1OQ==", "bodyText": "Maybe we should use different name? Or log it directly in that function? Now it's a little bit confusing", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r414718159", "createdAt": "2020-04-24T16:48:36Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/PodUtils.java", "diffHunk": "@@ -265,23 +265,20 @@ public static void waitUntilPodsStability(List<Pod> pods) {\n \n     /**\n      * Log actual pod statuses list by prefix name\n-     * @param kind - custom resource / deployment kind - Kafka, KafkaBridge etc.\n      * @param name - custom resource / deployment name - used for prefix\n      * @param log - ArrayList - add statuses, pods and conditions for future display\n      */\n-    public static void logCurrentPodStatus(String kind, String name, List<String> log) {\n-        if (!(kind.equals(\"KafkaConnector\"))) {\n-            log.add(\"\\nPods with conditions and messages:\\n\\n\");\n-            for (Pod pod : kubeClient().listPodsByPrefixInName(name)) {\n-                log.add(pod.getMetadata().getName() + \":\");\n-                for (PodCondition podCondition : pod.getStatus().getConditions()) {\n-                    if (podCondition.getMessage() != null) {\n-                        log.add(\"\\n\\tType: \" + podCondition.getType() + \"\\n\");\n-                        log.add(\"\\tMessage: \" + podCondition.getMessage() + \"\\n\");\n-                    }\n+    public static void logCurrentPodStatus(String name, List<String> log) {\n+        log.add(\"\\nPods with conditions and messages:\\n\\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a665fe87cddbfd2c32fe3aa9309972df2ab8985e"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMTE2Nzkw", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#pullrequestreview-400116790", "createdAt": "2020-04-24T16:57:16Z", "commit": {"oid": "a665fe87cddbfd2c32fe3aa9309972df2ab8985e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNjo1NzoxN1rOGLgt7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNjo1NzoxN1rOGLgt7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcyMzU2NQ==", "bodyText": "I'm guessing the {} are something you copy and pasted from some logging stmt? It might be worth using String.format() rather than so much concat.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r414723565", "createdAt": "2020-04-24T16:57:17Z", "author": {"login": "tombentley"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/ResourceManager.java", "diffHunk": "@@ -358,6 +363,51 @@ public static String getImageValueFromCO(String name) {\n         }\n         return \"\";\n     }\n+    /**\n+     * Log actual status of custom resource with pods.\n+     * @param customResource - Kafka, KafkaConnect etc. - every resource that HasMetadata and HasStatus (Strimzi status)\n+     */\n+    public static <T extends HasMetadata & HasStatus> void logCurrentStatus(T customResource) {\n+        String kind = customResource.getKind();\n+        String name = customResource.getMetadata().getName();\n+\n+        List<String> log = new ArrayList<>(asList(\"\\n\", kind, \" status:\\n\", \"\\nConditions:\\n\"));\n+\n+        for (Condition condition : customResource.getStatus().getConditions()) {\n+            log.add(\"\\tType: \" + condition.getType() + \"\\n\");\n+            log.add(\"\\tMessage: \" + condition.getMessage() + \"\\n\");\n+        }\n+\n+        PodUtils.logCurrentPodStatus(name, log);\n+    }\n+\n+    /**\n+     * Wait until the CR is in desired state\n+     * @param operation - client of CR - for example kafkaClient()\n+     * @param resource - custom resource\n+     * @param status - desired status\n+     * @return returns CR\n+     */\n+    public static <T extends HasMetadata & HasStatus> T waitForStatus(MixedOperation<T, ?, ?, ?> operation, T resource, String status) {\n+        List<String> printWholeCr = new ArrayList<>(asList(\"KafkaConnector\", \"KafkaTopic\", \"KafkaUser\"));\n+\n+        TestUtils.waitFor(\"Wait for {}\" + resource.getKind() + \":{} \" + resource.getMetadata().getName() + \"will have desired state {}\" + status,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a665fe87cddbfd2c32fe3aa9309972df2ab8985e"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce9b155e3bf8e7ad649133baff6678718e002d64", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ce9b155e3bf8e7ad649133baff6678718e002d64", "committedDate": "2020-04-28T08:58:33Z", "message": "add generic wait method to ResourceManager and update utils and resources classes\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b69042573dac7cf7b2485753abecff73af2b0e0", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/9b69042573dac7cf7b2485753abecff73af2b0e0", "committedDate": "2020-04-28T08:58:44Z", "message": "edit log methods\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33a6af80dbccb771e9ffd4418604dbf0156ac84a", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/33a6af80dbccb771e9ffd4418604dbf0156ac84a", "committedDate": "2020-04-28T08:59:08Z", "message": "resolve comments\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "297d879207c8e5f3301a184346e37ad0243177f8", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/297d879207c8e5f3301a184346e37ad0243177f8", "committedDate": "2020-04-24T18:35:25Z", "message": "resolve comments\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}, "afterCommit": {"oid": "65c2420812e5c17e9b61af7fdc6a54fc5357113a", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/65c2420812e5c17e9b61af7fdc6a54fc5357113a", "committedDate": "2020-04-28T09:43:44Z", "message": "fix errors after rebase\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2ded58a0d7348c7fa72440e236ea6608b296a5d", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b2ded58a0d7348c7fa72440e236ea6608b296a5d", "committedDate": "2020-04-28T09:52:43Z", "message": "fix errors after rebase\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "65c2420812e5c17e9b61af7fdc6a54fc5357113a", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/65c2420812e5c17e9b61af7fdc6a54fc5357113a", "committedDate": "2020-04-28T09:43:44Z", "message": "fix errors after rebase\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}, "afterCommit": {"oid": "b2ded58a0d7348c7fa72440e236ea6608b296a5d", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b2ded58a0d7348c7fa72440e236ea6608b296a5d", "committedDate": "2020-04-28T09:52:43Z", "message": "fix errors after rebase\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNzA0OTYw", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#pullrequestreview-401704960", "createdAt": "2020-04-28T10:30:41Z", "commit": {"oid": "b2ded58a0d7348c7fa72440e236ea6608b296a5d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMDozMDo0MlrOGNNgug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMDozMDo0MlrOGNNgug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUwNjA0Mg==", "bodyText": "printWholeCR? :)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r416506042", "createdAt": "2020-04-28T10:30:42Z", "author": {"login": "michalxo"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/ResourceManager.java", "diffHunk": "@@ -358,6 +368,63 @@ public static String getImageValueFromCO(String name) {\n         }\n         return \"\";\n     }\n+    /**\n+     * Log actual status of custom resource with pods.\n+     * @param customResource - Kafka, KafkaConnect etc. - every resource that HasMetadata and HasStatus (Strimzi status)\n+     */\n+    public static <T extends HasMetadata & HasStatus> void logCurrentResourceStatus(T customResource) {\n+        List<String> printWholeCr = new ArrayList<>(asList(KafkaConnector.RESOURCE_KIND, KafkaTopic.RESOURCE_KIND, KafkaUser.RESOURCE_KIND));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2ded58a0d7348c7fa72440e236ea6608b296a5d"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNzE3MDUy", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#pullrequestreview-401717052", "createdAt": "2020-04-28T10:48:49Z", "commit": {"oid": "b2ded58a0d7348c7fa72440e236ea6608b296a5d"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMDo0ODo1MFrOGNOJIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMDo0ODo1MFrOGNOJIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUxNjM4NQ==", "bodyText": "use factory method ->  Arrays.asList() instead  of explicitly calling constructor new ArrayList<>", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r416516385", "createdAt": "2020-04-28T10:48:50Z", "author": {"login": "see-quick"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/ResourceManager.java", "diffHunk": "@@ -358,6 +368,63 @@ public static String getImageValueFromCO(String name) {\n         }\n         return \"\";\n     }\n+    /**\n+     * Log actual status of custom resource with pods.\n+     * @param customResource - Kafka, KafkaConnect etc. - every resource that HasMetadata and HasStatus (Strimzi status)\n+     */\n+    public static <T extends HasMetadata & HasStatus> void logCurrentResourceStatus(T customResource) {\n+        List<String> printWholeCr = new ArrayList<>(asList(KafkaConnector.RESOURCE_KIND, KafkaTopic.RESOURCE_KIND, KafkaUser.RESOURCE_KIND));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUwNjA0Mg=="}, "originalCommit": {"oid": "b2ded58a0d7348c7fa72440e236ea6608b296a5d"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "684e44424ba44e829f8247f2483ea83bc1b98527", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/684e44424ba44e829f8247f2483ea83bc1b98527", "committedDate": "2020-04-28T14:35:52Z", "message": "resolve comment\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNDQ3Nzg2", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#pullrequestreview-402447786", "createdAt": "2020-04-29T08:10:50Z", "commit": {"oid": "684e44424ba44e829f8247f2483ea83bc1b98527"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODoxMDo1MFrOGN0KeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODoxMTowM1rOGN0K8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzOTMyMA==", "bodyText": "If might be worth inlining this.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r417139320", "createdAt": "2020-04-29T08:10:50Z", "author": {"login": "tombentley"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaConnectS2IResource.java", "diffHunk": "@@ -105,13 +100,7 @@ private static KafkaConnectS2I getKafkaConnectS2IFromYaml(String yamlPath) {\n     }\n \n     private static KafkaConnectS2I waitFor(KafkaConnectS2I kafkaConnectS2I) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "684e44424ba44e829f8247f2483ea83bc1b98527"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzOTQ0MA==", "bodyText": "It might be worth inlining this.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r417139440", "createdAt": "2020-04-29T08:11:03Z", "author": {"login": "tombentley"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaConnectResource.java", "diffHunk": "@@ -121,13 +116,7 @@ private static KafkaConnect getKafkaConnectFromYaml(String yamlPath) {\n     }\n \n     private static KafkaConnect waitFor(KafkaConnect kafkaConnect) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "684e44424ba44e829f8247f2483ea83bc1b98527"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNzg3MDE1", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#pullrequestreview-402787015", "createdAt": "2020-04-29T15:32:31Z", "commit": {"oid": "684e44424ba44e829f8247f2483ea83bc1b98527"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNDUyNjM0", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#pullrequestreview-403452634", "createdAt": "2020-04-30T12:01:12Z", "commit": {"oid": "684e44424ba44e829f8247f2483ea83bc1b98527"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNDgxNDQ1", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#pullrequestreview-403481445", "createdAt": "2020-04-30T12:43:01Z", "commit": {"oid": "684e44424ba44e829f8247f2483ea83bc1b98527"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1948, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}