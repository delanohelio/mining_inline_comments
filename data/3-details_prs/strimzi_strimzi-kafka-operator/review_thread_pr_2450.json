{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2Nzg2MDcz", "number": 2450, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNDowMjo1NVrODafpvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMjo0Nzo1MVrODbNQug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTA4MTU3OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/BaseST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNDowMjo1NVrOFhejxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNDowMjo1NVrOFhejxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY0ODAwNw==", "bodyText": "Move it to some utils class.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2450#discussion_r370648007", "createdAt": "2020-01-24T14:02:55Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/BaseST.java", "diffHunk": "@@ -376,6 +379,58 @@ protected void checkComponentConfiguration(String podNamePrefix, String containe\n         }\n     }\n \n+    private Properties stringToProperties(String str) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "064ebd2f076d32eec37664e1f7f9871dd1c8b062"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTA4MTc3OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/BaseST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNDowMjo1OVrOFhej6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNDowMjo1OVrOFhej6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY0ODA0MQ==", "bodyText": "Move it to some utils class.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2450#discussion_r370648041", "createdAt": "2020-01-24T14:02:59Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/BaseST.java", "diffHunk": "@@ -376,6 +379,58 @@ protected void checkComponentConfiguration(String podNamePrefix, String containe\n         }\n     }\n \n+    private Properties stringToProperties(String str) {\n+        Properties result = new Properties();\n+        List<String> list = getLinesWithoutCommentsAndEmptyLines(str);\n+        for (String line: list) {\n+            String[] split = line.split(\"=\");\n+            if (split.length == 1) {\n+                result.put(split[0], \"\");\n+            } else {\n+                result.put(split[0], split[1]);\n+            }\n+        }\n+        return result;\n+    }\n+\n+    private Properties configMap2Properties(ConfigMap cm) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "064ebd2f076d32eec37664e1f7f9871dd1c8b062"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTA4MjM3OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/BaseST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNDowMzoxMVrOFhekQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNDowMzoxMVrOFhekQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY0ODEzMA==", "bodyText": "Move it to some utils class.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2450#discussion_r370648130", "createdAt": "2020-01-24T14:03:11Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/BaseST.java", "diffHunk": "@@ -376,6 +379,58 @@ protected void checkComponentConfiguration(String podNamePrefix, String containe\n         }\n     }\n \n+    private Properties stringToProperties(String str) {\n+        Properties result = new Properties();\n+        List<String> list = getLinesWithoutCommentsAndEmptyLines(str);\n+        for (String line: list) {\n+            String[] split = line.split(\"=\");\n+            if (split.length == 1) {\n+                result.put(split[0], \"\");\n+            } else {\n+                result.put(split[0], split[1]);\n+            }\n+        }\n+        return result;\n+    }\n+\n+    private Properties configMap2Properties(ConfigMap cm) {\n+        return stringToProperties(cm.getData().get(\"server.config\"));\n+    }\n+\n+    private List<String> getLinesWithoutCommentsAndEmptyLines(String config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "064ebd2f076d32eec37664e1f7f9871dd1c8b062"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTA5NDI1OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/BaseST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNDowNjozOFrOFherEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNDowNjozOFrOFherEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY0OTg3Mw==", "bodyText": "I think use here classic for is more readable.\nYou can loop over config items and some this: assertThat(properties, hasEntry(configEntry));", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2450#discussion_r370649873", "createdAt": "2020-01-24T14:06:38Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/BaseST.java", "diffHunk": "@@ -376,6 +379,58 @@ protected void checkComponentConfiguration(String podNamePrefix, String containe\n         }\n     }\n \n+    private Properties stringToProperties(String str) {\n+        Properties result = new Properties();\n+        List<String> list = getLinesWithoutCommentsAndEmptyLines(str);\n+        for (String line: list) {\n+            String[] split = line.split(\"=\");\n+            if (split.length == 1) {\n+                result.put(split[0], \"\");\n+            } else {\n+                result.put(split[0], split[1]);\n+            }\n+        }\n+        return result;\n+    }\n+\n+    private Properties configMap2Properties(ConfigMap cm) {\n+        return stringToProperties(cm.getData().get(\"server.config\"));\n+    }\n+\n+    private List<String> getLinesWithoutCommentsAndEmptyLines(String config) {\n+        List<String> allLines = Arrays.asList(config.split(\"\\\\r?\\\\n\"));\n+        List<String> validLines = new ArrayList<>();\n+\n+        for (String line : allLines)    {\n+            if (!line.replace(\" \", \"\").startsWith(\"#\") && !line.isEmpty())   {\n+                validLines.add(line.replace(\" \", \"\"));\n+            }\n+        }\n+        return validLines;\n+    }\n+\n+    protected void checkKafkaConfiguration(String podNamePrefix, Map<String, Object> config, String clusterName) {\n+        LOGGER.info(\"Checking kafka configuration\");\n+        List<Pod> pods = kubeClient().listPodsByPrefixInName(podNamePrefix);\n+\n+        Properties properties = configMap2Properties(kubeClient().getConfigMap(clusterName + \"-kafka-config\"));\n+\n+        config.forEach((key, val) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "064ebd2f076d32eec37664e1f7f9871dd1c8b062"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTA5Nzk3OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/BaseST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNDowNzo1MVrOFhetQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNDowNzo1MVrOFhetQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY1MDQzNA==", "bodyText": "same as above", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2450#discussion_r370650434", "createdAt": "2020-01-24T14:07:51Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/BaseST.java", "diffHunk": "@@ -376,6 +379,58 @@ protected void checkComponentConfiguration(String podNamePrefix, String containe\n         }\n     }\n \n+    private Properties stringToProperties(String str) {\n+        Properties result = new Properties();\n+        List<String> list = getLinesWithoutCommentsAndEmptyLines(str);\n+        for (String line: list) {\n+            String[] split = line.split(\"=\");\n+            if (split.length == 1) {\n+                result.put(split[0], \"\");\n+            } else {\n+                result.put(split[0], split[1]);\n+            }\n+        }\n+        return result;\n+    }\n+\n+    private Properties configMap2Properties(ConfigMap cm) {\n+        return stringToProperties(cm.getData().get(\"server.config\"));\n+    }\n+\n+    private List<String> getLinesWithoutCommentsAndEmptyLines(String config) {\n+        List<String> allLines = Arrays.asList(config.split(\"\\\\r?\\\\n\"));\n+        List<String> validLines = new ArrayList<>();\n+\n+        for (String line : allLines)    {\n+            if (!line.replace(\" \", \"\").startsWith(\"#\") && !line.isEmpty())   {\n+                validLines.add(line.replace(\" \", \"\"));\n+            }\n+        }\n+        return validLines;\n+    }\n+\n+    protected void checkKafkaConfiguration(String podNamePrefix, Map<String, Object> config, String clusterName) {\n+        LOGGER.info(\"Checking kafka configuration\");\n+        List<Pod> pods = kubeClient().listPodsByPrefixInName(podNamePrefix);\n+\n+        Properties properties = configMap2Properties(kubeClient().getConfigMap(clusterName + \"-kafka-config\"));\n+\n+        config.forEach((key, val) -> {\n+            assertThat(properties.keySet().contains(key), is(true));\n+            assertThat(properties.getProperty(key), is(val));\n+        });\n+\n+        for (Pod pod: pods) {\n+            ExecResult result = cmdKubeClient().execInPod(pod.getMetadata().getName(), \"/bin/bash\", \"-c\", \"cat /tmp/strimzi.properties\");\n+            Properties execProperties = stringToProperties(result.out());\n+\n+            config.forEach((key, val) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "064ebd2f076d32eec37664e1f7f9871dd1c8b062"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODU1NDE4OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/StUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMjo0Nzo1MVrOFijt3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwOTozNDowMVrOFjB0Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4MTA4Ng==", "bodyText": "what about?\nresult.put(split[0], split.length == 1 ? \"\" : split[1])", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2450#discussion_r371781086", "createdAt": "2020-01-28T12:47:51Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/StUtils.java", "diffHunk": "@@ -176,4 +178,34 @@ public static void checkCologForUsedVariable(String varName) {\n     public static String globalVariableJsonPathBuilder(int containerIndex, String envVar) {\n         return \"$.spec.containers[\" + containerIndex + \"].env[?(@.name=='\" + envVar + \"')].value\";\n     }\n+\n+    public static Properties stringToProperties(String str) {\n+        Properties result = new Properties();\n+        List<String> list = getLinesWithoutCommentsAndEmptyLines(str);\n+        for (String line: list) {\n+            String[] split = line.split(\"=\");\n+            if (split.length == 1) {\n+                result.put(split[0], \"\");\n+            } else {\n+                result.put(split[0], split[1]);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e005cf64402c0da667b04db37f09b664a3371939"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3NDI3NA==", "bodyText": "Yeah I think that's better :) thank you, already pushed and ready for merge", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2450#discussion_r372274274", "createdAt": "2020-01-29T09:34:01Z", "author": {"login": "im-konge"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/StUtils.java", "diffHunk": "@@ -176,4 +178,34 @@ public static void checkCologForUsedVariable(String varName) {\n     public static String globalVariableJsonPathBuilder(int containerIndex, String envVar) {\n         return \"$.spec.containers[\" + containerIndex + \"].env[?(@.name=='\" + envVar + \"')].value\";\n     }\n+\n+    public static Properties stringToProperties(String str) {\n+        Properties result = new Properties();\n+        List<String> list = getLinesWithoutCommentsAndEmptyLines(str);\n+        for (String line: list) {\n+            String[] split = line.split(\"=\");\n+            if (split.length == 1) {\n+                result.put(split[0], \"\");\n+            } else {\n+                result.put(split[0], split[1]);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4MTA4Ng=="}, "originalCommit": {"oid": "e005cf64402c0da667b04db37f09b664a3371939"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 663, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}