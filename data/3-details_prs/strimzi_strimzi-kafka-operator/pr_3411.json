{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4NTI5NTUz", "number": 3411, "title": "Exposing Cruise Control metrics", "bodyText": "Type of change\n\nEnhancement / new feature\n\nDescription\nThis PR is about enabling to expose the Cruise Control metrics through Prometheus (via JMX exporter running as agent) and then showing some of them on a related Grafana dashboard.\nThe metrics are enabled with the cruiseControl.metrics property in the Kafka resource where the user can specify the JMX exporter configuration (as we already do for Kafka and ZooKeeper metrics).\nThe following pictures show the Grafana dashboard and some of the metrics I thought were useful to have at least as an initial starting point (more metrics could be added in the future while using Cruise Control overtime).\n\n\n\n\nChecklist\nPlease go through this checklist and make sure all applicable tasks have been done\n\n Write tests\n Make sure all tests pass\n Update documentation\n Check RBAC rights for Kubernetes / OpenShift roles\n Try your changes from Pod inside your Kubernetes and OpenShift cluster, not just locally\n Reference relevant issue(s) and close them after merging\n Update CHANGELOG.md\n Supply screenshots for visual changes, such as Grafana dashboards", "createdAt": "2020-07-29T15:53:51Z", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411", "merged": true, "mergeCommit": {"oid": "d96208eefb54755f74661f27514ccfb2c04c1816"}, "closed": true, "closedAt": "2020-08-03T08:45:32Z", "author": {"login": "ppatierno"}, "timelineItems": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5RkXEAH2gAyNDU4NTI5NTUzOjBiNTFjZWQ2N2E2YjAwMzAyNjA3ZTc1N2QxYmMxM2M4YjkyNzcxMmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7N9FZAFqTQ1OTg1MDMwOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0b51ced67a6b00302607e757d1bc13c8b927712c", "author": {"user": {"login": "ppatierno", "name": "Paolo Patierno"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/0b51ced67a6b00302607e757d1bc13c8b927712c", "committedDate": "2020-07-28T07:47:52Z", "message": "Added metrics property to the cruiseControl in Kafka resource\nAdded CO logic for enabling the CC metrics\n\nSigned-off-by: Paolo Patierno <ppatierno@live.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c387808483f7d1e283db00938adcf173ec7ec2f", "author": {"user": {"login": "ppatierno", "name": "Paolo Patierno"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/5c387808483f7d1e283db00938adcf173ec7ec2f", "committedDate": "2020-07-29T15:45:19Z", "message": "Added Kafka example with Cruise Control with metrics enabled\nAdded Cruise Control related Grafana dashboard\n\nSigned-off-by: Paolo Patierno <ppatierno@live.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NzE4NjU5", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#pullrequestreview-457718659", "createdAt": "2020-07-29T17:03:48Z", "commit": {"oid": "5c387808483f7d1e283db00938adcf173ec7ec2f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NzU3ODAy", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#pullrequestreview-457757802", "createdAt": "2020-07-29T17:55:18Z", "commit": {"oid": "5c387808483f7d1e283db00938adcf173ec7ec2f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NzU5NTU1", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#pullrequestreview-457759555", "createdAt": "2020-07-29T17:57:35Z", "commit": {"oid": "5c387808483f7d1e283db00938adcf173ec7ec2f"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NzYxMDM4", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#pullrequestreview-457761038", "createdAt": "2020-07-29T17:59:34Z", "commit": {"oid": "5c387808483f7d1e283db00938adcf173ec7ec2f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzo1OTozNFrOG5D2fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzo1OTozNFrOG5D2fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4NTExOA==", "bodyText": "Can we get some better descriptions? For example I have no idea what does Balancedness Score, which value is good, which bad etc. ... I guess 100 is bad here since it is orange in the screenshot?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#discussion_r462485118", "createdAt": "2020-07-29T17:59:34Z", "author": {"login": "scholzj"}, "path": "examples/metrics/grafana-dashboards/strimzi-cruise-control.json", "diffHunk": "@@ -0,0 +1,2062 @@\n+{\n+  \"__inputs\": [\n+    {\n+      \"name\": \"DS_PROMETHEUS\",\n+      \"label\": \"Prometheus\",\n+      \"description\": \"\",\n+      \"type\": \"datasource\",\n+      \"pluginId\": \"prometheus\",\n+      \"pluginName\": \"Prometheus\"\n+    }\n+  ],\n+  \"__requires\": [\n+    {\n+      \"type\": \"grafana\",\n+      \"id\": \"grafana\",\n+      \"name\": \"Grafana\",\n+      \"version\": \"6.3.0\"\n+    },\n+    {\n+      \"type\": \"panel\",\n+      \"id\": \"graph\",\n+      \"name\": \"Graph\",\n+      \"version\": \"\"\n+    },\n+    {\n+      \"type\": \"datasource\",\n+      \"id\": \"prometheus\",\n+      \"name\": \"Prometheus\",\n+      \"version\": \"1.0.0\"\n+    },\n+    {\n+      \"type\": \"panel\",\n+      \"id\": \"singlestat\",\n+      \"name\": \"Singlestat\",\n+      \"version\": \"\"\n+    }\n+  ],\n+  \"annotations\": {\n+    \"list\": [\n+      {\n+        \"builtIn\": 1,\n+        \"datasource\": \"-- Grafana --\",\n+        \"enable\": true,\n+        \"hide\": true,\n+        \"iconColor\": \"rgba(0, 211, 255, 1)\",\n+        \"name\": \"Annotations & Alerts\",\n+        \"type\": \"dashboard\"\n+      }\n+    ]\n+  },\n+  \"editable\": true,\n+  \"gnetId\": null,\n+  \"graphTooltip\": 0,\n+  \"id\": null,\n+  \"iteration\": 1596032501954,\n+  \"links\": [],\n+  \"panels\": [\n+    {\n+      \"cacheTimeout\": null,\n+      \"colorBackground\": false,\n+      \"colorValue\": true,\n+      \"colors\": [\n+        \"#d44a3a\",\n+        \"rgba(237, 129, 40, 0.89)\",\n+        \"#299c46\"\n+      ],\n+      \"datasource\": \"${DS_PROMETHEUS}\",\n+      \"description\": \"The number of snapshot windows that is monitored\",\n+      \"format\": \"none\",\n+      \"gauge\": {\n+        \"maxValue\": 100,\n+        \"minValue\": 0,\n+        \"show\": false,\n+        \"thresholdLabels\": false,\n+        \"thresholdMarkers\": true\n+      },\n+      \"gridPos\": {\n+        \"h\": 4,\n+        \"w\": 4,\n+        \"x\": 0,\n+        \"y\": 0\n+      },\n+      \"id\": 46,\n+      \"interval\": null,\n+      \"links\": [],\n+      \"mappingType\": 1,\n+      \"mappingTypes\": [\n+        {\n+          \"name\": \"value to text\",\n+          \"value\": 1\n+        },\n+        {\n+          \"name\": \"range to text\",\n+          \"value\": 2\n+        }\n+      ],\n+      \"maxDataPoints\": 100,\n+      \"nullPointMode\": \"connected\",\n+      \"nullText\": null,\n+      \"options\": {},\n+      \"postfix\": \"\",\n+      \"postfixFontSize\": \"50%\",\n+      \"prefix\": \"\",\n+      \"prefixFontSize\": \"50%\",\n+      \"rangeMaps\": [\n+        {\n+          \"from\": \"null\",\n+          \"text\": \"N/A\",\n+          \"to\": \"null\"\n+        }\n+      ],\n+      \"repeat\": null,\n+      \"repeatDirection\": \"h\",\n+      \"sparkline\": {\n+        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n+        \"full\": false,\n+        \"lineColor\": \"rgb(31, 120, 193)\",\n+        \"show\": false\n+      },\n+      \"tableColumn\": \"\",\n+      \"targets\": [\n+        {\n+          \"expr\": \"kafka_cruisecontrol_loadmonitor_total_monitored_windows_value{namespace=\\\"$kubernetes_namespace\\\",strimzi_io_cluster=\\\"$strimzi_cluster_name\\\"}\",\n+          \"format\": \"time_series\",\n+          \"hide\": false,\n+          \"intervalFactor\": 1,\n+          \"legendFormat\": \"\",\n+          \"refId\": \"A\"\n+        }\n+      ],\n+      \"thresholds\": \"0,2\",\n+      \"title\": \"Total Monitored Windows\",\n+      \"type\": \"singlestat\",\n+      \"valueFontSize\": \"200%\",\n+      \"valueMaps\": [\n+        {\n+          \"op\": \"=\",\n+          \"text\": \"N/A\",\n+          \"value\": \"null\"\n+        }\n+      ],\n+      \"valueName\": \"current\"\n+    },\n+    {\n+      \"cacheTimeout\": null,\n+      \"colorBackground\": false,\n+      \"colorValue\": true,\n+      \"colors\": [\n+        \"#299c46\",\n+        \"#e5ac0e\",\n+        \"#bf1b00\"\n+      ],\n+      \"datasource\": \"${DS_PROMETHEUS}\",\n+      \"description\": \"Number of valid windows\",\n+      \"format\": \"none\",\n+      \"gauge\": {\n+        \"maxValue\": 100,\n+        \"minValue\": 0,\n+        \"show\": false,\n+        \"thresholdLabels\": false,\n+        \"thresholdMarkers\": true\n+      },\n+      \"gridPos\": {\n+        \"h\": 4,\n+        \"w\": 4,\n+        \"x\": 4,\n+        \"y\": 0\n+      },\n+      \"id\": 36,\n+      \"interval\": null,\n+      \"links\": [],\n+      \"mappingType\": 1,\n+      \"mappingTypes\": [\n+        {\n+          \"name\": \"value to text\",\n+          \"value\": 1\n+        },\n+        {\n+          \"name\": \"range to text\",\n+          \"value\": 2\n+        }\n+      ],\n+      \"maxDataPoints\": 100,\n+      \"nullPointMode\": \"connected\",\n+      \"nullText\": null,\n+      \"options\": {},\n+      \"postfix\": \"\",\n+      \"postfixFontSize\": \"50%\",\n+      \"prefix\": \"\",\n+      \"prefixFontSize\": \"50%\",\n+      \"rangeMaps\": [\n+        {\n+          \"from\": \"null\",\n+          \"text\": \"N/A\",\n+          \"to\": \"null\"\n+        }\n+      ],\n+      \"sparkline\": {\n+        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n+        \"full\": false,\n+        \"lineColor\": \"rgb(31, 120, 193)\",\n+        \"show\": false\n+      },\n+      \"tableColumn\": \"\",\n+      \"targets\": [\n+        {\n+          \"expr\": \"kafka_cruisecontrol_loadmonitor_valid_windows_value{namespace=\\\"$kubernetes_namespace\\\",strimzi_io_cluster=\\\"$strimzi_cluster_name\\\"}\",\n+          \"format\": \"time_series\",\n+          \"hide\": false,\n+          \"intervalFactor\": 1,\n+          \"refId\": \"A\"\n+        }\n+      ],\n+      \"thresholds\": \"2\",\n+      \"title\": \"Valid Windows\",\n+      \"type\": \"singlestat\",\n+      \"valueFontSize\": \"200%\",\n+      \"valueMaps\": [\n+        {\n+          \"op\": \"=\",\n+          \"text\": \"N/A\",\n+          \"value\": \"null\"\n+        }\n+      ],\n+      \"valueName\": \"current\"\n+    },\n+    {\n+      \"cacheTimeout\": null,\n+      \"colorBackground\": false,\n+      \"colorValue\": true,\n+      \"colors\": [\n+        \"#299c46\",\n+        \"rgba(237, 129, 40, 0.89)\",\n+        \"#d44a3a\"\n+      ],\n+      \"datasource\": \"${DS_PROMETHEUS}\",\n+      \"description\": \"Number of ongoing executions running for proposals or rebalance\",\n+      \"format\": \"none\",\n+      \"gauge\": {\n+        \"maxValue\": 100,\n+        \"minValue\": 0,\n+        \"show\": false,\n+        \"thresholdLabels\": false,\n+        \"thresholdMarkers\": true\n+      },\n+      \"gridPos\": {\n+        \"h\": 4,\n+        \"w\": 4,\n+        \"x\": 8,\n+        \"y\": 0\n+      },\n+      \"id\": 38,\n+      \"interval\": null,\n+      \"links\": [],\n+      \"mappingType\": 1,\n+      \"mappingTypes\": [\n+        {\n+          \"name\": \"value to text\",\n+          \"value\": 1\n+        },\n+        {\n+          \"name\": \"range to text\",\n+          \"value\": 2\n+        }\n+      ],\n+      \"maxDataPoints\": 100,\n+      \"nullPointMode\": \"connected\",\n+      \"nullText\": null,\n+      \"options\": {},\n+      \"postfix\": \"\",\n+      \"postfixFontSize\": \"50%\",\n+      \"prefix\": \"\",\n+      \"prefixFontSize\": \"50%\",\n+      \"rangeMaps\": [\n+        {\n+          \"from\": \"null\",\n+          \"text\": \"N/A\",\n+          \"to\": \"null\"\n+        }\n+      ],\n+      \"sparkline\": {\n+        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n+        \"full\": false,\n+        \"lineColor\": \"rgb(31, 120, 193)\",\n+        \"show\": false\n+      },\n+      \"tableColumn\": \"\",\n+      \"targets\": [\n+        {\n+          \"expr\": \"kafka_cruisecontrol_executor_ongoing_execution_non_kafka_assigner_value{namespace=\\\"$kubernetes_namespace\\\",strimzi_io_cluster=\\\"$strimzi_cluster_name\\\"}\",\n+          \"format\": \"time_series\",\n+          \"hide\": false,\n+          \"intervalFactor\": 1,\n+          \"refId\": \"A\"\n+        }\n+      ],\n+      \"thresholds\": \"2\",\n+      \"title\": \"Ongoing Execution\",\n+      \"type\": \"singlestat\",\n+      \"valueFontSize\": \"200%\",\n+      \"valueMaps\": [\n+        {\n+          \"op\": \"=\",\n+          \"text\": \"N/A\",\n+          \"value\": \"null\"\n+        }\n+      ],\n+      \"valueName\": \"current\"\n+    },\n+    {\n+      \"cacheTimeout\": null,\n+      \"colorBackground\": false,\n+      \"colorValue\": true,\n+      \"colors\": [\n+        \"#299c46\",\n+        \"rgba(237, 129, 40, 0.89)\",\n+        \"#d44a3a\"\n+      ],\n+      \"datasource\": \"${DS_PROMETHEUS}\",\n+      \"description\": \"Balancedness Score\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c387808483f7d1e283db00938adcf173ec7ec2f"}, "originalPosition": 320}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NzYxNDM0", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#pullrequestreview-457761434", "createdAt": "2020-07-29T18:00:04Z", "commit": {"oid": "5c387808483f7d1e283db00938adcf173ec7ec2f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODowMDowNFrOG5D4Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODowMDowNFrOG5D4Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4NTUxMQ==", "bodyText": "What does valid window mean?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#discussion_r462485511", "createdAt": "2020-07-29T18:00:04Z", "author": {"login": "scholzj"}, "path": "examples/metrics/grafana-dashboards/strimzi-cruise-control.json", "diffHunk": "@@ -0,0 +1,2062 @@\n+{\n+  \"__inputs\": [\n+    {\n+      \"name\": \"DS_PROMETHEUS\",\n+      \"label\": \"Prometheus\",\n+      \"description\": \"\",\n+      \"type\": \"datasource\",\n+      \"pluginId\": \"prometheus\",\n+      \"pluginName\": \"Prometheus\"\n+    }\n+  ],\n+  \"__requires\": [\n+    {\n+      \"type\": \"grafana\",\n+      \"id\": \"grafana\",\n+      \"name\": \"Grafana\",\n+      \"version\": \"6.3.0\"\n+    },\n+    {\n+      \"type\": \"panel\",\n+      \"id\": \"graph\",\n+      \"name\": \"Graph\",\n+      \"version\": \"\"\n+    },\n+    {\n+      \"type\": \"datasource\",\n+      \"id\": \"prometheus\",\n+      \"name\": \"Prometheus\",\n+      \"version\": \"1.0.0\"\n+    },\n+    {\n+      \"type\": \"panel\",\n+      \"id\": \"singlestat\",\n+      \"name\": \"Singlestat\",\n+      \"version\": \"\"\n+    }\n+  ],\n+  \"annotations\": {\n+    \"list\": [\n+      {\n+        \"builtIn\": 1,\n+        \"datasource\": \"-- Grafana --\",\n+        \"enable\": true,\n+        \"hide\": true,\n+        \"iconColor\": \"rgba(0, 211, 255, 1)\",\n+        \"name\": \"Annotations & Alerts\",\n+        \"type\": \"dashboard\"\n+      }\n+    ]\n+  },\n+  \"editable\": true,\n+  \"gnetId\": null,\n+  \"graphTooltip\": 0,\n+  \"id\": null,\n+  \"iteration\": 1596032501954,\n+  \"links\": [],\n+  \"panels\": [\n+    {\n+      \"cacheTimeout\": null,\n+      \"colorBackground\": false,\n+      \"colorValue\": true,\n+      \"colors\": [\n+        \"#d44a3a\",\n+        \"rgba(237, 129, 40, 0.89)\",\n+        \"#299c46\"\n+      ],\n+      \"datasource\": \"${DS_PROMETHEUS}\",\n+      \"description\": \"The number of snapshot windows that is monitored\",\n+      \"format\": \"none\",\n+      \"gauge\": {\n+        \"maxValue\": 100,\n+        \"minValue\": 0,\n+        \"show\": false,\n+        \"thresholdLabels\": false,\n+        \"thresholdMarkers\": true\n+      },\n+      \"gridPos\": {\n+        \"h\": 4,\n+        \"w\": 4,\n+        \"x\": 0,\n+        \"y\": 0\n+      },\n+      \"id\": 46,\n+      \"interval\": null,\n+      \"links\": [],\n+      \"mappingType\": 1,\n+      \"mappingTypes\": [\n+        {\n+          \"name\": \"value to text\",\n+          \"value\": 1\n+        },\n+        {\n+          \"name\": \"range to text\",\n+          \"value\": 2\n+        }\n+      ],\n+      \"maxDataPoints\": 100,\n+      \"nullPointMode\": \"connected\",\n+      \"nullText\": null,\n+      \"options\": {},\n+      \"postfix\": \"\",\n+      \"postfixFontSize\": \"50%\",\n+      \"prefix\": \"\",\n+      \"prefixFontSize\": \"50%\",\n+      \"rangeMaps\": [\n+        {\n+          \"from\": \"null\",\n+          \"text\": \"N/A\",\n+          \"to\": \"null\"\n+        }\n+      ],\n+      \"repeat\": null,\n+      \"repeatDirection\": \"h\",\n+      \"sparkline\": {\n+        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n+        \"full\": false,\n+        \"lineColor\": \"rgb(31, 120, 193)\",\n+        \"show\": false\n+      },\n+      \"tableColumn\": \"\",\n+      \"targets\": [\n+        {\n+          \"expr\": \"kafka_cruisecontrol_loadmonitor_total_monitored_windows_value{namespace=\\\"$kubernetes_namespace\\\",strimzi_io_cluster=\\\"$strimzi_cluster_name\\\"}\",\n+          \"format\": \"time_series\",\n+          \"hide\": false,\n+          \"intervalFactor\": 1,\n+          \"legendFormat\": \"\",\n+          \"refId\": \"A\"\n+        }\n+      ],\n+      \"thresholds\": \"0,2\",\n+      \"title\": \"Total Monitored Windows\",\n+      \"type\": \"singlestat\",\n+      \"valueFontSize\": \"200%\",\n+      \"valueMaps\": [\n+        {\n+          \"op\": \"=\",\n+          \"text\": \"N/A\",\n+          \"value\": \"null\"\n+        }\n+      ],\n+      \"valueName\": \"current\"\n+    },\n+    {\n+      \"cacheTimeout\": null,\n+      \"colorBackground\": false,\n+      \"colorValue\": true,\n+      \"colors\": [\n+        \"#299c46\",\n+        \"#e5ac0e\",\n+        \"#bf1b00\"\n+      ],\n+      \"datasource\": \"${DS_PROMETHEUS}\",\n+      \"description\": \"Number of valid windows\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c387808483f7d1e283db00938adcf173ec7ec2f"}, "originalPosition": 154}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NzYxODQ0", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#pullrequestreview-457761844", "createdAt": "2020-07-29T18:00:35Z", "commit": {"oid": "5c387808483f7d1e283db00938adcf173ec7ec2f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODowMDozNVrOG5D5Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODowMDozNVrOG5D5Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4NTgyMw==", "bodyText": "Should it be are monitored? (just guessing)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  \"description\": \"The number of snapshot windows that is monitored\",\n          \n          \n            \n                  \"description\": \"The number of snapshot windows that is monitored\",", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#discussion_r462485823", "createdAt": "2020-07-29T18:00:35Z", "author": {"login": "scholzj"}, "path": "examples/metrics/grafana-dashboards/strimzi-cruise-control.json", "diffHunk": "@@ -0,0 +1,2062 @@\n+{\n+  \"__inputs\": [\n+    {\n+      \"name\": \"DS_PROMETHEUS\",\n+      \"label\": \"Prometheus\",\n+      \"description\": \"\",\n+      \"type\": \"datasource\",\n+      \"pluginId\": \"prometheus\",\n+      \"pluginName\": \"Prometheus\"\n+    }\n+  ],\n+  \"__requires\": [\n+    {\n+      \"type\": \"grafana\",\n+      \"id\": \"grafana\",\n+      \"name\": \"Grafana\",\n+      \"version\": \"6.3.0\"\n+    },\n+    {\n+      \"type\": \"panel\",\n+      \"id\": \"graph\",\n+      \"name\": \"Graph\",\n+      \"version\": \"\"\n+    },\n+    {\n+      \"type\": \"datasource\",\n+      \"id\": \"prometheus\",\n+      \"name\": \"Prometheus\",\n+      \"version\": \"1.0.0\"\n+    },\n+    {\n+      \"type\": \"panel\",\n+      \"id\": \"singlestat\",\n+      \"name\": \"Singlestat\",\n+      \"version\": \"\"\n+    }\n+  ],\n+  \"annotations\": {\n+    \"list\": [\n+      {\n+        \"builtIn\": 1,\n+        \"datasource\": \"-- Grafana --\",\n+        \"enable\": true,\n+        \"hide\": true,\n+        \"iconColor\": \"rgba(0, 211, 255, 1)\",\n+        \"name\": \"Annotations & Alerts\",\n+        \"type\": \"dashboard\"\n+      }\n+    ]\n+  },\n+  \"editable\": true,\n+  \"gnetId\": null,\n+  \"graphTooltip\": 0,\n+  \"id\": null,\n+  \"iteration\": 1596032501954,\n+  \"links\": [],\n+  \"panels\": [\n+    {\n+      \"cacheTimeout\": null,\n+      \"colorBackground\": false,\n+      \"colorValue\": true,\n+      \"colors\": [\n+        \"#d44a3a\",\n+        \"rgba(237, 129, 40, 0.89)\",\n+        \"#299c46\"\n+      ],\n+      \"datasource\": \"${DS_PROMETHEUS}\",\n+      \"description\": \"The number of snapshot windows that is monitored\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c387808483f7d1e283db00938adcf173ec7ec2f"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NzYyMzUx", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#pullrequestreview-457762351", "createdAt": "2020-07-29T18:01:18Z", "commit": {"oid": "5c387808483f7d1e283db00938adcf173ec7ec2f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODowMToxOFrOG5D6tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODowMToxOFrOG5D6tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4NjE5OQ==", "bodyText": "What does this mean? That the disk died?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#discussion_r462486199", "createdAt": "2020-07-29T18:01:18Z", "author": {"login": "scholzj"}, "path": "examples/metrics/grafana-dashboards/strimzi-cruise-control.json", "diffHunk": "@@ -0,0 +1,2062 @@\n+{\n+  \"__inputs\": [\n+    {\n+      \"name\": \"DS_PROMETHEUS\",\n+      \"label\": \"Prometheus\",\n+      \"description\": \"\",\n+      \"type\": \"datasource\",\n+      \"pluginId\": \"prometheus\",\n+      \"pluginName\": \"Prometheus\"\n+    }\n+  ],\n+  \"__requires\": [\n+    {\n+      \"type\": \"grafana\",\n+      \"id\": \"grafana\",\n+      \"name\": \"Grafana\",\n+      \"version\": \"6.3.0\"\n+    },\n+    {\n+      \"type\": \"panel\",\n+      \"id\": \"graph\",\n+      \"name\": \"Graph\",\n+      \"version\": \"\"\n+    },\n+    {\n+      \"type\": \"datasource\",\n+      \"id\": \"prometheus\",\n+      \"name\": \"Prometheus\",\n+      \"version\": \"1.0.0\"\n+    },\n+    {\n+      \"type\": \"panel\",\n+      \"id\": \"singlestat\",\n+      \"name\": \"Singlestat\",\n+      \"version\": \"\"\n+    }\n+  ],\n+  \"annotations\": {\n+    \"list\": [\n+      {\n+        \"builtIn\": 1,\n+        \"datasource\": \"-- Grafana --\",\n+        \"enable\": true,\n+        \"hide\": true,\n+        \"iconColor\": \"rgba(0, 211, 255, 1)\",\n+        \"name\": \"Annotations & Alerts\",\n+        \"type\": \"dashboard\"\n+      }\n+    ]\n+  },\n+  \"editable\": true,\n+  \"gnetId\": null,\n+  \"graphTooltip\": 0,\n+  \"id\": null,\n+  \"iteration\": 1596032501954,\n+  \"links\": [],\n+  \"panels\": [\n+    {\n+      \"cacheTimeout\": null,\n+      \"colorBackground\": false,\n+      \"colorValue\": true,\n+      \"colors\": [\n+        \"#d44a3a\",\n+        \"rgba(237, 129, 40, 0.89)\",\n+        \"#299c46\"\n+      ],\n+      \"datasource\": \"${DS_PROMETHEUS}\",\n+      \"description\": \"The number of snapshot windows that is monitored\",\n+      \"format\": \"none\",\n+      \"gauge\": {\n+        \"maxValue\": 100,\n+        \"minValue\": 0,\n+        \"show\": false,\n+        \"thresholdLabels\": false,\n+        \"thresholdMarkers\": true\n+      },\n+      \"gridPos\": {\n+        \"h\": 4,\n+        \"w\": 4,\n+        \"x\": 0,\n+        \"y\": 0\n+      },\n+      \"id\": 46,\n+      \"interval\": null,\n+      \"links\": [],\n+      \"mappingType\": 1,\n+      \"mappingTypes\": [\n+        {\n+          \"name\": \"value to text\",\n+          \"value\": 1\n+        },\n+        {\n+          \"name\": \"range to text\",\n+          \"value\": 2\n+        }\n+      ],\n+      \"maxDataPoints\": 100,\n+      \"nullPointMode\": \"connected\",\n+      \"nullText\": null,\n+      \"options\": {},\n+      \"postfix\": \"\",\n+      \"postfixFontSize\": \"50%\",\n+      \"prefix\": \"\",\n+      \"prefixFontSize\": \"50%\",\n+      \"rangeMaps\": [\n+        {\n+          \"from\": \"null\",\n+          \"text\": \"N/A\",\n+          \"to\": \"null\"\n+        }\n+      ],\n+      \"repeat\": null,\n+      \"repeatDirection\": \"h\",\n+      \"sparkline\": {\n+        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n+        \"full\": false,\n+        \"lineColor\": \"rgb(31, 120, 193)\",\n+        \"show\": false\n+      },\n+      \"tableColumn\": \"\",\n+      \"targets\": [\n+        {\n+          \"expr\": \"kafka_cruisecontrol_loadmonitor_total_monitored_windows_value{namespace=\\\"$kubernetes_namespace\\\",strimzi_io_cluster=\\\"$strimzi_cluster_name\\\"}\",\n+          \"format\": \"time_series\",\n+          \"hide\": false,\n+          \"intervalFactor\": 1,\n+          \"legendFormat\": \"\",\n+          \"refId\": \"A\"\n+        }\n+      ],\n+      \"thresholds\": \"0,2\",\n+      \"title\": \"Total Monitored Windows\",\n+      \"type\": \"singlestat\",\n+      \"valueFontSize\": \"200%\",\n+      \"valueMaps\": [\n+        {\n+          \"op\": \"=\",\n+          \"text\": \"N/A\",\n+          \"value\": \"null\"\n+        }\n+      ],\n+      \"valueName\": \"current\"\n+    },\n+    {\n+      \"cacheTimeout\": null,\n+      \"colorBackground\": false,\n+      \"colorValue\": true,\n+      \"colors\": [\n+        \"#299c46\",\n+        \"#e5ac0e\",\n+        \"#bf1b00\"\n+      ],\n+      \"datasource\": \"${DS_PROMETHEUS}\",\n+      \"description\": \"Number of valid windows\",\n+      \"format\": \"none\",\n+      \"gauge\": {\n+        \"maxValue\": 100,\n+        \"minValue\": 0,\n+        \"show\": false,\n+        \"thresholdLabels\": false,\n+        \"thresholdMarkers\": true\n+      },\n+      \"gridPos\": {\n+        \"h\": 4,\n+        \"w\": 4,\n+        \"x\": 4,\n+        \"y\": 0\n+      },\n+      \"id\": 36,\n+      \"interval\": null,\n+      \"links\": [],\n+      \"mappingType\": 1,\n+      \"mappingTypes\": [\n+        {\n+          \"name\": \"value to text\",\n+          \"value\": 1\n+        },\n+        {\n+          \"name\": \"range to text\",\n+          \"value\": 2\n+        }\n+      ],\n+      \"maxDataPoints\": 100,\n+      \"nullPointMode\": \"connected\",\n+      \"nullText\": null,\n+      \"options\": {},\n+      \"postfix\": \"\",\n+      \"postfixFontSize\": \"50%\",\n+      \"prefix\": \"\",\n+      \"prefixFontSize\": \"50%\",\n+      \"rangeMaps\": [\n+        {\n+          \"from\": \"null\",\n+          \"text\": \"N/A\",\n+          \"to\": \"null\"\n+        }\n+      ],\n+      \"sparkline\": {\n+        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n+        \"full\": false,\n+        \"lineColor\": \"rgb(31, 120, 193)\",\n+        \"show\": false\n+      },\n+      \"tableColumn\": \"\",\n+      \"targets\": [\n+        {\n+          \"expr\": \"kafka_cruisecontrol_loadmonitor_valid_windows_value{namespace=\\\"$kubernetes_namespace\\\",strimzi_io_cluster=\\\"$strimzi_cluster_name\\\"}\",\n+          \"format\": \"time_series\",\n+          \"hide\": false,\n+          \"intervalFactor\": 1,\n+          \"refId\": \"A\"\n+        }\n+      ],\n+      \"thresholds\": \"2\",\n+      \"title\": \"Valid Windows\",\n+      \"type\": \"singlestat\",\n+      \"valueFontSize\": \"200%\",\n+      \"valueMaps\": [\n+        {\n+          \"op\": \"=\",\n+          \"text\": \"N/A\",\n+          \"value\": \"null\"\n+        }\n+      ],\n+      \"valueName\": \"current\"\n+    },\n+    {\n+      \"cacheTimeout\": null,\n+      \"colorBackground\": false,\n+      \"colorValue\": true,\n+      \"colors\": [\n+        \"#299c46\",\n+        \"rgba(237, 129, 40, 0.89)\",\n+        \"#d44a3a\"\n+      ],\n+      \"datasource\": \"${DS_PROMETHEUS}\",\n+      \"description\": \"Number of ongoing executions running for proposals or rebalance\",\n+      \"format\": \"none\",\n+      \"gauge\": {\n+        \"maxValue\": 100,\n+        \"minValue\": 0,\n+        \"show\": false,\n+        \"thresholdLabels\": false,\n+        \"thresholdMarkers\": true\n+      },\n+      \"gridPos\": {\n+        \"h\": 4,\n+        \"w\": 4,\n+        \"x\": 8,\n+        \"y\": 0\n+      },\n+      \"id\": 38,\n+      \"interval\": null,\n+      \"links\": [],\n+      \"mappingType\": 1,\n+      \"mappingTypes\": [\n+        {\n+          \"name\": \"value to text\",\n+          \"value\": 1\n+        },\n+        {\n+          \"name\": \"range to text\",\n+          \"value\": 2\n+        }\n+      ],\n+      \"maxDataPoints\": 100,\n+      \"nullPointMode\": \"connected\",\n+      \"nullText\": null,\n+      \"options\": {},\n+      \"postfix\": \"\",\n+      \"postfixFontSize\": \"50%\",\n+      \"prefix\": \"\",\n+      \"prefixFontSize\": \"50%\",\n+      \"rangeMaps\": [\n+        {\n+          \"from\": \"null\",\n+          \"text\": \"N/A\",\n+          \"to\": \"null\"\n+        }\n+      ],\n+      \"sparkline\": {\n+        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n+        \"full\": false,\n+        \"lineColor\": \"rgb(31, 120, 193)\",\n+        \"show\": false\n+      },\n+      \"tableColumn\": \"\",\n+      \"targets\": [\n+        {\n+          \"expr\": \"kafka_cruisecontrol_executor_ongoing_execution_non_kafka_assigner_value{namespace=\\\"$kubernetes_namespace\\\",strimzi_io_cluster=\\\"$strimzi_cluster_name\\\"}\",\n+          \"format\": \"time_series\",\n+          \"hide\": false,\n+          \"intervalFactor\": 1,\n+          \"refId\": \"A\"\n+        }\n+      ],\n+      \"thresholds\": \"2\",\n+      \"title\": \"Ongoing Execution\",\n+      \"type\": \"singlestat\",\n+      \"valueFontSize\": \"200%\",\n+      \"valueMaps\": [\n+        {\n+          \"op\": \"=\",\n+          \"text\": \"N/A\",\n+          \"value\": \"null\"\n+        }\n+      ],\n+      \"valueName\": \"current\"\n+    },\n+    {\n+      \"cacheTimeout\": null,\n+      \"colorBackground\": false,\n+      \"colorValue\": true,\n+      \"colors\": [\n+        \"#299c46\",\n+        \"rgba(237, 129, 40, 0.89)\",\n+        \"#d44a3a\"\n+      ],\n+      \"datasource\": \"${DS_PROMETHEUS}\",\n+      \"description\": \"Balancedness Score\",\n+      \"format\": \"none\",\n+      \"gauge\": {\n+        \"maxValue\": 100,\n+        \"minValue\": 0,\n+        \"show\": false,\n+        \"thresholdLabels\": false,\n+        \"thresholdMarkers\": true\n+      },\n+      \"gridPos\": {\n+        \"h\": 4,\n+        \"w\": 4,\n+        \"x\": 12,\n+        \"y\": 0\n+      },\n+      \"id\": 116,\n+      \"interval\": null,\n+      \"links\": [],\n+      \"mappingType\": 1,\n+      \"mappingTypes\": [\n+        {\n+          \"name\": \"value to text\",\n+          \"value\": 1\n+        },\n+        {\n+          \"name\": \"range to text\",\n+          \"value\": 2\n+        }\n+      ],\n+      \"maxDataPoints\": 100,\n+      \"nullPointMode\": \"connected\",\n+      \"nullText\": null,\n+      \"options\": {},\n+      \"postfix\": \"\",\n+      \"postfixFontSize\": \"50%\",\n+      \"prefix\": \"\",\n+      \"prefixFontSize\": \"50%\",\n+      \"rangeMaps\": [\n+        {\n+          \"from\": \"null\",\n+          \"text\": \"N/A\",\n+          \"to\": \"null\"\n+        }\n+      ],\n+      \"sparkline\": {\n+        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n+        \"full\": false,\n+        \"lineColor\": \"rgb(31, 120, 193)\",\n+        \"show\": false\n+      },\n+      \"tableColumn\": \"\",\n+      \"targets\": [\n+        {\n+          \"expr\": \"kafka_cruisecontrol_anomalydetector_balancedness_score_value{namespace=\\\"$kubernetes_namespace\\\",strimzi_io_cluster=\\\"$strimzi_cluster_name\\\"}\",\n+          \"format\": \"time_series\",\n+          \"hide\": false,\n+          \"intervalFactor\": 1,\n+          \"refId\": \"A\"\n+        }\n+      ],\n+      \"thresholds\": \"2\",\n+      \"title\": \"Balancedness Score\",\n+      \"type\": \"singlestat\",\n+      \"valueFontSize\": \"200%\",\n+      \"valueMaps\": [\n+        {\n+          \"op\": \"=\",\n+          \"text\": \"N/A\",\n+          \"value\": \"null\"\n+        }\n+      ],\n+      \"valueName\": \"current\"\n+    },\n+    {\n+      \"cacheTimeout\": null,\n+      \"colorBackground\": false,\n+      \"colorValue\": true,\n+      \"colors\": [\n+        \"#299c46\",\n+        \"rgba(237, 129, 40, 0.89)\",\n+        \"#d44a3a\"\n+      ],\n+      \"datasource\": \"${DS_PROMETHEUS}\",\n+      \"description\": \"Monitored Partition Percentage\",\n+      \"format\": \"percentunit\",\n+      \"gauge\": {\n+        \"maxValue\": 100,\n+        \"minValue\": 0,\n+        \"show\": false,\n+        \"thresholdLabels\": false,\n+        \"thresholdMarkers\": true\n+      },\n+      \"gridPos\": {\n+        \"h\": 4,\n+        \"w\": 4,\n+        \"x\": 16,\n+        \"y\": 0\n+      },\n+      \"id\": 115,\n+      \"interval\": null,\n+      \"links\": [],\n+      \"mappingType\": 1,\n+      \"mappingTypes\": [\n+        {\n+          \"name\": \"value to text\",\n+          \"value\": 1\n+        },\n+        {\n+          \"name\": \"range to text\",\n+          \"value\": 2\n+        }\n+      ],\n+      \"maxDataPoints\": 100,\n+      \"nullPointMode\": \"connected\",\n+      \"nullText\": null,\n+      \"options\": {},\n+      \"postfix\": \"\",\n+      \"postfixFontSize\": \"50%\",\n+      \"prefix\": \"\",\n+      \"prefixFontSize\": \"50%\",\n+      \"rangeMaps\": [\n+        {\n+          \"from\": \"null\",\n+          \"text\": \"N/A\",\n+          \"to\": \"null\"\n+        }\n+      ],\n+      \"sparkline\": {\n+        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n+        \"full\": false,\n+        \"lineColor\": \"rgb(31, 120, 193)\",\n+        \"show\": false\n+      },\n+      \"tableColumn\": \"\",\n+      \"targets\": [\n+        {\n+          \"expr\": \"kafka_cruisecontrol_loadmonitor_monitored_partitions_percentage_value{namespace=\\\"$kubernetes_namespace\\\",strimzi_io_cluster=\\\"$strimzi_cluster_name\\\"}\",\n+          \"format\": \"time_series\",\n+          \"hide\": false,\n+          \"intervalFactor\": 1,\n+          \"refId\": \"A\"\n+        }\n+      ],\n+      \"thresholds\": \"2\",\n+      \"title\": \"Monitored Partition\",\n+      \"type\": \"singlestat\",\n+      \"valueFontSize\": \"200%\",\n+      \"valueMaps\": [\n+        {\n+          \"op\": \"=\",\n+          \"text\": \"N/A\",\n+          \"value\": \"null\"\n+        }\n+      ],\n+      \"valueName\": \"current\"\n+    },\n+    {\n+      \"gridPos\": {\n+        \"h\": 1,\n+        \"w\": 24,\n+        \"x\": 0,\n+        \"y\": 4\n+      },\n+      \"id\": 114,\n+      \"title\": \"Cruise Control\",\n+      \"type\": \"row\"\n+    },\n+    {\n+      \"aliasColors\": {},\n+      \"bars\": false,\n+      \"dashLength\": 10,\n+      \"dashes\": false,\n+      \"datasource\": \"${DS_PROMETHEUS}\",\n+      \"description\": \"Goal Violation Rate\",\n+      \"fill\": 1,\n+      \"fillGradient\": 0,\n+      \"gridPos\": {\n+        \"h\": 8,\n+        \"w\": 12,\n+        \"x\": 0,\n+        \"y\": 5\n+      },\n+      \"id\": 106,\n+      \"legend\": {\n+        \"alignAsTable\": false,\n+        \"avg\": false,\n+        \"current\": false,\n+        \"hideEmpty\": false,\n+        \"hideZero\": false,\n+        \"max\": false,\n+        \"min\": false,\n+        \"rightSide\": false,\n+        \"show\": true,\n+        \"total\": false,\n+        \"values\": false\n+      },\n+      \"lines\": true,\n+      \"linewidth\": 1,\n+      \"links\": [],\n+      \"nullPointMode\": \"null\",\n+      \"options\": {\n+        \"dataLinks\": []\n+      },\n+      \"paceLength\": 10,\n+      \"percentage\": false,\n+      \"pointradius\": 5,\n+      \"points\": false,\n+      \"renderer\": \"flot\",\n+      \"seriesOverrides\": [],\n+      \"spaceLength\": 10,\n+      \"stack\": false,\n+      \"steppedLine\": false,\n+      \"targets\": [\n+        {\n+          \"expr\": \"sum(irate(kafka_cruisecontrol_anomalydetector_goal_violation_rate_count{namespace=\\\"$kubernetes_namespace\\\",strimzi_io_cluster=\\\"$strimzi_cluster_name\\\",kubernetes_pod_name=~\\\"$strimzi_cluster_name-cruise-control-.*\\\"}[1m]))\",\n+          \"format\": \"time_series\",\n+          \"hide\": false,\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"intervalFactor\": 1,\n+          \"legendFormat\": \"Goal Violation Rate\",\n+          \"refId\": \"A\"\n+        }\n+      ],\n+      \"thresholds\": [],\n+      \"timeFrom\": null,\n+      \"timeRegions\": [],\n+      \"timeShift\": null,\n+      \"title\": \"Goal Violation Rate\",\n+      \"tooltip\": {\n+        \"shared\": true,\n+        \"sort\": 0,\n+        \"value_type\": \"individual\"\n+      },\n+      \"type\": \"graph\",\n+      \"xaxis\": {\n+        \"buckets\": null,\n+        \"mode\": \"time\",\n+        \"name\": null,\n+        \"show\": true,\n+        \"values\": []\n+      },\n+      \"yaxes\": [\n+        {\n+          \"decimals\": null,\n+          \"format\": \"short\",\n+          \"label\": \"violations/sec\",\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        },\n+        {\n+          \"format\": \"short\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        }\n+      ],\n+      \"yaxis\": {\n+        \"align\": false,\n+        \"alignLevel\": null\n+      }\n+    },\n+    {\n+      \"aliasColors\": {},\n+      \"bars\": false,\n+      \"dashLength\": 10,\n+      \"dashes\": false,\n+      \"datasource\": \"${DS_PROMETHEUS}\",\n+      \"description\": \"Disk Failure Rate\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c387808483f7d1e283db00938adcf173ec7ec2f"}, "originalPosition": 592}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NzYzMDMy", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#pullrequestreview-457763032", "createdAt": "2020-07-29T18:02:15Z", "commit": {"oid": "5c387808483f7d1e283db00938adcf173ec7ec2f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODowMjoxNVrOG5D8xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODowMjoxNVrOG5D8xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4NjcyNg==", "bodyText": "Is this number of executed partition movemenets per second or something like that?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#discussion_r462486726", "createdAt": "2020-07-29T18:02:15Z", "author": {"login": "scholzj"}, "path": "examples/metrics/grafana-dashboards/strimzi-cruise-control.json", "diffHunk": "@@ -0,0 +1,2062 @@\n+{\n+  \"__inputs\": [\n+    {\n+      \"name\": \"DS_PROMETHEUS\",\n+      \"label\": \"Prometheus\",\n+      \"description\": \"\",\n+      \"type\": \"datasource\",\n+      \"pluginId\": \"prometheus\",\n+      \"pluginName\": \"Prometheus\"\n+    }\n+  ],\n+  \"__requires\": [\n+    {\n+      \"type\": \"grafana\",\n+      \"id\": \"grafana\",\n+      \"name\": \"Grafana\",\n+      \"version\": \"6.3.0\"\n+    },\n+    {\n+      \"type\": \"panel\",\n+      \"id\": \"graph\",\n+      \"name\": \"Graph\",\n+      \"version\": \"\"\n+    },\n+    {\n+      \"type\": \"datasource\",\n+      \"id\": \"prometheus\",\n+      \"name\": \"Prometheus\",\n+      \"version\": \"1.0.0\"\n+    },\n+    {\n+      \"type\": \"panel\",\n+      \"id\": \"singlestat\",\n+      \"name\": \"Singlestat\",\n+      \"version\": \"\"\n+    }\n+  ],\n+  \"annotations\": {\n+    \"list\": [\n+      {\n+        \"builtIn\": 1,\n+        \"datasource\": \"-- Grafana --\",\n+        \"enable\": true,\n+        \"hide\": true,\n+        \"iconColor\": \"rgba(0, 211, 255, 1)\",\n+        \"name\": \"Annotations & Alerts\",\n+        \"type\": \"dashboard\"\n+      }\n+    ]\n+  },\n+  \"editable\": true,\n+  \"gnetId\": null,\n+  \"graphTooltip\": 0,\n+  \"id\": null,\n+  \"iteration\": 1596032501954,\n+  \"links\": [],\n+  \"panels\": [\n+    {\n+      \"cacheTimeout\": null,\n+      \"colorBackground\": false,\n+      \"colorValue\": true,\n+      \"colors\": [\n+        \"#d44a3a\",\n+        \"rgba(237, 129, 40, 0.89)\",\n+        \"#299c46\"\n+      ],\n+      \"datasource\": \"${DS_PROMETHEUS}\",\n+      \"description\": \"The number of snapshot windows that is monitored\",\n+      \"format\": \"none\",\n+      \"gauge\": {\n+        \"maxValue\": 100,\n+        \"minValue\": 0,\n+        \"show\": false,\n+        \"thresholdLabels\": false,\n+        \"thresholdMarkers\": true\n+      },\n+      \"gridPos\": {\n+        \"h\": 4,\n+        \"w\": 4,\n+        \"x\": 0,\n+        \"y\": 0\n+      },\n+      \"id\": 46,\n+      \"interval\": null,\n+      \"links\": [],\n+      \"mappingType\": 1,\n+      \"mappingTypes\": [\n+        {\n+          \"name\": \"value to text\",\n+          \"value\": 1\n+        },\n+        {\n+          \"name\": \"range to text\",\n+          \"value\": 2\n+        }\n+      ],\n+      \"maxDataPoints\": 100,\n+      \"nullPointMode\": \"connected\",\n+      \"nullText\": null,\n+      \"options\": {},\n+      \"postfix\": \"\",\n+      \"postfixFontSize\": \"50%\",\n+      \"prefix\": \"\",\n+      \"prefixFontSize\": \"50%\",\n+      \"rangeMaps\": [\n+        {\n+          \"from\": \"null\",\n+          \"text\": \"N/A\",\n+          \"to\": \"null\"\n+        }\n+      ],\n+      \"repeat\": null,\n+      \"repeatDirection\": \"h\",\n+      \"sparkline\": {\n+        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n+        \"full\": false,\n+        \"lineColor\": \"rgb(31, 120, 193)\",\n+        \"show\": false\n+      },\n+      \"tableColumn\": \"\",\n+      \"targets\": [\n+        {\n+          \"expr\": \"kafka_cruisecontrol_loadmonitor_total_monitored_windows_value{namespace=\\\"$kubernetes_namespace\\\",strimzi_io_cluster=\\\"$strimzi_cluster_name\\\"}\",\n+          \"format\": \"time_series\",\n+          \"hide\": false,\n+          \"intervalFactor\": 1,\n+          \"legendFormat\": \"\",\n+          \"refId\": \"A\"\n+        }\n+      ],\n+      \"thresholds\": \"0,2\",\n+      \"title\": \"Total Monitored Windows\",\n+      \"type\": \"singlestat\",\n+      \"valueFontSize\": \"200%\",\n+      \"valueMaps\": [\n+        {\n+          \"op\": \"=\",\n+          \"text\": \"N/A\",\n+          \"value\": \"null\"\n+        }\n+      ],\n+      \"valueName\": \"current\"\n+    },\n+    {\n+      \"cacheTimeout\": null,\n+      \"colorBackground\": false,\n+      \"colorValue\": true,\n+      \"colors\": [\n+        \"#299c46\",\n+        \"#e5ac0e\",\n+        \"#bf1b00\"\n+      ],\n+      \"datasource\": \"${DS_PROMETHEUS}\",\n+      \"description\": \"Number of valid windows\",\n+      \"format\": \"none\",\n+      \"gauge\": {\n+        \"maxValue\": 100,\n+        \"minValue\": 0,\n+        \"show\": false,\n+        \"thresholdLabels\": false,\n+        \"thresholdMarkers\": true\n+      },\n+      \"gridPos\": {\n+        \"h\": 4,\n+        \"w\": 4,\n+        \"x\": 4,\n+        \"y\": 0\n+      },\n+      \"id\": 36,\n+      \"interval\": null,\n+      \"links\": [],\n+      \"mappingType\": 1,\n+      \"mappingTypes\": [\n+        {\n+          \"name\": \"value to text\",\n+          \"value\": 1\n+        },\n+        {\n+          \"name\": \"range to text\",\n+          \"value\": 2\n+        }\n+      ],\n+      \"maxDataPoints\": 100,\n+      \"nullPointMode\": \"connected\",\n+      \"nullText\": null,\n+      \"options\": {},\n+      \"postfix\": \"\",\n+      \"postfixFontSize\": \"50%\",\n+      \"prefix\": \"\",\n+      \"prefixFontSize\": \"50%\",\n+      \"rangeMaps\": [\n+        {\n+          \"from\": \"null\",\n+          \"text\": \"N/A\",\n+          \"to\": \"null\"\n+        }\n+      ],\n+      \"sparkline\": {\n+        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n+        \"full\": false,\n+        \"lineColor\": \"rgb(31, 120, 193)\",\n+        \"show\": false\n+      },\n+      \"tableColumn\": \"\",\n+      \"targets\": [\n+        {\n+          \"expr\": \"kafka_cruisecontrol_loadmonitor_valid_windows_value{namespace=\\\"$kubernetes_namespace\\\",strimzi_io_cluster=\\\"$strimzi_cluster_name\\\"}\",\n+          \"format\": \"time_series\",\n+          \"hide\": false,\n+          \"intervalFactor\": 1,\n+          \"refId\": \"A\"\n+        }\n+      ],\n+      \"thresholds\": \"2\",\n+      \"title\": \"Valid Windows\",\n+      \"type\": \"singlestat\",\n+      \"valueFontSize\": \"200%\",\n+      \"valueMaps\": [\n+        {\n+          \"op\": \"=\",\n+          \"text\": \"N/A\",\n+          \"value\": \"null\"\n+        }\n+      ],\n+      \"valueName\": \"current\"\n+    },\n+    {\n+      \"cacheTimeout\": null,\n+      \"colorBackground\": false,\n+      \"colorValue\": true,\n+      \"colors\": [\n+        \"#299c46\",\n+        \"rgba(237, 129, 40, 0.89)\",\n+        \"#d44a3a\"\n+      ],\n+      \"datasource\": \"${DS_PROMETHEUS}\",\n+      \"description\": \"Number of ongoing executions running for proposals or rebalance\",\n+      \"format\": \"none\",\n+      \"gauge\": {\n+        \"maxValue\": 100,\n+        \"minValue\": 0,\n+        \"show\": false,\n+        \"thresholdLabels\": false,\n+        \"thresholdMarkers\": true\n+      },\n+      \"gridPos\": {\n+        \"h\": 4,\n+        \"w\": 4,\n+        \"x\": 8,\n+        \"y\": 0\n+      },\n+      \"id\": 38,\n+      \"interval\": null,\n+      \"links\": [],\n+      \"mappingType\": 1,\n+      \"mappingTypes\": [\n+        {\n+          \"name\": \"value to text\",\n+          \"value\": 1\n+        },\n+        {\n+          \"name\": \"range to text\",\n+          \"value\": 2\n+        }\n+      ],\n+      \"maxDataPoints\": 100,\n+      \"nullPointMode\": \"connected\",\n+      \"nullText\": null,\n+      \"options\": {},\n+      \"postfix\": \"\",\n+      \"postfixFontSize\": \"50%\",\n+      \"prefix\": \"\",\n+      \"prefixFontSize\": \"50%\",\n+      \"rangeMaps\": [\n+        {\n+          \"from\": \"null\",\n+          \"text\": \"N/A\",\n+          \"to\": \"null\"\n+        }\n+      ],\n+      \"sparkline\": {\n+        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n+        \"full\": false,\n+        \"lineColor\": \"rgb(31, 120, 193)\",\n+        \"show\": false\n+      },\n+      \"tableColumn\": \"\",\n+      \"targets\": [\n+        {\n+          \"expr\": \"kafka_cruisecontrol_executor_ongoing_execution_non_kafka_assigner_value{namespace=\\\"$kubernetes_namespace\\\",strimzi_io_cluster=\\\"$strimzi_cluster_name\\\"}\",\n+          \"format\": \"time_series\",\n+          \"hide\": false,\n+          \"intervalFactor\": 1,\n+          \"refId\": \"A\"\n+        }\n+      ],\n+      \"thresholds\": \"2\",\n+      \"title\": \"Ongoing Execution\",\n+      \"type\": \"singlestat\",\n+      \"valueFontSize\": \"200%\",\n+      \"valueMaps\": [\n+        {\n+          \"op\": \"=\",\n+          \"text\": \"N/A\",\n+          \"value\": \"null\"\n+        }\n+      ],\n+      \"valueName\": \"current\"\n+    },\n+    {\n+      \"cacheTimeout\": null,\n+      \"colorBackground\": false,\n+      \"colorValue\": true,\n+      \"colors\": [\n+        \"#299c46\",\n+        \"rgba(237, 129, 40, 0.89)\",\n+        \"#d44a3a\"\n+      ],\n+      \"datasource\": \"${DS_PROMETHEUS}\",\n+      \"description\": \"Balancedness Score\",\n+      \"format\": \"none\",\n+      \"gauge\": {\n+        \"maxValue\": 100,\n+        \"minValue\": 0,\n+        \"show\": false,\n+        \"thresholdLabels\": false,\n+        \"thresholdMarkers\": true\n+      },\n+      \"gridPos\": {\n+        \"h\": 4,\n+        \"w\": 4,\n+        \"x\": 12,\n+        \"y\": 0\n+      },\n+      \"id\": 116,\n+      \"interval\": null,\n+      \"links\": [],\n+      \"mappingType\": 1,\n+      \"mappingTypes\": [\n+        {\n+          \"name\": \"value to text\",\n+          \"value\": 1\n+        },\n+        {\n+          \"name\": \"range to text\",\n+          \"value\": 2\n+        }\n+      ],\n+      \"maxDataPoints\": 100,\n+      \"nullPointMode\": \"connected\",\n+      \"nullText\": null,\n+      \"options\": {},\n+      \"postfix\": \"\",\n+      \"postfixFontSize\": \"50%\",\n+      \"prefix\": \"\",\n+      \"prefixFontSize\": \"50%\",\n+      \"rangeMaps\": [\n+        {\n+          \"from\": \"null\",\n+          \"text\": \"N/A\",\n+          \"to\": \"null\"\n+        }\n+      ],\n+      \"sparkline\": {\n+        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n+        \"full\": false,\n+        \"lineColor\": \"rgb(31, 120, 193)\",\n+        \"show\": false\n+      },\n+      \"tableColumn\": \"\",\n+      \"targets\": [\n+        {\n+          \"expr\": \"kafka_cruisecontrol_anomalydetector_balancedness_score_value{namespace=\\\"$kubernetes_namespace\\\",strimzi_io_cluster=\\\"$strimzi_cluster_name\\\"}\",\n+          \"format\": \"time_series\",\n+          \"hide\": false,\n+          \"intervalFactor\": 1,\n+          \"refId\": \"A\"\n+        }\n+      ],\n+      \"thresholds\": \"2\",\n+      \"title\": \"Balancedness Score\",\n+      \"type\": \"singlestat\",\n+      \"valueFontSize\": \"200%\",\n+      \"valueMaps\": [\n+        {\n+          \"op\": \"=\",\n+          \"text\": \"N/A\",\n+          \"value\": \"null\"\n+        }\n+      ],\n+      \"valueName\": \"current\"\n+    },\n+    {\n+      \"cacheTimeout\": null,\n+      \"colorBackground\": false,\n+      \"colorValue\": true,\n+      \"colors\": [\n+        \"#299c46\",\n+        \"rgba(237, 129, 40, 0.89)\",\n+        \"#d44a3a\"\n+      ],\n+      \"datasource\": \"${DS_PROMETHEUS}\",\n+      \"description\": \"Monitored Partition Percentage\",\n+      \"format\": \"percentunit\",\n+      \"gauge\": {\n+        \"maxValue\": 100,\n+        \"minValue\": 0,\n+        \"show\": false,\n+        \"thresholdLabels\": false,\n+        \"thresholdMarkers\": true\n+      },\n+      \"gridPos\": {\n+        \"h\": 4,\n+        \"w\": 4,\n+        \"x\": 16,\n+        \"y\": 0\n+      },\n+      \"id\": 115,\n+      \"interval\": null,\n+      \"links\": [],\n+      \"mappingType\": 1,\n+      \"mappingTypes\": [\n+        {\n+          \"name\": \"value to text\",\n+          \"value\": 1\n+        },\n+        {\n+          \"name\": \"range to text\",\n+          \"value\": 2\n+        }\n+      ],\n+      \"maxDataPoints\": 100,\n+      \"nullPointMode\": \"connected\",\n+      \"nullText\": null,\n+      \"options\": {},\n+      \"postfix\": \"\",\n+      \"postfixFontSize\": \"50%\",\n+      \"prefix\": \"\",\n+      \"prefixFontSize\": \"50%\",\n+      \"rangeMaps\": [\n+        {\n+          \"from\": \"null\",\n+          \"text\": \"N/A\",\n+          \"to\": \"null\"\n+        }\n+      ],\n+      \"sparkline\": {\n+        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n+        \"full\": false,\n+        \"lineColor\": \"rgb(31, 120, 193)\",\n+        \"show\": false\n+      },\n+      \"tableColumn\": \"\",\n+      \"targets\": [\n+        {\n+          \"expr\": \"kafka_cruisecontrol_loadmonitor_monitored_partitions_percentage_value{namespace=\\\"$kubernetes_namespace\\\",strimzi_io_cluster=\\\"$strimzi_cluster_name\\\"}\",\n+          \"format\": \"time_series\",\n+          \"hide\": false,\n+          \"intervalFactor\": 1,\n+          \"refId\": \"A\"\n+        }\n+      ],\n+      \"thresholds\": \"2\",\n+      \"title\": \"Monitored Partition\",\n+      \"type\": \"singlestat\",\n+      \"valueFontSize\": \"200%\",\n+      \"valueMaps\": [\n+        {\n+          \"op\": \"=\",\n+          \"text\": \"N/A\",\n+          \"value\": \"null\"\n+        }\n+      ],\n+      \"valueName\": \"current\"\n+    },\n+    {\n+      \"gridPos\": {\n+        \"h\": 1,\n+        \"w\": 24,\n+        \"x\": 0,\n+        \"y\": 4\n+      },\n+      \"id\": 114,\n+      \"title\": \"Cruise Control\",\n+      \"type\": \"row\"\n+    },\n+    {\n+      \"aliasColors\": {},\n+      \"bars\": false,\n+      \"dashLength\": 10,\n+      \"dashes\": false,\n+      \"datasource\": \"${DS_PROMETHEUS}\",\n+      \"description\": \"Goal Violation Rate\",\n+      \"fill\": 1,\n+      \"fillGradient\": 0,\n+      \"gridPos\": {\n+        \"h\": 8,\n+        \"w\": 12,\n+        \"x\": 0,\n+        \"y\": 5\n+      },\n+      \"id\": 106,\n+      \"legend\": {\n+        \"alignAsTable\": false,\n+        \"avg\": false,\n+        \"current\": false,\n+        \"hideEmpty\": false,\n+        \"hideZero\": false,\n+        \"max\": false,\n+        \"min\": false,\n+        \"rightSide\": false,\n+        \"show\": true,\n+        \"total\": false,\n+        \"values\": false\n+      },\n+      \"lines\": true,\n+      \"linewidth\": 1,\n+      \"links\": [],\n+      \"nullPointMode\": \"null\",\n+      \"options\": {\n+        \"dataLinks\": []\n+      },\n+      \"paceLength\": 10,\n+      \"percentage\": false,\n+      \"pointradius\": 5,\n+      \"points\": false,\n+      \"renderer\": \"flot\",\n+      \"seriesOverrides\": [],\n+      \"spaceLength\": 10,\n+      \"stack\": false,\n+      \"steppedLine\": false,\n+      \"targets\": [\n+        {\n+          \"expr\": \"sum(irate(kafka_cruisecontrol_anomalydetector_goal_violation_rate_count{namespace=\\\"$kubernetes_namespace\\\",strimzi_io_cluster=\\\"$strimzi_cluster_name\\\",kubernetes_pod_name=~\\\"$strimzi_cluster_name-cruise-control-.*\\\"}[1m]))\",\n+          \"format\": \"time_series\",\n+          \"hide\": false,\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"intervalFactor\": 1,\n+          \"legendFormat\": \"Goal Violation Rate\",\n+          \"refId\": \"A\"\n+        }\n+      ],\n+      \"thresholds\": [],\n+      \"timeFrom\": null,\n+      \"timeRegions\": [],\n+      \"timeShift\": null,\n+      \"title\": \"Goal Violation Rate\",\n+      \"tooltip\": {\n+        \"shared\": true,\n+        \"sort\": 0,\n+        \"value_type\": \"individual\"\n+      },\n+      \"type\": \"graph\",\n+      \"xaxis\": {\n+        \"buckets\": null,\n+        \"mode\": \"time\",\n+        \"name\": null,\n+        \"show\": true,\n+        \"values\": []\n+      },\n+      \"yaxes\": [\n+        {\n+          \"decimals\": null,\n+          \"format\": \"short\",\n+          \"label\": \"violations/sec\",\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        },\n+        {\n+          \"format\": \"short\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        }\n+      ],\n+      \"yaxis\": {\n+        \"align\": false,\n+        \"alignLevel\": null\n+      }\n+    },\n+    {\n+      \"aliasColors\": {},\n+      \"bars\": false,\n+      \"dashLength\": 10,\n+      \"dashes\": false,\n+      \"datasource\": \"${DS_PROMETHEUS}\",\n+      \"description\": \"Disk Failure Rate\",\n+      \"fill\": 1,\n+      \"fillGradient\": 0,\n+      \"gridPos\": {\n+        \"h\": 8,\n+        \"w\": 12,\n+        \"x\": 12,\n+        \"y\": 5\n+      },\n+      \"id\": 107,\n+      \"legend\": {\n+        \"alignAsTable\": false,\n+        \"avg\": false,\n+        \"current\": false,\n+        \"hideEmpty\": false,\n+        \"hideZero\": false,\n+        \"max\": false,\n+        \"min\": false,\n+        \"rightSide\": false,\n+        \"show\": true,\n+        \"total\": false,\n+        \"values\": false\n+      },\n+      \"lines\": true,\n+      \"linewidth\": 1,\n+      \"links\": [],\n+      \"nullPointMode\": \"null\",\n+      \"options\": {\n+        \"dataLinks\": []\n+      },\n+      \"paceLength\": 10,\n+      \"percentage\": false,\n+      \"pointradius\": 5,\n+      \"points\": false,\n+      \"renderer\": \"flot\",\n+      \"seriesOverrides\": [],\n+      \"spaceLength\": 10,\n+      \"stack\": false,\n+      \"steppedLine\": false,\n+      \"targets\": [\n+        {\n+          \"expr\": \"sum(irate(kafka_cruisecontrol_anomalydetector_disk_failure_rate_count{namespace=\\\"$kubernetes_namespace\\\",strimzi_io_cluster=\\\"$strimzi_cluster_name\\\",kubernetes_pod_name=~\\\"$strimzi_cluster_name-cruise-control-.*\\\"}[1m]))\",\n+          \"format\": \"time_series\",\n+          \"hide\": false,\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"intervalFactor\": 1,\n+          \"legendFormat\": \"Disk Failure Rate\",\n+          \"refId\": \"A\"\n+        }\n+      ],\n+      \"thresholds\": [],\n+      \"timeFrom\": null,\n+      \"timeRegions\": [],\n+      \"timeShift\": null,\n+      \"title\": \"Disk Failure Rate\",\n+      \"tooltip\": {\n+        \"shared\": true,\n+        \"sort\": 0,\n+        \"value_type\": \"individual\"\n+      },\n+      \"type\": \"graph\",\n+      \"xaxis\": {\n+        \"buckets\": null,\n+        \"mode\": \"time\",\n+        \"name\": null,\n+        \"show\": true,\n+        \"values\": []\n+      },\n+      \"yaxes\": [\n+        {\n+          \"decimals\": null,\n+          \"format\": \"short\",\n+          \"label\": \"failures/sec\",\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        },\n+        {\n+          \"format\": \"short\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        }\n+      ],\n+      \"yaxis\": {\n+        \"align\": false,\n+        \"alignLevel\": null\n+      }\n+    },\n+    {\n+      \"aliasColors\": {},\n+      \"bars\": false,\n+      \"dashLength\": 10,\n+      \"dashes\": false,\n+      \"datasource\": \"${DS_PROMETHEUS}\",\n+      \"description\": \"Partition Samples Fetcher Failure Rate\",\n+      \"fill\": 1,\n+      \"fillGradient\": 0,\n+      \"gridPos\": {\n+        \"h\": 8,\n+        \"w\": 12,\n+        \"x\": 0,\n+        \"y\": 13\n+      },\n+      \"id\": 117,\n+      \"legend\": {\n+        \"alignAsTable\": false,\n+        \"avg\": false,\n+        \"current\": false,\n+        \"hideEmpty\": false,\n+        \"hideZero\": false,\n+        \"max\": false,\n+        \"min\": false,\n+        \"rightSide\": false,\n+        \"show\": true,\n+        \"total\": false,\n+        \"values\": false\n+      },\n+      \"lines\": true,\n+      \"linewidth\": 1,\n+      \"links\": [],\n+      \"nullPointMode\": \"null\",\n+      \"options\": {\n+        \"dataLinks\": []\n+      },\n+      \"paceLength\": 10,\n+      \"percentage\": false,\n+      \"pointradius\": 5,\n+      \"points\": false,\n+      \"renderer\": \"flot\",\n+      \"seriesOverrides\": [],\n+      \"spaceLength\": 10,\n+      \"stack\": false,\n+      \"steppedLine\": false,\n+      \"targets\": [\n+        {\n+          \"expr\": \"sum(irate(kafka_cruisecontrol_metricfetchermanager_partition_samples_fetcher_failure_rate_count{namespace=\\\"$kubernetes_namespace\\\",strimzi_io_cluster=\\\"$strimzi_cluster_name\\\",kubernetes_pod_name=~\\\"$strimzi_cluster_name-cruise-control-.*\\\"}[1m]))\",\n+          \"format\": \"time_series\",\n+          \"hide\": false,\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"intervalFactor\": 1,\n+          \"legendFormat\": \"Partition Samples Fetcher Failure Rate\",\n+          \"refId\": \"A\"\n+        }\n+      ],\n+      \"thresholds\": [],\n+      \"timeFrom\": null,\n+      \"timeRegions\": [],\n+      \"timeShift\": null,\n+      \"title\": \"Partition Samples Fetcher Failure Rate\",\n+      \"tooltip\": {\n+        \"shared\": true,\n+        \"sort\": 0,\n+        \"value_type\": \"individual\"\n+      },\n+      \"type\": \"graph\",\n+      \"xaxis\": {\n+        \"buckets\": null,\n+        \"mode\": \"time\",\n+        \"name\": null,\n+        \"show\": true,\n+        \"values\": []\n+      },\n+      \"yaxes\": [\n+        {\n+          \"decimals\": null,\n+          \"format\": \"short\",\n+          \"label\": \"failures/sec\",\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        },\n+        {\n+          \"format\": \"short\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        }\n+      ],\n+      \"yaxis\": {\n+        \"align\": false,\n+        \"alignLevel\": null\n+      }\n+    },\n+    {\n+      \"aliasColors\": {},\n+      \"bars\": false,\n+      \"dashLength\": 10,\n+      \"dashes\": false,\n+      \"datasource\": \"${DS_PROMETHEUS}\",\n+      \"description\": \"Training Samples Fetcher Failure Rate\",\n+      \"fill\": 1,\n+      \"fillGradient\": 0,\n+      \"gridPos\": {\n+        \"h\": 8,\n+        \"w\": 12,\n+        \"x\": 12,\n+        \"y\": 13\n+      },\n+      \"id\": 118,\n+      \"legend\": {\n+        \"alignAsTable\": false,\n+        \"avg\": false,\n+        \"current\": false,\n+        \"hideEmpty\": false,\n+        \"hideZero\": false,\n+        \"max\": false,\n+        \"min\": false,\n+        \"rightSide\": false,\n+        \"show\": true,\n+        \"total\": false,\n+        \"values\": false\n+      },\n+      \"lines\": true,\n+      \"linewidth\": 1,\n+      \"links\": [],\n+      \"nullPointMode\": \"null\",\n+      \"options\": {\n+        \"dataLinks\": []\n+      },\n+      \"paceLength\": 10,\n+      \"percentage\": false,\n+      \"pointradius\": 5,\n+      \"points\": false,\n+      \"renderer\": \"flot\",\n+      \"seriesOverrides\": [],\n+      \"spaceLength\": 10,\n+      \"stack\": false,\n+      \"steppedLine\": false,\n+      \"targets\": [\n+        {\n+          \"expr\": \"sum(irate(kafka_cruisecontrol_metricfetchermanager_training_samples_fetcher_failure_rate_count{namespace=\\\"$kubernetes_namespace\\\",strimzi_io_cluster=\\\"$strimzi_cluster_name\\\",kubernetes_pod_name=~\\\"$strimzi_cluster_name-cruise-control-.*\\\"}[1m]))\",\n+          \"format\": \"time_series\",\n+          \"hide\": false,\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"intervalFactor\": 1,\n+          \"legendFormat\": \"Training Samples Fetcher Failure Rate\",\n+          \"refId\": \"A\"\n+        }\n+      ],\n+      \"thresholds\": [],\n+      \"timeFrom\": null,\n+      \"timeRegions\": [],\n+      \"timeShift\": null,\n+      \"title\": \"Training Samples Fetcher Failure Rate\",\n+      \"tooltip\": {\n+        \"shared\": true,\n+        \"sort\": 0,\n+        \"value_type\": \"individual\"\n+      },\n+      \"type\": \"graph\",\n+      \"xaxis\": {\n+        \"buckets\": null,\n+        \"mode\": \"time\",\n+        \"name\": null,\n+        \"show\": true,\n+        \"values\": []\n+      },\n+      \"yaxes\": [\n+        {\n+          \"decimals\": null,\n+          \"format\": \"short\",\n+          \"label\": \"failures/sec\",\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        },\n+        {\n+          \"format\": \"short\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        }\n+      ],\n+      \"yaxis\": {\n+        \"align\": false,\n+        \"alignLevel\": null\n+      }\n+    },\n+    {\n+      \"aliasColors\": {},\n+      \"bars\": false,\n+      \"dashLength\": 10,\n+      \"dashes\": false,\n+      \"datasource\": \"${DS_PROMETHEUS}\",\n+      \"description\": \"Proposal Computation Time\",\n+      \"fill\": 1,\n+      \"fillGradient\": 0,\n+      \"gridPos\": {\n+        \"h\": 8,\n+        \"w\": 12,\n+        \"x\": 0,\n+        \"y\": 21\n+      },\n+      \"id\": 109,\n+      \"legend\": {\n+        \"alignAsTable\": false,\n+        \"avg\": false,\n+        \"current\": false,\n+        \"hideEmpty\": false,\n+        \"hideZero\": false,\n+        \"max\": false,\n+        \"min\": false,\n+        \"rightSide\": false,\n+        \"show\": true,\n+        \"total\": false,\n+        \"values\": false\n+      },\n+      \"lines\": true,\n+      \"linewidth\": 1,\n+      \"links\": [],\n+      \"nullPointMode\": \"null\",\n+      \"options\": {\n+        \"dataLinks\": []\n+      },\n+      \"paceLength\": 10,\n+      \"percentage\": false,\n+      \"pointradius\": 5,\n+      \"points\": false,\n+      \"renderer\": \"flot\",\n+      \"seriesOverrides\": [],\n+      \"spaceLength\": 10,\n+      \"stack\": false,\n+      \"steppedLine\": false,\n+      \"targets\": [\n+        {\n+          \"expr\": \"kafka_cruisecontrol_goaloptimizer_proposal_computation_timer_max{namespace=\\\"$kubernetes_namespace\\\",strimzi_io_cluster=\\\"$strimzi_cluster_name\\\",kubernetes_pod_name=~\\\"$strimzi_cluster_name-cruise-control-.*\\\"}\",\n+          \"format\": \"time_series\",\n+          \"hide\": false,\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"intervalFactor\": 1,\n+          \"legendFormat\": \"max\",\n+          \"refId\": \"A\"\n+        },\n+        {\n+          \"expr\": \"kafka_cruisecontrol_goaloptimizer_proposal_computation_timer_mean{namespace=\\\"$kubernetes_namespace\\\",strimzi_io_cluster=\\\"$strimzi_cluster_name\\\",kubernetes_pod_name=~\\\"$strimzi_cluster_name-cruise-control-.*\\\"}\",\n+          \"legendFormat\": \"mean\",\n+          \"refId\": \"B\"\n+        },\n+        {\n+          \"expr\": \"kafka_cruisecontrol_goaloptimizer_proposal_computation_timer_99thpercentile{namespace=\\\"$kubernetes_namespace\\\",strimzi_io_cluster=\\\"$strimzi_cluster_name\\\",kubernetes_pod_name=~\\\"$strimzi_cluster_name-cruise-control-.*\\\"}\",\n+          \"legendFormat\": \"99th\",\n+          \"refId\": \"C\"\n+        },\n+        {\n+          \"expr\": \"kafka_cruisecontrol_goaloptimizer_proposal_computation_timer_999thpercentile{namespace=\\\"$kubernetes_namespace\\\",strimzi_io_cluster=\\\"$strimzi_cluster_name\\\",kubernetes_pod_name=~\\\"$strimzi_cluster_name-cruise-control-.*\\\"}\",\n+          \"legendFormat\": \"99.90th\",\n+          \"refId\": \"D\"\n+        }\n+      ],\n+      \"thresholds\": [],\n+      \"timeFrom\": null,\n+      \"timeRegions\": [],\n+      \"timeShift\": null,\n+      \"title\": \"Proposal Computation Time\",\n+      \"tooltip\": {\n+        \"shared\": true,\n+        \"sort\": 0,\n+        \"value_type\": \"individual\"\n+      },\n+      \"type\": \"graph\",\n+      \"xaxis\": {\n+        \"buckets\": null,\n+        \"mode\": \"time\",\n+        \"name\": null,\n+        \"show\": true,\n+        \"values\": []\n+      },\n+      \"yaxes\": [\n+        {\n+          \"decimals\": null,\n+          \"format\": \"short\",\n+          \"label\": \"ms\",\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        },\n+        {\n+          \"format\": \"short\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        }\n+      ],\n+      \"yaxis\": {\n+        \"align\": false,\n+        \"alignLevel\": null\n+      }\n+    },\n+    {\n+      \"aliasColors\": {\n+        \"99th\": \"light-blue\"\n+      },\n+      \"bars\": false,\n+      \"dashLength\": 10,\n+      \"dashes\": false,\n+      \"datasource\": \"${DS_PROMETHEUS}\",\n+      \"description\": \"Cluster Model Creation Time\",\n+      \"fill\": 1,\n+      \"fillGradient\": 0,\n+      \"gridPos\": {\n+        \"h\": 8,\n+        \"w\": 12,\n+        \"x\": 12,\n+        \"y\": 21\n+      },\n+      \"id\": 111,\n+      \"legend\": {\n+        \"alignAsTable\": false,\n+        \"avg\": false,\n+        \"current\": false,\n+        \"hideEmpty\": false,\n+        \"hideZero\": false,\n+        \"max\": false,\n+        \"min\": false,\n+        \"rightSide\": false,\n+        \"show\": true,\n+        \"total\": false,\n+        \"values\": false\n+      },\n+      \"lines\": true,\n+      \"linewidth\": 1,\n+      \"links\": [],\n+      \"nullPointMode\": \"null\",\n+      \"options\": {\n+        \"dataLinks\": []\n+      },\n+      \"paceLength\": 10,\n+      \"percentage\": false,\n+      \"pointradius\": 5,\n+      \"points\": false,\n+      \"renderer\": \"flot\",\n+      \"seriesOverrides\": [],\n+      \"spaceLength\": 10,\n+      \"stack\": false,\n+      \"steppedLine\": false,\n+      \"targets\": [\n+        {\n+          \"expr\": \"kafka_cruisecontrol_loadmonitor_cluster_model_creation_timer_max{namespace=\\\"$kubernetes_namespace\\\",strimzi_io_cluster=\\\"$strimzi_cluster_name\\\",kubernetes_pod_name=~\\\"$strimzi_cluster_name-cruise-control-.*\\\"}\",\n+          \"format\": \"time_series\",\n+          \"hide\": false,\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"intervalFactor\": 1,\n+          \"legendFormat\": \"max\",\n+          \"refId\": \"A\"\n+        },\n+        {\n+          \"expr\": \"kafka_cruisecontrol_loadmonitor_cluster_model_creation_timer_mean{namespace=\\\"$kubernetes_namespace\\\",strimzi_io_cluster=\\\"$strimzi_cluster_name\\\",kubernetes_pod_name=~\\\"$strimzi_cluster_name-cruise-control-.*\\\"}\",\n+          \"legendFormat\": \"mean\",\n+          \"refId\": \"B\"\n+        },\n+        {\n+          \"expr\": \"kafka_cruisecontrol_loadmonitor_cluster_model_creation_timer_99thpercentile{namespace=\\\"$kubernetes_namespace\\\",strimzi_io_cluster=\\\"$strimzi_cluster_name\\\",kubernetes_pod_name=~\\\"$strimzi_cluster_name-cruise-control-.*\\\"}\",\n+          \"legendFormat\": \"99th\",\n+          \"refId\": \"C\"\n+        },\n+        {\n+          \"expr\": \"kafka_cruisecontrol_loadmonitor_cluster_model_creation_timer_999thpercentile{namespace=\\\"$kubernetes_namespace\\\",strimzi_io_cluster=\\\"$strimzi_cluster_name\\\",kubernetes_pod_name=~\\\"$strimzi_cluster_name-cruise-control-.*\\\"}\",\n+          \"legendFormat\": \"99.90th\",\n+          \"refId\": \"D\"\n+        }\n+      ],\n+      \"thresholds\": [],\n+      \"timeFrom\": null,\n+      \"timeRegions\": [],\n+      \"timeShift\": null,\n+      \"title\": \"Cluster Model Creation Time\",\n+      \"tooltip\": {\n+        \"shared\": true,\n+        \"sort\": 0,\n+        \"value_type\": \"individual\"\n+      },\n+      \"type\": \"graph\",\n+      \"xaxis\": {\n+        \"buckets\": null,\n+        \"mode\": \"time\",\n+        \"name\": null,\n+        \"show\": true,\n+        \"values\": []\n+      },\n+      \"yaxes\": [\n+        {\n+          \"decimals\": null,\n+          \"format\": \"short\",\n+          \"label\": \"ms\",\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        },\n+        {\n+          \"format\": \"short\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        }\n+      ],\n+      \"yaxis\": {\n+        \"align\": false,\n+        \"alignLevel\": null\n+      }\n+    },\n+    {\n+      \"collapsed\": false,\n+      \"gridPos\": {\n+        \"h\": 1,\n+        \"w\": 24,\n+        \"x\": 0,\n+        \"y\": 29\n+      },\n+      \"id\": 105,\n+      \"panels\": [],\n+      \"title\": \"Cruise Control REST API\",\n+      \"type\": \"row\"\n+    },\n+    {\n+      \"aliasColors\": {},\n+      \"bars\": false,\n+      \"dashLength\": 10,\n+      \"dashes\": false,\n+      \"datasource\": \"${DS_PROMETHEUS}\",\n+      \"description\": \"Rebalance Request Rate\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c387808483f7d1e283db00938adcf173ec7ec2f"}, "originalPosition": 1132}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35e5851626065c79687bb98869926e38b931a338", "author": {"user": {"login": "ppatierno", "name": "Paolo Patierno"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/35e5851626065c79687bb98869926e38b931a338", "committedDate": "2020-07-29T19:09:44Z", "message": "Update derived resources\n\nSigned-off-by: Paolo Patierno <ppatierno@live.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f56ec9209d3b6cb6e3041eb6673ac9524b68220", "author": {"user": {"login": "ppatierno", "name": "Paolo Patierno"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/1f56ec9209d3b6cb6e3041eb6673ac9524b68220", "committedDate": "2020-07-29T19:24:59Z", "message": "Fixed comments\n\nSigned-off-by: Paolo Patierno <ppatierno@live.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3ODYzMDE0", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#pullrequestreview-457863014", "createdAt": "2020-07-29T20:15:29Z", "commit": {"oid": "1f56ec9209d3b6cb6e3041eb6673ac9524b68220"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MzY4Njc5", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#pullrequestreview-458368679", "createdAt": "2020-07-30T12:51:10Z", "commit": {"oid": "1f56ec9209d3b6cb6e3041eb6673ac9524b68220"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjo1MToxMFrOG5hmcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjo1MToxMFrOG5hmcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk3MjUzMQ==", "bodyText": "AFAIK this value is not always going to 100. The user can define how many windows that CC should hold on to.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#discussion_r462972531", "createdAt": "2020-07-30T12:51:10Z", "author": {"login": "tomncooper"}, "path": "examples/metrics/grafana-dashboards/strimzi-cruise-control.json", "diffHunk": "@@ -0,0 +1,2062 @@\n+{\n+  \"__inputs\": [\n+    {\n+      \"name\": \"DS_PROMETHEUS\",\n+      \"label\": \"Prometheus\",\n+      \"description\": \"\",\n+      \"type\": \"datasource\",\n+      \"pluginId\": \"prometheus\",\n+      \"pluginName\": \"Prometheus\"\n+    }\n+  ],\n+  \"__requires\": [\n+    {\n+      \"type\": \"grafana\",\n+      \"id\": \"grafana\",\n+      \"name\": \"Grafana\",\n+      \"version\": \"6.3.0\"\n+    },\n+    {\n+      \"type\": \"panel\",\n+      \"id\": \"graph\",\n+      \"name\": \"Graph\",\n+      \"version\": \"\"\n+    },\n+    {\n+      \"type\": \"datasource\",\n+      \"id\": \"prometheus\",\n+      \"name\": \"Prometheus\",\n+      \"version\": \"1.0.0\"\n+    },\n+    {\n+      \"type\": \"panel\",\n+      \"id\": \"singlestat\",\n+      \"name\": \"Singlestat\",\n+      \"version\": \"\"\n+    }\n+  ],\n+  \"annotations\": {\n+    \"list\": [\n+      {\n+        \"builtIn\": 1,\n+        \"datasource\": \"-- Grafana --\",\n+        \"enable\": true,\n+        \"hide\": true,\n+        \"iconColor\": \"rgba(0, 211, 255, 1)\",\n+        \"name\": \"Annotations & Alerts\",\n+        \"type\": \"dashboard\"\n+      }\n+    ]\n+  },\n+  \"editable\": true,\n+  \"gnetId\": null,\n+  \"graphTooltip\": 0,\n+  \"id\": null,\n+  \"iteration\": 1596037257491,\n+  \"links\": [],\n+  \"panels\": [\n+    {\n+      \"cacheTimeout\": null,\n+      \"colorBackground\": false,\n+      \"colorValue\": true,\n+      \"colors\": [\n+        \"#d44a3a\",\n+        \"rgba(237, 129, 40, 0.89)\",\n+        \"#299c46\"\n+      ],\n+      \"datasource\": \"${DS_PROMETHEUS}\",\n+      \"description\": \"The number of snapshot windows that are monitored\",\n+      \"format\": \"none\",\n+      \"gauge\": {\n+        \"maxValue\": 100,\n+        \"minValue\": 0,\n+        \"show\": false,\n+        \"thresholdLabels\": false,\n+        \"thresholdMarkers\": true\n+      },\n+      \"gridPos\": {\n+        \"h\": 4,\n+        \"w\": 4,\n+        \"x\": 0,\n+        \"y\": 0\n+      },\n+      \"id\": 46,\n+      \"interval\": null,\n+      \"links\": [],\n+      \"mappingType\": 1,\n+      \"mappingTypes\": [\n+        {\n+          \"name\": \"value to text\",\n+          \"value\": 1\n+        },\n+        {\n+          \"name\": \"range to text\",\n+          \"value\": 2\n+        }\n+      ],\n+      \"maxDataPoints\": 100,\n+      \"nullPointMode\": \"connected\",\n+      \"nullText\": null,\n+      \"options\": {},\n+      \"postfix\": \"\",\n+      \"postfixFontSize\": \"50%\",\n+      \"prefix\": \"\",\n+      \"prefixFontSize\": \"50%\",\n+      \"rangeMaps\": [\n+        {\n+          \"from\": \"null\",\n+          \"text\": \"N/A\",\n+          \"to\": \"null\"\n+        }\n+      ],\n+      \"repeat\": null,\n+      \"repeatDirection\": \"h\",\n+      \"sparkline\": {\n+        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n+        \"full\": false,\n+        \"lineColor\": \"rgb(31, 120, 193)\",\n+        \"show\": false\n+      },\n+      \"tableColumn\": \"\",\n+      \"targets\": [\n+        {\n+          \"expr\": \"kafka_cruisecontrol_loadmonitor_total_monitored_windows_value{namespace=\\\"$kubernetes_namespace\\\",strimzi_io_cluster=\\\"$strimzi_cluster_name\\\"}\",\n+          \"format\": \"time_series\",\n+          \"hide\": false,\n+          \"intervalFactor\": 1,\n+          \"legendFormat\": \"\",\n+          \"refId\": \"A\"\n+        }\n+      ],\n+      \"thresholds\": \"0,2\",\n+      \"title\": \"Total Monitored Windows\",\n+      \"type\": \"singlestat\",\n+      \"valueFontSize\": \"200%\",\n+      \"valueMaps\": [\n+        {\n+          \"op\": \"=\",\n+          \"text\": \"N/A\",\n+          \"value\": \"null\"\n+        }\n+      ],\n+      \"valueName\": \"current\"\n+    },\n+    {\n+      \"cacheTimeout\": null,\n+      \"colorBackground\": false,\n+      \"colorValue\": true,\n+      \"colors\": [\n+        \"#299c46\",\n+        \"#e5ac0e\",\n+        \"#bf1b00\"\n+      ],\n+      \"datasource\": \"${DS_PROMETHEUS}\",\n+      \"description\": \"Number of valid windows\",\n+      \"format\": \"none\",\n+      \"gauge\": {\n+        \"maxValue\": 100,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f56ec9209d3b6cb6e3041eb6673ac9524b68220"}, "originalPosition": 157}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NDUwMjI3", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#pullrequestreview-458450227", "createdAt": "2020-07-30T14:22:41Z", "commit": {"oid": "1f56ec9209d3b6cb6e3041eb6673ac9524b68220"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDoyMjo0MlrOG5lUFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDoyMjo0MlrOG5lUFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAzMzM2Nw==", "bodyText": "I'm not sure if this boolean needs to exist if we are always equating it to\n if (metrics != null)\n\nCould always just gate the logic on that? (i.e. line 600)\nThough it does make it minorly easier to generate the netpol. Just thought it was worth mentioning", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#discussion_r463033367", "createdAt": "2020-07-30T14:22:42Z", "author": {"login": "samuel-hawker"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/CruiseControl.java", "diffHunk": "@@ -160,6 +164,7 @@ protected CruiseControl(HasMetadata resource) {\n         this.mountPath = \"/var/lib/kafka\";\n         this.logAndMetricsConfigVolumeName = LOG_AND_METRICS_CONFIG_VOLUME_NAME;\n         this.logAndMetricsConfigMountPath = LOG_AND_METRICS_CONFIG_VOLUME_MOUNT;\n+        this.isMetricsEnabled = DEFAULT_CRUISE_CONTROL_METRICS_ENABLED;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f56ec9209d3b6cb6e3041eb6673ac9524b68220"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c41f73351d3078eb72a3ac8ca48dbfc7a3ca9b2", "author": {"user": {"login": "ppatierno", "name": "Paolo Patierno"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/6c41f73351d3078eb72a3ac8ca48dbfc7a3ca9b2", "committedDate": "2020-07-31T10:00:23Z", "message": "Fixed comments\n\nSigned-off-by: Paolo Patierno <ppatierno@live.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84f0d6d02e8a7d2faa9c5b72d47bca0e9d1b3913", "author": {"user": {"login": "ppatierno", "name": "Paolo Patierno"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/84f0d6d02e8a7d2faa9c5b72d47bca0e9d1b3913", "committedDate": "2020-07-31T11:03:56Z", "message": "Added Cruise Control metrics documentation\n\nSigned-off-by: Paolo Patierno <ppatierno@live.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MDk2MDkx", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#pullrequestreview-459096091", "createdAt": "2020-07-31T11:10:20Z", "commit": {"oid": "84f0d6d02e8a7d2faa9c5b72d47bca0e9d1b3913"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMToxMDoyMFrOG6E2AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMToxMDoyMFrOG6E2AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0OTk1Mw==", "bodyText": "This should be \"optimization proposals\" rather than \"rebalance\" to be consitent with the rest of the docs.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#discussion_r463549953", "createdAt": "2020-07-31T11:10:20Z", "author": {"login": "tomncooper"}, "path": "documentation/assemblies/metrics/assembly_metrics-cruise-control.adoc", "diffHunk": "@@ -0,0 +1,69 @@\n+// This assembly is included in the following assemblies:\n+//\n+// metrics/assembly-metrics.adoc\n+\n+[id='assembly-cruise-control-{context}']\n+= Monitor Cruise Control\n+\n+If you are already using Prometheus and Grafana for monitoring of built-in Kafka metrics, you can configure Prometheus to also scrape the Cruise Control Prometheus endpoint.\n+\n+The example Grafana dashboard for the Cruise Control provides:\n+\n+* Information about rebalance proposals computation, goals violation, cluster balancedness and more", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84f0d6d02e8a7d2faa9c5b72d47bca0e9d1b3913"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MDk3ODU4", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#pullrequestreview-459097858", "createdAt": "2020-07-31T11:14:07Z", "commit": {"oid": "84f0d6d02e8a7d2faa9c5b72d47bca0e9d1b3913"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMToxNDowN1rOG6E7PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMToxNDowN1rOG6E7PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1MTI5Mg==", "bodyText": "The other points don't end with a full stop so, for consitency, you should remove the one at the end of this line.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#discussion_r463551292", "createdAt": "2020-07-31T11:14:07Z", "author": {"login": "tomncooper"}, "path": "documentation/assemblies/metrics/assembly_metrics-cruise-control.adoc", "diffHunk": "@@ -0,0 +1,69 @@\n+// This assembly is included in the following assemblies:\n+//\n+// metrics/assembly-metrics.adoc\n+\n+[id='assembly-cruise-control-{context}']\n+= Monitor Cruise Control\n+\n+If you are already using Prometheus and Grafana for monitoring of built-in Kafka metrics, you can configure Prometheus to also scrape the Cruise Control Prometheus endpoint.\n+\n+The example Grafana dashboard for the Cruise Control provides:\n+\n+* Information about rebalance proposals computation, goals violation, cluster balancedness and more\n+* Information about REST API calls for rebalance proposals and actual rebalance operations\n+* JVM metrics from Cruise Control itself\n+\n+== Configuring Cruise Control\n+\n+You can enable the Cruise Control metrics in the `Kafka` resource using the `cruiseControl.metrics` property that contains the JMX exporter configuration about metrics to expose.\n+\n+For example:\n++\n+[source,yaml,subs=\"attributes+\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: Kafka\n+metadata:\n+  name: my-cluster\n+spec:\n+  # ...\n+  kafka:\n+    # ...\n+  zookeeper:\n+    # ...\n+  cruiseControl:\n+    metrics:\n+      lowercaseOutputName: true\n+      rules:\n+      - pattern: kafka.cruisecontrol<name=(.+)><>(\\w+)\n+        name: kafka_cruisecontrol_$1_$2\n+        type: GAUGE\n+----\n+\n+== Enabling the Cruise Control Grafana dashboard\n+\n+If you deployed Cruise Control with your Kafka cluster with the metrics enabled, you can enable Grafana to present the metrics data it exposes.\n+\n+A Cruise Control dashboard is provided in the `examples/metrics` directory as a JSON file:\n+\n+* `strimzi-cruise-control.json`\n+\n+When metrics data has been collected for some time, the Cruise Control charts are populated.\n+\n+Cruise Control:: Shows metrics for:\n++\n+* The number of snapshot windows that are monitored\n+* Number of time windows considered to be valid because of enough samples for computing a proposal.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84f0d6d02e8a7d2faa9c5b72d47bca0e9d1b3913"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MDk4NDEw", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#pullrequestreview-459098410", "createdAt": "2020-07-31T11:15:19Z", "commit": {"oid": "84f0d6d02e8a7d2faa9c5b72d47bca0e9d1b3913"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMToxNToxOVrOG6E83A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMToxNToxOVrOG6E83A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1MTcwOA==", "bodyText": "\"rebalances\"", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#discussion_r463551708", "createdAt": "2020-07-31T11:15:19Z", "author": {"login": "tomncooper"}, "path": "documentation/assemblies/metrics/assembly_metrics-cruise-control.adoc", "diffHunk": "@@ -0,0 +1,69 @@\n+// This assembly is included in the following assemblies:\n+//\n+// metrics/assembly-metrics.adoc\n+\n+[id='assembly-cruise-control-{context}']\n+= Monitor Cruise Control\n+\n+If you are already using Prometheus and Grafana for monitoring of built-in Kafka metrics, you can configure Prometheus to also scrape the Cruise Control Prometheus endpoint.\n+\n+The example Grafana dashboard for the Cruise Control provides:\n+\n+* Information about rebalance proposals computation, goals violation, cluster balancedness and more\n+* Information about REST API calls for rebalance proposals and actual rebalance operations\n+* JVM metrics from Cruise Control itself\n+\n+== Configuring Cruise Control\n+\n+You can enable the Cruise Control metrics in the `Kafka` resource using the `cruiseControl.metrics` property that contains the JMX exporter configuration about metrics to expose.\n+\n+For example:\n++\n+[source,yaml,subs=\"attributes+\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: Kafka\n+metadata:\n+  name: my-cluster\n+spec:\n+  # ...\n+  kafka:\n+    # ...\n+  zookeeper:\n+    # ...\n+  cruiseControl:\n+    metrics:\n+      lowercaseOutputName: true\n+      rules:\n+      - pattern: kafka.cruisecontrol<name=(.+)><>(\\w+)\n+        name: kafka_cruisecontrol_$1_$2\n+        type: GAUGE\n+----\n+\n+== Enabling the Cruise Control Grafana dashboard\n+\n+If you deployed Cruise Control with your Kafka cluster with the metrics enabled, you can enable Grafana to present the metrics data it exposes.\n+\n+A Cruise Control dashboard is provided in the `examples/metrics` directory as a JSON file:\n+\n+* `strimzi-cruise-control.json`\n+\n+When metrics data has been collected for some time, the Cruise Control charts are populated.\n+\n+Cruise Control:: Shows metrics for:\n++\n+* The number of snapshot windows that are monitored\n+* Number of time windows considered to be valid because of enough samples for computing a proposal.\n+* Number of ongoing executions running for proposals or rebalance", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84f0d6d02e8a7d2faa9c5b72d47bca0e9d1b3913"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MDk4NjQ5", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#pullrequestreview-459098649", "createdAt": "2020-07-31T11:15:46Z", "commit": {"oid": "84f0d6d02e8a7d2faa9c5b72d47bca0e9d1b3913"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMToxNTo0NlrOG6E9nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMToxNTo0NlrOG6E9nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1MTkwMA==", "bodyText": "\"percentage\"", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#discussion_r463551900", "createdAt": "2020-07-31T11:15:46Z", "author": {"login": "tomncooper"}, "path": "documentation/assemblies/metrics/assembly_metrics-cruise-control.adoc", "diffHunk": "@@ -0,0 +1,69 @@\n+// This assembly is included in the following assemblies:\n+//\n+// metrics/assembly-metrics.adoc\n+\n+[id='assembly-cruise-control-{context}']\n+= Monitor Cruise Control\n+\n+If you are already using Prometheus and Grafana for monitoring of built-in Kafka metrics, you can configure Prometheus to also scrape the Cruise Control Prometheus endpoint.\n+\n+The example Grafana dashboard for the Cruise Control provides:\n+\n+* Information about rebalance proposals computation, goals violation, cluster balancedness and more\n+* Information about REST API calls for rebalance proposals and actual rebalance operations\n+* JVM metrics from Cruise Control itself\n+\n+== Configuring Cruise Control\n+\n+You can enable the Cruise Control metrics in the `Kafka` resource using the `cruiseControl.metrics` property that contains the JMX exporter configuration about metrics to expose.\n+\n+For example:\n++\n+[source,yaml,subs=\"attributes+\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: Kafka\n+metadata:\n+  name: my-cluster\n+spec:\n+  # ...\n+  kafka:\n+    # ...\n+  zookeeper:\n+    # ...\n+  cruiseControl:\n+    metrics:\n+      lowercaseOutputName: true\n+      rules:\n+      - pattern: kafka.cruisecontrol<name=(.+)><>(\\w+)\n+        name: kafka_cruisecontrol_$1_$2\n+        type: GAUGE\n+----\n+\n+== Enabling the Cruise Control Grafana dashboard\n+\n+If you deployed Cruise Control with your Kafka cluster with the metrics enabled, you can enable Grafana to present the metrics data it exposes.\n+\n+A Cruise Control dashboard is provided in the `examples/metrics` directory as a JSON file:\n+\n+* `strimzi-cruise-control.json`\n+\n+When metrics data has been collected for some time, the Cruise Control charts are populated.\n+\n+Cruise Control:: Shows metrics for:\n++\n+* The number of snapshot windows that are monitored\n+* Number of time windows considered to be valid because of enough samples for computing a proposal.\n+* Number of ongoing executions running for proposals or rebalance\n+* The current balancedness score of the Kafka cluster as calculated by the anomaly detector (every 5 minutes by default)\n+* The percentafe of monitored partitions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84f0d6d02e8a7d2faa9c5b72d47bca0e9d1b3913"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MDk5NDcy", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#pullrequestreview-459099472", "createdAt": "2020-07-31T11:17:26Z", "commit": {"oid": "84f0d6d02e8a7d2faa9c5b72d47bca0e9d1b3913"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMToxNzoyNlrOG6FALg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMToxNzoyNlrOG6FALg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1MjU1OA==", "bodyText": "Is it a rate? Probably better to say \"the number of goal violations reported by the anomaly detector (every 5 mins by default)\".", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#discussion_r463552558", "createdAt": "2020-07-31T11:17:26Z", "author": {"login": "tomncooper"}, "path": "documentation/assemblies/metrics/assembly_metrics-cruise-control.adoc", "diffHunk": "@@ -0,0 +1,69 @@\n+// This assembly is included in the following assemblies:\n+//\n+// metrics/assembly-metrics.adoc\n+\n+[id='assembly-cruise-control-{context}']\n+= Monitor Cruise Control\n+\n+If you are already using Prometheus and Grafana for monitoring of built-in Kafka metrics, you can configure Prometheus to also scrape the Cruise Control Prometheus endpoint.\n+\n+The example Grafana dashboard for the Cruise Control provides:\n+\n+* Information about rebalance proposals computation, goals violation, cluster balancedness and more\n+* Information about REST API calls for rebalance proposals and actual rebalance operations\n+* JVM metrics from Cruise Control itself\n+\n+== Configuring Cruise Control\n+\n+You can enable the Cruise Control metrics in the `Kafka` resource using the `cruiseControl.metrics` property that contains the JMX exporter configuration about metrics to expose.\n+\n+For example:\n++\n+[source,yaml,subs=\"attributes+\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: Kafka\n+metadata:\n+  name: my-cluster\n+spec:\n+  # ...\n+  kafka:\n+    # ...\n+  zookeeper:\n+    # ...\n+  cruiseControl:\n+    metrics:\n+      lowercaseOutputName: true\n+      rules:\n+      - pattern: kafka.cruisecontrol<name=(.+)><>(\\w+)\n+        name: kafka_cruisecontrol_$1_$2\n+        type: GAUGE\n+----\n+\n+== Enabling the Cruise Control Grafana dashboard\n+\n+If you deployed Cruise Control with your Kafka cluster with the metrics enabled, you can enable Grafana to present the metrics data it exposes.\n+\n+A Cruise Control dashboard is provided in the `examples/metrics` directory as a JSON file:\n+\n+* `strimzi-cruise-control.json`\n+\n+When metrics data has been collected for some time, the Cruise Control charts are populated.\n+\n+Cruise Control:: Shows metrics for:\n++\n+* The number of snapshot windows that are monitored\n+* Number of time windows considered to be valid because of enough samples for computing a proposal.\n+* Number of ongoing executions running for proposals or rebalance\n+* The current balancedness score of the Kafka cluster as calculated by the anomaly detector (every 5 minutes by default)\n+* The percentafe of monitored partitions\n+* How often a goal violation happens", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84f0d6d02e8a7d2faa9c5b72d47bca0e9d1b3913"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MTAwMDI4", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#pullrequestreview-459100028", "createdAt": "2020-07-31T11:18:34Z", "commit": {"oid": "84f0d6d02e8a7d2faa9c5b72d47bca0e9d1b3913"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMToxODozNFrOG6FByg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMToxODozNFrOG6FByg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1Mjk3MA==", "bodyText": "\"Rate of metric sample fetch failures\"", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#discussion_r463552970", "createdAt": "2020-07-31T11:18:34Z", "author": {"login": "tomncooper"}, "path": "documentation/assemblies/metrics/assembly_metrics-cruise-control.adoc", "diffHunk": "@@ -0,0 +1,69 @@\n+// This assembly is included in the following assemblies:\n+//\n+// metrics/assembly-metrics.adoc\n+\n+[id='assembly-cruise-control-{context}']\n+= Monitor Cruise Control\n+\n+If you are already using Prometheus and Grafana for monitoring of built-in Kafka metrics, you can configure Prometheus to also scrape the Cruise Control Prometheus endpoint.\n+\n+The example Grafana dashboard for the Cruise Control provides:\n+\n+* Information about rebalance proposals computation, goals violation, cluster balancedness and more\n+* Information about REST API calls for rebalance proposals and actual rebalance operations\n+* JVM metrics from Cruise Control itself\n+\n+== Configuring Cruise Control\n+\n+You can enable the Cruise Control metrics in the `Kafka` resource using the `cruiseControl.metrics` property that contains the JMX exporter configuration about metrics to expose.\n+\n+For example:\n++\n+[source,yaml,subs=\"attributes+\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: Kafka\n+metadata:\n+  name: my-cluster\n+spec:\n+  # ...\n+  kafka:\n+    # ...\n+  zookeeper:\n+    # ...\n+  cruiseControl:\n+    metrics:\n+      lowercaseOutputName: true\n+      rules:\n+      - pattern: kafka.cruisecontrol<name=(.+)><>(\\w+)\n+        name: kafka_cruisecontrol_$1_$2\n+        type: GAUGE\n+----\n+\n+== Enabling the Cruise Control Grafana dashboard\n+\n+If you deployed Cruise Control with your Kafka cluster with the metrics enabled, you can enable Grafana to present the metrics data it exposes.\n+\n+A Cruise Control dashboard is provided in the `examples/metrics` directory as a JSON file:\n+\n+* `strimzi-cruise-control.json`\n+\n+When metrics data has been collected for some time, the Cruise Control charts are populated.\n+\n+Cruise Control:: Shows metrics for:\n++\n+* The number of snapshot windows that are monitored\n+* Number of time windows considered to be valid because of enough samples for computing a proposal.\n+* Number of ongoing executions running for proposals or rebalance\n+* The current balancedness score of the Kafka cluster as calculated by the anomaly detector (every 5 minutes by default)\n+* The percentafe of monitored partitions\n+* How often a goal violation happens\n+* How often a disk read failure happens on the brokers\n+* Failures rate about fetching samples", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84f0d6d02e8a7d2faa9c5b72d47bca0e9d1b3913"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MTAwMTM2", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#pullrequestreview-459100136", "createdAt": "2020-07-31T11:18:47Z", "commit": {"oid": "84f0d6d02e8a7d2faa9c5b72d47bca0e9d1b3913"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMToxODo0OFrOG6FCHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMToxODo0OFrOG6FCHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1MzA1NQ==", "bodyText": "optimization proposal", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#discussion_r463553055", "createdAt": "2020-07-31T11:18:48Z", "author": {"login": "tomncooper"}, "path": "documentation/assemblies/metrics/assembly_metrics-cruise-control.adoc", "diffHunk": "@@ -0,0 +1,69 @@\n+// This assembly is included in the following assemblies:\n+//\n+// metrics/assembly-metrics.adoc\n+\n+[id='assembly-cruise-control-{context}']\n+= Monitor Cruise Control\n+\n+If you are already using Prometheus and Grafana for monitoring of built-in Kafka metrics, you can configure Prometheus to also scrape the Cruise Control Prometheus endpoint.\n+\n+The example Grafana dashboard for the Cruise Control provides:\n+\n+* Information about rebalance proposals computation, goals violation, cluster balancedness and more\n+* Information about REST API calls for rebalance proposals and actual rebalance operations\n+* JVM metrics from Cruise Control itself\n+\n+== Configuring Cruise Control\n+\n+You can enable the Cruise Control metrics in the `Kafka` resource using the `cruiseControl.metrics` property that contains the JMX exporter configuration about metrics to expose.\n+\n+For example:\n++\n+[source,yaml,subs=\"attributes+\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: Kafka\n+metadata:\n+  name: my-cluster\n+spec:\n+  # ...\n+  kafka:\n+    # ...\n+  zookeeper:\n+    # ...\n+  cruiseControl:\n+    metrics:\n+      lowercaseOutputName: true\n+      rules:\n+      - pattern: kafka.cruisecontrol<name=(.+)><>(\\w+)\n+        name: kafka_cruisecontrol_$1_$2\n+        type: GAUGE\n+----\n+\n+== Enabling the Cruise Control Grafana dashboard\n+\n+If you deployed Cruise Control with your Kafka cluster with the metrics enabled, you can enable Grafana to present the metrics data it exposes.\n+\n+A Cruise Control dashboard is provided in the `examples/metrics` directory as a JSON file:\n+\n+* `strimzi-cruise-control.json`\n+\n+When metrics data has been collected for some time, the Cruise Control charts are populated.\n+\n+Cruise Control:: Shows metrics for:\n++\n+* The number of snapshot windows that are monitored\n+* Number of time windows considered to be valid because of enough samples for computing a proposal.\n+* Number of ongoing executions running for proposals or rebalance\n+* The current balancedness score of the Kafka cluster as calculated by the anomaly detector (every 5 minutes by default)\n+* The percentafe of monitored partitions\n+* How often a goal violation happens\n+* How often a disk read failure happens on the brokers\n+* Failures rate about fetching samples\n+* Time needed for computing a rebalance proposal", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84f0d6d02e8a7d2faa9c5b72d47bca0e9d1b3913"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MTAxMjk0", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#pullrequestreview-459101294", "createdAt": "2020-07-31T11:21:16Z", "commit": {"oid": "84f0d6d02e8a7d2faa9c5b72d47bca0e9d1b3913"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36ca6066b267ae73b025ed4e658784603a4d5a71", "author": {"user": {"login": "ppatierno", "name": "Paolo Patierno"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/36ca6066b267ae73b025ed4e658784603a4d5a71", "committedDate": "2020-07-31T12:58:51Z", "message": "Fixed comments\n\nSigned-off-by: Paolo Patierno <ppatierno@live.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e0afebcc531af76cc05c3b72cd86df4f72abf89", "author": {"user": {"login": "ppatierno", "name": "Paolo Patierno"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/5e0afebcc531af76cc05c3b72cd86df4f72abf89", "committedDate": "2020-07-31T14:17:11Z", "message": "Fixed comments\n\nSigned-off-by: Paolo Patierno <ppatierno@live.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MjE5OTcw", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#pullrequestreview-459219970", "createdAt": "2020-07-31T14:30:44Z", "commit": {"oid": "5e0afebcc531af76cc05c3b72cd86df4f72abf89"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MjM5ODQz", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#pullrequestreview-459239843", "createdAt": "2020-07-31T14:55:38Z", "commit": {"oid": "5e0afebcc531af76cc05c3b72cd86df4f72abf89"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNDo1NTozOFrOG6Lk3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNDo1NTozOFrOG6Lk3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY2MDI1NA==", "bodyText": "At the end of this module there is a bulleted list of metrics for each dashboard\nI suggest adding a new list for Cruise Control.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#discussion_r463660254", "createdAt": "2020-07-31T14:55:38Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/metrics/proc_metrics-grafana-dashboard.adoc", "diffHunk": "@@ -15,6 +15,7 @@ Example dashboards are provided in the `examples/metrics` directory as JSON file\n * `strimzi-kafka-mirror-maker-2.json`\n * `strimzi-operators.json`\n * `strimzi-kafka-bridge.json`\n+* `strimzi-cruise-control.json`\n \n The example dashboards are a good starting point for monitoring key metrics, but they do not represent all available metrics.\n You can modify the example dashboards or add other metrics, depending on your infrastructure.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e0afebcc531af76cc05c3b72cd86df4f72abf89"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MjQzMTk5", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#pullrequestreview-459243199", "createdAt": "2020-07-31T14:59:48Z", "commit": {"oid": "5e0afebcc531af76cc05c3b72cd86df4f72abf89"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNDo1OTo0OFrOG6Lt-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNDo1OTo0OFrOG6Lt-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY2MjU4Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The example Grafana dashboard for the Cruise Control provides:\n          \n          \n            \n            The example Grafana dashboard for Cruise Control provides:", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#discussion_r463662586", "createdAt": "2020-07-31T14:59:48Z", "author": {"login": "laidan6000"}, "path": "documentation/assemblies/metrics/assembly_metrics-cruise-control.adoc", "diffHunk": "@@ -0,0 +1,69 @@\n+// This assembly is included in the following assemblies:\n+//\n+// metrics/assembly-metrics.adoc\n+\n+[id='assembly-cruise-control-{context}']\n+= Monitor Cruise Control\n+\n+If you are already using Prometheus and Grafana for monitoring of built-in Kafka metrics, you can configure Prometheus to also scrape the Cruise Control Prometheus endpoint.\n+\n+The example Grafana dashboard for the Cruise Control provides:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e0afebcc531af76cc05c3b72cd86df4f72abf89"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MjQ0MjU1", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#pullrequestreview-459244255", "createdAt": "2020-07-31T15:01:16Z", "commit": {"oid": "5e0afebcc531af76cc05c3b72cd86df4f72abf89"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTowMToxN1rOG6Lw-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNToxMTozMFrOG6MHaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY2MzM1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Information about optimization proposals computation, goals violation, cluster balancedness and more\n          \n          \n            \n            * Information about optimization proposals computation, goals violation, cluster balancedness, and more", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#discussion_r463663353", "createdAt": "2020-07-31T15:01:17Z", "author": {"login": "laidan6000"}, "path": "documentation/assemblies/metrics/assembly_metrics-cruise-control.adoc", "diffHunk": "@@ -0,0 +1,69 @@\n+// This assembly is included in the following assemblies:\n+//\n+// metrics/assembly-metrics.adoc\n+\n+[id='assembly-cruise-control-{context}']\n+= Monitor Cruise Control\n+\n+If you are already using Prometheus and Grafana for monitoring of built-in Kafka metrics, you can configure Prometheus to also scrape the Cruise Control Prometheus endpoint.\n+\n+The example Grafana dashboard for the Cruise Control provides:\n+\n+* Information about optimization proposals computation, goals violation, cluster balancedness and more", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e0afebcc531af76cc05c3b72cd86df4f72abf89"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY2NDUxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You can enable the Cruise Control metrics in the `Kafka` resource using the `cruiseControl.metrics` property that contains the JMX exporter configuration about metrics to expose.\n          \n          \n            \n            You can enable the Cruise Control metrics in the `Kafka` resource using the `cruiseControl.metrics` property that contains the JMX exporter configuration about the metrics to expose.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#discussion_r463664511", "createdAt": "2020-07-31T15:03:24Z", "author": {"login": "laidan6000"}, "path": "documentation/assemblies/metrics/assembly_metrics-cruise-control.adoc", "diffHunk": "@@ -0,0 +1,69 @@\n+// This assembly is included in the following assemblies:\n+//\n+// metrics/assembly-metrics.adoc\n+\n+[id='assembly-cruise-control-{context}']\n+= Monitor Cruise Control\n+\n+If you are already using Prometheus and Grafana for monitoring of built-in Kafka metrics, you can configure Prometheus to also scrape the Cruise Control Prometheus endpoint.\n+\n+The example Grafana dashboard for the Cruise Control provides:\n+\n+* Information about optimization proposals computation, goals violation, cluster balancedness and more\n+* Information about REST API calls for rebalance proposals and actual rebalance operations\n+* JVM metrics from Cruise Control itself\n+\n+== Configuring Cruise Control\n+\n+You can enable the Cruise Control metrics in the `Kafka` resource using the `cruiseControl.metrics` property that contains the JMX exporter configuration about metrics to expose.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e0afebcc531af76cc05c3b72cd86df4f72abf89"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY2NTA3MA==", "bodyText": "You don't need a plus here unless I'm mistaken!", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#discussion_r463665070", "createdAt": "2020-07-31T15:04:28Z", "author": {"login": "laidan6000"}, "path": "documentation/assemblies/metrics/assembly_metrics-cruise-control.adoc", "diffHunk": "@@ -0,0 +1,69 @@\n+// This assembly is included in the following assemblies:\n+//\n+// metrics/assembly-metrics.adoc\n+\n+[id='assembly-cruise-control-{context}']\n+= Monitor Cruise Control\n+\n+If you are already using Prometheus and Grafana for monitoring of built-in Kafka metrics, you can configure Prometheus to also scrape the Cruise Control Prometheus endpoint.\n+\n+The example Grafana dashboard for the Cruise Control provides:\n+\n+* Information about optimization proposals computation, goals violation, cluster balancedness and more\n+* Information about REST API calls for rebalance proposals and actual rebalance operations\n+* JVM metrics from Cruise Control itself\n+\n+== Configuring Cruise Control\n+\n+You can enable the Cruise Control metrics in the `Kafka` resource using the `cruiseControl.metrics` property that contains the JMX exporter configuration about metrics to expose.\n+\n+For example:\n++", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e0afebcc531af76cc05c3b72cd86df4f72abf89"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY2NTgwNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * The number of snapshot windows that are monitored\n          \n          \n            \n            * Number of snapshot windows that are monitored by Cruise Control", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#discussion_r463665806", "createdAt": "2020-07-31T15:05:46Z", "author": {"login": "laidan6000"}, "path": "documentation/assemblies/metrics/assembly_metrics-cruise-control.adoc", "diffHunk": "@@ -0,0 +1,69 @@\n+// This assembly is included in the following assemblies:\n+//\n+// metrics/assembly-metrics.adoc\n+\n+[id='assembly-cruise-control-{context}']\n+= Monitor Cruise Control\n+\n+If you are already using Prometheus and Grafana for monitoring of built-in Kafka metrics, you can configure Prometheus to also scrape the Cruise Control Prometheus endpoint.\n+\n+The example Grafana dashboard for the Cruise Control provides:\n+\n+* Information about optimization proposals computation, goals violation, cluster balancedness and more\n+* Information about REST API calls for rebalance proposals and actual rebalance operations\n+* JVM metrics from Cruise Control itself\n+\n+== Configuring Cruise Control\n+\n+You can enable the Cruise Control metrics in the `Kafka` resource using the `cruiseControl.metrics` property that contains the JMX exporter configuration about metrics to expose.\n+\n+For example:\n++\n+[source,yaml,subs=\"attributes+\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: Kafka\n+metadata:\n+  name: my-cluster\n+spec:\n+  # ...\n+  kafka:\n+    # ...\n+  zookeeper:\n+    # ...\n+  cruiseControl:\n+    metrics:\n+      lowercaseOutputName: true\n+      rules:\n+      - pattern: kafka.cruisecontrol<name=(.+)><>(\\w+)\n+        name: kafka_cruisecontrol_$1_$2\n+        type: GAUGE\n+----\n+\n+== Enabling the Cruise Control Grafana dashboard\n+\n+If you deployed Cruise Control with your Kafka cluster with the metrics enabled, you can enable Grafana to present the metrics data it exposes.\n+\n+A Cruise Control dashboard is provided in the `examples/metrics` directory as a JSON file:\n+\n+* `strimzi-cruise-control.json`\n+\n+When metrics data has been collected for some time, the Cruise Control charts are populated.\n+\n+Cruise Control:: Shows metrics for:\n++\n+* The number of snapshot windows that are monitored", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e0afebcc531af76cc05c3b72cd86df4f72abf89"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY2Njg1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Number of time windows considered to be valid because of enough samples for computing a proposal\n          \n          \n            \n            * Number of time windows considered valid because they contain enough samples to compute an optimization proposal", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#discussion_r463666851", "createdAt": "2020-07-31T15:07:43Z", "author": {"login": "laidan6000"}, "path": "documentation/assemblies/metrics/assembly_metrics-cruise-control.adoc", "diffHunk": "@@ -0,0 +1,69 @@\n+// This assembly is included in the following assemblies:\n+//\n+// metrics/assembly-metrics.adoc\n+\n+[id='assembly-cruise-control-{context}']\n+= Monitor Cruise Control\n+\n+If you are already using Prometheus and Grafana for monitoring of built-in Kafka metrics, you can configure Prometheus to also scrape the Cruise Control Prometheus endpoint.\n+\n+The example Grafana dashboard for the Cruise Control provides:\n+\n+* Information about optimization proposals computation, goals violation, cluster balancedness and more\n+* Information about REST API calls for rebalance proposals and actual rebalance operations\n+* JVM metrics from Cruise Control itself\n+\n+== Configuring Cruise Control\n+\n+You can enable the Cruise Control metrics in the `Kafka` resource using the `cruiseControl.metrics` property that contains the JMX exporter configuration about metrics to expose.\n+\n+For example:\n++\n+[source,yaml,subs=\"attributes+\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: Kafka\n+metadata:\n+  name: my-cluster\n+spec:\n+  # ...\n+  kafka:\n+    # ...\n+  zookeeper:\n+    # ...\n+  cruiseControl:\n+    metrics:\n+      lowercaseOutputName: true\n+      rules:\n+      - pattern: kafka.cruisecontrol<name=(.+)><>(\\w+)\n+        name: kafka_cruisecontrol_$1_$2\n+        type: GAUGE\n+----\n+\n+== Enabling the Cruise Control Grafana dashboard\n+\n+If you deployed Cruise Control with your Kafka cluster with the metrics enabled, you can enable Grafana to present the metrics data it exposes.\n+\n+A Cruise Control dashboard is provided in the `examples/metrics` directory as a JSON file:\n+\n+* `strimzi-cruise-control.json`\n+\n+When metrics data has been collected for some time, the Cruise Control charts are populated.\n+\n+Cruise Control:: Shows metrics for:\n++\n+* The number of snapshot windows that are monitored\n+* Number of time windows considered to be valid because of enough samples for computing a proposal", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e0afebcc531af76cc05c3b72cd86df4f72abf89"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY2NzM5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * The current balancedness score of the Kafka cluster as calculated by the anomaly detector (every 5 minutes by default)\n          \n          \n            \n            * Current balancedness score of the Kafka cluster as calculated by the anomaly detector component of Cruise Control (every 5 minutes by default)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#discussion_r463667390", "createdAt": "2020-07-31T15:08:42Z", "author": {"login": "laidan6000"}, "path": "documentation/assemblies/metrics/assembly_metrics-cruise-control.adoc", "diffHunk": "@@ -0,0 +1,69 @@\n+// This assembly is included in the following assemblies:\n+//\n+// metrics/assembly-metrics.adoc\n+\n+[id='assembly-cruise-control-{context}']\n+= Monitor Cruise Control\n+\n+If you are already using Prometheus and Grafana for monitoring of built-in Kafka metrics, you can configure Prometheus to also scrape the Cruise Control Prometheus endpoint.\n+\n+The example Grafana dashboard for the Cruise Control provides:\n+\n+* Information about optimization proposals computation, goals violation, cluster balancedness and more\n+* Information about REST API calls for rebalance proposals and actual rebalance operations\n+* JVM metrics from Cruise Control itself\n+\n+== Configuring Cruise Control\n+\n+You can enable the Cruise Control metrics in the `Kafka` resource using the `cruiseControl.metrics` property that contains the JMX exporter configuration about metrics to expose.\n+\n+For example:\n++\n+[source,yaml,subs=\"attributes+\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: Kafka\n+metadata:\n+  name: my-cluster\n+spec:\n+  # ...\n+  kafka:\n+    # ...\n+  zookeeper:\n+    # ...\n+  cruiseControl:\n+    metrics:\n+      lowercaseOutputName: true\n+      rules:\n+      - pattern: kafka.cruisecontrol<name=(.+)><>(\\w+)\n+        name: kafka_cruisecontrol_$1_$2\n+        type: GAUGE\n+----\n+\n+== Enabling the Cruise Control Grafana dashboard\n+\n+If you deployed Cruise Control with your Kafka cluster with the metrics enabled, you can enable Grafana to present the metrics data it exposes.\n+\n+A Cruise Control dashboard is provided in the `examples/metrics` directory as a JSON file:\n+\n+* `strimzi-cruise-control.json`\n+\n+When metrics data has been collected for some time, the Cruise Control charts are populated.\n+\n+Cruise Control:: Shows metrics for:\n++\n+* The number of snapshot windows that are monitored\n+* Number of time windows considered to be valid because of enough samples for computing a proposal\n+* Number of ongoing executions running for proposals or rebalances\n+* The current balancedness score of the Kafka cluster as calculated by the anomaly detector (every 5 minutes by default)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e0afebcc531af76cc05c3b72cd86df4f72abf89"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY2Nzg1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * The percentage of monitored partitions\n          \n          \n            \n            * Percentage of monitored partitions", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#discussion_r463667852", "createdAt": "2020-07-31T15:09:27Z", "author": {"login": "laidan6000"}, "path": "documentation/assemblies/metrics/assembly_metrics-cruise-control.adoc", "diffHunk": "@@ -0,0 +1,69 @@\n+// This assembly is included in the following assemblies:\n+//\n+// metrics/assembly-metrics.adoc\n+\n+[id='assembly-cruise-control-{context}']\n+= Monitor Cruise Control\n+\n+If you are already using Prometheus and Grafana for monitoring of built-in Kafka metrics, you can configure Prometheus to also scrape the Cruise Control Prometheus endpoint.\n+\n+The example Grafana dashboard for the Cruise Control provides:\n+\n+* Information about optimization proposals computation, goals violation, cluster balancedness and more\n+* Information about REST API calls for rebalance proposals and actual rebalance operations\n+* JVM metrics from Cruise Control itself\n+\n+== Configuring Cruise Control\n+\n+You can enable the Cruise Control metrics in the `Kafka` resource using the `cruiseControl.metrics` property that contains the JMX exporter configuration about metrics to expose.\n+\n+For example:\n++\n+[source,yaml,subs=\"attributes+\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: Kafka\n+metadata:\n+  name: my-cluster\n+spec:\n+  # ...\n+  kafka:\n+    # ...\n+  zookeeper:\n+    # ...\n+  cruiseControl:\n+    metrics:\n+      lowercaseOutputName: true\n+      rules:\n+      - pattern: kafka.cruisecontrol<name=(.+)><>(\\w+)\n+        name: kafka_cruisecontrol_$1_$2\n+        type: GAUGE\n+----\n+\n+== Enabling the Cruise Control Grafana dashboard\n+\n+If you deployed Cruise Control with your Kafka cluster with the metrics enabled, you can enable Grafana to present the metrics data it exposes.\n+\n+A Cruise Control dashboard is provided in the `examples/metrics` directory as a JSON file:\n+\n+* `strimzi-cruise-control.json`\n+\n+When metrics data has been collected for some time, the Cruise Control charts are populated.\n+\n+Cruise Control:: Shows metrics for:\n++\n+* The number of snapshot windows that are monitored\n+* Number of time windows considered to be valid because of enough samples for computing a proposal\n+* Number of ongoing executions running for proposals or rebalances\n+* The current balancedness score of the Kafka cluster as calculated by the anomaly detector (every 5 minutes by default)\n+* The percentage of monitored partitions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e0afebcc531af76cc05c3b72cd86df4f72abf89"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY2ODAzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * The number of goal violations reported by the anomaly detector (every 5 minutes by default)\n          \n          \n            \n            * Number of goal violations reported by the anomaly detector (every 5 minutes by default)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#discussion_r463668036", "createdAt": "2020-07-31T15:09:44Z", "author": {"login": "laidan6000"}, "path": "documentation/assemblies/metrics/assembly_metrics-cruise-control.adoc", "diffHunk": "@@ -0,0 +1,69 @@\n+// This assembly is included in the following assemblies:\n+//\n+// metrics/assembly-metrics.adoc\n+\n+[id='assembly-cruise-control-{context}']\n+= Monitor Cruise Control\n+\n+If you are already using Prometheus and Grafana for monitoring of built-in Kafka metrics, you can configure Prometheus to also scrape the Cruise Control Prometheus endpoint.\n+\n+The example Grafana dashboard for the Cruise Control provides:\n+\n+* Information about optimization proposals computation, goals violation, cluster balancedness and more\n+* Information about REST API calls for rebalance proposals and actual rebalance operations\n+* JVM metrics from Cruise Control itself\n+\n+== Configuring Cruise Control\n+\n+You can enable the Cruise Control metrics in the `Kafka` resource using the `cruiseControl.metrics` property that contains the JMX exporter configuration about metrics to expose.\n+\n+For example:\n++\n+[source,yaml,subs=\"attributes+\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: Kafka\n+metadata:\n+  name: my-cluster\n+spec:\n+  # ...\n+  kafka:\n+    # ...\n+  zookeeper:\n+    # ...\n+  cruiseControl:\n+    metrics:\n+      lowercaseOutputName: true\n+      rules:\n+      - pattern: kafka.cruisecontrol<name=(.+)><>(\\w+)\n+        name: kafka_cruisecontrol_$1_$2\n+        type: GAUGE\n+----\n+\n+== Enabling the Cruise Control Grafana dashboard\n+\n+If you deployed Cruise Control with your Kafka cluster with the metrics enabled, you can enable Grafana to present the metrics data it exposes.\n+\n+A Cruise Control dashboard is provided in the `examples/metrics` directory as a JSON file:\n+\n+* `strimzi-cruise-control.json`\n+\n+When metrics data has been collected for some time, the Cruise Control charts are populated.\n+\n+Cruise Control:: Shows metrics for:\n++\n+* The number of snapshot windows that are monitored\n+* Number of time windows considered to be valid because of enough samples for computing a proposal\n+* Number of ongoing executions running for proposals or rebalances\n+* The current balancedness score of the Kafka cluster as calculated by the anomaly detector (every 5 minutes by default)\n+* The percentage of monitored partitions\n+* The number of goal violations reported by the anomaly detector (every 5 minutes by default)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e0afebcc531af76cc05c3b72cd86df4f72abf89"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY2ODQ3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Time needed for computing an optimization proposal\n          \n          \n            \n            * Time needed to compute an optimization proposal", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#discussion_r463668473", "createdAt": "2020-07-31T15:10:23Z", "author": {"login": "laidan6000"}, "path": "documentation/assemblies/metrics/assembly_metrics-cruise-control.adoc", "diffHunk": "@@ -0,0 +1,69 @@\n+// This assembly is included in the following assemblies:\n+//\n+// metrics/assembly-metrics.adoc\n+\n+[id='assembly-cruise-control-{context}']\n+= Monitor Cruise Control\n+\n+If you are already using Prometheus and Grafana for monitoring of built-in Kafka metrics, you can configure Prometheus to also scrape the Cruise Control Prometheus endpoint.\n+\n+The example Grafana dashboard for the Cruise Control provides:\n+\n+* Information about optimization proposals computation, goals violation, cluster balancedness and more\n+* Information about REST API calls for rebalance proposals and actual rebalance operations\n+* JVM metrics from Cruise Control itself\n+\n+== Configuring Cruise Control\n+\n+You can enable the Cruise Control metrics in the `Kafka` resource using the `cruiseControl.metrics` property that contains the JMX exporter configuration about metrics to expose.\n+\n+For example:\n++\n+[source,yaml,subs=\"attributes+\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: Kafka\n+metadata:\n+  name: my-cluster\n+spec:\n+  # ...\n+  kafka:\n+    # ...\n+  zookeeper:\n+    # ...\n+  cruiseControl:\n+    metrics:\n+      lowercaseOutputName: true\n+      rules:\n+      - pattern: kafka.cruisecontrol<name=(.+)><>(\\w+)\n+        name: kafka_cruisecontrol_$1_$2\n+        type: GAUGE\n+----\n+\n+== Enabling the Cruise Control Grafana dashboard\n+\n+If you deployed Cruise Control with your Kafka cluster with the metrics enabled, you can enable Grafana to present the metrics data it exposes.\n+\n+A Cruise Control dashboard is provided in the `examples/metrics` directory as a JSON file:\n+\n+* `strimzi-cruise-control.json`\n+\n+When metrics data has been collected for some time, the Cruise Control charts are populated.\n+\n+Cruise Control:: Shows metrics for:\n++\n+* The number of snapshot windows that are monitored\n+* Number of time windows considered to be valid because of enough samples for computing a proposal\n+* Number of ongoing executions running for proposals or rebalances\n+* The current balancedness score of the Kafka cluster as calculated by the anomaly detector (every 5 minutes by default)\n+* The percentage of monitored partitions\n+* The number of goal violations reported by the anomaly detector (every 5 minutes by default)\n+* How often a disk read failure happens on the brokers\n+* Rate of metric sample fetch failures\n+* Time needed for computing an optimization proposal", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e0afebcc531af76cc05c3b72cd86df4f72abf89"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY2ODcyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Time for creating a cluster model\n          \n          \n            \n            * Time needed to create the cluster model", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#discussion_r463668724", "createdAt": "2020-07-31T15:10:51Z", "author": {"login": "laidan6000"}, "path": "documentation/assemblies/metrics/assembly_metrics-cruise-control.adoc", "diffHunk": "@@ -0,0 +1,69 @@\n+// This assembly is included in the following assemblies:\n+//\n+// metrics/assembly-metrics.adoc\n+\n+[id='assembly-cruise-control-{context}']\n+= Monitor Cruise Control\n+\n+If you are already using Prometheus and Grafana for monitoring of built-in Kafka metrics, you can configure Prometheus to also scrape the Cruise Control Prometheus endpoint.\n+\n+The example Grafana dashboard for the Cruise Control provides:\n+\n+* Information about optimization proposals computation, goals violation, cluster balancedness and more\n+* Information about REST API calls for rebalance proposals and actual rebalance operations\n+* JVM metrics from Cruise Control itself\n+\n+== Configuring Cruise Control\n+\n+You can enable the Cruise Control metrics in the `Kafka` resource using the `cruiseControl.metrics` property that contains the JMX exporter configuration about metrics to expose.\n+\n+For example:\n++\n+[source,yaml,subs=\"attributes+\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: Kafka\n+metadata:\n+  name: my-cluster\n+spec:\n+  # ...\n+  kafka:\n+    # ...\n+  zookeeper:\n+    # ...\n+  cruiseControl:\n+    metrics:\n+      lowercaseOutputName: true\n+      rules:\n+      - pattern: kafka.cruisecontrol<name=(.+)><>(\\w+)\n+        name: kafka_cruisecontrol_$1_$2\n+        type: GAUGE\n+----\n+\n+== Enabling the Cruise Control Grafana dashboard\n+\n+If you deployed Cruise Control with your Kafka cluster with the metrics enabled, you can enable Grafana to present the metrics data it exposes.\n+\n+A Cruise Control dashboard is provided in the `examples/metrics` directory as a JSON file:\n+\n+* `strimzi-cruise-control.json`\n+\n+When metrics data has been collected for some time, the Cruise Control charts are populated.\n+\n+Cruise Control:: Shows metrics for:\n++\n+* The number of snapshot windows that are monitored\n+* Number of time windows considered to be valid because of enough samples for computing a proposal\n+* Number of ongoing executions running for proposals or rebalances\n+* The current balancedness score of the Kafka cluster as calculated by the anomaly detector (every 5 minutes by default)\n+* The percentage of monitored partitions\n+* The number of goal violations reported by the anomaly detector (every 5 minutes by default)\n+* How often a disk read failure happens on the brokers\n+* Rate of metric sample fetch failures\n+* Time needed for computing an optimization proposal\n+* Time for creating a cluster model", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e0afebcc531af76cc05c3b72cd86df4f72abf89"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY2ODkzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * How often a proposal request or an actual rebalance request is made through the REST API\n          \n          \n            \n            * How often a proposal request or an actual rebalance request is made through the Cruise Control REST API", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#discussion_r463668934", "createdAt": "2020-07-31T15:11:13Z", "author": {"login": "laidan6000"}, "path": "documentation/assemblies/metrics/assembly_metrics-cruise-control.adoc", "diffHunk": "@@ -0,0 +1,69 @@\n+// This assembly is included in the following assemblies:\n+//\n+// metrics/assembly-metrics.adoc\n+\n+[id='assembly-cruise-control-{context}']\n+= Monitor Cruise Control\n+\n+If you are already using Prometheus and Grafana for monitoring of built-in Kafka metrics, you can configure Prometheus to also scrape the Cruise Control Prometheus endpoint.\n+\n+The example Grafana dashboard for the Cruise Control provides:\n+\n+* Information about optimization proposals computation, goals violation, cluster balancedness and more\n+* Information about REST API calls for rebalance proposals and actual rebalance operations\n+* JVM metrics from Cruise Control itself\n+\n+== Configuring Cruise Control\n+\n+You can enable the Cruise Control metrics in the `Kafka` resource using the `cruiseControl.metrics` property that contains the JMX exporter configuration about metrics to expose.\n+\n+For example:\n++\n+[source,yaml,subs=\"attributes+\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: Kafka\n+metadata:\n+  name: my-cluster\n+spec:\n+  # ...\n+  kafka:\n+    # ...\n+  zookeeper:\n+    # ...\n+  cruiseControl:\n+    metrics:\n+      lowercaseOutputName: true\n+      rules:\n+      - pattern: kafka.cruisecontrol<name=(.+)><>(\\w+)\n+        name: kafka_cruisecontrol_$1_$2\n+        type: GAUGE\n+----\n+\n+== Enabling the Cruise Control Grafana dashboard\n+\n+If you deployed Cruise Control with your Kafka cluster with the metrics enabled, you can enable Grafana to present the metrics data it exposes.\n+\n+A Cruise Control dashboard is provided in the `examples/metrics` directory as a JSON file:\n+\n+* `strimzi-cruise-control.json`\n+\n+When metrics data has been collected for some time, the Cruise Control charts are populated.\n+\n+Cruise Control:: Shows metrics for:\n++\n+* The number of snapshot windows that are monitored\n+* Number of time windows considered to be valid because of enough samples for computing a proposal\n+* Number of ongoing executions running for proposals or rebalances\n+* The current balancedness score of the Kafka cluster as calculated by the anomaly detector (every 5 minutes by default)\n+* The percentage of monitored partitions\n+* The number of goal violations reported by the anomaly detector (every 5 minutes by default)\n+* How often a disk read failure happens on the brokers\n+* Rate of metric sample fetch failures\n+* Time needed for computing an optimization proposal\n+* Time for creating a cluster model\n+* How often a proposal request or an actual rebalance request is made through the REST API", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e0afebcc531af76cc05c3b72cd86df4f72abf89"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY2OTA5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * How often the overall cluster state and the user tasks state are requested through the REST API\n          \n          \n            \n            * How often the overall cluster state and the user tasks state are requested through the Cruise Control REST API", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#discussion_r463669097", "createdAt": "2020-07-31T15:11:30Z", "author": {"login": "laidan6000"}, "path": "documentation/assemblies/metrics/assembly_metrics-cruise-control.adoc", "diffHunk": "@@ -0,0 +1,69 @@\n+// This assembly is included in the following assemblies:\n+//\n+// metrics/assembly-metrics.adoc\n+\n+[id='assembly-cruise-control-{context}']\n+= Monitor Cruise Control\n+\n+If you are already using Prometheus and Grafana for monitoring of built-in Kafka metrics, you can configure Prometheus to also scrape the Cruise Control Prometheus endpoint.\n+\n+The example Grafana dashboard for the Cruise Control provides:\n+\n+* Information about optimization proposals computation, goals violation, cluster balancedness and more\n+* Information about REST API calls for rebalance proposals and actual rebalance operations\n+* JVM metrics from Cruise Control itself\n+\n+== Configuring Cruise Control\n+\n+You can enable the Cruise Control metrics in the `Kafka` resource using the `cruiseControl.metrics` property that contains the JMX exporter configuration about metrics to expose.\n+\n+For example:\n++\n+[source,yaml,subs=\"attributes+\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: Kafka\n+metadata:\n+  name: my-cluster\n+spec:\n+  # ...\n+  kafka:\n+    # ...\n+  zookeeper:\n+    # ...\n+  cruiseControl:\n+    metrics:\n+      lowercaseOutputName: true\n+      rules:\n+      - pattern: kafka.cruisecontrol<name=(.+)><>(\\w+)\n+        name: kafka_cruisecontrol_$1_$2\n+        type: GAUGE\n+----\n+\n+== Enabling the Cruise Control Grafana dashboard\n+\n+If you deployed Cruise Control with your Kafka cluster with the metrics enabled, you can enable Grafana to present the metrics data it exposes.\n+\n+A Cruise Control dashboard is provided in the `examples/metrics` directory as a JSON file:\n+\n+* `strimzi-cruise-control.json`\n+\n+When metrics data has been collected for some time, the Cruise Control charts are populated.\n+\n+Cruise Control:: Shows metrics for:\n++\n+* The number of snapshot windows that are monitored\n+* Number of time windows considered to be valid because of enough samples for computing a proposal\n+* Number of ongoing executions running for proposals or rebalances\n+* The current balancedness score of the Kafka cluster as calculated by the anomaly detector (every 5 minutes by default)\n+* The percentage of monitored partitions\n+* The number of goal violations reported by the anomaly detector (every 5 minutes by default)\n+* How often a disk read failure happens on the brokers\n+* Rate of metric sample fetch failures\n+* Time needed for computing an optimization proposal\n+* Time for creating a cluster model\n+* How often a proposal request or an actual rebalance request is made through the REST API\n+* How often the overall cluster state and the user tasks state are requested through the REST API", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e0afebcc531af76cc05c3b72cd86df4f72abf89"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98822d059328c3dac7735458f9d035a99b451468", "author": {"user": {"login": "ppatierno", "name": "Paolo Patierno"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/98822d059328c3dac7735458f9d035a99b451468", "committedDate": "2020-07-31T17:25:49Z", "message": "Fixed doc comments\n\nSigned-off-by: Paolo Patierno <ppatierno@live.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NTcxMjU4", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#pullrequestreview-459571258", "createdAt": "2020-08-01T11:08:35Z", "commit": {"oid": "98822d059328c3dac7735458f9d035a99b451468"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5ODUwMzA4", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3411#pullrequestreview-459850308", "createdAt": "2020-08-03T08:43:06Z", "commit": {"oid": "98822d059328c3dac7735458f9d035a99b451468"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1419, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}