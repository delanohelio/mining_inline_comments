{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1MjI0NjIz", "number": 4076, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwODoyMTowMFrOFDWLyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjo1MToxOVrOFDuKcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MDUzNTE1OnYy", "diffSide": "RIGHT", "path": "operator-common/src/main/java/io/strimzi/operator/common/operator/resource/ServiceOperator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwODoyMTowMFrOIC8zjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwODoyMTowMFrOIC8zjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk2NDMwMw==", "bodyText": "I think we should be more precise to have RANCHER in the const name because it's the only one having this annotation AFAIU, right?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4076#discussion_r539964303", "createdAt": "2020-12-10T08:21:00Z", "author": {"login": "ppatierno"}, "path": "operator-common/src/main/java/io/strimzi/operator/common/operator/resource/ServiceOperator.java", "diffHunk": "@@ -11,13 +11,19 @@\n import io.fabric8.kubernetes.client.KubernetesClient;\n import io.fabric8.kubernetes.client.dsl.MixedOperation;\n import io.fabric8.kubernetes.client.dsl.ServiceResource;\n+import io.strimzi.operator.common.Util;\n import io.vertx.core.Future;\n import io.vertx.core.Vertx;\n \n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n /**\n  * Operations for {@code Service}s.\n  */\n public class ServiceOperator extends AbstractResourceOperator<KubernetesClient, Service, ServiceList, DoneableService, ServiceResource<Service, DoneableService>> {\n+    private static final String CATTLE_ANNOTATION_SEED = \"cattle.io\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29b636377e25b94a6825595b305c1aa197141ade"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MDUzOTQxOnYy", "diffSide": "RIGHT", "path": "operator-common/src/main/java/io/strimzi/operator/common/operator/resource/ServiceOperator.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwODoyMjowMlrOIC82Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDowMDoxN1rOIDA9VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk2NDk1NA==", "bodyText": "instead of having a specific method for just this \"cattle\" annotation, why not having a more general one passing a list of annotations to patch which in this case will continue just one annotation for now?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4076#discussion_r539964954", "createdAt": "2020-12-10T08:22:02Z", "author": {"login": "ppatierno"}, "path": "operator-common/src/main/java/io/strimzi/operator/common/operator/resource/ServiceOperator.java", "diffHunk": "@@ -70,6 +77,31 @@ public ServiceOperator(Vertx vertx, KubernetesClient client) {\n         }\n     }\n \n+    /**\n+     * Finds annotations managed by the Rancher cattle agents (if any), and merge them into the desired spec.\n+     *\n+     * This makes sure there is no infinite loop where Rancher tries to add annotations, while Rancher keeps\n+     * removing them during reconciliation.\n+     *\n+     * @param current   Current Service\n+     * @param desired   Desired Service\n+     */\n+    private void patchCattleAnnotations(Service current, Service desired) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29b636377e25b94a6825595b305c1aa197141ade"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAxNDA4Mg==", "bodyText": "Is there a preferred place (like configuration file / dependency) to store this \"list of annotations\", or would the private static final OK for this?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4076#discussion_r540014082", "createdAt": "2020-12-10T09:34:59Z", "author": {"login": "mluiten"}, "path": "operator-common/src/main/java/io/strimzi/operator/common/operator/resource/ServiceOperator.java", "diffHunk": "@@ -70,6 +77,31 @@ public ServiceOperator(Vertx vertx, KubernetesClient client) {\n         }\n     }\n \n+    /**\n+     * Finds annotations managed by the Rancher cattle agents (if any), and merge them into the desired spec.\n+     *\n+     * This makes sure there is no infinite loop where Rancher tries to add annotations, while Rancher keeps\n+     * removing them during reconciliation.\n+     *\n+     * @param current   Current Service\n+     * @param desired   Desired Service\n+     */\n+    private void patchCattleAnnotations(Service current, Service desired) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk2NDk1NA=="}, "originalCommit": {"oid": "29b636377e25b94a6825595b305c1aa197141ade"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAxNjc4OQ==", "bodyText": "We have this Annotations class https://github.com/strimzi/strimzi-kafka-operator/blob/master/operator-common/src/main/java/io/strimzi/operator/common/Annotations.java", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4076#discussion_r540016789", "createdAt": "2020-12-10T09:38:44Z", "author": {"login": "ppatierno"}, "path": "operator-common/src/main/java/io/strimzi/operator/common/operator/resource/ServiceOperator.java", "diffHunk": "@@ -70,6 +77,31 @@ public ServiceOperator(Vertx vertx, KubernetesClient client) {\n         }\n     }\n \n+    /**\n+     * Finds annotations managed by the Rancher cattle agents (if any), and merge them into the desired spec.\n+     *\n+     * This makes sure there is no infinite loop where Rancher tries to add annotations, while Rancher keeps\n+     * removing them during reconciliation.\n+     *\n+     * @param current   Current Service\n+     * @param desired   Desired Service\n+     */\n+    private void patchCattleAnnotations(Service current, Service desired) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk2NDk1NA=="}, "originalCommit": {"oid": "29b636377e25b94a6825595b305c1aa197141ade"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAzMjM0MA==", "bodyText": "I have refactored the code; can you check if this is better? :)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4076#discussion_r540032340", "createdAt": "2020-12-10T10:00:17Z", "author": {"login": "mluiten"}, "path": "operator-common/src/main/java/io/strimzi/operator/common/operator/resource/ServiceOperator.java", "diffHunk": "@@ -70,6 +77,31 @@ public ServiceOperator(Vertx vertx, KubernetesClient client) {\n         }\n     }\n \n+    /**\n+     * Finds annotations managed by the Rancher cattle agents (if any), and merge them into the desired spec.\n+     *\n+     * This makes sure there is no infinite loop where Rancher tries to add annotations, while Rancher keeps\n+     * removing them during reconciliation.\n+     *\n+     * @param current   Current Service\n+     * @param desired   Desired Service\n+     */\n+    private void patchCattleAnnotations(Service current, Service desired) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk2NDk1NA=="}, "originalCommit": {"oid": "29b636377e25b94a6825595b305c1aa197141ade"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDQ2Mzg2OnYy", "diffSide": "RIGHT", "path": "operator-common/src/main/java/io/strimzi/operator/common/operator/resource/ServiceOperator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjo1MToxOVrOIDg56w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMzozOTo0NFrOID5KmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU1NTc1NQ==", "bodyText": "I wonder if we really need the matching here. If the contains or startsWith which was used originally wasn't better in terms of performance etc. @tombentley WDYT?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4076#discussion_r540555755", "createdAt": "2020-12-10T22:51:19Z", "author": {"login": "scholzj"}, "path": "operator-common/src/main/java/io/strimzi/operator/common/operator/resource/ServiceOperator.java", "diffHunk": "@@ -70,6 +78,31 @@ public ServiceOperator(Vertx vertx, KubernetesClient client) {\n         }\n     }\n \n+    /**\n+     * Finds annotations managed by the Rancher cattle agents (if any), and merge them into the desired spec.\n+     *\n+     * This makes sure there is no infinite loop where Rancher tries to add annotations, while Rancher keeps\n+     * removing them during reconciliation.\n+     *\n+     * @param current   Current Service\n+     * @param desired   Desired Service\n+     */\n+    private void patchAnnotations(Service current, Service desired) {\n+        Map<String, String> currentAnnotations = current.getMetadata().getAnnotations();\n+        if (currentAnnotations != null) {\n+            Map<String, String> matchedAnnotations = currentAnnotations.keySet().stream()\n+                    .filter(annotation -> LOADBALANCER_ANNOTATION_WHITELIST.stream().anyMatch(whitelist -> whitelist.test(annotation)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f393d39a71b5247b4df6a335ea87d92f84debc29"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk1MzI0MA==", "bodyText": "I replaced the regex'es with startsWith :-)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4076#discussion_r540953240", "createdAt": "2020-12-11T13:39:44Z", "author": {"login": "mluiten"}, "path": "operator-common/src/main/java/io/strimzi/operator/common/operator/resource/ServiceOperator.java", "diffHunk": "@@ -70,6 +78,31 @@ public ServiceOperator(Vertx vertx, KubernetesClient client) {\n         }\n     }\n \n+    /**\n+     * Finds annotations managed by the Rancher cattle agents (if any), and merge them into the desired spec.\n+     *\n+     * This makes sure there is no infinite loop where Rancher tries to add annotations, while Rancher keeps\n+     * removing them during reconciliation.\n+     *\n+     * @param current   Current Service\n+     * @param desired   Desired Service\n+     */\n+    private void patchAnnotations(Service current, Service desired) {\n+        Map<String, String> currentAnnotations = current.getMetadata().getAnnotations();\n+        if (currentAnnotations != null) {\n+            Map<String, String> matchedAnnotations = currentAnnotations.keySet().stream()\n+                    .filter(annotation -> LOADBALANCER_ANNOTATION_WHITELIST.stream().anyMatch(whitelist -> whitelist.test(annotation)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU1NTc1NQ=="}, "originalCommit": {"oid": "f393d39a71b5247b4df6a335ea87d92f84debc29"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 836, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}