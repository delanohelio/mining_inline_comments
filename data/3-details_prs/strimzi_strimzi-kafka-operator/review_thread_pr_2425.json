{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0NDU0NTY3", "number": 2425, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOTowOTo0NlrODZI6YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOToxNDoxN1rODZI_4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3Njg3MDA5OnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectApi.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOTowOTo0NlrOFfXb4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOTowOTo0NlrOFfXb4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQzNDE0Nw==", "bodyText": "There's ConnectRestException which you should use here.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2425#discussion_r368434147", "createdAt": "2020-01-20T09:09:46Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectApi.java", "diffHunk": "@@ -212,4 +215,37 @@ public KafkaConnectApiImpl(Vertx vertx) {\n                 .end();\n         return result;\n     }\n+\n+    @Override\n+    public Future<List<ConnectorPlugin>> listConnectorPlugins(String host, int port) {\n+        Future<List<ConnectorPlugin>> result = Future.future();\n+        HttpClientOptions options = new HttpClientOptions().setLogActivity(true);\n+        String path = \"/connector-plugins\";\n+        vertx.createHttpClient(options)\n+                .get(port, host, path, response -> {\n+                    response.exceptionHandler(error -> {\n+                        result.fail(error);\n+                    });\n+                    if (response.statusCode() == 200) {\n+                        response.bodyHandler(buffer -> {\n+                            ObjectMapper mapper = new ObjectMapper();\n+\n+                            try {\n+                                result.complete(Arrays.asList(mapper.readValue(buffer.getBytes(), ConnectorPlugin[].class)));\n+                            } catch (IOException e)  {\n+                                log.warn(\"Failed to parse list of connector plugins\");\n+                                result.fail(e);\n+                            }\n+                        });\n+                    } else {\n+                        result.fail(\"Unexpected status code \" + response.statusCode()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1a24b4c04c22b85c8e4c8e8d1fe78087beb9d75"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3Njg3OTExOnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectApi.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOToxMjo0MlrOFfXhPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOToxMjo0MlrOFfXhPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQzNTUxNg==", "bodyText": "I wonder if you should use ConnectRestException here. Until now ConnectRestException has been for lower level errors in handling the HTTP. Here the HTTP worked but returned something that wasn't valid JSON, or was not the expected JSON.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2425#discussion_r368435516", "createdAt": "2020-01-20T09:12:42Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectApi.java", "diffHunk": "@@ -212,4 +215,37 @@ public KafkaConnectApiImpl(Vertx vertx) {\n                 .end();\n         return result;\n     }\n+\n+    @Override\n+    public Future<List<ConnectorPlugin>> listConnectorPlugins(String host, int port) {\n+        Future<List<ConnectorPlugin>> result = Future.future();\n+        HttpClientOptions options = new HttpClientOptions().setLogActivity(true);\n+        String path = \"/connector-plugins\";\n+        vertx.createHttpClient(options)\n+                .get(port, host, path, response -> {\n+                    response.exceptionHandler(error -> {\n+                        result.fail(error);\n+                    });\n+                    if (response.statusCode() == 200) {\n+                        response.bodyHandler(buffer -> {\n+                            ObjectMapper mapper = new ObjectMapper();\n+\n+                            try {\n+                                result.complete(Arrays.asList(mapper.readValue(buffer.getBytes(), ConnectorPlugin[].class)));\n+                            } catch (IOException e)  {\n+                                log.warn(\"Failed to parse list of connector plugins\");\n+                                result.fail(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1a24b4c04c22b85c8e4c8e8d1fe78087beb9d75"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3Njg4NDE4OnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectApiTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOToxNDoxN1rOFfXkQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOToxNDoxN1rOFfXkQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQzNjI4OQ==", "bodyText": "So we really want to assert on the exact version number? We'll end up having to do this every time we change the version of Kafka being used to run the test. I think it's enough to test non-emptiness.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2425#discussion_r368436289", "createdAt": "2020-01-20T09:14:17Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectApiTest.java", "diffHunk": "@@ -96,7 +98,22 @@ public void after() {\n     public void test(VertxTestContext context) throws InterruptedException {\n         KafkaConnectApi client = new KafkaConnectApiImpl(vertx);\n         CountDownLatch async = new CountDownLatch(1);\n-        client.list(\"localhost\", PORT)\n+        client.listConnectorPlugins(\"localhost\", PORT)\n+            .compose(connectorPlugins -> {\n+                assertEquals(connectorPlugins.size(), 2);\n+\n+                ConnectorPlugin fileSink = connectorPlugins.stream().filter(connector -> \"org.apache.kafka.connect.file.FileStreamSinkConnector\".equals(connector.getConnectorClass())).findFirst().orElse(null);\n+                assertNotNull(fileSink);\n+                assertEquals(fileSink.getType(), \"sink\");\n+                assertEquals(fileSink.getVersion(), \"2.3.1\");\n+\n+                ConnectorPlugin fileSource = connectorPlugins.stream().filter(connector -> \"org.apache.kafka.connect.file.FileStreamSourceConnector\".equals(connector.getConnectorClass())).findFirst().orElse(null);\n+                assertNotNull(fileSource);\n+                assertEquals(fileSource.getType(), \"source\");\n+                assertEquals(fileSource.getVersion(), \"2.3.1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1a24b4c04c22b85c8e4c8e8d1fe78087beb9d75"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 631, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}