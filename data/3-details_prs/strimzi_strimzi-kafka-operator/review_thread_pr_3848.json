{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2OTQ2Nzgx", "number": 3848, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMDowNToxMFrOEv9MNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNToxOTo0MlrOEwTpzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzIxMDc5OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/KafkaRollerST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMDowNToxMFrOHlO_Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMDowNToxMFrOHlO_Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgwNDg3OA==", "bodyText": "The empty line is not needed I guess.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3848#discussion_r508804878", "createdAt": "2020-10-20T20:05:10Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/KafkaRollerST.java", "diffHunk": "@@ -205,6 +217,69 @@ void testKafkaPodPending() {\n         KafkaUtils.waitForKafkaReady(CLUSTER_NAME);\n     }\n \n+    @Test\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f746a6b41580950d2bef4b7da3aa42891ffb8af9"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzIxNjg3OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/KafkaRollerST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMDowNjo0OVrOHlPCow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMDowNjo0OVrOHlPCow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgwNTc5NQ==", "bodyText": "Might be worth adding a comment to explain what and why is it testing.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3848#discussion_r508805795", "createdAt": "2020-10-20T20:06:49Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/KafkaRollerST.java", "diffHunk": "@@ -205,6 +217,69 @@ void testKafkaPodPending() {\n         KafkaUtils.waitForKafkaReady(CLUSTER_NAME);\n     }\n \n+    @Test\n+\n+    void testKafkaPodPendingDueToRack() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f746a6b41580950d2bef4b7da3aa42891ffb8af9"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MDY5NDMxOnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNDo0MTozMlrOHlwHGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNDo0MTozMlrOHlwHGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM0NzYxMA==", "bodyText": "No need for this to return a Future. It could return a boolean just as well.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3848#discussion_r509347610", "createdAt": "2020-10-21T14:41:32Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java", "diffHunk": "@@ -168,7 +168,17 @@ public KafkaRoller(Vertx vertx, Reconciliation reconciliation, PodOperator podOp\n     private ConcurrentHashMap<Integer, RestartContext> podToContext = new ConcurrentHashMap<>();\n     private Function<Pod, List<String>> podNeedsRestart;\n \n-    /**\n+    private Future<Void> initAdminClient() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab1a5f5e08a60dab03cac0b865602264b8af5519"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MDg3NzkwOnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/KafkaRollerST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNToxNzoxMVrOHlx6VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNToxNzoxMVrOHlx6VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM3NzEwOA==", "bodyText": "What state of pods is expect? You can add it to comment as well", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3848#discussion_r509377108", "createdAt": "2020-10-21T15:17:11Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/KafkaRollerST.java", "diffHunk": "@@ -205,6 +214,56 @@ void testKafkaPodPending() {\n         KafkaUtils.waitForKafkaReady(CLUSTER_NAME);\n     }\n \n+    @Test\n+    void testKafkaPodPendingDueToRack() {\n+        // Testing this scenario\n+        // 1. deploy Kafka with wrong pod template (looking for nonexistent node)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31627c6c0de965ae486231a4a7e7fbe76dbf6a14"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MDg5MTAxOnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/KafkaRollerST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNToxOTo0MlrOHlyCbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNToxOTo0MlrOHlyCbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM3OTE4Mg==", "bodyText": "Shouldn't we add some check that pods are in pending for some time?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3848#discussion_r509379182", "createdAt": "2020-10-21T15:19:42Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/KafkaRollerST.java", "diffHunk": "@@ -205,6 +214,56 @@ void testKafkaPodPending() {\n         KafkaUtils.waitForKafkaReady(CLUSTER_NAME);\n     }\n \n+    @Test\n+    void testKafkaPodPendingDueToRack() {\n+        // Testing this scenario\n+        // 1. deploy Kafka with wrong pod template (looking for nonexistent node)\n+        // 2. wait for Kafka not ready\n+        // 3. fix the Kafka CR\n+        // 4. wait for Kafka ready\n+\n+        NodeSelectorRequirement nsr = new NodeSelectorRequirementBuilder()\n+                .withKey(\"dedicated_test\")\n+                .withNewOperator(\"In\")\n+                .withValues(\"Kafka\")\n+                .build();\n+\n+        NodeSelectorTerm nst = new NodeSelectorTermBuilder()\n+                .withMatchExpressions(nsr)\n+                .build();\n+\n+        Affinity affinity = new AffinityBuilder()\n+                .withNewNodeAffinity()\n+                    .withNewRequiredDuringSchedulingIgnoredDuringExecution()\n+                        .withNodeSelectorTerms(nst)\n+                    .endRequiredDuringSchedulingIgnoredDuringExecution()\n+                .endNodeAffinity()\n+                .build();\n+\n+        PodTemplate pt = new PodTemplate();\n+        pt.setAffinity(affinity);\n+\n+        KafkaClusterTemplate kct = new KafkaClusterTemplateBuilder()\n+                .withPod(pt)\n+                .build();\n+\n+        KafkaResource.kafkaWithoutWait(KafkaResource.defaultKafka(CLUSTER_NAME, 3, 3)\n+                .editSpec()\n+                    .editKafka()\n+                        .withTemplate(kct)\n+                    .endKafka()\n+                .endSpec()\n+                .build());\n+\n+        KafkaUtils.waitForKafkaNotReady(CLUSTER_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31627c6c0de965ae486231a4a7e7fbe76dbf6a14"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 956, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}