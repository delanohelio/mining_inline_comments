{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NTgxMTQ5", "number": 2867, "title": "Dynamically update EO logging", "bodyText": "Signed-off-by: Stanislav Knot sknot@redhat.com\nType of change\n\nEnhancement / new feature\n\nDescription\nDynamically update EO (TO&UO) logging. I have used this approach: https://stackoverflow.com/a/16216956/3025610\nFixes #2808\nNote: After CO with this is deployed, it is necessary to roll eo pod. It will be started with updated log4j2.properties file. When it is started with updated files, all logging changes are performed dynamically. A possible solution is adding annotation strimzi.io/dynamic-logging=true\nChecklist\n\n Update/write design documentation in ./design\n Write tests\n Make sure all tests pass\n Update documentation\n Check RBAC rights for Kubernetes / OpenShift roles\n Try your changes from Pod inside your Kubernetes and OpenShift cluster, not just locally\n Reference relevant issue(s) and close them after merging\n Update CHANGELOG.md", "createdAt": "2020-04-21T10:22:34Z", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867", "merged": true, "mergeCommit": {"oid": "448ca425662bd13847ad21211784dbd04d34495f"}, "closed": true, "closedAt": "2020-07-09T20:16:10Z", "author": {"login": "sknot-rh"}, "timelineItems": {"totalCount": 74, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZxEEhgBqjMyNTU1NzY5MDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABczOmlTAFqTQ0NTU4ODI1Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7aa487cd5bce0ac3c2bbc5af121f6ba62f3b363e", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/7aa487cd5bce0ac3c2bbc5af121f6ba62f3b363e", "committedDate": "2020-04-21T10:19:12Z", "message": "Dynamically update EO logging\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "c0773ab0b0ac147355a4a56adf462fc9378aacb6", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c0773ab0b0ac147355a4a56adf462fc9378aacb6", "committedDate": "2020-04-21T10:23:50Z", "message": "Dynamically update EO logging\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c0773ab0b0ac147355a4a56adf462fc9378aacb6", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c0773ab0b0ac147355a4a56adf462fc9378aacb6", "committedDate": "2020-04-21T10:23:50Z", "message": "Dynamically update EO logging\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "f9003a66181317abdfd6658c89a7caaf882b2fa7", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/f9003a66181317abdfd6658c89a7caaf882b2fa7", "committedDate": "2020-04-21T10:24:05Z", "message": "Dynamically update EO logging\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NjA2NTUz", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#pullrequestreview-398606553", "createdAt": "2020-04-22T21:34:08Z", "commit": {"oid": "eef5f038315cc85ca5b732297d1a140c8b668d45"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMTozNDowOFrOGKM0sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMTo0NDo1NVrOGKNKjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM0OTA0MA==", "bodyText": "This looks a bit weird ... by the name it is supposed to add something, but it just returns what it gets. Is this something what still needs to be added?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#discussion_r413349040", "createdAt": "2020-04-22T21:34:08Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java", "diffHunk": "@@ -368,6 +368,10 @@ public String parseLogging(Logging logging, ConfigMap externalCm) {\n         }\n     }\n \n+    protected String addMonitorIntervalToExternalLogging(String data) {\n+        return data;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eef5f038315cc85ca5b732297d1a140c8b668d45"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM1MDk4NA==", "bodyText": "Is this 15 seconds? How do we know that is the right number? Also, since it is used on several places, should we have a constant?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#discussion_r413350984", "createdAt": "2020-04-22T21:37:36Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/EntityTopicOperator.java", "diffHunk": "@@ -310,8 +310,28 @@ public void setContainerEnvVars(List<ContainerEnvVar> envVars) {\n         templateContainerEnvVars = envVars;\n     }\n \n-\n     public void setContainerSecurityContext(SecurityContext securityContext) {\n         templateContainerSecurityContext = securityContext;\n     }\n+\n+    /**\n+     * Transforms map to log4j properties file format\n+     * @param properties map with properties\n+     * @return\n+     */\n+    @Override\n+    protected String createPropertiesString(OrderedProperties properties) {\n+        properties.addPair(\"monitorInterval\", \"15\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eef5f038315cc85ca5b732297d1a140c8b668d45"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM1MTMxMw==", "bodyText": "These seem to be duplicates with the EnttityTopicOperator. Should we factor them out somewhere?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#discussion_r413351313", "createdAt": "2020-04-22T21:38:18Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/EntityUserOperator.java", "diffHunk": "@@ -332,4 +332,25 @@ public void setContainerEnvVars(List<ContainerEnvVar> envVars) {\n     public void setContainerSecurityContext(SecurityContext securityContext) {\n         templateContainerSecurityContext = securityContext;\n     }\n+\n+    /**\n+     * Transforms map to log4j properties file format\n+     * @param properties map with properties\n+     * @return\n+     */\n+    @Override\n+    protected String createPropertiesString(OrderedProperties properties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eef5f038315cc85ca5b732297d1a140c8b668d45"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM1MjQ0Nw==", "bodyText": "This is f*cking confusing as hell. Is it testing that pod name did or didn't changed? I guess it is that it didn't?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#discussion_r413352447", "createdAt": "2020-04-22T21:40:36Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/LogSettingST.java", "diffHunk": "@@ -479,6 +482,138 @@ void testJSONFormatLogging() {\n         assertThat(StUtils.checkLogForJSONFormat(eoPods, \"user-operator\"), is(true));\n     }\n \n+    @Test\n+    @Order(14)\n+    void testDynamicallySetEOloggingLevels() {\n+        String eoName = KafkaResources.entityOperatorDeploymentName(CLUSTER_NAME);\n+        Map<String, String> eoPods = DeploymentUtils.depSnapshot(eoName);\n+\n+        // change inline logging\n+        InlineLogging il = new InlineLogging();\n+        il.setLoggers(Collections.singletonMap(\"rootLogger.level\", INFO));\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, k -> {\n+            k.getSpec().getEntityOperator().getTopicOperator().setLogging(il);\n+            k.getSpec().getEntityOperator().getUserOperator().setLogging(il);\n+        });\n+\n+        String eoPodName = eoPods.keySet().iterator().next();\n+        String eoPodHash = eoPods.get(eoPodName);\n+        String finalEoPodName = eoPodName;\n+        TestUtils.waitFor(\"Logger change\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT, () -> {\n+                return cmdKubeClient().execInPodContainer(finalEoPodName, \"topic-operator\", \"cat\", \"/opt/topic-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=INFO\")\n+                && cmdKubeClient().execInPodContainer(finalEoPodName, \"user-operator\", \"cat\", \"/opt/user-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=INFO\");\n+            }\n+        );\n+\n+        eoPods = DeploymentUtils.depSnapshot(eoName);\n+        String eoPodNameAfterLoggingChange = eoPods.keySet().iterator().next();\n+        assertThat(\"Pod name changed after logging changed\", eoPodNameAfterLoggingChange.equals(eoPodName), is(true));\n+        assertThat(\"Pod hash changed after logging changed\", eoPods.get(eoPodNameAfterLoggingChange).equals(eoPodHash), is(true));\n+\n+\n+        ConfigMap configMapTo = new ConfigMapBuilder()\n+                .withNewMetadata()\n+                .withName(\"external-configmap-to\")\n+                .withNamespace(NAMESPACE)\n+                .endMetadata()\n+                .withData(Collections.singletonMap(\"log4j2.properties\", \"name = TOConfig\\n\" +\n+                        \"\\n\" +\n+                        \"appender.console.type = Console\\n\" +\n+                        \"appender.console.name = STDOUT\\n\" +\n+                        \"appender.console.layout.type = PatternLayout\\n\" +\n+                        \"appender.console.layout.pattern = [%d] %-5p <%-12.12c{1}:%L> [%-12.12t] %m%n\\n\" +\n+                        \"\\n\" +\n+                        \"rootLogger.level = TRACE\\n\" +\n+                        \"rootLogger.appenderRefs = stdout\\n\" +\n+                        \"rootLogger.appenderRef.console.ref = STDOUT\\n\" +\n+                        \"rootLogger.additivity = false\"))\n+                .build();\n+\n+        ConfigMap configMapUo = new ConfigMapBuilder()\n+                .withNewMetadata()\n+                .withName(\"external-configmap-uo\")\n+                .withNamespace(NAMESPACE)\n+                .endMetadata()\n+                .addToData(Collections.singletonMap(\"log4j2.properties\", \"name = UOConfig\\n\" +\n+                        \"\\n\" +\n+                        \"appender.console.type = Console\\n\" +\n+                        \"appender.console.name = STDOUT\\n\" +\n+                        \"appender.console.layout.type = PatternLayout\\n\" +\n+                        \"appender.console.layout.pattern = [%d] %-5p <%-12.12c{1}:%L> [%-12.12t] %m%n\\n\" +\n+                        \"\\n\" +\n+                        \"rootLogger.level = TRACE\\n\" +\n+                        \"rootLogger.appenderRefs = stdout\\n\" +\n+                        \"rootLogger.appenderRef.console.ref = STDOUT\\n\" +\n+                        \"rootLogger.additivity = false\"))\n+                .build();\n+\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(configMapTo);\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(configMapUo);\n+\n+        ExternalLogging elTo = new ExternalLoggingBuilder()\n+                .withName(\"external-configmap-to\")\n+                .build();\n+\n+        ExternalLogging elUo = new ExternalLoggingBuilder()\n+                .withName(\"external-configmap-uo\")\n+                .build();\n+\n+        // change to external logging\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, k -> {\n+            k.getSpec().getEntityOperator().getTopicOperator().setLogging(elTo);\n+            k.getSpec().getEntityOperator().getUserOperator().setLogging(elUo);\n+        });\n+\n+        String finalEoPodName1 = eoPodName;\n+        TestUtils.waitFor(\"Logger change\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT, () -> {\n+                return cmdKubeClient().execInPodContainer(finalEoPodName1, \"topic-operator\", \"cat\", \"/opt/topic-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level = TRACE\")\n+                        && cmdKubeClient().execInPodContainer(finalEoPodName1, \"user-operator\", \"cat\", \"/opt/user-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level = TRACE\");\n+            }\n+        );\n+\n+        eoPodName = eoPods.keySet().iterator().next();\n+        eoPodHash = eoPods.get(eoPodName);\n+        eoPods = DeploymentUtils.depSnapshot(eoName);\n+        eoPodNameAfterLoggingChange = eoPods.keySet().iterator().next();\n+        assertThat(\"Pod name changed after logging changed\", eoPodNameAfterLoggingChange.equals(eoPodName), is(true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eef5f038315cc85ca5b732297d1a140c8b668d45"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM1MzE5Mw==", "bodyText": "What kind of Hash is this comparing?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#discussion_r413353193", "createdAt": "2020-04-22T21:41:54Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/LogSettingST.java", "diffHunk": "@@ -479,6 +482,138 @@ void testJSONFormatLogging() {\n         assertThat(StUtils.checkLogForJSONFormat(eoPods, \"user-operator\"), is(true));\n     }\n \n+    @Test\n+    @Order(14)\n+    void testDynamicallySetEOloggingLevels() {\n+        String eoName = KafkaResources.entityOperatorDeploymentName(CLUSTER_NAME);\n+        Map<String, String> eoPods = DeploymentUtils.depSnapshot(eoName);\n+\n+        // change inline logging\n+        InlineLogging il = new InlineLogging();\n+        il.setLoggers(Collections.singletonMap(\"rootLogger.level\", INFO));\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, k -> {\n+            k.getSpec().getEntityOperator().getTopicOperator().setLogging(il);\n+            k.getSpec().getEntityOperator().getUserOperator().setLogging(il);\n+        });\n+\n+        String eoPodName = eoPods.keySet().iterator().next();\n+        String eoPodHash = eoPods.get(eoPodName);\n+        String finalEoPodName = eoPodName;\n+        TestUtils.waitFor(\"Logger change\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT, () -> {\n+                return cmdKubeClient().execInPodContainer(finalEoPodName, \"topic-operator\", \"cat\", \"/opt/topic-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=INFO\")\n+                && cmdKubeClient().execInPodContainer(finalEoPodName, \"user-operator\", \"cat\", \"/opt/user-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=INFO\");\n+            }\n+        );\n+\n+        eoPods = DeploymentUtils.depSnapshot(eoName);\n+        String eoPodNameAfterLoggingChange = eoPods.keySet().iterator().next();\n+        assertThat(\"Pod name changed after logging changed\", eoPodNameAfterLoggingChange.equals(eoPodName), is(true));\n+        assertThat(\"Pod hash changed after logging changed\", eoPods.get(eoPodNameAfterLoggingChange).equals(eoPodHash), is(true));\n+\n+\n+        ConfigMap configMapTo = new ConfigMapBuilder()\n+                .withNewMetadata()\n+                .withName(\"external-configmap-to\")\n+                .withNamespace(NAMESPACE)\n+                .endMetadata()\n+                .withData(Collections.singletonMap(\"log4j2.properties\", \"name = TOConfig\\n\" +\n+                        \"\\n\" +\n+                        \"appender.console.type = Console\\n\" +\n+                        \"appender.console.name = STDOUT\\n\" +\n+                        \"appender.console.layout.type = PatternLayout\\n\" +\n+                        \"appender.console.layout.pattern = [%d] %-5p <%-12.12c{1}:%L> [%-12.12t] %m%n\\n\" +\n+                        \"\\n\" +\n+                        \"rootLogger.level = TRACE\\n\" +\n+                        \"rootLogger.appenderRefs = stdout\\n\" +\n+                        \"rootLogger.appenderRef.console.ref = STDOUT\\n\" +\n+                        \"rootLogger.additivity = false\"))\n+                .build();\n+\n+        ConfigMap configMapUo = new ConfigMapBuilder()\n+                .withNewMetadata()\n+                .withName(\"external-configmap-uo\")\n+                .withNamespace(NAMESPACE)\n+                .endMetadata()\n+                .addToData(Collections.singletonMap(\"log4j2.properties\", \"name = UOConfig\\n\" +\n+                        \"\\n\" +\n+                        \"appender.console.type = Console\\n\" +\n+                        \"appender.console.name = STDOUT\\n\" +\n+                        \"appender.console.layout.type = PatternLayout\\n\" +\n+                        \"appender.console.layout.pattern = [%d] %-5p <%-12.12c{1}:%L> [%-12.12t] %m%n\\n\" +\n+                        \"\\n\" +\n+                        \"rootLogger.level = TRACE\\n\" +\n+                        \"rootLogger.appenderRefs = stdout\\n\" +\n+                        \"rootLogger.appenderRef.console.ref = STDOUT\\n\" +\n+                        \"rootLogger.additivity = false\"))\n+                .build();\n+\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(configMapTo);\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(configMapUo);\n+\n+        ExternalLogging elTo = new ExternalLoggingBuilder()\n+                .withName(\"external-configmap-to\")\n+                .build();\n+\n+        ExternalLogging elUo = new ExternalLoggingBuilder()\n+                .withName(\"external-configmap-uo\")\n+                .build();\n+\n+        // change to external logging\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, k -> {\n+            k.getSpec().getEntityOperator().getTopicOperator().setLogging(elTo);\n+            k.getSpec().getEntityOperator().getUserOperator().setLogging(elUo);\n+        });\n+\n+        String finalEoPodName1 = eoPodName;\n+        TestUtils.waitFor(\"Logger change\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT, () -> {\n+                return cmdKubeClient().execInPodContainer(finalEoPodName1, \"topic-operator\", \"cat\", \"/opt/topic-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level = TRACE\")\n+                        && cmdKubeClient().execInPodContainer(finalEoPodName1, \"user-operator\", \"cat\", \"/opt/user-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level = TRACE\");\n+            }\n+        );\n+\n+        eoPodName = eoPods.keySet().iterator().next();\n+        eoPodHash = eoPods.get(eoPodName);\n+        eoPods = DeploymentUtils.depSnapshot(eoName);\n+        eoPodNameAfterLoggingChange = eoPods.keySet().iterator().next();\n+        assertThat(\"Pod name changed after logging changed\", eoPodNameAfterLoggingChange.equals(eoPodName), is(true));\n+        assertThat(\"Pod hash changed after logging changed\", eoPods.get(eoPodNameAfterLoggingChange).equals(eoPodHash), is(true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eef5f038315cc85ca5b732297d1a140c8b668d45"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM1MzczMA==", "bodyText": "How do ou know you are changing it? Aran't INFO levels usually the defaults?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#discussion_r413353730", "createdAt": "2020-04-22T21:42:57Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/LogSettingST.java", "diffHunk": "@@ -479,6 +482,138 @@ void testJSONFormatLogging() {\n         assertThat(StUtils.checkLogForJSONFormat(eoPods, \"user-operator\"), is(true));\n     }\n \n+    @Test\n+    @Order(14)\n+    void testDynamicallySetEOloggingLevels() {\n+        String eoName = KafkaResources.entityOperatorDeploymentName(CLUSTER_NAME);\n+        Map<String, String> eoPods = DeploymentUtils.depSnapshot(eoName);\n+\n+        // change inline logging\n+        InlineLogging il = new InlineLogging();\n+        il.setLoggers(Collections.singletonMap(\"rootLogger.level\", INFO));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eef5f038315cc85ca5b732297d1a140c8b668d45"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM1NDYzNg==", "bodyText": "Maybe I missed it. But I'm not sure where this really tests the reloading. But I do not see any test that the log4j2.properties was reloaded and the new log level is used. I think that is the mainpoint odf this change so it should be tested.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#discussion_r413354636", "createdAt": "2020-04-22T21:44:55Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/LogSettingST.java", "diffHunk": "@@ -479,6 +482,138 @@ void testJSONFormatLogging() {\n         assertThat(StUtils.checkLogForJSONFormat(eoPods, \"user-operator\"), is(true));\n     }\n \n+    @Test\n+    @Order(14)\n+    void testDynamicallySetEOloggingLevels() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eef5f038315cc85ca5b732297d1a140c8b668d45"}, "originalPosition": 24}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eef5f038315cc85ca5b732297d1a140c8b668d45", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/eef5f038315cc85ca5b732297d1a140c8b668d45", "committedDate": "2020-04-21T10:35:04Z", "message": "checkstyle\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "db3b651650f52d8596faa12c606ea22d2f3c0c9b", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/db3b651650f52d8596faa12c606ea22d2f3c0c9b", "committedDate": "2020-05-18T08:41:15Z", "message": "checkstyle\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "de1644307d9cbddd8b1f68564851a732b0e550a5", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/de1644307d9cbddd8b1f68564851a732b0e550a5", "committedDate": "2020-05-22T06:16:41Z", "message": "forgotten assertion\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "bfa8483c65929106aa424f8b12e1c394ebb719c3", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/bfa8483c65929106aa424f8b12e1c394ebb719c3", "committedDate": "2020-05-22T06:22:55Z", "message": "forgotten assertion\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NzA2NTc2", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#pullrequestreview-416706576", "createdAt": "2020-05-22T07:35:11Z", "commit": {"oid": "bfa8483c65929106aa424f8b12e1c394ebb719c3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4OTIyMjIx", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#pullrequestreview-418922221", "createdAt": "2020-05-27T07:24:55Z", "commit": {"oid": "bfa8483c65929106aa424f8b12e1c394ebb719c3"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzoyNDo1NVrOGa8nMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzozMToyMFrOGa80oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwOTIzMg==", "bodyText": "Thsi should move to 0.19.0", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#discussion_r430909232", "createdAt": "2020-05-27T07:24:55Z", "author": {"login": "scholzj"}, "path": "CHANGELOG.md", "diffHunk": "@@ -19,6 +19,7 @@\n * Add support for CORS in the HTTP Kafka Bridge\n * Pass HTTP Proxy configuration from operator to operands\n * Add Cruise Control support, KafkaRebalance resource and rebalance operator\n+* Support dynamically changeable logging in the Entity Operator ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfa8483c65929106aa424f8b12e1c394ebb719c3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxMDE1Mg==", "bodyText": "How can the users change this? Through the logger configuration in the CR? Or only with external logging configuration? In general, 5 seconds (is it seconds?) seems very short ... logging is not changed so often ... would 30 seconds or 1 minute be ore suitable?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#discussion_r430910152", "createdAt": "2020-05-27T07:26:36Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java", "diffHunk": "@@ -398,6 +398,21 @@ public String parseLogging(Logging logging, ConfigMap externalCm) {\n         }\n     }\n \n+    /**\n+     * Adds 'monitorInterval=5' to external logging ConfigMap. If ConfigMap already has this value, it is persisted.\n+     * This property is ignored by log4j but used by log4j2.\n+     * @param data\n+     * @return\n+     */\n+    protected String addMonitorIntervalToExternalLogging(String data) {\n+        if (!data.contains(\"monitorInterval=\")) {\n+            // do not override custom value\n+            return data + \"\\nmonitorInterval=5\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfa8483c65929106aa424f8b12e1c394ebb719c3"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxMDg3MQ==", "bodyText": "The javadoc suggests that this is Log4j specific method? If yes, it should be reflected in the name ... e.g. createLog4j2Properties", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#discussion_r430910871", "createdAt": "2020-05-27T07:27:57Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/EntityTopicOperator.java", "diffHunk": "@@ -313,8 +313,19 @@ public void setContainerEnvVars(List<ContainerEnvVar> envVars) {\n         templateContainerEnvVars = envVars;\n     }\n \n-\n     public void setContainerSecurityContext(SecurityContext securityContext) {\n         templateContainerSecurityContext = securityContext;\n     }\n+\n+    /**\n+     * Transforms properties to log4j2 properties file format and adds property for reloading the config\n+     * @param properties map with properties\n+     * @return modified string with monitorInterval\n+     */\n+    @Override\n+    public String createPropertiesString(OrderedProperties properties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfa8483c65929106aa424f8b12e1c394ebb719c3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxMTI3Mg==", "bodyText": "So, what does this test? Is it missing some assert?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#discussion_r430911272", "createdAt": "2020-05-27T07:28:42Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/model/EntityOperatorTest.java", "diffHunk": "@@ -93,6 +93,14 @@\n \n     private final EntityOperator entityOperator = EntityOperator.fromCrd(resource, VERSIONS);\n \n+    @Test\n+    public void lala() {\n+        OrderedProperties op = new OrderedProperties();\n+        op.addPair(\"karel\", \"42\");\n+        String res = entityOperator.createPropertiesString(op);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfa8483c65929106aa424f8b12e1c394ebb719c3"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxMjY3Mw==", "bodyText": "I think this comment stands ... this test does not test dynamic logging reconfiguration. It just tests how Kuberetes update the mounted config map.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#discussion_r430912673", "createdAt": "2020-05-27T07:31:20Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/LogSettingST.java", "diffHunk": "@@ -479,6 +482,138 @@ void testJSONFormatLogging() {\n         assertThat(StUtils.checkLogForJSONFormat(eoPods, \"user-operator\"), is(true));\n     }\n \n+    @Test\n+    @Order(14)\n+    void testDynamicallySetEOloggingLevels() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM1NDYzNg=="}, "originalCommit": {"oid": "eef5f038315cc85ca5b732297d1a140c8b668d45"}, "originalPosition": 24}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bfa8483c65929106aa424f8b12e1c394ebb719c3", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/bfa8483c65929106aa424f8b12e1c394ebb719c3", "committedDate": "2020-05-22T06:22:55Z", "message": "forgotten assertion\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "98056c1fd8b56ddb06f60d15e89040e6021a3bff", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/98056c1fd8b56ddb06f60d15e89040e6021a3bff", "committedDate": "2020-05-29T05:23:51Z", "message": "comment\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a3da2ed669b2de541e35a70a75ed077e330cb05f", "author": {"user": {"login": "im-konge", "name": "Luk\u00e1\u0161 Kr\u00e1l"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a3da2ed669b2de541e35a70a75ed077e330cb05f", "committedDate": "2020-06-01T06:10:40Z", "message": "update the test (#2)\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>"}, "afterCommit": {"oid": "03833a2facfbd56919385cb9f7f2261a0ad19ef8", "author": {"user": {"login": "im-konge", "name": "Luk\u00e1\u0161 Kr\u00e1l"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/03833a2facfbd56919385cb9f7f2261a0ad19ef8", "committedDate": "2020-06-01T06:12:26Z", "message": "update the test (#2)\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9aeb7a69c7a0397c86c25beb8f408b362c1e53cb", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/9aeb7a69c7a0397c86c25beb8f408b362c1e53cb", "committedDate": "2020-06-01T09:06:12Z", "message": "external logging\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "08f4267d26272f5b498d61d08d491f7f3f8e8175", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/08f4267d26272f5b498d61d08d491f7f3f8e8175", "committedDate": "2020-06-01T09:23:44Z", "message": "external logging\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "08f4267d26272f5b498d61d08d491f7f3f8e8175", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/08f4267d26272f5b498d61d08d491f7f3f8e8175", "committedDate": "2020-06-01T09:23:44Z", "message": "external logging\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "085e27008db8a59ddf0fb30453b3d6213d6a40e3", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/085e27008db8a59ddf0fb30453b3d6213d6a40e3", "committedDate": "2020-06-01T09:27:07Z", "message": "external logging\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "085e27008db8a59ddf0fb30453b3d6213d6a40e3", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/085e27008db8a59ddf0fb30453b3d6213d6a40e3", "committedDate": "2020-06-01T09:27:07Z", "message": "external logging\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "10583dee30358505108f708b7dc62602127ac1dd", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/10583dee30358505108f708b7dc62602127ac1dd", "committedDate": "2020-06-01T09:39:43Z", "message": "external logging\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7bd6a587d8aef8875e30098e0f4eb22a32578f4e", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/7bd6a587d8aef8875e30098e0f4eb22a32578f4e", "committedDate": "2020-06-01T12:49:55Z", "message": "what\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "c6b3aed23499831b1476a82099936dcd4a451625", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c6b3aed23499831b1476a82099936dcd4a451625", "committedDate": "2020-06-01T13:03:16Z", "message": "what\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c6b3aed23499831b1476a82099936dcd4a451625", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c6b3aed23499831b1476a82099936dcd4a451625", "committedDate": "2020-06-01T13:03:16Z", "message": "what\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "1d02c041207c7587574f203c75bd553488e893d4", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/1d02c041207c7587574f203c75bd553488e893d4", "committedDate": "2020-06-02T05:49:22Z", "message": "what\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "35b64c54e2ffb81c8c4b0e01d84b8f513ad1dfe7", "author": {"user": {"login": "im-konge", "name": "Luk\u00e1\u0161 Kr\u00e1l"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/35b64c54e2ffb81c8c4b0e01d84b8f513ad1dfe7", "committedDate": "2020-06-03T05:40:03Z", "message": "add another assertions, add logs (#3)\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>"}, "afterCommit": {"oid": "ed5ba0bf115468050c074f4a09e2e7db4a3510a1", "author": {"user": {"login": "im-konge", "name": "Luk\u00e1\u0161 Kr\u00e1l"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ed5ba0bf115468050c074f4a09e2e7db4a3510a1", "committedDate": "2020-06-03T05:43:53Z", "message": "add another assertions, add logs (#3)\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ed5ba0bf115468050c074f4a09e2e7db4a3510a1", "author": {"user": {"login": "im-konge", "name": "Luk\u00e1\u0161 Kr\u00e1l"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ed5ba0bf115468050c074f4a09e2e7db4a3510a1", "committedDate": "2020-06-03T05:43:53Z", "message": "add another assertions, add logs (#3)\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "31a4031db18fe50f3bbabacd01d9df196a49871f", "author": {"user": {"login": "im-konge", "name": "Luk\u00e1\u0161 Kr\u00e1l"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/31a4031db18fe50f3bbabacd01d9df196a49871f", "committedDate": "2020-06-05T06:34:07Z", "message": "add another assertions, add logs (#3)\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "31a4031db18fe50f3bbabacd01d9df196a49871f", "author": {"user": {"login": "im-konge", "name": "Luk\u00e1\u0161 Kr\u00e1l"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/31a4031db18fe50f3bbabacd01d9df196a49871f", "committedDate": "2020-06-05T06:34:07Z", "message": "add another assertions, add logs (#3)\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "d2bf0a3d02a26a4885eeb67fb7d862aa442e88bf", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d2bf0a3d02a26a4885eeb67fb7d862aa442e88bf", "committedDate": "2020-06-08T10:22:39Z", "message": "rebase\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjIwNTMy", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#pullrequestreview-426220532", "createdAt": "2020-06-08T13:14:16Z", "commit": {"oid": "d2bf0a3d02a26a4885eeb67fb7d862aa442e88bf"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoxNDoxNlrOGgdT1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoxNTo0M1rOGgdZBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY4NzgyOQ==", "bodyText": "Can you please delete this @Order(14)? As we have new suite, we don't need to order the tests (because we are not deleting anything)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#discussion_r436687829", "createdAt": "2020-06-08T13:14:16Z", "author": {"login": "im-konge"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/log/LoggingChangeST.java", "diffHunk": "@@ -174,6 +184,162 @@ void testJSONFormatLogging() {\n         assertThat(StUtils.checkLogForJSONFormat(eoPods, \"user-operator\"), is(true));\n     }\n \n+    @Test\n+    @Order(14)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2bf0a3d02a26a4885eeb67fb7d862aa442e88bf"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY4OTE1OQ==", "bodyText": "The test will fail, because Kafka is not setup. Can you add it there? Or should I take a look at it?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#discussion_r436689159", "createdAt": "2020-06-08T13:15:43Z", "author": {"login": "im-konge"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/log/LoggingChangeST.java", "diffHunk": "@@ -174,6 +184,162 @@ void testJSONFormatLogging() {\n         assertThat(StUtils.checkLogForJSONFormat(eoPods, \"user-operator\"), is(true));\n     }\n \n+    @Test\n+    @Order(14)\n+    @SuppressWarnings({\"checkstyle:MethodLength\"})\n+    void testDynamicallySetEOloggingLevels() throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2bf0a3d02a26a4885eeb67fb7d862aa442e88bf"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2OTU0NzQ5", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#pullrequestreview-426954749", "createdAt": "2020-06-09T09:23:43Z", "commit": {"oid": "06cfd037f77c84bd2992caf3af8ef01f47de2b1f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MDY4MTkx", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#pullrequestreview-427068191", "createdAt": "2020-06-09T12:03:42Z", "commit": {"oid": "06cfd037f77c84bd2992caf3af8ef01f47de2b1f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjowMzo0MlrOGhGBZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjoxNjoyN1rOGhGcWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM1NDg1Mw==", "bodyText": "what's data?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#discussion_r437354853", "createdAt": "2020-06-09T12:03:42Z", "author": {"login": "ppatierno"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java", "diffHunk": "@@ -408,21 +407,35 @@ public String parseLogging(Logging logging, ConfigMap externalCm) {\n                 newSettings.addMapPairs(inlineLogging.getLoggers());\n             }\n \n-            return createPropertiesString(newSettings);\n-\n+            return createLog4jProperties(newSettings);\n         } else if (logging instanceof ExternalLogging) {\n             if (externalCm != null && externalCm.getData() != null && externalCm.getData().containsKey(getAncillaryConfigMapKeyLogConfig())) {\n-                return externalCm.getData().get(getAncillaryConfigMapKeyLogConfig());\n+                return addMonitorIntervalToExternalLogging(externalCm.getData().get(getAncillaryConfigMapKeyLogConfig()));\n             } else {\n                 log.warn(\"ConfigMap {} with external logging configuration does not exist or doesn't contain the configuration under the {} key. Default logging settings are used.\",\n                         ((ExternalLogging) getLogging()).getName(),\n                         getAncillaryConfigMapKeyLogConfig());\n-                return createPropertiesString(getDefaultLogConfig());\n+                return createLog4jProperties(getDefaultLogConfig());\n             }\n \n         } else {\n             log.debug(\"logging is not set, using default loggers\");\n-            return createPropertiesString(getDefaultLogConfig());\n+            return createLog4jProperties(getDefaultLogConfig());\n+        }\n+    }\n+\n+    /**\n+     * Adds 'monitorInterval=5' to external logging ConfigMap. If ConfigMap already has this value, it is persisted.\n+     * This property is ignored by log4j but used by log4j2.\n+     * @param data", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06cfd037f77c84bd2992caf3af8ef01f47de2b1f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM2MTc1Mw==", "bodyText": "my doubt is ...\nThis feature seems to be available only when the user uses external logging configuration (via ConfigMap) and what we are doing here is just adding a field (the monitorInterval one). It means that the user could do that by himself, if we document it or if the user already knows about this feature.\nOr did I get it wrong on how it works?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#discussion_r437361753", "createdAt": "2020-06-09T12:16:27Z", "author": {"login": "ppatierno"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java", "diffHunk": "@@ -408,21 +407,35 @@ public String parseLogging(Logging logging, ConfigMap externalCm) {\n                 newSettings.addMapPairs(inlineLogging.getLoggers());\n             }\n \n-            return createPropertiesString(newSettings);\n-\n+            return createLog4jProperties(newSettings);\n         } else if (logging instanceof ExternalLogging) {\n             if (externalCm != null && externalCm.getData() != null && externalCm.getData().containsKey(getAncillaryConfigMapKeyLogConfig())) {\n-                return externalCm.getData().get(getAncillaryConfigMapKeyLogConfig());\n+                return addMonitorIntervalToExternalLogging(externalCm.getData().get(getAncillaryConfigMapKeyLogConfig()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06cfd037f77c84bd2992caf3af8ef01f47de2b1f"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MzgyNTcx", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#pullrequestreview-427382571", "createdAt": "2020-06-09T17:23:38Z", "commit": {"oid": "422dabcff73bf5407e8526c1eebaf241c0d2b411"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzoyMzozOFrOGhUv8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzo0MzoyMVrOGhVdoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5NjE0NA==", "bodyText": "The interval is not 30 seconds.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#discussion_r437596144", "createdAt": "2020-06-09T17:23:38Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java", "diffHunk": "@@ -408,21 +407,35 @@ public String parseLogging(Logging logging, ConfigMap externalCm) {\n                 newSettings.addMapPairs(inlineLogging.getLoggers());\n             }\n \n-            return createPropertiesString(newSettings);\n-\n+            return createLog4jProperties(newSettings);\n         } else if (logging instanceof ExternalLogging) {\n             if (externalCm != null && externalCm.getData() != null && externalCm.getData().containsKey(getAncillaryConfigMapKeyLogConfig())) {\n-                return externalCm.getData().get(getAncillaryConfigMapKeyLogConfig());\n+                return addMonitorIntervalToExternalLogging(externalCm.getData().get(getAncillaryConfigMapKeyLogConfig()));\n             } else {\n                 log.warn(\"ConfigMap {} with external logging configuration does not exist or doesn't contain the configuration under the {} key. Default logging settings are used.\",\n                         ((ExternalLogging) getLogging()).getName(),\n                         getAncillaryConfigMapKeyLogConfig());\n-                return createPropertiesString(getDefaultLogConfig());\n+                return createLog4jProperties(getDefaultLogConfig());\n             }\n \n         } else {\n             log.debug(\"logging is not set, using default loggers\");\n-            return createPropertiesString(getDefaultLogConfig());\n+            return createLog4jProperties(getDefaultLogConfig());\n+        }\n+    }\n+\n+    /**\n+     * Adds 'monitorInterval=5' to external logging ConfigMap. If ConfigMap already has this value, it is persisted.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "422dabcff73bf5407e8526c1eebaf241c0d2b411"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5NjY3Mw==", "bodyText": "Does this mean we are adding this to both Log4j2 logs where it is used as well as to log4j logs where it is ignored? That would be wrong since it would be confusing to anyone who checks the map. You should add it only in the place where it is supported.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#discussion_r437596673", "createdAt": "2020-06-09T17:24:36Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java", "diffHunk": "@@ -408,21 +407,35 @@ public String parseLogging(Logging logging, ConfigMap externalCm) {\n                 newSettings.addMapPairs(inlineLogging.getLoggers());\n             }\n \n-            return createPropertiesString(newSettings);\n-\n+            return createLog4jProperties(newSettings);\n         } else if (logging instanceof ExternalLogging) {\n             if (externalCm != null && externalCm.getData() != null && externalCm.getData().containsKey(getAncillaryConfigMapKeyLogConfig())) {\n-                return externalCm.getData().get(getAncillaryConfigMapKeyLogConfig());\n+                return addMonitorIntervalToExternalLogging(externalCm.getData().get(getAncillaryConfigMapKeyLogConfig()));\n             } else {\n                 log.warn(\"ConfigMap {} with external logging configuration does not exist or doesn't contain the configuration under the {} key. Default logging settings are used.\",\n                         ((ExternalLogging) getLogging()).getName(),\n                         getAncillaryConfigMapKeyLogConfig());\n-                return createPropertiesString(getDefaultLogConfig());\n+                return createLog4jProperties(getDefaultLogConfig());\n             }\n \n         } else {\n             log.debug(\"logging is not set, using default loggers\");\n-            return createPropertiesString(getDefaultLogConfig());\n+            return createLog4jProperties(getDefaultLogConfig());\n+        }\n+    }\n+\n+    /**\n+     * Adds 'monitorInterval=5' to external logging ConfigMap. If ConfigMap already has this value, it is persisted.\n+     * This property is ignored by log4j but used by log4j2.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "422dabcff73bf5407e8526c1eebaf241c0d2b411"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5Njk4Mg==", "bodyText": "So, maybe it should be described there what exactly is this expected to be and in which format.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#discussion_r437596982", "createdAt": "2020-06-09T17:25:05Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java", "diffHunk": "@@ -408,21 +407,35 @@ public String parseLogging(Logging logging, ConfigMap externalCm) {\n                 newSettings.addMapPairs(inlineLogging.getLoggers());\n             }\n \n-            return createPropertiesString(newSettings);\n-\n+            return createLog4jProperties(newSettings);\n         } else if (logging instanceof ExternalLogging) {\n             if (externalCm != null && externalCm.getData() != null && externalCm.getData().containsKey(getAncillaryConfigMapKeyLogConfig())) {\n-                return externalCm.getData().get(getAncillaryConfigMapKeyLogConfig());\n+                return addMonitorIntervalToExternalLogging(externalCm.getData().get(getAncillaryConfigMapKeyLogConfig()));\n             } else {\n                 log.warn(\"ConfigMap {} with external logging configuration does not exist or doesn't contain the configuration under the {} key. Default logging settings are used.\",\n                         ((ExternalLogging) getLogging()).getName(),\n                         getAncillaryConfigMapKeyLogConfig());\n-                return createPropertiesString(getDefaultLogConfig());\n+                return createLog4jProperties(getDefaultLogConfig());\n             }\n \n         } else {\n             log.debug(\"logging is not set, using default loggers\");\n-            return createPropertiesString(getDefaultLogConfig());\n+            return createLog4jProperties(getDefaultLogConfig());\n+        }\n+    }\n+\n+    /**\n+     * Adds 'monitorInterval=5' to external logging ConfigMap. If ConfigMap already has this value, it is persisted.\n+     * This property is ignored by log4j but used by log4j2.\n+     * @param data", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM1NDg1Mw=="}, "originalCommit": {"oid": "06cfd037f77c84bd2992caf3af8ef01f47de2b1f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYwNDc5Mw==", "bodyText": "Quite a lot of waiting here. Is all needed?\n\nYou first wait for some unknown time for rolling update to not happen. How long is that waiting?\nThen you wait for the ConfigMap reload\nThan you wait 2*Reconciliation interval for the logging to ... reload?\n\nI wonder if this can be done faster. For example maybe you can check that the pod did not roll just after the other waits instead of waiting for it on the beginning?\nThis applies all over this test - maybe it is really what is needed ... but I wanna raise it just in case you did not considered it.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#discussion_r437604793", "createdAt": "2020-06-09T17:38:14Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/log/LoggingChangeST.java", "diffHunk": "@@ -174,6 +183,162 @@ void testJSONFormatLogging() {\n         assertThat(StUtils.checkLogForJSONFormat(eoPods, \"user-operator\"), is(true));\n     }\n \n+    @Test\n+    @SuppressWarnings({\"checkstyle:MethodLength\"})\n+    void testDynamicallySetEOloggingLevels() throws InterruptedException {\n+        KafkaResource.kafkaPersistent(CLUSTER_NAME, 1, 1).done();\n+        String eoDeploymentName = KafkaResources.entityOperatorDeploymentName(CLUSTER_NAME);\n+        Map<String, String> eoPods = DeploymentUtils.depSnapshot(eoDeploymentName);\n+\n+        final String eoPodName = eoPods.keySet().iterator().next();\n+\n+        LOGGER.info(\"Setting log level of TO and UO to OFF - no records should appear in log\");\n+        // change inline logging\n+        InlineLogging ilOff = new InlineLogging();\n+        ilOff.setLoggers(Collections.singletonMap(\"rootLogger.level\", \"OFF\"));\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, k -> {\n+            k.getSpec().getEntityOperator().getTopicOperator().setLogging(ilOff);\n+            k.getSpec().getEntityOperator().getUserOperator().setLogging(ilOff);\n+        });\n+\n+        LOGGER.info(\"The EO shouldn't roll - verifying pod stability\");\n+        DeploymentUtils.waitForNoRollingUpdate(eoDeploymentName, eoPods);\n+\n+        LOGGER.info(\"Waiting for log4j2.properties will contain desired settings\");\n+        TestUtils.waitFor(\"Logger change\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n+            () -> cmdKubeClient().execInPodContainer(eoPodName, \"topic-operator\", \"cat\", \"/opt/topic-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=OFF\")\n+                        && cmdKubeClient().execInPodContainer(eoPodName, \"user-operator\", \"cat\", \"/opt/user-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=OFF\")\n+        );\n+\n+        LOGGER.info(\"Waiting {} ms for INFO log will disappear\", RECONCILIATION_INTERVAL * 2);\n+        //wait some time if TO and UO will log something\n+        Thread.sleep(RECONCILIATION_INTERVAL * 2);\n+\n+        LOGGER.info(\"Asserting if log is without records\");\n+        assertThat(StUtils.getLogFromPodByTime(eoPodName, \"topic-operator\", \"30s\"), is(emptyString()));\n+        assertThat(StUtils.getLogFromPodByTime(eoPodName, \"user-operator\", \"30s\"), is(emptyString()));\n+\n+        LOGGER.info(\"Changing rootLogger level to INFO with inline logging\");\n+        InlineLogging ilInfo = new InlineLogging();\n+        ilInfo.setLoggers(Collections.singletonMap(\"rootLogger.level\", \"INFO\"));\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, k -> {\n+            k.getSpec().getEntityOperator().getTopicOperator().setLogging(ilInfo);\n+            k.getSpec().getEntityOperator().getUserOperator().setLogging(ilInfo);\n+        });\n+\n+        LOGGER.info(\"The EO shouldn't roll - verifying pod stability\");\n+        DeploymentUtils.waitForNoRollingUpdate(eoDeploymentName, eoPods);\n+\n+        LOGGER.info(\"Waiting for log4j2.properties will contain desired settings\");\n+        TestUtils.waitFor(\"Logger change\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n+            () -> cmdKubeClient().execInPodContainer(eoPodName, \"topic-operator\", \"cat\", \"/opt/topic-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=INFO\")\n+                        && cmdKubeClient().execInPodContainer(eoPodName, \"user-operator\", \"cat\", \"/opt/user-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=INFO\")\n+        );\n+\n+        LOGGER.info(\"Waiting {} ms for INFO log will appear\", RECONCILIATION_INTERVAL * 2);\n+        //wait some time if TO and UO will log something\n+        Thread.sleep(RECONCILIATION_INTERVAL * 2);\n+\n+        LOGGER.info(\"Asserting if log will contain some records\");\n+        assertThat(StUtils.getLogFromPodByTime(eoPodName, \"user-operator\", \"5m\"), is(not(emptyString())));\n+        assertThat(StUtils.getLogFromPodByTime(eoPodName, \"topic-operator\", \"5m\"), is(not(emptyString())));\n+\n+        LOGGER.info(\"Setting log level of TO and UO to OFF - no records should appear in log\");\n+        // change inline logging\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, k -> {\n+            k.getSpec().getEntityOperator().getTopicOperator().setLogging(ilOff);\n+            k.getSpec().getEntityOperator().getUserOperator().setLogging(ilOff);\n+        });\n+\n+        LOGGER.info(\"The EO shouldn't roll - verifying pod stability\");\n+        DeploymentUtils.waitForNoRollingUpdate(eoDeploymentName, eoPods);\n+\n+        LOGGER.info(\"Waiting for log4j2.properties will contain desired settings\");\n+        TestUtils.waitFor(\"Logger change\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n+            () -> cmdKubeClient().execInPodContainer(eoPodName, \"topic-operator\", \"cat\", \"/opt/topic-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=OFF\")\n+                        && cmdKubeClient().execInPodContainer(eoPodName, \"user-operator\", \"cat\", \"/opt/user-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=OFF\")\n+        );\n+\n+        LOGGER.info(\"Waiting {} ms for INFO log will disappear\", RECONCILIATION_INTERVAL * 2);\n+        //wait some time if TO and UO will log something\n+        Thread.sleep(RECONCILIATION_INTERVAL * 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "422dabcff73bf5407e8526c1eebaf241c0d2b411"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYwNjYyOQ==", "bodyText": "Why do you need to switch it off again before the external logging part of the test?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#discussion_r437606629", "createdAt": "2020-06-09T17:41:21Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/log/LoggingChangeST.java", "diffHunk": "@@ -174,6 +183,162 @@ void testJSONFormatLogging() {\n         assertThat(StUtils.checkLogForJSONFormat(eoPods, \"user-operator\"), is(true));\n     }\n \n+    @Test\n+    @SuppressWarnings({\"checkstyle:MethodLength\"})\n+    void testDynamicallySetEOloggingLevels() throws InterruptedException {\n+        KafkaResource.kafkaPersistent(CLUSTER_NAME, 1, 1).done();\n+        String eoDeploymentName = KafkaResources.entityOperatorDeploymentName(CLUSTER_NAME);\n+        Map<String, String> eoPods = DeploymentUtils.depSnapshot(eoDeploymentName);\n+\n+        final String eoPodName = eoPods.keySet().iterator().next();\n+\n+        LOGGER.info(\"Setting log level of TO and UO to OFF - no records should appear in log\");\n+        // change inline logging\n+        InlineLogging ilOff = new InlineLogging();\n+        ilOff.setLoggers(Collections.singletonMap(\"rootLogger.level\", \"OFF\"));\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, k -> {\n+            k.getSpec().getEntityOperator().getTopicOperator().setLogging(ilOff);\n+            k.getSpec().getEntityOperator().getUserOperator().setLogging(ilOff);\n+        });\n+\n+        LOGGER.info(\"The EO shouldn't roll - verifying pod stability\");\n+        DeploymentUtils.waitForNoRollingUpdate(eoDeploymentName, eoPods);\n+\n+        LOGGER.info(\"Waiting for log4j2.properties will contain desired settings\");\n+        TestUtils.waitFor(\"Logger change\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n+            () -> cmdKubeClient().execInPodContainer(eoPodName, \"topic-operator\", \"cat\", \"/opt/topic-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=OFF\")\n+                        && cmdKubeClient().execInPodContainer(eoPodName, \"user-operator\", \"cat\", \"/opt/user-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=OFF\")\n+        );\n+\n+        LOGGER.info(\"Waiting {} ms for INFO log will disappear\", RECONCILIATION_INTERVAL * 2);\n+        //wait some time if TO and UO will log something\n+        Thread.sleep(RECONCILIATION_INTERVAL * 2);\n+\n+        LOGGER.info(\"Asserting if log is without records\");\n+        assertThat(StUtils.getLogFromPodByTime(eoPodName, \"topic-operator\", \"30s\"), is(emptyString()));\n+        assertThat(StUtils.getLogFromPodByTime(eoPodName, \"user-operator\", \"30s\"), is(emptyString()));\n+\n+        LOGGER.info(\"Changing rootLogger level to INFO with inline logging\");\n+        InlineLogging ilInfo = new InlineLogging();\n+        ilInfo.setLoggers(Collections.singletonMap(\"rootLogger.level\", \"INFO\"));\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, k -> {\n+            k.getSpec().getEntityOperator().getTopicOperator().setLogging(ilInfo);\n+            k.getSpec().getEntityOperator().getUserOperator().setLogging(ilInfo);\n+        });\n+\n+        LOGGER.info(\"The EO shouldn't roll - verifying pod stability\");\n+        DeploymentUtils.waitForNoRollingUpdate(eoDeploymentName, eoPods);\n+\n+        LOGGER.info(\"Waiting for log4j2.properties will contain desired settings\");\n+        TestUtils.waitFor(\"Logger change\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n+            () -> cmdKubeClient().execInPodContainer(eoPodName, \"topic-operator\", \"cat\", \"/opt/topic-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=INFO\")\n+                        && cmdKubeClient().execInPodContainer(eoPodName, \"user-operator\", \"cat\", \"/opt/user-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=INFO\")\n+        );\n+\n+        LOGGER.info(\"Waiting {} ms for INFO log will appear\", RECONCILIATION_INTERVAL * 2);\n+        //wait some time if TO and UO will log something\n+        Thread.sleep(RECONCILIATION_INTERVAL * 2);\n+\n+        LOGGER.info(\"Asserting if log will contain some records\");\n+        assertThat(StUtils.getLogFromPodByTime(eoPodName, \"user-operator\", \"5m\"), is(not(emptyString())));\n+        assertThat(StUtils.getLogFromPodByTime(eoPodName, \"topic-operator\", \"5m\"), is(not(emptyString())));\n+\n+        LOGGER.info(\"Setting log level of TO and UO to OFF - no records should appear in log\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "422dabcff73bf5407e8526c1eebaf241c0d2b411"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYwNzEwMw==", "bodyText": "Why is this waiting for 5 minutes while for no logs only 30 seconds? If 30 seconds are good there, shouldn't they be good also here and vice versa?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#discussion_r437607103", "createdAt": "2020-06-09T17:42:06Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/log/LoggingChangeST.java", "diffHunk": "@@ -174,6 +183,162 @@ void testJSONFormatLogging() {\n         assertThat(StUtils.checkLogForJSONFormat(eoPods, \"user-operator\"), is(true));\n     }\n \n+    @Test\n+    @SuppressWarnings({\"checkstyle:MethodLength\"})\n+    void testDynamicallySetEOloggingLevels() throws InterruptedException {\n+        KafkaResource.kafkaPersistent(CLUSTER_NAME, 1, 1).done();\n+        String eoDeploymentName = KafkaResources.entityOperatorDeploymentName(CLUSTER_NAME);\n+        Map<String, String> eoPods = DeploymentUtils.depSnapshot(eoDeploymentName);\n+\n+        final String eoPodName = eoPods.keySet().iterator().next();\n+\n+        LOGGER.info(\"Setting log level of TO and UO to OFF - no records should appear in log\");\n+        // change inline logging\n+        InlineLogging ilOff = new InlineLogging();\n+        ilOff.setLoggers(Collections.singletonMap(\"rootLogger.level\", \"OFF\"));\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, k -> {\n+            k.getSpec().getEntityOperator().getTopicOperator().setLogging(ilOff);\n+            k.getSpec().getEntityOperator().getUserOperator().setLogging(ilOff);\n+        });\n+\n+        LOGGER.info(\"The EO shouldn't roll - verifying pod stability\");\n+        DeploymentUtils.waitForNoRollingUpdate(eoDeploymentName, eoPods);\n+\n+        LOGGER.info(\"Waiting for log4j2.properties will contain desired settings\");\n+        TestUtils.waitFor(\"Logger change\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n+            () -> cmdKubeClient().execInPodContainer(eoPodName, \"topic-operator\", \"cat\", \"/opt/topic-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=OFF\")\n+                        && cmdKubeClient().execInPodContainer(eoPodName, \"user-operator\", \"cat\", \"/opt/user-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=OFF\")\n+        );\n+\n+        LOGGER.info(\"Waiting {} ms for INFO log will disappear\", RECONCILIATION_INTERVAL * 2);\n+        //wait some time if TO and UO will log something\n+        Thread.sleep(RECONCILIATION_INTERVAL * 2);\n+\n+        LOGGER.info(\"Asserting if log is without records\");\n+        assertThat(StUtils.getLogFromPodByTime(eoPodName, \"topic-operator\", \"30s\"), is(emptyString()));\n+        assertThat(StUtils.getLogFromPodByTime(eoPodName, \"user-operator\", \"30s\"), is(emptyString()));\n+\n+        LOGGER.info(\"Changing rootLogger level to INFO with inline logging\");\n+        InlineLogging ilInfo = new InlineLogging();\n+        ilInfo.setLoggers(Collections.singletonMap(\"rootLogger.level\", \"INFO\"));\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, k -> {\n+            k.getSpec().getEntityOperator().getTopicOperator().setLogging(ilInfo);\n+            k.getSpec().getEntityOperator().getUserOperator().setLogging(ilInfo);\n+        });\n+\n+        LOGGER.info(\"The EO shouldn't roll - verifying pod stability\");\n+        DeploymentUtils.waitForNoRollingUpdate(eoDeploymentName, eoPods);\n+\n+        LOGGER.info(\"Waiting for log4j2.properties will contain desired settings\");\n+        TestUtils.waitFor(\"Logger change\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n+            () -> cmdKubeClient().execInPodContainer(eoPodName, \"topic-operator\", \"cat\", \"/opt/topic-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=INFO\")\n+                        && cmdKubeClient().execInPodContainer(eoPodName, \"user-operator\", \"cat\", \"/opt/user-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=INFO\")\n+        );\n+\n+        LOGGER.info(\"Waiting {} ms for INFO log will appear\", RECONCILIATION_INTERVAL * 2);\n+        //wait some time if TO and UO will log something\n+        Thread.sleep(RECONCILIATION_INTERVAL * 2);\n+\n+        LOGGER.info(\"Asserting if log will contain some records\");\n+        assertThat(StUtils.getLogFromPodByTime(eoPodName, \"user-operator\", \"5m\"), is(not(emptyString())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "422dabcff73bf5407e8526c1eebaf241c0d2b411"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYwNzg0MQ==", "bodyText": "I wonder if we should follow with another part where you check that changes to external logging config map were applied as well.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#discussion_r437607841", "createdAt": "2020-06-09T17:43:21Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/log/LoggingChangeST.java", "diffHunk": "@@ -174,6 +183,162 @@ void testJSONFormatLogging() {\n         assertThat(StUtils.checkLogForJSONFormat(eoPods, \"user-operator\"), is(true));\n     }\n \n+    @Test\n+    @SuppressWarnings({\"checkstyle:MethodLength\"})\n+    void testDynamicallySetEOloggingLevels() throws InterruptedException {\n+        KafkaResource.kafkaPersistent(CLUSTER_NAME, 1, 1).done();\n+        String eoDeploymentName = KafkaResources.entityOperatorDeploymentName(CLUSTER_NAME);\n+        Map<String, String> eoPods = DeploymentUtils.depSnapshot(eoDeploymentName);\n+\n+        final String eoPodName = eoPods.keySet().iterator().next();\n+\n+        LOGGER.info(\"Setting log level of TO and UO to OFF - no records should appear in log\");\n+        // change inline logging\n+        InlineLogging ilOff = new InlineLogging();\n+        ilOff.setLoggers(Collections.singletonMap(\"rootLogger.level\", \"OFF\"));\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, k -> {\n+            k.getSpec().getEntityOperator().getTopicOperator().setLogging(ilOff);\n+            k.getSpec().getEntityOperator().getUserOperator().setLogging(ilOff);\n+        });\n+\n+        LOGGER.info(\"The EO shouldn't roll - verifying pod stability\");\n+        DeploymentUtils.waitForNoRollingUpdate(eoDeploymentName, eoPods);\n+\n+        LOGGER.info(\"Waiting for log4j2.properties will contain desired settings\");\n+        TestUtils.waitFor(\"Logger change\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n+            () -> cmdKubeClient().execInPodContainer(eoPodName, \"topic-operator\", \"cat\", \"/opt/topic-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=OFF\")\n+                        && cmdKubeClient().execInPodContainer(eoPodName, \"user-operator\", \"cat\", \"/opt/user-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=OFF\")\n+        );\n+\n+        LOGGER.info(\"Waiting {} ms for INFO log will disappear\", RECONCILIATION_INTERVAL * 2);\n+        //wait some time if TO and UO will log something\n+        Thread.sleep(RECONCILIATION_INTERVAL * 2);\n+\n+        LOGGER.info(\"Asserting if log is without records\");\n+        assertThat(StUtils.getLogFromPodByTime(eoPodName, \"topic-operator\", \"30s\"), is(emptyString()));\n+        assertThat(StUtils.getLogFromPodByTime(eoPodName, \"user-operator\", \"30s\"), is(emptyString()));\n+\n+        LOGGER.info(\"Changing rootLogger level to INFO with inline logging\");\n+        InlineLogging ilInfo = new InlineLogging();\n+        ilInfo.setLoggers(Collections.singletonMap(\"rootLogger.level\", \"INFO\"));\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, k -> {\n+            k.getSpec().getEntityOperator().getTopicOperator().setLogging(ilInfo);\n+            k.getSpec().getEntityOperator().getUserOperator().setLogging(ilInfo);\n+        });\n+\n+        LOGGER.info(\"The EO shouldn't roll - verifying pod stability\");\n+        DeploymentUtils.waitForNoRollingUpdate(eoDeploymentName, eoPods);\n+\n+        LOGGER.info(\"Waiting for log4j2.properties will contain desired settings\");\n+        TestUtils.waitFor(\"Logger change\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n+            () -> cmdKubeClient().execInPodContainer(eoPodName, \"topic-operator\", \"cat\", \"/opt/topic-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=INFO\")\n+                        && cmdKubeClient().execInPodContainer(eoPodName, \"user-operator\", \"cat\", \"/opt/user-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=INFO\")\n+        );\n+\n+        LOGGER.info(\"Waiting {} ms for INFO log will appear\", RECONCILIATION_INTERVAL * 2);\n+        //wait some time if TO and UO will log something\n+        Thread.sleep(RECONCILIATION_INTERVAL * 2);\n+\n+        LOGGER.info(\"Asserting if log will contain some records\");\n+        assertThat(StUtils.getLogFromPodByTime(eoPodName, \"user-operator\", \"5m\"), is(not(emptyString())));\n+        assertThat(StUtils.getLogFromPodByTime(eoPodName, \"topic-operator\", \"5m\"), is(not(emptyString())));\n+\n+        LOGGER.info(\"Setting log level of TO and UO to OFF - no records should appear in log\");\n+        // change inline logging\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, k -> {\n+            k.getSpec().getEntityOperator().getTopicOperator().setLogging(ilOff);\n+            k.getSpec().getEntityOperator().getUserOperator().setLogging(ilOff);\n+        });\n+\n+        LOGGER.info(\"The EO shouldn't roll - verifying pod stability\");\n+        DeploymentUtils.waitForNoRollingUpdate(eoDeploymentName, eoPods);\n+\n+        LOGGER.info(\"Waiting for log4j2.properties will contain desired settings\");\n+        TestUtils.waitFor(\"Logger change\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n+            () -> cmdKubeClient().execInPodContainer(eoPodName, \"topic-operator\", \"cat\", \"/opt/topic-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=OFF\")\n+                        && cmdKubeClient().execInPodContainer(eoPodName, \"user-operator\", \"cat\", \"/opt/user-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=OFF\")\n+        );\n+\n+        LOGGER.info(\"Waiting {} ms for INFO log will disappear\", RECONCILIATION_INTERVAL * 2);\n+        //wait some time if TO and UO will log something\n+        Thread.sleep(RECONCILIATION_INTERVAL * 2);\n+\n+        LOGGER.info(\"Asserting if log is without records\");\n+        assertThat(StUtils.getLogFromPodByTime(eoPodName, \"topic-operator\", \"30s\"), is(emptyString()));\n+        assertThat(StUtils.getLogFromPodByTime(eoPodName, \"user-operator\", \"30s\"), is(emptyString()));\n+\n+        LOGGER.info(\"Setting external logging INFO\");\n+        ConfigMap configMapTo = new ConfigMapBuilder()\n+                .withNewMetadata()\n+                .withName(\"external-configmap-to\")\n+                .withNamespace(NAMESPACE)\n+                .endMetadata()\n+                .withData(Collections.singletonMap(\"log4j2.properties\", \"name=TOConfig\\n\" +\n+                        \"appender.console.type=Console\\n\" +\n+                        \"appender.console.name=STDOUT\\n\" +\n+                        \"appender.console.layout.type=PatternLayout\\n\" +\n+                        \"appender.console.layout.pattern=[%d] %-5p <%-12.12c{1}:%L> [%-12.12t] %m%n\\n\" +\n+                        \"rootLogger.level=DEBUG\\n\" +\n+                        \"rootLogger.appenderRefs=stdout\\n\" +\n+                        \"rootLogger.appenderRef.console.ref=STDOUT\\n\" +\n+                        \"rootLogger.additivity=false\"))\n+                .build();\n+\n+        ConfigMap configMapUo = new ConfigMapBuilder()\n+                .withNewMetadata()\n+                .withName(\"external-configmap-uo\")\n+                .withNamespace(NAMESPACE)\n+                .endMetadata()\n+                .addToData(Collections.singletonMap(\"log4j2.properties\", \"name=UOConfig\\n\" +\n+                        \"appender.console.type=Console\\n\" +\n+                        \"appender.console.name=STDOUT\\n\" +\n+                        \"appender.console.layout.type=PatternLayout\\n\" +\n+                        \"appender.console.layout.pattern=[%d] %-5p <%-12.12c{1}:%L> [%-12.12t] %m%n\\n\" +\n+                        \"rootLogger.level=DEBUG\\n\" +\n+                        \"rootLogger.appenderRefs=stdout\\n\" +\n+                        \"rootLogger.appenderRef.console.ref=STDOUT\\n\" +\n+                        \"rootLogger.additivity=false\"))\n+                .build();\n+\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(configMapTo);\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(configMapUo);\n+\n+        ExternalLogging elTo = new ExternalLoggingBuilder()\n+                .withName(\"external-configmap-to\")\n+                .build();\n+\n+        ExternalLogging elUo = new ExternalLoggingBuilder()\n+                .withName(\"external-configmap-uo\")\n+                .build();\n+\n+        LOGGER.info(\"Setting log level of TO and UO to INFO - records should appear in log\");\n+        // change to external logging\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, k -> {\n+            k.getSpec().getEntityOperator().getTopicOperator().setLogging(elTo);\n+            k.getSpec().getEntityOperator().getUserOperator().setLogging(elUo);\n+        });\n+\n+        LOGGER.info(\"The EO shouldn't roll - verifying pod stability\");\n+        DeploymentUtils.waitForNoRollingUpdate(KafkaResources.entityOperatorDeploymentName(CLUSTER_NAME), eoPods);\n+\n+        LOGGER.info(\"Waiting for log4j2.properties will contain desired settings\");\n+        TestUtils.waitFor(\"Logger change\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n+            () -> cmdKubeClient().execInPodContainer(eoPodName, \"topic-operator\", \"cat\", \"/opt/topic-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=DEBUG\")\n+                        && cmdKubeClient().execInPodContainer(eoPodName, \"user-operator\", \"cat\", \"/opt/user-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=DEBUG\")\n+                        && cmdKubeClient().execInPodContainer(eoPodName, \"topic-operator\", \"cat\", \"/opt/topic-operator/custom-config/log4j2.properties\").out().contains(\"monitorInterval=30\")\n+                        && cmdKubeClient().execInPodContainer(eoPodName, \"user-operator\", \"cat\", \"/opt/user-operator/custom-config/log4j2.properties\").out().contains(\"monitorInterval=30\")\n+        );\n+\n+        LOGGER.info(\"Waiting {}ms for INFO log will appear\", RECONCILIATION_INTERVAL * 2);\n+        // wait some time if TO and UO will log something\n+        Thread.sleep(RECONCILIATION_INTERVAL * 2);\n+\n+        LOGGER.info(\"Asserting if log will contain some records\");\n+        assertThat(StUtils.getLogFromPodByTime(eoPodName, \"user-operator\", \"5m\"), is(not(emptyString())));\n+        assertThat(StUtils.getLogFromPodByTime(eoPodName, \"topic-operator\", \"5m\"), is(not(emptyString())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "422dabcff73bf5407e8526c1eebaf241c0d2b411"}, "originalPosition": 195}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c78cc995daa8b424f6edafb8000760bc92fbdca6", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c78cc995daa8b424f6edafb8000760bc92fbdca6", "committedDate": "2020-06-10T10:02:17Z", "message": "change cm\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "b1e3b37cee5142e4504fa1c3e9ece39c82624706", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b1e3b37cee5142e4504fa1c3e9ece39c82624706", "committedDate": "2020-06-10T10:15:18Z", "message": "change cm\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2f29275f6ad0e7ba1e880bbb9f9532622a949eef", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/2f29275f6ad0e7ba1e880bbb9f9532622a949eef", "committedDate": "2020-06-10T11:36:35Z", "message": "fix another race\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "578f2ab84b18915006846b32060707235005e860", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/578f2ab84b18915006846b32060707235005e860", "committedDate": "2020-06-10T11:43:54Z", "message": "fix another race\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "578f2ab84b18915006846b32060707235005e860", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/578f2ab84b18915006846b32060707235005e860", "committedDate": "2020-06-10T11:43:54Z", "message": "fix another race\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "511be1b491742d30ac2a01473bbdebef3a680a23", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/511be1b491742d30ac2a01473bbdebef3a680a23", "committedDate": "2020-06-15T07:32:14Z", "message": "change cm\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "511be1b491742d30ac2a01473bbdebef3a680a23", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/511be1b491742d30ac2a01473bbdebef3a680a23", "committedDate": "2020-06-15T07:32:14Z", "message": "change cm\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "521b9d5d679ab764e0acd0bef5db57cd3f32ba3c", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/521b9d5d679ab764e0acd0bef5db57cd3f32ba3c", "committedDate": "2020-06-15T08:40:13Z", "message": "change cm\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "521b9d5d679ab764e0acd0bef5db57cd3f32ba3c", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/521b9d5d679ab764e0acd0bef5db57cd3f32ba3c", "committedDate": "2020-06-15T08:40:13Z", "message": "change cm\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "a18661932e12affe2cfba21f1526ef884d0d7305", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a18661932e12affe2cfba21f1526ef884d0d7305", "committedDate": "2020-06-18T06:10:51Z", "message": "change cm\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MjY1NDE2", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#pullrequestreview-434265416", "createdAt": "2020-06-19T18:18:52Z", "commit": {"oid": "f9530c2048a35d672f7396a207904a0274b27946"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODoxODo1MlrOGmdnQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODoxODo1MlrOGmdnQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4NDI1Nw==", "bodyText": "Should 30 be a constant defined somewhere? Just with doign this for EO, you seem to have already 4 places with hardcoded 30.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#discussion_r442984257", "createdAt": "2020-06-19T18:18:52Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java", "diffHunk": "@@ -408,21 +407,34 @@ public String parseLogging(Logging logging, ConfigMap externalCm) {\n                 newSettings.addMapPairs(inlineLogging.getLoggers());\n             }\n \n-            return createPropertiesString(newSettings);\n-\n+            return createLog4jProperties(newSettings);\n         } else if (logging instanceof ExternalLogging) {\n             if (externalCm != null && externalCm.getData() != null && externalCm.getData().containsKey(getAncillaryConfigMapKeyLogConfig())) {\n-                return externalCm.getData().get(getAncillaryConfigMapKeyLogConfig());\n+                return maybeAddMonitorIntervalToExternalLogging(externalCm.getData().get(getAncillaryConfigMapKeyLogConfig()));\n             } else {\n                 log.warn(\"ConfigMap {} with external logging configuration does not exist or doesn't contain the configuration under the {} key. Default logging settings are used.\",\n                         ((ExternalLogging) getLogging()).getName(),\n                         getAncillaryConfigMapKeyLogConfig());\n-                return createPropertiesString(getDefaultLogConfig());\n+                return createLog4jProperties(getDefaultLogConfig());\n             }\n \n         } else {\n             log.debug(\"logging is not set, using default loggers\");\n-            return createPropertiesString(getDefaultLogConfig());\n+            return createLog4jProperties(getDefaultLogConfig());\n+        }\n+    }\n+\n+    /**\n+     * Adds 'monitorInterval=30' to external logging ConfigMap. If ConfigMap already has this value, it is persisted.\n+     * @param data String with log4j(2) properties in format key=value separated by new lines\n+     * @return\n+     */\n+    protected String maybeAddMonitorIntervalToExternalLogging(String data) {\n+        if (getAncillaryConfigMapKeyLogConfig().equals(\"log4j2.properties\") && !data.contains(\"monitorInterval\")) {\n+            // do not override custom value\n+            return data + \"\\nmonitorInterval=30\\n\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9530c2048a35d672f7396a207904a0274b27946"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MjY3NjY1", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#pullrequestreview-434267665", "createdAt": "2020-06-19T18:23:12Z", "commit": {"oid": "f9530c2048a35d672f7396a207904a0274b27946"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODoyMzoxM1rOGmduhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODoyMzoxM1rOGmduhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4NjExNw==", "bodyText": "Should you wait double the interval? With reloading every 30 seconds, this might basically hit at the same time without any log message, or? Or does the waitForNoRollingUpdate incure some waiting time as well?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#discussion_r442986117", "createdAt": "2020-06-19T18:23:13Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/log/LoggingChangeST.java", "diffHunk": "@@ -174,6 +183,179 @@ void testJSONFormatLogging() {\n         assertThat(StUtils.checkLogForJSONFormat(eoPods, \"user-operator\"), is(true));\n     }\n \n+    @Test\n+    @SuppressWarnings({\"checkstyle:MethodLength\"})\n+    void testDynamicallySetEOloggingLevels() throws InterruptedException {\n+        InlineLogging ilOff = new InlineLogging();\n+        ilOff.setLoggers(Collections.singletonMap(\"rootLogger.level\", \"OFF\"));\n+\n+        KafkaResource.kafkaPersistent(CLUSTER_NAME, 1, 1)\n+                .editSpec()\n+                    .editEntityOperator()\n+                        .editTopicOperator()\n+                            .withInlineLogging(ilOff)\n+                        .endTopicOperator()\n+                        .editUserOperator()\n+                            .withInlineLogging(ilOff)\n+                        .endUserOperator()\n+                    .endEntityOperator()\n+                .endSpec()\n+                .done();\n+\n+        String eoDeploymentName = KafkaResources.entityOperatorDeploymentName(CLUSTER_NAME);\n+        Map<String, String> eoPods = DeploymentUtils.depSnapshot(eoDeploymentName);\n+\n+        final String eoPodName = eoPods.keySet().iterator().next();\n+\n+        LOGGER.info(\"Changing rootLogger level to INFO with inline logging\");\n+        InlineLogging ilInfo = new InlineLogging();\n+        ilInfo.setLoggers(Collections.singletonMap(\"rootLogger.level\", \"INFO\"));\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, k -> {\n+            k.getSpec().getEntityOperator().getTopicOperator().setLogging(ilInfo);\n+            k.getSpec().getEntityOperator().getUserOperator().setLogging(ilInfo);\n+        });\n+\n+        LOGGER.info(\"The EO shouldn't roll - verifying pod stability\");\n+        DeploymentUtils.waitForNoRollingUpdate(eoDeploymentName, eoPods);\n+\n+        LOGGER.info(\"Waiting for log4j2.properties will contain desired settings\");\n+        TestUtils.waitFor(\"Logger change\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n+            () -> cmdKubeClient().execInPodContainer(eoPodName, \"topic-operator\", \"cat\", \"/opt/topic-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=INFO\")\n+                        && cmdKubeClient().execInPodContainer(eoPodName, \"user-operator\", \"cat\", \"/opt/user-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=INFO\")\n+        );\n+\n+        LOGGER.info(\"Waiting {} ms for INFO log will appear\", LOGGING_RELOADING_INTERVAL);\n+        //wait some time if TO and UO will log something\n+        Thread.sleep(LOGGING_RELOADING_INTERVAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9530c2048a35d672f7396a207904a0274b27946"}, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MjY4NDkz", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#pullrequestreview-434268493", "createdAt": "2020-06-19T18:24:54Z", "commit": {"oid": "f9530c2048a35d672f7396a207904a0274b27946"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODoyNDo1NFrOGmdxAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODoyNjozNFrOGmdzcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4Njc1NQ==", "bodyText": "Similar to above ... The sleep is for 30 seconds but you collect logs for one minute ... with previous logging off it should not hurt but seems unexplained. Maybe adding some comments explaining where we wait for how long and why would help.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#discussion_r442986755", "createdAt": "2020-06-19T18:24:54Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/log/LoggingChangeST.java", "diffHunk": "@@ -174,6 +183,179 @@ void testJSONFormatLogging() {\n         assertThat(StUtils.checkLogForJSONFormat(eoPods, \"user-operator\"), is(true));\n     }\n \n+    @Test\n+    @SuppressWarnings({\"checkstyle:MethodLength\"})\n+    void testDynamicallySetEOloggingLevels() throws InterruptedException {\n+        InlineLogging ilOff = new InlineLogging();\n+        ilOff.setLoggers(Collections.singletonMap(\"rootLogger.level\", \"OFF\"));\n+\n+        KafkaResource.kafkaPersistent(CLUSTER_NAME, 1, 1)\n+                .editSpec()\n+                    .editEntityOperator()\n+                        .editTopicOperator()\n+                            .withInlineLogging(ilOff)\n+                        .endTopicOperator()\n+                        .editUserOperator()\n+                            .withInlineLogging(ilOff)\n+                        .endUserOperator()\n+                    .endEntityOperator()\n+                .endSpec()\n+                .done();\n+\n+        String eoDeploymentName = KafkaResources.entityOperatorDeploymentName(CLUSTER_NAME);\n+        Map<String, String> eoPods = DeploymentUtils.depSnapshot(eoDeploymentName);\n+\n+        final String eoPodName = eoPods.keySet().iterator().next();\n+\n+        LOGGER.info(\"Changing rootLogger level to INFO with inline logging\");\n+        InlineLogging ilInfo = new InlineLogging();\n+        ilInfo.setLoggers(Collections.singletonMap(\"rootLogger.level\", \"INFO\"));\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, k -> {\n+            k.getSpec().getEntityOperator().getTopicOperator().setLogging(ilInfo);\n+            k.getSpec().getEntityOperator().getUserOperator().setLogging(ilInfo);\n+        });\n+\n+        LOGGER.info(\"The EO shouldn't roll - verifying pod stability\");\n+        DeploymentUtils.waitForNoRollingUpdate(eoDeploymentName, eoPods);\n+\n+        LOGGER.info(\"Waiting for log4j2.properties will contain desired settings\");\n+        TestUtils.waitFor(\"Logger change\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n+            () -> cmdKubeClient().execInPodContainer(eoPodName, \"topic-operator\", \"cat\", \"/opt/topic-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=INFO\")\n+                        && cmdKubeClient().execInPodContainer(eoPodName, \"user-operator\", \"cat\", \"/opt/user-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=INFO\")\n+        );\n+\n+        LOGGER.info(\"Waiting {} ms for INFO log will appear\", LOGGING_RELOADING_INTERVAL);\n+        //wait some time if TO and UO will log something\n+        Thread.sleep(LOGGING_RELOADING_INTERVAL);\n+\n+        LOGGER.info(\"Asserting if log will contain some records\");\n+        assertThat(StUtils.getLogFromPodByTime(eoPodName, \"user-operator\", \"1m\"), is(not(emptyString())));\n+        assertThat(StUtils.getLogFromPodByTime(eoPodName, \"topic-operator\", \"1m\"), is(not(emptyString())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9530c2048a35d672f7396a207904a0274b27946"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4NzM3Nw==", "bodyText": "Same as above ... I think this no logical ... the logs might have just reloaded?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#discussion_r442987377", "createdAt": "2020-06-19T18:26:34Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/log/LoggingChangeST.java", "diffHunk": "@@ -174,6 +183,179 @@ void testJSONFormatLogging() {\n         assertThat(StUtils.checkLogForJSONFormat(eoPods, \"user-operator\"), is(true));\n     }\n \n+    @Test\n+    @SuppressWarnings({\"checkstyle:MethodLength\"})\n+    void testDynamicallySetEOloggingLevels() throws InterruptedException {\n+        InlineLogging ilOff = new InlineLogging();\n+        ilOff.setLoggers(Collections.singletonMap(\"rootLogger.level\", \"OFF\"));\n+\n+        KafkaResource.kafkaPersistent(CLUSTER_NAME, 1, 1)\n+                .editSpec()\n+                    .editEntityOperator()\n+                        .editTopicOperator()\n+                            .withInlineLogging(ilOff)\n+                        .endTopicOperator()\n+                        .editUserOperator()\n+                            .withInlineLogging(ilOff)\n+                        .endUserOperator()\n+                    .endEntityOperator()\n+                .endSpec()\n+                .done();\n+\n+        String eoDeploymentName = KafkaResources.entityOperatorDeploymentName(CLUSTER_NAME);\n+        Map<String, String> eoPods = DeploymentUtils.depSnapshot(eoDeploymentName);\n+\n+        final String eoPodName = eoPods.keySet().iterator().next();\n+\n+        LOGGER.info(\"Changing rootLogger level to INFO with inline logging\");\n+        InlineLogging ilInfo = new InlineLogging();\n+        ilInfo.setLoggers(Collections.singletonMap(\"rootLogger.level\", \"INFO\"));\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, k -> {\n+            k.getSpec().getEntityOperator().getTopicOperator().setLogging(ilInfo);\n+            k.getSpec().getEntityOperator().getUserOperator().setLogging(ilInfo);\n+        });\n+\n+        LOGGER.info(\"The EO shouldn't roll - verifying pod stability\");\n+        DeploymentUtils.waitForNoRollingUpdate(eoDeploymentName, eoPods);\n+\n+        LOGGER.info(\"Waiting for log4j2.properties will contain desired settings\");\n+        TestUtils.waitFor(\"Logger change\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n+            () -> cmdKubeClient().execInPodContainer(eoPodName, \"topic-operator\", \"cat\", \"/opt/topic-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=INFO\")\n+                        && cmdKubeClient().execInPodContainer(eoPodName, \"user-operator\", \"cat\", \"/opt/user-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=INFO\")\n+        );\n+\n+        LOGGER.info(\"Waiting {} ms for INFO log will appear\", LOGGING_RELOADING_INTERVAL);\n+        //wait some time if TO and UO will log something\n+        Thread.sleep(LOGGING_RELOADING_INTERVAL);\n+\n+        LOGGER.info(\"Asserting if log will contain some records\");\n+        assertThat(StUtils.getLogFromPodByTime(eoPodName, \"user-operator\", \"1m\"), is(not(emptyString())));\n+        assertThat(StUtils.getLogFromPodByTime(eoPodName, \"topic-operator\", \"1m\"), is(not(emptyString())));\n+\n+        LOGGER.info(\"Setting external logging OFF\");\n+        ConfigMap configMapTo = new ConfigMapBuilder()\n+                .withNewMetadata()\n+                .withName(\"external-configmap-to\")\n+                .withNamespace(NAMESPACE)\n+                .endMetadata()\n+                .withData(Collections.singletonMap(\"log4j2.properties\", \"name=TOConfig\\n\" +\n+                        \"appender.console.type=Console\\n\" +\n+                        \"appender.console.name=STDOUT\\n\" +\n+                        \"appender.console.layout.type=PatternLayout\\n\" +\n+                        \"appender.console.layout.pattern=[%d] %-5p <%-12.12c{1}:%L> [%-12.12t] %m%n\\n\" +\n+                        \"rootLogger.level=OFF\\n\" +\n+                        \"rootLogger.appenderRefs=stdout\\n\" +\n+                        \"rootLogger.appenderRef.console.ref=STDOUT\\n\" +\n+                        \"rootLogger.additivity=false\"))\n+                .build();\n+\n+        ConfigMap configMapUo = new ConfigMapBuilder()\n+                .withNewMetadata()\n+                .withName(\"external-configmap-uo\")\n+                .withNamespace(NAMESPACE)\n+                .endMetadata()\n+                .addToData(Collections.singletonMap(\"log4j2.properties\", \"name=UOConfig\\n\" +\n+                        \"appender.console.type=Console\\n\" +\n+                        \"appender.console.name=STDOUT\\n\" +\n+                        \"appender.console.layout.type=PatternLayout\\n\" +\n+                        \"appender.console.layout.pattern=[%d] %-5p <%-12.12c{1}:%L> [%-12.12t] %m%n\\n\" +\n+                        \"rootLogger.level=OFF\\n\" +\n+                        \"rootLogger.appenderRefs=stdout\\n\" +\n+                        \"rootLogger.appenderRef.console.ref=STDOUT\\n\" +\n+                        \"rootLogger.additivity=false\"))\n+                .build();\n+\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(configMapTo);\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(configMapUo);\n+\n+        ExternalLogging elTo = new ExternalLoggingBuilder()\n+                .withName(\"external-configmap-to\")\n+                .build();\n+\n+        ExternalLogging elUo = new ExternalLoggingBuilder()\n+                .withName(\"external-configmap-uo\")\n+                .build();\n+\n+        LOGGER.info(\"Setting log level of TO and UO to OFF - records should not appear in log\");\n+        // change to external logging\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, k -> {\n+            k.getSpec().getEntityOperator().getTopicOperator().setLogging(elTo);\n+            k.getSpec().getEntityOperator().getUserOperator().setLogging(elUo);\n+        });\n+\n+        LOGGER.info(\"The EO shouldn't roll - verifying pod stability\");\n+        DeploymentUtils.waitForNoRollingUpdate(KafkaResources.entityOperatorDeploymentName(CLUSTER_NAME), eoPods);\n+\n+        LOGGER.info(\"Waiting for log4j2.properties will contain desired settings\");\n+        TestUtils.waitFor(\"Logger change\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n+            () -> cmdKubeClient().execInPodContainer(eoPodName, \"topic-operator\", \"cat\", \"/opt/topic-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=OFF\")\n+                        && cmdKubeClient().execInPodContainer(eoPodName, \"user-operator\", \"cat\", \"/opt/user-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=OFF\")\n+                        && cmdKubeClient().execInPodContainer(eoPodName, \"topic-operator\", \"cat\", \"/opt/topic-operator/custom-config/log4j2.properties\").out().contains(\"monitorInterval=30\")\n+                        && cmdKubeClient().execInPodContainer(eoPodName, \"user-operator\", \"cat\", \"/opt/user-operator/custom-config/log4j2.properties\").out().contains(\"monitorInterval=30\")\n+        );\n+\n+        LOGGER.info(\"Waiting {} ms for INFO log will disappear\", LOGGING_RELOADING_INTERVAL);\n+        Thread.sleep(LOGGING_RELOADING_INTERVAL);\n+\n+        LOGGER.info(\"Asserting if log is without records\");\n+        assertThat(StUtils.getLogFromPodByTime(eoPodName, \"topic-operator\", \"1m\"), is(emptyString()));\n+        assertThat(StUtils.getLogFromPodByTime(eoPodName, \"user-operator\", \"1m\"), is(emptyString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9530c2048a35d672f7396a207904a0274b27946"}, "originalPosition": 158}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c0793723e780649a8ac9dec2e405d1bd0ba15b1e", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c0793723e780649a8ac9dec2e405d1bd0ba15b1e", "committedDate": "2020-06-30T07:14:46Z", "message": "nits\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "7c77938028c8b6ef3da85f870d645e811b6ac601", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/7c77938028c8b6ef3da85f870d645e811b6ac601", "committedDate": "2020-06-30T09:03:26Z", "message": "nits\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5ODY4NTIx", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#pullrequestreview-439868521", "createdAt": "2020-06-30T10:08:20Z", "commit": {"oid": "7c77938028c8b6ef3da85f870d645e811b6ac601"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMDowODoyMVrOGq1c5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMDoxMToyNVrOGq1jlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU2OTEyNA==", "bodyText": "Is the double empty line needed?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#discussion_r447569124", "createdAt": "2020-06-30T10:08:21Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/log/LoggingChangeST.java", "diffHunk": "@@ -174,6 +183,179 @@ void testJSONFormatLogging() {\n         assertThat(StUtils.checkLogForJSONFormat(eoPods, \"user-operator\"), is(true));\n     }\n \n+    @Test\n+    @SuppressWarnings({\"checkstyle:MethodLength\"})\n+    void testDynamicallySetEOloggingLevels() throws InterruptedException {\n+        InlineLogging ilOff = new InlineLogging();\n+        ilOff.setLoggers(Collections.singletonMap(\"rootLogger.level\", \"OFF\"));\n+\n+        KafkaResource.kafkaPersistent(CLUSTER_NAME, 1, 1)\n+                .editSpec()\n+                    .editEntityOperator()\n+                        .editTopicOperator()\n+                            .withInlineLogging(ilOff)\n+                        .endTopicOperator()\n+                        .editUserOperator()\n+                            .withInlineLogging(ilOff)\n+                        .endUserOperator()\n+                    .endEntityOperator()\n+                .endSpec()\n+                .done();\n+\n+        String eoDeploymentName = KafkaResources.entityOperatorDeploymentName(CLUSTER_NAME);\n+        Map<String, String> eoPods = DeploymentUtils.depSnapshot(eoDeploymentName);\n+\n+        final String eoPodName = eoPods.keySet().iterator().next();\n+\n+        LOGGER.info(\"Changing rootLogger level to DEBUG with inline logging\");\n+        InlineLogging ilDebug = new InlineLogging();\n+        ilDebug.setLoggers(Collections.singletonMap(\"rootLogger.level\", \"DEBUG\"));\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, k -> {\n+            k.getSpec().getEntityOperator().getTopicOperator().setLogging(ilDebug);\n+            k.getSpec().getEntityOperator().getUserOperator().setLogging(ilDebug);\n+        });\n+\n+        LOGGER.info(\"The EO shouldn't roll - verifying pod stability\");\n+        DeploymentUtils.waitForNoRollingUpdate(eoDeploymentName, eoPods);\n+\n+        LOGGER.info(\"Waiting for log4j2.properties will contain desired settings\");\n+        TestUtils.waitFor(\"Logger change\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n+            () -> cmdKubeClient().execInPodContainer(eoPodName, \"topic-operator\", \"cat\", \"/opt/topic-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=DEBUG\")\n+                        && cmdKubeClient().execInPodContainer(eoPodName, \"user-operator\", \"cat\", \"/opt/user-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=DEBUG\")\n+        );\n+\n+        LOGGER.info(\"Waiting {} ms for DEBUG log will appear\", LOGGING_RELOADING_INTERVAL);\n+        // wait some time and check whether logs (UO and TO) after this time contain anything\n+        Thread.sleep(LOGGING_RELOADING_INTERVAL * 2);\n+\n+        LOGGER.info(\"Asserting if log will contain some records\");\n+        assertThat(StUtils.getLogFromPodByTime(eoPodName, \"user-operator\", \"1m\"), is(not(emptyString())));\n+        assertThat(StUtils.getLogFromPodByTime(eoPodName, \"topic-operator\", \"1m\"), is(not(emptyString())));\n+\n+        LOGGER.info(\"Setting external logging OFF\");\n+        ConfigMap configMapTo = new ConfigMapBuilder()\n+                .withNewMetadata()\n+                .withName(\"external-configmap-to\")\n+                .withNamespace(NAMESPACE)\n+                .endMetadata()\n+                .withData(Collections.singletonMap(\"log4j2.properties\", \"name=TOConfig\\n\" +\n+                        \"appender.console.type=Console\\n\" +\n+                        \"appender.console.name=STDOUT\\n\" +\n+                        \"appender.console.layout.type=PatternLayout\\n\" +\n+                        \"appender.console.layout.pattern=[%d] %-5p <%-12.12c{1}:%L> [%-12.12t] %m%n\\n\" +\n+                        \"rootLogger.level=OFF\\n\" +\n+                        \"rootLogger.appenderRefs=stdout\\n\" +\n+                        \"rootLogger.appenderRef.console.ref=STDOUT\\n\" +\n+                        \"rootLogger.additivity=false\"))\n+                .build();\n+\n+        ConfigMap configMapUo = new ConfigMapBuilder()\n+                .withNewMetadata()\n+                .withName(\"external-configmap-uo\")\n+                .withNamespace(NAMESPACE)\n+                .endMetadata()\n+                .addToData(Collections.singletonMap(\"log4j2.properties\", \"name=UOConfig\\n\" +\n+                        \"appender.console.type=Console\\n\" +\n+                        \"appender.console.name=STDOUT\\n\" +\n+                        \"appender.console.layout.type=PatternLayout\\n\" +\n+                        \"appender.console.layout.pattern=[%d] %-5p <%-12.12c{1}:%L> [%-12.12t] %m%n\\n\" +\n+                        \"rootLogger.level=OFF\\n\" +\n+                        \"rootLogger.appenderRefs=stdout\\n\" +\n+                        \"rootLogger.appenderRef.console.ref=STDOUT\\n\" +\n+                        \"rootLogger.additivity=false\"))\n+                .build();\n+\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(configMapTo);\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(configMapUo);\n+\n+        ExternalLogging elTo = new ExternalLoggingBuilder()\n+                .withName(\"external-configmap-to\")\n+                .build();\n+\n+        ExternalLogging elUo = new ExternalLoggingBuilder()\n+                .withName(\"external-configmap-uo\")\n+                .build();\n+\n+        LOGGER.info(\"Setting log level of TO and UO to OFF - records should not appear in log\");\n+        // change to external logging\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, k -> {\n+            k.getSpec().getEntityOperator().getTopicOperator().setLogging(elTo);\n+            k.getSpec().getEntityOperator().getUserOperator().setLogging(elUo);\n+        });\n+\n+        LOGGER.info(\"The EO shouldn't roll - verifying pod stability\");\n+        DeploymentUtils.waitForNoRollingUpdate(KafkaResources.entityOperatorDeploymentName(CLUSTER_NAME), eoPods);\n+\n+        LOGGER.info(\"Waiting for log4j2.properties will contain desired settings\");\n+        TestUtils.waitFor(\"Logger change\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n+            () -> cmdKubeClient().execInPodContainer(eoPodName, \"topic-operator\", \"cat\", \"/opt/topic-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=OFF\")\n+                        && cmdKubeClient().execInPodContainer(eoPodName, \"user-operator\", \"cat\", \"/opt/user-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=OFF\")\n+                        && cmdKubeClient().execInPodContainer(eoPodName, \"topic-operator\", \"cat\", \"/opt/topic-operator/custom-config/log4j2.properties\").out().contains(\"monitorInterval=30\")\n+                        && cmdKubeClient().execInPodContainer(eoPodName, \"user-operator\", \"cat\", \"/opt/user-operator/custom-config/log4j2.properties\").out().contains(\"monitorInterval=30\")\n+        );\n+\n+        LOGGER.info(\"Waiting {} ms for DEBUG log will disappear\", LOGGING_RELOADING_INTERVAL);\n+        Thread.sleep(LOGGING_RELOADING_INTERVAL * 2);\n+\n+        LOGGER.info(\"Asserting if log is without records\");\n+        assertThat(StUtils.getLogFromPodByTime(eoPodName, \"topic-operator\", \"1m\"), is(emptyString()));\n+        assertThat(StUtils.getLogFromPodByTime(eoPodName, \"user-operator\", \"1m\"), is(emptyString()));\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c77938028c8b6ef3da85f870d645e811b6ac601"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU3MDgzOQ==", "bodyText": "I think I still don't get this. You update the configuration and wait 2*30 seconds for the log reload. In the worst case, the reload happens at the end of the first 30 seconds and the new settings will be valid for the second 30 seconds. So checking the logs for last minut still does not seem to work for me. The same on the line 232.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#discussion_r447570839", "createdAt": "2020-06-30T10:11:25Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/log/LoggingChangeST.java", "diffHunk": "@@ -174,6 +183,179 @@ void testJSONFormatLogging() {\n         assertThat(StUtils.checkLogForJSONFormat(eoPods, \"user-operator\"), is(true));\n     }\n \n+    @Test\n+    @SuppressWarnings({\"checkstyle:MethodLength\"})\n+    void testDynamicallySetEOloggingLevels() throws InterruptedException {\n+        InlineLogging ilOff = new InlineLogging();\n+        ilOff.setLoggers(Collections.singletonMap(\"rootLogger.level\", \"OFF\"));\n+\n+        KafkaResource.kafkaPersistent(CLUSTER_NAME, 1, 1)\n+                .editSpec()\n+                    .editEntityOperator()\n+                        .editTopicOperator()\n+                            .withInlineLogging(ilOff)\n+                        .endTopicOperator()\n+                        .editUserOperator()\n+                            .withInlineLogging(ilOff)\n+                        .endUserOperator()\n+                    .endEntityOperator()\n+                .endSpec()\n+                .done();\n+\n+        String eoDeploymentName = KafkaResources.entityOperatorDeploymentName(CLUSTER_NAME);\n+        Map<String, String> eoPods = DeploymentUtils.depSnapshot(eoDeploymentName);\n+\n+        final String eoPodName = eoPods.keySet().iterator().next();\n+\n+        LOGGER.info(\"Changing rootLogger level to DEBUG with inline logging\");\n+        InlineLogging ilDebug = new InlineLogging();\n+        ilDebug.setLoggers(Collections.singletonMap(\"rootLogger.level\", \"DEBUG\"));\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, k -> {\n+            k.getSpec().getEntityOperator().getTopicOperator().setLogging(ilDebug);\n+            k.getSpec().getEntityOperator().getUserOperator().setLogging(ilDebug);\n+        });\n+\n+        LOGGER.info(\"The EO shouldn't roll - verifying pod stability\");\n+        DeploymentUtils.waitForNoRollingUpdate(eoDeploymentName, eoPods);\n+\n+        LOGGER.info(\"Waiting for log4j2.properties will contain desired settings\");\n+        TestUtils.waitFor(\"Logger change\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n+            () -> cmdKubeClient().execInPodContainer(eoPodName, \"topic-operator\", \"cat\", \"/opt/topic-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=DEBUG\")\n+                        && cmdKubeClient().execInPodContainer(eoPodName, \"user-operator\", \"cat\", \"/opt/user-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=DEBUG\")\n+        );\n+\n+        LOGGER.info(\"Waiting {} ms for DEBUG log will appear\", LOGGING_RELOADING_INTERVAL);\n+        // wait some time and check whether logs (UO and TO) after this time contain anything\n+        Thread.sleep(LOGGING_RELOADING_INTERVAL * 2);\n+\n+        LOGGER.info(\"Asserting if log will contain some records\");\n+        assertThat(StUtils.getLogFromPodByTime(eoPodName, \"user-operator\", \"1m\"), is(not(emptyString())));\n+        assertThat(StUtils.getLogFromPodByTime(eoPodName, \"topic-operator\", \"1m\"), is(not(emptyString())));\n+\n+        LOGGER.info(\"Setting external logging OFF\");\n+        ConfigMap configMapTo = new ConfigMapBuilder()\n+                .withNewMetadata()\n+                .withName(\"external-configmap-to\")\n+                .withNamespace(NAMESPACE)\n+                .endMetadata()\n+                .withData(Collections.singletonMap(\"log4j2.properties\", \"name=TOConfig\\n\" +\n+                        \"appender.console.type=Console\\n\" +\n+                        \"appender.console.name=STDOUT\\n\" +\n+                        \"appender.console.layout.type=PatternLayout\\n\" +\n+                        \"appender.console.layout.pattern=[%d] %-5p <%-12.12c{1}:%L> [%-12.12t] %m%n\\n\" +\n+                        \"rootLogger.level=OFF\\n\" +\n+                        \"rootLogger.appenderRefs=stdout\\n\" +\n+                        \"rootLogger.appenderRef.console.ref=STDOUT\\n\" +\n+                        \"rootLogger.additivity=false\"))\n+                .build();\n+\n+        ConfigMap configMapUo = new ConfigMapBuilder()\n+                .withNewMetadata()\n+                .withName(\"external-configmap-uo\")\n+                .withNamespace(NAMESPACE)\n+                .endMetadata()\n+                .addToData(Collections.singletonMap(\"log4j2.properties\", \"name=UOConfig\\n\" +\n+                        \"appender.console.type=Console\\n\" +\n+                        \"appender.console.name=STDOUT\\n\" +\n+                        \"appender.console.layout.type=PatternLayout\\n\" +\n+                        \"appender.console.layout.pattern=[%d] %-5p <%-12.12c{1}:%L> [%-12.12t] %m%n\\n\" +\n+                        \"rootLogger.level=OFF\\n\" +\n+                        \"rootLogger.appenderRefs=stdout\\n\" +\n+                        \"rootLogger.appenderRef.console.ref=STDOUT\\n\" +\n+                        \"rootLogger.additivity=false\"))\n+                .build();\n+\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(configMapTo);\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(configMapUo);\n+\n+        ExternalLogging elTo = new ExternalLoggingBuilder()\n+                .withName(\"external-configmap-to\")\n+                .build();\n+\n+        ExternalLogging elUo = new ExternalLoggingBuilder()\n+                .withName(\"external-configmap-uo\")\n+                .build();\n+\n+        LOGGER.info(\"Setting log level of TO and UO to OFF - records should not appear in log\");\n+        // change to external logging\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, k -> {\n+            k.getSpec().getEntityOperator().getTopicOperator().setLogging(elTo);\n+            k.getSpec().getEntityOperator().getUserOperator().setLogging(elUo);\n+        });\n+\n+        LOGGER.info(\"The EO shouldn't roll - verifying pod stability\");\n+        DeploymentUtils.waitForNoRollingUpdate(KafkaResources.entityOperatorDeploymentName(CLUSTER_NAME), eoPods);\n+\n+        LOGGER.info(\"Waiting for log4j2.properties will contain desired settings\");\n+        TestUtils.waitFor(\"Logger change\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n+            () -> cmdKubeClient().execInPodContainer(eoPodName, \"topic-operator\", \"cat\", \"/opt/topic-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=OFF\")\n+                        && cmdKubeClient().execInPodContainer(eoPodName, \"user-operator\", \"cat\", \"/opt/user-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=OFF\")\n+                        && cmdKubeClient().execInPodContainer(eoPodName, \"topic-operator\", \"cat\", \"/opt/topic-operator/custom-config/log4j2.properties\").out().contains(\"monitorInterval=30\")\n+                        && cmdKubeClient().execInPodContainer(eoPodName, \"user-operator\", \"cat\", \"/opt/user-operator/custom-config/log4j2.properties\").out().contains(\"monitorInterval=30\")\n+        );\n+\n+        LOGGER.info(\"Waiting {} ms for DEBUG log will disappear\", LOGGING_RELOADING_INTERVAL);\n+        Thread.sleep(LOGGING_RELOADING_INTERVAL * 2);\n+\n+        LOGGER.info(\"Asserting if log is without records\");\n+        assertThat(StUtils.getLogFromPodByTime(eoPodName, \"topic-operator\", \"1m\"), is(emptyString()));\n+        assertThat(StUtils.getLogFromPodByTime(eoPodName, \"user-operator\", \"1m\"), is(emptyString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c77938028c8b6ef3da85f870d645e811b6ac601"}, "originalPosition": 158}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3c11c5de78d08bb535d19638f2a92ecadbc2fd45", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3c11c5de78d08bb535d19638f2a92ecadbc2fd45", "committedDate": "2020-06-30T11:01:36Z", "message": "st times\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "20f0866a79cdabe5537b4ad3340171d3277b8fa2", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/20f0866a79cdabe5537b4ad3340171d3277b8fa2", "committedDate": "2020-06-30T11:02:29Z", "message": "st times\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "20f0866a79cdabe5537b4ad3340171d3277b8fa2", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/20f0866a79cdabe5537b4ad3340171d3277b8fa2", "committedDate": "2020-06-30T11:02:29Z", "message": "st times\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "e2f528909915f21ee3e9efa7e534e9646e88b744", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/e2f528909915f21ee3e9efa7e534e9646e88b744", "committedDate": "2020-06-30T11:12:44Z", "message": "st times\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e2f528909915f21ee3e9efa7e534e9646e88b744", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/e2f528909915f21ee3e9efa7e534e9646e88b744", "committedDate": "2020-06-30T11:12:44Z", "message": "st times\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "7213f99ccb08554ab43964b862c8b76621b9c5d0", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/7213f99ccb08554ab43964b862c8b76621b9c5d0", "committedDate": "2020-06-30T11:23:03Z", "message": "st times\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5OTQxMTA4", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#pullrequestreview-439941108", "createdAt": "2020-06-30T11:58:00Z", "commit": {"oid": "7213f99ccb08554ab43964b862c8b76621b9c5d0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7213f99ccb08554ab43964b862c8b76621b9c5d0", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/7213f99ccb08554ab43964b862c8b76621b9c5d0", "committedDate": "2020-06-30T11:23:03Z", "message": "st times\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "3821e4a185f096db11d2927641aa58255597ccd2", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3821e4a185f096db11d2927641aa58255597ccd2", "committedDate": "2020-07-01T07:25:37Z", "message": "rebase+revert install file\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMDQ4OTMw", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#pullrequestreview-441048930", "createdAt": "2020-07-01T17:02:59Z", "commit": {"oid": "eee0fb11f4d92520bbee45fd54a02040b639e2d7"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzowMjo1OVrOGruQIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzoxMDozNVrOGrue9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ5OTc0NA==", "bodyText": "I don't think this is really good enough. monitorInterval could appear in a log4j2 properties config in numerous places other than the top level. You should at least use a regex like ^monitorInterval\\s+= (though you should verify even that). Or we just parse it as an OrderedProperties and check for the monitorInterval key, which I see you're also doing further on....???", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#discussion_r448499744", "createdAt": "2020-07-01T17:02:59Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java", "diffHunk": "@@ -408,21 +408,34 @@ public String parseLogging(Logging logging, ConfigMap externalCm) {\n                 newSettings.addMapPairs(inlineLogging.getLoggers());\n             }\n \n-            return createPropertiesString(newSettings);\n-\n+            return createLog4jProperties(newSettings);\n         } else if (logging instanceof ExternalLogging) {\n             if (externalCm != null && externalCm.getData() != null && externalCm.getData().containsKey(getAncillaryConfigMapKeyLogConfig())) {\n-                return externalCm.getData().get(getAncillaryConfigMapKeyLogConfig());\n+                return maybeAddMonitorIntervalToExternalLogging(externalCm.getData().get(getAncillaryConfigMapKeyLogConfig()));\n             } else {\n                 log.warn(\"ConfigMap {} with external logging configuration does not exist or doesn't contain the configuration under the {} key. Default logging settings are used.\",\n                         ((ExternalLogging) getLogging()).getName(),\n                         getAncillaryConfigMapKeyLogConfig());\n-                return createPropertiesString(getDefaultLogConfig());\n+                return createLog4jProperties(getDefaultLogConfig());\n             }\n \n         } else {\n             log.debug(\"logging is not set, using default loggers\");\n-            return createPropertiesString(getDefaultLogConfig());\n+            return createLog4jProperties(getDefaultLogConfig());\n+        }\n+    }\n+\n+    /**\n+     * Adds 'monitorInterval=30' to external logging ConfigMap. If ConfigMap already has this value, it is persisted.\n+     * @param data String with log4j2 properties in format key=value separated by new lines\n+     * @return\n+     */\n+    protected String maybeAddMonitorIntervalToExternalLogging(String data) {\n+        if (getAncillaryConfigMapKeyLogConfig().equals(\"log4j2.properties\") && !data.contains(\"monitorInterval\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eee0fb11f4d92520bbee45fd54a02040b639e2d7"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUwMzU0MQ==", "bodyText": "Rather than adding these calls (which AFAICS just slow the test down) can't you take a pod snapshot (DeploymentUtils.depSnapshot()) at the start and verify that it's the same at the end?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#discussion_r448503541", "createdAt": "2020-07-01T17:10:35Z", "author": {"login": "tombentley"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/log/LogSettingST.java", "diffHunk": "@@ -329,6 +341,162 @@ private String configMap(String configMapName) {\n         return configMapData.get(configMapKey);\n     }\n \n+    @Test\n+    @Order(14)\n+    @SuppressWarnings({\"checkstyle:MethodLength\"})\n+    void testDynamicallySetEOloggingLevels() throws InterruptedException {\n+        String eoDeploymentName = KafkaResources.entityOperatorDeploymentName(CLUSTER_NAME);\n+        Map<String, String> eoPods = DeploymentUtils.depSnapshot(eoDeploymentName);\n+\n+        final String eoPodName = eoPods.keySet().iterator().next();\n+\n+        LOGGER.info(\"Setting log level of TO and UO to OFF - no records should appear in log\");\n+        // change inline logging\n+        InlineLogging ilOff = new InlineLogging();\n+        ilOff.setLoggers(Collections.singletonMap(\"rootLogger.level\", OFF));\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, k -> {\n+            k.getSpec().getEntityOperator().getTopicOperator().setLogging(ilOff);\n+            k.getSpec().getEntityOperator().getUserOperator().setLogging(ilOff);\n+        });\n+\n+        LOGGER.info(\"The EO shouldn't roll - verifying pod stability\");\n+        DeploymentUtils.waitForNoRollingUpdate(eoDeploymentName, eoPods);\n+\n+        LOGGER.info(\"Waiting for log4j2.properties will contain desired settings\");\n+        TestUtils.waitFor(\"Logger change\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n+            () -> cmdKubeClient().execInPodContainer(eoPodName, \"topic-operator\", \"cat\", \"/opt/topic-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=OFF\")\n+                && cmdKubeClient().execInPodContainer(eoPodName, \"user-operator\", \"cat\", \"/opt/user-operator/custom-config/log4j2.properties\").out().contains(\"rootLogger.level=OFF\")\n+        );\n+\n+        LOGGER.info(\"Waiting {} ms for INFO log will disappear\", RECONCILIATION_INTERVAL * 2);\n+        //wait some time if TO and UO will log something\n+        Thread.sleep(RECONCILIATION_INTERVAL * 2);\n+\n+        LOGGER.info(\"Asserting if log is without records\");\n+        assertThat(StUtils.getLogFromPodByTime(eoPodName, \"topic-operator\", \"30s\"), is(emptyString()));\n+        assertThat(StUtils.getLogFromPodByTime(eoPodName, \"user-operator\", \"30s\"), is(emptyString()));\n+\n+        LOGGER.info(\"Changing rootLogger level to INFO with inline logging\");\n+        InlineLogging ilInfo = new InlineLogging();\n+        ilInfo.setLoggers(Collections.singletonMap(\"rootLogger.level\", INFO));\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, k -> {\n+            k.getSpec().getEntityOperator().getTopicOperator().setLogging(ilInfo);\n+            k.getSpec().getEntityOperator().getUserOperator().setLogging(ilInfo);\n+        });\n+\n+        LOGGER.info(\"The EO shouldn't roll - verifying pod stability\");\n+        DeploymentUtils.waitForNoRollingUpdate(eoDeploymentName, eoPods);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eee0fb11f4d92520bbee45fd54a02040b639e2d7"}, "originalPosition": 106}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3c90c5f559a4c14eba306aa227005292f2165cde", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3c90c5f559a4c14eba306aa227005292f2165cde", "committedDate": "2020-07-03T10:44:18Z", "message": "different approach\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "d362363b7c3a88bd4092aa58649c7e857db20efa", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d362363b7c3a88bd4092aa58649c7e857db20efa", "committedDate": "2020-07-03T10:45:51Z", "message": "different approach\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "51aab4ac08757fb547b560ed3a18dd83832000ff", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/51aab4ac08757fb547b560ed3a18dd83832000ff", "committedDate": "2020-07-03T13:11:26Z", "message": "an attempt to be more optimal\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "ca4dcc593850c2ccb1395c504da7d6c83aa27d90", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ca4dcc593850c2ccb1395c504da7d6c83aa27d90", "committedDate": "2020-07-03T13:12:29Z", "message": "an attempt to be more optimal\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ca4dcc593850c2ccb1395c504da7d6c83aa27d90", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ca4dcc593850c2ccb1395c504da7d6c83aa27d90", "committedDate": "2020-07-03T13:12:29Z", "message": "an attempt to be more optimal\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "3f3c86883c62c7d76e8f2eb8ababbf8aedc930fa", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3f3c86883c62c7d76e8f2eb8ababbf8aedc930fa", "committedDate": "2020-07-07T11:17:43Z", "message": "remove dup test\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3f3c86883c62c7d76e8f2eb8ababbf8aedc930fa", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3f3c86883c62c7d76e8f2eb8ababbf8aedc930fa", "committedDate": "2020-07-07T11:17:43Z", "message": "remove dup test\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "853916b54010021e2a654b090327b894c4f74582", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/853916b54010021e2a654b090327b894c4f74582", "committedDate": "2020-07-08T07:17:51Z", "message": "rebase\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MzYzNjg2", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#pullrequestreview-445363686", "createdAt": "2020-07-09T07:40:53Z", "commit": {"oid": "853916b54010021e2a654b090327b894c4f74582"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f70e5986237f025cd4c3501f873d603a387ae24", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/0f70e5986237f025cd4c3501f873d603a387ae24", "committedDate": "2020-07-09T07:46:23Z", "message": "Dynamically update EO logging\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99787c084abec8214efd04a75a8b26a7102d3a20", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/99787c084abec8214efd04a75a8b26a7102d3a20", "committedDate": "2020-07-09T07:46:23Z", "message": "checkstyle\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6328e508f79e68be433b1b0a57bceb0741d1fd5a", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/6328e508f79e68be433b1b0a57bceb0741d1fd5a", "committedDate": "2020-07-09T07:46:23Z", "message": "comments\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a92b0f19fa4e9f2218fdc8f14eb5f0770759908d", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a92b0f19fa4e9f2218fdc8f14eb5f0770759908d", "committedDate": "2020-07-09T07:46:23Z", "message": "fix\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed80163d096b85c39f7677211d2f1ad96592bd86", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ed80163d096b85c39f7677211d2f1ad96592bd86", "committedDate": "2020-07-09T07:46:23Z", "message": "forgotten assertion\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "337c4d0a3406c123e684d2063aa3af0f8d525e65", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/337c4d0a3406c123e684d2063aa3af0f8d525e65", "committedDate": "2020-07-09T07:46:23Z", "message": "removed testing method\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3714442bbeddebc2bc9759b45201264ad1c8f6b", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/f3714442bbeddebc2bc9759b45201264ad1c8f6b", "committedDate": "2020-07-09T07:46:23Z", "message": "comment\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95a18b80e1743e78d10006dead4f3012cd462649", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/95a18b80e1743e78d10006dead4f3012cd462649", "committedDate": "2020-07-09T07:46:23Z", "message": "add annotation\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b03ca62d481cd5a0e8e81d5c1be10bf70270aa9", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/2b03ca62d481cd5a0e8e81d5c1be10bf70270aa9", "committedDate": "2020-07-09T07:46:23Z", "message": "increase intervalg\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7430409207655dc6bfb43d6a28bfb03ddb94f21b", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/7430409207655dc6bfb43d6a28bfb03ddb94f21b", "committedDate": "2020-07-09T07:46:23Z", "message": "unambiguous method name\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8799ca7b1e74a84c6cb22c4023a6bbb0bd2b05c", "author": {"user": {"login": "im-konge", "name": "Luk\u00e1\u0161 Kr\u00e1l"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d8799ca7b1e74a84c6cb22c4023a6bbb0bd2b05c", "committedDate": "2020-07-09T07:46:59Z", "message": "update the test (#2)\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24c1a745ae82846d82f9c6e31e2f54aef8733e90", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/24c1a745ae82846d82f9c6e31e2f54aef8733e90", "committedDate": "2020-07-09T07:46:59Z", "message": "external logging\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5db241e8ec5309b94b06df0a6ccc974b93efe7f", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b5db241e8ec5309b94b06df0a6ccc974b93efe7f", "committedDate": "2020-07-09T07:46:59Z", "message": "what\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ee4205f12cf9162cc2eb20a94fb09ff739a7751", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/5ee4205f12cf9162cc2eb20a94fb09ff739a7751", "committedDate": "2020-07-09T07:46:59Z", "message": "test\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "708c5ffed02e4934672374184fe9345cecc08e68", "author": {"user": {"login": "im-konge", "name": "Luk\u00e1\u0161 Kr\u00e1l"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/708c5ffed02e4934672374184fe9345cecc08e68", "committedDate": "2020-07-09T07:46:59Z", "message": "add another assertions, add logs (#3)\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc01156b10ce7831e47c57eb90f4137e9178021c", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/dc01156b10ce7831e47c57eb90f4137e9178021c", "committedDate": "2020-07-09T07:46:59Z", "message": "rebase\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70a7da0562a8e69a5dfc1775ee21c63972d5ddea", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/70a7da0562a8e69a5dfc1775ee21c63972d5ddea", "committedDate": "2020-07-09T07:46:59Z", "message": "rebase\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eacdfdec75b514dabb6fcee69fde79fd0ca714ce", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/eacdfdec75b514dabb6fcee69fde79fd0ca714ce", "committedDate": "2020-07-09T07:46:59Z", "message": "respect interval in inline\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "710e2a787fd735956bda50dbd74a44b607457b0b", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/710e2a787fd735956bda50dbd74a44b607457b0b", "committedDate": "2020-07-09T07:46:59Z", "message": "test\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00934fad5a0febfad3b9892d1ef5dddf767f39f2", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/00934fad5a0febfad3b9892d1ef5dddf767f39f2", "committedDate": "2020-07-09T07:46:59Z", "message": "change cm\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e88d25a3e2c778a4088f32930b8006b6ef9c180", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/6e88d25a3e2c778a4088f32930b8006b6ef9c180", "committedDate": "2020-07-09T07:46:59Z", "message": "fix changeloh\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04649659b5f288b6bbf4a7b8bf1fff553e3c5c71", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/04649659b5f288b6bbf4a7b8bf1fff553e3c5c71", "committedDate": "2020-07-09T07:46:59Z", "message": "nits\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ffbe2c80021e7516b63481a941e440a4d5f9acc", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/8ffbe2c80021e7516b63481a941e440a4d5f9acc", "committedDate": "2020-07-09T07:46:59Z", "message": "st times\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24e280e34d94ff64698450f815920425e2230785", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/24e280e34d94ff64698450f815920425e2230785", "committedDate": "2020-07-09T07:46:59Z", "message": "rebase+revert install file\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1adccffa141f6b45b2144cf484123869fe176454", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/1adccffa141f6b45b2144cf484123869fe176454", "committedDate": "2020-07-09T07:46:59Z", "message": "rebase\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27f16cd7b3b9a27b8a2195398bf197aa11624b34", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/27f16cd7b3b9a27b8a2195398bf197aa11624b34", "committedDate": "2020-07-09T07:46:59Z", "message": "comments\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d43bf25c4b6d666a3273f7569a0130868658c62", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/2d43bf25c4b6d666a3273f7569a0130868658c62", "committedDate": "2020-07-09T07:46:59Z", "message": "remove dup test\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c7bf869e0c0d8e1a4fcf03942a66ece7fc0ccf4", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/4c7bf869e0c0d8e1a4fcf03942a66ece7fc0ccf4", "committedDate": "2020-07-09T07:46:59Z", "message": "rebase\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "853916b54010021e2a654b090327b894c4f74582", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/853916b54010021e2a654b090327b894c4f74582", "committedDate": "2020-07-08T07:17:51Z", "message": "rebase\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}, "afterCommit": {"oid": "4c7bf869e0c0d8e1a4fcf03942a66ece7fc0ccf4", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/4c7bf869e0c0d8e1a4fcf03942a66ece7fc0ccf4", "committedDate": "2020-07-09T07:46:59Z", "message": "rebase\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MzkxOTQ1", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#pullrequestreview-445391945", "createdAt": "2020-07-09T08:19:53Z", "commit": {"oid": "4c7bf869e0c0d8e1a4fcf03942a66ece7fc0ccf4"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODoxOTo1M1rOGvGs-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODoxOTo1M1rOGvGs-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0NjA3NQ==", "bodyText": "just curious, why should we have a different annotation to highlight that this is updated dynamically? Just because we haven't moved yet the others components to use the dynamic logging and we want to distinguish it? Does it mean that when all will be moved to use dynamic logging, we can revert back to use just \"logging\" annotation? I don't see great value to have \"dynamic-\" prefix.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#discussion_r452046075", "createdAt": "2020-07-09T08:19:53Z", "author": {"login": "ppatierno"}, "path": "operator-common/src/main/java/io/strimzi/operator/common/Annotations.java", "diffHunk": "@@ -18,6 +18,7 @@\n \n     public static final String STRIMZI_DOMAIN = \"strimzi.io/\";\n     public static final String STRIMZI_LOGGING_ANNOTATION = STRIMZI_DOMAIN + \"logging\";\n+    public static final String STRIMZI_DYNAMIC_LOGGING_ANNOTATION = STRIMZI_DOMAIN + \"dynamic-logging\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c7bf869e0c0d8e1a4fcf03942a66ece7fc0ccf4"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a5c50e73679d4e4157ab720c2b5223a5e1ce8b5", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/4a5c50e73679d4e4157ab720c2b5223a5e1ce8b5", "committedDate": "2020-07-09T08:58:34Z", "message": "remove redundant anno\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1NTg4MjU3", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2867#pullrequestreview-445588257", "createdAt": "2020-07-09T12:57:02Z", "commit": {"oid": "4a5c50e73679d4e4157ab720c2b5223a5e1ce8b5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1921, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}