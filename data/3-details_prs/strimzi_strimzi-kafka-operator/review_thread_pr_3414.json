{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4OTM1NjMw", "number": 3414, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDozOTo1MVrOEToBjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMDowODo0MlrOEX_KTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDE0MTU4OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlConfigurationST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDozOTo1MVrOG5dsIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDozOTo1MVrOG5dsIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwODQ0OQ==", "bodyText": "You can iterate over the created enum.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3414#discussion_r462908449", "createdAt": "2020-07-30T10:39:51Z", "author": {"login": "see-quick"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlConfigurationST.java", "diffHunk": "@@ -225,6 +227,75 @@ void testConfigurationFileIsCreated() {\n \n         assertThat(cruiseControlConfigurationFileContent, not(nullValue()));\n     }\n+\n+    @Order(6)\n+    @Test\n+    void testConfigurationPerformanceOptions() throws IOException {\n+        Container cruiseControlContainer = null;\n+        EnvVar cruiseControlConfiguration = null;\n+\n+        Map<String, String> kafkaSnapShot = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+        Map<String, String> cruiseControlSnapShot = DeploymentUtils.depSnapshot(CruiseControlResources.deploymentName(CLUSTER_NAME));\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+\n+            LOGGER.info(\"Changing cruise control performance tuning options\");\n+\n+            CruiseControlSpec cruiseControl = new CruiseControlSpecBuilder()\n+                    .addToConfig(CruiseControlServerParameters.CONCURRENT_INTRA_PARTITION_MOVEMENTS.getName(),\n+                            CruiseControlServerParameters.CONCURRENT_INTRA_PARTITION_MOVEMENTS.getDefaultValue())\n+                    .addToConfig(CruiseControlServerParameters.CONCURRENT_PARTITION_MOVEMENTS.getName(),\n+                            CruiseControlServerParameters.CONCURRENT_PARTITION_MOVEMENTS.getDefaultValue())\n+                    .addToConfig(CruiseControlServerParameters.CONCURRENT_LEADER_MOVEMENTS.getName(),\n+                            CruiseControlServerParameters.CONCURRENT_LEADER_MOVEMENTS.getDefaultValue())\n+                    .addToConfig(CruiseControlServerParameters.REPLICATION_THROTTLE.getName(),\n+                            CruiseControlServerParameters.REPLICATION_THROTTLE.getDefaultValue())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc64a3c2836050e8cd34400f0a9024ff6266851"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTk0OTE3OnYy", "diffSide": "RIGHT", "path": "operator-common/src/main/java/io/strimzi/operator/cluster/operator/resource/cruisecontrol/CruiseControlServerParameters.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODozNDozMFrOG5vGTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMDo0MDozMVrOG7a5vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5MzY3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                CruiseControlServerParameters(String name, Object defaulValue) {\n          \n          \n            \n                CruiseControlServerParameters(String name, Object defaultValue) {", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3414#discussion_r463193679", "createdAt": "2020-07-30T18:34:30Z", "author": {"login": "samuel-hawker"}, "path": "operator-common/src/main/java/io/strimzi/operator/cluster/operator/resource/cruisecontrol/CruiseControlServerParameters.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package io.strimzi.operator.cluster.operator.resource.cruisecontrol;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+public enum CruiseControlServerParameters {\n+\n+    CONCURRENT_PARTITION_MOVEMENTS(\"num.concurrent.partition.movements.per.broker\", 5),\n+    CONCURRENT_INTRA_PARTITION_MOVEMENTS(\"num.concurrent.intra.broker.partition.movements\", 2),\n+    CONCURRENT_LEADER_MOVEMENTS(\"num.concurrent.leader.movements\", 1000),\n+    REPLICATION_THROTTLE(\"default.replication.throttle\", -1),\n+    BROKER_METRICS_WINDOWS(\"num.broker.metrics.windows\", \"20\"),\n+    BROKER_METRICS_WINDOW_MS(\"broker.metrics.window.ms\", Integer.toString(300_000)),\n+    PARTITION_METRICS_WINDOWS(\"num.partition.metrics.windows\", \"1\"),\n+    PARTITION_METRICS_WINDOW_MS(\"partition.metrics.window.ms\", Integer.toString(300_000)),\n+    COMPLETED_USER_TASK_RETENTION_MS(\"completed.user.task.retention.time.ms\", Long.toString(TimeUnit.DAYS.toMillis(1))),\n+    // TODO io/strimzi/operator/cluster/model/CruiseControlConfiguration.java:101\n+    GOALS(\"goals\", xxx),\n+    DEFAULT_GOALS(\"default.goals\", XXX);\n+\n+    private final String name;\n+    private final Object defaultValue;\n+\n+    CruiseControlServerParameters(String name, Object defaulValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5b5a17cd617cd38c7dccec58e878bb4941f380b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk1OTkzMw==", "bodyText": "Fixed", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3414#discussion_r464959933", "createdAt": "2020-08-04T10:40:31Z", "author": {"login": "michalxo"}, "path": "operator-common/src/main/java/io/strimzi/operator/cluster/operator/resource/cruisecontrol/CruiseControlServerParameters.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package io.strimzi.operator.cluster.operator.resource.cruisecontrol;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+public enum CruiseControlServerParameters {\n+\n+    CONCURRENT_PARTITION_MOVEMENTS(\"num.concurrent.partition.movements.per.broker\", 5),\n+    CONCURRENT_INTRA_PARTITION_MOVEMENTS(\"num.concurrent.intra.broker.partition.movements\", 2),\n+    CONCURRENT_LEADER_MOVEMENTS(\"num.concurrent.leader.movements\", 1000),\n+    REPLICATION_THROTTLE(\"default.replication.throttle\", -1),\n+    BROKER_METRICS_WINDOWS(\"num.broker.metrics.windows\", \"20\"),\n+    BROKER_METRICS_WINDOW_MS(\"broker.metrics.window.ms\", Integer.toString(300_000)),\n+    PARTITION_METRICS_WINDOWS(\"num.partition.metrics.windows\", \"1\"),\n+    PARTITION_METRICS_WINDOW_MS(\"partition.metrics.window.ms\", Integer.toString(300_000)),\n+    COMPLETED_USER_TASK_RETENTION_MS(\"completed.user.task.retention.time.ms\", Long.toString(TimeUnit.DAYS.toMillis(1))),\n+    // TODO io/strimzi/operator/cluster/model/CruiseControlConfiguration.java:101\n+    GOALS(\"goals\", xxx),\n+    DEFAULT_GOALS(\"default.goals\", XXX);\n+\n+    private final String name;\n+    private final Object defaultValue;\n+\n+    CruiseControlServerParameters(String name, Object defaulValue) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5MzY3OQ=="}, "originalCommit": {"oid": "f5b5a17cd617cd38c7dccec58e878bb4941f380b"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjQ1OTk2OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlConfigurationST.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMTo1NToxNFrOG7y2vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMDoxNDo1N1rOG8DRaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM1MjM4MQ==", "bodyText": "Because you're not using assertThat I think this doesn't error if it doesnt match. I also recommend you static import the matches to reduce the length of the line.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3414#discussion_r465352381", "createdAt": "2020-08-04T21:55:14Z", "author": {"login": "samuel-hawker"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlConfigurationST.java", "diffHunk": "@@ -225,6 +237,81 @@ void testConfigurationFileIsCreated() {\n \n         assertThat(cruiseControlConfigurationFileContent, not(nullValue()));\n     }\n+\n+    @Order(6)\n+    @Test\n+    void testConfigurationPerformanceOptions() throws IOException {\n+        Container cruiseControlContainer = null;\n+        EnvVar cruiseControlConfiguration = null;\n+\n+        Map<String, String> kafkaSnapShot = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+        Map<String, String> cruiseControlSnapShot = DeploymentUtils.depSnapshot(CruiseControlResources.deploymentName(CLUSTER_NAME));\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+\n+            LOGGER.info(\"Changing cruise control performance tuning options\");\n+\n+            CruiseControlSpec cruiseControl = new CruiseControlSpecBuilder()\n+                    .addToConfig(CruiseControlServerParameters.CONCURRENT_INTRA_PARTITION_MOVEMENTS.getName(),\n+                            CruiseControlServerParameters.CONCURRENT_INTRA_PARTITION_MOVEMENTS.getDefaultValue())\n+                    .addToConfig(CruiseControlServerParameters.CONCURRENT_PARTITION_MOVEMENTS.getName(),\n+                            CruiseControlServerParameters.CONCURRENT_PARTITION_MOVEMENTS.getDefaultValue())\n+                    .addToConfig(CruiseControlServerParameters.CONCURRENT_LEADER_MOVEMENTS.getName(),\n+                            CruiseControlServerParameters.CONCURRENT_LEADER_MOVEMENTS.getDefaultValue())\n+                    .addToConfig(CruiseControlServerParameters.REPLICATION_THROTTLE.getName(),\n+                            CruiseControlServerParameters.REPLICATION_THROTTLE.getDefaultValue())\n+                .build();\n+\n+            kafka.getSpec().setCruiseControl(cruiseControl);\n+        });\n+\n+        LOGGER.info(\"Verifying that CC pod is rolling, after changing options\");\n+        DeploymentUtils.waitTillDepHasRolled(CruiseControlResources.deploymentName(CLUSTER_NAME), 1, cruiseControlSnapShot);\n+\n+        LOGGER.info(\"Verifying that Kafka pods did not roll\");\n+        StatefulSetUtils.waitForNoRollingUpdate(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME), kafkaSnapShot);\n+\n+        LOGGER.info(\"Verifying new configuration in the Kafka CR\");\n+        Pod cruiseControlPod = kubeClient().listPodsByPrefixInName(CRUISE_CONTROL_POD_PREFIX).get(0);\n+        String cruiseControlPodName = cruiseControlPod.getMetadata().getName();\n+\n+        // Get CruiseControl resource properties\n+        for (Container container : cruiseControlPod.getSpec().getContainers()) {\n+            if (container.getName().equals(\"cruise-control\")) {\n+                cruiseControlContainer = container;\n+            }\n+        }\n+        for (EnvVar envVar : Objects.requireNonNull(cruiseControlContainer).getEnv()) {\n+            if (envVar.getName().equals(\"CRUISE_CONTROL_CONFIGURATION\")) {\n+                cruiseControlConfiguration = envVar;\n+            }\n+        }\n+        InputStream configurationContainerStream = new ByteArrayInputStream(Objects.requireNonNull(cruiseControlConfiguration).getValue().getBytes(StandardCharsets.UTF_8));\n+        Properties containerConfiguration = new Properties();\n+        containerConfiguration.load(configurationContainerStream);\n+\n+        String configurationFileContent = cmdKubeClient().execInPod(cruiseControlPodName, \"/bin/bash\", \"-c\", \"cat \" + CRUISE_CONTROL_CONFIGURATION_FILE_PATH).out();\n+        InputStream configurationFileStream = new ByteArrayInputStream(configurationFileContent.getBytes(StandardCharsets.UTF_8));\n+        Properties fileConfiguration = new Properties();\n+        fileConfiguration.load(configurationFileStream);\n+\n+        LOGGER.info(\"Verifying Cruise control performance options are set in Kafka CR\");\n+        List<String> checkCCProperties = Arrays.asList(\n+                CruiseControlServerParameters.CONCURRENT_INTRA_PARTITION_MOVEMENTS.getName(),\n+                CruiseControlServerParameters.CONCURRENT_PARTITION_MOVEMENTS.getName(),\n+                CruiseControlServerParameters.CONCURRENT_LEADER_MOVEMENTS.getName(),\n+                CruiseControlServerParameters.REPLICATION_THROTTLE.getName()\n+        );\n+\n+        LOGGER.info(\"Verifying Cruise control configuration keys changes\");\n+        IsIterableContainingInAnyOrder.containsInAnyOrder(containerConfiguration.stringPropertyNames(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83cdcfd109e2bd2cc2ca6371fa5085ee95e0bc11"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYyMTM1NQ==", "bodyText": "Fixed by simplifying this whole part. Thank you for looking at it. I hope now it's better and simpler. :)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3414#discussion_r465621355", "createdAt": "2020-08-05T10:14:57Z", "author": {"login": "michalxo"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlConfigurationST.java", "diffHunk": "@@ -225,6 +237,81 @@ void testConfigurationFileIsCreated() {\n \n         assertThat(cruiseControlConfigurationFileContent, not(nullValue()));\n     }\n+\n+    @Order(6)\n+    @Test\n+    void testConfigurationPerformanceOptions() throws IOException {\n+        Container cruiseControlContainer = null;\n+        EnvVar cruiseControlConfiguration = null;\n+\n+        Map<String, String> kafkaSnapShot = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+        Map<String, String> cruiseControlSnapShot = DeploymentUtils.depSnapshot(CruiseControlResources.deploymentName(CLUSTER_NAME));\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+\n+            LOGGER.info(\"Changing cruise control performance tuning options\");\n+\n+            CruiseControlSpec cruiseControl = new CruiseControlSpecBuilder()\n+                    .addToConfig(CruiseControlServerParameters.CONCURRENT_INTRA_PARTITION_MOVEMENTS.getName(),\n+                            CruiseControlServerParameters.CONCURRENT_INTRA_PARTITION_MOVEMENTS.getDefaultValue())\n+                    .addToConfig(CruiseControlServerParameters.CONCURRENT_PARTITION_MOVEMENTS.getName(),\n+                            CruiseControlServerParameters.CONCURRENT_PARTITION_MOVEMENTS.getDefaultValue())\n+                    .addToConfig(CruiseControlServerParameters.CONCURRENT_LEADER_MOVEMENTS.getName(),\n+                            CruiseControlServerParameters.CONCURRENT_LEADER_MOVEMENTS.getDefaultValue())\n+                    .addToConfig(CruiseControlServerParameters.REPLICATION_THROTTLE.getName(),\n+                            CruiseControlServerParameters.REPLICATION_THROTTLE.getDefaultValue())\n+                .build();\n+\n+            kafka.getSpec().setCruiseControl(cruiseControl);\n+        });\n+\n+        LOGGER.info(\"Verifying that CC pod is rolling, after changing options\");\n+        DeploymentUtils.waitTillDepHasRolled(CruiseControlResources.deploymentName(CLUSTER_NAME), 1, cruiseControlSnapShot);\n+\n+        LOGGER.info(\"Verifying that Kafka pods did not roll\");\n+        StatefulSetUtils.waitForNoRollingUpdate(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME), kafkaSnapShot);\n+\n+        LOGGER.info(\"Verifying new configuration in the Kafka CR\");\n+        Pod cruiseControlPod = kubeClient().listPodsByPrefixInName(CRUISE_CONTROL_POD_PREFIX).get(0);\n+        String cruiseControlPodName = cruiseControlPod.getMetadata().getName();\n+\n+        // Get CruiseControl resource properties\n+        for (Container container : cruiseControlPod.getSpec().getContainers()) {\n+            if (container.getName().equals(\"cruise-control\")) {\n+                cruiseControlContainer = container;\n+            }\n+        }\n+        for (EnvVar envVar : Objects.requireNonNull(cruiseControlContainer).getEnv()) {\n+            if (envVar.getName().equals(\"CRUISE_CONTROL_CONFIGURATION\")) {\n+                cruiseControlConfiguration = envVar;\n+            }\n+        }\n+        InputStream configurationContainerStream = new ByteArrayInputStream(Objects.requireNonNull(cruiseControlConfiguration).getValue().getBytes(StandardCharsets.UTF_8));\n+        Properties containerConfiguration = new Properties();\n+        containerConfiguration.load(configurationContainerStream);\n+\n+        String configurationFileContent = cmdKubeClient().execInPod(cruiseControlPodName, \"/bin/bash\", \"-c\", \"cat \" + CRUISE_CONTROL_CONFIGURATION_FILE_PATH).out();\n+        InputStream configurationFileStream = new ByteArrayInputStream(configurationFileContent.getBytes(StandardCharsets.UTF_8));\n+        Properties fileConfiguration = new Properties();\n+        fileConfiguration.load(configurationFileStream);\n+\n+        LOGGER.info(\"Verifying Cruise control performance options are set in Kafka CR\");\n+        List<String> checkCCProperties = Arrays.asList(\n+                CruiseControlServerParameters.CONCURRENT_INTRA_PARTITION_MOVEMENTS.getName(),\n+                CruiseControlServerParameters.CONCURRENT_PARTITION_MOVEMENTS.getName(),\n+                CruiseControlServerParameters.CONCURRENT_LEADER_MOVEMENTS.getName(),\n+                CruiseControlServerParameters.REPLICATION_THROTTLE.getName()\n+        );\n+\n+        LOGGER.info(\"Verifying Cruise control configuration keys changes\");\n+        IsIterableContainingInAnyOrder.containsInAnyOrder(containerConfiguration.stringPropertyNames(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM1MjM4MQ=="}, "originalCommit": {"oid": "83cdcfd109e2bd2cc2ca6371fa5085ee95e0bc11"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDE2NTg0OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlConfigurationST.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxNTowNzoxOVrOG90UhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMTowNToyOFrOG-KIeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ3MzU0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n          \n          \n            \n            \n          \n          \n            \n                        LOGGER.info(\"Changing cruise control performance tuning options\");\n          \n          \n            \n            \n          \n          \n            \n                        CruiseControlSpec cruiseControl = new CruiseControlSpecBuilder()\n          \n          \n            \n                                .addToConfig(performanceTuningOpts).build();\n          \n          \n            \n            \n          \n          \n            \n                        kafka.getSpec().setCruiseControl(cruiseControl);\n          \n          \n            \n                    });\n          \n          \n            \n                    KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n          \n          \n            \n                    \n          \n          \n            \n                        LOGGER.info(\"Changing cruise control performance tuning options\");\n          \n          \n            \n                        kafka = KafkaBuilder(kafka)\n          \n          \n            \n                            .editSpec()\n          \n          \n            \n                              .editCruiseControl()\n          \n          \n            \n                                .addToConfig(performanceTuningOpts)\n          \n          \n            \n                              .endCruiseControl()\n          \n          \n            \n                            .endSpec()\n          \n          \n            \n                            .build\n          \n          \n            \n                    });\n          \n      \n    \n    \n  \n\nI haven't ran this locally so unsure if it actually works, but this would be slightly more readable and guarantees the prior cruiseControl configuration is not lost (as we are not doing a replace but an edit)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3414#discussion_r467473540", "createdAt": "2020-08-08T15:07:19Z", "author": {"login": "samuel-hawker"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlConfigurationST.java", "diffHunk": "@@ -226,6 +236,65 @@ void testConfigurationFileIsCreated() {\n \n         assertThat(cruiseControlConfigurationFileContent, not(nullValue()));\n     }\n+\n+    @Order(6)\n+    @Test\n+    void testConfigurationPerformanceOptions() throws IOException {\n+        Container cruiseControlContainer = null;\n+        EnvVar cruiseControlConfiguration = null;\n+\n+        Map<String, String> kafkaSnapShot = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+        Map<String, String> cruiseControlSnapShot = DeploymentUtils.depSnapshot(CruiseControlResources.deploymentName(CLUSTER_NAME));\n+        Map<String, Object> performanceTuningOpts = new HashMap<String, Object>() {{\n+                put(CruiseControlServerParameters.CONCURRENT_INTRA_PARTITION_MOVEMENTS.getName(),\n+                    CruiseControlServerParameters.CONCURRENT_INTRA_PARTITION_MOVEMENTS.getDefaultValue());\n+                put(CruiseControlServerParameters.CONCURRENT_PARTITION_MOVEMENTS.getName(),\n+                    CruiseControlServerParameters.CONCURRENT_PARTITION_MOVEMENTS.getDefaultValue());\n+                put(CruiseControlServerParameters.CONCURRENT_LEADER_MOVEMENTS.getName(),\n+                    CruiseControlServerParameters.CONCURRENT_LEADER_MOVEMENTS.getDefaultValue());\n+                put(CruiseControlServerParameters.REPLICATION_THROTTLE.getName(),\n+                    CruiseControlServerParameters.REPLICATION_THROTTLE.getDefaultValue());\n+            }};\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+\n+            LOGGER.info(\"Changing cruise control performance tuning options\");\n+\n+            CruiseControlSpec cruiseControl = new CruiseControlSpecBuilder()\n+                    .addToConfig(performanceTuningOpts).build();\n+\n+            kafka.getSpec().setCruiseControl(cruiseControl);\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a43c806e68e665273b7c468aad5f140f6cc13ea7"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzczMjU4NQ==", "bodyText": "Ok, I will try this.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3414#discussion_r467732585", "createdAt": "2020-08-10T07:37:14Z", "author": {"login": "michalxo"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlConfigurationST.java", "diffHunk": "@@ -226,6 +236,65 @@ void testConfigurationFileIsCreated() {\n \n         assertThat(cruiseControlConfigurationFileContent, not(nullValue()));\n     }\n+\n+    @Order(6)\n+    @Test\n+    void testConfigurationPerformanceOptions() throws IOException {\n+        Container cruiseControlContainer = null;\n+        EnvVar cruiseControlConfiguration = null;\n+\n+        Map<String, String> kafkaSnapShot = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+        Map<String, String> cruiseControlSnapShot = DeploymentUtils.depSnapshot(CruiseControlResources.deploymentName(CLUSTER_NAME));\n+        Map<String, Object> performanceTuningOpts = new HashMap<String, Object>() {{\n+                put(CruiseControlServerParameters.CONCURRENT_INTRA_PARTITION_MOVEMENTS.getName(),\n+                    CruiseControlServerParameters.CONCURRENT_INTRA_PARTITION_MOVEMENTS.getDefaultValue());\n+                put(CruiseControlServerParameters.CONCURRENT_PARTITION_MOVEMENTS.getName(),\n+                    CruiseControlServerParameters.CONCURRENT_PARTITION_MOVEMENTS.getDefaultValue());\n+                put(CruiseControlServerParameters.CONCURRENT_LEADER_MOVEMENTS.getName(),\n+                    CruiseControlServerParameters.CONCURRENT_LEADER_MOVEMENTS.getDefaultValue());\n+                put(CruiseControlServerParameters.REPLICATION_THROTTLE.getName(),\n+                    CruiseControlServerParameters.REPLICATION_THROTTLE.getDefaultValue());\n+            }};\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+\n+            LOGGER.info(\"Changing cruise control performance tuning options\");\n+\n+            CruiseControlSpec cruiseControl = new CruiseControlSpecBuilder()\n+                    .addToConfig(performanceTuningOpts).build();\n+\n+            kafka.getSpec().setCruiseControl(cruiseControl);\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ3MzU0MA=="}, "originalCommit": {"oid": "a43c806e68e665273b7c468aad5f140f6cc13ea7"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgzMDkwNg==", "bodyText": "I have tried it, and rolling update never happened. No idea why. I am going with:\nKafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n            LOGGER.info(\"Changing cruise control performance tuning options\");\n            kafka.getSpec().setCruiseControl(new CruiseControlSpecBuilder()\n                    .addToConfig(performanceTuningOpts)\n                    .build());\n        });", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3414#discussion_r467830906", "createdAt": "2020-08-10T11:05:28Z", "author": {"login": "michalxo"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlConfigurationST.java", "diffHunk": "@@ -226,6 +236,65 @@ void testConfigurationFileIsCreated() {\n \n         assertThat(cruiseControlConfigurationFileContent, not(nullValue()));\n     }\n+\n+    @Order(6)\n+    @Test\n+    void testConfigurationPerformanceOptions() throws IOException {\n+        Container cruiseControlContainer = null;\n+        EnvVar cruiseControlConfiguration = null;\n+\n+        Map<String, String> kafkaSnapShot = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+        Map<String, String> cruiseControlSnapShot = DeploymentUtils.depSnapshot(CruiseControlResources.deploymentName(CLUSTER_NAME));\n+        Map<String, Object> performanceTuningOpts = new HashMap<String, Object>() {{\n+                put(CruiseControlServerParameters.CONCURRENT_INTRA_PARTITION_MOVEMENTS.getName(),\n+                    CruiseControlServerParameters.CONCURRENT_INTRA_PARTITION_MOVEMENTS.getDefaultValue());\n+                put(CruiseControlServerParameters.CONCURRENT_PARTITION_MOVEMENTS.getName(),\n+                    CruiseControlServerParameters.CONCURRENT_PARTITION_MOVEMENTS.getDefaultValue());\n+                put(CruiseControlServerParameters.CONCURRENT_LEADER_MOVEMENTS.getName(),\n+                    CruiseControlServerParameters.CONCURRENT_LEADER_MOVEMENTS.getDefaultValue());\n+                put(CruiseControlServerParameters.REPLICATION_THROTTLE.getName(),\n+                    CruiseControlServerParameters.REPLICATION_THROTTLE.getDefaultValue());\n+            }};\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+\n+            LOGGER.info(\"Changing cruise control performance tuning options\");\n+\n+            CruiseControlSpec cruiseControl = new CruiseControlSpecBuilder()\n+                    .addToConfig(performanceTuningOpts).build();\n+\n+            kafka.getSpec().setCruiseControl(cruiseControl);\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ3MzU0MA=="}, "originalCommit": {"oid": "a43c806e68e665273b7c468aad5f140f6cc13ea7"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDE2ODc1OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlConfigurationST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxNToxMDoxM1rOG90VzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxNToxMDoxM1rOG90VzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ3Mzg2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (Container container : cruiseControlPod.getSpec().getContainers()) {\n          \n          \n            \n                        if (container.getName().equals(\"cruise-control\")) {\n          \n          \n            \n                            cruiseControlContainer = container;\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    cruiseControlContainer = cruiseControlPod.getSpec().getContainers().stream()\n          \n          \n            \n                      .filter(container -> container.getName().equals(CruiseControl.CRUISE_CONTROL_CONTAINER_NAME))\n          \n          \n            \n                      .findFirst().orElse(null)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3414#discussion_r467473868", "createdAt": "2020-08-08T15:10:13Z", "author": {"login": "samuel-hawker"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlConfigurationST.java", "diffHunk": "@@ -226,6 +236,65 @@ void testConfigurationFileIsCreated() {\n \n         assertThat(cruiseControlConfigurationFileContent, not(nullValue()));\n     }\n+\n+    @Order(6)\n+    @Test\n+    void testConfigurationPerformanceOptions() throws IOException {\n+        Container cruiseControlContainer = null;\n+        EnvVar cruiseControlConfiguration = null;\n+\n+        Map<String, String> kafkaSnapShot = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+        Map<String, String> cruiseControlSnapShot = DeploymentUtils.depSnapshot(CruiseControlResources.deploymentName(CLUSTER_NAME));\n+        Map<String, Object> performanceTuningOpts = new HashMap<String, Object>() {{\n+                put(CruiseControlServerParameters.CONCURRENT_INTRA_PARTITION_MOVEMENTS.getName(),\n+                    CruiseControlServerParameters.CONCURRENT_INTRA_PARTITION_MOVEMENTS.getDefaultValue());\n+                put(CruiseControlServerParameters.CONCURRENT_PARTITION_MOVEMENTS.getName(),\n+                    CruiseControlServerParameters.CONCURRENT_PARTITION_MOVEMENTS.getDefaultValue());\n+                put(CruiseControlServerParameters.CONCURRENT_LEADER_MOVEMENTS.getName(),\n+                    CruiseControlServerParameters.CONCURRENT_LEADER_MOVEMENTS.getDefaultValue());\n+                put(CruiseControlServerParameters.REPLICATION_THROTTLE.getName(),\n+                    CruiseControlServerParameters.REPLICATION_THROTTLE.getDefaultValue());\n+            }};\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+\n+            LOGGER.info(\"Changing cruise control performance tuning options\");\n+\n+            CruiseControlSpec cruiseControl = new CruiseControlSpecBuilder()\n+                    .addToConfig(performanceTuningOpts).build();\n+\n+            kafka.getSpec().setCruiseControl(cruiseControl);\n+        });\n+\n+        LOGGER.info(\"Verifying that CC pod is rolling, after changing options\");\n+        DeploymentUtils.waitTillDepHasRolled(CruiseControlResources.deploymentName(CLUSTER_NAME), 1, cruiseControlSnapShot);\n+\n+        LOGGER.info(\"Verifying that Kafka pods did not roll\");\n+        StatefulSetUtils.waitForNoRollingUpdate(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME), kafkaSnapShot);\n+\n+        LOGGER.info(\"Verifying new configuration in the Kafka CR\");\n+        Pod cruiseControlPod = kubeClient().listPodsByPrefixInName(CRUISE_CONTROL_POD_PREFIX).get(0);\n+\n+        // Get CruiseControl resource properties\n+        for (Container container : cruiseControlPod.getSpec().getContainers()) {\n+            if (container.getName().equals(\"cruise-control\")) {\n+                cruiseControlContainer = container;\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a43c806e68e665273b7c468aad5f140f6cc13ea7"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDE3MDA3OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlConfigurationST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxNToxMTo1MFrOG90WYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxNToxMTo1MFrOG90WYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ3NDAxOQ==", "bodyText": "Use a similar filter here", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3414#discussion_r467474019", "createdAt": "2020-08-08T15:11:50Z", "author": {"login": "samuel-hawker"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlConfigurationST.java", "diffHunk": "@@ -226,6 +236,65 @@ void testConfigurationFileIsCreated() {\n \n         assertThat(cruiseControlConfigurationFileContent, not(nullValue()));\n     }\n+\n+    @Order(6)\n+    @Test\n+    void testConfigurationPerformanceOptions() throws IOException {\n+        Container cruiseControlContainer = null;\n+        EnvVar cruiseControlConfiguration = null;\n+\n+        Map<String, String> kafkaSnapShot = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+        Map<String, String> cruiseControlSnapShot = DeploymentUtils.depSnapshot(CruiseControlResources.deploymentName(CLUSTER_NAME));\n+        Map<String, Object> performanceTuningOpts = new HashMap<String, Object>() {{\n+                put(CruiseControlServerParameters.CONCURRENT_INTRA_PARTITION_MOVEMENTS.getName(),\n+                    CruiseControlServerParameters.CONCURRENT_INTRA_PARTITION_MOVEMENTS.getDefaultValue());\n+                put(CruiseControlServerParameters.CONCURRENT_PARTITION_MOVEMENTS.getName(),\n+                    CruiseControlServerParameters.CONCURRENT_PARTITION_MOVEMENTS.getDefaultValue());\n+                put(CruiseControlServerParameters.CONCURRENT_LEADER_MOVEMENTS.getName(),\n+                    CruiseControlServerParameters.CONCURRENT_LEADER_MOVEMENTS.getDefaultValue());\n+                put(CruiseControlServerParameters.REPLICATION_THROTTLE.getName(),\n+                    CruiseControlServerParameters.REPLICATION_THROTTLE.getDefaultValue());\n+            }};\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+\n+            LOGGER.info(\"Changing cruise control performance tuning options\");\n+\n+            CruiseControlSpec cruiseControl = new CruiseControlSpecBuilder()\n+                    .addToConfig(performanceTuningOpts).build();\n+\n+            kafka.getSpec().setCruiseControl(cruiseControl);\n+        });\n+\n+        LOGGER.info(\"Verifying that CC pod is rolling, after changing options\");\n+        DeploymentUtils.waitTillDepHasRolled(CruiseControlResources.deploymentName(CLUSTER_NAME), 1, cruiseControlSnapShot);\n+\n+        LOGGER.info(\"Verifying that Kafka pods did not roll\");\n+        StatefulSetUtils.waitForNoRollingUpdate(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME), kafkaSnapShot);\n+\n+        LOGGER.info(\"Verifying new configuration in the Kafka CR\");\n+        Pod cruiseControlPod = kubeClient().listPodsByPrefixInName(CRUISE_CONTROL_POD_PREFIX).get(0);\n+\n+        // Get CruiseControl resource properties\n+        for (Container container : cruiseControlPod.getSpec().getContainers()) {\n+            if (container.getName().equals(\"cruise-control\")) {\n+                cruiseControlContainer = container;\n+            }\n+        }\n+        for (EnvVar envVar : Objects.requireNonNull(cruiseControlContainer).getEnv()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a43c806e68e665273b7c468aad5f140f6cc13ea7"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDE3MDQ1OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlConfigurationST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxNToxMjoyNFrOG90WkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxNToxMjoyNFrOG90WkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ3NDA2NA==", "bodyText": "rm comment", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3414#discussion_r467474064", "createdAt": "2020-08-08T15:12:24Z", "author": {"login": "samuel-hawker"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlConfigurationST.java", "diffHunk": "@@ -226,6 +236,65 @@ void testConfigurationFileIsCreated() {\n \n         assertThat(cruiseControlConfigurationFileContent, not(nullValue()));\n     }\n+\n+    @Order(6)\n+    @Test\n+    void testConfigurationPerformanceOptions() throws IOException {\n+        Container cruiseControlContainer = null;\n+        EnvVar cruiseControlConfiguration = null;\n+\n+        Map<String, String> kafkaSnapShot = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+        Map<String, String> cruiseControlSnapShot = DeploymentUtils.depSnapshot(CruiseControlResources.deploymentName(CLUSTER_NAME));\n+        Map<String, Object> performanceTuningOpts = new HashMap<String, Object>() {{\n+                put(CruiseControlServerParameters.CONCURRENT_INTRA_PARTITION_MOVEMENTS.getName(),\n+                    CruiseControlServerParameters.CONCURRENT_INTRA_PARTITION_MOVEMENTS.getDefaultValue());\n+                put(CruiseControlServerParameters.CONCURRENT_PARTITION_MOVEMENTS.getName(),\n+                    CruiseControlServerParameters.CONCURRENT_PARTITION_MOVEMENTS.getDefaultValue());\n+                put(CruiseControlServerParameters.CONCURRENT_LEADER_MOVEMENTS.getName(),\n+                    CruiseControlServerParameters.CONCURRENT_LEADER_MOVEMENTS.getDefaultValue());\n+                put(CruiseControlServerParameters.REPLICATION_THROTTLE.getName(),\n+                    CruiseControlServerParameters.REPLICATION_THROTTLE.getDefaultValue());\n+            }};\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+\n+            LOGGER.info(\"Changing cruise control performance tuning options\");\n+\n+            CruiseControlSpec cruiseControl = new CruiseControlSpecBuilder()\n+                    .addToConfig(performanceTuningOpts).build();\n+\n+            kafka.getSpec().setCruiseControl(cruiseControl);\n+        });\n+\n+        LOGGER.info(\"Verifying that CC pod is rolling, after changing options\");\n+        DeploymentUtils.waitTillDepHasRolled(CruiseControlResources.deploymentName(CLUSTER_NAME), 1, cruiseControlSnapShot);\n+\n+        LOGGER.info(\"Verifying that Kafka pods did not roll\");\n+        StatefulSetUtils.waitForNoRollingUpdate(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME), kafkaSnapShot);\n+\n+        LOGGER.info(\"Verifying new configuration in the Kafka CR\");\n+        Pod cruiseControlPod = kubeClient().listPodsByPrefixInName(CRUISE_CONTROL_POD_PREFIX).get(0);\n+\n+        // Get CruiseControl resource properties\n+        for (Container container : cruiseControlPod.getSpec().getContainers()) {\n+            if (container.getName().equals(\"cruise-control\")) {\n+                cruiseControlContainer = container;\n+            }\n+        }\n+        for (EnvVar envVar : Objects.requireNonNull(cruiseControlContainer).getEnv()) {\n+            if (envVar.getName().equals(\"CRUISE_CONTROL_CONFIGURATION\")) {\n+                cruiseControlConfiguration = envVar;\n+            }\n+        }\n+        InputStream configurationContainerStream = new ByteArrayInputStream(Objects.requireNonNull(cruiseControlConfiguration).getValue().getBytes(StandardCharsets.UTF_8));\n+        Properties containerConfiguration = new Properties();\n+        containerConfiguration.load(configurationContainerStream);\n+\n+        LOGGER.info(\"Verifying Cruise control performance options are set in Kafka CR\");\n+//        Map<String, String> tmpContainerConfigMap = Maps.fromProperties(containerConfiguration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a43c806e68e665273b7c468aad5f140f6cc13ea7"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjU3OTcwOnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/CruiseControlConfiguration.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwOToyODowM1rOG-HYAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMzoxMDoyMFrOG-Nz-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc4NTczMA==", "bodyText": "As we have a CruiseControlServerParameters enum and these values are server configs I think I would make sense to put move these to that enum so there is a single source of truth for these Keys. Otherwise we now have to manage these in two places?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3414#discussion_r467785730", "createdAt": "2020-08-10T09:28:03Z", "author": {"login": "tomncooper"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/CruiseControlConfiguration.java", "diffHunk": "@@ -79,6 +79,11 @@\n     public static final String CRUISE_CONTROL_HARD_GOALS_CONFIG_KEY = \"hard.goals\";\n     public static final String CRUISE_CONTROL_SELF_HEALING_CONFIG_KEY = \"self.healing.goals\";\n     public static final String CRUISE_CONTROL_ANOMALY_DETECTION_CONFIG_KEY = \"anomaly.detection.goals\";\n+    public static final String CRUISE_CONTROL_PARTITION_METRICS_WINDOW_MS_CONFIG_KEY = \"partition.metrics.window.ms\";\n+    public static final String CRUISE_CONTROL_PARTITION_METRICS_WINDOW_NUM_CONFIG_KEY = \"num.partition.metrics.windows\";\n+    public static final String CRUISE_CONTROL_BROKER_METRICS_WINDOW_MS_CONFIG_KEY = \"broker.metrics.window.ms\";\n+    public static final String CRUISE_CONTROL_BROKER_METRICS_WINDOW_NUM_CONFIG_KEY = \"num.broker.metrics.windows\";\n+    public static final String CRUISE_CONTROL_COMPLETED_USER_TASK_RETENTION_MS_CONFIG_KEY = \"completed.user.task.retention.time.ms\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a43c806e68e665273b7c468aad5f140f6cc13ea7"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc4NzE0MQ==", "bodyText": "I am very happy to move them there. I will dig out their default values as well.\nAlso, just those 4 vars, or more?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3414#discussion_r467787141", "createdAt": "2020-08-10T09:30:37Z", "author": {"login": "michalxo"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/CruiseControlConfiguration.java", "diffHunk": "@@ -79,6 +79,11 @@\n     public static final String CRUISE_CONTROL_HARD_GOALS_CONFIG_KEY = \"hard.goals\";\n     public static final String CRUISE_CONTROL_SELF_HEALING_CONFIG_KEY = \"self.healing.goals\";\n     public static final String CRUISE_CONTROL_ANOMALY_DETECTION_CONFIG_KEY = \"anomaly.detection.goals\";\n+    public static final String CRUISE_CONTROL_PARTITION_METRICS_WINDOW_MS_CONFIG_KEY = \"partition.metrics.window.ms\";\n+    public static final String CRUISE_CONTROL_PARTITION_METRICS_WINDOW_NUM_CONFIG_KEY = \"num.partition.metrics.windows\";\n+    public static final String CRUISE_CONTROL_BROKER_METRICS_WINDOW_MS_CONFIG_KEY = \"broker.metrics.window.ms\";\n+    public static final String CRUISE_CONTROL_BROKER_METRICS_WINDOW_NUM_CONFIG_KEY = \"num.broker.metrics.windows\";\n+    public static final String CRUISE_CONTROL_COMPLETED_USER_TASK_RETENTION_MS_CONFIG_KEY = \"completed.user.task.retention.time.ms\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc4NTczMA=="}, "originalCommit": {"oid": "a43c806e68e665273b7c468aad5f140f6cc13ea7"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc5MDI1Ng==", "bodyText": "Well ideally it would be all of them, you would have to move all the goals lists definitions as well and be careful to refactor all the tests that use those lists.\n@ppatierno wdyt about making the CruiseControlServerParameters enum the single source of truth for the CC server config keys and their defaults? Or should we just use the enum for the key names and define the defaults in the CruiseControlConfiguration class?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3414#discussion_r467790256", "createdAt": "2020-08-10T09:36:43Z", "author": {"login": "tomncooper"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/CruiseControlConfiguration.java", "diffHunk": "@@ -79,6 +79,11 @@\n     public static final String CRUISE_CONTROL_HARD_GOALS_CONFIG_KEY = \"hard.goals\";\n     public static final String CRUISE_CONTROL_SELF_HEALING_CONFIG_KEY = \"self.healing.goals\";\n     public static final String CRUISE_CONTROL_ANOMALY_DETECTION_CONFIG_KEY = \"anomaly.detection.goals\";\n+    public static final String CRUISE_CONTROL_PARTITION_METRICS_WINDOW_MS_CONFIG_KEY = \"partition.metrics.window.ms\";\n+    public static final String CRUISE_CONTROL_PARTITION_METRICS_WINDOW_NUM_CONFIG_KEY = \"num.partition.metrics.windows\";\n+    public static final String CRUISE_CONTROL_BROKER_METRICS_WINDOW_MS_CONFIG_KEY = \"broker.metrics.window.ms\";\n+    public static final String CRUISE_CONTROL_BROKER_METRICS_WINDOW_NUM_CONFIG_KEY = \"num.broker.metrics.windows\";\n+    public static final String CRUISE_CONTROL_COMPLETED_USER_TASK_RETENTION_MS_CONFIG_KEY = \"completed.user.task.retention.time.ms\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc4NTczMA=="}, "originalCommit": {"oid": "a43c806e68e665273b7c468aad5f140f6cc13ea7"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg5MTE5NA==", "bodyText": "I am fine to move everything there.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3414#discussion_r467891194", "createdAt": "2020-08-10T13:10:20Z", "author": {"login": "ppatierno"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/CruiseControlConfiguration.java", "diffHunk": "@@ -79,6 +79,11 @@\n     public static final String CRUISE_CONTROL_HARD_GOALS_CONFIG_KEY = \"hard.goals\";\n     public static final String CRUISE_CONTROL_SELF_HEALING_CONFIG_KEY = \"self.healing.goals\";\n     public static final String CRUISE_CONTROL_ANOMALY_DETECTION_CONFIG_KEY = \"anomaly.detection.goals\";\n+    public static final String CRUISE_CONTROL_PARTITION_METRICS_WINDOW_MS_CONFIG_KEY = \"partition.metrics.window.ms\";\n+    public static final String CRUISE_CONTROL_PARTITION_METRICS_WINDOW_NUM_CONFIG_KEY = \"num.partition.metrics.windows\";\n+    public static final String CRUISE_CONTROL_BROKER_METRICS_WINDOW_MS_CONFIG_KEY = \"broker.metrics.window.ms\";\n+    public static final String CRUISE_CONTROL_BROKER_METRICS_WINDOW_NUM_CONFIG_KEY = \"num.broker.metrics.windows\";\n+    public static final String CRUISE_CONTROL_COMPLETED_USER_TASK_RETENTION_MS_CONFIG_KEY = \"completed.user.task.retention.time.ms\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc4NTczMA=="}, "originalCommit": {"oid": "a43c806e68e665273b7c468aad5f140f6cc13ea7"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzI3NDQ3OnYy", "diffSide": "RIGHT", "path": "operator-common/src/main/java/io/strimzi/operator/cluster/operator/resource/cruisecontrol/CruiseControlServerParameters.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMzoxMDo1OFrOG-N1bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODoyNDoxN1rOG-aOiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg5MTU2Nw==", "bodyText": "can we change in CruiseControlConfigurationParameters? wdyt @tomncooper ?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3414#discussion_r467891567", "createdAt": "2020-08-10T13:10:58Z", "author": {"login": "ppatierno"}, "path": "operator-common/src/main/java/io/strimzi/operator/cluster/operator/resource/cruisecontrol/CruiseControlServerParameters.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.operator.cluster.operator.resource.cruisecontrol;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+public enum CruiseControlServerParameters {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47505523fa86aa3a519a6f20af02cc3b299d7825"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkxNDQ2NA==", "bodyText": "Agreed. That is a better name.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3414#discussion_r467914464", "createdAt": "2020-08-10T13:46:06Z", "author": {"login": "tomncooper"}, "path": "operator-common/src/main/java/io/strimzi/operator/cluster/operator/resource/cruisecontrol/CruiseControlServerParameters.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.operator.cluster.operator.resource.cruisecontrol;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+public enum CruiseControlServerParameters {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg5MTU2Nw=="}, "originalCommit": {"oid": "47505523fa86aa3a519a6f20af02cc3b299d7825"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5NDYwMQ==", "bodyText": "Resolved", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3414#discussion_r468094601", "createdAt": "2020-08-10T18:24:17Z", "author": {"login": "michalxo"}, "path": "operator-common/src/main/java/io/strimzi/operator/cluster/operator/resource/cruisecontrol/CruiseControlServerParameters.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.operator.cluster.operator.resource.cruisecontrol;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+public enum CruiseControlServerParameters {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg5MTU2Nw=="}, "originalCommit": {"oid": "47505523fa86aa3a519a6f20af02cc3b299d7825"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzgwNTI3OnYy", "diffSide": "RIGHT", "path": "operator-common/src/main/java/io/strimzi/operator/cluster/operator/resource/cruisecontrol/CruiseControlConfigurationParameters.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNToxMjowMFrOG-S3DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNToxMjowMFrOG-S3DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk3MzkwMA==", "bodyText": "We could move the default goal list definitions into this class as well? WDYT @ppatierno?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3414#discussion_r467973900", "createdAt": "2020-08-10T15:12:00Z", "author": {"login": "tomncooper"}, "path": "operator-common/src/main/java/io/strimzi/operator/cluster/operator/resource/cruisecontrol/CruiseControlConfigurationParameters.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.operator.cluster.operator.resource.cruisecontrol;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+public enum CruiseControlConfigurationParameters {\n+\n+    // 'goals' and 'default.goals' are currently not defined, due to unnecessary dependency pulling for now", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d80ddfa65916412695d70673a693b475812b6941"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzgxMTgyOnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/CruiseControlConfiguration.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNToxMzozOFrOG-S7KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjoxNTo0NVrOG_efyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk3NDk1Mw==", "bodyText": "Even if you define the list in this class you can still move the key to the Enum and just leave the default value as null? We want to avoid having these config keys defined in two places.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3414#discussion_r467974953", "createdAt": "2020-08-10T15:13:38Z", "author": {"login": "tomncooper"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/CruiseControlConfiguration.java", "diffHunk": "@@ -79,7 +80,6 @@\n     public static final String CRUISE_CONTROL_HARD_GOALS_CONFIG_KEY = \"hard.goals\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d80ddfa65916412695d70673a693b475812b6941"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5NTE2Mg==", "bodyText": "I can but it looked a bit weird to my eyes, as it has no value and it is just a config key without value :/", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3414#discussion_r468095162", "createdAt": "2020-08-10T18:25:14Z", "author": {"login": "michalxo"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/CruiseControlConfiguration.java", "diffHunk": "@@ -79,7 +80,6 @@\n     public static final String CRUISE_CONTROL_HARD_GOALS_CONFIG_KEY = \"hard.goals\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk3NDk1Mw=="}, "originalCommit": {"oid": "d80ddfa65916412695d70673a693b475812b6941"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM1ODMxOQ==", "bodyText": "I added it there, with making default value as empty string, as all those default values are joined list of String goals.\nWould you prefer null instead as default value?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3414#discussion_r468358319", "createdAt": "2020-08-11T06:39:24Z", "author": {"login": "michalxo"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/CruiseControlConfiguration.java", "diffHunk": "@@ -79,7 +80,6 @@\n     public static final String CRUISE_CONTROL_HARD_GOALS_CONFIG_KEY = \"hard.goals\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk3NDk1Mw=="}, "originalCommit": {"oid": "d80ddfa65916412695d70673a693b475812b6941"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIxMzEyOA==", "bodyText": "I still think it feel wrong to have the CC defaults defined in 2 places. I think you should move the goal list definitions into the Enum too (as that is where all the other definitions are made, but then that makes the class a bit messy. WDYT @ppatierno?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3414#discussion_r469213128", "createdAt": "2020-08-12T12:15:45Z", "author": {"login": "tomncooper"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/CruiseControlConfiguration.java", "diffHunk": "@@ -79,7 +80,6 @@\n     public static final String CRUISE_CONTROL_HARD_GOALS_CONFIG_KEY = \"hard.goals\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk3NDk1Mw=="}, "originalCommit": {"oid": "d80ddfa65916412695d70673a693b475812b6941"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzgxNTk2OnYy", "diffSide": "RIGHT", "path": "operator-common/src/main/java/io/strimzi/operator/cluster/operator/resource/cruisecontrol/CruiseControlConfigurationGoals.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNToxNDozN1rOG-S9sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODoyNToyMVrOG-aQ-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk3NTYwMg==", "bodyText": "I would just call this CruiseControlGoals", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3414#discussion_r467975602", "createdAt": "2020-08-10T15:14:37Z", "author": {"login": "tomncooper"}, "path": "operator-common/src/main/java/io/strimzi/operator/cluster/operator/resource/cruisecontrol/CruiseControlConfigurationGoals.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.operator.cluster.operator.resource.cruisecontrol;\n+\n+public enum CruiseControlConfigurationGoals {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d80ddfa65916412695d70673a693b475812b6941"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5NTIyNg==", "bodyText": "fixed", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3414#discussion_r468095226", "createdAt": "2020-08-10T18:25:21Z", "author": {"login": "michalxo"}, "path": "operator-common/src/main/java/io/strimzi/operator/cluster/operator/resource/cruisecontrol/CruiseControlConfigurationGoals.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.operator.cluster.operator.resource.cruisecontrol;\n+\n+public enum CruiseControlConfigurationGoals {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk3NTYwMg=="}, "originalCommit": {"oid": "d80ddfa65916412695d70673a693b475812b6941"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNTg3NTMzOnYy", "diffSide": "RIGHT", "path": "operator-common/src/main/java/io/strimzi/operator/cluster/operator/resource/cruisecontrol/CruiseControlConfigurationParameters.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMDowODo0MlrOHAFAGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMDoxODo1OFrOHAFV4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg0Mzk5Mw==", "bodyText": "I think the goals made sense as a separate enum, they are not really config parameter keys but rather values assigned to the keys. However, that might be being too picky.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3414#discussion_r469843993", "createdAt": "2020-08-13T10:08:42Z", "author": {"login": "tomncooper"}, "path": "operator-common/src/main/java/io/strimzi/operator/cluster/operator/resource/cruisecontrol/CruiseControlConfigurationParameters.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.operator.cluster.operator.resource.cruisecontrol;\n+\n+public enum CruiseControlConfigurationParameters {\n+\n+    CONCURRENT_PARTITION_MOVEMENTS(\"num.concurrent.partition.movements.per.broker\"),\n+    CONCURRENT_INTRA_PARTITION_MOVEMENTS(\"num.concurrent.intra.broker.partition.movements\"),\n+    CONCURRENT_LEADER_MOVEMENTS(\"num.concurrent.leader.movements\"),\n+    REPLICATION_THROTTLE(\"default.replication.throttle\"),\n+    BROKER_METRICS_WINDOWS(\"num.broker.metrics.windows\"),\n+    BROKER_METRICS_WINDOW_MS(\"broker.metrics.window.ms\"),\n+    PARTITION_METRICS_WINDOWS(\"num.partition.metrics.windows\"),\n+    PARTITION_METRICS_WINDOW_MS(\"partition.metrics.window.ms\"),\n+    COMPLETED_USER_TASK_RETENTION_MS(\"completed.user.task.retention.time.ms\"),\n+    CRUISE_CONTROL_PARTITION_METRICS_WINDOW_MS_CONFIG_KEY(\"partition.metrics.window.ms\"),\n+    CRUISE_CONTROL_PARTITION_METRICS_WINDOW_NUM_CONFIG_KEY(\"num.partition.metrics.windows\"),\n+    CRUISE_CONTROL_BROKER_METRICS_WINDOW_MS_CONFIG_KEY(\"broker.metrics.window.ms\"),\n+    CRUISE_CONTROL_BROKER_METRICS_WINDOW_NUM_CONFIG_KEY(\"num.broker.metrics.windows\"),\n+    CRUISE_CONTROL_COMPLETED_USER_TASK_RETENTION_MS_CONFIG_KEY(\"completed.user.task.retention.time.ms\"),\n+\n+    // Goals String lists\n+    CRUISE_CONTROL_GOALS_CONFIG_KEY(\"goals\"),\n+    CRUISE_CONTROL_DEFAULT_GOALS_CONFIG_KEY(\"default.goals\"),\n+    CRUISE_CONTROL_HARD_GOALS_CONFIG_KEY(\"hard.goals\"),\n+    CRUISE_CONTROL_SELF_HEALING_CONFIG_KEY(\"self.healing.goals\"),\n+    CRUISE_CONTROL_ANOMALY_DETECTION_CONFIG_KEY(\"anomaly.detection.goals\"),\n+\n+    RACK_AWARENESS_GOAL(\"com.linkedin.kafka.cruisecontrol.analyzer.goals.RackAwareGoal\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c92b56995bd9a2ef6b3d664f446c960051f12fff"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg0OTU2OQ==", "bodyText": "ok, I can move them back. I thought it's logical to keep it all under 1 separate Enum (CC configs :) )", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3414#discussion_r469849569", "createdAt": "2020-08-13T10:18:58Z", "author": {"login": "michalxo"}, "path": "operator-common/src/main/java/io/strimzi/operator/cluster/operator/resource/cruisecontrol/CruiseControlConfigurationParameters.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.operator.cluster.operator.resource.cruisecontrol;\n+\n+public enum CruiseControlConfigurationParameters {\n+\n+    CONCURRENT_PARTITION_MOVEMENTS(\"num.concurrent.partition.movements.per.broker\"),\n+    CONCURRENT_INTRA_PARTITION_MOVEMENTS(\"num.concurrent.intra.broker.partition.movements\"),\n+    CONCURRENT_LEADER_MOVEMENTS(\"num.concurrent.leader.movements\"),\n+    REPLICATION_THROTTLE(\"default.replication.throttle\"),\n+    BROKER_METRICS_WINDOWS(\"num.broker.metrics.windows\"),\n+    BROKER_METRICS_WINDOW_MS(\"broker.metrics.window.ms\"),\n+    PARTITION_METRICS_WINDOWS(\"num.partition.metrics.windows\"),\n+    PARTITION_METRICS_WINDOW_MS(\"partition.metrics.window.ms\"),\n+    COMPLETED_USER_TASK_RETENTION_MS(\"completed.user.task.retention.time.ms\"),\n+    CRUISE_CONTROL_PARTITION_METRICS_WINDOW_MS_CONFIG_KEY(\"partition.metrics.window.ms\"),\n+    CRUISE_CONTROL_PARTITION_METRICS_WINDOW_NUM_CONFIG_KEY(\"num.partition.metrics.windows\"),\n+    CRUISE_CONTROL_BROKER_METRICS_WINDOW_MS_CONFIG_KEY(\"broker.metrics.window.ms\"),\n+    CRUISE_CONTROL_BROKER_METRICS_WINDOW_NUM_CONFIG_KEY(\"num.broker.metrics.windows\"),\n+    CRUISE_CONTROL_COMPLETED_USER_TASK_RETENTION_MS_CONFIG_KEY(\"completed.user.task.retention.time.ms\"),\n+\n+    // Goals String lists\n+    CRUISE_CONTROL_GOALS_CONFIG_KEY(\"goals\"),\n+    CRUISE_CONTROL_DEFAULT_GOALS_CONFIG_KEY(\"default.goals\"),\n+    CRUISE_CONTROL_HARD_GOALS_CONFIG_KEY(\"hard.goals\"),\n+    CRUISE_CONTROL_SELF_HEALING_CONFIG_KEY(\"self.healing.goals\"),\n+    CRUISE_CONTROL_ANOMALY_DETECTION_CONFIG_KEY(\"anomaly.detection.goals\"),\n+\n+    RACK_AWARENESS_GOAL(\"com.linkedin.kafka.cruisecontrol.analyzer.goals.RackAwareGoal\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg0Mzk5Mw=="}, "originalCommit": {"oid": "c92b56995bd9a2ef6b3d664f446c960051f12fff"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1205, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}