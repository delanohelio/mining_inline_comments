{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyNjQ3OTk1", "number": 3268, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzoyMDoyN1rOEKmNKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxOTo1ODowNFrOEO1jNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTQ3MTc3OnYy", "diffSide": "RIGHT", "path": "operator-common/src/main/java/io/strimzi/operator/common/operator/resource/AbstractResourceDiff.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzoyMDoyN1rOGruy4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMjoyNzoxMFrOGsKmAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUwODY0Mw==", "bodyText": "I'm not quite sure I understand this. isMissingNode() is the case where a property has the JSON value null.\nIf you were conflating null with the empty string, I could understand, but I think you're trying to say that the string containing two double quotes is the same as the empty string  and the same as null. I don't understand why that is necessarily true. Remember, you're changing this for all JsonNodes in an STS, so while it might be true for the value of a toleration, it might not be true elsewhere.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r448508643", "createdAt": "2020-07-01T17:20:27Z", "author": {"login": "tombentley"}, "path": "operator-common/src/main/java/io/strimzi/operator/common/operator/resource/AbstractResourceDiff.java", "diffHunk": "@@ -24,6 +25,15 @@ protected JsonNode lookupPath(JsonNode source, String path) {\n         return s;\n     }\n \n+    /**\n+     * Empty node can have a value \"\"\"\" which compared with \"\" is different but semantically they are the same\n+     * @param node tested node\n+     * @return true if node is empty or has empty value\n+     */\n+    protected boolean nodeMissingOrEmpty(JsonNode node) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c272f89b36c07f2b703ef764dc17ceeb18f947c2"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgwNDc0Mw==", "bodyText": "The Kafka configuration mentioned above produces a STS like this\n      tolerations:\n      - effect: NoSchedule\n        key: kafkarole\n        operator: Equal\n\nnote that value is missing and thus it is null although it is set to empty value in the Kafka CR.\nI think it is kubernetes thing removing a property with no value.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r448804743", "createdAt": "2020-07-02T07:33:51Z", "author": {"login": "sknot-rh"}, "path": "operator-common/src/main/java/io/strimzi/operator/common/operator/resource/AbstractResourceDiff.java", "diffHunk": "@@ -24,6 +25,15 @@ protected JsonNode lookupPath(JsonNode source, String path) {\n         return s;\n     }\n \n+    /**\n+     * Empty node can have a value \"\"\"\" which compared with \"\" is different but semantically they are the same\n+     * @param node tested node\n+     * @return true if node is empty or has empty value\n+     */\n+    protected boolean nodeMissingOrEmpty(JsonNode node) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUwODY0Mw=="}, "originalCommit": {"oid": "c272f89b36c07f2b703ef764dc17ceeb18f947c2"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg4OTExMg==", "bodyText": "So why is the .replace(\"\\\"\", \"\") necessary then?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r448889112", "createdAt": "2020-07-02T09:57:51Z", "author": {"login": "tombentley"}, "path": "operator-common/src/main/java/io/strimzi/operator/common/operator/resource/AbstractResourceDiff.java", "diffHunk": "@@ -24,6 +25,15 @@ protected JsonNode lookupPath(JsonNode source, String path) {\n         return s;\n     }\n \n+    /**\n+     * Empty node can have a value \"\"\"\" which compared with \"\" is different but semantically they are the same\n+     * @param node tested node\n+     * @return true if node is empty or has empty value\n+     */\n+    protected boolean nodeMissingOrEmpty(JsonNode node) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUwODY0Mw=="}, "originalCommit": {"oid": "c272f89b36c07f2b703ef764dc17ceeb18f947c2"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5OTkxOA==", "bodyText": "If we set value: '' it is propagated as \"\", in Java string it is \"\\\"\\\"\" which is not equal to \"\" (empty string).", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r448899918", "createdAt": "2020-07-02T10:17:51Z", "author": {"login": "sknot-rh"}, "path": "operator-common/src/main/java/io/strimzi/operator/common/operator/resource/AbstractResourceDiff.java", "diffHunk": "@@ -24,6 +25,15 @@ protected JsonNode lookupPath(JsonNode source, String path) {\n         return s;\n     }\n \n+    /**\n+     * Empty node can have a value \"\"\"\" which compared with \"\" is different but semantically they are the same\n+     * @param node tested node\n+     * @return true if node is empty or has empty value\n+     */\n+    protected boolean nodeMissingOrEmpty(JsonNode node) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUwODY0Mw=="}, "originalCommit": {"oid": "c272f89b36c07f2b703ef764dc17ceeb18f947c2"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkzNjU2Nw==", "bodyText": "Per https://yaml.org/spec/1.2/spec.html#id2760844 YAML supports quoted scalars (using both \" and '). So if value: '' results in the operator seeing the String with contents \"\" I think that must be a bug somewhere (Jackson?).", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r448936567", "createdAt": "2020-07-02T11:33:12Z", "author": {"login": "tombentley"}, "path": "operator-common/src/main/java/io/strimzi/operator/common/operator/resource/AbstractResourceDiff.java", "diffHunk": "@@ -24,6 +25,15 @@ protected JsonNode lookupPath(JsonNode source, String path) {\n         return s;\n     }\n \n+    /**\n+     * Empty node can have a value \"\"\"\" which compared with \"\" is different but semantically they are the same\n+     * @param node tested node\n+     * @return true if node is empty or has empty value\n+     */\n+    protected boolean nodeMissingOrEmpty(JsonNode node) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUwODY0Mw=="}, "originalCommit": {"oid": "c272f89b36c07f2b703ef764dc17ceeb18f947c2"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk2NDA5OA==", "bodyText": "@Test\n    public void test() throws JsonProcessingException {\n        JsonNode jsonNode = patchMapper().readTree(\"{\\\"effect\\\":\\\"NoSchedule\\\",\\\"value\\\":\\\"someValue\\\"}\");\n        System.out.println(jsonNode.path(\"value\"));\n    }\n\nprints \"someValue\". If we want just someValue, asText() method at the JsonNode object has to be called.\nI think it would be better to print JsonNodeType.STRING nodes without quotes.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r448964098", "createdAt": "2020-07-02T12:27:10Z", "author": {"login": "sknot-rh"}, "path": "operator-common/src/main/java/io/strimzi/operator/common/operator/resource/AbstractResourceDiff.java", "diffHunk": "@@ -24,6 +25,15 @@ protected JsonNode lookupPath(JsonNode source, String path) {\n         return s;\n     }\n \n+    /**\n+     * Empty node can have a value \"\"\"\" which compared with \"\" is different but semantically they are the same\n+     * @param node tested node\n+     * @return true if node is empty or has empty value\n+     */\n+    protected boolean nodeMissingOrEmpty(JsonNode node) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUwODY0Mw=="}, "originalCommit": {"oid": "c272f89b36c07f2b703ef764dc17ceeb18f947c2"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODMxNzY4OnYy", "diffSide": "RIGHT", "path": "operator-common/src/main/java/io/strimzi/operator/common/operator/resource/AbstractResourceDiff.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMjowODoxOFrOGsJ_Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMjowODoxOFrOGsJ_Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1NDE2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected boolean nodeMissingOrEmpty(JsonNode node) {\n          \n          \n            \n                protected boolean isNodeMissingOrEmpty(JsonNode node) {", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r448954167", "createdAt": "2020-07-02T12:08:18Z", "author": {"login": "samuel-hawker"}, "path": "operator-common/src/main/java/io/strimzi/operator/common/operator/resource/AbstractResourceDiff.java", "diffHunk": "@@ -24,6 +25,15 @@ protected JsonNode lookupPath(JsonNode source, String path) {\n         return s;\n     }\n \n+    /**\n+     * Empty node can have a value \"\"\"\" which compared with \"\" is different but semantically they are the same\n+     * @param node tested node\n+     * @return true if node is empty or has empty value\n+     */\n+    protected boolean nodeMissingOrEmpty(JsonNode node) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4f44b5258020657fcda7e4b55a7ed19688470a"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODMyNDY1OnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/StatefulSetDiff.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMjoxMDoyMlrOGsKDkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMjoxMDoyMlrOGsKDkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1NTI4MQ==", "bodyText": "Maybe add a comment with the intent behind this condition, i.e.\n// If source and target are missing tolerations then continue because ...", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r448955281", "createdAt": "2020-07-02T12:10:22Z", "author": {"login": "samuel-hawker"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/StatefulSetDiff.java", "diffHunk": "@@ -97,6 +98,14 @@ public StatefulSetDiff(StatefulSet current, StatefulSet desired) {\n                     }\n                 }\n             }\n+\n+            Matcher tolerationMatchers = TOLERATION_VALUE.matcher(pathValue);\n+            if (tolerationMatchers.matches()) {\n+                if (nodeMissingOrEmpty(lookupPath(source, pathValue)) && nodeMissingOrEmpty(lookupPath(target, pathValue))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4f44b5258020657fcda7e4b55a7ed19688470a"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNDY0Nzk3OnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/StatefulSetDiff.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxNToxNDoyMFrOGtDApA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxNToxNDoyMFrOGtDApA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg4ODQyMA==", "bodyText": "Maybe you should call it TOLERATION_VALUE_PATH? The VALUE can be IMHO a bit confusing.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r449888420", "createdAt": "2020-07-05T15:14:20Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/StatefulSetDiff.java", "diffHunk": "@@ -56,6 +56,7 @@\n \n     private static final Pattern RESOURCE_PATH = Pattern.compile(\"^/spec/template/spec/(?:initContainers|containers)/[0-9]+/resources/(?:limits|requests)/(memory|cpu)$\");\n     private static final Pattern VOLUME_SIZE = Pattern.compile(\"^/spec/volumeClaimTemplates/[0-9]+/spec/resources/.*$\");\n+    private static final Pattern TOLERATION_VALUE = Pattern.compile(\"^/spec/template/spec/tolerations/[0-9]+/value$\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c914051c2b7bea0c9bbdf29c0c4756f4c6204fac"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDQ3NDAyOnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/EntityOperator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTowMzoyOFrOGt5mGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTowMzoyOFrOGt5mGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4Mjc0Ng==", "bodyText": "This is worth factoring into a method, I think.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r450782746", "createdAt": "2020-07-07T11:03:28Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/EntityOperator.java", "diffHunk": "@@ -198,16 +198,21 @@ public static EntityOperator fromCrd(Kafka kafkaAssembly, KafkaVersion.Lookup ve\n \n     @SuppressWarnings(\"deprecation\")\n     static List<Toleration> tolerations(EntityOperatorSpec entityOperatorSpec) {\n+        List<Toleration> tolerations;\n         if (entityOperatorSpec.getTemplate() != null\n                 && entityOperatorSpec.getTemplate().getPod() != null\n                 && entityOperatorSpec.getTemplate().getPod().getTolerations() != null) {\n             if (entityOperatorSpec.getTolerations() != null) {\n                 log.warn(\"Tolerations given on both spec.entityOperator.tolerations and spec.entityOperator.template.pod.tolerations; latter takes precedence\");\n             }\n-            return entityOperatorSpec.getTemplate().getPod().getTolerations();\n+            tolerations = entityOperatorSpec.getTemplate().getPod().getTolerations();\n         } else {\n-            return entityOperatorSpec.getTolerations();\n+            tolerations = entityOperatorSpec.getTolerations();\n         }\n+        if (tolerations != null) {\n+            tolerations.stream().filter(toleration -> toleration.getValue() != null && toleration.getValue().isEmpty()).forEach(emptyValTol -> emptyValTol.setValue(null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "565261b7b3e2b7baa93154cad636c0e208da1862"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODQ3NTQxOnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaCluster.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODoxNzoyNFrOGvGnmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODoyMDoyN1rOGvGuWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0NDY5OA==", "bodyText": "We have this method 4 times... I wonder if we can factor out a method in ModelUtils which takes a PodTemplate and a List<Toleration> in order to simplify the call sites to something like:\nreturn ModelUtils.tolerations(\"spec.kafka.template.pod.tolerations\",\n                              kafkaClusterSpec.getTemplate() != null ? kafkaClusterSpec.getTemplate().getPod() : null,\n                              \"spec.kafka.tolerations\",\n                              kafkaClusterSpec.getTolerations());", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r452044698", "createdAt": "2020-07-09T08:17:24Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaCluster.java", "diffHunk": "@@ -770,16 +770,19 @@ protected static void validateIntConfigProperty(String propertyName, KafkaCluste\n \n     @SuppressWarnings(\"deprecation\")\n     static List<Toleration> tolerations(KafkaClusterSpec kafkaClusterSpec) {\n+        List<Toleration> tolerations;\n         if (kafkaClusterSpec.getTemplate() != null\n                 && kafkaClusterSpec.getTemplate().getPod() != null\n                 && kafkaClusterSpec.getTemplate().getPod().getTolerations() != null) {\n             if (kafkaClusterSpec.getTolerations() != null) {\n                 log.warn(\"Tolerations given on both spec.kafka.tolerations and spec.kafka.template.pod.tolerations; latter takes precedence\");\n             }\n-            return kafkaClusterSpec.getTemplate().getPod().getTolerations();\n+            tolerations = kafkaClusterSpec.getTemplate().getPod().getTolerations();\n         } else {\n-            return kafkaClusterSpec.getTolerations();\n+            tolerations = kafkaClusterSpec.getTolerations();\n         }\n+        ModelUtils.removeEmptyValuesFromTolerations(tolerations);\n+        return tolerations;\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb40a1610f1a426cf1f1eaed7920eb3314063ed6"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0NjQyNw==", "bodyText": "I was thinking the same. Thanks for the confirmation.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r452046427", "createdAt": "2020-07-09T08:20:27Z", "author": {"login": "sknot-rh"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaCluster.java", "diffHunk": "@@ -770,16 +770,19 @@ protected static void validateIntConfigProperty(String propertyName, KafkaCluste\n \n     @SuppressWarnings(\"deprecation\")\n     static List<Toleration> tolerations(KafkaClusterSpec kafkaClusterSpec) {\n+        List<Toleration> tolerations;\n         if (kafkaClusterSpec.getTemplate() != null\n                 && kafkaClusterSpec.getTemplate().getPod() != null\n                 && kafkaClusterSpec.getTemplate().getPod().getTolerations() != null) {\n             if (kafkaClusterSpec.getTolerations() != null) {\n                 log.warn(\"Tolerations given on both spec.kafka.tolerations and spec.kafka.template.pod.tolerations; latter takes precedence\");\n             }\n-            return kafkaClusterSpec.getTemplate().getPod().getTolerations();\n+            tolerations = kafkaClusterSpec.getTemplate().getPod().getTolerations();\n         } else {\n-            return kafkaClusterSpec.getTolerations();\n+            tolerations = kafkaClusterSpec.getTolerations();\n         }\n+        ModelUtils.removeEmptyValuesFromTolerations(tolerations);\n+        return tolerations;\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0NDY5OA=="}, "originalCommit": {"oid": "eb40a1610f1a426cf1f1eaed7920eb3314063ed6"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTU0MDc5OnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/ModelUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzoyMjowMlrOGvQ3vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzozNjo0MFrOGvRegw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxMjY2OQ==", "bodyText": "Think about the parameter order. Why is it sensible to put tolerations first and tolerationList last, when they're to do with the same thing (the former is describing the path at which we found the latter). They belong next to each other, imho.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r452212669", "createdAt": "2020-07-09T13:22:02Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/ModelUtils.java", "diffHunk": "@@ -551,4 +552,24 @@ public static String getJavaSystemPropertiesToString(List<SystemProperty> javaSy\n         }\n         return String.join(\" \", javaSystemPropertiesList);\n     }\n+\n+    public static void removeEmptyValuesFromTolerations(List<Toleration> tolerations) {\n+        if (tolerations != null) {\n+            tolerations.stream().filter(toleration -> toleration.getValue() != null && toleration.getValue().isEmpty()).forEach(emptyValTol -> emptyValTol.setValue(null));\n+        }\n+    }\n+\n+    public static List<Toleration> tolerations(String tolerations, String templateTolerations, PodTemplate podTemplate, List<Toleration> tolerationList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65a5399c2baa1fee9ca1d745327229aab7f54069"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxNjYyNQ==", "bodyText": "I wanted to couple String parameters which are used one right after the another one.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r452216625", "createdAt": "2020-07-09T13:27:54Z", "author": {"login": "sknot-rh"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/ModelUtils.java", "diffHunk": "@@ -551,4 +552,24 @@ public static String getJavaSystemPropertiesToString(List<SystemProperty> javaSy\n         }\n         return String.join(\" \", javaSystemPropertiesList);\n     }\n+\n+    public static void removeEmptyValuesFromTolerations(List<Toleration> tolerations) {\n+        if (tolerations != null) {\n+            tolerations.stream().filter(toleration -> toleration.getValue() != null && toleration.getValue().isEmpty()).forEach(emptyValTol -> emptyValTol.setValue(null));\n+        }\n+    }\n+\n+    public static List<Toleration> tolerations(String tolerations, String templateTolerations, PodTemplate podTemplate, List<Toleration> tolerationList) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxMjY2OQ=="}, "originalCommit": {"oid": "65a5399c2baa1fee9ca1d745327229aab7f54069"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIyMjU5NQ==", "bodyText": "When writing a method signature you should usually prioritise how it will look to the caller. The caller doesn't know (or care) in what order the parameters will be used. They just have some arguments, and it makes much more sense to them to pass the path and the value got from that path together.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r452222595", "createdAt": "2020-07-09T13:36:40Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/ModelUtils.java", "diffHunk": "@@ -551,4 +552,24 @@ public static String getJavaSystemPropertiesToString(List<SystemProperty> javaSy\n         }\n         return String.join(\" \", javaSystemPropertiesList);\n     }\n+\n+    public static void removeEmptyValuesFromTolerations(List<Toleration> tolerations) {\n+        if (tolerations != null) {\n+            tolerations.stream().filter(toleration -> toleration.getValue() != null && toleration.getValue().isEmpty()).forEach(emptyValTol -> emptyValTol.setValue(null));\n+        }\n+    }\n+\n+    public static List<Toleration> tolerations(String tolerations, String templateTolerations, PodTemplate podTemplate, List<Toleration> tolerationList) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxMjY2OQ=="}, "originalCommit": {"oid": "65a5399c2baa1fee9ca1d745327229aab7f54069"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTQ4MzA1OnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/ModelUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMjoyODo1MVrOGvj6WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMjoyODo1MVrOGvj6WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUyNDYzMw==", "bodyText": "Javadocs please ... plus should this be really private? It does not seem to be used from anywhere else than tolerations(...).", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r452524633", "createdAt": "2020-07-09T22:28:51Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/ModelUtils.java", "diffHunk": "@@ -551,4 +552,24 @@ public static String getJavaSystemPropertiesToString(List<SystemProperty> javaSy\n         }\n         return String.join(\" \", javaSystemPropertiesList);\n     }\n+\n+    public static void removeEmptyValuesFromTolerations(List<Toleration> tolerations) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1659dca778808b773804e56853125b3c7e812291"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTQ5MDA1OnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/ModelUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMjozMTo1NFrOGvj-cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMjozMTo1NFrOGvj-cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUyNTY4MQ==", "bodyText": "Javadoc please", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r452525681", "createdAt": "2020-07-09T22:31:54Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/ModelUtils.java", "diffHunk": "@@ -551,4 +552,24 @@ public static String getJavaSystemPropertiesToString(List<SystemProperty> javaSy\n         }\n         return String.join(\" \", javaSystemPropertiesList);\n     }\n+\n+    public static void removeEmptyValuesFromTolerations(List<Toleration> tolerations) {\n+        if (tolerations != null) {\n+            tolerations.stream().filter(toleration -> toleration.getValue() != null && toleration.getValue().isEmpty()).forEach(emptyValTol -> emptyValTol.setValue(null));\n+        }\n+    }\n+\n+    public static List<Toleration> tolerations(String tolerations, List<Toleration> tolerationList, String templateTolerations, PodTemplate podTemplate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1659dca778808b773804e56853125b3c7e812291"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTkxMzUwOnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxOTo1MzozN1rOGyNi0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxOTo1MzozN1rOGyNi0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMwMzg4OA==", "bodyText": "Maybe TolerationsIT?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r455303888", "createdAt": "2020-07-15T19:53:37Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaIT.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.operator.cluster.operator.assembly;\n+\n+import io.fabric8.kubernetes.api.model.LabelSelectorBuilder;\n+import io.fabric8.kubernetes.api.model.Toleration;\n+import io.fabric8.kubernetes.api.model.TolerationBuilder;\n+import io.fabric8.kubernetes.api.model.apps.StatefulSet;\n+import io.fabric8.kubernetes.api.model.apps.StatefulSetBuilder;\n+import io.fabric8.kubernetes.client.DefaultKubernetesClient;\n+import io.fabric8.kubernetes.client.KubernetesClient;\n+import io.strimzi.operator.cluster.model.ModelUtils;\n+import io.strimzi.operator.cluster.operator.resource.StatefulSetDiff;\n+import io.strimzi.test.k8s.KubeClusterResource;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.VertxOptions;\n+import io.vertx.junit5.Checkpoint;\n+import io.vertx.junit5.VertxExtension;\n+import io.vertx.junit5.VertxTestContext;\n+import io.vertx.micrometer.MicrometerMetricsOptions;\n+import io.vertx.micrometer.VertxPrometheusOptions;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+@ExtendWith(VertxExtension.class)\n+public class KafkaIT {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "192a30cd3876d3b7d21ab6bb62f1e2fb8d5215ef"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTkxNzQwOnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxOTo1NDo1M1rOGyNlZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxOTo1NDo1M1rOGyNlZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMwNDU1MA==", "bodyText": "Alignment and empty line.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r455304550", "createdAt": "2020-07-15T19:54:53Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaIT.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.operator.cluster.operator.assembly;\n+\n+import io.fabric8.kubernetes.api.model.LabelSelectorBuilder;\n+import io.fabric8.kubernetes.api.model.Toleration;\n+import io.fabric8.kubernetes.api.model.TolerationBuilder;\n+import io.fabric8.kubernetes.api.model.apps.StatefulSet;\n+import io.fabric8.kubernetes.api.model.apps.StatefulSetBuilder;\n+import io.fabric8.kubernetes.client.DefaultKubernetesClient;\n+import io.fabric8.kubernetes.client.KubernetesClient;\n+import io.strimzi.operator.cluster.model.ModelUtils;\n+import io.strimzi.operator.cluster.operator.resource.StatefulSetDiff;\n+import io.strimzi.test.k8s.KubeClusterResource;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.VertxOptions;\n+import io.vertx.junit5.Checkpoint;\n+import io.vertx.junit5.VertxExtension;\n+import io.vertx.junit5.VertxTestContext;\n+import io.vertx.micrometer.MicrometerMetricsOptions;\n+import io.vertx.micrometer.VertxPrometheusOptions;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+@ExtendWith(VertxExtension.class)\n+public class KafkaIT {\n+\n+    protected KubeClusterResource cluster = KubeClusterResource.getInstance();\n+    private static Vertx vertx;\n+    private String namespace = \"kafka-it-2\";\n+\n+    @BeforeAll\n+    public static void before() {\n+        vertx = Vertx.vertx(new VertxOptions().setMetricsOptions(\n+                new MicrometerMetricsOptions()\n+                        .setPrometheusOptions(new VertxPrometheusOptions().setEnabled(true))\n+                        .setEnabled(true)\n+        ));\n+    }\n+\n+    @AfterAll\n+    public static void after(VertxTestContext context) {\n+        Checkpoint checkpoint = context.checkpoint();\n+        vertx.close(done -> {\n+            checkpoint.flag();\n+        });\n+    }\n+\n+    @BeforeEach\n+    public void beforeEach() throws IOException, InterruptedException {\n+        cluster.createNamespace(namespace);\n+    }\n+\n+    @AfterEach\n+    public void afterEach() {\n+        cluster.deleteNamespaces();\n+    }\n+\n+    @Test\n+    public void testEmptyStringValueIntoleration(VertxTestContext context) {\n+        Toleration t1 = new TolerationBuilder()\n+                .withEffect(\"NoSchedule\")\n+                .withValue(\"\")\n+                .build();\n+\n+        List<Toleration> tolerationList = new ArrayList<>();\n+        tolerationList.add(t1);\n+\n+        // CO does this over the generated STS\n+        ModelUtils.removeEmptyValuesFromTolerations(tolerationList);\n+\n+        StatefulSet ss = new StatefulSetBuilder()\n+                .withNewMetadata()\n+                .withNamespace(namespace)\n+                .withName(\"foo\")\n+                .endMetadata()\n+                .withNewSpec()\n+                    .withSelector(new LabelSelectorBuilder().withMatchLabels(Collections.singletonMap(\"app\", \"test\")).build())\n+                    .withNewTemplate()\n+                        .withNewMetadata()\n+                            .withLabels(Collections.singletonMap(\"app\", \"test\"))\n+                        .endMetadata()\n+                        .withNewSpec()\n+                            .withTolerations(tolerationList)\n+                        .withDnsPolicy(\"ClusterFirst\")\n+                        .withRestartPolicy(\"Always\")\n+                        .withSchedulerName(\"default-scheduler\")\n+                        .withSecurityContext(null)\n+                        .withTerminationGracePeriodSeconds(30L)\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "192a30cd3876d3b7d21ab6bb62f1e2fb8d5215ef"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTkyODg3OnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxOTo1ODowNFrOGyNsWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxOTo1ODowNFrOGyNsWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMwNjMyOQ==", "bodyText": "What is Vertx used for? I do not see it in the code.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r455306329", "createdAt": "2020-07-15T19:58:04Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaIT.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.operator.cluster.operator.assembly;\n+\n+import io.fabric8.kubernetes.api.model.LabelSelectorBuilder;\n+import io.fabric8.kubernetes.api.model.Toleration;\n+import io.fabric8.kubernetes.api.model.TolerationBuilder;\n+import io.fabric8.kubernetes.api.model.apps.StatefulSet;\n+import io.fabric8.kubernetes.api.model.apps.StatefulSetBuilder;\n+import io.fabric8.kubernetes.client.DefaultKubernetesClient;\n+import io.fabric8.kubernetes.client.KubernetesClient;\n+import io.strimzi.operator.cluster.model.ModelUtils;\n+import io.strimzi.operator.cluster.operator.resource.StatefulSetDiff;\n+import io.strimzi.test.k8s.KubeClusterResource;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.VertxOptions;\n+import io.vertx.junit5.Checkpoint;\n+import io.vertx.junit5.VertxExtension;\n+import io.vertx.junit5.VertxTestContext;\n+import io.vertx.micrometer.MicrometerMetricsOptions;\n+import io.vertx.micrometer.VertxPrometheusOptions;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+@ExtendWith(VertxExtension.class)\n+public class KafkaIT {\n+\n+    protected KubeClusterResource cluster = KubeClusterResource.getInstance();\n+    private static Vertx vertx;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "192a30cd3876d3b7d21ab6bb62f1e2fb8d5215ef"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1411, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}