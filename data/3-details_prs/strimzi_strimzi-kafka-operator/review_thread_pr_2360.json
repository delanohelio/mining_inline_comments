{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5NDczMDU4", "number": 2360, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNDowNTo0N1rODV-x4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwOTowMzowM1rODWectw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0Mzc1MjY2OnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNDowNTo0N1rOFaedOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNDowNTo0N1rOFaedOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMwNjI5Nw==", "bodyText": "Could you make this a bit more readable?\nelse {\n    try {", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2360#discussion_r363306297", "createdAt": "2020-01-06T14:05:47Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -1774,14 +1774,18 @@ public void checkCustomCaSecret(CertificateAuthority ca, Secret certSecret, Secr\n                                 Secret certSecret = result.result();\n \n                                 if (certSecret != null) {\n-                                    try {\n-                                        X509Certificate cert = Ca.cert(certSecret, customCertSecret.getCertificate());\n-                                        byte[] signature = MessageDigest.getInstance(\"SHA-256\").digest(cert.getEncoded());\n-                                        thumbprintPromise.complete(Base64.getEncoder().encodeToString(signature));\n-                                    } catch (CertificateEncodingException | NoSuchAlgorithmException e) {\n-                                        log.warn(\"{}: Failed to get certificate signature of {} from Secret {}.\", reconciliation, customCertSecret.getCertificate(), customCertSecret.getSecretName());\n-                                        thumbprintPromise.fail(new RuntimeException(\"Failed to get certificate signature of \" + customCertSecret.getCertificate() + \" from Secret \" + certSecret.getMetadata().getName(), e));\n-                                    }\n+                                    if (!certSecret.getData().containsKey(customCertSecret.getCertificate())) {\n+                                        thumbprintPromise.fail(\"Secret \" + customCertSecret.getSecretName() + \" does not contain certificate \" + customCertSecret.getCertificate() + \".\");\n+                                    } else if (!certSecret.getData().containsKey(customCertSecret.getKey())) {\n+                                        thumbprintPromise.fail(\"Secret \" + customCertSecret.getSecretName() + \" does not contain key \" + customCertSecret.getKey() + \".\");\n+                                    } else try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c9c56481b6213286c1f3bcdf199018998e1797b"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0Mzc1NjU1OnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNDowNzowMVrOFaefbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNDowNzowMVrOFaefbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMwNjg2Mw==", "bodyText": "Could you add the warn messages as we have them with the other errors to make that consistent? Also, I think the message could you some more clarification ... maybe something like Secret xyz does not contian certificate under the key <tls.crt>.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2360#discussion_r363306863", "createdAt": "2020-01-06T14:07:01Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -1774,14 +1774,18 @@ public void checkCustomCaSecret(CertificateAuthority ca, Secret certSecret, Secr\n                                 Secret certSecret = result.result();\n \n                                 if (certSecret != null) {\n-                                    try {\n-                                        X509Certificate cert = Ca.cert(certSecret, customCertSecret.getCertificate());\n-                                        byte[] signature = MessageDigest.getInstance(\"SHA-256\").digest(cert.getEncoded());\n-                                        thumbprintPromise.complete(Base64.getEncoder().encodeToString(signature));\n-                                    } catch (CertificateEncodingException | NoSuchAlgorithmException e) {\n-                                        log.warn(\"{}: Failed to get certificate signature of {} from Secret {}.\", reconciliation, customCertSecret.getCertificate(), customCertSecret.getSecretName());\n-                                        thumbprintPromise.fail(new RuntimeException(\"Failed to get certificate signature of \" + customCertSecret.getCertificate() + \" from Secret \" + certSecret.getMetadata().getName(), e));\n-                                    }\n+                                    if (!certSecret.getData().containsKey(customCertSecret.getCertificate())) {\n+                                        thumbprintPromise.fail(\"Secret \" + customCertSecret.getSecretName() + \" does not contain certificate \" + customCertSecret.getCertificate() + \".\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c9c56481b6213286c1f3bcdf199018998e1797b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0Mzc1NjkxOnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNDowNzowOVrOFaefpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNDowNzowOVrOFaefpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMwNjkxOQ==", "bodyText": "Same as above.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2360#discussion_r363306919", "createdAt": "2020-01-06T14:07:09Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -1774,14 +1774,18 @@ public void checkCustomCaSecret(CertificateAuthority ca, Secret certSecret, Secr\n                                 Secret certSecret = result.result();\n \n                                 if (certSecret != null) {\n-                                    try {\n-                                        X509Certificate cert = Ca.cert(certSecret, customCertSecret.getCertificate());\n-                                        byte[] signature = MessageDigest.getInstance(\"SHA-256\").digest(cert.getEncoded());\n-                                        thumbprintPromise.complete(Base64.getEncoder().encodeToString(signature));\n-                                    } catch (CertificateEncodingException | NoSuchAlgorithmException e) {\n-                                        log.warn(\"{}: Failed to get certificate signature of {} from Secret {}.\", reconciliation, customCertSecret.getCertificate(), customCertSecret.getSecretName());\n-                                        thumbprintPromise.fail(new RuntimeException(\"Failed to get certificate signature of \" + customCertSecret.getCertificate() + \" from Secret \" + certSecret.getMetadata().getName(), e));\n-                                    }\n+                                    if (!certSecret.getData().containsKey(customCertSecret.getCertificate())) {\n+                                        thumbprintPromise.fail(\"Secret \" + customCertSecret.getSecretName() + \" does not contain certificate \" + customCertSecret.getCertificate() + \".\");\n+                                    } else if (!certSecret.getData().containsKey(customCertSecret.getKey())) {\n+                                        thumbprintPromise.fail(\"Secret \" + customCertSecret.getSecretName() + \" does not contain key \" + customCertSecret.getKey() + \".\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c9c56481b6213286c1f3bcdf199018998e1797b"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0Mzk5NjkyOnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNTozNDozMlrOFagzYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxOToxNjo0MVrOFbDG1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM0NDczOA==", "bodyText": "Won't the logging here and the failure of the thumbprintPromise with the same message result in the message being logged twice?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2360#discussion_r363344738", "createdAt": "2020-01-06T15:34:32Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -1774,14 +1774,21 @@ public void checkCustomCaSecret(CertificateAuthority ca, Secret certSecret, Secr\n                                 Secret certSecret = result.result();\n \n                                 if (certSecret != null) {\n-                                    try {\n-                                        X509Certificate cert = Ca.cert(certSecret, customCertSecret.getCertificate());\n-                                        byte[] signature = MessageDigest.getInstance(\"SHA-256\").digest(cert.getEncoded());\n-                                        thumbprintPromise.complete(Base64.getEncoder().encodeToString(signature));\n-                                    } catch (CertificateEncodingException | NoSuchAlgorithmException e) {\n-                                        log.warn(\"{}: Failed to get certificate signature of {} from Secret {}.\", reconciliation, customCertSecret.getCertificate(), customCertSecret.getSecretName());\n-                                        thumbprintPromise.fail(new RuntimeException(\"Failed to get certificate signature of \" + customCertSecret.getCertificate() + \" from Secret \" + certSecret.getMetadata().getName(), e));\n-                                    }\n+                                    if (!certSecret.getData().containsKey(customCertSecret.getCertificate())) {\n+                                        log.warn(\"{}: Secret {} does not contain certificate under the key {}.\", reconciliation, customCertSecret.getSecretName(), customCertSecret.getCertificate());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2489a964d86a41893305936199bafa296b624f1e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzYzMjcxNQ==", "bodyText": "It will: https://pastebin.com/8wpCi6VZ", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2360#discussion_r363632715", "createdAt": "2020-01-07T08:15:48Z", "author": {"login": "sknot-rh"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -1774,14 +1774,21 @@ public void checkCustomCaSecret(CertificateAuthority ca, Secret certSecret, Secr\n                                 Secret certSecret = result.result();\n \n                                 if (certSecret != null) {\n-                                    try {\n-                                        X509Certificate cert = Ca.cert(certSecret, customCertSecret.getCertificate());\n-                                        byte[] signature = MessageDigest.getInstance(\"SHA-256\").digest(cert.getEncoded());\n-                                        thumbprintPromise.complete(Base64.getEncoder().encodeToString(signature));\n-                                    } catch (CertificateEncodingException | NoSuchAlgorithmException e) {\n-                                        log.warn(\"{}: Failed to get certificate signature of {} from Secret {}.\", reconciliation, customCertSecret.getCertificate(), customCertSecret.getSecretName());\n-                                        thumbprintPromise.fail(new RuntimeException(\"Failed to get certificate signature of \" + customCertSecret.getCertificate() + \" from Secret \" + certSecret.getMetadata().getName(), e));\n-                                    }\n+                                    if (!certSecret.getData().containsKey(customCertSecret.getCertificate())) {\n+                                        log.warn(\"{}: Secret {} does not contain certificate under the key {}.\", reconciliation, customCertSecret.getSecretName(), customCertSecret.getCertificate());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM0NDczOA=="}, "originalCommit": {"oid": "2489a964d86a41893305936199bafa296b624f1e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY0MzQxMw==", "bodyText": "Well it's pointless logging such things twice, so I'd drop the log stmts here and let the global handler log it.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2360#discussion_r363643413", "createdAt": "2020-01-07T08:48:02Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -1774,14 +1774,21 @@ public void checkCustomCaSecret(CertificateAuthority ca, Secret certSecret, Secr\n                                 Secret certSecret = result.result();\n \n                                 if (certSecret != null) {\n-                                    try {\n-                                        X509Certificate cert = Ca.cert(certSecret, customCertSecret.getCertificate());\n-                                        byte[] signature = MessageDigest.getInstance(\"SHA-256\").digest(cert.getEncoded());\n-                                        thumbprintPromise.complete(Base64.getEncoder().encodeToString(signature));\n-                                    } catch (CertificateEncodingException | NoSuchAlgorithmException e) {\n-                                        log.warn(\"{}: Failed to get certificate signature of {} from Secret {}.\", reconciliation, customCertSecret.getCertificate(), customCertSecret.getSecretName());\n-                                        thumbprintPromise.fail(new RuntimeException(\"Failed to get certificate signature of \" + customCertSecret.getCertificate() + \" from Secret \" + certSecret.getMetadata().getName(), e));\n-                                    }\n+                                    if (!certSecret.getData().containsKey(customCertSecret.getCertificate())) {\n+                                        log.warn(\"{}: Secret {} does not contain certificate under the key {}.\", reconciliation, customCertSecret.getSecretName(), customCertSecret.getCertificate());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM0NDczOA=="}, "originalCommit": {"oid": "2489a964d86a41893305936199bafa296b624f1e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY1MTAwNg==", "bodyText": "@scholzj ^ What do you think?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2360#discussion_r363651006", "createdAt": "2020-01-07T09:08:39Z", "author": {"login": "sknot-rh"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -1774,14 +1774,21 @@ public void checkCustomCaSecret(CertificateAuthority ca, Secret certSecret, Secr\n                                 Secret certSecret = result.result();\n \n                                 if (certSecret != null) {\n-                                    try {\n-                                        X509Certificate cert = Ca.cert(certSecret, customCertSecret.getCertificate());\n-                                        byte[] signature = MessageDigest.getInstance(\"SHA-256\").digest(cert.getEncoded());\n-                                        thumbprintPromise.complete(Base64.getEncoder().encodeToString(signature));\n-                                    } catch (CertificateEncodingException | NoSuchAlgorithmException e) {\n-                                        log.warn(\"{}: Failed to get certificate signature of {} from Secret {}.\", reconciliation, customCertSecret.getCertificate(), customCertSecret.getSecretName());\n-                                        thumbprintPromise.fail(new RuntimeException(\"Failed to get certificate signature of \" + customCertSecret.getCertificate() + \" from Secret \" + certSecret.getMetadata().getName(), e));\n-                                    }\n+                                    if (!certSecret.getData().containsKey(customCertSecret.getCertificate())) {\n+                                        log.warn(\"{}: Secret {} does not contain certificate under the key {}.\", reconciliation, customCertSecret.getSecretName(), customCertSecret.getCertificate());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM0NDczOA=="}, "originalCommit": {"oid": "2489a964d86a41893305936199bafa296b624f1e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkwNjc3Mg==", "bodyText": "Sure, fine with me to remove them.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2360#discussion_r363906772", "createdAt": "2020-01-07T19:16:41Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -1774,14 +1774,21 @@ public void checkCustomCaSecret(CertificateAuthority ca, Secret certSecret, Secr\n                                 Secret certSecret = result.result();\n \n                                 if (certSecret != null) {\n-                                    try {\n-                                        X509Certificate cert = Ca.cert(certSecret, customCertSecret.getCertificate());\n-                                        byte[] signature = MessageDigest.getInstance(\"SHA-256\").digest(cert.getEncoded());\n-                                        thumbprintPromise.complete(Base64.getEncoder().encodeToString(signature));\n-                                    } catch (CertificateEncodingException | NoSuchAlgorithmException e) {\n-                                        log.warn(\"{}: Failed to get certificate signature of {} from Secret {}.\", reconciliation, customCertSecret.getCertificate(), customCertSecret.getSecretName());\n-                                        thumbprintPromise.fail(new RuntimeException(\"Failed to get certificate signature of \" + customCertSecret.getCertificate() + \" from Secret \" + certSecret.getMetadata().getName(), e));\n-                                    }\n+                                    if (!certSecret.getData().containsKey(customCertSecret.getCertificate())) {\n+                                        log.warn(\"{}: Secret {} does not contain certificate under the key {}.\", reconciliation, customCertSecret.getSecretName(), customCertSecret.getCertificate());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM0NDczOA=="}, "originalCommit": {"oid": "2489a964d86a41893305936199bafa296b624f1e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NDAxNDI0OnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNTo0MDozMlrOFag-Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNTo0Mjo1MlrOFahCXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM0NzUyMg==", "bodyText": "I don't think we should use RuntimeException (at least in the case of a CertificateEncodingException, which would indicate that the user didn't create the Secret with a cert in the correct format). Remember that the exception class name gets set in the resource status, so it ought to be something helpful. I guess we could use the existing InvalidResourceException (though I've always thought of that as being about the consumed CR, rather than other resources)? Or Maybe a new exception class.\nThe above errors for missing cert and key should use the same exception type.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2360#discussion_r363347522", "createdAt": "2020-01-06T15:40:32Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -1774,14 +1774,21 @@ public void checkCustomCaSecret(CertificateAuthority ca, Secret certSecret, Secr\n                                 Secret certSecret = result.result();\n \n                                 if (certSecret != null) {\n-                                    try {\n-                                        X509Certificate cert = Ca.cert(certSecret, customCertSecret.getCertificate());\n-                                        byte[] signature = MessageDigest.getInstance(\"SHA-256\").digest(cert.getEncoded());\n-                                        thumbprintPromise.complete(Base64.getEncoder().encodeToString(signature));\n-                                    } catch (CertificateEncodingException | NoSuchAlgorithmException e) {\n-                                        log.warn(\"{}: Failed to get certificate signature of {} from Secret {}.\", reconciliation, customCertSecret.getCertificate(), customCertSecret.getSecretName());\n-                                        thumbprintPromise.fail(new RuntimeException(\"Failed to get certificate signature of \" + customCertSecret.getCertificate() + \" from Secret \" + certSecret.getMetadata().getName(), e));\n-                                    }\n+                                    if (!certSecret.getData().containsKey(customCertSecret.getCertificate())) {\n+                                        log.warn(\"{}: Secret {} does not contain certificate under the key {}.\", reconciliation, customCertSecret.getSecretName(), customCertSecret.getCertificate());\n+                                        thumbprintPromise.fail(\"Secret \" + customCertSecret.getSecretName() + \" does not contain certificate under the key \" + customCertSecret.getCertificate() + \".\");\n+                                    } else if (!certSecret.getData().containsKey(customCertSecret.getKey())) {\n+                                        log.warn(\"{}: Secret {} does not contain custom certificate private key under the key {}.\", reconciliation, customCertSecret.getSecretName(), customCertSecret.getKey());\n+                                        thumbprintPromise.fail(\"Secret \" + customCertSecret.getSecretName() + \" does not contain custom certificate private key under the key \" + customCertSecret.getKey() + \".\");\n+                                    } else\n+                                        try {\n+                                            X509Certificate cert = Ca.cert(certSecret, customCertSecret.getCertificate());\n+                                            byte[] signature = MessageDigest.getInstance(\"SHA-256\").digest(cert.getEncoded());\n+                                            thumbprintPromise.complete(Base64.getEncoder().encodeToString(signature));\n+                                        } catch (CertificateEncodingException | NoSuchAlgorithmException e) {\n+                                            log.warn(\"{}: Failed to get certificate signature of {} from Secret {}.\", reconciliation, customCertSecret.getCertificate(), customCertSecret.getSecretName());\n+                                            thumbprintPromise.fail(new RuntimeException(\"Failed to get certificate signature of \" + customCertSecret.getCertificate() + \" from Secret \" + certSecret.getMetadata().getName(), e));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2489a964d86a41893305936199bafa296b624f1e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM0ODU3Mw==", "bodyText": "I guess when the keys are missing it is really abotu invalid CR -> the keys listed there are wrong. When they exist but fail to decode it is a bit harder.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2360#discussion_r363348573", "createdAt": "2020-01-06T15:42:52Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -1774,14 +1774,21 @@ public void checkCustomCaSecret(CertificateAuthority ca, Secret certSecret, Secr\n                                 Secret certSecret = result.result();\n \n                                 if (certSecret != null) {\n-                                    try {\n-                                        X509Certificate cert = Ca.cert(certSecret, customCertSecret.getCertificate());\n-                                        byte[] signature = MessageDigest.getInstance(\"SHA-256\").digest(cert.getEncoded());\n-                                        thumbprintPromise.complete(Base64.getEncoder().encodeToString(signature));\n-                                    } catch (CertificateEncodingException | NoSuchAlgorithmException e) {\n-                                        log.warn(\"{}: Failed to get certificate signature of {} from Secret {}.\", reconciliation, customCertSecret.getCertificate(), customCertSecret.getSecretName());\n-                                        thumbprintPromise.fail(new RuntimeException(\"Failed to get certificate signature of \" + customCertSecret.getCertificate() + \" from Secret \" + certSecret.getMetadata().getName(), e));\n-                                    }\n+                                    if (!certSecret.getData().containsKey(customCertSecret.getCertificate())) {\n+                                        log.warn(\"{}: Secret {} does not contain certificate under the key {}.\", reconciliation, customCertSecret.getSecretName(), customCertSecret.getCertificate());\n+                                        thumbprintPromise.fail(\"Secret \" + customCertSecret.getSecretName() + \" does not contain certificate under the key \" + customCertSecret.getCertificate() + \".\");\n+                                    } else if (!certSecret.getData().containsKey(customCertSecret.getKey())) {\n+                                        log.warn(\"{}: Secret {} does not contain custom certificate private key under the key {}.\", reconciliation, customCertSecret.getSecretName(), customCertSecret.getKey());\n+                                        thumbprintPromise.fail(\"Secret \" + customCertSecret.getSecretName() + \" does not contain custom certificate private key under the key \" + customCertSecret.getKey() + \".\");\n+                                    } else\n+                                        try {\n+                                            X509Certificate cert = Ca.cert(certSecret, customCertSecret.getCertificate());\n+                                            byte[] signature = MessageDigest.getInstance(\"SHA-256\").digest(cert.getEncoded());\n+                                            thumbprintPromise.complete(Base64.getEncoder().encodeToString(signature));\n+                                        } catch (CertificateEncodingException | NoSuchAlgorithmException e) {\n+                                            log.warn(\"{}: Failed to get certificate signature of {} from Secret {}.\", reconciliation, customCertSecret.getCertificate(), customCertSecret.getSecretName());\n+                                            thumbprintPromise.fail(new RuntimeException(\"Failed to get certificate signature of \" + customCertSecret.getCertificate() + \" from Secret \" + certSecret.getMetadata().getName(), e));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM0NzUyMg=="}, "originalCommit": {"oid": "2489a964d86a41893305936199bafa296b624f1e"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0ODc0NjU3OnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwNzozNDowNVrOFbOj8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwNzozNDowNVrOFbOj8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA5NDQ1MQ==", "bodyText": "I guess at least this should be a InvalidResourceException as well.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2360#discussion_r364094451", "createdAt": "2020-01-08T07:34:05Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -1774,20 +1775,22 @@ public void checkCustomCaSecret(CertificateAuthority ca, Secret certSecret, Secr\n                                 Secret certSecret = result.result();\n \n                                 if (certSecret != null) {\n-                                    try {\n-                                        X509Certificate cert = Ca.cert(certSecret, customCertSecret.getCertificate());\n-                                        byte[] signature = MessageDigest.getInstance(\"SHA-256\").digest(cert.getEncoded());\n-                                        thumbprintPromise.complete(Base64.getEncoder().encodeToString(signature));\n-                                    } catch (CertificateEncodingException | NoSuchAlgorithmException e) {\n-                                        log.warn(\"{}: Failed to get certificate signature of {} from Secret {}.\", reconciliation, customCertSecret.getCertificate(), customCertSecret.getSecretName());\n-                                        thumbprintPromise.fail(new RuntimeException(\"Failed to get certificate signature of \" + customCertSecret.getCertificate() + \" from Secret \" + certSecret.getMetadata().getName(), e));\n-                                    }\n+                                    if (!certSecret.getData().containsKey(customCertSecret.getCertificate())) {\n+                                        thumbprintPromise.fail(new InvalidResourceException(\"Secret \" + customCertSecret.getSecretName() + \" does not contain certificate under the key \" + customCertSecret.getCertificate() + \".\"));\n+                                    } else if (!certSecret.getData().containsKey(customCertSecret.getKey())) {\n+                                        thumbprintPromise.fail(new InvalidResourceException(\"Secret \" + customCertSecret.getSecretName() + \" does not contain custom certificate private key under the key \" + customCertSecret.getKey() + \".\"));\n+                                    } else\n+                                        try {\n+                                            X509Certificate cert = Ca.cert(certSecret, customCertSecret.getCertificate());\n+                                            byte[] signature = MessageDigest.getInstance(\"SHA-256\").digest(cert.getEncoded());\n+                                            thumbprintPromise.complete(Base64.getEncoder().encodeToString(signature));\n+                                        } catch (CertificateEncodingException | NoSuchAlgorithmException e) {\n+                                            thumbprintPromise.fail(new RuntimeException(\"Failed to get certificate signature of \" + customCertSecret.getCertificate() + \" from Secret \" + certSecret.getMetadata().getName(), e));\n+                                        }\n                                 } else {\n-                                    log.warn(\"{}: Secret {} with custom TLS certificate does not exist.\", reconciliation, customCertSecret.getSecretName());\n                                     thumbprintPromise.fail(\"Secret \" + customCertSecret.getSecretName() + \" with custom TLS certificate does not exist.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c1dbe0dce5f59e00cae21a0575706ca8ed1ef33"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0ODk0MTM1OnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwOTowMzowM1rOFbQYLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwOTowMzowM1rOFbQYLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDEyNDIwNg==", "bodyText": "We have NoSuchResourceException which you can use here.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2360#discussion_r364124206", "createdAt": "2020-01-08T09:03:03Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -1774,20 +1775,22 @@ public void checkCustomCaSecret(CertificateAuthority ca, Secret certSecret, Secr\n                                 Secret certSecret = result.result();\n \n                                 if (certSecret != null) {\n-                                    try {\n-                                        X509Certificate cert = Ca.cert(certSecret, customCertSecret.getCertificate());\n-                                        byte[] signature = MessageDigest.getInstance(\"SHA-256\").digest(cert.getEncoded());\n-                                        thumbprintPromise.complete(Base64.getEncoder().encodeToString(signature));\n-                                    } catch (CertificateEncodingException | NoSuchAlgorithmException e) {\n-                                        log.warn(\"{}: Failed to get certificate signature of {} from Secret {}.\", reconciliation, customCertSecret.getCertificate(), customCertSecret.getSecretName());\n-                                        thumbprintPromise.fail(new RuntimeException(\"Failed to get certificate signature of \" + customCertSecret.getCertificate() + \" from Secret \" + certSecret.getMetadata().getName(), e));\n-                                    }\n+                                    if (!certSecret.getData().containsKey(customCertSecret.getCertificate())) {\n+                                        thumbprintPromise.fail(new InvalidResourceException(\"Secret \" + customCertSecret.getSecretName() + \" does not contain certificate under the key \" + customCertSecret.getCertificate() + \".\"));\n+                                    } else if (!certSecret.getData().containsKey(customCertSecret.getKey())) {\n+                                        thumbprintPromise.fail(new InvalidResourceException(\"Secret \" + customCertSecret.getSecretName() + \" does not contain custom certificate private key under the key \" + customCertSecret.getKey() + \".\"));\n+                                    } else\n+                                        try {\n+                                            X509Certificate cert = Ca.cert(certSecret, customCertSecret.getCertificate());\n+                                            byte[] signature = MessageDigest.getInstance(\"SHA-256\").digest(cert.getEncoded());\n+                                            thumbprintPromise.complete(Base64.getEncoder().encodeToString(signature));\n+                                        } catch (CertificateEncodingException | NoSuchAlgorithmException e) {\n+                                            thumbprintPromise.fail(new RuntimeException(\"Failed to get certificate signature of \" + customCertSecret.getCertificate() + \" from Secret \" + certSecret.getMetadata().getName(), e));\n+                                        }\n                                 } else {\n-                                    log.warn(\"{}: Secret {} with custom TLS certificate does not exist.\", reconciliation, customCertSecret.getSecretName());\n-                                    thumbprintPromise.fail(\"Secret \" + customCertSecret.getSecretName() + \" with custom TLS certificate does not exist.\");\n+                                    thumbprintPromise.fail(new InvalidResourceException(\"Secret \" + customCertSecret.getSecretName() + \" with custom TLS certificate does not exist.\"));\n                                 }\n                             } else {\n-                                log.warn(\"{}: Failed to get secret {} with custom TLS certificate.\", reconciliation, customCertSecret.getSecretName());\n                                 thumbprintPromise.fail(\"Failed to get secret \" + customCertSecret.getSecretName() + \" with custom TLS certificate.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53c0748f688f61765678b092274abbe887132342"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 548, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}