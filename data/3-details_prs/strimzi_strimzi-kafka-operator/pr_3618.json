{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyNTgzODM0", "number": 3618, "title": "A debugging guide", "bodyText": "Signed-off-by: Marko Strukelj marko.strukelj@gmail.com\nType of change\nSelect the type of your PR\n\nDocumentation\n\nDescription\nA simple guide to remote debugging Strimzi Kafka Operator or the Kafka image\nChecklist\nPlease go through this checklist and make sure all applicable tasks have been done\n\n Write tests\n Make sure all tests pass\n Update documentation\n Check RBAC rights for Kubernetes / OpenShift roles\n Try your changes from Pod inside your Kubernetes and OpenShift cluster, not just locally\n Reference relevant issue(s) and close them after merging\n Update CHANGELOG.md\n Supply screenshots for visual changes, such as Grafana dashboards", "createdAt": "2020-09-09T07:11:21Z", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3618", "merged": true, "mergeCommit": {"oid": "d783757663d26432d6f5066292ca9465271c3f03"}, "closed": true, "closedAt": "2020-09-09T14:08:13Z", "author": {"login": "mstruk"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHGsVxAH2gAyNDgyNTgzODM0OjlkZDQ0NmU1MDMxOWNkNjEwMmE0MmZjMWIzNDdkMjYwY2JhYjg2Nzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHLEDIgFqTQ4NDk0MDQ2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9dd446e50319cd6102a42fc1b347d260cbab8678", "author": {"user": {"login": "mstruk", "name": "Marko Strukelj"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/9dd446e50319cd6102a42fc1b347d260cbab8678", "committedDate": "2020-09-09T07:02:34Z", "message": "A debugging guide\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NzI0NjA2", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3618#pullrequestreview-484724606", "createdAt": "2020-09-09T07:18:42Z", "commit": {"oid": "9dd446e50319cd6102a42fc1b347d260cbab8678"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NzI1OTg3", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3618#pullrequestreview-484725987", "createdAt": "2020-09-09T07:20:54Z", "commit": {"oid": "9dd446e50319cd6102a42fc1b347d260cbab8678"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzoyMDo1NFrOHO5-sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzoyMToyOVrOHO5_3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM5MjA0OQ==", "bodyText": "don't think that changing the local port is necessary, it could just confuse user that now should attach the debugger on localhost:5006 instead of 5005", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3618#discussion_r485392049", "createdAt": "2020-09-09T07:20:54Z", "author": {"login": "ppatierno"}, "path": "development-docs/DEBUGGING.md", "diffHunk": "@@ -0,0 +1,188 @@\n+# Debugging Guide for Strimzi\n+\n+This guide primarily explains how to perform remote debugging of code deployed to Kubernetes with strimzi/operator image, and the strimzi/kafka images.\n+\n+<!-- TOC depthFrom:2 -->\n+\n+- [Activating remote debugging using the agent](#activating-remote-debugging-using-the-agent)\n+- [Remote debugging the Strimzi Cluster Operator](#remote-debugging-the-strimzi-cluster-operator)\n+- [Remote debugging the Kafka Broker](#remote-debugging-the-kafka-broker)\n+- [Using the IntelliJ IDEA for debugging](#using-the-intellij-idea-for-debugging)\n+  - [Setting the breakpoints](#setting-the-breakpoints)\n+  - [Evaluating expressions when suspended](#evaluating-expressions-when-suspended)\n+  - [Resolving code version mismatches](#resolving-code-version-mismatches)\n+\n+<!-- /TOC -->\n+\n+## Activating remote debugging using the agent\n+\n+Java runtime (the JVM) comes with an agent that provides support for remote debugging. Using you Java IDE you can connect to a remote process over a TCP connection, and perform debugging actions like setting breakpoints, suspending threads, gathering stack and heap info, and evaluating arbitrary java code inside the running JVM.\n+\n+In order to activate remote debugging the java process needs to be run with an additional argument like the following:\n+\n+    -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005\n+\n+This starts a TCP server on localhost using the specified port (5005 in this case). Connection is only possible from the localhost.\n+Because we used `suspend=y` the start up of the JVM will stall, and wait for the debug client to connect.\n+All the popular Java IDEs support remote debugging.\n+\n+\n+## Remote debugging the Strimzi Cluster Operator\n+\n+Strimzi Cluster Operator is installed through Deployment definition in `install/cluster-operator/060-Deployment-strimzi-cluster-operator.yaml`.\n+\n+We can enable remote debugging by adding the `JAVA_OPTS` environment variable to `strimzi-cluster-operator` container in this file:\n+\n+          env:\n+            ...\n+            - name: JAVA_OPTS\n+              value: \"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005\"\n+\n+\n+Let's also increase the livenessProbe timeout:\n+\n+          livenessProbe:\n+            initialDelaySeconds: 3600\n+            timeoutSeconds: 3600\n+\n+Apply the modified file:\n+\n+    kubectl apply -f install/cluster-operator/060-Deployment-strimzi-cluster-operator.yaml\n+\n+We also need to open the port for localhost access:\n+\n+    kubectl port-forward $(oc get pod | grep strimzi-cluster-operator | awk '{printf $1}') 5006:5005", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dd446e50319cd6102a42fc1b347d260cbab8678"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM5MjM0OA==", "bodyText": "any explanation on why? just for checking that the CO is now stopped and waiting for the remote session to be attached? is it worth to explain it?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3618#discussion_r485392348", "createdAt": "2020-09-09T07:21:29Z", "author": {"login": "ppatierno"}, "path": "development-docs/DEBUGGING.md", "diffHunk": "@@ -0,0 +1,188 @@\n+# Debugging Guide for Strimzi\n+\n+This guide primarily explains how to perform remote debugging of code deployed to Kubernetes with strimzi/operator image, and the strimzi/kafka images.\n+\n+<!-- TOC depthFrom:2 -->\n+\n+- [Activating remote debugging using the agent](#activating-remote-debugging-using-the-agent)\n+- [Remote debugging the Strimzi Cluster Operator](#remote-debugging-the-strimzi-cluster-operator)\n+- [Remote debugging the Kafka Broker](#remote-debugging-the-kafka-broker)\n+- [Using the IntelliJ IDEA for debugging](#using-the-intellij-idea-for-debugging)\n+  - [Setting the breakpoints](#setting-the-breakpoints)\n+  - [Evaluating expressions when suspended](#evaluating-expressions-when-suspended)\n+  - [Resolving code version mismatches](#resolving-code-version-mismatches)\n+\n+<!-- /TOC -->\n+\n+## Activating remote debugging using the agent\n+\n+Java runtime (the JVM) comes with an agent that provides support for remote debugging. Using you Java IDE you can connect to a remote process over a TCP connection, and perform debugging actions like setting breakpoints, suspending threads, gathering stack and heap info, and evaluating arbitrary java code inside the running JVM.\n+\n+In order to activate remote debugging the java process needs to be run with an additional argument like the following:\n+\n+    -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005\n+\n+This starts a TCP server on localhost using the specified port (5005 in this case). Connection is only possible from the localhost.\n+Because we used `suspend=y` the start up of the JVM will stall, and wait for the debug client to connect.\n+All the popular Java IDEs support remote debugging.\n+\n+\n+## Remote debugging the Strimzi Cluster Operator\n+\n+Strimzi Cluster Operator is installed through Deployment definition in `install/cluster-operator/060-Deployment-strimzi-cluster-operator.yaml`.\n+\n+We can enable remote debugging by adding the `JAVA_OPTS` environment variable to `strimzi-cluster-operator` container in this file:\n+\n+          env:\n+            ...\n+            - name: JAVA_OPTS\n+              value: \"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005\"\n+\n+\n+Let's also increase the livenessProbe timeout:\n+\n+          livenessProbe:\n+            initialDelaySeconds: 3600\n+            timeoutSeconds: 3600\n+\n+Apply the modified file:\n+\n+    kubectl apply -f install/cluster-operator/060-Deployment-strimzi-cluster-operator.yaml\n+\n+We also need to open the port for localhost access:\n+\n+    kubectl port-forward $(oc get pod | grep strimzi-cluster-operator | awk '{printf $1}') 5006:5005\n+\n+Start tailing the operator pod:\n+\n+    oc logs $(oc get pod | grep strimzi-cluster-operator | awk '{printf $1}') -f ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dd446e50319cd6102a42fc1b347d260cbab8678"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NzMzMzE2", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3618#pullrequestreview-484733316", "createdAt": "2020-09-09T07:31:27Z", "commit": {"oid": "9dd446e50319cd6102a42fc1b347d260cbab8678"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzozMToyN1rOHO6VKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzozNjowNVrOHO6e1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM5NzgwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Java runtime (the JVM) comes with an agent that provides support for remote debugging. Using you Java IDE you can connect to a remote process over a TCP connection, and perform debugging actions like setting breakpoints, suspending threads, gathering stack and heap info, and evaluating arbitrary java code inside the running JVM.\n          \n          \n            \n            The Java runtime (the JVM) comes with an agent that provides support for remote debugging. Using your Java IDE you can connect to a remote process over a TCP connection, and perform debugging actions like setting breakpoints, suspending threads, gathering stack and heap info, and evaluating arbitrary Java code inside the running JVM.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3618#discussion_r485397803", "createdAt": "2020-09-09T07:31:27Z", "author": {"login": "tombentley"}, "path": "development-docs/DEBUGGING.md", "diffHunk": "@@ -0,0 +1,188 @@\n+# Debugging Guide for Strimzi\n+\n+This guide primarily explains how to perform remote debugging of code deployed to Kubernetes with strimzi/operator image, and the strimzi/kafka images.\n+\n+<!-- TOC depthFrom:2 -->\n+\n+- [Activating remote debugging using the agent](#activating-remote-debugging-using-the-agent)\n+- [Remote debugging the Strimzi Cluster Operator](#remote-debugging-the-strimzi-cluster-operator)\n+- [Remote debugging the Kafka Broker](#remote-debugging-the-kafka-broker)\n+- [Using the IntelliJ IDEA for debugging](#using-the-intellij-idea-for-debugging)\n+  - [Setting the breakpoints](#setting-the-breakpoints)\n+  - [Evaluating expressions when suspended](#evaluating-expressions-when-suspended)\n+  - [Resolving code version mismatches](#resolving-code-version-mismatches)\n+\n+<!-- /TOC -->\n+\n+## Activating remote debugging using the agent\n+\n+Java runtime (the JVM) comes with an agent that provides support for remote debugging. Using you Java IDE you can connect to a remote process over a TCP connection, and perform debugging actions like setting breakpoints, suspending threads, gathering stack and heap info, and evaluating arbitrary java code inside the running JVM.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dd446e50319cd6102a42fc1b347d260cbab8678"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM5ODI1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Strimzi Cluster Operator is installed through Deployment definition in `install/cluster-operator/060-Deployment-strimzi-cluster-operator.yaml`.\n          \n          \n            \n            Strimzi Cluster Operator is installed through the Deployment definition in `install/cluster-operator/060-Deployment-strimzi-cluster-operator.yaml`.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3618#discussion_r485398257", "createdAt": "2020-09-09T07:32:18Z", "author": {"login": "tombentley"}, "path": "development-docs/DEBUGGING.md", "diffHunk": "@@ -0,0 +1,188 @@\n+# Debugging Guide for Strimzi\n+\n+This guide primarily explains how to perform remote debugging of code deployed to Kubernetes with strimzi/operator image, and the strimzi/kafka images.\n+\n+<!-- TOC depthFrom:2 -->\n+\n+- [Activating remote debugging using the agent](#activating-remote-debugging-using-the-agent)\n+- [Remote debugging the Strimzi Cluster Operator](#remote-debugging-the-strimzi-cluster-operator)\n+- [Remote debugging the Kafka Broker](#remote-debugging-the-kafka-broker)\n+- [Using the IntelliJ IDEA for debugging](#using-the-intellij-idea-for-debugging)\n+  - [Setting the breakpoints](#setting-the-breakpoints)\n+  - [Evaluating expressions when suspended](#evaluating-expressions-when-suspended)\n+  - [Resolving code version mismatches](#resolving-code-version-mismatches)\n+\n+<!-- /TOC -->\n+\n+## Activating remote debugging using the agent\n+\n+Java runtime (the JVM) comes with an agent that provides support for remote debugging. Using you Java IDE you can connect to a remote process over a TCP connection, and perform debugging actions like setting breakpoints, suspending threads, gathering stack and heap info, and evaluating arbitrary java code inside the running JVM.\n+\n+In order to activate remote debugging the java process needs to be run with an additional argument like the following:\n+\n+    -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005\n+\n+This starts a TCP server on localhost using the specified port (5005 in this case). Connection is only possible from the localhost.\n+Because we used `suspend=y` the start up of the JVM will stall, and wait for the debug client to connect.\n+All the popular Java IDEs support remote debugging.\n+\n+\n+## Remote debugging the Strimzi Cluster Operator\n+\n+Strimzi Cluster Operator is installed through Deployment definition in `install/cluster-operator/060-Deployment-strimzi-cluster-operator.yaml`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dd446e50319cd6102a42fc1b347d260cbab8678"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM5ODc1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Let's also increase the livenessProbe timeout:\n          \n          \n            \n            Let's also increase the livenessProbe timeout (to avoid Kubernetes restarting the pod if we're slow in attaching the debugger):", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3618#discussion_r485398758", "createdAt": "2020-09-09T07:33:17Z", "author": {"login": "tombentley"}, "path": "development-docs/DEBUGGING.md", "diffHunk": "@@ -0,0 +1,188 @@\n+# Debugging Guide for Strimzi\n+\n+This guide primarily explains how to perform remote debugging of code deployed to Kubernetes with strimzi/operator image, and the strimzi/kafka images.\n+\n+<!-- TOC depthFrom:2 -->\n+\n+- [Activating remote debugging using the agent](#activating-remote-debugging-using-the-agent)\n+- [Remote debugging the Strimzi Cluster Operator](#remote-debugging-the-strimzi-cluster-operator)\n+- [Remote debugging the Kafka Broker](#remote-debugging-the-kafka-broker)\n+- [Using the IntelliJ IDEA for debugging](#using-the-intellij-idea-for-debugging)\n+  - [Setting the breakpoints](#setting-the-breakpoints)\n+  - [Evaluating expressions when suspended](#evaluating-expressions-when-suspended)\n+  - [Resolving code version mismatches](#resolving-code-version-mismatches)\n+\n+<!-- /TOC -->\n+\n+## Activating remote debugging using the agent\n+\n+Java runtime (the JVM) comes with an agent that provides support for remote debugging. Using you Java IDE you can connect to a remote process over a TCP connection, and perform debugging actions like setting breakpoints, suspending threads, gathering stack and heap info, and evaluating arbitrary java code inside the running JVM.\n+\n+In order to activate remote debugging the java process needs to be run with an additional argument like the following:\n+\n+    -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005\n+\n+This starts a TCP server on localhost using the specified port (5005 in this case). Connection is only possible from the localhost.\n+Because we used `suspend=y` the start up of the JVM will stall, and wait for the debug client to connect.\n+All the popular Java IDEs support remote debugging.\n+\n+\n+## Remote debugging the Strimzi Cluster Operator\n+\n+Strimzi Cluster Operator is installed through Deployment definition in `install/cluster-operator/060-Deployment-strimzi-cluster-operator.yaml`.\n+\n+We can enable remote debugging by adding the `JAVA_OPTS` environment variable to `strimzi-cluster-operator` container in this file:\n+\n+          env:\n+            ...\n+            - name: JAVA_OPTS\n+              value: \"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005\"\n+\n+\n+Let's also increase the livenessProbe timeout:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dd446e50319cd6102a42fc1b347d260cbab8678"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM5OTI2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Kafka Broker pods are defined through 'my-cluster-kafka' StatefulSet which is created by Strimzi Kafka Operator.\n          \n          \n            \n            Kafka Broker pods are defined through the 'my-cluster-kafka' StatefulSet which is created by Strimzi Kafka Operator.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3618#discussion_r485399265", "createdAt": "2020-09-09T07:34:15Z", "author": {"login": "tombentley"}, "path": "development-docs/DEBUGGING.md", "diffHunk": "@@ -0,0 +1,188 @@\n+# Debugging Guide for Strimzi\n+\n+This guide primarily explains how to perform remote debugging of code deployed to Kubernetes with strimzi/operator image, and the strimzi/kafka images.\n+\n+<!-- TOC depthFrom:2 -->\n+\n+- [Activating remote debugging using the agent](#activating-remote-debugging-using-the-agent)\n+- [Remote debugging the Strimzi Cluster Operator](#remote-debugging-the-strimzi-cluster-operator)\n+- [Remote debugging the Kafka Broker](#remote-debugging-the-kafka-broker)\n+- [Using the IntelliJ IDEA for debugging](#using-the-intellij-idea-for-debugging)\n+  - [Setting the breakpoints](#setting-the-breakpoints)\n+  - [Evaluating expressions when suspended](#evaluating-expressions-when-suspended)\n+  - [Resolving code version mismatches](#resolving-code-version-mismatches)\n+\n+<!-- /TOC -->\n+\n+## Activating remote debugging using the agent\n+\n+Java runtime (the JVM) comes with an agent that provides support for remote debugging. Using you Java IDE you can connect to a remote process over a TCP connection, and perform debugging actions like setting breakpoints, suspending threads, gathering stack and heap info, and evaluating arbitrary java code inside the running JVM.\n+\n+In order to activate remote debugging the java process needs to be run with an additional argument like the following:\n+\n+    -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005\n+\n+This starts a TCP server on localhost using the specified port (5005 in this case). Connection is only possible from the localhost.\n+Because we used `suspend=y` the start up of the JVM will stall, and wait for the debug client to connect.\n+All the popular Java IDEs support remote debugging.\n+\n+\n+## Remote debugging the Strimzi Cluster Operator\n+\n+Strimzi Cluster Operator is installed through Deployment definition in `install/cluster-operator/060-Deployment-strimzi-cluster-operator.yaml`.\n+\n+We can enable remote debugging by adding the `JAVA_OPTS` environment variable to `strimzi-cluster-operator` container in this file:\n+\n+          env:\n+            ...\n+            - name: JAVA_OPTS\n+              value: \"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005\"\n+\n+\n+Let's also increase the livenessProbe timeout:\n+\n+          livenessProbe:\n+            initialDelaySeconds: 3600\n+            timeoutSeconds: 3600\n+\n+Apply the modified file:\n+\n+    kubectl apply -f install/cluster-operator/060-Deployment-strimzi-cluster-operator.yaml\n+\n+We also need to open the port for localhost access:\n+\n+    kubectl port-forward $(oc get pod | grep strimzi-cluster-operator | awk '{printf $1}') 5006:5005\n+\n+Start tailing the operator pod:\n+\n+    oc logs $(oc get pod | grep strimzi-cluster-operator | awk '{printf $1}') -f \n+\n+You can now start the remote debug session from your IDE.\n+\n+\n+## Remote debugging the Kafka Broker\n+\n+Kafka Broker pods are defined through 'my-cluster-kafka' StatefulSet which is created by Strimzi Kafka Operator.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dd446e50319cd6102a42fc1b347d260cbab8678"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQwMDI3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Before remotely connecting with IDE you'll want to start tailing the `my-cluster-kafka-0` broker pod:\n          \n          \n            \n            Before remotely connecting with your IDE you'll want to start tailing the `my-cluster-kafka-0` broker pod:", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3618#discussion_r485400277", "createdAt": "2020-09-09T07:36:05Z", "author": {"login": "tombentley"}, "path": "development-docs/DEBUGGING.md", "diffHunk": "@@ -0,0 +1,188 @@\n+# Debugging Guide for Strimzi\n+\n+This guide primarily explains how to perform remote debugging of code deployed to Kubernetes with strimzi/operator image, and the strimzi/kafka images.\n+\n+<!-- TOC depthFrom:2 -->\n+\n+- [Activating remote debugging using the agent](#activating-remote-debugging-using-the-agent)\n+- [Remote debugging the Strimzi Cluster Operator](#remote-debugging-the-strimzi-cluster-operator)\n+- [Remote debugging the Kafka Broker](#remote-debugging-the-kafka-broker)\n+- [Using the IntelliJ IDEA for debugging](#using-the-intellij-idea-for-debugging)\n+  - [Setting the breakpoints](#setting-the-breakpoints)\n+  - [Evaluating expressions when suspended](#evaluating-expressions-when-suspended)\n+  - [Resolving code version mismatches](#resolving-code-version-mismatches)\n+\n+<!-- /TOC -->\n+\n+## Activating remote debugging using the agent\n+\n+Java runtime (the JVM) comes with an agent that provides support for remote debugging. Using you Java IDE you can connect to a remote process over a TCP connection, and perform debugging actions like setting breakpoints, suspending threads, gathering stack and heap info, and evaluating arbitrary java code inside the running JVM.\n+\n+In order to activate remote debugging the java process needs to be run with an additional argument like the following:\n+\n+    -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005\n+\n+This starts a TCP server on localhost using the specified port (5005 in this case). Connection is only possible from the localhost.\n+Because we used `suspend=y` the start up of the JVM will stall, and wait for the debug client to connect.\n+All the popular Java IDEs support remote debugging.\n+\n+\n+## Remote debugging the Strimzi Cluster Operator\n+\n+Strimzi Cluster Operator is installed through Deployment definition in `install/cluster-operator/060-Deployment-strimzi-cluster-operator.yaml`.\n+\n+We can enable remote debugging by adding the `JAVA_OPTS` environment variable to `strimzi-cluster-operator` container in this file:\n+\n+          env:\n+            ...\n+            - name: JAVA_OPTS\n+              value: \"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005\"\n+\n+\n+Let's also increase the livenessProbe timeout:\n+\n+          livenessProbe:\n+            initialDelaySeconds: 3600\n+            timeoutSeconds: 3600\n+\n+Apply the modified file:\n+\n+    kubectl apply -f install/cluster-operator/060-Deployment-strimzi-cluster-operator.yaml\n+\n+We also need to open the port for localhost access:\n+\n+    kubectl port-forward $(oc get pod | grep strimzi-cluster-operator | awk '{printf $1}') 5006:5005\n+\n+Start tailing the operator pod:\n+\n+    oc logs $(oc get pod | grep strimzi-cluster-operator | awk '{printf $1}') -f \n+\n+You can now start the remote debug session from your IDE.\n+\n+\n+## Remote debugging the Kafka Broker\n+\n+Kafka Broker pods are defined through 'my-cluster-kafka' StatefulSet which is created by Strimzi Kafka Operator.\n+\n+In order to activate the remote debugging we need to get the Kafka Broker to run with remote debugging agent activated.\n+\n+This can be achieved by adding the following to your Kafka CR cluster definition:\n+\n+```\n+\n+spec:\n+  kafka:\n+    ...\n+\n+    livenessProbe:\n+      initialDelaySeconds: 3600\n+      timeoutSeconds: 3600\n+    template:\n+      kafkaContainer:\n+        env:\n+        - name: KAFKA_DEBUG\n+          value: \"y\"\n+        - name: DEBUG_SUSPEND_FLAG\n+          value: \"y\"\n+        - name: JAVA_DEBUG_PORT\n+          value: \"5005\"\n+\n+```\n+\n+We also need to open the specified port (5005 in this case) to be reachable from your host machine:\n+\n+    kubectl port-forward my-cluster-kafka-0 5005\n+\n+If you want to map to a different local port use the LOCAL:REMOTE format, for example:\n+\n+    kubectl port-forward my-cluster-kafka-0 8787:5005\n+\n+All you now have to do is deploy the new Kafka cluster definition, configure remote debugging in your favourite IDE, telling it to connect to localhost:5005, and start your debug session.\n+\n+With `DEBUG_SUSPEND_FLAG` set to 'y', the Kafka Broker process will wait during startup for remote degugger (IDE) to connect before continuing with JVM start up.\n+\n+In Kafka CR we have adjusted the probes to prevent Kubernetes from killing the broker whose execution is suspended due to a breakpoint.\n+\n+Before remotely connecting with IDE you'll want to start tailing the `my-cluster-kafka-0` broker pod:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dd446e50319cd6102a42fc1b347d260cbab8678"}, "originalPosition": 106}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0ODIyMjM1", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3618#pullrequestreview-484822235", "createdAt": "2020-09-09T09:21:59Z", "commit": {"oid": "9dd446e50319cd6102a42fc1b347d260cbab8678"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwOToyMTo1OVrOHO-now==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwOToyMTo1OVrOHO-now==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ2ODA2Nw==", "bodyText": "for remote degugger typo", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3618#discussion_r485468067", "createdAt": "2020-09-09T09:21:59Z", "author": {"login": "michalxo"}, "path": "development-docs/DEBUGGING.md", "diffHunk": "@@ -0,0 +1,188 @@\n+# Debugging Guide for Strimzi\n+\n+This guide primarily explains how to perform remote debugging of code deployed to Kubernetes with strimzi/operator image, and the strimzi/kafka images.\n+\n+<!-- TOC depthFrom:2 -->\n+\n+- [Activating remote debugging using the agent](#activating-remote-debugging-using-the-agent)\n+- [Remote debugging the Strimzi Cluster Operator](#remote-debugging-the-strimzi-cluster-operator)\n+- [Remote debugging the Kafka Broker](#remote-debugging-the-kafka-broker)\n+- [Using the IntelliJ IDEA for debugging](#using-the-intellij-idea-for-debugging)\n+  - [Setting the breakpoints](#setting-the-breakpoints)\n+  - [Evaluating expressions when suspended](#evaluating-expressions-when-suspended)\n+  - [Resolving code version mismatches](#resolving-code-version-mismatches)\n+\n+<!-- /TOC -->\n+\n+## Activating remote debugging using the agent\n+\n+Java runtime (the JVM) comes with an agent that provides support for remote debugging. Using you Java IDE you can connect to a remote process over a TCP connection, and perform debugging actions like setting breakpoints, suspending threads, gathering stack and heap info, and evaluating arbitrary java code inside the running JVM.\n+\n+In order to activate remote debugging the java process needs to be run with an additional argument like the following:\n+\n+    -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005\n+\n+This starts a TCP server on localhost using the specified port (5005 in this case). Connection is only possible from the localhost.\n+Because we used `suspend=y` the start up of the JVM will stall, and wait for the debug client to connect.\n+All the popular Java IDEs support remote debugging.\n+\n+\n+## Remote debugging the Strimzi Cluster Operator\n+\n+Strimzi Cluster Operator is installed through Deployment definition in `install/cluster-operator/060-Deployment-strimzi-cluster-operator.yaml`.\n+\n+We can enable remote debugging by adding the `JAVA_OPTS` environment variable to `strimzi-cluster-operator` container in this file:\n+\n+          env:\n+            ...\n+            - name: JAVA_OPTS\n+              value: \"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005\"\n+\n+\n+Let's also increase the livenessProbe timeout:\n+\n+          livenessProbe:\n+            initialDelaySeconds: 3600\n+            timeoutSeconds: 3600\n+\n+Apply the modified file:\n+\n+    kubectl apply -f install/cluster-operator/060-Deployment-strimzi-cluster-operator.yaml\n+\n+We also need to open the port for localhost access:\n+\n+    kubectl port-forward $(oc get pod | grep strimzi-cluster-operator | awk '{printf $1}') 5006:5005\n+\n+Start tailing the operator pod:\n+\n+    oc logs $(oc get pod | grep strimzi-cluster-operator | awk '{printf $1}') -f \n+\n+You can now start the remote debug session from your IDE.\n+\n+\n+## Remote debugging the Kafka Broker\n+\n+Kafka Broker pods are defined through 'my-cluster-kafka' StatefulSet which is created by Strimzi Kafka Operator.\n+\n+In order to activate the remote debugging we need to get the Kafka Broker to run with remote debugging agent activated.\n+\n+This can be achieved by adding the following to your Kafka CR cluster definition:\n+\n+```\n+\n+spec:\n+  kafka:\n+    ...\n+\n+    livenessProbe:\n+      initialDelaySeconds: 3600\n+      timeoutSeconds: 3600\n+    template:\n+      kafkaContainer:\n+        env:\n+        - name: KAFKA_DEBUG\n+          value: \"y\"\n+        - name: DEBUG_SUSPEND_FLAG\n+          value: \"y\"\n+        - name: JAVA_DEBUG_PORT\n+          value: \"5005\"\n+\n+```\n+\n+We also need to open the specified port (5005 in this case) to be reachable from your host machine:\n+\n+    kubectl port-forward my-cluster-kafka-0 5005\n+\n+If you want to map to a different local port use the LOCAL:REMOTE format, for example:\n+\n+    kubectl port-forward my-cluster-kafka-0 8787:5005\n+\n+All you now have to do is deploy the new Kafka cluster definition, configure remote debugging in your favourite IDE, telling it to connect to localhost:5005, and start your debug session.\n+\n+With `DEBUG_SUSPEND_FLAG` set to 'y', the Kafka Broker process will wait during startup for remote degugger (IDE) to connect before continuing with JVM start up.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dd446e50319cd6102a42fc1b347d260cbab8678"}, "originalPosition": 102}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af53c972f3146bb8a4b30801c6970f2989739e8c", "author": {"user": {"login": "mstruk", "name": "Marko Strukelj"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/af53c972f3146bb8a4b30801c6970f2989739e8c", "committedDate": "2020-09-09T09:22:35Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Tom Bentley <tombentley@users.noreply.github.com>\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0ODIzNDYx", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3618#pullrequestreview-484823461", "createdAt": "2020-09-09T09:23:26Z", "commit": {"oid": "9dd446e50319cd6102a42fc1b347d260cbab8678"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwOToyMzoyN1rOHO-rYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwOToyMzoyN1rOHO-rYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ2OTAyNg==", "bodyText": "Is there any option I can set to make this wait longer?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3618#discussion_r485469026", "createdAt": "2020-09-09T09:23:27Z", "author": {"login": "michalxo"}, "path": "development-docs/DEBUGGING.md", "diffHunk": "@@ -0,0 +1,188 @@\n+# Debugging Guide for Strimzi\n+\n+This guide primarily explains how to perform remote debugging of code deployed to Kubernetes with strimzi/operator image, and the strimzi/kafka images.\n+\n+<!-- TOC depthFrom:2 -->\n+\n+- [Activating remote debugging using the agent](#activating-remote-debugging-using-the-agent)\n+- [Remote debugging the Strimzi Cluster Operator](#remote-debugging-the-strimzi-cluster-operator)\n+- [Remote debugging the Kafka Broker](#remote-debugging-the-kafka-broker)\n+- [Using the IntelliJ IDEA for debugging](#using-the-intellij-idea-for-debugging)\n+  - [Setting the breakpoints](#setting-the-breakpoints)\n+  - [Evaluating expressions when suspended](#evaluating-expressions-when-suspended)\n+  - [Resolving code version mismatches](#resolving-code-version-mismatches)\n+\n+<!-- /TOC -->\n+\n+## Activating remote debugging using the agent\n+\n+Java runtime (the JVM) comes with an agent that provides support for remote debugging. Using you Java IDE you can connect to a remote process over a TCP connection, and perform debugging actions like setting breakpoints, suspending threads, gathering stack and heap info, and evaluating arbitrary java code inside the running JVM.\n+\n+In order to activate remote debugging the java process needs to be run with an additional argument like the following:\n+\n+    -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005\n+\n+This starts a TCP server on localhost using the specified port (5005 in this case). Connection is only possible from the localhost.\n+Because we used `suspend=y` the start up of the JVM will stall, and wait for the debug client to connect.\n+All the popular Java IDEs support remote debugging.\n+\n+\n+## Remote debugging the Strimzi Cluster Operator\n+\n+Strimzi Cluster Operator is installed through Deployment definition in `install/cluster-operator/060-Deployment-strimzi-cluster-operator.yaml`.\n+\n+We can enable remote debugging by adding the `JAVA_OPTS` environment variable to `strimzi-cluster-operator` container in this file:\n+\n+          env:\n+            ...\n+            - name: JAVA_OPTS\n+              value: \"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005\"\n+\n+\n+Let's also increase the livenessProbe timeout:\n+\n+          livenessProbe:\n+            initialDelaySeconds: 3600\n+            timeoutSeconds: 3600\n+\n+Apply the modified file:\n+\n+    kubectl apply -f install/cluster-operator/060-Deployment-strimzi-cluster-operator.yaml\n+\n+We also need to open the port for localhost access:\n+\n+    kubectl port-forward $(oc get pod | grep strimzi-cluster-operator | awk '{printf $1}') 5006:5005\n+\n+Start tailing the operator pod:\n+\n+    oc logs $(oc get pod | grep strimzi-cluster-operator | awk '{printf $1}') -f \n+\n+You can now start the remote debug session from your IDE.\n+\n+\n+## Remote debugging the Kafka Broker\n+\n+Kafka Broker pods are defined through 'my-cluster-kafka' StatefulSet which is created by Strimzi Kafka Operator.\n+\n+In order to activate the remote debugging we need to get the Kafka Broker to run with remote debugging agent activated.\n+\n+This can be achieved by adding the following to your Kafka CR cluster definition:\n+\n+```\n+\n+spec:\n+  kafka:\n+    ...\n+\n+    livenessProbe:\n+      initialDelaySeconds: 3600\n+      timeoutSeconds: 3600\n+    template:\n+      kafkaContainer:\n+        env:\n+        - name: KAFKA_DEBUG\n+          value: \"y\"\n+        - name: DEBUG_SUSPEND_FLAG\n+          value: \"y\"\n+        - name: JAVA_DEBUG_PORT\n+          value: \"5005\"\n+\n+```\n+\n+We also need to open the specified port (5005 in this case) to be reachable from your host machine:\n+\n+    kubectl port-forward my-cluster-kafka-0 5005\n+\n+If you want to map to a different local port use the LOCAL:REMOTE format, for example:\n+\n+    kubectl port-forward my-cluster-kafka-0 8787:5005\n+\n+All you now have to do is deploy the new Kafka cluster definition, configure remote debugging in your favourite IDE, telling it to connect to localhost:5005, and start your debug session.\n+\n+With `DEBUG_SUSPEND_FLAG` set to 'y', the Kafka Broker process will wait during startup for remote degugger (IDE) to connect before continuing with JVM start up.\n+\n+In Kafka CR we have adjusted the probes to prevent Kubernetes from killing the broker whose execution is suspended due to a breakpoint.\n+\n+Before remotely connecting with IDE you'll want to start tailing the `my-cluster-kafka-0` broker pod:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+You should see the following as the last line:\n+\n+    Listening for transport dt_socket at address: 5005\n+\n+You can now start a remote debug session from your IDE.\n+\n+Note: Apache Kafka is written in a way that it detects stalled request processing threads and may exit the JVM that appears to have stalled.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dd446e50319cd6102a42fc1b347d260cbab8678"}, "originalPosition": 116}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bff7ff78acaca114f5a7a2ac6a527eaf31da42a", "author": {"user": {"login": "mstruk", "name": "Marko Strukelj"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3bff7ff78acaca114f5a7a2ac6a527eaf31da42a", "committedDate": "2020-09-09T09:26:40Z", "message": "Minor changes\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e1e6be47888335586d07aea59449fd838a318b7d", "author": {"user": {"login": "mstruk", "name": "Marko Strukelj"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/e1e6be47888335586d07aea59449fd838a318b7d", "committedDate": "2020-09-09T09:21:21Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Tom Bentley <tombentley@users.noreply.github.com>"}, "afterCommit": {"oid": "3bff7ff78acaca114f5a7a2ac6a527eaf31da42a", "author": {"user": {"login": "mstruk", "name": "Marko Strukelj"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3bff7ff78acaca114f5a7a2ac6a527eaf31da42a", "committedDate": "2020-09-09T09:26:40Z", "message": "Minor changes\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d63dbc29b24d911ba4355576887b351cb5439519", "author": {"user": {"login": "mstruk", "name": "Marko Strukelj"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d63dbc29b24d911ba4355576887b351cb5439519", "committedDate": "2020-09-09T09:39:11Z", "message": "Typo\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0OTE0OTI5", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3618#pullrequestreview-484914929", "createdAt": "2020-09-09T11:33:16Z", "commit": {"oid": "d63dbc29b24d911ba4355576887b351cb5439519"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0OTQwNDY4", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3618#pullrequestreview-484940468", "createdAt": "2020-09-09T12:08:05Z", "commit": {"oid": "d63dbc29b24d911ba4355576887b351cb5439519"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 951, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}