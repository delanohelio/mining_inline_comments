{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0OTE4MzY1", "number": 2655, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzoxNDo1N1rODl4B7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzoxNDo1N1rODl4B7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDQxOTAyOnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/model/AbstractConfigurationTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzoxNDo1N1rOFzAspg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzo1MjowMlrOF21EFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzMzEyNg==", "bodyText": "Hi John, from a test debugging perspective, the below might be a little bit cleaner:\nassertThat(kc.asOrderedProperties().asMap(), hasEntry(\"ssl.cipher.suites\", \"cipher1,cipher2,cipher3\"));\n\nWhere you statically import hasEntry with: import static org.hamcrest.Matchers.hasEntry;", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2655#discussion_r389033126", "createdAt": "2020-03-06T17:14:57Z", "author": {"login": "samuel-hawker"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/model/AbstractConfigurationTest.java", "diffHunk": "@@ -238,6 +238,16 @@ public void testKafkaZookeeperTimeout() {\n         assertThat(kc.asOrderedProperties().asMap().get(\"zookeeper.connection.timeout\"), is(nullValue()));\n     }\n \n+    @Test\n+    public void testKafkaCipherSuiteOverride() {\n+        Map<String, Object> conf = new HashMap<>();\n+        conf.put(\"ssl.cipher.suites\", \"cipher1,cipher2,cipher3\"); // valid\n+\n+        KafkaConfiguration kc = new KafkaConfiguration(conf.entrySet());\n+\n+        assertThat(kc.asOrderedProperties().asMap().get(\"ssl.cipher.suites\"), is(\"cipher1,cipher2,cipher3\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4eeac29c2fe85ffacc06b688af0774d0356d345"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAzNTA4MA==", "bodyText": "Hi Sam, this code is consistent with the other tests on which is was based, so I would suggest this change be left as is and then if its desirable to modify them, we do all of them together in another PR. Just my thoughts on that one...", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2655#discussion_r393035080", "createdAt": "2020-03-16T13:49:34Z", "author": {"login": "beavenj"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/model/AbstractConfigurationTest.java", "diffHunk": "@@ -238,6 +238,16 @@ public void testKafkaZookeeperTimeout() {\n         assertThat(kc.asOrderedProperties().asMap().get(\"zookeeper.connection.timeout\"), is(nullValue()));\n     }\n \n+    @Test\n+    public void testKafkaCipherSuiteOverride() {\n+        Map<String, Object> conf = new HashMap<>();\n+        conf.put(\"ssl.cipher.suites\", \"cipher1,cipher2,cipher3\"); // valid\n+\n+        KafkaConfiguration kc = new KafkaConfiguration(conf.entrySet());\n+\n+        assertThat(kc.asOrderedProperties().asMap().get(\"ssl.cipher.suites\"), is(\"cipher1,cipher2,cipher3\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzMzEyNg=="}, "originalCommit": {"oid": "c4eeac29c2fe85ffacc06b688af0774d0356d345"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAzNjgyMw==", "bodyText": "Perfectly reasonable John!", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2655#discussion_r393036823", "createdAt": "2020-03-16T13:52:02Z", "author": {"login": "samuel-hawker"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/model/AbstractConfigurationTest.java", "diffHunk": "@@ -238,6 +238,16 @@ public void testKafkaZookeeperTimeout() {\n         assertThat(kc.asOrderedProperties().asMap().get(\"zookeeper.connection.timeout\"), is(nullValue()));\n     }\n \n+    @Test\n+    public void testKafkaCipherSuiteOverride() {\n+        Map<String, Object> conf = new HashMap<>();\n+        conf.put(\"ssl.cipher.suites\", \"cipher1,cipher2,cipher3\"); // valid\n+\n+        KafkaConfiguration kc = new KafkaConfiguration(conf.entrySet());\n+\n+        assertThat(kc.asOrderedProperties().asMap().get(\"ssl.cipher.suites\"), is(\"cipher1,cipher2,cipher3\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzMzEyNg=="}, "originalCommit": {"oid": "c4eeac29c2fe85ffacc06b688af0774d0356d345"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 534, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}