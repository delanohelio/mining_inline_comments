{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyNTAwMzIw", "number": 4128, "title": "TO recreation", "bodyText": "Type of change\n\nBugfix\n\nDescription\nAnother possible solution for #4086 which removes the map entirely.\nChecklist\nPlease go through this checklist and make sure all applicable tasks have been done\n\n Write tests\n Make sure all tests pass\n Update documentation\n Check RBAC rights for Kubernetes / OpenShift roles\n Try your changes from Pod inside your Kubernetes and OpenShift cluster, not just locally\n Reference relevant issue(s) and close them after merging\n Update CHANGELOG.md\n Supply screenshots for visual changes, such as Grafana dashboards", "createdAt": "2020-12-18T11:59:24Z", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4128", "merged": true, "mergeCommit": {"oid": "24658cbd4772ed6c39435c126ce985ab01e1ec3a"}, "closed": true, "closedAt": "2021-01-08T14:41:57Z", "author": {"login": "tombentley"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdnXHV1gH2gAyNTQyNTAwMzIwOjI1NjlhY2ZjMTllNTUxZWE5MjAzNTNiYTJhOTc0NTMwNzhjNzgwMzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABduJwyPgH2gAyNTQyNTAwMzIwOjMyYTNhYTRiYWFiYjRkMGY4ZDIyYmQyYjA2MzIwNzkxZTBkMDA3MjU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2569acfc19e551ea920353ba2a97453078c78030", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/2569acfc19e551ea920353ba2a97453078c78030", "committedDate": "2020-12-18T12:16:07Z", "message": "Add ST\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3eb948f3333896866755eac3eb503f31b351e435", "author": {"user": {"login": "sknot-rh", "name": "Stanislav Knot"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3eb948f3333896866755eac3eb503f31b351e435", "committedDate": "2020-12-18T12:16:07Z", "message": "Patch topic recreation\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5cbd59a2a6387a2575df377db5b7e04f0737773", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/f5cbd59a2a6387a2575df377db5b7e04f0737773", "committedDate": "2020-12-18T12:16:07Z", "message": "Fix #4086\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd079b2c775b49c9ee8499a7c414248e68d89b3d", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/dd079b2c775b49c9ee8499a7c414248e68d89b3d", "committedDate": "2020-12-18T12:16:07Z", "message": "Improve test\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1OTUyODY1", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4128#pullrequestreview-555952865", "createdAt": "2020-12-19T16:30:13Z", "commit": {"oid": "608b96b9bcb3a4b93b91181b6828525373304b1d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MTc4MTU0", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4128#pullrequestreview-556178154", "createdAt": "2020-12-21T07:33:05Z", "commit": {"oid": "608b96b9bcb3a4b93b91181b6828525373304b1d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNzozMzowNVrOIJOwWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNzozMzowNVrOIJOwWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0OTg1MA==", "bodyText": "why the need for this check on ERROR action?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4128#discussion_r546549850", "createdAt": "2020-12-21T07:33:05Z", "author": {"login": "ppatierno"}, "path": "topic-operator/src/main/java/io/strimzi/operator/topic/K8sTopicWatcher.java", "diffHunk": "@@ -44,23 +45,24 @@ public void eventReceived(Action action, KafkaTopic kafkaTopic) {\n             }\n             LOGGER.info(\"{}: event {} on resource {} generation={}, labels={}\", logContext, action, name,\n                     metadata.getGeneration(), labels);\n-            Handler<AsyncResult<Void>> resultHandler = ar -> {\n-                if (ar.succeeded()) {\n-                    LOGGER.info(\"{}: Success processing event {} on resource {} with labels {}\", logContext, action, name, labels);\n-                } else {\n-                    String message;\n-                    if (ar.cause() instanceof InvalidTopicException) {\n-                        message = kind + \" \" + name + \" has an invalid spec section: \" + ar.cause().getMessage();\n-                        LOGGER.error(\"{}\", message);\n-\n+            if (!action.equals(Action.ERROR)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608b96b9bcb3a4b93b91181b6828525373304b1d"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MTc4MzI3", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4128#pullrequestreview-556178327", "createdAt": "2020-12-21T07:33:32Z", "commit": {"oid": "608b96b9bcb3a4b93b91181b6828525373304b1d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ea1e97472ead25c55700333466cb3e424f246ba", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/8ea1e97472ead25c55700333466cb3e424f246ba", "committedDate": "2020-12-21T14:30:39Z", "message": "wip\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwODI5ODIz", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4128#pullrequestreview-560829823", "createdAt": "2021-01-04T07:51:28Z", "commit": {"oid": "608b96b9bcb3a4b93b91181b6828525373304b1d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fda87369c512728e7b1f663d269333ca5f33cc6", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3fda87369c512728e7b1f663d269333ca5f33cc6", "committedDate": "2021-01-07T14:51:17Z", "message": "ST\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "608b96b9bcb3a4b93b91181b6828525373304b1d", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/608b96b9bcb3a4b93b91181b6828525373304b1d", "committedDate": "2020-12-18T11:07:48Z", "message": "Fix #4086\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}, "afterCommit": {"oid": "3fda87369c512728e7b1f663d269333ca5f33cc6", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3fda87369c512728e7b1f663d269333ca5f33cc6", "committedDate": "2021-01-07T14:51:17Z", "message": "ST\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb4baaa62c9e3943cf4e2114eff5ee7486ce29f9", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/cb4baaa62c9e3943cf4e2114eff5ee7486ce29f9", "committedDate": "2021-01-07T17:45:38Z", "message": "checkstyle\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0MTA4NTkx", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4128#pullrequestreview-564108591", "createdAt": "2021-01-08T09:17:17Z", "commit": {"oid": "cb4baaa62c9e3943cf4e2114eff5ee7486ce29f9"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwOToxNzoxN1rOIQK-eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwOToxOTo0N1rOIQLDHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzgyNzk2MA==", "bodyText": "It's intended to have it in root?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4128#discussion_r553827960", "createdAt": "2021-01-08T09:17:17Z", "author": {"login": "Frawless"}, "path": "kt.yaml", "diffHunk": "@@ -0,0 +1,13 @@\n+apiVersion: kafka.strimzi.io/v1beta1\n+kind: KafkaTopic\n+metadata:\n+  labels:\n+    strimzi.io/cluster: my-cluster\n+  name: vr-test\n+spec:\n+  config:\n+    cleanup.policy: delete\n+    compression.type: zstd\n+    retention.ms: 432000000\n+  partitions: 3\n+  replicas: 3", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb4baaa62c9e3943cf4e2114eff5ee7486ce29f9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzgyODQ0OQ==", "bodyText": "indent", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4128#discussion_r553828449", "createdAt": "2021-01-08T09:18:15Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/topic/TopicST.java", "diffHunk": "@@ -165,6 +167,88 @@ void testCreateTopicViaAdminClient() throws ExecutionException, InterruptedExcep\n         assertThat(kafkaTopic.getSpec().getReplicas(), is(1));\n     }\n \n+    @Tag(NODEPORT_SUPPORTED)\n+    @Test\n+    void testCreateDeleteCreate() throws InterruptedException {\n+        String clusterName = CLUSTER_NAME + \"-sdkvnsdkjn\";\n+\n+        KafkaResource.kafkaEphemeral(clusterName, 3, 3)\n+                .editSpec()\n+                    .editKafka()\n+                        .withNewListeners()\n+                            .addNewGenericKafkaListener()\n+                                .withName(Constants.EXTERNAL_LISTENER_DEFAULT_NAME)\n+                                .withPort(9094)\n+                                .withType(KafkaListenerType.NODEPORT)\n+                                .withTls(false)\n+                            .endGenericKafkaListener()\n+                        .endListeners()\n+                    .endKafka()\n+                    .editEntityOperator()\n+                        .editTopicOperator()\n+                            .withReconciliationIntervalSeconds(120)\n+                        .endTopicOperator()\n+                    .endEntityOperator()\n+                .endSpec()\n+                .done();\n+\n+        Properties properties = new Properties();\n+\n+        properties.setProperty(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, KafkaResource.kafkaClient().inNamespace(NAMESPACE)\n+                .withName(clusterName).get().getStatus().getListeners().stream()\n+                .filter(listener -> listener.getType().equals(Constants.EXTERNAL_LISTENER_DEFAULT_NAME))\n+                .findFirst()\n+                .orElseThrow(RuntimeException::new)\n+                .getBootstrapServers());\n+\n+        try (AdminClient adminClient = AdminClient.create(properties)) {\n+\n+            String topicName = \"topic-create-delete-create\";\n+\n+            KafkaTopicResource.topic(clusterName, topicName)\n+                    .editSpec()\n+                    .withReplicas(3)\n+                    .endSpec()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb4baaa62c9e3943cf4e2114eff5ee7486ce29f9"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzgyODUwMw==", "bodyText": "indent", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4128#discussion_r553828503", "createdAt": "2021-01-08T09:18:22Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/topic/TopicST.java", "diffHunk": "@@ -165,6 +167,88 @@ void testCreateTopicViaAdminClient() throws ExecutionException, InterruptedExcep\n         assertThat(kafkaTopic.getSpec().getReplicas(), is(1));\n     }\n \n+    @Tag(NODEPORT_SUPPORTED)\n+    @Test\n+    void testCreateDeleteCreate() throws InterruptedException {\n+        String clusterName = CLUSTER_NAME + \"-sdkvnsdkjn\";\n+\n+        KafkaResource.kafkaEphemeral(clusterName, 3, 3)\n+                .editSpec()\n+                    .editKafka()\n+                        .withNewListeners()\n+                            .addNewGenericKafkaListener()\n+                                .withName(Constants.EXTERNAL_LISTENER_DEFAULT_NAME)\n+                                .withPort(9094)\n+                                .withType(KafkaListenerType.NODEPORT)\n+                                .withTls(false)\n+                            .endGenericKafkaListener()\n+                        .endListeners()\n+                    .endKafka()\n+                    .editEntityOperator()\n+                        .editTopicOperator()\n+                            .withReconciliationIntervalSeconds(120)\n+                        .endTopicOperator()\n+                    .endEntityOperator()\n+                .endSpec()\n+                .done();\n+\n+        Properties properties = new Properties();\n+\n+        properties.setProperty(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, KafkaResource.kafkaClient().inNamespace(NAMESPACE)\n+                .withName(clusterName).get().getStatus().getListeners().stream()\n+                .filter(listener -> listener.getType().equals(Constants.EXTERNAL_LISTENER_DEFAULT_NAME))\n+                .findFirst()\n+                .orElseThrow(RuntimeException::new)\n+                .getBootstrapServers());\n+\n+        try (AdminClient adminClient = AdminClient.create(properties)) {\n+\n+            String topicName = \"topic-create-delete-create\";\n+\n+            KafkaTopicResource.topic(clusterName, topicName)\n+                    .editSpec()\n+                    .withReplicas(3)\n+                    .endSpec()\n+                    .done();\n+            KafkaTopicUtils.waitForKafkaTopicReady(topicName);\n+\n+            adminClient.describeTopics(singletonList(topicName)).values().get(topicName);\n+\n+            for (int i = 0; i < 10; i++) {\n+                Thread.sleep(2_000);\n+                LOGGER.info(\"Iteration {}: Deleting {}\", i, topicName);\n+                cmdKubeClient().deleteByName(KafkaTopic.RESOURCE_KIND, topicName);\n+                KafkaTopicUtils.waitForKafkaTopicDeletion(topicName);\n+                TestUtils.waitFor(\"Deletion of topic \" + topicName, 1000, 15_000, () -> {\n+                    try {\n+                        return !adminClient.listTopics().names().get().contains(topicName);\n+                    } catch (ExecutionException | InterruptedException e) {\n+                        return false;\n+                    }\n+                });\n+                Thread.sleep(2_000);\n+                long t0 = System.currentTimeMillis();\n+                LOGGER.info(\"Iteration {}: Recreating {}\", i, topicName);\n+                KafkaTopicResource.topic(clusterName, topicName)\n+                        .editSpec()\n+                        .withReplicas(3)\n+                        .endSpec()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb4baaa62c9e3943cf4e2114eff5ee7486ce29f9"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzgyOTE0OA==", "bodyText": "I don't think this is needed. In case the topic is not recreated during the timeout period specified in waitFor above, the test will fail anyway. So in case, you will specify the timeout for 10s, it should be almost the same and the code will be shorter. Unless there is something I don't see.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4128#discussion_r553829148", "createdAt": "2021-01-08T09:19:47Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/topic/TopicST.java", "diffHunk": "@@ -165,6 +167,88 @@ void testCreateTopicViaAdminClient() throws ExecutionException, InterruptedExcep\n         assertThat(kafkaTopic.getSpec().getReplicas(), is(1));\n     }\n \n+    @Tag(NODEPORT_SUPPORTED)\n+    @Test\n+    void testCreateDeleteCreate() throws InterruptedException {\n+        String clusterName = CLUSTER_NAME + \"-sdkvnsdkjn\";\n+\n+        KafkaResource.kafkaEphemeral(clusterName, 3, 3)\n+                .editSpec()\n+                    .editKafka()\n+                        .withNewListeners()\n+                            .addNewGenericKafkaListener()\n+                                .withName(Constants.EXTERNAL_LISTENER_DEFAULT_NAME)\n+                                .withPort(9094)\n+                                .withType(KafkaListenerType.NODEPORT)\n+                                .withTls(false)\n+                            .endGenericKafkaListener()\n+                        .endListeners()\n+                    .endKafka()\n+                    .editEntityOperator()\n+                        .editTopicOperator()\n+                            .withReconciliationIntervalSeconds(120)\n+                        .endTopicOperator()\n+                    .endEntityOperator()\n+                .endSpec()\n+                .done();\n+\n+        Properties properties = new Properties();\n+\n+        properties.setProperty(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, KafkaResource.kafkaClient().inNamespace(NAMESPACE)\n+                .withName(clusterName).get().getStatus().getListeners().stream()\n+                .filter(listener -> listener.getType().equals(Constants.EXTERNAL_LISTENER_DEFAULT_NAME))\n+                .findFirst()\n+                .orElseThrow(RuntimeException::new)\n+                .getBootstrapServers());\n+\n+        try (AdminClient adminClient = AdminClient.create(properties)) {\n+\n+            String topicName = \"topic-create-delete-create\";\n+\n+            KafkaTopicResource.topic(clusterName, topicName)\n+                    .editSpec()\n+                    .withReplicas(3)\n+                    .endSpec()\n+                    .done();\n+            KafkaTopicUtils.waitForKafkaTopicReady(topicName);\n+\n+            adminClient.describeTopics(singletonList(topicName)).values().get(topicName);\n+\n+            for (int i = 0; i < 10; i++) {\n+                Thread.sleep(2_000);\n+                LOGGER.info(\"Iteration {}: Deleting {}\", i, topicName);\n+                cmdKubeClient().deleteByName(KafkaTopic.RESOURCE_KIND, topicName);\n+                KafkaTopicUtils.waitForKafkaTopicDeletion(topicName);\n+                TestUtils.waitFor(\"Deletion of topic \" + topicName, 1000, 15_000, () -> {\n+                    try {\n+                        return !adminClient.listTopics().names().get().contains(topicName);\n+                    } catch (ExecutionException | InterruptedException e) {\n+                        return false;\n+                    }\n+                });\n+                Thread.sleep(2_000);\n+                long t0 = System.currentTimeMillis();\n+                LOGGER.info(\"Iteration {}: Recreating {}\", i, topicName);\n+                KafkaTopicResource.topic(clusterName, topicName)\n+                        .editSpec()\n+                        .withReplicas(3)\n+                        .endSpec()\n+                        .done();\n+                ResourceManager.waitForResourceStatus(KafkaTopicResource.kafkaTopicClient(), \"KafkaTopic\", NAMESPACE, topicName, Ready, 15_000);\n+                TestUtils.waitFor(\"Recreation of topic \" + topicName, 1000, 2_000, () -> {\n+                    try {\n+                        return adminClient.listTopics().names().get().contains(topicName);\n+                    } catch (ExecutionException | InterruptedException e) {\n+                        return false;\n+                    }\n+                });\n+                if (System.currentTimeMillis() - t0 > 10_000) {\n+                    fail(\"Took too long to recreate\");\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb4baaa62c9e3943cf4e2114eff5ee7486ce29f9"}, "originalPosition": 93}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c205efacab97d7eb27d3d6daa24323139826eb38", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c205efacab97d7eb27d3d6daa24323139826eb38", "committedDate": "2021-01-08T09:31:14Z", "message": "Review comment\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "947655b1cd5618353743c0bb26594567d7ee6bd9", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/947655b1cd5618353743c0bb26594567d7ee6bd9", "committedDate": "2021-01-08T09:42:46Z", "message": "Review comment\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0MTY1Mjk0", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4128#pullrequestreview-564165294", "createdAt": "2021-01-08T10:44:08Z", "commit": {"oid": "947655b1cd5618353743c0bb26594567d7ee6bd9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c1708cf52844ba2bb978fe1081a928fe920afcd", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3c1708cf52844ba2bb978fe1081a928fe920afcd", "committedDate": "2021-01-08T14:39:21Z", "message": "Tidy up logging\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32a3aa4baabb4d0f8d22bd2b06320791e0d00725", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/32a3aa4baabb4d0f8d22bd2b06320791e0d00725", "committedDate": "2021-01-08T14:40:11Z", "message": "fixup\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 766, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}