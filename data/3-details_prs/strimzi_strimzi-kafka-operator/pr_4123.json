{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxNjc1NDUy", "number": 4123, "title": "Kafka cluster Id in status", "bodyText": "Type of change\n\nEnhancement / new feature\n\nDescription\nAs motivated in #4028, this PR introduces the Kafka cluster Id in the status of a Kafka CRD.\nThe advantage of the Kafka cluster Id, as opposed to, say, URLs or bootstrap servers, is that all observers can agree on the same id for a given Kafka cluster, independently of how they access it, for example from within or outside the Kubernetes cluster.\nHaving the cluster Id available in the status provides the information to any entity that can list the CR, without requiring higher privileges to access Zookeeper or the Kafka Admin API.\nChecklist\nI'm unsure about some of these. The test doesn't do much beyond checking that the cluster Id being set in the status is actually what one gets out of it. Suggestions are welcomed. I have satisfactorily run the patched operator on Minikube. If there is documentation I would need to change I'll be glad to get a pointer.\n\n Write tests\n Make sure all tests pass\n Update documentation\n Check RBAC rights for Kubernetes / OpenShift roles\n Try your changes from Pod inside your Kubernetes and OpenShift cluster, not just locally\n Reference relevant issue(s) and close them after merging\n Update CHANGELOG.md", "createdAt": "2020-12-17T07:48:26Z", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123", "merged": true, "mergeCommit": {"oid": "9b3dd68aaab46b208045ba376c5808d243aa40ef"}, "closed": true, "closedAt": "2021-01-05T18:54:17Z", "author": {"login": "lga-zurich"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdm-wXbABqjQxMjM3NTU1MTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdtNZyzAFqTU2MTkzMTk4MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "48998a6906aaa441a2cff1ca3284aaa5607176d6", "author": {"user": {"login": "lga-zurich", "name": "Luis Garc\u00e9s-Erice"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/48998a6906aaa441a2cff1ca3284aaa5607176d6", "committedDate": "2020-12-17T07:35:42Z", "message": "Kafka cluster Id in status"}, "afterCommit": {"oid": "15f6cacc2728f52892caa6a3d22c3a18204c43f4", "author": {"user": {"login": "lga-zurich", "name": "Luis Garc\u00e9s-Erice"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/15f6cacc2728f52892caa6a3d22c3a18204c43f4", "committedDate": "2020-12-17T07:50:39Z", "message": "Kafka cluster Id in status\n\nSigned-off-by: Luis Garc\u00e9s-Erice <lga@zurich.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0ODc1MDI2", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#pullrequestreview-554875026", "createdAt": "2020-12-17T18:28:02Z", "commit": {"oid": "15f6cacc2728f52892caa6a3d22c3a18204c43f4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODoyODowMlrOIIDA2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODozNjo0NlrOIIDVzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMwODg4OA==", "bodyText": "You should be able to use the bootstrap service here. That should save you from constructing the name like this.\nThere is a class KafkaResources which has method bootstrapServiceName which should be able to give it to you. Or you can add to the KafkaCluster class some new method similar to podDnsName (since oyu need to use it with the namespace).\nI do not think there is any advantage here in using the pod names => it just adds possible complications with DNS changes.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#discussion_r545308888", "createdAt": "2020-12-17T18:28:02Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -1874,6 +1879,32 @@ String zkConnectionString(int connectToReplicas, Function<Integer, String> zkNod\n             return withVoid(fut);\n         }\n \n+        /**\n+         * Get the cluster Id of the Kafka cluster\n+         * \n+         * @return\n+         */\n+        Future<ReconciliationState> kafkaGetClusterId() {\n+            String clusterId = null;\n+            log.debug(\"{}: Attempt to get clusterId\", reconciliation);\n+            List<String> podNames = IntStream.range(0, kafkaCluster.getReplicas()).boxed().collect(Collectors.toList()).stream().map(podId -> KafkaCluster.kafkaPodName(this.name, podId)).collect(Collectors.toList());\n+            try {\n+                String bootstrapHostnames = podNames.stream().map(podName -> KafkaCluster.podDnsName(this.namespace, this.name, podName) + \":\" + KafkaCluster.REPLICATION_PORT).collect(Collectors.joining(\",\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15f6cacc2728f52892caa6a3d22c3a18204c43f4"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMwOTIzMQ==", "bodyText": "Is oldCoSecret really the right one to use? If this is old, it sounds like sometimes it might not be valid anymore.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#discussion_r545309231", "createdAt": "2020-12-17T18:28:36Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -1874,6 +1879,32 @@ String zkConnectionString(int connectToReplicas, Function<Integer, String> zkNod\n             return withVoid(fut);\n         }\n \n+        /**\n+         * Get the cluster Id of the Kafka cluster\n+         * \n+         * @return\n+         */\n+        Future<ReconciliationState> kafkaGetClusterId() {\n+            String clusterId = null;\n+            log.debug(\"{}: Attempt to get clusterId\", reconciliation);\n+            List<String> podNames = IntStream.range(0, kafkaCluster.getReplicas()).boxed().collect(Collectors.toList()).stream().map(podId -> KafkaCluster.kafkaPodName(this.name, podId)).collect(Collectors.toList());\n+            try {\n+                String bootstrapHostnames = podNames.stream().map(podName -> KafkaCluster.podDnsName(this.namespace, this.name, podName) + \":\" + KafkaCluster.REPLICATION_PORT).collect(Collectors.joining(\",\"));\n+                log.debug(\"{}: Creating AdminClient for clusterId using {}\", reconciliation, bootstrapHostnames);\n+                Admin kafkaAdmin = adminClientProvider.createAdminClient(bootstrapHostnames, this.clusterCa.caCertSecret(), this.oldCoSecret, \"cluster-operator\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15f6cacc2728f52892caa6a3d22c3a18204c43f4"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMDYxMg==", "bodyText": "What are the situations when this happens? In general:\n\nIs it intentional to continue as success when it fails instead of failing the reconciliation?\nShould the error really be only on debug level?\n\nBoth of these IMHO suggest that this is expected to fail regularly while the failure does not indicate any problems. So I would like to understand why.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#discussion_r545310612", "createdAt": "2020-12-17T18:30:46Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -1874,6 +1879,32 @@ String zkConnectionString(int connectToReplicas, Function<Integer, String> zkNod\n             return withVoid(fut);\n         }\n \n+        /**\n+         * Get the cluster Id of the Kafka cluster\n+         * \n+         * @return\n+         */\n+        Future<ReconciliationState> kafkaGetClusterId() {\n+            String clusterId = null;\n+            log.debug(\"{}: Attempt to get clusterId\", reconciliation);\n+            List<String> podNames = IntStream.range(0, kafkaCluster.getReplicas()).boxed().collect(Collectors.toList()).stream().map(podId -> KafkaCluster.kafkaPodName(this.name, podId)).collect(Collectors.toList());\n+            try {\n+                String bootstrapHostnames = podNames.stream().map(podName -> KafkaCluster.podDnsName(this.namespace, this.name, podName) + \":\" + KafkaCluster.REPLICATION_PORT).collect(Collectors.joining(\",\"));\n+                log.debug(\"{}: Creating AdminClient for clusterId using {}\", reconciliation, bootstrapHostnames);\n+                Admin kafkaAdmin = adminClientProvider.createAdminClient(bootstrapHostnames, this.clusterCa.caCertSecret(), this.oldCoSecret, \"cluster-operator\");\n+                clusterId = kafkaAdmin.describeCluster().clusterId().get();\n+            } catch (KafkaException e) {\n+                log.debug(\"{}: Kafka exception getting clusterId {}\", reconciliation, e.getMessage());\n+            } catch (Exception e) {\n+                log.debug(\"{}: Exception getting clusterId {}\", reconciliation, e.getMessage());\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15f6cacc2728f52892caa6a3d22c3a18204c43f4"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMTYzMQ==", "bodyText": "I'm not too familiar with the Kafka AdminClient API. But the get() IMHO usually suggests it is a blocking call. So it should probably be wrapped into execute blocking or handled asynchronously?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#discussion_r545311631", "createdAt": "2020-12-17T18:32:22Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -1874,6 +1879,32 @@ String zkConnectionString(int connectToReplicas, Function<Integer, String> zkNod\n             return withVoid(fut);\n         }\n \n+        /**\n+         * Get the cluster Id of the Kafka cluster\n+         * \n+         * @return\n+         */\n+        Future<ReconciliationState> kafkaGetClusterId() {\n+            String clusterId = null;\n+            log.debug(\"{}: Attempt to get clusterId\", reconciliation);\n+            List<String> podNames = IntStream.range(0, kafkaCluster.getReplicas()).boxed().collect(Collectors.toList()).stream().map(podId -> KafkaCluster.kafkaPodName(this.name, podId)).collect(Collectors.toList());\n+            try {\n+                String bootstrapHostnames = podNames.stream().map(podName -> KafkaCluster.podDnsName(this.namespace, this.name, podName) + \":\" + KafkaCluster.REPLICATION_PORT).collect(Collectors.joining(\",\"));\n+                log.debug(\"{}: Creating AdminClient for clusterId using {}\", reconciliation, bootstrapHostnames);\n+                Admin kafkaAdmin = adminClientProvider.createAdminClient(bootstrapHostnames, this.clusterCa.caCertSecret(), this.oldCoSecret, \"cluster-operator\");\n+                clusterId = kafkaAdmin.describeCluster().clusterId().get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15f6cacc2728f52892caa6a3d22c3a18204c43f4"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMzc3NA==", "bodyText": "What kind of exception are we expecting here? I think it would be good to use something more specific exception type if possible.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#discussion_r545313774", "createdAt": "2020-12-17T18:35:54Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -1874,6 +1879,32 @@ String zkConnectionString(int connectToReplicas, Function<Integer, String> zkNod\n             return withVoid(fut);\n         }\n \n+        /**\n+         * Get the cluster Id of the Kafka cluster\n+         * \n+         * @return\n+         */\n+        Future<ReconciliationState> kafkaGetClusterId() {\n+            String clusterId = null;\n+            log.debug(\"{}: Attempt to get clusterId\", reconciliation);\n+            List<String> podNames = IntStream.range(0, kafkaCluster.getReplicas()).boxed().collect(Collectors.toList()).stream().map(podId -> KafkaCluster.kafkaPodName(this.name, podId)).collect(Collectors.toList());\n+            try {\n+                String bootstrapHostnames = podNames.stream().map(podName -> KafkaCluster.podDnsName(this.namespace, this.name, podName) + \":\" + KafkaCluster.REPLICATION_PORT).collect(Collectors.joining(\",\"));\n+                log.debug(\"{}: Creating AdminClient for clusterId using {}\", reconciliation, bootstrapHostnames);\n+                Admin kafkaAdmin = adminClientProvider.createAdminClient(bootstrapHostnames, this.clusterCa.caCertSecret(), this.oldCoSecret, \"cluster-operator\");\n+                clusterId = kafkaAdmin.describeCluster().clusterId().get();\n+            } catch (KafkaException e) {\n+                log.debug(\"{}: Kafka exception getting clusterId {}\", reconciliation, e.getMessage());\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15f6cacc2728f52892caa6a3d22c3a18204c43f4"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxNDI1NQ==", "bodyText": "I think this tests only one small aspect of this. I think this test would be much more useful, if you mock the Kafka Admin client and have that return a mocker ClusterID. And then in the reconciliation you actually should let the kafkaGetClusterId run as it is in the code. To have it tested as well.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#discussion_r545314255", "createdAt": "2020-12-17T18:36:46Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaStatusTest.java", "diffHunk": "@@ -998,6 +998,42 @@ public void testInitialStatusOnOldResource() throws ParseException {\n         });\n     }\n \n+    @Test\n+    public void testKafkaClusrerIdInStatus(VertxTestContext context) throws ParseException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15f6cacc2728f52892caa6a3d22c3a18204c43f4"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NDA0NTEw", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#pullrequestreview-555404510", "createdAt": "2020-12-18T11:19:47Z", "commit": {"oid": "15f6cacc2728f52892caa6a3d22c3a18204c43f4"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMToxOTo0N1rOIIfB9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMToyNzowMFrOIIfPBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc2NzkyNQ==", "bodyText": "If we're going to change the exception handling, perhaps this should run last, or at least after kafkaPodsReady.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#discussion_r545767925", "createdAt": "2020-12-18T11:19:47Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -296,6 +300,7 @@ public KafkaAssemblyOperator(Vertx vertx, PlatformFeaturesAvailability pfa,\n                 .compose(state -> state.kafkaRoutes())\n                 .compose(state -> state.kafkaIngresses())\n                 .compose(state -> state.kafkaInternalServicesReady())\n+                .compose(state -> state.kafkaGetClusterId())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15f6cacc2728f52892caa6a3d22c3a18204c43f4"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc3MTI3MA==", "bodyText": "Because of where this is running within createOrUpdate I'm guessing it will could fail if the broker aren't ready. Currently that's not really a problem, because the cluster id doesn't change, so most of the time no one would notice. And when creating a cluster the 2nd reconciliation will come around soon enough so the status would only be lacking the id for a short while. If we're going to change the exception handling we'd need to think through the error scenarios in a little more detail. Ignoring the exception in some way is probably the right thing to do, because we don't really want to prevent the rest of the reconciliation from happening. But logging at debug is probably a little too drastic since it's kinda useful for a user to know that we couldn't even describe the cluster. We should go as far as to say the status should be NotReady though? @scholzj wdyt?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#discussion_r545771270", "createdAt": "2020-12-18T11:27:00Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -1874,6 +1879,32 @@ String zkConnectionString(int connectToReplicas, Function<Integer, String> zkNod\n             return withVoid(fut);\n         }\n \n+        /**\n+         * Get the cluster Id of the Kafka cluster\n+         * \n+         * @return\n+         */\n+        Future<ReconciliationState> kafkaGetClusterId() {\n+            String clusterId = null;\n+            log.debug(\"{}: Attempt to get clusterId\", reconciliation);\n+            List<String> podNames = IntStream.range(0, kafkaCluster.getReplicas()).boxed().collect(Collectors.toList()).stream().map(podId -> KafkaCluster.kafkaPodName(this.name, podId)).collect(Collectors.toList());\n+            try {\n+                String bootstrapHostnames = podNames.stream().map(podName -> KafkaCluster.podDnsName(this.namespace, this.name, podName) + \":\" + KafkaCluster.REPLICATION_PORT).collect(Collectors.joining(\",\"));\n+                log.debug(\"{}: Creating AdminClient for clusterId using {}\", reconciliation, bootstrapHostnames);\n+                Admin kafkaAdmin = adminClientProvider.createAdminClient(bootstrapHostnames, this.clusterCa.caCertSecret(), this.oldCoSecret, \"cluster-operator\");\n+                clusterId = kafkaAdmin.describeCluster().clusterId().get();\n+            } catch (KafkaException e) {\n+                log.debug(\"{}: Kafka exception getting clusterId {}\", reconciliation, e.getMessage());\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMzc3NA=="}, "originalCommit": {"oid": "15f6cacc2728f52892caa6a3d22c3a18204c43f4"}, "originalPosition": 46}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "40d80ab6e67f5d32ea588adf357e97fb5a88a468", "author": {"user": {"login": "lga-zurich", "name": "Luis Garc\u00e9s-Erice"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/40d80ab6e67f5d32ea588adf357e97fb5a88a468", "committedDate": "2020-12-23T22:47:32Z", "message": "Introduce clusterId in CHANGELOG"}, "afterCommit": {"oid": "8c5f8b549e0a4ae82cbef82fdeb72c1f128ae907", "author": {"user": {"login": "lga-zurich", "name": "Luis Garc\u00e9s-Erice"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/8c5f8b549e0a4ae82cbef82fdeb72c1f128ae907", "committedDate": "2020-12-23T22:52:45Z", "message": "Introduce clusterId in CHANGELOG\n\nSigned-off-by: Luis Garc\u00e9s-Erice <lga@zurich.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8c5f8b549e0a4ae82cbef82fdeb72c1f128ae907", "author": {"user": {"login": "lga-zurich", "name": "Luis Garc\u00e9s-Erice"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/8c5f8b549e0a4ae82cbef82fdeb72c1f128ae907", "committedDate": "2020-12-23T22:52:45Z", "message": "Introduce clusterId in CHANGELOG\n\nSigned-off-by: Luis Garc\u00e9s-Erice <lga@zurich.ibm.com>"}, "afterCommit": {"oid": "8d50e6c67acfe213df5bd520f9dd050c6bf9998f", "author": {"user": {"login": "lga-zurich", "name": "Luis Garc\u00e9s-Erice"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/8d50e6c67acfe213df5bd520f9dd050c6bf9998f", "committedDate": "2020-12-23T22:57:49Z", "message": "Introduce clusterId in CHANGELOG\n\nSigned-off-by: Luis Garc\u00e9s-Erice <lga@zurich.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5MTkwNDM0", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#pullrequestreview-559190434", "createdAt": "2020-12-28T15:27:05Z", "commit": {"oid": "0565bbd3fcfe6d583bf0f6adbb3e9a4ede16e1ca"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNToyNzowNVrOIL77FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNTozNzozNVrOIL8I6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM4NzAyOA==", "bodyText": "The status starts empty every time ... so I would normally not expect this to every happen. Is it really needed?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#discussion_r549387028", "createdAt": "2020-12-28T15:27:05Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -1954,6 +1958,45 @@ String zkConnectionString(int connectToReplicas, Function<Integer, String> zkNod\n             return withVoid(fut);\n         }\n \n+        /**\n+         * Get the cluster Id of the Kafka cluster\n+         * \n+         * @return\n+         */\n+        Future<ReconciliationState> kafkaGetClusterId() {\n+            if (kafkaStatus.getClusterId() != null) {\n+                // Cluster Id does not change\n+                return Future.succeededFuture(this);\n+            } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0565bbd3fcfe6d583bf0f6adbb3e9a4ede16e1ca"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM4Nzg5OA==", "bodyText": "Since you now mocked the cluster-id in the Admin provider, I do not think ou need this ... you should really just call the actual kafkaGetClusterId method IMHO which should set it on its own.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#discussion_r549387898", "createdAt": "2020-12-28T15:29:22Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaStatusTest.java", "diffHunk": "@@ -1153,4 +1189,18 @@ public MockModelWarningsStatusKafkaAssemblyOperator(Vertx vertx, PlatformFeature\n         }\n \n     }\n+\n+    class MockClusterIdStatusKafkaAssemblyOperator extends KafkaAssemblyOperator  {\n+        public MockClusterIdStatusKafkaAssemblyOperator(Vertx vertx, PlatformFeaturesAvailability pfa, CertManager certManager, PasswordGenerator passwordGenerator, ResourceOperatorSupplier supplier, ClusterOperatorConfig config) {\n+            super(vertx, pfa, certManager, passwordGenerator, supplier, config);\n+        }\n+\n+        @Override\n+        Future<Void> reconcile(ReconciliationState reconcileState)  {\n+            reconcileState.kafkaStatus.setClusterId(\"CLUSTERID\");\n+\n+            return Future.succeededFuture();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0565bbd3fcfe6d583bf0f6adbb3e9a4ede16e1ca"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM5MDU3MQ==", "bodyText": "I wonder if this does what you want it to do. I think this code would do the warning and return the succeeded future only in case the adminClientProvider.createAdminClient(bootstrapHostname, compositeFuture.resultAt(0), compositeFuture.resultAt(1), \"cluster-operator\"); fails. But not when kafkaAdmin.describeCluster().clusterId().get() fails. When kafkaAdmin.describeCluster().clusterId().get() fails the whole reconciliation will fail.\nIf we really just want to pass the reocnciliation when this fails as discussed before, maybe you need to turn it around and have the whole try-catch block inside the executeBlocking section.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#discussion_r549390571", "createdAt": "2020-12-28T15:37:35Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -1954,6 +1958,45 @@ String zkConnectionString(int connectToReplicas, Function<Integer, String> zkNod\n             return withVoid(fut);\n         }\n \n+        /**\n+         * Get the cluster Id of the Kafka cluster\n+         * \n+         * @return\n+         */\n+        Future<ReconciliationState> kafkaGetClusterId() {\n+            if (kafkaStatus.getClusterId() != null) {\n+                // Cluster Id does not change\n+                return Future.succeededFuture(this);\n+            } else {\n+                return adminClientSecrets()\n+                    .compose(compositeFuture -> {\n+                        log.debug(\"{}: Attempt to get clusterId\", reconciliation);\n+                        try {\n+                            String bootstrapHostname = KafkaResources.bootstrapServiceName(this.name) + \".\" + this.namespace + \".svc:\" + KafkaCluster.REPLICATION_PORT;\n+                            log.debug(\"{}: Creating AdminClient for clusterId using {}\", reconciliation, bootstrapHostname);\n+                            Admin kafkaAdmin = adminClientProvider.createAdminClient(bootstrapHostname, compositeFuture.resultAt(0), compositeFuture.resultAt(1), \"cluster-operator\");\n+                            Promise<ReconciliationState> resultPromise = Promise.promise();\n+                            vertx.createSharedWorkerExecutor(\"kubernetes-ops-pool\").<ReconciliationState>executeBlocking(\n+                                future -> {\n+                                    try {\n+                                        kafkaStatus.setClusterId(kafkaAdmin.describeCluster().clusterId().get());\n+                                        future.complete(this);\n+                                    } catch (Throwable e) {\n+                                        future.fail(e);\n+                                    }\n+                                },\n+                                true,\n+                                resultPromise);\n+                            return resultPromise.future();\n+                        } catch (KafkaException e) {\n+                            log.warn(\"{}: Kafka exception getting clusterId {}\", reconciliation, e.getMessage());\n+                        }\n+\n+                        return Future.succeededFuture(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0565bbd3fcfe6d583bf0f6adbb3e9a4ede16e1ca"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b477f00e8321a87856a03e0306887ec47b3441b8", "author": {"user": {"login": "lga-zurich", "name": "Luis Garc\u00e9s-Erice"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b477f00e8321a87856a03e0306887ec47b3441b8", "committedDate": "2021-01-05T08:51:21Z", "message": "Kafka cluster Id in status\n\nSigned-off-by: Luis Garc\u00e9s-Erice <lga@zurich.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f6a7f6ef258ccba4dcd7bebbe9cc4257c1427bd", "author": {"user": {"login": "lga-zurich", "name": "Luis Garc\u00e9s-Erice"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/2f6a7f6ef258ccba4dcd7bebbe9cc4257c1427bd", "committedDate": "2021-01-05T08:51:22Z", "message": "Make clusterId obtention non-blocking\n\nSigned-off-by: Luis Garc\u00e9s-Erice <lga@zurich.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a1b09595c21d0090086351329b9c7db6539d72b", "author": {"user": {"login": "lga-zurich", "name": "Luis Garc\u00e9s-Erice"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/0a1b09595c21d0090086351329b9c7db6539d72b", "committedDate": "2021-01-05T08:51:23Z", "message": "Copy CRDs including the clusterId\n\nSigned-off-by: Luis Garc\u00e9s-Erice <lga@zurich.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e107755365309ed9ddaba7dc2a2e2c27b49ebca", "author": {"user": {"login": "lga-zurich", "name": "Luis Garc\u00e9s-Erice"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/5e107755365309ed9ddaba7dc2a2e2c27b49ebca", "committedDate": "2021-01-05T08:51:24Z", "message": "Mock clusterId\n\nSigned-off-by: Luis Garc\u00e9s-Erice <lga@zurich.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0b069a39d3019b05b09f24a03cd1d1cf4382ee4", "author": {"user": {"login": "lga-zurich", "name": "Luis Garc\u00e9s-Erice"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a0b069a39d3019b05b09f24a03cd1d1cf4382ee4", "committedDate": "2021-01-05T08:53:10Z", "message": "Introduce clusterId in CHANGELOG\n\nSigned-off-by: Luis Garc\u00e9s-Erice <lga@zurich.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c00c2c9d8a92732655e863beb167c62f7d19b27c", "author": {"user": {"login": "lga-zurich", "name": "Luis Garc\u00e9s-Erice"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c00c2c9d8a92732655e863beb167c62f7d19b27c", "committedDate": "2021-01-05T08:53:11Z", "message": "Fix build\n\nSigned-off-by: Luis Garc\u00e9s-Erice <lga@zurich.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b627dccc797d11e20bf652e2768025104d1e754", "author": {"user": {"login": "lga-zurich", "name": "Luis Garc\u00e9s-Erice"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/0b627dccc797d11e20bf652e2768025104d1e754", "committedDate": "2021-01-05T08:58:21Z", "message": "No need to cache cluster Id\n\nSigned-off-by: Luis Garc\u00e9s-Erice <lga@zurich.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0565bbd3fcfe6d583bf0f6adbb3e9a4ede16e1ca", "author": {"user": {"login": "lga-zurich", "name": "Luis Garc\u00e9s-Erice"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/0565bbd3fcfe6d583bf0f6adbb3e9a4ede16e1ca", "committedDate": "2020-12-24T00:32:49Z", "message": "Fix build\n\nSigned-off-by: Luis Garc\u00e9s-Erice <lga@zurich.ibm.com>"}, "afterCommit": {"oid": "20c95875925ea7e7052d6db15b8bdec32104419c", "author": {"user": {"login": "lga-zurich", "name": "Luis Garc\u00e9s-Erice"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/20c95875925ea7e7052d6db15b8bdec32104419c", "committedDate": "2021-01-05T08:58:21Z", "message": "Mock cluster Id test\n\nSigned-off-by: Luis Garc\u00e9s-Erice <lga@zurich.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxNzE2Mjk1", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#pullrequestreview-561716295", "createdAt": "2021-01-05T11:31:00Z", "commit": {"oid": "ac05fd65430ccd34194671d47d7a1a8997d60f15"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMTozMTowMFrOIOT1nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMTozMTowMFrOIOT1nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTg3NTk5OQ==", "bodyText": "Can you instead of changing this use the @SuppressWarnings({\"checkstyle:ClassFanOutComplexity\"}) annotation in the code which is failing?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#discussion_r551875999", "createdAt": "2021-01-05T11:31:00Z", "author": {"login": "scholzj"}, "path": ".checkstyle/checkstyle.xml", "diffHunk": "@@ -103,7 +103,7 @@\n \n         <module name=\"ClassFanOutComplexity\">\n             <!-- default is 20 -->\n-            <property name=\"max\" value=\"44\"/>\n+            <property name=\"max\" value=\"45\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac05fd65430ccd34194671d47d7a1a8997d60f15"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d780ba78d183b1aee9632f3afdf3f47c298b1c9e", "author": {"user": {"login": "lga-zurich", "name": "Luis Garc\u00e9s-Erice"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d780ba78d183b1aee9632f3afdf3f47c298b1c9e", "committedDate": "2021-01-05T11:45:27Z", "message": "Mock cluster Id test\n\nSigned-off-by: Luis Garc\u00e9s-Erice <lga@zurich.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ac05fd65430ccd34194671d47d7a1a8997d60f15", "author": {"user": {"login": "lga-zurich", "name": "Luis Garc\u00e9s-Erice"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ac05fd65430ccd34194671d47d7a1a8997d60f15", "committedDate": "2021-01-05T11:16:24Z", "message": "Can't get fan-out on KafkaStatusTest below 45\n\nSigned-off-by: Luis Garc\u00e9s-Erice <lga@zurich.ibm.com>"}, "afterCommit": {"oid": "d780ba78d183b1aee9632f3afdf3f47c298b1c9e", "author": {"user": {"login": "lga-zurich", "name": "Luis Garc\u00e9s-Erice"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d780ba78d183b1aee9632f3afdf3f47c298b1c9e", "committedDate": "2021-01-05T11:45:27Z", "message": "Mock cluster Id test\n\nSigned-off-by: Luis Garc\u00e9s-Erice <lga@zurich.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxNzc1MDE2", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#pullrequestreview-561775016", "createdAt": "2021-01-05T13:11:48Z", "commit": {"oid": "d780ba78d183b1aee9632f3afdf3f47c298b1c9e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxOTMxOTgx", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#pullrequestreview-561931981", "createdAt": "2021-01-05T16:20:46Z", "commit": {"oid": "d780ba78d183b1aee9632f3afdf3f47c298b1c9e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 762, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}