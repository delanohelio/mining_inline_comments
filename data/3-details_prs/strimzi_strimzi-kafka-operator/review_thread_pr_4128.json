{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyNTAwMzIw", "number": 4128, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNzozMzowNVrOFHsPWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwOToxOTo0N1rOFMcltw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjA5MTc5OnYy", "diffSide": "RIGHT", "path": "topic-operator/src/main/java/io/strimzi/operator/topic/K8sTopicWatcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNzozMzowNVrOIJOwWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoxNzo1NFrOIOdpnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0OTg1MA==", "bodyText": "why the need for this check on ERROR action?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4128#discussion_r546549850", "createdAt": "2020-12-21T07:33:05Z", "author": {"login": "ppatierno"}, "path": "topic-operator/src/main/java/io/strimzi/operator/topic/K8sTopicWatcher.java", "diffHunk": "@@ -44,23 +45,24 @@ public void eventReceived(Action action, KafkaTopic kafkaTopic) {\n             }\n             LOGGER.info(\"{}: event {} on resource {} generation={}, labels={}\", logContext, action, name,\n                     metadata.getGeneration(), labels);\n-            Handler<AsyncResult<Void>> resultHandler = ar -> {\n-                if (ar.succeeded()) {\n-                    LOGGER.info(\"{}: Success processing event {} on resource {} with labels {}\", logContext, action, name, labels);\n-                } else {\n-                    String message;\n-                    if (ar.cause() instanceof InvalidTopicException) {\n-                        message = kind + \" \" + name + \" has an invalid spec section: \" + ar.cause().getMessage();\n-                        LOGGER.error(\"{}\", message);\n-\n+            if (!action.equals(Action.ERROR)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608b96b9bcb3a4b93b91181b6828525373304b1d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAzNjc2NQ==", "bodyText": "It's essentially the same line of code as was on the old line 63. TBH I've never really known under what circumstances we might see ERROR, but if/when we saw it, it wouldn't mean we should reconcile.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4128#discussion_r552036765", "createdAt": "2021-01-05T16:17:54Z", "author": {"login": "tombentley"}, "path": "topic-operator/src/main/java/io/strimzi/operator/topic/K8sTopicWatcher.java", "diffHunk": "@@ -44,23 +45,24 @@ public void eventReceived(Action action, KafkaTopic kafkaTopic) {\n             }\n             LOGGER.info(\"{}: event {} on resource {} generation={}, labels={}\", logContext, action, name,\n                     metadata.getGeneration(), labels);\n-            Handler<AsyncResult<Void>> resultHandler = ar -> {\n-                if (ar.succeeded()) {\n-                    LOGGER.info(\"{}: Success processing event {} on resource {} with labels {}\", logContext, action, name, labels);\n-                } else {\n-                    String message;\n-                    if (ar.cause() instanceof InvalidTopicException) {\n-                        message = kind + \" \" + name + \" has an invalid spec section: \" + ar.cause().getMessage();\n-                        LOGGER.error(\"{}\", message);\n-\n+            if (!action.equals(Action.ERROR)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0OTg1MA=="}, "originalCommit": {"oid": "608b96b9bcb3a4b93b91181b6828525373304b1d"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NTk0ODQ0OnYy", "diffSide": "RIGHT", "path": "kt.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwOToxNzoxN1rOIQK-eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwOTo0MjozNlrOIQLviA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzgyNzk2MA==", "bodyText": "It's intended to have it in root?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4128#discussion_r553827960", "createdAt": "2021-01-08T09:17:17Z", "author": {"login": "Frawless"}, "path": "kt.yaml", "diffHunk": "@@ -0,0 +1,13 @@\n+apiVersion: kafka.strimzi.io/v1beta1\n+kind: KafkaTopic\n+metadata:\n+  labels:\n+    strimzi.io/cluster: my-cluster\n+  name: vr-test\n+spec:\n+  config:\n+    cleanup.policy: delete\n+    compression.type: zstd\n+    retention.ms: 432000000\n+  partitions: 3\n+  replicas: 3", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb4baaa62c9e3943cf4e2114eff5ee7486ce29f9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg0MDUyMA==", "bodyText": "Thought I'd deleted that, thanks!", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4128#discussion_r553840520", "createdAt": "2021-01-08T09:42:36Z", "author": {"login": "tombentley"}, "path": "kt.yaml", "diffHunk": "@@ -0,0 +1,13 @@\n+apiVersion: kafka.strimzi.io/v1beta1\n+kind: KafkaTopic\n+metadata:\n+  labels:\n+    strimzi.io/cluster: my-cluster\n+  name: vr-test\n+spec:\n+  config:\n+    cleanup.policy: delete\n+    compression.type: zstd\n+    retention.ms: 432000000\n+  partitions: 3\n+  replicas: 3", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzgyNzk2MA=="}, "originalCommit": {"oid": "cb4baaa62c9e3943cf4e2114eff5ee7486ce29f9"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NTk1MTgyOnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/topic/TopicST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwOToxODoxNVrOIQLAYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwOToxODoxNVrOIQLAYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzgyODQ0OQ==", "bodyText": "indent", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4128#discussion_r553828449", "createdAt": "2021-01-08T09:18:15Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/topic/TopicST.java", "diffHunk": "@@ -165,6 +167,88 @@ void testCreateTopicViaAdminClient() throws ExecutionException, InterruptedExcep\n         assertThat(kafkaTopic.getSpec().getReplicas(), is(1));\n     }\n \n+    @Tag(NODEPORT_SUPPORTED)\n+    @Test\n+    void testCreateDeleteCreate() throws InterruptedException {\n+        String clusterName = CLUSTER_NAME + \"-sdkvnsdkjn\";\n+\n+        KafkaResource.kafkaEphemeral(clusterName, 3, 3)\n+                .editSpec()\n+                    .editKafka()\n+                        .withNewListeners()\n+                            .addNewGenericKafkaListener()\n+                                .withName(Constants.EXTERNAL_LISTENER_DEFAULT_NAME)\n+                                .withPort(9094)\n+                                .withType(KafkaListenerType.NODEPORT)\n+                                .withTls(false)\n+                            .endGenericKafkaListener()\n+                        .endListeners()\n+                    .endKafka()\n+                    .editEntityOperator()\n+                        .editTopicOperator()\n+                            .withReconciliationIntervalSeconds(120)\n+                        .endTopicOperator()\n+                    .endEntityOperator()\n+                .endSpec()\n+                .done();\n+\n+        Properties properties = new Properties();\n+\n+        properties.setProperty(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, KafkaResource.kafkaClient().inNamespace(NAMESPACE)\n+                .withName(clusterName).get().getStatus().getListeners().stream()\n+                .filter(listener -> listener.getType().equals(Constants.EXTERNAL_LISTENER_DEFAULT_NAME))\n+                .findFirst()\n+                .orElseThrow(RuntimeException::new)\n+                .getBootstrapServers());\n+\n+        try (AdminClient adminClient = AdminClient.create(properties)) {\n+\n+            String topicName = \"topic-create-delete-create\";\n+\n+            KafkaTopicResource.topic(clusterName, topicName)\n+                    .editSpec()\n+                    .withReplicas(3)\n+                    .endSpec()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb4baaa62c9e3943cf4e2114eff5ee7486ce29f9"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NTk1MjExOnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/topic/TopicST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwOToxODoyMlrOIQLAlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwOToxODoyMlrOIQLAlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzgyODUwMw==", "bodyText": "indent", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4128#discussion_r553828503", "createdAt": "2021-01-08T09:18:22Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/topic/TopicST.java", "diffHunk": "@@ -165,6 +167,88 @@ void testCreateTopicViaAdminClient() throws ExecutionException, InterruptedExcep\n         assertThat(kafkaTopic.getSpec().getReplicas(), is(1));\n     }\n \n+    @Tag(NODEPORT_SUPPORTED)\n+    @Test\n+    void testCreateDeleteCreate() throws InterruptedException {\n+        String clusterName = CLUSTER_NAME + \"-sdkvnsdkjn\";\n+\n+        KafkaResource.kafkaEphemeral(clusterName, 3, 3)\n+                .editSpec()\n+                    .editKafka()\n+                        .withNewListeners()\n+                            .addNewGenericKafkaListener()\n+                                .withName(Constants.EXTERNAL_LISTENER_DEFAULT_NAME)\n+                                .withPort(9094)\n+                                .withType(KafkaListenerType.NODEPORT)\n+                                .withTls(false)\n+                            .endGenericKafkaListener()\n+                        .endListeners()\n+                    .endKafka()\n+                    .editEntityOperator()\n+                        .editTopicOperator()\n+                            .withReconciliationIntervalSeconds(120)\n+                        .endTopicOperator()\n+                    .endEntityOperator()\n+                .endSpec()\n+                .done();\n+\n+        Properties properties = new Properties();\n+\n+        properties.setProperty(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, KafkaResource.kafkaClient().inNamespace(NAMESPACE)\n+                .withName(clusterName).get().getStatus().getListeners().stream()\n+                .filter(listener -> listener.getType().equals(Constants.EXTERNAL_LISTENER_DEFAULT_NAME))\n+                .findFirst()\n+                .orElseThrow(RuntimeException::new)\n+                .getBootstrapServers());\n+\n+        try (AdminClient adminClient = AdminClient.create(properties)) {\n+\n+            String topicName = \"topic-create-delete-create\";\n+\n+            KafkaTopicResource.topic(clusterName, topicName)\n+                    .editSpec()\n+                    .withReplicas(3)\n+                    .endSpec()\n+                    .done();\n+            KafkaTopicUtils.waitForKafkaTopicReady(topicName);\n+\n+            adminClient.describeTopics(singletonList(topicName)).values().get(topicName);\n+\n+            for (int i = 0; i < 10; i++) {\n+                Thread.sleep(2_000);\n+                LOGGER.info(\"Iteration {}: Deleting {}\", i, topicName);\n+                cmdKubeClient().deleteByName(KafkaTopic.RESOURCE_KIND, topicName);\n+                KafkaTopicUtils.waitForKafkaTopicDeletion(topicName);\n+                TestUtils.waitFor(\"Deletion of topic \" + topicName, 1000, 15_000, () -> {\n+                    try {\n+                        return !adminClient.listTopics().names().get().contains(topicName);\n+                    } catch (ExecutionException | InterruptedException e) {\n+                        return false;\n+                    }\n+                });\n+                Thread.sleep(2_000);\n+                long t0 = System.currentTimeMillis();\n+                LOGGER.info(\"Iteration {}: Recreating {}\", i, topicName);\n+                KafkaTopicResource.topic(clusterName, topicName)\n+                        .editSpec()\n+                        .withReplicas(3)\n+                        .endSpec()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb4baaa62c9e3943cf4e2114eff5ee7486ce29f9"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NTk1NjM5OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/topic/TopicST.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwOToxOTo0N1rOIQLDHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxMDo0NDowMFrOIQNnMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzgyOTE0OA==", "bodyText": "I don't think this is needed. In case the topic is not recreated during the timeout period specified in waitFor above, the test will fail anyway. So in case, you will specify the timeout for 10s, it should be almost the same and the code will be shorter. Unless there is something I don't see.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4128#discussion_r553829148", "createdAt": "2021-01-08T09:19:47Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/topic/TopicST.java", "diffHunk": "@@ -165,6 +167,88 @@ void testCreateTopicViaAdminClient() throws ExecutionException, InterruptedExcep\n         assertThat(kafkaTopic.getSpec().getReplicas(), is(1));\n     }\n \n+    @Tag(NODEPORT_SUPPORTED)\n+    @Test\n+    void testCreateDeleteCreate() throws InterruptedException {\n+        String clusterName = CLUSTER_NAME + \"-sdkvnsdkjn\";\n+\n+        KafkaResource.kafkaEphemeral(clusterName, 3, 3)\n+                .editSpec()\n+                    .editKafka()\n+                        .withNewListeners()\n+                            .addNewGenericKafkaListener()\n+                                .withName(Constants.EXTERNAL_LISTENER_DEFAULT_NAME)\n+                                .withPort(9094)\n+                                .withType(KafkaListenerType.NODEPORT)\n+                                .withTls(false)\n+                            .endGenericKafkaListener()\n+                        .endListeners()\n+                    .endKafka()\n+                    .editEntityOperator()\n+                        .editTopicOperator()\n+                            .withReconciliationIntervalSeconds(120)\n+                        .endTopicOperator()\n+                    .endEntityOperator()\n+                .endSpec()\n+                .done();\n+\n+        Properties properties = new Properties();\n+\n+        properties.setProperty(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, KafkaResource.kafkaClient().inNamespace(NAMESPACE)\n+                .withName(clusterName).get().getStatus().getListeners().stream()\n+                .filter(listener -> listener.getType().equals(Constants.EXTERNAL_LISTENER_DEFAULT_NAME))\n+                .findFirst()\n+                .orElseThrow(RuntimeException::new)\n+                .getBootstrapServers());\n+\n+        try (AdminClient adminClient = AdminClient.create(properties)) {\n+\n+            String topicName = \"topic-create-delete-create\";\n+\n+            KafkaTopicResource.topic(clusterName, topicName)\n+                    .editSpec()\n+                    .withReplicas(3)\n+                    .endSpec()\n+                    .done();\n+            KafkaTopicUtils.waitForKafkaTopicReady(topicName);\n+\n+            adminClient.describeTopics(singletonList(topicName)).values().get(topicName);\n+\n+            for (int i = 0; i < 10; i++) {\n+                Thread.sleep(2_000);\n+                LOGGER.info(\"Iteration {}: Deleting {}\", i, topicName);\n+                cmdKubeClient().deleteByName(KafkaTopic.RESOURCE_KIND, topicName);\n+                KafkaTopicUtils.waitForKafkaTopicDeletion(topicName);\n+                TestUtils.waitFor(\"Deletion of topic \" + topicName, 1000, 15_000, () -> {\n+                    try {\n+                        return !adminClient.listTopics().names().get().contains(topicName);\n+                    } catch (ExecutionException | InterruptedException e) {\n+                        return false;\n+                    }\n+                });\n+                Thread.sleep(2_000);\n+                long t0 = System.currentTimeMillis();\n+                LOGGER.info(\"Iteration {}: Recreating {}\", i, topicName);\n+                KafkaTopicResource.topic(clusterName, topicName)\n+                        .editSpec()\n+                        .withReplicas(3)\n+                        .endSpec()\n+                        .done();\n+                ResourceManager.waitForResourceStatus(KafkaTopicResource.kafkaTopicClient(), \"KafkaTopic\", NAMESPACE, topicName, Ready, 15_000);\n+                TestUtils.waitFor(\"Recreation of topic \" + topicName, 1000, 2_000, () -> {\n+                    try {\n+                        return adminClient.listTopics().names().get().contains(topicName);\n+                    } catch (ExecutionException | InterruptedException e) {\n+                        return false;\n+                    }\n+                });\n+                if (System.currentTimeMillis() - t0 > 10_000) {\n+                    fail(\"Took too long to recreate\");\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb4baaa62c9e3943cf4e2114eff5ee7486ce29f9"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg0MDQ2MQ==", "bodyText": "It is needed. System.currentTimeMillis() - t0  is measuring the time for:\n\nKube to create the KafkaTopic (admittedly this should be negligable)\nThe time for the TO to react to that, creating the topic and setting the Ready status\nThe topic to actually exist in the broker's metadata cache.\n\nThe waitFor timeout is measuring only the last bullet.\nWithout this assertion the test always passes, even without the changes in this PR which fix the issue. With this assertion (but without the changes in this PR which fix the issue) it fails on the second iteration of the for loop because the TO wrongly retains some state about the topic having existed in the past, and so the TO has to wait for a full reconciliation before that wrong state gets sorted out (well, it's ignored I think).", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4128#discussion_r553840461", "createdAt": "2021-01-08T09:42:28Z", "author": {"login": "tombentley"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/topic/TopicST.java", "diffHunk": "@@ -165,6 +167,88 @@ void testCreateTopicViaAdminClient() throws ExecutionException, InterruptedExcep\n         assertThat(kafkaTopic.getSpec().getReplicas(), is(1));\n     }\n \n+    @Tag(NODEPORT_SUPPORTED)\n+    @Test\n+    void testCreateDeleteCreate() throws InterruptedException {\n+        String clusterName = CLUSTER_NAME + \"-sdkvnsdkjn\";\n+\n+        KafkaResource.kafkaEphemeral(clusterName, 3, 3)\n+                .editSpec()\n+                    .editKafka()\n+                        .withNewListeners()\n+                            .addNewGenericKafkaListener()\n+                                .withName(Constants.EXTERNAL_LISTENER_DEFAULT_NAME)\n+                                .withPort(9094)\n+                                .withType(KafkaListenerType.NODEPORT)\n+                                .withTls(false)\n+                            .endGenericKafkaListener()\n+                        .endListeners()\n+                    .endKafka()\n+                    .editEntityOperator()\n+                        .editTopicOperator()\n+                            .withReconciliationIntervalSeconds(120)\n+                        .endTopicOperator()\n+                    .endEntityOperator()\n+                .endSpec()\n+                .done();\n+\n+        Properties properties = new Properties();\n+\n+        properties.setProperty(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, KafkaResource.kafkaClient().inNamespace(NAMESPACE)\n+                .withName(clusterName).get().getStatus().getListeners().stream()\n+                .filter(listener -> listener.getType().equals(Constants.EXTERNAL_LISTENER_DEFAULT_NAME))\n+                .findFirst()\n+                .orElseThrow(RuntimeException::new)\n+                .getBootstrapServers());\n+\n+        try (AdminClient adminClient = AdminClient.create(properties)) {\n+\n+            String topicName = \"topic-create-delete-create\";\n+\n+            KafkaTopicResource.topic(clusterName, topicName)\n+                    .editSpec()\n+                    .withReplicas(3)\n+                    .endSpec()\n+                    .done();\n+            KafkaTopicUtils.waitForKafkaTopicReady(topicName);\n+\n+            adminClient.describeTopics(singletonList(topicName)).values().get(topicName);\n+\n+            for (int i = 0; i < 10; i++) {\n+                Thread.sleep(2_000);\n+                LOGGER.info(\"Iteration {}: Deleting {}\", i, topicName);\n+                cmdKubeClient().deleteByName(KafkaTopic.RESOURCE_KIND, topicName);\n+                KafkaTopicUtils.waitForKafkaTopicDeletion(topicName);\n+                TestUtils.waitFor(\"Deletion of topic \" + topicName, 1000, 15_000, () -> {\n+                    try {\n+                        return !adminClient.listTopics().names().get().contains(topicName);\n+                    } catch (ExecutionException | InterruptedException e) {\n+                        return false;\n+                    }\n+                });\n+                Thread.sleep(2_000);\n+                long t0 = System.currentTimeMillis();\n+                LOGGER.info(\"Iteration {}: Recreating {}\", i, topicName);\n+                KafkaTopicResource.topic(clusterName, topicName)\n+                        .editSpec()\n+                        .withReplicas(3)\n+                        .endSpec()\n+                        .done();\n+                ResourceManager.waitForResourceStatus(KafkaTopicResource.kafkaTopicClient(), \"KafkaTopic\", NAMESPACE, topicName, Ready, 15_000);\n+                TestUtils.waitFor(\"Recreation of topic \" + topicName, 1000, 2_000, () -> {\n+                    try {\n+                        return adminClient.listTopics().names().get().contains(topicName);\n+                    } catch (ExecutionException | InterruptedException e) {\n+                        return false;\n+                    }\n+                });\n+                if (System.currentTimeMillis() - t0 > 10_000) {\n+                    fail(\"Took too long to recreate\");\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzgyOTE0OA=="}, "originalCommit": {"oid": "cb4baaa62c9e3943cf4e2114eff5ee7486ce29f9"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg3MTE1Mw==", "bodyText": "I see, make sense", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4128#discussion_r553871153", "createdAt": "2021-01-08T10:44:00Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/topic/TopicST.java", "diffHunk": "@@ -165,6 +167,88 @@ void testCreateTopicViaAdminClient() throws ExecutionException, InterruptedExcep\n         assertThat(kafkaTopic.getSpec().getReplicas(), is(1));\n     }\n \n+    @Tag(NODEPORT_SUPPORTED)\n+    @Test\n+    void testCreateDeleteCreate() throws InterruptedException {\n+        String clusterName = CLUSTER_NAME + \"-sdkvnsdkjn\";\n+\n+        KafkaResource.kafkaEphemeral(clusterName, 3, 3)\n+                .editSpec()\n+                    .editKafka()\n+                        .withNewListeners()\n+                            .addNewGenericKafkaListener()\n+                                .withName(Constants.EXTERNAL_LISTENER_DEFAULT_NAME)\n+                                .withPort(9094)\n+                                .withType(KafkaListenerType.NODEPORT)\n+                                .withTls(false)\n+                            .endGenericKafkaListener()\n+                        .endListeners()\n+                    .endKafka()\n+                    .editEntityOperator()\n+                        .editTopicOperator()\n+                            .withReconciliationIntervalSeconds(120)\n+                        .endTopicOperator()\n+                    .endEntityOperator()\n+                .endSpec()\n+                .done();\n+\n+        Properties properties = new Properties();\n+\n+        properties.setProperty(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, KafkaResource.kafkaClient().inNamespace(NAMESPACE)\n+                .withName(clusterName).get().getStatus().getListeners().stream()\n+                .filter(listener -> listener.getType().equals(Constants.EXTERNAL_LISTENER_DEFAULT_NAME))\n+                .findFirst()\n+                .orElseThrow(RuntimeException::new)\n+                .getBootstrapServers());\n+\n+        try (AdminClient adminClient = AdminClient.create(properties)) {\n+\n+            String topicName = \"topic-create-delete-create\";\n+\n+            KafkaTopicResource.topic(clusterName, topicName)\n+                    .editSpec()\n+                    .withReplicas(3)\n+                    .endSpec()\n+                    .done();\n+            KafkaTopicUtils.waitForKafkaTopicReady(topicName);\n+\n+            adminClient.describeTopics(singletonList(topicName)).values().get(topicName);\n+\n+            for (int i = 0; i < 10; i++) {\n+                Thread.sleep(2_000);\n+                LOGGER.info(\"Iteration {}: Deleting {}\", i, topicName);\n+                cmdKubeClient().deleteByName(KafkaTopic.RESOURCE_KIND, topicName);\n+                KafkaTopicUtils.waitForKafkaTopicDeletion(topicName);\n+                TestUtils.waitFor(\"Deletion of topic \" + topicName, 1000, 15_000, () -> {\n+                    try {\n+                        return !adminClient.listTopics().names().get().contains(topicName);\n+                    } catch (ExecutionException | InterruptedException e) {\n+                        return false;\n+                    }\n+                });\n+                Thread.sleep(2_000);\n+                long t0 = System.currentTimeMillis();\n+                LOGGER.info(\"Iteration {}: Recreating {}\", i, topicName);\n+                KafkaTopicResource.topic(clusterName, topicName)\n+                        .editSpec()\n+                        .withReplicas(3)\n+                        .endSpec()\n+                        .done();\n+                ResourceManager.waitForResourceStatus(KafkaTopicResource.kafkaTopicClient(), \"KafkaTopic\", NAMESPACE, topicName, Ready, 15_000);\n+                TestUtils.waitFor(\"Recreation of topic \" + topicName, 1000, 2_000, () -> {\n+                    try {\n+                        return adminClient.listTopics().names().get().contains(topicName);\n+                    } catch (ExecutionException | InterruptedException e) {\n+                        return false;\n+                    }\n+                });\n+                if (System.currentTimeMillis() - t0 > 10_000) {\n+                    fail(\"Took too long to recreate\");\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzgyOTE0OA=="}, "originalCommit": {"oid": "cb4baaa62c9e3943cf4e2114eff5ee7486ce29f9"}, "originalPosition": 93}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 870, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}