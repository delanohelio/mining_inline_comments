{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMDI2OTcy", "number": 3187, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjowMDozMVrOEICMiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjowMjoyOVrOEICPqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODYwMDQxOnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/ResourceOperation.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjowMDozMVrOGnwFnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjozMjowN1rOGnxVlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNTUxNw==", "bodyText": "CruiseControl and Exporter are part of Kafka. Wouldn't be btter to use Deployment timeout here?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3187#discussion_r444335517", "createdAt": "2020-06-23T16:00:31Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/ResourceOperation.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.resources;\n+\n+import io.strimzi.api.kafka.model.Kafka;\n+import io.strimzi.api.kafka.model.KafkaBridge;\n+import io.strimzi.api.kafka.model.KafkaConnect;\n+import io.strimzi.api.kafka.model.KafkaConnectS2I;\n+import io.strimzi.api.kafka.model.KafkaConnector;\n+import io.strimzi.api.kafka.model.KafkaMirrorMaker;\n+import io.strimzi.api.kafka.model.KafkaMirrorMaker2;\n+import io.strimzi.api.kafka.model.KafkaRebalance;\n+import io.strimzi.systemtest.Constants;\n+\n+import java.time.Duration;\n+\n+public class ResourceOperation {\n+    public static long getTimeoutForResourceReadiness(String kind) {\n+        long timeout;\n+\n+        switch (kind) {\n+            case Kafka.RESOURCE_KIND:\n+                timeout = Duration.ofMinutes(14).toMillis();\n+                break;\n+            case KafkaConnect.RESOURCE_KIND:\n+            case KafkaConnectS2I.RESOURCE_KIND:\n+            case KafkaMirrorMaker2.RESOURCE_KIND:\n+            case Constants.DEPLOYMENT_CONFIG:\n+                timeout = Duration.ofMinutes(10).toMillis();\n+                break;\n+            case KafkaRebalance.RESOURCE_KIND:\n+            case KafkaMirrorMaker.RESOURCE_KIND:\n+            case KafkaBridge.RESOURCE_KIND:\n+            case KafkaConnector.RESOURCE_KIND:\n+            case Constants.STATEFUL_SET:\n+            case Constants.DEPLOYMENT:\n+                timeout = Duration.ofMinutes(8).toMillis();\n+                break;\n+            case Constants.KAFKA_CRUISE_CONTROL:\n+            case Constants.KAFKA_EXPORTER:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d52381308b41750bfda47cbeae251be36267e8a9"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0NTg2NQ==", "bodyText": "Hmm good point, I thought that split it to more Constants and leave it on smaller timeout will be better, but thanks for the comment.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3187#discussion_r444345865", "createdAt": "2020-06-23T16:15:53Z", "author": {"login": "im-konge"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/ResourceOperation.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.resources;\n+\n+import io.strimzi.api.kafka.model.Kafka;\n+import io.strimzi.api.kafka.model.KafkaBridge;\n+import io.strimzi.api.kafka.model.KafkaConnect;\n+import io.strimzi.api.kafka.model.KafkaConnectS2I;\n+import io.strimzi.api.kafka.model.KafkaConnector;\n+import io.strimzi.api.kafka.model.KafkaMirrorMaker;\n+import io.strimzi.api.kafka.model.KafkaMirrorMaker2;\n+import io.strimzi.api.kafka.model.KafkaRebalance;\n+import io.strimzi.systemtest.Constants;\n+\n+import java.time.Duration;\n+\n+public class ResourceOperation {\n+    public static long getTimeoutForResourceReadiness(String kind) {\n+        long timeout;\n+\n+        switch (kind) {\n+            case Kafka.RESOURCE_KIND:\n+                timeout = Duration.ofMinutes(14).toMillis();\n+                break;\n+            case KafkaConnect.RESOURCE_KIND:\n+            case KafkaConnectS2I.RESOURCE_KIND:\n+            case KafkaMirrorMaker2.RESOURCE_KIND:\n+            case Constants.DEPLOYMENT_CONFIG:\n+                timeout = Duration.ofMinutes(10).toMillis();\n+                break;\n+            case KafkaRebalance.RESOURCE_KIND:\n+            case KafkaMirrorMaker.RESOURCE_KIND:\n+            case KafkaBridge.RESOURCE_KIND:\n+            case KafkaConnector.RESOURCE_KIND:\n+            case Constants.STATEFUL_SET:\n+            case Constants.DEPLOYMENT:\n+                timeout = Duration.ofMinutes(8).toMillis();\n+                break;\n+            case Constants.KAFKA_CRUISE_CONTROL:\n+            case Constants.KAFKA_EXPORTER:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNTUxNw=="}, "originalCommit": {"oid": "d52381308b41750bfda47cbeae251be36267e8a9"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0NjczMA==", "bodyText": "Well I don't say it's wrong, but it might be better to rename it to Kafka_CRUISE_CONTROL_DPELOYMENT for example and then use some timeout under it, same for exporter", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3187#discussion_r444346730", "createdAt": "2020-06-23T16:17:18Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/ResourceOperation.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.resources;\n+\n+import io.strimzi.api.kafka.model.Kafka;\n+import io.strimzi.api.kafka.model.KafkaBridge;\n+import io.strimzi.api.kafka.model.KafkaConnect;\n+import io.strimzi.api.kafka.model.KafkaConnectS2I;\n+import io.strimzi.api.kafka.model.KafkaConnector;\n+import io.strimzi.api.kafka.model.KafkaMirrorMaker;\n+import io.strimzi.api.kafka.model.KafkaMirrorMaker2;\n+import io.strimzi.api.kafka.model.KafkaRebalance;\n+import io.strimzi.systemtest.Constants;\n+\n+import java.time.Duration;\n+\n+public class ResourceOperation {\n+    public static long getTimeoutForResourceReadiness(String kind) {\n+        long timeout;\n+\n+        switch (kind) {\n+            case Kafka.RESOURCE_KIND:\n+                timeout = Duration.ofMinutes(14).toMillis();\n+                break;\n+            case KafkaConnect.RESOURCE_KIND:\n+            case KafkaConnectS2I.RESOURCE_KIND:\n+            case KafkaMirrorMaker2.RESOURCE_KIND:\n+            case Constants.DEPLOYMENT_CONFIG:\n+                timeout = Duration.ofMinutes(10).toMillis();\n+                break;\n+            case KafkaRebalance.RESOURCE_KIND:\n+            case KafkaMirrorMaker.RESOURCE_KIND:\n+            case KafkaBridge.RESOURCE_KIND:\n+            case KafkaConnector.RESOURCE_KIND:\n+            case Constants.STATEFUL_SET:\n+            case Constants.DEPLOYMENT:\n+                timeout = Duration.ofMinutes(8).toMillis();\n+                break;\n+            case Constants.KAFKA_CRUISE_CONTROL:\n+            case Constants.KAFKA_EXPORTER:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNTUxNw=="}, "originalCommit": {"oid": "d52381308b41750bfda47cbeae251be36267e8a9"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM1NTk5MA==", "bodyText": "Good idea, fixed :)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3187#discussion_r444355990", "createdAt": "2020-06-23T16:32:07Z", "author": {"login": "im-konge"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/ResourceOperation.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.resources;\n+\n+import io.strimzi.api.kafka.model.Kafka;\n+import io.strimzi.api.kafka.model.KafkaBridge;\n+import io.strimzi.api.kafka.model.KafkaConnect;\n+import io.strimzi.api.kafka.model.KafkaConnectS2I;\n+import io.strimzi.api.kafka.model.KafkaConnector;\n+import io.strimzi.api.kafka.model.KafkaMirrorMaker;\n+import io.strimzi.api.kafka.model.KafkaMirrorMaker2;\n+import io.strimzi.api.kafka.model.KafkaRebalance;\n+import io.strimzi.systemtest.Constants;\n+\n+import java.time.Duration;\n+\n+public class ResourceOperation {\n+    public static long getTimeoutForResourceReadiness(String kind) {\n+        long timeout;\n+\n+        switch (kind) {\n+            case Kafka.RESOURCE_KIND:\n+                timeout = Duration.ofMinutes(14).toMillis();\n+                break;\n+            case KafkaConnect.RESOURCE_KIND:\n+            case KafkaConnectS2I.RESOURCE_KIND:\n+            case KafkaMirrorMaker2.RESOURCE_KIND:\n+            case Constants.DEPLOYMENT_CONFIG:\n+                timeout = Duration.ofMinutes(10).toMillis();\n+                break;\n+            case KafkaRebalance.RESOURCE_KIND:\n+            case KafkaMirrorMaker.RESOURCE_KIND:\n+            case KafkaBridge.RESOURCE_KIND:\n+            case KafkaConnector.RESOURCE_KIND:\n+            case Constants.STATEFUL_SET:\n+            case Constants.DEPLOYMENT:\n+                timeout = Duration.ofMinutes(8).toMillis();\n+                break;\n+            case Constants.KAFKA_CRUISE_CONTROL:\n+            case Constants.KAFKA_EXPORTER:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNTUxNw=="}, "originalCommit": {"oid": "d52381308b41750bfda47cbeae251be36267e8a9"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODYwMjc3OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/ResourceOperation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjowMTowMlrOGnwHCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjoxNDoxMFrOGnwppg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNTg4Mg==", "bodyText": "Rebalance and Connector readiness will take much less time than others", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3187#discussion_r444335882", "createdAt": "2020-06-23T16:01:02Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/ResourceOperation.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.resources;\n+\n+import io.strimzi.api.kafka.model.Kafka;\n+import io.strimzi.api.kafka.model.KafkaBridge;\n+import io.strimzi.api.kafka.model.KafkaConnect;\n+import io.strimzi.api.kafka.model.KafkaConnectS2I;\n+import io.strimzi.api.kafka.model.KafkaConnector;\n+import io.strimzi.api.kafka.model.KafkaMirrorMaker;\n+import io.strimzi.api.kafka.model.KafkaMirrorMaker2;\n+import io.strimzi.api.kafka.model.KafkaRebalance;\n+import io.strimzi.systemtest.Constants;\n+\n+import java.time.Duration;\n+\n+public class ResourceOperation {\n+    public static long getTimeoutForResourceReadiness(String kind) {\n+        long timeout;\n+\n+        switch (kind) {\n+            case Kafka.RESOURCE_KIND:\n+                timeout = Duration.ofMinutes(14).toMillis();\n+                break;\n+            case KafkaConnect.RESOURCE_KIND:\n+            case KafkaConnectS2I.RESOURCE_KIND:\n+            case KafkaMirrorMaker2.RESOURCE_KIND:\n+            case Constants.DEPLOYMENT_CONFIG:\n+                timeout = Duration.ofMinutes(10).toMillis();\n+                break;\n+            case KafkaRebalance.RESOURCE_KIND:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d52381308b41750bfda47cbeae251be36267e8a9"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0NDc0Mg==", "bodyText": "Yeah, good point, gonna move it. I wasn't 100% sure where to put it", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3187#discussion_r444344742", "createdAt": "2020-06-23T16:14:10Z", "author": {"login": "im-konge"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/ResourceOperation.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.resources;\n+\n+import io.strimzi.api.kafka.model.Kafka;\n+import io.strimzi.api.kafka.model.KafkaBridge;\n+import io.strimzi.api.kafka.model.KafkaConnect;\n+import io.strimzi.api.kafka.model.KafkaConnectS2I;\n+import io.strimzi.api.kafka.model.KafkaConnector;\n+import io.strimzi.api.kafka.model.KafkaMirrorMaker;\n+import io.strimzi.api.kafka.model.KafkaMirrorMaker2;\n+import io.strimzi.api.kafka.model.KafkaRebalance;\n+import io.strimzi.systemtest.Constants;\n+\n+import java.time.Duration;\n+\n+public class ResourceOperation {\n+    public static long getTimeoutForResourceReadiness(String kind) {\n+        long timeout;\n+\n+        switch (kind) {\n+            case Kafka.RESOURCE_KIND:\n+                timeout = Duration.ofMinutes(14).toMillis();\n+                break;\n+            case KafkaConnect.RESOURCE_KIND:\n+            case KafkaConnectS2I.RESOURCE_KIND:\n+            case KafkaMirrorMaker2.RESOURCE_KIND:\n+            case Constants.DEPLOYMENT_CONFIG:\n+                timeout = Duration.ofMinutes(10).toMillis();\n+                break;\n+            case KafkaRebalance.RESOURCE_KIND:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNTg4Mg=="}, "originalCommit": {"oid": "d52381308b41750bfda47cbeae251be36267e8a9"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODYwODQxOnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/ResourceOperation.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjowMjoyOVrOGnwKsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjoyNjoyNVrOGnxHsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNjgxNg==", "bodyText": "I dont think this is a good aproach. The pods are ready after some time after creation, the number of pods doesn't affect it I think. It make sense for rolling updates", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3187#discussion_r444336816", "createdAt": "2020-06-23T16:02:29Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/ResourceOperation.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.resources;\n+\n+import io.strimzi.api.kafka.model.Kafka;\n+import io.strimzi.api.kafka.model.KafkaBridge;\n+import io.strimzi.api.kafka.model.KafkaConnect;\n+import io.strimzi.api.kafka.model.KafkaConnectS2I;\n+import io.strimzi.api.kafka.model.KafkaConnector;\n+import io.strimzi.api.kafka.model.KafkaMirrorMaker;\n+import io.strimzi.api.kafka.model.KafkaMirrorMaker2;\n+import io.strimzi.api.kafka.model.KafkaRebalance;\n+import io.strimzi.systemtest.Constants;\n+\n+import java.time.Duration;\n+\n+public class ResourceOperation {\n+    public static long getTimeoutForResourceReadiness(String kind) {\n+        long timeout;\n+\n+        switch (kind) {\n+            case Kafka.RESOURCE_KIND:\n+                timeout = Duration.ofMinutes(14).toMillis();\n+                break;\n+            case KafkaConnect.RESOURCE_KIND:\n+            case KafkaConnectS2I.RESOURCE_KIND:\n+            case KafkaMirrorMaker2.RESOURCE_KIND:\n+            case Constants.DEPLOYMENT_CONFIG:\n+                timeout = Duration.ofMinutes(10).toMillis();\n+                break;\n+            case KafkaRebalance.RESOURCE_KIND:\n+            case KafkaMirrorMaker.RESOURCE_KIND:\n+            case KafkaBridge.RESOURCE_KIND:\n+            case KafkaConnector.RESOURCE_KIND:\n+            case Constants.STATEFUL_SET:\n+            case Constants.DEPLOYMENT:\n+                timeout = Duration.ofMinutes(8).toMillis();\n+                break;\n+            case Constants.KAFKA_CRUISE_CONTROL:\n+            case Constants.KAFKA_EXPORTER:\n+                timeout = Duration.ofMinutes(4).toMillis();\n+                break;\n+            default:\n+                timeout = Duration.ofMinutes(2).toMillis();\n+        }\n+\n+        return timeout;\n+    }\n+\n+    public static long getTimeoutForPodsReadiness(int expectPods) {\n+        return Duration.ofMinutes(4).toMillis() * expectPods;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d52381308b41750bfda47cbeae251be36267e8a9"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0MjUyNQ==", "bodyText": "This is for the waitForPodsReady methods, not for creation .. should I change it?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3187#discussion_r444342525", "createdAt": "2020-06-23T16:10:48Z", "author": {"login": "im-konge"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/ResourceOperation.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.resources;\n+\n+import io.strimzi.api.kafka.model.Kafka;\n+import io.strimzi.api.kafka.model.KafkaBridge;\n+import io.strimzi.api.kafka.model.KafkaConnect;\n+import io.strimzi.api.kafka.model.KafkaConnectS2I;\n+import io.strimzi.api.kafka.model.KafkaConnector;\n+import io.strimzi.api.kafka.model.KafkaMirrorMaker;\n+import io.strimzi.api.kafka.model.KafkaMirrorMaker2;\n+import io.strimzi.api.kafka.model.KafkaRebalance;\n+import io.strimzi.systemtest.Constants;\n+\n+import java.time.Duration;\n+\n+public class ResourceOperation {\n+    public static long getTimeoutForResourceReadiness(String kind) {\n+        long timeout;\n+\n+        switch (kind) {\n+            case Kafka.RESOURCE_KIND:\n+                timeout = Duration.ofMinutes(14).toMillis();\n+                break;\n+            case KafkaConnect.RESOURCE_KIND:\n+            case KafkaConnectS2I.RESOURCE_KIND:\n+            case KafkaMirrorMaker2.RESOURCE_KIND:\n+            case Constants.DEPLOYMENT_CONFIG:\n+                timeout = Duration.ofMinutes(10).toMillis();\n+                break;\n+            case KafkaRebalance.RESOURCE_KIND:\n+            case KafkaMirrorMaker.RESOURCE_KIND:\n+            case KafkaBridge.RESOURCE_KIND:\n+            case KafkaConnector.RESOURCE_KIND:\n+            case Constants.STATEFUL_SET:\n+            case Constants.DEPLOYMENT:\n+                timeout = Duration.ofMinutes(8).toMillis();\n+                break;\n+            case Constants.KAFKA_CRUISE_CONTROL:\n+            case Constants.KAFKA_EXPORTER:\n+                timeout = Duration.ofMinutes(4).toMillis();\n+                break;\n+            default:\n+                timeout = Duration.ofMinutes(2).toMillis();\n+        }\n+\n+        return timeout;\n+    }\n+\n+    public static long getTimeoutForPodsReadiness(int expectPods) {\n+        return Duration.ofMinutes(4).toMillis() * expectPods;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNjgxNg=="}, "originalCommit": {"oid": "d52381308b41750bfda47cbeae251be36267e8a9"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0NzY2Nw==", "bodyText": "waitForPodsReady are used for pod readiness after creation or when rolling update already finished so you don't need to wait x * number of pods because you will probably wait only for 1 pod in that case.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3187#discussion_r444347667", "createdAt": "2020-06-23T16:18:48Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/ResourceOperation.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.resources;\n+\n+import io.strimzi.api.kafka.model.Kafka;\n+import io.strimzi.api.kafka.model.KafkaBridge;\n+import io.strimzi.api.kafka.model.KafkaConnect;\n+import io.strimzi.api.kafka.model.KafkaConnectS2I;\n+import io.strimzi.api.kafka.model.KafkaConnector;\n+import io.strimzi.api.kafka.model.KafkaMirrorMaker;\n+import io.strimzi.api.kafka.model.KafkaMirrorMaker2;\n+import io.strimzi.api.kafka.model.KafkaRebalance;\n+import io.strimzi.systemtest.Constants;\n+\n+import java.time.Duration;\n+\n+public class ResourceOperation {\n+    public static long getTimeoutForResourceReadiness(String kind) {\n+        long timeout;\n+\n+        switch (kind) {\n+            case Kafka.RESOURCE_KIND:\n+                timeout = Duration.ofMinutes(14).toMillis();\n+                break;\n+            case KafkaConnect.RESOURCE_KIND:\n+            case KafkaConnectS2I.RESOURCE_KIND:\n+            case KafkaMirrorMaker2.RESOURCE_KIND:\n+            case Constants.DEPLOYMENT_CONFIG:\n+                timeout = Duration.ofMinutes(10).toMillis();\n+                break;\n+            case KafkaRebalance.RESOURCE_KIND:\n+            case KafkaMirrorMaker.RESOURCE_KIND:\n+            case KafkaBridge.RESOURCE_KIND:\n+            case KafkaConnector.RESOURCE_KIND:\n+            case Constants.STATEFUL_SET:\n+            case Constants.DEPLOYMENT:\n+                timeout = Duration.ofMinutes(8).toMillis();\n+                break;\n+            case Constants.KAFKA_CRUISE_CONTROL:\n+            case Constants.KAFKA_EXPORTER:\n+                timeout = Duration.ofMinutes(4).toMillis();\n+                break;\n+            default:\n+                timeout = Duration.ofMinutes(2).toMillis();\n+        }\n+\n+        return timeout;\n+    }\n+\n+    public static long getTimeoutForPodsReadiness(int expectPods) {\n+        return Duration.ofMinutes(4).toMillis() * expectPods;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNjgxNg=="}, "originalCommit": {"oid": "d52381308b41750bfda47cbeae251be36267e8a9"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM1MjQzNA==", "bodyText": "When you are waiting for pods, do you think that for example 5minutes will be enough for 3 pods to get ready? If yes, I'm gonna change it to fixed 5 minutes \ud83d\ude04", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3187#discussion_r444352434", "createdAt": "2020-06-23T16:26:25Z", "author": {"login": "im-konge"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/ResourceOperation.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.resources;\n+\n+import io.strimzi.api.kafka.model.Kafka;\n+import io.strimzi.api.kafka.model.KafkaBridge;\n+import io.strimzi.api.kafka.model.KafkaConnect;\n+import io.strimzi.api.kafka.model.KafkaConnectS2I;\n+import io.strimzi.api.kafka.model.KafkaConnector;\n+import io.strimzi.api.kafka.model.KafkaMirrorMaker;\n+import io.strimzi.api.kafka.model.KafkaMirrorMaker2;\n+import io.strimzi.api.kafka.model.KafkaRebalance;\n+import io.strimzi.systemtest.Constants;\n+\n+import java.time.Duration;\n+\n+public class ResourceOperation {\n+    public static long getTimeoutForResourceReadiness(String kind) {\n+        long timeout;\n+\n+        switch (kind) {\n+            case Kafka.RESOURCE_KIND:\n+                timeout = Duration.ofMinutes(14).toMillis();\n+                break;\n+            case KafkaConnect.RESOURCE_KIND:\n+            case KafkaConnectS2I.RESOURCE_KIND:\n+            case KafkaMirrorMaker2.RESOURCE_KIND:\n+            case Constants.DEPLOYMENT_CONFIG:\n+                timeout = Duration.ofMinutes(10).toMillis();\n+                break;\n+            case KafkaRebalance.RESOURCE_KIND:\n+            case KafkaMirrorMaker.RESOURCE_KIND:\n+            case KafkaBridge.RESOURCE_KIND:\n+            case KafkaConnector.RESOURCE_KIND:\n+            case Constants.STATEFUL_SET:\n+            case Constants.DEPLOYMENT:\n+                timeout = Duration.ofMinutes(8).toMillis();\n+                break;\n+            case Constants.KAFKA_CRUISE_CONTROL:\n+            case Constants.KAFKA_EXPORTER:\n+                timeout = Duration.ofMinutes(4).toMillis();\n+                break;\n+            default:\n+                timeout = Duration.ofMinutes(2).toMillis();\n+        }\n+\n+        return timeout;\n+    }\n+\n+    public static long getTimeoutForPodsReadiness(int expectPods) {\n+        return Duration.ofMinutes(4).toMillis() * expectPods;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNjgxNg=="}, "originalCommit": {"oid": "d52381308b41750bfda47cbeae251be36267e8a9"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1664, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}