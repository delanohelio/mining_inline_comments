{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwOTc5OTUx", "number": 2717, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNzowOToyOFrODpxGqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODo0OTowMlrODp-r4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTIyNzI5OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/ClientUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNzowOToyOFrOF5JSlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwODozMTo1OVrOF5LCEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ2NTM2NQ==", "bodyText": "It's not \"always\" internal client right? It depends on the specific IKafkaClient instance.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2717#discussion_r395465365", "createdAt": "2020-03-20T07:09:28Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/ClientUtils.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.utils;\n+\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.systemtest.kafkaclients.IKafkaClient;\n+import io.strimzi.test.TestUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.io.IOException;\n+import java.util.Random;\n+\n+/**\n+ * ClientUtils class, which provides static methods for the all type clients\n+ * @see io.strimzi.systemtest.kafkaclients.externalClients.OauthKafkaClient\n+ * @see io.strimzi.systemtest.kafkaclients.externalClients.TracingKafkaClient\n+ * @see io.strimzi.systemtest.kafkaclients.externalClients.KafkaClient\n+ * @see io.strimzi.systemtest.kafkaclients.internalClients.InternalKafkaClient\n+ */\n+public class ClientUtils {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(ClientUtils.class);\n+\n+    // ensuring that object can not be created outside of class\n+    private ClientUtils() {}\n+\n+    // TODO: all topicName, namespace, clusterName, userName should be removed after -> https://github.com/strimzi/strimzi-kafka-operator/pull/2520\n+    public static void waitUntilClientReceivedMessagesTls(IKafkaClient<Integer> kafkaClient, String topicName, String namespace,\n+                                                       String clusterName, String userName, int exceptedMessages) {\n+        TestUtils.waitFor(\"Internal kafka client received messages\", Constants.GLOBAL_CLIENTS_POLL, Constants.GLOBAL_TIMEOUT,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dcaea845e6e422841e0c630e3be290f70934f79"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ5MzkwNQ==", "bodyText": "Och well, good catch Paolo.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2717#discussion_r395493905", "createdAt": "2020-03-20T08:31:59Z", "author": {"login": "see-quick"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/ClientUtils.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.utils;\n+\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.systemtest.kafkaclients.IKafkaClient;\n+import io.strimzi.test.TestUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.io.IOException;\n+import java.util.Random;\n+\n+/**\n+ * ClientUtils class, which provides static methods for the all type clients\n+ * @see io.strimzi.systemtest.kafkaclients.externalClients.OauthKafkaClient\n+ * @see io.strimzi.systemtest.kafkaclients.externalClients.TracingKafkaClient\n+ * @see io.strimzi.systemtest.kafkaclients.externalClients.KafkaClient\n+ * @see io.strimzi.systemtest.kafkaclients.internalClients.InternalKafkaClient\n+ */\n+public class ClientUtils {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(ClientUtils.class);\n+\n+    // ensuring that object can not be created outside of class\n+    private ClientUtils() {}\n+\n+    // TODO: all topicName, namespace, clusterName, userName should be removed after -> https://github.com/strimzi/strimzi-kafka-operator/pull/2520\n+    public static void waitUntilClientReceivedMessagesTls(IKafkaClient<Integer> kafkaClient, String topicName, String namespace,\n+                                                       String clusterName, String userName, int exceptedMessages) {\n+        TestUtils.waitFor(\"Internal kafka client received messages\", Constants.GLOBAL_CLIENTS_POLL, Constants.GLOBAL_TIMEOUT,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ2NTM2NQ=="}, "originalCommit": {"oid": "4dcaea845e6e422841e0c630e3be290f70934f79"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzQ1MjQ4OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/StUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODo0OTowMlrOF5fhdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMToyMDowNlrOF6rq3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyOTYyMw==", "bodyText": "Just thinking...shouldn't be this in PodUtils ?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2717#discussion_r395829623", "createdAt": "2020-03-20T18:49:02Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/StUtils.java", "diffHunk": "@@ -48,14 +48,35 @@\n \n     private StUtils() { }\n \n-    public static void waitForReconciliation(String testClass, String testName, String namespace) {\n-        LOGGER.info(\"Waiting for reconciliation\");\n-        String reconciliation = timeMeasuringSystem.startOperation(Operation.NEXT_RECONCILIATION);\n-        TestUtils.waitFor(\"Wait till another rolling update starts\", Constants.CO_OPERATION_TIMEOUT_POLL, Constants.RECONCILIATION_INTERVAL + 30000,\n-            () -> !cmdKubeClient().searchInLog(\"deploy\", \"strimzi-cluster-operator\",\n-                timeMeasuringSystem.getCurrentDuration(testClass, testName, reconciliation),\n-                \"'Triggering periodic reconciliation for namespace \" + namespace + \"'\").isEmpty());\n-        timeMeasuringSystem.stopOperation(reconciliation);\n+    /**\n+     * Method waitForPodsStability ensuring for every pod listed for kafka or zookeeper statefulSet will be controlling\n+     * their status in Running phase. If the pod will be running for selected time #Constants.GLOBAL_RECONCILIATION_COUNT\n+     * pod is considered as a stable. Otherwise this procedure will be repeat.\n+     * @param pods all pods that will be verified\n+     */\n+    public static void waitUntilPodsStability(List<Pod> pods) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dd497a48b83c1bee1b75ec8ab4ece038b68d037"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3NzIxMg==", "bodyText": "fair point.. done )", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2717#discussion_r397077212", "createdAt": "2020-03-24T11:20:06Z", "author": {"login": "see-quick"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/StUtils.java", "diffHunk": "@@ -48,14 +48,35 @@\n \n     private StUtils() { }\n \n-    public static void waitForReconciliation(String testClass, String testName, String namespace) {\n-        LOGGER.info(\"Waiting for reconciliation\");\n-        String reconciliation = timeMeasuringSystem.startOperation(Operation.NEXT_RECONCILIATION);\n-        TestUtils.waitFor(\"Wait till another rolling update starts\", Constants.CO_OPERATION_TIMEOUT_POLL, Constants.RECONCILIATION_INTERVAL + 30000,\n-            () -> !cmdKubeClient().searchInLog(\"deploy\", \"strimzi-cluster-operator\",\n-                timeMeasuringSystem.getCurrentDuration(testClass, testName, reconciliation),\n-                \"'Triggering periodic reconciliation for namespace \" + namespace + \"'\").isEmpty());\n-        timeMeasuringSystem.stopOperation(reconciliation);\n+    /**\n+     * Method waitForPodsStability ensuring for every pod listed for kafka or zookeeper statefulSet will be controlling\n+     * their status in Running phase. If the pod will be running for selected time #Constants.GLOBAL_RECONCILIATION_COUNT\n+     * pod is considered as a stable. Otherwise this procedure will be repeat.\n+     * @param pods all pods that will be verified\n+     */\n+    public static void waitUntilPodsStability(List<Pod> pods) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyOTYyMw=="}, "originalCommit": {"oid": "7dd497a48b83c1bee1b75ec8ab4ece038b68d037"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 321, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}