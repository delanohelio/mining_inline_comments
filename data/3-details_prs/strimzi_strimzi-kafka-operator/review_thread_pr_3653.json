{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3NDAyNDEx", "number": 3653, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxODoxMjoyOVrOEjti7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzozMjoxNVrOEj7PiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODgxODM4OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/io/strimzi/api/kafka/model/ApiEvolutionCrdIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxODoxMjoyOVrOHSOJTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxODoxMjoyOVrOHSOJTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg2ODE3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        v1beta2Create(name, mapListener(), null);\n          \n          \n            \n                        Exception e = assertThrows(() -> v1beta2Create(name, mapListener(), null))", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#discussion_r488868173", "createdAt": "2020-09-15T18:12:29Z", "author": {"login": "samuel-hawker"}, "path": "api/src/test/java/io/strimzi/api/kafka/model/ApiEvolutionCrdIT.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.api.kafka.model;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;\n+import io.fabric8.kubernetes.api.model.apiextensions.CustomResourceDefinition;\n+import io.fabric8.kubernetes.client.dsl.NonNamespaceOperation;\n+import io.fabric8.kubernetes.client.dsl.Resource;\n+import io.strimzi.api.kafka.Crds;\n+import io.strimzi.api.kafka.KafkaList;\n+import io.strimzi.api.kafka.model.listener.KafkaListeners;\n+import io.strimzi.api.kafka.model.listener.KafkaListenersBuilder;\n+import io.strimzi.api.kafka.model.listener.arraylistener.ArrayOrObjectKafkaListeners;\n+import io.strimzi.api.kafka.model.listener.arraylistener.GenericKafkaListener;\n+import io.strimzi.api.kafka.model.listener.arraylistener.GenericKafkaListenerBuilder;\n+import io.strimzi.api.kafka.model.listener.arraylistener.KafkaListenerType;\n+import io.strimzi.test.TestUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.Collections.singletonList;\n+\n+public class ApiEvolutionCrdIT extends AbstractCrdIT {\n+    private static final Logger LOGGER = LogManager.getLogger(ApiEvolutionCrdIT.class);\n+\n+    public static final String NAMESPACE = \"api-evolution-it\";\n+\n+    @Test\n+    public void kafkaApiEvolution() throws IOException {\n+        assumeKube1_16Plus();\n+        // Create CRD with v1beta1 having map-or-list listeners (and no v1beta2)\n+        LOGGER.info(\"Create CRD\");\n+        long crdGeneration = createOrReplaceCrd(\"src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka-v1alpha1-v1beta1-store-v1beta1.yaml\");\n+        waitForCrd(\"crd\", \"kafkas.kafka.strimzi.io\");\n+\n+        // Create one CR instance with a list listener and one with a map listeners\n+        LOGGER.info(\"Create instances\");\n+        v1beta1Create(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\", mapListener(), null);\n+        v1beta1Create(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\", null, listListener());\n+\n+        // Check we can consume these via v1beta1 endpoint\n+        LOGGER.info(\"Assert instances via v1beta1\");\n+        assertIsMapListener(v1beta1Get(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta1Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+\n+        // Replace CRD with one having v1beta2 which is served but not stored (v1beta1 is stored)\n+        LOGGER.info(\"Replace CRD\");\n+        long crdGeneration2 = createOrReplaceCrd(\"src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka-v1beta1-v1beta2-store-v1beta1.yaml\");\n+        waitForCrdUpdate(crdGeneration2);\n+\n+        // Check we can't create a v1beta2 with a map\n+        assertV1beta2CreateFailure(\"v1beta2.map.v1beta1.stored.via.v1beta2.endpoint\");\n+\n+        // Create a v1beta2 with list\n+        LOGGER.info(\"Create 3rd instance via v1beta2 endpoint\");\n+        v1beta2Create(\"v1beta2.list.v1beta1.stored.via.v1beta1.endpoint\", null, listListener());\n+\n+        // Check we can still consume all CRs via both endpoints\n+        LOGGER.info(\"Assert instances via both endpoints\");\n+        assertIsMapListener(v1beta1Get(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta1Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta1Get(\"v1beta2.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsMapListener(v1beta2Get(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta2Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta2Get(\"v1beta2.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+\n+        // Upgrade CRD so v1beta2 is stored\n+        LOGGER.info(\"Update CRD so v1beta2 is stored\");\n+        long crdGeneration3 = createOrReplaceCrd(\"src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka-v1beta1-v1beta2-store-v1beta2.yaml\");\n+        waitForCrdUpdate(crdGeneration3);\n+\n+        // Check we can still consume all CRs via both endpoints\n+        LOGGER.info(\"Assert instances via both endpoints\");\n+        assertIsMapListener(v1beta1Get(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta1Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta1Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsMapListener(v1beta2Get(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta2Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta2Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+\n+        // Check we can still create/update v1beta1 endpoint with a map listeners\n+        v1beta1Create(\"v1beta1.map.v1beta2.stored.via.v1beta1.endpoint\", mapListener(), null);\n+        // But we can't via the v1beta2 endpoint\n+        assertV1beta2CreateFailure(\"v1beta2.map.v1beta2.stored.via.v1beta2.endpoint\");\n+        // But lists are still OK\n+        v1beta1Create(\"v1beta1.list.v1beta2.stored.via.v1beta1.endpoint\", null, listListener());\n+        v1beta2Create(\"v1beta2.list.v1beta2.stored.via.v1beta2.endpoint\", null, listListener());\n+    }\n+\n+    private void assertV1beta2CreateFailure(String name) {\n+        try {\n+            LOGGER.info(\"Check can't create map-listener via v1beta2\");\n+            v1beta2Create(name, mapListener(), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f44863ce8054e309240493821527e26a0034ed7"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODg2NDkwOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/io/strimzi/api/kafka/model/ApiEvolutionCrdIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxODoyNjowMlrOHSOl_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODoxNjowNFrOHSlclA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg3NTUxNg==", "bodyText": "Wouldn't be better to name it createInternalPlainListener or am I missing something?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#discussion_r488875516", "createdAt": "2020-09-15T18:26:02Z", "author": {"login": "see-quick"}, "path": "api/src/test/java/io/strimzi/api/kafka/model/ApiEvolutionCrdIT.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.api.kafka.model;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;\n+import io.fabric8.kubernetes.api.model.apiextensions.CustomResourceDefinition;\n+import io.fabric8.kubernetes.client.dsl.NonNamespaceOperation;\n+import io.fabric8.kubernetes.client.dsl.Resource;\n+import io.strimzi.api.kafka.Crds;\n+import io.strimzi.api.kafka.KafkaList;\n+import io.strimzi.api.kafka.model.listener.KafkaListeners;\n+import io.strimzi.api.kafka.model.listener.KafkaListenersBuilder;\n+import io.strimzi.api.kafka.model.listener.arraylistener.ArrayOrObjectKafkaListeners;\n+import io.strimzi.api.kafka.model.listener.arraylistener.GenericKafkaListener;\n+import io.strimzi.api.kafka.model.listener.arraylistener.GenericKafkaListenerBuilder;\n+import io.strimzi.api.kafka.model.listener.arraylistener.KafkaListenerType;\n+import io.strimzi.test.TestUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.Collections.singletonList;\n+\n+public class ApiEvolutionCrdIT extends AbstractCrdIT {\n+    private static final Logger LOGGER = LogManager.getLogger(ApiEvolutionCrdIT.class);\n+\n+    public static final String NAMESPACE = \"api-evolution-it\";\n+\n+    @Test\n+    public void kafkaApiEvolution() throws IOException {\n+        assumeKube1_16Plus();\n+        // Create CRD with v1beta1 having map-or-list listeners (and no v1beta2)\n+        LOGGER.info(\"Create CRD\");\n+        long crdGeneration = createOrReplaceCrd(\"src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka-v1alpha1-v1beta1-store-v1beta1.yaml\");\n+        waitForCrd(\"crd\", \"kafkas.kafka.strimzi.io\");\n+\n+        // Create one CR instance with a list listener and one with a map listeners\n+        LOGGER.info(\"Create instances\");\n+        v1beta1Create(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\", mapListener(), null);\n+        v1beta1Create(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\", null, listListener());\n+\n+        // Check we can consume these via v1beta1 endpoint\n+        LOGGER.info(\"Assert instances via v1beta1\");\n+        assertIsMapListener(v1beta1Get(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta1Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+\n+        // Replace CRD with one having v1beta2 which is served but not stored (v1beta1 is stored)\n+        LOGGER.info(\"Replace CRD\");\n+        long crdGeneration2 = createOrReplaceCrd(\"src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka-v1beta1-v1beta2-store-v1beta1.yaml\");\n+        waitForCrdUpdate(crdGeneration2);\n+\n+        // Check we can't create a v1beta2 with a map\n+        assertV1beta2CreateFailure(\"v1beta2.map.v1beta1.stored.via.v1beta2.endpoint\");\n+\n+        // Create a v1beta2 with list\n+        LOGGER.info(\"Create 3rd instance via v1beta2 endpoint\");\n+        v1beta2Create(\"v1beta2.list.v1beta1.stored.via.v1beta1.endpoint\", null, listListener());\n+\n+        // Check we can still consume all CRs via both endpoints\n+        LOGGER.info(\"Assert instances via both endpoints\");\n+        assertIsMapListener(v1beta1Get(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta1Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta1Get(\"v1beta2.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsMapListener(v1beta2Get(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta2Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta2Get(\"v1beta2.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+\n+        // Upgrade CRD so v1beta2 is stored\n+        LOGGER.info(\"Update CRD so v1beta2 is stored\");\n+        long crdGeneration3 = createOrReplaceCrd(\"src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka-v1beta1-v1beta2-store-v1beta2.yaml\");\n+        waitForCrdUpdate(crdGeneration3);\n+\n+        // Check we can still consume all CRs via both endpoints\n+        LOGGER.info(\"Assert instances via both endpoints\");\n+        assertIsMapListener(v1beta1Get(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta1Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta1Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsMapListener(v1beta2Get(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta2Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta2Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+\n+        // Check we can still create/update v1beta1 endpoint with a map listeners\n+        v1beta1Create(\"v1beta1.map.v1beta2.stored.via.v1beta1.endpoint\", mapListener(), null);\n+        // But we can't via the v1beta2 endpoint\n+        assertV1beta2CreateFailure(\"v1beta2.map.v1beta2.stored.via.v1beta2.endpoint\");\n+        // But lists are still OK\n+        v1beta1Create(\"v1beta1.list.v1beta2.stored.via.v1beta1.endpoint\", null, listListener());\n+        v1beta2Create(\"v1beta2.list.v1beta2.stored.via.v1beta2.endpoint\", null, listListener());\n+    }\n+\n+    private void assertV1beta2CreateFailure(String name) {\n+        try {\n+            LOGGER.info(\"Check can't create map-listener via v1beta2\");\n+            v1beta2Create(name, mapListener(), null);\n+            Assertions.fail();\n+        } catch (RuntimeException e) {\n+            LOGGER.info(\"Exception, good\", e);\n+            Assertions.assertTrue(e.getMessage().contains(\n+                    \"Kafka.kafka.strimzi.io \\\"\" + name + \"\\\" is invalid: \" +\n+                    \"spec.kafka.listeners: Invalid value: \\\"object\\\": \" +\n+                    \"spec.kafka.listeners in body must be of type array:\"));\n+        }\n+    }\n+\n+    private void v1beta1Create(String name, KafkaListeners kafkaListeners, GenericKafkaListener o) {\n+        v1beta1Op().create(buildKafkaCr(Kafka.V1BETA1, name, kafkaListeners, o));\n+    }\n+\n+    private void v1beta2Create(String name, KafkaListeners kafkaListeners, GenericKafkaListener o) {\n+        v1beta2Op().create(buildKafkaCr(Kafka.V1BETA2, name, kafkaListeners, o));\n+    }\n+\n+    private Kafka v1beta1Get(String s) {\n+        return v1beta1Op().withName(s).get();\n+    }\n+\n+    private Kafka v1beta2Get(String s) {\n+        return v1beta2Op().withName(s).get();\n+    }\n+\n+    private void waitForCrdUpdate(long crdGeneration2) {\n+        TestUtils.waitFor(\"CRD update\", 1000, 30000, () ->\n+                crdGeneration2 == cluster.client().getClient().customResourceDefinitions()\n+                        .withName(\"kafkas.kafka.strimzi.io\").get()\n+                        .getMetadata().getGeneration());\n+    }\n+\n+    private Long createOrReplaceCrd(String s) throws IOException {\n+        File src = new File(s);\n+        if (!src.exists()) {\n+            throw new RuntimeException(src.getAbsolutePath() + \" does not exist\");\n+        }\n+        CustomResourceDefinition crd = new YAMLMapper().readValue(src, CustomResourceDefinition.class);\n+        LOGGER.info(\"Create or replacing {} with versions {}\", crd.getMetadata().getName(),\n+                crd.getSpec().getVersions().stream()\n+                        .map(v -> v.getName() + \"{stored=\" + v.getStorage() + \"}\")\n+                        .collect(Collectors.joining(\", \")));\n+        return cluster.client().getClient().customResourceDefinitions().createOrReplace(crd).getMetadata().getGeneration();\n+    }\n+\n+    private void deleteCrd(String s) throws IOException {\n+        File src = new File(s);\n+        if (!src.exists()) {\n+            throw new RuntimeException(src.getAbsolutePath() + \" does not exist\");\n+        }\n+        CustomResourceDefinition crd = new YAMLMapper().readValue(src, CustomResourceDefinition.class);\n+        LOGGER.info(\"Create or replacing {} with versions {}\", crd.getMetadata().getName(),\n+                crd.getSpec().getVersions().stream()\n+                        .map(v -> v.getName() + \"{stored=\" + v.getStorage() + \"}\")\n+                        .collect(Collectors.joining(\", \")));\n+        cluster.client().getClient().customResourceDefinitions().delete(crd);\n+    }\n+\n+    private void assertIsMapListener(Kafka kafka) {\n+        Assertions.assertNotNull(kafka);\n+        Assertions.assertNotNull(kafka.getSpec());\n+        Assertions.assertNotNull(kafka.getSpec().getKafka());\n+        Assertions.assertNotNull(kafka.getSpec().getKafka().getListeners());\n+        Assertions.assertNotNull(kafka.getSpec().getKafka().getListeners().getKafkaListeners());\n+        Assertions.assertNull(kafka.getSpec().getKafka().getListeners().getGenericKafkaListeners());\n+    }\n+\n+    private void assertIsListListener(Kafka kafka) {\n+        Assertions.assertNotNull(kafka);\n+        Assertions.assertNotNull(kafka.getSpec());\n+        Assertions.assertNotNull(kafka.getSpec().getKafka());\n+        Assertions.assertNotNull(kafka.getSpec().getKafka().getListeners());\n+        Assertions.assertNull(kafka.getSpec().getKafka().getListeners().getKafkaListeners());\n+        Assertions.assertNotNull(kafka.getSpec().getKafka().getListeners().getGenericKafkaListeners());\n+    }\n+\n+    private NonNamespaceOperation<Kafka, KafkaList, DoneableKafka, Resource<Kafka, DoneableKafka>> v1beta1Op() {\n+        return Crds.kafkaV1Beta1Operation(cluster.client().getClient()).inNamespace(NAMESPACE);\n+    }\n+\n+    private NonNamespaceOperation<Kafka, KafkaList, DoneableKafka, Resource<Kafka, DoneableKafka>> v1beta2Op() {\n+        return Crds.kafkaV1Beta2Operation(cluster.client().getClient()).inNamespace(NAMESPACE);\n+    }\n+\n+    private GenericKafkaListener listListener() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f44863ce8054e309240493821527e26a0034ed7"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI0OTk0MA==", "bodyText": "The precise details of the listener don't matter (the CR is never actually consumed by the operator), instead what we're testing here is that we API server lets us create a Kafka CR with listeners as a list rather than a map.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#discussion_r489249940", "createdAt": "2020-09-16T08:16:04Z", "author": {"login": "tombentley"}, "path": "api/src/test/java/io/strimzi/api/kafka/model/ApiEvolutionCrdIT.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.api.kafka.model;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;\n+import io.fabric8.kubernetes.api.model.apiextensions.CustomResourceDefinition;\n+import io.fabric8.kubernetes.client.dsl.NonNamespaceOperation;\n+import io.fabric8.kubernetes.client.dsl.Resource;\n+import io.strimzi.api.kafka.Crds;\n+import io.strimzi.api.kafka.KafkaList;\n+import io.strimzi.api.kafka.model.listener.KafkaListeners;\n+import io.strimzi.api.kafka.model.listener.KafkaListenersBuilder;\n+import io.strimzi.api.kafka.model.listener.arraylistener.ArrayOrObjectKafkaListeners;\n+import io.strimzi.api.kafka.model.listener.arraylistener.GenericKafkaListener;\n+import io.strimzi.api.kafka.model.listener.arraylistener.GenericKafkaListenerBuilder;\n+import io.strimzi.api.kafka.model.listener.arraylistener.KafkaListenerType;\n+import io.strimzi.test.TestUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.Collections.singletonList;\n+\n+public class ApiEvolutionCrdIT extends AbstractCrdIT {\n+    private static final Logger LOGGER = LogManager.getLogger(ApiEvolutionCrdIT.class);\n+\n+    public static final String NAMESPACE = \"api-evolution-it\";\n+\n+    @Test\n+    public void kafkaApiEvolution() throws IOException {\n+        assumeKube1_16Plus();\n+        // Create CRD with v1beta1 having map-or-list listeners (and no v1beta2)\n+        LOGGER.info(\"Create CRD\");\n+        long crdGeneration = createOrReplaceCrd(\"src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka-v1alpha1-v1beta1-store-v1beta1.yaml\");\n+        waitForCrd(\"crd\", \"kafkas.kafka.strimzi.io\");\n+\n+        // Create one CR instance with a list listener and one with a map listeners\n+        LOGGER.info(\"Create instances\");\n+        v1beta1Create(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\", mapListener(), null);\n+        v1beta1Create(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\", null, listListener());\n+\n+        // Check we can consume these via v1beta1 endpoint\n+        LOGGER.info(\"Assert instances via v1beta1\");\n+        assertIsMapListener(v1beta1Get(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta1Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+\n+        // Replace CRD with one having v1beta2 which is served but not stored (v1beta1 is stored)\n+        LOGGER.info(\"Replace CRD\");\n+        long crdGeneration2 = createOrReplaceCrd(\"src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka-v1beta1-v1beta2-store-v1beta1.yaml\");\n+        waitForCrdUpdate(crdGeneration2);\n+\n+        // Check we can't create a v1beta2 with a map\n+        assertV1beta2CreateFailure(\"v1beta2.map.v1beta1.stored.via.v1beta2.endpoint\");\n+\n+        // Create a v1beta2 with list\n+        LOGGER.info(\"Create 3rd instance via v1beta2 endpoint\");\n+        v1beta2Create(\"v1beta2.list.v1beta1.stored.via.v1beta1.endpoint\", null, listListener());\n+\n+        // Check we can still consume all CRs via both endpoints\n+        LOGGER.info(\"Assert instances via both endpoints\");\n+        assertIsMapListener(v1beta1Get(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta1Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta1Get(\"v1beta2.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsMapListener(v1beta2Get(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta2Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta2Get(\"v1beta2.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+\n+        // Upgrade CRD so v1beta2 is stored\n+        LOGGER.info(\"Update CRD so v1beta2 is stored\");\n+        long crdGeneration3 = createOrReplaceCrd(\"src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka-v1beta1-v1beta2-store-v1beta2.yaml\");\n+        waitForCrdUpdate(crdGeneration3);\n+\n+        // Check we can still consume all CRs via both endpoints\n+        LOGGER.info(\"Assert instances via both endpoints\");\n+        assertIsMapListener(v1beta1Get(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta1Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta1Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsMapListener(v1beta2Get(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta2Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta2Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+\n+        // Check we can still create/update v1beta1 endpoint with a map listeners\n+        v1beta1Create(\"v1beta1.map.v1beta2.stored.via.v1beta1.endpoint\", mapListener(), null);\n+        // But we can't via the v1beta2 endpoint\n+        assertV1beta2CreateFailure(\"v1beta2.map.v1beta2.stored.via.v1beta2.endpoint\");\n+        // But lists are still OK\n+        v1beta1Create(\"v1beta1.list.v1beta2.stored.via.v1beta1.endpoint\", null, listListener());\n+        v1beta2Create(\"v1beta2.list.v1beta2.stored.via.v1beta2.endpoint\", null, listListener());\n+    }\n+\n+    private void assertV1beta2CreateFailure(String name) {\n+        try {\n+            LOGGER.info(\"Check can't create map-listener via v1beta2\");\n+            v1beta2Create(name, mapListener(), null);\n+            Assertions.fail();\n+        } catch (RuntimeException e) {\n+            LOGGER.info(\"Exception, good\", e);\n+            Assertions.assertTrue(e.getMessage().contains(\n+                    \"Kafka.kafka.strimzi.io \\\"\" + name + \"\\\" is invalid: \" +\n+                    \"spec.kafka.listeners: Invalid value: \\\"object\\\": \" +\n+                    \"spec.kafka.listeners in body must be of type array:\"));\n+        }\n+    }\n+\n+    private void v1beta1Create(String name, KafkaListeners kafkaListeners, GenericKafkaListener o) {\n+        v1beta1Op().create(buildKafkaCr(Kafka.V1BETA1, name, kafkaListeners, o));\n+    }\n+\n+    private void v1beta2Create(String name, KafkaListeners kafkaListeners, GenericKafkaListener o) {\n+        v1beta2Op().create(buildKafkaCr(Kafka.V1BETA2, name, kafkaListeners, o));\n+    }\n+\n+    private Kafka v1beta1Get(String s) {\n+        return v1beta1Op().withName(s).get();\n+    }\n+\n+    private Kafka v1beta2Get(String s) {\n+        return v1beta2Op().withName(s).get();\n+    }\n+\n+    private void waitForCrdUpdate(long crdGeneration2) {\n+        TestUtils.waitFor(\"CRD update\", 1000, 30000, () ->\n+                crdGeneration2 == cluster.client().getClient().customResourceDefinitions()\n+                        .withName(\"kafkas.kafka.strimzi.io\").get()\n+                        .getMetadata().getGeneration());\n+    }\n+\n+    private Long createOrReplaceCrd(String s) throws IOException {\n+        File src = new File(s);\n+        if (!src.exists()) {\n+            throw new RuntimeException(src.getAbsolutePath() + \" does not exist\");\n+        }\n+        CustomResourceDefinition crd = new YAMLMapper().readValue(src, CustomResourceDefinition.class);\n+        LOGGER.info(\"Create or replacing {} with versions {}\", crd.getMetadata().getName(),\n+                crd.getSpec().getVersions().stream()\n+                        .map(v -> v.getName() + \"{stored=\" + v.getStorage() + \"}\")\n+                        .collect(Collectors.joining(\", \")));\n+        return cluster.client().getClient().customResourceDefinitions().createOrReplace(crd).getMetadata().getGeneration();\n+    }\n+\n+    private void deleteCrd(String s) throws IOException {\n+        File src = new File(s);\n+        if (!src.exists()) {\n+            throw new RuntimeException(src.getAbsolutePath() + \" does not exist\");\n+        }\n+        CustomResourceDefinition crd = new YAMLMapper().readValue(src, CustomResourceDefinition.class);\n+        LOGGER.info(\"Create or replacing {} with versions {}\", crd.getMetadata().getName(),\n+                crd.getSpec().getVersions().stream()\n+                        .map(v -> v.getName() + \"{stored=\" + v.getStorage() + \"}\")\n+                        .collect(Collectors.joining(\", \")));\n+        cluster.client().getClient().customResourceDefinitions().delete(crd);\n+    }\n+\n+    private void assertIsMapListener(Kafka kafka) {\n+        Assertions.assertNotNull(kafka);\n+        Assertions.assertNotNull(kafka.getSpec());\n+        Assertions.assertNotNull(kafka.getSpec().getKafka());\n+        Assertions.assertNotNull(kafka.getSpec().getKafka().getListeners());\n+        Assertions.assertNotNull(kafka.getSpec().getKafka().getListeners().getKafkaListeners());\n+        Assertions.assertNull(kafka.getSpec().getKafka().getListeners().getGenericKafkaListeners());\n+    }\n+\n+    private void assertIsListListener(Kafka kafka) {\n+        Assertions.assertNotNull(kafka);\n+        Assertions.assertNotNull(kafka.getSpec());\n+        Assertions.assertNotNull(kafka.getSpec().getKafka());\n+        Assertions.assertNotNull(kafka.getSpec().getKafka().getListeners());\n+        Assertions.assertNull(kafka.getSpec().getKafka().getListeners().getKafkaListeners());\n+        Assertions.assertNotNull(kafka.getSpec().getKafka().getListeners().getGenericKafkaListeners());\n+    }\n+\n+    private NonNamespaceOperation<Kafka, KafkaList, DoneableKafka, Resource<Kafka, DoneableKafka>> v1beta1Op() {\n+        return Crds.kafkaV1Beta1Operation(cluster.client().getClient()).inNamespace(NAMESPACE);\n+    }\n+\n+    private NonNamespaceOperation<Kafka, KafkaList, DoneableKafka, Resource<Kafka, DoneableKafka>> v1beta2Op() {\n+        return Crds.kafkaV1Beta2Operation(cluster.client().getClient()).inNamespace(NAMESPACE);\n+    }\n+\n+    private GenericKafkaListener listListener() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg3NTUxNg=="}, "originalCommit": {"oid": "6f44863ce8054e309240493821527e26a0034ed7"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODg4Njg1OnYy", "diffSide": "RIGHT", "path": "crd-generator/src/main/java/io/strimzi/crdgenerator/CrdGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxODozMjoyNVrOHSOz0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxODozMjoyNVrOHSOz0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg3OTA1OQ==", "bodyText": "Just curious, but wouldn't be better to use switch construction for the else if?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#discussion_r488879059", "createdAt": "2020-09-15T18:32:25Z", "author": {"login": "see-quick"}, "path": "crd-generator/src/main/java/io/strimzi/crdgenerator/CrdGenerator.java", "diffHunk": "@@ -652,44 +898,91 @@ ArrayNode stringArray(Iterable<String> list) {\n         return arrayNode;\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    public static void main(String[] args) throws IOException, ClassNotFoundException {\n-        boolean yaml = false;\n-        Map<String, String> labels = new LinkedHashMap<>();\n+    static class CommandOptions {\n+        private boolean yaml = false;\n+        private LinkedHashMap<String, String> labels = new LinkedHashMap<>();\n+        VersionRange<KubeVersion> targetKubeVersions = null;\n+        ApiVersion crdApiVersion = null;\n+        List<ApiVersion> apiVersions = null;\n+        ApiVersion storageVersion = null;\n         Map<String, Class<? extends CustomResource>> classes = new HashMap<>();\n-        for (int i = 0; i < args.length; i++) {\n-            String arg = args[i];\n-            if (arg.startsWith(\"--\")) {\n-                if (arg.equals(\"--yaml\")) {\n-                    yaml = true;\n-                } else if (arg.equals(\"--label\")) {\n-                    i++;\n-                    int index = args[i].indexOf(\":\");\n-                    if (index == -1) {\n-                        argParseErr(\"Invalid --label \" + args[i]);\n-                    }\n-                    labels.put(args[i].substring(0, index), args[i].substring(index + 1));\n \n+        @SuppressWarnings({\"unchecked\", \"CyclomaticComplexity\"})\n+        public CommandOptions(String[] args) throws ClassNotFoundException {\n+            for (int i = 0; i < args.length; i++) {\n+                String arg = args[i];\n+                if (arg.startsWith(\"--\")) {\n+                    if (arg.equals(\"--yaml\")) {\n+                        yaml = true;\n+                    } else if (arg.equals(\"--label\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f44863ce8054e309240493821527e26a0034ed7"}, "originalPosition": 750}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTI0MzYyOnYy", "diffSide": "RIGHT", "path": "api/pom.xml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOTo1NDozMlrOHSSQ5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMDozMDoyM1rOHSql0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkzNTY1Mw==", "bodyText": "Should any of these tests use also CRD v1? Or is that not supported yet?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#discussion_r488935653", "createdAt": "2020-09-15T19:54:32Z", "author": {"login": "scholzj"}, "path": "api/pom.xml", "diffHunk": "@@ -164,6 +169,76 @@\n                             </arguments>\n                         </configuration>\n                     </execution>\n+                    <execution>\n+                        <id>generate-crd-evolution-1</id>\n+                        <phase>process-classes</phase>\n+                        <goals>\n+                            <goal>exec</goal>\n+                        </goals>\n+                        <configuration>\n+                            <executable>java</executable>\n+                            <arguments>\n+                                <argument>-classpath</argument>\n+                                <argument>${pom.basedir}${file.separator}target${file.separator}classes${path.separator}${pom.basedir}${file.separator}..${file.separator}crd-generator${file.separator}target${file.separator}crd-generator-${project.version}.jar</argument>\n+                                <argument>io.strimzi.crdgenerator.CrdGenerator</argument>\n+                                <argument>--label</argument><argument>app:strimzi</argument>\n+                                <argument>--label</argument><argument>strimzi.io/crd-install:true</argument>\n+                                <argument>--target-kube</argument><argument>1.16+</argument>\n+                                <argument>--crd-api-version</argument><argument>v1beta1</argument>\n+                                <argument>--api-versions</argument><argument>v1alpha1,v1beta1</argument>\n+                                <argument>--storage-version</argument><argument>v1beta1</argument>\n+                                <argument>--yaml</argument>\n+\n+                                <argument>io.strimzi.api.kafka.model.Kafka=src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka-v1alpha1-v1beta1-store-v1beta1.yaml</argument>\n+                            </arguments>\n+                        </configuration>\n+                    </execution>\n+                    <execution>\n+                        <id>generate-crd-evolution-2</id>\n+                        <phase>process-classes</phase>\n+                        <goals>\n+                            <goal>exec</goal>\n+                        </goals>\n+                        <configuration>\n+                            <executable>java</executable>\n+                            <arguments>\n+                                <argument>-classpath</argument>\n+                                <argument>${pom.basedir}${file.separator}target${file.separator}classes${path.separator}${pom.basedir}${file.separator}..${file.separator}crd-generator${file.separator}target${file.separator}crd-generator-${project.version}.jar</argument>\n+                                <argument>io.strimzi.crdgenerator.CrdGenerator</argument>\n+                                <argument>--label</argument><argument>app:strimzi</argument>\n+                                <argument>--label</argument><argument>strimzi.io/crd-install:true</argument>\n+                                <argument>--target-kube</argument><argument>1.16+</argument>\n+                                <argument>--crd-api-version</argument><argument>v1beta1</argument>\n+                                <argument>--api-versions</argument><argument>v1beta1,v1beta2</argument>\n+                                <argument>--storage-version</argument><argument>v1beta1</argument>\n+                                <argument>--yaml</argument>\n+                                <argument>io.strimzi.api.kafka.model.Kafka=src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka-v1beta1-v1beta2-store-v1beta1.yaml</argument>\n+                            </arguments>\n+                        </configuration>\n+                    </execution>\n+                    <execution>\n+                        <id>generate-crd-evolution-3</id>\n+                        <phase>process-classes</phase>\n+                        <goals>\n+                            <goal>exec</goal>\n+                        </goals>\n+                        <configuration>\n+                            <executable>java</executable>\n+                            <arguments>\n+                                <argument>-classpath</argument>\n+                                <argument>${pom.basedir}${file.separator}target${file.separator}classes${path.separator}${pom.basedir}${file.separator}..${file.separator}crd-generator${file.separator}target${file.separator}crd-generator-${project.version}.jar</argument>\n+                                <argument>io.strimzi.crdgenerator.CrdGenerator</argument>\n+                                <argument>--label</argument><argument>app:strimzi</argument>\n+                                <argument>--label</argument><argument>strimzi.io/crd-install:true</argument>\n+                                <argument>--target-kube</argument><argument>1.16+</argument>\n+                                <argument>--crd-api-version</argument><argument>v1beta1</argument>\n+                                <argument>--api-versions</argument><argument>v1beta1,v1beta2</argument>\n+                                <argument>--storage-version</argument><argument>v1beta2</argument>\n+                                <argument>--yaml</argument>\n+                                <argument>io.strimzi.api.kafka.model.Kafka=src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka-v1beta1-v1beta2-store-v1beta2.yaml</argument>\n+                            </arguments>\n+                        </configuration>\n+                    </execution>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f44863ce8054e309240493821527e26a0034ed7"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI1MTU1NA==", "bodyText": "I'll add another yaml with just Kafka v1beta2 and using CRD v1.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#discussion_r489251554", "createdAt": "2020-09-16T08:18:43Z", "author": {"login": "tombentley"}, "path": "api/pom.xml", "diffHunk": "@@ -164,6 +169,76 @@\n                             </arguments>\n                         </configuration>\n                     </execution>\n+                    <execution>\n+                        <id>generate-crd-evolution-1</id>\n+                        <phase>process-classes</phase>\n+                        <goals>\n+                            <goal>exec</goal>\n+                        </goals>\n+                        <configuration>\n+                            <executable>java</executable>\n+                            <arguments>\n+                                <argument>-classpath</argument>\n+                                <argument>${pom.basedir}${file.separator}target${file.separator}classes${path.separator}${pom.basedir}${file.separator}..${file.separator}crd-generator${file.separator}target${file.separator}crd-generator-${project.version}.jar</argument>\n+                                <argument>io.strimzi.crdgenerator.CrdGenerator</argument>\n+                                <argument>--label</argument><argument>app:strimzi</argument>\n+                                <argument>--label</argument><argument>strimzi.io/crd-install:true</argument>\n+                                <argument>--target-kube</argument><argument>1.16+</argument>\n+                                <argument>--crd-api-version</argument><argument>v1beta1</argument>\n+                                <argument>--api-versions</argument><argument>v1alpha1,v1beta1</argument>\n+                                <argument>--storage-version</argument><argument>v1beta1</argument>\n+                                <argument>--yaml</argument>\n+\n+                                <argument>io.strimzi.api.kafka.model.Kafka=src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka-v1alpha1-v1beta1-store-v1beta1.yaml</argument>\n+                            </arguments>\n+                        </configuration>\n+                    </execution>\n+                    <execution>\n+                        <id>generate-crd-evolution-2</id>\n+                        <phase>process-classes</phase>\n+                        <goals>\n+                            <goal>exec</goal>\n+                        </goals>\n+                        <configuration>\n+                            <executable>java</executable>\n+                            <arguments>\n+                                <argument>-classpath</argument>\n+                                <argument>${pom.basedir}${file.separator}target${file.separator}classes${path.separator}${pom.basedir}${file.separator}..${file.separator}crd-generator${file.separator}target${file.separator}crd-generator-${project.version}.jar</argument>\n+                                <argument>io.strimzi.crdgenerator.CrdGenerator</argument>\n+                                <argument>--label</argument><argument>app:strimzi</argument>\n+                                <argument>--label</argument><argument>strimzi.io/crd-install:true</argument>\n+                                <argument>--target-kube</argument><argument>1.16+</argument>\n+                                <argument>--crd-api-version</argument><argument>v1beta1</argument>\n+                                <argument>--api-versions</argument><argument>v1beta1,v1beta2</argument>\n+                                <argument>--storage-version</argument><argument>v1beta1</argument>\n+                                <argument>--yaml</argument>\n+                                <argument>io.strimzi.api.kafka.model.Kafka=src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka-v1beta1-v1beta2-store-v1beta1.yaml</argument>\n+                            </arguments>\n+                        </configuration>\n+                    </execution>\n+                    <execution>\n+                        <id>generate-crd-evolution-3</id>\n+                        <phase>process-classes</phase>\n+                        <goals>\n+                            <goal>exec</goal>\n+                        </goals>\n+                        <configuration>\n+                            <executable>java</executable>\n+                            <arguments>\n+                                <argument>-classpath</argument>\n+                                <argument>${pom.basedir}${file.separator}target${file.separator}classes${path.separator}${pom.basedir}${file.separator}..${file.separator}crd-generator${file.separator}target${file.separator}crd-generator-${project.version}.jar</argument>\n+                                <argument>io.strimzi.crdgenerator.CrdGenerator</argument>\n+                                <argument>--label</argument><argument>app:strimzi</argument>\n+                                <argument>--label</argument><argument>strimzi.io/crd-install:true</argument>\n+                                <argument>--target-kube</argument><argument>1.16+</argument>\n+                                <argument>--crd-api-version</argument><argument>v1beta1</argument>\n+                                <argument>--api-versions</argument><argument>v1beta1,v1beta2</argument>\n+                                <argument>--storage-version</argument><argument>v1beta2</argument>\n+                                <argument>--yaml</argument>\n+                                <argument>io.strimzi.api.kafka.model.Kafka=src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka-v1beta1-v1beta2-store-v1beta2.yaml</argument>\n+                            </arguments>\n+                        </configuration>\n+                    </execution>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkzNTY1Mw=="}, "originalCommit": {"oid": "6f44863ce8054e309240493821527e26a0034ed7"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMzNDIyNA==", "bodyText": "Thanks, this was a really helpful comment. There were some gotchas with v1 which I hadn't noticed and were caught by actually, y'know, testing v1.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#discussion_r489334224", "createdAt": "2020-09-16T10:30:23Z", "author": {"login": "tombentley"}, "path": "api/pom.xml", "diffHunk": "@@ -164,6 +169,76 @@\n                             </arguments>\n                         </configuration>\n                     </execution>\n+                    <execution>\n+                        <id>generate-crd-evolution-1</id>\n+                        <phase>process-classes</phase>\n+                        <goals>\n+                            <goal>exec</goal>\n+                        </goals>\n+                        <configuration>\n+                            <executable>java</executable>\n+                            <arguments>\n+                                <argument>-classpath</argument>\n+                                <argument>${pom.basedir}${file.separator}target${file.separator}classes${path.separator}${pom.basedir}${file.separator}..${file.separator}crd-generator${file.separator}target${file.separator}crd-generator-${project.version}.jar</argument>\n+                                <argument>io.strimzi.crdgenerator.CrdGenerator</argument>\n+                                <argument>--label</argument><argument>app:strimzi</argument>\n+                                <argument>--label</argument><argument>strimzi.io/crd-install:true</argument>\n+                                <argument>--target-kube</argument><argument>1.16+</argument>\n+                                <argument>--crd-api-version</argument><argument>v1beta1</argument>\n+                                <argument>--api-versions</argument><argument>v1alpha1,v1beta1</argument>\n+                                <argument>--storage-version</argument><argument>v1beta1</argument>\n+                                <argument>--yaml</argument>\n+\n+                                <argument>io.strimzi.api.kafka.model.Kafka=src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka-v1alpha1-v1beta1-store-v1beta1.yaml</argument>\n+                            </arguments>\n+                        </configuration>\n+                    </execution>\n+                    <execution>\n+                        <id>generate-crd-evolution-2</id>\n+                        <phase>process-classes</phase>\n+                        <goals>\n+                            <goal>exec</goal>\n+                        </goals>\n+                        <configuration>\n+                            <executable>java</executable>\n+                            <arguments>\n+                                <argument>-classpath</argument>\n+                                <argument>${pom.basedir}${file.separator}target${file.separator}classes${path.separator}${pom.basedir}${file.separator}..${file.separator}crd-generator${file.separator}target${file.separator}crd-generator-${project.version}.jar</argument>\n+                                <argument>io.strimzi.crdgenerator.CrdGenerator</argument>\n+                                <argument>--label</argument><argument>app:strimzi</argument>\n+                                <argument>--label</argument><argument>strimzi.io/crd-install:true</argument>\n+                                <argument>--target-kube</argument><argument>1.16+</argument>\n+                                <argument>--crd-api-version</argument><argument>v1beta1</argument>\n+                                <argument>--api-versions</argument><argument>v1beta1,v1beta2</argument>\n+                                <argument>--storage-version</argument><argument>v1beta1</argument>\n+                                <argument>--yaml</argument>\n+                                <argument>io.strimzi.api.kafka.model.Kafka=src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka-v1beta1-v1beta2-store-v1beta1.yaml</argument>\n+                            </arguments>\n+                        </configuration>\n+                    </execution>\n+                    <execution>\n+                        <id>generate-crd-evolution-3</id>\n+                        <phase>process-classes</phase>\n+                        <goals>\n+                            <goal>exec</goal>\n+                        </goals>\n+                        <configuration>\n+                            <executable>java</executable>\n+                            <arguments>\n+                                <argument>-classpath</argument>\n+                                <argument>${pom.basedir}${file.separator}target${file.separator}classes${path.separator}${pom.basedir}${file.separator}..${file.separator}crd-generator${file.separator}target${file.separator}crd-generator-${project.version}.jar</argument>\n+                                <argument>io.strimzi.crdgenerator.CrdGenerator</argument>\n+                                <argument>--label</argument><argument>app:strimzi</argument>\n+                                <argument>--label</argument><argument>strimzi.io/crd-install:true</argument>\n+                                <argument>--target-kube</argument><argument>1.16+</argument>\n+                                <argument>--crd-api-version</argument><argument>v1beta1</argument>\n+                                <argument>--api-versions</argument><argument>v1beta1,v1beta2</argument>\n+                                <argument>--storage-version</argument><argument>v1beta2</argument>\n+                                <argument>--yaml</argument>\n+                                <argument>io.strimzi.api.kafka.model.Kafka=src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka-v1beta1-v1beta2-store-v1beta2.yaml</argument>\n+                            </arguments>\n+                        </configuration>\n+                    </execution>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkzNTY1Mw=="}, "originalCommit": {"oid": "6f44863ce8054e309240493821527e26a0034ed7"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTMxNjg4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/strimzi/api/kafka/Crds.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDoxNjoxM1rOHSS9Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDoxNjoxM1rOHSS9Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk0NzAzOA==", "bodyText": "What is the difference for these two? Will each of these watch for another version resource? Will we need to do everything twice in the operators?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#discussion_r488947038", "createdAt": "2020-09-15T20:16:13Z", "author": {"login": "scholzj"}, "path": "api/src/main/java/io/strimzi/api/kafka/Crds.java", "diffHunk": "@@ -269,6 +269,14 @@ public static CustomResourceDefinition kafka() {\n         return client.customResources(CustomResourceDefinitionContext.fromCrd(crd(Kafka.class, Constants.V1ALPHA1)), Kafka.class, KafkaList.class, DoneableKafka.class);\n     }\n \n+    public static MixedOperation<Kafka, KafkaList, DoneableKafka, Resource<Kafka, DoneableKafka>> kafkaV1Beta1Operation(KubernetesClient client) {\n+        return client.customResources(CustomResourceDefinitionContext.fromCrd(crd(Kafka.class, Constants.V1BETA1)), Kafka.class, KafkaList.class, DoneableKafka.class);\n+    }\n+\n+    public static MixedOperation<Kafka, KafkaList, DoneableKafka, Resource<Kafka, DoneableKafka>> kafkaV1Beta2Operation(KubernetesClient client) {\n+        return client.customResources(CustomResourceDefinitionContext.fromCrd(crd(Kafka.class, Constants.V1BETA2)), Kafka.class, KafkaList.class, DoneableKafka.class);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f44863ce8054e309240493821527e26a0034ed7"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTA0MDE0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaClusterSpec.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzoyNjoxMFrOHSjp2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODozMjowN1rOHSmD5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyMDU3MA==", "bodyText": "What's the syntax for the value of this annotation? It's an interval or a list? or something different?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#discussion_r489220570", "createdAt": "2020-09-16T07:26:10Z", "author": {"login": "ppatierno"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaClusterSpec.java", "diffHunk": "@@ -146,6 +147,7 @@ public void setLogging(Logging logging) {\n         this.logging = logging;\n     }\n \n+    @PresentInVersions(\"v1alpha1-v1beta1\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f44863ce8054e309240493821527e26a0034ed7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI1NjE3NA==", "bodyText": "It's described here: https://github.com/strimzi/strimzi-kafka-operator/pull/3653/files#diff-762d04edf28bcda2d851e559e33f5ea4R93. In this case it's an interval with inclusive ends (we don't actually know whether there is a v1alpha2, we just compute inclusion based on the endpoints). It can also be an open-ended interval (e.g. v1beta2+), or a single version (v1beta1).", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#discussion_r489256174", "createdAt": "2020-09-16T08:26:15Z", "author": {"login": "tombentley"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaClusterSpec.java", "diffHunk": "@@ -146,6 +147,7 @@ public void setLogging(Logging logging) {\n         this.logging = logging;\n     }\n \n+    @PresentInVersions(\"v1alpha1-v1beta1\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyMDU3MA=="}, "originalCommit": {"oid": "6f44863ce8054e309240493821527e26a0034ed7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI2MDAwNA==", "bodyText": "Thanks, got it!", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#discussion_r489260004", "createdAt": "2020-09-16T08:32:07Z", "author": {"login": "ppatierno"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaClusterSpec.java", "diffHunk": "@@ -146,6 +147,7 @@ public void setLogging(Logging logging) {\n         this.logging = logging;\n     }\n \n+    @PresentInVersions(\"v1alpha1-v1beta1\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyMDU3MA=="}, "originalCommit": {"oid": "6f44863ce8054e309240493821527e26a0034ed7"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTA2MjQ5OnYy", "diffSide": "RIGHT", "path": "crd-generator/src/main/java/io/strimzi/crdgenerator/ApiVersion.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzozMjoxNVrOHSj3mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODozMToxM1rOHSmBvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyNDA4OA==", "bodyText": "can we think more about using an enum as Alpha, Beta and Stable instead of short values 0, 1 and 2 (that anyway could be the corresponding underlying values of the enum)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#discussion_r489224088", "createdAt": "2020-09-16T07:32:15Z", "author": {"login": "ppatierno"}, "path": "crd-generator/src/main/java/io/strimzi/crdgenerator/ApiVersion.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.crdgenerator;\n+\n+\n+import java.util.Objects;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static java.lang.Short.parseShort;\n+\n+/**\n+ * Represents the version of a Kubernetes API, for example {@code v1alpha1} or {@code v2}.\n+ * These version numbers are comparable, so {@code v1alpha1 < v1beta1 < v1 < v2alpha1} etc.\n+ */\n+public class ApiVersion implements Comparable<ApiVersion> {\n+\n+    public static final Pattern PATTERN = Pattern.compile(\"v([0-9]+)((alpha|beta)([0-9]+))?\");\n+    public static final ApiVersion V1ALPHA1 = parse(\"v1alpha1\");\n+    public static final ApiVersion V1BETA1 = parse(\"v1beta1\");\n+    public static final ApiVersion V1 = parse(\"v1\");\n+\n+    private final short major;\n+    private final short ab;\n+    private final short minor;\n+\n+    public ApiVersion(short major, short ab, short minor) {\n+        if (major < 0 || ab < 0 || ab > 2 || minor < 0) {\n+            throw new RuntimeException();\n+        }\n+        this.major = major;\n+        this.ab = ab;\n+        this.minor = minor;\n+    }\n+\n+    private static Matcher matcher(String apiVersion) {\n+        return PATTERN.matcher(apiVersion);\n+    }\n+\n+    public static boolean isVersion(String apiVersion) {\n+        return matcher(apiVersion).matches();\n+    }\n+\n+    public static ApiVersion parse(String apiVersion) {\n+        Matcher matcher = matcher(apiVersion);\n+        if (!matcher.matches()) {\n+            throw new IllegalArgumentException(\"Invalid version \" + apiVersion);\n+        }\n+        short major = parseShort(matcher.group(1));\n+        short ab;\n+        short minor;\n+        String alphaBeta = matcher.group(3);\n+        if (matcher.groupCount() > 1 && alphaBeta != null) {\n+            if (\"alpha\".equals(alphaBeta)) {\n+                ab = 0;\n+            } else if (\"beta\".equals(alphaBeta)) {\n+                ab = 1;\n+            } else {\n+                throw new IllegalStateException(alphaBeta);\n+            }\n+            minor = parseShort(matcher.group(4));\n+        } else {\n+            ab = 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f44863ce8054e309240493821527e26a0034ed7"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI1Nzk0NA==", "bodyText": "There's no benefit to using an enum because these things are entirely internal to ApiVersion. The intention is that people use the String form (v1alpha1) rather than using a constructor which takes actual values. Using constants would actually make the compareTo code harder to read imho, but I'll do it anyway.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#discussion_r489257944", "createdAt": "2020-09-16T08:28:57Z", "author": {"login": "tombentley"}, "path": "crd-generator/src/main/java/io/strimzi/crdgenerator/ApiVersion.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.crdgenerator;\n+\n+\n+import java.util.Objects;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static java.lang.Short.parseShort;\n+\n+/**\n+ * Represents the version of a Kubernetes API, for example {@code v1alpha1} or {@code v2}.\n+ * These version numbers are comparable, so {@code v1alpha1 < v1beta1 < v1 < v2alpha1} etc.\n+ */\n+public class ApiVersion implements Comparable<ApiVersion> {\n+\n+    public static final Pattern PATTERN = Pattern.compile(\"v([0-9]+)((alpha|beta)([0-9]+))?\");\n+    public static final ApiVersion V1ALPHA1 = parse(\"v1alpha1\");\n+    public static final ApiVersion V1BETA1 = parse(\"v1beta1\");\n+    public static final ApiVersion V1 = parse(\"v1\");\n+\n+    private final short major;\n+    private final short ab;\n+    private final short minor;\n+\n+    public ApiVersion(short major, short ab, short minor) {\n+        if (major < 0 || ab < 0 || ab > 2 || minor < 0) {\n+            throw new RuntimeException();\n+        }\n+        this.major = major;\n+        this.ab = ab;\n+        this.minor = minor;\n+    }\n+\n+    private static Matcher matcher(String apiVersion) {\n+        return PATTERN.matcher(apiVersion);\n+    }\n+\n+    public static boolean isVersion(String apiVersion) {\n+        return matcher(apiVersion).matches();\n+    }\n+\n+    public static ApiVersion parse(String apiVersion) {\n+        Matcher matcher = matcher(apiVersion);\n+        if (!matcher.matches()) {\n+            throw new IllegalArgumentException(\"Invalid version \" + apiVersion);\n+        }\n+        short major = parseShort(matcher.group(1));\n+        short ab;\n+        short minor;\n+        String alphaBeta = matcher.group(3);\n+        if (matcher.groupCount() > 1 && alphaBeta != null) {\n+            if (\"alpha\".equals(alphaBeta)) {\n+                ab = 0;\n+            } else if (\"beta\".equals(alphaBeta)) {\n+                ab = 1;\n+            } else {\n+                throw new IllegalStateException(alphaBeta);\n+            }\n+            minor = parseShort(matcher.group(4));\n+        } else {\n+            ab = 2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyNDA4OA=="}, "originalCommit": {"oid": "6f44863ce8054e309240493821527e26a0034ed7"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI1OTQ1NA==", "bodyText": "Well, I don't think that the benefit has to be for people using it only but even for developers maintaining it. I got the values now or at least you could document them so no need to update but I think that using enums don't hurt.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#discussion_r489259454", "createdAt": "2020-09-16T08:31:13Z", "author": {"login": "ppatierno"}, "path": "crd-generator/src/main/java/io/strimzi/crdgenerator/ApiVersion.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.crdgenerator;\n+\n+\n+import java.util.Objects;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static java.lang.Short.parseShort;\n+\n+/**\n+ * Represents the version of a Kubernetes API, for example {@code v1alpha1} or {@code v2}.\n+ * These version numbers are comparable, so {@code v1alpha1 < v1beta1 < v1 < v2alpha1} etc.\n+ */\n+public class ApiVersion implements Comparable<ApiVersion> {\n+\n+    public static final Pattern PATTERN = Pattern.compile(\"v([0-9]+)((alpha|beta)([0-9]+))?\");\n+    public static final ApiVersion V1ALPHA1 = parse(\"v1alpha1\");\n+    public static final ApiVersion V1BETA1 = parse(\"v1beta1\");\n+    public static final ApiVersion V1 = parse(\"v1\");\n+\n+    private final short major;\n+    private final short ab;\n+    private final short minor;\n+\n+    public ApiVersion(short major, short ab, short minor) {\n+        if (major < 0 || ab < 0 || ab > 2 || minor < 0) {\n+            throw new RuntimeException();\n+        }\n+        this.major = major;\n+        this.ab = ab;\n+        this.minor = minor;\n+    }\n+\n+    private static Matcher matcher(String apiVersion) {\n+        return PATTERN.matcher(apiVersion);\n+    }\n+\n+    public static boolean isVersion(String apiVersion) {\n+        return matcher(apiVersion).matches();\n+    }\n+\n+    public static ApiVersion parse(String apiVersion) {\n+        Matcher matcher = matcher(apiVersion);\n+        if (!matcher.matches()) {\n+            throw new IllegalArgumentException(\"Invalid version \" + apiVersion);\n+        }\n+        short major = parseShort(matcher.group(1));\n+        short ab;\n+        short minor;\n+        String alphaBeta = matcher.group(3);\n+        if (matcher.groupCount() > 1 && alphaBeta != null) {\n+            if (\"alpha\".equals(alphaBeta)) {\n+                ab = 0;\n+            } else if (\"beta\".equals(alphaBeta)) {\n+                ab = 1;\n+            } else {\n+                throw new IllegalStateException(alphaBeta);\n+            }\n+            minor = parseShort(matcher.group(4));\n+        } else {\n+            ab = 2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyNDA4OA=="}, "originalCommit": {"oid": "6f44863ce8054e309240493821527e26a0034ed7"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1127, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}