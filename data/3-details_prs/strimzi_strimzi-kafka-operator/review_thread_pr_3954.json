{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwOTI2NTg5", "number": 3954, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMzoyMTowOVrOE5w65A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMzoyMTowOVrOE5w65A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDA1Nzk2OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaUtils.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMzoyMTowOVrOH0bklg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwODo1MzozOFrOH1jKxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDczOTczNA==", "bodyText": "I wonder if we should use here cmd client instead of fabric8 to avoid some issues with future upgrades. It's more just a question/idea. WDYT?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3954#discussion_r524739734", "createdAt": "2020-11-16T23:21:09Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaUtils.java", "diffHunk": "@@ -354,4 +357,21 @@ public static String getVersionFromKafkaPodLibs(String kafkaPodName) {\n             command\n         ).out().trim();\n     }\n+\n+    public static void waitForKafkaDeletion(String kafkaClusterName) {\n+        LOGGER.info(\"Waiting for deletion of Kafka:{}\", kafkaClusterName);\n+        TestUtils.waitFor(\"Kafka deletion \" + kafkaClusterName, Constants.POLL_INTERVAL_FOR_RESOURCE_READINESS, DELETION_TIMEOUT,\n+            () -> {\n+                if (KafkaResource.kafkaClient().inNamespace(kubeClient().getNamespace()).withName(kafkaClusterName).get() == null &&\n+                    kubeClient().getStatefulSet(KafkaResources.kafkaStatefulSetName(kafkaClusterName)) == null &&\n+                    kubeClient().getStatefulSet(KafkaResources.zookeeperStatefulSetName(kafkaClusterName)) == null &&\n+                    kubeClient().getDeployment(KafkaResources.entityOperatorDeploymentName(kafkaClusterName)) == null) {\n+                    return true;\n+                } else {\n+                    KafkaResource.kafkaClient().inNamespace(kubeClient().getNamespace()).withName(kafkaClusterName).withPropagationPolicy(DeletionPropagation.FOREGROUND).delete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80709f47eb3f5eaed22625fa581da2cf445f4f2d"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc1MzgzNw==", "bodyText": "This was what I thought too. Problem here was that when I did cmdKubeClient().deleteByName(Kafka.RESOURCE_KIND, kafkaClusterName), only the Kafka pods and statefulsets were deleted.. unfortunately there are no .withPropagationPolicy(DeletionPropagation.FOREGROUND) or deprecated .cascade(true)... So I chose this way.. I will take a look on some better solution.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3954#discussion_r524753837", "createdAt": "2020-11-16T23:34:26Z", "author": {"login": "im-konge"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaUtils.java", "diffHunk": "@@ -354,4 +357,21 @@ public static String getVersionFromKafkaPodLibs(String kafkaPodName) {\n             command\n         ).out().trim();\n     }\n+\n+    public static void waitForKafkaDeletion(String kafkaClusterName) {\n+        LOGGER.info(\"Waiting for deletion of Kafka:{}\", kafkaClusterName);\n+        TestUtils.waitFor(\"Kafka deletion \" + kafkaClusterName, Constants.POLL_INTERVAL_FOR_RESOURCE_READINESS, DELETION_TIMEOUT,\n+            () -> {\n+                if (KafkaResource.kafkaClient().inNamespace(kubeClient().getNamespace()).withName(kafkaClusterName).get() == null &&\n+                    kubeClient().getStatefulSet(KafkaResources.kafkaStatefulSetName(kafkaClusterName)) == null &&\n+                    kubeClient().getStatefulSet(KafkaResources.zookeeperStatefulSetName(kafkaClusterName)) == null &&\n+                    kubeClient().getDeployment(KafkaResources.entityOperatorDeploymentName(kafkaClusterName)) == null) {\n+                    return true;\n+                } else {\n+                    KafkaResource.kafkaClient().inNamespace(kubeClient().getNamespace()).withName(kafkaClusterName).withPropagationPolicy(DeletionPropagation.FOREGROUND).delete();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDczOTczNA=="}, "originalCommit": {"oid": "80709f47eb3f5eaed22625fa581da2cf445f4f2d"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc5NTY0MA==", "bodyText": "The kubectl tools has the --cascade and --wait options which should cover the options from the Fabric8 client..", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3954#discussion_r524795640", "createdAt": "2020-11-17T00:15:59Z", "author": {"login": "scholzj"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaUtils.java", "diffHunk": "@@ -354,4 +357,21 @@ public static String getVersionFromKafkaPodLibs(String kafkaPodName) {\n             command\n         ).out().trim();\n     }\n+\n+    public static void waitForKafkaDeletion(String kafkaClusterName) {\n+        LOGGER.info(\"Waiting for deletion of Kafka:{}\", kafkaClusterName);\n+        TestUtils.waitFor(\"Kafka deletion \" + kafkaClusterName, Constants.POLL_INTERVAL_FOR_RESOURCE_READINESS, DELETION_TIMEOUT,\n+            () -> {\n+                if (KafkaResource.kafkaClient().inNamespace(kubeClient().getNamespace()).withName(kafkaClusterName).get() == null &&\n+                    kubeClient().getStatefulSet(KafkaResources.kafkaStatefulSetName(kafkaClusterName)) == null &&\n+                    kubeClient().getStatefulSet(KafkaResources.zookeeperStatefulSetName(kafkaClusterName)) == null &&\n+                    kubeClient().getDeployment(KafkaResources.entityOperatorDeploymentName(kafkaClusterName)) == null) {\n+                    return true;\n+                } else {\n+                    KafkaResource.kafkaClient().inNamespace(kubeClient().getNamespace()).withName(kafkaClusterName).withPropagationPolicy(DeletionPropagation.FOREGROUND).delete();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDczOTczNA=="}, "originalCommit": {"oid": "80709f47eb3f5eaed22625fa581da2cf445f4f2d"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgzNzEyMQ==", "bodyText": "Yep, that will be it. Let me try it and change it :) thanks @Frawless and @scholzj", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3954#discussion_r524837121", "createdAt": "2020-11-17T02:04:05Z", "author": {"login": "im-konge"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaUtils.java", "diffHunk": "@@ -354,4 +357,21 @@ public static String getVersionFromKafkaPodLibs(String kafkaPodName) {\n             command\n         ).out().trim();\n     }\n+\n+    public static void waitForKafkaDeletion(String kafkaClusterName) {\n+        LOGGER.info(\"Waiting for deletion of Kafka:{}\", kafkaClusterName);\n+        TestUtils.waitFor(\"Kafka deletion \" + kafkaClusterName, Constants.POLL_INTERVAL_FOR_RESOURCE_READINESS, DELETION_TIMEOUT,\n+            () -> {\n+                if (KafkaResource.kafkaClient().inNamespace(kubeClient().getNamespace()).withName(kafkaClusterName).get() == null &&\n+                    kubeClient().getStatefulSet(KafkaResources.kafkaStatefulSetName(kafkaClusterName)) == null &&\n+                    kubeClient().getStatefulSet(KafkaResources.zookeeperStatefulSetName(kafkaClusterName)) == null &&\n+                    kubeClient().getDeployment(KafkaResources.entityOperatorDeploymentName(kafkaClusterName)) == null) {\n+                    return true;\n+                } else {\n+                    KafkaResource.kafkaClient().inNamespace(kubeClient().getNamespace()).withName(kafkaClusterName).withPropagationPolicy(DeletionPropagation.FOREGROUND).delete();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDczOTczNA=="}, "originalCommit": {"oid": "80709f47eb3f5eaed22625fa581da2cf445f4f2d"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkxMjc3Mw==", "bodyText": "So how I thought, again problem on my side \ud83d\ude04 the cmdKubeClient().deleteByName(Kafka.RESOURCE_KIND, kafkaClusterName) is working! I'm gonna change it :) thanks again", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3954#discussion_r525912773", "createdAt": "2020-11-18T08:53:38Z", "author": {"login": "im-konge"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaUtils.java", "diffHunk": "@@ -354,4 +357,21 @@ public static String getVersionFromKafkaPodLibs(String kafkaPodName) {\n             command\n         ).out().trim();\n     }\n+\n+    public static void waitForKafkaDeletion(String kafkaClusterName) {\n+        LOGGER.info(\"Waiting for deletion of Kafka:{}\", kafkaClusterName);\n+        TestUtils.waitFor(\"Kafka deletion \" + kafkaClusterName, Constants.POLL_INTERVAL_FOR_RESOURCE_READINESS, DELETION_TIMEOUT,\n+            () -> {\n+                if (KafkaResource.kafkaClient().inNamespace(kubeClient().getNamespace()).withName(kafkaClusterName).get() == null &&\n+                    kubeClient().getStatefulSet(KafkaResources.kafkaStatefulSetName(kafkaClusterName)) == null &&\n+                    kubeClient().getStatefulSet(KafkaResources.zookeeperStatefulSetName(kafkaClusterName)) == null &&\n+                    kubeClient().getDeployment(KafkaResources.entityOperatorDeploymentName(kafkaClusterName)) == null) {\n+                    return true;\n+                } else {\n+                    KafkaResource.kafkaClient().inNamespace(kubeClient().getNamespace()).withName(kafkaClusterName).withPropagationPolicy(DeletionPropagation.FOREGROUND).delete();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDczOTczNA=="}, "originalCommit": {"oid": "80709f47eb3f5eaed22625fa581da2cf445f4f2d"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 702, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}