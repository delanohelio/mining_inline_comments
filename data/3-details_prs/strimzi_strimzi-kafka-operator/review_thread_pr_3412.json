{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4NjI3MDI1", "number": 3412, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxOToxODo0NFrOETZGLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDo1MDo1M1rOEToOeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzY5NTgwOnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaMirrorMakerAssemblyOperator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxOToxODo0NFrOG5Gn7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxOToxODo0NFrOG5Gn7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUzMDU0Mg==", "bodyText": "Can we do this like in all the other cases and leave the condition as ready? If user requests 0 replicas and gets 0 replicas it should not be treated as exception.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3412#discussion_r462530542", "createdAt": "2020-07-29T19:18:44Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaMirrorMakerAssemblyOperator.java", "diffHunk": "@@ -103,9 +105,15 @@ public KafkaMirrorMakerAssemblyOperator(Vertx vertx, PlatformFeaturesAvailabilit\n                 .compose(i -> deploymentOperations.reconcile(namespace, mirror.getName(), mirror.generateDeployment(annotations, pfa.isOpenshift(), imagePullPolicy, imagePullSecrets)))\n                 .compose(i -> deploymentOperations.scaleUp(namespace, mirror.getName(), mirror.getReplicas()))\n                 .compose(i -> deploymentOperations.waitForObserved(namespace, mirror.getName(), 1_000, operationTimeoutMs))\n-                .compose(i -> deploymentOperations.readiness(namespace, mirror.getName(), 1_000, operationTimeoutMs))\n+                .compose(i -> mirrorHasZeroReplicas ? Future.succeededFuture() : deploymentOperations.readiness(namespace, mirror.getName(), 1_000, operationTimeoutMs))\n                 .onComplete(reconciliationResult -> {\n-                        StatusUtils.setStatusConditionAndObservedGeneration(assemblyResource, kafkaMirrorMakerStatus, reconciliationResult);\n+\n+                        if (mirrorHasZeroReplicas) {\n+                            StatusUtils.setStatusConditionAndObservedGeneration(assemblyResource, kafkaMirrorMakerStatus, new RuntimeException(\n+                                    \"Kafka Mirror Maker cluster '\" + assemblyResource.getMetadata().getName() + \"' in namespace \" + assemblyResource.getMetadata().getNamespace() + \" has 0 replicas.\"));\n+                        } else {\n+                            StatusUtils.setStatusConditionAndObservedGeneration(assemblyResource, kafkaMirrorMakerStatus, reconciliationResult);\n+                        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7179bdabbe58bd956cf8fe10e54cfc0873650ee9"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODIwNDE4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaMirrorMakerSpec.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMTo1MToxOVrOG5Lhnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwOTozNTo0NFrOG5boSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYxMDg0Nw==", "bodyText": "Should I change protected static final int DEFAULT_REPLICAS = 3; into public in KafkaMirrorMakerCluster class, and use it here, just to avoid having the default value defined multiple places ?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3412#discussion_r462610847", "createdAt": "2020-07-29T21:51:19Z", "author": {"login": "klalafaryan"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaMirrorMakerSpec.java", "diffHunk": "@@ -41,7 +41,10 @@\n \n     private static final long serialVersionUID = 1L;\n \n-    private int replicas;\n+    private static final int DEFAULT_REPLICAS = 3;\n+\n+    private int replicas = DEFAULT_REPLICAS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b0df3b65f64e4e9aa2776a369684bdaefcf042a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYyOTE5NQ==", "bodyText": "Is it still needed for something? I think since it cannot be undefined you should not need it anymore in KafkaMirrorMakerCluster, or?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3412#discussion_r462629195", "createdAt": "2020-07-29T22:35:22Z", "author": {"login": "scholzj"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaMirrorMakerSpec.java", "diffHunk": "@@ -41,7 +41,10 @@\n \n     private static final long serialVersionUID = 1L;\n \n-    private int replicas;\n+    private static final int DEFAULT_REPLICAS = 3;\n+\n+    private int replicas = DEFAULT_REPLICAS;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYxMDg0Nw=="}, "originalCommit": {"oid": "5b0df3b65f64e4e9aa2776a369684bdaefcf042a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg3NDY5Nw==", "bodyText": "It is used only here: https://github.com/strimzi/strimzi-kafka-operator/blob/master/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaMirrorMakerCluster.java#L120\nAnd I think this can be removed.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3412#discussion_r462874697", "createdAt": "2020-07-30T09:35:44Z", "author": {"login": "klalafaryan"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaMirrorMakerSpec.java", "diffHunk": "@@ -41,7 +41,10 @@\n \n     private static final long serialVersionUID = 1L;\n \n-    private int replicas;\n+    private static final int DEFAULT_REPLICAS = 3;\n+\n+    private int replicas = DEFAULT_REPLICAS;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYxMDg0Nw=="}, "originalCommit": {"oid": "5b0df3b65f64e4e9aa2776a369684bdaefcf042a"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODIwOTYxOnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaMirrorMakerCluster.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMTo1MzoyN1rOG5LlFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMjozMzo0OFrOG5Mm2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYxMTczNQ==", "bodyText": "To be honest, I am not sure, if we need this check (spec != null) here ? For example in KafkaConnectCluster and in KafkaBridgeCluster  spec is not checked. (if it is null or not)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3412#discussion_r462611735", "createdAt": "2020-07-29T21:53:27Z", "author": {"login": "klalafaryan"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaMirrorMakerCluster.java", "diffHunk": "@@ -133,8 +133,8 @@ public static KafkaMirrorMakerCluster fromCrd(KafkaMirrorMaker kafkaMirrorMaker,\n         KafkaMirrorMakerCluster kafkaMirrorMakerCluster = new KafkaMirrorMakerCluster(kafkaMirrorMaker);\n \n         KafkaMirrorMakerSpec spec = kafkaMirrorMaker.getSpec();\n-        kafkaMirrorMakerCluster.setReplicas(spec != null && spec.getReplicas() > 0 ? spec.getReplicas() : DEFAULT_REPLICAS);\n         if (spec != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b0df3b65f64e4e9aa2776a369684bdaefcf042a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYyODU2OA==", "bodyText": "I guess you can do what the other classes do. But the current code looks good as well.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3412#discussion_r462628568", "createdAt": "2020-07-29T22:33:48Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaMirrorMakerCluster.java", "diffHunk": "@@ -133,8 +133,8 @@ public static KafkaMirrorMakerCluster fromCrd(KafkaMirrorMaker kafkaMirrorMaker,\n         KafkaMirrorMakerCluster kafkaMirrorMakerCluster = new KafkaMirrorMakerCluster(kafkaMirrorMaker);\n \n         KafkaMirrorMakerSpec spec = kafkaMirrorMaker.getSpec();\n-        kafkaMirrorMakerCluster.setReplicas(spec != null && spec.getReplicas() > 0 ? spec.getReplicas() : DEFAULT_REPLICAS);\n         if (spec != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYxMTczNQ=="}, "originalCommit": {"oid": "5b0df3b65f64e4e9aa2776a369684bdaefcf042a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODMyODg4OnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/ResourceUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMjozNzo1NFrOG5MswQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMjozNzo1NFrOG5MswQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzMDA4MQ==", "bodyText": "I think this would work fine. But maybe it would be easier to read the code if you keep the one big blog with the Builder, build the KafkaMirrorMaker, then change the replicas and return it.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3412#discussion_r462630081", "createdAt": "2020-07-29T22:37:54Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/ResourceUtils.java", "diffHunk": "@@ -505,19 +506,29 @@ public static KafkaMirrorMaker createEmptyKafkaMirrorMakerCluster(String cluster\n     }\n \n     public static KafkaMirrorMaker createKafkaMirrorMakerCluster(String clusterCmNamespace, String clusterCmName, String image, KafkaMirrorMakerProducerSpec producer, KafkaMirrorMakerConsumerSpec consumer, String whitelist, Map<String, Object> metricsCm) {\n-        return new KafkaMirrorMakerBuilder()\n+        return createKafkaMirrorMakerCluster(clusterCmNamespace, clusterCmName, image, null, producer, consumer, whitelist, metricsCm);\n+    }\n+\n+    public static KafkaMirrorMaker createKafkaMirrorMakerCluster(String clusterCmNamespace, String clusterCmName, String image, Integer replicas, KafkaMirrorMakerProducerSpec producer, KafkaMirrorMakerConsumerSpec consumer, String whitelist, Map<String, Object> metricsCm) {\n+        KafkaMirrorMakerFluent.SpecNested<KafkaMirrorMakerBuilder> kafkaMirrorMakerBuilder = new KafkaMirrorMakerBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b0df3b65f64e4e9aa2776a369684bdaefcf042a"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODMzMjg4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaMirrorMakerSpec.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMjozOTozNVrOG5MvDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODo0OToyOVrOG5vlyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzMDY3MA==", "bodyText": "When you change something in the api module, it is not enough to just build the images. You have to at the end run make crd_install to make sure the new CRD definitions are copied to all the different places. This is why right now the CI builds are failing.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3412#discussion_r462630670", "createdAt": "2020-07-29T22:39:35Z", "author": {"login": "scholzj"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaMirrorMakerSpec.java", "diffHunk": "@@ -60,7 +63,7 @@\n     private Map<String, Object> additionalProperties = new HashMap<>(0);\n \n     @Description(\"The number of pods in the `Deployment`.\")\n-    @Minimum(1)\n+    @Minimum(0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b0df3b65f64e4e9aa2776a369684bdaefcf042a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg1NTA1MQ==", "bodyText": "I have executed make crd_install, but seems like nothing has been changed. (nothing to commit)\nAnd in the 045-Crd-kafkamirrormaker.yaml I still can see:\n            replicas:\n              type: integer\n              minimum: 1\n              description: The number of pods in the `Deployment`.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3412#discussion_r462855051", "createdAt": "2020-07-30T09:01:15Z", "author": {"login": "klalafaryan"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaMirrorMakerSpec.java", "diffHunk": "@@ -60,7 +63,7 @@\n     private Map<String, Object> additionalProperties = new HashMap<>(0);\n \n     @Description(\"The number of pods in the `Deployment`.\")\n-    @Minimum(1)\n+    @Minimum(0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzMDY3MA=="}, "originalCommit": {"oid": "5b0df3b65f64e4e9aa2776a369684bdaefcf042a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIwMTczOA==", "bodyText": "So, you will first need to do make all (or you can go to the api module and do mavn -DskipTests install) -> that should generate the changes tot he CRD in install/cluster-operator. And once you have that you can do make crd_install_.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3412#discussion_r463201738", "createdAt": "2020-07-30T18:49:29Z", "author": {"login": "scholzj"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaMirrorMakerSpec.java", "diffHunk": "@@ -60,7 +63,7 @@\n     private Map<String, Object> additionalProperties = new HashMap<>(0);\n \n     @Description(\"The number of pods in the `Deployment`.\")\n-    @Minimum(1)\n+    @Minimum(0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzMDY3MA=="}, "originalCommit": {"oid": "5b0df3b65f64e4e9aa2776a369684bdaefcf042a"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDE2NzUxOnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/ResourceUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDo0ODozMlrOG5d7ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDo1MDowNlrOG5d-qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkxMjQ1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    KafkaMirrorMakerFluent.SpecNested<KafkaMirrorMakerBuilder> kafkaMirrorMakerBuilder = new KafkaMirrorMakerBuilder()\n          \n          \n            \n                            .withMetadata(new ObjectMetaBuilder()\n          \n          \n            \n                                    .withName(clusterCmName)\n          \n          \n            \n                                    .withNamespace(clusterCmNamespace)\n          \n          \n            \n                                    .withLabels(TestUtils.map(Labels.KUBERNETES_DOMAIN + \"part-of\", \"tests\",\n          \n          \n            \n                                            \"my-user-label\", \"cromulent\"))\n          \n          \n            \n                                    .build())\n          \n          \n            \n                            .withNewSpec()\n          \n          \n            \n                   KafkaMirrorMakerBuilder builder = new KafkaMirrorMakerBuilder()\n          \n          \n            \n                            .withMetadata(new ObjectMetaBuilder()\n          \n          \n            \n                                    .withName(clusterCmName)\n          \n          \n            \n                                    .withNamespace(clusterCmNamespace)\n          \n          \n            \n                                    .withLabels(TestUtils.map(Labels.KUBERNETES_DOMAIN + \"part-of\", \"tests\",\n          \n          \n            \n                                            \"my-user-label\", \"cromulent\"))\n          \n          \n            \n                                    .build())\n          \n          \n            \n                            .withNewSpec()\n          \n          \n            \n                              .withImage(image)\n          \n          \n            \n                              .withProducer(producer)\n          \n          \n            \n                               .withConsumer(consumer)\n          \n          \n            \n                               .withWhitelist(whitelist)\n          \n          \n            \n                               .withMetrics(metricsCm)\n          \n          \n            \n                            .endSpec();\n          \n          \n            \n                            \n          \n          \n            \n                             if (replicas != null) {\n          \n          \n            \n                                builder.editOrNewSpec()\n          \n          \n            \n                                       .withReplicas(replicas)\n          \n          \n            \n                                     .endSpec()\n          \n          \n            \n                             }\n          \n          \n            \n                             \n          \n          \n            \n                             return builder.build();", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3412#discussion_r462912451", "createdAt": "2020-07-30T10:48:32Z", "author": {"login": "samuel-hawker"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/ResourceUtils.java", "diffHunk": "@@ -505,19 +506,29 @@ public static KafkaMirrorMaker createEmptyKafkaMirrorMakerCluster(String cluster\n     }\n \n     public static KafkaMirrorMaker createKafkaMirrorMakerCluster(String clusterCmNamespace, String clusterCmName, String image, KafkaMirrorMakerProducerSpec producer, KafkaMirrorMakerConsumerSpec consumer, String whitelist, Map<String, Object> metricsCm) {\n-        return new KafkaMirrorMakerBuilder()\n+        return createKafkaMirrorMakerCluster(clusterCmNamespace, clusterCmName, image, null, producer, consumer, whitelist, metricsCm);\n+    }\n+\n+    public static KafkaMirrorMaker createKafkaMirrorMakerCluster(String clusterCmNamespace, String clusterCmName, String image, Integer replicas, KafkaMirrorMakerProducerSpec producer, KafkaMirrorMakerConsumerSpec consumer, String whitelist, Map<String, Object> metricsCm) {\n+        KafkaMirrorMakerFluent.SpecNested<KafkaMirrorMakerBuilder> kafkaMirrorMakerBuilder = new KafkaMirrorMakerBuilder()\n                 .withMetadata(new ObjectMetaBuilder()\n                         .withName(clusterCmName)\n                         .withNamespace(clusterCmNamespace)\n                         .withLabels(TestUtils.map(Labels.KUBERNETES_DOMAIN + \"part-of\", \"tests\",\n                                 \"my-user-label\", \"cromulent\"))\n                         .build())\n                 .withNewSpec()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b0df3b65f64e4e9aa2776a369684bdaefcf042a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkxMzE5NA==", "bodyText": "This is the generally the best way to access builders in my opinion, you walk the whole object everytime you conditionally change a field.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3412#discussion_r462913194", "createdAt": "2020-07-30T10:50:06Z", "author": {"login": "samuel-hawker"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/ResourceUtils.java", "diffHunk": "@@ -505,19 +506,29 @@ public static KafkaMirrorMaker createEmptyKafkaMirrorMakerCluster(String cluster\n     }\n \n     public static KafkaMirrorMaker createKafkaMirrorMakerCluster(String clusterCmNamespace, String clusterCmName, String image, KafkaMirrorMakerProducerSpec producer, KafkaMirrorMakerConsumerSpec consumer, String whitelist, Map<String, Object> metricsCm) {\n-        return new KafkaMirrorMakerBuilder()\n+        return createKafkaMirrorMakerCluster(clusterCmNamespace, clusterCmName, image, null, producer, consumer, whitelist, metricsCm);\n+    }\n+\n+    public static KafkaMirrorMaker createKafkaMirrorMakerCluster(String clusterCmNamespace, String clusterCmName, String image, Integer replicas, KafkaMirrorMakerProducerSpec producer, KafkaMirrorMakerConsumerSpec consumer, String whitelist, Map<String, Object> metricsCm) {\n+        KafkaMirrorMakerFluent.SpecNested<KafkaMirrorMakerBuilder> kafkaMirrorMakerBuilder = new KafkaMirrorMakerBuilder()\n                 .withMetadata(new ObjectMetaBuilder()\n                         .withName(clusterCmName)\n                         .withNamespace(clusterCmNamespace)\n                         .withLabels(TestUtils.map(Labels.KUBERNETES_DOMAIN + \"part-of\", \"tests\",\n                                 \"my-user-label\", \"cromulent\"))\n                         .build())\n                 .withNewSpec()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkxMjQ1MQ=="}, "originalCommit": {"oid": "5b0df3b65f64e4e9aa2776a369684bdaefcf042a"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDE3NDY2OnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaMirrorMakerAssemblyOperatorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDo1MDo1M1rOG5eAFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzo0MDowNlrOG5jeyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkxMzU1OA==", "bodyText": "This is a good check, but do we also want to check that the Custom resource status gets set to ready?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3412#discussion_r462913558", "createdAt": "2020-07-30T10:50:53Z", "author": {"login": "samuel-hawker"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaMirrorMakerAssemblyOperatorTest.java", "diffHunk": "@@ -688,4 +688,55 @@ public void testCreateClusterStatusNotReady(VertxTestContext context) throws Int\n                 async.flag();\n             })));\n     }\n+\n+    @Test\n+    public void testCreateOrUpdateZeroReplica(VertxTestContext context) {\n+        ResourceOperatorSupplier supplier = ResourceUtils.supplierWithMocks(true);\n+        CrdOperator mockMirrorOps = supplier.mirrorMakerOperator;\n+        DeploymentOperator mockDcOps = supplier.deploymentOperations;\n+        PodDisruptionBudgetOperator mockPdbOps = supplier.podDisruptionBudgetOperator;\n+        ConfigMapOperator mockCmOps = supplier.configMapOperations;\n+\n+        String clusterCmName = \"foo\";\n+        String clusterCmNamespace = \"test\";\n+        KafkaMirrorMakerConsumerSpec consumer = new KafkaMirrorMakerConsumerSpecBuilder()\n+                .withBootstrapServers(consumerBootstrapServers)\n+                .withGroupId(groupId)\n+                .withNumStreams(numStreams)\n+                .build();\n+        KafkaMirrorMakerProducerSpec producer = new KafkaMirrorMakerProducerSpecBuilder()\n+                .withBootstrapServers(producerBootstrapServers)\n+                .build();\n+        Map<String, Object> metricsCm = new HashMap<>();\n+        metricsCm.put(\"foo\", \"bar\");\n+\n+        KafkaMirrorMaker clusterCm = ResourceUtils.createKafkaMirrorMakerCluster(clusterCmNamespace, clusterCmName, image, 0, producer, consumer, whitelist, metricsCm);\n+\n+        when(mockMirrorOps.get(clusterCmNamespace, clusterCmName)).thenReturn(clusterCm);\n+        when(mockMirrorOps.getAsync(anyString(), anyString())).thenReturn(Future.succeededFuture(clusterCm));\n+        when(mockDcOps.reconcile(anyString(), anyString(), any())).thenReturn(Future.succeededFuture());\n+        when(mockDcOps.scaleUp(anyString(), anyString(), anyInt())).thenReturn(Future.succeededFuture(42));\n+        when(mockDcOps.scaleDown(anyString(), anyString(), anyInt())).thenReturn(Future.succeededFuture(42));\n+        when(mockDcOps.waitForObserved(anyString(), anyString(), anyLong(), anyLong())).thenReturn(Future.succeededFuture());\n+        when(mockPdbOps.reconcile(anyString(), any(), any())).thenReturn(Future.succeededFuture());\n+        when(mockCmOps.reconcile(anyString(), any(), any())).thenReturn(Future.succeededFuture(ReconcileResult.created(new ConfigMap())));\n+\n+        ArgumentCaptor<KafkaMirrorMaker> mirrorMakerCaptor = ArgumentCaptor.forClass(KafkaMirrorMaker.class);\n+        when(mockMirrorOps.updateStatusAsync(mirrorMakerCaptor.capture())).thenReturn(Future.succeededFuture());\n+\n+        KafkaMirrorMakerAssemblyOperator ops = new KafkaMirrorMakerAssemblyOperator(vertx,\n+                new PlatformFeaturesAvailability(true, kubernetesVersion),\n+                new MockCertManager(), new PasswordGenerator(10, \"a\", \"a\"),\n+                supplier,\n+                ResourceUtils.dummyClusterOperatorConfig(VERSIONS));\n+\n+        Checkpoint async = context.checkpoint();\n+        ops.createOrUpdate(new Reconciliation(\"test-trigger\", KafkaMirrorMaker.RESOURCE_KIND, clusterCmNamespace, clusterCmName), clusterCm)\n+                .onComplete(context.succeeding(v -> context.verify(() -> {\n+                    // 0 Replicas - readiness should never get called.\n+                    verify(mockDcOps, never()).readiness(anyString(), anyString(), anyLong(), anyLong());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b0df3b65f64e4e9aa2776a369684bdaefcf042a"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAwMzMzNw==", "bodyText": "Sure, good point. I will check the custom resource status.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3412#discussion_r463003337", "createdAt": "2020-07-30T13:40:06Z", "author": {"login": "klalafaryan"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaMirrorMakerAssemblyOperatorTest.java", "diffHunk": "@@ -688,4 +688,55 @@ public void testCreateClusterStatusNotReady(VertxTestContext context) throws Int\n                 async.flag();\n             })));\n     }\n+\n+    @Test\n+    public void testCreateOrUpdateZeroReplica(VertxTestContext context) {\n+        ResourceOperatorSupplier supplier = ResourceUtils.supplierWithMocks(true);\n+        CrdOperator mockMirrorOps = supplier.mirrorMakerOperator;\n+        DeploymentOperator mockDcOps = supplier.deploymentOperations;\n+        PodDisruptionBudgetOperator mockPdbOps = supplier.podDisruptionBudgetOperator;\n+        ConfigMapOperator mockCmOps = supplier.configMapOperations;\n+\n+        String clusterCmName = \"foo\";\n+        String clusterCmNamespace = \"test\";\n+        KafkaMirrorMakerConsumerSpec consumer = new KafkaMirrorMakerConsumerSpecBuilder()\n+                .withBootstrapServers(consumerBootstrapServers)\n+                .withGroupId(groupId)\n+                .withNumStreams(numStreams)\n+                .build();\n+        KafkaMirrorMakerProducerSpec producer = new KafkaMirrorMakerProducerSpecBuilder()\n+                .withBootstrapServers(producerBootstrapServers)\n+                .build();\n+        Map<String, Object> metricsCm = new HashMap<>();\n+        metricsCm.put(\"foo\", \"bar\");\n+\n+        KafkaMirrorMaker clusterCm = ResourceUtils.createKafkaMirrorMakerCluster(clusterCmNamespace, clusterCmName, image, 0, producer, consumer, whitelist, metricsCm);\n+\n+        when(mockMirrorOps.get(clusterCmNamespace, clusterCmName)).thenReturn(clusterCm);\n+        when(mockMirrorOps.getAsync(anyString(), anyString())).thenReturn(Future.succeededFuture(clusterCm));\n+        when(mockDcOps.reconcile(anyString(), anyString(), any())).thenReturn(Future.succeededFuture());\n+        when(mockDcOps.scaleUp(anyString(), anyString(), anyInt())).thenReturn(Future.succeededFuture(42));\n+        when(mockDcOps.scaleDown(anyString(), anyString(), anyInt())).thenReturn(Future.succeededFuture(42));\n+        when(mockDcOps.waitForObserved(anyString(), anyString(), anyLong(), anyLong())).thenReturn(Future.succeededFuture());\n+        when(mockPdbOps.reconcile(anyString(), any(), any())).thenReturn(Future.succeededFuture());\n+        when(mockCmOps.reconcile(anyString(), any(), any())).thenReturn(Future.succeededFuture(ReconcileResult.created(new ConfigMap())));\n+\n+        ArgumentCaptor<KafkaMirrorMaker> mirrorMakerCaptor = ArgumentCaptor.forClass(KafkaMirrorMaker.class);\n+        when(mockMirrorOps.updateStatusAsync(mirrorMakerCaptor.capture())).thenReturn(Future.succeededFuture());\n+\n+        KafkaMirrorMakerAssemblyOperator ops = new KafkaMirrorMakerAssemblyOperator(vertx,\n+                new PlatformFeaturesAvailability(true, kubernetesVersion),\n+                new MockCertManager(), new PasswordGenerator(10, \"a\", \"a\"),\n+                supplier,\n+                ResourceUtils.dummyClusterOperatorConfig(VERSIONS));\n+\n+        Checkpoint async = context.checkpoint();\n+        ops.createOrUpdate(new Reconciliation(\"test-trigger\", KafkaMirrorMaker.RESOURCE_KIND, clusterCmNamespace, clusterCmName), clusterCm)\n+                .onComplete(context.succeeding(v -> context.verify(() -> {\n+                    // 0 Replicas - readiness should never get called.\n+                    verify(mockDcOps, never()).readiness(anyString(), anyString(), anyLong(), anyLong());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkxMzU1OA=="}, "originalCommit": {"oid": "5b0df3b65f64e4e9aa2776a369684bdaefcf042a"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1201, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}