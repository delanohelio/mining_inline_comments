{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNTEyNzc1", "number": 2815, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjoxMjowN1rODweJ8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNTowMjozMVrOD3BOSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTUyMzA2OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/TopicST.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjoxMjowN1rOGDfnpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODozNDowN1rOGFD8cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxNjk2NA==", "bodyText": "why the admin client goes through an external listener? Can you use the internal plain port for this test?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2815#discussion_r406316964", "createdAt": "2020-04-09T16:12:07Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/TopicST.java", "diffHunk": "@@ -181,6 +195,45 @@ void testBigAmountOfTopicsCreatingViaKafka() {\n         }\n     }\n \n+    @Tag(NODEPORT_SUPPORTED)\n+    @Tag(SCALABILITY)\n+    @Test\n+    void testBigAmountOfTopicsCreatingViaAdminClient() throws ExecutionException, InterruptedException, TimeoutException {\n+\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 1)\n+            .editSpec()\n+                .editKafka()\n+                    .editListeners()\n+                        .withNewKafkaListenerExternalNodePort()\n+                            .withTls(false)\n+                        .endKafkaListenerExternalNodePort()\n+                    .endListeners()\n+                .endKafka()\n+            .endSpec()\n+            .done();\n+\n+        Properties properties = new Properties();\n+        properties.setProperty(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, AbstractKafkaClient.getExternalBootstrapConnect(NAMESPACE, CLUSTER_NAME));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5076cf5eb473d20b588a4df33acdf99f33b2424"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU0MTQxMA==", "bodyText": "The client runs locally, or?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2815#discussion_r406541410", "createdAt": "2020-04-10T00:10:12Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/TopicST.java", "diffHunk": "@@ -181,6 +195,45 @@ void testBigAmountOfTopicsCreatingViaKafka() {\n         }\n     }\n \n+    @Tag(NODEPORT_SUPPORTED)\n+    @Tag(SCALABILITY)\n+    @Test\n+    void testBigAmountOfTopicsCreatingViaAdminClient() throws ExecutionException, InterruptedException, TimeoutException {\n+\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 1)\n+            .editSpec()\n+                .editKafka()\n+                    .editListeners()\n+                        .withNewKafkaListenerExternalNodePort()\n+                            .withTls(false)\n+                        .endKafkaListenerExternalNodePort()\n+                    .endListeners()\n+                .endKafka()\n+            .endSpec()\n+            .done();\n+\n+        Properties properties = new Properties();\n+        properties.setProperty(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, AbstractKafkaClient.getExternalBootstrapConnect(NAMESPACE, CLUSTER_NAME));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxNjk2NA=="}, "originalCommit": {"oid": "c5076cf5eb473d20b588a4df33acdf99f33b2424"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk2MDY4OQ==", "bodyText": "The client runs locally. Is there some way to run client inside the cluster ?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2815#discussion_r407960689", "createdAt": "2020-04-14T08:34:07Z", "author": {"login": "see-quick"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/TopicST.java", "diffHunk": "@@ -181,6 +195,45 @@ void testBigAmountOfTopicsCreatingViaKafka() {\n         }\n     }\n \n+    @Tag(NODEPORT_SUPPORTED)\n+    @Tag(SCALABILITY)\n+    @Test\n+    void testBigAmountOfTopicsCreatingViaAdminClient() throws ExecutionException, InterruptedException, TimeoutException {\n+\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 1)\n+            .editSpec()\n+                .editKafka()\n+                    .editListeners()\n+                        .withNewKafkaListenerExternalNodePort()\n+                            .withTls(false)\n+                        .endKafkaListenerExternalNodePort()\n+                    .endListeners()\n+                .endKafka()\n+            .endSpec()\n+            .done();\n+\n+        Properties properties = new Properties();\n+        properties.setProperty(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, AbstractKafkaClient.getExternalBootstrapConnect(NAMESPACE, CLUSTER_NAME));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxNjk2NA=="}, "originalCommit": {"oid": "c5076cf5eb473d20b588a4df33acdf99f33b2424"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTUzOTAwOnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/TopicST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjoxNjozMFrOGDfx1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjoxNjozMFrOGDfx1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxOTU3Mg==", "bodyText": "I would say \"Verify that corresponding {} KafkaTopic custom resources were created\"", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2815#discussion_r406319572", "createdAt": "2020-04-09T16:16:30Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/TopicST.java", "diffHunk": "@@ -181,6 +195,45 @@ void testBigAmountOfTopicsCreatingViaKafka() {\n         }\n     }\n \n+    @Tag(NODEPORT_SUPPORTED)\n+    @Tag(SCALABILITY)\n+    @Test\n+    void testBigAmountOfTopicsCreatingViaAdminClient() throws ExecutionException, InterruptedException, TimeoutException {\n+\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 1)\n+            .editSpec()\n+                .editKafka()\n+                    .editListeners()\n+                        .withNewKafkaListenerExternalNodePort()\n+                            .withTls(false)\n+                        .endKafkaListenerExternalNodePort()\n+                    .endListeners()\n+                .endKafka()\n+            .endSpec()\n+            .done();\n+\n+        Properties properties = new Properties();\n+        properties.setProperty(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, AbstractKafkaClient.getExternalBootstrapConnect(NAMESPACE, CLUSTER_NAME));\n+\n+        try (AdminClient adminClient = AdminClient.create(properties)) {\n+\n+            for (int i = 0; i < NUMBER_OF_TOPICS; i++) {\n+                String topicName = TOPIC_NAME + \"-\" + i;\n+                LOGGER.debug(\"Creating async topic {} via Admin client\", topicName);\n+                CreateTopicsResult crt = adminClient.createTopics(singletonList(new NewTopic(topicName, 1, (short) 1)));\n+                crt.all().get();\n+            }\n+\n+            Set<String> topics = adminClient.listTopics().names().get(Constants.GLOBAL_CLIENTS_TIMEOUT, TimeUnit.MILLISECONDS);\n+\n+            LOGGER.info(\"Verify that in Kafka cluster contains {} topics\", NUMBER_OF_TOPICS);\n+            assertThat(topics.size(), is(NUMBER_OF_TOPICS));\n+        }\n+\n+        LOGGER.info(\"Verify that {} topics are inside Kubernetes CR\", NUMBER_OF_TOPICS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5076cf5eb473d20b588a4df33acdf99f33b2424"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTkxNTcxOnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/TopicST.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODowMDoxMVrOGDjeVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODozOToxMVrOGFEIvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4MDExOA==", "bodyText": "Is that single Zookeeper node?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2815#discussion_r406380118", "createdAt": "2020-04-09T18:00:11Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/TopicST.java", "diffHunk": "@@ -181,6 +195,45 @@ void testBigAmountOfTopicsCreatingViaKafka() {\n         }\n     }\n \n+    @Tag(NODEPORT_SUPPORTED)\n+    @Tag(SCALABILITY)\n+    @Test\n+    void testBigAmountOfTopicsCreatingViaAdminClient() throws ExecutionException, InterruptedException, TimeoutException {\n+\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5076cf5eb473d20b588a4df33acdf99f33b2424"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk2MzgzOQ==", "bodyText": "Yes. Do i need more?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2815#discussion_r407963839", "createdAt": "2020-04-14T08:39:11Z", "author": {"login": "see-quick"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/TopicST.java", "diffHunk": "@@ -181,6 +195,45 @@ void testBigAmountOfTopicsCreatingViaKafka() {\n         }\n     }\n \n+    @Tag(NODEPORT_SUPPORTED)\n+    @Tag(SCALABILITY)\n+    @Test\n+    void testBigAmountOfTopicsCreatingViaAdminClient() throws ExecutionException, InterruptedException, TimeoutException {\n+\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4MDExOA=="}, "originalCommit": {"oid": "c5076cf5eb473d20b588a4df33acdf99f33b2424"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MDE4MTc2OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/topic/TopicST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNTowMTo1MlrOGNCp7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNTowMTo1MlrOGNCp7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjMyODE3NQ==", "bodyText": "asserThat it contains exactly TOPIC_NAME other than just the size?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2815#discussion_r416328175", "createdAt": "2020-04-28T05:01:52Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/topic/TopicST.java", "diffHunk": "@@ -106,6 +118,41 @@ void testCreateTopicViaKafka() {\n         verifyTopicViaKafka(TOPIC_NAME, topicPartitions);\n     }\n \n+    @Tag(NODEPORT_SUPPORTED)\n+    @Test\n+    void testCreateTopicViaAdminClient() throws ExecutionException, InterruptedException, TimeoutException {\n+\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 3)\n+            .editSpec()\n+                .editKafka()\n+                    .editListeners()\n+                        .withNewKafkaListenerExternalNodePort()\n+                            .withTls(false)\n+                        .endKafkaListenerExternalNodePort()\n+                    .endListeners()\n+                .endKafka()\n+            .endSpec()\n+            .done();\n+\n+        Properties properties = new Properties();\n+        properties.setProperty(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, AbstractKafkaClient.getExternalBootstrapConnect(NAMESPACE, CLUSTER_NAME));\n+\n+        try (AdminClient adminClient = AdminClient.create(properties)) {\n+\n+            LOGGER.info(\"Creating async topic {} via Admin client\", TOPIC_NAME);\n+            CreateTopicsResult crt = adminClient.createTopics(singletonList(new NewTopic(TOPIC_NAME, 1, (short) 1)));\n+            crt.all().get();\n+\n+            Set<String> topics = adminClient.listTopics().names().get(Constants.GLOBAL_CLIENTS_TIMEOUT, TimeUnit.MILLISECONDS);\n+\n+            LOGGER.info(\"Verify that in Kafka cluster contains {} topics\", 1);\n+            assertThat(topics.size(), is(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a9a6cf3cfe9dd65aea398d8b82440888932a99"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MDE4MzEzOnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/topic/TopicST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNTowMjozMVrOGNCqqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNTowMjozMVrOGNCqqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjMyODM2MA==", "bodyText": "the same, assertThat the metadata.name is TOPIC_NAME?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2815#discussion_r416328360", "createdAt": "2020-04-28T05:02:31Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/topic/TopicST.java", "diffHunk": "@@ -106,6 +118,41 @@ void testCreateTopicViaKafka() {\n         verifyTopicViaKafka(TOPIC_NAME, topicPartitions);\n     }\n \n+    @Tag(NODEPORT_SUPPORTED)\n+    @Test\n+    void testCreateTopicViaAdminClient() throws ExecutionException, InterruptedException, TimeoutException {\n+\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 3)\n+            .editSpec()\n+                .editKafka()\n+                    .editListeners()\n+                        .withNewKafkaListenerExternalNodePort()\n+                            .withTls(false)\n+                        .endKafkaListenerExternalNodePort()\n+                    .endListeners()\n+                .endKafka()\n+            .endSpec()\n+            .done();\n+\n+        Properties properties = new Properties();\n+        properties.setProperty(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, AbstractKafkaClient.getExternalBootstrapConnect(NAMESPACE, CLUSTER_NAME));\n+\n+        try (AdminClient adminClient = AdminClient.create(properties)) {\n+\n+            LOGGER.info(\"Creating async topic {} via Admin client\", TOPIC_NAME);\n+            CreateTopicsResult crt = adminClient.createTopics(singletonList(new NewTopic(TOPIC_NAME, 1, (short) 1)));\n+            crt.all().get();\n+\n+            Set<String> topics = adminClient.listTopics().names().get(Constants.GLOBAL_CLIENTS_TIMEOUT, TimeUnit.MILLISECONDS);\n+\n+            LOGGER.info(\"Verify that in Kafka cluster contains {} topics\", 1);\n+            assertThat(topics.size(), is(1));\n+        }\n+\n+        LOGGER.info(\"Verify that corresponding {} KafkaTopic custom resources were created\", 1);\n+        assertThat(KafkaTopicResource.kafkaTopicClient().inNamespace(NAMESPACE).list().getItems().size(), is(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a9a6cf3cfe9dd65aea398d8b82440888932a99"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 139, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}