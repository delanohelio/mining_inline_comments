{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0MjgzNDY5", "number": 2543, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMjozNjowMFrODfKT7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMjozNjo0NlrODfKUyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MDAxMzkwOnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/KafkaST.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMjozNjowMFrOFos8sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMzo0ODozN1rOFovKog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIyMzc5Mg==", "bodyText": "I think this might be a problem in all other tests so it should be part of Kafka deletion prodecure (systemtest only).", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2543#discussion_r378223792", "createdAt": "2020-02-12T12:36:00Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/KafkaST.java", "diffHunk": "@@ -1888,6 +1893,9 @@ void setup() {\n     @Override\n     protected void tearDownEnvironmentAfterEach() throws Exception {\n         super.tearDownEnvironmentAfterEach();\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).withName(KafkaResources.kafkaMetricsAndLogConfigMapName(CLUSTER_NAME)).delete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b21b15b5bfc51f4ec1f57c63e37ab37391f514b"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIyNDQyOQ==", "bodyText": "And probably was fixed by cascading(true) as well, but we can add this check to deletion phase of course.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2543#discussion_r378224429", "createdAt": "2020-02-12T12:37:24Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/KafkaST.java", "diffHunk": "@@ -1888,6 +1893,9 @@ void setup() {\n     @Override\n     protected void tearDownEnvironmentAfterEach() throws Exception {\n         super.tearDownEnvironmentAfterEach();\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).withName(KafkaResources.kafkaMetricsAndLogConfigMapName(CLUSTER_NAME)).delete();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIyMzc5Mg=="}, "originalCommit": {"oid": "7b21b15b5bfc51f4ec1f57c63e37ab37391f514b"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIyNTU1Nw==", "bodyText": "@scholzj Does this CM set OwnerRef to the kafka resource or should we remember about deleting CM when the Kafka CR is removed?\nI am not sure whether this is an issue because the CM should be replaced at the moment the Kafka resource is created. But specifically in the test testConsumerOffsetFiles, it caused the kafka pods were rolled immediately after they were created (and in ready status).", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2543#discussion_r378225557", "createdAt": "2020-02-12T12:40:03Z", "author": {"login": "sknot-rh"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/KafkaST.java", "diffHunk": "@@ -1888,6 +1893,9 @@ void setup() {\n     @Override\n     protected void tearDownEnvironmentAfterEach() throws Exception {\n         super.tearDownEnvironmentAfterEach();\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).withName(KafkaResources.kafkaMetricsAndLogConfigMapName(CLUSTER_NAME)).delete();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIyMzc5Mg=="}, "originalCommit": {"oid": "7b21b15b5bfc51f4ec1f57c63e37ab37391f514b"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI2MDEzMA==", "bodyText": "@stanlyDoge IIRC the metrics and log CM is supplied by the user, so it's not considered a child resource of the CR (i.e. ownerRef not set).", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2543#discussion_r378260130", "createdAt": "2020-02-12T13:48:37Z", "author": {"login": "tombentley"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/KafkaST.java", "diffHunk": "@@ -1888,6 +1893,9 @@ void setup() {\n     @Override\n     protected void tearDownEnvironmentAfterEach() throws Exception {\n         super.tearDownEnvironmentAfterEach();\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).withName(KafkaResources.kafkaMetricsAndLogConfigMapName(CLUSTER_NAME)).delete();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIyMzc5Mg=="}, "originalCommit": {"oid": "7b21b15b5bfc51f4ec1f57c63e37ab37391f514b"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MDAxNjExOnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/KafkaST.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMjozNjo0NlrOFos-Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMjozNjo0NlrOFos-Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIyNDEzNQ==", "bodyText": "This might be fixed by cascading(true) for CR deletion which was merged this morning", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2543#discussion_r378224135", "createdAt": "2020-02-12T12:36:46Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/KafkaST.java", "diffHunk": "@@ -1888,6 +1893,9 @@ void setup() {\n     @Override\n     protected void tearDownEnvironmentAfterEach() throws Exception {\n         super.tearDownEnvironmentAfterEach();\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).withName(KafkaResources.kafkaMetricsAndLogConfigMapName(CLUSTER_NAME)).delete();\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).withName(KafkaResources.zookeeperMetricsAndLogConfigMapName(CLUSTER_NAME)).delete();\n+        kubeClient().getClient().customResources(Crds.topic(), KafkaTopic.class, KafkaTopicList.class, DoneableKafkaTopic.class).inNamespace(NAMESPACE).delete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b21b15b5bfc51f4ec1f57c63e37ab37391f514b"}, "originalPosition": 94}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 451, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}