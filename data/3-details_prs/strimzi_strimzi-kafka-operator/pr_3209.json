{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MDcwNDA4", "number": 3209, "title": "[systemtest] Add tests for scaling subresources", "bodyText": "Type of change\n\nNew test\n\nDescription\nIn this PR I'm gonna add some tests for testing the new feature - scaling CR sub-resources. After #3165 we are able to scale sub-resources of:\n\nKafkaConnect, KafkaConnectS2I, KafkaMirrorMaker2\nKafkaMirrorMaker\nKafkaBridge\nKafkaConnector\n\nOther than that to resource statuses were add number of replicas (or tasksMax for KafkaConnector), observed generation etc.\nChecklist\n\n Write tests\n Make sure all tests pass", "createdAt": "2020-06-17T20:11:35Z", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3209", "merged": true, "mergeCommit": {"oid": "7a51590bc53c02037c9445556d4b76d7d6220f0d"}, "closed": true, "closedAt": "2020-06-19T09:22:19Z", "author": {"login": "im-konge"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsPnnmAH2gAyNDM2MDcwNDA4OjA1ZjhkY2U4MmFmZmNiZWUyZDVkYmNjZDVmMTIwZjYxZmQzMDRiYTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcstalfgFqTQzMzg0MjUyMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "05f8dce82affcbee2d5dbccd5f120f61fd304ba2", "author": {"user": {"login": "im-konge", "name": "Luk\u00e1\u0161 Kr\u00e1l"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/05f8dce82affcbee2d5dbccd5f120f61fd304ba2", "committedDate": "2020-06-17T20:10:36Z", "message": "add tests for scaling subresources\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb8651ef69309296a8516cd53a8b5b63787f6774", "author": {"user": {"login": "im-konge", "name": "Luk\u00e1\u0161 Kr\u00e1l"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/bb8651ef69309296a8516cd53a8b5b63787f6774", "committedDate": "2020-06-17T20:17:17Z", "message": "fixup! add tests for scaling subresources\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b259033ab3fa4f4b7b763e262b8d6508c15353f1", "author": {"user": {"login": "im-konge", "name": "Luk\u00e1\u0161 Kr\u00e1l"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b259033ab3fa4f4b7b763e262b8d6508c15353f1", "committedDate": "2020-06-17T20:14:58Z", "message": "fixup! add tests for scaling subresources\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>"}, "afterCommit": {"oid": "bb8651ef69309296a8516cd53a8b5b63787f6774", "author": {"user": {"login": "im-konge", "name": "Luk\u00e1\u0161 Kr\u00e1l"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/bb8651ef69309296a8516cd53a8b5b63787f6774", "committedDate": "2020-06-17T20:17:17Z", "message": "fixup! add tests for scaling subresources\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNzQ2NjE0", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3209#pullrequestreview-432746614", "createdAt": "2020-06-17T20:24:09Z", "commit": {"oid": "bb8651ef69309296a8516cd53a8b5b63787f6774"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDoyNDowOVrOGlWCXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDoyNDo0MFrOGlWDXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgxMTU1MA==", "bodyText": "I think it might make sense to also check the tasksMax in .spec", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3209#discussion_r441811550", "createdAt": "2020-06-17T20:24:09Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java", "diffHunk": "@@ -944,6 +946,53 @@ void testScaleConnectWithConnectorToZero() {\n         assertThat(connectorStatus.getConditions().stream().anyMatch(condition -> condition.getMessage().contains(\"has 0 replicas\")), is(true));\n     }\n \n+    @Test\n+    void testScaleConnectAndConnectorSubresource() {\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3).done();\n+\n+        KafkaConnectResource.kafkaConnect(CLUSTER_NAME, 1)\n+            .editMetadata()\n+                .addToLabels(\"type\", \"kafka-connect\")\n+                .addToAnnotations(Annotations.STRIMZI_IO_USE_CONNECTOR_RESOURCES, \"true\")\n+            .endMetadata()\n+            .done();\n+\n+        KafkaConnectorResource.kafkaConnector(CLUSTER_NAME)\n+            .editSpec()\n+                .withClassName(\"org.apache.kafka.connect.file.FileStreamSinkConnector\")\n+                .addToConfig(\"file\", Constants.DEFAULT_SINK_FILE_PATH)\n+                .addToConfig(\"key.converter\", \"org.apache.kafka.connect.storage.StringConverter\")\n+                .addToConfig(\"value.converter\", \"org.apache.kafka.connect.storage.StringConverter\")\n+                .addToConfig(\"topics\", TOPIC_NAME)\n+            .endSpec()\n+            .done();\n+\n+        int scaleTo = 4;\n+        long connectObsGen = KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration();\n+        String connectGenName = kubeClient().listPods(\"type\", \"kafka-connect\").get(0).getMetadata().getGenerateName();\n+\n+        LOGGER.info(\"-------> Scaling KafkaConnect subresource <-------\");\n+        LOGGER.info(\"Scaling subresource replicas to {}\", scaleTo);\n+        cmdKubeClient().scaleByName(KafkaConnect.RESOURCE_KIND, CLUSTER_NAME, scaleTo);\n+        DeploymentUtils.waitForDeploymentAndPodsReady(KafkaConnectResources.deploymentName(CLUSTER_NAME), scaleTo);\n+\n+        LOGGER.info(\"Check if replicas is set to {}, naming prefix should be same and observed generation higher\", scaleTo);\n+        List<String> connectPods = kubeClient().listPodNames(\"type\", \"kafka-connect\");\n+        assertThat(connectPods.size(), is(4));\n+        assertThat(connectObsGen < KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration(), is(true));\n+        for (String pod : connectPods) {\n+            assertThat(pod.contains(connectGenName), is(true));\n+        }\n+\n+        LOGGER.info(\"-------> Scaling KafkaConnector subresource <-------\");\n+        LOGGER.info(\"Scaling subresource task max to {}\", scaleTo);\n+        cmdKubeClient().scaleByName(KafkaConnector.RESOURCE_KIND, CLUSTER_NAME, scaleTo);\n+\n+        LOGGER.info(\"Check if taskMax is set to {}\", scaleTo);\n+        int tasksMax = KafkaConnectorResource.kafkaConnectorClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getTasksMax();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb8651ef69309296a8516cd53a8b5b63787f6774"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgxMTgwNQ==", "bodyText": "I think it might make sense to also check the replicas in .spec and .status. Same should apply to all tests I guess.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3209#discussion_r441811805", "createdAt": "2020-06-17T20:24:40Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java", "diffHunk": "@@ -944,6 +946,53 @@ void testScaleConnectWithConnectorToZero() {\n         assertThat(connectorStatus.getConditions().stream().anyMatch(condition -> condition.getMessage().contains(\"has 0 replicas\")), is(true));\n     }\n \n+    @Test\n+    void testScaleConnectAndConnectorSubresource() {\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3).done();\n+\n+        KafkaConnectResource.kafkaConnect(CLUSTER_NAME, 1)\n+            .editMetadata()\n+                .addToLabels(\"type\", \"kafka-connect\")\n+                .addToAnnotations(Annotations.STRIMZI_IO_USE_CONNECTOR_RESOURCES, \"true\")\n+            .endMetadata()\n+            .done();\n+\n+        KafkaConnectorResource.kafkaConnector(CLUSTER_NAME)\n+            .editSpec()\n+                .withClassName(\"org.apache.kafka.connect.file.FileStreamSinkConnector\")\n+                .addToConfig(\"file\", Constants.DEFAULT_SINK_FILE_PATH)\n+                .addToConfig(\"key.converter\", \"org.apache.kafka.connect.storage.StringConverter\")\n+                .addToConfig(\"value.converter\", \"org.apache.kafka.connect.storage.StringConverter\")\n+                .addToConfig(\"topics\", TOPIC_NAME)\n+            .endSpec()\n+            .done();\n+\n+        int scaleTo = 4;\n+        long connectObsGen = KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration();\n+        String connectGenName = kubeClient().listPods(\"type\", \"kafka-connect\").get(0).getMetadata().getGenerateName();\n+\n+        LOGGER.info(\"-------> Scaling KafkaConnect subresource <-------\");\n+        LOGGER.info(\"Scaling subresource replicas to {}\", scaleTo);\n+        cmdKubeClient().scaleByName(KafkaConnect.RESOURCE_KIND, CLUSTER_NAME, scaleTo);\n+        DeploymentUtils.waitForDeploymentAndPodsReady(KafkaConnectResources.deploymentName(CLUSTER_NAME), scaleTo);\n+\n+        LOGGER.info(\"Check if replicas is set to {}, naming prefix should be same and observed generation higher\", scaleTo);\n+        List<String> connectPods = kubeClient().listPodNames(\"type\", \"kafka-connect\");\n+        assertThat(connectPods.size(), is(4));\n+        assertThat(connectObsGen < KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration(), is(true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb8651ef69309296a8516cd53a8b5b63787f6774"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "463c4bf64b19c080bf3686053a17bee3619b94bf", "author": {"user": {"login": "im-konge", "name": "Luk\u00e1\u0161 Kr\u00e1l"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/463c4bf64b19c080bf3686053a17bee3619b94bf", "committedDate": "2020-06-18T09:55:25Z", "message": "comments\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzMTg3MjM1", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3209#pullrequestreview-433187235", "createdAt": "2020-06-18T11:24:38Z", "commit": {"oid": "463c4bf64b19c080bf3686053a17bee3619b94bf"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMToyNDozOVrOGlrB-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMTozMjozNlrOGlrRYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NTUxNA==", "bodyText": "I would be nice to have a comment why this assert pass", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3209#discussion_r442155514", "createdAt": "2020-06-18T11:24:39Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/ConnectS2IST.java", "diffHunk": "@@ -689,6 +689,36 @@ void testScaleConnectS2IWithConnectorToZero() {\n         assertThat(connectorStatus.getConditions().stream().anyMatch(condition -> condition.getMessage().contains(\"has 0 replicas\")), is(true));\n     }\n \n+    @Test\n+    void testScaleConnectS2ISubresource() {\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3).done();\n+\n+        KafkaConnectS2IResource.kafkaConnectS2I(CLUSTER_NAME, CLUSTER_NAME, 1)\n+            .editMetadata()\n+                .addToLabels(\"type\", \"kafka-connect-s2i\")\n+            .endMetadata()\n+            .done();\n+\n+        int scaleTo = 4;\n+        long connectS2IObsGen = KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration();\n+        String connectS2IGenName = kubeClient().listPods(\"type\", \"kafka-connect-s2i\").get(0).getMetadata().getGenerateName();\n+\n+        LOGGER.info(\"-------> Scaling KafkaConnectS2I subresource <-------\");\n+        LOGGER.info(\"Scaling subresource replicas to {}\", scaleTo);\n+        cmdKubeClient().scaleByName(KafkaConnectS2I.RESOURCE_KIND, CLUSTER_NAME, scaleTo);\n+        DeploymentConfigUtils.waitForDeploymentConfigAndPodsReady(KafkaConnectS2IResources.deploymentName(CLUSTER_NAME), scaleTo);\n+\n+        LOGGER.info(\"Check if replicas is set to {}, naming prefix should be same and observed generation higher\", scaleTo);\n+        List<String> connectS2IPods = kubeClient().listPodNames(\"type\", \"kafka-connect-s2i\");\n+        assertThat(connectS2IPods.size(), is(4));\n+        assertThat(KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getSpec().getReplicas(), is(4));\n+        assertThat(KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getReplicas(), is(4));\n+        assertThat(connectS2IObsGen < KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration(), is(true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "463c4bf64b19c080bf3686053a17bee3619b94bf"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NjAyMQ==", "bodyText": "is this rly needed? I assume the s2i pods will contain it for sure. I see you have it everywhere.  I don't say it's wrong, maybe I just don't see the value of it?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3209#discussion_r442156021", "createdAt": "2020-06-18T11:25:42Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/ConnectS2IST.java", "diffHunk": "@@ -689,6 +689,36 @@ void testScaleConnectS2IWithConnectorToZero() {\n         assertThat(connectorStatus.getConditions().stream().anyMatch(condition -> condition.getMessage().contains(\"has 0 replicas\")), is(true));\n     }\n \n+    @Test\n+    void testScaleConnectS2ISubresource() {\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3).done();\n+\n+        KafkaConnectS2IResource.kafkaConnectS2I(CLUSTER_NAME, CLUSTER_NAME, 1)\n+            .editMetadata()\n+                .addToLabels(\"type\", \"kafka-connect-s2i\")\n+            .endMetadata()\n+            .done();\n+\n+        int scaleTo = 4;\n+        long connectS2IObsGen = KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration();\n+        String connectS2IGenName = kubeClient().listPods(\"type\", \"kafka-connect-s2i\").get(0).getMetadata().getGenerateName();\n+\n+        LOGGER.info(\"-------> Scaling KafkaConnectS2I subresource <-------\");\n+        LOGGER.info(\"Scaling subresource replicas to {}\", scaleTo);\n+        cmdKubeClient().scaleByName(KafkaConnectS2I.RESOURCE_KIND, CLUSTER_NAME, scaleTo);\n+        DeploymentConfigUtils.waitForDeploymentConfigAndPodsReady(KafkaConnectS2IResources.deploymentName(CLUSTER_NAME), scaleTo);\n+\n+        LOGGER.info(\"Check if replicas is set to {}, naming prefix should be same and observed generation higher\", scaleTo);\n+        List<String> connectS2IPods = kubeClient().listPodNames(\"type\", \"kafka-connect-s2i\");\n+        assertThat(connectS2IPods.size(), is(4));\n+        assertThat(KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getSpec().getReplicas(), is(4));\n+        assertThat(KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getReplicas(), is(4));\n+        assertThat(connectS2IObsGen < KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration(), is(true));\n+        for (String pod : connectS2IPods) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "463c4bf64b19c080bf3686053a17bee3619b94bf"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1OTQ1OQ==", "bodyText": "What about change max.tasks for one connect and see if everything is working and set properly?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3209#discussion_r442159459", "createdAt": "2020-06-18T11:32:36Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java", "diffHunk": "@@ -944,6 +946,56 @@ void testScaleConnectWithConnectorToZero() {\n         assertThat(connectorStatus.getConditions().stream().anyMatch(condition -> condition.getMessage().contains(\"has 0 replicas\")), is(true));\n     }\n \n+    @Test\n+    void testScaleConnectAndConnectorSubresource() {\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3).done();\n+\n+        KafkaConnectResource.kafkaConnect(CLUSTER_NAME, 1)\n+            .editMetadata()\n+                .addToLabels(\"type\", \"kafka-connect\")\n+                .addToAnnotations(Annotations.STRIMZI_IO_USE_CONNECTOR_RESOURCES, \"true\")\n+            .endMetadata()\n+            .done();\n+\n+        KafkaConnectorResource.kafkaConnector(CLUSTER_NAME)\n+            .editSpec()\n+                .withClassName(\"org.apache.kafka.connect.file.FileStreamSinkConnector\")\n+                .addToConfig(\"file\", Constants.DEFAULT_SINK_FILE_PATH)\n+                .addToConfig(\"key.converter\", \"org.apache.kafka.connect.storage.StringConverter\")\n+                .addToConfig(\"value.converter\", \"org.apache.kafka.connect.storage.StringConverter\")\n+                .addToConfig(\"topics\", TOPIC_NAME)\n+            .endSpec()\n+            .done();\n+\n+        int scaleTo = 4;\n+        long connectObsGen = KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration();\n+        String connectGenName = kubeClient().listPods(\"type\", \"kafka-connect\").get(0).getMetadata().getGenerateName();\n+\n+        LOGGER.info(\"-------> Scaling KafkaConnect subresource <-------\");\n+        LOGGER.info(\"Scaling subresource replicas to {}\", scaleTo);\n+        cmdKubeClient().scaleByName(KafkaConnect.RESOURCE_KIND, CLUSTER_NAME, scaleTo);\n+        DeploymentUtils.waitForDeploymentAndPodsReady(KafkaConnectResources.deploymentName(CLUSTER_NAME), scaleTo);\n+\n+        LOGGER.info(\"Check if replicas is set to {}, observed generation is higher - for spec and status - naming prefix should be same\", scaleTo);\n+        List<String> connectPods = kubeClient().listPodNames(\"type\", \"kafka-connect\");\n+        assertThat(connectPods.size(), is(4));\n+        assertThat(KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getSpec().getReplicas(), is(4));\n+        assertThat(KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getReplicas(), is(4));\n+        assertThat(connectObsGen < KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration(), is(true));\n+        for (String pod : connectPods) {\n+            assertThat(pod.contains(connectGenName), is(true));\n+        }\n+\n+        LOGGER.info(\"-------> Scaling KafkaConnector subresource <-------\");\n+        LOGGER.info(\"Scaling subresource task max to {}\", scaleTo);\n+        cmdKubeClient().scaleByName(KafkaConnector.RESOURCE_KIND, CLUSTER_NAME, scaleTo);\n+        KafkaConnectorUtils.waitForConnectorsTaskMaxChange(CLUSTER_NAME, scaleTo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "463c4bf64b19c080bf3686053a17bee3619b94bf"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzMTk2NTk5", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3209#pullrequestreview-433196599", "createdAt": "2020-06-18T11:38:59Z", "commit": {"oid": "463c4bf64b19c080bf3686053a17bee3619b94bf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "101a29dcab21d0d408302f70da9650011935ea04", "author": {"user": {"login": "im-konge", "name": "Luk\u00e1\u0161 Kr\u00e1l"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/101a29dcab21d0d408302f70da9650011935ea04", "committedDate": "2020-06-18T14:52:25Z", "message": "comments vol.2\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzODQyNTIw", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3209#pullrequestreview-433842520", "createdAt": "2020-06-19T06:53:31Z", "commit": {"oid": "101a29dcab21d0d408302f70da9650011935ea04"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1565, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}