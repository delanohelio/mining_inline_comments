{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNzQxMTI5", "number": 2915, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxOTo1ODo1MlrOD3x6dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMjowMzozNVrOD4A1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODE2MDUzOnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/ZookeeperScaler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxOTo1ODo1MlrOGOOwkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMTo0NjoyMFrOGOSOEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU3NTA1OA==", "bodyText": "Do we want to use a constant and reference it for the 2181 here", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2915#discussion_r417575058", "createdAt": "2020-04-29T19:58:52Z", "author": {"login": "samuel-hawker"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/ZookeeperScaler.java", "diffHunk": "@@ -324,18 +327,13 @@ private ZKClientConfig getClientConfig()  {\n      * @param scale     Number of nodes which the Zookeeper cluster should have\n      * @return          Map with configuration\n      */\n-    /*test*/ static Map<String, String> generateConfig(int scale)   {\n+    /*test*/ static Map<String, String> generateConfig(int scale, Function<Integer, String> zkNodeAddress)   {\n         Map<String, String> servers = new HashMap<>(scale);\n \n         for (int i = 0; i < scale; i++) {\n-            // The Zookeeper server IDs starts with 1\n+            // The Zookeeper server IDs starts with 1, but pod index starts from 0\n             String key = String.format(\"server.%d\", i + 1);\n-\n-            // The ports\n-            int followerPort = (ZookeeperCluster.CLUSTERING_PORT * 10) + i;\n-            int electionPort = (ZookeeperCluster.LEADER_ELECTION_PORT * 10) + i;\n-            int clientPort = (ZookeeperCluster.CLIENT_PORT * 10) + i;\n-            String value = String.format(\"127.0.0.1:%d:%d:participant;127.0.0.1:%d\", followerPort, electionPort, clientPort);\n+            String value = String.format(\"%s:%d:%d:participant;127.0.0.1:%d\", zkNodeAddress.apply(i), ZookeeperCluster.CLUSTERING_PORT, ZookeeperCluster.LEADER_ELECTION_PORT, 2181);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "572a81f014fd25741beca2ff3869a3c2b73d7957"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYzMTc2Mg==", "bodyText": "Done", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2915#discussion_r417631762", "createdAt": "2020-04-29T21:46:20Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/ZookeeperScaler.java", "diffHunk": "@@ -324,18 +327,13 @@ private ZKClientConfig getClientConfig()  {\n      * @param scale     Number of nodes which the Zookeeper cluster should have\n      * @return          Map with configuration\n      */\n-    /*test*/ static Map<String, String> generateConfig(int scale)   {\n+    /*test*/ static Map<String, String> generateConfig(int scale, Function<Integer, String> zkNodeAddress)   {\n         Map<String, String> servers = new HashMap<>(scale);\n \n         for (int i = 0; i < scale; i++) {\n-            // The Zookeeper server IDs starts with 1\n+            // The Zookeeper server IDs starts with 1, but pod index starts from 0\n             String key = String.format(\"server.%d\", i + 1);\n-\n-            // The ports\n-            int followerPort = (ZookeeperCluster.CLUSTERING_PORT * 10) + i;\n-            int electionPort = (ZookeeperCluster.LEADER_ELECTION_PORT * 10) + i;\n-            int clientPort = (ZookeeperCluster.CLIENT_PORT * 10) + i;\n-            String value = String.format(\"127.0.0.1:%d:%d:participant;127.0.0.1:%d\", followerPort, electionPort, clientPort);\n+            String value = String.format(\"%s:%d:%d:participant;127.0.0.1:%d\", zkNodeAddress.apply(i), ZookeeperCluster.CLUSTERING_PORT, ZookeeperCluster.LEADER_ELECTION_PORT, 2181);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU3NTA1OA=="}, "originalCommit": {"oid": "572a81f014fd25741beca2ff3869a3c2b73d7957"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTk0MjIzOnYy", "diffSide": "RIGHT", "path": "CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwODo0NTowN1rOGOfrkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwODo0NTowN1rOGOfrkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg1MjMwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Remove ZooKeeper TLS sidecars and use native ZooKeeper TLS support instead\n          \n          \n            \n            * Remove TLS sidecars from ZooKeeper pods, using native ZooKeeper TLS support instead.\n          \n      \n    \n    \n  \n\nI think this makes it clearer that this change only affects the ZooKeeper server side of the connection, not the client side.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2915#discussion_r417852304", "createdAt": "2020-04-30T08:45:07Z", "author": {"login": "tombentley"}, "path": "CHANGELOG.md", "diffHunk": "@@ -13,6 +13,8 @@\n * Allow standalone User Operator to modify status on KafkaUser\n * Add support for Kafka 2.4.1\n * Add support for Kafka 2.5.0\n+* Remove ZooKeeper TLS sidecars and use native ZooKeeper TLS support instead", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d29f3b86979b5622123e64ca362ff74feafeda7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTk2ODIxOnYy", "diffSide": "LEFT", "path": "api/src/main/java/io/strimzi/api/kafka/model/ZookeeperClusterSpec.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwODo1MjoyMlrOGOf8og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwODo1MjoyMlrOGOf8og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg1NjY3NA==", "bodyText": "Removing these properties is an incompatible change. I don't think that actually breaks anything on any of the versions of Kube which we support (since we're not using structural schemas), but if we were using structural schemas the existing CRs which specified this property would be rejected by the API server. So it might not cause any problems immediately until we make the CRD changes for structual schemas at which point users who still had this specified in their CRs would suddenly get errors.\nOverall I think it might be safer to just leave the property in there, but mark it as @DeprecatedProperty and ignore it when it's set. We could remove it in v1beta2.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2915#discussion_r417856674", "createdAt": "2020-04-30T08:52:22Z", "author": {"login": "tombentley"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/ZookeeperClusterSpec.java", "diffHunk": "@@ -96,16 +99,6 @@ public void setLogging(Logging logging) {\n         this.logging = logging;\n     }\n \n-    @Description(\"TLS sidecar configuration\")\n-    @JsonInclude(JsonInclude.Include.NON_NULL)\n-    public TlsSidecar getTlsSidecar() {\n-        return tlsSidecar;\n-    }\n-\n-    public void setTlsSidecar(TlsSidecar tlsSidecar) {\n-        this.tlsSidecar = tlsSidecar;\n-    }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d29f3b86979b5622123e64ca362ff74feafeda7"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTk2OTMzOnYy", "diffSide": "LEFT", "path": "api/src/main/java/io/strimzi/api/kafka/model/template/ZookeeperClusterTemplate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwODo1Mjo0MVrOGOf9Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwODo1Mjo0MVrOGOf9Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg1Njg1OA==", "bodyText": "Same comment.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2915#discussion_r417856858", "createdAt": "2020-04-30T08:52:41Z", "author": {"login": "tombentley"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/template/ZookeeperClusterTemplate.java", "diffHunk": "@@ -111,16 +110,6 @@ public void setZookeeperContainer(ContainerTemplate zookeeperContainer) {\n         this.zookeeperContainer = zookeeperContainer;\n     }\n \n-    @Description(\"Template for the Kafka broker TLS sidecar container\")\n-    @JsonInclude(JsonInclude.Include.NON_EMPTY)\n-    public ContainerTemplate getTlsSidecarContainer() {\n-        return tlsSidecarContainer;\n-    }\n-\n-    public void setTlsSidecarContainer(ContainerTemplate tlsSidecarContainer) {\n-        this.tlsSidecarContainer = tlsSidecarContainer;\n-    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d29f3b86979b5622123e64ca362ff74feafeda7"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMDU5MzU1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/strimzi/api/kafka/model/template/ZookeeperClusterTemplate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMjowMDowOVrOGOmGeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMjowMDowOVrOGOmGeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk1NzQ5OA==", "bodyText": "I know it doesn't matter as this is now deprecated, but isn't this technically the ZooKeeper TLS sidecar container?\nOr do you refer to it as the kafka broker sidecar as its job is to speak to the kafka broker?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2915#discussion_r417957498", "createdAt": "2020-04-30T12:00:09Z", "author": {"login": "samuel-hawker"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/template/ZookeeperClusterTemplate.java", "diffHunk": "@@ -111,7 +112,10 @@ public void setZookeeperContainer(ContainerTemplate zookeeperContainer) {\n         this.zookeeperContainer = zookeeperContainer;\n     }\n \n-    @Description(\"Template for the Kafka broker TLS sidecar container\")\n+    @DeprecatedProperty\n+    @Deprecated\n+    @Description(\"Template for the Kafka broker TLS sidecar container. \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c825401c74fff57d2216c7eb938be693fce078bb"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMDU5NjEyOnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMjowMDo1NFrOGOmH-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMjowMDo1NFrOGOmH-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk1Nzg4Mg==", "bodyText": "Might be missing something here, but don't we only add two things to data , not three?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2915#discussion_r417957882", "createdAt": "2020-04-30T12:00:54Z", "author": {"login": "samuel-hawker"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java", "diffHunk": "@@ -374,7 +374,7 @@ public String parseLogging(Logging logging, ConfigMap externalCm) {\n      * @return The generated ConfigMap.\n      */\n     public ConfigMap generateMetricsAndLogConfigMap(ConfigMap cm) {\n-        Map<String, String> data = new HashMap<>();\n+        Map<String, String> data = new HashMap<>(3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c825401c74fff57d2216c7eb938be693fce078bb"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMDYwNDY2OnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/ZookeeperConfiguration.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMjowMzozNVrOGOmNMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMToyNTozNVrOGO65wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk1OTIxOA==", "bodyText": "FORBIDDEN_OPTIONS_EXCEPTIONS  might be a slightly better name just so that this isn't confused with EXCEPTIONS as in the throwable (highly unlikely I admit, but still probably best to stay consistent with where  we have used:\nFORBIDDEN_PREFIXES\nFORBIDDEN_PREFIXES_EXCEPTIONS", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2915#discussion_r417959218", "createdAt": "2020-04-30T12:03:35Z", "author": {"login": "samuel-hawker"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/ZookeeperConfiguration.java", "diffHunk": "@@ -7,34 +7,25 @@\n \n import io.strimzi.api.kafka.model.ZookeeperClusterSpec;\n \n-import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n-import static java.util.Collections.emptyList;\n+import static java.util.Arrays.asList;\n \n /**\n  * Class for handling Zookeeper configuration passed by the user\n  */\n public class ZookeeperConfiguration extends AbstractConfiguration {\n \n     private static final List<String> FORBIDDEN_OPTIONS;\n+    private static final List<String> EXCEPTIONS;\n     protected static final Map<String, String> DEFAULTS;\n \n     static {\n-        FORBIDDEN_OPTIONS = new ArrayList<>();\n-        FORBIDDEN_OPTIONS.addAll(Arrays.asList(ZookeeperClusterSpec.FORBIDDEN_PREFIXES.split(\" *, *\")));\n-        // This option is handled in the Zookeeper container startup script\n-        FORBIDDEN_OPTIONS.add(\"snapshot.trust.empty\");\n-        // This option would prevent scaling beyond 1 node for clusters started with a single node\n-        FORBIDDEN_OPTIONS.add(\"standaloneEnabled\");\n-        // Reconfiguration needs to be enabled to allow scaling of the cluster\n-        FORBIDDEN_OPTIONS.add(\"reconfigEnabled\");\n-        // The Cluster Operator requires access to multiple 4LW and access to the nodes is secured by the TLS-Sidecars so we set all allowed\n-        FORBIDDEN_OPTIONS.add(\"4lw.commands.whitelist\");\n+        FORBIDDEN_OPTIONS = asList(ZookeeperClusterSpec.FORBIDDEN_PREFIXES.split(\", \"));\n+        EXCEPTIONS = asList(ZookeeperClusterSpec.FORBIDDEN_PREFIX_EXCEPTIONS.split(\", \"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c825401c74fff57d2216c7eb938be693fce078bb"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk4NDAxOA==", "bodyText": "I think this is fair point, but it is named EXCEPTIONS everywhere else - in all the other *Configuration classes in themodel package. So I probably prefer to keep it as it is and in sync with the other classes. I would instead open a sepaarte issue for it if it is fine with you.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2915#discussion_r417984018", "createdAt": "2020-04-30T12:49:25Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/ZookeeperConfiguration.java", "diffHunk": "@@ -7,34 +7,25 @@\n \n import io.strimzi.api.kafka.model.ZookeeperClusterSpec;\n \n-import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n-import static java.util.Collections.emptyList;\n+import static java.util.Arrays.asList;\n \n /**\n  * Class for handling Zookeeper configuration passed by the user\n  */\n public class ZookeeperConfiguration extends AbstractConfiguration {\n \n     private static final List<String> FORBIDDEN_OPTIONS;\n+    private static final List<String> EXCEPTIONS;\n     protected static final Map<String, String> DEFAULTS;\n \n     static {\n-        FORBIDDEN_OPTIONS = new ArrayList<>();\n-        FORBIDDEN_OPTIONS.addAll(Arrays.asList(ZookeeperClusterSpec.FORBIDDEN_PREFIXES.split(\" *, *\")));\n-        // This option is handled in the Zookeeper container startup script\n-        FORBIDDEN_OPTIONS.add(\"snapshot.trust.empty\");\n-        // This option would prevent scaling beyond 1 node for clusters started with a single node\n-        FORBIDDEN_OPTIONS.add(\"standaloneEnabled\");\n-        // Reconfiguration needs to be enabled to allow scaling of the cluster\n-        FORBIDDEN_OPTIONS.add(\"reconfigEnabled\");\n-        // The Cluster Operator requires access to multiple 4LW and access to the nodes is secured by the TLS-Sidecars so we set all allowed\n-        FORBIDDEN_OPTIONS.add(\"4lw.commands.whitelist\");\n+        FORBIDDEN_OPTIONS = asList(ZookeeperClusterSpec.FORBIDDEN_PREFIXES.split(\", \"));\n+        EXCEPTIONS = asList(ZookeeperClusterSpec.FORBIDDEN_PREFIX_EXCEPTIONS.split(\", \"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk1OTIxOA=="}, "originalCommit": {"oid": "c825401c74fff57d2216c7eb938be693fce078bb"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk4ODkwNw==", "bodyText": "I actually decided to go ahead and opened #2927 - I think it makes nice and easy issue for someone to get started with it. I hope you don't mind.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2915#discussion_r417988907", "createdAt": "2020-04-30T12:57:24Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/ZookeeperConfiguration.java", "diffHunk": "@@ -7,34 +7,25 @@\n \n import io.strimzi.api.kafka.model.ZookeeperClusterSpec;\n \n-import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n-import static java.util.Collections.emptyList;\n+import static java.util.Arrays.asList;\n \n /**\n  * Class for handling Zookeeper configuration passed by the user\n  */\n public class ZookeeperConfiguration extends AbstractConfiguration {\n \n     private static final List<String> FORBIDDEN_OPTIONS;\n+    private static final List<String> EXCEPTIONS;\n     protected static final Map<String, String> DEFAULTS;\n \n     static {\n-        FORBIDDEN_OPTIONS = new ArrayList<>();\n-        FORBIDDEN_OPTIONS.addAll(Arrays.asList(ZookeeperClusterSpec.FORBIDDEN_PREFIXES.split(\" *, *\")));\n-        // This option is handled in the Zookeeper container startup script\n-        FORBIDDEN_OPTIONS.add(\"snapshot.trust.empty\");\n-        // This option would prevent scaling beyond 1 node for clusters started with a single node\n-        FORBIDDEN_OPTIONS.add(\"standaloneEnabled\");\n-        // Reconfiguration needs to be enabled to allow scaling of the cluster\n-        FORBIDDEN_OPTIONS.add(\"reconfigEnabled\");\n-        // The Cluster Operator requires access to multiple 4LW and access to the nodes is secured by the TLS-Sidecars so we set all allowed\n-        FORBIDDEN_OPTIONS.add(\"4lw.commands.whitelist\");\n+        FORBIDDEN_OPTIONS = asList(ZookeeperClusterSpec.FORBIDDEN_PREFIXES.split(\", \"));\n+        EXCEPTIONS = asList(ZookeeperClusterSpec.FORBIDDEN_PREFIX_EXCEPTIONS.split(\", \"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk1OTIxOA=="}, "originalCommit": {"oid": "c825401c74fff57d2216c7eb938be693fce078bb"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5ODMwNQ==", "bodyText": "Makes sense to me, thanks for raising an issue for it - leaving as is absolutely fine in my eyes :)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2915#discussion_r418298305", "createdAt": "2020-04-30T21:25:35Z", "author": {"login": "samuel-hawker"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/ZookeeperConfiguration.java", "diffHunk": "@@ -7,34 +7,25 @@\n \n import io.strimzi.api.kafka.model.ZookeeperClusterSpec;\n \n-import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n-import static java.util.Collections.emptyList;\n+import static java.util.Arrays.asList;\n \n /**\n  * Class for handling Zookeeper configuration passed by the user\n  */\n public class ZookeeperConfiguration extends AbstractConfiguration {\n \n     private static final List<String> FORBIDDEN_OPTIONS;\n+    private static final List<String> EXCEPTIONS;\n     protected static final Map<String, String> DEFAULTS;\n \n     static {\n-        FORBIDDEN_OPTIONS = new ArrayList<>();\n-        FORBIDDEN_OPTIONS.addAll(Arrays.asList(ZookeeperClusterSpec.FORBIDDEN_PREFIXES.split(\" *, *\")));\n-        // This option is handled in the Zookeeper container startup script\n-        FORBIDDEN_OPTIONS.add(\"snapshot.trust.empty\");\n-        // This option would prevent scaling beyond 1 node for clusters started with a single node\n-        FORBIDDEN_OPTIONS.add(\"standaloneEnabled\");\n-        // Reconfiguration needs to be enabled to allow scaling of the cluster\n-        FORBIDDEN_OPTIONS.add(\"reconfigEnabled\");\n-        // The Cluster Operator requires access to multiple 4LW and access to the nodes is secured by the TLS-Sidecars so we set all allowed\n-        FORBIDDEN_OPTIONS.add(\"4lw.commands.whitelist\");\n+        FORBIDDEN_OPTIONS = asList(ZookeeperClusterSpec.FORBIDDEN_PREFIXES.split(\", \"));\n+        EXCEPTIONS = asList(ZookeeperClusterSpec.FORBIDDEN_PREFIX_EXCEPTIONS.split(\", \"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk1OTIxOA=="}, "originalCommit": {"oid": "c825401c74fff57d2216c7eb938be693fce078bb"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 259, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}