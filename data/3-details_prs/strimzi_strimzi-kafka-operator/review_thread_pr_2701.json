{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4Mjc3MDA1", "number": 2701, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo0MzoyOVrODo2CKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo1MDoyNVrODo2LFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTU0OTIzOnYy", "diffSide": "RIGHT", "path": "operator-common/src/test/java/io/strimzi/operator/common/operator/resource/AbstractCustomResourceOperatorIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo0MzoyOVrOF3pbvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo0MzoyOVrOF3pbvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5NDg0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //  to correctly setup the test environment before the tests\n          \n          \n            \n            // to correctly setup the test environment before the tests.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2701#discussion_r393894847", "createdAt": "2020-03-17T18:43:29Z", "author": {"login": "tombentley"}, "path": "operator-common/src/test/java/io/strimzi/operator/common/operator/resource/AbstractCustomResourceOperatorIT.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.operator.common.operator.resource;\n+\n+import io.fabric8.kubernetes.api.model.Doneable;\n+import io.fabric8.kubernetes.api.model.apiextensions.CustomResourceDefinition;\n+import io.fabric8.kubernetes.client.CustomResource;\n+import io.fabric8.kubernetes.client.CustomResourceList;\n+import io.fabric8.kubernetes.client.DefaultKubernetesClient;\n+import io.fabric8.kubernetes.client.KubernetesClient;\n+import io.fabric8.kubernetes.client.KubernetesClientException;\n+import io.strimzi.api.kafka.model.status.Condition;\n+import io.strimzi.api.kafka.model.status.ConditionBuilder;\n+import io.strimzi.operator.KubernetesVersion;\n+import io.strimzi.operator.PlatformFeaturesAvailability;\n+import io.strimzi.test.k8s.KubeClusterResource;\n+import io.strimzi.test.k8s.cluster.KubeCluster;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.junit5.Checkpoint;\n+import io.vertx.junit5.VertxExtension;\n+import io.vertx.junit5.VertxTestContext;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.hamcrest.CoreMatchers;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.lessThan;\n+import static org.hamcrest.Matchers.not;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+\n+/**\n+ * The main purpose of the Integration Tests for the operators is to test them against a real Kubernetes cluster.\n+ * Real Kubernetes cluster has often some quirks such as some fields being immutable, some fields in the spec section\n+ * being created by the Kubernetes API etc. These things are hard to test with mocks. These IT tests make it easy to\n+ * test them against real clusters.\n+ */\n+@ExtendWith(VertxExtension.class)\n+// TestInstance lifecycle set to per class so that @BeforeAll and @AfterAll methods are non static\n+// Methods must be be non static as they make a non-static call to getCrd()\n+//  to correctly setup the test environment before the tests", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d716ce76bb60bcb7d0b829357b66fc1e56f09974"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTU1MDAwOnYy", "diffSide": "RIGHT", "path": "operator-common/src/test/java/io/strimzi/operator/common/operator/resource/AbstractCustomResourceOperatorIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo0Mzo0MVrOF3pcPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo0Mzo0MVrOF3pcPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5NDk3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // TestInstance lifecycle set to per class so that @BeforeAll and @AfterAll methods are non static\n          \n          \n            \n            // TestInstance lifecycle set to per class so that @BeforeAll and @AfterAll methods are non static.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2701#discussion_r393894972", "createdAt": "2020-03-17T18:43:41Z", "author": {"login": "tombentley"}, "path": "operator-common/src/test/java/io/strimzi/operator/common/operator/resource/AbstractCustomResourceOperatorIT.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.operator.common.operator.resource;\n+\n+import io.fabric8.kubernetes.api.model.Doneable;\n+import io.fabric8.kubernetes.api.model.apiextensions.CustomResourceDefinition;\n+import io.fabric8.kubernetes.client.CustomResource;\n+import io.fabric8.kubernetes.client.CustomResourceList;\n+import io.fabric8.kubernetes.client.DefaultKubernetesClient;\n+import io.fabric8.kubernetes.client.KubernetesClient;\n+import io.fabric8.kubernetes.client.KubernetesClientException;\n+import io.strimzi.api.kafka.model.status.Condition;\n+import io.strimzi.api.kafka.model.status.ConditionBuilder;\n+import io.strimzi.operator.KubernetesVersion;\n+import io.strimzi.operator.PlatformFeaturesAvailability;\n+import io.strimzi.test.k8s.KubeClusterResource;\n+import io.strimzi.test.k8s.cluster.KubeCluster;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.junit5.Checkpoint;\n+import io.vertx.junit5.VertxExtension;\n+import io.vertx.junit5.VertxTestContext;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.hamcrest.CoreMatchers;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.lessThan;\n+import static org.hamcrest.Matchers.not;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+\n+/**\n+ * The main purpose of the Integration Tests for the operators is to test them against a real Kubernetes cluster.\n+ * Real Kubernetes cluster has often some quirks such as some fields being immutable, some fields in the spec section\n+ * being created by the Kubernetes API etc. These things are hard to test with mocks. These IT tests make it easy to\n+ * test them against real clusters.\n+ */\n+@ExtendWith(VertxExtension.class)\n+// TestInstance lifecycle set to per class so that @BeforeAll and @AfterAll methods are non static", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d716ce76bb60bcb7d0b829357b66fc1e56f09974"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTU2NzUwOnYy", "diffSide": "RIGHT", "path": "operator-common/src/test/java/io/strimzi/operator/common/operator/resource/KafkaBridgeCrdOperatorIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo0ODo0OVrOF3pn2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo0ODo0OVrOF3pn2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5Nzk0NA==", "bodyText": "You should be able to extend the non-raw type in the class declaration so this method is better typed and avoid having the downcast on the following line", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2701#discussion_r393897944", "createdAt": "2020-03-17T18:48:49Z", "author": {"login": "tombentley"}, "path": "operator-common/src/test/java/io/strimzi/operator/common/operator/resource/KafkaBridgeCrdOperatorIT.java", "diffHunk": "@@ -119,153 +61,32 @@ protected KafkaBridge getResource() {\n                 .build();\n     }\n \n-    @Test\n-    public void testUpdateStatus(VertxTestContext context) {\n-        Checkpoint async = context.checkpoint();\n-\n-        log.info(\"Getting Kubernetes version\");\n-        PlatformFeaturesAvailability.create(vertx, client)\n-            .setHandler(context.succeeding(pfa -> context.verify(() -> {\n-                assertThat(\"Kubernetes version : \" + pfa.getKubernetesVersion() + \" is too old\",\n-                        pfa.getKubernetesVersion().compareTo(KubernetesVersion.V1_11), is(not(lessThan(0))));\n-            })))\n-\n-            .compose(pfa -> {\n-                log.info(\"Creating resource\");\n-                return kafkaBridgeOperator.reconcile(namespace, RESOURCE_NAME, getResource());\n-            })\n-            .setHandler(context.succeeding())\n-\n-            .compose(rrCreated -> {\n-                KafkaBridge newStatus = new KafkaBridgeBuilder(kafkaBridgeOperator.get(namespace, RESOURCE_NAME))\n-                        .withNewStatus()\n-                        .withConditions(new ConditionBuilder()\n-                                .withType(\"Ready\")\n-                                .withStatus(\"True\")\n-                                .build())\n-                        .endStatus()\n-                        .build();\n-\n-                log.info(\"Updating resource status\");\n-                return kafkaBridgeOperator.updateStatusAsync(newStatus);\n-            })\n-            .setHandler(context.succeeding())\n-\n-            .compose(rrModified -> kafkaBridgeOperator.getAsync(namespace, RESOURCE_NAME))\n-            .setHandler(context.succeeding(modifiedKafkaBridge -> context.verify(() -> {\n-                assertThat(modifiedKafkaBridge.getStatus().getConditions().get(0).getType(), is(\"Ready\"));\n-                assertThat(modifiedKafkaBridge.getStatus().getConditions().get(0).getStatus(), is(\"True\"));\n-            })))\n-\n-            .compose(rrModified -> {\n-                log.info(\"Deleting resource\");\n-                return kafkaBridgeOperator.reconcile(namespace, RESOURCE_NAME, null);\n-            })\n-            .setHandler(context.succeeding(rrDeleted ->  async.flag()));\n+    @Override\n+    protected CustomResource getResourceWithModifications(CustomResource resourceInCluster) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d716ce76bb60bcb7d0b829357b66fc1e56f09974"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTU2OTE3OnYy", "diffSide": "RIGHT", "path": "operator-common/src/test/java/io/strimzi/operator/common/operator/resource/KafkaBridgeCrdOperatorIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo0OToyNVrOF3ppFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo0OToyNVrOF3ppFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5ODI2Mg==", "bodyText": "Same comment.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2701#discussion_r393898262", "createdAt": "2020-03-17T18:49:25Z", "author": {"login": "tombentley"}, "path": "operator-common/src/test/java/io/strimzi/operator/common/operator/resource/KafkaBridgeCrdOperatorIT.java", "diffHunk": "@@ -119,153 +61,32 @@ protected KafkaBridge getResource() {\n                 .build();\n     }\n \n-    @Test\n-    public void testUpdateStatus(VertxTestContext context) {\n-        Checkpoint async = context.checkpoint();\n-\n-        log.info(\"Getting Kubernetes version\");\n-        PlatformFeaturesAvailability.create(vertx, client)\n-            .setHandler(context.succeeding(pfa -> context.verify(() -> {\n-                assertThat(\"Kubernetes version : \" + pfa.getKubernetesVersion() + \" is too old\",\n-                        pfa.getKubernetesVersion().compareTo(KubernetesVersion.V1_11), is(not(lessThan(0))));\n-            })))\n-\n-            .compose(pfa -> {\n-                log.info(\"Creating resource\");\n-                return kafkaBridgeOperator.reconcile(namespace, RESOURCE_NAME, getResource());\n-            })\n-            .setHandler(context.succeeding())\n-\n-            .compose(rrCreated -> {\n-                KafkaBridge newStatus = new KafkaBridgeBuilder(kafkaBridgeOperator.get(namespace, RESOURCE_NAME))\n-                        .withNewStatus()\n-                        .withConditions(new ConditionBuilder()\n-                                .withType(\"Ready\")\n-                                .withStatus(\"True\")\n-                                .build())\n-                        .endStatus()\n-                        .build();\n-\n-                log.info(\"Updating resource status\");\n-                return kafkaBridgeOperator.updateStatusAsync(newStatus);\n-            })\n-            .setHandler(context.succeeding())\n-\n-            .compose(rrModified -> kafkaBridgeOperator.getAsync(namespace, RESOURCE_NAME))\n-            .setHandler(context.succeeding(modifiedKafkaBridge -> context.verify(() -> {\n-                assertThat(modifiedKafkaBridge.getStatus().getConditions().get(0).getType(), is(\"Ready\"));\n-                assertThat(modifiedKafkaBridge.getStatus().getConditions().get(0).getStatus(), is(\"True\"));\n-            })))\n-\n-            .compose(rrModified -> {\n-                log.info(\"Deleting resource\");\n-                return kafkaBridgeOperator.reconcile(namespace, RESOURCE_NAME, null);\n-            })\n-            .setHandler(context.succeeding(rrDeleted ->  async.flag()));\n+    @Override\n+    protected CustomResource getResourceWithModifications(CustomResource resourceInCluster) {\n+        return new KafkaBridgeBuilder((KafkaBridge) resourceInCluster)\n+                .editSpec()\n+                .withLogging(new InlineLogging())\n+                .endSpec()\n+                .build();\n     }\n \n-    /**\n-     * Tests what happens when the resource is deleted while updating the status\n-     *\n-     * @param context\n-     */\n-    @Test\n-    public void testUpdateStatusWhileResourceDeletedThrowsNullPointerException(VertxTestContext context) {\n-        Checkpoint async = context.checkpoint();\n-\n-        log.info(\"Getting Kubernetes version\");\n-        PlatformFeaturesAvailability.create(vertx, client)\n-            .setHandler(context.succeeding(pfa -> context.verify(() -> {\n-                assertThat(\"Kubernetes version : \" + pfa.getKubernetesVersion() + \" is too old\",\n-                        pfa.getKubernetesVersion().compareTo(KubernetesVersion.V1_11), is(not(lessThan(0))));\n-            })))\n-            .compose(pfa -> {\n-                log.info(\"Creating resource\");\n-                return kafkaBridgeOperator.reconcile(namespace, RESOURCE_NAME, getResource());\n-            })\n-            .setHandler(context.succeeding())\n-\n-            .compose(rr -> {\n-                log.info(\"Deleting resource\");\n-                return kafkaBridgeOperator.reconcile(namespace, RESOURCE_NAME, null);\n-            })\n-            .setHandler(context.succeeding())\n-\n-            .compose(v -> {\n-                KafkaBridge newStatus = new KafkaBridgeBuilder(kafkaBridgeOperator.get(namespace, RESOURCE_NAME))\n-                        .withNewStatus()\n-                        .withConditions(new ConditionBuilder()\n-                                .withType(\"Ready\")\n-                                .withStatus(\"True\")\n-                                .build())\n-                        .endStatus()\n-                        .build();\n-\n-                log.info(\"Updating resource status\");\n-                return kafkaBridgeOperator.updateStatusAsync(newStatus);\n-            })\n-            .setHandler(context.failing(e -> context.verify(() -> {\n-                assertThat(e, instanceOf(NullPointerException.class));\n-                async.flag();\n-            })));\n+    @Override\n+    protected CustomResource getResourceWithNewReadyStatus(CustomResource resourceInCluster) {\n+        return new KafkaBridgeBuilder((KafkaBridge) resourceInCluster)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d716ce76bb60bcb7d0b829357b66fc1e56f09974"}, "originalPosition": 229}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTU3MDQwOnYy", "diffSide": "RIGHT", "path": "operator-common/src/test/java/io/strimzi/operator/common/operator/resource/KafkaConnectCrdOperatorIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo0OTo1MFrOF3pp7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo0OTo1MFrOF3pp7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5ODQ3OQ==", "bodyText": "Again, use generics in the extends clause.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2701#discussion_r393898479", "createdAt": "2020-03-17T18:49:50Z", "author": {"login": "tombentley"}, "path": "operator-common/src/test/java/io/strimzi/operator/common/operator/resource/KafkaConnectCrdOperatorIT.java", "diffHunk": "@@ -47,70 +27,31 @@\n  * test them against real clusters.\n  */\n @ExtendWith(VertxExtension.class)\n-public class KafkaConnectCrdOperatorIT {\n+public class KafkaConnectCrdOperatorIT extends AbstractCustomResourceOperatorIT {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d716ce76bb60bcb7d0b829357b66fc1e56f09974"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTU3MjA3OnYy", "diffSide": "RIGHT", "path": "operator-common/src/test/java/io/strimzi/operator/common/operator/resource/KafkaConnectS2ICrdOperatorIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo1MDoyNVrOF3prJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo1MDoyNVrOF3prJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5ODc5MQ==", "bodyText": "Same comment", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2701#discussion_r393898791", "createdAt": "2020-03-17T18:50:25Z", "author": {"login": "tombentley"}, "path": "operator-common/src/test/java/io/strimzi/operator/common/operator/resource/KafkaConnectS2ICrdOperatorIT.java", "diffHunk": "@@ -46,70 +27,31 @@\n  * test them against real clusters.\n  */\n @ExtendWith(VertxExtension.class)\n-public class KafkaConnectS2ICrdOperatorIT {\n+public class KafkaConnectS2ICrdOperatorIT extends AbstractCustomResourceOperatorIT {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d716ce76bb60bcb7d0b829357b66fc1e56f09974"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 307, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}