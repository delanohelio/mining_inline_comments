{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNjE5MDM0", "number": 2397, "title": " [MO] - [system test] -> zookeeper upgrade test with additional check", "bodyText": "Type of change\n\nEnhancement / new feature\nRefactoring\n\nDescription\nThis PR moves Zookeeper upgrade tests to one specific ST called ZookeeperUpgradeST. Also adding changing log.message.format.version to newer version. Morever fixing downgrade test and upgrade problem with timeout.\nChecklist\n\n Write tests\n Make sure all tests pass", "createdAt": "2020-01-14T12:53:11Z", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2397", "merged": true, "mergeCommit": {"oid": "808703f396fcf42d3f30ed307752ed449d251eeb"}, "closed": true, "closedAt": "2020-01-30T13:41:42Z", "author": {"login": "see-quick"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb7pHXkgBqjI5NjA0MzUxMTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_YCVpABqjI5OTI3ODgyNTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e1ecca275e0f66ebc213cad24ba5d8d2561cca46", "author": {"user": {"login": "see-quick", "name": "Ors\u00e1k Maro\u0161"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/e1ecca275e0f66ebc213cad24ba5d8d2561cca46", "committedDate": "2020-01-16T14:28:06Z", "message": "[MO] - [system test] -> adding profile\n\nSigned-off-by: Seequick1 <morsak@redhat.com>"}, "afterCommit": {"oid": "2581ef411d3e1e00a8fd7c0d23ff0ab1776f6d61", "author": {"user": {"login": "see-quick", "name": "Ors\u00e1k Maro\u0161"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/2581ef411d3e1e00a8fd7c0d23ff0ab1776f6d61", "committedDate": "2020-01-18T20:10:23Z", "message": "[MO] - [conflicts] -> rebase\n\nSigned-off-by: Seequick1 <morsak@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2581ef411d3e1e00a8fd7c0d23ff0ab1776f6d61", "author": {"user": {"login": "see-quick", "name": "Ors\u00e1k Maro\u0161"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/2581ef411d3e1e00a8fd7c0d23ff0ab1776f6d61", "committedDate": "2020-01-18T20:10:23Z", "message": "[MO] - [conflicts] -> rebase\n\nSigned-off-by: Seequick1 <morsak@redhat.com>"}, "afterCommit": {"oid": "39032bfa459f051bf72900e147996faef3d290f9", "author": {"user": {"login": "see-quick", "name": "Ors\u00e1k Maro\u0161"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/39032bfa459f051bf72900e147996faef3d290f9", "committedDate": "2020-01-19T06:11:54Z", "message": "[MO] - [conflicts] -> rebase\n\nSigned-off-by: Seequick1 <morsak@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1MjYyMDQx", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2397#pullrequestreview-345262041", "createdAt": "2020-01-20T12:02:15Z", "commit": {"oid": "39032bfa459f051bf72900e147996faef3d290f9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMjowMjoxNVrOFfcNYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMjowMjoxNVrOFfcNYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUxMjM1NQ==", "bodyText": "It's not PodReplicasCount it's just ContainerInPodCount, better to use waitForPodsReady() I think or at least name it correctly.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2397#discussion_r368512355", "createdAt": "2020-01-20T12:02:15Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/PodUtils.java", "diffHunk": "@@ -166,7 +166,15 @@ public static void waitUntilPodContainersCount(String podNamePrefix, int numberO\n         TestUtils.waitFor(\"Waiting till pod\" + podNamePrefix + \" will have \" + numberOfContainers + \" containers\",\n             Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_STATUS_TIMEOUT,\n             () -> kubeClient().listPodsByPrefixInName(podNamePrefix).get(0).getSpec().getContainers().size() == numberOfContainers);\n-        LOGGER.info(\"Waiting till pod {} will have {} containers\", podNamePrefix, numberOfContainers);\n+        LOGGER.info(\"Pod {} has {} containers\", podNamePrefix, numberOfContainers);\n+    }\n+\n+    public static void waitUntilPodReplicasCount(String podNamePrefix, int exceptedPods) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39032bfa459f051bf72900e147996faef3d290f9"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1NzMwNDAw", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2397#pullrequestreview-345730400", "createdAt": "2020-01-21T09:22:38Z", "commit": {"oid": "39032bfa459f051bf72900e147996faef3d290f9"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwOToyMjozOFrOFfzHGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwOToyNDoyMFrOFfzKKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg4NzU3Nw==", "bodyText": "You run with 3 replicas, so you should wait for 3 pods (the same below as well).", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2397#discussion_r368887577", "createdAt": "2020-01-21T09:22:38Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/upgrade/ZookeeperUpgradeST.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.upgrade;\n+\n+import io.strimzi.api.kafka.Crds;\n+import io.strimzi.api.kafka.model.Kafka;\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.systemtest.BaseST;\n+import io.strimzi.systemtest.resources.KubernetesResource;\n+import io.strimzi.systemtest.resources.ResourceManager;\n+import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.utils.TestKafkaVersion;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.StatefulSetUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static io.strimzi.systemtest.Constants.UPGRADE;\n+import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+@Tag(UPGRADE)\n+public class ZookeeperUpgradeST extends BaseST {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(ZookeeperUpgradeST.class);\n+\n+    public static final String NAMESPACE = \"zookeeper-upgrade-test\";\n+\n+    @Test\n+    void testKafkaClusterUpgrade() throws IOException, InterruptedException {\n+        List<TestKafkaVersion> sortedVersions = TestKafkaVersion.parseKafkaVersions();\n+\n+        TestKafkaVersion initialVersion = sortedVersions.get(sortedVersions.size() - 2);\n+        TestKafkaVersion newVersion = sortedVersions.get(sortedVersions.size() - 1);\n+\n+        runVersionChange(initialVersion, newVersion, 3, 3);\n+    }\n+\n+    @Test\n+    void testKafkaClusterDowngrade() throws IOException, InterruptedException {\n+        List<TestKafkaVersion> sortedVersions = TestKafkaVersion.parseKafkaVersions();\n+\n+        TestKafkaVersion initialVersion = sortedVersions.get(sortedVersions.size() - 1);\n+        TestKafkaVersion newVersion = sortedVersions.get(sortedVersions.size() - 2);\n+\n+        runVersionChange(initialVersion, newVersion, 3, 3);\n+    }\n+\n+    void runVersionChange(TestKafkaVersion initialVersion, TestKafkaVersion newVersion, int kafkaReplicas, int zkReplicas) throws InterruptedException {\n+        String logMsgFormat;\n+        if (initialVersion.compareTo(newVersion) < 0) {\n+            // If it is an upgrade test we keep the message format as the lower version number\n+            logMsgFormat = initialVersion.messageVersion();\n+        } else {\n+            // If it is a downgrade then we make sure to use the lower version number for the message format\n+            logMsgFormat = newVersion.messageVersion();\n+        }\n+\n+        LOGGER.info(\"Deploying initial Kafka version (\" + initialVersion.version() + \")\");\n+\n+        KafkaResource.kafkaPersistent(CLUSTER_NAME, kafkaReplicas, zkReplicas)\n+                .editSpec()\n+                    .editKafka()\n+                        .withVersion(initialVersion.version())\n+                        .addToConfig(\"log.message.format.version\", logMsgFormat)\n+                    .endKafka()\n+                .endSpec()\n+                .done();\n+\n+        LOGGER.info(\"Deployment of initial Kafka version (\" + initialVersion.version() + \") complete\");\n+\n+        String zkVersionCommand = \"ls libs | grep -Po 'zookeeper-\\\\K\\\\d+.\\\\d+.\\\\d+' | head -1\";\n+        String zkResult = cmdKubeClient().execInPodContainer(KafkaResources.zookeeperPodName(CLUSTER_NAME, 0),\n+                \"zookeeper\", \"/bin/bash\", \"-c\", zkVersionCommand).out().trim();\n+        LOGGER.info(\"Pre-change Zookeeper version query returned: \" + zkResult);\n+\n+        String kafkaVersionCommand = \"ls libs | grep -Po 'kafka_\\\\d+.\\\\d+-\\\\K(\\\\d+.\\\\d+.\\\\d+)(?=.jar)' | head -1\";\n+        String kafkaResult = cmdKubeClient().execInPodContainer(KafkaResources.kafkaPodName(CLUSTER_NAME, 0),\n+                \"kafka\", \"/bin/bash\", \"-c\", kafkaVersionCommand).out().trim();\n+        LOGGER.info(\"Pre-change Kafka version query returned: \" + kafkaResult);\n+\n+        Map<String, String> zkPods = StatefulSetUtils.ssSnapshot(KafkaResources.zookeeperStatefulSetName(CLUSTER_NAME));\n+        Map<String, String> kafkaPods = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+\n+        LOGGER.info(\"Updating Kafka CR version field to \" + newVersion.version());\n+\n+        // Get the Kafka resource from K8s\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+            kafka.getSpec().getKafka().setVersion(newVersion.version());\n+        });\n+\n+        Kafka retrievedKafka = Crds.kafkaOperation(kubeClient(NAMESPACE).getClient())\n+                .inNamespace(NAMESPACE)\n+                .withName(CLUSTER_NAME)\n+                .get();\n+\n+        // Change the Kafka version for the resource\n+        retrievedKafka.getSpec().getKafka().setVersion(newVersion.version());\n+\n+        // Patch the existing resource with this new version\n+        Crds.kafkaOperation(kubeClient().getClient()).inNamespace(NAMESPACE).withName(CLUSTER_NAME).patch(retrievedKafka);\n+\n+        LOGGER.info(\"Waiting for deployment of new Kafka version (\" + newVersion.version() + \") to complete\");\n+\n+        // Wait for the zk version change roll\n+        zkPods = StatefulSetUtils.waitTillSsHasRolled(KafkaResources.zookeeperStatefulSetName(CLUSTER_NAME), zkReplicas, zkPods);\n+        LOGGER.info(\"1st Zookeeper roll (image change) is complete\");\n+\n+        // Wait for the kafka broker version change roll\n+        kafkaPods = StatefulSetUtils.waitTillSsHasRolled(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME), kafkaReplicas, kafkaPods);\n+        LOGGER.info(\"Kafka roll (image change) is complete\");\n+\n+        PodUtils.waitUntilPodReplicasCount(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME), 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39032bfa459f051bf72900e147996faef3d290f9"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg4ODM2MA==", "bodyText": "This is a bit confusing. The message bellow says Zookeeper roll. But this method seems to check Kafka.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2397#discussion_r368888360", "createdAt": "2020-01-21T09:24:20Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/upgrade/ZookeeperUpgradeST.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.upgrade;\n+\n+import io.strimzi.api.kafka.Crds;\n+import io.strimzi.api.kafka.model.Kafka;\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.systemtest.BaseST;\n+import io.strimzi.systemtest.resources.KubernetesResource;\n+import io.strimzi.systemtest.resources.ResourceManager;\n+import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.utils.TestKafkaVersion;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.StatefulSetUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static io.strimzi.systemtest.Constants.UPGRADE;\n+import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+@Tag(UPGRADE)\n+public class ZookeeperUpgradeST extends BaseST {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(ZookeeperUpgradeST.class);\n+\n+    public static final String NAMESPACE = \"zookeeper-upgrade-test\";\n+\n+    @Test\n+    void testKafkaClusterUpgrade() throws IOException, InterruptedException {\n+        List<TestKafkaVersion> sortedVersions = TestKafkaVersion.parseKafkaVersions();\n+\n+        TestKafkaVersion initialVersion = sortedVersions.get(sortedVersions.size() - 2);\n+        TestKafkaVersion newVersion = sortedVersions.get(sortedVersions.size() - 1);\n+\n+        runVersionChange(initialVersion, newVersion, 3, 3);\n+    }\n+\n+    @Test\n+    void testKafkaClusterDowngrade() throws IOException, InterruptedException {\n+        List<TestKafkaVersion> sortedVersions = TestKafkaVersion.parseKafkaVersions();\n+\n+        TestKafkaVersion initialVersion = sortedVersions.get(sortedVersions.size() - 1);\n+        TestKafkaVersion newVersion = sortedVersions.get(sortedVersions.size() - 2);\n+\n+        runVersionChange(initialVersion, newVersion, 3, 3);\n+    }\n+\n+    void runVersionChange(TestKafkaVersion initialVersion, TestKafkaVersion newVersion, int kafkaReplicas, int zkReplicas) throws InterruptedException {\n+        String logMsgFormat;\n+        if (initialVersion.compareTo(newVersion) < 0) {\n+            // If it is an upgrade test we keep the message format as the lower version number\n+            logMsgFormat = initialVersion.messageVersion();\n+        } else {\n+            // If it is a downgrade then we make sure to use the lower version number for the message format\n+            logMsgFormat = newVersion.messageVersion();\n+        }\n+\n+        LOGGER.info(\"Deploying initial Kafka version (\" + initialVersion.version() + \")\");\n+\n+        KafkaResource.kafkaPersistent(CLUSTER_NAME, kafkaReplicas, zkReplicas)\n+                .editSpec()\n+                    .editKafka()\n+                        .withVersion(initialVersion.version())\n+                        .addToConfig(\"log.message.format.version\", logMsgFormat)\n+                    .endKafka()\n+                .endSpec()\n+                .done();\n+\n+        LOGGER.info(\"Deployment of initial Kafka version (\" + initialVersion.version() + \") complete\");\n+\n+        String zkVersionCommand = \"ls libs | grep -Po 'zookeeper-\\\\K\\\\d+.\\\\d+.\\\\d+' | head -1\";\n+        String zkResult = cmdKubeClient().execInPodContainer(KafkaResources.zookeeperPodName(CLUSTER_NAME, 0),\n+                \"zookeeper\", \"/bin/bash\", \"-c\", zkVersionCommand).out().trim();\n+        LOGGER.info(\"Pre-change Zookeeper version query returned: \" + zkResult);\n+\n+        String kafkaVersionCommand = \"ls libs | grep -Po 'kafka_\\\\d+.\\\\d+-\\\\K(\\\\d+.\\\\d+.\\\\d+)(?=.jar)' | head -1\";\n+        String kafkaResult = cmdKubeClient().execInPodContainer(KafkaResources.kafkaPodName(CLUSTER_NAME, 0),\n+                \"kafka\", \"/bin/bash\", \"-c\", kafkaVersionCommand).out().trim();\n+        LOGGER.info(\"Pre-change Kafka version query returned: \" + kafkaResult);\n+\n+        Map<String, String> zkPods = StatefulSetUtils.ssSnapshot(KafkaResources.zookeeperStatefulSetName(CLUSTER_NAME));\n+        Map<String, String> kafkaPods = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+\n+        LOGGER.info(\"Updating Kafka CR version field to \" + newVersion.version());\n+\n+        // Get the Kafka resource from K8s\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+            kafka.getSpec().getKafka().setVersion(newVersion.version());\n+        });\n+\n+        Kafka retrievedKafka = Crds.kafkaOperation(kubeClient(NAMESPACE).getClient())\n+                .inNamespace(NAMESPACE)\n+                .withName(CLUSTER_NAME)\n+                .get();\n+\n+        // Change the Kafka version for the resource\n+        retrievedKafka.getSpec().getKafka().setVersion(newVersion.version());\n+\n+        // Patch the existing resource with this new version\n+        Crds.kafkaOperation(kubeClient().getClient()).inNamespace(NAMESPACE).withName(CLUSTER_NAME).patch(retrievedKafka);\n+\n+        LOGGER.info(\"Waiting for deployment of new Kafka version (\" + newVersion.version() + \") to complete\");\n+\n+        // Wait for the zk version change roll\n+        zkPods = StatefulSetUtils.waitTillSsHasRolled(KafkaResources.zookeeperStatefulSetName(CLUSTER_NAME), zkReplicas, zkPods);\n+        LOGGER.info(\"1st Zookeeper roll (image change) is complete\");\n+\n+        // Wait for the kafka broker version change roll\n+        kafkaPods = StatefulSetUtils.waitTillSsHasRolled(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME), kafkaReplicas, kafkaPods);\n+        LOGGER.info(\"Kafka roll (image change) is complete\");\n+\n+        PodUtils.waitUntilPodReplicasCount(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME), 2);\n+\n+        // Wait for the zk rolling update\n+        StatefulSetUtils.waitTillSsHasRolled(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME), kafkaReplicas, kafkaPods);\n+        LOGGER.info(\"2nd Kafka roll (update) is complete\");\n+\n+        PodUtils.waitUntilPodReplicasCount(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME), 2);\n+\n+        StatefulSetUtils.waitTillSsHasRolled(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME), kafkaReplicas, zkPods);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39032bfa459f051bf72900e147996faef3d290f9"}, "originalPosition": 132}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3MjA1NDMz", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2397#pullrequestreview-347205433", "createdAt": "2020-01-23T10:47:33Z", "commit": {"oid": "845aab5b2b72364dcb4fdd4fd2e6451d17783a0d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMDo0NzozNFrOFg58cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMDo0NzozNFrOFg58cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA0ODExMg==", "bodyText": "You could also just compare the intial and new Kafka versions: if (initialVersion.compareTo(newVersion) > 0)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2397#discussion_r370048112", "createdAt": "2020-01-23T10:47:34Z", "author": {"login": "tomncooper"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/upgrade/ZookeeperUpgradeST.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.upgrade;\n+\n+import io.strimzi.api.kafka.Crds;\n+import io.strimzi.api.kafka.model.Kafka;\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.systemtest.BaseST;\n+import io.strimzi.systemtest.resources.KubernetesResource;\n+import io.strimzi.systemtest.resources.ResourceManager;\n+import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.utils.StUtils;\n+import io.strimzi.systemtest.utils.TestKafkaVersion;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.StatefulSetUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInfo;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static io.strimzi.systemtest.Constants.UPGRADE;\n+import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+@Tag(UPGRADE)\n+public class ZookeeperUpgradeST extends BaseST {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(ZookeeperUpgradeST.class);\n+\n+    public static final String NAMESPACE = \"zookeeper-upgrade-test\";\n+\n+    @Test\n+    void testKafkaClusterUpgrade(TestInfo testinfo) throws IOException, InterruptedException {\n+        List<TestKafkaVersion> sortedVersions = TestKafkaVersion.parseKafkaVersions();\n+\n+        TestKafkaVersion initialVersion = sortedVersions.get(sortedVersions.size() - 2);\n+        TestKafkaVersion newVersion = sortedVersions.get(sortedVersions.size() - 1);\n+\n+        runVersionChange(initialVersion, newVersion, 3, 3, testinfo);\n+    }\n+\n+    @Test\n+    void testKafkaClusterDowngrade(TestInfo testInfo) throws IOException, InterruptedException {\n+        List<TestKafkaVersion> sortedVersions = TestKafkaVersion.parseKafkaVersions();\n+\n+        TestKafkaVersion initialVersion = sortedVersions.get(sortedVersions.size() - 1);\n+        TestKafkaVersion newVersion = sortedVersions.get(sortedVersions.size() - 2);\n+\n+        runVersionChange(initialVersion, newVersion, 3, 3, testInfo);\n+    }\n+\n+    void runVersionChange(TestKafkaVersion initialVersion, TestKafkaVersion newVersion, int kafkaReplicas, int zkReplicas, TestInfo testInfo) throws InterruptedException {\n+        String logMsgFormat;\n+        if (initialVersion.compareTo(newVersion) < 0) {\n+            // If it is an upgrade test we keep the message format as the lower version number\n+            logMsgFormat = initialVersion.messageVersion();\n+        } else {\n+            // If it is a downgrade then we make sure to use the lower version number for the message format\n+            logMsgFormat = newVersion.messageVersion();\n+        }\n+\n+        LOGGER.info(\"Deploying initial Kafka version (\" + initialVersion.version() + \")\");\n+\n+        KafkaResource.kafkaPersistent(CLUSTER_NAME, kafkaReplicas, zkReplicas)\n+                .editSpec()\n+                    .editKafka()\n+                        .withVersion(initialVersion.version())\n+                        .addToConfig(\"log.message.format.version\", logMsgFormat)\n+                    .endKafka()\n+                .endSpec()\n+                .done();\n+\n+        LOGGER.info(\"Deployment of initial Kafka version (\" + initialVersion.version() + \") complete\");\n+\n+        String zkVersionCommand = \"ls libs | grep -Po 'zookeeper-\\\\K\\\\d+.\\\\d+.\\\\d+' | head -1\";\n+        String zkResult = cmdKubeClient().execInPodContainer(KafkaResources.zookeeperPodName(CLUSTER_NAME, 0),\n+                \"zookeeper\", \"/bin/bash\", \"-c\", zkVersionCommand).out().trim();\n+        LOGGER.info(\"Pre-change Zookeeper version query returned: \" + zkResult);\n+\n+        String kafkaVersionCommand = \"ls libs | grep -Po 'kafka_\\\\d+.\\\\d+-\\\\K(\\\\d+.\\\\d+.\\\\d+)(?=.jar)' | head -1\";\n+        String kafkaResult = cmdKubeClient().execInPodContainer(KafkaResources.kafkaPodName(CLUSTER_NAME, 0),\n+                \"kafka\", \"/bin/bash\", \"-c\", kafkaVersionCommand).out().trim();\n+        LOGGER.info(\"Pre-change Kafka version query returned: \" + kafkaResult);\n+\n+        Map<String, String> zkPods = StatefulSetUtils.ssSnapshot(KafkaResources.zookeeperStatefulSetName(CLUSTER_NAME));\n+        Map<String, String> kafkaPods = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+\n+        LOGGER.info(\"Updating Kafka CR version field to \" + newVersion.version());\n+\n+        // Get the Kafka resource from K8s\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+            kafka.getSpec().getKafka().setVersion(newVersion.version());\n+        });\n+\n+        Kafka retrievedKafka = Crds.kafkaOperation(kubeClient(NAMESPACE).getClient())\n+                .inNamespace(NAMESPACE)\n+                .withName(CLUSTER_NAME)\n+                .get();\n+\n+        // Change the Kafka version for the resource\n+        retrievedKafka.getSpec().getKafka().setVersion(newVersion.version());\n+\n+        // Patch the existing resource with this new version\n+        Crds.kafkaOperation(kubeClient().getClient()).inNamespace(NAMESPACE).withName(CLUSTER_NAME).patch(retrievedKafka);\n+\n+        LOGGER.info(\"Waiting for deployment of new Kafka version (\" + newVersion.version() + \") to complete\");\n+\n+        // Wait for the zk version change roll\n+        zkPods = StatefulSetUtils.waitTillSsHasRolled(KafkaResources.zookeeperStatefulSetName(CLUSTER_NAME), zkReplicas, zkPods);\n+        LOGGER.info(\"1st Zookeeper roll (image change) is complete\");\n+\n+        // Wait for the kafka broker version change roll\n+        kafkaPods = StatefulSetUtils.waitTillSsHasRolled(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME), kafkaReplicas, kafkaPods);\n+        LOGGER.info(\"Kafka roll (image change) is complete\");\n+\n+        if (testInfo.getDisplayName().contains(\"Downgrade\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "845aab5b2b72364dcb4fdd4fd2e6451d17783a0d"}, "originalPosition": 125}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3MjA2OTQz", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2397#pullrequestreview-347206943", "createdAt": "2020-01-23T10:50:04Z", "commit": {"oid": "845aab5b2b72364dcb4fdd4fd2e6451d17783a0d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NjUxMzA3", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2397#pullrequestreview-347651307", "createdAt": "2020-01-23T22:27:54Z", "commit": {"oid": "845aab5b2b72364dcb4fdd4fd2e6451d17783a0d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "845aab5b2b72364dcb4fdd4fd2e6451d17783a0d", "author": {"user": {"login": "see-quick", "name": "Ors\u00e1k Maro\u0161"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/845aab5b2b72364dcb4fdd4fd2e6451d17783a0d", "committedDate": "2020-01-23T08:56:22Z", "message": "[MO] - [system test] -> fix of tests\n\nSigned-off-by: Seequick1 <morsak@redhat.com>"}, "afterCommit": {"oid": "077723889edfd07f0fd8efd08d9be99f8018e584", "author": {"user": {"login": "see-quick", "name": "Ors\u00e1k Maro\u0161"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/077723889edfd07f0fd8efd08d9be99f8018e584", "committedDate": "2020-01-28T09:37:17Z", "message": "[MO] - [system test] -> fix of tests\n\nSigned-off-by: Seequick1 <morsak@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MjM3NDgx", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2397#pullrequestreview-349237481", "createdAt": "2020-01-28T09:41:30Z", "commit": {"oid": "077723889edfd07f0fd8efd08d9be99f8018e584"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMDg3NzYz", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2397#pullrequestreview-350087763", "createdAt": "2020-01-29T13:02:09Z", "commit": {"oid": "077723889edfd07f0fd8efd08d9be99f8018e584"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "077723889edfd07f0fd8efd08d9be99f8018e584", "author": {"user": {"login": "see-quick", "name": "Ors\u00e1k Maro\u0161"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/077723889edfd07f0fd8efd08d9be99f8018e584", "committedDate": "2020-01-28T09:37:17Z", "message": "[MO] - [system test] -> fix of tests\n\nSigned-off-by: Seequick1 <morsak@redhat.com>"}, "afterCommit": {"oid": "d4ff394ed25e6b766f8180f0319e11c79b0aab41", "author": {"user": {"login": "see-quick", "name": "Ors\u00e1k Maro\u0161"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d4ff394ed25e6b766f8180f0319e11c79b0aab41", "committedDate": "2020-01-30T10:26:36Z", "message": "[MO] - [system test] -> fix of tests\n\nSigned-off-by: Seequick1 <morsak@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b831099333a40787ea7367c519723bcaddc8703", "author": {"user": {"login": "see-quick", "name": "Ors\u00e1k Maro\u0161"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/9b831099333a40787ea7367c519723bcaddc8703", "committedDate": "2020-01-30T10:29:15Z", "message": "[MO] - [system test] -> zookeeper upgrade test\n\nSigned-off-by: Seequick1 <morsak@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "775634f128d5eac223597755c4850fb4f17cc103", "author": {"user": {"login": "see-quick", "name": "Ors\u00e1k Maro\u0161"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/775634f128d5eac223597755c4850fb4f17cc103", "committedDate": "2020-01-30T10:29:15Z", "message": "[MO] - [conflicts] -> rebase\n\nSigned-off-by: Seequick1 <morsak@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "562178fd845fbcadfbfa13bc2e82073ff5f5fcff", "author": {"user": {"login": "see-quick", "name": "Ors\u00e1k Maro\u0161"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/562178fd845fbcadfbfa13bc2e82073ff5f5fcff", "committedDate": "2020-01-30T10:32:13Z", "message": "[MO] - [system test] -> fix of tests\n\nSigned-off-by: Seequick1 <morsak@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d4ff394ed25e6b766f8180f0319e11c79b0aab41", "author": {"user": {"login": "see-quick", "name": "Ors\u00e1k Maro\u0161"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d4ff394ed25e6b766f8180f0319e11c79b0aab41", "committedDate": "2020-01-30T10:26:36Z", "message": "[MO] - [system test] -> fix of tests\n\nSigned-off-by: Seequick1 <morsak@redhat.com>"}, "afterCommit": {"oid": "562178fd845fbcadfbfa13bc2e82073ff5f5fcff", "author": {"user": {"login": "see-quick", "name": "Ors\u00e1k Maro\u0161"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/562178fd845fbcadfbfa13bc2e82073ff5f5fcff", "committedDate": "2020-01-30T10:32:13Z", "message": "[MO] - [system test] -> fix of tests\n\nSigned-off-by: Seequick1 <morsak@redhat.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1797, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}