{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4NDE5MzMw", "number": 3596, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzozNDozNVrOEf3KEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMTo1Njo0NFrOEf9NiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODQ1MDA5OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/connect/ConnectST.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzozNDozNVrOHMZ1bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwODowNjoxNFrOHMbB4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2ODIzNg==", "bodyText": "Maybe put password to some variable?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3596#discussion_r482768236", "createdAt": "2020-09-03T07:34:35Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/connect/ConnectST.java", "diffHunk": "@@ -992,6 +1000,69 @@ void testScaleConnectAndConnectorSubresource() {\n         }\n     }\n \n+    @Test\n+    void testMountingSecretAndConfigMapAsVolumes() {\n+        String secretPassword = Base64.getEncoder().encodeToString(\"password\".getBytes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a75aec29d15b5a018f861653bb8a5e44071ac5d4"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3NzYwNg==", "bodyText": "Yes sure :)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3596#discussion_r482777606", "createdAt": "2020-09-03T07:49:57Z", "author": {"login": "im-konge"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/connect/ConnectST.java", "diffHunk": "@@ -992,6 +1000,69 @@ void testScaleConnectAndConnectorSubresource() {\n         }\n     }\n \n+    @Test\n+    void testMountingSecretAndConfigMapAsVolumes() {\n+        String secretPassword = Base64.getEncoder().encodeToString(\"password\".getBytes());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2ODIzNg=="}, "originalCommit": {"oid": "a75aec29d15b5a018f861653bb8a5e44071ac5d4"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc4NzgwOA==", "bodyText": "Done", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3596#discussion_r482787808", "createdAt": "2020-09-03T08:06:14Z", "author": {"login": "im-konge"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/connect/ConnectST.java", "diffHunk": "@@ -992,6 +1000,69 @@ void testScaleConnectAndConnectorSubresource() {\n         }\n     }\n \n+    @Test\n+    void testMountingSecretAndConfigMapAsVolumes() {\n+        String secretPassword = Base64.getEncoder().encodeToString(\"password\".getBytes());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2ODIzNg=="}, "originalCommit": {"oid": "a75aec29d15b5a018f861653bb8a5e44071ac5d4"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxOTQ0MDI5OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/connect/ConnectST.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMTo1NjoxNFrOHMjLAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDowNTowOVrOHMoOnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyMTIxNw==", "bodyText": "You seem to use both here?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                void testMountingSecretAndConfigMapAsVolumes() {\n          \n          \n            \n                void testMountingSecretAndConfigMapAsVolumesAndEnvVars() {", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3596#discussion_r482921217", "createdAt": "2020-09-03T11:56:14Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/connect/ConnectST.java", "diffHunk": "@@ -992,6 +1002,80 @@ void testScaleConnectAndConnectorSubresource() {\n         }\n     }\n \n+    @Test\n+    void testMountingSecretAndConfigMapAsVolumes() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fb84ba8ff1e67e6aba6e91bc57708b77a69d7a0"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk0NDE1Nw==", "bodyText": "Yes! Thanks :)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3596#discussion_r482944157", "createdAt": "2020-09-03T12:37:02Z", "author": {"login": "im-konge"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/connect/ConnectST.java", "diffHunk": "@@ -992,6 +1002,80 @@ void testScaleConnectAndConnectorSubresource() {\n         }\n     }\n \n+    @Test\n+    void testMountingSecretAndConfigMapAsVolumes() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyMTIxNw=="}, "originalCommit": {"oid": "9fb84ba8ff1e67e6aba6e91bc57708b77a69d7a0"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwNDA2MA==", "bodyText": "Done", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3596#discussion_r483004060", "createdAt": "2020-09-03T14:05:09Z", "author": {"login": "im-konge"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/connect/ConnectST.java", "diffHunk": "@@ -992,6 +1002,80 @@ void testScaleConnectAndConnectorSubresource() {\n         }\n     }\n \n+    @Test\n+    void testMountingSecretAndConfigMapAsVolumes() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyMTIxNw=="}, "originalCommit": {"oid": "9fb84ba8ff1e67e6aba6e91bc57708b77a69d7a0"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxOTQ0MjAxOnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/connect/ConnectST.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMTo1Njo0NFrOHMjMGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDowNTowNVrOHMoObQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyMTQ5OA==", "bodyText": "You check just the env vars. Not the volumes. You should also check the volumes (e.g. cat ....)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3596#discussion_r482921498", "createdAt": "2020-09-03T11:56:44Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/connect/ConnectST.java", "diffHunk": "@@ -992,6 +1002,80 @@ void testScaleConnectAndConnectorSubresource() {\n         }\n     }\n \n+    @Test\n+    void testMountingSecretAndConfigMapAsVolumes() {\n+        String secretPassword = \"password\";\n+        String encodedPassword = Base64.getEncoder().encodeToString(secretPassword.getBytes());\n+        String secretEnv = \"MY_CONNECTOR_SECRET\";\n+        String configMapEnv = \"MY_CONNECT_CONFIG_MAP\";\n+\n+        Secret connectSecret = new SecretBuilder()\n+            .withNewMetadata()\n+                .withName(\"my-secret\")\n+            .endMetadata()\n+            .withType(\"Opaque\")\n+            .addToData(\"my-secret-key\", encodedPassword)\n+            .build();\n+\n+        ConfigMap configMap = new ConfigMapBuilder()\n+            .editOrNewMetadata()\n+                .withName(\"my-config-map\")\n+            .endMetadata()\n+            .addToData(\"my-key\", \"my-value\")\n+            .build();\n+\n+        kubeClient().createSecret(connectSecret);\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(configMap);\n+\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3).done();\n+\n+        KafkaConnectResource.kafkaConnect(CLUSTER_NAME, 1)\n+            .editMetadata()\n+                .addToAnnotations(Annotations.STRIMZI_IO_USE_CONNECTOR_RESOURCES, \"true\")\n+            .endMetadata()\n+            .editSpec()\n+                .withNewExternalConfiguration()\n+                    .addNewVolume()\n+                        .withNewName(\"connect-secret\")\n+                        .withSecret(new SecretVolumeSourceBuilder().withSecretName(\"my-secret\").build())\n+                    .endVolume()\n+                    .addNewVolume()\n+                        .withNewName(\"connect-config-map\")\n+                        .withConfigMap(new ConfigMapVolumeSourceBuilder().withName(\"my-config-map\").build())\n+                    .endVolume()\n+                    .addNewEnv()\n+                        .withNewName(secretEnv)\n+                        .withNewValueFrom()\n+                            .withSecretKeyRef(\n+                                new SecretKeySelectorBuilder()\n+                                    .withKey(\"my-secret-key\")\n+                                    .withName(connectSecret.getMetadata().getName())\n+                                    .withOptional(false)\n+                                    .build())\n+                        .endValueFrom()\n+                    .endEnv()\n+                    .addNewEnv()\n+                        .withNewName(configMapEnv)\n+                        .withNewValueFrom()\n+                            .withConfigMapKeyRef(\n+                                new ConfigMapKeySelectorBuilder()\n+                                    .withKey(\"my-key\")\n+                                    .withName(configMap.getMetadata().getName())\n+                                    .withOptional(false)\n+                                    .build())\n+                        .endValueFrom()\n+                    .endEnv()\n+                .endExternalConfiguration()\n+            .endSpec()\n+            .done();\n+\n+        String connectPodName = kubeClient().listPods(Labels.STRIMZI_KIND_LABEL, KafkaConnect.RESOURCE_KIND).get(0).getMetadata().getName();\n+\n+        LOGGER.info(\"Check if the ENVs are correctly contains desired values\");\n+        assertThat(cmdKubeClient().execInPod(connectPodName, \"/bin/bash\", \"-c\", \"printenv \" + secretEnv).out().trim(), equalTo(secretPassword));\n+        assertThat(cmdKubeClient().execInPod(connectPodName, \"/bin/bash\", \"-c\", \"printenv \" + configMapEnv).out().trim(), equalTo(\"my-value\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fb84ba8ff1e67e6aba6e91bc57708b77a69d7a0"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk0NDIzMw==", "bodyText": "Sure thing, thanks :)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3596#discussion_r482944233", "createdAt": "2020-09-03T12:37:11Z", "author": {"login": "im-konge"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/connect/ConnectST.java", "diffHunk": "@@ -992,6 +1002,80 @@ void testScaleConnectAndConnectorSubresource() {\n         }\n     }\n \n+    @Test\n+    void testMountingSecretAndConfigMapAsVolumes() {\n+        String secretPassword = \"password\";\n+        String encodedPassword = Base64.getEncoder().encodeToString(secretPassword.getBytes());\n+        String secretEnv = \"MY_CONNECTOR_SECRET\";\n+        String configMapEnv = \"MY_CONNECT_CONFIG_MAP\";\n+\n+        Secret connectSecret = new SecretBuilder()\n+            .withNewMetadata()\n+                .withName(\"my-secret\")\n+            .endMetadata()\n+            .withType(\"Opaque\")\n+            .addToData(\"my-secret-key\", encodedPassword)\n+            .build();\n+\n+        ConfigMap configMap = new ConfigMapBuilder()\n+            .editOrNewMetadata()\n+                .withName(\"my-config-map\")\n+            .endMetadata()\n+            .addToData(\"my-key\", \"my-value\")\n+            .build();\n+\n+        kubeClient().createSecret(connectSecret);\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(configMap);\n+\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3).done();\n+\n+        KafkaConnectResource.kafkaConnect(CLUSTER_NAME, 1)\n+            .editMetadata()\n+                .addToAnnotations(Annotations.STRIMZI_IO_USE_CONNECTOR_RESOURCES, \"true\")\n+            .endMetadata()\n+            .editSpec()\n+                .withNewExternalConfiguration()\n+                    .addNewVolume()\n+                        .withNewName(\"connect-secret\")\n+                        .withSecret(new SecretVolumeSourceBuilder().withSecretName(\"my-secret\").build())\n+                    .endVolume()\n+                    .addNewVolume()\n+                        .withNewName(\"connect-config-map\")\n+                        .withConfigMap(new ConfigMapVolumeSourceBuilder().withName(\"my-config-map\").build())\n+                    .endVolume()\n+                    .addNewEnv()\n+                        .withNewName(secretEnv)\n+                        .withNewValueFrom()\n+                            .withSecretKeyRef(\n+                                new SecretKeySelectorBuilder()\n+                                    .withKey(\"my-secret-key\")\n+                                    .withName(connectSecret.getMetadata().getName())\n+                                    .withOptional(false)\n+                                    .build())\n+                        .endValueFrom()\n+                    .endEnv()\n+                    .addNewEnv()\n+                        .withNewName(configMapEnv)\n+                        .withNewValueFrom()\n+                            .withConfigMapKeyRef(\n+                                new ConfigMapKeySelectorBuilder()\n+                                    .withKey(\"my-key\")\n+                                    .withName(configMap.getMetadata().getName())\n+                                    .withOptional(false)\n+                                    .build())\n+                        .endValueFrom()\n+                    .endEnv()\n+                .endExternalConfiguration()\n+            .endSpec()\n+            .done();\n+\n+        String connectPodName = kubeClient().listPods(Labels.STRIMZI_KIND_LABEL, KafkaConnect.RESOURCE_KIND).get(0).getMetadata().getName();\n+\n+        LOGGER.info(\"Check if the ENVs are correctly contains desired values\");\n+        assertThat(cmdKubeClient().execInPod(connectPodName, \"/bin/bash\", \"-c\", \"printenv \" + secretEnv).out().trim(), equalTo(secretPassword));\n+        assertThat(cmdKubeClient().execInPod(connectPodName, \"/bin/bash\", \"-c\", \"printenv \" + configMapEnv).out().trim(), equalTo(\"my-value\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyMTQ5OA=="}, "originalCommit": {"oid": "9fb84ba8ff1e67e6aba6e91bc57708b77a69d7a0"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwNDAxMw==", "bodyText": "Done", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3596#discussion_r483004013", "createdAt": "2020-09-03T14:05:05Z", "author": {"login": "im-konge"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/connect/ConnectST.java", "diffHunk": "@@ -992,6 +1002,80 @@ void testScaleConnectAndConnectorSubresource() {\n         }\n     }\n \n+    @Test\n+    void testMountingSecretAndConfigMapAsVolumes() {\n+        String secretPassword = \"password\";\n+        String encodedPassword = Base64.getEncoder().encodeToString(secretPassword.getBytes());\n+        String secretEnv = \"MY_CONNECTOR_SECRET\";\n+        String configMapEnv = \"MY_CONNECT_CONFIG_MAP\";\n+\n+        Secret connectSecret = new SecretBuilder()\n+            .withNewMetadata()\n+                .withName(\"my-secret\")\n+            .endMetadata()\n+            .withType(\"Opaque\")\n+            .addToData(\"my-secret-key\", encodedPassword)\n+            .build();\n+\n+        ConfigMap configMap = new ConfigMapBuilder()\n+            .editOrNewMetadata()\n+                .withName(\"my-config-map\")\n+            .endMetadata()\n+            .addToData(\"my-key\", \"my-value\")\n+            .build();\n+\n+        kubeClient().createSecret(connectSecret);\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(configMap);\n+\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3).done();\n+\n+        KafkaConnectResource.kafkaConnect(CLUSTER_NAME, 1)\n+            .editMetadata()\n+                .addToAnnotations(Annotations.STRIMZI_IO_USE_CONNECTOR_RESOURCES, \"true\")\n+            .endMetadata()\n+            .editSpec()\n+                .withNewExternalConfiguration()\n+                    .addNewVolume()\n+                        .withNewName(\"connect-secret\")\n+                        .withSecret(new SecretVolumeSourceBuilder().withSecretName(\"my-secret\").build())\n+                    .endVolume()\n+                    .addNewVolume()\n+                        .withNewName(\"connect-config-map\")\n+                        .withConfigMap(new ConfigMapVolumeSourceBuilder().withName(\"my-config-map\").build())\n+                    .endVolume()\n+                    .addNewEnv()\n+                        .withNewName(secretEnv)\n+                        .withNewValueFrom()\n+                            .withSecretKeyRef(\n+                                new SecretKeySelectorBuilder()\n+                                    .withKey(\"my-secret-key\")\n+                                    .withName(connectSecret.getMetadata().getName())\n+                                    .withOptional(false)\n+                                    .build())\n+                        .endValueFrom()\n+                    .endEnv()\n+                    .addNewEnv()\n+                        .withNewName(configMapEnv)\n+                        .withNewValueFrom()\n+                            .withConfigMapKeyRef(\n+                                new ConfigMapKeySelectorBuilder()\n+                                    .withKey(\"my-key\")\n+                                    .withName(configMap.getMetadata().getName())\n+                                    .withOptional(false)\n+                                    .build())\n+                        .endValueFrom()\n+                    .endEnv()\n+                .endExternalConfiguration()\n+            .endSpec()\n+            .done();\n+\n+        String connectPodName = kubeClient().listPods(Labels.STRIMZI_KIND_LABEL, KafkaConnect.RESOURCE_KIND).get(0).getMetadata().getName();\n+\n+        LOGGER.info(\"Check if the ENVs are correctly contains desired values\");\n+        assertThat(cmdKubeClient().execInPod(connectPodName, \"/bin/bash\", \"-c\", \"printenv \" + secretEnv).out().trim(), equalTo(secretPassword));\n+        assertThat(cmdKubeClient().execInPod(connectPodName, \"/bin/bash\", \"-c\", \"printenv \" + configMapEnv).out().trim(), equalTo(\"my-value\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyMTQ5OA=="}, "originalCommit": {"oid": "9fb84ba8ff1e67e6aba6e91bc57708b77a69d7a0"}, "originalPosition": 109}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1069, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}