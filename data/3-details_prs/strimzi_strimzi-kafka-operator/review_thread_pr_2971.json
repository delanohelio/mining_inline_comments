{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0MzA2MTc3", "number": 2971, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMDoxODozOFrOD5-ulQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwODo1NDo1M1rOD7Jcdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTIzMTU3OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/KafkaST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMDoxODozOFrOGRj22A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMDoxODozOFrOGRj22A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA2NjQ1Ng==", "bodyText": "You should check the implementation of waitForPodDeletion and reuse it or update", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2971#discussion_r421066456", "createdAt": "2020-05-06T20:18:38Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/KafkaST.java", "diffHunk": "@@ -1031,7 +1030,7 @@ void testRemoveUserAndTopicOperatorsFromEntityOperator() {\n         //Waiting when EO pod will be deleted\n         DeploymentUtils.waitForDeploymentDeletion(eoDeploymentName);\n         ReplicaSetUtils.waitForReplicaSetDeletion(eoDeploymentName);\n-        PodUtils.waitForPodDeletion(eoPodName);\n+        PodUtils.waitForPodDeletionByPrefix(eoDeploymentName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ce547080dd3b5bd8d007d11d8e9011a8a85990a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzQ3MzE4OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/PodUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwODo1NDo1M1rOGTS-iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDowODo0OFrOGTVriw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg4NzA0OQ==", "bodyText": "I think this is a bit confusing. The method name says waitForPodDeletion - so I expect it that not delete anything, just wait for it to be deleted. Yet the message Pod xyz could not be deleted suggests this is actually a method deleting the pod? I think we should rename this method to something more matching for what it does ... e.g. deletePodWithWait, deletePodSync etc.\nIf you wanna do that in separate PR, that should be fine. But it should be fixed because when you read in the code waitForPodDeletion you do not expect it to delete anything. I also don't think this makes any sense form the test perspective. You want the CO to delete the pod. Not delete it your self.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2971#discussion_r422887049", "createdAt": "2020-05-11T08:54:53Z", "author": {"login": "scholzj"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/PodUtils.java", "diffHunk": "@@ -144,19 +144,19 @@ public static void waitForPod(String name) {\n     public static void waitForPodDeletion(String name) {\n         LOGGER.info(\"Waiting when Pod {} will be deleted\", name);\n \n-        if (kubeClient().listPodsByPrefixInName(name).size() != 0) {\n-            TestUtils.waitFor(\"Pod \" + name + \" could not be deleted\", Constants.POLL_INTERVAL_FOR_RESOURCE_DELETION, Constants.TIMEOUT_FOR_POD_DELETION,\n-                () -> {\n-                    Pod pod = kubeClient().getPod(name);\n-                    if (pod == null) {\n-                        return true;\n-                    } else {\n+        TestUtils.waitFor(\"Pod \" + name + \" could not be deleted\", Constants.POLL_INTERVAL_FOR_RESOURCE_DELETION, Constants.TIMEOUT_FOR_POD_DELETION,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74d95871d44d3d8b97a9cd5f40e4f924bc834637"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg5MjMxNQ==", "bodyText": "The reason for that was cause from time to time we faced pods, which were stuck in terminating state. Maybe we can add here condition to force delete pods only if it's stuck.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2971#discussion_r422892315", "createdAt": "2020-05-11T09:03:17Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/PodUtils.java", "diffHunk": "@@ -144,19 +144,19 @@ public static void waitForPod(String name) {\n     public static void waitForPodDeletion(String name) {\n         LOGGER.info(\"Waiting when Pod {} will be deleted\", name);\n \n-        if (kubeClient().listPodsByPrefixInName(name).size() != 0) {\n-            TestUtils.waitFor(\"Pod \" + name + \" could not be deleted\", Constants.POLL_INTERVAL_FOR_RESOURCE_DELETION, Constants.TIMEOUT_FOR_POD_DELETION,\n-                () -> {\n-                    Pod pod = kubeClient().getPod(name);\n-                    if (pod == null) {\n-                        return true;\n-                    } else {\n+        TestUtils.waitFor(\"Pod \" + name + \" could not be deleted\", Constants.POLL_INTERVAL_FOR_RESOURCE_DELETION, Constants.TIMEOUT_FOR_POD_DELETION,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg4NzA0OQ=="}, "originalCommit": {"oid": "74d95871d44d3d8b97a9cd5f40e4f924bc834637"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkzMTMzOQ==", "bodyText": "I can do that in separate PR, thanks for the comment", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2971#discussion_r422931339", "createdAt": "2020-05-11T10:08:48Z", "author": {"login": "im-konge"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/PodUtils.java", "diffHunk": "@@ -144,19 +144,19 @@ public static void waitForPod(String name) {\n     public static void waitForPodDeletion(String name) {\n         LOGGER.info(\"Waiting when Pod {} will be deleted\", name);\n \n-        if (kubeClient().listPodsByPrefixInName(name).size() != 0) {\n-            TestUtils.waitFor(\"Pod \" + name + \" could not be deleted\", Constants.POLL_INTERVAL_FOR_RESOURCE_DELETION, Constants.TIMEOUT_FOR_POD_DELETION,\n-                () -> {\n-                    Pod pod = kubeClient().getPod(name);\n-                    if (pod == null) {\n-                        return true;\n-                    } else {\n+        TestUtils.waitFor(\"Pod \" + name + \" could not be deleted\", Constants.POLL_INTERVAL_FOR_RESOURCE_DELETION, Constants.TIMEOUT_FOR_POD_DELETION,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg4NzA0OQ=="}, "originalCommit": {"oid": "74d95871d44d3d8b97a9cd5f40e4f924bc834637"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4994, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}