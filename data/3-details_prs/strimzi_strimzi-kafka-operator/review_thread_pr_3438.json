{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyMTA3NzQ5", "number": 3438, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMTo1MDoxMlrOEUkxog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMjowNDoyN1rOEUlBmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMDA5NTA2OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/mirrormaker/MirrorMakerST.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMTo1MDoxMlrOG62hjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMjoxOToxOFrOG63T6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM2MzkxOQ==", "bodyText": "How does this ensure that the previous status is not caught by this? I do not see any checks for observed generations etc.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3438#discussion_r464363919", "createdAt": "2020-08-03T11:50:12Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/mirrormaker/MirrorMakerST.java", "diffHunk": "@@ -663,6 +666,36 @@ void testScaleMirrorMakerSubresource() {\n             assertThat(pod.contains(mmGenName), is(true));\n         }\n     }\n+\n+    @Test\n+    void testScaleMirrorMakerToZero() {\n+        // Deploy source kafka\n+        KafkaResource.kafkaEphemeral(kafkaClusterSourceName, 1, 1).done();\n+        // Deploy target kafka\n+        KafkaResource.kafkaEphemeral(kafkaClusterTargetName, 1, 1).done();\n+\n+        KafkaMirrorMakerResource.kafkaMirrorMaker(CLUSTER_NAME, kafkaClusterTargetName, kafkaClusterSourceName, \"my-group\" + rng.nextInt(Integer.MAX_VALUE), 3, false)\n+            .editMetadata()\n+                .addToLabels(\"type\", \"kafka-mirror-maker\")\n+            .endMetadata()\n+            .done();\n+\n+        String mmDepName = KafkaMirrorMakerResources.deploymentName(CLUSTER_NAME);\n+        List<String> mmPods = kubeClient().listPodNames(\"type\", \"kafka-mirror-maker\");\n+        assertThat(mmPods.size(), is(3));\n+\n+        LOGGER.info(\"Scaling MirrorMaker to zero\");\n+        KafkaMirrorMakerResource.replaceMirrorMakerResource(CLUSTER_NAME, mm -> mm.getSpec().setReplicas(0));\n+\n+        KafkaMirrorMakerUtils.waitForKafkaMirrorMakerReady(CLUSTER_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6c9cb587f2dc556f59e3cf3e0da9f88b0fdc736"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM2NTE3Mg==", "bodyText": "Gonna add it, thanks", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3438#discussion_r464365172", "createdAt": "2020-08-03T11:53:10Z", "author": {"login": "im-konge"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/mirrormaker/MirrorMakerST.java", "diffHunk": "@@ -663,6 +666,36 @@ void testScaleMirrorMakerSubresource() {\n             assertThat(pod.contains(mmGenName), is(true));\n         }\n     }\n+\n+    @Test\n+    void testScaleMirrorMakerToZero() {\n+        // Deploy source kafka\n+        KafkaResource.kafkaEphemeral(kafkaClusterSourceName, 1, 1).done();\n+        // Deploy target kafka\n+        KafkaResource.kafkaEphemeral(kafkaClusterTargetName, 1, 1).done();\n+\n+        KafkaMirrorMakerResource.kafkaMirrorMaker(CLUSTER_NAME, kafkaClusterTargetName, kafkaClusterSourceName, \"my-group\" + rng.nextInt(Integer.MAX_VALUE), 3, false)\n+            .editMetadata()\n+                .addToLabels(\"type\", \"kafka-mirror-maker\")\n+            .endMetadata()\n+            .done();\n+\n+        String mmDepName = KafkaMirrorMakerResources.deploymentName(CLUSTER_NAME);\n+        List<String> mmPods = kubeClient().listPodNames(\"type\", \"kafka-mirror-maker\");\n+        assertThat(mmPods.size(), is(3));\n+\n+        LOGGER.info(\"Scaling MirrorMaker to zero\");\n+        KafkaMirrorMakerResource.replaceMirrorMakerResource(CLUSTER_NAME, mm -> mm.getSpec().setReplicas(0));\n+\n+        KafkaMirrorMakerUtils.waitForKafkaMirrorMakerReady(CLUSTER_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM2MzkxOQ=="}, "originalCommit": {"oid": "d6c9cb587f2dc556f59e3cf3e0da9f88b0fdc736"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM3MTk2Mg==", "bodyText": "https://github.com/strimzi/strimzi-kafka-operator/pull/3438/files#diff-22f8df9b640e22843eae57444b9be687R700", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3438#discussion_r464371962", "createdAt": "2020-08-03T12:08:30Z", "author": {"login": "im-konge"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/mirrormaker/MirrorMakerST.java", "diffHunk": "@@ -663,6 +666,36 @@ void testScaleMirrorMakerSubresource() {\n             assertThat(pod.contains(mmGenName), is(true));\n         }\n     }\n+\n+    @Test\n+    void testScaleMirrorMakerToZero() {\n+        // Deploy source kafka\n+        KafkaResource.kafkaEphemeral(kafkaClusterSourceName, 1, 1).done();\n+        // Deploy target kafka\n+        KafkaResource.kafkaEphemeral(kafkaClusterTargetName, 1, 1).done();\n+\n+        KafkaMirrorMakerResource.kafkaMirrorMaker(CLUSTER_NAME, kafkaClusterTargetName, kafkaClusterSourceName, \"my-group\" + rng.nextInt(Integer.MAX_VALUE), 3, false)\n+            .editMetadata()\n+                .addToLabels(\"type\", \"kafka-mirror-maker\")\n+            .endMetadata()\n+            .done();\n+\n+        String mmDepName = KafkaMirrorMakerResources.deploymentName(CLUSTER_NAME);\n+        List<String> mmPods = kubeClient().listPodNames(\"type\", \"kafka-mirror-maker\");\n+        assertThat(mmPods.size(), is(3));\n+\n+        LOGGER.info(\"Scaling MirrorMaker to zero\");\n+        KafkaMirrorMakerResource.replaceMirrorMakerResource(CLUSTER_NAME, mm -> mm.getSpec().setReplicas(0));\n+\n+        KafkaMirrorMakerUtils.waitForKafkaMirrorMakerReady(CLUSTER_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM2MzkxOQ=="}, "originalCommit": {"oid": "d6c9cb587f2dc556f59e3cf3e0da9f88b0fdc736"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM3MjAyMw==", "bodyText": "Check is added", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3438#discussion_r464372023", "createdAt": "2020-08-03T12:08:40Z", "author": {"login": "im-konge"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/mirrormaker/MirrorMakerST.java", "diffHunk": "@@ -663,6 +666,36 @@ void testScaleMirrorMakerSubresource() {\n             assertThat(pod.contains(mmGenName), is(true));\n         }\n     }\n+\n+    @Test\n+    void testScaleMirrorMakerToZero() {\n+        // Deploy source kafka\n+        KafkaResource.kafkaEphemeral(kafkaClusterSourceName, 1, 1).done();\n+        // Deploy target kafka\n+        KafkaResource.kafkaEphemeral(kafkaClusterTargetName, 1, 1).done();\n+\n+        KafkaMirrorMakerResource.kafkaMirrorMaker(CLUSTER_NAME, kafkaClusterTargetName, kafkaClusterSourceName, \"my-group\" + rng.nextInt(Integer.MAX_VALUE), 3, false)\n+            .editMetadata()\n+                .addToLabels(\"type\", \"kafka-mirror-maker\")\n+            .endMetadata()\n+            .done();\n+\n+        String mmDepName = KafkaMirrorMakerResources.deploymentName(CLUSTER_NAME);\n+        List<String> mmPods = kubeClient().listPodNames(\"type\", \"kafka-mirror-maker\");\n+        assertThat(mmPods.size(), is(3));\n+\n+        LOGGER.info(\"Scaling MirrorMaker to zero\");\n+        KafkaMirrorMakerResource.replaceMirrorMakerResource(CLUSTER_NAME, mm -> mm.getSpec().setReplicas(0));\n+\n+        KafkaMirrorMakerUtils.waitForKafkaMirrorMakerReady(CLUSTER_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM2MzkxOQ=="}, "originalCommit": {"oid": "d6c9cb587f2dc556f59e3cf3e0da9f88b0fdc736"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM3NjgxMQ==", "bodyText": "So should this line be removed now?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3438#discussion_r464376811", "createdAt": "2020-08-03T12:19:18Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/mirrormaker/MirrorMakerST.java", "diffHunk": "@@ -663,6 +666,36 @@ void testScaleMirrorMakerSubresource() {\n             assertThat(pod.contains(mmGenName), is(true));\n         }\n     }\n+\n+    @Test\n+    void testScaleMirrorMakerToZero() {\n+        // Deploy source kafka\n+        KafkaResource.kafkaEphemeral(kafkaClusterSourceName, 1, 1).done();\n+        // Deploy target kafka\n+        KafkaResource.kafkaEphemeral(kafkaClusterTargetName, 1, 1).done();\n+\n+        KafkaMirrorMakerResource.kafkaMirrorMaker(CLUSTER_NAME, kafkaClusterTargetName, kafkaClusterSourceName, \"my-group\" + rng.nextInt(Integer.MAX_VALUE), 3, false)\n+            .editMetadata()\n+                .addToLabels(\"type\", \"kafka-mirror-maker\")\n+            .endMetadata()\n+            .done();\n+\n+        String mmDepName = KafkaMirrorMakerResources.deploymentName(CLUSTER_NAME);\n+        List<String> mmPods = kubeClient().listPodNames(\"type\", \"kafka-mirror-maker\");\n+        assertThat(mmPods.size(), is(3));\n+\n+        LOGGER.info(\"Scaling MirrorMaker to zero\");\n+        KafkaMirrorMakerResource.replaceMirrorMakerResource(CLUSTER_NAME, mm -> mm.getSpec().setReplicas(0));\n+\n+        KafkaMirrorMakerUtils.waitForKafkaMirrorMakerReady(CLUSTER_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM2MzkxOQ=="}, "originalCommit": {"oid": "d6c9cb587f2dc556f59e3cf3e0da9f88b0fdc736"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMDEzNTkzOnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/mirrormaker/MirrorMakerST.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMjowNDoyN1rOG6254Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMjowODoyMFrOG63ArQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM3MDE0NQ==", "bodyText": "We maybe should take into consideration to create some Enum on CR type statuses. Would be better instead of hardcoding these values", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3438#discussion_r464370145", "createdAt": "2020-08-03T12:04:27Z", "author": {"login": "see-quick"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/mirrormaker/MirrorMakerST.java", "diffHunk": "@@ -663,6 +666,36 @@ void testScaleMirrorMakerSubresource() {\n             assertThat(pod.contains(mmGenName), is(true));\n         }\n     }\n+\n+    @Test\n+    void testScaleMirrorMakerToZero() {\n+        // Deploy source kafka\n+        KafkaResource.kafkaEphemeral(kafkaClusterSourceName, 1, 1).done();\n+        // Deploy target kafka\n+        KafkaResource.kafkaEphemeral(kafkaClusterTargetName, 1, 1).done();\n+\n+        KafkaMirrorMakerResource.kafkaMirrorMaker(CLUSTER_NAME, kafkaClusterTargetName, kafkaClusterSourceName, \"my-group\" + rng.nextInt(Integer.MAX_VALUE), 3, false)\n+            .editMetadata()\n+                .addToLabels(\"type\", \"kafka-mirror-maker\")\n+            .endMetadata()\n+            .done();\n+\n+        String mmDepName = KafkaMirrorMakerResources.deploymentName(CLUSTER_NAME);\n+        List<String> mmPods = kubeClient().listPodNames(\"type\", \"kafka-mirror-maker\");\n+        assertThat(mmPods.size(), is(3));\n+\n+        LOGGER.info(\"Scaling MirrorMaker to zero\");\n+        KafkaMirrorMakerResource.replaceMirrorMakerResource(CLUSTER_NAME, mm -> mm.getSpec().setReplicas(0));\n+\n+        KafkaMirrorMakerUtils.waitForKafkaMirrorMakerReady(CLUSTER_NAME);\n+        PodUtils.waitForPodsReady(kubeClient().getDeploymentSelectors(mmDepName), 0, true);\n+\n+        mmPods = kubeClient().listPodNames(\"type\", \"kafka-mirror-maker\");\n+        KafkaMirrorMakerStatus mmStatus = KafkaMirrorMakerResource.kafkaMirrorMakerClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus();\n+\n+        assertThat(mmPods.size(), is(0));\n+        assertThat(mmStatus.getConditions().get(0).getType(), is(\"Ready\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6c9cb587f2dc556f59e3cf3e0da9f88b0fdc736"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM3MTg4NQ==", "bodyText": "I have it on the list, as many things, so I will do it in another PR as it's not related just to this test", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3438#discussion_r464371885", "createdAt": "2020-08-03T12:08:20Z", "author": {"login": "im-konge"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/mirrormaker/MirrorMakerST.java", "diffHunk": "@@ -663,6 +666,36 @@ void testScaleMirrorMakerSubresource() {\n             assertThat(pod.contains(mmGenName), is(true));\n         }\n     }\n+\n+    @Test\n+    void testScaleMirrorMakerToZero() {\n+        // Deploy source kafka\n+        KafkaResource.kafkaEphemeral(kafkaClusterSourceName, 1, 1).done();\n+        // Deploy target kafka\n+        KafkaResource.kafkaEphemeral(kafkaClusterTargetName, 1, 1).done();\n+\n+        KafkaMirrorMakerResource.kafkaMirrorMaker(CLUSTER_NAME, kafkaClusterTargetName, kafkaClusterSourceName, \"my-group\" + rng.nextInt(Integer.MAX_VALUE), 3, false)\n+            .editMetadata()\n+                .addToLabels(\"type\", \"kafka-mirror-maker\")\n+            .endMetadata()\n+            .done();\n+\n+        String mmDepName = KafkaMirrorMakerResources.deploymentName(CLUSTER_NAME);\n+        List<String> mmPods = kubeClient().listPodNames(\"type\", \"kafka-mirror-maker\");\n+        assertThat(mmPods.size(), is(3));\n+\n+        LOGGER.info(\"Scaling MirrorMaker to zero\");\n+        KafkaMirrorMakerResource.replaceMirrorMakerResource(CLUSTER_NAME, mm -> mm.getSpec().setReplicas(0));\n+\n+        KafkaMirrorMakerUtils.waitForKafkaMirrorMakerReady(CLUSTER_NAME);\n+        PodUtils.waitForPodsReady(kubeClient().getDeploymentSelectors(mmDepName), 0, true);\n+\n+        mmPods = kubeClient().listPodNames(\"type\", \"kafka-mirror-maker\");\n+        KafkaMirrorMakerStatus mmStatus = KafkaMirrorMakerResource.kafkaMirrorMakerClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus();\n+\n+        assertThat(mmPods.size(), is(0));\n+        assertThat(mmStatus.getConditions().get(0).getType(), is(\"Ready\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM3MDE0NQ=="}, "originalCommit": {"oid": "d6c9cb587f2dc556f59e3cf3e0da9f88b0fdc736"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1231, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}