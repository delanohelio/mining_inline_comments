{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMjk3NTg5", "number": 2801, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDoyMzoxMlrODvld6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzoxMzoyNlrODvqRjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjIzNTI5OnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/VolumeUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDoyMzoxMlrOGCGCSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjowNjo0OFrOGCK_2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg0OTIyNQ==", "bodyText": "I am curious, why use the AbstractModel log object as opposed to one inside this class?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2801#discussion_r404849225", "createdAt": "2020-04-07T14:23:12Z", "author": {"login": "samuel-hawker"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/VolumeUtils.java", "diffHunk": "@@ -36,8 +43,28 @@\n  * Shared methods for working with Volume\n  */\n public class VolumeUtils {\n-\n     protected static final Logger log = LogManager.getLogger(VolumeUtils.class.getName());\n+    private static Pattern volumeNamePattern = Pattern.compile(\"^([a-z0-9]{1}[a-z0-9-]{0,61}[a-z0-9]{1})$\");\n+\n+    /**\n+     * Creates a Kubernetes volume which will map to ConfigMap\n+     *\n+     * @param name              Name of the Volume\n+     * @param configMapName     Name of the ConfigMap\n+     * @return                  The newly created Volume\n+     */\n+    public static Volume createConfigMapVolume(String name, String configMapName) {\n+        ConfigMapVolumeSource configMapVolumeSource = new ConfigMapVolumeSourceBuilder()\n+                .withName(configMapName)\n+                .build();\n+\n+        Volume volume = new VolumeBuilder()\n+                .withName(getValidVolumeName(name))\n+                .withConfigMap(configMapVolumeSource)\n+                .build();\n+        AbstractModel.log.trace(\"Created configMap Volume named '{}' with source configMap '{}'\", name, configMapName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3710598699d6578782b11c61a510bb5b36bb801"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzMDUyMQ==", "bodyText": "Thanks for noticing. That was just refactoring issue. Should be fixed now.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2801#discussion_r404930521", "createdAt": "2020-04-07T16:06:48Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/VolumeUtils.java", "diffHunk": "@@ -36,8 +43,28 @@\n  * Shared methods for working with Volume\n  */\n public class VolumeUtils {\n-\n     protected static final Logger log = LogManager.getLogger(VolumeUtils.class.getName());\n+    private static Pattern volumeNamePattern = Pattern.compile(\"^([a-z0-9]{1}[a-z0-9-]{0,61}[a-z0-9]{1})$\");\n+\n+    /**\n+     * Creates a Kubernetes volume which will map to ConfigMap\n+     *\n+     * @param name              Name of the Volume\n+     * @param configMapName     Name of the ConfigMap\n+     * @return                  The newly created Volume\n+     */\n+    public static Volume createConfigMapVolume(String name, String configMapName) {\n+        ConfigMapVolumeSource configMapVolumeSource = new ConfigMapVolumeSourceBuilder()\n+                .withName(configMapName)\n+                .build();\n+\n+        Volume volume = new VolumeBuilder()\n+                .withName(getValidVolumeName(name))\n+                .withConfigMap(configMapVolumeSource)\n+                .build();\n+        AbstractModel.log.trace(\"Created configMap Volume named '{}' with source configMap '{}'\", name, configMapName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg0OTIyNQ=="}, "originalCommit": {"oid": "b3710598699d6578782b11c61a510bb5b36bb801"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjI0OTI5OnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/VolumeUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDoyNjowM1rOGCGLPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDoyNjowM1rOGCGLPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg1MTUxNg==", "bodyText": "missing a space between to and 63 :P", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2801#discussion_r404851516", "createdAt": "2020-04-07T14:26:03Z", "author": {"login": "samuel-hawker"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/VolumeUtils.java", "diffHunk": "@@ -257,4 +284,80 @@ public static VolumeMount createVolumeMount(String name, String path) {\n     public static String getVolumePrefix(Integer id) {\n         return id == null ? AbstractModel.VOLUME_NAME : AbstractModel.VOLUME_NAME + \"-\" + id;\n     }\n+\n+    /**\n+     * Volume names have to follow DNS label standard form RFC1123:\n+     *     - contain at most 63 characters\n+     *     - contain only lowercase alphanumeric characters or \u2018-\u2019\n+     *     - start with an alphanumeric character\n+     *     - end with an alphanumeric character\n+     *\n+     *  This method checkes if the volume name is a valid name and if not it will modify it to make it valid.\n+     *\n+     * @param originalName  The original name of the volume\n+     * @return              Either the original volume name or a modified version to match volume name criteria\n+     */\n+    public static String getValidVolumeName(String originalName) {\n+        if (originalName == null) {\n+            throw new RuntimeException(\"Volume name cannot be null\");\n+        }\n+\n+        if (volumeNamePattern.matcher(originalName).matches()) {\n+            return originalName;\n+        } else {\n+            return makeValidVolumeName(originalName);\n+        }\n+    }\n+\n+    /**\n+     * Makes a valid volume name out of an invalid name. To do so it:\n+     *     - Replaces . and _ characters with -\n+     *     - Shortens the name if needed\n+     *     - Uses SHA1 hash for uniqueness of the new name\n+     *\n+     * @param originalName  Original invalid volume name\n+     * @return              New valid volume name\n+     */\n+    /*test*/ static String makeValidVolumeName(String originalName) {\n+        // SHA-1 hash is used for uniqueness\n+        String digestStub = getVolumeNameHashStub(originalName);\n+\n+        // Special characters need to be replaced\n+        String newName = originalName\n+                .replace(\".\", \"-\")\n+                .replace(\"_\", \"-\");\n+\n+        // The name with the hash should be only up to63 characters long", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3710598699d6578782b11c61a510bb5b36bb801"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjI0OTY1OnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/VolumeUtils.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDoyNjowOVrOGCGLfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwODowNzo1NlrOGCjtvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg1MTU4MA==", "bodyText": "Objects.requireNonNull(originalName, \"Volume name cannot be null\") ?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2801#discussion_r404851580", "createdAt": "2020-04-07T14:26:09Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/VolumeUtils.java", "diffHunk": "@@ -257,4 +284,80 @@ public static VolumeMount createVolumeMount(String name, String path) {\n     public static String getVolumePrefix(Integer id) {\n         return id == null ? AbstractModel.VOLUME_NAME : AbstractModel.VOLUME_NAME + \"-\" + id;\n     }\n+\n+    /**\n+     * Volume names have to follow DNS label standard form RFC1123:\n+     *     - contain at most 63 characters\n+     *     - contain only lowercase alphanumeric characters or \u2018-\u2019\n+     *     - start with an alphanumeric character\n+     *     - end with an alphanumeric character\n+     *\n+     *  This method checkes if the volume name is a valid name and if not it will modify it to make it valid.\n+     *\n+     * @param originalName  The original name of the volume\n+     * @return              Either the original volume name or a modified version to match volume name criteria\n+     */\n+    public static String getValidVolumeName(String originalName) {\n+        if (originalName == null) {\n+            throw new RuntimeException(\"Volume name cannot be null\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3710598699d6578782b11c61a510bb5b36bb801"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzNzA1MQ==", "bodyText": "Do I have to? :-o TBH I really find traditional if more readable. And from a quck search it doesn't seem like we are using Objects.requireNonNull everywhere apart from this part of code but rather as an exception.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2801#discussion_r404937051", "createdAt": "2020-04-07T16:15:47Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/VolumeUtils.java", "diffHunk": "@@ -257,4 +284,80 @@ public static VolumeMount createVolumeMount(String name, String path) {\n     public static String getVolumePrefix(Integer id) {\n         return id == null ? AbstractModel.VOLUME_NAME : AbstractModel.VOLUME_NAME + \"-\" + id;\n     }\n+\n+    /**\n+     * Volume names have to follow DNS label standard form RFC1123:\n+     *     - contain at most 63 characters\n+     *     - contain only lowercase alphanumeric characters or \u2018-\u2019\n+     *     - start with an alphanumeric character\n+     *     - end with an alphanumeric character\n+     *\n+     *  This method checkes if the volume name is a valid name and if not it will modify it to make it valid.\n+     *\n+     * @param originalName  The original name of the volume\n+     * @return              Either the original volume name or a modified version to match volume name criteria\n+     */\n+    public static String getValidVolumeName(String originalName) {\n+        if (originalName == null) {\n+            throw new RuntimeException(\"Volume name cannot be null\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg1MTU4MA=="}, "originalCommit": {"oid": "b3710598699d6578782b11c61a510bb5b36bb801"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMzNTQ4Ng==", "bodyText": "No, you don't have to.\nI raised it as a question because it seems to be becoming an idiom in other projects (including vertx, for example). It's nice in that it's a one-liner, but I don't particularly like that it throws an NPE, because in cases like this, where it's asserting a precondition, I think IAE would be better. But really all I want is for us to have a consensus about whether we adopt this idiom, and if we decide to not use requireNonNull() then I do think we should be consistent about the exception we throw. I also think we could be a little more strict about checking preconditions, but that's irrelevant to this PR.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2801#discussion_r405335486", "createdAt": "2020-04-08T08:07:56Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/VolumeUtils.java", "diffHunk": "@@ -257,4 +284,80 @@ public static VolumeMount createVolumeMount(String name, String path) {\n     public static String getVolumePrefix(Integer id) {\n         return id == null ? AbstractModel.VOLUME_NAME : AbstractModel.VOLUME_NAME + \"-\" + id;\n     }\n+\n+    /**\n+     * Volume names have to follow DNS label standard form RFC1123:\n+     *     - contain at most 63 characters\n+     *     - contain only lowercase alphanumeric characters or \u2018-\u2019\n+     *     - start with an alphanumeric character\n+     *     - end with an alphanumeric character\n+     *\n+     *  This method checkes if the volume name is a valid name and if not it will modify it to make it valid.\n+     *\n+     * @param originalName  The original name of the volume\n+     * @return              Either the original volume name or a modified version to match volume name criteria\n+     */\n+    public static String getValidVolumeName(String originalName) {\n+        if (originalName == null) {\n+            throw new RuntimeException(\"Volume name cannot be null\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg1MTU4MA=="}, "originalCommit": {"oid": "b3710598699d6578782b11c61a510bb5b36bb801"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjI2MDgyOnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/VolumeUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDoyODoyNFrOGCGShQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDoyODoyNFrOGCGShQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg1MzM4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return      First 8 characters of the sHA-1 hash\n          \n          \n            \n                 * @return      First 8 characters of the SHA-1 hash", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2801#discussion_r404853381", "createdAt": "2020-04-07T14:28:24Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/VolumeUtils.java", "diffHunk": "@@ -257,4 +284,80 @@ public static VolumeMount createVolumeMount(String name, String path) {\n     public static String getVolumePrefix(Integer id) {\n         return id == null ? AbstractModel.VOLUME_NAME : AbstractModel.VOLUME_NAME + \"-\" + id;\n     }\n+\n+    /**\n+     * Volume names have to follow DNS label standard form RFC1123:\n+     *     - contain at most 63 characters\n+     *     - contain only lowercase alphanumeric characters or \u2018-\u2019\n+     *     - start with an alphanumeric character\n+     *     - end with an alphanumeric character\n+     *\n+     *  This method checkes if the volume name is a valid name and if not it will modify it to make it valid.\n+     *\n+     * @param originalName  The original name of the volume\n+     * @return              Either the original volume name or a modified version to match volume name criteria\n+     */\n+    public static String getValidVolumeName(String originalName) {\n+        if (originalName == null) {\n+            throw new RuntimeException(\"Volume name cannot be null\");\n+        }\n+\n+        if (volumeNamePattern.matcher(originalName).matches()) {\n+            return originalName;\n+        } else {\n+            return makeValidVolumeName(originalName);\n+        }\n+    }\n+\n+    /**\n+     * Makes a valid volume name out of an invalid name. To do so it:\n+     *     - Replaces . and _ characters with -\n+     *     - Shortens the name if needed\n+     *     - Uses SHA1 hash for uniqueness of the new name\n+     *\n+     * @param originalName  Original invalid volume name\n+     * @return              New valid volume name\n+     */\n+    /*test*/ static String makeValidVolumeName(String originalName) {\n+        // SHA-1 hash is used for uniqueness\n+        String digestStub = getVolumeNameHashStub(originalName);\n+\n+        // Special characters need to be replaced\n+        String newName = originalName\n+                .replace(\".\", \"-\")\n+                .replace(\"_\", \"-\");\n+\n+        // The name with the hash should be only up to63 characters long\n+        int i = Math.min(newName.length(), 54);\n+\n+        while (i > 0) {\n+            char lastChar = newName.charAt(i - 1);\n+\n+            if (lastChar == '-') {\n+                i--;\n+            } else {\n+                break;\n+            }\n+        }\n+\n+        // Returned new fixed name with the hash at the end\n+        return newName.substring(0, i) + \"-\" + digestStub;\n+    }\n+\n+    /**\n+     * Gets the first 8 characters from a SHA-1 hash of a volume name\n+     *\n+     * @param name  Volume name\n+     * @return      First 8 characters of the sHA-1 hash", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3710598699d6578782b11c61a510bb5b36bb801"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjI2ODAyOnYy", "diffSide": "RIGHT", "path": "operator-common/src/main/java/io/strimzi/operator/common/model/Labels.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDoyOTo1MFrOGCGXJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjoyMzozM1rOGCLucg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg1NDU2Ng==", "bodyText": "Considering how similar this method and the volume name one are, is it worth consolidating them down into a single\nmakeValidKubernetesName\n\nmethod (or names something similar)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2801#discussion_r404854566", "createdAt": "2020-04-07T14:29:50Z", "author": {"login": "samuel-hawker"}, "path": "operator-common/src/main/java/io/strimzi/operator/common/model/Labels.java", "diffHunk": "@@ -286,7 +286,7 @@ public Labels withKubernetesPartOf(String instanceName) {\n         while (i > 0) {\n             char lastChar = instance.charAt(i - 1);\n \n-            if (lastChar == '.' || lastChar == '-') {\n+            if (lastChar == '.' || lastChar == '-' || lastChar == '_') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3710598699d6578782b11c61a510bb5b36bb801"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzMTgxNA==", "bodyText": "We should keep them separate since the rules are separate. For example . or _ is legal in labale, just cannot be at the start or end. But in volume name, both . and _ are illegal. I really just added the _ here because I noticed it is missing.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2801#discussion_r404931814", "createdAt": "2020-04-07T16:08:39Z", "author": {"login": "scholzj"}, "path": "operator-common/src/main/java/io/strimzi/operator/common/model/Labels.java", "diffHunk": "@@ -286,7 +286,7 @@ public Labels withKubernetesPartOf(String instanceName) {\n         while (i > 0) {\n             char lastChar = instance.charAt(i - 1);\n \n-            if (lastChar == '.' || lastChar == '-') {\n+            if (lastChar == '.' || lastChar == '-' || lastChar == '_') {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg1NDU2Ng=="}, "originalCommit": {"oid": "b3710598699d6578782b11c61a510bb5b36bb801"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0MjQ1MA==", "bodyText": "Makes sense to me, thanks for explaining!", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2801#discussion_r404942450", "createdAt": "2020-04-07T16:23:33Z", "author": {"login": "samuel-hawker"}, "path": "operator-common/src/main/java/io/strimzi/operator/common/model/Labels.java", "diffHunk": "@@ -286,7 +286,7 @@ public Labels withKubernetesPartOf(String instanceName) {\n         while (i > 0) {\n             char lastChar = instance.charAt(i - 1);\n \n-            if (lastChar == '.' || lastChar == '-') {\n+            if (lastChar == '.' || lastChar == '-' || lastChar == '_') {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg1NDU2Ng=="}, "originalCommit": {"oid": "b3710598699d6578782b11c61a510bb5b36bb801"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzAyMjg1OnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/VolumeUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzoxMzoyNlrOGCN0DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODoyMjoxNFrOGCQbzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3NjY1Mg==", "bodyText": "actually you are logging the name not the mangled one, maybe we could log them together.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2801#discussion_r404976652", "createdAt": "2020-04-07T17:13:26Z", "author": {"login": "ppatierno"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/VolumeUtils.java", "diffHunk": "@@ -36,8 +43,28 @@\n  * Shared methods for working with Volume\n  */\n public class VolumeUtils {\n-\n     protected static final Logger log = LogManager.getLogger(VolumeUtils.class.getName());\n+    private static Pattern volumeNamePattern = Pattern.compile(\"^([a-z0-9]{1}[a-z0-9-]{0,61}[a-z0-9]{1})$\");\n+\n+    /**\n+     * Creates a Kubernetes volume which will map to ConfigMap\n+     *\n+     * @param name              Name of the Volume\n+     * @param configMapName     Name of the ConfigMap\n+     * @return                  The newly created Volume\n+     */\n+    public static Volume createConfigMapVolume(String name, String configMapName) {\n+        ConfigMapVolumeSource configMapVolumeSource = new ConfigMapVolumeSourceBuilder()\n+                .withName(configMapName)\n+                .build();\n+\n+        Volume volume = new VolumeBuilder()\n+                .withName(getValidVolumeName(name))\n+                .withConfigMap(configMapVolumeSource)\n+                .build();\n+        log.trace(\"Created configMap Volume named '{}' with source configMap '{}'\", name, configMapName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5008251082b192df38325cf746530214014aec1d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxOTU5Ng==", "bodyText": "Ok, good catch. Should be fixed.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2801#discussion_r405019596", "createdAt": "2020-04-07T18:22:14Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/VolumeUtils.java", "diffHunk": "@@ -36,8 +43,28 @@\n  * Shared methods for working with Volume\n  */\n public class VolumeUtils {\n-\n     protected static final Logger log = LogManager.getLogger(VolumeUtils.class.getName());\n+    private static Pattern volumeNamePattern = Pattern.compile(\"^([a-z0-9]{1}[a-z0-9-]{0,61}[a-z0-9]{1})$\");\n+\n+    /**\n+     * Creates a Kubernetes volume which will map to ConfigMap\n+     *\n+     * @param name              Name of the Volume\n+     * @param configMapName     Name of the ConfigMap\n+     * @return                  The newly created Volume\n+     */\n+    public static Volume createConfigMapVolume(String name, String configMapName) {\n+        ConfigMapVolumeSource configMapVolumeSource = new ConfigMapVolumeSourceBuilder()\n+                .withName(configMapName)\n+                .build();\n+\n+        Volume volume = new VolumeBuilder()\n+                .withName(getValidVolumeName(name))\n+                .withConfigMap(configMapVolumeSource)\n+                .build();\n+        log.trace(\"Created configMap Volume named '{}' with source configMap '{}'\", name, configMapName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3NjY1Mg=="}, "originalCommit": {"oid": "5008251082b192df38325cf746530214014aec1d"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 123, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}