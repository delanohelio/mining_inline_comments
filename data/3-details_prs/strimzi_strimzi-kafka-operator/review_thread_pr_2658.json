{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MjEwMDA5", "number": 2658, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxNDoxMDoyOFrODmGR6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxNDoxMDoyOFrODmGR6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjc1MzY5OnYy", "diffSide": "RIGHT", "path": "user-operator/src/test/java/io/strimzi/operator/user/operator/KafkaUserQuotasIT.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxNDoxMDoyOFrOFzVblg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxNDoyNzo1NFrOFzVhvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM3MjgyMg==", "bodyText": "maybe we can do just one verify with all assertThat inside as done in #2651 ?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2658#discussion_r389372822", "createdAt": "2020-03-08T14:10:28Z", "author": {"login": "ppatierno"}, "path": "user-operator/src/test/java/io/strimzi/operator/user/operator/KafkaUserQuotasIT.java", "diffHunk": "@@ -170,27 +176,166 @@ public void testDeletion()  {\n     }\n \n     @Test\n-    public void testUpdate()  {\n-        JsonObject original = new JsonObject().put(\"version\", 1).put(\"config\", new JsonObject().put(\"consumer_byte_rate\", \"1000\"));\n+    public void testUpdateAndFieldRemoval()  {\n         KafkaUserQuotas quotas = new KafkaUserQuotas();\n         quotas.setConsumerByteRate(2000);\n-        JsonObject updated = new JsonObject(new String(kuq.updateUserJson(original.encode().getBytes(StandardCharsets.UTF_8), quotas), StandardCharsets.UTF_8));\n+        quotas.setProducerByteRate(4000);\n+        quotas.setRequestPercentage(40);\n+\n+        JsonObject created = new JsonObject(new String(kuq.createUserJson(quotas), StandardCharsets.UTF_8));\n+        assertThat(created.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(notNullValue()));\n+        assertThat(created.getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(notNullValue()));\n+        assertThat(created.getJsonObject(\"config\").getString(\"request_percentage\"), is(notNullValue()));\n+        assertThat(created.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(\"2000\"));\n+        assertThat(created.getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(\"4000\"));\n+        assertThat(created.getJsonObject(\"config\").getString(\"request_percentage\"), is(\"40\"));\n+\n+        byte[] createdBytes = created.encode().getBytes(StandardCharsets.UTF_8);\n+\n+        KafkaUserQuotas quotas2 = new KafkaUserQuotas();\n+        quotas2.setConsumerByteRate(2000);\n+        quotas2.setProducerByteRate(4000);\n+\n+        JsonObject updated = new JsonObject(new String(kuq.createOrUpdateUserJson(createdBytes, quotas2), StandardCharsets.UTF_8));\n         assertThat(updated.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(notNullValue()));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(notNullValue()));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"request_percentage\"), is(nullValue()));\n         assertThat(updated.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(\"2000\"));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(\"4000\"));\n \n-        quotas.setConsumerByteRate(3000);\n-        quotas.setProducerByteRate(4000);\n-        original = new JsonObject().put(\"version\", 1).put(\"config\", new JsonObject().put(\"consumer_byte_rate\", \"1000\").put(\"producer_byte_rate\", \"2000\"));\n-        updated = new JsonObject(new String(kuq.updateUserJson(original.encode().getBytes(StandardCharsets.UTF_8), quotas), StandardCharsets.UTF_8));\n+        KafkaUserQuotas quotas3 = new KafkaUserQuotas();\n+        quotas3.setConsumerByteRate(2000);\n+        quotas3.setRequestPercentage(40);\n+\n+        updated = new JsonObject(new String(kuq.createOrUpdateUserJson(createdBytes, quotas3), StandardCharsets.UTF_8));\n         assertThat(updated.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(notNullValue()));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(nullValue()));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"request_percentage\"), is(notNullValue()));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(\"2000\"));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"request_percentage\"), is(\"40\"));\n+\n+        KafkaUserQuotas quotas4 = new KafkaUserQuotas();\n+        quotas4.setProducerByteRate(4000);\n+        quotas4.setRequestPercentage(40);\n+\n+        updated = new JsonObject(new String(kuq.createOrUpdateUserJson(createdBytes, quotas4), StandardCharsets.UTF_8));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(nullValue()));\n         assertThat(updated.getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(notNullValue()));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"request_percentage\"), is(notNullValue()));\n         assertThat(updated.getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(\"4000\"));\n-        assertThat(updated.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(\"3000\"));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"request_percentage\"), is(\"40\"));\n \n-        original = new JsonObject().put(\"version\", 1).put(\"config\", new JsonObject());\n-        quotas.setProducerByteRate(null);\n-        quotas.setConsumerByteRate(1000);\n-        updated = new JsonObject(new String(kuq.updateUserJson(original.encode().getBytes(StandardCharsets.UTF_8), quotas), StandardCharsets.UTF_8));\n+        KafkaUserQuotas quotas5 = new KafkaUserQuotas();\n+        quotas5.setConsumerByteRate(20000);\n+        quotas5.setProducerByteRate(40000);\n+        quotas5.setRequestPercentage(50);\n+\n+        updated = new JsonObject(new String(kuq.createOrUpdateUserJson(createdBytes, quotas5), StandardCharsets.UTF_8));\n         assertThat(updated.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(notNullValue()));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(notNullValue()));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"request_percentage\"), is(notNullValue()));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(\"20000\"));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(\"40000\"));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"request_percentage\"), is(\"50\"));\n+    }\n+\n+    @Test\n+    public void testReconcileCreate(VertxTestContext testContext)  {\n+        String user = \"createTestUser\";\n+        KafkaUserQuotas quotas = new KafkaUserQuotas();\n+        quotas.setConsumerByteRate(2_000_000);\n+        quotas.setProducerByteRate(1_000_000);\n+        quotas.setRequestPercentage(50);\n+\n+        testContext.verify(() -> assertThat(kuq.exists(user), is(false)));\n+\n+        Checkpoint async = testContext.checkpoint();\n+        kuq.reconcile(user, quotas)\n+                .setHandler(testContext.succeeding(res -> {\n+                    testContext.verify(() -> assertThat(kuq.exists(user), is(true)));\n+                    testContext.verify(() -> assertThat(kuq.getQuotas(user).getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(\"2000000\")));\n+                    testContext.verify(() -> assertThat(kuq.getQuotas(user).getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(\"1000000\")));\n+                    testContext.verify(() -> assertThat(kuq.getQuotas(user).getJsonObject(\"config\").getString(\"request_percentage\"), is(\"50\")));\n+                    testContext.verify(() -> assertThat(kuq.isPathExist(\"/config/users/\" + user), is(true)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa84745d3a6a1fe95d47f62ab903eaaa8f666fdc"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM3NDE1OA==", "bodyText": "Better?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2658#discussion_r389374158", "createdAt": "2020-03-08T14:24:56Z", "author": {"login": "scholzj"}, "path": "user-operator/src/test/java/io/strimzi/operator/user/operator/KafkaUserQuotasIT.java", "diffHunk": "@@ -170,27 +176,166 @@ public void testDeletion()  {\n     }\n \n     @Test\n-    public void testUpdate()  {\n-        JsonObject original = new JsonObject().put(\"version\", 1).put(\"config\", new JsonObject().put(\"consumer_byte_rate\", \"1000\"));\n+    public void testUpdateAndFieldRemoval()  {\n         KafkaUserQuotas quotas = new KafkaUserQuotas();\n         quotas.setConsumerByteRate(2000);\n-        JsonObject updated = new JsonObject(new String(kuq.updateUserJson(original.encode().getBytes(StandardCharsets.UTF_8), quotas), StandardCharsets.UTF_8));\n+        quotas.setProducerByteRate(4000);\n+        quotas.setRequestPercentage(40);\n+\n+        JsonObject created = new JsonObject(new String(kuq.createUserJson(quotas), StandardCharsets.UTF_8));\n+        assertThat(created.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(notNullValue()));\n+        assertThat(created.getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(notNullValue()));\n+        assertThat(created.getJsonObject(\"config\").getString(\"request_percentage\"), is(notNullValue()));\n+        assertThat(created.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(\"2000\"));\n+        assertThat(created.getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(\"4000\"));\n+        assertThat(created.getJsonObject(\"config\").getString(\"request_percentage\"), is(\"40\"));\n+\n+        byte[] createdBytes = created.encode().getBytes(StandardCharsets.UTF_8);\n+\n+        KafkaUserQuotas quotas2 = new KafkaUserQuotas();\n+        quotas2.setConsumerByteRate(2000);\n+        quotas2.setProducerByteRate(4000);\n+\n+        JsonObject updated = new JsonObject(new String(kuq.createOrUpdateUserJson(createdBytes, quotas2), StandardCharsets.UTF_8));\n         assertThat(updated.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(notNullValue()));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(notNullValue()));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"request_percentage\"), is(nullValue()));\n         assertThat(updated.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(\"2000\"));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(\"4000\"));\n \n-        quotas.setConsumerByteRate(3000);\n-        quotas.setProducerByteRate(4000);\n-        original = new JsonObject().put(\"version\", 1).put(\"config\", new JsonObject().put(\"consumer_byte_rate\", \"1000\").put(\"producer_byte_rate\", \"2000\"));\n-        updated = new JsonObject(new String(kuq.updateUserJson(original.encode().getBytes(StandardCharsets.UTF_8), quotas), StandardCharsets.UTF_8));\n+        KafkaUserQuotas quotas3 = new KafkaUserQuotas();\n+        quotas3.setConsumerByteRate(2000);\n+        quotas3.setRequestPercentage(40);\n+\n+        updated = new JsonObject(new String(kuq.createOrUpdateUserJson(createdBytes, quotas3), StandardCharsets.UTF_8));\n         assertThat(updated.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(notNullValue()));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(nullValue()));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"request_percentage\"), is(notNullValue()));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(\"2000\"));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"request_percentage\"), is(\"40\"));\n+\n+        KafkaUserQuotas quotas4 = new KafkaUserQuotas();\n+        quotas4.setProducerByteRate(4000);\n+        quotas4.setRequestPercentage(40);\n+\n+        updated = new JsonObject(new String(kuq.createOrUpdateUserJson(createdBytes, quotas4), StandardCharsets.UTF_8));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(nullValue()));\n         assertThat(updated.getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(notNullValue()));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"request_percentage\"), is(notNullValue()));\n         assertThat(updated.getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(\"4000\"));\n-        assertThat(updated.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(\"3000\"));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"request_percentage\"), is(\"40\"));\n \n-        original = new JsonObject().put(\"version\", 1).put(\"config\", new JsonObject());\n-        quotas.setProducerByteRate(null);\n-        quotas.setConsumerByteRate(1000);\n-        updated = new JsonObject(new String(kuq.updateUserJson(original.encode().getBytes(StandardCharsets.UTF_8), quotas), StandardCharsets.UTF_8));\n+        KafkaUserQuotas quotas5 = new KafkaUserQuotas();\n+        quotas5.setConsumerByteRate(20000);\n+        quotas5.setProducerByteRate(40000);\n+        quotas5.setRequestPercentage(50);\n+\n+        updated = new JsonObject(new String(kuq.createOrUpdateUserJson(createdBytes, quotas5), StandardCharsets.UTF_8));\n         assertThat(updated.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(notNullValue()));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(notNullValue()));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"request_percentage\"), is(notNullValue()));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(\"20000\"));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(\"40000\"));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"request_percentage\"), is(\"50\"));\n+    }\n+\n+    @Test\n+    public void testReconcileCreate(VertxTestContext testContext)  {\n+        String user = \"createTestUser\";\n+        KafkaUserQuotas quotas = new KafkaUserQuotas();\n+        quotas.setConsumerByteRate(2_000_000);\n+        quotas.setProducerByteRate(1_000_000);\n+        quotas.setRequestPercentage(50);\n+\n+        testContext.verify(() -> assertThat(kuq.exists(user), is(false)));\n+\n+        Checkpoint async = testContext.checkpoint();\n+        kuq.reconcile(user, quotas)\n+                .setHandler(testContext.succeeding(res -> {\n+                    testContext.verify(() -> assertThat(kuq.exists(user), is(true)));\n+                    testContext.verify(() -> assertThat(kuq.getQuotas(user).getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(\"2000000\")));\n+                    testContext.verify(() -> assertThat(kuq.getQuotas(user).getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(\"1000000\")));\n+                    testContext.verify(() -> assertThat(kuq.getQuotas(user).getJsonObject(\"config\").getString(\"request_percentage\"), is(\"50\")));\n+                    testContext.verify(() -> assertThat(kuq.isPathExist(\"/config/users/\" + user), is(true)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM3MjgyMg=="}, "originalCommit": {"oid": "aa84745d3a6a1fe95d47f62ab903eaaa8f666fdc"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM3NDM5OQ==", "bodyText": "yep :-)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2658#discussion_r389374399", "createdAt": "2020-03-08T14:27:54Z", "author": {"login": "ppatierno"}, "path": "user-operator/src/test/java/io/strimzi/operator/user/operator/KafkaUserQuotasIT.java", "diffHunk": "@@ -170,27 +176,166 @@ public void testDeletion()  {\n     }\n \n     @Test\n-    public void testUpdate()  {\n-        JsonObject original = new JsonObject().put(\"version\", 1).put(\"config\", new JsonObject().put(\"consumer_byte_rate\", \"1000\"));\n+    public void testUpdateAndFieldRemoval()  {\n         KafkaUserQuotas quotas = new KafkaUserQuotas();\n         quotas.setConsumerByteRate(2000);\n-        JsonObject updated = new JsonObject(new String(kuq.updateUserJson(original.encode().getBytes(StandardCharsets.UTF_8), quotas), StandardCharsets.UTF_8));\n+        quotas.setProducerByteRate(4000);\n+        quotas.setRequestPercentage(40);\n+\n+        JsonObject created = new JsonObject(new String(kuq.createUserJson(quotas), StandardCharsets.UTF_8));\n+        assertThat(created.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(notNullValue()));\n+        assertThat(created.getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(notNullValue()));\n+        assertThat(created.getJsonObject(\"config\").getString(\"request_percentage\"), is(notNullValue()));\n+        assertThat(created.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(\"2000\"));\n+        assertThat(created.getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(\"4000\"));\n+        assertThat(created.getJsonObject(\"config\").getString(\"request_percentage\"), is(\"40\"));\n+\n+        byte[] createdBytes = created.encode().getBytes(StandardCharsets.UTF_8);\n+\n+        KafkaUserQuotas quotas2 = new KafkaUserQuotas();\n+        quotas2.setConsumerByteRate(2000);\n+        quotas2.setProducerByteRate(4000);\n+\n+        JsonObject updated = new JsonObject(new String(kuq.createOrUpdateUserJson(createdBytes, quotas2), StandardCharsets.UTF_8));\n         assertThat(updated.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(notNullValue()));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(notNullValue()));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"request_percentage\"), is(nullValue()));\n         assertThat(updated.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(\"2000\"));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(\"4000\"));\n \n-        quotas.setConsumerByteRate(3000);\n-        quotas.setProducerByteRate(4000);\n-        original = new JsonObject().put(\"version\", 1).put(\"config\", new JsonObject().put(\"consumer_byte_rate\", \"1000\").put(\"producer_byte_rate\", \"2000\"));\n-        updated = new JsonObject(new String(kuq.updateUserJson(original.encode().getBytes(StandardCharsets.UTF_8), quotas), StandardCharsets.UTF_8));\n+        KafkaUserQuotas quotas3 = new KafkaUserQuotas();\n+        quotas3.setConsumerByteRate(2000);\n+        quotas3.setRequestPercentage(40);\n+\n+        updated = new JsonObject(new String(kuq.createOrUpdateUserJson(createdBytes, quotas3), StandardCharsets.UTF_8));\n         assertThat(updated.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(notNullValue()));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(nullValue()));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"request_percentage\"), is(notNullValue()));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(\"2000\"));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"request_percentage\"), is(\"40\"));\n+\n+        KafkaUserQuotas quotas4 = new KafkaUserQuotas();\n+        quotas4.setProducerByteRate(4000);\n+        quotas4.setRequestPercentage(40);\n+\n+        updated = new JsonObject(new String(kuq.createOrUpdateUserJson(createdBytes, quotas4), StandardCharsets.UTF_8));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(nullValue()));\n         assertThat(updated.getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(notNullValue()));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"request_percentage\"), is(notNullValue()));\n         assertThat(updated.getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(\"4000\"));\n-        assertThat(updated.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(\"3000\"));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"request_percentage\"), is(\"40\"));\n \n-        original = new JsonObject().put(\"version\", 1).put(\"config\", new JsonObject());\n-        quotas.setProducerByteRate(null);\n-        quotas.setConsumerByteRate(1000);\n-        updated = new JsonObject(new String(kuq.updateUserJson(original.encode().getBytes(StandardCharsets.UTF_8), quotas), StandardCharsets.UTF_8));\n+        KafkaUserQuotas quotas5 = new KafkaUserQuotas();\n+        quotas5.setConsumerByteRate(20000);\n+        quotas5.setProducerByteRate(40000);\n+        quotas5.setRequestPercentage(50);\n+\n+        updated = new JsonObject(new String(kuq.createOrUpdateUserJson(createdBytes, quotas5), StandardCharsets.UTF_8));\n         assertThat(updated.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(notNullValue()));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(notNullValue()));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"request_percentage\"), is(notNullValue()));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(\"20000\"));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(\"40000\"));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"request_percentage\"), is(\"50\"));\n+    }\n+\n+    @Test\n+    public void testReconcileCreate(VertxTestContext testContext)  {\n+        String user = \"createTestUser\";\n+        KafkaUserQuotas quotas = new KafkaUserQuotas();\n+        quotas.setConsumerByteRate(2_000_000);\n+        quotas.setProducerByteRate(1_000_000);\n+        quotas.setRequestPercentage(50);\n+\n+        testContext.verify(() -> assertThat(kuq.exists(user), is(false)));\n+\n+        Checkpoint async = testContext.checkpoint();\n+        kuq.reconcile(user, quotas)\n+                .setHandler(testContext.succeeding(res -> {\n+                    testContext.verify(() -> assertThat(kuq.exists(user), is(true)));\n+                    testContext.verify(() -> assertThat(kuq.getQuotas(user).getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(\"2000000\")));\n+                    testContext.verify(() -> assertThat(kuq.getQuotas(user).getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(\"1000000\")));\n+                    testContext.verify(() -> assertThat(kuq.getQuotas(user).getJsonObject(\"config\").getString(\"request_percentage\"), is(\"50\")));\n+                    testContext.verify(() -> assertThat(kuq.isPathExist(\"/config/users/\" + user), is(true)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM3MjgyMg=="}, "originalCommit": {"oid": "aa84745d3a6a1fe95d47f62ab903eaaa8f666fdc"}, "originalPosition": 130}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 283, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}