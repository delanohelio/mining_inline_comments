{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMjQ5NDMx", "number": 3453, "title": "Add generate secret owner reference flag", "bodyText": "Type of change\n\nEnhancement / new feature\n\nDescription\nAdded a flag to not include ownerReference at Cluster and User Certificate Authorities keys and certificates secrets. This allows to create a CA with the Strimzi Operator and make it persistent, even if the Kafka CRD is deleted. If the Cluster and Client GenerateCertificateAuthority flags are set to false after creating the CA with the Operator, then the certificates will be valid it the Kafka is recreated.\nChecklist\nPlease go through this checklist and make sure all applicable tasks have been done\n\n Write tests\n Make sure all tests pass\n Update documentation\n Check RBAC rights for Kubernetes / OpenShift roles\n Try your changes from Pod inside your Kubernetes and OpenShift cluster, not just locally\n Reference relevant issue(s) and close them after merging\n Update CHANGELOG.md\n Supply screenshots for visual changes, such as Grafana dashboards", "createdAt": "2020-08-05T09:03:06Z", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3453", "merged": true, "mergeCommit": {"oid": "31e36497dbb0c3d25df2996470df325f89c97a2f"}, "closed": true, "closedAt": "2020-11-08T19:06:16Z", "author": {"login": "dgdelahera"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc73g73ABqjM2MjM3NTAzMzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdagqcHgH2gAyNDYzMjQ5NDMxOjQ1NzlkNjIwN2Q0MzE5MGU3NTg2NDE3MjhhZTg3ZTEwNDZkOWRkMzA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b825fb6cb49016256128963d5e3371e3c85836b1", "author": {"user": {"login": "dgdelahera", "name": "Daniel Gonzalez"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b825fb6cb49016256128963d5e3371e3c85836b1", "committedDate": "2020-08-05T09:06:39Z", "message": "Add sign-off\n\nSigned-off-by: Daniel Gonzalez <dgdelahera@gmail.com>"}, "afterCommit": {"oid": "a6298a12770fc9661f54295b251271ad6fd07c5a", "author": {"user": {"login": "dgdelahera", "name": "Daniel Gonzalez"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a6298a12770fc9661f54295b251271ad6fd07c5a", "committedDate": "2020-08-05T09:08:09Z", "message": "Add sign-off\n\nSigned-off-by: Daniel Gonzalez <dgdelahera@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b862aa72193f5caeba255b472291ae0bbbd8561", "author": {"user": {"login": "dgdelahera", "name": "Daniel Gonzalez"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/5b862aa72193f5caeba255b472291ae0bbbd8561", "committedDate": "2020-08-05T09:08:51Z", "message": "Add generate secret owner reference flag\n\nSigned-off-by: Daniel Gonzalez <dgdelahera@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a6298a12770fc9661f54295b251271ad6fd07c5a", "author": {"user": {"login": "dgdelahera", "name": "Daniel Gonzalez"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a6298a12770fc9661f54295b251271ad6fd07c5a", "committedDate": "2020-08-05T09:08:09Z", "message": "Add sign-off\n\nSigned-off-by: Daniel Gonzalez <dgdelahera@gmail.com>"}, "afterCommit": {"oid": "5b862aa72193f5caeba255b472291ae0bbbd8561", "author": {"user": {"login": "dgdelahera", "name": "Daniel Gonzalez"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/5b862aa72193f5caeba255b472291ae0bbbd8561", "committedDate": "2020-08-05T09:08:51Z", "message": "Add generate secret owner reference flag\n\nSigned-off-by: Daniel Gonzalez <dgdelahera@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNTI4MDEz", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3453#pullrequestreview-461528013", "createdAt": "2020-08-05T10:17:02Z", "commit": {"oid": "5b862aa72193f5caeba255b472291ae0bbbd8561"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNTkyMTAz", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3453#pullrequestreview-461592103", "createdAt": "2020-08-05T11:53:54Z", "commit": {"oid": "5b862aa72193f5caeba255b472291ae0bbbd8561"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMTo1Mzo1NFrOG8GWpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMTo1Mzo1NFrOG8GWpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY3MTg0NA==", "bodyText": "should we explain what's the consequence of setting it to false? so explaining that deleting the Kafka cluster won't delete the certificate secrets?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3453#discussion_r465671844", "createdAt": "2020-08-05T11:53:54Z", "author": {"login": "ppatierno"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/CertificateAuthority.java", "diffHunk": "@@ -58,6 +59,17 @@ public void setGenerateCertificateAuthority(boolean generateCertificateAuthority\n         this.generateCertificateAuthority = generateCertificateAuthority;\n     }\n \n+    @Description(\"If true then the Certificate Authority certificates secrets owner reference is set to the Kafka object. \" +\n+    \"Otherwise no owner reference is set \" +\n+    \"Default is true.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b862aa72193f5caeba255b472291ae0bbbd8561"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcf4525de0d9207898d7bada1d335a532780aad5", "author": {"user": {"login": "dgdelahera", "name": "Daniel Gonzalez"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/fcf4525de0d9207898d7bada1d335a532780aad5", "committedDate": "2020-08-05T12:43:39Z", "message": "Improve description of new field and add changes to kafka crd at cluster-operator\n\nSigned-off-by: Daniel Gonzalez <dgdelahera@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "793b727a05ee4a53e03ef89f293758e399b0adce", "author": {"user": {"login": "dgdelahera", "name": "Daniel Gonzalez"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/793b727a05ee4a53e03ef89f293758e399b0adce", "committedDate": "2020-08-05T12:41:45Z", "message": "mend\n\nSigned-off-by: Daniel Gonzalez <dgdelahera@gmail.com>"}, "afterCommit": {"oid": "fcf4525de0d9207898d7bada1d335a532780aad5", "author": {"user": {"login": "dgdelahera", "name": "Daniel Gonzalez"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/fcf4525de0d9207898d7bada1d335a532780aad5", "committedDate": "2020-08-05T12:43:39Z", "message": "Improve description of new field and add changes to kafka crd at cluster-operator\n\nSigned-off-by: Daniel Gonzalez <dgdelahera@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5bd9a525f6ac7c24b6b6e193617eeebdd760792", "author": {"user": {"login": "dgdelahera", "name": "Daniel Gonzalez"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d5bd9a525f6ac7c24b6b6e193617eeebdd760792", "committedDate": "2020-10-02T07:32:43Z", "message": "Add KafkaAssemblyOperatorTest\n\nSigned-off-by: Daniel Gonzalez <dgdelahera@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4915f564dc127c139fd15973e02a0370916ad07a", "author": {"user": {"login": "dgdelahera", "name": "Daniel Gonzalez"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/4915f564dc127c139fd15973e02a0370916ad07a", "committedDate": "2020-10-02T07:34:47Z", "message": "Merge branch 'master' into add-or-flag"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "126a9eb4d313bd4102e8c4e9c5f841b60abd4b22", "author": {"user": {"login": "dgdelahera", "name": "Daniel Gonzalez"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/126a9eb4d313bd4102e8c4e9c5f841b60abd4b22", "committedDate": "2020-10-02T07:36:21Z", "message": "Merge branch 'master' into add-or-flag"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNjU4NzE3", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3453#pullrequestreview-501658717", "createdAt": "2020-10-04T20:54:48Z", "commit": {"oid": "126a9eb4d313bd4102e8c4e9c5f841b60abd4b22"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQyMDo1NDo0OFrOHcKHTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQyMToxMDowNFrOHcKMWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI4Nzg4NA==", "bodyText": "I think this needs to be indented with 8 spaces => that is why the CI failed.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3453#discussion_r499287884", "createdAt": "2020-10-04T20:54:48Z", "author": {"login": "scholzj"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/CertificateAuthority.java", "diffHunk": "@@ -58,6 +59,17 @@ public void setGenerateCertificateAuthority(boolean generateCertificateAuthority\n         this.generateCertificateAuthority = generateCertificateAuthority;\n     }\n \n+    @Description(\"If true then the Certificate Authority certificates secrets owner reference is set to the Kafka object. \" +\n+    \"Otherwise no owner reference is set so deleting the Kafka object won't delete the secrets.\" +\n+    \"Default is true.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "126a9eb4d313bd4102e8c4e9c5f841b60abd4b22"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI4ODA0Mg==", "bodyText": "The default is true, so I think this should be true?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3453#discussion_r499288042", "createdAt": "2020-10-04T20:56:28Z", "author": {"login": "scholzj"}, "path": "api/src/test/resources/io/strimzi/api/kafka/model/Kafka.out.yaml", "diffHunk": "@@ -147,10 +147,12 @@ spec:\n     topicMetadataMaxAttempts: 6\n   clusterCa:\n     generateCertificateAuthority: false\n+    generateSecretOwnerReference: false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "126a9eb4d313bd4102e8c4e9c5f841b60abd4b22"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI4ODA0Ng==", "bodyText": "The default is true, so I think this should be true?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3453#discussion_r499288046", "createdAt": "2020-10-04T20:56:32Z", "author": {"login": "scholzj"}, "path": "api/src/test/resources/io/strimzi/api/kafka/model/Kafka.out.yaml", "diffHunk": "@@ -147,10 +147,12 @@ spec:\n     topicMetadataMaxAttempts: 6\n   clusterCa:\n     generateCertificateAuthority: false\n+    generateSecretOwnerReference: false\n     validityDays: 395\n     renewalDays: 32\n   clientsCa:\n     generateCertificateAuthority: false\n+    generateSecretOwnerReference: false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "126a9eb4d313bd4102e8c4e9c5f841b60abd4b22"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI4ODk0Mw==", "bodyText": "Should this be clusterCaConfig instead of clusterCa?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3453#discussion_r499288943", "createdAt": "2020-10-04T21:07:06Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -603,7 +603,8 @@ ReconciliationState createReconciliationState(Reconciliation reconciliation, Kaf\n                                 clusterCaConfig != null ? clusterCaConfig.getCertificateExpirationPolicy() : null);\n                         clusterCa.createRenewOrReplace(\n                                 reconciliation.namespace(), reconciliation.name(), caLabels.toMap(),\n-                                ownerRef, isMaintenanceTimeWindowsSatisfied(dateSupplier));\n+                                clusterCa.isGenerateSecretOwnerReference() ? ownerRef : null, ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "126a9eb4d313bd4102e8c4e9c5f841b60abd4b22"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI4ODk1OA==", "bodyText": "Should this be clientsCaConfig instead of clientsCa ?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3453#discussion_r499288958", "createdAt": "2020-10-04T21:07:27Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -620,7 +621,8 @@ ReconciliationState createReconciliationState(Reconciliation reconciliation, Kaf\n                                 clientsCaConfig == null || clientsCaConfig.isGenerateCertificateAuthority(),\n                                 clientsCaConfig != null ? clientsCaConfig.getCertificateExpirationPolicy() : null);\n                         clientsCa.createRenewOrReplace(reconciliation.namespace(), reconciliation.name(),\n-                                caLabels.toMap(), ownerRef, isMaintenanceTimeWindowsSatisfied(dateSupplier));\n+                                caLabels.toMap(), clientsCa.isGenerateSecretOwnerReference() ? ownerRef : null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "126a9eb4d313bd4102e8c4e9c5f841b60abd4b22"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI4OTE3Ng==", "bodyText": "I do not think the test here really tests what it should. I do not think it triggered the code you changed in createKafkaClusterInitialSecrets. I think you would need to capture the secrets and check it on them. You also need to make sure that in different runs, the values are configured differently to test both situations which I don't think it happening here.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3453#discussion_r499289176", "createdAt": "2020-10-04T21:10:04Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorTest.java", "diffHunk": "@@ -592,6 +592,19 @@ private void createCluster(VertxTestContext context, Kafka kafka, List<Secret> s\n             expectedSecrets.add(EntityOperator.secretName(kafkaName));\n         }\n \n+        List<Secrets> caSecrets = getInitialCertificates(kafkaName);\n+        if (getKafkaAssembly(kafkaName).getSpec().getClusterCa().isGenerateSecretOwnerReference()) {\n+            assertThat(caSecrets.get(0).getMetadata().getOwnerReferences().size(), is(1));\n+        } else {\n+            assertThat(caSecrets.get(0).getMetadata().getOwnerReferences().size(), is(0));\n+        }\n+\n+        if (getKafkaAssembly(kafkaName).getSpec().getClientsCa().isGenerateSecretOwnerReference()) {\n+            assertThat(caSecrets.get(0).getMetadata().getOwnerReferences().size(), is(1));\n+        } else {\n+            assertThat(caSecrets.get(0).getMetadata().getOwnerReferences().size(), is(0));\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "126a9eb4d313bd4102e8c4e9c5f841b60abd4b22"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNjYwODY2", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3453#pullrequestreview-501660866", "createdAt": "2020-10-04T21:26:51Z", "commit": {"oid": "126a9eb4d313bd4102e8c4e9c5f841b60abd4b22"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQyMToyNjo1MVrOHcKRsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQyMToyNjo1MVrOHcKRsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5MDU0Nw==", "bodyText": "Could you add space at the end of the sentence after the .?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3453#discussion_r499290547", "createdAt": "2020-10-04T21:26:51Z", "author": {"login": "scholzj"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/CertificateAuthority.java", "diffHunk": "@@ -58,6 +59,17 @@ public void setGenerateCertificateAuthority(boolean generateCertificateAuthority\n         this.generateCertificateAuthority = generateCertificateAuthority;\n     }\n \n+    @Description(\"If true then the Certificate Authority certificates secrets owner reference is set to the Kafka object. \" +\n+    \"Otherwise no owner reference is set so deleting the Kafka object won't delete the secrets.\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "126a9eb4d313bd4102e8c4e9c5f841b60abd4b22"}, "originalPosition": 22}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "975400473b615cb92f2d2ff07d08f5e1a24c4808", "author": {"user": {"login": "dgdelahera", "name": "Daniel Gonzalez"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/975400473b615cb92f2d2ff07d08f5e1a24c4808", "committedDate": "2020-10-27T07:49:48Z", "message": "Merge branch 'master' into add-or-flag\n\nSigned-off-by: Daniel Gonzalez <dgdelahera@gmail.com>"}, "afterCommit": {"oid": "065451f4597bb8e1ff5639a77b652f5c638580e2", "author": {"user": {"login": "dgdelahera", "name": "Daniel Gonzalez"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/065451f4597bb8e1ff5639a77b652f5c638580e2", "committedDate": "2020-10-27T07:52:25Z", "message": "Merge branch 'master' into add-or-flag\n\nSigned-off-by: Daniel Gonzalez <dgdelahera@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "065451f4597bb8e1ff5639a77b652f5c638580e2", "author": {"user": {"login": "dgdelahera", "name": "Daniel Gonzalez"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/065451f4597bb8e1ff5639a77b652f5c638580e2", "committedDate": "2020-10-27T07:52:25Z", "message": "Merge branch 'master' into add-or-flag\n\nSigned-off-by: Daniel Gonzalez <dgdelahera@gmail.com>"}, "afterCommit": {"oid": "ef5014b6fd3c68d2025957336f5c5a0814a0fec6", "author": {"user": {"login": "dgdelahera", "name": "Daniel Gonzalez"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ef5014b6fd3c68d2025957336f5c5a0814a0fec6", "committedDate": "2020-10-27T07:53:03Z", "message": "Merge branch 'master' into add-or-flag\n\nSigned-off-by: Daniel Gonzalez <dgdelahera@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0fa6f4d7019b9b0373b5a102a4ec9889de4daed", "author": {"user": {"login": "dgdelahera", "name": "Daniel Gonzalez"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c0fa6f4d7019b9b0373b5a102a4ec9889de4daed", "committedDate": "2020-10-27T08:04:04Z", "message": "Add test and changes based on pr comments\n\nSigned-off-by: Daniel Gonzalez <dgdelahera@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ef5014b6fd3c68d2025957336f5c5a0814a0fec6", "author": {"user": {"login": "dgdelahera", "name": "Daniel Gonzalez"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ef5014b6fd3c68d2025957336f5c5a0814a0fec6", "committedDate": "2020-10-27T07:53:03Z", "message": "Merge branch 'master' into add-or-flag\n\nSigned-off-by: Daniel Gonzalez <dgdelahera@gmail.com>"}, "afterCommit": {"oid": "c0fa6f4d7019b9b0373b5a102a4ec9889de4daed", "author": {"user": {"login": "dgdelahera", "name": "Daniel Gonzalez"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c0fa6f4d7019b9b0373b5a102a4ec9889de4daed", "committedDate": "2020-10-27T08:04:04Z", "message": "Add test and changes based on pr comments\n\nSigned-off-by: Daniel Gonzalez <dgdelahera@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5eef42a2152a89e5af3ce94503433915850598bf", "author": {"user": {"login": "dgdelahera", "name": "Daniel Gonzalez"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/5eef42a2152a89e5af3ce94503433915850598bf", "committedDate": "2020-10-27T08:06:35Z", "message": "Merge branch 'master' into add-or-flag\n\nSigned-off-by: Daniel Gonzalez <dgdelahera@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMjY3NzE0", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3453#pullrequestreview-521267714", "createdAt": "2020-11-01T22:23:47Z", "commit": {"oid": "5eef42a2152a89e5af3ce94503433915850598bf"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMjoyMzo0OFrOHrynvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMjoyODoyNFrOHryp6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MDE5MQ==", "bodyText": "I think this is missing the @Test annotation?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3453#discussion_r515680191", "createdAt": "2020-11-01T22:23:48Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorNonParametrizedTest.java", "diffHunk": "@@ -148,4 +148,80 @@ public void testCustomLabelsAndAnnotations(VertxTestContext context) {\n                     async.flag();\n                 })));\n     }\n-}\n\\ No newline at end of file\n+\n+    public void testCASecretsWithOwnerReference(VertxTestContext context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eef42a2152a89e5af3ce94503433915850598bf"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MDU0NQ==", "bodyText": "I think this is a almost good test for the positive case. You should also add a case for the other case - that the owner reference is disabled - and check that it is indeed null. It should be easy to build on that from the", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3453#discussion_r515680545", "createdAt": "2020-11-01T22:26:33Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorNonParametrizedTest.java", "diffHunk": "@@ -148,4 +148,80 @@ public void testCustomLabelsAndAnnotations(VertxTestContext context) {\n                     async.flag();\n                 })));\n     }\n-}\n\\ No newline at end of file\n+\n+    public void testCASecretsWithOwnerReference(VertxTestContext context) {\n+        OwnerReference ownerReference = new OwnerReferenceBuilder()\n+                    .withApiVersion(\"kafka.strimzi.io/v1beta1\")\n+                    .withKind(\"Kafka\")\n+                    .withName(NAME)\n+                    .withUid(\"random-1234\")\n+                    .withBlockOwnerDeletion(false)\n+                    .withController(false)\n+                    .build();\n+\n+\n+        Kafka kafka = new KafkaBuilder()\n+                .withNewMetadata()\n+                    .withName(NAME)\n+                    .withNamespace(NAMESPACE)\n+                .endMetadata()\n+                .withNewSpec()\n+                    .withNewKafka()\n+                        .withReplicas(3)\n+                        .withNewEphemeralStorage()\n+                        .endEphemeralStorage()\n+                        .withNewTemplate()\n+                            .withNewClusterCaCert()\n+                                .withNewMetadata()\n+                                    .withOwnerReferences(ownerReference)\n+                                .endMetadata()\n+                            .endClusterCaCert()\n+                        .endTemplate()\n+                    .endKafka()\n+                    .withNewZookeeper()\n+                        .withReplicas(3)\n+                        .withNewEphemeralStorage()\n+                        .endEphemeralStorage()\n+                    .endZookeeper()\n+                .endSpec()\n+                .build();\n+        \n+        ResourceOperatorSupplier supplier = ResourceUtils.supplierWithMocks(false);\n+        SecretOperator secretOps = supplier.secretOperations;\n+\n+        ArgumentCaptor<Secret> clusterCaCert = ArgumentCaptor.forClass(Secret.class);\n+        ArgumentCaptor<Secret> clusterCaKey = ArgumentCaptor.forClass(Secret.class);\n+        ArgumentCaptor<Secret> clientsCaCert = ArgumentCaptor.forClass(Secret.class);\n+        ArgumentCaptor<Secret> clientsCaKey = ArgumentCaptor.forClass(Secret.class);\n+        when(secretOps.reconcile(eq(NAMESPACE), eq(AbstractModel.clusterCaCertSecretName(NAME)), clusterCaCert.capture())).thenAnswer(i -> Future.succeededFuture(ReconcileResult.created(i.getArgument(0))));\n+        when(secretOps.reconcile(eq(NAMESPACE), eq(AbstractModel.clusterCaKeySecretName(NAME)), clusterCaKey.capture())).thenAnswer(i -> Future.succeededFuture(ReconcileResult.created(i.getArgument(0))));\n+        when(secretOps.reconcile(eq(NAMESPACE), eq(KafkaCluster.clientsCaCertSecretName(NAME)), clientsCaCert.capture())).thenAnswer(i -> Future.succeededFuture(ReconcileResult.created(i.getArgument(0))));\n+        when(secretOps.reconcile(eq(NAMESPACE), eq(KafkaCluster.clientsCaKeySecretName(NAME)), clientsCaKey.capture())).thenAnswer(i -> Future.succeededFuture(ReconcileResult.created(i.getArgument(0))));\n+\n+        KafkaAssemblyOperator op = new KafkaAssemblyOperator(vertx, new PlatformFeaturesAvailability(false, KubernetesVersion.V1_9), certManager, passwordGenerator,\n+                supplier, ResourceUtils.dummyClusterOperatorConfig(1L));\n+        Reconciliation reconciliation = new Reconciliation(\"test-trigger\", Kafka.RESOURCE_KIND, NAMESPACE, NAME);\n+\n+        Checkpoint async = context.checkpoint();\n+        \n+        op.new ReconciliationState(reconciliation, kafka).reconcileCas(() -> new Date())\n+                .onComplete(context.succeeding(c -> context.verify(() -> {\n+                    assertThat(clusterCaCert.getAllValues(), hasSize(1));\n+                    assertThat(clusterCaKey.getAllValues(), hasSize(1));\n+                    assertThat(clientsCaCert.getAllValues(), hasSize(1));\n+                    assertThat(clientsCaKey.getAllValues(), hasSize(1));\n+\n+                    Secret clusterCaCertSecret = clusterCaCert.getValue();\n+                    Secret clusterCaKeySecret = clusterCaKey.getValue();\n+                    Secret clientsCaCertSecret = clientsCaCert.getValue();\n+                    Secret clientsCaKeySecret = clientsCaKey.getValue();\n+\n+                    assertThat(clusterCaCertSecret.getMetadata().getOwnerReferences(), hasSize(1));\n+                    assertThat(clusterCaCertSecret.getMetadata().getOwnerReferences().get(0), is(ownerReference));\n+\n+                    assertThat(clientsCaCertSecret.getMetadata().getOwnerReferences(), hasSize(0));\n+\n+                    async.flag();\n+                })));\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eef42a2152a89e5af3ce94503433915850598bf"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MDcwMw==", "bodyText": "Can you check the owner reference for all of the secrets? Although your PR affects only the cert secrets and not for the key secrets, it makes sense to test it to make sure they are not affected.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3453#discussion_r515680703", "createdAt": "2020-11-01T22:27:57Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorNonParametrizedTest.java", "diffHunk": "@@ -148,4 +148,80 @@ public void testCustomLabelsAndAnnotations(VertxTestContext context) {\n                     async.flag();\n                 })));\n     }\n-}\n\\ No newline at end of file\n+\n+    public void testCASecretsWithOwnerReference(VertxTestContext context) {\n+        OwnerReference ownerReference = new OwnerReferenceBuilder()\n+                    .withApiVersion(\"kafka.strimzi.io/v1beta1\")\n+                    .withKind(\"Kafka\")\n+                    .withName(NAME)\n+                    .withUid(\"random-1234\")\n+                    .withBlockOwnerDeletion(false)\n+                    .withController(false)\n+                    .build();\n+\n+\n+        Kafka kafka = new KafkaBuilder()\n+                .withNewMetadata()\n+                    .withName(NAME)\n+                    .withNamespace(NAMESPACE)\n+                .endMetadata()\n+                .withNewSpec()\n+                    .withNewKafka()\n+                        .withReplicas(3)\n+                        .withNewEphemeralStorage()\n+                        .endEphemeralStorage()\n+                        .withNewTemplate()\n+                            .withNewClusterCaCert()\n+                                .withNewMetadata()\n+                                    .withOwnerReferences(ownerReference)\n+                                .endMetadata()\n+                            .endClusterCaCert()\n+                        .endTemplate()\n+                    .endKafka()\n+                    .withNewZookeeper()\n+                        .withReplicas(3)\n+                        .withNewEphemeralStorage()\n+                        .endEphemeralStorage()\n+                    .endZookeeper()\n+                .endSpec()\n+                .build();\n+        \n+        ResourceOperatorSupplier supplier = ResourceUtils.supplierWithMocks(false);\n+        SecretOperator secretOps = supplier.secretOperations;\n+\n+        ArgumentCaptor<Secret> clusterCaCert = ArgumentCaptor.forClass(Secret.class);\n+        ArgumentCaptor<Secret> clusterCaKey = ArgumentCaptor.forClass(Secret.class);\n+        ArgumentCaptor<Secret> clientsCaCert = ArgumentCaptor.forClass(Secret.class);\n+        ArgumentCaptor<Secret> clientsCaKey = ArgumentCaptor.forClass(Secret.class);\n+        when(secretOps.reconcile(eq(NAMESPACE), eq(AbstractModel.clusterCaCertSecretName(NAME)), clusterCaCert.capture())).thenAnswer(i -> Future.succeededFuture(ReconcileResult.created(i.getArgument(0))));\n+        when(secretOps.reconcile(eq(NAMESPACE), eq(AbstractModel.clusterCaKeySecretName(NAME)), clusterCaKey.capture())).thenAnswer(i -> Future.succeededFuture(ReconcileResult.created(i.getArgument(0))));\n+        when(secretOps.reconcile(eq(NAMESPACE), eq(KafkaCluster.clientsCaCertSecretName(NAME)), clientsCaCert.capture())).thenAnswer(i -> Future.succeededFuture(ReconcileResult.created(i.getArgument(0))));\n+        when(secretOps.reconcile(eq(NAMESPACE), eq(KafkaCluster.clientsCaKeySecretName(NAME)), clientsCaKey.capture())).thenAnswer(i -> Future.succeededFuture(ReconcileResult.created(i.getArgument(0))));\n+\n+        KafkaAssemblyOperator op = new KafkaAssemblyOperator(vertx, new PlatformFeaturesAvailability(false, KubernetesVersion.V1_9), certManager, passwordGenerator,\n+                supplier, ResourceUtils.dummyClusterOperatorConfig(1L));\n+        Reconciliation reconciliation = new Reconciliation(\"test-trigger\", Kafka.RESOURCE_KIND, NAMESPACE, NAME);\n+\n+        Checkpoint async = context.checkpoint();\n+        \n+        op.new ReconciliationState(reconciliation, kafka).reconcileCas(() -> new Date())\n+                .onComplete(context.succeeding(c -> context.verify(() -> {\n+                    assertThat(clusterCaCert.getAllValues(), hasSize(1));\n+                    assertThat(clusterCaKey.getAllValues(), hasSize(1));\n+                    assertThat(clientsCaCert.getAllValues(), hasSize(1));\n+                    assertThat(clientsCaKey.getAllValues(), hasSize(1));\n+\n+                    Secret clusterCaCertSecret = clusterCaCert.getValue();\n+                    Secret clusterCaKeySecret = clusterCaKey.getValue();\n+                    Secret clientsCaCertSecret = clientsCaCert.getValue();\n+                    Secret clientsCaKeySecret = clientsCaKey.getValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eef42a2152a89e5af3ce94503433915850598bf"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MDc0NA==", "bodyText": "Why do you expect it to be 0 here?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3453#discussion_r515680744", "createdAt": "2020-11-01T22:28:24Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorNonParametrizedTest.java", "diffHunk": "@@ -148,4 +148,80 @@ public void testCustomLabelsAndAnnotations(VertxTestContext context) {\n                     async.flag();\n                 })));\n     }\n-}\n\\ No newline at end of file\n+\n+    public void testCASecretsWithOwnerReference(VertxTestContext context) {\n+        OwnerReference ownerReference = new OwnerReferenceBuilder()\n+                    .withApiVersion(\"kafka.strimzi.io/v1beta1\")\n+                    .withKind(\"Kafka\")\n+                    .withName(NAME)\n+                    .withUid(\"random-1234\")\n+                    .withBlockOwnerDeletion(false)\n+                    .withController(false)\n+                    .build();\n+\n+\n+        Kafka kafka = new KafkaBuilder()\n+                .withNewMetadata()\n+                    .withName(NAME)\n+                    .withNamespace(NAMESPACE)\n+                .endMetadata()\n+                .withNewSpec()\n+                    .withNewKafka()\n+                        .withReplicas(3)\n+                        .withNewEphemeralStorage()\n+                        .endEphemeralStorage()\n+                        .withNewTemplate()\n+                            .withNewClusterCaCert()\n+                                .withNewMetadata()\n+                                    .withOwnerReferences(ownerReference)\n+                                .endMetadata()\n+                            .endClusterCaCert()\n+                        .endTemplate()\n+                    .endKafka()\n+                    .withNewZookeeper()\n+                        .withReplicas(3)\n+                        .withNewEphemeralStorage()\n+                        .endEphemeralStorage()\n+                    .endZookeeper()\n+                .endSpec()\n+                .build();\n+        \n+        ResourceOperatorSupplier supplier = ResourceUtils.supplierWithMocks(false);\n+        SecretOperator secretOps = supplier.secretOperations;\n+\n+        ArgumentCaptor<Secret> clusterCaCert = ArgumentCaptor.forClass(Secret.class);\n+        ArgumentCaptor<Secret> clusterCaKey = ArgumentCaptor.forClass(Secret.class);\n+        ArgumentCaptor<Secret> clientsCaCert = ArgumentCaptor.forClass(Secret.class);\n+        ArgumentCaptor<Secret> clientsCaKey = ArgumentCaptor.forClass(Secret.class);\n+        when(secretOps.reconcile(eq(NAMESPACE), eq(AbstractModel.clusterCaCertSecretName(NAME)), clusterCaCert.capture())).thenAnswer(i -> Future.succeededFuture(ReconcileResult.created(i.getArgument(0))));\n+        when(secretOps.reconcile(eq(NAMESPACE), eq(AbstractModel.clusterCaKeySecretName(NAME)), clusterCaKey.capture())).thenAnswer(i -> Future.succeededFuture(ReconcileResult.created(i.getArgument(0))));\n+        when(secretOps.reconcile(eq(NAMESPACE), eq(KafkaCluster.clientsCaCertSecretName(NAME)), clientsCaCert.capture())).thenAnswer(i -> Future.succeededFuture(ReconcileResult.created(i.getArgument(0))));\n+        when(secretOps.reconcile(eq(NAMESPACE), eq(KafkaCluster.clientsCaKeySecretName(NAME)), clientsCaKey.capture())).thenAnswer(i -> Future.succeededFuture(ReconcileResult.created(i.getArgument(0))));\n+\n+        KafkaAssemblyOperator op = new KafkaAssemblyOperator(vertx, new PlatformFeaturesAvailability(false, KubernetesVersion.V1_9), certManager, passwordGenerator,\n+                supplier, ResourceUtils.dummyClusterOperatorConfig(1L));\n+        Reconciliation reconciliation = new Reconciliation(\"test-trigger\", Kafka.RESOURCE_KIND, NAMESPACE, NAME);\n+\n+        Checkpoint async = context.checkpoint();\n+        \n+        op.new ReconciliationState(reconciliation, kafka).reconcileCas(() -> new Date())\n+                .onComplete(context.succeeding(c -> context.verify(() -> {\n+                    assertThat(clusterCaCert.getAllValues(), hasSize(1));\n+                    assertThat(clusterCaKey.getAllValues(), hasSize(1));\n+                    assertThat(clientsCaCert.getAllValues(), hasSize(1));\n+                    assertThat(clientsCaKey.getAllValues(), hasSize(1));\n+\n+                    Secret clusterCaCertSecret = clusterCaCert.getValue();\n+                    Secret clusterCaKeySecret = clusterCaKey.getValue();\n+                    Secret clientsCaCertSecret = clientsCaCert.getValue();\n+                    Secret clientsCaKeySecret = clientsCaKey.getValue();\n+\n+                    assertThat(clusterCaCertSecret.getMetadata().getOwnerReferences(), hasSize(1));\n+                    assertThat(clusterCaCertSecret.getMetadata().getOwnerReferences().get(0), is(ownerReference));\n+\n+                    assertThat(clientsCaCertSecret.getMetadata().getOwnerReferences(), hasSize(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eef42a2152a89e5af3ce94503433915850598bf"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyODE3OTEx", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3453#pullrequestreview-522817911", "createdAt": "2020-11-03T19:37:07Z", "commit": {"oid": "5eef42a2152a89e5af3ce94503433915850598bf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTozNzowN1rOHs9sig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTozNzowN1rOHs9sig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkxMDIxOA==", "bodyText": "BTW: I didn't noticed this before, but this should IMHO not even compile. There is no owner reference support in the template.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3453#discussion_r516910218", "createdAt": "2020-11-03T19:37:07Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorNonParametrizedTest.java", "diffHunk": "@@ -148,4 +148,80 @@ public void testCustomLabelsAndAnnotations(VertxTestContext context) {\n                     async.flag();\n                 })));\n     }\n-}\n\\ No newline at end of file\n+\n+    public void testCASecretsWithOwnerReference(VertxTestContext context) {\n+        OwnerReference ownerReference = new OwnerReferenceBuilder()\n+                    .withApiVersion(\"kafka.strimzi.io/v1beta1\")\n+                    .withKind(\"Kafka\")\n+                    .withName(NAME)\n+                    .withUid(\"random-1234\")\n+                    .withBlockOwnerDeletion(false)\n+                    .withController(false)\n+                    .build();\n+\n+\n+        Kafka kafka = new KafkaBuilder()\n+                .withNewMetadata()\n+                    .withName(NAME)\n+                    .withNamespace(NAMESPACE)\n+                .endMetadata()\n+                .withNewSpec()\n+                    .withNewKafka()\n+                        .withReplicas(3)\n+                        .withNewEphemeralStorage()\n+                        .endEphemeralStorage()\n+                        .withNewTemplate()\n+                            .withNewClusterCaCert()\n+                                .withNewMetadata()\n+                                    .withOwnerReferences(ownerReference)\n+                                .endMetadata()\n+                            .endClusterCaCert()\n+                        .endTemplate()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eef42a2152a89e5af3ce94503433915850598bf"}, "originalPosition": 34}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6dc87863073bae7a665c58367e83884e9764c210", "author": {"user": {"login": "dgdelahera", "name": "Daniel Gonzalez"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/6dc87863073bae7a665c58367e83884e9764c210", "committedDate": "2020-11-07T11:56:02Z", "message": "Fix bugs and improve unit test\n\nSigned-off-by: Daniel Gonzalez <dgdelahera@gmail.com>"}, "afterCommit": {"oid": "c37a7c7aedc8143812c841f87f5d13ab883c579c", "author": {"user": {"login": "dgdelahera", "name": "Daniel Gonzalez"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c37a7c7aedc8143812c841f87f5d13ab883c579c", "committedDate": "2020-11-07T12:00:58Z", "message": "Fix bugs and improve unit test\n\nSigned-off-by: Daniel Gonzalez <dgdelahera@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "977807dd1999642cf17a079e7008af6db20d4424", "author": {"user": {"login": "dgdelahera", "name": "Daniel Gonzalez"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/977807dd1999642cf17a079e7008af6db20d4424", "committedDate": "2020-11-07T12:06:30Z", "message": "Fix bugs and improve unit test\n\nSigned-off-by: Daniel Gonzalez <dgdelahera@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c37a7c7aedc8143812c841f87f5d13ab883c579c", "author": {"user": {"login": "dgdelahera", "name": "Daniel Gonzalez"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c37a7c7aedc8143812c841f87f5d13ab883c579c", "committedDate": "2020-11-07T12:00:58Z", "message": "Fix bugs and improve unit test\n\nSigned-off-by: Daniel Gonzalez <dgdelahera@gmail.com>"}, "afterCommit": {"oid": "977807dd1999642cf17a079e7008af6db20d4424", "author": {"user": {"login": "dgdelahera", "name": "Daniel Gonzalez"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/977807dd1999642cf17a079e7008af6db20d4424", "committedDate": "2020-11-07T12:06:30Z", "message": "Fix bugs and improve unit test\n\nSigned-off-by: Daniel Gonzalez <dgdelahera@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "942c343daec571ade0387ca3d65e2215b3016bba", "author": {"user": {"login": "dgdelahera", "name": "Daniel Gonzalez"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/942c343daec571ade0387ca3d65e2215b3016bba", "committedDate": "2020-11-07T12:16:02Z", "message": "Improve unit test\n\nSigned-off-by: Daniel Gonzalez <dgdelahera@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "749667b307cb9fc36c8e7c4386dd928426c28723", "author": {"user": {"login": "scholzj", "name": "Jakub Scholz"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/749667b307cb9fc36c8e7c4386dd928426c28723", "committedDate": "2020-11-07T23:26:57Z", "message": "Fix tests\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1Njk0MDUz", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3453#pullrequestreview-525694053", "createdAt": "2020-11-08T00:03:53Z", "commit": {"oid": "749667b307cb9fc36c8e7c4386dd928426c28723"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1NzkwMTgy", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3453#pullrequestreview-525790182", "createdAt": "2020-11-08T09:33:08Z", "commit": {"oid": "749667b307cb9fc36c8e7c4386dd928426c28723"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4579d6207d43190e758641728ae87e1046d9dd30", "author": {"user": {"login": "scholzj", "name": "Jakub Scholz"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/4579d6207d43190e758641728ae87e1046d9dd30", "committedDate": "2020-11-08T14:02:35Z", "message": "Update all CRDs\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1090, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}