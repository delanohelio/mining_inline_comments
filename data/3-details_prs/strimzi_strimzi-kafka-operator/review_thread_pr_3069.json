{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxMzQ4MTE2", "number": 3069, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNzoyNDoyMFrOD-2pXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNzo0MjoxMFrOD-27zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjMzNjMxOnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/bridge/HttpBridgeCoors.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNzoyNDoyMFrOGZNRWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNzoyNDoyMFrOGZNRWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4NTAxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class HttpBridgeCoors extends HttpBridgeBaseST {\n          \n          \n            \n            public class HttpBridgeCorsST extends HttpBridgeBaseST {", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3069#discussion_r429085016", "createdAt": "2020-05-22T07:24:20Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/bridge/HttpBridgeCoors.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.bridge;\n+\n+import io.fabric8.kubernetes.api.model.Service;\n+import io.strimzi.api.kafka.model.KafkaBridgeHttpCors;\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.systemtest.resources.KubernetesResource;\n+import io.strimzi.systemtest.resources.crd.KafkaBridgeResource;\n+import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.utils.kafkaUtils.KafkaBridgeUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.objects.ServiceUtils;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.junit5.VertxTestContext;\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Random;\n+\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.CoreMatchers.hasItem;\n+\n+public class HttpBridgeCoors extends HttpBridgeBaseST {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08665cad8dc5e067d0486a3dd58263df87b1461f"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjM4MzQ4OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaBridgeResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNzo0MjoxMFrOGZNuDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNzo0MjoxMFrOGZNuDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA5MjM2Ng==", "bodyText": "\"Coors\" as already raised by @Frawless and I would use \"allowed\" instead of \"allow\". This is valid in other parts of the code.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3069#discussion_r429092366", "createdAt": "2020-05-22T07:42:10Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaBridgeResource.java", "diffHunk": "@@ -35,6 +35,31 @@ public static DoneableKafkaBridge kafkaBridge(String name, String clusterName, S\n         return deployKafkaBridge(defaultKafkaBridge(kafkaBridge, name, clusterName, bootstrap, kafkaBridgeReplicas).build());\n     }\n \n+    public static DoneableKafkaBridge kafkaBridgeWithCoors(String name, String bootstrap, int kafkaBridgeReplicas,\n+                                                           String allowCoorsOrigin, String allowCoorsMethods) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08665cad8dc5e067d0486a3dd58263df87b1461f"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 93, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}