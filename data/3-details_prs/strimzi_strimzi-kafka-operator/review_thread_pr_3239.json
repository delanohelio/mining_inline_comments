{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5OTIwNTUz", "number": 3239, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxOTowNTozMlrOEJX5_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNjozNjoyNVrOEJjcIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MjY0MzE5OnYy", "diffSide": "RIGHT", "path": "documentation/modules/con-common-configuration-properties.adoc", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxOTowNTozMlrOGp3r9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoyMjoxOFrOGqOUgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1NzE3NA==", "bodyText": "This does not describe only cipher suite configuration. So maybe it should be named _SSL configuration`?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3239#discussion_r446557174", "createdAt": "2020-06-27T19:05:32Z", "author": {"login": "scholzj"}, "path": "documentation/modules/con-common-configuration-properties.adoc", "diffHunk": "@@ -0,0 +1,394 @@\n+// This module is included in the following files:\n+//\n+// master.adoc\n+\n+[id='con-common-configuration-properties-{context}']\n+== Common configuration properties\n+\n+Common configuration properties apply to more than one resource.\n+\n+[id='con-common-configuration-replicas-{context}']\n+.`replicas`\n+\n+Use the `replicas` property to configure replicas.\n+\n+The type of replication depends on the resource.\n+\n+* `KafkaTopic` uses a replication factor to configure the number of replicas of each partition within a Kafka cluster.\n+* Kafka components use replicas to configure the number of pods in a deployment to provide better availability and scalability.\n+\n+*MirrorMaker*\n+\n+When running Kafka MirrorMaker on Kubernetes it is not absolutely necessary to run multiple replicas of the Kafka MirrorMaker for high availability.\n+When the node where the Kafka MirrorMaker has deployed crashes, Kubernetes will automatically reschedule the Kafka MirrorMaker pod to a different node.\n+However, running Kafka MirrorMaker with multiple replicas can provide faster failover times as the other nodes will be up and running.\n+\n+[id='con-common-configuration-bootstrap-{context}']\n+.`bootstrapServers`\n+\n+Use the `bootstrapServers` property to configure a list of bootstrap servers.\n+\n+The bootstrap server lists can refer to Kafka clusters that are not deployed in the same Kubernetes cluster.\n+They can also refer to a Kafka cluster not deployed by Strimzi.\n+\n+If on the same Kubernetes cluster, each list must ideally contain the Kafka cluster bootstrap service which is named `_CLUSTER-NAME_-kafka-bootstrap` and a port of 9092 for plain traffic or 9093 for encrypted traffic.\n+If deployed by Strimzi but on different Kubernetes clusters, the list content depends on the approach used for exposing the clusters (routes, nodeports or loadbalancers).\n+\n+When using Kafka with a Kafka cluster not managed by Strimzi, you can specify the bootstrap servers list according to the configuration of the given cluster.\n+\n+[id='con-common-configuration-cipher-{context}']\n+.`SSL` cipher suites", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0fda4f04f4c995e78b79975f6c447824c8cbc92"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1NDI3NQ==", "bodyText": "It's all configuration. Trying to use the property names in the title, so maybe .ssl is enough.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3239#discussion_r446854275", "createdAt": "2020-06-29T08:23:52Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/con-common-configuration-properties.adoc", "diffHunk": "@@ -0,0 +1,394 @@\n+// This module is included in the following files:\n+//\n+// master.adoc\n+\n+[id='con-common-configuration-properties-{context}']\n+== Common configuration properties\n+\n+Common configuration properties apply to more than one resource.\n+\n+[id='con-common-configuration-replicas-{context}']\n+.`replicas`\n+\n+Use the `replicas` property to configure replicas.\n+\n+The type of replication depends on the resource.\n+\n+* `KafkaTopic` uses a replication factor to configure the number of replicas of each partition within a Kafka cluster.\n+* Kafka components use replicas to configure the number of pods in a deployment to provide better availability and scalability.\n+\n+*MirrorMaker*\n+\n+When running Kafka MirrorMaker on Kubernetes it is not absolutely necessary to run multiple replicas of the Kafka MirrorMaker for high availability.\n+When the node where the Kafka MirrorMaker has deployed crashes, Kubernetes will automatically reschedule the Kafka MirrorMaker pod to a different node.\n+However, running Kafka MirrorMaker with multiple replicas can provide faster failover times as the other nodes will be up and running.\n+\n+[id='con-common-configuration-bootstrap-{context}']\n+.`bootstrapServers`\n+\n+Use the `bootstrapServers` property to configure a list of bootstrap servers.\n+\n+The bootstrap server lists can refer to Kafka clusters that are not deployed in the same Kubernetes cluster.\n+They can also refer to a Kafka cluster not deployed by Strimzi.\n+\n+If on the same Kubernetes cluster, each list must ideally contain the Kafka cluster bootstrap service which is named `_CLUSTER-NAME_-kafka-bootstrap` and a port of 9092 for plain traffic or 9093 for encrypted traffic.\n+If deployed by Strimzi but on different Kubernetes clusters, the list content depends on the approach used for exposing the clusters (routes, nodeports or loadbalancers).\n+\n+When using Kafka with a Kafka cluster not managed by Strimzi, you can specify the bootstrap servers list according to the configuration of the given cluster.\n+\n+[id='con-common-configuration-cipher-{context}']\n+.`SSL` cipher suites", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1NzE3NA=="}, "originalCommit": {"oid": "f0fda4f04f4c995e78b79975f6c447824c8cbc92"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg2NzU4Mg==", "bodyText": "Then it should either just SSL or maybe SSL protocol versions and cipher suites", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3239#discussion_r446867582", "createdAt": "2020-06-29T08:46:17Z", "author": {"login": "scholzj"}, "path": "documentation/modules/con-common-configuration-properties.adoc", "diffHunk": "@@ -0,0 +1,394 @@\n+// This module is included in the following files:\n+//\n+// master.adoc\n+\n+[id='con-common-configuration-properties-{context}']\n+== Common configuration properties\n+\n+Common configuration properties apply to more than one resource.\n+\n+[id='con-common-configuration-replicas-{context}']\n+.`replicas`\n+\n+Use the `replicas` property to configure replicas.\n+\n+The type of replication depends on the resource.\n+\n+* `KafkaTopic` uses a replication factor to configure the number of replicas of each partition within a Kafka cluster.\n+* Kafka components use replicas to configure the number of pods in a deployment to provide better availability and scalability.\n+\n+*MirrorMaker*\n+\n+When running Kafka MirrorMaker on Kubernetes it is not absolutely necessary to run multiple replicas of the Kafka MirrorMaker for high availability.\n+When the node where the Kafka MirrorMaker has deployed crashes, Kubernetes will automatically reschedule the Kafka MirrorMaker pod to a different node.\n+However, running Kafka MirrorMaker with multiple replicas can provide faster failover times as the other nodes will be up and running.\n+\n+[id='con-common-configuration-bootstrap-{context}']\n+.`bootstrapServers`\n+\n+Use the `bootstrapServers` property to configure a list of bootstrap servers.\n+\n+The bootstrap server lists can refer to Kafka clusters that are not deployed in the same Kubernetes cluster.\n+They can also refer to a Kafka cluster not deployed by Strimzi.\n+\n+If on the same Kubernetes cluster, each list must ideally contain the Kafka cluster bootstrap service which is named `_CLUSTER-NAME_-kafka-bootstrap` and a port of 9092 for plain traffic or 9093 for encrypted traffic.\n+If deployed by Strimzi but on different Kubernetes clusters, the list content depends on the approach used for exposing the clusters (routes, nodeports or loadbalancers).\n+\n+When using Kafka with a Kafka cluster not managed by Strimzi, you can specify the bootstrap servers list according to the configuration of the given cluster.\n+\n+[id='con-common-configuration-cipher-{context}']\n+.`SSL` cipher suites", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1NzE3NA=="}, "originalCommit": {"oid": "f0fda4f04f4c995e78b79975f6c447824c8cbc92"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyODAwMw==", "bodyText": "I've left at ssl", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3239#discussion_r446928003", "createdAt": "2020-06-29T12:22:18Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/con-common-configuration-properties.adoc", "diffHunk": "@@ -0,0 +1,394 @@\n+// This module is included in the following files:\n+//\n+// master.adoc\n+\n+[id='con-common-configuration-properties-{context}']\n+== Common configuration properties\n+\n+Common configuration properties apply to more than one resource.\n+\n+[id='con-common-configuration-replicas-{context}']\n+.`replicas`\n+\n+Use the `replicas` property to configure replicas.\n+\n+The type of replication depends on the resource.\n+\n+* `KafkaTopic` uses a replication factor to configure the number of replicas of each partition within a Kafka cluster.\n+* Kafka components use replicas to configure the number of pods in a deployment to provide better availability and scalability.\n+\n+*MirrorMaker*\n+\n+When running Kafka MirrorMaker on Kubernetes it is not absolutely necessary to run multiple replicas of the Kafka MirrorMaker for high availability.\n+When the node where the Kafka MirrorMaker has deployed crashes, Kubernetes will automatically reschedule the Kafka MirrorMaker pod to a different node.\n+However, running Kafka MirrorMaker with multiple replicas can provide faster failover times as the other nodes will be up and running.\n+\n+[id='con-common-configuration-bootstrap-{context}']\n+.`bootstrapServers`\n+\n+Use the `bootstrapServers` property to configure a list of bootstrap servers.\n+\n+The bootstrap server lists can refer to Kafka clusters that are not deployed in the same Kubernetes cluster.\n+They can also refer to a Kafka cluster not deployed by Strimzi.\n+\n+If on the same Kubernetes cluster, each list must ideally contain the Kafka cluster bootstrap service which is named `_CLUSTER-NAME_-kafka-bootstrap` and a port of 9092 for plain traffic or 9093 for encrypted traffic.\n+If deployed by Strimzi but on different Kubernetes clusters, the list content depends on the approach used for exposing the clusters (routes, nodeports or loadbalancers).\n+\n+When using Kafka with a Kafka cluster not managed by Strimzi, you can specify the bootstrap servers list according to the configuration of the given cluster.\n+\n+[id='con-common-configuration-cipher-{context}']\n+.`SSL` cipher suites", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1NzE3NA=="}, "originalCommit": {"oid": "f0fda4f04f4c995e78b79975f6c447824c8cbc92"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MjY0MzQ0OnYy", "diffSide": "RIGHT", "path": "documentation/api/io.strimzi.api.kafka.model.KafkaMirrorMaker2ClusterSpec.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxOTowNTo0NFrOGp3sEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzowODoxN1rOGqQFbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1NzIwMA==", "bodyText": "This does not configure listeners but clients.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3239#discussion_r446557200", "createdAt": "2020-06-27T19:05:44Z", "author": {"login": "scholzj"}, "path": "documentation/api/io.strimzi.api.kafka.model.KafkaMirrorMaker2ClusterSpec.adoc", "diffHunk": "@@ -1,18 +1,9 @@\n-Use the three allowed `ssl` configuration options to run external listeners with a specific _cipher suite_ for a TLS version.\n-A _cipher suite_ combines algorithms for secure connection and data transfer.\n+Use `KafkaMirrorMaker2ClusterSpec` properties to configure Kafka clusters for mirroring.\n \n-.Example SSL configuration\n-[source,yaml,subs=\"attributes+\"]\n-----\n-spec:\n-  clusters:\n-    config:\n-      ssl.cipher.suites: \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\" <1>\n-      ssl.enabled.protocols: \"TLSv1.2\" <2>\n-      ssl.protocol: \"TLSv1.2\" <3>\n-----\n-<1> The cipher suite for TLS using a combination of `ECDHE` key exchange mechanism, `RSA` authentication algorithm,\n-`AES` bulk encyption algorithm and `SHA384` MAC algorithm.\n-<2> The SSl protocol `TLSv1.2` is enabled.\n-<3> Specifies the `TLSv1.2` protocol to generate the SSL context.\n-Allowed values are `TLSv1.1` and `TLSv1.2`.\n+[id='property-mirrormaker2-config-{context}']\n+.`config`\n+Use the `config` properties to configure Kafka options.\n+\n+Standard Apache Kafka configuration may be provided, xref:assembly-kafka-connect-configuration-deployment-configuration-kafka-connect[restricted to those properties not managed directly by Strimzi].\n+\n+To run external listeners with a specific _cipher suite_ for a TLS version, you can xref:con-common-configuration-cipher-reference[configure allowed `ssl` properties].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0fda4f04f4c995e78b79975f6c447824c8cbc92"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1NjkxMA==", "bodyText": "I changed to For client connection using a specific cipher suite and assumed we needed this change wherever else this sentence was used.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3239#discussion_r446956910", "createdAt": "2020-06-29T13:08:17Z", "author": {"login": "PaulRMellor"}, "path": "documentation/api/io.strimzi.api.kafka.model.KafkaMirrorMaker2ClusterSpec.adoc", "diffHunk": "@@ -1,18 +1,9 @@\n-Use the three allowed `ssl` configuration options to run external listeners with a specific _cipher suite_ for a TLS version.\n-A _cipher suite_ combines algorithms for secure connection and data transfer.\n+Use `KafkaMirrorMaker2ClusterSpec` properties to configure Kafka clusters for mirroring.\n \n-.Example SSL configuration\n-[source,yaml,subs=\"attributes+\"]\n-----\n-spec:\n-  clusters:\n-    config:\n-      ssl.cipher.suites: \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\" <1>\n-      ssl.enabled.protocols: \"TLSv1.2\" <2>\n-      ssl.protocol: \"TLSv1.2\" <3>\n-----\n-<1> The cipher suite for TLS using a combination of `ECDHE` key exchange mechanism, `RSA` authentication algorithm,\n-`AES` bulk encyption algorithm and `SHA384` MAC algorithm.\n-<2> The SSl protocol `TLSv1.2` is enabled.\n-<3> Specifies the `TLSv1.2` protocol to generate the SSL context.\n-Allowed values are `TLSv1.1` and `TLSv1.2`.\n+[id='property-mirrormaker2-config-{context}']\n+.`config`\n+Use the `config` properties to configure Kafka options.\n+\n+Standard Apache Kafka configuration may be provided, xref:assembly-kafka-connect-configuration-deployment-configuration-kafka-connect[restricted to those properties not managed directly by Strimzi].\n+\n+To run external listeners with a specific _cipher suite_ for a TLS version, you can xref:con-common-configuration-cipher-reference[configure allowed `ssl` properties].", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1NzIwMA=="}, "originalCommit": {"oid": "f0fda4f04f4c995e78b79975f6c447824c8cbc92"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MjY0NDMyOnYy", "diffSide": "RIGHT", "path": "documentation/modules/con-common-configuration-properties.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxOTowNzowNVrOGp3sfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxOTowNzowNVrOGp3sfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1NzMwOA==", "bodyText": "Thsi shows up in many different variants ... I wonder if it should be just\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            spec:\n          \n          \n            \n              producer:\n          \n          \n            \n                config:\n          \n          \n            \n                  ssl.cipher.suites: \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\" <1>\n          \n          \n            \n                  ssl.enabled.protocols: \"TLSv1.2\" <2>\n          \n          \n            \n                  ssl.protocol: \"TLSv1.2\" <3>\n          \n          \n            \n            # ...\n          \n          \n            \n            config:\n          \n          \n            \n              ssl.cipher.suites: \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\" <1>\n          \n          \n            \n              ssl.enabled.protocols: \"TLSv1.2\" <2>\n          \n          \n            \n              ssl.protocol: \"TLSv1.2\" <3>\n          \n          \n            \n            # ...\n          \n      \n    \n    \n  \n\nin the example.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3239#discussion_r446557308", "createdAt": "2020-06-27T19:07:05Z", "author": {"login": "scholzj"}, "path": "documentation/modules/con-common-configuration-properties.adoc", "diffHunk": "@@ -0,0 +1,394 @@\n+// This module is included in the following files:\n+//\n+// master.adoc\n+\n+[id='con-common-configuration-properties-{context}']\n+== Common configuration properties\n+\n+Common configuration properties apply to more than one resource.\n+\n+[id='con-common-configuration-replicas-{context}']\n+.`replicas`\n+\n+Use the `replicas` property to configure replicas.\n+\n+The type of replication depends on the resource.\n+\n+* `KafkaTopic` uses a replication factor to configure the number of replicas of each partition within a Kafka cluster.\n+* Kafka components use replicas to configure the number of pods in a deployment to provide better availability and scalability.\n+\n+*MirrorMaker*\n+\n+When running Kafka MirrorMaker on Kubernetes it is not absolutely necessary to run multiple replicas of the Kafka MirrorMaker for high availability.\n+When the node where the Kafka MirrorMaker has deployed crashes, Kubernetes will automatically reschedule the Kafka MirrorMaker pod to a different node.\n+However, running Kafka MirrorMaker with multiple replicas can provide faster failover times as the other nodes will be up and running.\n+\n+[id='con-common-configuration-bootstrap-{context}']\n+.`bootstrapServers`\n+\n+Use the `bootstrapServers` property to configure a list of bootstrap servers.\n+\n+The bootstrap server lists can refer to Kafka clusters that are not deployed in the same Kubernetes cluster.\n+They can also refer to a Kafka cluster not deployed by Strimzi.\n+\n+If on the same Kubernetes cluster, each list must ideally contain the Kafka cluster bootstrap service which is named `_CLUSTER-NAME_-kafka-bootstrap` and a port of 9092 for plain traffic or 9093 for encrypted traffic.\n+If deployed by Strimzi but on different Kubernetes clusters, the list content depends on the approach used for exposing the clusters (routes, nodeports or loadbalancers).\n+\n+When using Kafka with a Kafka cluster not managed by Strimzi, you can specify the bootstrap servers list according to the configuration of the given cluster.\n+\n+[id='con-common-configuration-cipher-{context}']\n+.`SSL` cipher suites\n+\n+Use the three allowed `ssl` configuration options to run external listeners with a specific _cipher suite_ for a TLS version.\n+A _cipher suite_ combines algorithms for secure connection and data transfer.\n+\n+.Example SSL configuration\n+[source,yaml,subs=\"attributes+\"]\n+----\n+spec:\n+  producer:\n+    config:\n+      ssl.cipher.suites: \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\" <1>\n+      ssl.enabled.protocols: \"TLSv1.2\" <2>\n+      ssl.protocol: \"TLSv1.2\" <3>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0fda4f04f4c995e78b79975f6c447824c8cbc92"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MjY1MjIxOnYy", "diffSide": "RIGHT", "path": "documentation/api/io.strimzi.api.kafka.model.KafkaMirrorMakerConsumerSpec.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxOToxNzoxMVrOGp3wJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxOToxNzoxMVrOGp3wJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1ODI0Nw==", "bodyText": "We should add Interceptor classes to the list", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3239#discussion_r446558247", "createdAt": "2020-06-27T19:17:11Z", "author": {"login": "scholzj"}, "path": "documentation/api/io.strimzi.api.kafka.model.KafkaMirrorMakerConsumerSpec.adoc", "diffHunk": "@@ -1,18 +1,65 @@\n-Use the three allowed `ssl` configuration options to run external listeners with a specific _cipher suite_ for a TLS version.\n-A _cipher suite_ combines algorithms for secure connection and data transfer.\n-\n-.Example SSL configuration\n-[source,yaml,subs=\"attributes+\"]\n-----\n-spec:\n-  consumer:\n-    config:\n-      ssl.cipher.suites: \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\" <1>\n-      ssl.enabled.protocols: \"TLSv1.2\" <2>\n-      ssl.protocol: \"TLSv1.2\" <3>\n-----\n-<1> The cipher suite for TLS using a combination of `ECDHE` key exchange mechanism, `RSA` authentication algorithm,\n-`AES` bulk encyption algorithm and `SHA384` MAC algorithm.\n-<2> The SSl protocol `TLSv1.2` is enabled.\n-<3> Specifies the `TLSv1.2` protocol to generate the SSL context.\n-Allowed values are `TLSv1.1` and `TLSv1.2`.\n+Use `KafkaMirrorMakerConsumerSpec` properties to configure a MirrorMaker consumer.\n+\n+[id='property-consumer-streams-{context}']\n+.`numStreams`\n+\n+Use the `consumer.numStreams` property to configure the number of streams for the consumer.\n+\n+You can increase the throughput in mirroring topics by increasing the number of consumer threads.\n+Consumer threads belong to the consumer group specified for Kafka MirrorMaker.\n+Topic partitions are assigned across the consumer threads, which consume messages in parallel.\n+\n+[id='property-consumer-offset-autocommit-{context}']\n+.`offsetCommitInterval`\n+\n+Use the `consumer.offsetCommitInterval` property to configure an offset auto-commit interval for the consumer.\n+\n+You can specify the regular time interval at which an offset is committed after Kafka MirrorMaker has consumed data from the source Kafka cluster.\n+The time interval is set in milliseconds, with a default value of 60,000.\n+\n+[id='property-consumer-config-{context}']\n+.`config`\n+\n+Use the `consumer.config` properties to configure Kafka options for the consumer.\n+\n+The `config` property contains the Kafka MirrorMaker consumer configuration options as keys, with values set in one of the following JSON types:\n+\n+* String\n+* Number\n+* Boolean\n+\n+To run external listeners with a specific _cipher suite_ for a TLS version, you can xref:con-common-configuration-cipher-reference[configure allowed `ssl` properties].\n+\n+*Exceptions*\n+\n+You can specify and configure the options listed in the {ApacheKafkaConsumerConfig}.\n+\n+However, there are exceptions for options automatically configured and managed directly by Strimzi related to:\n+\n+* Kafka cluster bootstrap address\n+* Security (encryption, authentication, and authorization)\n+* Consumer group identifier", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0fda4f04f4c995e78b79975f6c447824c8cbc92"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MjY1MjUzOnYy", "diffSide": "RIGHT", "path": "documentation/api/io.strimzi.api.kafka.model.KafkaMirrorMakerConsumerSpec.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxOToxNzo0MFrOGp3wTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxOToxNzo0MFrOGp3wTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1ODI4NQ==", "bodyText": "We should add interceptor.classes to the list", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3239#discussion_r446558285", "createdAt": "2020-06-27T19:17:40Z", "author": {"login": "scholzj"}, "path": "documentation/api/io.strimzi.api.kafka.model.KafkaMirrorMakerConsumerSpec.adoc", "diffHunk": "@@ -1,18 +1,65 @@\n-Use the three allowed `ssl` configuration options to run external listeners with a specific _cipher suite_ for a TLS version.\n-A _cipher suite_ combines algorithms for secure connection and data transfer.\n-\n-.Example SSL configuration\n-[source,yaml,subs=\"attributes+\"]\n-----\n-spec:\n-  consumer:\n-    config:\n-      ssl.cipher.suites: \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\" <1>\n-      ssl.enabled.protocols: \"TLSv1.2\" <2>\n-      ssl.protocol: \"TLSv1.2\" <3>\n-----\n-<1> The cipher suite for TLS using a combination of `ECDHE` key exchange mechanism, `RSA` authentication algorithm,\n-`AES` bulk encyption algorithm and `SHA384` MAC algorithm.\n-<2> The SSl protocol `TLSv1.2` is enabled.\n-<3> Specifies the `TLSv1.2` protocol to generate the SSL context.\n-Allowed values are `TLSv1.1` and `TLSv1.2`.\n+Use `KafkaMirrorMakerConsumerSpec` properties to configure a MirrorMaker consumer.\n+\n+[id='property-consumer-streams-{context}']\n+.`numStreams`\n+\n+Use the `consumer.numStreams` property to configure the number of streams for the consumer.\n+\n+You can increase the throughput in mirroring topics by increasing the number of consumer threads.\n+Consumer threads belong to the consumer group specified for Kafka MirrorMaker.\n+Topic partitions are assigned across the consumer threads, which consume messages in parallel.\n+\n+[id='property-consumer-offset-autocommit-{context}']\n+.`offsetCommitInterval`\n+\n+Use the `consumer.offsetCommitInterval` property to configure an offset auto-commit interval for the consumer.\n+\n+You can specify the regular time interval at which an offset is committed after Kafka MirrorMaker has consumed data from the source Kafka cluster.\n+The time interval is set in milliseconds, with a default value of 60,000.\n+\n+[id='property-consumer-config-{context}']\n+.`config`\n+\n+Use the `consumer.config` properties to configure Kafka options for the consumer.\n+\n+The `config` property contains the Kafka MirrorMaker consumer configuration options as keys, with values set in one of the following JSON types:\n+\n+* String\n+* Number\n+* Boolean\n+\n+To run external listeners with a specific _cipher suite_ for a TLS version, you can xref:con-common-configuration-cipher-reference[configure allowed `ssl` properties].\n+\n+*Exceptions*\n+\n+You can specify and configure the options listed in the {ApacheKafkaConsumerConfig}.\n+\n+However, there are exceptions for options automatically configured and managed directly by Strimzi related to:\n+\n+* Kafka cluster bootstrap address\n+* Security (encryption, authentication, and authorization)\n+* Consumer group identifier\n+\n+Specifically, all configuration options with keys equal to or starting with one of the following strings are forbidden:\n+\n+* `ssl.` (with the exception of xref:con-common-configuration-cipher-reference[cipher suites])\n+* `sasl.`\n+* `security.`\n+* `bootstrap.servers`\n+* `group.id`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0fda4f04f4c995e78b79975f6c447824c8cbc92"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MjY1MzI5OnYy", "diffSide": "RIGHT", "path": "documentation/api/io.strimzi.api.kafka.model.KafkaMirrorMakerProducerSpec.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxOToxODozMVrOGp3wqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxOToxODozMVrOGp3wqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1ODM3OA==", "bodyText": "We should add interceptor.classes to the list and remove group.id which is consumer only.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3239#discussion_r446558378", "createdAt": "2020-06-27T19:18:31Z", "author": {"login": "scholzj"}, "path": "documentation/api/io.strimzi.api.kafka.model.KafkaMirrorMakerProducerSpec.adoc", "diffHunk": "@@ -1,18 +1,50 @@\n-Use the three allowed `ssl` configuration options to run external listeners with a specific _cipher suite_ for a TLS version.\n-A _cipher suite_ combines algorithms for secure connection and data transfer.\n-\n-.Example SSL configuration\n-[source,yaml,subs=\"attributes+\"]\n-----\n-spec:\n-  producer:\n-    config:\n-      ssl.cipher.suites: \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\" <1>\n-      ssl.enabled.protocols: \"TLSv1.2\" <2>\n-      ssl.protocol: \"TLSv1.2\" <3>\n-----\n-<1> The cipher suite for TLS using a combination of `ECDHE` key exchange mechanism, `RSA` authentication algorithm,\n-`AES` bulk encyption algorithm and `SHA384` MAC algorithm.\n-<2> The SSl protocol `TLSv1.2` is enabled.\n-<3> Specifies the `TLSv1.2` protocol to generate the SSL context.\n-Allowed values are `TLSv1.1` and `TLSv1.2`.\n+Use `KafkaMirrorMakerProducerSpec` properties to configure a MirrorMaker producer.\n+\n+[id='property-producer-abort-on-send-{context}']\n+.`abortOnSendFailure`\n+\n+Use the `producer.abortOnSendFailure` property to configure how to handle message send failure from the producer.\n+\n+By default, if an error occurs when sending a message from Kafka MirrorMaker to a Kafka cluster:\n+\n+* The Kafka MirrorMaker container is terminated in Kubernetes.\n+* The container is then recreated.\n+\n+If the `abortOnSendFailure` option is set to `false`, message sending errors are ignored.\n+\n+[id='property-producer-config-{context}']\n+.`config`\n+\n+Use the `producer.config` properties to configure Kafka options for the producer.\n+\n+The `config` property contains the Kafka MirrorMaker producer configuration options as keys, with values set in one of the following JSON types:\n+\n+* String\n+* Number\n+* Boolean\n+\n+To run external listeners with a specific _cipher suite_ for a TLS version, you can xref:con-common-configuration-cipher-reference[configure allowed `ssl` properties].\n+\n+*Exceptions*\n+\n+You can specify and configure the options listed in the {ApacheKafkaProducerConfig}.\n+\n+However, there are exceptions for options automatically configured and managed directly by Strimzi related to:\n+\n+* Kafka cluster bootstrap address\n+* Security (encryption, authentication, and authorization)\n+\n+Specifically, all configuration options with keys equal to or starting with one of the following strings are forbidden:\n+\n+* `ssl.` (with the exception of xref:con-common-configuration-cipher-reference[cipher suites])\n+* `sasl.`\n+* `security.`\n+* `bootstrap.servers`\n+* `group.id`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0fda4f04f4c995e78b79975f6c447824c8cbc92"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MjY1MzM2OnYy", "diffSide": "RIGHT", "path": "documentation/api/io.strimzi.api.kafka.model.KafkaMirrorMakerProducerSpec.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxOToxODo0MlrOGp3wtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxOToxODo0MlrOGp3wtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1ODM4OA==", "bodyText": "We should add Interceptor classes to the list", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3239#discussion_r446558388", "createdAt": "2020-06-27T19:18:42Z", "author": {"login": "scholzj"}, "path": "documentation/api/io.strimzi.api.kafka.model.KafkaMirrorMakerProducerSpec.adoc", "diffHunk": "@@ -1,18 +1,50 @@\n-Use the three allowed `ssl` configuration options to run external listeners with a specific _cipher suite_ for a TLS version.\n-A _cipher suite_ combines algorithms for secure connection and data transfer.\n-\n-.Example SSL configuration\n-[source,yaml,subs=\"attributes+\"]\n-----\n-spec:\n-  producer:\n-    config:\n-      ssl.cipher.suites: \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\" <1>\n-      ssl.enabled.protocols: \"TLSv1.2\" <2>\n-      ssl.protocol: \"TLSv1.2\" <3>\n-----\n-<1> The cipher suite for TLS using a combination of `ECDHE` key exchange mechanism, `RSA` authentication algorithm,\n-`AES` bulk encyption algorithm and `SHA384` MAC algorithm.\n-<2> The SSl protocol `TLSv1.2` is enabled.\n-<3> Specifies the `TLSv1.2` protocol to generate the SSL context.\n-Allowed values are `TLSv1.1` and `TLSv1.2`.\n+Use `KafkaMirrorMakerProducerSpec` properties to configure a MirrorMaker producer.\n+\n+[id='property-producer-abort-on-send-{context}']\n+.`abortOnSendFailure`\n+\n+Use the `producer.abortOnSendFailure` property to configure how to handle message send failure from the producer.\n+\n+By default, if an error occurs when sending a message from Kafka MirrorMaker to a Kafka cluster:\n+\n+* The Kafka MirrorMaker container is terminated in Kubernetes.\n+* The container is then recreated.\n+\n+If the `abortOnSendFailure` option is set to `false`, message sending errors are ignored.\n+\n+[id='property-producer-config-{context}']\n+.`config`\n+\n+Use the `producer.config` properties to configure Kafka options for the producer.\n+\n+The `config` property contains the Kafka MirrorMaker producer configuration options as keys, with values set in one of the following JSON types:\n+\n+* String\n+* Number\n+* Boolean\n+\n+To run external listeners with a specific _cipher suite_ for a TLS version, you can xref:con-common-configuration-cipher-reference[configure allowed `ssl` properties].\n+\n+*Exceptions*\n+\n+You can specify and configure the options listed in the {ApacheKafkaProducerConfig}.\n+\n+However, there are exceptions for options automatically configured and managed directly by Strimzi related to:\n+\n+* Kafka cluster bootstrap address\n+* Security (encryption, authentication, and authorization)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0fda4f04f4c995e78b79975f6c447824c8cbc92"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MjY1ODI1OnYy", "diffSide": "RIGHT", "path": "documentation/api/io.strimzi.api.kafka.model.KafkaMirrorMakerTls.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxOToyNDo1N1rOGp3zCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzoxODo0NlrOGqQhTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1ODk4NA==", "bodyText": "Can we add something like this at the end?\nIf you want to enable TLS but use the default set of public certification authorities shipped with Java, you can specify the `trustedCertificates` as empty array:\n\n.An example of enabling TLS with the default Java certificates \n[source,yaml,subs=attributes+]\n----\ntls:\n  trustedCertificates: []\n----", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3239#discussion_r446558984", "createdAt": "2020-06-27T19:24:57Z", "author": {"login": "scholzj"}, "path": "documentation/api/io.strimzi.api.kafka.model.KafkaMirrorMakerTls.adoc", "diffHunk": "@@ -1,5 +1,8 @@\n-Use the `tls` property to configure TLS encryption.\n-Provide a list of secrets with key names under which the certificates are stored in X.509 format.\n+Use the `KafkaMirrorMakerTls` properties to configure TLS trusted certificates for connecting MirrorMaker to the cluster.\n+\n+.`trustedCertificates`\n+Having xref:type-KafkaClientAuthenticationTls-reference[set `tls` to configure TLS encryption], use the\n+`trustedCertificates` property to provide a list of secrets with key names under which the certificates are stored in X.509 format.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0fda4f04f4c995e78b79975f6c447824c8cbc92"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk2NDA0NA==", "bodyText": "Added", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3239#discussion_r446964044", "createdAt": "2020-06-29T13:18:46Z", "author": {"login": "PaulRMellor"}, "path": "documentation/api/io.strimzi.api.kafka.model.KafkaMirrorMakerTls.adoc", "diffHunk": "@@ -1,5 +1,8 @@\n-Use the `tls` property to configure TLS encryption.\n-Provide a list of secrets with key names under which the certificates are stored in X.509 format.\n+Use the `KafkaMirrorMakerTls` properties to configure TLS trusted certificates for connecting MirrorMaker to the cluster.\n+\n+.`trustedCertificates`\n+Having xref:type-KafkaClientAuthenticationTls-reference[set `tls` to configure TLS encryption], use the\n+`trustedCertificates` property to provide a list of secrets with key names under which the certificates are stored in X.509 format.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1ODk4NA=="}, "originalCommit": {"oid": "f0fda4f04f4c995e78b79975f6c447824c8cbc92"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MjY1OTYxOnYy", "diffSide": "RIGHT", "path": "documentation/api/io.strimzi.api.kafka.model.authentication.KafkaClientAuthenticationOAuth.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxOToyNjoyNVrOGp3zpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxOToyNjoyNVrOGp3zpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1OTE0Mg==", "bodyText": "Do we need the 2 empty lines here?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3239#discussion_r446559142", "createdAt": "2020-06-27T19:26:25Z", "author": {"login": "scholzj"}, "path": "documentation/api/io.strimzi.api.kafka.model.authentication.KafkaClientAuthenticationOAuth.adoc", "diffHunk": "@@ -44,11 +42,11 @@ authentication:\n ----\n \n .Access token\n-\n You can configure the access token used for authentication with the Kafka broker directly.\n In this case, you do not specify the `tokenEndpointUri`.\n In the `accessToken` property, specify a link to a `Secret` containing the access token.\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0fda4f04f4c995e78b79975f6c447824c8cbc92"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MjY2MzQ5OnYy", "diffSide": "RIGHT", "path": "documentation/modules/con-common-configuration-properties.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxOTozMTozNVrOGp31aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMDoxMjowNFrOGqLoSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1OTU5NQ==", "bodyText": "This applies to also for example Kafka Connect. But it seems a bit weird to mention it explicitely in section called Common configuration properties.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3239#discussion_r446559595", "createdAt": "2020-06-27T19:31:35Z", "author": {"login": "scholzj"}, "path": "documentation/modules/con-common-configuration-properties.adoc", "diffHunk": "@@ -0,0 +1,394 @@\n+// This module is included in the following files:\n+//\n+// master.adoc\n+\n+[id='con-common-configuration-properties-{context}']\n+== Common configuration properties\n+\n+Common configuration properties apply to more than one resource.\n+\n+[id='con-common-configuration-replicas-{context}']\n+.`replicas`\n+\n+Use the `replicas` property to configure replicas.\n+\n+The type of replication depends on the resource.\n+\n+* `KafkaTopic` uses a replication factor to configure the number of replicas of each partition within a Kafka cluster.\n+* Kafka components use replicas to configure the number of pods in a deployment to provide better availability and scalability.\n+\n+*MirrorMaker*\n+\n+When running Kafka MirrorMaker on Kubernetes it is not absolutely necessary to run multiple replicas of the Kafka MirrorMaker for high availability.\n+When the node where the Kafka MirrorMaker has deployed crashes, Kubernetes will automatically reschedule the Kafka MirrorMaker pod to a different node.\n+However, running Kafka MirrorMaker with multiple replicas can provide faster failover times as the other nodes will be up and running.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0fda4f04f4c995e78b79975f6c447824c8cbc92"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg4MzkxNQ==", "bodyText": "I've changed into a generic note.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3239#discussion_r446883915", "createdAt": "2020-06-29T10:12:04Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/con-common-configuration-properties.adoc", "diffHunk": "@@ -0,0 +1,394 @@\n+// This module is included in the following files:\n+//\n+// master.adoc\n+\n+[id='con-common-configuration-properties-{context}']\n+== Common configuration properties\n+\n+Common configuration properties apply to more than one resource.\n+\n+[id='con-common-configuration-replicas-{context}']\n+.`replicas`\n+\n+Use the `replicas` property to configure replicas.\n+\n+The type of replication depends on the resource.\n+\n+* `KafkaTopic` uses a replication factor to configure the number of replicas of each partition within a Kafka cluster.\n+* Kafka components use replicas to configure the number of pods in a deployment to provide better availability and scalability.\n+\n+*MirrorMaker*\n+\n+When running Kafka MirrorMaker on Kubernetes it is not absolutely necessary to run multiple replicas of the Kafka MirrorMaker for high availability.\n+When the node where the Kafka MirrorMaker has deployed crashes, Kubernetes will automatically reschedule the Kafka MirrorMaker pod to a different node.\n+However, running Kafka MirrorMaker with multiple replicas can provide faster failover times as the other nodes will be up and running.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1OTU5NQ=="}, "originalCommit": {"oid": "f0fda4f04f4c995e78b79975f6c447824c8cbc92"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDUzMjgyOnYy", "diffSide": "RIGHT", "path": "documentation/api/io.strimzi.api.kafka.model.KafkaAuthorizationOpa.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNjozNjoyNVrOGqGnHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODoxMDo0MlrOGqJYAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgwMTY5NQ==", "bodyText": "as far as I understood these changes on OPA related stuff are not related to the PR purpose. Can we do that in a different PR?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3239#discussion_r446801695", "createdAt": "2020-06-29T06:36:25Z", "author": {"login": "ppatierno"}, "path": "documentation/api/io.strimzi.api.kafka.model.KafkaAuthorizationOpa.adoc", "diffHunk": "@@ -1,30 +1,30 @@\n-To use link:https://www.openpolicyagent.org/[Open Policy Agent^] authorization, set the `type` property in the `authorization` section to the value `opa`.\n-The Open Policy Agent authorizer has several configuration options:\n+To use link:https://www.openpolicyagent.org/[Open Policy Agent^] authorization, set the `type` property in the `authorization` section to the value `opa`,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0fda4f04f4c995e78b79975f6c447824c8cbc92"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0Njk3OA==", "bodyText": "They're just a few formatting changes to make consistent with the other descriptions added to the appendix. So it's sort of related.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3239#discussion_r446846978", "createdAt": "2020-06-29T08:10:42Z", "author": {"login": "PaulRMellor"}, "path": "documentation/api/io.strimzi.api.kafka.model.KafkaAuthorizationOpa.adoc", "diffHunk": "@@ -1,30 +1,30 @@\n-To use link:https://www.openpolicyagent.org/[Open Policy Agent^] authorization, set the `type` property in the `authorization` section to the value `opa`.\n-The Open Policy Agent authorizer has several configuration options:\n+To use link:https://www.openpolicyagent.org/[Open Policy Agent^] authorization, set the `type` property in the `authorization` section to the value `opa`,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgwMTY5NQ=="}, "originalCommit": {"oid": "f0fda4f04f4c995e78b79975f6c447824c8cbc92"}, "originalPosition": 3}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1374, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}