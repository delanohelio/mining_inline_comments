{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzODcyMTc4", "number": 2841, "title": "feat: Add SecurityContext to ContainerTemplate", "bodyText": "Added SecurityContext to ContainerTemplate and\nadded logic to handle it in all models which use it\nAttached tests ensure that these values are then\npropogated to deployments/sts\nAlso added a JmxTemplate and ContainerTemplate to\nJmxTrans\nSigned-off-by: Samuel Hawker samuel.hawker@ibm.com\nType of change\nSelect the type of your PR\n\nBugfix\nEnhancement / new feature\nRefactoring\nDocumentation\n\nDescription\nPlease describe your pull request\nChecklist\nPlease go through this checklist and make sure all applicable tasks have been done\n\n Update/write design documentation in ./design\n Write tests\n Make sure all tests pass\n Update documentation\n Check RBAC rights for Kubernetes / OpenShift roles\n Try your changes from Pod inside your Kubernetes and OpenShift cluster, not just locally\n Reference relevant issue(s) and close them after merging\n Update CHANGELOG.md", "createdAt": "2020-04-15T16:44:09Z", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2841", "merged": true, "mergeCommit": {"oid": "4b7bc42feebf777a92a8de1636a25bec6300d437"}, "closed": true, "closedAt": "2020-04-17T10:33:43Z", "author": {"login": "samuel-hawker"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcX642oAH2gAyNDAzODcyMTc4OjdiY2E2MDNkMzgyZmQyOWE5MDJhOTkzMzk1N2ZlZDZjODdkYjBiMDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcYdB9TgH2gAyNDAzODcyMTc4OjY4NWM0NzlhMTg2ZjA4YTQ4ZjJjZWNkZDcwZjlhMzUwMTQyODMyOWI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7bca603d382fd29a902a9933957fed6c87db0b05", "author": {"user": {"login": "samuel-hawker", "name": "Samuel Hawker"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/7bca603d382fd29a902a9933957fed6c87db0b05", "committedDate": "2020-04-15T16:42:56Z", "message": "feat: Add SecurityContext to ContainerTemplate\n\nAdded SecurityContext to ContainerTemplate and\nadded logic to handle it in all models which use it\n\nAttached tests ensure that these values are then\npropogated to deployments/sts\n\nAlso added a JmxTemplate and ContainerTemplate to\nJmxTrans\n\nSigned-off-by: Samuel Hawker <samuel.hawker@ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDU3NzA0", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2841#pullrequestreview-394057704", "createdAt": "2020-04-15T19:08:26Z", "commit": {"oid": "7bca603d382fd29a902a9933957fed6c87db0b05"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTowODoyN1rOGGHuZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOToxOToyNlrOGGIGdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA3MTIwNA==", "bodyText": "MAybe you could fix the variable name here? tlsSidecarContainer -> jmxTransContainer", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2841#discussion_r409071204", "createdAt": "2020-04-15T19:08:27Z", "author": {"login": "scholzj"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/JmxTransTemplate.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+\n+package io.strimzi.api.kafka.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import io.strimzi.api.kafka.model.template.ContainerTemplate;\n+import io.strimzi.crdgenerator.annotations.Description;\n+import io.sundr.builder.annotations.Buildable;\n+import lombok.EqualsAndHashCode;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Representation of a template for JmxTrans resources.\n+ */\n+@Buildable(\n+        editableEnabled = false,\n+        builderPackage = Constants.FABRIC8_KUBERNETES_API\n+)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonPropertyOrder({ \"jmxTransContainer\", \"additionalProperties\" })\n+@EqualsAndHashCode\n+public class JmxTransTemplate implements Serializable, UnknownPropertyPreserving {\n+    private static final long serialVersionUID = 1L;\n+\n+    private ContainerTemplate jmxTransContainer;\n+    protected Map<String, Object> additionalProperties = new HashMap<>(0);\n+\n+    @Description(\"Template for JmxTrans container\")\n+    @JsonInclude(JsonInclude.Include.NON_EMPTY)\n+    public ContainerTemplate getJmxTransContainer() {\n+        return jmxTransContainer;\n+    }\n+\n+    public void setJmxTransContainer(ContainerTemplate tlsSidecarContainer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bca603d382fd29a902a9933957fed6c87db0b05"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA3MjY2Mw==", "bodyText": "Any reason why no to keep this in the template subpackage with the other template files?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2841#discussion_r409072663", "createdAt": "2020-04-15T19:10:56Z", "author": {"login": "scholzj"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/JmxTransTemplate.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+\n+package io.strimzi.api.kafka.model;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bca603d382fd29a902a9933957fed6c87db0b05"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA3MzQ4Mw==", "bodyText": "Since we are already adding it - it would be great to add also pod and deployment temlapate. We can do it in separate PR if you want - but since you are already adding this here might be easier to do everything.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2841#discussion_r409073483", "createdAt": "2020-04-15T19:12:26Z", "author": {"login": "scholzj"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/JmxTransTemplate.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+\n+package io.strimzi.api.kafka.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import io.strimzi.api.kafka.model.template.ContainerTemplate;\n+import io.strimzi.crdgenerator.annotations.Description;\n+import io.sundr.builder.annotations.Buildable;\n+import lombok.EqualsAndHashCode;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Representation of a template for JmxTrans resources.\n+ */\n+@Buildable(\n+        editableEnabled = false,\n+        builderPackage = Constants.FABRIC8_KUBERNETES_API\n+)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonPropertyOrder({ \"jmxTransContainer\", \"additionalProperties\" })\n+@EqualsAndHashCode\n+public class JmxTransTemplate implements Serializable, UnknownPropertyPreserving {\n+    private static final long serialVersionUID = 1L;\n+\n+    private ContainerTemplate jmxTransContainer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bca603d382fd29a902a9933957fed6c87db0b05"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA3NDI2MA==", "bodyText": "I guess it has some Kubernetes reference .... can we add the @KubeLink annotation to render it in the doc? It is done similarly in the PodSecurityContext in PodTemplate.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2841#discussion_r409074260", "createdAt": "2020-04-15T19:13:47Z", "author": {"login": "scholzj"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/template/ContainerTemplate.java", "diffHunk": "@@ -41,6 +43,16 @@ public void setEnv(List<ContainerEnvVar> env) {\n         this.env = env;\n     }\n \n+    @Description(\"Security context for the container\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bca603d382fd29a902a9933957fed6c87db0b05"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA3NTgwOA==", "bodyText": "Do we really need to test this? Is it not enough to test it in the pod template? It would allow us to remove the getTemplateTlsSidecarContainerSecurityContext() method. Just an idea, feel free to ignore if you think this is useful.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2841#discussion_r409075808", "createdAt": "2020-04-15T19:16:46Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/model/EntityOperatorTest.java", "diffHunk": "@@ -732,4 +738,124 @@ public void testTlsSidecarContainerEnvVarsConflict() {\n                 containerEnvVars.stream().filter(env -> testEnvOneKey.equals(env.getName()))\n                         .map(EnvVar::getValue).findFirst().orElse(\"\").equals(testEnvOneValue), is(false));\n     }\n+\n+    @Test\n+    public void testUserOperatorContainerSecurityContext() {\n+\n+        SecurityContext securityContext = new SecurityContextBuilder()\n+                .withPrivileged(false)\n+                .withNewReadOnlyRootFilesystem(false)\n+                .withAllowPrivilegeEscalation(false)\n+                .withRunAsNonRoot(true)\n+                .withNewCapabilities()\n+                    .addNewDrop(\"ALL\")\n+                .endCapabilities()\n+                .build();\n+\n+        Kafka resource = new KafkaBuilder(ResourceUtils.createKafkaCluster(namespace, cluster, replicas, image, healthDelay, healthTimeout))\n+                .editSpec()\n+                    .editOrNewEntityOperator()\n+                        .withTopicOperator(entityTopicOperatorSpec)\n+                        .withUserOperator(entityUserOperatorSpec)\n+                        .editOrNewTemplate()\n+                            .editOrNewUserOperatorContainer()\n+                                .withSecurityContext(securityContext)\n+                            .endUserOperatorContainer()\n+                        .endTemplate()\n+                    .endEntityOperator()\n+                .endSpec()\n+                .build();\n+\n+        EntityOperator eo =  EntityOperator.fromCrd(resource, VERSIONS);\n+\n+        assertThat(eo.getUserOperator().templateContainerSecurityContext, is(securityContext));\n+\n+        Deployment deployment = eo.generateDeployment(false, null, null, null);\n+\n+        assertThat(deployment.getSpec().getTemplate().getSpec().getContainers(),\n+                hasItem(allOf(\n+                        hasProperty(\"name\", equalTo(EntityUserOperator.USER_OPERATOR_CONTAINER_NAME)),\n+                        hasProperty(\"securityContext\", equalTo(securityContext))\n+                )));\n+    }\n+\n+    @Test\n+    public void testTopicOperatorContainerSecurityContext() {\n+\n+        SecurityContext securityContext = new SecurityContextBuilder()\n+                .withPrivileged(false)\n+                .withNewReadOnlyRootFilesystem(false)\n+                .withAllowPrivilegeEscalation(false)\n+                .withRunAsNonRoot(true)\n+                .withNewCapabilities()\n+                .addNewDrop(\"ALL\")\n+                .endCapabilities()\n+                .build();\n+\n+        Kafka resource = new KafkaBuilder(ResourceUtils.createKafkaCluster(namespace, cluster, replicas, image, healthDelay, healthTimeout))\n+                .editSpec()\n+                    .editOrNewEntityOperator()\n+                        .withTopicOperator(entityTopicOperatorSpec)\n+                        .withUserOperator(entityUserOperatorSpec)\n+                        .editOrNewTemplate()\n+                            .editOrNewTopicOperatorContainer()\n+                                .withSecurityContext(securityContext)\n+                            .endTopicOperatorContainer()\n+                        .endTemplate()\n+                    .endEntityOperator()\n+                .endSpec()\n+                .build();\n+\n+        EntityOperator eo =  EntityOperator.fromCrd(resource, VERSIONS);\n+\n+        assertThat(eo.getTopicOperator().templateContainerSecurityContext, is(securityContext));\n+\n+        Deployment deployment = eo.generateDeployment(false, null, null, null);\n+\n+        assertThat(deployment.getSpec().getTemplate().getSpec().getContainers(),\n+                hasItem(allOf(\n+                        hasProperty(\"name\", equalTo(EntityTopicOperator.TOPIC_OPERATOR_CONTAINER_NAME)),\n+                        hasProperty(\"securityContext\", equalTo(securityContext))\n+                )));\n+    }\n+\n+    @Test\n+    public void testTlsSidecarContainerSecurityContext() {\n+\n+        SecurityContext securityContext = new SecurityContextBuilder()\n+                .withPrivileged(false)\n+                .withNewReadOnlyRootFilesystem(false)\n+                .withAllowPrivilegeEscalation(false)\n+                .withRunAsNonRoot(true)\n+                .withNewCapabilities()\n+                    .addNewDrop(\"ALL\")\n+                .endCapabilities()\n+                .build();\n+\n+        Kafka resource = new KafkaBuilder(ResourceUtils.createKafkaCluster(namespace, cluster, replicas, image, healthDelay, healthTimeout))\n+                .editSpec()\n+                    .editOrNewEntityOperator()\n+                        .withTopicOperator(entityTopicOperatorSpec)\n+                        .withUserOperator(entityUserOperatorSpec)\n+                        .editOrNewTemplate()\n+                            .editOrNewTlsSidecarContainer()\n+                                .withSecurityContext(securityContext)\n+                            .endTlsSidecarContainer()\n+                        .endTemplate()\n+                    .endEntityOperator()\n+                .endSpec()\n+                .build();\n+\n+        EntityOperator eo =  EntityOperator.fromCrd(resource, VERSIONS);\n+\n+        assertThat(eo.getTemplateTlsSidecarContainerSecurityContext(), is(securityContext));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bca603d382fd29a902a9933957fed6c87db0b05"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA3NzM2NQ==", "bodyText": "I also wonder since this is. the main container in its pod if we should just call it container instead of jmxTransContainer. It is similar in the KafkaExporterTemplate for example.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2841#discussion_r409077365", "createdAt": "2020-04-15T19:19:26Z", "author": {"login": "scholzj"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/JmxTransTemplate.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+\n+package io.strimzi.api.kafka.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import io.strimzi.api.kafka.model.template.ContainerTemplate;\n+import io.strimzi.crdgenerator.annotations.Description;\n+import io.sundr.builder.annotations.Buildable;\n+import lombok.EqualsAndHashCode;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Representation of a template for JmxTrans resources.\n+ */\n+@Buildable(\n+        editableEnabled = false,\n+        builderPackage = Constants.FABRIC8_KUBERNETES_API\n+)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonPropertyOrder({ \"jmxTransContainer\", \"additionalProperties\" })\n+@EqualsAndHashCode\n+public class JmxTransTemplate implements Serializable, UnknownPropertyPreserving {\n+    private static final long serialVersionUID = 1L;\n+\n+    private ContainerTemplate jmxTransContainer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bca603d382fd29a902a9933957fed6c87db0b05"}, "originalPosition": 32}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9a44470d6cd54994a9051f91b98d2727064bad0c", "author": {"user": {"login": "samuel-hawker", "name": "Samuel Hawker"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/9a44470d6cd54994a9051f91b98d2727064bad0c", "committedDate": "2020-04-16T10:19:45Z", "message": "feat: Review comments + hasEntries\n\nAdded new deployment and pod templates to jmx\nWrote new tests for these\nRemoved redundant assertions\n\nSigned-off-by: Samuel Hawker <samuel.hawker@ibm.com>"}, "afterCommit": {"oid": "f7ef652d5ca863aec8ad6952ac50b4931a559313", "author": {"user": {"login": "samuel-hawker", "name": "Samuel Hawker"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/f7ef652d5ca863aec8ad6952ac50b4931a559313", "committedDate": "2020-04-16T10:22:34Z", "message": "feat: Review comments + hasEntries\n\nAdded new deployment and pod templates to jmx\nWrote new tests for these\nRemoved redundant assertions\n\nSigned-off-by: Samuel Hawker <samuel.hawker@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c985f9b3e14a076edb399bc5d36082c67c304fe6", "author": {"user": {"login": "samuel-hawker", "name": "Samuel Hawker"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c985f9b3e14a076edb399bc5d36082c67c304fe6", "committedDate": "2020-04-16T11:33:43Z", "message": "feat: Review comments + hasEntries\n\nAdded new deployment and pod templates to jmx\nWrote new tests for these\nRemoved redundant assertions\n\nSigned-off-by: Samuel Hawker <samuel.hawker@ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f7ef652d5ca863aec8ad6952ac50b4931a559313", "author": {"user": {"login": "samuel-hawker", "name": "Samuel Hawker"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/f7ef652d5ca863aec8ad6952ac50b4931a559313", "committedDate": "2020-04-16T10:22:34Z", "message": "feat: Review comments + hasEntries\n\nAdded new deployment and pod templates to jmx\nWrote new tests for these\nRemoved redundant assertions\n\nSigned-off-by: Samuel Hawker <samuel.hawker@ibm.com>"}, "afterCommit": {"oid": "c985f9b3e14a076edb399bc5d36082c67c304fe6", "author": {"user": {"login": "samuel-hawker", "name": "Samuel Hawker"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c985f9b3e14a076edb399bc5d36082c67c304fe6", "committedDate": "2020-04-16T11:33:43Z", "message": "feat: Review comments + hasEntries\n\nAdded new deployment and pod templates to jmx\nWrote new tests for these\nRemoved redundant assertions\n\nSigned-off-by: Samuel Hawker <samuel.hawker@ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NTQzOTQ5", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2841#pullrequestreview-394543949", "createdAt": "2020-04-16T11:32:57Z", "commit": {"oid": "f7ef652d5ca863aec8ad6952ac50b4931a559313"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMTozMjo1N1rOGGhBEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMTozMjo1N1rOGGhBEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4NTU4Ng==", "bodyText": "Just a nitpick .. but this looks like some typos in the too many is.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2841#discussion_r409485586", "createdAt": "2020-04-16T11:32:57Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/ResourceUtils.java", "diffHunk": "@@ -753,4 +758,32 @@ public static ClusterOperatorConfig dummyClusterOperatorConfig(long operationTim\n     public static ClusterOperatorConfig dummyClusterOperatorConfig() {\n         return dummyClusterOperatorConfig(new KafkaVersion.Lookup(emptyMap(), emptyMap(), emptyMap(), emptyMap(), emptyMap()));\n     }\n+\n+    /**\n+     * hasEntries is a custom matcher that checks is entries is a map whose entries", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7ef652d5ca863aec8ad6952ac50b4931a559313"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NjM3NDUy", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2841#pullrequestreview-394637452", "createdAt": "2020-04-16T13:34:51Z", "commit": {"oid": "ada1f47f632fadf3b39dafcca66442e6abf01659"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c2794a2cd8222f1f1eb813f97be39b750a1850f", "author": {"user": {"login": "samuel-hawker", "name": "Samuel Hawker"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/6c2794a2cd8222f1f1eb813f97be39b750a1850f", "committedDate": "2020-04-16T14:45:49Z", "message": "feat: Second review comments\n\nNew class for custom matchers\n\nSigned-off-by: Samuel Hawker <samuel.hawker@ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ada1f47f632fadf3b39dafcca66442e6abf01659", "author": {"user": {"login": "samuel-hawker", "name": "Samuel Hawker"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ada1f47f632fadf3b39dafcca66442e6abf01659", "committedDate": "2020-04-16T12:34:12Z", "message": "feat: Second review comments\n\nNew class for custom matchers\n\nSigned-off-by: Samuel Hawker <samuel.hawker@ibm.com>"}, "afterCommit": {"oid": "6c2794a2cd8222f1f1eb813f97be39b750a1850f", "author": {"user": {"login": "samuel-hawker", "name": "Samuel Hawker"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/6c2794a2cd8222f1f1eb813f97be39b750a1850f", "committedDate": "2020-04-16T14:45:49Z", "message": "feat: Second review comments\n\nNew class for custom matchers\n\nSigned-off-by: Samuel Hawker <samuel.hawker@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3913943a805a73f213e241833f6c4211b2315f20", "author": {"user": {"login": "samuel-hawker", "name": "Samuel Hawker"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3913943a805a73f213e241833f6c4211b2315f20", "committedDate": "2020-04-16T15:21:05Z", "message": "fix: Checkstyle\n\nSigned-off-by: Samuel Hawker <samuel.hawker@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73873553f801a8343ce9060ad2a487f3a331ab0e", "author": {"user": {"login": "scholzj", "name": "Jakub Scholz"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/73873553f801a8343ce9060ad2a487f3a331ab0e", "committedDate": "2020-04-16T16:47:43Z", "message": "Update CRDs in the Helm Chart\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MTg2MzEy", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2841#pullrequestreview-395186312", "createdAt": "2020-04-17T06:16:37Z", "commit": {"oid": "73873553f801a8343ce9060ad2a487f3a331ab0e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "685c479a186f08a48f2cecdd70f9a3501428329b", "author": {"user": {"login": "samuel-hawker", "name": "Samuel Hawker"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/685c479a186f08a48f2cecdd70f9a3501428329b", "committedDate": "2020-04-17T08:29:39Z", "message": "fix: Revert unneeded re-organized imports\n\nSigned-off-by: Samuel Hawker <samuel.hawker@ibm.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1871, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}