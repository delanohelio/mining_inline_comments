{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2ODkzNjgz", "number": 2771, "title": "[systemtest] Create ST cert manager, remake OpenSSL methods", "bodyText": "Type of change\n\nEnhancement / new feature\n\nDescription\nIn this PR I'll introduce our \"Systemtest certificate manager\" that will handle work with certificates in our tests. Now only for OpenSSL methods, for future is plan to move all cert related methods to the manager and have it all together.\nTODO list:\n[\u2714] Create a systemtest cert manager\n[\u2714] Move there OpenSSL methods\n[\u2714] Remake the OpenSSL methods\n[\u2714] Update testCertificates() in SecurityST\n\nChecklist\n\n Update testCertificates()\n Make sure all tests pass", "createdAt": "2020-04-01T10:07:47Z", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2771", "merged": true, "mergeCommit": {"oid": "7eb2db7e6bfcca84ab59038079a05f852d560f44"}, "closed": true, "closedAt": "2020-04-02T21:52:00Z", "author": {"login": "im-konge"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTUbo4AH2gAyMzk2ODkzNjgzOmM1ZTU5ZGU3OGEwYzEyYzk1YzRkZjkxOWEzOGY5MzIwOGRmYjFmZWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcToo5bgFqTM4NjI0MTUxNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c5e59de78a0c12c95c4df919a38f93208dfb1fea", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c5e59de78a0c12c95c4df919a38f93208dfb1fea", "committedDate": "2020-04-01T09:38:56Z", "message": "add new cert manager for systemtest\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d785b7f6755b3f805e6a7373116b2f312c03dc4", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/0d785b7f6755b3f805e6a7373116b2f312c03dc4", "committedDate": "2020-04-01T09:38:56Z", "message": "remake testCertificates() test and update systemtest cert manager\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NDQ5MDQ3", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2771#pullrequestreview-385449047", "createdAt": "2020-04-01T10:16:21Z", "commit": {"oid": "0d785b7f6755b3f805e6a7373116b2f312c03dc4"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDoxNjoyMVrOF-6DWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDoyOToxOVrOF-6gBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUwNzE2MQ==", "bodyText": "This does not have any relation with the SystemtestCertManager. It would be better to move these methods to the cmdKubeClient or just use cmdKubeClient().execInPodContainer.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2771#discussion_r401507161", "createdAt": "2020-04-01T10:16:21Z", "author": {"login": "see-quick"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/security/SystemtestCertManager.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.security;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static java.util.Arrays.asList;\n+\n+public class SystemtestCertManager {\n+\n+    private static final String KAFKA_CERT_FILE_PATH = \"/opt/kafka/broker-certs/\";\n+    private static final String ZK_CERT_FILE_PATH = \"/etc/tls-sidecar/zookeeper-nodes/\";\n+    private static final String KAFKA_CA_FILE_PATH = \"/opt/kafka/cluster-ca-certs/ca.crt\";\n+    private static final String ZK_CA_FILE_PATH = \"/etc/tls-sidecar/cluster-ca-certs/ca.crt\";\n+\n+    public SystemtestCertManager() {}\n+\n+    private List<String> generateOpenSSLCommand(String server, String caFilePath, String hostname) {\n+        return new ArrayList<>(asList(\"openssl\",\n+                \"s_client\",\n+                \"-connect\", server,\n+                \"-showcerts\",\n+                \"-CAfile\", caFilePath,\n+                \"-verify_hostname\", hostname\n+        ));\n+    }\n+\n+    public String openSSLCommandByResource(String podName, String hostname, String port, String customResource, String namespace) {\n+        return openSSLCommandByResource(podName + \".\" + hostname + \":\" + port,\n+                podName + \".\" + hostname + \".\" + namespace + \".svc.cluster.local\", podName, customResource, true);\n+    }\n+\n+    public String openSSLCommandByResource(String server, String hostname, String podName, String customResource) {\n+        return openSSLCommandByResource(server, hostname, podName, customResource, true);\n+    }\n+\n+    public String openSSLCommandByResource(String server, String hostname, String podName, String customResource, boolean withCertAndKey) {\n+        String path = customResource.equals(\"kafka\") ? KAFKA_CERT_FILE_PATH : ZK_CERT_FILE_PATH;\n+        String caFilePath = customResource.equals(\"kafka\") ? KAFKA_CA_FILE_PATH : ZK_CA_FILE_PATH;\n+        String output;\n+\n+        List<String> cmd = generateOpenSSLCommand(server, caFilePath, hostname);\n+\n+        if (withCertAndKey) {\n+            cmd.add(\"-cert \" + path + podName + \".crt\");\n+            cmd.add(\"-key \" + path + podName + \".key\");\n+        }\n+\n+        if (customResource.equals(\"kafka\")) {\n+            output = executeCommandInPod(cmd, podName);\n+        } else {\n+            output = executeCommandInContainer(cmd, podName, \"tls-sidecar\");\n+        }\n+        return output;\n+    }\n+\n+    public static String executeCommandInPod(List<String> cmd, String podName) {\n+        return cmdKubeClient().execInPod(podName, \"/bin/bash\", \"-c\", String.join(\" \", cmd)).out();\n+    }\n+\n+    public static String executeCommandInContainer(List<String> cmd, String podName, String container) {\n+        return cmdKubeClient().execInPodContainer(podName, container,  \"/bin/bash\", \"-c\",\n+                String.join(\" \", cmd)).out();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d785b7f6755b3f805e6a7373116b2f312c03dc4"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUwODU1Nw==", "bodyText": "I will go for this one...\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class SystemtestCertManager {\n          \n          \n            \n            public class SystemTestCertManager {", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2771#discussion_r401508557", "createdAt": "2020-04-01T10:18:42Z", "author": {"login": "see-quick"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/security/SystemtestCertManager.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.security;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static java.util.Arrays.asList;\n+\n+public class SystemtestCertManager {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d785b7f6755b3f805e6a7373116b2f312c03dc4"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUwOTEwNw==", "bodyText": "What about this method ?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2771#discussion_r401509107", "createdAt": "2020-04-01T10:19:38Z", "author": {"login": "see-quick"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/SecurityST.java", "diffHunk": "@@ -100,83 +101,56 @@\n     void testCertificates() {\n         LOGGER.info(\"Running testCertificates {}\", CLUSTER_NAME);\n         KafkaResource.kafkaEphemeral(CLUSTER_NAME, 2)\n-                .editSpec().editZookeeper().withReplicas(2).endZookeeper().endSpec().done();\n-        String commandForKafkaBootstrap = \"echo -n | openssl s_client -connect my-cluster-kafka-bootstrap:9093 -showcerts\" +\n-                \" -CAfile /opt/kafka/cluster-ca-certs/ca.crt\" +\n-                \" -verify_hostname my-cluster-kafka-bootstrap\";\n-\n-        String outputForKafkaBootstrap =\n-                cmdKubeClient().execInPod(KafkaResources.kafkaPodName(CLUSTER_NAME, 0),\n-                        \"/bin/bash\", \"-c\", commandForKafkaBootstrap).out();\n-        checkKafkaCertificates(outputForKafkaBootstrap);\n-\n-        String commandForZookeeperClient = \"echo -n | openssl s_client -connect my-cluster-zookeeper-client:2181 -showcerts\" +\n-                \" -CAfile /opt/kafka/cluster-ca-certs/ca.crt\" +\n-                \" -verify_hostname my-cluster-zookeeper-client\" +\n-                \" -cert /opt/kafka/broker-certs/my-cluster-kafka-0.crt\" +\n-                \" -key /opt/kafka/broker-certs/my-cluster-kafka-0.key\";\n-        String outputForZookeeperClient =\n-                cmdKubeClient().execInPod(KafkaResources.kafkaPodName(CLUSTER_NAME, 0),\n-                        \"/bin/bash\", \"-c\", commandForZookeeperClient).out();\n-        checkZookeeperCertificates(outputForZookeeperClient);\n+                .editSpec()\n+                    .editZookeeper()\n+                        .withReplicas(2)\n+                    .endZookeeper()\n+                .endSpec()\n+                .done();\n+\n+        SystemtestCertManager stCertManager = new SystemtestCertManager();\n+\n+        LOGGER.info(\"Check Kafka bootstrap certificate\");\n+        String outputCertificate = stCertManager.openSSLCommandByResource(\"my-cluster-kafka-bootstrap:9093\", \"my-cluster-kafka-bootstrap\",\n+                KafkaResources.kafkaPodName(CLUSTER_NAME, 0), \"kafka\", false);\n+        checkKafkaCertificates(outputCertificate);\n+\n+        LOGGER.info(\"Check zookeeper client certificate\");\n+        outputCertificate = stCertManager.openSSLCommandByResource(\"my-cluster-zookeeper-client:2181\", \"my-cluster-zookeeper-client\",\n+                KafkaResources.kafkaPodName(CLUSTER_NAME, 0), \"kafka\");\n+        checkZookeeperCertificates(outputCertificate);\n+\n+        List<String> kafkaPorts = new ArrayList<>(asList(\"9091\", \"9093\"));\n+        List<String> zkPorts = new ArrayList<>(asList(\"2181\", \"2888\", \"3888\"));\n \n         IntStream.rangeClosed(0, 1).forEach(podId -> {\n-            String commandForKafkaPort9091 = generateOpenSSLCommandWithKafkaCerts(KafkaResources.kafkaPodName(CLUSTER_NAME, podId), \"my-cluster-kafka-brokers\", \"9091\");\n-            String commandForKafkaPort9093 = generateOpenSSLCommandWithKafkaCerts(KafkaResources.kafkaPodName(CLUSTER_NAME, podId), \"my-cluster-kafka-brokers\", \"9093\");\n-\n-            String outputForKafkaPort9091 =\n-                    cmdKubeClient().execInPod(KafkaResources.kafkaPodName(CLUSTER_NAME, podId), \"/bin/bash\", \"-c\", commandForKafkaPort9091).out();\n-            String outputForKafkaPort9093 =\n-                    cmdKubeClient().execInPod(KafkaResources.kafkaPodName(CLUSTER_NAME, podId), \"/bin/bash\", \"-c\", commandForKafkaPort9093).out();\n-\n-            checkKafkaCertificates(outputForKafkaPort9091, outputForKafkaPort9093);\n-\n-            String commandForZookeeperPort2181 = generateOpenSSLCommandWithKafkaCerts(KafkaResources.zookeeperPodName(CLUSTER_NAME, podId), \"my-cluster-zookeeper-nodes\", \"2181\");\n-            String commandForZookeeperPort2888 = generateOpenSSLCommandWithZookeeperCerts(KafkaResources.zookeeperPodName(CLUSTER_NAME, podId), \"my-cluster-zookeeper-nodes\", \"2888\");\n-            String commandForZookeeperPort3888 = generateOpenSSLCommandWithZookeeperCerts(KafkaResources.zookeeperPodName(CLUSTER_NAME, podId), \"my-cluster-zookeeper-nodes\", \"3888\");\n-\n-            String outputForZookeeperPort2181 =\n-                    cmdKubeClient().execInPod(KafkaResources.kafkaPodName(CLUSTER_NAME, podId), \"/bin/bash\", \"-c\",\n-                            commandForZookeeperPort2181).out();\n-\n-            String outputForZookeeperPort3888 =\n-                    cmdKubeClient().execInPodContainer(KafkaResources.zookeeperPodName(CLUSTER_NAME, podId), \"tls-sidecar\",  \"/bin/bash\", \"-c\",\n-                            commandForZookeeperPort3888).out();\n-            checkZookeeperCertificates(outputForZookeeperPort2181, outputForZookeeperPort3888);\n-\n-            try {\n-                String outputForZookeeperPort2888 =\n-                        cmdKubeClient().execInPodContainer(KafkaResources.zookeeperPodName(CLUSTER_NAME, podId), \"tls-sidecar\", \"/bin/bash\", \"-c\",\n-                                commandForZookeeperPort2888).out();\n-                checkZookeeperCertificates(outputForZookeeperPort2888);\n-            } catch (KubeClusterException e) {\n-                if (e.result != null && e.result.returnCode() == 104) {\n-                    LOGGER.info(\"The connection for {} was forcibly closed because of new zookeeper leader\", KafkaResources.zookeeperPodName(CLUSTER_NAME, podId));\n-                } else {\n-                    throw new RuntimeException(e);\n+            String output;\n+\n+            LOGGER.info(\"Checking certificates for podId {}\", podId);\n+            for (String kafkaPort : kafkaPorts) {\n+                LOGGER.info(\"Check kafka certificate for port {}\", kafkaPort);\n+                output = stCertManager.openSSLCommandByResource(KafkaResources.kafkaPodName(CLUSTER_NAME, podId),\n+                        \"my-cluster-kafka-brokers\", kafkaPort, \"kafka\", NAMESPACE);\n+                checkKafkaCertificates(output);\n+            }\n+\n+            for (String zkPort : zkPorts) {\n+                try {\n+                    LOGGER.info(\"Check zookeeper certificate for port {}\", zkPort);\n+                    output = stCertManager.openSSLCommandByResource(KafkaResources.zookeeperPodName(CLUSTER_NAME, podId),\n+                            \"my-cluster-zookeeper-nodes\", zkPort, \"zookeeper\", NAMESPACE);\n+                    checkZookeeperCertificates(output);\n+                } catch (KubeClusterException e) {\n+                    if (e.result != null && e.result.returnCode() == 104) {\n+                        LOGGER.info(\"The connection for {} was forcibly closed because of new zookeeper leader\", KafkaResources.zookeeperPodName(CLUSTER_NAME, podId));\n+                    } else {\n+                        throw new RuntimeException(e);\n+                    }\n                 }\n             }\n         });\n     }\n \n-    private String generateOpenSSLCommandWithCAfile(String podName, String hostname, String port, String caFilePath) {\n-        return \"openssl s_client -connect \" + podName + \".\" + hostname + \":\" + port +\n-                \" -showcerts -CAfile \" + caFilePath +\n-                \" -verify_hostname \" + podName + \".\" + hostname + \".\" + NAMESPACE + \".svc.cluster.local\";\n-    }\n-\n-    private String generateOpenSSLCommandWithKafkaCerts(String podName, String hostname, String port) {\n-        return generateOpenSSLCommandWithCAfile(podName, hostname, port, \"/opt/kafka/cluster-ca-certs/ca.crt\") +\n-                \" -cert /opt/kafka/broker-certs/my-cluster-kafka-0.crt\" +\n-                \" -key /opt/kafka/broker-certs/my-cluster-kafka-0.key\";\n-    }\n-\n-    private String generateOpenSSLCommandWithZookeeperCerts(String podName, String hostname, String port) {\n-        return generateOpenSSLCommandWithCAfile(podName, hostname, port, \"/etc/tls-sidecar/cluster-ca-certs/ca.crt\") +\n-                \" -cert /etc/tls-sidecar/zookeeper-nodes/my-cluster-zookeeper-0.crt\" +\n-                \" -key /etc/tls-sidecar/zookeeper-nodes/my-cluster-zookeeper-0.key\";\n-    }\n-\n     private void checkKafkaCertificates(String... kafkaCertificates) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d785b7f6755b3f805e6a7373116b2f312c03dc4"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxMDQ4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    \"my-cluster-kafka-brokers\", kafkaPort, \"kafka\", NAMESPACE);\n          \n          \n            \n                                    KafkaResources.brokersServiceName(CLUSTER_NAME), kafkaPort, \"kafka\", NAMESPACE);", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2771#discussion_r401510482", "createdAt": "2020-04-01T10:22:02Z", "author": {"login": "see-quick"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/SecurityST.java", "diffHunk": "@@ -100,83 +101,56 @@\n     void testCertificates() {\n         LOGGER.info(\"Running testCertificates {}\", CLUSTER_NAME);\n         KafkaResource.kafkaEphemeral(CLUSTER_NAME, 2)\n-                .editSpec().editZookeeper().withReplicas(2).endZookeeper().endSpec().done();\n-        String commandForKafkaBootstrap = \"echo -n | openssl s_client -connect my-cluster-kafka-bootstrap:9093 -showcerts\" +\n-                \" -CAfile /opt/kafka/cluster-ca-certs/ca.crt\" +\n-                \" -verify_hostname my-cluster-kafka-bootstrap\";\n-\n-        String outputForKafkaBootstrap =\n-                cmdKubeClient().execInPod(KafkaResources.kafkaPodName(CLUSTER_NAME, 0),\n-                        \"/bin/bash\", \"-c\", commandForKafkaBootstrap).out();\n-        checkKafkaCertificates(outputForKafkaBootstrap);\n-\n-        String commandForZookeeperClient = \"echo -n | openssl s_client -connect my-cluster-zookeeper-client:2181 -showcerts\" +\n-                \" -CAfile /opt/kafka/cluster-ca-certs/ca.crt\" +\n-                \" -verify_hostname my-cluster-zookeeper-client\" +\n-                \" -cert /opt/kafka/broker-certs/my-cluster-kafka-0.crt\" +\n-                \" -key /opt/kafka/broker-certs/my-cluster-kafka-0.key\";\n-        String outputForZookeeperClient =\n-                cmdKubeClient().execInPod(KafkaResources.kafkaPodName(CLUSTER_NAME, 0),\n-                        \"/bin/bash\", \"-c\", commandForZookeeperClient).out();\n-        checkZookeeperCertificates(outputForZookeeperClient);\n+                .editSpec()\n+                    .editZookeeper()\n+                        .withReplicas(2)\n+                    .endZookeeper()\n+                .endSpec()\n+                .done();\n+\n+        SystemtestCertManager stCertManager = new SystemtestCertManager();\n+\n+        LOGGER.info(\"Check Kafka bootstrap certificate\");\n+        String outputCertificate = stCertManager.openSSLCommandByResource(\"my-cluster-kafka-bootstrap:9093\", \"my-cluster-kafka-bootstrap\",\n+                KafkaResources.kafkaPodName(CLUSTER_NAME, 0), \"kafka\", false);\n+        checkKafkaCertificates(outputCertificate);\n+\n+        LOGGER.info(\"Check zookeeper client certificate\");\n+        outputCertificate = stCertManager.openSSLCommandByResource(\"my-cluster-zookeeper-client:2181\", \"my-cluster-zookeeper-client\",\n+                KafkaResources.kafkaPodName(CLUSTER_NAME, 0), \"kafka\");\n+        checkZookeeperCertificates(outputCertificate);\n+\n+        List<String> kafkaPorts = new ArrayList<>(asList(\"9091\", \"9093\"));\n+        List<String> zkPorts = new ArrayList<>(asList(\"2181\", \"2888\", \"3888\"));\n \n         IntStream.rangeClosed(0, 1).forEach(podId -> {\n-            String commandForKafkaPort9091 = generateOpenSSLCommandWithKafkaCerts(KafkaResources.kafkaPodName(CLUSTER_NAME, podId), \"my-cluster-kafka-brokers\", \"9091\");\n-            String commandForKafkaPort9093 = generateOpenSSLCommandWithKafkaCerts(KafkaResources.kafkaPodName(CLUSTER_NAME, podId), \"my-cluster-kafka-brokers\", \"9093\");\n-\n-            String outputForKafkaPort9091 =\n-                    cmdKubeClient().execInPod(KafkaResources.kafkaPodName(CLUSTER_NAME, podId), \"/bin/bash\", \"-c\", commandForKafkaPort9091).out();\n-            String outputForKafkaPort9093 =\n-                    cmdKubeClient().execInPod(KafkaResources.kafkaPodName(CLUSTER_NAME, podId), \"/bin/bash\", \"-c\", commandForKafkaPort9093).out();\n-\n-            checkKafkaCertificates(outputForKafkaPort9091, outputForKafkaPort9093);\n-\n-            String commandForZookeeperPort2181 = generateOpenSSLCommandWithKafkaCerts(KafkaResources.zookeeperPodName(CLUSTER_NAME, podId), \"my-cluster-zookeeper-nodes\", \"2181\");\n-            String commandForZookeeperPort2888 = generateOpenSSLCommandWithZookeeperCerts(KafkaResources.zookeeperPodName(CLUSTER_NAME, podId), \"my-cluster-zookeeper-nodes\", \"2888\");\n-            String commandForZookeeperPort3888 = generateOpenSSLCommandWithZookeeperCerts(KafkaResources.zookeeperPodName(CLUSTER_NAME, podId), \"my-cluster-zookeeper-nodes\", \"3888\");\n-\n-            String outputForZookeeperPort2181 =\n-                    cmdKubeClient().execInPod(KafkaResources.kafkaPodName(CLUSTER_NAME, podId), \"/bin/bash\", \"-c\",\n-                            commandForZookeeperPort2181).out();\n-\n-            String outputForZookeeperPort3888 =\n-                    cmdKubeClient().execInPodContainer(KafkaResources.zookeeperPodName(CLUSTER_NAME, podId), \"tls-sidecar\",  \"/bin/bash\", \"-c\",\n-                            commandForZookeeperPort3888).out();\n-            checkZookeeperCertificates(outputForZookeeperPort2181, outputForZookeeperPort3888);\n-\n-            try {\n-                String outputForZookeeperPort2888 =\n-                        cmdKubeClient().execInPodContainer(KafkaResources.zookeeperPodName(CLUSTER_NAME, podId), \"tls-sidecar\", \"/bin/bash\", \"-c\",\n-                                commandForZookeeperPort2888).out();\n-                checkZookeeperCertificates(outputForZookeeperPort2888);\n-            } catch (KubeClusterException e) {\n-                if (e.result != null && e.result.returnCode() == 104) {\n-                    LOGGER.info(\"The connection for {} was forcibly closed because of new zookeeper leader\", KafkaResources.zookeeperPodName(CLUSTER_NAME, podId));\n-                } else {\n-                    throw new RuntimeException(e);\n+            String output;\n+\n+            LOGGER.info(\"Checking certificates for podId {}\", podId);\n+            for (String kafkaPort : kafkaPorts) {\n+                LOGGER.info(\"Check kafka certificate for port {}\", kafkaPort);\n+                output = stCertManager.openSSLCommandByResource(KafkaResources.kafkaPodName(CLUSTER_NAME, podId),\n+                        \"my-cluster-kafka-brokers\", kafkaPort, \"kafka\", NAMESPACE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d785b7f6755b3f805e6a7373116b2f312c03dc4"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxMTg1Mw==", "bodyText": "Please keep convention with camel-case so here...generateOpenSslCommand. Same applies on others.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2771#discussion_r401511853", "createdAt": "2020-04-01T10:24:28Z", "author": {"login": "see-quick"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/security/SystemtestCertManager.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.security;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static java.util.Arrays.asList;\n+\n+public class SystemtestCertManager {\n+\n+    private static final String KAFKA_CERT_FILE_PATH = \"/opt/kafka/broker-certs/\";\n+    private static final String ZK_CERT_FILE_PATH = \"/etc/tls-sidecar/zookeeper-nodes/\";\n+    private static final String KAFKA_CA_FILE_PATH = \"/opt/kafka/cluster-ca-certs/ca.crt\";\n+    private static final String ZK_CA_FILE_PATH = \"/etc/tls-sidecar/cluster-ca-certs/ca.crt\";\n+\n+    public SystemtestCertManager() {}\n+\n+    private List<String> generateOpenSSLCommand(String server, String caFilePath, String hostname) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d785b7f6755b3f805e6a7373116b2f312c03dc4"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxNDUwMQ==", "bodyText": "What do you mean by custom resource? Custom resource Kafka contains also Zookeeper so I would suggest renaming it to component or something else...What do you think @Frawless ?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2771#discussion_r401514501", "createdAt": "2020-04-01T10:29:19Z", "author": {"login": "see-quick"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/security/SystemtestCertManager.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.security;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static java.util.Arrays.asList;\n+\n+public class SystemtestCertManager {\n+\n+    private static final String KAFKA_CERT_FILE_PATH = \"/opt/kafka/broker-certs/\";\n+    private static final String ZK_CERT_FILE_PATH = \"/etc/tls-sidecar/zookeeper-nodes/\";\n+    private static final String KAFKA_CA_FILE_PATH = \"/opt/kafka/cluster-ca-certs/ca.crt\";\n+    private static final String ZK_CA_FILE_PATH = \"/etc/tls-sidecar/cluster-ca-certs/ca.crt\";\n+\n+    public SystemtestCertManager() {}\n+\n+    private List<String> generateOpenSSLCommand(String server, String caFilePath, String hostname) {\n+        return new ArrayList<>(asList(\"openssl\",\n+                \"s_client\",\n+                \"-connect\", server,\n+                \"-showcerts\",\n+                \"-CAfile\", caFilePath,\n+                \"-verify_hostname\", hostname\n+        ));\n+    }\n+\n+    public String openSSLCommandByResource(String podName, String hostname, String port, String customResource, String namespace) {\n+        return openSSLCommandByResource(podName + \".\" + hostname + \":\" + port,\n+                podName + \".\" + hostname + \".\" + namespace + \".svc.cluster.local\", podName, customResource, true);\n+    }\n+\n+    public String openSSLCommandByResource(String server, String hostname, String podName, String customResource) {\n+        return openSSLCommandByResource(server, hostname, podName, customResource, true);\n+    }\n+\n+    public String openSSLCommandByResource(String server, String hostname, String podName, String customResource, boolean withCertAndKey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d785b7f6755b3f805e6a7373116b2f312c03dc4"}, "originalPosition": 41}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ce40aa304eda77d9dfa5f1806b6b9b07a2393ac8", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ce40aa304eda77d9dfa5f1806b6b9b07a2393ac8", "committedDate": "2020-04-01T10:55:59Z", "message": "fixup! remake testCertificates() test and update systemtest cert manager\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}, "afterCommit": {"oid": "7f2dd04818851ea702cf76aae784b7036a282a3e", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/7f2dd04818851ea702cf76aae784b7036a282a3e", "committedDate": "2020-04-01T12:49:19Z", "message": "fixup! remake testCertificates() test and update systemtest cert manager\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NjI4Njg5", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2771#pullrequestreview-385628689", "createdAt": "2020-04-01T14:16:04Z", "commit": {"oid": "7f2dd04818851ea702cf76aae784b7036a282a3e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NzU0ODk4", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2771#pullrequestreview-385754898", "createdAt": "2020-04-01T16:31:52Z", "commit": {"oid": "7f2dd04818851ea702cf76aae784b7036a282a3e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1ODEyMzkx", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2771#pullrequestreview-385812391", "createdAt": "2020-04-01T17:46:32Z", "commit": {"oid": "7f2dd04818851ea702cf76aae784b7036a282a3e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3b0433c0a4a6d2a6ff687a00b8f85dc7560abe4", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c3b0433c0a4a6d2a6ff687a00b8f85dc7560abe4", "committedDate": "2020-04-01T18:43:24Z", "message": "fixup! remake testCertificates() test and update systemtest cert manager\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7f2dd04818851ea702cf76aae784b7036a282a3e", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/7f2dd04818851ea702cf76aae784b7036a282a3e", "committedDate": "2020-04-01T12:49:19Z", "message": "fixup! remake testCertificates() test and update systemtest cert manager\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}, "afterCommit": {"oid": "c3b0433c0a4a6d2a6ff687a00b8f85dc7560abe4", "author": {"user": null}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c3b0433c0a4a6d2a6ff687a00b8f85dc7560abe4", "committedDate": "2020-04-01T18:43:24Z", "message": "fixup! remake testCertificates() test and update systemtest cert manager\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MjQxNTE2", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2771#pullrequestreview-386241516", "createdAt": "2020-04-02T09:11:31Z", "commit": {"oid": "c3b0433c0a4a6d2a6ff687a00b8f85dc7560abe4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2158, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}