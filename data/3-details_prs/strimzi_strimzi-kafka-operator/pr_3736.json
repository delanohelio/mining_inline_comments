{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2MjkxMjIy", "number": 3736, "title": "[oauth] Test for maxSecondsWithoutReauthentication", "bodyText": "Signed-off-by: Lukas Kral lukywill16@gmail.com\nType of change\n\nNew tests\n\nDescription\nThis PR gonna add test for the maxSecondsWithoutReauthentication option added to the Oauth authorization. Firstly, I'm sending the messages with Dev Team A to the topic that starts with x- -> this should pass, as the Dev Team A have permissions to write into the topics that starts with the x-. After that, I'm changing the permissions of the Dev Team A to have only the Describe option, so the producer job will fail after the re-auth happen. At the end I'm changing the permissions back to it's original form and asserting that the messages will be correctly sent.\nChecklist\n\n Write tests\n Make sure all tests pass", "createdAt": "2020-10-01T14:10:28Z", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3736", "merged": true, "mergeCommit": {"oid": "010082168da7a8533c5d45ec6c28e8cce832abac"}, "closed": true, "closedAt": "2020-10-21T13:37:12Z", "author": {"login": "im-konge"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdOYFnlABqjM4MzE0ODUzNDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUtA7qAFqTUxMzY1MDcwNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6d460d3ce13c5bb6fb9a1286f61cd094373023d7", "author": {"user": {"login": "im-konge", "name": "Luk\u00e1\u0161 Kr\u00e1l"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/6d460d3ce13c5bb6fb9a1286f61cd094373023d7", "committedDate": "2020-10-01T14:07:50Z", "message": "add test for reauthentication\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>"}, "afterCommit": {"oid": "fef99dc7dc71e3ed8c66160a76d9d8a80ac7790f", "author": {"user": {"login": "im-konge", "name": "Luk\u00e1\u0161 Kr\u00e1l"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/fef99dc7dc71e3ed8c66160a76d9d8a80ac7790f", "committedDate": "2020-10-01T21:15:49Z", "message": "add test for reauthentication\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxODIzNzM5", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3736#pullrequestreview-501823739", "createdAt": "2020-10-05T08:23:45Z", "commit": {"oid": "85190d583f502d07c4c9fb2873efe0ccc480de85"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwODoyMzo0NVrOHcSY6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwODoyMzo0NVrOHcSY6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQyMzQ2Nw==", "bodyText": "Why do we need to do this? Looks like the tests behind it anyway don't do anything.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3736#discussion_r499423467", "createdAt": "2020-10-05T08:23:45Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/security/oauth/OauthAuthorizationST.java", "diffHunk": "@@ -260,23 +270,171 @@ void testSuperUserWithOauthAuthorization() {\n         ClientUtils.waitForClientSuccess(TEAM_A_CONSUMER_NAME, NAMESPACE, MESSAGE_COUNT);\n     }\n \n-    @Disabled(\"Will be implemented in next PR\")\n     @Test\n     @Order(7)\n+    void testSessionReAuthentication() {\n+        String topicName = TOPIC_X + \"-example-topic\";\n+        LOGGER.info(\"Verifying that team A producer is able to send messages to the {} topic -> the topic starting with 'x'\", topicName);\n+\n+        KafkaTopicResource.topic(CLUSTER_NAME, topicName).done();\n+\n+        teamAOauthClientJob = teamAOauthClientJob.toBuilder()\n+            .withTopicName(topicName)\n+            .withMessageCount(MESSAGE_COUNT)\n+            .build();\n+\n+        teamAOauthClientJob.producerStrimziOauthTls(CLUSTER_NAME).done();\n+        ClientUtils.waitForClientSuccess(TEAM_A_PRODUCER_NAME, NAMESPACE, MESSAGE_COUNT);\n+        JobUtils.deleteJobWithWait(NAMESPACE, TEAM_A_PRODUCER_NAME);\n+\n+        LOGGER.info(\"Adding the maxSecondsWithoutReauthentication to Kafka listener with OAuth authentication\");\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+            kafka.getSpec().getKafka().setListeners(new ArrayOrObjectKafkaListenersBuilder()\n+                .addNewGenericKafkaListener()\n+                    .withName(\"tls\")\n+                    .withPort(9093)\n+                    .withType(KafkaListenerType.INTERNAL)\n+                    .withTls(true)\n+                    .withNewKafkaListenerAuthenticationOAuth()\n+                        .withValidIssuerUri(keycloakInstance.getValidIssuerUri())\n+                        .withJwksExpirySeconds(keycloakInstance.getJwksExpireSeconds())\n+                        .withJwksRefreshSeconds(keycloakInstance.getJwksRefreshSeconds())\n+                        .withJwksEndpointUri(keycloakInstance.getJwksEndpointUri())\n+                        .withUserNameClaim(keycloakInstance.getUserNameClaim())\n+                        .withTlsTrustedCertificates(\n+                            new CertSecretSourceBuilder()\n+                                .withSecretName(KeycloakInstance.KEYCLOAK_SECRET_NAME)\n+                                .withCertificate(KeycloakInstance.KEYCLOAK_SECRET_CERT)\n+                                .build())\n+                        .withDisableTlsHostnameVerification(true)\n+                        .withMaxSecondsWithoutReauthentication(30)\n+                    .endKafkaListenerAuthenticationOAuth()\n+                .endGenericKafkaListener()\n+                .build());\n+        });\n+\n+        KafkaUtils.waitForKafkaReady(CLUSTER_NAME);\n+\n+        String baseUri = \"https://\" + keycloakInstance.getHttpsUri();\n+\n+        LOGGER.info(\"Setting the master realm token's lifespan to 3600s\");\n+\n+        // get admin token for all operation on realms\n+        String userName =  new String(Base64.getDecoder().decode(kubeClient().getSecret(\"credential-example-keycloak\").getData().get(\"ADMIN_USERNAME\").getBytes()));\n+        String password = new String(Base64.getDecoder().decode(kubeClient().getSecret(\"credential-example-keycloak\").getData().get(\"ADMIN_PASSWORD\").getBytes()));\n+        String token = KeycloakUtils.getToken(baseUri, userName, password);\n+\n+        // firstly we will increase token lifespan\n+        JsonObject masterRealm = KeycloakUtils.getKeycloakRealm(baseUri, token, \"master\");\n+        masterRealm.put(\"accessTokenLifespan\", \"3600\");\n+        KeycloakUtils.putConfigurationToRealm(baseUri, token, masterRealm, \"master\");\n+\n+        // now we need to get the token with new lifespan\n+        token = KeycloakUtils.getToken(baseUri, userName, password);\n+\n+        LOGGER.info(\"Getting the {} kafka client for obtaining the Dev A Team policy for the x topics\", TEST_REALM);\n+        // we need to get clients for kafka-authz realm to access auth policies in kafka client\n+        JsonArray kafkaAuthzRealm = KeycloakUtils.getKeycloakRealmClients(baseUri, token, TEST_REALM);\n+\n+        String kafkaClientId = \"\";\n+        for (Object client : kafkaAuthzRealm) {\n+            JsonObject clientObject = new JsonObject(client.toString());\n+            if (clientObject.getString(\"clientId\").equals(\"kafka\")) {\n+                kafkaClientId = clientObject.getString(\"id\");\n+            }\n+        }\n+\n+        teamAOauthClientJob = teamAOauthClientJob.toBuilder()\n+            .withDelayMs(1000)\n+            .build();\n+\n+        LOGGER.info(\"Deploying the Team A producer\");\n+        teamAOauthClientJob.producerStrimziOauthTls(CLUSTER_NAME).done();\n+\n+        JsonArray kafkaAuthzRealmPolicies = KeycloakUtils.getPoliciesFromRealmClient(baseUri, token, TEST_REALM, kafkaClientId);\n+\n+        JsonObject devAPolicy = new JsonObject();\n+        for (Object resource : kafkaAuthzRealmPolicies) {\n+            JsonObject resourceObject = new JsonObject(resource.toString());\n+            if (resourceObject.getValue(\"name\").toString().contains(\"Dev Team A can write to topics that start with x- on any cluster\")) {\n+                devAPolicy = resourceObject;\n+            }\n+        }\n+\n+        JsonObject newDevAPolicy = devAPolicy;\n+\n+        Map<String, String> config = new HashMap<>();\n+        config.put(\"resources\", \"[\\\"Topic:x-*\\\"]\");\n+        config.put(\"scopes\", \"[\\\"Describe\\\"]\");\n+        config.put(\"applyPolicies\", \"[\\\"Dev Team A\\\"]\");\n+\n+        newDevAPolicy.put(\"config\", config);\n+\n+        LOGGER.info(\"Changing the Dev Team A policy for topics starting with x- and checking that job will not be successful\");\n+        KeycloakUtils.updatePolicyOfRealmClient(baseUri, token, newDevAPolicy, TEST_REALM, kafkaClientId);\n+        assertThrows(WaitException.class, () -> ClientUtils.waitForClientSuccess(TEAM_A_PRODUCER_NAME, NAMESPACE, MESSAGE_COUNT));\n+\n+        JobUtils.deleteJobWithWait(NAMESPACE, TEAM_A_PRODUCER_NAME);\n+\n+        LOGGER.info(\"Changing back to the original settings and checking, if the producer will be successful\");\n+\n+        config.put(\"scopes\", \"[\\\"Describe\\\",\\\"Write\\\"]\");\n+        newDevAPolicy.put(\"config\", config);\n+\n+        KeycloakUtils.updatePolicyOfRealmClient(baseUri, token, newDevAPolicy, TEST_REALM, kafkaClientId);\n+        teamAOauthClientJob = teamAOauthClientJob.toBuilder()\n+            .withDelayMs(1000)\n+            .build();\n+\n+        teamAOauthClientJob.producerStrimziOauthTls(CLUSTER_NAME).done();\n+        ClientUtils.waitForClientSuccess(TEAM_A_PRODUCER_NAME, NAMESPACE, MESSAGE_COUNT);\n+        JobUtils.deleteJobWithWait(NAMESPACE, TEAM_A_PRODUCER_NAME);\n+\n+        LOGGER.info(\"Changing configuration of Kafka back to it's original form\");\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+            kafka.getSpec().getKafka().setListeners(new ArrayOrObjectKafkaListenersBuilder()\n+                .addNewGenericKafkaListener()\n+                    .withName(\"tls\")\n+                    .withPort(9093)\n+                    .withType(KafkaListenerType.INTERNAL)\n+                    .withTls(true)\n+                    .withNewKafkaListenerAuthenticationOAuth()\n+                        .withValidIssuerUri(keycloakInstance.getValidIssuerUri())\n+                        .withJwksExpirySeconds(keycloakInstance.getJwksExpireSeconds())\n+                        .withJwksRefreshSeconds(keycloakInstance.getJwksRefreshSeconds())\n+                        .withJwksEndpointUri(keycloakInstance.getJwksEndpointUri())\n+                        .withUserNameClaim(keycloakInstance.getUserNameClaim())\n+                        .withTlsTrustedCertificates(\n+                            new CertSecretSourceBuilder()\n+                                .withSecretName(KeycloakInstance.KEYCLOAK_SECRET_NAME)\n+                                .withCertificate(KeycloakInstance.KEYCLOAK_SECRET_CERT)\n+                                .build())\n+                        .withDisableTlsHostnameVerification(true)\n+                    .endKafkaListenerAuthenticationOAuth()\n+                .endGenericKafkaListener()\n+                .build());\n+        });\n+\n+        KafkaUtils.waitForKafkaReady(CLUSTER_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85190d583f502d07c4c9fb2873efe0ccc480de85"}, "originalPosition": 198}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxODk3MzQ1", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3736#pullrequestreview-501897345", "createdAt": "2020-10-05T09:56:14Z", "commit": {"oid": "85190d583f502d07c4c9fb2873efe0ccc480de85"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "96eee387729439fbd82abae5a77e38971aa4a3ff", "author": {"user": {"login": "im-konge", "name": "Luk\u00e1\u0161 Kr\u00e1l"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/96eee387729439fbd82abae5a77e38971aa4a3ff", "committedDate": "2020-10-05T14:33:49Z", "message": "add javadoc\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>"}, "afterCommit": {"oid": "5e3cde2fe75b7d94cfc9139b9602a6603da29937", "author": {"user": {"login": "im-konge", "name": "Luk\u00e1\u0161 Kr\u00e1l"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/5e3cde2fe75b7d94cfc9139b9602a6603da29937", "committedDate": "2020-10-05T14:37:36Z", "message": "add javadoc\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMTI5NTA0", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3736#pullrequestreview-502129504", "createdAt": "2020-10-05T14:43:13Z", "commit": {"oid": "96eee387729439fbd82abae5a77e38971aa4a3ff"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDo0NDoyNlrOHcgZZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNToyNTowNFrOHciNBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY1Mjk2Ng==", "bodyText": "Add that this is supposed to succeed. Is this to make sure the initial configuration is as expected or what?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3736#discussion_r499652966", "createdAt": "2020-10-05T14:44:26Z", "author": {"login": "mstruk"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/security/oauth/OauthAuthorizationST.java", "diffHunk": "@@ -260,23 +270,184 @@ void testSuperUserWithOauthAuthorization() {\n         ClientUtils.waitForClientSuccess(TEAM_A_CONSUMER_NAME, NAMESPACE, MESSAGE_COUNT);\n     }\n \n-    @Disabled(\"Will be implemented in next PR\")\n+    /**\n+     * 1) Try to send messages to topic starting with `x-` with producer from Dev Team A", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e3cde2fe75b7d94cfc9139b9602a6603da29937"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY1NDE2NA==", "bodyText": "Ok, so this activates the expiry checking on tokens, and will cause automatic client reauthentication when the maxSecondsWithoutReauthentication is reached.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3736#discussion_r499654164", "createdAt": "2020-10-05T14:46:03Z", "author": {"login": "mstruk"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/security/oauth/OauthAuthorizationST.java", "diffHunk": "@@ -260,23 +270,184 @@ void testSuperUserWithOauthAuthorization() {\n         ClientUtils.waitForClientSuccess(TEAM_A_CONSUMER_NAME, NAMESPACE, MESSAGE_COUNT);\n     }\n \n-    @Disabled(\"Will be implemented in next PR\")\n+    /**\n+     * 1) Try to send messages to topic starting with `x-` with producer from Dev Team A\n+     * 2) Change the Oauth listener configuration -> add the maxSecondsWithoutReauthentication set to 30s", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e3cde2fe75b7d94cfc9139b9602a6603da29937"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY1NDk0Mg==", "bodyText": "So this keeps running in the background, sending a message every second until it fails?\nOk, so I guess here we assume that now reauthentication is enabled - we are not testing here if we have successfully enabled it (maybe we didn't), we assume that it is enabled now and now we want to run the test for more than 30 seconds in order for reauthentication to kick in and we want to see the producer keep sending messages beyond 30 seconds.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3736#discussion_r499654942", "createdAt": "2020-10-05T14:47:00Z", "author": {"login": "mstruk"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/security/oauth/OauthAuthorizationST.java", "diffHunk": "@@ -260,23 +270,184 @@ void testSuperUserWithOauthAuthorization() {\n         ClientUtils.waitForClientSuccess(TEAM_A_CONSUMER_NAME, NAMESPACE, MESSAGE_COUNT);\n     }\n \n-    @Disabled(\"Will be implemented in next PR\")\n+    /**\n+     * 1) Try to send messages to topic starting with `x-` with producer from Dev Team A\n+     * 2) Change the Oauth listener configuration -> add the maxSecondsWithoutReauthentication set to 30s\n+     * 3) Try to send messages with delay of 1000ms (in the meantime, the permissions configuration will be changed)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e3cde2fe75b7d94cfc9139b9602a6603da29937"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY1NjU0Nw==", "bodyText": "Here it would be nice if some idea of why we are doing this and how it fits into testing reauthentication is outlined. It seems to me that we are conflating the refreshing of grants with reauthentication into a single test where if something fails the failure can't clearly tell us what's wrong. The connection between reauthentication and fetching of grants is that the fetching of grants will fail if the access token is expired, and reauthentication prevents access token from expiring. It's unclear what the access token time to live is (that's kafka-authz realm, not master realm), but if it is longer than 30 seconds, and reauthentication with 30s is enabled, then the token will never expire and re-fetching the grants will succeed. If reauthentication is not enabled then the token will expire eventually and the fetching of grants will fail after the token expires, but the test may not wait that long in any case.\nI guess that we assume that the enabling of reauthentication properly works and in that case we expect that token should never expire.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3736#discussion_r499656547", "createdAt": "2020-10-05T14:49:10Z", "author": {"login": "mstruk"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/security/oauth/OauthAuthorizationST.java", "diffHunk": "@@ -260,23 +270,184 @@ void testSuperUserWithOauthAuthorization() {\n         ClientUtils.waitForClientSuccess(TEAM_A_CONSUMER_NAME, NAMESPACE, MESSAGE_COUNT);\n     }\n \n-    @Disabled(\"Will be implemented in next PR\")\n+    /**\n+     * 1) Try to send messages to topic starting with `x-` with producer from Dev Team A\n+     * 2) Change the Oauth listener configuration -> add the maxSecondsWithoutReauthentication set to 30s\n+     * 3) Try to send messages with delay of 1000ms (in the meantime, the permissions configuration will be changed)\n+     * 4) Get all configuration from the Keycloak (realms, policies) and change the policy so the Dev Team A producer should not be able to send messages to the topic\n+     *      starting with `x-` -> updating the policy through the Keycloak API", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e3cde2fe75b7d94cfc9139b9602a6603da29937"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY4MjU2Ng==", "bodyText": "The question here is in which cases will WaitException occur. Can it occur because the broker is slow or connection with broker is slow? If so the thing will fail due to something else - not due to TopicAuthorizationException. In that case the test will pass even though it didn't properly execute. You have to actually get to the underlying reason for failure, WaitException may not be enough to properly test the expected behaviour here.\nBut most of all, as far as I can see this test rather than test if reauthentication is activated, assumes that it is activated and properly working, and then tests some expected behavior on top of that assumption. It does not test reauthentication. It tests refreshing of grants under the assumption that reauthentication is active and working as assumed. There may be a bug in how Kafka CR is turned into Kafka Broker /tmp/strimzi.properties and even though you activate reauthentication in Kafka CR it may not actually be enabled in Kafka Broker. This test might (depending on the access token timeout) pass even if reauthentication isn't actually activated.\nIt might even pass (to my understanding, as described above) if the test cluster is simply slow and unresponsive.\nI said that testing this was tricky, so it should be worked out in a document before attempting to write a complicated test. This test will probably pass even if reauthentication doesn't work at all.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3736#discussion_r499682566", "createdAt": "2020-10-05T15:25:04Z", "author": {"login": "mstruk"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/security/oauth/OauthAuthorizationST.java", "diffHunk": "@@ -260,23 +270,184 @@ void testSuperUserWithOauthAuthorization() {\n         ClientUtils.waitForClientSuccess(TEAM_A_CONSUMER_NAME, NAMESPACE, MESSAGE_COUNT);\n     }\n \n-    @Disabled(\"Will be implemented in next PR\")\n+    /**\n+     * 1) Try to send messages to topic starting with `x-` with producer from Dev Team A\n+     * 2) Change the Oauth listener configuration -> add the maxSecondsWithoutReauthentication set to 30s\n+     * 3) Try to send messages with delay of 1000ms (in the meantime, the permissions configuration will be changed)\n+     * 4) Get all configuration from the Keycloak (realms, policies) and change the policy so the Dev Team A producer should not be able to send messages to the topic\n+     *      starting with `x-` -> updating the policy through the Keycloak API\n+     * 5) Wait for the WaitException to appear -> as the producer doesn't have permission for sending messages, the\n+     *      job will be in error state", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e3cde2fe75b7d94cfc9139b9602a6603da29937"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "049f4fc0fccff69bb9a441626791026d5b6bc097", "author": {"user": {"login": "im-konge", "name": "Luk\u00e1\u0161 Kr\u00e1l"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/049f4fc0fccff69bb9a441626791026d5b6bc097", "committedDate": "2020-10-20T07:57:15Z", "message": "add test for reauthentication\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3fd2d07bd0d84eb07b608c31d070de7b5c9caff", "author": {"user": {"login": "im-konge", "name": "Luk\u00e1\u0161 Kr\u00e1l"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a3fd2d07bd0d84eb07b608c31d070de7b5c9caff", "committedDate": "2020-10-20T07:57:15Z", "message": "some improvements\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71625df447d67b3d71aef9773762dfe6153b2afd", "author": {"user": {"login": "im-konge", "name": "Luk\u00e1\u0161 Kr\u00e1l"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/71625df447d67b3d71aef9773762dfe6153b2afd", "committedDate": "2020-10-20T07:57:15Z", "message": "fixup! some improvements\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af71898a3a95ae2d2958d284b820a699b7b94119", "author": {"user": {"login": "im-konge", "name": "Luk\u00e1\u0161 Kr\u00e1l"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/af71898a3a95ae2d2958d284b820a699b7b94119", "committedDate": "2020-10-20T07:57:15Z", "message": "add javadoc\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48b700e8d7864e17e8dfee3a7c4a8f1f0b952d63", "author": {"user": {"login": "im-konge", "name": "Luk\u00e1\u0161 Kr\u00e1l"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/48b700e8d7864e17e8dfee3a7c4a8f1f0b952d63", "committedDate": "2020-10-21T09:09:49Z", "message": "some fixes and enhancements\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5e3cde2fe75b7d94cfc9139b9602a6603da29937", "author": {"user": {"login": "im-konge", "name": "Luk\u00e1\u0161 Kr\u00e1l"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/5e3cde2fe75b7d94cfc9139b9602a6603da29937", "committedDate": "2020-10-05T14:37:36Z", "message": "add javadoc\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>"}, "afterCommit": {"oid": "48b700e8d7864e17e8dfee3a7c4a8f1f0b952d63", "author": {"user": {"login": "im-konge", "name": "Luk\u00e1\u0161 Kr\u00e1l"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/48b700e8d7864e17e8dfee3a7c4a8f1f0b952d63", "committedDate": "2020-10-21T09:09:49Z", "message": "some fixes and enhancements\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fff6ebbe1a7fb77e8ebeb33a1ff391e68aa0ce6b", "author": {"user": {"login": "im-konge", "name": "Luk\u00e1\u0161 Kr\u00e1l"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/fff6ebbe1a7fb77e8ebeb33a1ff391e68aa0ce6b", "committedDate": "2020-10-21T09:28:38Z", "message": "fixup! some fixes and enhancements\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzNDkzMDQw", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3736#pullrequestreview-513493040", "createdAt": "2020-10-21T09:41:26Z", "commit": {"oid": "fff6ebbe1a7fb77e8ebeb33a1ff391e68aa0ce6b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fc5bbc77a515d61caaa14ff5f4c5d3c821d78ca", "author": {"user": {"login": "im-konge", "name": "Luk\u00e1\u0161 Kr\u00e1l"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/8fc5bbc77a515d61caaa14ff5f4c5d3c821d78ca", "committedDate": "2020-10-21T10:07:09Z", "message": "add javadoc for keycloak methods\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzNjUwNzA3", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3736#pullrequestreview-513650707", "createdAt": "2020-10-21T13:02:28Z", "commit": {"oid": "8fc5bbc77a515d61caaa14ff5f4c5d3c821d78ca"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1017, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}