{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwMDc0Mzc2", "number": 2496, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwODo0MTo1OFrODcjbOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODoyMjoxN1rODd8Zig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjY3MTI5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/strimzi/api/kafka/model/status/ConnectorStatus.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwODo0MTo1OFrOFkpsbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjo0NDowN1rOFnDSiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk3NjE3Mw==", "bodyText": "How does this fit with the KafkaConnectorStatus class? It seems there is some overlap, I wonder if we can reuse it or something.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2496#discussion_r373976173", "createdAt": "2020-02-03T08:41:58Z", "author": {"login": "scholzj"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/status/ConnectorStatus.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.api.kafka.model.status;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+\n+import io.strimzi.api.kafka.model.UnknownPropertyPreserving;\n+import io.strimzi.crdgenerator.annotations.Description;\n+import io.sundr.builder.annotations.Buildable;\n+import lombok.EqualsAndHashCode;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Representation of the status of a connector in the Kafka MirrorMaker 2.0 deployment\n+ */\n+@Buildable(\n+        editableEnabled = false,\n+        generateBuilderPackage = false,\n+        builderPackage = \"io.fabric8.kubernetes.api.builder\"\n+)\n+@JsonInclude(JsonInclude.Include.NON_DEFAULT)\n+@JsonPropertyOrder({ \"name\", \"status\" })\n+@EqualsAndHashCode\n+public class ConnectorStatus implements Serializable, UnknownPropertyPreserving {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b47c336df743597aed48494fd2d841929d319578"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ5MjY4MQ==", "bodyText": "I have updated the CrdGenerator to support a list of java.util.Map object, which makes the KafkaMirrorMaker2Status class more closely line up with the KafkaConnectorStatus and means this class (ConnectorStatus) can be removed from this PR.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2496#discussion_r376492681", "createdAt": "2020-02-07T16:44:07Z", "author": {"login": "ajborley"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/status/ConnectorStatus.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.api.kafka.model.status;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+\n+import io.strimzi.api.kafka.model.UnknownPropertyPreserving;\n+import io.strimzi.crdgenerator.annotations.Description;\n+import io.sundr.builder.annotations.Buildable;\n+import lombok.EqualsAndHashCode;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Representation of the status of a connector in the Kafka MirrorMaker 2.0 deployment\n+ */\n+@Buildable(\n+        editableEnabled = false,\n+        generateBuilderPackage = false,\n+        builderPackage = \"io.fabric8.kubernetes.api.builder\"\n+)\n+@JsonInclude(JsonInclude.Include.NON_DEFAULT)\n+@JsonPropertyOrder({ \"name\", \"status\" })\n+@EqualsAndHashCode\n+public class ConnectorStatus implements Serializable, UnknownPropertyPreserving {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk3NjE3Mw=="}, "originalCommit": {"oid": "b47c336df743597aed48494fd2d841929d319578"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzI0ODc0OnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaMirrorMaker2AssemblyOperator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODoyMjoxN1rOFm1VOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjo0NToyM1rOFnDU6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2Mzk5NQ==", "bodyText": "This looks to be more or less identical to the code we use for KafkaConnectors. Can we factor out a common method?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2496#discussion_r376263995", "createdAt": "2020-02-07T08:22:17Z", "author": {"login": "tombentley"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaMirrorMaker2AssemblyOperator.java", "diffHunk": "@@ -358,6 +362,47 @@ private static void addClusterToMirrorMaker2ConnectorConfig(Map<String, Object>\n         config.putAll(cluster.getAdditionalProperties());\n     }\n \n+    private Future<Map<String, Object>> reconcileMirrorMaker2Connector(Reconciliation reconciliation, KafkaMirrorMaker2 mirrorMaker2, KafkaConnectApi apiClient, String host, String connectorName, KafkaConnectorSpec connectorSpec, KafkaMirrorMaker2Status mirrorMaker2Status) {\n+        return apiClient.createOrUpdatePutRequest(host, KafkaConnectCluster.REST_API_PORT, connectorName, asJson(connectorSpec))\n+                .compose(ignored -> apiClient.statusWithBackOff(new BackOff(200L, 2, 6), host, KafkaConnectCluster.REST_API_PORT, connectorName))\n+                .compose(status -> {\n+                    Object path = ((Map) status.getOrDefault(\"connector\", emptyMap())).get(\"state\");\n+                    if (!(path instanceof String)) {\n+                        return Future.failedFuture(\"JSON response lacked $.connector.state\");\n+                    } else {\n+                        String state = (String) path;\n+                        boolean shouldPause = Boolean.TRUE.equals(connectorSpec.getPause());\n+                        if (\"RUNNING\".equals(state) && shouldPause) {\n+                            log.debug(\"{}: Pausing connector {}\", reconciliation, connectorName);\n+                            return apiClient.pause(host, KafkaConnectCluster.REST_API_PORT, connectorName)\n+                                    .compose(ignored ->\n+                                            apiClient.status(host, KafkaConnectCluster.REST_API_PORT,\n+                                                    connectorName));\n+                        } else if (\"PAUSED\".equals(state) && !shouldPause) {\n+                            log.debug(\"{}: Resuming connector {}\", reconciliation, connectorName);\n+                            return apiClient.resume(host, KafkaConnectCluster.REST_API_PORT,\n+                                    connectorName)\n+                                    .compose(ignored ->\n+                                            apiClient.status(host, KafkaConnectCluster.REST_API_PORT,\n+                                                    connectorName));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b47c336df743597aed48494fd2d841929d319578"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ5MzI5MA==", "bodyText": "Agreed - the latest commit factors out the common code.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2496#discussion_r376493290", "createdAt": "2020-02-07T16:45:23Z", "author": {"login": "ajborley"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaMirrorMaker2AssemblyOperator.java", "diffHunk": "@@ -358,6 +362,47 @@ private static void addClusterToMirrorMaker2ConnectorConfig(Map<String, Object>\n         config.putAll(cluster.getAdditionalProperties());\n     }\n \n+    private Future<Map<String, Object>> reconcileMirrorMaker2Connector(Reconciliation reconciliation, KafkaMirrorMaker2 mirrorMaker2, KafkaConnectApi apiClient, String host, String connectorName, KafkaConnectorSpec connectorSpec, KafkaMirrorMaker2Status mirrorMaker2Status) {\n+        return apiClient.createOrUpdatePutRequest(host, KafkaConnectCluster.REST_API_PORT, connectorName, asJson(connectorSpec))\n+                .compose(ignored -> apiClient.statusWithBackOff(new BackOff(200L, 2, 6), host, KafkaConnectCluster.REST_API_PORT, connectorName))\n+                .compose(status -> {\n+                    Object path = ((Map) status.getOrDefault(\"connector\", emptyMap())).get(\"state\");\n+                    if (!(path instanceof String)) {\n+                        return Future.failedFuture(\"JSON response lacked $.connector.state\");\n+                    } else {\n+                        String state = (String) path;\n+                        boolean shouldPause = Boolean.TRUE.equals(connectorSpec.getPause());\n+                        if (\"RUNNING\".equals(state) && shouldPause) {\n+                            log.debug(\"{}: Pausing connector {}\", reconciliation, connectorName);\n+                            return apiClient.pause(host, KafkaConnectCluster.REST_API_PORT, connectorName)\n+                                    .compose(ignored ->\n+                                            apiClient.status(host, KafkaConnectCluster.REST_API_PORT,\n+                                                    connectorName));\n+                        } else if (\"PAUSED\".equals(state) && !shouldPause) {\n+                            log.debug(\"{}: Resuming connector {}\", reconciliation, connectorName);\n+                            return apiClient.resume(host, KafkaConnectCluster.REST_API_PORT,\n+                                    connectorName)\n+                                    .compose(ignored ->\n+                                            apiClient.status(host, KafkaConnectCluster.REST_API_PORT,\n+                                                    connectorName));\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2Mzk5NQ=="}, "originalCommit": {"oid": "b47c336df743597aed48494fd2d841929d319578"}, "originalPosition": 99}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 689, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}