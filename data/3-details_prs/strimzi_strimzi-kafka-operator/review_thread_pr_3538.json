{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyMzE2ODk5", "number": 3538, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzoxOToyN1rOEbb7BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNDowMjo0N1rOEclzuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjA0NDg1OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/kafkaclients/KafkaClientProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzoxOToyN1rOHFXduQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzoxOToyN1rOHFXduQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM4OTM2OQ==", "bodyText": "This can be removed :)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3538#discussion_r475389369", "createdAt": "2020-08-24T07:19:27Z", "author": {"login": "see-quick"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/kafkaclients/KafkaClientProperties.java", "diffHunk": "@@ -204,7 +198,7 @@ public KafkaClientPropertiesBuilder withSaslJassConfigAndTls(String clientId, St\n \n             try {\n                 importKeycloakCertificateToTruststore(properties);\n-                fixBadlyImportedAuthzSettings();\n+//                fixBadlyImportedAuthzSettings();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff8b5cb566b864b6996f2542d571f7569b710d1a"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjA1MDk4OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/security/oauth/OauthAbstractST.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzoyMToyMVrOHFXhNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzozNToyN1rOHFX7xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5MDI2Mw==", "bodyText": "Do we still need this?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3538#discussion_r475390263", "createdAt": "2020-08-24T07:21:21Z", "author": {"login": "see-quick"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/security/oauth/OauthAbstractST.java", "diffHunk": "@@ -71,73 +70,62 @@ void setup() throws Exception {\n \n         LOGGER.info(\"Deploying keycloak...\");\n \n-        KeycloakUtils.deployKeycloak().done();\n+        KeycloakUtils.deployKeycloak(NAMESPACE);\n \n         // https\n-        Service keycloakService = KubernetesResource.deployKeycloakNodePortService(NAMESPACE);\n+        Service keycloakService = KubernetesResource.createKeycloakNodePortService(NAMESPACE);\n         KubernetesResource.createServiceResource(keycloakService, NAMESPACE);\n         ServiceUtils.waitForNodePortService(keycloakService.getMetadata().getName());\n \n         // http\n-        Service keycloakHttpService = KubernetesResource.deployKeycloakNodePortHttpService(NAMESPACE);\n+        Service keycloakHttpService = KubernetesResource.createKeycloakNodePortHttpService(NAMESPACE);\n         KubernetesResource.createServiceResource(keycloakHttpService, NAMESPACE);\n         ServiceUtils.waitForNodePortService(keycloakHttpService.getMetadata().getName());\n \n-        keycloakInstance = new KeycloakInstance(\"admin\", \"admin\");\n-        clusterHost = kubeClient().getNodeAddress();\n-\n-        LOGGER.info(\"Importing basic realm\");\n-        keycloakInstance.importRealm(\"../systemtest/src/test/resources/oauth2/create_realm.sh\");\n-\n-        LOGGER.info(\"Importing authorization realm\");\n-\n-        keycloakInstance.importRealm(\"../systemtest/src/test/resources/oauth2/create_realm_authorization.sh\");\n+        String passwordEncoded = kubeClient().getSecret(\"credential-example-keycloak\").getData().get(\"ADMIN_PASSWORD\");\n+        String password = new String(Base64.getDecoder().decode(passwordEncoded.getBytes()));\n+        keycloakInstance = new KeycloakInstance(\"admin\", password);\n \n-        String keycloakPodName = kubeClient().listPodsByPrefixInName(\"keycloak-\").get(0).getMetadata().getName();\n-\n-        String pubKey = ResourceManager.cmdKubeClient().execInPod(keycloakPodName, \"keytool\", \"-exportcert\", \"-keystore\",\n-            \"/opt/jboss/keycloak/standalone/configuration/application.keystore\", \"-alias\", \"server\", \"-storepass\", \"password\", \"-rfc\").out();\n-\n-        SecretUtils.createSecret(SECRET_OF_KEYCLOAK, CERTIFICATE_OF_KEYCLOAK, new String(Base64.getEncoder().encode(pubKey.getBytes()), StandardCharsets.US_ASCII));\n+        clusterHost = kubeClient().getNodeAddress();\n \n         KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 1)\n-                .editSpec()\n-                    .editKafka()\n-                        .editListeners()\n-                            .withNewTls()\n-                                .withNewKafkaListenerAuthenticationOAuth()\n-                                    .withValidIssuerUri(keycloakInstance.getValidIssuerUri())\n-                                    .withJwksExpirySeconds(keycloakInstance.getJwksExpireSeconds())\n-                                    .withJwksRefreshSeconds(keycloakInstance.getJwksRefreshSeconds())\n-                                    .withJwksEndpointUri(keycloakInstance.getJwksEndpointUri())\n-                                    .withUserNameClaim(keycloakInstance.getUserNameClaim())\n-                                    .withTlsTrustedCertificates(\n-                                        new CertSecretSourceBuilder()\n-                                            .withSecretName(SECRET_OF_KEYCLOAK)\n-                                            .withCertificate(CERTIFICATE_OF_KEYCLOAK)\n-                                            .build())\n-                                    .withDisableTlsHostnameVerification(true)\n-                                .endKafkaListenerAuthenticationOAuth()\n-                            .endTls()\n-                            .withNewKafkaListenerExternalNodePort()\n-                                .withNewKafkaListenerAuthenticationOAuth()\n-                                    .withValidIssuerUri(keycloakInstance.getValidIssuerUri())\n-                                    .withJwksExpirySeconds(keycloakInstance.getJwksExpireSeconds())\n-                                    .withJwksRefreshSeconds(keycloakInstance.getJwksRefreshSeconds())\n-                                    .withJwksEndpointUri(keycloakInstance.getJwksEndpointUri())\n-                                    .withUserNameClaim(keycloakInstance.getUserNameClaim())\n-                                    .withTlsTrustedCertificates(\n-                                        new CertSecretSourceBuilder()\n-                                            .withSecretName(SECRET_OF_KEYCLOAK)\n-                                            .withCertificate(CERTIFICATE_OF_KEYCLOAK)\n-                                            .build())\n-                                    .withDisableTlsHostnameVerification(true)\n-                                .endKafkaListenerAuthenticationOAuth()\n-                            .endKafkaListenerExternalNodePort()\n-                        .endListeners()\n-                    .endKafka()\n-                .endSpec()\n-                .done();\n+            .editSpec()\n+                .editKafka()\n+                    .editListeners()\n+                        .withNewTls()\n+                            .withNewKafkaListenerAuthenticationOAuth()\n+                                .withValidIssuerUri(keycloakInstance.getValidIssuerUri())\n+                                .withJwksExpirySeconds(keycloakInstance.getJwksExpireSeconds())\n+                                .withJwksRefreshSeconds(keycloakInstance.getJwksRefreshSeconds())\n+                                .withJwksEndpointUri(keycloakInstance.getJwksEndpointUri())\n+                                .withUserNameClaim(keycloakInstance.getUserNameClaim())\n+                                .withTlsTrustedCertificates(\n+                                    new CertSecretSourceBuilder()\n+                                        .withSecretName(SECRET_OF_KEYCLOAK)\n+                                        .withCertificate(CERTIFICATE_OF_KEYCLOAK)\n+                                        .build())\n+                                .withDisableTlsHostnameVerification(true)\n+                            .endKafkaListenerAuthenticationOAuth()\n+                        .endTls()\n+                        .withNewKafkaListenerExternalNodePort()\n+                            .withNewKafkaListenerAuthenticationOAuth()\n+                                .withValidIssuerUri(keycloakInstance.getValidIssuerUri())\n+                                .withJwksExpirySeconds(keycloakInstance.getJwksExpireSeconds())\n+                                .withJwksRefreshSeconds(keycloakInstance.getJwksRefreshSeconds())\n+                                .withJwksEndpointUri(keycloakInstance.getJwksEndpointUri())\n+                                .withUserNameClaim(keycloakInstance.getUserNameClaim())\n+                                .withTlsTrustedCertificates(\n+                                    new CertSecretSourceBuilder()\n+                                        .withSecretName(SECRET_OF_KEYCLOAK)\n+                                        .withCertificate(CERTIFICATE_OF_KEYCLOAK)\n+                                        .build())\n+                                .withDisableTlsHostnameVerification(true)\n+                            .endKafkaListenerAuthenticationOAuth()\n+                        .endKafkaListenerExternalNodePort()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff8b5cb566b864b6996f2542d571f7569b710d1a"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5NzA2Mw==", "bodyText": "Yes because I didn't removed external listener completely. I expected it will be done in our PR", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3538#discussion_r475397063", "createdAt": "2020-08-24T07:35:27Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/security/oauth/OauthAbstractST.java", "diffHunk": "@@ -71,73 +70,62 @@ void setup() throws Exception {\n \n         LOGGER.info(\"Deploying keycloak...\");\n \n-        KeycloakUtils.deployKeycloak().done();\n+        KeycloakUtils.deployKeycloak(NAMESPACE);\n \n         // https\n-        Service keycloakService = KubernetesResource.deployKeycloakNodePortService(NAMESPACE);\n+        Service keycloakService = KubernetesResource.createKeycloakNodePortService(NAMESPACE);\n         KubernetesResource.createServiceResource(keycloakService, NAMESPACE);\n         ServiceUtils.waitForNodePortService(keycloakService.getMetadata().getName());\n \n         // http\n-        Service keycloakHttpService = KubernetesResource.deployKeycloakNodePortHttpService(NAMESPACE);\n+        Service keycloakHttpService = KubernetesResource.createKeycloakNodePortHttpService(NAMESPACE);\n         KubernetesResource.createServiceResource(keycloakHttpService, NAMESPACE);\n         ServiceUtils.waitForNodePortService(keycloakHttpService.getMetadata().getName());\n \n-        keycloakInstance = new KeycloakInstance(\"admin\", \"admin\");\n-        clusterHost = kubeClient().getNodeAddress();\n-\n-        LOGGER.info(\"Importing basic realm\");\n-        keycloakInstance.importRealm(\"../systemtest/src/test/resources/oauth2/create_realm.sh\");\n-\n-        LOGGER.info(\"Importing authorization realm\");\n-\n-        keycloakInstance.importRealm(\"../systemtest/src/test/resources/oauth2/create_realm_authorization.sh\");\n+        String passwordEncoded = kubeClient().getSecret(\"credential-example-keycloak\").getData().get(\"ADMIN_PASSWORD\");\n+        String password = new String(Base64.getDecoder().decode(passwordEncoded.getBytes()));\n+        keycloakInstance = new KeycloakInstance(\"admin\", password);\n \n-        String keycloakPodName = kubeClient().listPodsByPrefixInName(\"keycloak-\").get(0).getMetadata().getName();\n-\n-        String pubKey = ResourceManager.cmdKubeClient().execInPod(keycloakPodName, \"keytool\", \"-exportcert\", \"-keystore\",\n-            \"/opt/jboss/keycloak/standalone/configuration/application.keystore\", \"-alias\", \"server\", \"-storepass\", \"password\", \"-rfc\").out();\n-\n-        SecretUtils.createSecret(SECRET_OF_KEYCLOAK, CERTIFICATE_OF_KEYCLOAK, new String(Base64.getEncoder().encode(pubKey.getBytes()), StandardCharsets.US_ASCII));\n+        clusterHost = kubeClient().getNodeAddress();\n \n         KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 1)\n-                .editSpec()\n-                    .editKafka()\n-                        .editListeners()\n-                            .withNewTls()\n-                                .withNewKafkaListenerAuthenticationOAuth()\n-                                    .withValidIssuerUri(keycloakInstance.getValidIssuerUri())\n-                                    .withJwksExpirySeconds(keycloakInstance.getJwksExpireSeconds())\n-                                    .withJwksRefreshSeconds(keycloakInstance.getJwksRefreshSeconds())\n-                                    .withJwksEndpointUri(keycloakInstance.getJwksEndpointUri())\n-                                    .withUserNameClaim(keycloakInstance.getUserNameClaim())\n-                                    .withTlsTrustedCertificates(\n-                                        new CertSecretSourceBuilder()\n-                                            .withSecretName(SECRET_OF_KEYCLOAK)\n-                                            .withCertificate(CERTIFICATE_OF_KEYCLOAK)\n-                                            .build())\n-                                    .withDisableTlsHostnameVerification(true)\n-                                .endKafkaListenerAuthenticationOAuth()\n-                            .endTls()\n-                            .withNewKafkaListenerExternalNodePort()\n-                                .withNewKafkaListenerAuthenticationOAuth()\n-                                    .withValidIssuerUri(keycloakInstance.getValidIssuerUri())\n-                                    .withJwksExpirySeconds(keycloakInstance.getJwksExpireSeconds())\n-                                    .withJwksRefreshSeconds(keycloakInstance.getJwksRefreshSeconds())\n-                                    .withJwksEndpointUri(keycloakInstance.getJwksEndpointUri())\n-                                    .withUserNameClaim(keycloakInstance.getUserNameClaim())\n-                                    .withTlsTrustedCertificates(\n-                                        new CertSecretSourceBuilder()\n-                                            .withSecretName(SECRET_OF_KEYCLOAK)\n-                                            .withCertificate(CERTIFICATE_OF_KEYCLOAK)\n-                                            .build())\n-                                    .withDisableTlsHostnameVerification(true)\n-                                .endKafkaListenerAuthenticationOAuth()\n-                            .endKafkaListenerExternalNodePort()\n-                        .endListeners()\n-                    .endKafka()\n-                .endSpec()\n-                .done();\n+            .editSpec()\n+                .editKafka()\n+                    .editListeners()\n+                        .withNewTls()\n+                            .withNewKafkaListenerAuthenticationOAuth()\n+                                .withValidIssuerUri(keycloakInstance.getValidIssuerUri())\n+                                .withJwksExpirySeconds(keycloakInstance.getJwksExpireSeconds())\n+                                .withJwksRefreshSeconds(keycloakInstance.getJwksRefreshSeconds())\n+                                .withJwksEndpointUri(keycloakInstance.getJwksEndpointUri())\n+                                .withUserNameClaim(keycloakInstance.getUserNameClaim())\n+                                .withTlsTrustedCertificates(\n+                                    new CertSecretSourceBuilder()\n+                                        .withSecretName(SECRET_OF_KEYCLOAK)\n+                                        .withCertificate(CERTIFICATE_OF_KEYCLOAK)\n+                                        .build())\n+                                .withDisableTlsHostnameVerification(true)\n+                            .endKafkaListenerAuthenticationOAuth()\n+                        .endTls()\n+                        .withNewKafkaListenerExternalNodePort()\n+                            .withNewKafkaListenerAuthenticationOAuth()\n+                                .withValidIssuerUri(keycloakInstance.getValidIssuerUri())\n+                                .withJwksExpirySeconds(keycloakInstance.getJwksExpireSeconds())\n+                                .withJwksRefreshSeconds(keycloakInstance.getJwksRefreshSeconds())\n+                                .withJwksEndpointUri(keycloakInstance.getJwksEndpointUri())\n+                                .withUserNameClaim(keycloakInstance.getUserNameClaim())\n+                                .withTlsTrustedCertificates(\n+                                    new CertSecretSourceBuilder()\n+                                        .withSecretName(SECRET_OF_KEYCLOAK)\n+                                        .withCertificate(CERTIFICATE_OF_KEYCLOAK)\n+                                        .build())\n+                                .withDisableTlsHostnameVerification(true)\n+                            .endKafkaListenerAuthenticationOAuth()\n+                        .endKafkaListenerExternalNodePort()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5MDI2Mw=="}, "originalCommit": {"oid": "ff8b5cb566b864b6996f2542d571f7569b710d1a"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjA2MzM2OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/resources/oauth2/realm.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzoyNToxNlrOHFXopA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzozNTozNFrOHFX8EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5MjE2NA==", "bodyText": "What about this one?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3538#discussion_r475392164", "createdAt": "2020-08-24T07:25:16Z", "author": {"login": "see-quick"}, "path": "systemtest/src/test/resources/oauth2/realm.yaml", "diffHunk": "@@ -0,0 +1,251 @@\n+apiVersion: keycloak.org/v1alpha1\n+kind: KeycloakRealm\n+metadata:\n+  name: oauth2-kafka\n+  labels:\n+    app: sso\n+spec:\n+  realm:\n+    id: \"internal\"\n+    realm: \"internal\"\n+    enabled: True\n+    displayName: \"Internal realm with users\"\n+    users:\n+      - username: \"alice\"\n+        firstName: \"Alice\"\n+        lastName: \"Doe\"\n+        email: \"alice@example.com\"\n+        enabled: True\n+        emailVerified: False\n+        credentials:\n+          - type: password\n+            value: \"alice-password\"\n+        realmRoles:\n+          - \"user\"\n+        clientRoles:\n+          kafka:\n+            - \"kafka-topic:superapp_*:owner\"\n+            - \"kafka-topic:superapp_*:consumer\"\n+      - username: \"admin\"\n+        firstName: \"Admin\"\n+        lastName: \"Doe\"\n+        email: \"admin@example.com\"\n+        enabled: True\n+        emailVerified: False\n+        credentials:\n+          - type: password\n+            value: \"admin-password\"\n+        realmRoles:\n+          - \"admin\"\n+        clientRoles:\n+          kafka:\n+            - \"kafka-admin\"\n+          realm-management:\n+            - \"realm-admin\"\n+\n+      # useless?\n+#      - username: \"service-account-kafka-broker\"\n+#        email: \"service-account-kafka-broker@placeholder.org\"\n+#        enabled: True\n+#        emailVerified: False\n+#        clientRoles:\n+#          kafka:\n+#            - \"kafka-admin\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff8b5cb566b864b6996f2542d571f7569b710d1a"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5NzEzNg==", "bodyText": "Removed", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3538#discussion_r475397136", "createdAt": "2020-08-24T07:35:34Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/resources/oauth2/realm.yaml", "diffHunk": "@@ -0,0 +1,251 @@\n+apiVersion: keycloak.org/v1alpha1\n+kind: KeycloakRealm\n+metadata:\n+  name: oauth2-kafka\n+  labels:\n+    app: sso\n+spec:\n+  realm:\n+    id: \"internal\"\n+    realm: \"internal\"\n+    enabled: True\n+    displayName: \"Internal realm with users\"\n+    users:\n+      - username: \"alice\"\n+        firstName: \"Alice\"\n+        lastName: \"Doe\"\n+        email: \"alice@example.com\"\n+        enabled: True\n+        emailVerified: False\n+        credentials:\n+          - type: password\n+            value: \"alice-password\"\n+        realmRoles:\n+          - \"user\"\n+        clientRoles:\n+          kafka:\n+            - \"kafka-topic:superapp_*:owner\"\n+            - \"kafka-topic:superapp_*:consumer\"\n+      - username: \"admin\"\n+        firstName: \"Admin\"\n+        lastName: \"Doe\"\n+        email: \"admin@example.com\"\n+        enabled: True\n+        emailVerified: False\n+        credentials:\n+          - type: password\n+            value: \"admin-password\"\n+        realmRoles:\n+          - \"admin\"\n+        clientRoles:\n+          kafka:\n+            - \"kafka-admin\"\n+          realm-management:\n+            - \"realm-admin\"\n+\n+      # useless?\n+#      - username: \"service-account-kafka-broker\"\n+#        email: \"service-account-kafka-broker@placeholder.org\"\n+#        enabled: True\n+#        emailVerified: False\n+#        clientRoles:\n+#          kafka:\n+#            - \"kafka-admin\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5MjE2NA=="}, "originalCommit": {"oid": "ff8b5cb566b864b6996f2542d571f7569b710d1a"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjA2NTI0OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/resources/oauth2/teardown_keycloak_operator.sh", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzoyNTo1NlrOHFXpyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzozNzoyMVrOHFX_Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5MjQ1OA==", "bodyText": "I wonder if we need to the parametrized version of the keycloak for the future.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3538#discussion_r475392458", "createdAt": "2020-08-24T07:25:56Z", "author": {"login": "see-quick"}, "path": "systemtest/src/test/resources/oauth2/teardown_keycloak_operator.sh", "diffHunk": "@@ -0,0 +1,23 @@\n+#!/usr/bin/env bash\n+\n+NAMESPACE=$1\n+\n+KEYCLOAK_VERSION=11.0.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff8b5cb566b864b6996f2542d571f7569b710d1a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5Nzk3OQ==", "bodyText": "I don't think so. We should change version when new version of keycloak will be released and our oauth will work with it. I don't think we care if it's working with 8.0.x , 9.x.y, etc.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3538#discussion_r475397979", "createdAt": "2020-08-24T07:37:21Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/resources/oauth2/teardown_keycloak_operator.sh", "diffHunk": "@@ -0,0 +1,23 @@\n+#!/usr/bin/env bash\n+\n+NAMESPACE=$1\n+\n+KEYCLOAK_VERSION=11.0.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5MjQ1OA=="}, "originalCommit": {"oid": "ff8b5cb566b864b6996f2542d571f7569b710d1a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjk5NzI4OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/security/oauth/OauthAuthorizationST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTozNjowM1rOHFgfuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTozNjowM1rOHFgfuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzNzMzNw==", "bodyText": "Here you can remove this commend or?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3538#discussion_r475537337", "createdAt": "2020-08-24T11:36:03Z", "author": {"login": "see-quick"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/security/oauth/OauthAuthorizationST.java", "diffHunk": "@@ -136,7 +136,7 @@ void testTeamBWriteToTopic() {\n         );\n     }\n \n-    @Disabled(\"Will be fixed in the new PR.\")\n+//    @Disabled(\"Will be fixed in the new PR.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eece305ed44a09ed8bd8b2338c1a66c85aca195f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NDEyNzY2OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/keycloak/KeycloakInstance.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMzo1ODoxMVrOHHNcsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNDo1MjoyOVrOHHP9_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMyMjQxNg==", "bodyText": "Remove it? :)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3538#discussion_r477322416", "createdAt": "2020-08-26T13:58:11Z", "author": {"login": "see-quick"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/keycloak/KeycloakInstance.java", "diffHunk": "@@ -37,40 +35,22 @@\n     private Pattern keystorePattern = Pattern.compile(\"<tls>\\\\s*<key-stores>\\\\s*<key-store name=\\\"kcKeyStore\\\">\\\\s*<credential-reference clear-text=\\\".*\\\"\\\\/>\");\n     private Pattern keystorePasswordPattern = Pattern.compile(\"\\\\\\\".*\\\\\\\"\");\n \n-    public KeycloakInstance(String username, String password) {\n+    public KeycloakInstance(String username, String password, String namespace) {\n \n         this.username = username;\n         this.password = password;\n+        this.namespace = namespace;\n         this.httpsUri = ResourceManager.kubeClient().getNodeAddress() + \":\" + Constants.HTTPS_KEYCLOAK_DEFAULT_NODE_PORT;\n         this.httpUri = ResourceManager.kubeClient().getNodeAddress() + \":\" + Constants.HTTP_KEYCLOAK_DEFAULT_NODE_PORT;\n+        // this.httpsUri = \"keycloak.\" + namespace + \".svc.cluster.local\" +\":8443\";\n+        // this.httpUri = \"keycloak-discovery.\" + namespace + \".svc.cluster.local\" +\":8080\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80d9bdcb0ac8681252904a8772585443d2a0ee4c"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM0NTE0NQ==", "bodyText": "Well I wanted to keep this as preparation for your PR. But I can remove it if you want", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3538#discussion_r477345145", "createdAt": "2020-08-26T14:28:05Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/keycloak/KeycloakInstance.java", "diffHunk": "@@ -37,40 +35,22 @@\n     private Pattern keystorePattern = Pattern.compile(\"<tls>\\\\s*<key-stores>\\\\s*<key-store name=\\\"kcKeyStore\\\">\\\\s*<credential-reference clear-text=\\\".*\\\"\\\\/>\");\n     private Pattern keystorePasswordPattern = Pattern.compile(\"\\\\\\\".*\\\\\\\"\");\n \n-    public KeycloakInstance(String username, String password) {\n+    public KeycloakInstance(String username, String password, String namespace) {\n \n         this.username = username;\n         this.password = password;\n+        this.namespace = namespace;\n         this.httpsUri = ResourceManager.kubeClient().getNodeAddress() + \":\" + Constants.HTTPS_KEYCLOAK_DEFAULT_NODE_PORT;\n         this.httpUri = ResourceManager.kubeClient().getNodeAddress() + \":\" + Constants.HTTP_KEYCLOAK_DEFAULT_NODE_PORT;\n+        // this.httpsUri = \"keycloak.\" + namespace + \".svc.cluster.local\" +\":8443\";\n+        // this.httpUri = \"keycloak-discovery.\" + namespace + \".svc.cluster.local\" +\":8080\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMyMjQxNg=="}, "originalCommit": {"oid": "80d9bdcb0ac8681252904a8772585443d2a0ee4c"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM2MzcwOA==", "bodyText": "Ok, let it be :)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3538#discussion_r477363708", "createdAt": "2020-08-26T14:52:29Z", "author": {"login": "see-quick"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/keycloak/KeycloakInstance.java", "diffHunk": "@@ -37,40 +35,22 @@\n     private Pattern keystorePattern = Pattern.compile(\"<tls>\\\\s*<key-stores>\\\\s*<key-store name=\\\"kcKeyStore\\\">\\\\s*<credential-reference clear-text=\\\".*\\\"\\\\/>\");\n     private Pattern keystorePasswordPattern = Pattern.compile(\"\\\\\\\".*\\\\\\\"\");\n \n-    public KeycloakInstance(String username, String password) {\n+    public KeycloakInstance(String username, String password, String namespace) {\n \n         this.username = username;\n         this.password = password;\n+        this.namespace = namespace;\n         this.httpsUri = ResourceManager.kubeClient().getNodeAddress() + \":\" + Constants.HTTPS_KEYCLOAK_DEFAULT_NODE_PORT;\n         this.httpUri = ResourceManager.kubeClient().getNodeAddress() + \":\" + Constants.HTTP_KEYCLOAK_DEFAULT_NODE_PORT;\n+        // this.httpsUri = \"keycloak.\" + namespace + \".svc.cluster.local\" +\":8443\";\n+        // this.httpUri = \"keycloak-discovery.\" + namespace + \".svc.cluster.local\" +\":8080\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMyMjQxNg=="}, "originalCommit": {"oid": "80d9bdcb0ac8681252904a8772585443d2a0ee4c"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NDEzNjQzOnYy", "diffSide": "LEFT", "path": "systemtest/src/test/resources/oauth2/create_realm_authorization.sh", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMzo1OTo1MlrOHHNh_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNDoyNzozNlrOHHO0CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMyMzc3NA==", "bodyText": "Why did you do this change? )", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3538#discussion_r477323774", "createdAt": "2020-08-26T13:59:52Z", "author": {"login": "see-quick"}, "path": "systemtest/src/test/resources/oauth2/create_realm_authorization.sh", "diffHunk": "@@ -8,14 +8,14 @@ URL=$3\n \n TOKEN=$(curl --insecure -X POST -d \"client_id=admin-cli&client_secret=aGVsbG8td29ybGQtcHJvZHVjZXItc2VjcmV0&grant_type=password&username=$USERNAME&password=$PASSWORD\" \"https://$URL/auth/realms/master/protocol/openid-connect/token\" | awk -F '\\\"' '{print $4}')\n \n-curl -v --insecure \"https://$URL/auth/admin/realms\" \\\n+RESULT=$(curl -v --insecure \"https://$URL/auth/admin/realms\" \\\n   -H \"Authorization: Bearer $TOKEN\" \\\n   -H 'Content-Type: application/json' \\\n   -H 'Postman-Token: 3a6cd746-03b5-46fe-a54a-014fc7c51983' \\\n   -H 'cache-control: no-cache' \\\n   -d '{\n   \"realm\": \"kafka-authz\",\n-  \"accessTokenLifespan\": 300,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80d9bdcb0ac8681252904a8772585443d2a0ee4c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM0NDc3Nw==", "bodyText": "I just copy/pasted example provided by Marko. I don't think it's somehow useful for us.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3538#discussion_r477344777", "createdAt": "2020-08-26T14:27:36Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/resources/oauth2/create_realm_authorization.sh", "diffHunk": "@@ -8,14 +8,14 @@ URL=$3\n \n TOKEN=$(curl --insecure -X POST -d \"client_id=admin-cli&client_secret=aGVsbG8td29ybGQtcHJvZHVjZXItc2VjcmV0&grant_type=password&username=$USERNAME&password=$PASSWORD\" \"https://$URL/auth/realms/master/protocol/openid-connect/token\" | awk -F '\\\"' '{print $4}')\n \n-curl -v --insecure \"https://$URL/auth/admin/realms\" \\\n+RESULT=$(curl -v --insecure \"https://$URL/auth/admin/realms\" \\\n   -H \"Authorization: Bearer $TOKEN\" \\\n   -H 'Content-Type: application/json' \\\n   -H 'Postman-Token: 3a6cd746-03b5-46fe-a54a-014fc7c51983' \\\n   -H 'cache-control: no-cache' \\\n   -d '{\n   \"realm\": \"kafka-authz\",\n-  \"accessTokenLifespan\": 300,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMyMzc3NA=="}, "originalCommit": {"oid": "80d9bdcb0ac8681252904a8772585443d2a0ee4c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NDE1MDMzOnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/resources/oauth2/teardown_keycloak_operator.sh", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNDowMjo0N1rOHHNqjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNDoyODoyMlrOHHO2Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMyNTk2NQ==", "bodyText": "oauth2-cluster-test -> namespace?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3538#discussion_r477325965", "createdAt": "2020-08-26T14:02:47Z", "author": {"login": "see-quick"}, "path": "systemtest/src/test/resources/oauth2/teardown_keycloak_operator.sh", "diffHunk": "@@ -0,0 +1,24 @@\n+#!/usr/bin/env bash\n+\n+NAMESPACE=$1\n+\n+KEYCLOAK_VERSION=11.0.0\n+\n+SCRIPT_PATH=$(dirname \"${BASH_SOURCE[0]}\")\n+\n+echo \"[INFO] $(date -u +\"%Y-%m-%d %H:%M:%S\") Delete Keycloak & Keycloak Operator\"\n+kubectl delete -n ${NAMESPACE} -f https://github.com/keycloak/keycloak-operator/raw/${KEYCLOAK_VERSION}/deploy/examples/keycloak/keycloak.yaml\n+kubectl delete -n ${NAMESPACE} -f https://github.com/keycloak/keycloak-operator/raw/${KEYCLOAK_VERSION}/deploy/operator.yaml\n+kubectl delete -f https://github.com/keycloak/keycloak-operator/raw/${KEYCLOAK_VERSION}/deploy/crds/keycloak.org_keycloakusers_crd.yaml\n+kubectl delete -f https://github.com/keycloak/keycloak-operator/raw/${KEYCLOAK_VERSION}/deploy/crds/keycloak.org_keycloaks_crd.yaml\n+kubectl delete -f https://github.com/keycloak/keycloak-operator/raw/${KEYCLOAK_VERSION}/deploy/crds/keycloak.org_keycloakclients_crd.yaml\n+kubectl delete -f https://github.com/keycloak/keycloak-operator/raw/${KEYCLOAK_VERSION}/deploy/crds/keycloak.org_keycloakrealms_crd.yaml\n+kubectl delete -f https://github.com/keycloak/keycloak-operator/raw/${KEYCLOAK_VERSION}/deploy/crds/keycloak.org_keycloakbackups_crd.yaml\n+kubectl delete -f https://github.com/keycloak/keycloak-operator/raw/${KEYCLOAK_VERSION}/deploy/cluster_roles/cluster_role.yaml\n+kubectl delete -f https://raw.githubusercontent.com/keycloak/keycloak-operator/${KEYCLOAK_VERSION}/deploy/cluster_roles/cluster_role_binding.yaml\n+kubectl delete -n ${NAMESPACE} -f https://github.com/keycloak/keycloak-operator/raw/${KEYCLOAK_VERSION}/deploy/role.yaml\n+kubectl delete -n ${NAMESPACE} -f https://github.com/keycloak/keycloak-operator/raw/${KEYCLOAK_VERSION}/deploy/role_binding.yaml\n+kubectl delete -n ${NAMESPACE} -f https://github.com/keycloak/keycloak-operator/raw/${KEYCLOAK_VERSION}/deploy/service_account.yaml\n+\n+\n+#keycloak.oauth2-cluster-test.svc.cluster.local:8443", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80d9bdcb0ac8681252904a8772585443d2a0ee4c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM0NTM1MQ==", "bodyText": "it's just a leftover I guess", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3538#discussion_r477345351", "createdAt": "2020-08-26T14:28:22Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/resources/oauth2/teardown_keycloak_operator.sh", "diffHunk": "@@ -0,0 +1,24 @@\n+#!/usr/bin/env bash\n+\n+NAMESPACE=$1\n+\n+KEYCLOAK_VERSION=11.0.0\n+\n+SCRIPT_PATH=$(dirname \"${BASH_SOURCE[0]}\")\n+\n+echo \"[INFO] $(date -u +\"%Y-%m-%d %H:%M:%S\") Delete Keycloak & Keycloak Operator\"\n+kubectl delete -n ${NAMESPACE} -f https://github.com/keycloak/keycloak-operator/raw/${KEYCLOAK_VERSION}/deploy/examples/keycloak/keycloak.yaml\n+kubectl delete -n ${NAMESPACE} -f https://github.com/keycloak/keycloak-operator/raw/${KEYCLOAK_VERSION}/deploy/operator.yaml\n+kubectl delete -f https://github.com/keycloak/keycloak-operator/raw/${KEYCLOAK_VERSION}/deploy/crds/keycloak.org_keycloakusers_crd.yaml\n+kubectl delete -f https://github.com/keycloak/keycloak-operator/raw/${KEYCLOAK_VERSION}/deploy/crds/keycloak.org_keycloaks_crd.yaml\n+kubectl delete -f https://github.com/keycloak/keycloak-operator/raw/${KEYCLOAK_VERSION}/deploy/crds/keycloak.org_keycloakclients_crd.yaml\n+kubectl delete -f https://github.com/keycloak/keycloak-operator/raw/${KEYCLOAK_VERSION}/deploy/crds/keycloak.org_keycloakrealms_crd.yaml\n+kubectl delete -f https://github.com/keycloak/keycloak-operator/raw/${KEYCLOAK_VERSION}/deploy/crds/keycloak.org_keycloakbackups_crd.yaml\n+kubectl delete -f https://github.com/keycloak/keycloak-operator/raw/${KEYCLOAK_VERSION}/deploy/cluster_roles/cluster_role.yaml\n+kubectl delete -f https://raw.githubusercontent.com/keycloak/keycloak-operator/${KEYCLOAK_VERSION}/deploy/cluster_roles/cluster_role_binding.yaml\n+kubectl delete -n ${NAMESPACE} -f https://github.com/keycloak/keycloak-operator/raw/${KEYCLOAK_VERSION}/deploy/role.yaml\n+kubectl delete -n ${NAMESPACE} -f https://github.com/keycloak/keycloak-operator/raw/${KEYCLOAK_VERSION}/deploy/role_binding.yaml\n+kubectl delete -n ${NAMESPACE} -f https://github.com/keycloak/keycloak-operator/raw/${KEYCLOAK_VERSION}/deploy/service_account.yaml\n+\n+\n+#keycloak.oauth2-cluster-test.svc.cluster.local:8443", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMyNTk2NQ=="}, "originalCommit": {"oid": "80d9bdcb0ac8681252904a8772585443d2a0ee4c"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1345, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}