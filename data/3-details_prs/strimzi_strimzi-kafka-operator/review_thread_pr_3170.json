{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxMDgyNzM5", "number": 3170, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzowOTo1MFrOEDb-rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoxMDo1OFrOEDcBpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDM5NTk3OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/PodUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzowOTo1MFrOGgdDkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzowOTo1MFrOGgdDkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY4MzY2Nw==", "bodyText": "typo expectedPods", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3170#discussion_r436683667", "createdAt": "2020-06-08T13:09:50Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/PodUtils.java", "diffHunk": "@@ -187,17 +187,32 @@ public static void waitUntilMessageIsInLogs(String podName, String containerName\n \n     public static void waitUntilPodContainersCount(String podNamePrefix, int numberOfContainers) {\n         LOGGER.info(\"Wait until Pod {} will have {} containers\", podNamePrefix, numberOfContainers);\n-        TestUtils.waitFor(\"Pod\" + podNamePrefix + \" will have \" + numberOfContainers + \" containers\",\n+        TestUtils.waitFor(\"Pod \" + podNamePrefix + \" will have \" + numberOfContainers + \" containers\",\n             Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_STATUS_TIMEOUT,\n             () -> kubeClient().listPodsByPrefixInName(podNamePrefix).get(0).getSpec().getContainers().size() == numberOfContainers);\n         LOGGER.info(\"Pod {} has {} containers\", podNamePrefix, numberOfContainers);\n     }\n \n-    public static void waitUntilPodReplicasCount(String podNamePrefix, int exceptedPods) {\n-        LOGGER.info(\"Wait until Pod {} will have {} replicas\", podNamePrefix, exceptedPods);\n+    public static void waitUntilPodStabilityReplicasCount(String podNamePrefix, int exceptedPods) {\n+        LOGGER.info(\"Wait until Pod {} will have stable {} replicas\", podNamePrefix, exceptedPods);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "248d91f449bf0adac870e38984ce96d18d14530d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDQwMzU3OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/PodUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoxMDo1OFrOGgdIAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzo0NjowOFrOGge60Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY4NDgwMQ==", "bodyText": "I guess you are using this one element array because otherwise, you cannot increment the variable in the lambda. Maybe you can use an AtomicInteger? Or there is a specific reason for using the array?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3170#discussion_r436684801", "createdAt": "2020-06-08T13:10:58Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/PodUtils.java", "diffHunk": "@@ -187,17 +187,32 @@ public static void waitUntilMessageIsInLogs(String podName, String containerName\n \n     public static void waitUntilPodContainersCount(String podNamePrefix, int numberOfContainers) {\n         LOGGER.info(\"Wait until Pod {} will have {} containers\", podNamePrefix, numberOfContainers);\n-        TestUtils.waitFor(\"Pod\" + podNamePrefix + \" will have \" + numberOfContainers + \" containers\",\n+        TestUtils.waitFor(\"Pod \" + podNamePrefix + \" will have \" + numberOfContainers + \" containers\",\n             Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_STATUS_TIMEOUT,\n             () -> kubeClient().listPodsByPrefixInName(podNamePrefix).get(0).getSpec().getContainers().size() == numberOfContainers);\n         LOGGER.info(\"Pod {} has {} containers\", podNamePrefix, numberOfContainers);\n     }\n \n-    public static void waitUntilPodReplicasCount(String podNamePrefix, int exceptedPods) {\n-        LOGGER.info(\"Wait until Pod {} will have {} replicas\", podNamePrefix, exceptedPods);\n+    public static void waitUntilPodStabilityReplicasCount(String podNamePrefix, int exceptedPods) {\n+        LOGGER.info(\"Wait until Pod {} will have stable {} replicas\", podNamePrefix, exceptedPods);\n+        int[] stableCounter = {0};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "248d91f449bf0adac870e38984ce96d18d14530d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcxNDE5Mw==", "bodyText": "Using AtomicInteger is overloading for no such benefit. Usually, I do not use AtomicInteger, unless I have a really good reason to use and the reason for using AtomicInteger might be only allowing concurrent accesses. Yes you are right, I use the static array to have strong reference inside lambda.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3170#discussion_r436714193", "createdAt": "2020-06-08T13:46:08Z", "author": {"login": "see-quick"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/PodUtils.java", "diffHunk": "@@ -187,17 +187,32 @@ public static void waitUntilMessageIsInLogs(String podName, String containerName\n \n     public static void waitUntilPodContainersCount(String podNamePrefix, int numberOfContainers) {\n         LOGGER.info(\"Wait until Pod {} will have {} containers\", podNamePrefix, numberOfContainers);\n-        TestUtils.waitFor(\"Pod\" + podNamePrefix + \" will have \" + numberOfContainers + \" containers\",\n+        TestUtils.waitFor(\"Pod \" + podNamePrefix + \" will have \" + numberOfContainers + \" containers\",\n             Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_STATUS_TIMEOUT,\n             () -> kubeClient().listPodsByPrefixInName(podNamePrefix).get(0).getSpec().getContainers().size() == numberOfContainers);\n         LOGGER.info(\"Pod {} has {} containers\", podNamePrefix, numberOfContainers);\n     }\n \n-    public static void waitUntilPodReplicasCount(String podNamePrefix, int exceptedPods) {\n-        LOGGER.info(\"Wait until Pod {} will have {} replicas\", podNamePrefix, exceptedPods);\n+    public static void waitUntilPodStabilityReplicasCount(String podNamePrefix, int exceptedPods) {\n+        LOGGER.info(\"Wait until Pod {} will have stable {} replicas\", podNamePrefix, exceptedPods);\n+        int[] stableCounter = {0};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY4NDgwMQ=="}, "originalCommit": {"oid": "248d91f449bf0adac870e38984ce96d18d14530d"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1639, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}