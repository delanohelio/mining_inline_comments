{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NTY4OTA1", "number": 3132, "title": "To fix", "bodyText": "Type of change\n\nBugfix\n\nDescription\nWhen a Kafka broker gets restarted (such as, for example, during an upgrade), the error handling in KafkaImpl.topicMetadata() incorrectly resulted in the returned Future being completed successfully with a null result. This caused the TO to infer the topic had been deleted in Kafka, resulting in the deletion of the corresponding KafkaTopic. The KafkaTopic gets recreated by a later reconciliation (when the TO observes a topic in Kafka). When name of the topic in Kafka differed from the original KafkaTopic's metadata.name this resulted in the new KafkaTopic having a generated name.\nThis PR:\n\nrefactors the KafkaImpl to use KafkaFuture.whenComplete(), simplfying the error handling considerably,\nadds a test for KafkaImpl,\nCorrects an incorrect log stmt in TopicOperator.\n\nChecklist\nPlease go through this checklist and make sure all applicable tasks have been done\n\n Update/write design documentation in ./design\n Write tests\n Make sure all tests pass\n Update documentation\n Check RBAC rights for Kubernetes / OpenShift roles\n Try your changes from Pod inside your Kubernetes and OpenShift cluster, not just locally\n Reference relevant issue(s) and close them after merging\n Update CHANGELOG.md", "createdAt": "2020-06-02T13:00:50Z", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3132", "merged": true, "mergeCommit": {"oid": "6c4ff7acbcf046919f89bf091e62c2f100112d03"}, "closed": true, "closedAt": "2020-06-04T14:03:23Z", "author": {"login": "tombentley"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnThVUAH2gAyNDI2NTY4OTA1OmIzMzFiZmQ2NjY2MzAwYTQ4ZWJhODViMzA4NTc3NGNiNmZiOTAwMjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcn7VH6AFqTQyNDMwMDI5MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b331bfd6666300a48eba85b3085774cb6fb90027", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b331bfd6666300a48eba85b3085774cb6fb90027", "committedDate": "2020-06-02T11:53:44Z", "message": "Rewrite KafkaImpl to use Futures everywhere\n\n* Add a test\n* Change how deleteTopic works slightly, so an exception from the AdminClient\n  causes Util.waitFor to fail its returned future immediately.\n* Fix a log message\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6cf626495831ce86ef77828baae43886edd33cc", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a6cf626495831ce86ef77828baae43886edd33cc", "committedDate": "2020-06-02T12:00:18Z", "message": "Javadoc\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNjYxOTY4", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3132#pullrequestreview-422661968", "createdAt": "2020-06-02T13:14:01Z", "commit": {"oid": "a6cf626495831ce86ef77828baae43886edd33cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzoxNDowMlrOGdw-MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzoxNDowMlrOGdw-MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg2NDI0MA==", "bodyText": "I am just curious. What is the semantics of these files inside the system-test module?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3132#discussion_r433864240", "createdAt": "2020-06-02T13:14:02Z", "author": {"login": "see-quick"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/upgrade/MappedYamlArgumentsProvider.java", "diffHunk": "@@ -0,0 +1,8 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.upgrade;\n+\n+public class MappedYamlArgumentsProvider {\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6cf626495831ce86ef77828baae43886edd33cc"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64f62d10a421b850bdaa053352a03311e4129a57", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/64f62d10a421b850bdaa053352a03311e4129a57", "committedDate": "2020-06-02T14:26:23Z", "message": "Oops\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MzAwMjkx", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3132#pullrequestreview-424300291", "createdAt": "2020-06-04T10:15:51Z", "commit": {"oid": "64f62d10a421b850bdaa053352a03311e4129a57"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMDoxNTo1MVrOGe_LYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMDoxNTo1MVrOGe_LYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE0NTU2OA==", "bodyText": "it's something not actually related to the fix but tbh I am starting to really hate the \"static import\". From the code, it's not clear that singleton is coming from Collections but it could be a private method doing something related to singleton pattern. Tbh I would prefer to be explicit. Of course, it's not a change you have to do if you like \"static import\". I think that it makes the code less readable.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3132#discussion_r435145568", "createdAt": "2020-06-04T10:15:51Z", "author": {"login": "ppatierno"}, "path": "topic-operator/src/main/java/io/strimzi/operator/topic/KafkaImpl.java", "diffHunk": "@@ -222,75 +56,88 @@ protected void queueWork(Work work) {\n         Promise<Void> handler = Promise.promise();\n         LOGGER.debug(\"Deleting topic {}\", topicName);\n         KafkaFuture<Void> future = adminClient.deleteTopics(\n-                Collections.singleton(topicName.toString())).values().get(topicName.toString());\n-        queueWork(new UniWork<>(\"deleteTopic\", future, handler));\n-        return handler.future().compose(ig ->\n+                singleton(topicName.toString())).values().get(topicName.toString());\n+        mapFuture(future).compose(ig ->\n                 Util.waitFor(vertx, \"deleted sync \" + topicName, \"deleted\", 1000, 120_000, () -> {\n                     try {\n-                        return adminClient.describeTopics(Collections.singleton(topicName.toString())).all().get().get(topicName.toString()) == null;\n+                        return adminClient.describeTopics(singleton(topicName.toString())).all().get().get(topicName.toString()) == null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64f62d10a421b850bdaa053352a03311e4129a57"}, "originalPosition": 232}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1465, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}