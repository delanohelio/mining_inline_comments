{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzODY4MzM2", "number": 3106, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNzoxNToyMlrOEDvXcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTo0MjoyN1rOEDy-iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzU3MjMyOnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaRebalanceUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNzoxNToyMlrOGg7vGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOToyOTozNlrOGhA_DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE4NjMyOQ==", "bodyText": "you are missing Stopped", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3106#discussion_r437186329", "createdAt": "2020-06-09T07:15:22Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaRebalanceUtils.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.utils.kafkaUtils;\n+\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.systemtest.resources.crd.KafkaRebalanceResource;\n+import io.strimzi.test.TestUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+\n+public class KafkaRebalanceUtils {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(KafkaRebalanceUtils.class);\n+\n+    private KafkaRebalanceUtils() {}\n+\n+    public enum KafkaRebalanceState {\n+        PendingProposal,\n+        ProposalReady,\n+        Rebalancing,\n+        Ready,\n+        NotReady", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b15d9eaf3e3c82a51b1f1ea0949a7d1307fe74b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIzMTA2Mg==", "bodyText": "Done", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3106#discussion_r437231062", "createdAt": "2020-06-09T08:32:48Z", "author": {"login": "see-quick"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaRebalanceUtils.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.utils.kafkaUtils;\n+\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.systemtest.resources.crd.KafkaRebalanceResource;\n+import io.strimzi.test.TestUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+\n+public class KafkaRebalanceUtils {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(KafkaRebalanceUtils.class);\n+\n+    private KafkaRebalanceUtils() {}\n+\n+    public enum KafkaRebalanceState {\n+        PendingProposal,\n+        ProposalReady,\n+        Rebalancing,\n+        Ready,\n+        NotReady", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE4NjMyOQ=="}, "originalCommit": {"oid": "5b15d9eaf3e3c82a51b1f1ea0949a7d1307fe74b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI3MjMzMg==", "bodyText": "And that is why this should be part of the api ;-)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3106#discussion_r437272332", "createdAt": "2020-06-09T09:29:36Z", "author": {"login": "scholzj"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaRebalanceUtils.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.utils.kafkaUtils;\n+\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.systemtest.resources.crd.KafkaRebalanceResource;\n+import io.strimzi.test.TestUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+\n+public class KafkaRebalanceUtils {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(KafkaRebalanceUtils.class);\n+\n+    private KafkaRebalanceUtils() {}\n+\n+    public enum KafkaRebalanceState {\n+        PendingProposal,\n+        ProposalReady,\n+        Rebalancing,\n+        Ready,\n+        NotReady", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE4NjMyOQ=="}, "originalCommit": {"oid": "5b15d9eaf3e3c82a51b1f1ea0949a7d1307fe74b"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDE0OTQ1OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaRebalanceUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTozODoyNlrOGhBVow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTo0NToyN1rOGhBl5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI3ODExNQ==", "bodyText": "I saw a lot of line with this kinda useless log, do we really need it?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3106#discussion_r437278115", "createdAt": "2020-06-09T09:38:26Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaRebalanceUtils.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.utils.kafkaUtils;\n+\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.systemtest.resources.crd.KafkaRebalanceResource;\n+import io.strimzi.test.TestUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+\n+public class KafkaRebalanceUtils {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(KafkaRebalanceUtils.class);\n+\n+    private KafkaRebalanceUtils() {}\n+\n+    public enum KafkaRebalanceState {\n+        PendingProposal,\n+        ProposalReady,\n+        Rebalancing,\n+        Ready,\n+        NotReady,\n+        Stopped\n+    }\n+\n+    public static void waitForKafkaRebalanceCustomResourceState(String resourceName, KafkaRebalanceState state) {\n+        LOGGER.info(\"Waiting for KafkaRebalance will be in the {}\", state);\n+\n+        TestUtils.waitFor(\"Waiting for KafkaRebalance will be in the \" + state.name(), Constants.POLL_INTERVAL_FOR_RESOURCE_READINESS, Constants.TIMEOUT_FOR_RESOURCE_READINESS,\n+            () -> {\n+                LOGGER.info(\"Comparing: \" + KafkaRebalanceResource.kafkaRebalanceClient().inNamespace(kubeClient().getNamespace())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77d094990b514b3c1aa5a196a8bcf4a49e17517e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI4MjI3OA==", "bodyText": "No, we don't. I will remove it", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3106#discussion_r437282278", "createdAt": "2020-06-09T09:45:27Z", "author": {"login": "see-quick"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaRebalanceUtils.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.utils.kafkaUtils;\n+\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.systemtest.resources.crd.KafkaRebalanceResource;\n+import io.strimzi.test.TestUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+\n+public class KafkaRebalanceUtils {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(KafkaRebalanceUtils.class);\n+\n+    private KafkaRebalanceUtils() {}\n+\n+    public enum KafkaRebalanceState {\n+        PendingProposal,\n+        ProposalReady,\n+        Rebalancing,\n+        Ready,\n+        NotReady,\n+        Stopped\n+    }\n+\n+    public static void waitForKafkaRebalanceCustomResourceState(String resourceName, KafkaRebalanceState state) {\n+        LOGGER.info(\"Waiting for KafkaRebalance will be in the {}\", state);\n+\n+        TestUtils.waitFor(\"Waiting for KafkaRebalance will be in the \" + state.name(), Constants.POLL_INTERVAL_FOR_RESOURCE_READINESS, Constants.TIMEOUT_FOR_RESOURCE_READINESS,\n+            () -> {\n+                LOGGER.info(\"Comparing: \" + KafkaRebalanceResource.kafkaRebalanceClient().inNamespace(kubeClient().getNamespace())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI3ODExNQ=="}, "originalCommit": {"oid": "77d094990b514b3c1aa5a196a8bcf4a49e17517e"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDE1MzQ2OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaRebalanceUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTozOTozM1rOGhBYNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTozOTozM1rOGhBYNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI3ODc3Mw==", "bodyText": "waiting string is already in waitFor", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3106#discussion_r437278773", "createdAt": "2020-06-09T09:39:33Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaRebalanceUtils.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.utils.kafkaUtils;\n+\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.systemtest.resources.crd.KafkaRebalanceResource;\n+import io.strimzi.test.TestUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+\n+public class KafkaRebalanceUtils {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(KafkaRebalanceUtils.class);\n+\n+    private KafkaRebalanceUtils() {}\n+\n+    public enum KafkaRebalanceState {\n+        PendingProposal,\n+        ProposalReady,\n+        Rebalancing,\n+        Ready,\n+        NotReady,\n+        Stopped\n+    }\n+\n+    public static void waitForKafkaRebalanceCustomResourceState(String resourceName, KafkaRebalanceState state) {\n+        LOGGER.info(\"Waiting for KafkaRebalance will be in the {}\", state);\n+\n+        TestUtils.waitFor(\"Waiting for KafkaRebalance will be in the \" + state.name(), Constants.POLL_INTERVAL_FOR_RESOURCE_READINESS, Constants.TIMEOUT_FOR_RESOURCE_READINESS,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77d094990b514b3c1aa5a196a8bcf4a49e17517e"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDE2MTU4OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaRebalanceUtils.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTo0MTo0NlrOGhBdcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDoxMzo0N1rOGhMLJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI4MDExNQ==", "bodyText": "Why you didn't use ResourceManager.waitForResourceStatus() ?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3106#discussion_r437280115", "createdAt": "2020-06-09T09:41:46Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaRebalanceUtils.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.utils.kafkaUtils;\n+\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.systemtest.resources.crd.KafkaRebalanceResource;\n+import io.strimzi.test.TestUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+\n+public class KafkaRebalanceUtils {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(KafkaRebalanceUtils.class);\n+\n+    private KafkaRebalanceUtils() {}\n+\n+    public enum KafkaRebalanceState {\n+        PendingProposal,\n+        ProposalReady,\n+        Rebalancing,\n+        Ready,\n+        NotReady,\n+        Stopped\n+    }\n+\n+    public static void waitForKafkaRebalanceCustomResourceState(String resourceName, KafkaRebalanceState state) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77d094990b514b3c1aa5a196a8bcf4a49e17517e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI4NDY3NA==", "bodyText": "Because KafkaRebalance resource did not match attributes with other resources such as Kafka, KafkaConnect etc.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3106#discussion_r437284674", "createdAt": "2020-06-09T09:49:31Z", "author": {"login": "see-quick"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaRebalanceUtils.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.utils.kafkaUtils;\n+\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.systemtest.resources.crd.KafkaRebalanceResource;\n+import io.strimzi.test.TestUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+\n+public class KafkaRebalanceUtils {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(KafkaRebalanceUtils.class);\n+\n+    private KafkaRebalanceUtils() {}\n+\n+    public enum KafkaRebalanceState {\n+        PendingProposal,\n+        ProposalReady,\n+        Rebalancing,\n+        Ready,\n+        NotReady,\n+        Stopped\n+    }\n+\n+    public static void waitForKafkaRebalanceCustomResourceState(String resourceName, KafkaRebalanceState state) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI4MDExNQ=="}, "originalCommit": {"oid": "77d094990b514b3c1aa5a196a8bcf4a49e17517e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI4NjMxOA==", "bodyText": "it's something we are going to revert back even because the OpenShift UI is not able to show the right status. @tomncooper are you still working on that?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3106#discussion_r437286318", "createdAt": "2020-06-09T09:52:18Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaRebalanceUtils.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.utils.kafkaUtils;\n+\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.systemtest.resources.crd.KafkaRebalanceResource;\n+import io.strimzi.test.TestUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+\n+public class KafkaRebalanceUtils {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(KafkaRebalanceUtils.class);\n+\n+    private KafkaRebalanceUtils() {}\n+\n+    public enum KafkaRebalanceState {\n+        PendingProposal,\n+        ProposalReady,\n+        Rebalancing,\n+        Ready,\n+        NotReady,\n+        Stopped\n+    }\n+\n+    public static void waitForKafkaRebalanceCustomResourceState(String resourceName, KafkaRebalanceState state) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI4MDExNQ=="}, "originalCommit": {"oid": "77d094990b514b3c1aa5a196a8bcf4a49e17517e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ1NTY1NA==", "bodyText": "Yes I am working on switching the state and type fields so that they are correct for the OCP UI.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3106#discussion_r437455654", "createdAt": "2020-06-09T14:13:47Z", "author": {"login": "tomncooper"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaRebalanceUtils.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.utils.kafkaUtils;\n+\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.systemtest.resources.crd.KafkaRebalanceResource;\n+import io.strimzi.test.TestUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+\n+public class KafkaRebalanceUtils {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(KafkaRebalanceUtils.class);\n+\n+    private KafkaRebalanceUtils() {}\n+\n+    public enum KafkaRebalanceState {\n+        PendingProposal,\n+        ProposalReady,\n+        Rebalancing,\n+        Ready,\n+        NotReady,\n+        Stopped\n+    }\n+\n+    public static void waitForKafkaRebalanceCustomResourceState(String resourceName, KafkaRebalanceState state) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI4MDExNQ=="}, "originalCommit": {"oid": "77d094990b514b3c1aa5a196a8bcf4a49e17517e"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDE2Mzk1OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaRebalanceUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTo0MjoyN1rOGhBfBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTo0MjoyN1rOGhBfBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI4MDUxNw==", "bodyText": "ResourceManager.logCurrentResourceStatus() is not suitable here?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3106#discussion_r437280517", "createdAt": "2020-06-09T09:42:27Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaRebalanceUtils.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.utils.kafkaUtils;\n+\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.systemtest.resources.crd.KafkaRebalanceResource;\n+import io.strimzi.test.TestUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+\n+public class KafkaRebalanceUtils {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(KafkaRebalanceUtils.class);\n+\n+    private KafkaRebalanceUtils() {}\n+\n+    public enum KafkaRebalanceState {\n+        PendingProposal,\n+        ProposalReady,\n+        Rebalancing,\n+        Ready,\n+        NotReady,\n+        Stopped\n+    }\n+\n+    public static void waitForKafkaRebalanceCustomResourceState(String resourceName, KafkaRebalanceState state) {\n+        LOGGER.info(\"Waiting for KafkaRebalance will be in the {}\", state);\n+\n+        TestUtils.waitFor(\"Waiting for KafkaRebalance will be in the \" + state.name(), Constants.POLL_INTERVAL_FOR_RESOURCE_READINESS, Constants.TIMEOUT_FOR_RESOURCE_READINESS,\n+            () -> {\n+                LOGGER.info(\"Comparing: \" + KafkaRebalanceResource.kafkaRebalanceClient().inNamespace(kubeClient().getNamespace())\n+                    .withName(resourceName).get().getStatus().getConditions().get(0).getStatus() + \" - \" + state.name());\n+                return KafkaRebalanceResource.kafkaRebalanceClient().inNamespace(kubeClient().getNamespace())\n+                    .withName(resourceName).get().getStatus().getConditions().get(0).getStatus().equals(state.name());\n+            },\n+            () -> LOGGER.info(KafkaRebalanceResource.kafkaRebalanceClient().inNamespace(kubeClient().getNamespace()).withName(resourceName).get())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77d094990b514b3c1aa5a196a8bcf4a49e17517e"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1585, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}