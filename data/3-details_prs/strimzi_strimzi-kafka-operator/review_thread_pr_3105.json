{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzODY2ODcx", "number": 3105, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOToyMjo0MFrOEAPomw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzo1NDo1OFrOEB2uYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjkxNjExOnYy", "diffSide": "RIGHT", "path": "documentation/contributing/styleguide.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOToyMjo0MFrOGbZ6Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwODoxMjozNFrOGbqU8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM4OTE5NA==", "bodyText": "Is this intentionaly in this PR? It seems to be unrelated so I'm not sure.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3105#discussion_r431389194", "createdAt": "2020-05-27T19:22:40Z", "author": {"login": "scholzj"}, "path": "documentation/contributing/styleguide.adoc", "diffHunk": "@@ -127,15 +127,15 @@ Learn more about reusing content in the link:https://redhat-documentation.github\n [[replaceables]]\n == Styling replaceables\n \n-Replaceable values in the text and code must be styled as monospace, italics, lowercase, arrow brackets, and hyphens.\n+Replaceable values in the text and code should be styled in `monospace`, with italics, uppercase, and hyphens.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d73a8671d8ccb071430abdbde5c0cb90c939bebd"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY1ODIyNA==", "bodyText": "It's half-related. We're starting to apply a new replaceables format to the doc, which I used on the new oauth config. So I thought I would update the directions too.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3105#discussion_r431658224", "createdAt": "2020-05-28T08:12:34Z", "author": {"login": "PaulRMellor"}, "path": "documentation/contributing/styleguide.adoc", "diffHunk": "@@ -127,15 +127,15 @@ Learn more about reusing content in the link:https://redhat-documentation.github\n [[replaceables]]\n == Styling replaceables\n \n-Replaceable values in the text and code must be styled as monospace, italics, lowercase, arrow brackets, and hyphens.\n+Replaceable values in the text and code should be styled in `monospace`, with italics, uppercase, and hyphens.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM4OTE5NA=="}, "originalCommit": {"oid": "d73a8671d8ccb071430abdbde5c0cb90c939bebd"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzczMDI0OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/proc-oauth-authentication-broker-config.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzozMzozNlrOGd8dQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMjoxOToyNVrOGeZOKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA1MjQxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                userInfoEndpointUri: __https://OAUTH-SEVER-ADDRESS/auth/realms/external/protocol/openid-connect/userinfo__ <5>\n          \n          \n            \n                userInfoEndpointUri: __https://OAUTH-SERVER-ADDRESS/auth/realms/external/protocol/openid-connect/userinfo__ <5>", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3105#discussion_r434052416", "createdAt": "2020-06-02T17:33:36Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/proc-oauth-authentication-broker-config.adoc", "diffHunk": "@@ -108,13 +108,13 @@ Depending on how you apply {oauth} authentication, and the type of authorization\n     fallbackUserNameClaim: client_id <2>\n     fallbackUserNamePrefix: client-account- <3>\n     validTokenType: bearer <4>\n-    userInfoEndpointUri: <__https://<auth-server-address>/auth/realms/external/protocol/openid-connect/userinfo__> <5>\n+    userInfoEndpointUri: __https://OAUTH-SEVER-ADDRESS/auth/realms/external/protocol/openid-connect/userinfo__ <5>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9158a8d98b84eb23d754c3fc9add2e355abb5ca6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUyMzY4OQ==", "bodyText": "Typo!", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3105#discussion_r434523689", "createdAt": "2020-06-03T12:19:25Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/proc-oauth-authentication-broker-config.adoc", "diffHunk": "@@ -108,13 +108,13 @@ Depending on how you apply {oauth} authentication, and the type of authorization\n     fallbackUserNameClaim: client_id <2>\n     fallbackUserNamePrefix: client-account- <3>\n     validTokenType: bearer <4>\n-    userInfoEndpointUri: <__https://<auth-server-address>/auth/realms/external/protocol/openid-connect/userinfo__> <5>\n+    userInfoEndpointUri: __https://OAUTH-SEVER-ADDRESS/auth/realms/external/protocol/openid-connect/userinfo__ <5>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA1MjQxNg=="}, "originalCommit": {"oid": "9158a8d98b84eb23d754c3fc9add2e355abb5ca6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzc4ODgzOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/proc-oauth-authentication-broker-config.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzo1MDowNVrOGd9C7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzo1MDowNVrOGd9C7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2MjA2Mw==", "bodyText": "I realise this is a copy paste from upstream docs, and reading it again I think that it should be improved.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <2> An authorization server may not provide a single attribute to identify both regular users and clients. A client authenticating in its own name might provide a _client ID_. But a user authenticating using a username and password, to obtain a refresh token or an access token, might provide a _username_ attribute in addition to a client ID. Use this fallback option to specify the username claim (attribute) to use if a primary user ID attribute is not available.\n          \n          \n            \n            <2> An authorization server may not provide a single attribute to identify both regular users and clients. When a client authenticates in its own name the server might provide a _client ID_. When a user authenticates using a username and password, to obtain a refresh token or an access token, the server might provide a _username_ attribute in addition to a client ID. Use this fallback option to specify the username claim (attribute) to use if a primary user ID attribute is not available.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3105#discussion_r434062063", "createdAt": "2020-06-02T17:50:05Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/proc-oauth-authentication-broker-config.adoc", "diffHunk": "@@ -108,13 +108,13 @@ Depending on how you apply {oauth} authentication, and the type of authorization\n     fallbackUserNameClaim: client_id <2>\n     fallbackUserNamePrefix: client-account- <3>\n     validTokenType: bearer <4>\n-    userInfoEndpointUri: <__https://<auth-server-address>/auth/realms/external/protocol/openid-connect/userinfo__> <5>\n+    userInfoEndpointUri: __https://OAUTH-SEVER-ADDRESS/auth/realms/external/protocol/openid-connect/userinfo__ <5>\n ----\n <1> If your authorization server does not provide an `iss` claim, it is not possible to perform an issuer check. In this situation, set `checkIssuer` to `false` and do not specify a `validIssuerUri`. Default is `true`.\n-<2> An authorization server may not provide a single attribute to identify both regular users and clients. A client authenticating in its own name might provide a `client_id`. But a user authenticating using a username and password, to obtain a refresh token or an access token, might provide a `username` attribute in addition to a `client_id`. Use this fallback option to specify the username claim (attribute) to use if a primary user id attribute is not available.\n-<3> In situations where `fallbackUserNameClaim` is applicable, it may also be necessary to prevent name collisions between the values of the username claim, and those of the fallback username claim. Consider a situation where a client called `producer` exists, but also a regular user called `producer` exists. In order to differentiate between the two, you can use this property to add a prefix to the user id of the client.\n-<4> (Only applicable when using `introspectionEndpointUri`) Depending on the authorization server you are using, the Introspection Endpoint may or may not return the `token_type` attribute., or it may contain different values. You can specify a valid token type value that the response from the Introspection Endpoint has to contain.\n-<5> (Only applicable when using `introspectionEndpointUri`) The authorization server may be configured or implemented in such a way to not provide any identifiable information in an Introspection Endpoint response. In order to obtain the user id, you can configure the URI of the User Info Endpoint as a fallback. The `userNameClaim`, `fallbackUserNameClaim`, and `fallbackUserNamePrefix` settings are applied to the response of User Info Endpoint.\n+<2> An authorization server may not provide a single attribute to identify both regular users and clients. A client authenticating in its own name might provide a _client ID_. But a user authenticating using a username and password, to obtain a refresh token or an access token, might provide a _username_ attribute in addition to a client ID. Use this fallback option to specify the username claim (attribute) to use if a primary user ID attribute is not available.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9158a8d98b84eb23d754c3fc9add2e355abb5ca6"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzgwNjQwOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/proc-oauth-authentication-broker-config.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzo1NDo1OVrOGd9OJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMjoyMjoyM1rOGeZUig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2NDkzNA==", "bodyText": "I'm not sure if this was a typo - token_type is the literal name of the attribute returned buy the server. It seems as if you wanted to remove the underscore, but you mistakenly removed the letter 'n'. Was that your intent?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <4> (Only applicable when using `introspectionEndpointUri`) Depending on the authorization server you are using, the introspection endpoint may or may not return the _toke type_ attribute, or it may contain different values. You can specify a valid token type value that the response from the introspection endpoint has to contain.\n          \n          \n            \n            <4> (Only applicable when using `introspectionEndpointUri`) Depending on the authorization server you are using, the introspection endpoint may or may not return the _token type_ attribute, or it may contain different values. You can specify a valid token type value that the response from the introspection endpoint has to contain.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3105#discussion_r434064934", "createdAt": "2020-06-02T17:54:59Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/proc-oauth-authentication-broker-config.adoc", "diffHunk": "@@ -108,13 +108,13 @@ Depending on how you apply {oauth} authentication, and the type of authorization\n     fallbackUserNameClaim: client_id <2>\n     fallbackUserNamePrefix: client-account- <3>\n     validTokenType: bearer <4>\n-    userInfoEndpointUri: <__https://<auth-server-address>/auth/realms/external/protocol/openid-connect/userinfo__> <5>\n+    userInfoEndpointUri: __https://OAUTH-SEVER-ADDRESS/auth/realms/external/protocol/openid-connect/userinfo__ <5>\n ----\n <1> If your authorization server does not provide an `iss` claim, it is not possible to perform an issuer check. In this situation, set `checkIssuer` to `false` and do not specify a `validIssuerUri`. Default is `true`.\n-<2> An authorization server may not provide a single attribute to identify both regular users and clients. A client authenticating in its own name might provide a `client_id`. But a user authenticating using a username and password, to obtain a refresh token or an access token, might provide a `username` attribute in addition to a `client_id`. Use this fallback option to specify the username claim (attribute) to use if a primary user id attribute is not available.\n-<3> In situations where `fallbackUserNameClaim` is applicable, it may also be necessary to prevent name collisions between the values of the username claim, and those of the fallback username claim. Consider a situation where a client called `producer` exists, but also a regular user called `producer` exists. In order to differentiate between the two, you can use this property to add a prefix to the user id of the client.\n-<4> (Only applicable when using `introspectionEndpointUri`) Depending on the authorization server you are using, the Introspection Endpoint may or may not return the `token_type` attribute., or it may contain different values. You can specify a valid token type value that the response from the Introspection Endpoint has to contain.\n-<5> (Only applicable when using `introspectionEndpointUri`) The authorization server may be configured or implemented in such a way to not provide any identifiable information in an Introspection Endpoint response. In order to obtain the user id, you can configure the URI of the User Info Endpoint as a fallback. The `userNameClaim`, `fallbackUserNameClaim`, and `fallbackUserNamePrefix` settings are applied to the response of User Info Endpoint.\n+<2> An authorization server may not provide a single attribute to identify both regular users and clients. A client authenticating in its own name might provide a _client ID_. But a user authenticating using a username and password, to obtain a refresh token or an access token, might provide a _username_ attribute in addition to a client ID. Use this fallback option to specify the username claim (attribute) to use if a primary user ID attribute is not available.\n+<3> In situations where `fallbackUserNameClaim` is applicable, it may also be necessary to prevent name collisions between the values of the username claim, and those of the fallback username claim. Consider a situation where a client called `producer` exists, but also a regular user called `producer` exists. In order to differentiate between the two, you can use this property to add a prefix to the user ID of the client.\n+<4> (Only applicable when using `introspectionEndpointUri`) Depending on the authorization server you are using, the introspection endpoint may or may not return the _toke type_ attribute, or it may contain different values. You can specify a valid token type value that the response from the introspection endpoint has to contain.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9158a8d98b84eb23d754c3fc9add2e355abb5ca6"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUyNTMyMg==", "bodyText": "Typo!", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3105#discussion_r434525322", "createdAt": "2020-06-03T12:22:23Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/proc-oauth-authentication-broker-config.adoc", "diffHunk": "@@ -108,13 +108,13 @@ Depending on how you apply {oauth} authentication, and the type of authorization\n     fallbackUserNameClaim: client_id <2>\n     fallbackUserNamePrefix: client-account- <3>\n     validTokenType: bearer <4>\n-    userInfoEndpointUri: <__https://<auth-server-address>/auth/realms/external/protocol/openid-connect/userinfo__> <5>\n+    userInfoEndpointUri: __https://OAUTH-SEVER-ADDRESS/auth/realms/external/protocol/openid-connect/userinfo__ <5>\n ----\n <1> If your authorization server does not provide an `iss` claim, it is not possible to perform an issuer check. In this situation, set `checkIssuer` to `false` and do not specify a `validIssuerUri`. Default is `true`.\n-<2> An authorization server may not provide a single attribute to identify both regular users and clients. A client authenticating in its own name might provide a `client_id`. But a user authenticating using a username and password, to obtain a refresh token or an access token, might provide a `username` attribute in addition to a `client_id`. Use this fallback option to specify the username claim (attribute) to use if a primary user id attribute is not available.\n-<3> In situations where `fallbackUserNameClaim` is applicable, it may also be necessary to prevent name collisions between the values of the username claim, and those of the fallback username claim. Consider a situation where a client called `producer` exists, but also a regular user called `producer` exists. In order to differentiate between the two, you can use this property to add a prefix to the user id of the client.\n-<4> (Only applicable when using `introspectionEndpointUri`) Depending on the authorization server you are using, the Introspection Endpoint may or may not return the `token_type` attribute., or it may contain different values. You can specify a valid token type value that the response from the Introspection Endpoint has to contain.\n-<5> (Only applicable when using `introspectionEndpointUri`) The authorization server may be configured or implemented in such a way to not provide any identifiable information in an Introspection Endpoint response. In order to obtain the user id, you can configure the URI of the User Info Endpoint as a fallback. The `userNameClaim`, `fallbackUserNameClaim`, and `fallbackUserNamePrefix` settings are applied to the response of User Info Endpoint.\n+<2> An authorization server may not provide a single attribute to identify both regular users and clients. A client authenticating in its own name might provide a _client ID_. But a user authenticating using a username and password, to obtain a refresh token or an access token, might provide a _username_ attribute in addition to a client ID. Use this fallback option to specify the username claim (attribute) to use if a primary user ID attribute is not available.\n+<3> In situations where `fallbackUserNameClaim` is applicable, it may also be necessary to prevent name collisions between the values of the username claim, and those of the fallback username claim. Consider a situation where a client called `producer` exists, but also a regular user called `producer` exists. In order to differentiate between the two, you can use this property to add a prefix to the user ID of the client.\n+<4> (Only applicable when using `introspectionEndpointUri`) Depending on the authorization server you are using, the introspection endpoint may or may not return the _toke type_ attribute, or it may contain different values. You can specify a valid token type value that the response from the introspection endpoint has to contain.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2NDkzNA=="}, "originalCommit": {"oid": "9158a8d98b84eb23d754c3fc9add2e355abb5ca6"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1583, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}