{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4Mzk4NDg3", "number": 3228, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODo1NTo1N1rOEIfSaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODo1NzozMlrOEIfUeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzM2NjgzOnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/BaseST.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODo1NTo1N1rOGofAxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOToyMDowOVrOGofzQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEwNDMyNA==", "bodyText": "Did you mean to leave this commented out?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3228#discussion_r445104324", "createdAt": "2020-06-24T18:55:57Z", "author": {"login": "samuel-hawker"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/BaseST.java", "diffHunk": "@@ -165,36 +197,58 @@ protected void teardownEnvForOperator() {\n         cluster.deleteNamespaces();\n     }\n \n+    /**\n+     * Recreate namespace and CO after test failure\n+     * @param coNamespace namespace where CO will be deployed to\n+     * @param operationTimeout timeout for CO operations\n+     * @param reconciliationInterval CO reconciliation interval\n+     */\n+    protected void recreateTestEnv(String coNamespace, long operationTimeout, long reconciliationInterval) throws Exception {\n+        recreateTestEnv(coNamespace, Collections.singletonList(coNamespace), operationTimeout, reconciliationInterval);\n+    }\n+\n+    /**\n+     * Recreate namespace and CO after test failure\n+     * @param coNamespace namespace where CO will be deployed to\n+     * @param bindingsNamespaces array of namespaces where Bindings should be deployed to.\n+     */\n+    protected void recreateTestEnv(String coNamespace, List<String> bindingsNamespaces) throws Exception {\n+        recreateTestEnv(coNamespace, bindingsNamespaces, Constants.CO_OPERATION_TIMEOUT_DEFAULT, Constants.RECONCILIATION_INTERVAL);\n+    }\n+\n     /**\n      * Recreate namespace and CO after test failure\n      * @param coNamespace namespace where CO will be deployed to\n      * @param bindingsNamespaces array of namespaces where Bindings should be deployed to.\n+     * @param operationTimeout timeout for CO operations\n      */\n-    protected void recreateTestEnv(String coNamespace, List<String> bindingsNamespaces) throws InterruptedException {\n-        recreateTestEnv(coNamespace, bindingsNamespaces, Constants.CO_OPERATION_TIMEOUT_DEFAULT);\n+    protected void recreateTestEnv(String coNamespace, List<String> bindingsNamespaces, long operationTimeout) throws Exception {\n+        recreateTestEnv(coNamespace, bindingsNamespaces, operationTimeout, Constants.RECONCILIATION_INTERVAL);\n     }\n \n     /**\n      * Recreate namespace and CO after test failure\n      * @param coNamespace namespace where CO will be deployed to\n      * @param bindingsNamespaces array of namespaces where Bindings should be deployed to.\n      * @param operationTimeout timeout for CO operations\n+     * @param reconciliationInterval CO reconciliation interval\n      */\n-    protected void recreateTestEnv(String coNamespace, List<String> bindingsNamespaces, long operationTimeout) {\n+    protected void recreateTestEnv(String coNamespace, List<String> bindingsNamespaces, long operationTimeout, long reconciliationInterval) throws Exception {\n         ResourceManager.deleteMethodResources();\n         ResourceManager.deleteClassResources();\n \n         KubeClusterResource.getInstance().deleteClusterOperatorInstallFiles();\n         KubeClusterResource.getInstance().deleteNamespaces();\n \n-        KubeClusterResource.getInstance().createNamespaces(coNamespace, bindingsNamespaces);\n-        KubeClusterResource.getInstance().applyClusterOperatorInstallFiles();\n-\n-        ResourceManager.setClassResources();\n-\n-        applyRoleBindings(coNamespace, bindingsNamespaces);\n-        // 050-Deployment\n-        KubernetesResource.clusterOperator(coNamespace, operationTimeout).done();\n+//        KubeClusterResource.getInstance().createNamespaces(coNamespace, bindingsNamespaces);\n+//        KubeClusterResource.getInstance().applyClusterOperatorInstallFiles();\n+//\n+//        ResourceManager.setClassResources();\n+//\n+//        applyRoleBindings(coNamespace, bindingsNamespaces);\n+//        // 050-Deployment", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8461d0716b247db5f1ac64c45bfaeb5d256b8b3d"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTExNzI1MA==", "bodyText": "Good catch, I forgot to remove it :)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3228#discussion_r445117250", "createdAt": "2020-06-24T19:20:09Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/BaseST.java", "diffHunk": "@@ -165,36 +197,58 @@ protected void teardownEnvForOperator() {\n         cluster.deleteNamespaces();\n     }\n \n+    /**\n+     * Recreate namespace and CO after test failure\n+     * @param coNamespace namespace where CO will be deployed to\n+     * @param operationTimeout timeout for CO operations\n+     * @param reconciliationInterval CO reconciliation interval\n+     */\n+    protected void recreateTestEnv(String coNamespace, long operationTimeout, long reconciliationInterval) throws Exception {\n+        recreateTestEnv(coNamespace, Collections.singletonList(coNamespace), operationTimeout, reconciliationInterval);\n+    }\n+\n+    /**\n+     * Recreate namespace and CO after test failure\n+     * @param coNamespace namespace where CO will be deployed to\n+     * @param bindingsNamespaces array of namespaces where Bindings should be deployed to.\n+     */\n+    protected void recreateTestEnv(String coNamespace, List<String> bindingsNamespaces) throws Exception {\n+        recreateTestEnv(coNamespace, bindingsNamespaces, Constants.CO_OPERATION_TIMEOUT_DEFAULT, Constants.RECONCILIATION_INTERVAL);\n+    }\n+\n     /**\n      * Recreate namespace and CO after test failure\n      * @param coNamespace namespace where CO will be deployed to\n      * @param bindingsNamespaces array of namespaces where Bindings should be deployed to.\n+     * @param operationTimeout timeout for CO operations\n      */\n-    protected void recreateTestEnv(String coNamespace, List<String> bindingsNamespaces) throws InterruptedException {\n-        recreateTestEnv(coNamespace, bindingsNamespaces, Constants.CO_OPERATION_TIMEOUT_DEFAULT);\n+    protected void recreateTestEnv(String coNamespace, List<String> bindingsNamespaces, long operationTimeout) throws Exception {\n+        recreateTestEnv(coNamespace, bindingsNamespaces, operationTimeout, Constants.RECONCILIATION_INTERVAL);\n     }\n \n     /**\n      * Recreate namespace and CO after test failure\n      * @param coNamespace namespace where CO will be deployed to\n      * @param bindingsNamespaces array of namespaces where Bindings should be deployed to.\n      * @param operationTimeout timeout for CO operations\n+     * @param reconciliationInterval CO reconciliation interval\n      */\n-    protected void recreateTestEnv(String coNamespace, List<String> bindingsNamespaces, long operationTimeout) {\n+    protected void recreateTestEnv(String coNamespace, List<String> bindingsNamespaces, long operationTimeout, long reconciliationInterval) throws Exception {\n         ResourceManager.deleteMethodResources();\n         ResourceManager.deleteClassResources();\n \n         KubeClusterResource.getInstance().deleteClusterOperatorInstallFiles();\n         KubeClusterResource.getInstance().deleteNamespaces();\n \n-        KubeClusterResource.getInstance().createNamespaces(coNamespace, bindingsNamespaces);\n-        KubeClusterResource.getInstance().applyClusterOperatorInstallFiles();\n-\n-        ResourceManager.setClassResources();\n-\n-        applyRoleBindings(coNamespace, bindingsNamespaces);\n-        // 050-Deployment\n-        KubernetesResource.clusterOperator(coNamespace, operationTimeout).done();\n+//        KubeClusterResource.getInstance().createNamespaces(coNamespace, bindingsNamespaces);\n+//        KubeClusterResource.getInstance().applyClusterOperatorInstallFiles();\n+//\n+//        ResourceManager.setClassResources();\n+//\n+//        applyRoleBindings(coNamespace, bindingsNamespaces);\n+//        // 050-Deployment", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEwNDMyNA=="}, "originalCommit": {"oid": "8461d0716b247db5f1ac64c45bfaeb5d256b8b3d"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzM3MjA4OnYy", "diffSide": "RIGHT", "path": "test/src/main/java/io/strimzi/test/k8s/cmdClient/Kubectl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODo1NzozMlrOGofETA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOToyNDozMFrOGof8QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEwNTIyOA==", "bodyText": "Isnt the default namespace openshift-operators ?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3228#discussion_r445105228", "createdAt": "2020-06-24T18:57:32Z", "author": {"login": "samuel-hawker"}, "path": "test/src/main/java/io/strimzi/test/k8s/cmdClient/Kubectl.java", "diffHunk": "@@ -32,6 +32,11 @@ public String defaultNamespace() {\n         return \"default\";\n     }\n \n+    @Override\n+    public String defaultOlmNamespace() {\n+        return \"operators\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8461d0716b247db5f1ac64c45bfaeb5d256b8b3d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTExOTU1Mw==", "bodyText": "TBH I am not sure. I just read some blog about operatorhub on Kubernetes but I didn't try it. Now I am looking at Strimzi manifests available at https://operatorhub.io/operator/strimzi-kafka-operator and according to this link it should be operators for Kubernetes.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3228#discussion_r445119553", "createdAt": "2020-06-24T19:24:30Z", "author": {"login": "Frawless"}, "path": "test/src/main/java/io/strimzi/test/k8s/cmdClient/Kubectl.java", "diffHunk": "@@ -32,6 +32,11 @@ public String defaultNamespace() {\n         return \"default\";\n     }\n \n+    @Override\n+    public String defaultOlmNamespace() {\n+        return \"operators\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEwNTIyOA=="}, "originalCommit": {"oid": "8461d0716b247db5f1ac64c45bfaeb5d256b8b3d"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1718, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}