{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzMDk0MDYw", "number": 2405, "title": "[MO] - [system fix] -> fixing of system tests", "bodyText": "Signed-off-by: Seequick1 morsak@redhat.com\nType of change\n\nBugfix\n\nDescription\nThis PR fix following system tests:\n\nio.strimzi.systemtest.RollingUpdateST.testRecoveryDuringZookeeperRollingUpdate\nio.strimzi.systemtest.RollingUpdateST.testRecoveryDuringKafkaRollingUpdate\nio.strimzi.systemtest.specific.SpecificST.testDeployUnsupportedKafka\n\nChecklist\n\n Fix all tests\n Make sure all tests pass", "createdAt": "2020-01-15T11:38:04Z", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2405", "merged": true, "mergeCommit": {"oid": "ccb5ad078bec76fd68ac123533807db98a2efa41"}, "closed": true, "closedAt": "2020-01-22T14:24:40Z", "author": {"login": "see-quick"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6j8yygH2gAyMzYzMDk0MDYwOjMyYzNkNWRkNTE3YmIwYTIxZmVlODRlNDFjNWI4NzY0Mjg0YTBmMTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb80N02gH2gAyMzYzMDk0MDYwOjZiZWI3YjBmY2UzNGYyZWIwZWU4YmVjN2Y3ZWIxZDhkZGU4NzA5Njc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "32c3d5dd517bb0a21fee84e41c5b8764284a0f10", "author": {"user": {"login": "see-quick", "name": "Ors\u00e1k Maro\u0161"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/32c3d5dd517bb0a21fee84e41c5b8764284a0f10", "committedDate": "2020-01-15T11:35:37Z", "message": "[MO] - [system fix] -> fixing of system tests\n\nSigned-off-by: Seequick1 <morsak@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1396e30a531b5b9765a6c0fe80b7bcf1aafa6c77", "author": {"user": {"login": "see-quick", "name": "Ors\u00e1k Maro\u0161"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/1396e30a531b5b9765a6c0fe80b7bcf1aafa6c77", "committedDate": "2020-01-15T12:52:34Z", "message": "[MO] - [system fix] -> unsupported kafka version fixed\n\nSigned-off-by: Seequick1 <morsak@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99de7cf4ef36eb222cc79140fbace4cdbb5d06cd", "author": {"user": {"login": "see-quick", "name": "Ors\u00e1k Maro\u0161"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/99de7cf4ef36eb222cc79140fbace4cdbb5d06cd", "committedDate": "2020-01-16T14:38:58Z", "message": "[MO] - [system test] -> fix checkstyle\n\nSigned-off-by: Seequick1 <morsak@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1MjU4MDEw", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2405#pullrequestreview-345258010", "createdAt": "2020-01-20T11:54:33Z", "commit": {"oid": "99de7cf4ef36eb222cc79140fbace4cdbb5d06cd"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMTo1NDozM1rOFfcBfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMTo1NTo0MFrOFfcC9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUwOTMwOQ==", "bodyText": "Do we really need this log every poll interval? This operation use executor and oc logs command so it's very slow. Maybe rewrite it with some kubernetes watchers will be better, but till that I would remove this log.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2405#discussion_r368509309", "createdAt": "2020-01-20T11:54:33Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/StUtils.java", "diffHunk": "@@ -48,9 +48,15 @@ public static void waitForReconciliation(String testClass, String testName, Stri\n         LOGGER.info(\"Waiting for reconciliation\");\n         String reconciliation = timeMeasuringSystem.startOperation(Operation.NEXT_RECONCILIATION);\n         TestUtils.waitFor(\"Wait till another rolling update starts\", Constants.CO_OPERATION_TIMEOUT_POLL, Constants.RECONCILIATION_INTERVAL + 30000,\n-            () -> !cmdKubeClient().searchInLog(\"deploy\", \"strimzi-cluster-operator\",\n+            () -> {\n+                LOGGER.info(\"Logging reconciliation for time {}\", timeMeasuringSystem.getCurrentDuration(testClass, testName, reconciliation));\n+                LOGGER.info(\"Reconciliation log:\\n{}\", cmdKubeClient().searchInLog(\"deploy\", \"strimzi-cluster-operator\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99de7cf4ef36eb222cc79140fbace4cdbb5d06cd"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUwOTY4NA==", "bodyText": "You can store Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0) in variable and then check proper values.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2405#discussion_r368509684", "createdAt": "2020-01-20T11:55:40Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaUtils.java", "diffHunk": "@@ -34,11 +34,13 @@ public static void waitUntilKafkaCRIsReady(String clusterName) {\n         LOGGER.info(\"Kafka CR will be ready\");\n     }\n \n-    public static void waitUntilKafkaStatusConditionIsPresent(String clusterName) {\n+    public static void waitUntilKafkaStatusConditionIsNotReady(String clusterName) throws InterruptedException {\n         LOGGER.info(\"Waiting till kafka resource status is present\");\n         TestUtils.waitFor(\"Waiting for Kafka resource status is ready\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n-            () ->  Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0) != null\n+            () ->  Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0).getType().equals(\"NotReady\") &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99de7cf4ef36eb222cc79140fbace4cdbb5d06cd"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1NzMzOTYw", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2405#pullrequestreview-345733960", "createdAt": "2020-01-21T09:28:06Z", "commit": {"oid": "99de7cf4ef36eb222cc79140fbace4cdbb5d06cd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwOToyODowNlrOFfzRdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwOToyODowNlrOFfzRdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg5MDIzMQ==", "bodyText": "Maybe I'm reading it wrong. But we have:\n\nMethod named waitUntilKafkaStatusConditionIsNotReady\na Log message Waiting till kafka resource status is present\nsome other message saying Waiting for Kafka resource status is ready\nA condition which seems to check if the pod has condition NotReady\n\nSo I wonder which of these does it actually do.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2405#discussion_r368890231", "createdAt": "2020-01-21T09:28:06Z", "author": {"login": "scholzj"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaUtils.java", "diffHunk": "@@ -34,11 +34,13 @@ public static void waitUntilKafkaCRIsReady(String clusterName) {\n         LOGGER.info(\"Kafka CR will be ready\");\n     }\n \n-    public static void waitUntilKafkaStatusConditionIsPresent(String clusterName) {\n+    public static void waitUntilKafkaStatusConditionIsNotReady(String clusterName) throws InterruptedException {\n         LOGGER.info(\"Waiting till kafka resource status is present\");\n         TestUtils.waitFor(\"Waiting for Kafka resource status is ready\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n-            () ->  Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0) != null\n+            () ->  Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0).getType().equals(\"NotReady\") &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99de7cf4ef36eb222cc79140fbace4cdbb5d06cd"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22b793610888c042d033cb21731c3864065349e3", "author": {"user": {"login": "see-quick", "name": "Ors\u00e1k Maro\u0161"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/22b793610888c042d033cb21731c3864065349e3", "committedDate": "2020-01-21T11:54:35Z", "message": "[MO] - [system test] -> resolve commends\n\nSigned-off-by: Seequick1 <morsak@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MzkwNjY3", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2405#pullrequestreview-346390667", "createdAt": "2020-01-22T07:41:18Z", "commit": {"oid": "22b793610888c042d033cb21731c3864065349e3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwNzo0MToxOFrOFgSzWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwNzo0MToxOFrOFgSzWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNjgwOA==", "bodyText": "Sorry to be nitpicking ... but some more inconsistencies ...\n\nFew lines above you have method waitUntilKafkaCRIsReady which does the same just for Ready state. Could we have some naming consistency?\nThe method above doesn't seem to need the Thread.sleep(...). Why do we need it here?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2405#discussion_r369406808", "createdAt": "2020-01-22T07:41:18Z", "author": {"login": "scholzj"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaUtils.java", "diffHunk": "@@ -27,19 +28,23 @@ private KafkaUtils() {}\n \n     public static void waitUntilKafkaCRIsReady(String clusterName) {\n         LOGGER.info(\"Waiting till Kafka CR will be ready\");\n+        Condition condition = Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0);\n+\n         TestUtils.waitFor(\"Waiting for Kafka resource status is ready\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n-            () ->   Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0).getType().equals(\"Ready\") &&\n-                Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0).getStatus().equals(\"True\")\n+            () ->   condition.getType().equals(\"Ready\") && condition.getStatus().equals(\"True\")\n         );\n         LOGGER.info(\"Kafka CR will be ready\");\n     }\n \n-    public static void waitUntilKafkaStatusConditionIsPresent(String clusterName) {\n-        LOGGER.info(\"Waiting till kafka resource status is present\");\n-        TestUtils.waitFor(\"Waiting for Kafka resource status is ready\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n-            () ->  Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0) != null\n+    public static void waitUntilKafkaStatusConditionIsNotReady(String clusterName) throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22b793610888c042d033cb21731c3864065349e3"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8784501837e29031e2d4aa3b39db0e9412fdb2cf", "author": {"user": {"login": "see-quick", "name": "Ors\u00e1k Maro\u0161"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/8784501837e29031e2d4aa3b39db0e9412fdb2cf", "committedDate": "2020-01-22T08:54:40Z", "message": "[MO] - [system test] -> resolve commends\n\nSigned-off-by: Seequick1 <morsak@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecbbaaa26077f6c04581ecee96a08bc32986afe2", "author": {"user": {"login": "see-quick", "name": "Ors\u00e1k Maro\u0161"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ecbbaaa26077f6c04581ecee96a08bc32986afe2", "committedDate": "2020-01-22T09:39:48Z", "message": "[MO] - [system test] -> resolve sleep\n\nSigned-off-by: Seequick1 <morsak@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2NDc1MTg2", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2405#pullrequestreview-346475186", "createdAt": "2020-01-22T10:15:20Z", "commit": {"oid": "ecbbaaa26077f6c04581ecee96a08bc32986afe2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMDoxNToyMFrOFgW2cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMDoxNToyMFrOFgW2cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ3MzEzNg==", "bodyText": "A nit pick, maybe you can add the message to the log message here and to the message on line 44. But that is just a detail.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2405#discussion_r369473136", "createdAt": "2020-01-22T10:15:20Z", "author": {"login": "scholzj"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaUtils.java", "diffHunk": "@@ -25,21 +26,29 @@\n \n     private KafkaUtils() {}\n \n-    public static void waitUntilKafkaCRIsReady(String clusterName) {\n+    public static void waitUntilKafkaStatusConditionIsReady(String clusterName) {\n         LOGGER.info(\"Waiting till Kafka CR will be ready\");\n+\n         TestUtils.waitFor(\"Waiting for Kafka resource status is ready\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n-            () ->   Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0).getType().equals(\"Ready\") &&\n-                Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0).getStatus().equals(\"True\")\n+            () ->  {\n+                Condition condition = Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0);\n+                return condition.getType().equals(\"Ready\") && condition.getStatus().equals(\"True\");\n+            }\n         );\n         LOGGER.info(\"Kafka CR will be ready\");\n     }\n \n-    public static void waitUntilKafkaStatusConditionIsPresent(String clusterName) {\n-        LOGGER.info(\"Waiting till kafka resource status is present\");\n-        TestUtils.waitFor(\"Waiting for Kafka resource status is ready\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n-            () ->  Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0) != null\n+    public static void waitUntilKafkaStatusConditionIsNotReady(String clusterName, String message) {\n+        LOGGER.info(\"Waiting till kafka resource status is not ready\");\n+\n+        TestUtils.waitFor(\"Waiting for Kafka resource status is not ready\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n+            () ->  {\n+                Condition condition = Crds.kafkaOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0);\n+                LOGGER.info(\"Type:{}, Status:{}, Message:{}\", condition.getType(), condition.getStatus(), condition.getMessage());\n+                return condition.getType().equals(\"NotReady\") && condition.getStatus().equals(\"True\") && condition.getMessage().contains(message);\n+            }\n         );\n-        LOGGER.info(\"Kafka resource status is present\");\n+        LOGGER.info(\"Kafka resource status is not ready\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecbbaaa26077f6c04581ecee96a08bc32986afe2"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2NDc1MjM3", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2405#pullrequestreview-346475237", "createdAt": "2020-01-22T10:15:23Z", "commit": {"oid": "ecbbaaa26077f6c04581ecee96a08bc32986afe2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2NDkzMDAx", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2405#pullrequestreview-346493001", "createdAt": "2020-01-22T10:43:36Z", "commit": {"oid": "ecbbaaa26077f6c04581ecee96a08bc32986afe2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6beb7b0fce34f2eb0ee8bec7f7eb1d8dde870967", "author": {"user": {"login": "see-quick", "name": "Ors\u00e1k Maro\u0161"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/6beb7b0fce34f2eb0ee8bec7f7eb1d8dde870967", "committedDate": "2020-01-22T11:40:33Z", "message": "[MO] - [system test] -> commends\n\nSigned-off-by: Seequick1 <morsak@redhat.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1804, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}