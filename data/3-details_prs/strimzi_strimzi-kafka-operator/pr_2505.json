{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwODgzNzM3", "number": 2505, "title": "ST: Add PVC deletion check to avoid that newly created cluster will try to mount old PV", "bodyText": "Signed-off-by: Jakub Stejskal xstejs24@gmail.com\nType of change\n\nBugfix\n\nDescription\nThis PR add check for PVC deletion when Kafka cluster is being deleted. This should avoid that newly created cluster in next test will try to use same PV.\nChecklist\n\n Make sure all tests pass", "createdAt": "2020-02-04T14:58:46Z", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2505", "merged": true, "mergeCommit": {"oid": "9b3eae2bcef04a98ab9f32fe50fca8a0f85bfeb7"}, "closed": true, "closedAt": "2020-02-07T11:47:38Z", "author": {"login": "Frawless"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBCze7gH2gAyMzcwODgzNzM3OjAyY2VhN2JiYmMyMzI1Zjk5ZmM3ZmNmMmRjOTVhYmNjYTYyMDAyYjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcB6-RVgFqTM1NDQ1OTg5Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "02cea7bbbc2325f99fc7fcf2dc95abcca62002b2", "author": {"user": {"login": "Frawless", "name": "Jakub Stejskal"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/02cea7bbbc2325f99fc7fcf2dc95abcca62002b2", "committedDate": "2020-02-04T14:56:03Z", "message": "Add PVC deletion to avoid that newly created cluster will try to mount old PV\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MDc5NzM2", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2505#pullrequestreview-354079736", "createdAt": "2020-02-05T22:16:04Z", "commit": {"oid": "02cea7bbbc2325f99fc7fcf2dc95abcca62002b2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MjE1OTM2", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2505#pullrequestreview-354215936", "createdAt": "2020-02-06T06:00:39Z", "commit": {"oid": "02cea7bbbc2325f99fc7fcf2dc95abcca62002b2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNjowMDozOVrOFmQEIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNjowMDozOVrOFmQEIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY1MzQxMQ==", "bodyText": "a question ... we have deleteClaim property on the storage which is actually for deleting PVCs when the cluster is deployed. Should you set this flag for your deployed Kafka cluster and then waiting just for deletion instead of forcing it?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2505#discussion_r375653411", "createdAt": "2020-02-06T06:00:39Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/PersistentVolumeClaimUtils.java", "diffHunk": "@@ -47,4 +50,22 @@ public static void waitUntilPVCAnnotationChange(Map<String, String> newAnnotatio\n             });\n         LOGGER.info(\"PVC annotation has changed {}\", newAnnotation.toString());\n     }\n+\n+    public static void waitUntilPVCDeletion(String clusterName) {\n+        LOGGER.info(\"Waiting till PVC deletion for cluster {}\", clusterName);\n+        TestUtils.waitFor(\"Waiting till PVC will be deleted {}\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_STATUS_TIMEOUT,\n+            () -> {\n+                List<PersistentVolumeClaim> pvcList = kubeClient().listPersistentVolumeClaims().stream().filter(pvc -> pvc.getMetadata().getName().contains(clusterName)).collect(Collectors.toList());\n+                if (pvcList.isEmpty()) {\n+                    return true;\n+                } else {\n+                    for (PersistentVolumeClaim pvc : pvcList) {\n+                        LOGGER.warn(\"PVC {} is not deleted yet! Triggering force delete by cmd client!\", pvc.getMetadata().getName());\n+                        cmdKubeClient().deleteByName(\"pvc\", pvc.getMetadata().getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02cea7bbbc2325f99fc7fcf2dc95abcca62002b2"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d22b5ad8c4304f81ac05aef0f0515fc4e92bd40", "author": {"user": {"login": "Frawless", "name": "Jakub Stejskal"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/7d22b5ad8c4304f81ac05aef0f0515fc4e92bd40", "committedDate": "2020-02-07T08:11:10Z", "message": "Add deleteClaim option for PVC to true\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0NDU5ODky", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2505#pullrequestreview-354459892", "createdAt": "2020-02-06T13:47:14Z", "commit": {"oid": "02cea7bbbc2325f99fc7fcf2dc95abcca62002b2"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMzo0NzoxNVrOFmbkSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMzo0NzoxNVrOFmbkSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg0MTg2NQ==", "bodyText": "So it means that it's the current test deleting the PVCs if you are leaving the deleteClaim to the default false.\nI guess it's not the purpose of this test to check that deleteClaim is working fine when it's true. Do you have a corresponding ST for it?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2505#discussion_r375841865", "createdAt": "2020-02-06T13:47:15Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/PersistentVolumeClaimUtils.java", "diffHunk": "@@ -47,4 +50,22 @@ public static void waitUntilPVCAnnotationChange(Map<String, String> newAnnotatio\n             });\n         LOGGER.info(\"PVC annotation has changed {}\", newAnnotation.toString());\n     }\n+\n+    public static void waitUntilPVCDeletion(String clusterName) {\n+        LOGGER.info(\"Waiting till PVC deletion for cluster {}\", clusterName);\n+        TestUtils.waitFor(\"Waiting till PVC will be deleted {}\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_STATUS_TIMEOUT,\n+            () -> {\n+                List<PersistentVolumeClaim> pvcList = kubeClient().listPersistentVolumeClaims().stream().filter(pvc -> pvc.getMetadata().getName().contains(clusterName)).collect(Collectors.toList());\n+                if (pvcList.isEmpty()) {\n+                    return true;\n+                } else {\n+                    for (PersistentVolumeClaim pvc : pvcList) {\n+                        LOGGER.warn(\"PVC {} is not deleted yet! Triggering force delete by cmd client!\", pvc.getMetadata().getName());\n+                        cmdKubeClient().deleteByName(\"pvc\", pvc.getMetadata().getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY1MzQxMQ=="}, "originalCommit": {"oid": "02cea7bbbc2325f99fc7fcf2dc95abcca62002b2"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2204, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}