{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMjQzMDc4", "number": 2391, "title": "ST: listeners custom certs tests", "bodyText": "Type of change\n\nEnhancement / new feature\n\nDescription\nThis PR contains tests for #2204 (Enabled custom certificates for external listeners).\nGenerated certificates will expire in 90 years.\nChecklist\n\n Write tests\n Make sure all tests pass", "createdAt": "2020-01-13T17:47:23Z", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2391", "merged": true, "mergeCommit": {"oid": "2d4c0fc73b5092ec885b8846d59680767fd7114d"}, "closed": true, "closedAt": "2020-01-23T23:12:02Z", "author": {"login": "Frawless"}, "timelineItems": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6Q8vpABqjI5NDcwNDU1NzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb9Hn_4AH2gAyMzYyMjQzMDc4OmQ3MTNjYmFiZThkNTU2YzJlZDFlNTI2OTQwY2Y3YmEzMTVmNmZhMmI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d2808d77305a2ce3b753be0179ce9a46c6e0f239", "author": {"user": {"login": "Frawless", "name": "Jakub Stejskal"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d2808d77305a2ce3b753be0179ce9a46c6e0f239", "committedDate": "2020-01-14T09:31:56Z", "message": "Add regresison tag to external listeners tag\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>"}, "afterCommit": {"oid": "78f8db8a794fb4ad284b6335e439f041404659e2", "author": {"user": {"login": "Frawless", "name": "Jakub Stejskal"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/78f8db8a794fb4ad284b6335e439f041404659e2", "committedDate": "2020-01-14T13:02:19Z", "message": "Add regresison tag to external listeners tag\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMDA5ODI1", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2391#pullrequestreview-343009825", "createdAt": "2020-01-15T06:31:45Z", "commit": {"oid": "78f8db8a794fb4ad284b6335e439f041404659e2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d4055e5668ea0f4ab1b92531dac9dae0f7d32f40", "author": {"user": {"login": "Frawless", "name": "Jakub Stejskal"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d4055e5668ea0f4ab1b92531dac9dae0f7d32f40", "committedDate": "2020-01-18T16:56:13Z", "message": "Add TLS listener with cusotm certs\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>"}, "afterCommit": {"oid": "1355da97a44babe0159a3b2afcc2a056ae8456c9", "author": {"user": {"login": "Frawless", "name": "Jakub Stejskal"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/1355da97a44babe0159a3b2afcc2a056ae8456c9", "committedDate": "2020-01-19T09:13:52Z", "message": "Fix conflicts and refactor code after rebase\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e2389fb0730a9c61f8d937b3099552ee18192834", "author": {"user": {"login": "Frawless", "name": "Jakub Stejskal"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/e2389fb0730a9c61f8d937b3099552ee18192834", "committedDate": "2020-01-20T06:29:08Z", "message": "fixup! Some minor fixes"}, "afterCommit": {"oid": "6f2e1042e0fa55964ca8f65d7a46be73ee69ee34", "author": {"user": {"login": "Frawless", "name": "Jakub Stejskal"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/6f2e1042e0fa55964ca8f65d7a46be73ee69ee34", "committedDate": "2020-01-20T06:29:42Z", "message": "fixup! Some minor fixes\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1NzA4OTg4", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2391#pullrequestreview-345708988", "createdAt": "2020-01-21T08:46:04Z", "commit": {"oid": "62a603f69a227235c51e58e857da7bef1a1e555a"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2Mzg0NzE0", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2391#pullrequestreview-346384714", "createdAt": "2020-01-22T07:24:01Z", "commit": {"oid": "3d9bf488db6bd9970f7e46fa536d9548443109b1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "517b8a7fb4dcac2d73b0177db5ffa6f6e4c6d768", "author": {"user": {"login": "Frawless", "name": "Jakub Stejskal"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/517b8a7fb4dcac2d73b0177db5ffa6f6e4c6d768", "committedDate": "2020-01-22T15:34:25Z", "message": "FIx strange behaviour when kafka cluster is broken in one test and new cluster doesn't working in anotehr test\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>"}, "afterCommit": {"oid": "b682a9c13b1c69b2e31862a0bd1aa8403e8a77a8", "author": {"user": {"login": "Frawless", "name": "Jakub Stejskal"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b682a9c13b1c69b2e31862a0bd1aa8403e8a77a8", "committedDate": "2020-01-22T15:53:00Z", "message": "fixup! FIx strange behaviour when kafka cluster is broken in one test and new cluster doesn't working in anotehr test\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3MTE0NzU3", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2391#pullrequestreview-347114757", "createdAt": "2020-01-23T08:10:08Z", "commit": {"oid": "b682a9c13b1c69b2e31862a0bd1aa8403e8a77a8"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwODoxMDowOFrOFg1kCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwODoyNjo0NVrOFg17Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk3NjMzMQ==", "bodyText": "I'd use caCertName for this variable.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2391#discussion_r369976331", "createdAt": "2020-01-23T08:10:08Z", "author": {"login": "sknot-rh"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/kafkaclients/internalclients/KafkaClient.java", "diffHunk": "@@ -68,17 +73,24 @@ public void close() {\n     @Override\n     public Future<Integer> sendMessagesTls(String topicName, String namespace, String clusterName, String kafkaUsername, int messageCount, String securityProtocol) {\n         String clientName = \"sender-ssl\" + clusterName;\n+        vertx = Vertx.vertx();\n         CompletableFuture<Integer> resultPromise = new CompletableFuture<>();\n \n         IntPredicate msgCntPredicate = x -> x == messageCount;\n \n-        vertx.deployVerticle(new Producer(KafkaClientProperties.createProducerProperties(namespace, clusterName, kafkaUsername, securityProtocol, EClientType.BASIC, null), resultPromise, msgCntPredicate, topicName, clientName));\n+        String clientSecretName = getCaCertName() == null ? KafkaResource.getKafkaExternalListenerCaCertName(namespace, clusterName) : getCaCertName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b682a9c13b1c69b2e31862a0bd1aa8403e8a77a8"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk3NjczMQ==", "bodyText": "I'd use caCertName for this variable.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2391#discussion_r369976731", "createdAt": "2020-01-23T08:11:16Z", "author": {"login": "sknot-rh"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/kafkaclients/internalclients/KafkaClient.java", "diffHunk": "@@ -196,17 +212,24 @@ public void sendMessagesExternalScramSha(String clusterName, String namespace, S\n     @Override\n     public Future<Integer> receiveMessagesTls(String topicName, String namespace, String clusterName, String kafkaUsername, int messageCount, String securityProtocol, String consumerGroup) {\n         String clientName = \"receiver-ssl-\" + clusterName;\n+        vertx = Vertx.vertx();\n         CompletableFuture<Integer> resultPromise = new CompletableFuture<>();\n \n         IntPredicate msgCntPredicate = x -> x == messageCount;\n \n-        vertx.deployVerticle(new Consumer(KafkaClientProperties.createConsumerProperties(namespace, clusterName, kafkaUsername, securityProtocol, consumerGroup), resultPromise, msgCntPredicate, topicName, clientName));\n+        String clientSecretName = getCaCertName() == null ? KafkaResource.getKafkaExternalListenerCaCertName(namespace, clusterName) : getCaCertName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b682a9c13b1c69b2e31862a0bd1aa8403e8a77a8"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk3OTc2Nw==", "bodyText": "Why is this value set to 10? :O", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2391#discussion_r369979767", "createdAt": "2020-01-23T08:20:11Z", "author": {"login": "sknot-rh"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/PodUtils.java", "diffHunk": "@@ -82,7 +85,8 @@ public static void waitForPodsReady(LabelSelector selector, int expectPods, bool\n             }\n             LOGGER.debug(\"Pods {} are ready\",\n                 pods.stream().map(p -> p.getMetadata().getName()).collect(Collectors.joining(\", \")));\n-            return true;\n+            int c = count.getAndIncrement();\n+            return c > 10;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b682a9c13b1c69b2e31862a0bd1aa8403e8a77a8"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk4MDI1Ng==", "bodyText": "I know it is annoying but I'd split this to separate PR", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2391#discussion_r369980256", "createdAt": "2020-01-23T08:21:29Z", "author": {"login": "sknot-rh"}, "path": "systemtest/src/main/resources/log4j2.properties", "diffHunk": "@@ -5,7 +5,7 @@ appender.console.name = STDOUT\n appender.console.layout.type = PatternLayout\n appender.console.layout.pattern = [%d] %highlight{%-5p} %m (%c:%L)%n\n \n-rootLogger.level = ${env:STRIMZI_LOG_LEVEL:-INFO}\n+rootLogger.level = ${env:STRIMZI_TEST_LOG_LEVEL:-INFO}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b682a9c13b1c69b2e31862a0bd1aa8403e8a77a8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk4MjI0Mg==", "bodyText": "Dito", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2391#discussion_r369982242", "createdAt": "2020-01-23T08:26:45Z", "author": {"login": "sknot-rh"}, "path": "systemtest/src/test/resources/log4j2.properties", "diffHunk": "@@ -5,7 +5,7 @@ appender.console.name = STDOUT\n appender.console.layout.type = PatternLayout\n appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss}{GMT} %highlight{%-5p} [%c{1}:%L] %m%n\n \n-rootLogger.level = ${env:STRIMZI_LOG_LEVEL:-INFO}\n+rootLogger.level = ${env:STRIMZI_TEST_LOG_LEVEL:-INFO}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b682a9c13b1c69b2e31862a0bd1aa8403e8a77a8"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3MTMyNjA1", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2391#pullrequestreview-347132605", "createdAt": "2020-01-23T08:46:53Z", "commit": {"oid": "b682a9c13b1c69b2e31862a0bd1aa8403e8a77a8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3MTIwMjky", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2391#pullrequestreview-347120292", "createdAt": "2020-01-23T08:22:19Z", "commit": {"oid": "b682a9c13b1c69b2e31862a0bd1aa8403e8a77a8"}, "state": "APPROVED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwODoyMjoxOVrOFg10Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwODo0OTo1MVrOFg2gPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk4MDUxOA==", "bodyText": "Just a detail, by java convention there is no need to use getters unless we perfoming some control logic inside getters. Change getCaCertName() --> caCertName or this.caCertName\n\nThe reason for hiding is mainly to hide the implementation (and there's no need to hide the implementation from the class itself)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2391#discussion_r369980518", "createdAt": "2020-01-23T08:22:19Z", "author": {"login": "see-quick"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/kafkaclients/internalclients/KafkaClient.java", "diffHunk": "@@ -68,17 +73,24 @@ public void close() {\n     @Override\n     public Future<Integer> sendMessagesTls(String topicName, String namespace, String clusterName, String kafkaUsername, int messageCount, String securityProtocol) {\n         String clientName = \"sender-ssl\" + clusterName;\n+        vertx = Vertx.vertx();\n         CompletableFuture<Integer> resultPromise = new CompletableFuture<>();\n \n         IntPredicate msgCntPredicate = x -> x == messageCount;\n \n-        vertx.deployVerticle(new Producer(KafkaClientProperties.createProducerProperties(namespace, clusterName, kafkaUsername, securityProtocol, EClientType.BASIC, null), resultPromise, msgCntPredicate, topicName, clientName));\n+        String clientSecretName = getCaCertName() == null ? KafkaResource.getKafkaExternalListenerCaCertName(namespace, clusterName) : getCaCertName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b682a9c13b1c69b2e31862a0bd1aa8403e8a77a8"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk4MDcwOA==", "bodyText": "here also", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2391#discussion_r369980708", "createdAt": "2020-01-23T08:22:49Z", "author": {"login": "see-quick"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/kafkaclients/internalclients/KafkaClient.java", "diffHunk": "@@ -196,17 +212,24 @@ public void sendMessagesExternalScramSha(String clusterName, String namespace, S\n     @Override\n     public Future<Integer> receiveMessagesTls(String topicName, String namespace, String clusterName, String kafkaUsername, int messageCount, String securityProtocol, String consumerGroup) {\n         String clientName = \"receiver-ssl-\" + clusterName;\n+        vertx = Vertx.vertx();\n         CompletableFuture<Integer> resultPromise = new CompletableFuture<>();\n \n         IntPredicate msgCntPredicate = x -> x == messageCount;\n \n-        vertx.deployVerticle(new Consumer(KafkaClientProperties.createConsumerProperties(namespace, clusterName, kafkaUsername, securityProtocol, consumerGroup), resultPromise, msgCntPredicate, topicName, clientName));\n+        String clientSecretName = getCaCertName() == null ? KafkaResource.getKafkaExternalListenerCaCertName(namespace, clusterName) : getCaCertName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b682a9c13b1c69b2e31862a0bd1aa8403e8a77a8"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk4NTA4MQ==", "bodyText": "Can you specify in default new value for example like KafkaListenerExternalIngress.TYPE_NONE, basically use it instead of null when you comparing in return or it isn't possible?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2391#discussion_r369985081", "createdAt": "2020-01-23T08:33:32Z", "author": {"login": "see-quick"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaResource.java", "diffHunk": "@@ -199,4 +207,35 @@ public static void replaceKafkaResource(String resourceName, Consumer<Kafka> edi\n         ResourceManager.replaceCrdResource(Kafka.class, KafkaList.class, DoneableKafka.class, resourceName, editor);\n     }\n \n+    public static String getKafkaTlsListenerCaCertName(String namespace, String clusterName) {\n+        KafkaListenerTls kafkaListenerTls = kafkaClient().inNamespace(namespace).withName(clusterName).get().getSpec().getKafka().getListeners().getTls();\n+        return kafkaListenerTls.getConfiguration() == null ?\n+                KafkaResources.clusterCaCertificateSecretName(clusterName) : kafkaListenerTls.getConfiguration().getBrokerCertChainAndKey().getSecretName();\n+    }\n+\n+    public static String getKafkaExternalListenerCaCertName(String namespace, String clusterName) {\n+        KafkaListenerExternal kafkaListenerExternal = kafkaClient().inNamespace(namespace).withName(clusterName).get().getSpec().getKafka().getListeners().getExternal();\n+\n+        KafkaListenerExternalConfiguration kafkaListenerExternalConfiguration = null;\n+\n+        switch (kafkaListenerExternal.getType()) {\n+            case KafkaListenerExternalRoute.TYPE_ROUTE:\n+                kafkaListenerExternalConfiguration = ((KafkaListenerExternalRoute) kafkaListenerExternal).getConfiguration();\n+                break;\n+            case KafkaListenerExternalNodePort.TYPE_NODEPORT:\n+                kafkaListenerExternalConfiguration = ((KafkaListenerExternalNodePort) kafkaListenerExternal).getConfiguration();\n+                break;\n+            case KafkaListenerExternalLoadBalancer.TYPE_LOADBALANCER:\n+                kafkaListenerExternalConfiguration = ((KafkaListenerExternalLoadBalancer) kafkaListenerExternal).getConfiguration();\n+                break;\n+            case KafkaListenerExternalIngress.TYPE_INGRESS:\n+                kafkaListenerExternalConfiguration = ((KafkaListenerExternalIngress) kafkaListenerExternal).getConfiguration();\n+                break;\n+            default:\n+                break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b682a9c13b1c69b2e31862a0bd1aa8403e8a77a8"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk4NjQ1NQ==", "bodyText": "as we discussed yesterday, you will change this parameters to have only username instead of CLUSTER_NAME, NAMESPACE parameters right ?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2391#discussion_r369986455", "createdAt": "2020-01-23T08:37:04Z", "author": {"login": "see-quick"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/KafkaST.java", "diffHunk": "@@ -493,7 +493,7 @@ void testSendMessagesPlainAnonymous() throws InterruptedException {\n         KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3).done();\n         KafkaTopicResource.topic(CLUSTER_NAME, topicName).done();\n \n-        KafkaClientsResource.deployKafkaClients(CLUSTER_NAME + \"-\" + Constants.KAFKA_CLIENTS).done();\n+        KafkaClientsResource.deployKafkaClients(false, CLUSTER_NAME + \"-\" + Constants.KAFKA_CLIENTS, CLUSTER_NAME, NAMESPACE).done();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b682a9c13b1c69b2e31862a0bd1aa8403e8a77a8"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk4ODYxMw==", "bodyText": "Move this method variable userName to class variable, because you are using mostly in all  test cases as i can see.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2391#discussion_r369988613", "createdAt": "2020-01-23T08:42:29Z", "author": {"login": "see-quick"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/kafka/ListenersST.java", "diffHunk": "@@ -0,0 +1,822 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.kafka;\n+\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.api.kafka.model.KafkaUser;\n+import io.strimzi.api.kafka.model.listener.KafkaListenerExternalLoadBalancerBuilder;\n+import io.strimzi.api.kafka.model.listener.KafkaListenerExternalNodePortBuilder;\n+import io.strimzi.api.kafka.model.listener.KafkaListenerExternalRouteBuilder;\n+import io.strimzi.api.kafka.model.listener.KafkaListenerTlsBuilder;\n+import io.strimzi.systemtest.BaseST;\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.systemtest.annotations.OpenShiftOnly;\n+import io.strimzi.systemtest.resources.KubernetesResource;\n+import io.strimzi.systemtest.resources.ResourceManager;\n+import io.strimzi.systemtest.resources.crd.KafkaClientsResource;\n+import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaUserResource;\n+import io.strimzi.systemtest.utils.kafkaUtils.KafkaUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.StatefulSetUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.objects.SecretUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Map;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+\n+import static io.strimzi.systemtest.Constants.LOADBALANCER_SUPPORTED;\n+import static io.strimzi.systemtest.Constants.NODEPORT_SUPPORTED;\n+import static io.strimzi.systemtest.Constants.REGRESSION;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+@Tag(REGRESSION)\n+public class ListenersST extends BaseST {\n+    private static final Logger LOGGER = LogManager.getLogger(ListenersST.class);\n+\n+    public static final String NAMESPACE = \"kafka-listeners-cluster-test\";\n+\n+    private String customCertChain1 = \"custom-certificate-chain-1\";\n+    private String customCertChain2 = \"custom-certificate-chain-2\";\n+    private String customCertServer1 = \"custom-certificate-server-1\";\n+    private String customCertServer2 = \"custom-certificate-server-2\";\n+    private String customRootCA1 = \"custom-certificate-root-1\";\n+    private String customRootCA2 = \"custom-certificate-root-2\";\n+\n+    @Test\n+    @Tag(NODEPORT_SUPPORTED)\n+    void testCustomSoloCertificatesForNodePort() throws Exception {\n+        String topicName = \"test-topic-\" + rng.nextInt(Integer.MAX_VALUE);\n+\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 3)\n+            .editSpec()\n+                .editKafka()\n+                    .editListeners()\n+                        .withNewTls()\n+                            .withNewConfiguration()\n+                                .withNewBrokerCertChainAndKey()\n+                                    .withSecretName(customCertServer1)\n+                                    .withKey(\"ca.key\")\n+                                    .withCertificate(\"ca.crt\")\n+                                .endBrokerCertChainAndKey()\n+                            .endConfiguration()\n+                        .endTls()\n+                        .withNewKafkaListenerExternalNodePort()\n+                            .withNewConfiguration()\n+                                .withNewBrokerCertChainAndKey()\n+                                    .withSecretName(customCertServer1)\n+                                    .withKey(\"ca.key\")\n+                                    .withCertificate(\"ca.crt\")\n+                                .endBrokerCertChainAndKey()\n+                            .endConfiguration()\n+                        .endKafkaListenerExternalNodePort()\n+                    .endListeners()\n+                .endKafka()\n+            .endSpec().done();\n+\n+        String userName = \"alice\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b682a9c13b1c69b2e31862a0bd1aa8403e8a77a8"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5MDA3MQ==", "bodyText": "Would it be good to create method verifyCommunicationWIthExternalClient and change it in all test cases? Same method applicable in internal.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2391#discussion_r369990071", "createdAt": "2020-01-23T08:46:00Z", "author": {"login": "see-quick"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/kafka/ListenersST.java", "diffHunk": "@@ -0,0 +1,822 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.kafka;\n+\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.api.kafka.model.KafkaUser;\n+import io.strimzi.api.kafka.model.listener.KafkaListenerExternalLoadBalancerBuilder;\n+import io.strimzi.api.kafka.model.listener.KafkaListenerExternalNodePortBuilder;\n+import io.strimzi.api.kafka.model.listener.KafkaListenerExternalRouteBuilder;\n+import io.strimzi.api.kafka.model.listener.KafkaListenerTlsBuilder;\n+import io.strimzi.systemtest.BaseST;\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.systemtest.annotations.OpenShiftOnly;\n+import io.strimzi.systemtest.resources.KubernetesResource;\n+import io.strimzi.systemtest.resources.ResourceManager;\n+import io.strimzi.systemtest.resources.crd.KafkaClientsResource;\n+import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaUserResource;\n+import io.strimzi.systemtest.utils.kafkaUtils.KafkaUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.StatefulSetUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.objects.SecretUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Map;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+\n+import static io.strimzi.systemtest.Constants.LOADBALANCER_SUPPORTED;\n+import static io.strimzi.systemtest.Constants.NODEPORT_SUPPORTED;\n+import static io.strimzi.systemtest.Constants.REGRESSION;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+@Tag(REGRESSION)\n+public class ListenersST extends BaseST {\n+    private static final Logger LOGGER = LogManager.getLogger(ListenersST.class);\n+\n+    public static final String NAMESPACE = \"kafka-listeners-cluster-test\";\n+\n+    private String customCertChain1 = \"custom-certificate-chain-1\";\n+    private String customCertChain2 = \"custom-certificate-chain-2\";\n+    private String customCertServer1 = \"custom-certificate-server-1\";\n+    private String customCertServer2 = \"custom-certificate-server-2\";\n+    private String customRootCA1 = \"custom-certificate-root-1\";\n+    private String customRootCA2 = \"custom-certificate-root-2\";\n+\n+    @Test\n+    @Tag(NODEPORT_SUPPORTED)\n+    void testCustomSoloCertificatesForNodePort() throws Exception {\n+        String topicName = \"test-topic-\" + rng.nextInt(Integer.MAX_VALUE);\n+\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 3)\n+            .editSpec()\n+                .editKafka()\n+                    .editListeners()\n+                        .withNewTls()\n+                            .withNewConfiguration()\n+                                .withNewBrokerCertChainAndKey()\n+                                    .withSecretName(customCertServer1)\n+                                    .withKey(\"ca.key\")\n+                                    .withCertificate(\"ca.crt\")\n+                                .endBrokerCertChainAndKey()\n+                            .endConfiguration()\n+                        .endTls()\n+                        .withNewKafkaListenerExternalNodePort()\n+                            .withNewConfiguration()\n+                                .withNewBrokerCertChainAndKey()\n+                                    .withSecretName(customCertServer1)\n+                                    .withKey(\"ca.key\")\n+                                    .withCertificate(\"ca.crt\")\n+                                .endBrokerCertChainAndKey()\n+                            .endConfiguration()\n+                        .endKafkaListenerExternalNodePort()\n+                    .endListeners()\n+                .endKafka()\n+            .endSpec().done();\n+\n+        String userName = \"alice\";\n+        KafkaUser aliceUser = KafkaUserResource.tlsUser(CLUSTER_NAME, userName).done();\n+\n+        kafkaClient.setCaCertName(customCertServer1);\n+        Future producer = kafkaClient.sendMessagesTls(topicName, NAMESPACE, CLUSTER_NAME, userName, 10, \"SSL\");\n+        Future consumer = kafkaClient.receiveMessagesTls(topicName, NAMESPACE, CLUSTER_NAME, userName, 10, \"SSL\");\n+\n+        assertThat(\"Producer didn't produce all messages\", producer.get(1, TimeUnit.MINUTES), is(10));\n+        assertThat(\"Consumer didn't consume all messages\", consumer.get(1, TimeUnit.MINUTES), is(10));\n+\n+        // Deploy client pod with custom certificates and collect messages from internal TLS listener\n+        KafkaClientsResource.deployKafkaClients(true, CLUSTER_NAME + \"-\" + Constants.KAFKA_CLIENTS, CLUSTER_NAME, NAMESPACE, false, aliceUser).done();\n+\n+        externalKafkaClient.setPodName(kubeClient().listPodsByPrefixInName(CLUSTER_NAME + \"-\" + Constants.KAFKA_CLIENTS).get(0).getMetadata().getName());\n+        int sent = externalKafkaClient.sendMessagesTls(topicName, NAMESPACE, CLUSTER_NAME, userName, 10, \"TLS\");\n+        assertThat(sent, is(10));\n+        int received = externalKafkaClient.receiveMessagesTls(topicName, NAMESPACE, CLUSTER_NAME, userName, 20, \"TLS\", \"consumer-group-certs-1\");\n+        assertThat(received, is(20));\n+    }\n+\n+    @Test\n+    @Tag(NODEPORT_SUPPORTED)\n+    void testCustomChainCertificatesForNodePort() throws Exception {\n+        String topicName = \"test-topic-\" + rng.nextInt(Integer.MAX_VALUE);\n+\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 3)\n+            .editSpec()\n+                .editKafka()\n+                    .editListeners()\n+                        .withNewTls()\n+                            .withNewConfiguration()\n+                                .withNewBrokerCertChainAndKey()\n+                                    .withSecretName(customCertChain1)\n+                                    .withKey(\"ca.key\")\n+                                    .withCertificate(\"ca.crt\")\n+                                .endBrokerCertChainAndKey()\n+                            .endConfiguration()\n+                        .endTls()\n+                        .withNewKafkaListenerExternalNodePort()\n+                            .withNewConfiguration()\n+                                .withNewBrokerCertChainAndKey()\n+                                    .withSecretName(customCertChain1)\n+                                    .withKey(\"ca.key\")\n+                                    .withCertificate(\"ca.crt\")\n+                                .endBrokerCertChainAndKey()\n+                            .endConfiguration()\n+                        .endKafkaListenerExternalNodePort()\n+                    .endListeners()\n+                .endKafka()\n+            .endSpec().done();\n+\n+        String userName = \"alice\";\n+        KafkaUser aliceUser = KafkaUserResource.tlsUser(CLUSTER_NAME, userName).done();\n+\n+        kafkaClient.setCaCertName(customRootCA1);\n+        Future producer = kafkaClient.sendMessagesTls(topicName, NAMESPACE, CLUSTER_NAME, userName, 10, \"SSL\");\n+        Future consumer = kafkaClient.receiveMessagesTls(topicName, NAMESPACE, CLUSTER_NAME, userName, 10, \"SSL\");\n+\n+        assertThat(\"Producer didn't produce all messages\", producer.get(1, TimeUnit.MINUTES), is(10));\n+        assertThat(\"Consumer didn't consume all messages\", consumer.get(1, TimeUnit.MINUTES), is(10));\n+\n+        // Deploy client pod with custom certificates and collect messages from internal TLS listener\n+        KafkaClientsResource.deployKafkaClients(true, CLUSTER_NAME + \"-\" + Constants.KAFKA_CLIENTS, CLUSTER_NAME, NAMESPACE, false, aliceUser).done();\n+\n+        externalKafkaClient.setPodName(kubeClient().listPodsByPrefixInName(CLUSTER_NAME + \"-\" + Constants.KAFKA_CLIENTS).get(0).getMetadata().getName());\n+        int sent = externalKafkaClient.sendMessagesTls(topicName, NAMESPACE, CLUSTER_NAME, userName, 10, \"TLS\");\n+        assertThat(sent, is(10));\n+        int received = externalKafkaClient.receiveMessagesTls(topicName, NAMESPACE, CLUSTER_NAME, userName, 20, \"TLS\", \"consumer-group-certs-2\");\n+        assertThat(received, is(20));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b682a9c13b1c69b2e31862a0bd1aa8403e8a77a8"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5MTc0MA==", "bodyText": "Hmmm, why do we need this operation createOrReplace instead of create? Shouldn't we be warned that if we in test case create one secret with name secret-example and if we try create again same secret we should get error or?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2391#discussion_r369991740", "createdAt": "2020-01-23T08:49:51Z", "author": {"login": "see-quick"}, "path": "test/src/main/java/io/strimzi/test/k8s/KubeClient.java", "diffHunk": "@@ -347,7 +347,7 @@ public boolean getDeploymentConfigStatus(String deploymentConfigName) {\n     }\n \n     public Secret createSecret(Secret secret) {\n-        return client.secrets().inNamespace(getNamespace()).create(secret);\n+        return client.secrets().inNamespace(getNamespace()).createOrReplace(secret);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b682a9c13b1c69b2e31862a0bd1aa8403e8a77a8"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03c5349b3a8f04dc2c1ea591bc730e6fa8f53d5f", "author": {"user": {"login": "Frawless", "name": "Jakub Stejskal"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/03c5349b3a8f04dc2c1ea591bc730e6fa8f53d5f", "committedDate": "2020-01-23T09:43:30Z", "message": "Add tests for custom certificates for external listeners\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cd24000f6730d0eacf2901452f8851c65683985", "author": {"user": {"login": "Frawless", "name": "Jakub Stejskal"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/8cd24000f6730d0eacf2901452f8851c65683985", "committedDate": "2020-01-23T09:43:30Z", "message": "fixup! Add tests for custom certificates for external listeners\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3e502917e308a11e98844a56e2c93273fd85005", "author": {"user": {"login": "Frawless", "name": "Jakub Stejskal"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a3e502917e308a11e98844a56e2c93273fd85005", "committedDate": "2020-01-23T09:43:30Z", "message": "fixup! fixup! Add tests for custom certificates for external listeners\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfaaaace89d7210acdead3ce566a9fb2ff5b202b", "author": {"user": {"login": "Frawless", "name": "Jakub Stejskal"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/bfaaaace89d7210acdead3ce566a9fb2ff5b202b", "committedDate": "2020-01-23T09:43:30Z", "message": "fixup! fixup! fixup! Add tests for custom certificates for external listeners\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9f1b9a15663f7cf287524a6e236dbf6985ab11b", "author": {"user": {"login": "Frawless", "name": "Jakub Stejskal"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b9f1b9a15663f7cf287524a6e236dbf6985ab11b", "committedDate": "2020-01-23T09:43:30Z", "message": "minor fixes\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43403ae9b0024aaa64a72b561e995e48d6fada94", "author": {"user": {"login": "Frawless", "name": "Jakub Stejskal"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/43403ae9b0024aaa64a72b561e995e48d6fada94", "committedDate": "2020-01-23T09:43:30Z", "message": "checkstyle fixup\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04db947563392a384ef509090434b41bdd783aba", "author": {"user": {"login": "Frawless", "name": "Jakub Stejskal"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/04db947563392a384ef509090434b41bdd783aba", "committedDate": "2020-01-23T09:43:30Z", "message": "Add regresison tag to external listeners tag\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d24b51a74f7a6764a97cf63c61b7b46dfadd4059", "author": {"user": {"login": "Frawless", "name": "Jakub Stejskal"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d24b51a74f7a6764a97cf63c61b7b46dfadd4059", "committedDate": "2020-01-23T09:43:30Z", "message": "Add TLS listener with cusotm certs\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfc39389c040637a75cc65ece98e5585c6c8736c", "author": {"user": {"login": "Frawless", "name": "Jakub Stejskal"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/bfc39389c040637a75cc65ece98e5585c6c8736c", "committedDate": "2020-01-23T09:43:30Z", "message": "Fix conflicts and refactor code after rebase\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3e2cb0da8d0c4f95e955b8b2b782052fa5ed20f", "author": {"user": {"login": "Frawless", "name": "Jakub Stejskal"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/e3e2cb0da8d0c4f95e955b8b2b782052fa5ed20f", "committedDate": "2020-01-23T09:43:30Z", "message": "Some minor fixes\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96c1c3e33740179ccf19e7d007fb296f7965e0ac", "author": {"user": {"login": "Frawless", "name": "Jakub Stejskal"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/96c1c3e33740179ccf19e7d007fb296f7965e0ac", "committedDate": "2020-01-23T09:43:30Z", "message": "fixup! Some minor fixes\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ccb1eb1ec1e97cfe08eb52f0e6219a81c047dbe", "author": {"user": {"login": "Frawless", "name": "Jakub Stejskal"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/0ccb1eb1ec1e97cfe08eb52f0e6219a81c047dbe", "committedDate": "2020-01-23T09:43:30Z", "message": "Assert producer/consumer results correctly, some minor changes\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b7ba40861e80cbb17e840332bd61d84c4b67e85", "author": {"user": {"login": "Frawless", "name": "Jakub Stejskal"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3b7ba40861e80cbb17e840332bd61d84c4b67e85", "committedDate": "2020-01-23T09:43:30Z", "message": "Use proper certificates for clients in chain use cases\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de3854b2d62879b25b96e0f45cab826025648267", "author": {"user": {"login": "Frawless", "name": "Jakub Stejskal"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/de3854b2d62879b25b96e0f45cab826025648267", "committedDate": "2020-01-23T09:43:30Z", "message": "fixup! Use proper certificates for clients in chain use cases\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1faa42ac60bb72b4220f346e7e0d8e1dd690d06f", "author": {"user": {"login": "Frawless", "name": "Jakub Stejskal"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/1faa42ac60bb72b4220f346e7e0d8e1dd690d06f", "committedDate": "2020-01-23T09:43:30Z", "message": "fixup! fixup! Use proper certificates for clients in chain use cases\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44c9b005a6a0b568f3c9ab925f870ea8a6db1a23", "author": {"user": {"login": "Frawless", "name": "Jakub Stejskal"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/44c9b005a6a0b568f3c9ab925f870ea8a6db1a23", "committedDate": "2020-01-23T09:43:30Z", "message": "fixup! fixup! fixup! Use proper certificates for clients in chain use cases\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d01c6bc602f0aa6b1701162b9a1bf03c81e4abfe", "author": {"user": {"login": "Frawless", "name": "Jakub Stejskal"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d01c6bc602f0aa6b1701162b9a1bf03c81e4abfe", "committedDate": "2020-01-23T09:43:30Z", "message": "FIx strange behaviour when kafka cluster is broken in one test and new cluster doesn't working in anotehr test\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "607f0a7b7a34f72a34a2add08f912b3c48537ede", "author": {"user": {"login": "Frawless", "name": "Jakub Stejskal"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/607f0a7b7a34f72a34a2add08f912b3c48537ede", "committedDate": "2020-01-23T09:43:30Z", "message": "fixup! FIx strange behaviour when kafka cluster is broken in one test and new cluster doesn't working in anotehr test\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "878b1f3d9aa0556e27f7d28f6bc464eb71eb1fc6", "author": {"user": {"login": "Frawless", "name": "Jakub Stejskal"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/878b1f3d9aa0556e27f7d28f6bc464eb71eb1fc6", "committedDate": "2020-01-23T09:43:30Z", "message": "fixup! fixup! FIx strange behaviour when kafka cluster is broken in one test and new cluster doesn't working in anotehr test\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4b2fbcaf385fc0c9268d11852cf17d2688f5210", "author": {"user": {"login": "Frawless", "name": "Jakub Stejskal"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a4b2fbcaf385fc0c9268d11852cf17d2688f5210", "committedDate": "2020-01-23T09:58:28Z", "message": "Fixup after rebase\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f717ec2b1f779ce90474677f4019eba03e3d0efc", "author": {"user": {"login": "Frawless", "name": "Jakub Stejskal"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/f717ec2b1f779ce90474677f4019eba03e3d0efc", "committedDate": "2020-01-23T09:34:15Z", "message": "fixup! fixup! FIx strange behaviour when kafka cluster is broken in one test and new cluster doesn't working in anotehr test\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>"}, "afterCommit": {"oid": "a4b2fbcaf385fc0c9268d11852cf17d2688f5210", "author": {"user": {"login": "Frawless", "name": "Jakub Stejskal"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a4b2fbcaf385fc0c9268d11852cf17d2688f5210", "committedDate": "2020-01-23T09:58:28Z", "message": "Fixup after rebase\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d713cbabe8d556c2ed1e526940cf7ba315f6fa2b", "author": {"user": {"login": "Frawless", "name": "Jakub Stejskal"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d713cbabe8d556c2ed1e526940cf7ba315f6fa2b", "committedDate": "2020-01-23T10:17:20Z", "message": "Fix spotbugs\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1789, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}