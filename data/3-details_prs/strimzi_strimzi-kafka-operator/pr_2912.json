{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNzAxNzEz", "number": 2912, "title": "[MO] - [system test] -> cruise control tests", "bodyText": "Signed-off-by: morsak xorsak02@stud.fit.vutbr.cz\nType of change\n\nEnhancement / new feature\n\nDescription\nThis PR adding few smoke tests related to the configuration and deployment of Cruise Control.\nTest cases:\n\ntestCruiseControlDeployment\ntestCapacityFile\ntestUninstallingAndInstallationCruiseControl\ntestConfigurationDiskChangeDoNotTriggersRollingUpdateOfKafkaPods\ntestConfigurationReflection\ntestConfigurationFileIsCreated\n\nThere is no need to describe each of this test cases. Naming is self-exaplanatory...\nChecklist\n\n Write tests\n Make sure all tests pass", "createdAt": "2020-04-29T13:07:28Z", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912", "merged": true, "mergeCommit": {"oid": "85cf516856f3ce735f6f40a5f111e4d274aac662"}, "closed": true, "closedAt": "2020-05-14T08:08:13Z", "author": {"login": "see-quick"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccYg-XAFqTQwMjY2NjAxMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcg-E7EgFqTQxMTIzNTU0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNjY2MDEw", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#pullrequestreview-402666010", "createdAt": "2020-04-29T13:29:42Z", "commit": {"oid": "81fd90e2ea44635a2a891625f53de46601073ae7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzoyOTo0MlrOGN-2PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzoyOTo0MlrOGN-2PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMxNDM2NA==", "bodyText": "Why do you replace kafka instead of put CC directly into first deploy?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r417314364", "createdAt": "2020-04-29T13:29:42Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/CruiseControlST.java", "diffHunk": "@@ -35,20 +49,111 @@ void setup() {\n         applyRoleBindings(NAMESPACE);\n         // 050-Deployment\n         KubernetesResource.clusterOperator(NAMESPACE).done();\n+\n+        KafkaResource.kafkaWithCruiseControl(CLUSTER_NAME, 3, 3).done();\n     }\n \n     @Test\n-    void testCCDeployment()  {\n-        KafkaResource.kafkaWithCruiseControl(CLUSTER_NAME, 3, 3).done();\n+    void testCruiseControlDeployment()  {\n+        String ccStatusCommand = \"curl -X GET localhost:\" + CRUISE_CONTROL_DEFAULT_PORT + CRUISE_CONTROL_ENDPOINT;\n \n-        String ccStatusCommand = \"curl -X GET localhost:9090/kafkacruisecontrol/state\";\n         String ccPodName = PodUtils.getFirstPodNameContaining(\"cruise-control\");\n-        LOGGER.info(\"Using pod: \" + ccPodName);\n+\n         String result = cmdKubeClient().execInPodContainer(ccPodName, \"cruise-control\",\n-                \"/bin/bash\", \"-c\", ccStatusCommand).out();\n+            \"/bin/bash\", \"-c\", ccStatusCommand).out();\n+\n+        LOGGER.info(\"Verifying that {} is running inside the Pod {} and REST API is available\", CRUISE_CONTROL_NAME, ccPodName);\n \n         assertThat(result, not(containsString(\"404\")));\n         assertThat(result, containsString(\"RUNNING\"));\n+\n+        verifyThatCruiseControlTopicsArePresent();\n+    }\n+\n+    @Test\n+    void testInstallationAndCreatedTopics() {\n+\n+        String clusterName = \"second\" + CLUSTER_NAME;\n+\n+        KafkaResource.kafkaEphemeral(clusterName + \"1\", 3, 1).done();\n+\n+        KafkaResource.replaceKafkaResource(clusterName, kafka -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81fd90e2ea44635a2a891625f53de46601073ae7"}, "originalPosition": 81}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "81fd90e2ea44635a2a891625f53de46601073ae7", "author": {"user": {"login": "see-quick", "name": "Ors\u00e1k Maro\u0161"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/81fd90e2ea44635a2a891625f53de46601073ae7", "committedDate": "2020-04-29T13:06:00Z", "message": "[MO] - [system test] -> cruise control tests\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>"}, "afterCommit": {"oid": "5a5dba6f1a39b1eb884c98505c50aeb009c21a3d", "author": {"user": {"login": "see-quick", "name": "Ors\u00e1k Maro\u0161"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/5a5dba6f1a39b1eb884c98505c50aeb009c21a3d", "committedDate": "2020-04-30T10:41:08Z", "message": "[MO] - [basic tests] -> done\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNDIyNTc1", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#pullrequestreview-403422575", "createdAt": "2020-04-30T11:12:50Z", "commit": {"oid": "5a5dba6f1a39b1eb884c98505c50aeb009c21a3d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMToxMjo1MFrOGOkq7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMToxMjo1MFrOGOkq7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzNDA2Mg==", "bodyText": "So we have a java client that is set up to query the state endpoint. Obviously we don;t want to pull the whole cluster-operator module into system-test but would it make sense to move the client into operator-common so that you could use it here?\nWDYT @ppatierno and @kyguy?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r417934062", "createdAt": "2020-04-30T11:12:50Z", "author": {"login": "tomncooper"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/CruiseControlST.java", "diffHunk": "@@ -4,28 +4,254 @@\n  */\n package io.strimzi.systemtest;\n \n+import io.fabric8.kubernetes.api.model.Container;\n+import io.fabric8.kubernetes.api.model.EnvVar;\n+import io.fabric8.kubernetes.api.model.Pod;\n+import io.strimzi.api.kafka.model.CruiseControlSpec;\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.api.kafka.model.KafkaTopic;\n+import io.strimzi.api.kafka.model.balancing.BrokerCapacity;\n import io.strimzi.systemtest.resources.KubernetesResource;\n import io.strimzi.systemtest.resources.ResourceManager;\n import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.utils.kafkaUtils.KafkaTopicUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.StatefulSetUtils;\n import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n+import io.vertx.core.json.JsonObject;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Tag;\n import org.junit.jupiter.api.Test;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import static io.strimzi.api.kafka.model.KafkaResources.kafkaStatefulSetName;\n import static io.strimzi.systemtest.Constants.REGRESSION;\n import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.hamcrest.CoreMatchers.nullValue;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.containsString;\n-import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n \n @Tag(REGRESSION)\n public class CruiseControlST extends BaseST {\n \n     private static final Logger LOGGER = LogManager.getLogger(CruiseControlST.class);\n+    private static final String NAMESPACE = \"cruise-control-test\";\n+\n+    private static final String CRUISE_CONTROL_NAME = \"Cruise Control\";\n+    private static final int CRUISE_CONTROL_DEFAULT_PORT = 9090;\n+    private static final String CRUISE_CONTROL_ENDPOINT = \"/kafkacruisecontrol/state\";\n+    private static final String CRUISE_CONTROL_POD_PREFIX = CLUSTER_NAME + \"-cruise-control-\";\n+\n+    private static final String CRUISE_CONTROL_CAPACITY_FILE_PATH = \"/tmp/capacity.json\";\n+    private static final String CRUISE_CONTROL_CONFIGURATION_FILE_PATH = \"/tmp/cruisecontrol.properties\";\n+\n+    private static final String CRUISE_CONTROL_METRICS_TOPIC = \"strimzi.cruisecontrol.metrics\"; // partitions 1 , rf - 1\n+    private static final String CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC = \"strimzi.cruisecontrol.modeltrainingsamples\"; // partitions 32 , rf - 2\n+    private static final String CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC = \"strimzi.cruisecontrol.partitionmetricsamples\"; // partitions 32 , rf - 2\n+\n+    @Test\n+    void testCruiseControlDeployment()  {\n+        String ccStatusCommand = \"curl -X GET localhost:\" + CRUISE_CONTROL_DEFAULT_PORT + CRUISE_CONTROL_ENDPOINT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a5dba6f1a39b1eb884c98505c50aeb009c21a3d"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNDI1NDI5", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#pullrequestreview-403425429", "createdAt": "2020-04-30T11:17:35Z", "commit": {"oid": "5a5dba6f1a39b1eb884c98505c50aeb009c21a3d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMToxNzozNlrOGOkzcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMToxNzozNlrOGOkzcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzNjI0MA==", "bodyText": "This is a good question. My feeling is that we should leave it there (and document that it will be there) because the user might want to reactive CC at a later date. The user can always delete it manually later.\nSo the topic should stay, unless @ppatierno or @kyguy object?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r417936240", "createdAt": "2020-04-30T11:17:36Z", "author": {"login": "tomncooper"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/CruiseControlST.java", "diffHunk": "@@ -4,28 +4,254 @@\n  */\n package io.strimzi.systemtest;\n \n+import io.fabric8.kubernetes.api.model.Container;\n+import io.fabric8.kubernetes.api.model.EnvVar;\n+import io.fabric8.kubernetes.api.model.Pod;\n+import io.strimzi.api.kafka.model.CruiseControlSpec;\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.api.kafka.model.KafkaTopic;\n+import io.strimzi.api.kafka.model.balancing.BrokerCapacity;\n import io.strimzi.systemtest.resources.KubernetesResource;\n import io.strimzi.systemtest.resources.ResourceManager;\n import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.utils.kafkaUtils.KafkaTopicUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.StatefulSetUtils;\n import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n+import io.vertx.core.json.JsonObject;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Tag;\n import org.junit.jupiter.api.Test;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import static io.strimzi.api.kafka.model.KafkaResources.kafkaStatefulSetName;\n import static io.strimzi.systemtest.Constants.REGRESSION;\n import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.hamcrest.CoreMatchers.nullValue;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.containsString;\n-import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n \n @Tag(REGRESSION)\n public class CruiseControlST extends BaseST {\n \n     private static final Logger LOGGER = LogManager.getLogger(CruiseControlST.class);\n+    private static final String NAMESPACE = \"cruise-control-test\";\n+\n+    private static final String CRUISE_CONTROL_NAME = \"Cruise Control\";\n+    private static final int CRUISE_CONTROL_DEFAULT_PORT = 9090;\n+    private static final String CRUISE_CONTROL_ENDPOINT = \"/kafkacruisecontrol/state\";\n+    private static final String CRUISE_CONTROL_POD_PREFIX = CLUSTER_NAME + \"-cruise-control-\";\n+\n+    private static final String CRUISE_CONTROL_CAPACITY_FILE_PATH = \"/tmp/capacity.json\";\n+    private static final String CRUISE_CONTROL_CONFIGURATION_FILE_PATH = \"/tmp/cruisecontrol.properties\";\n+\n+    private static final String CRUISE_CONTROL_METRICS_TOPIC = \"strimzi.cruisecontrol.metrics\"; // partitions 1 , rf - 1\n+    private static final String CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC = \"strimzi.cruisecontrol.modeltrainingsamples\"; // partitions 32 , rf - 2\n+    private static final String CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC = \"strimzi.cruisecontrol.partitionmetricsamples\"; // partitions 32 , rf - 2\n+\n+    @Test\n+    void testCruiseControlDeployment()  {\n+        String ccStatusCommand = \"curl -X GET localhost:\" + CRUISE_CONTROL_DEFAULT_PORT + CRUISE_CONTROL_ENDPOINT;\n+\n+        String ccPodName = PodUtils.getFirstPodNameContaining(\"cruise-control\");\n+\n+        String result = cmdKubeClient().execInPodContainer(ccPodName, \"cruise-control\",\n+            \"/bin/bash\", \"-c\", ccStatusCommand).out();\n+\n+        LOGGER.info(\"Verifying that {} is running inside the Pod {} and REST API is available\", CRUISE_CONTROL_NAME, ccPodName);\n+\n+        assertThat(result, not(containsString(\"404\")));\n+        assertThat(result, containsString(\"RUNNING\"));\n+\n+        verifyThatCruiseControlTopicsArePresent();\n+    }\n+\n+    @Test\n+    void testUninstallingAndInstallationCruiseControl() {\n+\n+        Map<String, String> kafkaPods = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+            LOGGER.info(\"Removing Cruise Control to the classic Kafka.\");\n+            kafka.getSpec().setCruiseControl(null);\n+        });\n+\n+        StatefulSetUtils.waitTillSsHasRolled(kafkaStatefulSetName(CLUSTER_NAME), 3, kafkaPods);\n+\n+        LOGGER.info(\"Verifying that in {} is not present in the Kafka cluster\", CRUISE_CONTROL_NAME);\n+        assertThat(KafkaResource.kafkaClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getSpec().getCruiseControl(), nullValue());\n+\n+        LOGGER.info(\"Verifying that {} pod is not present\", CRUISE_CONTROL_NAME);\n+        assertThat(kubeClient().listPodsByPrefixInName(CRUISE_CONTROL_POD_PREFIX).size(), is(0));\n+\n+        // TODO: should topic be deleted ? CURRENTLY CC let the topics in the kafka", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a5dba6f1a39b1eb884c98505c50aeb009c21a3d"}, "originalPosition": 99}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNDI4MDUy", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#pullrequestreview-403428052", "createdAt": "2020-04-30T11:21:51Z", "commit": {"oid": "5a5dba6f1a39b1eb884c98505c50aeb009c21a3d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMToyMTo1MVrOGOk7qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMToyMTo1MVrOGOk7qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzODM0NA==", "bodyText": "How is this handled for Kafka? Obviously, we don't want to update the CR with all the default values. CC prints all configs to its log at startup so you could head the log and grep for the setting?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r417938344", "createdAt": "2020-04-30T11:21:51Z", "author": {"login": "tomncooper"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/CruiseControlST.java", "diffHunk": "@@ -4,28 +4,254 @@\n  */\n package io.strimzi.systemtest;\n \n+import io.fabric8.kubernetes.api.model.Container;\n+import io.fabric8.kubernetes.api.model.EnvVar;\n+import io.fabric8.kubernetes.api.model.Pod;\n+import io.strimzi.api.kafka.model.CruiseControlSpec;\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.api.kafka.model.KafkaTopic;\n+import io.strimzi.api.kafka.model.balancing.BrokerCapacity;\n import io.strimzi.systemtest.resources.KubernetesResource;\n import io.strimzi.systemtest.resources.ResourceManager;\n import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.utils.kafkaUtils.KafkaTopicUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.StatefulSetUtils;\n import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n+import io.vertx.core.json.JsonObject;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Tag;\n import org.junit.jupiter.api.Test;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import static io.strimzi.api.kafka.model.KafkaResources.kafkaStatefulSetName;\n import static io.strimzi.systemtest.Constants.REGRESSION;\n import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.hamcrest.CoreMatchers.nullValue;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.containsString;\n-import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n \n @Tag(REGRESSION)\n public class CruiseControlST extends BaseST {\n \n     private static final Logger LOGGER = LogManager.getLogger(CruiseControlST.class);\n+    private static final String NAMESPACE = \"cruise-control-test\";\n+\n+    private static final String CRUISE_CONTROL_NAME = \"Cruise Control\";\n+    private static final int CRUISE_CONTROL_DEFAULT_PORT = 9090;\n+    private static final String CRUISE_CONTROL_ENDPOINT = \"/kafkacruisecontrol/state\";\n+    private static final String CRUISE_CONTROL_POD_PREFIX = CLUSTER_NAME + \"-cruise-control-\";\n+\n+    private static final String CRUISE_CONTROL_CAPACITY_FILE_PATH = \"/tmp/capacity.json\";\n+    private static final String CRUISE_CONTROL_CONFIGURATION_FILE_PATH = \"/tmp/cruisecontrol.properties\";\n+\n+    private static final String CRUISE_CONTROL_METRICS_TOPIC = \"strimzi.cruisecontrol.metrics\"; // partitions 1 , rf - 1\n+    private static final String CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC = \"strimzi.cruisecontrol.modeltrainingsamples\"; // partitions 32 , rf - 2\n+    private static final String CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC = \"strimzi.cruisecontrol.partitionmetricsamples\"; // partitions 32 , rf - 2\n+\n+    @Test\n+    void testCruiseControlDeployment()  {\n+        String ccStatusCommand = \"curl -X GET localhost:\" + CRUISE_CONTROL_DEFAULT_PORT + CRUISE_CONTROL_ENDPOINT;\n+\n+        String ccPodName = PodUtils.getFirstPodNameContaining(\"cruise-control\");\n+\n+        String result = cmdKubeClient().execInPodContainer(ccPodName, \"cruise-control\",\n+            \"/bin/bash\", \"-c\", ccStatusCommand).out();\n+\n+        LOGGER.info(\"Verifying that {} is running inside the Pod {} and REST API is available\", CRUISE_CONTROL_NAME, ccPodName);\n+\n+        assertThat(result, not(containsString(\"404\")));\n+        assertThat(result, containsString(\"RUNNING\"));\n+\n+        verifyThatCruiseControlTopicsArePresent();\n+    }\n+\n+    @Test\n+    void testUninstallingAndInstallationCruiseControl() {\n+\n+        Map<String, String> kafkaPods = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+            LOGGER.info(\"Removing Cruise Control to the classic Kafka.\");\n+            kafka.getSpec().setCruiseControl(null);\n+        });\n+\n+        StatefulSetUtils.waitTillSsHasRolled(kafkaStatefulSetName(CLUSTER_NAME), 3, kafkaPods);\n+\n+        LOGGER.info(\"Verifying that in {} is not present in the Kafka cluster\", CRUISE_CONTROL_NAME);\n+        assertThat(KafkaResource.kafkaClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getSpec().getCruiseControl(), nullValue());\n+\n+        LOGGER.info(\"Verifying that {} pod is not present\", CRUISE_CONTROL_NAME);\n+        assertThat(kubeClient().listPodsByPrefixInName(CRUISE_CONTROL_POD_PREFIX).size(), is(0));\n+\n+        // TODO: should topic be deleted ? CURRENTLY CC let the topics in the kafka\n+//        verifyThatCruiseControlTopicsAreNotPresent();\n+\n+        kafkaPods = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+            LOGGER.info(\"Adding Cruise Control to the classic Kafka.\");\n+            kafka.getSpec().setCruiseControl(new CruiseControlSpec());\n+        });\n+\n+        StatefulSetUtils.waitTillSsHasRolled(kafkaStatefulSetName(CLUSTER_NAME), 3, kafkaPods);\n+\n+        LOGGER.info(\"Verifying that {} topics are created after CC is instantiated.\", CRUISE_CONTROL_NAME);\n+\n+        KafkaTopicUtils.waitForKafkaTopicReady(CRUISE_CONTROL_METRICS_TOPIC);\n+        KafkaTopicUtils.waitForKafkaTopicReady(CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC);\n+        KafkaTopicUtils.waitForKafkaTopicReady(CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC);\n+\n+        verifyThatCruiseControlTopicsArePresent();\n+    }\n+\n+    @Test\n+    void testConfigurationChangeTriggersRollingUpdate() {\n+\n+        Map<String, String> kafkaPods = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+            LOGGER.info(\"Adding Cruise Control to the classic Kafka.\");\n+            BrokerCapacity brokerCapacity = kafka.getSpec().getCruiseControl().getBrokerCapacity();\n+\n+            // TODO: this doesn't work because in the Kafka CR there is nothing using `kafka.getSpec().getCruiseControl()` only object,\n+            // TODO: which has some default values by they are not propagated to other fields...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a5dba6f1a39b1eb884c98505c50aeb009c21a3d"}, "originalPosition": 130}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNDI5NDEw", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#pullrequestreview-403429410", "createdAt": "2020-04-30T11:24:10Z", "commit": {"oid": "5a5dba6f1a39b1eb884c98505c50aeb009c21a3d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMToyNDoxMFrOGOk_wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMToyNDoxMFrOGOk_wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzOTM5Mw==", "bodyText": "As above, you could grep the CC log.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r417939393", "createdAt": "2020-04-30T11:24:10Z", "author": {"login": "tomncooper"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/CruiseControlST.java", "diffHunk": "@@ -4,28 +4,254 @@\n  */\n package io.strimzi.systemtest;\n \n+import io.fabric8.kubernetes.api.model.Container;\n+import io.fabric8.kubernetes.api.model.EnvVar;\n+import io.fabric8.kubernetes.api.model.Pod;\n+import io.strimzi.api.kafka.model.CruiseControlSpec;\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.api.kafka.model.KafkaTopic;\n+import io.strimzi.api.kafka.model.balancing.BrokerCapacity;\n import io.strimzi.systemtest.resources.KubernetesResource;\n import io.strimzi.systemtest.resources.ResourceManager;\n import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.utils.kafkaUtils.KafkaTopicUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.StatefulSetUtils;\n import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n+import io.vertx.core.json.JsonObject;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Tag;\n import org.junit.jupiter.api.Test;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import static io.strimzi.api.kafka.model.KafkaResources.kafkaStatefulSetName;\n import static io.strimzi.systemtest.Constants.REGRESSION;\n import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.hamcrest.CoreMatchers.nullValue;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.containsString;\n-import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n \n @Tag(REGRESSION)\n public class CruiseControlST extends BaseST {\n \n     private static final Logger LOGGER = LogManager.getLogger(CruiseControlST.class);\n+    private static final String NAMESPACE = \"cruise-control-test\";\n+\n+    private static final String CRUISE_CONTROL_NAME = \"Cruise Control\";\n+    private static final int CRUISE_CONTROL_DEFAULT_PORT = 9090;\n+    private static final String CRUISE_CONTROL_ENDPOINT = \"/kafkacruisecontrol/state\";\n+    private static final String CRUISE_CONTROL_POD_PREFIX = CLUSTER_NAME + \"-cruise-control-\";\n+\n+    private static final String CRUISE_CONTROL_CAPACITY_FILE_PATH = \"/tmp/capacity.json\";\n+    private static final String CRUISE_CONTROL_CONFIGURATION_FILE_PATH = \"/tmp/cruisecontrol.properties\";\n+\n+    private static final String CRUISE_CONTROL_METRICS_TOPIC = \"strimzi.cruisecontrol.metrics\"; // partitions 1 , rf - 1\n+    private static final String CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC = \"strimzi.cruisecontrol.modeltrainingsamples\"; // partitions 32 , rf - 2\n+    private static final String CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC = \"strimzi.cruisecontrol.partitionmetricsamples\"; // partitions 32 , rf - 2\n+\n+    @Test\n+    void testCruiseControlDeployment()  {\n+        String ccStatusCommand = \"curl -X GET localhost:\" + CRUISE_CONTROL_DEFAULT_PORT + CRUISE_CONTROL_ENDPOINT;\n+\n+        String ccPodName = PodUtils.getFirstPodNameContaining(\"cruise-control\");\n+\n+        String result = cmdKubeClient().execInPodContainer(ccPodName, \"cruise-control\",\n+            \"/bin/bash\", \"-c\", ccStatusCommand).out();\n+\n+        LOGGER.info(\"Verifying that {} is running inside the Pod {} and REST API is available\", CRUISE_CONTROL_NAME, ccPodName);\n+\n+        assertThat(result, not(containsString(\"404\")));\n+        assertThat(result, containsString(\"RUNNING\"));\n+\n+        verifyThatCruiseControlTopicsArePresent();\n+    }\n+\n+    @Test\n+    void testUninstallingAndInstallationCruiseControl() {\n+\n+        Map<String, String> kafkaPods = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+            LOGGER.info(\"Removing Cruise Control to the classic Kafka.\");\n+            kafka.getSpec().setCruiseControl(null);\n+        });\n+\n+        StatefulSetUtils.waitTillSsHasRolled(kafkaStatefulSetName(CLUSTER_NAME), 3, kafkaPods);\n+\n+        LOGGER.info(\"Verifying that in {} is not present in the Kafka cluster\", CRUISE_CONTROL_NAME);\n+        assertThat(KafkaResource.kafkaClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getSpec().getCruiseControl(), nullValue());\n+\n+        LOGGER.info(\"Verifying that {} pod is not present\", CRUISE_CONTROL_NAME);\n+        assertThat(kubeClient().listPodsByPrefixInName(CRUISE_CONTROL_POD_PREFIX).size(), is(0));\n+\n+        // TODO: should topic be deleted ? CURRENTLY CC let the topics in the kafka\n+//        verifyThatCruiseControlTopicsAreNotPresent();\n+\n+        kafkaPods = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+            LOGGER.info(\"Adding Cruise Control to the classic Kafka.\");\n+            kafka.getSpec().setCruiseControl(new CruiseControlSpec());\n+        });\n+\n+        StatefulSetUtils.waitTillSsHasRolled(kafkaStatefulSetName(CLUSTER_NAME), 3, kafkaPods);\n+\n+        LOGGER.info(\"Verifying that {} topics are created after CC is instantiated.\", CRUISE_CONTROL_NAME);\n+\n+        KafkaTopicUtils.waitForKafkaTopicReady(CRUISE_CONTROL_METRICS_TOPIC);\n+        KafkaTopicUtils.waitForKafkaTopicReady(CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC);\n+        KafkaTopicUtils.waitForKafkaTopicReady(CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC);\n+\n+        verifyThatCruiseControlTopicsArePresent();\n+    }\n+\n+    @Test\n+    void testConfigurationChangeTriggersRollingUpdate() {\n+\n+        Map<String, String> kafkaPods = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+            LOGGER.info(\"Adding Cruise Control to the classic Kafka.\");\n+            BrokerCapacity brokerCapacity = kafka.getSpec().getCruiseControl().getBrokerCapacity();\n+\n+            // TODO: this doesn't work because in the Kafka CR there is nothing using `kafka.getSpec().getCruiseControl()` only object,\n+            // TODO: which has some default values by they are not propagated to other fields...\n+            brokerCapacity.setDisk(\"20Gi\");\n+\n+            kafka.getSpec().getCruiseControl().setBrokerCapacity(brokerCapacity);\n+        });\n+\n+        StatefulSetUtils.waitTillSsHasRolled(kafkaStatefulSetName(CLUSTER_NAME), 3, kafkaPods);\n+\n+        KafkaTopicUtils.waitForKafkaTopicReady(CRUISE_CONTROL_METRICS_TOPIC);\n+        KafkaTopicUtils.waitForKafkaTopicReady(CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC);\n+        KafkaTopicUtils.waitForKafkaTopicReady(CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC);\n+\n+        verifyThatCruiseControlTopicsArePresent();\n+    }\n+\n+    @Test\n+    void testConfigurationReflection() throws IOException {\n+        Pod cruiseControlPod = kubeClient().listPodsByPrefixInName(CRUISE_CONTROL_POD_PREFIX).get(0);\n+\n+        String cruiseControlPodName = cruiseControlPod.getMetadata().getName();\n+\n+        String configurationFileContent = cmdKubeClient().execInPod(cruiseControlPodName, \"/bin/bash\", \"-c\", \"cat \" + CRUISE_CONTROL_CONFIGURATION_FILE_PATH).out();\n \n-    public static final String NAMESPACE = \"cruise-control-test\";\n+        InputStream configurationFileStream = new ByteArrayInputStream(configurationFileContent.getBytes(StandardCharsets.UTF_8));\n+\n+        Properties fileConfiguration = new Properties();\n+        fileConfiguration.load(configurationFileStream);\n+\n+        Container cruiseControlContainer = null;\n+\n+        for (Container container : cruiseControlPod.getSpec().getContainers()) {\n+            if (container.getName().equals(\"cruise-control\")) {\n+                cruiseControlContainer = container;\n+            }\n+        }\n+\n+        EnvVar cruiseControlConfiguration = null;\n+\n+        for (EnvVar envVar : Objects.requireNonNull(cruiseControlContainer).getEnv()) {\n+            if (envVar.getName().equals(\"CRUISE_CONTROL_CONFIGURATION\")) {\n+                cruiseControlConfiguration = envVar;\n+            }\n+        }\n+\n+        InputStream configurationContainerStream = new ByteArrayInputStream(Objects.requireNonNull(cruiseControlConfiguration).getValue().getBytes(StandardCharsets.UTF_8));\n+\n+        Properties containerConfiguration = new Properties();\n+        containerConfiguration.load(configurationContainerStream);\n+\n+        LOGGER.info(\"Verifying that all configuration in the cruise control container matching the cruise control file {} properties\", CRUISE_CONTROL_CONFIGURATION_FILE_PATH);\n+\n+        assertThat(containerConfiguration.getProperty(\"num.partition.metrics.windows\"), is(fileConfiguration.getProperty(\"num.partition.metrics.windows\")));\n+        assertThat(containerConfiguration.getProperty(\"completed.user.task.retention.time.ms\"), is(fileConfiguration.getProperty(\"completed.user.task.retention.time.ms\")));\n+        assertThat(containerConfiguration.getProperty(\"num.broker.metrics.windows\"), is(fileConfiguration.getProperty(\"num.broker.metrics.windows\")));\n+        assertThat(containerConfiguration.getProperty(\"broker.metrics.window.ms\"), is(fileConfiguration.getProperty(\"broker.metrics.window.ms\")));\n+        assertThat(containerConfiguration.getProperty(\"default.goals\"), is(fileConfiguration.getProperty(\"default.goals\")));\n+        assertThat(containerConfiguration.getProperty(\"partition.metrics.window.ms\"), is(fileConfiguration.getProperty(\"partition.metrics.window.ms\")));\n+        assertThat(containerConfiguration.getProperty(\"goals\"), is(fileConfiguration.getProperty(\"goals\")));\n+\n+        // TODO: is there some way to fetch the configuration in the Kafka CR?? (it is default) -> but where i can find it", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a5dba6f1a39b1eb884c98505c50aeb009c21a3d"}, "originalPosition": 190}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNTQ3NDQ5", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#pullrequestreview-403547449", "createdAt": "2020-04-30T13:59:00Z", "commit": {"oid": "5a5dba6f1a39b1eb884c98505c50aeb009c21a3d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMzo1OTowMFrOGOqmmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMzo1OTowMFrOGOqmmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODAzMTI1OA==", "bodyText": "Is this just a formatting change or was this an accident?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r418031258", "createdAt": "2020-04-30T13:59:00Z", "author": {"login": "kyguy"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaResource.java", "diffHunk": "@@ -111,7 +111,8 @@ public static DoneableKafka kafkaWithMetrics(String name, int kafkaReplicas, int\n \n     public static DoneableKafka kafkaWithCruiseControl(String name, int kafkaReplicas, int zookeeperReplicas) {\n         Kafka kafka = getKafkaFromYaml(PATH_TO_KAFKA_CRUISE_CONTROL_CONFIG);\n-        return deployKafka(defaultKafka(kafka, name, kafkaReplicas, zookeeperReplicas).build());\n+        return deployKafka(defaultKafka(kafka, name, kafkaReplicas, zookeeperReplicas)\n+            .build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a5dba6f1a39b1eb884c98505c50aeb009c21a3d"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzODc5Njcx", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#pullrequestreview-403879671", "createdAt": "2020-04-30T21:09:44Z", "commit": {"oid": "5a5dba6f1a39b1eb884c98505c50aeb009c21a3d"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMTowOTo0NFrOGO6cbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMToyMzoxN1rOGO61cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5MDc5OQ==", "bodyText": "It is more specifically the state endpoint", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r418290799", "createdAt": "2020-04-30T21:09:44Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/CruiseControlST.java", "diffHunk": "@@ -4,28 +4,254 @@\n  */\n package io.strimzi.systemtest;\n \n+import io.fabric8.kubernetes.api.model.Container;\n+import io.fabric8.kubernetes.api.model.EnvVar;\n+import io.fabric8.kubernetes.api.model.Pod;\n+import io.strimzi.api.kafka.model.CruiseControlSpec;\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.api.kafka.model.KafkaTopic;\n+import io.strimzi.api.kafka.model.balancing.BrokerCapacity;\n import io.strimzi.systemtest.resources.KubernetesResource;\n import io.strimzi.systemtest.resources.ResourceManager;\n import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.utils.kafkaUtils.KafkaTopicUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.StatefulSetUtils;\n import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n+import io.vertx.core.json.JsonObject;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Tag;\n import org.junit.jupiter.api.Test;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import static io.strimzi.api.kafka.model.KafkaResources.kafkaStatefulSetName;\n import static io.strimzi.systemtest.Constants.REGRESSION;\n import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.hamcrest.CoreMatchers.nullValue;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.containsString;\n-import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n \n @Tag(REGRESSION)\n public class CruiseControlST extends BaseST {\n \n     private static final Logger LOGGER = LogManager.getLogger(CruiseControlST.class);\n+    private static final String NAMESPACE = \"cruise-control-test\";\n+\n+    private static final String CRUISE_CONTROL_NAME = \"Cruise Control\";\n+    private static final int CRUISE_CONTROL_DEFAULT_PORT = 9090;\n+    private static final String CRUISE_CONTROL_ENDPOINT = \"/kafkacruisecontrol/state\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a5dba6f1a39b1eb884c98505c50aeb009c21a3d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5Mjc5MA==", "bodyText": "The difference between using curl and our Java API client is that the returned JSON could be different.\nFor example, related to the user tasks endpoint, the client manipulate the original JSON got from the HTTP request in order to produce a simplified one for the specific usage of the operator. Maybe we should avoid this manipulation and moving the logic to extract right information at the operator level? I am not sure that using a client which doesn't return the raw JSON is the right thing to do for the STs.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r418292790", "createdAt": "2020-04-30T21:13:59Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/CruiseControlST.java", "diffHunk": "@@ -4,28 +4,254 @@\n  */\n package io.strimzi.systemtest;\n \n+import io.fabric8.kubernetes.api.model.Container;\n+import io.fabric8.kubernetes.api.model.EnvVar;\n+import io.fabric8.kubernetes.api.model.Pod;\n+import io.strimzi.api.kafka.model.CruiseControlSpec;\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.api.kafka.model.KafkaTopic;\n+import io.strimzi.api.kafka.model.balancing.BrokerCapacity;\n import io.strimzi.systemtest.resources.KubernetesResource;\n import io.strimzi.systemtest.resources.ResourceManager;\n import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.utils.kafkaUtils.KafkaTopicUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.StatefulSetUtils;\n import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n+import io.vertx.core.json.JsonObject;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Tag;\n import org.junit.jupiter.api.Test;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import static io.strimzi.api.kafka.model.KafkaResources.kafkaStatefulSetName;\n import static io.strimzi.systemtest.Constants.REGRESSION;\n import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.hamcrest.CoreMatchers.nullValue;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.containsString;\n-import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n \n @Tag(REGRESSION)\n public class CruiseControlST extends BaseST {\n \n     private static final Logger LOGGER = LogManager.getLogger(CruiseControlST.class);\n+    private static final String NAMESPACE = \"cruise-control-test\";\n+\n+    private static final String CRUISE_CONTROL_NAME = \"Cruise Control\";\n+    private static final int CRUISE_CONTROL_DEFAULT_PORT = 9090;\n+    private static final String CRUISE_CONTROL_ENDPOINT = \"/kafkacruisecontrol/state\";\n+    private static final String CRUISE_CONTROL_POD_PREFIX = CLUSTER_NAME + \"-cruise-control-\";\n+\n+    private static final String CRUISE_CONTROL_CAPACITY_FILE_PATH = \"/tmp/capacity.json\";\n+    private static final String CRUISE_CONTROL_CONFIGURATION_FILE_PATH = \"/tmp/cruisecontrol.properties\";\n+\n+    private static final String CRUISE_CONTROL_METRICS_TOPIC = \"strimzi.cruisecontrol.metrics\"; // partitions 1 , rf - 1\n+    private static final String CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC = \"strimzi.cruisecontrol.modeltrainingsamples\"; // partitions 32 , rf - 2\n+    private static final String CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC = \"strimzi.cruisecontrol.partitionmetricsamples\"; // partitions 32 , rf - 2\n+\n+    @Test\n+    void testCruiseControlDeployment()  {\n+        String ccStatusCommand = \"curl -X GET localhost:\" + CRUISE_CONTROL_DEFAULT_PORT + CRUISE_CONTROL_ENDPOINT;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzNDA2Mg=="}, "originalCommit": {"oid": "5a5dba6f1a39b1eb884c98505c50aeb009c21a3d"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5MzYxNA==", "bodyText": "As far as I remember the state endpoint return the status of various services running or not on CC. Maybe just checking that Running exists is not enough to test that CC is working properly.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r418293614", "createdAt": "2020-04-30T21:15:41Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/CruiseControlST.java", "diffHunk": "@@ -4,28 +4,254 @@\n  */\n package io.strimzi.systemtest;\n \n+import io.fabric8.kubernetes.api.model.Container;\n+import io.fabric8.kubernetes.api.model.EnvVar;\n+import io.fabric8.kubernetes.api.model.Pod;\n+import io.strimzi.api.kafka.model.CruiseControlSpec;\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.api.kafka.model.KafkaTopic;\n+import io.strimzi.api.kafka.model.balancing.BrokerCapacity;\n import io.strimzi.systemtest.resources.KubernetesResource;\n import io.strimzi.systemtest.resources.ResourceManager;\n import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.utils.kafkaUtils.KafkaTopicUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.StatefulSetUtils;\n import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n+import io.vertx.core.json.JsonObject;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Tag;\n import org.junit.jupiter.api.Test;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import static io.strimzi.api.kafka.model.KafkaResources.kafkaStatefulSetName;\n import static io.strimzi.systemtest.Constants.REGRESSION;\n import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.hamcrest.CoreMatchers.nullValue;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.containsString;\n-import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n \n @Tag(REGRESSION)\n public class CruiseControlST extends BaseST {\n \n     private static final Logger LOGGER = LogManager.getLogger(CruiseControlST.class);\n+    private static final String NAMESPACE = \"cruise-control-test\";\n+\n+    private static final String CRUISE_CONTROL_NAME = \"Cruise Control\";\n+    private static final int CRUISE_CONTROL_DEFAULT_PORT = 9090;\n+    private static final String CRUISE_CONTROL_ENDPOINT = \"/kafkacruisecontrol/state\";\n+    private static final String CRUISE_CONTROL_POD_PREFIX = CLUSTER_NAME + \"-cruise-control-\";\n+\n+    private static final String CRUISE_CONTROL_CAPACITY_FILE_PATH = \"/tmp/capacity.json\";\n+    private static final String CRUISE_CONTROL_CONFIGURATION_FILE_PATH = \"/tmp/cruisecontrol.properties\";\n+\n+    private static final String CRUISE_CONTROL_METRICS_TOPIC = \"strimzi.cruisecontrol.metrics\"; // partitions 1 , rf - 1\n+    private static final String CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC = \"strimzi.cruisecontrol.modeltrainingsamples\"; // partitions 32 , rf - 2\n+    private static final String CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC = \"strimzi.cruisecontrol.partitionmetricsamples\"; // partitions 32 , rf - 2\n+\n+    @Test\n+    void testCruiseControlDeployment()  {\n+        String ccStatusCommand = \"curl -X GET localhost:\" + CRUISE_CONTROL_DEFAULT_PORT + CRUISE_CONTROL_ENDPOINT;\n+\n+        String ccPodName = PodUtils.getFirstPodNameContaining(\"cruise-control\");\n+\n+        String result = cmdKubeClient().execInPodContainer(ccPodName, \"cruise-control\",\n+            \"/bin/bash\", \"-c\", ccStatusCommand).out();\n+\n+        LOGGER.info(\"Verifying that {} is running inside the Pod {} and REST API is available\", CRUISE_CONTROL_NAME, ccPodName);\n+\n+        assertThat(result, not(containsString(\"404\")));\n+        assertThat(result, containsString(\"RUNNING\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a5dba6f1a39b1eb884c98505c50aeb009c21a3d"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5NTMxNQ==", "bodyText": "Would be feasible to test that the metrics reporter is not configured anymore in the new Kafka brokers because we removed CC? We could check the Kafka pod log or maybe better the configmap containing the updated broker configuration? Wdyt @kyguy @tomncooper", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r418295315", "createdAt": "2020-04-30T21:19:08Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/CruiseControlST.java", "diffHunk": "@@ -4,28 +4,254 @@\n  */\n package io.strimzi.systemtest;\n \n+import io.fabric8.kubernetes.api.model.Container;\n+import io.fabric8.kubernetes.api.model.EnvVar;\n+import io.fabric8.kubernetes.api.model.Pod;\n+import io.strimzi.api.kafka.model.CruiseControlSpec;\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.api.kafka.model.KafkaTopic;\n+import io.strimzi.api.kafka.model.balancing.BrokerCapacity;\n import io.strimzi.systemtest.resources.KubernetesResource;\n import io.strimzi.systemtest.resources.ResourceManager;\n import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.utils.kafkaUtils.KafkaTopicUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.StatefulSetUtils;\n import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n+import io.vertx.core.json.JsonObject;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Tag;\n import org.junit.jupiter.api.Test;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import static io.strimzi.api.kafka.model.KafkaResources.kafkaStatefulSetName;\n import static io.strimzi.systemtest.Constants.REGRESSION;\n import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.hamcrest.CoreMatchers.nullValue;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.containsString;\n-import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n \n @Tag(REGRESSION)\n public class CruiseControlST extends BaseST {\n \n     private static final Logger LOGGER = LogManager.getLogger(CruiseControlST.class);\n+    private static final String NAMESPACE = \"cruise-control-test\";\n+\n+    private static final String CRUISE_CONTROL_NAME = \"Cruise Control\";\n+    private static final int CRUISE_CONTROL_DEFAULT_PORT = 9090;\n+    private static final String CRUISE_CONTROL_ENDPOINT = \"/kafkacruisecontrol/state\";\n+    private static final String CRUISE_CONTROL_POD_PREFIX = CLUSTER_NAME + \"-cruise-control-\";\n+\n+    private static final String CRUISE_CONTROL_CAPACITY_FILE_PATH = \"/tmp/capacity.json\";\n+    private static final String CRUISE_CONTROL_CONFIGURATION_FILE_PATH = \"/tmp/cruisecontrol.properties\";\n+\n+    private static final String CRUISE_CONTROL_METRICS_TOPIC = \"strimzi.cruisecontrol.metrics\"; // partitions 1 , rf - 1\n+    private static final String CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC = \"strimzi.cruisecontrol.modeltrainingsamples\"; // partitions 32 , rf - 2\n+    private static final String CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC = \"strimzi.cruisecontrol.partitionmetricsamples\"; // partitions 32 , rf - 2\n+\n+    @Test\n+    void testCruiseControlDeployment()  {\n+        String ccStatusCommand = \"curl -X GET localhost:\" + CRUISE_CONTROL_DEFAULT_PORT + CRUISE_CONTROL_ENDPOINT;\n+\n+        String ccPodName = PodUtils.getFirstPodNameContaining(\"cruise-control\");\n+\n+        String result = cmdKubeClient().execInPodContainer(ccPodName, \"cruise-control\",\n+            \"/bin/bash\", \"-c\", ccStatusCommand).out();\n+\n+        LOGGER.info(\"Verifying that {} is running inside the Pod {} and REST API is available\", CRUISE_CONTROL_NAME, ccPodName);\n+\n+        assertThat(result, not(containsString(\"404\")));\n+        assertThat(result, containsString(\"RUNNING\"));\n+\n+        verifyThatCruiseControlTopicsArePresent();\n+    }\n+\n+    @Test\n+    void testUninstallingAndInstallationCruiseControl() {\n+\n+        Map<String, String> kafkaPods = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+            LOGGER.info(\"Removing Cruise Control to the classic Kafka.\");\n+            kafka.getSpec().setCruiseControl(null);\n+        });\n+\n+        StatefulSetUtils.waitTillSsHasRolled(kafkaStatefulSetName(CLUSTER_NAME), 3, kafkaPods);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a5dba6f1a39b1eb884c98505c50aeb009c21a3d"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5NjAxNw==", "bodyText": "I agree. Is that useful leaving the topic there for a sort of historical analysys of the metrics? Not sure if it's something that CC supports.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r418296017", "createdAt": "2020-04-30T21:20:34Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/CruiseControlST.java", "diffHunk": "@@ -4,28 +4,254 @@\n  */\n package io.strimzi.systemtest;\n \n+import io.fabric8.kubernetes.api.model.Container;\n+import io.fabric8.kubernetes.api.model.EnvVar;\n+import io.fabric8.kubernetes.api.model.Pod;\n+import io.strimzi.api.kafka.model.CruiseControlSpec;\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.api.kafka.model.KafkaTopic;\n+import io.strimzi.api.kafka.model.balancing.BrokerCapacity;\n import io.strimzi.systemtest.resources.KubernetesResource;\n import io.strimzi.systemtest.resources.ResourceManager;\n import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.utils.kafkaUtils.KafkaTopicUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.StatefulSetUtils;\n import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n+import io.vertx.core.json.JsonObject;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Tag;\n import org.junit.jupiter.api.Test;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import static io.strimzi.api.kafka.model.KafkaResources.kafkaStatefulSetName;\n import static io.strimzi.systemtest.Constants.REGRESSION;\n import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.hamcrest.CoreMatchers.nullValue;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.containsString;\n-import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n \n @Tag(REGRESSION)\n public class CruiseControlST extends BaseST {\n \n     private static final Logger LOGGER = LogManager.getLogger(CruiseControlST.class);\n+    private static final String NAMESPACE = \"cruise-control-test\";\n+\n+    private static final String CRUISE_CONTROL_NAME = \"Cruise Control\";\n+    private static final int CRUISE_CONTROL_DEFAULT_PORT = 9090;\n+    private static final String CRUISE_CONTROL_ENDPOINT = \"/kafkacruisecontrol/state\";\n+    private static final String CRUISE_CONTROL_POD_PREFIX = CLUSTER_NAME + \"-cruise-control-\";\n+\n+    private static final String CRUISE_CONTROL_CAPACITY_FILE_PATH = \"/tmp/capacity.json\";\n+    private static final String CRUISE_CONTROL_CONFIGURATION_FILE_PATH = \"/tmp/cruisecontrol.properties\";\n+\n+    private static final String CRUISE_CONTROL_METRICS_TOPIC = \"strimzi.cruisecontrol.metrics\"; // partitions 1 , rf - 1\n+    private static final String CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC = \"strimzi.cruisecontrol.modeltrainingsamples\"; // partitions 32 , rf - 2\n+    private static final String CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC = \"strimzi.cruisecontrol.partitionmetricsamples\"; // partitions 32 , rf - 2\n+\n+    @Test\n+    void testCruiseControlDeployment()  {\n+        String ccStatusCommand = \"curl -X GET localhost:\" + CRUISE_CONTROL_DEFAULT_PORT + CRUISE_CONTROL_ENDPOINT;\n+\n+        String ccPodName = PodUtils.getFirstPodNameContaining(\"cruise-control\");\n+\n+        String result = cmdKubeClient().execInPodContainer(ccPodName, \"cruise-control\",\n+            \"/bin/bash\", \"-c\", ccStatusCommand).out();\n+\n+        LOGGER.info(\"Verifying that {} is running inside the Pod {} and REST API is available\", CRUISE_CONTROL_NAME, ccPodName);\n+\n+        assertThat(result, not(containsString(\"404\")));\n+        assertThat(result, containsString(\"RUNNING\"));\n+\n+        verifyThatCruiseControlTopicsArePresent();\n+    }\n+\n+    @Test\n+    void testUninstallingAndInstallationCruiseControl() {\n+\n+        Map<String, String> kafkaPods = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+            LOGGER.info(\"Removing Cruise Control to the classic Kafka.\");\n+            kafka.getSpec().setCruiseControl(null);\n+        });\n+\n+        StatefulSetUtils.waitTillSsHasRolled(kafkaStatefulSetName(CLUSTER_NAME), 3, kafkaPods);\n+\n+        LOGGER.info(\"Verifying that in {} is not present in the Kafka cluster\", CRUISE_CONTROL_NAME);\n+        assertThat(KafkaResource.kafkaClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getSpec().getCruiseControl(), nullValue());\n+\n+        LOGGER.info(\"Verifying that {} pod is not present\", CRUISE_CONTROL_NAME);\n+        assertThat(kubeClient().listPodsByPrefixInName(CRUISE_CONTROL_POD_PREFIX).size(), is(0));\n+\n+        // TODO: should topic be deleted ? CURRENTLY CC let the topics in the kafka", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzNjI0MA=="}, "originalCommit": {"oid": "5a5dba6f1a39b1eb884c98505c50aeb009c21a3d"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5NjMyNg==", "bodyText": "As opposite to the previous comment, could we verify that the metrics reporter is configured on Kafka?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r418296326", "createdAt": "2020-04-30T21:21:18Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/CruiseControlST.java", "diffHunk": "@@ -4,28 +4,254 @@\n  */\n package io.strimzi.systemtest;\n \n+import io.fabric8.kubernetes.api.model.Container;\n+import io.fabric8.kubernetes.api.model.EnvVar;\n+import io.fabric8.kubernetes.api.model.Pod;\n+import io.strimzi.api.kafka.model.CruiseControlSpec;\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.api.kafka.model.KafkaTopic;\n+import io.strimzi.api.kafka.model.balancing.BrokerCapacity;\n import io.strimzi.systemtest.resources.KubernetesResource;\n import io.strimzi.systemtest.resources.ResourceManager;\n import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.utils.kafkaUtils.KafkaTopicUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.StatefulSetUtils;\n import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n+import io.vertx.core.json.JsonObject;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Tag;\n import org.junit.jupiter.api.Test;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import static io.strimzi.api.kafka.model.KafkaResources.kafkaStatefulSetName;\n import static io.strimzi.systemtest.Constants.REGRESSION;\n import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.hamcrest.CoreMatchers.nullValue;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.containsString;\n-import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n \n @Tag(REGRESSION)\n public class CruiseControlST extends BaseST {\n \n     private static final Logger LOGGER = LogManager.getLogger(CruiseControlST.class);\n+    private static final String NAMESPACE = \"cruise-control-test\";\n+\n+    private static final String CRUISE_CONTROL_NAME = \"Cruise Control\";\n+    private static final int CRUISE_CONTROL_DEFAULT_PORT = 9090;\n+    private static final String CRUISE_CONTROL_ENDPOINT = \"/kafkacruisecontrol/state\";\n+    private static final String CRUISE_CONTROL_POD_PREFIX = CLUSTER_NAME + \"-cruise-control-\";\n+\n+    private static final String CRUISE_CONTROL_CAPACITY_FILE_PATH = \"/tmp/capacity.json\";\n+    private static final String CRUISE_CONTROL_CONFIGURATION_FILE_PATH = \"/tmp/cruisecontrol.properties\";\n+\n+    private static final String CRUISE_CONTROL_METRICS_TOPIC = \"strimzi.cruisecontrol.metrics\"; // partitions 1 , rf - 1\n+    private static final String CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC = \"strimzi.cruisecontrol.modeltrainingsamples\"; // partitions 32 , rf - 2\n+    private static final String CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC = \"strimzi.cruisecontrol.partitionmetricsamples\"; // partitions 32 , rf - 2\n+\n+    @Test\n+    void testCruiseControlDeployment()  {\n+        String ccStatusCommand = \"curl -X GET localhost:\" + CRUISE_CONTROL_DEFAULT_PORT + CRUISE_CONTROL_ENDPOINT;\n+\n+        String ccPodName = PodUtils.getFirstPodNameContaining(\"cruise-control\");\n+\n+        String result = cmdKubeClient().execInPodContainer(ccPodName, \"cruise-control\",\n+            \"/bin/bash\", \"-c\", ccStatusCommand).out();\n+\n+        LOGGER.info(\"Verifying that {} is running inside the Pod {} and REST API is available\", CRUISE_CONTROL_NAME, ccPodName);\n+\n+        assertThat(result, not(containsString(\"404\")));\n+        assertThat(result, containsString(\"RUNNING\"));\n+\n+        verifyThatCruiseControlTopicsArePresent();\n+    }\n+\n+    @Test\n+    void testUninstallingAndInstallationCruiseControl() {\n+\n+        Map<String, String> kafkaPods = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+            LOGGER.info(\"Removing Cruise Control to the classic Kafka.\");\n+            kafka.getSpec().setCruiseControl(null);\n+        });\n+\n+        StatefulSetUtils.waitTillSsHasRolled(kafkaStatefulSetName(CLUSTER_NAME), 3, kafkaPods);\n+\n+        LOGGER.info(\"Verifying that in {} is not present in the Kafka cluster\", CRUISE_CONTROL_NAME);\n+        assertThat(KafkaResource.kafkaClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getSpec().getCruiseControl(), nullValue());\n+\n+        LOGGER.info(\"Verifying that {} pod is not present\", CRUISE_CONTROL_NAME);\n+        assertThat(kubeClient().listPodsByPrefixInName(CRUISE_CONTROL_POD_PREFIX).size(), is(0));\n+\n+        // TODO: should topic be deleted ? CURRENTLY CC let the topics in the kafka\n+//        verifyThatCruiseControlTopicsAreNotPresent();\n+\n+        kafkaPods = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+            LOGGER.info(\"Adding Cruise Control to the classic Kafka.\");\n+            kafka.getSpec().setCruiseControl(new CruiseControlSpec());\n+        });\n+\n+        StatefulSetUtils.waitTillSsHasRolled(kafkaStatefulSetName(CLUSTER_NAME), 3, kafkaPods);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a5dba6f1a39b1eb884c98505c50aeb009c21a3d"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5NzIwMg==", "bodyText": "@see-quick can you elaborate a little bit more I am not sure I got what you mean.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r418297202", "createdAt": "2020-04-30T21:23:17Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/CruiseControlST.java", "diffHunk": "@@ -4,28 +4,254 @@\n  */\n package io.strimzi.systemtest;\n \n+import io.fabric8.kubernetes.api.model.Container;\n+import io.fabric8.kubernetes.api.model.EnvVar;\n+import io.fabric8.kubernetes.api.model.Pod;\n+import io.strimzi.api.kafka.model.CruiseControlSpec;\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.api.kafka.model.KafkaTopic;\n+import io.strimzi.api.kafka.model.balancing.BrokerCapacity;\n import io.strimzi.systemtest.resources.KubernetesResource;\n import io.strimzi.systemtest.resources.ResourceManager;\n import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.utils.kafkaUtils.KafkaTopicUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.StatefulSetUtils;\n import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n+import io.vertx.core.json.JsonObject;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Tag;\n import org.junit.jupiter.api.Test;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import static io.strimzi.api.kafka.model.KafkaResources.kafkaStatefulSetName;\n import static io.strimzi.systemtest.Constants.REGRESSION;\n import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.hamcrest.CoreMatchers.nullValue;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.containsString;\n-import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n \n @Tag(REGRESSION)\n public class CruiseControlST extends BaseST {\n \n     private static final Logger LOGGER = LogManager.getLogger(CruiseControlST.class);\n+    private static final String NAMESPACE = \"cruise-control-test\";\n+\n+    private static final String CRUISE_CONTROL_NAME = \"Cruise Control\";\n+    private static final int CRUISE_CONTROL_DEFAULT_PORT = 9090;\n+    private static final String CRUISE_CONTROL_ENDPOINT = \"/kafkacruisecontrol/state\";\n+    private static final String CRUISE_CONTROL_POD_PREFIX = CLUSTER_NAME + \"-cruise-control-\";\n+\n+    private static final String CRUISE_CONTROL_CAPACITY_FILE_PATH = \"/tmp/capacity.json\";\n+    private static final String CRUISE_CONTROL_CONFIGURATION_FILE_PATH = \"/tmp/cruisecontrol.properties\";\n+\n+    private static final String CRUISE_CONTROL_METRICS_TOPIC = \"strimzi.cruisecontrol.metrics\"; // partitions 1 , rf - 1\n+    private static final String CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC = \"strimzi.cruisecontrol.modeltrainingsamples\"; // partitions 32 , rf - 2\n+    private static final String CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC = \"strimzi.cruisecontrol.partitionmetricsamples\"; // partitions 32 , rf - 2\n+\n+    @Test\n+    void testCruiseControlDeployment()  {\n+        String ccStatusCommand = \"curl -X GET localhost:\" + CRUISE_CONTROL_DEFAULT_PORT + CRUISE_CONTROL_ENDPOINT;\n+\n+        String ccPodName = PodUtils.getFirstPodNameContaining(\"cruise-control\");\n+\n+        String result = cmdKubeClient().execInPodContainer(ccPodName, \"cruise-control\",\n+            \"/bin/bash\", \"-c\", ccStatusCommand).out();\n+\n+        LOGGER.info(\"Verifying that {} is running inside the Pod {} and REST API is available\", CRUISE_CONTROL_NAME, ccPodName);\n+\n+        assertThat(result, not(containsString(\"404\")));\n+        assertThat(result, containsString(\"RUNNING\"));\n+\n+        verifyThatCruiseControlTopicsArePresent();\n+    }\n+\n+    @Test\n+    void testUninstallingAndInstallationCruiseControl() {\n+\n+        Map<String, String> kafkaPods = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+            LOGGER.info(\"Removing Cruise Control to the classic Kafka.\");\n+            kafka.getSpec().setCruiseControl(null);\n+        });\n+\n+        StatefulSetUtils.waitTillSsHasRolled(kafkaStatefulSetName(CLUSTER_NAME), 3, kafkaPods);\n+\n+        LOGGER.info(\"Verifying that in {} is not present in the Kafka cluster\", CRUISE_CONTROL_NAME);\n+        assertThat(KafkaResource.kafkaClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getSpec().getCruiseControl(), nullValue());\n+\n+        LOGGER.info(\"Verifying that {} pod is not present\", CRUISE_CONTROL_NAME);\n+        assertThat(kubeClient().listPodsByPrefixInName(CRUISE_CONTROL_POD_PREFIX).size(), is(0));\n+\n+        // TODO: should topic be deleted ? CURRENTLY CC let the topics in the kafka\n+//        verifyThatCruiseControlTopicsAreNotPresent();\n+\n+        kafkaPods = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+            LOGGER.info(\"Adding Cruise Control to the classic Kafka.\");\n+            kafka.getSpec().setCruiseControl(new CruiseControlSpec());\n+        });\n+\n+        StatefulSetUtils.waitTillSsHasRolled(kafkaStatefulSetName(CLUSTER_NAME), 3, kafkaPods);\n+\n+        LOGGER.info(\"Verifying that {} topics are created after CC is instantiated.\", CRUISE_CONTROL_NAME);\n+\n+        KafkaTopicUtils.waitForKafkaTopicReady(CRUISE_CONTROL_METRICS_TOPIC);\n+        KafkaTopicUtils.waitForKafkaTopicReady(CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC);\n+        KafkaTopicUtils.waitForKafkaTopicReady(CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC);\n+\n+        verifyThatCruiseControlTopicsArePresent();\n+    }\n+\n+    @Test\n+    void testConfigurationChangeTriggersRollingUpdate() {\n+\n+        Map<String, String> kafkaPods = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+            LOGGER.info(\"Adding Cruise Control to the classic Kafka.\");\n+            BrokerCapacity brokerCapacity = kafka.getSpec().getCruiseControl().getBrokerCapacity();\n+\n+            // TODO: this doesn't work because in the Kafka CR there is nothing using `kafka.getSpec().getCruiseControl()` only object,\n+            // TODO: which has some default values by they are not propagated to other fields...", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzODM0NA=="}, "originalCommit": {"oid": "5a5dba6f1a39b1eb884c98505c50aeb009c21a3d"}, "originalPosition": 130}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ba9a816e6011508afc603ce91a6b818d7e9cb7d1", "author": {"user": {"login": "see-quick", "name": "Ors\u00e1k Maro\u0161"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ba9a816e6011508afc603ce91a6b818d7e9cb7d1", "committedDate": "2020-05-07T10:57:46Z", "message": "[MO] - [adding profile] - done\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>"}, "afterCommit": {"oid": "a33ccd4a7b103daa0303ff1ed45817c788658da3", "author": {"user": {"login": "see-quick", "name": "Ors\u00e1k Maro\u0161"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a33ccd4a7b103daa0303ff1ed45817c788658da3", "committedDate": "2020-05-07T11:11:02Z", "message": "[MO] - done\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NDYxNTQw", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#pullrequestreview-407461540", "createdAt": "2020-05-07T13:18:26Z", "commit": {"oid": "7ad2d67802debaa9d8c81df1b56635add99c1a5c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzoxODoyNlrOGR-FAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzoxODoyNlrOGR-FAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5NjA2NA==", "bodyText": "You should be careful with this timeout. The REST API default timeout is 10seconds so you may timeout the tests before you get a response of any kind from the server.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r421496064", "createdAt": "2020-05-07T13:18:26Z", "author": {"login": "tomncooper"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/Constants.java", "diffHunk": "@@ -47,8 +47,11 @@\n     long GLOBAL_TRACING_POLL = Duration.ofSeconds(30).toMillis();\n     long GLOBAL_TRACING_TIMEOUT =  Duration.ofMinutes(7).toMillis();\n \n+    long GLOBAL_CRUISE_CONTROL_TIMEOUT = Duration.ofSeconds(10).toMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad2d67802debaa9d8c81df1b56635add99c1a5c"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NjI5MDMz", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#pullrequestreview-407629033", "createdAt": "2020-05-07T16:15:26Z", "commit": {"oid": "7ad2d67802debaa9d8c81df1b56635add99c1a5c"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNjoxNToyN1rOGSGFlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNjoxOTo1OVrOGSGQrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYyNzI4Nw==", "bodyText": "This is check after CC deletion or some recovery usecase?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r421627287", "createdAt": "2020-05-07T16:15:27Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/specific/CruiseControlUtils.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.utils.specific;\n+\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.api.kafka.model.KafkaTopic;\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.utils.kafkaUtils.KafkaTopicUtils;\n+import io.strimzi.test.TestUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+\n+public class CruiseControlUtils {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(CruiseControlUtils.class);\n+\n+    private static final String CRUISE_CONTROL_METRICS_TOPIC = \"strimzi.cruisecontrol.metrics\"; // partitions 1 , rf - 1\n+    private static final String CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC = \"strimzi.cruisecontrol.modeltrainingsamples\"; // partitions 32 , rf - 2\n+    private static final String CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC = \"strimzi.cruisecontrol.partitionmetricsamples\"; // partitions 32 , rf - 2\n+\n+    private CruiseControlUtils() { }\n+\n+    @SuppressWarnings(\"BooleanExpressionComplexity\")\n+    public static void verifyCruiseControlMetricReporterConfigurationInKafkaConfigMapIsPresent(Properties kafkaProperties) {\n+        TestUtils.waitFor(\"Verify that kafka configuration \" + kafkaProperties.toString() + \" has correct cruise control metric reporter properties\",\n+            Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_CRUISE_CONTROL_TIMEOUT, () ->\n+            kafkaProperties.getProperty(\"cruise.control.metrics.topic\").equals(\"strimzi.cruisecontrol.metrics\") &&\n+            kafkaProperties.getProperty(\"cruise.control.metrics.reporter.ssl.endpoint.identification.algorithm\").equals(\"HTTPS\") &&\n+            kafkaProperties.getProperty(\"cruise.control.metrics.reporter.bootstrap.servers\").equals(\"my-cluster-kafka-bootstrap:9091\") &&\n+            kafkaProperties.getProperty(\"cruise.control.metrics.reporter.security.protocol\").equals(\"SSL\") &&\n+            kafkaProperties.getProperty(\"cruise.control.metrics.reporter.ssl.keystore.type\").equals(\"PKCS12\") &&\n+            kafkaProperties.getProperty(\"cruise.control.metrics.reporter.ssl.keystore.location\").equals(\"/tmp/kafka/cluster.keystore.p12\") &&\n+            kafkaProperties.getProperty(\"cruise.control.metrics.reporter.ssl.keystore.password\").equals(\"${CERTS_STORE_PASSWORD}\") &&\n+            kafkaProperties.getProperty(\"cruise.control.metrics.reporter.ssl.truststore.type\").equals(\"PKCS12\") &&\n+            kafkaProperties.getProperty(\"cruise.control.metrics.reporter.ssl.truststore.location\").equals(\"/tmp/kafka/cluster.truststore.p12\") &&\n+            kafkaProperties.getProperty(\"cruise.control.metrics.reporter.ssl.truststore.password\").equals(\"${CERTS_STORE_PASSWORD}\"));\n+    }\n+\n+    public static void verifyThatCruiseControlTopicsAreNotPresent() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad2d67802debaa9d8c81df1b56635add99c1a5c"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYyNzg4Ng==", "bodyText": "Shouldn't we use some constants instead of this magic numbers?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r421627886", "createdAt": "2020-05-07T16:16:23Z", "author": {"login": "Frawless"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/specific/CruiseControlUtils.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.utils.specific;\n+\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.api.kafka.model.KafkaTopic;\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.utils.kafkaUtils.KafkaTopicUtils;\n+import io.strimzi.test.TestUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+\n+public class CruiseControlUtils {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(CruiseControlUtils.class);\n+\n+    private static final String CRUISE_CONTROL_METRICS_TOPIC = \"strimzi.cruisecontrol.metrics\"; // partitions 1 , rf - 1\n+    private static final String CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC = \"strimzi.cruisecontrol.modeltrainingsamples\"; // partitions 32 , rf - 2\n+    private static final String CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC = \"strimzi.cruisecontrol.partitionmetricsamples\"; // partitions 32 , rf - 2\n+\n+    private CruiseControlUtils() { }\n+\n+    @SuppressWarnings(\"BooleanExpressionComplexity\")\n+    public static void verifyCruiseControlMetricReporterConfigurationInKafkaConfigMapIsPresent(Properties kafkaProperties) {\n+        TestUtils.waitFor(\"Verify that kafka configuration \" + kafkaProperties.toString() + \" has correct cruise control metric reporter properties\",\n+            Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_CRUISE_CONTROL_TIMEOUT, () ->\n+            kafkaProperties.getProperty(\"cruise.control.metrics.topic\").equals(\"strimzi.cruisecontrol.metrics\") &&\n+            kafkaProperties.getProperty(\"cruise.control.metrics.reporter.ssl.endpoint.identification.algorithm\").equals(\"HTTPS\") &&\n+            kafkaProperties.getProperty(\"cruise.control.metrics.reporter.bootstrap.servers\").equals(\"my-cluster-kafka-bootstrap:9091\") &&\n+            kafkaProperties.getProperty(\"cruise.control.metrics.reporter.security.protocol\").equals(\"SSL\") &&\n+            kafkaProperties.getProperty(\"cruise.control.metrics.reporter.ssl.keystore.type\").equals(\"PKCS12\") &&\n+            kafkaProperties.getProperty(\"cruise.control.metrics.reporter.ssl.keystore.location\").equals(\"/tmp/kafka/cluster.keystore.p12\") &&\n+            kafkaProperties.getProperty(\"cruise.control.metrics.reporter.ssl.keystore.password\").equals(\"${CERTS_STORE_PASSWORD}\") &&\n+            kafkaProperties.getProperty(\"cruise.control.metrics.reporter.ssl.truststore.type\").equals(\"PKCS12\") &&\n+            kafkaProperties.getProperty(\"cruise.control.metrics.reporter.ssl.truststore.location\").equals(\"/tmp/kafka/cluster.truststore.p12\") &&\n+            kafkaProperties.getProperty(\"cruise.control.metrics.reporter.ssl.truststore.password\").equals(\"${CERTS_STORE_PASSWORD}\"));\n+    }\n+\n+    public static void verifyThatCruiseControlTopicsAreNotPresent() {\n+        KafkaTopicUtils.waitForKafkaTopicIsNotPresent(CRUISE_CONTROL_METRICS_TOPIC);\n+        KafkaTopicUtils.waitForKafkaTopicIsNotPresent(CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC);\n+        KafkaTopicUtils.waitForKafkaTopicIsNotPresent(CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC);\n+    }\n+\n+    public static void verifyThatCruiseControlTopicsArePresent() {\n+        KafkaTopic metrics = KafkaTopicResource.kafkaTopicClient().inNamespace(kubeClient().getNamespace()).withName(CRUISE_CONTROL_METRICS_TOPIC).get();\n+        KafkaTopic modelTrainingSamples = KafkaTopicResource.kafkaTopicClient().inNamespace(kubeClient().getNamespace()).withName(CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC).get();\n+        KafkaTopic partitionsMetricsSamples = KafkaTopicResource.kafkaTopicClient().inNamespace(kubeClient().getNamespace()).withName(CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC).get();\n+\n+        TestUtils.waitFor(\"Verify that kafka contains cruise control topics with related configuration.\",\n+            Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_CRUISE_CONTROL_TIMEOUT, () -> {\n+\n+                boolean hasTopicCorrectPartitionsCount =\n+                    metrics.getSpec().getPartitions() == 1 &&\n+                    modelTrainingSamples.getSpec().getPartitions() == 32 &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad2d67802debaa9d8c81df1b56635add99c1a5c"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYyOTA0OA==", "bodyText": "Add acceptance tag for this one will be useful", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r421629048", "createdAt": "2020-05-07T16:18:21Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/CruiseControlST.java", "diffHunk": "@@ -4,29 +4,249 @@\n  */\n package io.strimzi.systemtest;\n \n+import io.fabric8.kubernetes.api.model.Container;\n+import io.fabric8.kubernetes.api.model.EnvVar;\n+import io.fabric8.kubernetes.api.model.Pod;\n+import io.strimzi.api.kafka.model.CruiseControlSpec;\n+import io.strimzi.api.kafka.model.CruiseControlSpecBuilder;\n+import io.strimzi.api.kafka.model.KafkaResources;\n import io.strimzi.systemtest.resources.KubernetesResource;\n import io.strimzi.systemtest.resources.ResourceManager;\n import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.DeploymentUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.StatefulSetUtils;\n import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n+import io.strimzi.systemtest.utils.specific.CruiseControlUtils;\n+import io.strimzi.test.WaitException;\n+import io.vertx.core.json.JsonObject;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n import org.junit.jupiter.api.Tag;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import static io.strimzi.api.kafka.model.KafkaResources.kafkaStatefulSetName;\n+import static io.strimzi.systemtest.Constants.CRUISE_CONTROL;\n import static io.strimzi.systemtest.Constants.REGRESSION;\n import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.hamcrest.CoreMatchers.nullValue;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.containsString;\n-import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n \n @Tag(REGRESSION)\n+@Tag(CRUISE_CONTROL)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n public class CruiseControlST extends BaseST {\n \n     private static final Logger LOGGER = LogManager.getLogger(CruiseControlST.class);\n+    private static final String NAMESPACE = \"cruise-control-test\";\n+\n+    private static final String CRUISE_CONTROL_NAME = \"Cruise Control\";\n+    private static final int CRUISE_CONTROL_DEFAULT_PORT = 9090;\n+    private static final String CRUISE_CONTROL_STATE_ENDPOINT = \"/kafkacruisecontrol/state\";\n+    private static final String CRUISE_CONTROL_POD_PREFIX = CLUSTER_NAME + \"-cruise-control-\";\n+\n+    private static final String CRUISE_CONTROL_CAPACITY_FILE_PATH = \"/tmp/capacity.json\";\n+    private static final String CRUISE_CONTROL_CONFIGURATION_FILE_PATH = \"/tmp/cruisecontrol.properties\";\n+\n+    @Order(1)\n+    @Test\n+    void testCruiseControlDeployment()  {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad2d67802debaa9d8c81df1b56635add99c1a5c"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYyOTM4NA==", "bodyText": "Strange test name", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r421629384", "createdAt": "2020-05-07T16:18:52Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/CruiseControlST.java", "diffHunk": "@@ -4,29 +4,249 @@\n  */\n package io.strimzi.systemtest;\n \n+import io.fabric8.kubernetes.api.model.Container;\n+import io.fabric8.kubernetes.api.model.EnvVar;\n+import io.fabric8.kubernetes.api.model.Pod;\n+import io.strimzi.api.kafka.model.CruiseControlSpec;\n+import io.strimzi.api.kafka.model.CruiseControlSpecBuilder;\n+import io.strimzi.api.kafka.model.KafkaResources;\n import io.strimzi.systemtest.resources.KubernetesResource;\n import io.strimzi.systemtest.resources.ResourceManager;\n import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.DeploymentUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.StatefulSetUtils;\n import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n+import io.strimzi.systemtest.utils.specific.CruiseControlUtils;\n+import io.strimzi.test.WaitException;\n+import io.vertx.core.json.JsonObject;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n import org.junit.jupiter.api.Tag;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import static io.strimzi.api.kafka.model.KafkaResources.kafkaStatefulSetName;\n+import static io.strimzi.systemtest.Constants.CRUISE_CONTROL;\n import static io.strimzi.systemtest.Constants.REGRESSION;\n import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.hamcrest.CoreMatchers.nullValue;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.containsString;\n-import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n \n @Tag(REGRESSION)\n+@Tag(CRUISE_CONTROL)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n public class CruiseControlST extends BaseST {\n \n     private static final Logger LOGGER = LogManager.getLogger(CruiseControlST.class);\n+    private static final String NAMESPACE = \"cruise-control-test\";\n+\n+    private static final String CRUISE_CONTROL_NAME = \"Cruise Control\";\n+    private static final int CRUISE_CONTROL_DEFAULT_PORT = 9090;\n+    private static final String CRUISE_CONTROL_STATE_ENDPOINT = \"/kafkacruisecontrol/state\";\n+    private static final String CRUISE_CONTROL_POD_PREFIX = CLUSTER_NAME + \"-cruise-control-\";\n+\n+    private static final String CRUISE_CONTROL_CAPACITY_FILE_PATH = \"/tmp/capacity.json\";\n+    private static final String CRUISE_CONTROL_CONFIGURATION_FILE_PATH = \"/tmp/cruisecontrol.properties\";\n+\n+    @Order(1)\n+    @Test\n+    void testCruiseControlDeployment()  {\n+        String ccStatusCommand = \"curl -X GET localhost:\" + CRUISE_CONTROL_DEFAULT_PORT + CRUISE_CONTROL_STATE_ENDPOINT;\n+\n+        String ccPodName = PodUtils.getFirstPodNameContaining(\"cruise-control\");\n+\n+        String result = cmdKubeClient().execInPodContainer(ccPodName, \"cruise-control\",\n+            \"/bin/bash\", \"-c\", ccStatusCommand).out();\n+\n+        LOGGER.info(\"Verifying that {} is running inside the Pod {} and REST API is available\", CRUISE_CONTROL_NAME, ccPodName);\n+\n+        assertThat(result, not(containsString(\"404\")));\n+        assertThat(result, containsString(\"RUNNING\"));\n+\n+        CruiseControlUtils.verifyThatCruiseControlTopicsArePresent();\n+    }\n+\n+    @Order(2)\n+    @Test\n+    void testCapacityFile() {\n+\n+        String cruiseControlPodName = kubeClient().listPodsByPrefixInName(CRUISE_CONTROL_POD_PREFIX).get(0).getMetadata().getName();\n+\n+        JsonObject cruiseControlCapacityFileContent =\n+            new JsonObject(cmdKubeClient().execInPod(cruiseControlPodName, \"/bin/bash\", \"-c\", \"cat \" + CRUISE_CONTROL_CAPACITY_FILE_PATH).out());\n+\n+        assertThat(cruiseControlCapacityFileContent.getJsonArray(\"brokerCapacities\"), not(nullValue()));\n+\n+        LOGGER.info(\"We got only one configuration of broker-capacities\");\n+        assertThat(cruiseControlCapacityFileContent.getJsonArray(\"brokerCapacities\").size(), is(1));\n+\n+        LOGGER.info(\"Verifying cruise control configuration.\");\n \n-    public static final String NAMESPACE = \"cruise-control-test\";\n+        JsonObject cruiseControlFirstConfiguration = cruiseControlCapacityFileContent.getJsonArray(\"brokerCapacities\").getJsonObject(0);\n+\n+        assertThat(cruiseControlFirstConfiguration.getString(\"brokerId\"), is(\"-1\"));\n+        assertThat(cruiseControlFirstConfiguration.getString(\"doc\"), not(nullValue()));\n+\n+        JsonObject cruiseControlConfigurationOfBrokerCapacity = cruiseControlFirstConfiguration.getJsonObject(\"capacity\");\n+\n+        LOGGER.info(\"Verifying default cruise control capacities\");\n+\n+        assertThat(cruiseControlConfigurationOfBrokerCapacity.getString(\"DISK\"), is(\"100000.0\"));\n+        assertThat(cruiseControlConfigurationOfBrokerCapacity.getString(\"CPU\"), is(\"100\"));\n+        assertThat(cruiseControlConfigurationOfBrokerCapacity.getString(\"NW_IN\"), is(\"10000.0\"));\n+        assertThat(cruiseControlConfigurationOfBrokerCapacity.getString(\"NW_OUT\"), is(\"10000.0\"));\n+    }\n+\n+    @Order(3)\n+    @Test\n+    void testUninstallingAndInstallationCruiseControl() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad2d67802debaa9d8c81df1b56635add99c1a5c"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYzMDEyNg==", "bodyText": "Guess you can create method for deployTestResources and use it beforeAll and in recreate", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r421630126", "createdAt": "2020-05-07T16:19:59Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/CruiseControlST.java", "diffHunk": "@@ -35,20 +255,14 @@ void setup() {\n         applyRoleBindings(NAMESPACE);\n         // 050-Deployment\n         KubernetesResource.clusterOperator(NAMESPACE).done();\n-    }\n \n-    @Test\n-    void testCCDeployment()  {\n         KafkaResource.kafkaWithCruiseControl(CLUSTER_NAME, 3, 3).done();\n+    }\n \n-        String ccStatusCommand = \"curl -X GET localhost:9090/kafkacruisecontrol/state\";\n-        String ccPodName = PodUtils.getFirstPodNameContaining(\"cruise-control\");\n-        LOGGER.info(\"Using pod: \" + ccPodName);\n-        String result = cmdKubeClient().execInPodContainer(ccPodName, \"cruise-control\",\n-                \"/bin/bash\", \"-c\", ccStatusCommand).out();\n+    @Override\n+    protected void recreateTestEnv(String coNamespace, List<String> bindingsNamespaces) throws InterruptedException {\n+        super.recreateTestEnv(coNamespace, bindingsNamespaces);\n \n-        assertThat(result, not(containsString(\"404\")));\n-        assertThat(result, containsString(\"RUNNING\"));\n+        KafkaResource.kafkaWithCruiseControl(CLUSTER_NAME, 3, 3).done();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad2d67802debaa9d8c81df1b56635add99c1a5c"}, "originalPosition": 275}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NzI1MjM0", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#pullrequestreview-407725234", "createdAt": "2020-05-07T18:22:50Z", "commit": {"oid": "7ad2d67802debaa9d8c81df1b56635add99c1a5c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODoyMjo1MFrOGSKyPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODoyMjo1MFrOGSKyPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcwNDI1NA==", "bodyText": "CC deployment name can be grabbed from here[1]\n[1] \n  \n    \n      strimzi-kafka-operator/api/src/main/java/io/strimzi/api/kafka/model/CruiseControlResources.java\n    \n    \n        Lines 18 to 20\n      in\n      7ad2d67\n    \n    \n    \n    \n\n        \n          \n           public static String deploymentName(String clusterName) { \n        \n\n        \n          \n               return clusterName + \"-cruise-control\"; \n        \n\n        \n          \n           }", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r421704254", "createdAt": "2020-05-07T18:22:50Z", "author": {"login": "kyguy"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaResources.java", "diffHunk": "@@ -71,6 +71,17 @@ public static String entityOperatorSecretName(String clusterName) {\n         return entityOperatorDeploymentName(clusterName) + \"-certs\";\n     }\n \n+    /**\n+     * Returns the name of the Cruise Control {@code Deployment} for a {@code Kafka} cluster of the given name.\n+     * This {@code Deployment} will only exist if {@code Kafka.spec.cruiseControl} is configured in the\n+     * {@code Kafka} resource with the given name.\n+     * @param clusterName  The {@code metadata.name} of the {@code Kafka} resource.\n+     * @return The name of the corresponding Entity Operator {@code Deployment}.\n+     */\n+    public static String cruiseControlDeploymentName(String clusterName) {\n+        return clusterName + \"-cruise-control\";\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad2d67802debaa9d8c81df1b56635add99c1a5c"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4OTc1NDg2", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#pullrequestreview-408975486", "createdAt": "2020-05-11T08:44:03Z", "commit": {"oid": "56c441159ac8a274f76d3b5007c62981372154eb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cef0d0259f37ee9d5f54e38ecf0039c9e5fc559e", "author": {"user": {"login": "see-quick", "name": "Ors\u00e1k Maro\u0161"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/cef0d0259f37ee9d5f54e38ecf0039c9e5fc559e", "committedDate": "2020-05-13T16:04:33Z", "message": "[MO] - [system test] -> cruise control tests\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b203446d6565273a9f95af3b85b1e36193f789c", "author": {"user": {"login": "see-quick", "name": "Ors\u00e1k Maro\u0161"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/7b203446d6565273a9f95af3b85b1e36193f789c", "committedDate": "2020-05-13T16:04:33Z", "message": "[MO] - [basic tests] -> done\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0617304e361bc7ffeb77d59723eb1f0fbb74c75d", "author": {"user": {"login": "see-quick", "name": "Ors\u00e1k Maro\u0161"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/0617304e361bc7ffeb77d59723eb1f0fbb74c75d", "committedDate": "2020-05-13T16:04:33Z", "message": "[MO] - [additional stuff] -> metrircs reporter\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f77fb723582dd182ae280881be24464a978d9d7d", "author": {"user": {"login": "see-quick", "name": "Ors\u00e1k Maro\u0161"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/f77fb723582dd182ae280881be24464a978d9d7d", "committedDate": "2020-05-13T16:07:52Z", "message": "[MO] - [added\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fd0418632c21ed23583bc86049c272708e230d4", "author": {"user": {"login": "see-quick", "name": "Ors\u00e1k Maro\u0161"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/6fd0418632c21ed23583bc86049c272708e230d4", "committedDate": "2020-05-13T16:07:52Z", "message": "s\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d26283c8469c87e10ba001809b896a9c995e7a2", "author": {"user": {"login": "see-quick", "name": "Ors\u00e1k Maro\u0161"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/1d26283c8469c87e10ba001809b896a9c995e7a2", "committedDate": "2020-05-13T16:07:52Z", "message": "s\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86904ca674fb61b6591a5d89288c666516f8e77d", "author": {"user": {"login": "see-quick", "name": "Ors\u00e1k Maro\u0161"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/86904ca674fb61b6591a5d89288c666516f8e77d", "committedDate": "2020-05-13T16:07:52Z", "message": "s\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87b3a54f9b12a217c3c4a1d2a366af358177f5d2", "author": {"user": {"login": "see-quick", "name": "Ors\u00e1k Maro\u0161"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/87b3a54f9b12a217c3c4a1d2a366af358177f5d2", "committedDate": "2020-05-13T16:07:52Z", "message": "[MO] - [adding profile] - done\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5adf9bf17173e10a954e71d2bd7a494a753882cf", "author": {"user": {"login": "see-quick", "name": "Ors\u00e1k Maro\u0161"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/5adf9bf17173e10a954e71d2bd7a494a753882cf", "committedDate": "2020-05-13T16:07:52Z", "message": "[MO] - done\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc4a5628bf8fb48e8ac3d53f07bf95b520a6256e", "author": {"user": {"login": "see-quick", "name": "Ors\u00e1k Maro\u0161"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/cc4a5628bf8fb48e8ac3d53f07bf95b520a6256e", "committedDate": "2020-05-13T16:07:52Z", "message": "[MO] -done\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cab6f2f3b64e7a69adf3d7e7fd64d972385ccad", "author": {"user": {"login": "see-quick", "name": "Ors\u00e1k Maro\u0161"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/7cab6f2f3b64e7a69adf3d7e7fd64d972385ccad", "committedDate": "2020-05-13T16:07:52Z", "message": "[MO] - [cc] -> commends\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25776d38e951c69eb19c596a33f62c679b1aa33a", "author": {"user": {"login": "see-quick", "name": "Ors\u00e1k Maro\u0161"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/25776d38e951c69eb19c596a33f62c679b1aa33a", "committedDate": "2020-05-13T16:07:52Z", "message": "sdsd\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9f2f5c6a25efc24e25cfff26dcc85996740262fe", "author": {"user": {"login": "see-quick", "name": "Ors\u00e1k Maro\u0161"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/9f2f5c6a25efc24e25cfff26dcc85996740262fe", "committedDate": "2020-05-13T16:03:56Z", "message": "sdsd\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>"}, "afterCommit": {"oid": "25776d38e951c69eb19c596a33f62c679b1aa33a", "author": {"user": {"login": "see-quick", "name": "Ors\u00e1k Maro\u0161"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/25776d38e951c69eb19c596a33f62c679b1aa33a", "committedDate": "2020-05-13T16:07:52Z", "message": "sdsd\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMDkzODE2", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#pullrequestreview-411093816", "createdAt": "2020-05-13T16:23:43Z", "commit": {"oid": "25776d38e951c69eb19c596a33f62c679b1aa33a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTA4MjI1", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#pullrequestreview-411108225", "createdAt": "2020-05-13T16:41:18Z", "commit": {"oid": "25776d38e951c69eb19c596a33f62c679b1aa33a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMjM1NTQ5", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#pullrequestreview-411235549", "createdAt": "2020-05-13T19:31:09Z", "commit": {"oid": "25776d38e951c69eb19c596a33f62c679b1aa33a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1986, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}