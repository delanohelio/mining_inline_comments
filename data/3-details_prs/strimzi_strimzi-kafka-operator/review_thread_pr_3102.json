{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNzQzOTc3", "number": 3102, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNTo0MDozM1rOEAKGOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzo0MjowNFrOECKKWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjAwODkwOnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlIsolatedST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNTo0MDozM1rOGbQ4EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNTo0MDozM1rOGbQ4EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI0MTIzMw==", "bodyText": "CruiseControlIsolatedST", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3102#discussion_r431241233", "createdAt": "2020-05-27T15:40:33Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlIsolatedST.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.cruisecontrol;\n+\n+import io.strimzi.systemtest.BaseST;\n+import io.strimzi.systemtest.resources.KubernetesResource;\n+import io.strimzi.systemtest.resources.ResourceManager;\n+import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.utils.specific.CruiseControlUtils;\n+import io.strimzi.test.WaitException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class CruiseControlIsolatedST extends BaseST {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(CruiseControlConfigurationST.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b2ed9aae01b231d984a73a4b4c8f7806b3ce16a"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzEyNDAyOnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlIsolatedST.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMDozMDoyNFrOGbb_QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMDo0MTo1NlrOGbvgrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQyMzI5Ng==", "bodyText": "Unless explicitly created by the user, the sample topics will not be created by Cruise Control until after the metric reporter topic is created", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3102#discussion_r431423296", "createdAt": "2020-05-27T20:30:24Z", "author": {"login": "kyguy"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlIsolatedST.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.cruisecontrol;\n+\n+import io.strimzi.systemtest.BaseST;\n+import io.strimzi.systemtest.resources.KubernetesResource;\n+import io.strimzi.systemtest.resources.ResourceManager;\n+import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.utils.specific.CruiseControlUtils;\n+import io.strimzi.test.WaitException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class CruiseControlIsolatedST extends BaseST {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(CruiseControlConfigurationST.class);\n+    private static final String NAMESPACE = \"cruise-control-isolated-test\";\n+\n+    private static final String CRUISE_CONTROL_METRICS_TOPIC = \"strimzi.cruisecontrol.metrics\"; // partitions 1 , rf - 1\n+\n+    @Test\n+    void testManuallyCreateMetricsReporterTopic() {\n+        KafkaResource.kafkaWithCruiseControl(CLUSTER_NAME, 3, 3)\n+            .editSpec()\n+                .editKafka()\n+                    .addToConfig(\"auto.create.topics.enable\", \"false\")\n+                .endKafka()\n+            .endSpec()\n+            .done();\n+\n+        LOGGER.info(\"Verifying that samples topics are present\");\n+\n+        CruiseControlUtils.verifyThatCruiseControlSamplesTopicsArePresent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b2ed9aae01b231d984a73a4b4c8f7806b3ce16a"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY0MTQ1Ng==", "bodyText": "yes right, good catch!", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3102#discussion_r431641456", "createdAt": "2020-05-28T07:41:38Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlIsolatedST.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.cruisecontrol;\n+\n+import io.strimzi.systemtest.BaseST;\n+import io.strimzi.systemtest.resources.KubernetesResource;\n+import io.strimzi.systemtest.resources.ResourceManager;\n+import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.utils.specific.CruiseControlUtils;\n+import io.strimzi.test.WaitException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class CruiseControlIsolatedST extends BaseST {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(CruiseControlConfigurationST.class);\n+    private static final String NAMESPACE = \"cruise-control-isolated-test\";\n+\n+    private static final String CRUISE_CONTROL_METRICS_TOPIC = \"strimzi.cruisecontrol.metrics\"; // partitions 1 , rf - 1\n+\n+    @Test\n+    void testManuallyCreateMetricsReporterTopic() {\n+        KafkaResource.kafkaWithCruiseControl(CLUSTER_NAME, 3, 3)\n+            .editSpec()\n+                .editKafka()\n+                    .addToConfig(\"auto.create.topics.enable\", \"false\")\n+                .endKafka()\n+            .endSpec()\n+            .done();\n+\n+        LOGGER.info(\"Verifying that samples topics are present\");\n+\n+        CruiseControlUtils.verifyThatCruiseControlSamplesTopicsArePresent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQyMzI5Ng=="}, "originalCommit": {"oid": "0b2ed9aae01b231d984a73a4b4c8f7806b3ce16a"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc0MzE0OQ==", "bodyText": "Done, check it. Now, this test case is little be changed.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3102#discussion_r431743149", "createdAt": "2020-05-28T10:41:56Z", "author": {"login": "see-quick"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlIsolatedST.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.cruisecontrol;\n+\n+import io.strimzi.systemtest.BaseST;\n+import io.strimzi.systemtest.resources.KubernetesResource;\n+import io.strimzi.systemtest.resources.ResourceManager;\n+import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.utils.specific.CruiseControlUtils;\n+import io.strimzi.test.WaitException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class CruiseControlIsolatedST extends BaseST {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(CruiseControlConfigurationST.class);\n+    private static final String NAMESPACE = \"cruise-control-isolated-test\";\n+\n+    private static final String CRUISE_CONTROL_METRICS_TOPIC = \"strimzi.cruisecontrol.metrics\"; // partitions 1 , rf - 1\n+\n+    @Test\n+    void testManuallyCreateMetricsReporterTopic() {\n+        KafkaResource.kafkaWithCruiseControl(CLUSTER_NAME, 3, 3)\n+            .editSpec()\n+                .editKafka()\n+                    .addToConfig(\"auto.create.topics.enable\", \"false\")\n+                .endKafka()\n+            .endSpec()\n+            .done();\n+\n+        LOGGER.info(\"Verifying that samples topics are present\");\n+\n+        CruiseControlUtils.verifyThatCruiseControlSamplesTopicsArePresent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQyMzI5Ng=="}, "originalCommit": {"oid": "0b2ed9aae01b231d984a73a4b4c8f7806b3ce16a"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzE0MDI3OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlIsolatedST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMDozNTozNlrOGbcJqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMDozNTozNlrOGbcJqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQyNTk2MQ==", "bodyText": "Just keep in mind that when deploying Cruise Control to an existing Kafka cluster, the metric reporter adminClient will be able to create the metric reporter topic even if auto.create.topics.enable=false.\nThe only situation where the metric reporter topic creation will fail is when auto.create.topics.enable=false and Cruise Control is being deployed with a new Kafka cluster, which from what I understand is the purpose of this class, so feel free to ignore this comment", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3102#discussion_r431425961", "createdAt": "2020-05-27T20:35:36Z", "author": {"login": "kyguy"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlIsolatedST.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.cruisecontrol;\n+\n+import io.strimzi.systemtest.BaseST;\n+import io.strimzi.systemtest.resources.KubernetesResource;\n+import io.strimzi.systemtest.resources.ResourceManager;\n+import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.utils.specific.CruiseControlUtils;\n+import io.strimzi.test.WaitException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class CruiseControlIsolatedST extends BaseST {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(CruiseControlConfigurationST.class);\n+    private static final String NAMESPACE = \"cruise-control-isolated-test\";\n+\n+    private static final String CRUISE_CONTROL_METRICS_TOPIC = \"strimzi.cruisecontrol.metrics\"; // partitions 1 , rf - 1\n+\n+    @Test\n+    void testManuallyCreateMetricsReporterTopic() {\n+        KafkaResource.kafkaWithCruiseControl(CLUSTER_NAME, 3, 3)\n+            .editSpec()\n+                .editKafka()\n+                    .addToConfig(\"auto.create.topics.enable\", \"false\")\n+                .endKafka()\n+            .endSpec()\n+            .done();\n+\n+        LOGGER.info(\"Verifying that samples topics are present\");\n+\n+        CruiseControlUtils.verifyThatCruiseControlSamplesTopicsArePresent();\n+\n+        LOGGER.info(\"Verifying that metrics reporter topic is not present because of selected config 'auto.create.topics.enable=false'\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b2ed9aae01b231d984a73a4b4c8f7806b3ce16a"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODU1NjQwOnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlIsolatedST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzowMToxOFrOGdJoLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzowMToxOFrOGdJoLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIxOTYyOQ==", "bodyText": "you should not create these two topics manually, they are created by CC when it detects that the CRUISE_CONTROL_METRICS_TOPIC is created and can continue.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3102#discussion_r433219629", "createdAt": "2020-06-01T13:01:18Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlIsolatedST.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.cruisecontrol;\n+\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.systemtest.BaseST;\n+import io.strimzi.systemtest.resources.KubernetesResource;\n+import io.strimzi.systemtest.resources.ResourceManager;\n+import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n+import io.strimzi.systemtest.utils.specific.CruiseControlUtils;\n+import io.strimzi.test.WaitException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.strimzi.systemtest.Constants.CRUISE_CONTROL;\n+import static io.strimzi.systemtest.Constants.REGRESSION;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+@Tag(REGRESSION)\n+@Tag(CRUISE_CONTROL)\n+public class CruiseControlIsolatedST extends BaseST {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(CruiseControlIsolatedST.class);\n+    private static final String NAMESPACE = \"cruise-control-isolated-test\";\n+\n+    private static final String CRUISE_CONTROL_METRICS_TOPIC = \"strimzi.cruisecontrol.metrics\"; // partitions 1 , rf - 1\n+    private static final String CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC = \"strimzi.cruisecontrol.modeltrainingsamples\"; // partitions 32 , rf - 2\n+    private static final String CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC = \"strimzi.cruisecontrol.partitionmetricsamples\"; // partitions 32 , rf - 2\n+\n+\n+    @Test\n+    void testManuallyCreateMetricsReporterTopic() {\n+        KafkaResource.kafkaWithCruiseControlWithoutWaitAutoCreateTopicsDisable(CLUSTER_NAME, 3, 3);\n+\n+        PodUtils.verifyThatRunningPodsAreStable(KafkaResources.zookeeperStatefulSetName(CLUSTER_NAME));\n+        PodUtils.verifyThatRunningPodsAreStable(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+\n+        PodUtils.waitUntilPodIsInCrashLoopBackOff(PodUtils.getFirstPodNameContaining(\"cruise-control\"));\n+\n+        LOGGER.info(\"Verifying that samples topics are not present because of \" +\n+            \"'Cruise Control cannot find partitions for the metrics reporter that topic matches strimzi.cruisecontrol.metrics in the target cluster'\");\n+\n+        assertThrows(WaitException.class, CruiseControlUtils::verifyThatCruiseControlSamplesTopicsArePresent);\n+\n+        LOGGER.info(\"Verifying that metrics reporter topic is not present because of selected config 'auto.create.topics.enable=false'\");\n+\n+        assertThrows(WaitException.class, CruiseControlUtils::verifyThatKafkaCruiseControlMetricReporterTopicIsPresent);\n+\n+        LOGGER.info(\"Creating samples topics {},{}\", CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC, CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC);\n+\n+        KafkaTopicResource.topic(CLUSTER_NAME, CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC)\n+            .editSpec()\n+                .withPartitions(32)\n+                .withReplicas(2)\n+                .addToConfig(\"cleanup.policy\", \"delete\")\n+            .endSpec()\n+            .done();\n+\n+        KafkaTopicResource.topic(CLUSTER_NAME, CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC)\n+            .editSpec()\n+                .withPartitions(32)\n+                .withReplicas(2)\n+                .addToConfig(\"cleanup.policy\", \"delete\")\n+            .endSpec()\n+            .done();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "869379dab6b88cbf3444ad42b161b71af76ce208"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjk1ODE3OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/specific/CruiseControlUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzozNToxMVrOGecE3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzo0MToxOFrOGecXbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU3MDQ2MQ==", "bodyText": "verifyThatCruiseControlSamplesTopicsArePresent can only be true if verifyThatKafkaCruiseControlMetricReporterTopicIsPresent is true,  for that reason I think verifyThatKafkaCruiseControlMetricReporterTopicIsPresent should come first so that we can rule out verifyThatKafkaCruiseControlMetricReporterTopicIsPresent=false being the cause of verifyThatCruiseControlSamplesTopicsArePresent being false", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3102#discussion_r434570461", "createdAt": "2020-06-03T13:35:11Z", "author": {"login": "kyguy"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/specific/CruiseControlUtils.java", "diffHunk": "@@ -79,33 +79,54 @@ public static void verifyCruiseControlMetricReporterConfigurationInKafkaConfigMa\n             kafkaProperties.getProperty(\"cruise.control.metrics.reporter.ssl.truststore.password\").equals(\"${CERTS_STORE_PASSWORD}\"));\n     }\n \n-    public static void verifyThatCruiseControlTopicsArePresent() {\n-        final int numberOfPartitionsMetricTopic = 1;\n+    public static void verifyThatCruiseControlSamplesTopicsArePresent(long timeout) {\n         final int numberOfPartitionsSamplesTopic = 32;\n-        final int numberOfReplicasMetricTopic = 1;\n         final int numberOfReplicasSamplesTopic = 2;\n \n-        KafkaTopic metrics = KafkaTopicResource.kafkaTopicClient().inNamespace(kubeClient().getNamespace()).withName(CRUISE_CONTROL_METRICS_TOPIC).get();\n-        KafkaTopic modelTrainingSamples = KafkaTopicResource.kafkaTopicClient().inNamespace(kubeClient().getNamespace()).withName(CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC).get();\n-        KafkaTopic partitionsMetricsSamples = KafkaTopicResource.kafkaTopicClient().inNamespace(kubeClient().getNamespace()).withName(CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC).get();\n+        TestUtils.waitFor(\"Verify that kafka contains cruise control topics with related configuration.\",\n+            Constants.GLOBAL_POLL_INTERVAL, timeout, () -> {\n+                KafkaTopic modelTrainingSamples = KafkaTopicResource.kafkaTopicClient().inNamespace(kubeClient().getNamespace()).withName(CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC).get();\n+                KafkaTopic partitionsMetricsSamples = KafkaTopicResource.kafkaTopicClient().inNamespace(kubeClient().getNamespace()).withName(CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC).get();\n+\n+                if (modelTrainingSamples != null && partitionsMetricsSamples != null) {\n+                    boolean hasTopicCorrectPartitionsCount =\n+                            modelTrainingSamples.getSpec().getPartitions() == numberOfPartitionsSamplesTopic &&\n+                            partitionsMetricsSamples.getSpec().getPartitions() == numberOfPartitionsSamplesTopic;\n+\n+                    boolean hasTopicCorrectReplicasCount =\n+                            modelTrainingSamples.getSpec().getReplicas() == numberOfReplicasSamplesTopic &&\n+                            partitionsMetricsSamples.getSpec().getReplicas() == numberOfReplicasSamplesTopic;\n+\n+                    return hasTopicCorrectPartitionsCount && hasTopicCorrectReplicasCount;\n+                }\n+                LOGGER.debug(\"One of the samples {}, {} topics are not present\", CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC, CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC);\n+                return false;\n+            });\n+    }\n+\n+    public static void verifyThatKafkaCruiseControlMetricReporterTopicIsPresent(long timeout) {\n+        final int numberOfPartitionsMetricTopic = 1;\n+        final int numberOfReplicasMetricTopic = 1;\n \n         TestUtils.waitFor(\"Verify that kafka contains cruise control topics with related configuration.\",\n-            Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_CRUISE_CONTROL_TIMEOUT, () -> {\n+            Constants.GLOBAL_POLL_INTERVAL, timeout, () -> {\n+                KafkaTopic metrics = KafkaTopicResource.kafkaTopicClient().inNamespace(kubeClient().getNamespace()).withName(CRUISE_CONTROL_METRICS_TOPIC).get();\n \n                 boolean hasTopicCorrectPartitionsCount =\n-                    metrics.getSpec().getPartitions() == numberOfPartitionsMetricTopic &&\n-                    modelTrainingSamples.getSpec().getPartitions() == numberOfPartitionsSamplesTopic &&\n-                    partitionsMetricsSamples.getSpec().getPartitions() == numberOfPartitionsSamplesTopic;\n+                    metrics.getSpec().getPartitions() == numberOfPartitionsMetricTopic;\n \n                 boolean hasTopicCorrectReplicasCount =\n-                    metrics.getSpec().getReplicas() == numberOfReplicasMetricTopic &&\n-                    modelTrainingSamples.getSpec().getReplicas() == numberOfReplicasSamplesTopic &&\n-                    partitionsMetricsSamples.getSpec().getReplicas() == numberOfReplicasSamplesTopic;\n+                    metrics.getSpec().getReplicas() == numberOfReplicasMetricTopic;\n \n                 return hasTopicCorrectPartitionsCount && hasTopicCorrectReplicasCount;\n             });\n     }\n \n+    public static void verifyThatCruiseControlTopicsArePresent() {\n+        verifyThatCruiseControlSamplesTopicsArePresent(Constants.GLOBAL_CRUISE_CONTROL_TIMEOUT);\n+        verifyThatKafkaCruiseControlMetricReporterTopicIsPresent(Constants.GLOBAL_CRUISE_CONTROL_TIMEOUT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cc746b71222f7f8e39ec8a89038cab153b20ab8"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU3NTIxMw==", "bodyText": "Good, changeed @kyguy", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3102#discussion_r434575213", "createdAt": "2020-06-03T13:41:18Z", "author": {"login": "see-quick"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/specific/CruiseControlUtils.java", "diffHunk": "@@ -79,33 +79,54 @@ public static void verifyCruiseControlMetricReporterConfigurationInKafkaConfigMa\n             kafkaProperties.getProperty(\"cruise.control.metrics.reporter.ssl.truststore.password\").equals(\"${CERTS_STORE_PASSWORD}\"));\n     }\n \n-    public static void verifyThatCruiseControlTopicsArePresent() {\n-        final int numberOfPartitionsMetricTopic = 1;\n+    public static void verifyThatCruiseControlSamplesTopicsArePresent(long timeout) {\n         final int numberOfPartitionsSamplesTopic = 32;\n-        final int numberOfReplicasMetricTopic = 1;\n         final int numberOfReplicasSamplesTopic = 2;\n \n-        KafkaTopic metrics = KafkaTopicResource.kafkaTopicClient().inNamespace(kubeClient().getNamespace()).withName(CRUISE_CONTROL_METRICS_TOPIC).get();\n-        KafkaTopic modelTrainingSamples = KafkaTopicResource.kafkaTopicClient().inNamespace(kubeClient().getNamespace()).withName(CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC).get();\n-        KafkaTopic partitionsMetricsSamples = KafkaTopicResource.kafkaTopicClient().inNamespace(kubeClient().getNamespace()).withName(CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC).get();\n+        TestUtils.waitFor(\"Verify that kafka contains cruise control topics with related configuration.\",\n+            Constants.GLOBAL_POLL_INTERVAL, timeout, () -> {\n+                KafkaTopic modelTrainingSamples = KafkaTopicResource.kafkaTopicClient().inNamespace(kubeClient().getNamespace()).withName(CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC).get();\n+                KafkaTopic partitionsMetricsSamples = KafkaTopicResource.kafkaTopicClient().inNamespace(kubeClient().getNamespace()).withName(CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC).get();\n+\n+                if (modelTrainingSamples != null && partitionsMetricsSamples != null) {\n+                    boolean hasTopicCorrectPartitionsCount =\n+                            modelTrainingSamples.getSpec().getPartitions() == numberOfPartitionsSamplesTopic &&\n+                            partitionsMetricsSamples.getSpec().getPartitions() == numberOfPartitionsSamplesTopic;\n+\n+                    boolean hasTopicCorrectReplicasCount =\n+                            modelTrainingSamples.getSpec().getReplicas() == numberOfReplicasSamplesTopic &&\n+                            partitionsMetricsSamples.getSpec().getReplicas() == numberOfReplicasSamplesTopic;\n+\n+                    return hasTopicCorrectPartitionsCount && hasTopicCorrectReplicasCount;\n+                }\n+                LOGGER.debug(\"One of the samples {}, {} topics are not present\", CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC, CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC);\n+                return false;\n+            });\n+    }\n+\n+    public static void verifyThatKafkaCruiseControlMetricReporterTopicIsPresent(long timeout) {\n+        final int numberOfPartitionsMetricTopic = 1;\n+        final int numberOfReplicasMetricTopic = 1;\n \n         TestUtils.waitFor(\"Verify that kafka contains cruise control topics with related configuration.\",\n-            Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_CRUISE_CONTROL_TIMEOUT, () -> {\n+            Constants.GLOBAL_POLL_INTERVAL, timeout, () -> {\n+                KafkaTopic metrics = KafkaTopicResource.kafkaTopicClient().inNamespace(kubeClient().getNamespace()).withName(CRUISE_CONTROL_METRICS_TOPIC).get();\n \n                 boolean hasTopicCorrectPartitionsCount =\n-                    metrics.getSpec().getPartitions() == numberOfPartitionsMetricTopic &&\n-                    modelTrainingSamples.getSpec().getPartitions() == numberOfPartitionsSamplesTopic &&\n-                    partitionsMetricsSamples.getSpec().getPartitions() == numberOfPartitionsSamplesTopic;\n+                    metrics.getSpec().getPartitions() == numberOfPartitionsMetricTopic;\n \n                 boolean hasTopicCorrectReplicasCount =\n-                    metrics.getSpec().getReplicas() == numberOfReplicasMetricTopic &&\n-                    modelTrainingSamples.getSpec().getReplicas() == numberOfReplicasSamplesTopic &&\n-                    partitionsMetricsSamples.getSpec().getReplicas() == numberOfReplicasSamplesTopic;\n+                    metrics.getSpec().getReplicas() == numberOfReplicasMetricTopic;\n \n                 return hasTopicCorrectPartitionsCount && hasTopicCorrectReplicasCount;\n             });\n     }\n \n+    public static void verifyThatCruiseControlTopicsArePresent() {\n+        verifyThatCruiseControlSamplesTopicsArePresent(Constants.GLOBAL_CRUISE_CONTROL_TIMEOUT);\n+        verifyThatKafkaCruiseControlMetricReporterTopicIsPresent(Constants.GLOBAL_CRUISE_CONTROL_TIMEOUT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU3MDQ2MQ=="}, "originalCommit": {"oid": "1cc746b71222f7f8e39ec8a89038cab153b20ab8"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjk5MDk2OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlIsolatedST.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzo0MjowNFrOGecZlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDo0Mjo1MFrOGefMRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU3NTc2Nw==", "bodyText": "Was this method, verifyThatCruiseControlTopicsArePresent supposed to replace the 4 lines of code above here?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3102#discussion_r434575767", "createdAt": "2020-06-03T13:42:04Z", "author": {"login": "kyguy"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlIsolatedST.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.cruisecontrol;\n+\n+import io.strimzi.api.kafka.model.CruiseControlResources;\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.systemtest.BaseST;\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.systemtest.resources.KubernetesResource;\n+import io.strimzi.systemtest.resources.ResourceManager;\n+import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n+import io.strimzi.systemtest.utils.specific.CruiseControlUtils;\n+import io.strimzi.test.WaitException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.strimzi.systemtest.Constants.CRUISE_CONTROL;\n+import static io.strimzi.systemtest.Constants.REGRESSION;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+@Tag(REGRESSION)\n+@Tag(CRUISE_CONTROL)\n+public class CruiseControlIsolatedST extends BaseST {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(CruiseControlIsolatedST.class);\n+    private static final String NAMESPACE = \"cruise-control-isolated-test\";\n+\n+    private static final String CRUISE_CONTROL_METRICS_TOPIC = \"strimzi.cruisecontrol.metrics\"; // partitions 1 , rf - 1\n+    private static final String CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC = \"strimzi.cruisecontrol.modeltrainingsamples\"; // partitions 32 , rf - 2\n+    private static final String CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC = \"strimzi.cruisecontrol.partitionmetricsamples\"; // partitions 32 , rf - 2\n+\n+\n+    @Test\n+    void testManuallyCreateMetricsReporterTopic() {\n+        KafkaResource.kafkaWithCruiseControlWithoutWaitAutoCreateTopicsDisable(CLUSTER_NAME, 3, 3);\n+\n+        PodUtils.verifyThatRunningPodsAreStable(KafkaResources.zookeeperStatefulSetName(CLUSTER_NAME));\n+        PodUtils.verifyThatRunningPodsAreStable(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+        PodUtils.verifyThatRunningPodsAreStable(KafkaResources.entityOperatorDeploymentName(CLUSTER_NAME));\n+\n+        PodUtils.waitUntilPodIsPresent(CruiseControlResources.deploymentName(CLUSTER_NAME));\n+        PodUtils.waitUntilPodIsInCrashLoopBackOff(kubeClient().listPodsByPrefixInName(CruiseControlResources.deploymentName(CLUSTER_NAME)).get(0).getMetadata().getName());\n+\n+        LOGGER.info(\"Verifying that samples topics are not present because of \" +\n+            \"'Cruise Control cannot find partitions for the metrics reporter that topic matches strimzi.cruisecontrol.metrics in the target cluster'\");\n+\n+        assertThrows(WaitException.class, () -> CruiseControlUtils.verifyThatCruiseControlSamplesTopicsArePresent(Constants.GLOBAL_CRUISE_CONTROL_EXCEPT_FAIL_TIMEOUT));\n+\n+        LOGGER.info(\"Verifying that metrics reporter topic is not present because of selected config 'auto.create.topics.enable=false'\");\n+\n+        assertThrows(WaitException.class, () -> CruiseControlUtils.verifyThatKafkaCruiseControlMetricReporterTopicIsPresent(Constants.GLOBAL_CRUISE_CONTROL_EXCEPT_FAIL_TIMEOUT));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cc746b71222f7f8e39ec8a89038cab153b20ab8"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU3NzUxNA==", "bodyText": "This verifyThatCruiseControlTopicsArePresent is mainly used in the CruiseControlConfigurationST", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3102#discussion_r434577514", "createdAt": "2020-06-03T13:44:27Z", "author": {"login": "see-quick"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlIsolatedST.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.cruisecontrol;\n+\n+import io.strimzi.api.kafka.model.CruiseControlResources;\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.systemtest.BaseST;\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.systemtest.resources.KubernetesResource;\n+import io.strimzi.systemtest.resources.ResourceManager;\n+import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n+import io.strimzi.systemtest.utils.specific.CruiseControlUtils;\n+import io.strimzi.test.WaitException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.strimzi.systemtest.Constants.CRUISE_CONTROL;\n+import static io.strimzi.systemtest.Constants.REGRESSION;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+@Tag(REGRESSION)\n+@Tag(CRUISE_CONTROL)\n+public class CruiseControlIsolatedST extends BaseST {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(CruiseControlIsolatedST.class);\n+    private static final String NAMESPACE = \"cruise-control-isolated-test\";\n+\n+    private static final String CRUISE_CONTROL_METRICS_TOPIC = \"strimzi.cruisecontrol.metrics\"; // partitions 1 , rf - 1\n+    private static final String CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC = \"strimzi.cruisecontrol.modeltrainingsamples\"; // partitions 32 , rf - 2\n+    private static final String CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC = \"strimzi.cruisecontrol.partitionmetricsamples\"; // partitions 32 , rf - 2\n+\n+\n+    @Test\n+    void testManuallyCreateMetricsReporterTopic() {\n+        KafkaResource.kafkaWithCruiseControlWithoutWaitAutoCreateTopicsDisable(CLUSTER_NAME, 3, 3);\n+\n+        PodUtils.verifyThatRunningPodsAreStable(KafkaResources.zookeeperStatefulSetName(CLUSTER_NAME));\n+        PodUtils.verifyThatRunningPodsAreStable(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+        PodUtils.verifyThatRunningPodsAreStable(KafkaResources.entityOperatorDeploymentName(CLUSTER_NAME));\n+\n+        PodUtils.waitUntilPodIsPresent(CruiseControlResources.deploymentName(CLUSTER_NAME));\n+        PodUtils.waitUntilPodIsInCrashLoopBackOff(kubeClient().listPodsByPrefixInName(CruiseControlResources.deploymentName(CLUSTER_NAME)).get(0).getMetadata().getName());\n+\n+        LOGGER.info(\"Verifying that samples topics are not present because of \" +\n+            \"'Cruise Control cannot find partitions for the metrics reporter that topic matches strimzi.cruisecontrol.metrics in the target cluster'\");\n+\n+        assertThrows(WaitException.class, () -> CruiseControlUtils.verifyThatCruiseControlSamplesTopicsArePresent(Constants.GLOBAL_CRUISE_CONTROL_EXCEPT_FAIL_TIMEOUT));\n+\n+        LOGGER.info(\"Verifying that metrics reporter topic is not present because of selected config 'auto.create.topics.enable=false'\");\n+\n+        assertThrows(WaitException.class, () -> CruiseControlUtils.verifyThatKafkaCruiseControlMetricReporterTopicIsPresent(Constants.GLOBAL_CRUISE_CONTROL_EXCEPT_FAIL_TIMEOUT));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU3NTc2Nw=="}, "originalCommit": {"oid": "1cc746b71222f7f8e39ec8a89038cab153b20ab8"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU3ODA4NQ==", "bodyText": "So better readabillity and be more verbose i have let this to methods with following description.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3102#discussion_r434578085", "createdAt": "2020-06-03T13:45:14Z", "author": {"login": "see-quick"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlIsolatedST.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.cruisecontrol;\n+\n+import io.strimzi.api.kafka.model.CruiseControlResources;\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.systemtest.BaseST;\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.systemtest.resources.KubernetesResource;\n+import io.strimzi.systemtest.resources.ResourceManager;\n+import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n+import io.strimzi.systemtest.utils.specific.CruiseControlUtils;\n+import io.strimzi.test.WaitException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.strimzi.systemtest.Constants.CRUISE_CONTROL;\n+import static io.strimzi.systemtest.Constants.REGRESSION;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+@Tag(REGRESSION)\n+@Tag(CRUISE_CONTROL)\n+public class CruiseControlIsolatedST extends BaseST {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(CruiseControlIsolatedST.class);\n+    private static final String NAMESPACE = \"cruise-control-isolated-test\";\n+\n+    private static final String CRUISE_CONTROL_METRICS_TOPIC = \"strimzi.cruisecontrol.metrics\"; // partitions 1 , rf - 1\n+    private static final String CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC = \"strimzi.cruisecontrol.modeltrainingsamples\"; // partitions 32 , rf - 2\n+    private static final String CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC = \"strimzi.cruisecontrol.partitionmetricsamples\"; // partitions 32 , rf - 2\n+\n+\n+    @Test\n+    void testManuallyCreateMetricsReporterTopic() {\n+        KafkaResource.kafkaWithCruiseControlWithoutWaitAutoCreateTopicsDisable(CLUSTER_NAME, 3, 3);\n+\n+        PodUtils.verifyThatRunningPodsAreStable(KafkaResources.zookeeperStatefulSetName(CLUSTER_NAME));\n+        PodUtils.verifyThatRunningPodsAreStable(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+        PodUtils.verifyThatRunningPodsAreStable(KafkaResources.entityOperatorDeploymentName(CLUSTER_NAME));\n+\n+        PodUtils.waitUntilPodIsPresent(CruiseControlResources.deploymentName(CLUSTER_NAME));\n+        PodUtils.waitUntilPodIsInCrashLoopBackOff(kubeClient().listPodsByPrefixInName(CruiseControlResources.deploymentName(CLUSTER_NAME)).get(0).getMetadata().getName());\n+\n+        LOGGER.info(\"Verifying that samples topics are not present because of \" +\n+            \"'Cruise Control cannot find partitions for the metrics reporter that topic matches strimzi.cruisecontrol.metrics in the target cluster'\");\n+\n+        assertThrows(WaitException.class, () -> CruiseControlUtils.verifyThatCruiseControlSamplesTopicsArePresent(Constants.GLOBAL_CRUISE_CONTROL_EXCEPT_FAIL_TIMEOUT));\n+\n+        LOGGER.info(\"Verifying that metrics reporter topic is not present because of selected config 'auto.create.topics.enable=false'\");\n+\n+        assertThrows(WaitException.class, () -> CruiseControlUtils.verifyThatKafkaCruiseControlMetricReporterTopicIsPresent(Constants.GLOBAL_CRUISE_CONTROL_EXCEPT_FAIL_TIMEOUT));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU3NTc2Nw=="}, "originalCommit": {"oid": "1cc746b71222f7f8e39ec8a89038cab153b20ab8"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4MzUzMQ==", "bodyText": "In that case, could we put  assertThrows(WaitException.class, () -> CruiseControlUtils.verifyThatKafkaCruiseControlMetricReporterTopicIsPresent(Constants.GLOBAL_CRUISE_CONTROL_EXCEPT_FAIL_TIMEOUT)); lines above the  assertThrows(WaitException.class, () -> CruiseControlUtils.verifyThatKafkaCruiseControlMetricReporterTopicIsPresent(Constants.GLOBAL_CRUISE_CONTROL_EXCEPT_FAIL_TIMEOUT)); for the same reason as the other comment?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3102#discussion_r434583531", "createdAt": "2020-06-03T13:52:33Z", "author": {"login": "kyguy"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlIsolatedST.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.cruisecontrol;\n+\n+import io.strimzi.api.kafka.model.CruiseControlResources;\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.systemtest.BaseST;\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.systemtest.resources.KubernetesResource;\n+import io.strimzi.systemtest.resources.ResourceManager;\n+import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n+import io.strimzi.systemtest.utils.specific.CruiseControlUtils;\n+import io.strimzi.test.WaitException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.strimzi.systemtest.Constants.CRUISE_CONTROL;\n+import static io.strimzi.systemtest.Constants.REGRESSION;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+@Tag(REGRESSION)\n+@Tag(CRUISE_CONTROL)\n+public class CruiseControlIsolatedST extends BaseST {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(CruiseControlIsolatedST.class);\n+    private static final String NAMESPACE = \"cruise-control-isolated-test\";\n+\n+    private static final String CRUISE_CONTROL_METRICS_TOPIC = \"strimzi.cruisecontrol.metrics\"; // partitions 1 , rf - 1\n+    private static final String CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC = \"strimzi.cruisecontrol.modeltrainingsamples\"; // partitions 32 , rf - 2\n+    private static final String CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC = \"strimzi.cruisecontrol.partitionmetricsamples\"; // partitions 32 , rf - 2\n+\n+\n+    @Test\n+    void testManuallyCreateMetricsReporterTopic() {\n+        KafkaResource.kafkaWithCruiseControlWithoutWaitAutoCreateTopicsDisable(CLUSTER_NAME, 3, 3);\n+\n+        PodUtils.verifyThatRunningPodsAreStable(KafkaResources.zookeeperStatefulSetName(CLUSTER_NAME));\n+        PodUtils.verifyThatRunningPodsAreStable(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+        PodUtils.verifyThatRunningPodsAreStable(KafkaResources.entityOperatorDeploymentName(CLUSTER_NAME));\n+\n+        PodUtils.waitUntilPodIsPresent(CruiseControlResources.deploymentName(CLUSTER_NAME));\n+        PodUtils.waitUntilPodIsInCrashLoopBackOff(kubeClient().listPodsByPrefixInName(CruiseControlResources.deploymentName(CLUSTER_NAME)).get(0).getMetadata().getName());\n+\n+        LOGGER.info(\"Verifying that samples topics are not present because of \" +\n+            \"'Cruise Control cannot find partitions for the metrics reporter that topic matches strimzi.cruisecontrol.metrics in the target cluster'\");\n+\n+        assertThrows(WaitException.class, () -> CruiseControlUtils.verifyThatCruiseControlSamplesTopicsArePresent(Constants.GLOBAL_CRUISE_CONTROL_EXCEPT_FAIL_TIMEOUT));\n+\n+        LOGGER.info(\"Verifying that metrics reporter topic is not present because of selected config 'auto.create.topics.enable=false'\");\n+\n+        assertThrows(WaitException.class, () -> CruiseControlUtils.verifyThatKafkaCruiseControlMetricReporterTopicIsPresent(Constants.GLOBAL_CRUISE_CONTROL_EXCEPT_FAIL_TIMEOUT));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU3NTc2Nw=="}, "originalCommit": {"oid": "1cc746b71222f7f8e39ec8a89038cab153b20ab8"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NTU4Ng==", "bodyText": "Oh wait", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3102#discussion_r434585586", "createdAt": "2020-06-03T13:55:13Z", "author": {"login": "kyguy"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlIsolatedST.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.cruisecontrol;\n+\n+import io.strimzi.api.kafka.model.CruiseControlResources;\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.systemtest.BaseST;\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.systemtest.resources.KubernetesResource;\n+import io.strimzi.systemtest.resources.ResourceManager;\n+import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n+import io.strimzi.systemtest.utils.specific.CruiseControlUtils;\n+import io.strimzi.test.WaitException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.strimzi.systemtest.Constants.CRUISE_CONTROL;\n+import static io.strimzi.systemtest.Constants.REGRESSION;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+@Tag(REGRESSION)\n+@Tag(CRUISE_CONTROL)\n+public class CruiseControlIsolatedST extends BaseST {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(CruiseControlIsolatedST.class);\n+    private static final String NAMESPACE = \"cruise-control-isolated-test\";\n+\n+    private static final String CRUISE_CONTROL_METRICS_TOPIC = \"strimzi.cruisecontrol.metrics\"; // partitions 1 , rf - 1\n+    private static final String CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC = \"strimzi.cruisecontrol.modeltrainingsamples\"; // partitions 32 , rf - 2\n+    private static final String CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC = \"strimzi.cruisecontrol.partitionmetricsamples\"; // partitions 32 , rf - 2\n+\n+\n+    @Test\n+    void testManuallyCreateMetricsReporterTopic() {\n+        KafkaResource.kafkaWithCruiseControlWithoutWaitAutoCreateTopicsDisable(CLUSTER_NAME, 3, 3);\n+\n+        PodUtils.verifyThatRunningPodsAreStable(KafkaResources.zookeeperStatefulSetName(CLUSTER_NAME));\n+        PodUtils.verifyThatRunningPodsAreStable(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+        PodUtils.verifyThatRunningPodsAreStable(KafkaResources.entityOperatorDeploymentName(CLUSTER_NAME));\n+\n+        PodUtils.waitUntilPodIsPresent(CruiseControlResources.deploymentName(CLUSTER_NAME));\n+        PodUtils.waitUntilPodIsInCrashLoopBackOff(kubeClient().listPodsByPrefixInName(CruiseControlResources.deploymentName(CLUSTER_NAME)).get(0).getMetadata().getName());\n+\n+        LOGGER.info(\"Verifying that samples topics are not present because of \" +\n+            \"'Cruise Control cannot find partitions for the metrics reporter that topic matches strimzi.cruisecontrol.metrics in the target cluster'\");\n+\n+        assertThrows(WaitException.class, () -> CruiseControlUtils.verifyThatCruiseControlSamplesTopicsArePresent(Constants.GLOBAL_CRUISE_CONTROL_EXCEPT_FAIL_TIMEOUT));\n+\n+        LOGGER.info(\"Verifying that metrics reporter topic is not present because of selected config 'auto.create.topics.enable=false'\");\n+\n+        assertThrows(WaitException.class, () -> CruiseControlUtils.verifyThatKafkaCruiseControlMetricReporterTopicIsPresent(Constants.GLOBAL_CRUISE_CONTROL_EXCEPT_FAIL_TIMEOUT));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU3NTc2Nw=="}, "originalCommit": {"oid": "1cc746b71222f7f8e39ec8a89038cab153b20ab8"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4ODk4OA==", "bodyText": "I understand what you are doing here now, I still think we should move those lines around, and verify that assertThrows(WaitException.class, () -> CruiseControlUtils.verifyThatKafkaCruiseControlMetricReporterTopicIsPresent(Constants.GLOBAL_CRUISE_CONTROL_EXCEPT_FAIL_TIMEOUT)); first! WDYT?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3102#discussion_r434588988", "createdAt": "2020-06-03T13:59:47Z", "author": {"login": "kyguy"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlIsolatedST.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.cruisecontrol;\n+\n+import io.strimzi.api.kafka.model.CruiseControlResources;\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.systemtest.BaseST;\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.systemtest.resources.KubernetesResource;\n+import io.strimzi.systemtest.resources.ResourceManager;\n+import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n+import io.strimzi.systemtest.utils.specific.CruiseControlUtils;\n+import io.strimzi.test.WaitException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.strimzi.systemtest.Constants.CRUISE_CONTROL;\n+import static io.strimzi.systemtest.Constants.REGRESSION;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+@Tag(REGRESSION)\n+@Tag(CRUISE_CONTROL)\n+public class CruiseControlIsolatedST extends BaseST {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(CruiseControlIsolatedST.class);\n+    private static final String NAMESPACE = \"cruise-control-isolated-test\";\n+\n+    private static final String CRUISE_CONTROL_METRICS_TOPIC = \"strimzi.cruisecontrol.metrics\"; // partitions 1 , rf - 1\n+    private static final String CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC = \"strimzi.cruisecontrol.modeltrainingsamples\"; // partitions 32 , rf - 2\n+    private static final String CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC = \"strimzi.cruisecontrol.partitionmetricsamples\"; // partitions 32 , rf - 2\n+\n+\n+    @Test\n+    void testManuallyCreateMetricsReporterTopic() {\n+        KafkaResource.kafkaWithCruiseControlWithoutWaitAutoCreateTopicsDisable(CLUSTER_NAME, 3, 3);\n+\n+        PodUtils.verifyThatRunningPodsAreStable(KafkaResources.zookeeperStatefulSetName(CLUSTER_NAME));\n+        PodUtils.verifyThatRunningPodsAreStable(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+        PodUtils.verifyThatRunningPodsAreStable(KafkaResources.entityOperatorDeploymentName(CLUSTER_NAME));\n+\n+        PodUtils.waitUntilPodIsPresent(CruiseControlResources.deploymentName(CLUSTER_NAME));\n+        PodUtils.waitUntilPodIsInCrashLoopBackOff(kubeClient().listPodsByPrefixInName(CruiseControlResources.deploymentName(CLUSTER_NAME)).get(0).getMetadata().getName());\n+\n+        LOGGER.info(\"Verifying that samples topics are not present because of \" +\n+            \"'Cruise Control cannot find partitions for the metrics reporter that topic matches strimzi.cruisecontrol.metrics in the target cluster'\");\n+\n+        assertThrows(WaitException.class, () -> CruiseControlUtils.verifyThatCruiseControlSamplesTopicsArePresent(Constants.GLOBAL_CRUISE_CONTROL_EXCEPT_FAIL_TIMEOUT));\n+\n+        LOGGER.info(\"Verifying that metrics reporter topic is not present because of selected config 'auto.create.topics.enable=false'\");\n+\n+        assertThrows(WaitException.class, () -> CruiseControlUtils.verifyThatKafkaCruiseControlMetricReporterTopicIsPresent(Constants.GLOBAL_CRUISE_CONTROL_EXCEPT_FAIL_TIMEOUT));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU3NTc2Nw=="}, "originalCommit": {"oid": "1cc746b71222f7f8e39ec8a89038cab153b20ab8"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwODM5MA==", "bodyText": "I would agree with @kyguy . Let's verify that the metrics topic doesn't exist first and then that CC is crash looping and the other topics don't exist as well.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3102#discussion_r434608390", "createdAt": "2020-06-03T14:25:20Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlIsolatedST.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.cruisecontrol;\n+\n+import io.strimzi.api.kafka.model.CruiseControlResources;\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.systemtest.BaseST;\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.systemtest.resources.KubernetesResource;\n+import io.strimzi.systemtest.resources.ResourceManager;\n+import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n+import io.strimzi.systemtest.utils.specific.CruiseControlUtils;\n+import io.strimzi.test.WaitException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.strimzi.systemtest.Constants.CRUISE_CONTROL;\n+import static io.strimzi.systemtest.Constants.REGRESSION;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+@Tag(REGRESSION)\n+@Tag(CRUISE_CONTROL)\n+public class CruiseControlIsolatedST extends BaseST {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(CruiseControlIsolatedST.class);\n+    private static final String NAMESPACE = \"cruise-control-isolated-test\";\n+\n+    private static final String CRUISE_CONTROL_METRICS_TOPIC = \"strimzi.cruisecontrol.metrics\"; // partitions 1 , rf - 1\n+    private static final String CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC = \"strimzi.cruisecontrol.modeltrainingsamples\"; // partitions 32 , rf - 2\n+    private static final String CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC = \"strimzi.cruisecontrol.partitionmetricsamples\"; // partitions 32 , rf - 2\n+\n+\n+    @Test\n+    void testManuallyCreateMetricsReporterTopic() {\n+        KafkaResource.kafkaWithCruiseControlWithoutWaitAutoCreateTopicsDisable(CLUSTER_NAME, 3, 3);\n+\n+        PodUtils.verifyThatRunningPodsAreStable(KafkaResources.zookeeperStatefulSetName(CLUSTER_NAME));\n+        PodUtils.verifyThatRunningPodsAreStable(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+        PodUtils.verifyThatRunningPodsAreStable(KafkaResources.entityOperatorDeploymentName(CLUSTER_NAME));\n+\n+        PodUtils.waitUntilPodIsPresent(CruiseControlResources.deploymentName(CLUSTER_NAME));\n+        PodUtils.waitUntilPodIsInCrashLoopBackOff(kubeClient().listPodsByPrefixInName(CruiseControlResources.deploymentName(CLUSTER_NAME)).get(0).getMetadata().getName());\n+\n+        LOGGER.info(\"Verifying that samples topics are not present because of \" +\n+            \"'Cruise Control cannot find partitions for the metrics reporter that topic matches strimzi.cruisecontrol.metrics in the target cluster'\");\n+\n+        assertThrows(WaitException.class, () -> CruiseControlUtils.verifyThatCruiseControlSamplesTopicsArePresent(Constants.GLOBAL_CRUISE_CONTROL_EXCEPT_FAIL_TIMEOUT));\n+\n+        LOGGER.info(\"Verifying that metrics reporter topic is not present because of selected config 'auto.create.topics.enable=false'\");\n+\n+        assertThrows(WaitException.class, () -> CruiseControlUtils.verifyThatKafkaCruiseControlMetricReporterTopicIsPresent(Constants.GLOBAL_CRUISE_CONTROL_EXCEPT_FAIL_TIMEOUT));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU3NTc2Nw=="}, "originalCommit": {"oid": "1cc746b71222f7f8e39ec8a89038cab153b20ab8"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYyMTUxMA==", "bodyText": "Done guys @kyguy @ppatierno", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3102#discussion_r434621510", "createdAt": "2020-06-03T14:42:50Z", "author": {"login": "see-quick"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlIsolatedST.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.cruisecontrol;\n+\n+import io.strimzi.api.kafka.model.CruiseControlResources;\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.systemtest.BaseST;\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.systemtest.resources.KubernetesResource;\n+import io.strimzi.systemtest.resources.ResourceManager;\n+import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n+import io.strimzi.systemtest.utils.specific.CruiseControlUtils;\n+import io.strimzi.test.WaitException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.strimzi.systemtest.Constants.CRUISE_CONTROL;\n+import static io.strimzi.systemtest.Constants.REGRESSION;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+@Tag(REGRESSION)\n+@Tag(CRUISE_CONTROL)\n+public class CruiseControlIsolatedST extends BaseST {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(CruiseControlIsolatedST.class);\n+    private static final String NAMESPACE = \"cruise-control-isolated-test\";\n+\n+    private static final String CRUISE_CONTROL_METRICS_TOPIC = \"strimzi.cruisecontrol.metrics\"; // partitions 1 , rf - 1\n+    private static final String CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC = \"strimzi.cruisecontrol.modeltrainingsamples\"; // partitions 32 , rf - 2\n+    private static final String CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC = \"strimzi.cruisecontrol.partitionmetricsamples\"; // partitions 32 , rf - 2\n+\n+\n+    @Test\n+    void testManuallyCreateMetricsReporterTopic() {\n+        KafkaResource.kafkaWithCruiseControlWithoutWaitAutoCreateTopicsDisable(CLUSTER_NAME, 3, 3);\n+\n+        PodUtils.verifyThatRunningPodsAreStable(KafkaResources.zookeeperStatefulSetName(CLUSTER_NAME));\n+        PodUtils.verifyThatRunningPodsAreStable(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+        PodUtils.verifyThatRunningPodsAreStable(KafkaResources.entityOperatorDeploymentName(CLUSTER_NAME));\n+\n+        PodUtils.waitUntilPodIsPresent(CruiseControlResources.deploymentName(CLUSTER_NAME));\n+        PodUtils.waitUntilPodIsInCrashLoopBackOff(kubeClient().listPodsByPrefixInName(CruiseControlResources.deploymentName(CLUSTER_NAME)).get(0).getMetadata().getName());\n+\n+        LOGGER.info(\"Verifying that samples topics are not present because of \" +\n+            \"'Cruise Control cannot find partitions for the metrics reporter that topic matches strimzi.cruisecontrol.metrics in the target cluster'\");\n+\n+        assertThrows(WaitException.class, () -> CruiseControlUtils.verifyThatCruiseControlSamplesTopicsArePresent(Constants.GLOBAL_CRUISE_CONTROL_EXCEPT_FAIL_TIMEOUT));\n+\n+        LOGGER.info(\"Verifying that metrics reporter topic is not present because of selected config 'auto.create.topics.enable=false'\");\n+\n+        assertThrows(WaitException.class, () -> CruiseControlUtils.verifyThatKafkaCruiseControlMetricReporterTopicIsPresent(Constants.GLOBAL_CRUISE_CONTROL_EXCEPT_FAIL_TIMEOUT));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU3NTc2Nw=="}, "originalCommit": {"oid": "1cc746b71222f7f8e39ec8a89038cab153b20ab8"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1576, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}