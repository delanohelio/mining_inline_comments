{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwODA1OTQ4", "number": 2805, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjoxNjoxMlrODv9y1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjoyMDozNVrODv946w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjIyMTAwOnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/RollingUpdateST.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjoxNjoxMlrOGCsdrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjoyOTo0MFrOGCs7sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ3ODgzMA==", "bodyText": "I think the original test checked that no rolling update happened. But the new test seems to be missing it. Could you add it?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2805#discussion_r405478830", "createdAt": "2020-04-08T12:16:12Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/RollingUpdateST.java", "diffHunk": "@@ -912,6 +881,101 @@ void testClusterCaRemovedTriggersRollingUpdate() {\n         assertThat(sentAfter, is(MESSAGE_COUNT));\n     }\n \n+    @Test\n+    void testMetricsChange() throws InterruptedException, ExecutionException, IOException {\n+        //Kafka\n+        Map<String, Object> kafkaRule = new HashMap<>();\n+        kafkaRule.put(\"pattern\", \"kafka.(\\\\w+)<type=(.+), name=(.+)><>Count\");\n+        kafkaRule.put(\"name\", \"kafka_$1_$2_$3_count\");\n+        kafkaRule.put(\"type\", \"COUNTER\");\n+\n+        Map<String, Object> kafkaMetrics = new HashMap<>();\n+        kafkaMetrics.put(\"lowercaseOutputName\", true);\n+        kafkaMetrics.put(\"rules\", Collections.singletonList(kafkaRule));\n+\n+        //Zookeeper\n+        Map<String, Object> zookeeperLabels = new HashMap<>();\n+        zookeeperLabels.put(\"replicaId\", \"$2\");\n+\n+        Map<String, Object> zookeeperRule = new HashMap<>();\n+        zookeeperRule.put(\"labels\", zookeeperLabels);\n+        zookeeperRule.put(\"name\", \"zookeeper_$3\");\n+        zookeeperRule.put(\"pattern\", \"org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\\\d+), name1=replica.(\\\\d+)><>(\\\\w+)\");\n+\n+        Map<String, Object> zookeeperMetrics = new HashMap<>();\n+        zookeeperMetrics.put(\"lowercaseOutputName\", true);\n+        zookeeperMetrics.put(\"rules\", Collections.singletonList(zookeeperRule));\n+\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 3)\n+                .editSpec()\n+                    .editKafka()\n+                        .withMetrics(kafkaMetrics)\n+                    .endKafka()\n+                    .editOrNewZookeeper()\n+                        .withMetrics(zookeeperMetrics)\n+                    .endZookeeper()\n+                    .withNewKafkaExporter()\n+                    .endKafkaExporter()\n+                .endSpec()\n+                .done();\n+\n+        LOGGER.info(\"Check if metrics are present in pod of Kafka and Zookeeper\");\n+        String kafkaMetricsOutput = MetricsUtils.collectMetrics(KafkaResources.kafkaPodName(CLUSTER_NAME, 0), \"\");\n+        String zkMetricsOutput = MetricsUtils.collectMetrics(CLUSTER_NAME + \"-zookeeper-0\", \"\");\n+        assertThat(kafkaMetricsOutput, containsString(\"kafka_\"));\n+        assertThat(zkMetricsOutput, containsString(\"replicaId\"));\n+\n+        LOGGER.info(\"Changing metrics to something else\");\n+        kafkaRule.replace(\"pattern\", \"kafka.(\\\\w+)<type=(.+), name=(.+)><>Count\",\n+                \"kafka.(\\\\w+)<type=(.+), name=(.+)Percent\\\\w*><>MeanRate\");\n+        kafkaRule.replace(\"name\", \"kafka_$1_$2_$3_count\", \"kafka_$1_$2_$3_percent\");\n+        kafkaRule.replace(\"type\", \"COUNTER\", \"GAUGE\");\n+\n+        zookeeperRule.replace(\"pattern\",\n+                \"org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\\\d+), name1=replica.(\\\\d+)><>(\\\\w+)\",\n+                \"org.apache.ZooKeeperService<name0=StandaloneServer_port(\\\\d+)><>(\\\\w+)\");\n+        zookeeperRule.replace(\"name\", \"zookeeper_$3\", \"zookeeper_$2\");\n+        zookeeperRule.replace(\"labels\", zookeeperLabels, null);\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+            kafka.getSpec().getKafka().setMetrics(kafkaMetrics);\n+            kafka.getSpec().getZookeeper().setMetrics(zookeeperMetrics);\n+        });\n+\n+        LOGGER.info(\"Check if Kafka and Zookeeper metrics are changed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3092d11f3cbcff81e2aa363c43fc5755efa5817"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ4NjUxNQ==", "bodyText": "Yes I missed it, thanks", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2805#discussion_r405486515", "createdAt": "2020-04-08T12:29:40Z", "author": {"login": "im-konge"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/RollingUpdateST.java", "diffHunk": "@@ -912,6 +881,101 @@ void testClusterCaRemovedTriggersRollingUpdate() {\n         assertThat(sentAfter, is(MESSAGE_COUNT));\n     }\n \n+    @Test\n+    void testMetricsChange() throws InterruptedException, ExecutionException, IOException {\n+        //Kafka\n+        Map<String, Object> kafkaRule = new HashMap<>();\n+        kafkaRule.put(\"pattern\", \"kafka.(\\\\w+)<type=(.+), name=(.+)><>Count\");\n+        kafkaRule.put(\"name\", \"kafka_$1_$2_$3_count\");\n+        kafkaRule.put(\"type\", \"COUNTER\");\n+\n+        Map<String, Object> kafkaMetrics = new HashMap<>();\n+        kafkaMetrics.put(\"lowercaseOutputName\", true);\n+        kafkaMetrics.put(\"rules\", Collections.singletonList(kafkaRule));\n+\n+        //Zookeeper\n+        Map<String, Object> zookeeperLabels = new HashMap<>();\n+        zookeeperLabels.put(\"replicaId\", \"$2\");\n+\n+        Map<String, Object> zookeeperRule = new HashMap<>();\n+        zookeeperRule.put(\"labels\", zookeeperLabels);\n+        zookeeperRule.put(\"name\", \"zookeeper_$3\");\n+        zookeeperRule.put(\"pattern\", \"org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\\\d+), name1=replica.(\\\\d+)><>(\\\\w+)\");\n+\n+        Map<String, Object> zookeeperMetrics = new HashMap<>();\n+        zookeeperMetrics.put(\"lowercaseOutputName\", true);\n+        zookeeperMetrics.put(\"rules\", Collections.singletonList(zookeeperRule));\n+\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 3)\n+                .editSpec()\n+                    .editKafka()\n+                        .withMetrics(kafkaMetrics)\n+                    .endKafka()\n+                    .editOrNewZookeeper()\n+                        .withMetrics(zookeeperMetrics)\n+                    .endZookeeper()\n+                    .withNewKafkaExporter()\n+                    .endKafkaExporter()\n+                .endSpec()\n+                .done();\n+\n+        LOGGER.info(\"Check if metrics are present in pod of Kafka and Zookeeper\");\n+        String kafkaMetricsOutput = MetricsUtils.collectMetrics(KafkaResources.kafkaPodName(CLUSTER_NAME, 0), \"\");\n+        String zkMetricsOutput = MetricsUtils.collectMetrics(CLUSTER_NAME + \"-zookeeper-0\", \"\");\n+        assertThat(kafkaMetricsOutput, containsString(\"kafka_\"));\n+        assertThat(zkMetricsOutput, containsString(\"replicaId\"));\n+\n+        LOGGER.info(\"Changing metrics to something else\");\n+        kafkaRule.replace(\"pattern\", \"kafka.(\\\\w+)<type=(.+), name=(.+)><>Count\",\n+                \"kafka.(\\\\w+)<type=(.+), name=(.+)Percent\\\\w*><>MeanRate\");\n+        kafkaRule.replace(\"name\", \"kafka_$1_$2_$3_count\", \"kafka_$1_$2_$3_percent\");\n+        kafkaRule.replace(\"type\", \"COUNTER\", \"GAUGE\");\n+\n+        zookeeperRule.replace(\"pattern\",\n+                \"org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\\\d+), name1=replica.(\\\\d+)><>(\\\\w+)\",\n+                \"org.apache.ZooKeeperService<name0=StandaloneServer_port(\\\\d+)><>(\\\\w+)\");\n+        zookeeperRule.replace(\"name\", \"zookeeper_$3\", \"zookeeper_$2\");\n+        zookeeperRule.replace(\"labels\", zookeeperLabels, null);\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+            kafka.getSpec().getKafka().setMetrics(kafkaMetrics);\n+            kafka.getSpec().getZookeeper().setMetrics(zookeeperMetrics);\n+        });\n+\n+        LOGGER.info(\"Check if Kafka and Zookeeper metrics are changed\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ3ODgzMA=="}, "originalCommit": {"oid": "a3092d11f3cbcff81e2aa363c43fc5755efa5817"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjIzNDA4OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/RollingUpdateST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjoxOTo1NlrOGCsmIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjoxOTo1NlrOGCsmIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ4MDk5Mg==", "bodyText": "I think you can use collectKafkaPodsMetrics, same for zookeeper. Or is there any reason why you didn't use it?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2805#discussion_r405480992", "createdAt": "2020-04-08T12:19:56Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/RollingUpdateST.java", "diffHunk": "@@ -912,6 +881,101 @@ void testClusterCaRemovedTriggersRollingUpdate() {\n         assertThat(sentAfter, is(MESSAGE_COUNT));\n     }\n \n+    @Test\n+    void testMetricsChange() throws InterruptedException, ExecutionException, IOException {\n+        //Kafka\n+        Map<String, Object> kafkaRule = new HashMap<>();\n+        kafkaRule.put(\"pattern\", \"kafka.(\\\\w+)<type=(.+), name=(.+)><>Count\");\n+        kafkaRule.put(\"name\", \"kafka_$1_$2_$3_count\");\n+        kafkaRule.put(\"type\", \"COUNTER\");\n+\n+        Map<String, Object> kafkaMetrics = new HashMap<>();\n+        kafkaMetrics.put(\"lowercaseOutputName\", true);\n+        kafkaMetrics.put(\"rules\", Collections.singletonList(kafkaRule));\n+\n+        //Zookeeper\n+        Map<String, Object> zookeeperLabels = new HashMap<>();\n+        zookeeperLabels.put(\"replicaId\", \"$2\");\n+\n+        Map<String, Object> zookeeperRule = new HashMap<>();\n+        zookeeperRule.put(\"labels\", zookeeperLabels);\n+        zookeeperRule.put(\"name\", \"zookeeper_$3\");\n+        zookeeperRule.put(\"pattern\", \"org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\\\d+), name1=replica.(\\\\d+)><>(\\\\w+)\");\n+\n+        Map<String, Object> zookeeperMetrics = new HashMap<>();\n+        zookeeperMetrics.put(\"lowercaseOutputName\", true);\n+        zookeeperMetrics.put(\"rules\", Collections.singletonList(zookeeperRule));\n+\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 3)\n+                .editSpec()\n+                    .editKafka()\n+                        .withMetrics(kafkaMetrics)\n+                    .endKafka()\n+                    .editOrNewZookeeper()\n+                        .withMetrics(zookeeperMetrics)\n+                    .endZookeeper()\n+                    .withNewKafkaExporter()\n+                    .endKafkaExporter()\n+                .endSpec()\n+                .done();\n+\n+        LOGGER.info(\"Check if metrics are present in pod of Kafka and Zookeeper\");\n+        String kafkaMetricsOutput = MetricsUtils.collectMetrics(KafkaResources.kafkaPodName(CLUSTER_NAME, 0), \"\");\n+        String zkMetricsOutput = MetricsUtils.collectMetrics(CLUSTER_NAME + \"-zookeeper-0\", \"\");\n+        assertThat(kafkaMetricsOutput, containsString(\"kafka_\"));\n+        assertThat(zkMetricsOutput, containsString(\"replicaId\"));\n+\n+        LOGGER.info(\"Changing metrics to something else\");\n+        kafkaRule.replace(\"pattern\", \"kafka.(\\\\w+)<type=(.+), name=(.+)><>Count\",\n+                \"kafka.(\\\\w+)<type=(.+), name=(.+)Percent\\\\w*><>MeanRate\");\n+        kafkaRule.replace(\"name\", \"kafka_$1_$2_$3_count\", \"kafka_$1_$2_$3_percent\");\n+        kafkaRule.replace(\"type\", \"COUNTER\", \"GAUGE\");\n+\n+        zookeeperRule.replace(\"pattern\",\n+                \"org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\\\d+), name1=replica.(\\\\d+)><>(\\\\w+)\",\n+                \"org.apache.ZooKeeperService<name0=StandaloneServer_port(\\\\d+)><>(\\\\w+)\");\n+        zookeeperRule.replace(\"name\", \"zookeeper_$3\", \"zookeeper_$2\");\n+        zookeeperRule.replace(\"labels\", zookeeperLabels, null);\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+            kafka.getSpec().getKafka().setMetrics(kafkaMetrics);\n+            kafka.getSpec().getZookeeper().setMetrics(zookeeperMetrics);\n+        });\n+\n+        LOGGER.info(\"Check if Kafka and Zookeeper metrics are changed\");\n+        assertThat(KafkaResource.kafkaClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getSpec().getKafka().getMetrics(), is(kafkaMetrics));\n+        assertThat(KafkaResource.kafkaClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getSpec().getZookeeper().getMetrics(), is(zookeeperMetrics));\n+\n+        LOGGER.info(\"Check if metrics are present in pod of Kafka and Zookeeper\");\n+\n+        kafkaMetricsOutput = MetricsUtils.collectMetrics(KafkaResources.kafkaPodName(CLUSTER_NAME, 0), \"\");\n+        zkMetricsOutput = MetricsUtils.collectMetrics(CLUSTER_NAME + \"-zookeeper-0\", \"\");\n+\n+        assertThat(kafkaMetricsOutput, containsString(\"kafka_\"));\n+        assertThat(zkMetricsOutput, containsString(\"replicaId\"));\n+\n+        Map<String, String> kafkaPods = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+        Map<String, String> zkPods = StatefulSetUtils.ssSnapshot(KafkaResources.zookeeperStatefulSetName(CLUSTER_NAME));\n+\n+        LOGGER.info(\"Changing metrics to null\");\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+            kafka.getSpec().getKafka().setMetrics(null);\n+            kafka.getSpec().getZookeeper().setMetrics(null);\n+        });\n+\n+        StatefulSetUtils.waitTillSsHasRolled(KafkaResources.zookeeperStatefulSetName(CLUSTER_NAME), 3, zkPods);\n+        StatefulSetUtils.waitTillSsHasRolled(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME), 3, kafkaPods);\n+\n+        LOGGER.info(\"Check if metrics is empty in pods\");\n+\n+        kafkaMetricsOutput = MetricsUtils.collectMetrics(KafkaResources.kafkaPodName(CLUSTER_NAME, 0), \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3092d11f3cbcff81e2aa363c43fc5755efa5817"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjIzNjU5OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/RollingUpdateST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjoyMDozNVrOGCsnrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjoyMDozNVrOGCsnrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ4MTM5MA==", "bodyText": "Maybe you can improve logging, this could pass more info to us", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2805#discussion_r405481390", "createdAt": "2020-04-08T12:20:35Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/RollingUpdateST.java", "diffHunk": "@@ -912,6 +881,101 @@ void testClusterCaRemovedTriggersRollingUpdate() {\n         assertThat(sentAfter, is(MESSAGE_COUNT));\n     }\n \n+    @Test\n+    void testMetricsChange() throws InterruptedException, ExecutionException, IOException {\n+        //Kafka\n+        Map<String, Object> kafkaRule = new HashMap<>();\n+        kafkaRule.put(\"pattern\", \"kafka.(\\\\w+)<type=(.+), name=(.+)><>Count\");\n+        kafkaRule.put(\"name\", \"kafka_$1_$2_$3_count\");\n+        kafkaRule.put(\"type\", \"COUNTER\");\n+\n+        Map<String, Object> kafkaMetrics = new HashMap<>();\n+        kafkaMetrics.put(\"lowercaseOutputName\", true);\n+        kafkaMetrics.put(\"rules\", Collections.singletonList(kafkaRule));\n+\n+        //Zookeeper\n+        Map<String, Object> zookeeperLabels = new HashMap<>();\n+        zookeeperLabels.put(\"replicaId\", \"$2\");\n+\n+        Map<String, Object> zookeeperRule = new HashMap<>();\n+        zookeeperRule.put(\"labels\", zookeeperLabels);\n+        zookeeperRule.put(\"name\", \"zookeeper_$3\");\n+        zookeeperRule.put(\"pattern\", \"org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\\\d+), name1=replica.(\\\\d+)><>(\\\\w+)\");\n+\n+        Map<String, Object> zookeeperMetrics = new HashMap<>();\n+        zookeeperMetrics.put(\"lowercaseOutputName\", true);\n+        zookeeperMetrics.put(\"rules\", Collections.singletonList(zookeeperRule));\n+\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 3)\n+                .editSpec()\n+                    .editKafka()\n+                        .withMetrics(kafkaMetrics)\n+                    .endKafka()\n+                    .editOrNewZookeeper()\n+                        .withMetrics(zookeeperMetrics)\n+                    .endZookeeper()\n+                    .withNewKafkaExporter()\n+                    .endKafkaExporter()\n+                .endSpec()\n+                .done();\n+\n+        LOGGER.info(\"Check if metrics are present in pod of Kafka and Zookeeper\");\n+        String kafkaMetricsOutput = MetricsUtils.collectMetrics(KafkaResources.kafkaPodName(CLUSTER_NAME, 0), \"\");\n+        String zkMetricsOutput = MetricsUtils.collectMetrics(CLUSTER_NAME + \"-zookeeper-0\", \"\");\n+        assertThat(kafkaMetricsOutput, containsString(\"kafka_\"));\n+        assertThat(zkMetricsOutput, containsString(\"replicaId\"));\n+\n+        LOGGER.info(\"Changing metrics to something else\");\n+        kafkaRule.replace(\"pattern\", \"kafka.(\\\\w+)<type=(.+), name=(.+)><>Count\",\n+                \"kafka.(\\\\w+)<type=(.+), name=(.+)Percent\\\\w*><>MeanRate\");\n+        kafkaRule.replace(\"name\", \"kafka_$1_$2_$3_count\", \"kafka_$1_$2_$3_percent\");\n+        kafkaRule.replace(\"type\", \"COUNTER\", \"GAUGE\");\n+\n+        zookeeperRule.replace(\"pattern\",\n+                \"org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\\\d+), name1=replica.(\\\\d+)><>(\\\\w+)\",\n+                \"org.apache.ZooKeeperService<name0=StandaloneServer_port(\\\\d+)><>(\\\\w+)\");\n+        zookeeperRule.replace(\"name\", \"zookeeper_$3\", \"zookeeper_$2\");\n+        zookeeperRule.replace(\"labels\", zookeeperLabels, null);\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+            kafka.getSpec().getKafka().setMetrics(kafkaMetrics);\n+            kafka.getSpec().getZookeeper().setMetrics(zookeeperMetrics);\n+        });\n+\n+        LOGGER.info(\"Check if Kafka and Zookeeper metrics are changed\");\n+        assertThat(KafkaResource.kafkaClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getSpec().getKafka().getMetrics(), is(kafkaMetrics));\n+        assertThat(KafkaResource.kafkaClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getSpec().getZookeeper().getMetrics(), is(zookeeperMetrics));\n+\n+        LOGGER.info(\"Check if metrics are present in pod of Kafka and Zookeeper\");\n+\n+        kafkaMetricsOutput = MetricsUtils.collectMetrics(KafkaResources.kafkaPodName(CLUSTER_NAME, 0), \"\");\n+        zkMetricsOutput = MetricsUtils.collectMetrics(CLUSTER_NAME + \"-zookeeper-0\", \"\");\n+\n+        assertThat(kafkaMetricsOutput, containsString(\"kafka_\"));\n+        assertThat(zkMetricsOutput, containsString(\"replicaId\"));\n+\n+        Map<String, String> kafkaPods = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+        Map<String, String> zkPods = StatefulSetUtils.ssSnapshot(KafkaResources.zookeeperStatefulSetName(CLUSTER_NAME));\n+\n+        LOGGER.info(\"Changing metrics to null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3092d11f3cbcff81e2aa363c43fc5755efa5817"}, "originalPosition": 150}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 132, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}