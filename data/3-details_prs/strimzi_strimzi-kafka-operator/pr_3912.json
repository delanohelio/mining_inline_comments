{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0NzI4MTc1", "number": 3912, "title": "[DOC] consumer configuration tuning", "bodyText": "Signed-off-by: prmellor pmellor@redhat.com\nDocumentation\nNew section in the Managing Strimzi section of the Using Guide that describes tuning options for consumers.\nChecklist\nPlease go through this checklist and make sure all applicable tasks have been done\n\n Write tests\n Make sure all tests pass\n Update documentation\n Check RBAC rights for Kubernetes / OpenShift roles\n Try your changes from Pod inside your Kubernetes and OpenShift cluster, not just locally\n Reference relevant issue(s) and close them after merging\n Update CHANGELOG.md\n Supply screenshots for visual changes, such as Grafana dashboards", "createdAt": "2020-11-03T13:19:41Z", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912", "merged": true, "mergeCommit": {"oid": "b83d72e508b00485e6c762a468bedd901e689d3f"}, "closed": true, "closedAt": "2020-11-10T18:11:55Z", "author": {"login": "PaulRMellor"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdY5BNwAH2gAyNTE0NzI4MTc1OjYyODFkY2MyMTEzMThmYmQ2YTg0M2MzZGYxZjMyM2UxZDk2ZWFmY2Q=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdbKsLrAH2gAyNTE0NzI4MTc1OmRhNDA5NDE4NzA0MGYyOGQxODQzYWFiZmRjYjY2MDBjODI5YTNlYzc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6281dcc211318fbd6a843c3df1f323e1d96eafcd", "author": {"user": {"login": "PaulRMellor", "name": null}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/6281dcc211318fbd6a843c3df1f323e1d96eafcd", "committedDate": "2020-11-03T13:17:20Z", "message": "[DOC] consumer configuration tuning\n\nSigned-off-by: prmellor <pmellor@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyODg2NTcw", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#pullrequestreview-522886570", "createdAt": "2020-11-03T21:27:22Z", "commit": {"oid": "6281dcc211318fbd6a843c3df1f323e1d96eafcd"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMToyNzoyM1rOHtBD3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMTozMDowM1rOHtBIqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk2NTM0Mw==", "bodyText": "Might be handy to mention what is the default.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#discussion_r516965343", "createdAt": "2020-11-03T21:27:23Z", "author": {"login": "scholzj"}, "path": "documentation/modules/managing/con-consumer-config-properties.adoc", "diffHunk": "@@ -0,0 +1,253 @@\n+// This module is included in the following files:\n+//\n+// assembly-client-config.adoc\n+\n+[id='con-consumer-config-properties-{context}']\n+= Kafka consumer configuration tuning\n+\n+Use a basic consumer configuration with optional properties that are tailored to specific use cases.\n+\n+When tuning your consumers your primary concern will be ensuring that they cope efficiently with the amount of data ingested.\n+As with the producer tuning, be prepared to make incremental changes until the consumers operate as expected.\n+\n+== Basic consumer configuration\n+\n+Connection and deserializer properties are required for every consumer.\n+Generally, it is good practice to add a client id for tracking.\n+\n+In a consumer configuration, irrespective of any subsequent configuration:\n+\n+* The consumer fetches from a given offset and consumes the messages in order, unless the offset is changed to skip or re-read messages.\n+* The broker does not know if the consumer processed the responses, even when committing offsets to Kafka because the offsets might be sent to a different broker in the cluster.\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+# ...\n+bootstrap.servers=localhost:9092 <1>\n+key.deserializer=org.apache.kafka.common.serialization.Deserializer  <2>\n+value.deserializer=org.apache.kafka.common.serialization.Deserializer  <3>\n+client.id=my-client <4>\n+group.id=my-group-id <5>\n+# ...\n+----\n+<1> (Required) Tells the consumer to connect to a Kafka cluster using a _host:port_ bootstrap server address for a Kafka broker.\n+The consumer uses the address to discover and connect to all brokers in the cluster.\n+Use a comma-separated list to specify two or three addresses in case a server is down, but it\u2019s not necessary to provide a list of all the brokers in the cluster.\n+If you are using a loadbalancer service to expose the Kafka cluster, you only need the address for the service as the availability is handled by the loadbalancer.\n+<2> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message keys.\n+<3> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message values.\n+<4> (Optional) The logical name for the client, which is used in logs and metrics to identify the source of a request. The id can also be used to throttle consumers based on processing time quotas.\n+<5> (Conditional) A group id is _required_ if the consumer belongs to a consumer group.\n+\n+Consumer groups are used to share a typically large data stream generated by multiple producers from a given topic.\n+Consumers are grouped using a `group.id`, allowing messages to be spread across the members.\n+\n+== Scaling data consumption using consumer groups\n+\n+Consumer groups share a typically large data stream generated by one or multiple producers from a given topic.\n+Consumers with the same `group.id` property are in the same group.\n+One of the consumers in the group is elected leader and decides how the partitions that the consumers are interested in should be assigned to the consumers.\n+Each partition can only be assigned to a single consumer.\n+\n+If you do not already have as many consumers as partitions,\n+you can scale data consumption by adding more consumer instances with the same `group.id`.\n+\n+Consumers within the same consumer group send offset commits and heartbeats to the same broker.\n+So the greater the number of consumers in the group, the higher the request load on the broker.\n+\n+----\n+# ...\n+group.id=my-group-id <1>\n+# ...\n+----\n+<1> Add a consumer to a consumer group using a group id.\n+\n+.Adjusting the ratio of consumers to partitions\n+\n+Adding more consumers to a group than there are partitions will not help throughput,\n+but it does mean that there are consumers on standby should one stop functioning.\n+\n+If you can meet throughput goals with fewer consumers, you save on resources.\n+\n+== Message ordering guarantees\n+\n+Kafka brokers receive fetch requests from consumers that ask the broker to send messages from a list of topics, partitions and offset positions.\n+\n+A consumer observes messages in a single partition in the same order that they were committed to the broker,\n+which means that Kafka *only* provides ordering guarantees for messages in a single partition.\n+Conversely, if a consumer is consuming messages from multiple partitions, the order of messages in different partitions as observed by the consumer does not necessarily reflect the order in which they were sent.\n+\n+If you want a strict ordering of messages from one topic, use one partition.\n+\n+== Optimizing throughput and latency\n+\n+Control the number of messages returned when your client application calls `KafkaConsumer.poll()`.\n+\n+Use the `fetch.max.wait.ms` and `fetch.min.bytes` properties to increase the minimum amount of data fetched by the consumer from the Kafka broker.\n+Time-based batching is configured using `fetch.max.wait.ms`, and size-based batching is configured using `fetch.min.bytes`.\n+\n+If CPU utilization in the consumer or broker is high, it might be because there are too many requests from the consumer.\n+You can adjust `fetch.max.wait.ms` and `fetch.min.bytes` properties higher so that there are fewer requests and messages are delivered in bigger batches.\n+By adjusting higher, throughput is improved with some cost to latency.\n+You can also adjust higher if the amount of data being produced is low.\n+\n+For example, if you set `fetch.max.wait.ms` to 500ms and `fetch.min.bytes` to 16384 bytes,\n+when Kafka receives a fetch request from the consumer it will respond when the first of either threshold is reached.\n+\n+Conversely, you can adjust the `fetch.max.wait.ms` and `fetch.min.bytes` properties lower to improve end-to-end latency.\n+\n+----\n+# ...\n+fetch.max.wait.ms=500 <1>\n+fetch.min.bytes=16384 <2>\n+# ...\n+----\n+<1> The maximum time in milliseconds the broker will wait before completing fetch requests.\n+The default is `500` milliseconds.\n+<2> If a minimum batch size in bytes is used, a request is sent when the minimum is reached, or messages have been queued for longer than `fetch.max.wait.ms` (whichever comes sooner).\n+Adding the delay allows batches to accumulate messages up to the batch size.\n+\n+.Lowering latency by increasing the fetch request size\n+\n+Use the `fetch.max.bytes` and `max.partition.fetch.bytes` properties to increase the maximum amount of data fetched by the consumer from the Kafka broker.\n+\n+The `fetch.max.bytes` property sets a maximum limit in bytes on the amount of data fetched from the broker at one time,\n+\n+The `max.partition.fetch.bytes` sets a maximum limit in bytes on how much data is returned for each partition,\n+which must always be larger than the number of bytes set in the broker or topic configuration for `max.message.bytes`.\n+\n+The maximum amount of memory a client can consume is approximately:\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+_NUMBER-OF-BROKERS_ * fetch.max.bytes and _NUMBER-OF-PARTITIONS_ * max.partition.fetch.bytes\n+----\n+\n+If memory usage can accommodate it, you can increase the values of these two properties.\n+By allowing more data in each request, latency is improved as there are fewer fetch requests.\n+\n+----\n+# ...\n+fetch.max.bytes=52428800 <1>\n+max.partition.fetch.bytes=1048576 <2>\n+# ...\n+----\n+<1> The maximum amount of data in bytes returned for a fetch request.\n+<2> The maximum amount of data in bytes returned for each partition.\n+\n+== Avoiding data loss or duplication when committing offsets\n+\n+The Kafka _auto-commit mechanism_ allows a consumer to commit the offsets of messages automatically.\n+If enabled, the consumer will commit offsets received from polling the broker at 5000ms intervals.\n+\n+The auto-commit mechanism is convenient, but it introduces a risk of data loss and duplication.\n+If a consumer has fetched and transformed a number of messages, but the system crashes with processed messages in the consumer buffer when performing an auto-commit, that data is lost.\n+If the system crashes after processing the messages, but before performing the auto-commit, the data is duplicated on another consumer instance after rebalancing.\n+\n+To minimize the likelihood of data loss or duplication, set `enable.auto.commit` to `false` and develop your client application to have more control over committing offsets.\n+Or use `auto.commit.interval.ms=1` to decrease the intervals between commits.\n+\n+By setting to `enable.auto.commit` to `false`, you can commit offsets after *all* processing has been performed and the message has been consumed.\n+For example, you can set up your application to call the Kafka `commitSync` and `commitAsync` commit APIs.\n+\n+The `commitSync` API commits the offsets in a message batch returned from polling.\n+You call the API when you are finished processing all the messages in the batch.\n+If you use the `commitSync` API, the application will not poll for new messages until the last offset in the batch is committed.\n+If this impacts throughput unduly, you can commit less frequently,\n+or you can use the `commitAsync` API.\n+The `commitAsync` API does not wait for the broker to respond to a commit request,\n+but risks creating more duplicates when rebalancing.\n+A common approach is to combine both commit APIs in an application, with the `commitSync` API used just before shutting the consumer down or rebalancing to make sure the final commit is successful.\n+\n+Also, consider using transactional ids and having idempotence enabled (`enable.idempotence=true`) on the producer side to guarantee exactly once delivery.\n+On the consumer side, you can then use the `isolation.level` property to control how transactional messages are read by the consumer.\n+\n+The `isolation.level` property has two valid values:\n+\n+* `read_committed`\n+* `read_uncommitted`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6281dcc211318fbd6a843c3df1f323e1d96eafcd"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk2NjA1MA==", "bodyText": "The title and the first sentence seem misleading. I expected this to talk about what to do when the commit call fails. But this is rather what to do when there are no previous offsets. Maybe you could make it a bit clearer?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#discussion_r516966050", "createdAt": "2020-11-03T21:29:02Z", "author": {"login": "scholzj"}, "path": "documentation/modules/managing/con-consumer-config-properties.adoc", "diffHunk": "@@ -0,0 +1,253 @@\n+// This module is included in the following files:\n+//\n+// assembly-client-config.adoc\n+\n+[id='con-consumer-config-properties-{context}']\n+= Kafka consumer configuration tuning\n+\n+Use a basic consumer configuration with optional properties that are tailored to specific use cases.\n+\n+When tuning your consumers your primary concern will be ensuring that they cope efficiently with the amount of data ingested.\n+As with the producer tuning, be prepared to make incremental changes until the consumers operate as expected.\n+\n+== Basic consumer configuration\n+\n+Connection and deserializer properties are required for every consumer.\n+Generally, it is good practice to add a client id for tracking.\n+\n+In a consumer configuration, irrespective of any subsequent configuration:\n+\n+* The consumer fetches from a given offset and consumes the messages in order, unless the offset is changed to skip or re-read messages.\n+* The broker does not know if the consumer processed the responses, even when committing offsets to Kafka because the offsets might be sent to a different broker in the cluster.\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+# ...\n+bootstrap.servers=localhost:9092 <1>\n+key.deserializer=org.apache.kafka.common.serialization.Deserializer  <2>\n+value.deserializer=org.apache.kafka.common.serialization.Deserializer  <3>\n+client.id=my-client <4>\n+group.id=my-group-id <5>\n+# ...\n+----\n+<1> (Required) Tells the consumer to connect to a Kafka cluster using a _host:port_ bootstrap server address for a Kafka broker.\n+The consumer uses the address to discover and connect to all brokers in the cluster.\n+Use a comma-separated list to specify two or three addresses in case a server is down, but it\u2019s not necessary to provide a list of all the brokers in the cluster.\n+If you are using a loadbalancer service to expose the Kafka cluster, you only need the address for the service as the availability is handled by the loadbalancer.\n+<2> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message keys.\n+<3> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message values.\n+<4> (Optional) The logical name for the client, which is used in logs and metrics to identify the source of a request. The id can also be used to throttle consumers based on processing time quotas.\n+<5> (Conditional) A group id is _required_ if the consumer belongs to a consumer group.\n+\n+Consumer groups are used to share a typically large data stream generated by multiple producers from a given topic.\n+Consumers are grouped using a `group.id`, allowing messages to be spread across the members.\n+\n+== Scaling data consumption using consumer groups\n+\n+Consumer groups share a typically large data stream generated by one or multiple producers from a given topic.\n+Consumers with the same `group.id` property are in the same group.\n+One of the consumers in the group is elected leader and decides how the partitions that the consumers are interested in should be assigned to the consumers.\n+Each partition can only be assigned to a single consumer.\n+\n+If you do not already have as many consumers as partitions,\n+you can scale data consumption by adding more consumer instances with the same `group.id`.\n+\n+Consumers within the same consumer group send offset commits and heartbeats to the same broker.\n+So the greater the number of consumers in the group, the higher the request load on the broker.\n+\n+----\n+# ...\n+group.id=my-group-id <1>\n+# ...\n+----\n+<1> Add a consumer to a consumer group using a group id.\n+\n+.Adjusting the ratio of consumers to partitions\n+\n+Adding more consumers to a group than there are partitions will not help throughput,\n+but it does mean that there are consumers on standby should one stop functioning.\n+\n+If you can meet throughput goals with fewer consumers, you save on resources.\n+\n+== Message ordering guarantees\n+\n+Kafka brokers receive fetch requests from consumers that ask the broker to send messages from a list of topics, partitions and offset positions.\n+\n+A consumer observes messages in a single partition in the same order that they were committed to the broker,\n+which means that Kafka *only* provides ordering guarantees for messages in a single partition.\n+Conversely, if a consumer is consuming messages from multiple partitions, the order of messages in different partitions as observed by the consumer does not necessarily reflect the order in which they were sent.\n+\n+If you want a strict ordering of messages from one topic, use one partition.\n+\n+== Optimizing throughput and latency\n+\n+Control the number of messages returned when your client application calls `KafkaConsumer.poll()`.\n+\n+Use the `fetch.max.wait.ms` and `fetch.min.bytes` properties to increase the minimum amount of data fetched by the consumer from the Kafka broker.\n+Time-based batching is configured using `fetch.max.wait.ms`, and size-based batching is configured using `fetch.min.bytes`.\n+\n+If CPU utilization in the consumer or broker is high, it might be because there are too many requests from the consumer.\n+You can adjust `fetch.max.wait.ms` and `fetch.min.bytes` properties higher so that there are fewer requests and messages are delivered in bigger batches.\n+By adjusting higher, throughput is improved with some cost to latency.\n+You can also adjust higher if the amount of data being produced is low.\n+\n+For example, if you set `fetch.max.wait.ms` to 500ms and `fetch.min.bytes` to 16384 bytes,\n+when Kafka receives a fetch request from the consumer it will respond when the first of either threshold is reached.\n+\n+Conversely, you can adjust the `fetch.max.wait.ms` and `fetch.min.bytes` properties lower to improve end-to-end latency.\n+\n+----\n+# ...\n+fetch.max.wait.ms=500 <1>\n+fetch.min.bytes=16384 <2>\n+# ...\n+----\n+<1> The maximum time in milliseconds the broker will wait before completing fetch requests.\n+The default is `500` milliseconds.\n+<2> If a minimum batch size in bytes is used, a request is sent when the minimum is reached, or messages have been queued for longer than `fetch.max.wait.ms` (whichever comes sooner).\n+Adding the delay allows batches to accumulate messages up to the batch size.\n+\n+.Lowering latency by increasing the fetch request size\n+\n+Use the `fetch.max.bytes` and `max.partition.fetch.bytes` properties to increase the maximum amount of data fetched by the consumer from the Kafka broker.\n+\n+The `fetch.max.bytes` property sets a maximum limit in bytes on the amount of data fetched from the broker at one time,\n+\n+The `max.partition.fetch.bytes` sets a maximum limit in bytes on how much data is returned for each partition,\n+which must always be larger than the number of bytes set in the broker or topic configuration for `max.message.bytes`.\n+\n+The maximum amount of memory a client can consume is approximately:\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+_NUMBER-OF-BROKERS_ * fetch.max.bytes and _NUMBER-OF-PARTITIONS_ * max.partition.fetch.bytes\n+----\n+\n+If memory usage can accommodate it, you can increase the values of these two properties.\n+By allowing more data in each request, latency is improved as there are fewer fetch requests.\n+\n+----\n+# ...\n+fetch.max.bytes=52428800 <1>\n+max.partition.fetch.bytes=1048576 <2>\n+# ...\n+----\n+<1> The maximum amount of data in bytes returned for a fetch request.\n+<2> The maximum amount of data in bytes returned for each partition.\n+\n+== Avoiding data loss or duplication when committing offsets\n+\n+The Kafka _auto-commit mechanism_ allows a consumer to commit the offsets of messages automatically.\n+If enabled, the consumer will commit offsets received from polling the broker at 5000ms intervals.\n+\n+The auto-commit mechanism is convenient, but it introduces a risk of data loss and duplication.\n+If a consumer has fetched and transformed a number of messages, but the system crashes with processed messages in the consumer buffer when performing an auto-commit, that data is lost.\n+If the system crashes after processing the messages, but before performing the auto-commit, the data is duplicated on another consumer instance after rebalancing.\n+\n+To minimize the likelihood of data loss or duplication, set `enable.auto.commit` to `false` and develop your client application to have more control over committing offsets.\n+Or use `auto.commit.interval.ms=1` to decrease the intervals between commits.\n+\n+By setting to `enable.auto.commit` to `false`, you can commit offsets after *all* processing has been performed and the message has been consumed.\n+For example, you can set up your application to call the Kafka `commitSync` and `commitAsync` commit APIs.\n+\n+The `commitSync` API commits the offsets in a message batch returned from polling.\n+You call the API when you are finished processing all the messages in the batch.\n+If you use the `commitSync` API, the application will not poll for new messages until the last offset in the batch is committed.\n+If this impacts throughput unduly, you can commit less frequently,\n+or you can use the `commitAsync` API.\n+The `commitAsync` API does not wait for the broker to respond to a commit request,\n+but risks creating more duplicates when rebalancing.\n+A common approach is to combine both commit APIs in an application, with the `commitSync` API used just before shutting the consumer down or rebalancing to make sure the final commit is successful.\n+\n+Also, consider using transactional ids and having idempotence enabled (`enable.idempotence=true`) on the producer side to guarantee exactly once delivery.\n+On the consumer side, you can then use the `isolation.level` property to control how transactional messages are read by the consumer.\n+\n+The `isolation.level` property has two valid values:\n+\n+* `read_committed`\n+* `read_uncommitted`\n+\n+Use `read_committed` to ensure that only transactional messages that have been committed are read by the consumer.\n+However, this will cause an increase in end-to-end latency, because the consumer won\u2019t be able to return a message until the brokers have written the transaction markers that record the result of the transaction (_committed_ or _aborted_).\n+\n+----\n+# ...\n+enable.auto.commit=false <1>\n+isolation.level=read_committed <2>\n+# ...\n+----\n+<1> Auto commit is set to false to provide more control over committing offsets\n+<2> Set to `read_committed` so that only committed messages are read by the consumer.\n+\n+== Recovering from failure to avoid data loss\n+\n+Use the `session.timeout.ms` and `heatbeat.interval.ms` properties to configure the time taken to check and recover from consumer failure within a consumer group.\n+\n+The `session.timeout.ms` property specifies the maximum amount of time in milliseconds a consumer within a consumer group can be out of contact with a broker before being considered inactive and a _rebalancing_ is triggered between the active consumers in the group.\n+When the group rebalances, the partitions are reassigned to the members of the group.\n+\n+The `heatbeat.interval.ms` property specifies the interval in milliseconds between _heartbeat_ checks to the consumer group coordinator to indicate that the consumer is active and connected.\n+The heartbeat interval must be lower, usually by a third, than the session timeout interval.\n+\n+If you set the `session.timeout.ms` property lower, failing consumers are detected earlier, and rebalancing can take place quicker.\n+However, take care not to set the timeout so low that the broker fails to receive a heartbeat in time and triggers an unnecessary rebalance.\n+\n+Decreasing the heartbeat interval reduces the chance of accidental rebalancing, but more frequent heartbeats increases the overhead on broker resources.\n+\n+== Handling uncommitted offsets\n+\n+Use the `auto.offset.reset` property to control how the consumer behaves when offsets are not committed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6281dcc211318fbd6a843c3df1f323e1d96eafcd"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk2NjU2OA==", "bodyText": "Might be worth mentioning what happens when you have more consumers than partitions.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#discussion_r516966568", "createdAt": "2020-11-03T21:30:03Z", "author": {"login": "scholzj"}, "path": "documentation/modules/managing/con-consumer-config-properties.adoc", "diffHunk": "@@ -0,0 +1,253 @@\n+// This module is included in the following files:\n+//\n+// assembly-client-config.adoc\n+\n+[id='con-consumer-config-properties-{context}']\n+= Kafka consumer configuration tuning\n+\n+Use a basic consumer configuration with optional properties that are tailored to specific use cases.\n+\n+When tuning your consumers your primary concern will be ensuring that they cope efficiently with the amount of data ingested.\n+As with the producer tuning, be prepared to make incremental changes until the consumers operate as expected.\n+\n+== Basic consumer configuration\n+\n+Connection and deserializer properties are required for every consumer.\n+Generally, it is good practice to add a client id for tracking.\n+\n+In a consumer configuration, irrespective of any subsequent configuration:\n+\n+* The consumer fetches from a given offset and consumes the messages in order, unless the offset is changed to skip or re-read messages.\n+* The broker does not know if the consumer processed the responses, even when committing offsets to Kafka because the offsets might be sent to a different broker in the cluster.\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+# ...\n+bootstrap.servers=localhost:9092 <1>\n+key.deserializer=org.apache.kafka.common.serialization.Deserializer  <2>\n+value.deserializer=org.apache.kafka.common.serialization.Deserializer  <3>\n+client.id=my-client <4>\n+group.id=my-group-id <5>\n+# ...\n+----\n+<1> (Required) Tells the consumer to connect to a Kafka cluster using a _host:port_ bootstrap server address for a Kafka broker.\n+The consumer uses the address to discover and connect to all brokers in the cluster.\n+Use a comma-separated list to specify two or three addresses in case a server is down, but it\u2019s not necessary to provide a list of all the brokers in the cluster.\n+If you are using a loadbalancer service to expose the Kafka cluster, you only need the address for the service as the availability is handled by the loadbalancer.\n+<2> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message keys.\n+<3> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message values.\n+<4> (Optional) The logical name for the client, which is used in logs and metrics to identify the source of a request. The id can also be used to throttle consumers based on processing time quotas.\n+<5> (Conditional) A group id is _required_ if the consumer belongs to a consumer group.\n+\n+Consumer groups are used to share a typically large data stream generated by multiple producers from a given topic.\n+Consumers are grouped using a `group.id`, allowing messages to be spread across the members.\n+\n+== Scaling data consumption using consumer groups\n+\n+Consumer groups share a typically large data stream generated by one or multiple producers from a given topic.\n+Consumers with the same `group.id` property are in the same group.\n+One of the consumers in the group is elected leader and decides how the partitions that the consumers are interested in should be assigned to the consumers.\n+Each partition can only be assigned to a single consumer.\n+\n+If you do not already have as many consumers as partitions,\n+you can scale data consumption by adding more consumer instances with the same `group.id`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6281dcc211318fbd6a843c3df1f323e1d96eafcd"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMTE4NTI2", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#pullrequestreview-523118526", "createdAt": "2020-11-04T08:06:23Z", "commit": {"oid": "6281dcc211318fbd6a843c3df1f323e1d96eafcd"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODowNjoyM1rOHtM1xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODoyMTozNVrOHtNTqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE1ODM0MQ==", "bodyText": "why are we putting the Deserielizer interface instead of an actual implementation of it? i.e. StringDeserializer\njust as an example?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#discussion_r517158341", "createdAt": "2020-11-04T08:06:23Z", "author": {"login": "ppatierno"}, "path": "documentation/modules/managing/con-consumer-config-properties.adoc", "diffHunk": "@@ -0,0 +1,253 @@\n+// This module is included in the following files:\n+//\n+// assembly-client-config.adoc\n+\n+[id='con-consumer-config-properties-{context}']\n+= Kafka consumer configuration tuning\n+\n+Use a basic consumer configuration with optional properties that are tailored to specific use cases.\n+\n+When tuning your consumers your primary concern will be ensuring that they cope efficiently with the amount of data ingested.\n+As with the producer tuning, be prepared to make incremental changes until the consumers operate as expected.\n+\n+== Basic consumer configuration\n+\n+Connection and deserializer properties are required for every consumer.\n+Generally, it is good practice to add a client id for tracking.\n+\n+In a consumer configuration, irrespective of any subsequent configuration:\n+\n+* The consumer fetches from a given offset and consumes the messages in order, unless the offset is changed to skip or re-read messages.\n+* The broker does not know if the consumer processed the responses, even when committing offsets to Kafka because the offsets might be sent to a different broker in the cluster.\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+# ...\n+bootstrap.servers=localhost:9092 <1>\n+key.deserializer=org.apache.kafka.common.serialization.Deserializer  <2>\n+value.deserializer=org.apache.kafka.common.serialization.Deserializer  <3>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6281dcc211318fbd6a843c3df1f323e1d96eafcd"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2MTE3Mw==", "bodyText": "I see it mentioned in the following section Adjusting the ratio of consumers to partitions", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#discussion_r517161173", "createdAt": "2020-11-04T08:12:03Z", "author": {"login": "ppatierno"}, "path": "documentation/modules/managing/con-consumer-config-properties.adoc", "diffHunk": "@@ -0,0 +1,253 @@\n+// This module is included in the following files:\n+//\n+// assembly-client-config.adoc\n+\n+[id='con-consumer-config-properties-{context}']\n+= Kafka consumer configuration tuning\n+\n+Use a basic consumer configuration with optional properties that are tailored to specific use cases.\n+\n+When tuning your consumers your primary concern will be ensuring that they cope efficiently with the amount of data ingested.\n+As with the producer tuning, be prepared to make incremental changes until the consumers operate as expected.\n+\n+== Basic consumer configuration\n+\n+Connection and deserializer properties are required for every consumer.\n+Generally, it is good practice to add a client id for tracking.\n+\n+In a consumer configuration, irrespective of any subsequent configuration:\n+\n+* The consumer fetches from a given offset and consumes the messages in order, unless the offset is changed to skip or re-read messages.\n+* The broker does not know if the consumer processed the responses, even when committing offsets to Kafka because the offsets might be sent to a different broker in the cluster.\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+# ...\n+bootstrap.servers=localhost:9092 <1>\n+key.deserializer=org.apache.kafka.common.serialization.Deserializer  <2>\n+value.deserializer=org.apache.kafka.common.serialization.Deserializer  <3>\n+client.id=my-client <4>\n+group.id=my-group-id <5>\n+# ...\n+----\n+<1> (Required) Tells the consumer to connect to a Kafka cluster using a _host:port_ bootstrap server address for a Kafka broker.\n+The consumer uses the address to discover and connect to all brokers in the cluster.\n+Use a comma-separated list to specify two or three addresses in case a server is down, but it\u2019s not necessary to provide a list of all the brokers in the cluster.\n+If you are using a loadbalancer service to expose the Kafka cluster, you only need the address for the service as the availability is handled by the loadbalancer.\n+<2> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message keys.\n+<3> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message values.\n+<4> (Optional) The logical name for the client, which is used in logs and metrics to identify the source of a request. The id can also be used to throttle consumers based on processing time quotas.\n+<5> (Conditional) A group id is _required_ if the consumer belongs to a consumer group.\n+\n+Consumer groups are used to share a typically large data stream generated by multiple producers from a given topic.\n+Consumers are grouped using a `group.id`, allowing messages to be spread across the members.\n+\n+== Scaling data consumption using consumer groups\n+\n+Consumer groups share a typically large data stream generated by one or multiple producers from a given topic.\n+Consumers with the same `group.id` property are in the same group.\n+One of the consumers in the group is elected leader and decides how the partitions that the consumers are interested in should be assigned to the consumers.\n+Each partition can only be assigned to a single consumer.\n+\n+If you do not already have as many consumers as partitions,\n+you can scale data consumption by adding more consumer instances with the same `group.id`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk2NjU2OA=="}, "originalCommit": {"oid": "6281dcc211318fbd6a843c3df1f323e1d96eafcd"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2NDc1MQ==", "bodyText": "typo heartbeat.interval.ms", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#discussion_r517164751", "createdAt": "2020-11-04T08:19:12Z", "author": {"login": "ppatierno"}, "path": "documentation/modules/managing/con-consumer-config-properties.adoc", "diffHunk": "@@ -0,0 +1,253 @@\n+// This module is included in the following files:\n+//\n+// assembly-client-config.adoc\n+\n+[id='con-consumer-config-properties-{context}']\n+= Kafka consumer configuration tuning\n+\n+Use a basic consumer configuration with optional properties that are tailored to specific use cases.\n+\n+When tuning your consumers your primary concern will be ensuring that they cope efficiently with the amount of data ingested.\n+As with the producer tuning, be prepared to make incremental changes until the consumers operate as expected.\n+\n+== Basic consumer configuration\n+\n+Connection and deserializer properties are required for every consumer.\n+Generally, it is good practice to add a client id for tracking.\n+\n+In a consumer configuration, irrespective of any subsequent configuration:\n+\n+* The consumer fetches from a given offset and consumes the messages in order, unless the offset is changed to skip or re-read messages.\n+* The broker does not know if the consumer processed the responses, even when committing offsets to Kafka because the offsets might be sent to a different broker in the cluster.\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+# ...\n+bootstrap.servers=localhost:9092 <1>\n+key.deserializer=org.apache.kafka.common.serialization.Deserializer  <2>\n+value.deserializer=org.apache.kafka.common.serialization.Deserializer  <3>\n+client.id=my-client <4>\n+group.id=my-group-id <5>\n+# ...\n+----\n+<1> (Required) Tells the consumer to connect to a Kafka cluster using a _host:port_ bootstrap server address for a Kafka broker.\n+The consumer uses the address to discover and connect to all brokers in the cluster.\n+Use a comma-separated list to specify two or three addresses in case a server is down, but it\u2019s not necessary to provide a list of all the brokers in the cluster.\n+If you are using a loadbalancer service to expose the Kafka cluster, you only need the address for the service as the availability is handled by the loadbalancer.\n+<2> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message keys.\n+<3> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message values.\n+<4> (Optional) The logical name for the client, which is used in logs and metrics to identify the source of a request. The id can also be used to throttle consumers based on processing time quotas.\n+<5> (Conditional) A group id is _required_ if the consumer belongs to a consumer group.\n+\n+Consumer groups are used to share a typically large data stream generated by multiple producers from a given topic.\n+Consumers are grouped using a `group.id`, allowing messages to be spread across the members.\n+\n+== Scaling data consumption using consumer groups\n+\n+Consumer groups share a typically large data stream generated by one or multiple producers from a given topic.\n+Consumers with the same `group.id` property are in the same group.\n+One of the consumers in the group is elected leader and decides how the partitions that the consumers are interested in should be assigned to the consumers.\n+Each partition can only be assigned to a single consumer.\n+\n+If you do not already have as many consumers as partitions,\n+you can scale data consumption by adding more consumer instances with the same `group.id`.\n+\n+Consumers within the same consumer group send offset commits and heartbeats to the same broker.\n+So the greater the number of consumers in the group, the higher the request load on the broker.\n+\n+----\n+# ...\n+group.id=my-group-id <1>\n+# ...\n+----\n+<1> Add a consumer to a consumer group using a group id.\n+\n+.Adjusting the ratio of consumers to partitions\n+\n+Adding more consumers to a group than there are partitions will not help throughput,\n+but it does mean that there are consumers on standby should one stop functioning.\n+\n+If you can meet throughput goals with fewer consumers, you save on resources.\n+\n+== Message ordering guarantees\n+\n+Kafka brokers receive fetch requests from consumers that ask the broker to send messages from a list of topics, partitions and offset positions.\n+\n+A consumer observes messages in a single partition in the same order that they were committed to the broker,\n+which means that Kafka *only* provides ordering guarantees for messages in a single partition.\n+Conversely, if a consumer is consuming messages from multiple partitions, the order of messages in different partitions as observed by the consumer does not necessarily reflect the order in which they were sent.\n+\n+If you want a strict ordering of messages from one topic, use one partition.\n+\n+== Optimizing throughput and latency\n+\n+Control the number of messages returned when your client application calls `KafkaConsumer.poll()`.\n+\n+Use the `fetch.max.wait.ms` and `fetch.min.bytes` properties to increase the minimum amount of data fetched by the consumer from the Kafka broker.\n+Time-based batching is configured using `fetch.max.wait.ms`, and size-based batching is configured using `fetch.min.bytes`.\n+\n+If CPU utilization in the consumer or broker is high, it might be because there are too many requests from the consumer.\n+You can adjust `fetch.max.wait.ms` and `fetch.min.bytes` properties higher so that there are fewer requests and messages are delivered in bigger batches.\n+By adjusting higher, throughput is improved with some cost to latency.\n+You can also adjust higher if the amount of data being produced is low.\n+\n+For example, if you set `fetch.max.wait.ms` to 500ms and `fetch.min.bytes` to 16384 bytes,\n+when Kafka receives a fetch request from the consumer it will respond when the first of either threshold is reached.\n+\n+Conversely, you can adjust the `fetch.max.wait.ms` and `fetch.min.bytes` properties lower to improve end-to-end latency.\n+\n+----\n+# ...\n+fetch.max.wait.ms=500 <1>\n+fetch.min.bytes=16384 <2>\n+# ...\n+----\n+<1> The maximum time in milliseconds the broker will wait before completing fetch requests.\n+The default is `500` milliseconds.\n+<2> If a minimum batch size in bytes is used, a request is sent when the minimum is reached, or messages have been queued for longer than `fetch.max.wait.ms` (whichever comes sooner).\n+Adding the delay allows batches to accumulate messages up to the batch size.\n+\n+.Lowering latency by increasing the fetch request size\n+\n+Use the `fetch.max.bytes` and `max.partition.fetch.bytes` properties to increase the maximum amount of data fetched by the consumer from the Kafka broker.\n+\n+The `fetch.max.bytes` property sets a maximum limit in bytes on the amount of data fetched from the broker at one time,\n+\n+The `max.partition.fetch.bytes` sets a maximum limit in bytes on how much data is returned for each partition,\n+which must always be larger than the number of bytes set in the broker or topic configuration for `max.message.bytes`.\n+\n+The maximum amount of memory a client can consume is approximately:\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+_NUMBER-OF-BROKERS_ * fetch.max.bytes and _NUMBER-OF-PARTITIONS_ * max.partition.fetch.bytes\n+----\n+\n+If memory usage can accommodate it, you can increase the values of these two properties.\n+By allowing more data in each request, latency is improved as there are fewer fetch requests.\n+\n+----\n+# ...\n+fetch.max.bytes=52428800 <1>\n+max.partition.fetch.bytes=1048576 <2>\n+# ...\n+----\n+<1> The maximum amount of data in bytes returned for a fetch request.\n+<2> The maximum amount of data in bytes returned for each partition.\n+\n+== Avoiding data loss or duplication when committing offsets\n+\n+The Kafka _auto-commit mechanism_ allows a consumer to commit the offsets of messages automatically.\n+If enabled, the consumer will commit offsets received from polling the broker at 5000ms intervals.\n+\n+The auto-commit mechanism is convenient, but it introduces a risk of data loss and duplication.\n+If a consumer has fetched and transformed a number of messages, but the system crashes with processed messages in the consumer buffer when performing an auto-commit, that data is lost.\n+If the system crashes after processing the messages, but before performing the auto-commit, the data is duplicated on another consumer instance after rebalancing.\n+\n+To minimize the likelihood of data loss or duplication, set `enable.auto.commit` to `false` and develop your client application to have more control over committing offsets.\n+Or use `auto.commit.interval.ms=1` to decrease the intervals between commits.\n+\n+By setting to `enable.auto.commit` to `false`, you can commit offsets after *all* processing has been performed and the message has been consumed.\n+For example, you can set up your application to call the Kafka `commitSync` and `commitAsync` commit APIs.\n+\n+The `commitSync` API commits the offsets in a message batch returned from polling.\n+You call the API when you are finished processing all the messages in the batch.\n+If you use the `commitSync` API, the application will not poll for new messages until the last offset in the batch is committed.\n+If this impacts throughput unduly, you can commit less frequently,\n+or you can use the `commitAsync` API.\n+The `commitAsync` API does not wait for the broker to respond to a commit request,\n+but risks creating more duplicates when rebalancing.\n+A common approach is to combine both commit APIs in an application, with the `commitSync` API used just before shutting the consumer down or rebalancing to make sure the final commit is successful.\n+\n+Also, consider using transactional ids and having idempotence enabled (`enable.idempotence=true`) on the producer side to guarantee exactly once delivery.\n+On the consumer side, you can then use the `isolation.level` property to control how transactional messages are read by the consumer.\n+\n+The `isolation.level` property has two valid values:\n+\n+* `read_committed`\n+* `read_uncommitted`\n+\n+Use `read_committed` to ensure that only transactional messages that have been committed are read by the consumer.\n+However, this will cause an increase in end-to-end latency, because the consumer won\u2019t be able to return a message until the brokers have written the transaction markers that record the result of the transaction (_committed_ or _aborted_).\n+\n+----\n+# ...\n+enable.auto.commit=false <1>\n+isolation.level=read_committed <2>\n+# ...\n+----\n+<1> Auto commit is set to false to provide more control over committing offsets\n+<2> Set to `read_committed` so that only committed messages are read by the consumer.\n+\n+== Recovering from failure to avoid data loss\n+\n+Use the `session.timeout.ms` and `heatbeat.interval.ms` properties to configure the time taken to check and recover from consumer failure within a consumer group.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6281dcc211318fbd6a843c3df1f323e1d96eafcd"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2NTQyMA==", "bodyText": "typo heartbeat.interval.ms", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#discussion_r517165420", "createdAt": "2020-11-04T08:20:30Z", "author": {"login": "ppatierno"}, "path": "documentation/modules/managing/con-consumer-config-properties.adoc", "diffHunk": "@@ -0,0 +1,253 @@\n+// This module is included in the following files:\n+//\n+// assembly-client-config.adoc\n+\n+[id='con-consumer-config-properties-{context}']\n+= Kafka consumer configuration tuning\n+\n+Use a basic consumer configuration with optional properties that are tailored to specific use cases.\n+\n+When tuning your consumers your primary concern will be ensuring that they cope efficiently with the amount of data ingested.\n+As with the producer tuning, be prepared to make incremental changes until the consumers operate as expected.\n+\n+== Basic consumer configuration\n+\n+Connection and deserializer properties are required for every consumer.\n+Generally, it is good practice to add a client id for tracking.\n+\n+In a consumer configuration, irrespective of any subsequent configuration:\n+\n+* The consumer fetches from a given offset and consumes the messages in order, unless the offset is changed to skip or re-read messages.\n+* The broker does not know if the consumer processed the responses, even when committing offsets to Kafka because the offsets might be sent to a different broker in the cluster.\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+# ...\n+bootstrap.servers=localhost:9092 <1>\n+key.deserializer=org.apache.kafka.common.serialization.Deserializer  <2>\n+value.deserializer=org.apache.kafka.common.serialization.Deserializer  <3>\n+client.id=my-client <4>\n+group.id=my-group-id <5>\n+# ...\n+----\n+<1> (Required) Tells the consumer to connect to a Kafka cluster using a _host:port_ bootstrap server address for a Kafka broker.\n+The consumer uses the address to discover and connect to all brokers in the cluster.\n+Use a comma-separated list to specify two or three addresses in case a server is down, but it\u2019s not necessary to provide a list of all the brokers in the cluster.\n+If you are using a loadbalancer service to expose the Kafka cluster, you only need the address for the service as the availability is handled by the loadbalancer.\n+<2> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message keys.\n+<3> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message values.\n+<4> (Optional) The logical name for the client, which is used in logs and metrics to identify the source of a request. The id can also be used to throttle consumers based on processing time quotas.\n+<5> (Conditional) A group id is _required_ if the consumer belongs to a consumer group.\n+\n+Consumer groups are used to share a typically large data stream generated by multiple producers from a given topic.\n+Consumers are grouped using a `group.id`, allowing messages to be spread across the members.\n+\n+== Scaling data consumption using consumer groups\n+\n+Consumer groups share a typically large data stream generated by one or multiple producers from a given topic.\n+Consumers with the same `group.id` property are in the same group.\n+One of the consumers in the group is elected leader and decides how the partitions that the consumers are interested in should be assigned to the consumers.\n+Each partition can only be assigned to a single consumer.\n+\n+If you do not already have as many consumers as partitions,\n+you can scale data consumption by adding more consumer instances with the same `group.id`.\n+\n+Consumers within the same consumer group send offset commits and heartbeats to the same broker.\n+So the greater the number of consumers in the group, the higher the request load on the broker.\n+\n+----\n+# ...\n+group.id=my-group-id <1>\n+# ...\n+----\n+<1> Add a consumer to a consumer group using a group id.\n+\n+.Adjusting the ratio of consumers to partitions\n+\n+Adding more consumers to a group than there are partitions will not help throughput,\n+but it does mean that there are consumers on standby should one stop functioning.\n+\n+If you can meet throughput goals with fewer consumers, you save on resources.\n+\n+== Message ordering guarantees\n+\n+Kafka brokers receive fetch requests from consumers that ask the broker to send messages from a list of topics, partitions and offset positions.\n+\n+A consumer observes messages in a single partition in the same order that they were committed to the broker,\n+which means that Kafka *only* provides ordering guarantees for messages in a single partition.\n+Conversely, if a consumer is consuming messages from multiple partitions, the order of messages in different partitions as observed by the consumer does not necessarily reflect the order in which they were sent.\n+\n+If you want a strict ordering of messages from one topic, use one partition.\n+\n+== Optimizing throughput and latency\n+\n+Control the number of messages returned when your client application calls `KafkaConsumer.poll()`.\n+\n+Use the `fetch.max.wait.ms` and `fetch.min.bytes` properties to increase the minimum amount of data fetched by the consumer from the Kafka broker.\n+Time-based batching is configured using `fetch.max.wait.ms`, and size-based batching is configured using `fetch.min.bytes`.\n+\n+If CPU utilization in the consumer or broker is high, it might be because there are too many requests from the consumer.\n+You can adjust `fetch.max.wait.ms` and `fetch.min.bytes` properties higher so that there are fewer requests and messages are delivered in bigger batches.\n+By adjusting higher, throughput is improved with some cost to latency.\n+You can also adjust higher if the amount of data being produced is low.\n+\n+For example, if you set `fetch.max.wait.ms` to 500ms and `fetch.min.bytes` to 16384 bytes,\n+when Kafka receives a fetch request from the consumer it will respond when the first of either threshold is reached.\n+\n+Conversely, you can adjust the `fetch.max.wait.ms` and `fetch.min.bytes` properties lower to improve end-to-end latency.\n+\n+----\n+# ...\n+fetch.max.wait.ms=500 <1>\n+fetch.min.bytes=16384 <2>\n+# ...\n+----\n+<1> The maximum time in milliseconds the broker will wait before completing fetch requests.\n+The default is `500` milliseconds.\n+<2> If a minimum batch size in bytes is used, a request is sent when the minimum is reached, or messages have been queued for longer than `fetch.max.wait.ms` (whichever comes sooner).\n+Adding the delay allows batches to accumulate messages up to the batch size.\n+\n+.Lowering latency by increasing the fetch request size\n+\n+Use the `fetch.max.bytes` and `max.partition.fetch.bytes` properties to increase the maximum amount of data fetched by the consumer from the Kafka broker.\n+\n+The `fetch.max.bytes` property sets a maximum limit in bytes on the amount of data fetched from the broker at one time,\n+\n+The `max.partition.fetch.bytes` sets a maximum limit in bytes on how much data is returned for each partition,\n+which must always be larger than the number of bytes set in the broker or topic configuration for `max.message.bytes`.\n+\n+The maximum amount of memory a client can consume is approximately:\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+_NUMBER-OF-BROKERS_ * fetch.max.bytes and _NUMBER-OF-PARTITIONS_ * max.partition.fetch.bytes\n+----\n+\n+If memory usage can accommodate it, you can increase the values of these two properties.\n+By allowing more data in each request, latency is improved as there are fewer fetch requests.\n+\n+----\n+# ...\n+fetch.max.bytes=52428800 <1>\n+max.partition.fetch.bytes=1048576 <2>\n+# ...\n+----\n+<1> The maximum amount of data in bytes returned for a fetch request.\n+<2> The maximum amount of data in bytes returned for each partition.\n+\n+== Avoiding data loss or duplication when committing offsets\n+\n+The Kafka _auto-commit mechanism_ allows a consumer to commit the offsets of messages automatically.\n+If enabled, the consumer will commit offsets received from polling the broker at 5000ms intervals.\n+\n+The auto-commit mechanism is convenient, but it introduces a risk of data loss and duplication.\n+If a consumer has fetched and transformed a number of messages, but the system crashes with processed messages in the consumer buffer when performing an auto-commit, that data is lost.\n+If the system crashes after processing the messages, but before performing the auto-commit, the data is duplicated on another consumer instance after rebalancing.\n+\n+To minimize the likelihood of data loss or duplication, set `enable.auto.commit` to `false` and develop your client application to have more control over committing offsets.\n+Or use `auto.commit.interval.ms=1` to decrease the intervals between commits.\n+\n+By setting to `enable.auto.commit` to `false`, you can commit offsets after *all* processing has been performed and the message has been consumed.\n+For example, you can set up your application to call the Kafka `commitSync` and `commitAsync` commit APIs.\n+\n+The `commitSync` API commits the offsets in a message batch returned from polling.\n+You call the API when you are finished processing all the messages in the batch.\n+If you use the `commitSync` API, the application will not poll for new messages until the last offset in the batch is committed.\n+If this impacts throughput unduly, you can commit less frequently,\n+or you can use the `commitAsync` API.\n+The `commitAsync` API does not wait for the broker to respond to a commit request,\n+but risks creating more duplicates when rebalancing.\n+A common approach is to combine both commit APIs in an application, with the `commitSync` API used just before shutting the consumer down or rebalancing to make sure the final commit is successful.\n+\n+Also, consider using transactional ids and having idempotence enabled (`enable.idempotence=true`) on the producer side to guarantee exactly once delivery.\n+On the consumer side, you can then use the `isolation.level` property to control how transactional messages are read by the consumer.\n+\n+The `isolation.level` property has two valid values:\n+\n+* `read_committed`\n+* `read_uncommitted`\n+\n+Use `read_committed` to ensure that only transactional messages that have been committed are read by the consumer.\n+However, this will cause an increase in end-to-end latency, because the consumer won\u2019t be able to return a message until the brokers have written the transaction markers that record the result of the transaction (_committed_ or _aborted_).\n+\n+----\n+# ...\n+enable.auto.commit=false <1>\n+isolation.level=read_committed <2>\n+# ...\n+----\n+<1> Auto commit is set to false to provide more control over committing offsets\n+<2> Set to `read_committed` so that only committed messages are read by the consumer.\n+\n+== Recovering from failure to avoid data loss\n+\n+Use the `session.timeout.ms` and `heatbeat.interval.ms` properties to configure the time taken to check and recover from consumer failure within a consumer group.\n+\n+The `session.timeout.ms` property specifies the maximum amount of time in milliseconds a consumer within a consumer group can be out of contact with a broker before being considered inactive and a _rebalancing_ is triggered between the active consumers in the group.\n+When the group rebalances, the partitions are reassigned to the members of the group.\n+\n+The `heatbeat.interval.ms` property specifies the interval in milliseconds between _heartbeat_ checks to the consumer group coordinator to indicate that the consumer is active and connected.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6281dcc211318fbd6a843c3df1f323e1d96eafcd"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2NTk5Mw==", "bodyText": "typo heartbeat.interval.ms", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#discussion_r517165993", "createdAt": "2020-11-04T08:21:35Z", "author": {"login": "ppatierno"}, "path": "documentation/modules/managing/con-consumer-config-properties.adoc", "diffHunk": "@@ -0,0 +1,253 @@\n+// This module is included in the following files:\n+//\n+// assembly-client-config.adoc\n+\n+[id='con-consumer-config-properties-{context}']\n+= Kafka consumer configuration tuning\n+\n+Use a basic consumer configuration with optional properties that are tailored to specific use cases.\n+\n+When tuning your consumers your primary concern will be ensuring that they cope efficiently with the amount of data ingested.\n+As with the producer tuning, be prepared to make incremental changes until the consumers operate as expected.\n+\n+== Basic consumer configuration\n+\n+Connection and deserializer properties are required for every consumer.\n+Generally, it is good practice to add a client id for tracking.\n+\n+In a consumer configuration, irrespective of any subsequent configuration:\n+\n+* The consumer fetches from a given offset and consumes the messages in order, unless the offset is changed to skip or re-read messages.\n+* The broker does not know if the consumer processed the responses, even when committing offsets to Kafka because the offsets might be sent to a different broker in the cluster.\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+# ...\n+bootstrap.servers=localhost:9092 <1>\n+key.deserializer=org.apache.kafka.common.serialization.Deserializer  <2>\n+value.deserializer=org.apache.kafka.common.serialization.Deserializer  <3>\n+client.id=my-client <4>\n+group.id=my-group-id <5>\n+# ...\n+----\n+<1> (Required) Tells the consumer to connect to a Kafka cluster using a _host:port_ bootstrap server address for a Kafka broker.\n+The consumer uses the address to discover and connect to all brokers in the cluster.\n+Use a comma-separated list to specify two or three addresses in case a server is down, but it\u2019s not necessary to provide a list of all the brokers in the cluster.\n+If you are using a loadbalancer service to expose the Kafka cluster, you only need the address for the service as the availability is handled by the loadbalancer.\n+<2> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message keys.\n+<3> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message values.\n+<4> (Optional) The logical name for the client, which is used in logs and metrics to identify the source of a request. The id can also be used to throttle consumers based on processing time quotas.\n+<5> (Conditional) A group id is _required_ if the consumer belongs to a consumer group.\n+\n+Consumer groups are used to share a typically large data stream generated by multiple producers from a given topic.\n+Consumers are grouped using a `group.id`, allowing messages to be spread across the members.\n+\n+== Scaling data consumption using consumer groups\n+\n+Consumer groups share a typically large data stream generated by one or multiple producers from a given topic.\n+Consumers with the same `group.id` property are in the same group.\n+One of the consumers in the group is elected leader and decides how the partitions that the consumers are interested in should be assigned to the consumers.\n+Each partition can only be assigned to a single consumer.\n+\n+If you do not already have as many consumers as partitions,\n+you can scale data consumption by adding more consumer instances with the same `group.id`.\n+\n+Consumers within the same consumer group send offset commits and heartbeats to the same broker.\n+So the greater the number of consumers in the group, the higher the request load on the broker.\n+\n+----\n+# ...\n+group.id=my-group-id <1>\n+# ...\n+----\n+<1> Add a consumer to a consumer group using a group id.\n+\n+.Adjusting the ratio of consumers to partitions\n+\n+Adding more consumers to a group than there are partitions will not help throughput,\n+but it does mean that there are consumers on standby should one stop functioning.\n+\n+If you can meet throughput goals with fewer consumers, you save on resources.\n+\n+== Message ordering guarantees\n+\n+Kafka brokers receive fetch requests from consumers that ask the broker to send messages from a list of topics, partitions and offset positions.\n+\n+A consumer observes messages in a single partition in the same order that they were committed to the broker,\n+which means that Kafka *only* provides ordering guarantees for messages in a single partition.\n+Conversely, if a consumer is consuming messages from multiple partitions, the order of messages in different partitions as observed by the consumer does not necessarily reflect the order in which they were sent.\n+\n+If you want a strict ordering of messages from one topic, use one partition.\n+\n+== Optimizing throughput and latency\n+\n+Control the number of messages returned when your client application calls `KafkaConsumer.poll()`.\n+\n+Use the `fetch.max.wait.ms` and `fetch.min.bytes` properties to increase the minimum amount of data fetched by the consumer from the Kafka broker.\n+Time-based batching is configured using `fetch.max.wait.ms`, and size-based batching is configured using `fetch.min.bytes`.\n+\n+If CPU utilization in the consumer or broker is high, it might be because there are too many requests from the consumer.\n+You can adjust `fetch.max.wait.ms` and `fetch.min.bytes` properties higher so that there are fewer requests and messages are delivered in bigger batches.\n+By adjusting higher, throughput is improved with some cost to latency.\n+You can also adjust higher if the amount of data being produced is low.\n+\n+For example, if you set `fetch.max.wait.ms` to 500ms and `fetch.min.bytes` to 16384 bytes,\n+when Kafka receives a fetch request from the consumer it will respond when the first of either threshold is reached.\n+\n+Conversely, you can adjust the `fetch.max.wait.ms` and `fetch.min.bytes` properties lower to improve end-to-end latency.\n+\n+----\n+# ...\n+fetch.max.wait.ms=500 <1>\n+fetch.min.bytes=16384 <2>\n+# ...\n+----\n+<1> The maximum time in milliseconds the broker will wait before completing fetch requests.\n+The default is `500` milliseconds.\n+<2> If a minimum batch size in bytes is used, a request is sent when the minimum is reached, or messages have been queued for longer than `fetch.max.wait.ms` (whichever comes sooner).\n+Adding the delay allows batches to accumulate messages up to the batch size.\n+\n+.Lowering latency by increasing the fetch request size\n+\n+Use the `fetch.max.bytes` and `max.partition.fetch.bytes` properties to increase the maximum amount of data fetched by the consumer from the Kafka broker.\n+\n+The `fetch.max.bytes` property sets a maximum limit in bytes on the amount of data fetched from the broker at one time,\n+\n+The `max.partition.fetch.bytes` sets a maximum limit in bytes on how much data is returned for each partition,\n+which must always be larger than the number of bytes set in the broker or topic configuration for `max.message.bytes`.\n+\n+The maximum amount of memory a client can consume is approximately:\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+_NUMBER-OF-BROKERS_ * fetch.max.bytes and _NUMBER-OF-PARTITIONS_ * max.partition.fetch.bytes\n+----\n+\n+If memory usage can accommodate it, you can increase the values of these two properties.\n+By allowing more data in each request, latency is improved as there are fewer fetch requests.\n+\n+----\n+# ...\n+fetch.max.bytes=52428800 <1>\n+max.partition.fetch.bytes=1048576 <2>\n+# ...\n+----\n+<1> The maximum amount of data in bytes returned for a fetch request.\n+<2> The maximum amount of data in bytes returned for each partition.\n+\n+== Avoiding data loss or duplication when committing offsets\n+\n+The Kafka _auto-commit mechanism_ allows a consumer to commit the offsets of messages automatically.\n+If enabled, the consumer will commit offsets received from polling the broker at 5000ms intervals.\n+\n+The auto-commit mechanism is convenient, but it introduces a risk of data loss and duplication.\n+If a consumer has fetched and transformed a number of messages, but the system crashes with processed messages in the consumer buffer when performing an auto-commit, that data is lost.\n+If the system crashes after processing the messages, but before performing the auto-commit, the data is duplicated on another consumer instance after rebalancing.\n+\n+To minimize the likelihood of data loss or duplication, set `enable.auto.commit` to `false` and develop your client application to have more control over committing offsets.\n+Or use `auto.commit.interval.ms=1` to decrease the intervals between commits.\n+\n+By setting to `enable.auto.commit` to `false`, you can commit offsets after *all* processing has been performed and the message has been consumed.\n+For example, you can set up your application to call the Kafka `commitSync` and `commitAsync` commit APIs.\n+\n+The `commitSync` API commits the offsets in a message batch returned from polling.\n+You call the API when you are finished processing all the messages in the batch.\n+If you use the `commitSync` API, the application will not poll for new messages until the last offset in the batch is committed.\n+If this impacts throughput unduly, you can commit less frequently,\n+or you can use the `commitAsync` API.\n+The `commitAsync` API does not wait for the broker to respond to a commit request,\n+but risks creating more duplicates when rebalancing.\n+A common approach is to combine both commit APIs in an application, with the `commitSync` API used just before shutting the consumer down or rebalancing to make sure the final commit is successful.\n+\n+Also, consider using transactional ids and having idempotence enabled (`enable.idempotence=true`) on the producer side to guarantee exactly once delivery.\n+On the consumer side, you can then use the `isolation.level` property to control how transactional messages are read by the consumer.\n+\n+The `isolation.level` property has two valid values:\n+\n+* `read_committed`\n+* `read_uncommitted`\n+\n+Use `read_committed` to ensure that only transactional messages that have been committed are read by the consumer.\n+However, this will cause an increase in end-to-end latency, because the consumer won\u2019t be able to return a message until the brokers have written the transaction markers that record the result of the transaction (_committed_ or _aborted_).\n+\n+----\n+# ...\n+enable.auto.commit=false <1>\n+isolation.level=read_committed <2>\n+# ...\n+----\n+<1> Auto commit is set to false to provide more control over committing offsets\n+<2> Set to `read_committed` so that only committed messages are read by the consumer.\n+\n+== Recovering from failure to avoid data loss\n+\n+Use the `session.timeout.ms` and `heatbeat.interval.ms` properties to configure the time taken to check and recover from consumer failure within a consumer group.\n+\n+The `session.timeout.ms` property specifies the maximum amount of time in milliseconds a consumer within a consumer group can be out of contact with a broker before being considered inactive and a _rebalancing_ is triggered between the active consumers in the group.\n+When the group rebalances, the partitions are reassigned to the members of the group.\n+\n+The `heatbeat.interval.ms` property specifies the interval in milliseconds between _heartbeat_ checks to the consumer group coordinator to indicate that the consumer is active and connected.\n+The heartbeat interval must be lower, usually by a third, than the session timeout interval.\n+\n+If you set the `session.timeout.ms` property lower, failing consumers are detected earlier, and rebalancing can take place quicker.\n+However, take care not to set the timeout so low that the broker fails to receive a heartbeat in time and triggers an unnecessary rebalance.\n+\n+Decreasing the heartbeat interval reduces the chance of accidental rebalancing, but more frequent heartbeats increases the overhead on broker resources.\n+\n+== Handling uncommitted offsets\n+\n+Use the `auto.offset.reset` property to control how the consumer behaves when offsets are not committed.\n+This could be because the consumer was down for a period.\n+To avoid data loss, but increase the amount of processing, use the `earliest` value to start at the beginning of the partition.\n+The other allowed value is `latest`, which starts at the end of the partition, and consequently means some messages are missed.\n+\n+----\n+# ...\n+heatbeat.interval.ms=3000 <1>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6281dcc211318fbd6a843c3df1f323e1d96eafcd"}, "originalPosition": 206}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc9ff9c96964fae9b7cd34d00404b130d90c783f", "author": {"user": {"login": "PaulRMellor", "name": null}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/bc9ff9c96964fae9b7cd34d00404b130d90c783f", "committedDate": "2020-11-05T10:27:15Z", "message": "review edits JS, PP\n\nSigned-off-by: prmellor <pmellor@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0MjAyOTIx", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#pullrequestreview-524202921", "createdAt": "2020-11-05T12:15:55Z", "commit": {"oid": "bc9ff9c96964fae9b7cd34d00404b130d90c783f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NDg5MDc3", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#pullrequestreview-524489077", "createdAt": "2020-11-05T17:19:26Z", "commit": {"oid": "bc9ff9c96964fae9b7cd34d00404b130d90c783f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNzoxOToyN1rOHuNw4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMTo1MTowMlrOHurG5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIyMjA0OA==", "bodyText": "Suggested change:\nA minimum set of configuration properties is required, but you can add or adjust properties to change how producers and consumers interact with Kafka.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#discussion_r518222048", "createdAt": "2020-11-05T17:19:27Z", "author": {"login": "laidan6000"}, "path": "documentation/assemblies/managing/assembly-client-config.adoc", "diffHunk": "@@ -9,10 +9,12 @@ Use configuration properties to optimize the performance of Kafka producers and\n \n A minimum set of configuration properties is required.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc9ff9c96964fae9b7cd34d00404b130d90c783f"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY3OTk3MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * The broker does not know if the consumer processed the responses, even when committing offsets to Kafka because the offsets might be sent to a different broker in the cluster.\n          \n          \n            \n            * The broker does not know if the consumer processed the responses, even when committing offsets to Kafka, because the offsets might be sent to a different broker in the cluster.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#discussion_r518679970", "createdAt": "2020-11-06T11:03:41Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/managing/con-consumer-config-properties.adoc", "diffHunk": "@@ -0,0 +1,252 @@\n+// This module is included in the following files:\n+//\n+// assembly-client-config.adoc\n+\n+[id='con-consumer-config-properties-{context}']\n+= Kafka consumer configuration tuning\n+\n+Use a basic consumer configuration with optional properties that are tailored to specific use cases.\n+\n+When tuning your consumers your primary concern will be ensuring that they cope efficiently with the amount of data ingested.\n+As with the producer tuning, be prepared to make incremental changes until the consumers operate as expected.\n+\n+== Basic consumer configuration\n+\n+Connection and deserializer properties are required for every consumer.\n+Generally, it is good practice to add a client id for tracking.\n+\n+In a consumer configuration, irrespective of any subsequent configuration:\n+\n+* The consumer fetches from a given offset and consumes the messages in order, unless the offset is changed to skip or re-read messages.\n+* The broker does not know if the consumer processed the responses, even when committing offsets to Kafka because the offsets might be sent to a different broker in the cluster.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc9ff9c96964fae9b7cd34d00404b130d90c783f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY4MDgyOQ==", "bodyText": "it's > it is", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#discussion_r518680829", "createdAt": "2020-11-06T11:05:13Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/managing/con-consumer-config-properties.adoc", "diffHunk": "@@ -0,0 +1,252 @@\n+// This module is included in the following files:\n+//\n+// assembly-client-config.adoc\n+\n+[id='con-consumer-config-properties-{context}']\n+= Kafka consumer configuration tuning\n+\n+Use a basic consumer configuration with optional properties that are tailored to specific use cases.\n+\n+When tuning your consumers your primary concern will be ensuring that they cope efficiently with the amount of data ingested.\n+As with the producer tuning, be prepared to make incremental changes until the consumers operate as expected.\n+\n+== Basic consumer configuration\n+\n+Connection and deserializer properties are required for every consumer.\n+Generally, it is good practice to add a client id for tracking.\n+\n+In a consumer configuration, irrespective of any subsequent configuration:\n+\n+* The consumer fetches from a given offset and consumes the messages in order, unless the offset is changed to skip or re-read messages.\n+* The broker does not know if the consumer processed the responses, even when committing offsets to Kafka because the offsets might be sent to a different broker in the cluster.\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+# ...\n+bootstrap.servers=localhost:9092 <1>\n+key.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <2>\n+value.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <3>\n+client.id=my-client <4>\n+group.id=my-group-id <5>\n+# ...\n+----\n+<1> (Required) Tells the consumer to connect to a Kafka cluster using a _host:port_ bootstrap server address for a Kafka broker.\n+The consumer uses the address to discover and connect to all brokers in the cluster.\n+Use a comma-separated list to specify two or three addresses in case a server is down, but it\u2019s not necessary to provide a list of all the brokers in the cluster.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc9ff9c96964fae9b7cd34d00404b130d90c783f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY4MTAyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If you are using a loadbalancer service to expose the Kafka cluster, you only need the address for the service as the availability is handled by the loadbalancer.\n          \n          \n            \n            If you are using a loadbalancer service to expose the Kafka cluster, you only need the address for the service because the availability is handled by the loadbalancer.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#discussion_r518681021", "createdAt": "2020-11-06T11:05:37Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/managing/con-consumer-config-properties.adoc", "diffHunk": "@@ -0,0 +1,252 @@\n+// This module is included in the following files:\n+//\n+// assembly-client-config.adoc\n+\n+[id='con-consumer-config-properties-{context}']\n+= Kafka consumer configuration tuning\n+\n+Use a basic consumer configuration with optional properties that are tailored to specific use cases.\n+\n+When tuning your consumers your primary concern will be ensuring that they cope efficiently with the amount of data ingested.\n+As with the producer tuning, be prepared to make incremental changes until the consumers operate as expected.\n+\n+== Basic consumer configuration\n+\n+Connection and deserializer properties are required for every consumer.\n+Generally, it is good practice to add a client id for tracking.\n+\n+In a consumer configuration, irrespective of any subsequent configuration:\n+\n+* The consumer fetches from a given offset and consumes the messages in order, unless the offset is changed to skip or re-read messages.\n+* The broker does not know if the consumer processed the responses, even when committing offsets to Kafka because the offsets might be sent to a different broker in the cluster.\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+# ...\n+bootstrap.servers=localhost:9092 <1>\n+key.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <2>\n+value.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <3>\n+client.id=my-client <4>\n+group.id=my-group-id <5>\n+# ...\n+----\n+<1> (Required) Tells the consumer to connect to a Kafka cluster using a _host:port_ bootstrap server address for a Kafka broker.\n+The consumer uses the address to discover and connect to all brokers in the cluster.\n+Use a comma-separated list to specify two or three addresses in case a server is down, but it\u2019s not necessary to provide a list of all the brokers in the cluster.\n+If you are using a loadbalancer service to expose the Kafka cluster, you only need the address for the service as the availability is handled by the loadbalancer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc9ff9c96964fae9b7cd34d00404b130d90c783f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY4MzQ1Nw==", "bodyText": "Would \"subscribed to\" be better than \"interested in\"?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#discussion_r518683457", "createdAt": "2020-11-06T11:10:12Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/managing/con-consumer-config-properties.adoc", "diffHunk": "@@ -0,0 +1,252 @@\n+// This module is included in the following files:\n+//\n+// assembly-client-config.adoc\n+\n+[id='con-consumer-config-properties-{context}']\n+= Kafka consumer configuration tuning\n+\n+Use a basic consumer configuration with optional properties that are tailored to specific use cases.\n+\n+When tuning your consumers your primary concern will be ensuring that they cope efficiently with the amount of data ingested.\n+As with the producer tuning, be prepared to make incremental changes until the consumers operate as expected.\n+\n+== Basic consumer configuration\n+\n+Connection and deserializer properties are required for every consumer.\n+Generally, it is good practice to add a client id for tracking.\n+\n+In a consumer configuration, irrespective of any subsequent configuration:\n+\n+* The consumer fetches from a given offset and consumes the messages in order, unless the offset is changed to skip or re-read messages.\n+* The broker does not know if the consumer processed the responses, even when committing offsets to Kafka because the offsets might be sent to a different broker in the cluster.\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+# ...\n+bootstrap.servers=localhost:9092 <1>\n+key.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <2>\n+value.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <3>\n+client.id=my-client <4>\n+group.id=my-group-id <5>\n+# ...\n+----\n+<1> (Required) Tells the consumer to connect to a Kafka cluster using a _host:port_ bootstrap server address for a Kafka broker.\n+The consumer uses the address to discover and connect to all brokers in the cluster.\n+Use a comma-separated list to specify two or three addresses in case a server is down, but it\u2019s not necessary to provide a list of all the brokers in the cluster.\n+If you are using a loadbalancer service to expose the Kafka cluster, you only need the address for the service as the availability is handled by the loadbalancer.\n+<2> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message keys.\n+<3> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message values.\n+<4> (Optional) The logical name for the client, which is used in logs and metrics to identify the source of a request. The id can also be used to throttle consumers based on processing time quotas.\n+<5> (Conditional) A group id is _required_ if the consumer belongs to a consumer group.\n+\n+Consumer groups are used to share a typically large data stream generated by multiple producers from a given topic.\n+Consumers are grouped using a `group.id`, allowing messages to be spread across the members.\n+\n+== Scaling data consumption using consumer groups\n+\n+Consumer groups share a typically large data stream generated by one or multiple producers from a given topic.\n+Consumers with the same `group.id` property are in the same group.\n+One of the consumers in the group is elected leader and decides how the partitions that the consumers are interested in should be assigned to the consumers.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc9ff9c96964fae9b7cd34d00404b130d90c783f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY4NTgyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If you want a strict ordering of messages from one topic, use one partition.\n          \n          \n            \n            If you want a strict ordering of messages from one topic, use one partition per consumer.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#discussion_r518685825", "createdAt": "2020-11-06T11:15:06Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/managing/con-consumer-config-properties.adoc", "diffHunk": "@@ -0,0 +1,252 @@\n+// This module is included in the following files:\n+//\n+// assembly-client-config.adoc\n+\n+[id='con-consumer-config-properties-{context}']\n+= Kafka consumer configuration tuning\n+\n+Use a basic consumer configuration with optional properties that are tailored to specific use cases.\n+\n+When tuning your consumers your primary concern will be ensuring that they cope efficiently with the amount of data ingested.\n+As with the producer tuning, be prepared to make incremental changes until the consumers operate as expected.\n+\n+== Basic consumer configuration\n+\n+Connection and deserializer properties are required for every consumer.\n+Generally, it is good practice to add a client id for tracking.\n+\n+In a consumer configuration, irrespective of any subsequent configuration:\n+\n+* The consumer fetches from a given offset and consumes the messages in order, unless the offset is changed to skip or re-read messages.\n+* The broker does not know if the consumer processed the responses, even when committing offsets to Kafka because the offsets might be sent to a different broker in the cluster.\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+# ...\n+bootstrap.servers=localhost:9092 <1>\n+key.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <2>\n+value.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <3>\n+client.id=my-client <4>\n+group.id=my-group-id <5>\n+# ...\n+----\n+<1> (Required) Tells the consumer to connect to a Kafka cluster using a _host:port_ bootstrap server address for a Kafka broker.\n+The consumer uses the address to discover and connect to all brokers in the cluster.\n+Use a comma-separated list to specify two or three addresses in case a server is down, but it\u2019s not necessary to provide a list of all the brokers in the cluster.\n+If you are using a loadbalancer service to expose the Kafka cluster, you only need the address for the service as the availability is handled by the loadbalancer.\n+<2> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message keys.\n+<3> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message values.\n+<4> (Optional) The logical name for the client, which is used in logs and metrics to identify the source of a request. The id can also be used to throttle consumers based on processing time quotas.\n+<5> (Conditional) A group id is _required_ if the consumer belongs to a consumer group.\n+\n+Consumer groups are used to share a typically large data stream generated by multiple producers from a given topic.\n+Consumers are grouped using a `group.id`, allowing messages to be spread across the members.\n+\n+== Scaling data consumption using consumer groups\n+\n+Consumer groups share a typically large data stream generated by one or multiple producers from a given topic.\n+Consumers with the same `group.id` property are in the same group.\n+One of the consumers in the group is elected leader and decides how the partitions that the consumers are interested in should be assigned to the consumers.\n+Each partition can only be assigned to a single consumer.\n+\n+If you do not already have as many consumers as partitions,\n+you can scale data consumption by adding more consumer instances with the same `group.id`.\n+Adding more consumers to a group than there are partitions will not help throughput,\n+but it does mean that there are consumers on standby should one stop functioning.\n+If you can meet throughput goals with fewer consumers, you save on resources.\n+\n+Consumers within the same consumer group send offset commits and heartbeats to the same broker.\n+So the greater the number of consumers in the group, the higher the request load on the broker.\n+\n+----\n+# ...\n+group.id=my-group-id <1>\n+# ...\n+----\n+<1> Add a consumer to a consumer group using a group id.\n+\n+== Message ordering guarantees\n+\n+Kafka brokers receive fetch requests from consumers that ask the broker to send messages from a list of topics, partitions and offset positions.\n+\n+A consumer observes messages in a single partition in the same order that they were committed to the broker,\n+which means that Kafka *only* provides ordering guarantees for messages in a single partition.\n+Conversely, if a consumer is consuming messages from multiple partitions, the order of messages in different partitions as observed by the consumer does not necessarily reflect the order in which they were sent.\n+\n+If you want a strict ordering of messages from one topic, use one partition.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc9ff9c96964fae9b7cd34d00404b130d90c783f"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY4OTgxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `fetch.max.bytes` property sets a maximum limit in bytes on the amount of data fetched from the broker at one time,\n          \n          \n            \n            The `fetch.max.bytes` property sets a maximum limit in bytes on the amount of data fetched from the broker at one time.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#discussion_r518689812", "createdAt": "2020-11-06T11:23:19Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/managing/con-consumer-config-properties.adoc", "diffHunk": "@@ -0,0 +1,252 @@\n+// This module is included in the following files:\n+//\n+// assembly-client-config.adoc\n+\n+[id='con-consumer-config-properties-{context}']\n+= Kafka consumer configuration tuning\n+\n+Use a basic consumer configuration with optional properties that are tailored to specific use cases.\n+\n+When tuning your consumers your primary concern will be ensuring that they cope efficiently with the amount of data ingested.\n+As with the producer tuning, be prepared to make incremental changes until the consumers operate as expected.\n+\n+== Basic consumer configuration\n+\n+Connection and deserializer properties are required for every consumer.\n+Generally, it is good practice to add a client id for tracking.\n+\n+In a consumer configuration, irrespective of any subsequent configuration:\n+\n+* The consumer fetches from a given offset and consumes the messages in order, unless the offset is changed to skip or re-read messages.\n+* The broker does not know if the consumer processed the responses, even when committing offsets to Kafka because the offsets might be sent to a different broker in the cluster.\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+# ...\n+bootstrap.servers=localhost:9092 <1>\n+key.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <2>\n+value.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <3>\n+client.id=my-client <4>\n+group.id=my-group-id <5>\n+# ...\n+----\n+<1> (Required) Tells the consumer to connect to a Kafka cluster using a _host:port_ bootstrap server address for a Kafka broker.\n+The consumer uses the address to discover and connect to all brokers in the cluster.\n+Use a comma-separated list to specify two or three addresses in case a server is down, but it\u2019s not necessary to provide a list of all the brokers in the cluster.\n+If you are using a loadbalancer service to expose the Kafka cluster, you only need the address for the service as the availability is handled by the loadbalancer.\n+<2> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message keys.\n+<3> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message values.\n+<4> (Optional) The logical name for the client, which is used in logs and metrics to identify the source of a request. The id can also be used to throttle consumers based on processing time quotas.\n+<5> (Conditional) A group id is _required_ if the consumer belongs to a consumer group.\n+\n+Consumer groups are used to share a typically large data stream generated by multiple producers from a given topic.\n+Consumers are grouped using a `group.id`, allowing messages to be spread across the members.\n+\n+== Scaling data consumption using consumer groups\n+\n+Consumer groups share a typically large data stream generated by one or multiple producers from a given topic.\n+Consumers with the same `group.id` property are in the same group.\n+One of the consumers in the group is elected leader and decides how the partitions that the consumers are interested in should be assigned to the consumers.\n+Each partition can only be assigned to a single consumer.\n+\n+If you do not already have as many consumers as partitions,\n+you can scale data consumption by adding more consumer instances with the same `group.id`.\n+Adding more consumers to a group than there are partitions will not help throughput,\n+but it does mean that there are consumers on standby should one stop functioning.\n+If you can meet throughput goals with fewer consumers, you save on resources.\n+\n+Consumers within the same consumer group send offset commits and heartbeats to the same broker.\n+So the greater the number of consumers in the group, the higher the request load on the broker.\n+\n+----\n+# ...\n+group.id=my-group-id <1>\n+# ...\n+----\n+<1> Add a consumer to a consumer group using a group id.\n+\n+== Message ordering guarantees\n+\n+Kafka brokers receive fetch requests from consumers that ask the broker to send messages from a list of topics, partitions and offset positions.\n+\n+A consumer observes messages in a single partition in the same order that they were committed to the broker,\n+which means that Kafka *only* provides ordering guarantees for messages in a single partition.\n+Conversely, if a consumer is consuming messages from multiple partitions, the order of messages in different partitions as observed by the consumer does not necessarily reflect the order in which they were sent.\n+\n+If you want a strict ordering of messages from one topic, use one partition.\n+\n+== Optimizing throughput and latency\n+\n+Control the number of messages returned when your client application calls `KafkaConsumer.poll()`.\n+\n+Use the `fetch.max.wait.ms` and `fetch.min.bytes` properties to increase the minimum amount of data fetched by the consumer from the Kafka broker.\n+Time-based batching is configured using `fetch.max.wait.ms`, and size-based batching is configured using `fetch.min.bytes`.\n+\n+If CPU utilization in the consumer or broker is high, it might be because there are too many requests from the consumer.\n+You can adjust `fetch.max.wait.ms` and `fetch.min.bytes` properties higher so that there are fewer requests and messages are delivered in bigger batches.\n+By adjusting higher, throughput is improved with some cost to latency.\n+You can also adjust higher if the amount of data being produced is low.\n+\n+For example, if you set `fetch.max.wait.ms` to 500ms and `fetch.min.bytes` to 16384 bytes,\n+when Kafka receives a fetch request from the consumer it will respond when the first of either threshold is reached.\n+\n+Conversely, you can adjust the `fetch.max.wait.ms` and `fetch.min.bytes` properties lower to improve end-to-end latency.\n+\n+----\n+# ...\n+fetch.max.wait.ms=500 <1>\n+fetch.min.bytes=16384 <2>\n+# ...\n+----\n+<1> The maximum time in milliseconds the broker will wait before completing fetch requests.\n+The default is `500` milliseconds.\n+<2> If a minimum batch size in bytes is used, a request is sent when the minimum is reached, or messages have been queued for longer than `fetch.max.wait.ms` (whichever comes sooner).\n+Adding the delay allows batches to accumulate messages up to the batch size.\n+\n+.Lowering latency by increasing the fetch request size\n+\n+Use the `fetch.max.bytes` and `max.partition.fetch.bytes` properties to increase the maximum amount of data fetched by the consumer from the Kafka broker.\n+\n+The `fetch.max.bytes` property sets a maximum limit in bytes on the amount of data fetched from the broker at one time,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc9ff9c96964fae9b7cd34d00404b130d90c783f"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY5MDM2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The maximum amount of memory a client can consume is approximately:\n          \n          \n            \n            The approximate maximum amount of memory a client can consume is calculated as follows:", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#discussion_r518690369", "createdAt": "2020-11-06T11:24:26Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/managing/con-consumer-config-properties.adoc", "diffHunk": "@@ -0,0 +1,252 @@\n+// This module is included in the following files:\n+//\n+// assembly-client-config.adoc\n+\n+[id='con-consumer-config-properties-{context}']\n+= Kafka consumer configuration tuning\n+\n+Use a basic consumer configuration with optional properties that are tailored to specific use cases.\n+\n+When tuning your consumers your primary concern will be ensuring that they cope efficiently with the amount of data ingested.\n+As with the producer tuning, be prepared to make incremental changes until the consumers operate as expected.\n+\n+== Basic consumer configuration\n+\n+Connection and deserializer properties are required for every consumer.\n+Generally, it is good practice to add a client id for tracking.\n+\n+In a consumer configuration, irrespective of any subsequent configuration:\n+\n+* The consumer fetches from a given offset and consumes the messages in order, unless the offset is changed to skip or re-read messages.\n+* The broker does not know if the consumer processed the responses, even when committing offsets to Kafka because the offsets might be sent to a different broker in the cluster.\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+# ...\n+bootstrap.servers=localhost:9092 <1>\n+key.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <2>\n+value.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <3>\n+client.id=my-client <4>\n+group.id=my-group-id <5>\n+# ...\n+----\n+<1> (Required) Tells the consumer to connect to a Kafka cluster using a _host:port_ bootstrap server address for a Kafka broker.\n+The consumer uses the address to discover and connect to all brokers in the cluster.\n+Use a comma-separated list to specify two or three addresses in case a server is down, but it\u2019s not necessary to provide a list of all the brokers in the cluster.\n+If you are using a loadbalancer service to expose the Kafka cluster, you only need the address for the service as the availability is handled by the loadbalancer.\n+<2> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message keys.\n+<3> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message values.\n+<4> (Optional) The logical name for the client, which is used in logs and metrics to identify the source of a request. The id can also be used to throttle consumers based on processing time quotas.\n+<5> (Conditional) A group id is _required_ if the consumer belongs to a consumer group.\n+\n+Consumer groups are used to share a typically large data stream generated by multiple producers from a given topic.\n+Consumers are grouped using a `group.id`, allowing messages to be spread across the members.\n+\n+== Scaling data consumption using consumer groups\n+\n+Consumer groups share a typically large data stream generated by one or multiple producers from a given topic.\n+Consumers with the same `group.id` property are in the same group.\n+One of the consumers in the group is elected leader and decides how the partitions that the consumers are interested in should be assigned to the consumers.\n+Each partition can only be assigned to a single consumer.\n+\n+If you do not already have as many consumers as partitions,\n+you can scale data consumption by adding more consumer instances with the same `group.id`.\n+Adding more consumers to a group than there are partitions will not help throughput,\n+but it does mean that there are consumers on standby should one stop functioning.\n+If you can meet throughput goals with fewer consumers, you save on resources.\n+\n+Consumers within the same consumer group send offset commits and heartbeats to the same broker.\n+So the greater the number of consumers in the group, the higher the request load on the broker.\n+\n+----\n+# ...\n+group.id=my-group-id <1>\n+# ...\n+----\n+<1> Add a consumer to a consumer group using a group id.\n+\n+== Message ordering guarantees\n+\n+Kafka brokers receive fetch requests from consumers that ask the broker to send messages from a list of topics, partitions and offset positions.\n+\n+A consumer observes messages in a single partition in the same order that they were committed to the broker,\n+which means that Kafka *only* provides ordering guarantees for messages in a single partition.\n+Conversely, if a consumer is consuming messages from multiple partitions, the order of messages in different partitions as observed by the consumer does not necessarily reflect the order in which they were sent.\n+\n+If you want a strict ordering of messages from one topic, use one partition.\n+\n+== Optimizing throughput and latency\n+\n+Control the number of messages returned when your client application calls `KafkaConsumer.poll()`.\n+\n+Use the `fetch.max.wait.ms` and `fetch.min.bytes` properties to increase the minimum amount of data fetched by the consumer from the Kafka broker.\n+Time-based batching is configured using `fetch.max.wait.ms`, and size-based batching is configured using `fetch.min.bytes`.\n+\n+If CPU utilization in the consumer or broker is high, it might be because there are too many requests from the consumer.\n+You can adjust `fetch.max.wait.ms` and `fetch.min.bytes` properties higher so that there are fewer requests and messages are delivered in bigger batches.\n+By adjusting higher, throughput is improved with some cost to latency.\n+You can also adjust higher if the amount of data being produced is low.\n+\n+For example, if you set `fetch.max.wait.ms` to 500ms and `fetch.min.bytes` to 16384 bytes,\n+when Kafka receives a fetch request from the consumer it will respond when the first of either threshold is reached.\n+\n+Conversely, you can adjust the `fetch.max.wait.ms` and `fetch.min.bytes` properties lower to improve end-to-end latency.\n+\n+----\n+# ...\n+fetch.max.wait.ms=500 <1>\n+fetch.min.bytes=16384 <2>\n+# ...\n+----\n+<1> The maximum time in milliseconds the broker will wait before completing fetch requests.\n+The default is `500` milliseconds.\n+<2> If a minimum batch size in bytes is used, a request is sent when the minimum is reached, or messages have been queued for longer than `fetch.max.wait.ms` (whichever comes sooner).\n+Adding the delay allows batches to accumulate messages up to the batch size.\n+\n+.Lowering latency by increasing the fetch request size\n+\n+Use the `fetch.max.bytes` and `max.partition.fetch.bytes` properties to increase the maximum amount of data fetched by the consumer from the Kafka broker.\n+\n+The `fetch.max.bytes` property sets a maximum limit in bytes on the amount of data fetched from the broker at one time,\n+\n+The `max.partition.fetch.bytes` sets a maximum limit in bytes on how much data is returned for each partition,\n+which must always be larger than the number of bytes set in the broker or topic configuration for `max.message.bytes`.\n+\n+The maximum amount of memory a client can consume is approximately:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc9ff9c96964fae9b7cd34d00404b130d90c783f"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY5MDgwOQ==", "bodyText": "Add \"for example\"?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#discussion_r518690809", "createdAt": "2020-11-06T11:25:16Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/managing/con-consumer-config-properties.adoc", "diffHunk": "@@ -0,0 +1,252 @@\n+// This module is included in the following files:\n+//\n+// assembly-client-config.adoc\n+\n+[id='con-consumer-config-properties-{context}']\n+= Kafka consumer configuration tuning\n+\n+Use a basic consumer configuration with optional properties that are tailored to specific use cases.\n+\n+When tuning your consumers your primary concern will be ensuring that they cope efficiently with the amount of data ingested.\n+As with the producer tuning, be prepared to make incremental changes until the consumers operate as expected.\n+\n+== Basic consumer configuration\n+\n+Connection and deserializer properties are required for every consumer.\n+Generally, it is good practice to add a client id for tracking.\n+\n+In a consumer configuration, irrespective of any subsequent configuration:\n+\n+* The consumer fetches from a given offset and consumes the messages in order, unless the offset is changed to skip or re-read messages.\n+* The broker does not know if the consumer processed the responses, even when committing offsets to Kafka because the offsets might be sent to a different broker in the cluster.\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+# ...\n+bootstrap.servers=localhost:9092 <1>\n+key.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <2>\n+value.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <3>\n+client.id=my-client <4>\n+group.id=my-group-id <5>\n+# ...\n+----\n+<1> (Required) Tells the consumer to connect to a Kafka cluster using a _host:port_ bootstrap server address for a Kafka broker.\n+The consumer uses the address to discover and connect to all brokers in the cluster.\n+Use a comma-separated list to specify two or three addresses in case a server is down, but it\u2019s not necessary to provide a list of all the brokers in the cluster.\n+If you are using a loadbalancer service to expose the Kafka cluster, you only need the address for the service as the availability is handled by the loadbalancer.\n+<2> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message keys.\n+<3> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message values.\n+<4> (Optional) The logical name for the client, which is used in logs and metrics to identify the source of a request. The id can also be used to throttle consumers based on processing time quotas.\n+<5> (Conditional) A group id is _required_ if the consumer belongs to a consumer group.\n+\n+Consumer groups are used to share a typically large data stream generated by multiple producers from a given topic.\n+Consumers are grouped using a `group.id`, allowing messages to be spread across the members.\n+\n+== Scaling data consumption using consumer groups\n+\n+Consumer groups share a typically large data stream generated by one or multiple producers from a given topic.\n+Consumers with the same `group.id` property are in the same group.\n+One of the consumers in the group is elected leader and decides how the partitions that the consumers are interested in should be assigned to the consumers.\n+Each partition can only be assigned to a single consumer.\n+\n+If you do not already have as many consumers as partitions,\n+you can scale data consumption by adding more consumer instances with the same `group.id`.\n+Adding more consumers to a group than there are partitions will not help throughput,\n+but it does mean that there are consumers on standby should one stop functioning.\n+If you can meet throughput goals with fewer consumers, you save on resources.\n+\n+Consumers within the same consumer group send offset commits and heartbeats to the same broker.\n+So the greater the number of consumers in the group, the higher the request load on the broker.\n+\n+----\n+# ...\n+group.id=my-group-id <1>\n+# ...\n+----\n+<1> Add a consumer to a consumer group using a group id.\n+\n+== Message ordering guarantees\n+\n+Kafka brokers receive fetch requests from consumers that ask the broker to send messages from a list of topics, partitions and offset positions.\n+\n+A consumer observes messages in a single partition in the same order that they were committed to the broker,\n+which means that Kafka *only* provides ordering guarantees for messages in a single partition.\n+Conversely, if a consumer is consuming messages from multiple partitions, the order of messages in different partitions as observed by the consumer does not necessarily reflect the order in which they were sent.\n+\n+If you want a strict ordering of messages from one topic, use one partition.\n+\n+== Optimizing throughput and latency\n+\n+Control the number of messages returned when your client application calls `KafkaConsumer.poll()`.\n+\n+Use the `fetch.max.wait.ms` and `fetch.min.bytes` properties to increase the minimum amount of data fetched by the consumer from the Kafka broker.\n+Time-based batching is configured using `fetch.max.wait.ms`, and size-based batching is configured using `fetch.min.bytes`.\n+\n+If CPU utilization in the consumer or broker is high, it might be because there are too many requests from the consumer.\n+You can adjust `fetch.max.wait.ms` and `fetch.min.bytes` properties higher so that there are fewer requests and messages are delivered in bigger batches.\n+By adjusting higher, throughput is improved with some cost to latency.\n+You can also adjust higher if the amount of data being produced is low.\n+\n+For example, if you set `fetch.max.wait.ms` to 500ms and `fetch.min.bytes` to 16384 bytes,\n+when Kafka receives a fetch request from the consumer it will respond when the first of either threshold is reached.\n+\n+Conversely, you can adjust the `fetch.max.wait.ms` and `fetch.min.bytes` properties lower to improve end-to-end latency.\n+\n+----\n+# ...\n+fetch.max.wait.ms=500 <1>\n+fetch.min.bytes=16384 <2>\n+# ...\n+----\n+<1> The maximum time in milliseconds the broker will wait before completing fetch requests.\n+The default is `500` milliseconds.\n+<2> If a minimum batch size in bytes is used, a request is sent when the minimum is reached, or messages have been queued for longer than `fetch.max.wait.ms` (whichever comes sooner).\n+Adding the delay allows batches to accumulate messages up to the batch size.\n+\n+.Lowering latency by increasing the fetch request size\n+\n+Use the `fetch.max.bytes` and `max.partition.fetch.bytes` properties to increase the maximum amount of data fetched by the consumer from the Kafka broker.\n+\n+The `fetch.max.bytes` property sets a maximum limit in bytes on the amount of data fetched from the broker at one time,\n+\n+The `max.partition.fetch.bytes` sets a maximum limit in bytes on how much data is returned for each partition,\n+which must always be larger than the number of bytes set in the broker or topic configuration for `max.message.bytes`.\n+\n+The maximum amount of memory a client can consume is approximately:\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+_NUMBER-OF-BROKERS_ * fetch.max.bytes and _NUMBER-OF-PARTITIONS_ * max.partition.fetch.bytes\n+----\n+\n+If memory usage can accommodate it, you can increase the values of these two properties.\n+By allowing more data in each request, latency is improved as there are fewer fetch requests.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc9ff9c96964fae9b7cd34d00404b130d90c783f"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY5NTg2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If this impacts throughput unduly, you can commit less frequently,\n          \n          \n            \n            If this negatively affects throughput, you can commit less frequently,", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#discussion_r518695862", "createdAt": "2020-11-06T11:36:13Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/managing/con-consumer-config-properties.adoc", "diffHunk": "@@ -0,0 +1,252 @@\n+// This module is included in the following files:\n+//\n+// assembly-client-config.adoc\n+\n+[id='con-consumer-config-properties-{context}']\n+= Kafka consumer configuration tuning\n+\n+Use a basic consumer configuration with optional properties that are tailored to specific use cases.\n+\n+When tuning your consumers your primary concern will be ensuring that they cope efficiently with the amount of data ingested.\n+As with the producer tuning, be prepared to make incremental changes until the consumers operate as expected.\n+\n+== Basic consumer configuration\n+\n+Connection and deserializer properties are required for every consumer.\n+Generally, it is good practice to add a client id for tracking.\n+\n+In a consumer configuration, irrespective of any subsequent configuration:\n+\n+* The consumer fetches from a given offset and consumes the messages in order, unless the offset is changed to skip or re-read messages.\n+* The broker does not know if the consumer processed the responses, even when committing offsets to Kafka because the offsets might be sent to a different broker in the cluster.\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+# ...\n+bootstrap.servers=localhost:9092 <1>\n+key.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <2>\n+value.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <3>\n+client.id=my-client <4>\n+group.id=my-group-id <5>\n+# ...\n+----\n+<1> (Required) Tells the consumer to connect to a Kafka cluster using a _host:port_ bootstrap server address for a Kafka broker.\n+The consumer uses the address to discover and connect to all brokers in the cluster.\n+Use a comma-separated list to specify two or three addresses in case a server is down, but it\u2019s not necessary to provide a list of all the brokers in the cluster.\n+If you are using a loadbalancer service to expose the Kafka cluster, you only need the address for the service as the availability is handled by the loadbalancer.\n+<2> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message keys.\n+<3> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message values.\n+<4> (Optional) The logical name for the client, which is used in logs and metrics to identify the source of a request. The id can also be used to throttle consumers based on processing time quotas.\n+<5> (Conditional) A group id is _required_ if the consumer belongs to a consumer group.\n+\n+Consumer groups are used to share a typically large data stream generated by multiple producers from a given topic.\n+Consumers are grouped using a `group.id`, allowing messages to be spread across the members.\n+\n+== Scaling data consumption using consumer groups\n+\n+Consumer groups share a typically large data stream generated by one or multiple producers from a given topic.\n+Consumers with the same `group.id` property are in the same group.\n+One of the consumers in the group is elected leader and decides how the partitions that the consumers are interested in should be assigned to the consumers.\n+Each partition can only be assigned to a single consumer.\n+\n+If you do not already have as many consumers as partitions,\n+you can scale data consumption by adding more consumer instances with the same `group.id`.\n+Adding more consumers to a group than there are partitions will not help throughput,\n+but it does mean that there are consumers on standby should one stop functioning.\n+If you can meet throughput goals with fewer consumers, you save on resources.\n+\n+Consumers within the same consumer group send offset commits and heartbeats to the same broker.\n+So the greater the number of consumers in the group, the higher the request load on the broker.\n+\n+----\n+# ...\n+group.id=my-group-id <1>\n+# ...\n+----\n+<1> Add a consumer to a consumer group using a group id.\n+\n+== Message ordering guarantees\n+\n+Kafka brokers receive fetch requests from consumers that ask the broker to send messages from a list of topics, partitions and offset positions.\n+\n+A consumer observes messages in a single partition in the same order that they were committed to the broker,\n+which means that Kafka *only* provides ordering guarantees for messages in a single partition.\n+Conversely, if a consumer is consuming messages from multiple partitions, the order of messages in different partitions as observed by the consumer does not necessarily reflect the order in which they were sent.\n+\n+If you want a strict ordering of messages from one topic, use one partition.\n+\n+== Optimizing throughput and latency\n+\n+Control the number of messages returned when your client application calls `KafkaConsumer.poll()`.\n+\n+Use the `fetch.max.wait.ms` and `fetch.min.bytes` properties to increase the minimum amount of data fetched by the consumer from the Kafka broker.\n+Time-based batching is configured using `fetch.max.wait.ms`, and size-based batching is configured using `fetch.min.bytes`.\n+\n+If CPU utilization in the consumer or broker is high, it might be because there are too many requests from the consumer.\n+You can adjust `fetch.max.wait.ms` and `fetch.min.bytes` properties higher so that there are fewer requests and messages are delivered in bigger batches.\n+By adjusting higher, throughput is improved with some cost to latency.\n+You can also adjust higher if the amount of data being produced is low.\n+\n+For example, if you set `fetch.max.wait.ms` to 500ms and `fetch.min.bytes` to 16384 bytes,\n+when Kafka receives a fetch request from the consumer it will respond when the first of either threshold is reached.\n+\n+Conversely, you can adjust the `fetch.max.wait.ms` and `fetch.min.bytes` properties lower to improve end-to-end latency.\n+\n+----\n+# ...\n+fetch.max.wait.ms=500 <1>\n+fetch.min.bytes=16384 <2>\n+# ...\n+----\n+<1> The maximum time in milliseconds the broker will wait before completing fetch requests.\n+The default is `500` milliseconds.\n+<2> If a minimum batch size in bytes is used, a request is sent when the minimum is reached, or messages have been queued for longer than `fetch.max.wait.ms` (whichever comes sooner).\n+Adding the delay allows batches to accumulate messages up to the batch size.\n+\n+.Lowering latency by increasing the fetch request size\n+\n+Use the `fetch.max.bytes` and `max.partition.fetch.bytes` properties to increase the maximum amount of data fetched by the consumer from the Kafka broker.\n+\n+The `fetch.max.bytes` property sets a maximum limit in bytes on the amount of data fetched from the broker at one time,\n+\n+The `max.partition.fetch.bytes` sets a maximum limit in bytes on how much data is returned for each partition,\n+which must always be larger than the number of bytes set in the broker or topic configuration for `max.message.bytes`.\n+\n+The maximum amount of memory a client can consume is approximately:\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+_NUMBER-OF-BROKERS_ * fetch.max.bytes and _NUMBER-OF-PARTITIONS_ * max.partition.fetch.bytes\n+----\n+\n+If memory usage can accommodate it, you can increase the values of these two properties.\n+By allowing more data in each request, latency is improved as there are fewer fetch requests.\n+\n+----\n+# ...\n+fetch.max.bytes=52428800 <1>\n+max.partition.fetch.bytes=1048576 <2>\n+# ...\n+----\n+<1> The maximum amount of data in bytes returned for a fetch request.\n+<2> The maximum amount of data in bytes returned for each partition.\n+\n+== Avoiding data loss or duplication when committing offsets\n+\n+The Kafka _auto-commit mechanism_ allows a consumer to commit the offsets of messages automatically.\n+If enabled, the consumer will commit offsets received from polling the broker at 5000ms intervals.\n+\n+The auto-commit mechanism is convenient, but it introduces a risk of data loss and duplication.\n+If a consumer has fetched and transformed a number of messages, but the system crashes with processed messages in the consumer buffer when performing an auto-commit, that data is lost.\n+If the system crashes after processing the messages, but before performing the auto-commit, the data is duplicated on another consumer instance after rebalancing.\n+\n+To minimize the likelihood of data loss or duplication, set `enable.auto.commit` to `false` and develop your client application to have more control over committing offsets.\n+Or use `auto.commit.interval.ms=1` to decrease the intervals between commits.\n+\n+By setting to `enable.auto.commit` to `false`, you can commit offsets after *all* processing has been performed and the message has been consumed.\n+For example, you can set up your application to call the Kafka `commitSync` and `commitAsync` commit APIs.\n+\n+The `commitSync` API commits the offsets in a message batch returned from polling.\n+You call the API when you are finished processing all the messages in the batch.\n+If you use the `commitSync` API, the application will not poll for new messages until the last offset in the batch is committed.\n+If this impacts throughput unduly, you can commit less frequently,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc9ff9c96964fae9b7cd34d00404b130d90c783f"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY5NjQ0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Also, consider using transactional ids and having idempotence enabled (`enable.idempotence=true`) on the producer side to guarantee exactly once delivery.\n          \n          \n            \n            Also, consider using transactional ids and having idempotence enabled (`enable.idempotence=true`) on the producer side to guarantee exactly-once delivery.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#discussion_r518696444", "createdAt": "2020-11-06T11:37:27Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/managing/con-consumer-config-properties.adoc", "diffHunk": "@@ -0,0 +1,252 @@\n+// This module is included in the following files:\n+//\n+// assembly-client-config.adoc\n+\n+[id='con-consumer-config-properties-{context}']\n+= Kafka consumer configuration tuning\n+\n+Use a basic consumer configuration with optional properties that are tailored to specific use cases.\n+\n+When tuning your consumers your primary concern will be ensuring that they cope efficiently with the amount of data ingested.\n+As with the producer tuning, be prepared to make incremental changes until the consumers operate as expected.\n+\n+== Basic consumer configuration\n+\n+Connection and deserializer properties are required for every consumer.\n+Generally, it is good practice to add a client id for tracking.\n+\n+In a consumer configuration, irrespective of any subsequent configuration:\n+\n+* The consumer fetches from a given offset and consumes the messages in order, unless the offset is changed to skip or re-read messages.\n+* The broker does not know if the consumer processed the responses, even when committing offsets to Kafka because the offsets might be sent to a different broker in the cluster.\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+# ...\n+bootstrap.servers=localhost:9092 <1>\n+key.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <2>\n+value.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <3>\n+client.id=my-client <4>\n+group.id=my-group-id <5>\n+# ...\n+----\n+<1> (Required) Tells the consumer to connect to a Kafka cluster using a _host:port_ bootstrap server address for a Kafka broker.\n+The consumer uses the address to discover and connect to all brokers in the cluster.\n+Use a comma-separated list to specify two or three addresses in case a server is down, but it\u2019s not necessary to provide a list of all the brokers in the cluster.\n+If you are using a loadbalancer service to expose the Kafka cluster, you only need the address for the service as the availability is handled by the loadbalancer.\n+<2> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message keys.\n+<3> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message values.\n+<4> (Optional) The logical name for the client, which is used in logs and metrics to identify the source of a request. The id can also be used to throttle consumers based on processing time quotas.\n+<5> (Conditional) A group id is _required_ if the consumer belongs to a consumer group.\n+\n+Consumer groups are used to share a typically large data stream generated by multiple producers from a given topic.\n+Consumers are grouped using a `group.id`, allowing messages to be spread across the members.\n+\n+== Scaling data consumption using consumer groups\n+\n+Consumer groups share a typically large data stream generated by one or multiple producers from a given topic.\n+Consumers with the same `group.id` property are in the same group.\n+One of the consumers in the group is elected leader and decides how the partitions that the consumers are interested in should be assigned to the consumers.\n+Each partition can only be assigned to a single consumer.\n+\n+If you do not already have as many consumers as partitions,\n+you can scale data consumption by adding more consumer instances with the same `group.id`.\n+Adding more consumers to a group than there are partitions will not help throughput,\n+but it does mean that there are consumers on standby should one stop functioning.\n+If you can meet throughput goals with fewer consumers, you save on resources.\n+\n+Consumers within the same consumer group send offset commits and heartbeats to the same broker.\n+So the greater the number of consumers in the group, the higher the request load on the broker.\n+\n+----\n+# ...\n+group.id=my-group-id <1>\n+# ...\n+----\n+<1> Add a consumer to a consumer group using a group id.\n+\n+== Message ordering guarantees\n+\n+Kafka brokers receive fetch requests from consumers that ask the broker to send messages from a list of topics, partitions and offset positions.\n+\n+A consumer observes messages in a single partition in the same order that they were committed to the broker,\n+which means that Kafka *only* provides ordering guarantees for messages in a single partition.\n+Conversely, if a consumer is consuming messages from multiple partitions, the order of messages in different partitions as observed by the consumer does not necessarily reflect the order in which they were sent.\n+\n+If you want a strict ordering of messages from one topic, use one partition.\n+\n+== Optimizing throughput and latency\n+\n+Control the number of messages returned when your client application calls `KafkaConsumer.poll()`.\n+\n+Use the `fetch.max.wait.ms` and `fetch.min.bytes` properties to increase the minimum amount of data fetched by the consumer from the Kafka broker.\n+Time-based batching is configured using `fetch.max.wait.ms`, and size-based batching is configured using `fetch.min.bytes`.\n+\n+If CPU utilization in the consumer or broker is high, it might be because there are too many requests from the consumer.\n+You can adjust `fetch.max.wait.ms` and `fetch.min.bytes` properties higher so that there are fewer requests and messages are delivered in bigger batches.\n+By adjusting higher, throughput is improved with some cost to latency.\n+You can also adjust higher if the amount of data being produced is low.\n+\n+For example, if you set `fetch.max.wait.ms` to 500ms and `fetch.min.bytes` to 16384 bytes,\n+when Kafka receives a fetch request from the consumer it will respond when the first of either threshold is reached.\n+\n+Conversely, you can adjust the `fetch.max.wait.ms` and `fetch.min.bytes` properties lower to improve end-to-end latency.\n+\n+----\n+# ...\n+fetch.max.wait.ms=500 <1>\n+fetch.min.bytes=16384 <2>\n+# ...\n+----\n+<1> The maximum time in milliseconds the broker will wait before completing fetch requests.\n+The default is `500` milliseconds.\n+<2> If a minimum batch size in bytes is used, a request is sent when the minimum is reached, or messages have been queued for longer than `fetch.max.wait.ms` (whichever comes sooner).\n+Adding the delay allows batches to accumulate messages up to the batch size.\n+\n+.Lowering latency by increasing the fetch request size\n+\n+Use the `fetch.max.bytes` and `max.partition.fetch.bytes` properties to increase the maximum amount of data fetched by the consumer from the Kafka broker.\n+\n+The `fetch.max.bytes` property sets a maximum limit in bytes on the amount of data fetched from the broker at one time,\n+\n+The `max.partition.fetch.bytes` sets a maximum limit in bytes on how much data is returned for each partition,\n+which must always be larger than the number of bytes set in the broker or topic configuration for `max.message.bytes`.\n+\n+The maximum amount of memory a client can consume is approximately:\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+_NUMBER-OF-BROKERS_ * fetch.max.bytes and _NUMBER-OF-PARTITIONS_ * max.partition.fetch.bytes\n+----\n+\n+If memory usage can accommodate it, you can increase the values of these two properties.\n+By allowing more data in each request, latency is improved as there are fewer fetch requests.\n+\n+----\n+# ...\n+fetch.max.bytes=52428800 <1>\n+max.partition.fetch.bytes=1048576 <2>\n+# ...\n+----\n+<1> The maximum amount of data in bytes returned for a fetch request.\n+<2> The maximum amount of data in bytes returned for each partition.\n+\n+== Avoiding data loss or duplication when committing offsets\n+\n+The Kafka _auto-commit mechanism_ allows a consumer to commit the offsets of messages automatically.\n+If enabled, the consumer will commit offsets received from polling the broker at 5000ms intervals.\n+\n+The auto-commit mechanism is convenient, but it introduces a risk of data loss and duplication.\n+If a consumer has fetched and transformed a number of messages, but the system crashes with processed messages in the consumer buffer when performing an auto-commit, that data is lost.\n+If the system crashes after processing the messages, but before performing the auto-commit, the data is duplicated on another consumer instance after rebalancing.\n+\n+To minimize the likelihood of data loss or duplication, set `enable.auto.commit` to `false` and develop your client application to have more control over committing offsets.\n+Or use `auto.commit.interval.ms=1` to decrease the intervals between commits.\n+\n+By setting to `enable.auto.commit` to `false`, you can commit offsets after *all* processing has been performed and the message has been consumed.\n+For example, you can set up your application to call the Kafka `commitSync` and `commitAsync` commit APIs.\n+\n+The `commitSync` API commits the offsets in a message batch returned from polling.\n+You call the API when you are finished processing all the messages in the batch.\n+If you use the `commitSync` API, the application will not poll for new messages until the last offset in the batch is committed.\n+If this impacts throughput unduly, you can commit less frequently,\n+or you can use the `commitAsync` API.\n+The `commitAsync` API does not wait for the broker to respond to a commit request,\n+but risks creating more duplicates when rebalancing.\n+A common approach is to combine both commit APIs in an application, with the `commitSync` API used just before shutting the consumer down or rebalancing to make sure the final commit is successful.\n+\n+Also, consider using transactional ids and having idempotence enabled (`enable.idempotence=true`) on the producer side to guarantee exactly once delivery.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc9ff9c96964fae9b7cd34d00404b130d90c783f"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY5Njk0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            However, this will cause an increase in end-to-end latency, because the consumer won\u2019t be able to return a message until the brokers have written the transaction markers that record the result of the transaction (_committed_ or _aborted_).\n          \n          \n            \n            However, this will cause an increase in end-to-end latency, because the consumer will not be able to return a message until the brokers have written the transaction markers that record the result of the transaction (_committed_ or _aborted_).", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#discussion_r518696940", "createdAt": "2020-11-06T11:38:34Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/managing/con-consumer-config-properties.adoc", "diffHunk": "@@ -0,0 +1,252 @@\n+// This module is included in the following files:\n+//\n+// assembly-client-config.adoc\n+\n+[id='con-consumer-config-properties-{context}']\n+= Kafka consumer configuration tuning\n+\n+Use a basic consumer configuration with optional properties that are tailored to specific use cases.\n+\n+When tuning your consumers your primary concern will be ensuring that they cope efficiently with the amount of data ingested.\n+As with the producer tuning, be prepared to make incremental changes until the consumers operate as expected.\n+\n+== Basic consumer configuration\n+\n+Connection and deserializer properties are required for every consumer.\n+Generally, it is good practice to add a client id for tracking.\n+\n+In a consumer configuration, irrespective of any subsequent configuration:\n+\n+* The consumer fetches from a given offset and consumes the messages in order, unless the offset is changed to skip or re-read messages.\n+* The broker does not know if the consumer processed the responses, even when committing offsets to Kafka because the offsets might be sent to a different broker in the cluster.\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+# ...\n+bootstrap.servers=localhost:9092 <1>\n+key.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <2>\n+value.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <3>\n+client.id=my-client <4>\n+group.id=my-group-id <5>\n+# ...\n+----\n+<1> (Required) Tells the consumer to connect to a Kafka cluster using a _host:port_ bootstrap server address for a Kafka broker.\n+The consumer uses the address to discover and connect to all brokers in the cluster.\n+Use a comma-separated list to specify two or three addresses in case a server is down, but it\u2019s not necessary to provide a list of all the brokers in the cluster.\n+If you are using a loadbalancer service to expose the Kafka cluster, you only need the address for the service as the availability is handled by the loadbalancer.\n+<2> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message keys.\n+<3> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message values.\n+<4> (Optional) The logical name for the client, which is used in logs and metrics to identify the source of a request. The id can also be used to throttle consumers based on processing time quotas.\n+<5> (Conditional) A group id is _required_ if the consumer belongs to a consumer group.\n+\n+Consumer groups are used to share a typically large data stream generated by multiple producers from a given topic.\n+Consumers are grouped using a `group.id`, allowing messages to be spread across the members.\n+\n+== Scaling data consumption using consumer groups\n+\n+Consumer groups share a typically large data stream generated by one or multiple producers from a given topic.\n+Consumers with the same `group.id` property are in the same group.\n+One of the consumers in the group is elected leader and decides how the partitions that the consumers are interested in should be assigned to the consumers.\n+Each partition can only be assigned to a single consumer.\n+\n+If you do not already have as many consumers as partitions,\n+you can scale data consumption by adding more consumer instances with the same `group.id`.\n+Adding more consumers to a group than there are partitions will not help throughput,\n+but it does mean that there are consumers on standby should one stop functioning.\n+If you can meet throughput goals with fewer consumers, you save on resources.\n+\n+Consumers within the same consumer group send offset commits and heartbeats to the same broker.\n+So the greater the number of consumers in the group, the higher the request load on the broker.\n+\n+----\n+# ...\n+group.id=my-group-id <1>\n+# ...\n+----\n+<1> Add a consumer to a consumer group using a group id.\n+\n+== Message ordering guarantees\n+\n+Kafka brokers receive fetch requests from consumers that ask the broker to send messages from a list of topics, partitions and offset positions.\n+\n+A consumer observes messages in a single partition in the same order that they were committed to the broker,\n+which means that Kafka *only* provides ordering guarantees for messages in a single partition.\n+Conversely, if a consumer is consuming messages from multiple partitions, the order of messages in different partitions as observed by the consumer does not necessarily reflect the order in which they were sent.\n+\n+If you want a strict ordering of messages from one topic, use one partition.\n+\n+== Optimizing throughput and latency\n+\n+Control the number of messages returned when your client application calls `KafkaConsumer.poll()`.\n+\n+Use the `fetch.max.wait.ms` and `fetch.min.bytes` properties to increase the minimum amount of data fetched by the consumer from the Kafka broker.\n+Time-based batching is configured using `fetch.max.wait.ms`, and size-based batching is configured using `fetch.min.bytes`.\n+\n+If CPU utilization in the consumer or broker is high, it might be because there are too many requests from the consumer.\n+You can adjust `fetch.max.wait.ms` and `fetch.min.bytes` properties higher so that there are fewer requests and messages are delivered in bigger batches.\n+By adjusting higher, throughput is improved with some cost to latency.\n+You can also adjust higher if the amount of data being produced is low.\n+\n+For example, if you set `fetch.max.wait.ms` to 500ms and `fetch.min.bytes` to 16384 bytes,\n+when Kafka receives a fetch request from the consumer it will respond when the first of either threshold is reached.\n+\n+Conversely, you can adjust the `fetch.max.wait.ms` and `fetch.min.bytes` properties lower to improve end-to-end latency.\n+\n+----\n+# ...\n+fetch.max.wait.ms=500 <1>\n+fetch.min.bytes=16384 <2>\n+# ...\n+----\n+<1> The maximum time in milliseconds the broker will wait before completing fetch requests.\n+The default is `500` milliseconds.\n+<2> If a minimum batch size in bytes is used, a request is sent when the minimum is reached, or messages have been queued for longer than `fetch.max.wait.ms` (whichever comes sooner).\n+Adding the delay allows batches to accumulate messages up to the batch size.\n+\n+.Lowering latency by increasing the fetch request size\n+\n+Use the `fetch.max.bytes` and `max.partition.fetch.bytes` properties to increase the maximum amount of data fetched by the consumer from the Kafka broker.\n+\n+The `fetch.max.bytes` property sets a maximum limit in bytes on the amount of data fetched from the broker at one time,\n+\n+The `max.partition.fetch.bytes` sets a maximum limit in bytes on how much data is returned for each partition,\n+which must always be larger than the number of bytes set in the broker or topic configuration for `max.message.bytes`.\n+\n+The maximum amount of memory a client can consume is approximately:\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+_NUMBER-OF-BROKERS_ * fetch.max.bytes and _NUMBER-OF-PARTITIONS_ * max.partition.fetch.bytes\n+----\n+\n+If memory usage can accommodate it, you can increase the values of these two properties.\n+By allowing more data in each request, latency is improved as there are fewer fetch requests.\n+\n+----\n+# ...\n+fetch.max.bytes=52428800 <1>\n+max.partition.fetch.bytes=1048576 <2>\n+# ...\n+----\n+<1> The maximum amount of data in bytes returned for a fetch request.\n+<2> The maximum amount of data in bytes returned for each partition.\n+\n+== Avoiding data loss or duplication when committing offsets\n+\n+The Kafka _auto-commit mechanism_ allows a consumer to commit the offsets of messages automatically.\n+If enabled, the consumer will commit offsets received from polling the broker at 5000ms intervals.\n+\n+The auto-commit mechanism is convenient, but it introduces a risk of data loss and duplication.\n+If a consumer has fetched and transformed a number of messages, but the system crashes with processed messages in the consumer buffer when performing an auto-commit, that data is lost.\n+If the system crashes after processing the messages, but before performing the auto-commit, the data is duplicated on another consumer instance after rebalancing.\n+\n+To minimize the likelihood of data loss or duplication, set `enable.auto.commit` to `false` and develop your client application to have more control over committing offsets.\n+Or use `auto.commit.interval.ms=1` to decrease the intervals between commits.\n+\n+By setting to `enable.auto.commit` to `false`, you can commit offsets after *all* processing has been performed and the message has been consumed.\n+For example, you can set up your application to call the Kafka `commitSync` and `commitAsync` commit APIs.\n+\n+The `commitSync` API commits the offsets in a message batch returned from polling.\n+You call the API when you are finished processing all the messages in the batch.\n+If you use the `commitSync` API, the application will not poll for new messages until the last offset in the batch is committed.\n+If this impacts throughput unduly, you can commit less frequently,\n+or you can use the `commitAsync` API.\n+The `commitAsync` API does not wait for the broker to respond to a commit request,\n+but risks creating more duplicates when rebalancing.\n+A common approach is to combine both commit APIs in an application, with the `commitSync` API used just before shutting the consumer down or rebalancing to make sure the final commit is successful.\n+\n+Also, consider using transactional ids and having idempotence enabled (`enable.idempotence=true`) on the producer side to guarantee exactly once delivery.\n+On the consumer side, you can then use the `isolation.level` property to control how transactional messages are read by the consumer.\n+\n+The `isolation.level` property has two valid values:\n+\n+* `read_committed`\n+* `read_uncommitted` (default)\n+\n+Use `read_committed` to ensure that only transactional messages that have been committed are read by the consumer.\n+However, this will cause an increase in end-to-end latency, because the consumer won\u2019t be able to return a message until the brokers have written the transaction markers that record the result of the transaction (_committed_ or _aborted_).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc9ff9c96964fae9b7cd34d00404b130d90c783f"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY5NzAzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <1> Auto commit is set to false to provide more control over committing offsets\n          \n          \n            \n            <1> Auto commit is set to false to provide more control over committing offsets.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#discussion_r518697035", "createdAt": "2020-11-06T11:38:47Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/managing/con-consumer-config-properties.adoc", "diffHunk": "@@ -0,0 +1,252 @@\n+// This module is included in the following files:\n+//\n+// assembly-client-config.adoc\n+\n+[id='con-consumer-config-properties-{context}']\n+= Kafka consumer configuration tuning\n+\n+Use a basic consumer configuration with optional properties that are tailored to specific use cases.\n+\n+When tuning your consumers your primary concern will be ensuring that they cope efficiently with the amount of data ingested.\n+As with the producer tuning, be prepared to make incremental changes until the consumers operate as expected.\n+\n+== Basic consumer configuration\n+\n+Connection and deserializer properties are required for every consumer.\n+Generally, it is good practice to add a client id for tracking.\n+\n+In a consumer configuration, irrespective of any subsequent configuration:\n+\n+* The consumer fetches from a given offset and consumes the messages in order, unless the offset is changed to skip or re-read messages.\n+* The broker does not know if the consumer processed the responses, even when committing offsets to Kafka because the offsets might be sent to a different broker in the cluster.\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+# ...\n+bootstrap.servers=localhost:9092 <1>\n+key.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <2>\n+value.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <3>\n+client.id=my-client <4>\n+group.id=my-group-id <5>\n+# ...\n+----\n+<1> (Required) Tells the consumer to connect to a Kafka cluster using a _host:port_ bootstrap server address for a Kafka broker.\n+The consumer uses the address to discover and connect to all brokers in the cluster.\n+Use a comma-separated list to specify two or three addresses in case a server is down, but it\u2019s not necessary to provide a list of all the brokers in the cluster.\n+If you are using a loadbalancer service to expose the Kafka cluster, you only need the address for the service as the availability is handled by the loadbalancer.\n+<2> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message keys.\n+<3> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message values.\n+<4> (Optional) The logical name for the client, which is used in logs and metrics to identify the source of a request. The id can also be used to throttle consumers based on processing time quotas.\n+<5> (Conditional) A group id is _required_ if the consumer belongs to a consumer group.\n+\n+Consumer groups are used to share a typically large data stream generated by multiple producers from a given topic.\n+Consumers are grouped using a `group.id`, allowing messages to be spread across the members.\n+\n+== Scaling data consumption using consumer groups\n+\n+Consumer groups share a typically large data stream generated by one or multiple producers from a given topic.\n+Consumers with the same `group.id` property are in the same group.\n+One of the consumers in the group is elected leader and decides how the partitions that the consumers are interested in should be assigned to the consumers.\n+Each partition can only be assigned to a single consumer.\n+\n+If you do not already have as many consumers as partitions,\n+you can scale data consumption by adding more consumer instances with the same `group.id`.\n+Adding more consumers to a group than there are partitions will not help throughput,\n+but it does mean that there are consumers on standby should one stop functioning.\n+If you can meet throughput goals with fewer consumers, you save on resources.\n+\n+Consumers within the same consumer group send offset commits and heartbeats to the same broker.\n+So the greater the number of consumers in the group, the higher the request load on the broker.\n+\n+----\n+# ...\n+group.id=my-group-id <1>\n+# ...\n+----\n+<1> Add a consumer to a consumer group using a group id.\n+\n+== Message ordering guarantees\n+\n+Kafka brokers receive fetch requests from consumers that ask the broker to send messages from a list of topics, partitions and offset positions.\n+\n+A consumer observes messages in a single partition in the same order that they were committed to the broker,\n+which means that Kafka *only* provides ordering guarantees for messages in a single partition.\n+Conversely, if a consumer is consuming messages from multiple partitions, the order of messages in different partitions as observed by the consumer does not necessarily reflect the order in which they were sent.\n+\n+If you want a strict ordering of messages from one topic, use one partition.\n+\n+== Optimizing throughput and latency\n+\n+Control the number of messages returned when your client application calls `KafkaConsumer.poll()`.\n+\n+Use the `fetch.max.wait.ms` and `fetch.min.bytes` properties to increase the minimum amount of data fetched by the consumer from the Kafka broker.\n+Time-based batching is configured using `fetch.max.wait.ms`, and size-based batching is configured using `fetch.min.bytes`.\n+\n+If CPU utilization in the consumer or broker is high, it might be because there are too many requests from the consumer.\n+You can adjust `fetch.max.wait.ms` and `fetch.min.bytes` properties higher so that there are fewer requests and messages are delivered in bigger batches.\n+By adjusting higher, throughput is improved with some cost to latency.\n+You can also adjust higher if the amount of data being produced is low.\n+\n+For example, if you set `fetch.max.wait.ms` to 500ms and `fetch.min.bytes` to 16384 bytes,\n+when Kafka receives a fetch request from the consumer it will respond when the first of either threshold is reached.\n+\n+Conversely, you can adjust the `fetch.max.wait.ms` and `fetch.min.bytes` properties lower to improve end-to-end latency.\n+\n+----\n+# ...\n+fetch.max.wait.ms=500 <1>\n+fetch.min.bytes=16384 <2>\n+# ...\n+----\n+<1> The maximum time in milliseconds the broker will wait before completing fetch requests.\n+The default is `500` milliseconds.\n+<2> If a minimum batch size in bytes is used, a request is sent when the minimum is reached, or messages have been queued for longer than `fetch.max.wait.ms` (whichever comes sooner).\n+Adding the delay allows batches to accumulate messages up to the batch size.\n+\n+.Lowering latency by increasing the fetch request size\n+\n+Use the `fetch.max.bytes` and `max.partition.fetch.bytes` properties to increase the maximum amount of data fetched by the consumer from the Kafka broker.\n+\n+The `fetch.max.bytes` property sets a maximum limit in bytes on the amount of data fetched from the broker at one time,\n+\n+The `max.partition.fetch.bytes` sets a maximum limit in bytes on how much data is returned for each partition,\n+which must always be larger than the number of bytes set in the broker or topic configuration for `max.message.bytes`.\n+\n+The maximum amount of memory a client can consume is approximately:\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+_NUMBER-OF-BROKERS_ * fetch.max.bytes and _NUMBER-OF-PARTITIONS_ * max.partition.fetch.bytes\n+----\n+\n+If memory usage can accommodate it, you can increase the values of these two properties.\n+By allowing more data in each request, latency is improved as there are fewer fetch requests.\n+\n+----\n+# ...\n+fetch.max.bytes=52428800 <1>\n+max.partition.fetch.bytes=1048576 <2>\n+# ...\n+----\n+<1> The maximum amount of data in bytes returned for a fetch request.\n+<2> The maximum amount of data in bytes returned for each partition.\n+\n+== Avoiding data loss or duplication when committing offsets\n+\n+The Kafka _auto-commit mechanism_ allows a consumer to commit the offsets of messages automatically.\n+If enabled, the consumer will commit offsets received from polling the broker at 5000ms intervals.\n+\n+The auto-commit mechanism is convenient, but it introduces a risk of data loss and duplication.\n+If a consumer has fetched and transformed a number of messages, but the system crashes with processed messages in the consumer buffer when performing an auto-commit, that data is lost.\n+If the system crashes after processing the messages, but before performing the auto-commit, the data is duplicated on another consumer instance after rebalancing.\n+\n+To minimize the likelihood of data loss or duplication, set `enable.auto.commit` to `false` and develop your client application to have more control over committing offsets.\n+Or use `auto.commit.interval.ms=1` to decrease the intervals between commits.\n+\n+By setting to `enable.auto.commit` to `false`, you can commit offsets after *all* processing has been performed and the message has been consumed.\n+For example, you can set up your application to call the Kafka `commitSync` and `commitAsync` commit APIs.\n+\n+The `commitSync` API commits the offsets in a message batch returned from polling.\n+You call the API when you are finished processing all the messages in the batch.\n+If you use the `commitSync` API, the application will not poll for new messages until the last offset in the batch is committed.\n+If this impacts throughput unduly, you can commit less frequently,\n+or you can use the `commitAsync` API.\n+The `commitAsync` API does not wait for the broker to respond to a commit request,\n+but risks creating more duplicates when rebalancing.\n+A common approach is to combine both commit APIs in an application, with the `commitSync` API used just before shutting the consumer down or rebalancing to make sure the final commit is successful.\n+\n+Also, consider using transactional ids and having idempotence enabled (`enable.idempotence=true`) on the producer side to guarantee exactly once delivery.\n+On the consumer side, you can then use the `isolation.level` property to control how transactional messages are read by the consumer.\n+\n+The `isolation.level` property has two valid values:\n+\n+* `read_committed`\n+* `read_uncommitted` (default)\n+\n+Use `read_committed` to ensure that only transactional messages that have been committed are read by the consumer.\n+However, this will cause an increase in end-to-end latency, because the consumer won\u2019t be able to return a message until the brokers have written the transaction markers that record the result of the transaction (_committed_ or _aborted_).\n+\n+----\n+# ...\n+enable.auto.commit=false <1>\n+isolation.level=read_committed <2>\n+# ...\n+----\n+<1> Auto commit is set to false to provide more control over committing offsets", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc9ff9c96964fae9b7cd34d00404b130d90c783f"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcwMDE0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <2> If no heartbeats are received by the kafka broker before the timeout duration expires, the consumer is removed from the consumer group and a rebalance is initiated.\n          \n          \n            \n            <2> If no heartbeats are received by the Kafka broker before the timeout duration expires, the consumer is removed from the consumer group and a rebalance is initiated.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#discussion_r518700142", "createdAt": "2020-11-06T11:45:22Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/managing/con-consumer-config-properties.adoc", "diffHunk": "@@ -0,0 +1,252 @@\n+// This module is included in the following files:\n+//\n+// assembly-client-config.adoc\n+\n+[id='con-consumer-config-properties-{context}']\n+= Kafka consumer configuration tuning\n+\n+Use a basic consumer configuration with optional properties that are tailored to specific use cases.\n+\n+When tuning your consumers your primary concern will be ensuring that they cope efficiently with the amount of data ingested.\n+As with the producer tuning, be prepared to make incremental changes until the consumers operate as expected.\n+\n+== Basic consumer configuration\n+\n+Connection and deserializer properties are required for every consumer.\n+Generally, it is good practice to add a client id for tracking.\n+\n+In a consumer configuration, irrespective of any subsequent configuration:\n+\n+* The consumer fetches from a given offset and consumes the messages in order, unless the offset is changed to skip or re-read messages.\n+* The broker does not know if the consumer processed the responses, even when committing offsets to Kafka because the offsets might be sent to a different broker in the cluster.\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+# ...\n+bootstrap.servers=localhost:9092 <1>\n+key.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <2>\n+value.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <3>\n+client.id=my-client <4>\n+group.id=my-group-id <5>\n+# ...\n+----\n+<1> (Required) Tells the consumer to connect to a Kafka cluster using a _host:port_ bootstrap server address for a Kafka broker.\n+The consumer uses the address to discover and connect to all brokers in the cluster.\n+Use a comma-separated list to specify two or three addresses in case a server is down, but it\u2019s not necessary to provide a list of all the brokers in the cluster.\n+If you are using a loadbalancer service to expose the Kafka cluster, you only need the address for the service as the availability is handled by the loadbalancer.\n+<2> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message keys.\n+<3> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message values.\n+<4> (Optional) The logical name for the client, which is used in logs and metrics to identify the source of a request. The id can also be used to throttle consumers based on processing time quotas.\n+<5> (Conditional) A group id is _required_ if the consumer belongs to a consumer group.\n+\n+Consumer groups are used to share a typically large data stream generated by multiple producers from a given topic.\n+Consumers are grouped using a `group.id`, allowing messages to be spread across the members.\n+\n+== Scaling data consumption using consumer groups\n+\n+Consumer groups share a typically large data stream generated by one or multiple producers from a given topic.\n+Consumers with the same `group.id` property are in the same group.\n+One of the consumers in the group is elected leader and decides how the partitions that the consumers are interested in should be assigned to the consumers.\n+Each partition can only be assigned to a single consumer.\n+\n+If you do not already have as many consumers as partitions,\n+you can scale data consumption by adding more consumer instances with the same `group.id`.\n+Adding more consumers to a group than there are partitions will not help throughput,\n+but it does mean that there are consumers on standby should one stop functioning.\n+If you can meet throughput goals with fewer consumers, you save on resources.\n+\n+Consumers within the same consumer group send offset commits and heartbeats to the same broker.\n+So the greater the number of consumers in the group, the higher the request load on the broker.\n+\n+----\n+# ...\n+group.id=my-group-id <1>\n+# ...\n+----\n+<1> Add a consumer to a consumer group using a group id.\n+\n+== Message ordering guarantees\n+\n+Kafka brokers receive fetch requests from consumers that ask the broker to send messages from a list of topics, partitions and offset positions.\n+\n+A consumer observes messages in a single partition in the same order that they were committed to the broker,\n+which means that Kafka *only* provides ordering guarantees for messages in a single partition.\n+Conversely, if a consumer is consuming messages from multiple partitions, the order of messages in different partitions as observed by the consumer does not necessarily reflect the order in which they were sent.\n+\n+If you want a strict ordering of messages from one topic, use one partition.\n+\n+== Optimizing throughput and latency\n+\n+Control the number of messages returned when your client application calls `KafkaConsumer.poll()`.\n+\n+Use the `fetch.max.wait.ms` and `fetch.min.bytes` properties to increase the minimum amount of data fetched by the consumer from the Kafka broker.\n+Time-based batching is configured using `fetch.max.wait.ms`, and size-based batching is configured using `fetch.min.bytes`.\n+\n+If CPU utilization in the consumer or broker is high, it might be because there are too many requests from the consumer.\n+You can adjust `fetch.max.wait.ms` and `fetch.min.bytes` properties higher so that there are fewer requests and messages are delivered in bigger batches.\n+By adjusting higher, throughput is improved with some cost to latency.\n+You can also adjust higher if the amount of data being produced is low.\n+\n+For example, if you set `fetch.max.wait.ms` to 500ms and `fetch.min.bytes` to 16384 bytes,\n+when Kafka receives a fetch request from the consumer it will respond when the first of either threshold is reached.\n+\n+Conversely, you can adjust the `fetch.max.wait.ms` and `fetch.min.bytes` properties lower to improve end-to-end latency.\n+\n+----\n+# ...\n+fetch.max.wait.ms=500 <1>\n+fetch.min.bytes=16384 <2>\n+# ...\n+----\n+<1> The maximum time in milliseconds the broker will wait before completing fetch requests.\n+The default is `500` milliseconds.\n+<2> If a minimum batch size in bytes is used, a request is sent when the minimum is reached, or messages have been queued for longer than `fetch.max.wait.ms` (whichever comes sooner).\n+Adding the delay allows batches to accumulate messages up to the batch size.\n+\n+.Lowering latency by increasing the fetch request size\n+\n+Use the `fetch.max.bytes` and `max.partition.fetch.bytes` properties to increase the maximum amount of data fetched by the consumer from the Kafka broker.\n+\n+The `fetch.max.bytes` property sets a maximum limit in bytes on the amount of data fetched from the broker at one time,\n+\n+The `max.partition.fetch.bytes` sets a maximum limit in bytes on how much data is returned for each partition,\n+which must always be larger than the number of bytes set in the broker or topic configuration for `max.message.bytes`.\n+\n+The maximum amount of memory a client can consume is approximately:\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+_NUMBER-OF-BROKERS_ * fetch.max.bytes and _NUMBER-OF-PARTITIONS_ * max.partition.fetch.bytes\n+----\n+\n+If memory usage can accommodate it, you can increase the values of these two properties.\n+By allowing more data in each request, latency is improved as there are fewer fetch requests.\n+\n+----\n+# ...\n+fetch.max.bytes=52428800 <1>\n+max.partition.fetch.bytes=1048576 <2>\n+# ...\n+----\n+<1> The maximum amount of data in bytes returned for a fetch request.\n+<2> The maximum amount of data in bytes returned for each partition.\n+\n+== Avoiding data loss or duplication when committing offsets\n+\n+The Kafka _auto-commit mechanism_ allows a consumer to commit the offsets of messages automatically.\n+If enabled, the consumer will commit offsets received from polling the broker at 5000ms intervals.\n+\n+The auto-commit mechanism is convenient, but it introduces a risk of data loss and duplication.\n+If a consumer has fetched and transformed a number of messages, but the system crashes with processed messages in the consumer buffer when performing an auto-commit, that data is lost.\n+If the system crashes after processing the messages, but before performing the auto-commit, the data is duplicated on another consumer instance after rebalancing.\n+\n+To minimize the likelihood of data loss or duplication, set `enable.auto.commit` to `false` and develop your client application to have more control over committing offsets.\n+Or use `auto.commit.interval.ms=1` to decrease the intervals between commits.\n+\n+By setting to `enable.auto.commit` to `false`, you can commit offsets after *all* processing has been performed and the message has been consumed.\n+For example, you can set up your application to call the Kafka `commitSync` and `commitAsync` commit APIs.\n+\n+The `commitSync` API commits the offsets in a message batch returned from polling.\n+You call the API when you are finished processing all the messages in the batch.\n+If you use the `commitSync` API, the application will not poll for new messages until the last offset in the batch is committed.\n+If this impacts throughput unduly, you can commit less frequently,\n+or you can use the `commitAsync` API.\n+The `commitAsync` API does not wait for the broker to respond to a commit request,\n+but risks creating more duplicates when rebalancing.\n+A common approach is to combine both commit APIs in an application, with the `commitSync` API used just before shutting the consumer down or rebalancing to make sure the final commit is successful.\n+\n+Also, consider using transactional ids and having idempotence enabled (`enable.idempotence=true`) on the producer side to guarantee exactly once delivery.\n+On the consumer side, you can then use the `isolation.level` property to control how transactional messages are read by the consumer.\n+\n+The `isolation.level` property has two valid values:\n+\n+* `read_committed`\n+* `read_uncommitted` (default)\n+\n+Use `read_committed` to ensure that only transactional messages that have been committed are read by the consumer.\n+However, this will cause an increase in end-to-end latency, because the consumer won\u2019t be able to return a message until the brokers have written the transaction markers that record the result of the transaction (_committed_ or _aborted_).\n+\n+----\n+# ...\n+enable.auto.commit=false <1>\n+isolation.level=read_committed <2>\n+# ...\n+----\n+<1> Auto commit is set to false to provide more control over committing offsets\n+<2> Set to `read_committed` so that only committed messages are read by the consumer.\n+\n+== Recovering from failure to avoid data loss\n+\n+Use the `session.timeout.ms` and `heartbeat.interval.ms` properties to configure the time taken to check and recover from consumer failure within a consumer group.\n+\n+The `session.timeout.ms` property specifies the maximum amount of time in milliseconds a consumer within a consumer group can be out of contact with a broker before being considered inactive and a _rebalancing_ is triggered between the active consumers in the group.\n+When the group rebalances, the partitions are reassigned to the members of the group.\n+\n+The `heartbeat.interval.ms` property specifies the interval in milliseconds between _heartbeat_ checks to the consumer group coordinator to indicate that the consumer is active and connected.\n+The heartbeat interval must be lower, usually by a third, than the session timeout interval.\n+\n+If you set the `session.timeout.ms` property lower, failing consumers are detected earlier, and rebalancing can take place quicker.\n+However, take care not to set the timeout so low that the broker fails to receive a heartbeat in time and triggers an unnecessary rebalance.\n+\n+Decreasing the heartbeat interval reduces the chance of accidental rebalancing, but more frequent heartbeats increases the overhead on broker resources.\n+\n+== Managing offset policy\n+\n+Use the `auto.offset.reset` property to control how a consumer behaves when no offsets have been committed,\n+or a committed offset is no longer valid or deleted.\n+\n+Suppose a consumer fails before an offset has been committed.\n+The consumer that then assumes responsibility for consuming the messages will start reading from the reassigned topic partition based on the reset policy.\n+The default value is `latest`, which starts at the end of the partition, and consequently means some messages are missed.\n+To avoid data loss, but increase the amount of processing, use the `earliest` value to start at the beginning of the partition.\n+\n+----\n+# ...\n+heartbeat.interval.ms=3000 <1>\n+session.timeout.ms=10000 <2>\n+auto.offset.reset=earliest <3>\n+# ...\n+----\n+<1> Adjust the heartbeat interval lower according to anticipated rebalances.\n+<2> If no heartbeats are received by the kafka broker before the timeout duration expires, the consumer is removed from the consumer group and a rebalance is initiated.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc9ff9c96964fae9b7cd34d00404b130d90c783f"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcwMDQ1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If this is the case, you can lower `max.partition.fetch.bytes` or increase `session.timeout.ms`.\n          \n          \n            \n            In this case, you can lower `max.partition.fetch.bytes` or increase `session.timeout.ms`.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#discussion_r518700451", "createdAt": "2020-11-06T11:46:05Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/managing/con-consumer-config-properties.adoc", "diffHunk": "@@ -0,0 +1,252 @@\n+// This module is included in the following files:\n+//\n+// assembly-client-config.adoc\n+\n+[id='con-consumer-config-properties-{context}']\n+= Kafka consumer configuration tuning\n+\n+Use a basic consumer configuration with optional properties that are tailored to specific use cases.\n+\n+When tuning your consumers your primary concern will be ensuring that they cope efficiently with the amount of data ingested.\n+As with the producer tuning, be prepared to make incremental changes until the consumers operate as expected.\n+\n+== Basic consumer configuration\n+\n+Connection and deserializer properties are required for every consumer.\n+Generally, it is good practice to add a client id for tracking.\n+\n+In a consumer configuration, irrespective of any subsequent configuration:\n+\n+* The consumer fetches from a given offset and consumes the messages in order, unless the offset is changed to skip or re-read messages.\n+* The broker does not know if the consumer processed the responses, even when committing offsets to Kafka because the offsets might be sent to a different broker in the cluster.\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+# ...\n+bootstrap.servers=localhost:9092 <1>\n+key.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <2>\n+value.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <3>\n+client.id=my-client <4>\n+group.id=my-group-id <5>\n+# ...\n+----\n+<1> (Required) Tells the consumer to connect to a Kafka cluster using a _host:port_ bootstrap server address for a Kafka broker.\n+The consumer uses the address to discover and connect to all brokers in the cluster.\n+Use a comma-separated list to specify two or three addresses in case a server is down, but it\u2019s not necessary to provide a list of all the brokers in the cluster.\n+If you are using a loadbalancer service to expose the Kafka cluster, you only need the address for the service as the availability is handled by the loadbalancer.\n+<2> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message keys.\n+<3> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message values.\n+<4> (Optional) The logical name for the client, which is used in logs and metrics to identify the source of a request. The id can also be used to throttle consumers based on processing time quotas.\n+<5> (Conditional) A group id is _required_ if the consumer belongs to a consumer group.\n+\n+Consumer groups are used to share a typically large data stream generated by multiple producers from a given topic.\n+Consumers are grouped using a `group.id`, allowing messages to be spread across the members.\n+\n+== Scaling data consumption using consumer groups\n+\n+Consumer groups share a typically large data stream generated by one or multiple producers from a given topic.\n+Consumers with the same `group.id` property are in the same group.\n+One of the consumers in the group is elected leader and decides how the partitions that the consumers are interested in should be assigned to the consumers.\n+Each partition can only be assigned to a single consumer.\n+\n+If you do not already have as many consumers as partitions,\n+you can scale data consumption by adding more consumer instances with the same `group.id`.\n+Adding more consumers to a group than there are partitions will not help throughput,\n+but it does mean that there are consumers on standby should one stop functioning.\n+If you can meet throughput goals with fewer consumers, you save on resources.\n+\n+Consumers within the same consumer group send offset commits and heartbeats to the same broker.\n+So the greater the number of consumers in the group, the higher the request load on the broker.\n+\n+----\n+# ...\n+group.id=my-group-id <1>\n+# ...\n+----\n+<1> Add a consumer to a consumer group using a group id.\n+\n+== Message ordering guarantees\n+\n+Kafka brokers receive fetch requests from consumers that ask the broker to send messages from a list of topics, partitions and offset positions.\n+\n+A consumer observes messages in a single partition in the same order that they were committed to the broker,\n+which means that Kafka *only* provides ordering guarantees for messages in a single partition.\n+Conversely, if a consumer is consuming messages from multiple partitions, the order of messages in different partitions as observed by the consumer does not necessarily reflect the order in which they were sent.\n+\n+If you want a strict ordering of messages from one topic, use one partition.\n+\n+== Optimizing throughput and latency\n+\n+Control the number of messages returned when your client application calls `KafkaConsumer.poll()`.\n+\n+Use the `fetch.max.wait.ms` and `fetch.min.bytes` properties to increase the minimum amount of data fetched by the consumer from the Kafka broker.\n+Time-based batching is configured using `fetch.max.wait.ms`, and size-based batching is configured using `fetch.min.bytes`.\n+\n+If CPU utilization in the consumer or broker is high, it might be because there are too many requests from the consumer.\n+You can adjust `fetch.max.wait.ms` and `fetch.min.bytes` properties higher so that there are fewer requests and messages are delivered in bigger batches.\n+By adjusting higher, throughput is improved with some cost to latency.\n+You can also adjust higher if the amount of data being produced is low.\n+\n+For example, if you set `fetch.max.wait.ms` to 500ms and `fetch.min.bytes` to 16384 bytes,\n+when Kafka receives a fetch request from the consumer it will respond when the first of either threshold is reached.\n+\n+Conversely, you can adjust the `fetch.max.wait.ms` and `fetch.min.bytes` properties lower to improve end-to-end latency.\n+\n+----\n+# ...\n+fetch.max.wait.ms=500 <1>\n+fetch.min.bytes=16384 <2>\n+# ...\n+----\n+<1> The maximum time in milliseconds the broker will wait before completing fetch requests.\n+The default is `500` milliseconds.\n+<2> If a minimum batch size in bytes is used, a request is sent when the minimum is reached, or messages have been queued for longer than `fetch.max.wait.ms` (whichever comes sooner).\n+Adding the delay allows batches to accumulate messages up to the batch size.\n+\n+.Lowering latency by increasing the fetch request size\n+\n+Use the `fetch.max.bytes` and `max.partition.fetch.bytes` properties to increase the maximum amount of data fetched by the consumer from the Kafka broker.\n+\n+The `fetch.max.bytes` property sets a maximum limit in bytes on the amount of data fetched from the broker at one time,\n+\n+The `max.partition.fetch.bytes` sets a maximum limit in bytes on how much data is returned for each partition,\n+which must always be larger than the number of bytes set in the broker or topic configuration for `max.message.bytes`.\n+\n+The maximum amount of memory a client can consume is approximately:\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+_NUMBER-OF-BROKERS_ * fetch.max.bytes and _NUMBER-OF-PARTITIONS_ * max.partition.fetch.bytes\n+----\n+\n+If memory usage can accommodate it, you can increase the values of these two properties.\n+By allowing more data in each request, latency is improved as there are fewer fetch requests.\n+\n+----\n+# ...\n+fetch.max.bytes=52428800 <1>\n+max.partition.fetch.bytes=1048576 <2>\n+# ...\n+----\n+<1> The maximum amount of data in bytes returned for a fetch request.\n+<2> The maximum amount of data in bytes returned for each partition.\n+\n+== Avoiding data loss or duplication when committing offsets\n+\n+The Kafka _auto-commit mechanism_ allows a consumer to commit the offsets of messages automatically.\n+If enabled, the consumer will commit offsets received from polling the broker at 5000ms intervals.\n+\n+The auto-commit mechanism is convenient, but it introduces a risk of data loss and duplication.\n+If a consumer has fetched and transformed a number of messages, but the system crashes with processed messages in the consumer buffer when performing an auto-commit, that data is lost.\n+If the system crashes after processing the messages, but before performing the auto-commit, the data is duplicated on another consumer instance after rebalancing.\n+\n+To minimize the likelihood of data loss or duplication, set `enable.auto.commit` to `false` and develop your client application to have more control over committing offsets.\n+Or use `auto.commit.interval.ms=1` to decrease the intervals between commits.\n+\n+By setting to `enable.auto.commit` to `false`, you can commit offsets after *all* processing has been performed and the message has been consumed.\n+For example, you can set up your application to call the Kafka `commitSync` and `commitAsync` commit APIs.\n+\n+The `commitSync` API commits the offsets in a message batch returned from polling.\n+You call the API when you are finished processing all the messages in the batch.\n+If you use the `commitSync` API, the application will not poll for new messages until the last offset in the batch is committed.\n+If this impacts throughput unduly, you can commit less frequently,\n+or you can use the `commitAsync` API.\n+The `commitAsync` API does not wait for the broker to respond to a commit request,\n+but risks creating more duplicates when rebalancing.\n+A common approach is to combine both commit APIs in an application, with the `commitSync` API used just before shutting the consumer down or rebalancing to make sure the final commit is successful.\n+\n+Also, consider using transactional ids and having idempotence enabled (`enable.idempotence=true`) on the producer side to guarantee exactly once delivery.\n+On the consumer side, you can then use the `isolation.level` property to control how transactional messages are read by the consumer.\n+\n+The `isolation.level` property has two valid values:\n+\n+* `read_committed`\n+* `read_uncommitted` (default)\n+\n+Use `read_committed` to ensure that only transactional messages that have been committed are read by the consumer.\n+However, this will cause an increase in end-to-end latency, because the consumer won\u2019t be able to return a message until the brokers have written the transaction markers that record the result of the transaction (_committed_ or _aborted_).\n+\n+----\n+# ...\n+enable.auto.commit=false <1>\n+isolation.level=read_committed <2>\n+# ...\n+----\n+<1> Auto commit is set to false to provide more control over committing offsets\n+<2> Set to `read_committed` so that only committed messages are read by the consumer.\n+\n+== Recovering from failure to avoid data loss\n+\n+Use the `session.timeout.ms` and `heartbeat.interval.ms` properties to configure the time taken to check and recover from consumer failure within a consumer group.\n+\n+The `session.timeout.ms` property specifies the maximum amount of time in milliseconds a consumer within a consumer group can be out of contact with a broker before being considered inactive and a _rebalancing_ is triggered between the active consumers in the group.\n+When the group rebalances, the partitions are reassigned to the members of the group.\n+\n+The `heartbeat.interval.ms` property specifies the interval in milliseconds between _heartbeat_ checks to the consumer group coordinator to indicate that the consumer is active and connected.\n+The heartbeat interval must be lower, usually by a third, than the session timeout interval.\n+\n+If you set the `session.timeout.ms` property lower, failing consumers are detected earlier, and rebalancing can take place quicker.\n+However, take care not to set the timeout so low that the broker fails to receive a heartbeat in time and triggers an unnecessary rebalance.\n+\n+Decreasing the heartbeat interval reduces the chance of accidental rebalancing, but more frequent heartbeats increases the overhead on broker resources.\n+\n+== Managing offset policy\n+\n+Use the `auto.offset.reset` property to control how a consumer behaves when no offsets have been committed,\n+or a committed offset is no longer valid or deleted.\n+\n+Suppose a consumer fails before an offset has been committed.\n+The consumer that then assumes responsibility for consuming the messages will start reading from the reassigned topic partition based on the reset policy.\n+The default value is `latest`, which starts at the end of the partition, and consequently means some messages are missed.\n+To avoid data loss, but increase the amount of processing, use the `earliest` value to start at the beginning of the partition.\n+\n+----\n+# ...\n+heartbeat.interval.ms=3000 <1>\n+session.timeout.ms=10000 <2>\n+auto.offset.reset=earliest <3>\n+# ...\n+----\n+<1> Adjust the heartbeat interval lower according to anticipated rebalances.\n+<2> If no heartbeats are received by the kafka broker before the timeout duration expires, the consumer is removed from the consumer group and a rebalance is initiated.\n+If the broker configuration has a `group.min.session.timeout.ms` and `group.max.session.timeout.ms`, the session timeout value must be within that range.\n+<3> Set to `earliest` to return to the start of a partition and avoid data loss if offsets were not committed.\n+\n+If the amount of data returned in a single fetch request is large,\n+a timeout might occur before the consumer has processed it.\n+If this is the case, you can lower `max.partition.fetch.bytes` or increase `session.timeout.ms`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc9ff9c96964fae9b7cd34d00404b130d90c783f"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcwMDcxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * The consumers in group to receive their assignments and start fetching\n          \n          \n            \n            * The consumers in the group to receive their assignments and start fetching", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#discussion_r518700713", "createdAt": "2020-11-06T11:46:39Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/managing/con-consumer-config-properties.adoc", "diffHunk": "@@ -0,0 +1,252 @@\n+// This module is included in the following files:\n+//\n+// assembly-client-config.adoc\n+\n+[id='con-consumer-config-properties-{context}']\n+= Kafka consumer configuration tuning\n+\n+Use a basic consumer configuration with optional properties that are tailored to specific use cases.\n+\n+When tuning your consumers your primary concern will be ensuring that they cope efficiently with the amount of data ingested.\n+As with the producer tuning, be prepared to make incremental changes until the consumers operate as expected.\n+\n+== Basic consumer configuration\n+\n+Connection and deserializer properties are required for every consumer.\n+Generally, it is good practice to add a client id for tracking.\n+\n+In a consumer configuration, irrespective of any subsequent configuration:\n+\n+* The consumer fetches from a given offset and consumes the messages in order, unless the offset is changed to skip or re-read messages.\n+* The broker does not know if the consumer processed the responses, even when committing offsets to Kafka because the offsets might be sent to a different broker in the cluster.\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+# ...\n+bootstrap.servers=localhost:9092 <1>\n+key.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <2>\n+value.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <3>\n+client.id=my-client <4>\n+group.id=my-group-id <5>\n+# ...\n+----\n+<1> (Required) Tells the consumer to connect to a Kafka cluster using a _host:port_ bootstrap server address for a Kafka broker.\n+The consumer uses the address to discover and connect to all brokers in the cluster.\n+Use a comma-separated list to specify two or three addresses in case a server is down, but it\u2019s not necessary to provide a list of all the brokers in the cluster.\n+If you are using a loadbalancer service to expose the Kafka cluster, you only need the address for the service as the availability is handled by the loadbalancer.\n+<2> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message keys.\n+<3> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message values.\n+<4> (Optional) The logical name for the client, which is used in logs and metrics to identify the source of a request. The id can also be used to throttle consumers based on processing time quotas.\n+<5> (Conditional) A group id is _required_ if the consumer belongs to a consumer group.\n+\n+Consumer groups are used to share a typically large data stream generated by multiple producers from a given topic.\n+Consumers are grouped using a `group.id`, allowing messages to be spread across the members.\n+\n+== Scaling data consumption using consumer groups\n+\n+Consumer groups share a typically large data stream generated by one or multiple producers from a given topic.\n+Consumers with the same `group.id` property are in the same group.\n+One of the consumers in the group is elected leader and decides how the partitions that the consumers are interested in should be assigned to the consumers.\n+Each partition can only be assigned to a single consumer.\n+\n+If you do not already have as many consumers as partitions,\n+you can scale data consumption by adding more consumer instances with the same `group.id`.\n+Adding more consumers to a group than there are partitions will not help throughput,\n+but it does mean that there are consumers on standby should one stop functioning.\n+If you can meet throughput goals with fewer consumers, you save on resources.\n+\n+Consumers within the same consumer group send offset commits and heartbeats to the same broker.\n+So the greater the number of consumers in the group, the higher the request load on the broker.\n+\n+----\n+# ...\n+group.id=my-group-id <1>\n+# ...\n+----\n+<1> Add a consumer to a consumer group using a group id.\n+\n+== Message ordering guarantees\n+\n+Kafka brokers receive fetch requests from consumers that ask the broker to send messages from a list of topics, partitions and offset positions.\n+\n+A consumer observes messages in a single partition in the same order that they were committed to the broker,\n+which means that Kafka *only* provides ordering guarantees for messages in a single partition.\n+Conversely, if a consumer is consuming messages from multiple partitions, the order of messages in different partitions as observed by the consumer does not necessarily reflect the order in which they were sent.\n+\n+If you want a strict ordering of messages from one topic, use one partition.\n+\n+== Optimizing throughput and latency\n+\n+Control the number of messages returned when your client application calls `KafkaConsumer.poll()`.\n+\n+Use the `fetch.max.wait.ms` and `fetch.min.bytes` properties to increase the minimum amount of data fetched by the consumer from the Kafka broker.\n+Time-based batching is configured using `fetch.max.wait.ms`, and size-based batching is configured using `fetch.min.bytes`.\n+\n+If CPU utilization in the consumer or broker is high, it might be because there are too many requests from the consumer.\n+You can adjust `fetch.max.wait.ms` and `fetch.min.bytes` properties higher so that there are fewer requests and messages are delivered in bigger batches.\n+By adjusting higher, throughput is improved with some cost to latency.\n+You can also adjust higher if the amount of data being produced is low.\n+\n+For example, if you set `fetch.max.wait.ms` to 500ms and `fetch.min.bytes` to 16384 bytes,\n+when Kafka receives a fetch request from the consumer it will respond when the first of either threshold is reached.\n+\n+Conversely, you can adjust the `fetch.max.wait.ms` and `fetch.min.bytes` properties lower to improve end-to-end latency.\n+\n+----\n+# ...\n+fetch.max.wait.ms=500 <1>\n+fetch.min.bytes=16384 <2>\n+# ...\n+----\n+<1> The maximum time in milliseconds the broker will wait before completing fetch requests.\n+The default is `500` milliseconds.\n+<2> If a minimum batch size in bytes is used, a request is sent when the minimum is reached, or messages have been queued for longer than `fetch.max.wait.ms` (whichever comes sooner).\n+Adding the delay allows batches to accumulate messages up to the batch size.\n+\n+.Lowering latency by increasing the fetch request size\n+\n+Use the `fetch.max.bytes` and `max.partition.fetch.bytes` properties to increase the maximum amount of data fetched by the consumer from the Kafka broker.\n+\n+The `fetch.max.bytes` property sets a maximum limit in bytes on the amount of data fetched from the broker at one time,\n+\n+The `max.partition.fetch.bytes` sets a maximum limit in bytes on how much data is returned for each partition,\n+which must always be larger than the number of bytes set in the broker or topic configuration for `max.message.bytes`.\n+\n+The maximum amount of memory a client can consume is approximately:\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+_NUMBER-OF-BROKERS_ * fetch.max.bytes and _NUMBER-OF-PARTITIONS_ * max.partition.fetch.bytes\n+----\n+\n+If memory usage can accommodate it, you can increase the values of these two properties.\n+By allowing more data in each request, latency is improved as there are fewer fetch requests.\n+\n+----\n+# ...\n+fetch.max.bytes=52428800 <1>\n+max.partition.fetch.bytes=1048576 <2>\n+# ...\n+----\n+<1> The maximum amount of data in bytes returned for a fetch request.\n+<2> The maximum amount of data in bytes returned for each partition.\n+\n+== Avoiding data loss or duplication when committing offsets\n+\n+The Kafka _auto-commit mechanism_ allows a consumer to commit the offsets of messages automatically.\n+If enabled, the consumer will commit offsets received from polling the broker at 5000ms intervals.\n+\n+The auto-commit mechanism is convenient, but it introduces a risk of data loss and duplication.\n+If a consumer has fetched and transformed a number of messages, but the system crashes with processed messages in the consumer buffer when performing an auto-commit, that data is lost.\n+If the system crashes after processing the messages, but before performing the auto-commit, the data is duplicated on another consumer instance after rebalancing.\n+\n+To minimize the likelihood of data loss or duplication, set `enable.auto.commit` to `false` and develop your client application to have more control over committing offsets.\n+Or use `auto.commit.interval.ms=1` to decrease the intervals between commits.\n+\n+By setting to `enable.auto.commit` to `false`, you can commit offsets after *all* processing has been performed and the message has been consumed.\n+For example, you can set up your application to call the Kafka `commitSync` and `commitAsync` commit APIs.\n+\n+The `commitSync` API commits the offsets in a message batch returned from polling.\n+You call the API when you are finished processing all the messages in the batch.\n+If you use the `commitSync` API, the application will not poll for new messages until the last offset in the batch is committed.\n+If this impacts throughput unduly, you can commit less frequently,\n+or you can use the `commitAsync` API.\n+The `commitAsync` API does not wait for the broker to respond to a commit request,\n+but risks creating more duplicates when rebalancing.\n+A common approach is to combine both commit APIs in an application, with the `commitSync` API used just before shutting the consumer down or rebalancing to make sure the final commit is successful.\n+\n+Also, consider using transactional ids and having idempotence enabled (`enable.idempotence=true`) on the producer side to guarantee exactly once delivery.\n+On the consumer side, you can then use the `isolation.level` property to control how transactional messages are read by the consumer.\n+\n+The `isolation.level` property has two valid values:\n+\n+* `read_committed`\n+* `read_uncommitted` (default)\n+\n+Use `read_committed` to ensure that only transactional messages that have been committed are read by the consumer.\n+However, this will cause an increase in end-to-end latency, because the consumer won\u2019t be able to return a message until the brokers have written the transaction markers that record the result of the transaction (_committed_ or _aborted_).\n+\n+----\n+# ...\n+enable.auto.commit=false <1>\n+isolation.level=read_committed <2>\n+# ...\n+----\n+<1> Auto commit is set to false to provide more control over committing offsets\n+<2> Set to `read_committed` so that only committed messages are read by the consumer.\n+\n+== Recovering from failure to avoid data loss\n+\n+Use the `session.timeout.ms` and `heartbeat.interval.ms` properties to configure the time taken to check and recover from consumer failure within a consumer group.\n+\n+The `session.timeout.ms` property specifies the maximum amount of time in milliseconds a consumer within a consumer group can be out of contact with a broker before being considered inactive and a _rebalancing_ is triggered between the active consumers in the group.\n+When the group rebalances, the partitions are reassigned to the members of the group.\n+\n+The `heartbeat.interval.ms` property specifies the interval in milliseconds between _heartbeat_ checks to the consumer group coordinator to indicate that the consumer is active and connected.\n+The heartbeat interval must be lower, usually by a third, than the session timeout interval.\n+\n+If you set the `session.timeout.ms` property lower, failing consumers are detected earlier, and rebalancing can take place quicker.\n+However, take care not to set the timeout so low that the broker fails to receive a heartbeat in time and triggers an unnecessary rebalance.\n+\n+Decreasing the heartbeat interval reduces the chance of accidental rebalancing, but more frequent heartbeats increases the overhead on broker resources.\n+\n+== Managing offset policy\n+\n+Use the `auto.offset.reset` property to control how a consumer behaves when no offsets have been committed,\n+or a committed offset is no longer valid or deleted.\n+\n+Suppose a consumer fails before an offset has been committed.\n+The consumer that then assumes responsibility for consuming the messages will start reading from the reassigned topic partition based on the reset policy.\n+The default value is `latest`, which starts at the end of the partition, and consequently means some messages are missed.\n+To avoid data loss, but increase the amount of processing, use the `earliest` value to start at the beginning of the partition.\n+\n+----\n+# ...\n+heartbeat.interval.ms=3000 <1>\n+session.timeout.ms=10000 <2>\n+auto.offset.reset=earliest <3>\n+# ...\n+----\n+<1> Adjust the heartbeat interval lower according to anticipated rebalances.\n+<2> If no heartbeats are received by the kafka broker before the timeout duration expires, the consumer is removed from the consumer group and a rebalance is initiated.\n+If the broker configuration has a `group.min.session.timeout.ms` and `group.max.session.timeout.ms`, the session timeout value must be within that range.\n+<3> Set to `earliest` to return to the start of a partition and avoid data loss if offsets were not committed.\n+\n+If the amount of data returned in a single fetch request is large,\n+a timeout might occur before the consumer has processed it.\n+If this is the case, you can lower `max.partition.fetch.bytes` or increase `session.timeout.ms`.\n+\n+== Minimizing the impact of rebalances\n+\n+The rebalancing of a partition between active consumers in a group is the time it takes for:\n+\n+* Consumers to commit their offsets\n+* The new consumer group to be formed\n+* The group leader to assign partitions to group members\n+* The consumers in group to receive their assignments and start fetching", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc9ff9c96964fae9b7cd34d00404b130d90c783f"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcwMjgyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Or you can use the `max.poll.records` property to set a maximum limit on the number of records returned from the consumer buffer, allowing your application to process fewer records within the max.poll.interval.ms limit.\n          \n          \n            \n            Or you can use the `max.poll.records` property to set a maximum limit on the number of records returned from the consumer buffer, allowing your application to process fewer records within the `max.poll.interval.ms` limit.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#discussion_r518702821", "createdAt": "2020-11-06T11:51:02Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/managing/con-consumer-config-properties.adoc", "diffHunk": "@@ -0,0 +1,252 @@\n+// This module is included in the following files:\n+//\n+// assembly-client-config.adoc\n+\n+[id='con-consumer-config-properties-{context}']\n+= Kafka consumer configuration tuning\n+\n+Use a basic consumer configuration with optional properties that are tailored to specific use cases.\n+\n+When tuning your consumers your primary concern will be ensuring that they cope efficiently with the amount of data ingested.\n+As with the producer tuning, be prepared to make incremental changes until the consumers operate as expected.\n+\n+== Basic consumer configuration\n+\n+Connection and deserializer properties are required for every consumer.\n+Generally, it is good practice to add a client id for tracking.\n+\n+In a consumer configuration, irrespective of any subsequent configuration:\n+\n+* The consumer fetches from a given offset and consumes the messages in order, unless the offset is changed to skip or re-read messages.\n+* The broker does not know if the consumer processed the responses, even when committing offsets to Kafka because the offsets might be sent to a different broker in the cluster.\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+# ...\n+bootstrap.servers=localhost:9092 <1>\n+key.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <2>\n+value.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <3>\n+client.id=my-client <4>\n+group.id=my-group-id <5>\n+# ...\n+----\n+<1> (Required) Tells the consumer to connect to a Kafka cluster using a _host:port_ bootstrap server address for a Kafka broker.\n+The consumer uses the address to discover and connect to all brokers in the cluster.\n+Use a comma-separated list to specify two or three addresses in case a server is down, but it\u2019s not necessary to provide a list of all the brokers in the cluster.\n+If you are using a loadbalancer service to expose the Kafka cluster, you only need the address for the service as the availability is handled by the loadbalancer.\n+<2> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message keys.\n+<3> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message values.\n+<4> (Optional) The logical name for the client, which is used in logs and metrics to identify the source of a request. The id can also be used to throttle consumers based on processing time quotas.\n+<5> (Conditional) A group id is _required_ if the consumer belongs to a consumer group.\n+\n+Consumer groups are used to share a typically large data stream generated by multiple producers from a given topic.\n+Consumers are grouped using a `group.id`, allowing messages to be spread across the members.\n+\n+== Scaling data consumption using consumer groups\n+\n+Consumer groups share a typically large data stream generated by one or multiple producers from a given topic.\n+Consumers with the same `group.id` property are in the same group.\n+One of the consumers in the group is elected leader and decides how the partitions that the consumers are interested in should be assigned to the consumers.\n+Each partition can only be assigned to a single consumer.\n+\n+If you do not already have as many consumers as partitions,\n+you can scale data consumption by adding more consumer instances with the same `group.id`.\n+Adding more consumers to a group than there are partitions will not help throughput,\n+but it does mean that there are consumers on standby should one stop functioning.\n+If you can meet throughput goals with fewer consumers, you save on resources.\n+\n+Consumers within the same consumer group send offset commits and heartbeats to the same broker.\n+So the greater the number of consumers in the group, the higher the request load on the broker.\n+\n+----\n+# ...\n+group.id=my-group-id <1>\n+# ...\n+----\n+<1> Add a consumer to a consumer group using a group id.\n+\n+== Message ordering guarantees\n+\n+Kafka brokers receive fetch requests from consumers that ask the broker to send messages from a list of topics, partitions and offset positions.\n+\n+A consumer observes messages in a single partition in the same order that they were committed to the broker,\n+which means that Kafka *only* provides ordering guarantees for messages in a single partition.\n+Conversely, if a consumer is consuming messages from multiple partitions, the order of messages in different partitions as observed by the consumer does not necessarily reflect the order in which they were sent.\n+\n+If you want a strict ordering of messages from one topic, use one partition.\n+\n+== Optimizing throughput and latency\n+\n+Control the number of messages returned when your client application calls `KafkaConsumer.poll()`.\n+\n+Use the `fetch.max.wait.ms` and `fetch.min.bytes` properties to increase the minimum amount of data fetched by the consumer from the Kafka broker.\n+Time-based batching is configured using `fetch.max.wait.ms`, and size-based batching is configured using `fetch.min.bytes`.\n+\n+If CPU utilization in the consumer or broker is high, it might be because there are too many requests from the consumer.\n+You can adjust `fetch.max.wait.ms` and `fetch.min.bytes` properties higher so that there are fewer requests and messages are delivered in bigger batches.\n+By adjusting higher, throughput is improved with some cost to latency.\n+You can also adjust higher if the amount of data being produced is low.\n+\n+For example, if you set `fetch.max.wait.ms` to 500ms and `fetch.min.bytes` to 16384 bytes,\n+when Kafka receives a fetch request from the consumer it will respond when the first of either threshold is reached.\n+\n+Conversely, you can adjust the `fetch.max.wait.ms` and `fetch.min.bytes` properties lower to improve end-to-end latency.\n+\n+----\n+# ...\n+fetch.max.wait.ms=500 <1>\n+fetch.min.bytes=16384 <2>\n+# ...\n+----\n+<1> The maximum time in milliseconds the broker will wait before completing fetch requests.\n+The default is `500` milliseconds.\n+<2> If a minimum batch size in bytes is used, a request is sent when the minimum is reached, or messages have been queued for longer than `fetch.max.wait.ms` (whichever comes sooner).\n+Adding the delay allows batches to accumulate messages up to the batch size.\n+\n+.Lowering latency by increasing the fetch request size\n+\n+Use the `fetch.max.bytes` and `max.partition.fetch.bytes` properties to increase the maximum amount of data fetched by the consumer from the Kafka broker.\n+\n+The `fetch.max.bytes` property sets a maximum limit in bytes on the amount of data fetched from the broker at one time,\n+\n+The `max.partition.fetch.bytes` sets a maximum limit in bytes on how much data is returned for each partition,\n+which must always be larger than the number of bytes set in the broker or topic configuration for `max.message.bytes`.\n+\n+The maximum amount of memory a client can consume is approximately:\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+_NUMBER-OF-BROKERS_ * fetch.max.bytes and _NUMBER-OF-PARTITIONS_ * max.partition.fetch.bytes\n+----\n+\n+If memory usage can accommodate it, you can increase the values of these two properties.\n+By allowing more data in each request, latency is improved as there are fewer fetch requests.\n+\n+----\n+# ...\n+fetch.max.bytes=52428800 <1>\n+max.partition.fetch.bytes=1048576 <2>\n+# ...\n+----\n+<1> The maximum amount of data in bytes returned for a fetch request.\n+<2> The maximum amount of data in bytes returned for each partition.\n+\n+== Avoiding data loss or duplication when committing offsets\n+\n+The Kafka _auto-commit mechanism_ allows a consumer to commit the offsets of messages automatically.\n+If enabled, the consumer will commit offsets received from polling the broker at 5000ms intervals.\n+\n+The auto-commit mechanism is convenient, but it introduces a risk of data loss and duplication.\n+If a consumer has fetched and transformed a number of messages, but the system crashes with processed messages in the consumer buffer when performing an auto-commit, that data is lost.\n+If the system crashes after processing the messages, but before performing the auto-commit, the data is duplicated on another consumer instance after rebalancing.\n+\n+To minimize the likelihood of data loss or duplication, set `enable.auto.commit` to `false` and develop your client application to have more control over committing offsets.\n+Or use `auto.commit.interval.ms=1` to decrease the intervals between commits.\n+\n+By setting to `enable.auto.commit` to `false`, you can commit offsets after *all* processing has been performed and the message has been consumed.\n+For example, you can set up your application to call the Kafka `commitSync` and `commitAsync` commit APIs.\n+\n+The `commitSync` API commits the offsets in a message batch returned from polling.\n+You call the API when you are finished processing all the messages in the batch.\n+If you use the `commitSync` API, the application will not poll for new messages until the last offset in the batch is committed.\n+If this impacts throughput unduly, you can commit less frequently,\n+or you can use the `commitAsync` API.\n+The `commitAsync` API does not wait for the broker to respond to a commit request,\n+but risks creating more duplicates when rebalancing.\n+A common approach is to combine both commit APIs in an application, with the `commitSync` API used just before shutting the consumer down or rebalancing to make sure the final commit is successful.\n+\n+Also, consider using transactional ids and having idempotence enabled (`enable.idempotence=true`) on the producer side to guarantee exactly once delivery.\n+On the consumer side, you can then use the `isolation.level` property to control how transactional messages are read by the consumer.\n+\n+The `isolation.level` property has two valid values:\n+\n+* `read_committed`\n+* `read_uncommitted` (default)\n+\n+Use `read_committed` to ensure that only transactional messages that have been committed are read by the consumer.\n+However, this will cause an increase in end-to-end latency, because the consumer won\u2019t be able to return a message until the brokers have written the transaction markers that record the result of the transaction (_committed_ or _aborted_).\n+\n+----\n+# ...\n+enable.auto.commit=false <1>\n+isolation.level=read_committed <2>\n+# ...\n+----\n+<1> Auto commit is set to false to provide more control over committing offsets\n+<2> Set to `read_committed` so that only committed messages are read by the consumer.\n+\n+== Recovering from failure to avoid data loss\n+\n+Use the `session.timeout.ms` and `heartbeat.interval.ms` properties to configure the time taken to check and recover from consumer failure within a consumer group.\n+\n+The `session.timeout.ms` property specifies the maximum amount of time in milliseconds a consumer within a consumer group can be out of contact with a broker before being considered inactive and a _rebalancing_ is triggered between the active consumers in the group.\n+When the group rebalances, the partitions are reassigned to the members of the group.\n+\n+The `heartbeat.interval.ms` property specifies the interval in milliseconds between _heartbeat_ checks to the consumer group coordinator to indicate that the consumer is active and connected.\n+The heartbeat interval must be lower, usually by a third, than the session timeout interval.\n+\n+If you set the `session.timeout.ms` property lower, failing consumers are detected earlier, and rebalancing can take place quicker.\n+However, take care not to set the timeout so low that the broker fails to receive a heartbeat in time and triggers an unnecessary rebalance.\n+\n+Decreasing the heartbeat interval reduces the chance of accidental rebalancing, but more frequent heartbeats increases the overhead on broker resources.\n+\n+== Managing offset policy\n+\n+Use the `auto.offset.reset` property to control how a consumer behaves when no offsets have been committed,\n+or a committed offset is no longer valid or deleted.\n+\n+Suppose a consumer fails before an offset has been committed.\n+The consumer that then assumes responsibility for consuming the messages will start reading from the reassigned topic partition based on the reset policy.\n+The default value is `latest`, which starts at the end of the partition, and consequently means some messages are missed.\n+To avoid data loss, but increase the amount of processing, use the `earliest` value to start at the beginning of the partition.\n+\n+----\n+# ...\n+heartbeat.interval.ms=3000 <1>\n+session.timeout.ms=10000 <2>\n+auto.offset.reset=earliest <3>\n+# ...\n+----\n+<1> Adjust the heartbeat interval lower according to anticipated rebalances.\n+<2> If no heartbeats are received by the kafka broker before the timeout duration expires, the consumer is removed from the consumer group and a rebalance is initiated.\n+If the broker configuration has a `group.min.session.timeout.ms` and `group.max.session.timeout.ms`, the session timeout value must be within that range.\n+<3> Set to `earliest` to return to the start of a partition and avoid data loss if offsets were not committed.\n+\n+If the amount of data returned in a single fetch request is large,\n+a timeout might occur before the consumer has processed it.\n+If this is the case, you can lower `max.partition.fetch.bytes` or increase `session.timeout.ms`.\n+\n+== Minimizing the impact of rebalances\n+\n+The rebalancing of a partition between active consumers in a group is the time it takes for:\n+\n+* Consumers to commit their offsets\n+* The new consumer group to be formed\n+* The group leader to assign partitions to group members\n+* The consumers in group to receive their assignments and start fetching\n+\n+Clearly, the process increases the downtime of a service, particularly when it happens repeatedly during a rolling restart of a consumer group cluster.\n+\n+In this situation, you can use the concept of _static membership_ to reduce the number of rebalances.\n+Rebalancing assigns topic partitions evenly among consumer group members.\n+Static membership uses persistence so that a consumer instance is recognized during a restart after a session timeout.\n+\n+The consumer group coordinator can identify a new consumer instance using a unique id that is specified using the `group.instance.id` property.\n+During a restart, the consumer is assigned a new member id, but as a static member it continues with the same instance id,\n+and the same assignment of topic partitions is made.\n+\n+If the consumer application does not make a call to poll at least every `max.poll.interval.ms milliseconds`, the consumer is considered to be failed, causing a rebalance.\n+If the application cannot process all the records returned from poll in time, you can avoid a rebalance by using the `max.poll.interval.ms` property to specify the interval in milliseconds between polls for new messages from a consumer.\n+Or you can use the `max.poll.records` property to set a maximum limit on the number of records returned from the consumer buffer, allowing your application to process fewer records within the max.poll.interval.ms limit.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc9ff9c96964fae9b7cd34d00404b130d90c783f"}, "originalPosition": 240}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "233e94a3ffff6ad097fdb2e73b89a3c13a1a1e36", "author": {"user": {"login": "PaulRMellor", "name": null}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/233e94a3ffff6ad097fdb2e73b89a3c13a1a1e36", "committedDate": "2020-11-06T14:52:39Z", "message": "review edits DL\n\nSigned-off-by: prmellor <pmellor@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1NjUyMjUz", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#pullrequestreview-525652253", "createdAt": "2020-11-07T13:14:25Z", "commit": {"oid": "233e94a3ffff6ad097fdb2e73b89a3c13a1a1e36"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxMzoxNDoyNlrOHvIBAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxMzoxNDoyNlrOHvIBAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE3NjQ0OQ==", "bodyText": "The sentence suggests that it is possible to have a consumer without a group, which is not possible if I'm not wrong and according to this\napache/kafka@093e8e7", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#discussion_r519176449", "createdAt": "2020-11-07T13:14:26Z", "author": {"login": "OuesFa"}, "path": "documentation/modules/managing/con-consumer-config-properties.adoc", "diffHunk": "@@ -0,0 +1,252 @@\n+// This module is included in the following files:\n+//\n+// assembly-client-config.adoc\n+\n+[id='con-consumer-config-properties-{context}']\n+= Kafka consumer configuration tuning\n+\n+Use a basic consumer configuration with optional properties that are tailored to specific use cases.\n+\n+When tuning your consumers your primary concern will be ensuring that they cope efficiently with the amount of data ingested.\n+As with the producer tuning, be prepared to make incremental changes until the consumers operate as expected.\n+\n+== Basic consumer configuration\n+\n+Connection and deserializer properties are required for every consumer.\n+Generally, it is good practice to add a client id for tracking.\n+\n+In a consumer configuration, irrespective of any subsequent configuration:\n+\n+* The consumer fetches from a given offset and consumes the messages in order, unless the offset is changed to skip or re-read messages.\n+* The broker does not know if the consumer processed the responses, even when committing offsets to Kafka, because the offsets might be sent to a different broker in the cluster.\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+# ...\n+bootstrap.servers=localhost:9092 <1>\n+key.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <2>\n+value.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <3>\n+client.id=my-client <4>\n+group.id=my-group-id <5>\n+# ...\n+----\n+<1> (Required) Tells the consumer to connect to a Kafka cluster using a _host:port_ bootstrap server address for a Kafka broker.\n+The consumer uses the address to discover and connect to all brokers in the cluster.\n+Use a comma-separated list to specify two or three addresses in case a server is down, but it is not necessary to provide a list of all the brokers in the cluster.\n+If you are using a loadbalancer service to expose the Kafka cluster, you only need the address for the service because the availability is handled by the loadbalancer.\n+<2> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message keys.\n+<3> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message values.\n+<4> (Optional) The logical name for the client, which is used in logs and metrics to identify the source of a request. The id can also be used to throttle consumers based on processing time quotas.\n+<5> (Conditional) A group id is _required_ if the consumer belongs to a consumer group.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "233e94a3ffff6ad097fdb2e73b89a3c13a1a1e36"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1NjU4NDk3", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#pullrequestreview-525658497", "createdAt": "2020-11-07T14:57:35Z", "commit": {"oid": "233e94a3ffff6ad097fdb2e73b89a3c13a1a1e36"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxNDo1NzozNVrOHvIk-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxNDo1NzozNVrOHvIk-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE4NTY1Ng==", "bodyText": "I think automatic offset commits can provide at least once delivery as well. From the apche kafka docs:\n\nNote: Using automatic offset commits can also give you \"at-least-once\" delivery, but the requirement is that you must consume all data returned from each call to poll(Duration) before any subsequent calls, or before closing the consumer. If you fail to do either of these, it is possible for the committed offset to get ahead of the consumed position, which results in missing records. The advantage of using manual offset control is that you have direct control over when a record is considered \"consumed.\"\n\nReference: https://kafka.apache.org/23/javadoc/org/apache/kafka/clients/consumer/KafkaConsumer.html", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#discussion_r519185656", "createdAt": "2020-11-07T14:57:35Z", "author": {"login": "weeco"}, "path": "documentation/modules/managing/con-consumer-config-properties.adoc", "diffHunk": "@@ -0,0 +1,252 @@\n+// This module is included in the following files:\n+//\n+// assembly-client-config.adoc\n+\n+[id='con-consumer-config-properties-{context}']\n+= Kafka consumer configuration tuning\n+\n+Use a basic consumer configuration with optional properties that are tailored to specific use cases.\n+\n+When tuning your consumers your primary concern will be ensuring that they cope efficiently with the amount of data ingested.\n+As with the producer tuning, be prepared to make incremental changes until the consumers operate as expected.\n+\n+== Basic consumer configuration\n+\n+Connection and deserializer properties are required for every consumer.\n+Generally, it is good practice to add a client id for tracking.\n+\n+In a consumer configuration, irrespective of any subsequent configuration:\n+\n+* The consumer fetches from a given offset and consumes the messages in order, unless the offset is changed to skip or re-read messages.\n+* The broker does not know if the consumer processed the responses, even when committing offsets to Kafka, because the offsets might be sent to a different broker in the cluster.\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+# ...\n+bootstrap.servers=localhost:9092 <1>\n+key.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <2>\n+value.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <3>\n+client.id=my-client <4>\n+group.id=my-group-id <5>\n+# ...\n+----\n+<1> (Required) Tells the consumer to connect to a Kafka cluster using a _host:port_ bootstrap server address for a Kafka broker.\n+The consumer uses the address to discover and connect to all brokers in the cluster.\n+Use a comma-separated list to specify two or three addresses in case a server is down, but it is not necessary to provide a list of all the brokers in the cluster.\n+If you are using a loadbalancer service to expose the Kafka cluster, you only need the address for the service because the availability is handled by the loadbalancer.\n+<2> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message keys.\n+<3> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message values.\n+<4> (Optional) The logical name for the client, which is used in logs and metrics to identify the source of a request. The id can also be used to throttle consumers based on processing time quotas.\n+<5> (Conditional) A group id is _required_ if the consumer belongs to a consumer group.\n+\n+Consumer groups are used to share a typically large data stream generated by multiple producers from a given topic.\n+Consumers are grouped using a `group.id`, allowing messages to be spread across the members.\n+\n+== Scaling data consumption using consumer groups\n+\n+Consumer groups share a typically large data stream generated by one or multiple producers from a given topic.\n+Consumers with the same `group.id` property are in the same group.\n+One of the consumers in the group is elected leader and decides how the partitions are assigned to the consumers in the group.\n+Each partition can only be assigned to a single consumer.\n+\n+If you do not already have as many consumers as partitions,\n+you can scale data consumption by adding more consumer instances with the same `group.id`.\n+Adding more consumers to a group than there are partitions will not help throughput,\n+but it does mean that there are consumers on standby should one stop functioning.\n+If you can meet throughput goals with fewer consumers, you save on resources.\n+\n+Consumers within the same consumer group send offset commits and heartbeats to the same broker.\n+So the greater the number of consumers in the group, the higher the request load on the broker.\n+\n+----\n+# ...\n+group.id=my-group-id <1>\n+# ...\n+----\n+<1> Add a consumer to a consumer group using a group id.\n+\n+== Message ordering guarantees\n+\n+Kafka brokers receive fetch requests from consumers that ask the broker to send messages from a list of topics, partitions and offset positions.\n+\n+A consumer observes messages in a single partition in the same order that they were committed to the broker,\n+which means that Kafka *only* provides ordering guarantees for messages in a single partition.\n+Conversely, if a consumer is consuming messages from multiple partitions, the order of messages in different partitions as observed by the consumer does not necessarily reflect the order in which they were sent.\n+\n+If you want a strict ordering of messages from one topic, use one partition per consumer.\n+\n+== Optimizing throughput and latency\n+\n+Control the number of messages returned when your client application calls `KafkaConsumer.poll()`.\n+\n+Use the `fetch.max.wait.ms` and `fetch.min.bytes` properties to increase the minimum amount of data fetched by the consumer from the Kafka broker.\n+Time-based batching is configured using `fetch.max.wait.ms`, and size-based batching is configured using `fetch.min.bytes`.\n+\n+If CPU utilization in the consumer or broker is high, it might be because there are too many requests from the consumer.\n+You can adjust `fetch.max.wait.ms` and `fetch.min.bytes` properties higher so that there are fewer requests and messages are delivered in bigger batches.\n+By adjusting higher, throughput is improved with some cost to latency.\n+You can also adjust higher if the amount of data being produced is low.\n+\n+For example, if you set `fetch.max.wait.ms` to 500ms and `fetch.min.bytes` to 16384 bytes,\n+when Kafka receives a fetch request from the consumer it will respond when the first of either threshold is reached.\n+\n+Conversely, you can adjust the `fetch.max.wait.ms` and `fetch.min.bytes` properties lower to improve end-to-end latency.\n+\n+----\n+# ...\n+fetch.max.wait.ms=500 <1>\n+fetch.min.bytes=16384 <2>\n+# ...\n+----\n+<1> The maximum time in milliseconds the broker will wait before completing fetch requests.\n+The default is `500` milliseconds.\n+<2> If a minimum batch size in bytes is used, a request is sent when the minimum is reached, or messages have been queued for longer than `fetch.max.wait.ms` (whichever comes sooner).\n+Adding the delay allows batches to accumulate messages up to the batch size.\n+\n+.Lowering latency by increasing the fetch request size\n+\n+Use the `fetch.max.bytes` and `max.partition.fetch.bytes` properties to increase the maximum amount of data fetched by the consumer from the Kafka broker.\n+\n+The `fetch.max.bytes` property sets a maximum limit in bytes on the amount of data fetched from the broker at one time.\n+\n+The `max.partition.fetch.bytes` sets a maximum limit in bytes on how much data is returned for each partition,\n+which must always be larger than the number of bytes set in the broker or topic configuration for `max.message.bytes`.\n+\n+The maximum amount of memory a client can consume is calculated approximately as:\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+_NUMBER-OF-BROKERS_ * fetch.max.bytes and _NUMBER-OF-PARTITIONS_ * max.partition.fetch.bytes\n+----\n+\n+If memory usage can accommodate it, you can increase the values of these two properties.\n+By allowing more data in each request, latency is improved as there are fewer fetch requests.\n+\n+----\n+# ...\n+fetch.max.bytes=52428800 <1>\n+max.partition.fetch.bytes=1048576 <2>\n+# ...\n+----\n+<1> The maximum amount of data in bytes returned for a fetch request.\n+<2> The maximum amount of data in bytes returned for each partition.\n+\n+== Avoiding data loss or duplication when committing offsets\n+\n+The Kafka _auto-commit mechanism_ allows a consumer to commit the offsets of messages automatically.\n+If enabled, the consumer will commit offsets received from polling the broker at 5000ms intervals.\n+\n+The auto-commit mechanism is convenient, but it introduces a risk of data loss and duplication.\n+If a consumer has fetched and transformed a number of messages, but the system crashes with processed messages in the consumer buffer when performing an auto-commit, that data is lost.\n+If the system crashes after processing the messages, but before performing the auto-commit, the data is duplicated on another consumer instance after rebalancing.\n+\n+To minimize the likelihood of data loss or duplication, set `enable.auto.commit` to `false` and develop your client application to have more control over committing offsets.\n+Or use `auto.commit.interval.ms=1` to decrease the intervals between commits.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "233e94a3ffff6ad097fdb2e73b89a3c13a1a1e36"}, "originalPosition": 144}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1NjYyMjI3", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#pullrequestreview-525662227", "createdAt": "2020-11-07T15:55:44Z", "commit": {"oid": "233e94a3ffff6ad097fdb2e73b89a3c13a1a1e36"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MDc3MjQ0", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#pullrequestreview-526077244", "createdAt": "2020-11-09T09:42:26Z", "commit": {"oid": "233e94a3ffff6ad097fdb2e73b89a3c13a1a1e36"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe5594803b2d1490093d4334e0836e3f968b2846", "author": {"user": {"login": "PaulRMellor", "name": null}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/fe5594803b2d1490093d4334e0836e3f968b2846", "committedDate": "2020-11-09T15:31:20Z", "message": "review edits JS, MS\n\nSigned-off-by: prmellor <pmellor@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2OTc4NDA1", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#pullrequestreview-526978405", "createdAt": "2020-11-10T08:52:12Z", "commit": {"oid": "fe5594803b2d1490093d4334e0836e3f968b2846"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwODo1MjoxMlrOHwSDaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwOTowNToxN1rOHwSjJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM4OTQ4MA==", "bodyText": "I think we should suggest to lower it, but not suggest a specific value.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#discussion_r520389480", "createdAt": "2020-11-10T08:52:12Z", "author": {"login": "tombentley"}, "path": "documentation/modules/managing/con-consumer-config-properties.adoc", "diffHunk": "@@ -0,0 +1,255 @@\n+// This module is included in the following files:\n+//\n+// assembly-client-config.adoc\n+\n+[id='con-consumer-config-properties-{context}']\n+= Kafka consumer configuration tuning\n+\n+Use a basic consumer configuration with optional properties that are tailored to specific use cases.\n+\n+When tuning your consumers your primary concern will be ensuring that they cope efficiently with the amount of data ingested.\n+As with the producer tuning, be prepared to make incremental changes until the consumers operate as expected.\n+\n+== Basic consumer configuration\n+\n+Connection and deserializer properties are required for every consumer.\n+Generally, it is good practice to add a client id for tracking.\n+\n+In a consumer configuration, irrespective of any subsequent configuration:\n+\n+* The consumer fetches from a given offset and consumes the messages in order, unless the offset is changed to skip or re-read messages.\n+* The broker does not know if the consumer processed the responses, even when committing offsets to Kafka, because the offsets might be sent to a different broker in the cluster.\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+# ...\n+bootstrap.servers=localhost:9092 <1>\n+key.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <2>\n+value.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <3>\n+client.id=my-client <4>\n+group.id=my-group-id <5>\n+# ...\n+----\n+<1> (Required) Tells the consumer to connect to a Kafka cluster using a _host:port_ bootstrap server address for a Kafka broker.\n+The consumer uses the address to discover and connect to all brokers in the cluster.\n+Use a comma-separated list to specify two or three addresses in case a server is down, but it is not necessary to provide a list of all the brokers in the cluster.\n+If you are using a loadbalancer service to expose the Kafka cluster, you only need the address for the service because the availability is handled by the loadbalancer.\n+<2> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message keys.\n+<3> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message values.\n+<4> (Optional) The logical name for the client, which is used in logs and metrics to identify the source of a request. The id can also be used to throttle consumers based on processing time quotas.\n+<5> (Conditional) A group id is _required_ for a consumer to be able to join a consumer group.\n+\n+Consumer groups are used to share a typically large data stream generated by multiple producers from a given topic.\n+Consumers are grouped using a `group.id`, allowing messages to be spread across the members.\n+\n+== Scaling data consumption using consumer groups\n+\n+Consumer groups share a typically large data stream generated by one or multiple producers from a given topic.\n+Consumers with the same `group.id` property are in the same group.\n+One of the consumers in the group is elected leader and decides how the partitions are assigned to the consumers in the group.\n+Each partition can only be assigned to a single consumer.\n+\n+If you do not already have as many consumers as partitions,\n+you can scale data consumption by adding more consumer instances with the same `group.id`.\n+Adding more consumers to a group than there are partitions will not help throughput,\n+but it does mean that there are consumers on standby should one stop functioning.\n+If you can meet throughput goals with fewer consumers, you save on resources.\n+\n+Consumers within the same consumer group send offset commits and heartbeats to the same broker.\n+So the greater the number of consumers in the group, the higher the request load on the broker.\n+\n+----\n+# ...\n+group.id=my-group-id <1>\n+# ...\n+----\n+<1> Add a consumer to a consumer group using a group id.\n+\n+== Message ordering guarantees\n+\n+Kafka brokers receive fetch requests from consumers that ask the broker to send messages from a list of topics, partitions and offset positions.\n+\n+A consumer observes messages in a single partition in the same order that they were committed to the broker,\n+which means that Kafka *only* provides ordering guarantees for messages in a single partition.\n+Conversely, if a consumer is consuming messages from multiple partitions, the order of messages in different partitions as observed by the consumer does not necessarily reflect the order in which they were sent.\n+\n+If you want a strict ordering of messages from one topic, use one partition per consumer.\n+\n+== Optimizing throughput and latency\n+\n+Control the number of messages returned when your client application calls `KafkaConsumer.poll()`.\n+\n+Use the `fetch.max.wait.ms` and `fetch.min.bytes` properties to increase the minimum amount of data fetched by the consumer from the Kafka broker.\n+Time-based batching is configured using `fetch.max.wait.ms`, and size-based batching is configured using `fetch.min.bytes`.\n+\n+If CPU utilization in the consumer or broker is high, it might be because there are too many requests from the consumer.\n+You can adjust `fetch.max.wait.ms` and `fetch.min.bytes` properties higher so that there are fewer requests and messages are delivered in bigger batches.\n+By adjusting higher, throughput is improved with some cost to latency.\n+You can also adjust higher if the amount of data being produced is low.\n+\n+For example, if you set `fetch.max.wait.ms` to 500ms and `fetch.min.bytes` to 16384 bytes,\n+when Kafka receives a fetch request from the consumer it will respond when the first of either threshold is reached.\n+\n+Conversely, you can adjust the `fetch.max.wait.ms` and `fetch.min.bytes` properties lower to improve end-to-end latency.\n+\n+----\n+# ...\n+fetch.max.wait.ms=500 <1>\n+fetch.min.bytes=16384 <2>\n+# ...\n+----\n+<1> The maximum time in milliseconds the broker will wait before completing fetch requests.\n+The default is `500` milliseconds.\n+<2> If a minimum batch size in bytes is used, a request is sent when the minimum is reached, or messages have been queued for longer than `fetch.max.wait.ms` (whichever comes sooner).\n+Adding the delay allows batches to accumulate messages up to the batch size.\n+\n+.Lowering latency by increasing the fetch request size\n+\n+Use the `fetch.max.bytes` and `max.partition.fetch.bytes` properties to increase the maximum amount of data fetched by the consumer from the Kafka broker.\n+\n+The `fetch.max.bytes` property sets a maximum limit in bytes on the amount of data fetched from the broker at one time.\n+\n+The `max.partition.fetch.bytes` sets a maximum limit in bytes on how much data is returned for each partition,\n+which must always be larger than the number of bytes set in the broker or topic configuration for `max.message.bytes`.\n+\n+The maximum amount of memory a client can consume is calculated approximately as:\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+_NUMBER-OF-BROKERS_ * fetch.max.bytes and _NUMBER-OF-PARTITIONS_ * max.partition.fetch.bytes\n+----\n+\n+If memory usage can accommodate it, you can increase the values of these two properties.\n+By allowing more data in each request, latency is improved as there are fewer fetch requests.\n+\n+----\n+# ...\n+fetch.max.bytes=52428800 <1>\n+max.partition.fetch.bytes=1048576 <2>\n+# ...\n+----\n+<1> The maximum amount of data in bytes returned for a fetch request.\n+<2> The maximum amount of data in bytes returned for each partition.\n+\n+== Avoiding data loss or duplication when committing offsets\n+\n+The Kafka _auto-commit mechanism_ allows a consumer to commit the offsets of messages automatically.\n+If enabled, the consumer will commit offsets received from polling the broker at 5000ms intervals.\n+\n+The auto-commit mechanism is convenient, but it introduces a risk of data loss and duplication.\n+If a consumer has fetched and transformed a number of messages, but the system crashes with processed messages in the consumer buffer when performing an auto-commit, that data is lost.\n+If the system crashes after processing the messages, but before performing the auto-commit, the data is duplicated on another consumer instance after rebalancing.\n+\n+Auto-committing can avoid data loss only when all messages are processed before the next poll to the broker,\n+or the consumer closes.\n+\n+To minimize the likelihood of data loss or duplication, you can set `enable.auto.commit` to `false` and develop your client application to have more control over committing offsets.\n+Or you can use `auto.commit.interval.ms=1` to decrease the intervals between commits.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe5594803b2d1490093d4334e0836e3f968b2846"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM5MDcwNQ==", "bodyText": "Maybe this deserves its own subsection?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#discussion_r520390705", "createdAt": "2020-11-10T08:54:20Z", "author": {"login": "tombentley"}, "path": "documentation/modules/managing/con-consumer-config-properties.adoc", "diffHunk": "@@ -0,0 +1,255 @@\n+// This module is included in the following files:\n+//\n+// assembly-client-config.adoc\n+\n+[id='con-consumer-config-properties-{context}']\n+= Kafka consumer configuration tuning\n+\n+Use a basic consumer configuration with optional properties that are tailored to specific use cases.\n+\n+When tuning your consumers your primary concern will be ensuring that they cope efficiently with the amount of data ingested.\n+As with the producer tuning, be prepared to make incremental changes until the consumers operate as expected.\n+\n+== Basic consumer configuration\n+\n+Connection and deserializer properties are required for every consumer.\n+Generally, it is good practice to add a client id for tracking.\n+\n+In a consumer configuration, irrespective of any subsequent configuration:\n+\n+* The consumer fetches from a given offset and consumes the messages in order, unless the offset is changed to skip or re-read messages.\n+* The broker does not know if the consumer processed the responses, even when committing offsets to Kafka, because the offsets might be sent to a different broker in the cluster.\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+# ...\n+bootstrap.servers=localhost:9092 <1>\n+key.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <2>\n+value.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <3>\n+client.id=my-client <4>\n+group.id=my-group-id <5>\n+# ...\n+----\n+<1> (Required) Tells the consumer to connect to a Kafka cluster using a _host:port_ bootstrap server address for a Kafka broker.\n+The consumer uses the address to discover and connect to all brokers in the cluster.\n+Use a comma-separated list to specify two or three addresses in case a server is down, but it is not necessary to provide a list of all the brokers in the cluster.\n+If you are using a loadbalancer service to expose the Kafka cluster, you only need the address for the service because the availability is handled by the loadbalancer.\n+<2> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message keys.\n+<3> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message values.\n+<4> (Optional) The logical name for the client, which is used in logs and metrics to identify the source of a request. The id can also be used to throttle consumers based on processing time quotas.\n+<5> (Conditional) A group id is _required_ for a consumer to be able to join a consumer group.\n+\n+Consumer groups are used to share a typically large data stream generated by multiple producers from a given topic.\n+Consumers are grouped using a `group.id`, allowing messages to be spread across the members.\n+\n+== Scaling data consumption using consumer groups\n+\n+Consumer groups share a typically large data stream generated by one or multiple producers from a given topic.\n+Consumers with the same `group.id` property are in the same group.\n+One of the consumers in the group is elected leader and decides how the partitions are assigned to the consumers in the group.\n+Each partition can only be assigned to a single consumer.\n+\n+If you do not already have as many consumers as partitions,\n+you can scale data consumption by adding more consumer instances with the same `group.id`.\n+Adding more consumers to a group than there are partitions will not help throughput,\n+but it does mean that there are consumers on standby should one stop functioning.\n+If you can meet throughput goals with fewer consumers, you save on resources.\n+\n+Consumers within the same consumer group send offset commits and heartbeats to the same broker.\n+So the greater the number of consumers in the group, the higher the request load on the broker.\n+\n+----\n+# ...\n+group.id=my-group-id <1>\n+# ...\n+----\n+<1> Add a consumer to a consumer group using a group id.\n+\n+== Message ordering guarantees\n+\n+Kafka brokers receive fetch requests from consumers that ask the broker to send messages from a list of topics, partitions and offset positions.\n+\n+A consumer observes messages in a single partition in the same order that they were committed to the broker,\n+which means that Kafka *only* provides ordering guarantees for messages in a single partition.\n+Conversely, if a consumer is consuming messages from multiple partitions, the order of messages in different partitions as observed by the consumer does not necessarily reflect the order in which they were sent.\n+\n+If you want a strict ordering of messages from one topic, use one partition per consumer.\n+\n+== Optimizing throughput and latency\n+\n+Control the number of messages returned when your client application calls `KafkaConsumer.poll()`.\n+\n+Use the `fetch.max.wait.ms` and `fetch.min.bytes` properties to increase the minimum amount of data fetched by the consumer from the Kafka broker.\n+Time-based batching is configured using `fetch.max.wait.ms`, and size-based batching is configured using `fetch.min.bytes`.\n+\n+If CPU utilization in the consumer or broker is high, it might be because there are too many requests from the consumer.\n+You can adjust `fetch.max.wait.ms` and `fetch.min.bytes` properties higher so that there are fewer requests and messages are delivered in bigger batches.\n+By adjusting higher, throughput is improved with some cost to latency.\n+You can also adjust higher if the amount of data being produced is low.\n+\n+For example, if you set `fetch.max.wait.ms` to 500ms and `fetch.min.bytes` to 16384 bytes,\n+when Kafka receives a fetch request from the consumer it will respond when the first of either threshold is reached.\n+\n+Conversely, you can adjust the `fetch.max.wait.ms` and `fetch.min.bytes` properties lower to improve end-to-end latency.\n+\n+----\n+# ...\n+fetch.max.wait.ms=500 <1>\n+fetch.min.bytes=16384 <2>\n+# ...\n+----\n+<1> The maximum time in milliseconds the broker will wait before completing fetch requests.\n+The default is `500` milliseconds.\n+<2> If a minimum batch size in bytes is used, a request is sent when the minimum is reached, or messages have been queued for longer than `fetch.max.wait.ms` (whichever comes sooner).\n+Adding the delay allows batches to accumulate messages up to the batch size.\n+\n+.Lowering latency by increasing the fetch request size\n+\n+Use the `fetch.max.bytes` and `max.partition.fetch.bytes` properties to increase the maximum amount of data fetched by the consumer from the Kafka broker.\n+\n+The `fetch.max.bytes` property sets a maximum limit in bytes on the amount of data fetched from the broker at one time.\n+\n+The `max.partition.fetch.bytes` sets a maximum limit in bytes on how much data is returned for each partition,\n+which must always be larger than the number of bytes set in the broker or topic configuration for `max.message.bytes`.\n+\n+The maximum amount of memory a client can consume is calculated approximately as:\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+_NUMBER-OF-BROKERS_ * fetch.max.bytes and _NUMBER-OF-PARTITIONS_ * max.partition.fetch.bytes\n+----\n+\n+If memory usage can accommodate it, you can increase the values of these two properties.\n+By allowing more data in each request, latency is improved as there are fewer fetch requests.\n+\n+----\n+# ...\n+fetch.max.bytes=52428800 <1>\n+max.partition.fetch.bytes=1048576 <2>\n+# ...\n+----\n+<1> The maximum amount of data in bytes returned for a fetch request.\n+<2> The maximum amount of data in bytes returned for each partition.\n+\n+== Avoiding data loss or duplication when committing offsets\n+\n+The Kafka _auto-commit mechanism_ allows a consumer to commit the offsets of messages automatically.\n+If enabled, the consumer will commit offsets received from polling the broker at 5000ms intervals.\n+\n+The auto-commit mechanism is convenient, but it introduces a risk of data loss and duplication.\n+If a consumer has fetched and transformed a number of messages, but the system crashes with processed messages in the consumer buffer when performing an auto-commit, that data is lost.\n+If the system crashes after processing the messages, but before performing the auto-commit, the data is duplicated on another consumer instance after rebalancing.\n+\n+Auto-committing can avoid data loss only when all messages are processed before the next poll to the broker,\n+or the consumer closes.\n+\n+To minimize the likelihood of data loss or duplication, you can set `enable.auto.commit` to `false` and develop your client application to have more control over committing offsets.\n+Or you can use `auto.commit.interval.ms=1` to decrease the intervals between commits.\n+\n+By setting to `enable.auto.commit` to `false`, you can commit offsets after *all* processing has been performed and the message has been consumed.\n+For example, you can set up your application to call the Kafka `commitSync` and `commitAsync` commit APIs.\n+\n+The `commitSync` API commits the offsets in a message batch returned from polling.\n+You call the API when you are finished processing all the messages in the batch.\n+If you use the `commitSync` API, the application will not poll for new messages until the last offset in the batch is committed.\n+If this negatively affects throughput, you can commit less frequently,\n+or you can use the `commitAsync` API.\n+The `commitAsync` API does not wait for the broker to respond to a commit request,\n+but risks creating more duplicates when rebalancing.\n+A common approach is to combine both commit APIs in an application, with the `commitSync` API used just before shutting the consumer down or rebalancing to make sure the final commit is successful.\n+\n+Also, consider using transactional ids and having idempotence enabled (`enable.idempotence=true`) on the producer side to guarantee exactly-once delivery.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe5594803b2d1490093d4334e0836e3f968b2846"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM5NzYwNQ==", "bodyText": "I'm not sure this is really be best example. Better would be:\nYou're deploying a consumer application for the first time and it reads an already existing topic with messages. Because this is the first time this group.id has been used the __consumer_offsets topic won't contain any offset information for this application. Should the new application start processing from the start of the log (thus processing all the existing messages), or the end of the log (thus processing only the messages which are appended from now on)?\nThere are other examples too (e.g. where a previously committed offset gets removed from __consumer_offsets because offsets.retention.minutes has passed without any commits from the (standalone) consumer of member of the consumer group).", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3912#discussion_r520397605", "createdAt": "2020-11-10T09:05:17Z", "author": {"login": "tombentley"}, "path": "documentation/modules/managing/con-consumer-config-properties.adoc", "diffHunk": "@@ -0,0 +1,255 @@\n+// This module is included in the following files:\n+//\n+// assembly-client-config.adoc\n+\n+[id='con-consumer-config-properties-{context}']\n+= Kafka consumer configuration tuning\n+\n+Use a basic consumer configuration with optional properties that are tailored to specific use cases.\n+\n+When tuning your consumers your primary concern will be ensuring that they cope efficiently with the amount of data ingested.\n+As with the producer tuning, be prepared to make incremental changes until the consumers operate as expected.\n+\n+== Basic consumer configuration\n+\n+Connection and deserializer properties are required for every consumer.\n+Generally, it is good practice to add a client id for tracking.\n+\n+In a consumer configuration, irrespective of any subsequent configuration:\n+\n+* The consumer fetches from a given offset and consumes the messages in order, unless the offset is changed to skip or re-read messages.\n+* The broker does not know if the consumer processed the responses, even when committing offsets to Kafka, because the offsets might be sent to a different broker in the cluster.\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+# ...\n+bootstrap.servers=localhost:9092 <1>\n+key.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <2>\n+value.deserializer=org.apache.kafka.common.serialization.StringDeserializer  <3>\n+client.id=my-client <4>\n+group.id=my-group-id <5>\n+# ...\n+----\n+<1> (Required) Tells the consumer to connect to a Kafka cluster using a _host:port_ bootstrap server address for a Kafka broker.\n+The consumer uses the address to discover and connect to all brokers in the cluster.\n+Use a comma-separated list to specify two or three addresses in case a server is down, but it is not necessary to provide a list of all the brokers in the cluster.\n+If you are using a loadbalancer service to expose the Kafka cluster, you only need the address for the service because the availability is handled by the loadbalancer.\n+<2> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message keys.\n+<3> (Required) Deserializer to transform the bytes fetched from the Kafka broker into message values.\n+<4> (Optional) The logical name for the client, which is used in logs and metrics to identify the source of a request. The id can also be used to throttle consumers based on processing time quotas.\n+<5> (Conditional) A group id is _required_ for a consumer to be able to join a consumer group.\n+\n+Consumer groups are used to share a typically large data stream generated by multiple producers from a given topic.\n+Consumers are grouped using a `group.id`, allowing messages to be spread across the members.\n+\n+== Scaling data consumption using consumer groups\n+\n+Consumer groups share a typically large data stream generated by one or multiple producers from a given topic.\n+Consumers with the same `group.id` property are in the same group.\n+One of the consumers in the group is elected leader and decides how the partitions are assigned to the consumers in the group.\n+Each partition can only be assigned to a single consumer.\n+\n+If you do not already have as many consumers as partitions,\n+you can scale data consumption by adding more consumer instances with the same `group.id`.\n+Adding more consumers to a group than there are partitions will not help throughput,\n+but it does mean that there are consumers on standby should one stop functioning.\n+If you can meet throughput goals with fewer consumers, you save on resources.\n+\n+Consumers within the same consumer group send offset commits and heartbeats to the same broker.\n+So the greater the number of consumers in the group, the higher the request load on the broker.\n+\n+----\n+# ...\n+group.id=my-group-id <1>\n+# ...\n+----\n+<1> Add a consumer to a consumer group using a group id.\n+\n+== Message ordering guarantees\n+\n+Kafka brokers receive fetch requests from consumers that ask the broker to send messages from a list of topics, partitions and offset positions.\n+\n+A consumer observes messages in a single partition in the same order that they were committed to the broker,\n+which means that Kafka *only* provides ordering guarantees for messages in a single partition.\n+Conversely, if a consumer is consuming messages from multiple partitions, the order of messages in different partitions as observed by the consumer does not necessarily reflect the order in which they were sent.\n+\n+If you want a strict ordering of messages from one topic, use one partition per consumer.\n+\n+== Optimizing throughput and latency\n+\n+Control the number of messages returned when your client application calls `KafkaConsumer.poll()`.\n+\n+Use the `fetch.max.wait.ms` and `fetch.min.bytes` properties to increase the minimum amount of data fetched by the consumer from the Kafka broker.\n+Time-based batching is configured using `fetch.max.wait.ms`, and size-based batching is configured using `fetch.min.bytes`.\n+\n+If CPU utilization in the consumer or broker is high, it might be because there are too many requests from the consumer.\n+You can adjust `fetch.max.wait.ms` and `fetch.min.bytes` properties higher so that there are fewer requests and messages are delivered in bigger batches.\n+By adjusting higher, throughput is improved with some cost to latency.\n+You can also adjust higher if the amount of data being produced is low.\n+\n+For example, if you set `fetch.max.wait.ms` to 500ms and `fetch.min.bytes` to 16384 bytes,\n+when Kafka receives a fetch request from the consumer it will respond when the first of either threshold is reached.\n+\n+Conversely, you can adjust the `fetch.max.wait.ms` and `fetch.min.bytes` properties lower to improve end-to-end latency.\n+\n+----\n+# ...\n+fetch.max.wait.ms=500 <1>\n+fetch.min.bytes=16384 <2>\n+# ...\n+----\n+<1> The maximum time in milliseconds the broker will wait before completing fetch requests.\n+The default is `500` milliseconds.\n+<2> If a minimum batch size in bytes is used, a request is sent when the minimum is reached, or messages have been queued for longer than `fetch.max.wait.ms` (whichever comes sooner).\n+Adding the delay allows batches to accumulate messages up to the batch size.\n+\n+.Lowering latency by increasing the fetch request size\n+\n+Use the `fetch.max.bytes` and `max.partition.fetch.bytes` properties to increase the maximum amount of data fetched by the consumer from the Kafka broker.\n+\n+The `fetch.max.bytes` property sets a maximum limit in bytes on the amount of data fetched from the broker at one time.\n+\n+The `max.partition.fetch.bytes` sets a maximum limit in bytes on how much data is returned for each partition,\n+which must always be larger than the number of bytes set in the broker or topic configuration for `max.message.bytes`.\n+\n+The maximum amount of memory a client can consume is calculated approximately as:\n+\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+_NUMBER-OF-BROKERS_ * fetch.max.bytes and _NUMBER-OF-PARTITIONS_ * max.partition.fetch.bytes\n+----\n+\n+If memory usage can accommodate it, you can increase the values of these two properties.\n+By allowing more data in each request, latency is improved as there are fewer fetch requests.\n+\n+----\n+# ...\n+fetch.max.bytes=52428800 <1>\n+max.partition.fetch.bytes=1048576 <2>\n+# ...\n+----\n+<1> The maximum amount of data in bytes returned for a fetch request.\n+<2> The maximum amount of data in bytes returned for each partition.\n+\n+== Avoiding data loss or duplication when committing offsets\n+\n+The Kafka _auto-commit mechanism_ allows a consumer to commit the offsets of messages automatically.\n+If enabled, the consumer will commit offsets received from polling the broker at 5000ms intervals.\n+\n+The auto-commit mechanism is convenient, but it introduces a risk of data loss and duplication.\n+If a consumer has fetched and transformed a number of messages, but the system crashes with processed messages in the consumer buffer when performing an auto-commit, that data is lost.\n+If the system crashes after processing the messages, but before performing the auto-commit, the data is duplicated on another consumer instance after rebalancing.\n+\n+Auto-committing can avoid data loss only when all messages are processed before the next poll to the broker,\n+or the consumer closes.\n+\n+To minimize the likelihood of data loss or duplication, you can set `enable.auto.commit` to `false` and develop your client application to have more control over committing offsets.\n+Or you can use `auto.commit.interval.ms=1` to decrease the intervals between commits.\n+\n+By setting to `enable.auto.commit` to `false`, you can commit offsets after *all* processing has been performed and the message has been consumed.\n+For example, you can set up your application to call the Kafka `commitSync` and `commitAsync` commit APIs.\n+\n+The `commitSync` API commits the offsets in a message batch returned from polling.\n+You call the API when you are finished processing all the messages in the batch.\n+If you use the `commitSync` API, the application will not poll for new messages until the last offset in the batch is committed.\n+If this negatively affects throughput, you can commit less frequently,\n+or you can use the `commitAsync` API.\n+The `commitAsync` API does not wait for the broker to respond to a commit request,\n+but risks creating more duplicates when rebalancing.\n+A common approach is to combine both commit APIs in an application, with the `commitSync` API used just before shutting the consumer down or rebalancing to make sure the final commit is successful.\n+\n+Also, consider using transactional ids and having idempotence enabled (`enable.idempotence=true`) on the producer side to guarantee exactly-once delivery.\n+On the consumer side, you can then use the `isolation.level` property to control how transactional messages are read by the consumer.\n+\n+The `isolation.level` property has two valid values:\n+\n+* `read_committed`\n+* `read_uncommitted` (default)\n+\n+Use `read_committed` to ensure that only transactional messages that have been committed are read by the consumer.\n+However, this will cause an increase in end-to-end latency, because the consumer will not be able to return a message until the brokers have written the transaction markers that record the result of the transaction (_committed_ or _aborted_).\n+\n+----\n+# ...\n+enable.auto.commit=false <1>\n+isolation.level=read_committed <2>\n+# ...\n+----\n+<1> Auto commit is set to false to provide more control over committing offsets.\n+<2> Set to `read_committed` so that only committed messages are read by the consumer.\n+\n+== Recovering from failure to avoid data loss\n+\n+Use the `session.timeout.ms` and `heartbeat.interval.ms` properties to configure the time taken to check and recover from consumer failure within a consumer group.\n+\n+The `session.timeout.ms` property specifies the maximum amount of time in milliseconds a consumer within a consumer group can be out of contact with a broker before being considered inactive and a _rebalancing_ is triggered between the active consumers in the group.\n+When the group rebalances, the partitions are reassigned to the members of the group.\n+\n+The `heartbeat.interval.ms` property specifies the interval in milliseconds between _heartbeat_ checks to the consumer group coordinator to indicate that the consumer is active and connected.\n+The heartbeat interval must be lower, usually by a third, than the session timeout interval.\n+\n+If you set the `session.timeout.ms` property lower, failing consumers are detected earlier, and rebalancing can take place quicker.\n+However, take care not to set the timeout so low that the broker fails to receive a heartbeat in time and triggers an unnecessary rebalance.\n+\n+Decreasing the heartbeat interval reduces the chance of accidental rebalancing, but more frequent heartbeats increases the overhead on broker resources.\n+\n+== Managing offset policy\n+\n+Use the `auto.offset.reset` property to control how a consumer behaves when no offsets have been committed,\n+or a committed offset is no longer valid or deleted.\n+\n+Suppose a consumer fails before an offset has been committed.\n+The consumer that then assumes responsibility for consuming the messages will start reading from the reassigned topic partition based on the reset policy.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe5594803b2d1490093d4334e0836e3f968b2846"}, "originalPosition": 202}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da4094187040f28d1843aabfdcb6600c829a3ec7", "author": {"user": {"login": "PaulRMellor", "name": null}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/da4094187040f28d1843aabfdcb6600c829a3ec7", "committedDate": "2020-11-10T15:00:30Z", "message": "review edits TB\n\nSigned-off-by: prmellor <pmellor@redhat.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 877, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}