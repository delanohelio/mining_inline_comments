{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0NzUwMzU1", "number": 2847, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMTozMzozNlrODyrskA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMjoxMDowM1rODy4GEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDcxMzEyOnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/kafka/ListenersST.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMTozMzozN1rOGG39Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMDo1ODo1OVrOGHJjRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg2MTQ2Ng==", "bodyText": "Why 5 times?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2847#discussion_r409861466", "createdAt": "2020-04-16T21:33:37Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/kafka/ListenersST.java", "diffHunk": "@@ -657,12 +657,15 @@ void testCustomCertLoadBalancerAndTlsRollingUpdate() throws Exception {\n         );\n \n         internalKafkaClient.setConsumerGroup(\"consumer-group-certs-71\");\n-        internalKafkaClient.setMessageCount(MESSAGE_COUNT * 3);\n+        internalKafkaClient.setMessageCount(MESSAGE_COUNT);\n \n         sent = internalKafkaClient.sendMessagesTls();\n-        assertThat(sent, is(3 * MESSAGE_COUNT));\n+        assertThat(sent, is(MESSAGE_COUNT));\n+\n+        internalKafkaClient.setMessageCount(MESSAGE_COUNT * 5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a60954136a74d08a187807d42868edb4f058c90"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE0NDk5MA==", "bodyText": "I need to get some info from Maros about clients -> but if you set different CONSUMER_GROUP you'll receive all messages until that moment -> not just messages you set in setMessagesCount. So maybe it's problem in VerifiableClient. But in the original test (before refactor of the clients) was it this way.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2847#discussion_r410144990", "createdAt": "2020-04-17T10:48:30Z", "author": {"login": "im-konge"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/kafka/ListenersST.java", "diffHunk": "@@ -657,12 +657,15 @@ void testCustomCertLoadBalancerAndTlsRollingUpdate() throws Exception {\n         );\n \n         internalKafkaClient.setConsumerGroup(\"consumer-group-certs-71\");\n-        internalKafkaClient.setMessageCount(MESSAGE_COUNT * 3);\n+        internalKafkaClient.setMessageCount(MESSAGE_COUNT);\n \n         sent = internalKafkaClient.sendMessagesTls();\n-        assertThat(sent, is(3 * MESSAGE_COUNT));\n+        assertThat(sent, is(MESSAGE_COUNT));\n+\n+        internalKafkaClient.setMessageCount(MESSAGE_COUNT * 5);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg2MTQ2Ng=="}, "originalCommit": {"oid": "6a60954136a74d08a187807d42868edb4f058c90"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE0OTQyMQ==", "bodyText": "Can you open the issue for it? We should understand what's happening here.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2847#discussion_r410149421", "createdAt": "2020-04-17T10:58:20Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/kafka/ListenersST.java", "diffHunk": "@@ -657,12 +657,15 @@ void testCustomCertLoadBalancerAndTlsRollingUpdate() throws Exception {\n         );\n \n         internalKafkaClient.setConsumerGroup(\"consumer-group-certs-71\");\n-        internalKafkaClient.setMessageCount(MESSAGE_COUNT * 3);\n+        internalKafkaClient.setMessageCount(MESSAGE_COUNT);\n \n         sent = internalKafkaClient.sendMessagesTls();\n-        assertThat(sent, is(3 * MESSAGE_COUNT));\n+        assertThat(sent, is(MESSAGE_COUNT));\n+\n+        internalKafkaClient.setMessageCount(MESSAGE_COUNT * 5);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg2MTQ2Ng=="}, "originalCommit": {"oid": "6a60954136a74d08a187807d42868edb4f058c90"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE0OTcwMA==", "bodyText": "Yeah sure -> how I said - maybe it's fault in understanding from my side, we will see.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2847#discussion_r410149700", "createdAt": "2020-04-17T10:58:59Z", "author": {"login": "im-konge"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/kafka/ListenersST.java", "diffHunk": "@@ -657,12 +657,15 @@ void testCustomCertLoadBalancerAndTlsRollingUpdate() throws Exception {\n         );\n \n         internalKafkaClient.setConsumerGroup(\"consumer-group-certs-71\");\n-        internalKafkaClient.setMessageCount(MESSAGE_COUNT * 3);\n+        internalKafkaClient.setMessageCount(MESSAGE_COUNT);\n \n         sent = internalKafkaClient.sendMessagesTls();\n-        assertThat(sent, is(3 * MESSAGE_COUNT));\n+        assertThat(sent, is(MESSAGE_COUNT));\n+\n+        internalKafkaClient.setMessageCount(MESSAGE_COUNT * 5);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg2MTQ2Ng=="}, "originalCommit": {"oid": "6a60954136a74d08a187807d42868edb4f058c90"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDcyODI3OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/KafkaST.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMTozODozOVrOGG4GYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMDo1NTo1NVrOGHJdyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg2Mzc3Nw==", "bodyText": "Wouldn't it be better to check this list size in waitForPodDeletion() ?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2847#discussion_r409863777", "createdAt": "2020-04-16T21:38:39Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/KafkaST.java", "diffHunk": "@@ -1009,34 +1018,31 @@ void testRemoveUserAndTopicOperatorsFromEntityOperator() {\n         timeMeasuringSystem.setOperationID(timeMeasuringSystem.startTimeMeasuring(Operation.CLUSTER_DEPLOYMENT));\n         KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3).done();\n \n-        String eoPodName = kubeClient().listPodsByPrefixInName(KafkaResources.entityOperatorDeploymentName(CLUSTER_NAME))\n-                .get(0).getMetadata().getName();\n+        String eoDeploymentName = KafkaResources.entityOperatorDeploymentName(CLUSTER_NAME);\n \n         KafkaResource.replaceKafkaResource(CLUSTER_NAME, k -> {\n-            EntityOperatorSpec entityOperatorSpec = k.getSpec().getEntityOperator();\n-            entityOperatorSpec.setTopicOperator(null);\n-            entityOperatorSpec.setUserOperator(null);\n-            k.getSpec().setEntityOperator(entityOperatorSpec);\n+            k.getSpec().getEntityOperator().setTopicOperator(null);\n+            k.getSpec().getEntityOperator().setUserOperator(null);\n         });\n \n         //Waiting when EO pod will be deleted\n-        DeploymentUtils.waitForDeploymentDeletion(KafkaResources.entityOperatorDeploymentName(CLUSTER_NAME));\n-        ReplicaSetUtils.waitForReplicaSetDeletion(KafkaResources.entityOperatorDeploymentName(CLUSTER_NAME));\n-        PodUtils.waitForPodDeletion(eoPodName);\n+        DeploymentUtils.waitForDeploymentDeletion(eoDeploymentName);\n+        ReplicaSetUtils.waitForReplicaSetDeletion(eoDeploymentName);\n \n+        if (kubeClient().listPodsByPrefixInName(eoDeploymentName).size() != 0) {\n+            PodUtils.waitForPodDeletion(kubeClient().listPodsByPrefixInName(eoDeploymentName).get(0).getMetadata().getName());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a60954136a74d08a187807d42868edb4f058c90"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE0ODI5OQ==", "bodyText": "Now it's redundant here", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2847#discussion_r410148299", "createdAt": "2020-04-17T10:55:55Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/KafkaST.java", "diffHunk": "@@ -1009,34 +1018,31 @@ void testRemoveUserAndTopicOperatorsFromEntityOperator() {\n         timeMeasuringSystem.setOperationID(timeMeasuringSystem.startTimeMeasuring(Operation.CLUSTER_DEPLOYMENT));\n         KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3).done();\n \n-        String eoPodName = kubeClient().listPodsByPrefixInName(KafkaResources.entityOperatorDeploymentName(CLUSTER_NAME))\n-                .get(0).getMetadata().getName();\n+        String eoDeploymentName = KafkaResources.entityOperatorDeploymentName(CLUSTER_NAME);\n \n         KafkaResource.replaceKafkaResource(CLUSTER_NAME, k -> {\n-            EntityOperatorSpec entityOperatorSpec = k.getSpec().getEntityOperator();\n-            entityOperatorSpec.setTopicOperator(null);\n-            entityOperatorSpec.setUserOperator(null);\n-            k.getSpec().setEntityOperator(entityOperatorSpec);\n+            k.getSpec().getEntityOperator().setTopicOperator(null);\n+            k.getSpec().getEntityOperator().setUserOperator(null);\n         });\n \n         //Waiting when EO pod will be deleted\n-        DeploymentUtils.waitForDeploymentDeletion(KafkaResources.entityOperatorDeploymentName(CLUSTER_NAME));\n-        ReplicaSetUtils.waitForReplicaSetDeletion(KafkaResources.entityOperatorDeploymentName(CLUSTER_NAME));\n-        PodUtils.waitForPodDeletion(eoPodName);\n+        DeploymentUtils.waitForDeploymentDeletion(eoDeploymentName);\n+        ReplicaSetUtils.waitForReplicaSetDeletion(eoDeploymentName);\n \n+        if (kubeClient().listPodsByPrefixInName(eoDeploymentName).size() != 0) {\n+            PodUtils.waitForPodDeletion(kubeClient().listPodsByPrefixInName(eoDeploymentName).get(0).getMetadata().getName());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg2Mzc3Nw=="}, "originalCommit": {"oid": "6a60954136a74d08a187807d42868edb4f058c90"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Njc0NDQ5OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/KafkaST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMjoxMDowM1rOGHLbCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMjoxMDowM1rOGHLbCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4MDM2Mw==", "bodyText": "this assert can be written just one time outside of the if(s), it's common to both.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2847#discussion_r410180363", "createdAt": "2020-04-17T12:10:03Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/KafkaST.java", "diffHunk": "@@ -845,12 +845,21 @@ void testJvmAndResources() {\n         kubeClient().getPod(eoPod).getSpec().getContainers().forEach(container -> {\n             if (!container.getName().equals(\"tls-sidecar\")) {\n                 LOGGER.info(\"Check if -D java options are present in {}\", container.getName());\n-                String value = container.getEnv().stream().filter(envVar ->\n-                        envVar.getName().equals(\"STRIMZI_JAVA_SYSTEM_PROPERTIES\")).findFirst().get().getValue();\n-                if (container.getName().equals(\"topic-operator\"))\n-                    assertThat(value, is(\"-Xms1024M -Xmx2G -Djavax.net.debug=verbose\"));\n-                if (container.getName().equals(\"user-operator\"))\n-                    assertThat(value, is(\"-Xms512M -Xmx1G -Djavax.net.debug=verbose\"));\n+\n+                String javaSystemProp = container.getEnv().stream().filter(envVar ->\n+                    envVar.getName().equals(\"STRIMZI_JAVA_SYSTEM_PROPERTIES\")).findFirst().get().getValue();\n+                String javaOpts = container.getEnv().stream().filter(envVar ->\n+                    envVar.getName().equals(\"STRIMZI_JAVA_OPTS\")).findFirst().get().getValue();\n+\n+                if (container.getName().equals(\"topic-operator\")) {\n+                    assertThat(javaSystemProp, is(\"-Djavax.net.debug=verbose\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d37b93f4678f98acf1e0efd7566b137a320f458"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 176, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}