{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMzQ3NzMy", "number": 2802, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOTo0MDo0M1rODvtoKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNjoxOTowOFrODv2SBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzU3MjI3OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/kafkaclients/externalClients/Consumer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOTo0MDo0M1rOGCTONg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMDoyMjo0MFrOGCo0vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2NTI3MA==", "bodyText": "Do we still need the TODO?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2802#discussion_r405065270", "createdAt": "2020-04-07T19:40:43Z", "author": {"login": "scholzj"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/kafkaclients/externalClients/Consumer.java", "diffHunk": "@@ -13,8 +14,8 @@\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.function.IntPredicate;\n \n-\n-public class Consumer extends ClientHandlerBase<Integer> {\n+// TODO: autocloseable to close vertx always...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "050815acd53e9a899f745452239a72aeef360c0a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQxOTE5Nw==", "bodyText": "No, we do not. I will remove it ;)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2802#discussion_r405419197", "createdAt": "2020-04-08T10:22:40Z", "author": {"login": "see-quick"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/kafkaclients/externalClients/Consumer.java", "diffHunk": "@@ -13,8 +14,8 @@\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.function.IntPredicate;\n \n-\n-public class Consumer extends ClientHandlerBase<Integer> {\n+// TODO: autocloseable to close vertx always...", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2NTI3MA=="}, "originalCommit": {"oid": "050815acd53e9a899f745452239a72aeef360c0a"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDk4OTY5OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/KafkaST.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNjoxOTowMFrOGCggQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMDozMDo0M1rOGCpGbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI4Mjg4MA==", "bodyText": "can we remove these lines?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2802#discussion_r405282880", "createdAt": "2020-04-08T06:19:00Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/KafkaST.java", "diffHunk": "@@ -1290,11 +1286,11 @@ void testNodePortTls() throws Exception {\n                 .withConsumerGroupName(CONSUMER_GROUP_NAME + \"-\" + rng.nextInt(Integer.MAX_VALUE))\n                 .build();\n \n-        Future<Integer> producer = basicExternalKafkaClient.sendMessagesTls();\n-        Future<Integer> consumer = basicExternalKafkaClient.receiveMessagesTls();\n-\n-        assertThat(producer.get(Constants.GLOBAL_CLIENTS_TIMEOUT, TimeUnit.MILLISECONDS), is(MESSAGE_COUNT));\n-        assertThat(consumer.get(Constants.GLOBAL_CLIENTS_TIMEOUT, TimeUnit.MILLISECONDS), is(MESSAGE_COUNT));\n+//        Future<Integer> producer = basicExternalKafkaClient.sendMessagesTls();\n+//        Future<Integer> consumer = basicExternalKafkaClient.receiveMessagesTls();\n+//\n+//        assertThat(producer.get(Constants.GLOBAL_CLIENTS_TIMEOUT, TimeUnit.MILLISECONDS), is(MESSAGE_COUNT));\n+//        assertThat(consumer.get(Constants.GLOBAL_CLIENTS_TIMEOUT, TimeUnit.MILLISECONDS), is(MESSAGE_COUNT));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "050815acd53e9a899f745452239a72aeef360c0a"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQyMzcyNg==", "bodyText": "yeah, good point!!", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2802#discussion_r405423726", "createdAt": "2020-04-08T10:30:43Z", "author": {"login": "see-quick"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/KafkaST.java", "diffHunk": "@@ -1290,11 +1286,11 @@ void testNodePortTls() throws Exception {\n                 .withConsumerGroupName(CONSUMER_GROUP_NAME + \"-\" + rng.nextInt(Integer.MAX_VALUE))\n                 .build();\n \n-        Future<Integer> producer = basicExternalKafkaClient.sendMessagesTls();\n-        Future<Integer> consumer = basicExternalKafkaClient.receiveMessagesTls();\n-\n-        assertThat(producer.get(Constants.GLOBAL_CLIENTS_TIMEOUT, TimeUnit.MILLISECONDS), is(MESSAGE_COUNT));\n-        assertThat(consumer.get(Constants.GLOBAL_CLIENTS_TIMEOUT, TimeUnit.MILLISECONDS), is(MESSAGE_COUNT));\n+//        Future<Integer> producer = basicExternalKafkaClient.sendMessagesTls();\n+//        Future<Integer> consumer = basicExternalKafkaClient.receiveMessagesTls();\n+//\n+//        assertThat(producer.get(Constants.GLOBAL_CLIENTS_TIMEOUT, TimeUnit.MILLISECONDS), is(MESSAGE_COUNT));\n+//        assertThat(consumer.get(Constants.GLOBAL_CLIENTS_TIMEOUT, TimeUnit.MILLISECONDS), is(MESSAGE_COUNT));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI4Mjg4MA=="}, "originalCommit": {"oid": "050815acd53e9a899f745452239a72aeef360c0a"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDk5MDEyOnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/KafkaST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNjoxOTowOFrOGCggfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNjoxOTowOFrOGCggfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI4Mjk0MA==", "bodyText": "ditto as above?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2802#discussion_r405282940", "createdAt": "2020-04-08T06:19:08Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/KafkaST.java", "diffHunk": "@@ -1324,11 +1320,11 @@ void testLoadBalancer() throws Exception {\n                 .withConsumerGroupName(CONSUMER_GROUP_NAME + \"-\" + rng.nextInt(Integer.MAX_VALUE))\n                 .build();\n \n-        Future<Integer> producer = basicExternalKafkaClient.sendMessagesPlain();\n-        Future<Integer> consumer = basicExternalKafkaClient.receiveMessagesPlain();\n-\n-        assertThat(producer.get(Constants.GLOBAL_CLIENTS_TIMEOUT, TimeUnit.MILLISECONDS), is(MESSAGE_COUNT));\n-        assertThat(consumer.get(Constants.GLOBAL_CLIENTS_TIMEOUT, TimeUnit.MILLISECONDS), is(MESSAGE_COUNT));\n+//        Future<Integer> producer = basicExternalKafkaClient.sendMessagesPlain();\n+//        Future<Integer> consumer = basicExternalKafkaClient.receiveMessagesPlain();\n+//\n+//        assertThat(producer.get(Constants.GLOBAL_CLIENTS_TIMEOUT, TimeUnit.MILLISECONDS), is(MESSAGE_COUNT));\n+//        assertThat(consumer.get(Constants.GLOBAL_CLIENTS_TIMEOUT, TimeUnit.MILLISECONDS), is(MESSAGE_COUNT));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "050815acd53e9a899f745452239a72aeef360c0a"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 126, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}