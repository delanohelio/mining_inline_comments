{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUxMjA0NDYy", "number": 3336, "title": "Integrate strimzi-kafka-oauth 0.6.0 features", "bodyText": "The following config options are added to oauth type authentication of Kafka CRD:\n\njwksMinRefreshPauseSeconds\nThe minimum pause between two consecutive JWKS keys refresh jobs\nmaxSecondsWithoutReauthentication\nTurns on Kafka Broker re-authentication which enforces access token timeout on client sessions\n\nThe following config options are added to keycloak type authorization of Kafka CRD:\n\ngrantsRefreshPeriodSeconds\nThe time between two consecutive grants refresh runs\ngrantsRefreshPoolSize\nThe number of threads to use to refresh (in parallel) the grants for active session\n\nSigned-off-by: Marko Strukelj marko.strukelj@gmail.com\nType of change\nSelect the type of your PR\n\nEnhancement / new feature\n\nDescription\nThis PR integrates strimzi-kafka-oauth 0.6.0.\nChecklist\nSill TODO:\n\n Reference relevant issue(s) and close them after merging\n Update CHANGELOG.md", "createdAt": "2020-07-17T15:29:28Z", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3336", "merged": true, "mergeCommit": {"oid": "69057f8c40168a92b163cfee888ad4414f366200"}, "closed": true, "closedAt": "2020-08-21T18:21:34Z", "author": {"login": "mstruk"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc23TX-AFqTQ1MTkxOTMyNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdBGH8aAFqTQ3MjU2MzAyOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxOTE5MzI3", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3336#pullrequestreview-451919327", "createdAt": "2020-07-20T20:03:56Z", "commit": {"oid": "356f0c003a6193f7fdd26b7566ae865686eace41"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "356f0c003a6193f7fdd26b7566ae865686eace41", "author": {"user": {"login": "mstruk", "name": "Marko Strukelj"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/356f0c003a6193f7fdd26b7566ae865686eace41", "committedDate": "2020-07-17T15:26:06Z", "message": "Integrate strimzi-kafka-oauth 0.6.0 features\n\nThe following config options are added to `oauth` type `authentication` of Kafka CRD:\n\n- `jwksMinRefreshPauseSeconds`\n  The minimum pause between two consecutive JWKS keys refresh jobs\n- `maxSecondsWithoutReauthentication`\n  Turns on Kafka Broker re-authentication which enforces access token timeout on client sessions\n\nThe following config options are added to `keycloak` type `authorization` of Kafka CRD:\n\n- `grantsRefreshPeriodSeconds`\n  The time between two consecutive grants refresh runs\n- `grantsRefreshPoolSize`\n  The number of threads to use to refresh (in parallel) the grants for active session\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>"}, "afterCommit": {"oid": "ac2114b5317e7aa541e037babf514d2d88109c26", "author": {"user": {"login": "mstruk", "name": "Marko Strukelj"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ac2114b5317e7aa541e037babf514d2d88109c26", "committedDate": "2020-08-11T08:57:33Z", "message": "Document config options for additional features provided by strimzi-kafka-oauth 0.6.0\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1ODkwNDg3", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3336#pullrequestreview-465890487", "createdAt": "2020-08-12T12:59:11Z", "commit": {"oid": "e15225d0533b574d4e323b92a1d8be5de865c48b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2NTI4MzUz", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3336#pullrequestreview-466528353", "createdAt": "2020-08-13T07:58:35Z", "commit": {"oid": "8a4e8743c89333b5cd1f3792b10f1f79316bcc54"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNzo1ODozNVrOHAAT7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNzo1ODo0OFrOHAAUcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc2NzE0OQ==", "bodyText": "are you missing the @Default to 60 or it's defined somehow elsewhere?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3336#discussion_r469767149", "createdAt": "2020-08-13T07:58:35Z", "author": {"login": "ppatierno"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaAuthorizationKeycloak.java", "diffHunk": "@@ -96,6 +98,25 @@ public void setDelegateToKafkaAcls(boolean delegateToKafkaAcls) {\n         this.delegateToKafkaAcls = delegateToKafkaAcls;\n     }\n \n+    @Description(\"The time between two consecutive grants refresh runs in seconds. The default value is 60.\")\n+    public Integer getGrantsRefreshPeriodSeconds() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a4e8743c89333b5cd1f3792b10f1f79316bcc54"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc2NzI4Mw==", "bodyText": "ditto as above, about missing default.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3336#discussion_r469767283", "createdAt": "2020-08-13T07:58:48Z", "author": {"login": "ppatierno"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaAuthorizationKeycloak.java", "diffHunk": "@@ -96,6 +98,25 @@ public void setDelegateToKafkaAcls(boolean delegateToKafkaAcls) {\n         this.delegateToKafkaAcls = delegateToKafkaAcls;\n     }\n \n+    @Description(\"The time between two consecutive grants refresh runs in seconds. The default value is 60.\")\n+    public Integer getGrantsRefreshPeriodSeconds() {\n+        return grantsRefreshPeriodSeconds;\n+    }\n+\n+    public void setGrantsRefreshPeriodSeconds(Integer grantsRefreshPeriodSeconds) {\n+        this.grantsRefreshPeriodSeconds = grantsRefreshPeriodSeconds;\n+    }\n+\n+    @Description(\"The number of threads to use to refresh grants for active sessions. The more threads, the more parallelism, the sooner the job completes,\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a4e8743c89333b5cd1f3792b10f1f79316bcc54"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd1a8f608c893298a032cd84592d833989b0eb56", "author": {"user": {"login": "mstruk", "name": "Marko Strukelj"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/bd1a8f608c893298a032cd84592d833989b0eb56", "committedDate": "2020-08-19T12:49:38Z", "message": "Integrate strimzi-kafka-oauth 0.6.0 features\n\nThe following config options are added to `oauth` type `authentication` of Kafka CRD:\n\n- `jwksMinRefreshPauseSeconds`\n  The minimum pause between two consecutive JWKS keys refresh jobs\n- `maxSecondsWithoutReauthentication`\n  Turns on Kafka Broker re-authentication which enforces access token timeout on client sessions\n\nThe following config options are added to `keycloak` type `authorization` of Kafka CRD:\n\n- `grantsRefreshPeriodSeconds`\n  The time between two consecutive grants refresh runs\n- `grantsRefreshPoolSize`\n  The number of threads to use to refresh (in parallel) the grants for active sessions\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>\n\nAdditional test and validation\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26b60c9429eef355d433c9ecebe16eedc0273dae", "author": {"user": {"login": "mstruk", "name": "Marko Strukelj"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/26b60c9429eef355d433c9ecebe16eedc0273dae", "committedDate": "2020-08-19T12:49:53Z", "message": "Document config options for additional features provided by strimzi-kafka-oauth 0.6.0\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9df513f41dcda7093c7aa1ccb2411999a0416b7b", "author": {"user": {"login": "mstruk", "name": "Marko Strukelj"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/9df513f41dcda7093c7aa1ccb2411999a0416b7b", "committedDate": "2020-08-19T12:49:53Z", "message": "Add tmp maven repo with oauth 0.6.0 artifacts\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f2b9601e16e18785aae282512485bdf93c04251", "author": {"user": {"login": "mstruk", "name": "Marko Strukelj"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/7f2b9601e16e18785aae282512485bdf93c04251", "committedDate": "2020-08-19T12:49:53Z", "message": "Fix testGenerateDeploymentWithKeycloakAuthorization()\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9476217e4a3e0f09beec04ec0770dc5b2087a0c", "author": {"user": {"login": "mstruk", "name": "Marko Strukelj"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b9476217e4a3e0f09beec04ec0770dc5b2087a0c", "committedDate": "2020-08-19T12:49:53Z", "message": "Add staging maven repository to kafka-thirdparty-libs project as well\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "565de2f8689f0bce54f7998c9f6265c5b594ac13", "author": {"user": {"login": "mstruk", "name": "Marko Strukelj"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/565de2f8689f0bce54f7998c9f6265c5b594ac13", "committedDate": "2020-08-19T15:36:35Z", "message": "Fix setting the new authorization options\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8a4e8743c89333b5cd1f3792b10f1f79316bcc54", "author": {"user": {"login": "mstruk", "name": "Marko Strukelj"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/8a4e8743c89333b5cd1f3792b10f1f79316bcc54", "committedDate": "2020-08-12T14:36:10Z", "message": "Add staging maven repository to kafka-thirdparty-libs project as well\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>"}, "afterCommit": {"oid": "565de2f8689f0bce54f7998c9f6265c5b594ac13", "author": {"user": {"login": "mstruk", "name": "Marko Strukelj"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/565de2f8689f0bce54f7998c9f6265c5b594ac13", "committedDate": "2020-08-19T15:36:35Z", "message": "Fix setting the new authorization options\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NTI3Mzk2", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3336#pullrequestreview-469527396", "createdAt": "2020-08-18T14:43:55Z", "commit": {"oid": "8a4e8743c89333b5cd1f3792b10f1f79316bcc54"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDo0Mzo1NVrOHCX9Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODo0MjoxNVrOHD0tpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI1MTc0Mg==", "bodyText": "Please update the :oauth-artifact-version: attribute in documentation/shared/attributes.adoc", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3336#discussion_r472251742", "createdAt": "2020-08-18T14:43:55Z", "author": {"login": "laidan6000"}, "path": "docker-images/kafka/kafka-thirdparty-libs/2.6.x/pom.xml", "diffHunk": "@@ -16,7 +16,7 @@\n     </licenses>\n \n     <properties>\n-        <strimzi-oauth.version>0.5.0</strimzi-oauth.version>\n+        <strimzi-oauth.version>0.6.0</strimzi-oauth.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a4e8743c89333b5cd1f3792b10f1f79316bcc54"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI2MDkxMQ==", "bodyText": "Please make the following related changes in this module.\nTo use OAuth 2.0 authentication in the Kafka cluster, you specify for example a TLS listener configuration for your Kafka cluster custom resource with the authentication method oauth:\nchange to >>\nTo use OAuth 2.0 authentication in the Kafka cluster, you specify, for example, a TLS listener configuration for your Kafka cluster custom resource with the authentication method oauth.\n=\nWhen you've defined the type of authentication as OAuth 2.0\nchange to >>\nWhen you have defined the type of authentication as OAuth 2.0", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3336#discussion_r472260911", "createdAt": "2020-08-18T14:55:31Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/oauth/con-oauth-authentication-broker.adoc", "diffHunk": "@@ -140,6 +141,7 @@ spec:\n           validIssuerUri: <__https://<auth-server-address>/auth/realms/tls__>\n           introspectionEndpointUri: <__https://<auth-server-address>/auth/realms/tls/protocol/openid-connect/token/introspect__>\n           userNameClaim: preferred_username\n+          maxSecondsWithoutReauthentication: 3600\n           tlsTrustedCertificates:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a4e8743c89333b5cd1f3792b10f1f79316bcc54"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczMDAwNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |grantsRefreshPoolSize           1.2+<.<|The number of threads to use to refresh grants for active sessions. The more threads, the more parallelism, the sooner the job completes, but also the heavier the load on the authorization server. The default value is 5.\n          \n          \n            \n            |grantsRefreshPoolSize           1.2+<.<|The number of threads to use to refresh grants for active sessions. The more threads, the more parallelism, so the sooner the job completes. However, using more threads places a heavier load on the authorization server. The default value is 5.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3336#discussion_r473730006", "createdAt": "2020-08-20T07:58:22Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/appendix_crds.adoc", "diffHunk": "@@ -789,8 +793,12 @@ It must have the value `keycloak` for the type `KafkaAuthorizationKeycloak`.\n |xref:type-CertSecretSource-{context}[`CertSecretSource`] array\n |disableTlsHostnameVerification  1.2+<.<|Enable or disable TLS hostname verification. Default value is `false`.\n |boolean\n-|delegateToKafkaAcls             1.2+<.<|Whether authorization decision should be delegated to the 'Simple' authorizer if DENIED by Keycloak Authorization Services policies.Default value is `false`.\n+|delegateToKafkaAcls             1.2+<.<|Whether authorization decision should be delegated to the 'Simple' authorizer if DENIED by Keycloak Authorization Services policies. Default value is `false`.\n |boolean\n+|grantsRefreshPeriodSeconds      1.2+<.<|The time between two consecutive grants refresh runs in seconds. The default value is 60.\n+|integer\n+|grantsRefreshPoolSize           1.2+<.<|The number of threads to use to refresh grants for active sessions. The more threads, the more parallelism, the sooner the job completes, but also the heavier the load on the authorization server. The default value is 5.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "565de2f8689f0bce54f7998c9f6265c5b594ac13"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczMjU2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            = Session re-authentication mechanism\n          \n          \n            \n            = Session re-authentication for Kafka brokers", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3336#discussion_r473732568", "createdAt": "2020-08-20T08:00:17Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/oauth/con-oauth-reauthentication.adoc", "diffHunk": "@@ -0,0 +1,18 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-oauth.adoc\n+\n+[id='con-oauth-reauthentication-{context}']\n+= Session re-authentication mechanism", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "565de2f8689f0bce54f7998c9f6265c5b594ac13"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczMzkzNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The Kafka _SASL OAUTHBEARER_ mechanism supports a so called 're-authentication' mechanism.\n          \n          \n            \n            The Kafka _SASL OAUTHBEARER_ mechanism supports a Kafka feature called the _re-authentication_ mechanism.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3336#discussion_r473733937", "createdAt": "2020-08-20T08:01:28Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/oauth/con-oauth-reauthentication.adoc", "diffHunk": "@@ -0,0 +1,18 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-oauth.adoc\n+\n+[id='con-oauth-reauthentication-{context}']\n+= Session re-authentication mechanism\n+\n+The Kafka _SASL OAUTHBEARER_ mechanism supports a so called 're-authentication' mechanism.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "565de2f8689f0bce54f7998c9f6265c5b594ac13"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczNDM3NQ==", "bodyText": "Add a new sentence to the same paragraph:\nOAuth 2.0 authentication in Strimzi provides support for the re-authentication mechanism.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3336#discussion_r473734375", "createdAt": "2020-08-20T08:01:50Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/oauth/con-oauth-reauthentication.adoc", "diffHunk": "@@ -0,0 +1,18 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-oauth.adoc\n+\n+[id='con-oauth-reauthentication-{context}']\n+= Session re-authentication mechanism\n+\n+The Kafka _SASL OAUTHBEARER_ mechanism supports a so called 're-authentication' mechanism.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczMzkzNw=="}, "originalCommit": {"oid": "565de2f8689f0bce54f7998c9f6265c5b594ac13"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczNTQ3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When enabled (by setting `maxSecondsWithoutReauthentication` attribute of 'oauth' type `authentication` listener configuration), the authenticated session expires when the access token expires.\n          \n          \n            \n            When the re-authentication mechanism is enabled in the configuration of an `oauth` type listener, the broker's authenticated session expires when the access token expires.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3336#discussion_r473735477", "createdAt": "2020-08-20T08:02:44Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/oauth/con-oauth-reauthentication.adoc", "diffHunk": "@@ -0,0 +1,18 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-oauth.adoc\n+\n+[id='con-oauth-reauthentication-{context}']\n+= Session re-authentication mechanism\n+\n+The Kafka _SASL OAUTHBEARER_ mechanism supports a so called 're-authentication' mechanism.\n+\n+When enabled (by setting `maxSecondsWithoutReauthentication` attribute of 'oauth' type `authentication` listener configuration), the authenticated session expires when the access token expires.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "565de2f8689f0bce54f7998c9f6265c5b594ac13"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczNTkxNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The client then has to re-authenticate the existing session by sending a fresh valid access token to the Kafka broker, without dropping the connection.\n          \n          \n            \n            The client must then re-authenticate to the existing session by sending a new, valid access token to the broker, without dropping the connection.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3336#discussion_r473735917", "createdAt": "2020-08-20T08:03:05Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/oauth/con-oauth-reauthentication.adoc", "diffHunk": "@@ -0,0 +1,18 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-oauth.adoc\n+\n+[id='con-oauth-reauthentication-{context}']\n+= Session re-authentication mechanism\n+\n+The Kafka _SASL OAUTHBEARER_ mechanism supports a so called 're-authentication' mechanism.\n+\n+When enabled (by setting `maxSecondsWithoutReauthentication` attribute of 'oauth' type `authentication` listener configuration), the authenticated session expires when the access token expires.\n+\n+The client then has to re-authenticate the existing session by sending a fresh valid access token to the Kafka broker, without dropping the connection.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "565de2f8689f0bce54f7998c9f6265c5b594ac13"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczNjM1OQ==", "bodyText": "Make line 12 part of the above paragraph because I think it's strongly related.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3336#discussion_r473736359", "createdAt": "2020-08-20T08:03:25Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/oauth/con-oauth-reauthentication.adoc", "diffHunk": "@@ -0,0 +1,18 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-oauth.adoc\n+\n+[id='con-oauth-reauthentication-{context}']\n+= Session re-authentication mechanism\n+\n+The Kafka _SASL OAUTHBEARER_ mechanism supports a so called 're-authentication' mechanism.\n+\n+When enabled (by setting `maxSecondsWithoutReauthentication` attribute of 'oauth' type `authentication` listener configuration), the authenticated session expires when the access token expires.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "565de2f8689f0bce54f7998c9f6265c5b594ac13"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczNjk4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If token validation is successful a new client session is started over the existing connection.\n          \n          \n            \n            If token validation is successful, a new client session is started using the existing connection.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3336#discussion_r473736984", "createdAt": "2020-08-20T08:03:54Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/oauth/con-oauth-reauthentication.adoc", "diffHunk": "@@ -0,0 +1,18 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-oauth.adoc\n+\n+[id='con-oauth-reauthentication-{context}']\n+= Session re-authentication mechanism\n+\n+The Kafka _SASL OAUTHBEARER_ mechanism supports a so called 're-authentication' mechanism.\n+\n+When enabled (by setting `maxSecondsWithoutReauthentication` attribute of 'oauth' type `authentication` listener configuration), the authenticated session expires when the access token expires.\n+\n+The client then has to re-authenticate the existing session by sending a fresh valid access token to the Kafka broker, without dropping the connection.\n+\n+If token validation is successful a new client session is started over the existing connection.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "565de2f8689f0bce54f7998c9f6265c5b594ac13"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczNzY4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If the client fails to re-authenticate, any further attempts to use the connection for sending or receiving messages results in Kafka broker closing the connection.\n          \n          \n            \n            If the client fails to re-authenticate, the broker will close the connection if further attempts are made to send or receive messages.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3336#discussion_r473737683", "createdAt": "2020-08-20T08:04:28Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/oauth/con-oauth-reauthentication.adoc", "diffHunk": "@@ -0,0 +1,18 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-oauth.adoc\n+\n+[id='con-oauth-reauthentication-{context}']\n+= Session re-authentication mechanism\n+\n+The Kafka _SASL OAUTHBEARER_ mechanism supports a so called 're-authentication' mechanism.\n+\n+When enabled (by setting `maxSecondsWithoutReauthentication` attribute of 'oauth' type `authentication` listener configuration), the authenticated session expires when the access token expires.\n+\n+The client then has to re-authenticate the existing session by sending a fresh valid access token to the Kafka broker, without dropping the connection.\n+\n+If token validation is successful a new client session is started over the existing connection.\n+If the client fails to re-authenticate, any further attempts to use the connection for sending or receiving messages results in Kafka broker closing the connection.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "565de2f8689f0bce54f7998c9f6265c5b594ac13"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczODA3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Java clients using Kafka client library 2.2 or later will automatically re-authanticate if re-authentication is enabled on the broker.\n          \n          \n            \n            Java clients that use Kafka client library 2.2 or later automatically re-authenticate if the re-authentication mechanism is enabled on the broker.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3336#discussion_r473738071", "createdAt": "2020-08-20T08:04:46Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/oauth/con-oauth-reauthentication.adoc", "diffHunk": "@@ -0,0 +1,18 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-oauth.adoc\n+\n+[id='con-oauth-reauthentication-{context}']\n+= Session re-authentication mechanism\n+\n+The Kafka _SASL OAUTHBEARER_ mechanism supports a so called 're-authentication' mechanism.\n+\n+When enabled (by setting `maxSecondsWithoutReauthentication` attribute of 'oauth' type `authentication` listener configuration), the authenticated session expires when the access token expires.\n+\n+The client then has to re-authenticate the existing session by sending a fresh valid access token to the Kafka broker, without dropping the connection.\n+\n+If token validation is successful a new client session is started over the existing connection.\n+If the client fails to re-authenticate, any further attempts to use the connection for sending or receiving messages results in Kafka broker closing the connection.\n+Java clients using Kafka client library 2.2 or later will automatically re-authanticate if re-authentication is enabled on the broker.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "565de2f8689f0bce54f7998c9f6265c5b594ac13"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc0MTAxNw==", "bodyText": "I suggest making line 16 a separate paragraph. It feels like a standalone point.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3336#discussion_r473741017", "createdAt": "2020-08-20T08:07:32Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/oauth/con-oauth-reauthentication.adoc", "diffHunk": "@@ -0,0 +1,18 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-oauth.adoc\n+\n+[id='con-oauth-reauthentication-{context}']\n+= Session re-authentication mechanism\n+\n+The Kafka _SASL OAUTHBEARER_ mechanism supports a so called 're-authentication' mechanism.\n+\n+When enabled (by setting `maxSecondsWithoutReauthentication` attribute of 'oauth' type `authentication` listener configuration), the authenticated session expires when the access token expires.\n+\n+The client then has to re-authenticate the existing session by sending a fresh valid access token to the Kafka broker, without dropping the connection.\n+\n+If token validation is successful a new client session is started over the existing connection.\n+If the client fails to re-authenticate, any further attempts to use the connection for sending or receiving messages results in Kafka broker closing the connection.\n+Java clients using Kafka client library 2.2 or later will automatically re-authanticate if re-authentication is enabled on the broker.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczODA3MQ=="}, "originalCommit": {"oid": "565de2f8689f0bce54f7998c9f6265c5b594ac13"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc0MTU4Ng==", "bodyText": "New paragraph to explain the \"how to\":\nYou enable session re-authentication in the Kafka resource. Set the maxSecondsWithoutReauthentication property for a TLS listener with type: oauth authentication.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3336#discussion_r473741586", "createdAt": "2020-08-20T08:08:12Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/oauth/con-oauth-reauthentication.adoc", "diffHunk": "@@ -0,0 +1,18 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-oauth.adoc\n+\n+[id='con-oauth-reauthentication-{context}']\n+= Session re-authentication mechanism\n+\n+The Kafka _SASL OAUTHBEARER_ mechanism supports a so called 're-authentication' mechanism.\n+\n+When enabled (by setting `maxSecondsWithoutReauthentication` attribute of 'oauth' type `authentication` listener configuration), the authenticated session expires when the access token expires.\n+\n+The client then has to re-authenticate the existing session by sending a fresh valid access token to the Kafka broker, without dropping the connection.\n+\n+If token validation is successful a new client session is started over the existing connection.\n+If the client fails to re-authenticate, any further attempts to use the connection for sending or receiving messages results in Kafka broker closing the connection.\n+Java clients using Kafka client library 2.2 or later will automatically re-authanticate if re-authentication is enabled on the broker.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "565de2f8689f0bce54f7998c9f6265c5b594ac13"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc0MzAwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Re-authentication mechanism was introduced in Kafka version 2.2. You can read more about it in https://cwiki.apache.org/confluence/display/KAFKA/KIP-368%3A+Allow+SASL+Connections+to+Periodically+Re-Authenticate[KIP-368].\n          \n          \n            \n            For more information about the re-authentication mechanism, which was added in Kafka version 2.2, see link:https://cwiki.apache.org/confluence/display/KAFKA/KIP-368%3A+Allow+SASL+Connections+to+Periodically+Re-Authenticate[KIP-368^].", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3336#discussion_r473743008", "createdAt": "2020-08-20T08:09:55Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/oauth/con-oauth-reauthentication.adoc", "diffHunk": "@@ -0,0 +1,18 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-oauth.adoc\n+\n+[id='con-oauth-reauthentication-{context}']\n+= Session re-authentication mechanism\n+\n+The Kafka _SASL OAUTHBEARER_ mechanism supports a so called 're-authentication' mechanism.\n+\n+When enabled (by setting `maxSecondsWithoutReauthentication` attribute of 'oauth' type `authentication` listener configuration), the authenticated session expires when the access token expires.\n+\n+The client then has to re-authenticate the existing session by sending a fresh valid access token to the Kafka broker, without dropping the connection.\n+\n+If token validation is successful a new client session is started over the existing connection.\n+If the client fails to re-authenticate, any further attempts to use the connection for sending or receiving messages results in Kafka broker closing the connection.\n+Java clients using Kafka client library 2.2 or later will automatically re-authanticate if re-authentication is enabled on the broker.\n+\n+Re-authentication mechanism was introduced in Kafka version 2.2. You can read more about it in https://cwiki.apache.org/confluence/display/KAFKA/KIP-368%3A+Allow+SASL+Connections+to+Periodically+Re-Authenticate[KIP-368].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "565de2f8689f0bce54f7998c9f6265c5b594ac13"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc0ODkzNw==", "bodyText": "Please include cross-refs to three related modules.\nHere is the Asciidoc markup:\n.Additional resources\n\n* xref:con-oauth-authentication-broker-{context}[]\n\n* xref:proc-oauth-authentication-broker-config-{context}[]\n\n* xref:appendix_crds#type-KafkaListenerAuthenticationOAuth-reference[KafkaListenerAuthenticationOAuth schema reference]", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3336#discussion_r473748937", "createdAt": "2020-08-20T08:17:09Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/oauth/con-oauth-reauthentication.adoc", "diffHunk": "@@ -0,0 +1,18 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-oauth.adoc\n+\n+[id='con-oauth-reauthentication-{context}']\n+= Session re-authentication mechanism\n+\n+The Kafka _SASL OAUTHBEARER_ mechanism supports a so called 're-authentication' mechanism.\n+\n+When enabled (by setting `maxSecondsWithoutReauthentication` attribute of 'oauth' type `authentication` listener configuration), the authenticated session expires when the access token expires.\n+\n+The client then has to re-authenticate the existing session by sending a fresh valid access token to the Kafka broker, without dropping the connection.\n+\n+If token validation is successful a new client session is started over the existing connection.\n+If the client fails to re-authenticate, any further attempts to use the connection for sending or receiving messages results in Kafka broker closing the connection.\n+Java clients using Kafka client library 2.2 or later will automatically re-authanticate if re-authentication is enabled on the broker.\n+\n+Re-authentication mechanism was introduced in Kafka version 2.2. You can read more about it in https://cwiki.apache.org/confluence/display/KAFKA/KIP-368%3A+Allow+SASL+Connections+to+Periodically+Re-Authenticate[KIP-368].", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc0MzAwOA=="}, "originalCommit": {"oid": "565de2f8689f0bce54f7998c9f6265c5b594ac13"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3MDY3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <5> (Optional) Setting this option activates the re-authentication mechanism which enforces session expiry to that of the access token. If the specified value is less than the time left for the access token to expire, then the client will have to re-authenticate before the actual token expiry. By default, the session does not expire when access token expires, and the client attempts no re-authentication.\n          \n          \n            \n            <5> (Optional) Activates the Kafka re-authentication mechanism that enforces session expiry to the same length of time as the access token. If the specified value is less than the time left for the access token to expire, then the client will have to re-authenticate before the actual token expiry. By default, the session does not expire when the access token expires, and the client does not attempt re-authentication.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3336#discussion_r473770671", "createdAt": "2020-08-20T08:41:22Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/oauth/proc-oauth-authentication-broker-config.adoc", "diffHunk": "@@ -56,23 +58,27 @@ external:\n     validIssuerUri: <__https://<auth-server-address>/auth/realms/external__> <2>\n     jwksEndpointUri: <__https://<auth-server-address>/auth/realms/external/protocol/openid-connect/certs__> <3>\n     userNameClaim: preferred_username <4>\n-    tlsTrustedCertificates: <5>\n+    maxSecondsWithoutReauthentication: 3600 <5>\n+    tlsTrustedCertificates: <6>\n     - secretName: oauth-server-cert\n       certificate: ca.crt\n-    disableTlsHostnameVerification: true <6>\n-    jwksExpirySeconds: 360 <7>\n-    jwksRefreshSeconds: 300 <8>\n-    enableECDSA: \"true\" <9>\n+    disableTlsHostnameVerification: true <7>\n+    jwksExpirySeconds: 360 <8>\n+    jwksRefreshSeconds: 300 <9>\n+    jwksMinRefreshPauseSeconds: 1 <10>\n+    enableECDSA: \"true\" <11>\n ----\n <1> Listener type set to `oauth`.\n <2> URI of the token issuer used for authentication.\n <3> URI of the JWKS certificate endpoint used for local JWT validation.\n <4> The token claim (or key) that contains the actual user name in the token. The user name is the _principal_ used to identify the user. The `userNameClaim` value will depend on the authentication flow and the authorization server used.\n-<5> (Optional) Trusted certificates for TLS connection to the authorization server.\n-<6> (Optional) Disable TLS hostname verification. Default is `false`.\n-<7> The duration the JWKs certificates are considered valid before they expire. Default is `360` seconds. If you specify a longer time, consider the risk of allowing access to revoked certificates.\n-<8> The period between refreshes of JWKs certificates. The interval must be at least 60 seconds shorter than the expiry interval. Default is `300` seconds.\n-<9> (Optional) If ECDSA is used for signing JWT tokens on authorization server, then this needs to be enabled. It installs additional crypto providers using BouncyCastle crypto library. Default is `false`.\n+<5> (Optional) Setting this option activates the re-authentication mechanism which enforces session expiry to that of the access token. If the specified value is less than the time left for the access token to expire, then the client will have to re-authenticate before the actual token expiry. By default, the session does not expire when access token expires, and the client attempts no re-authentication.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "565de2f8689f0bce54f7998c9f6265c5b594ac13"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3MTA3Mw==", "bodyText": "Please edit <5> to match line 75.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3336#discussion_r473771073", "createdAt": "2020-08-20T08:41:51Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/oauth/proc-oauth-authentication-broker-config.adoc", "diffHunk": "@@ -89,12 +95,14 @@ external:\n       secretName: my-cluster-oauth\n       key: clientSecret\n     userNameClaim: preferred_username <4>\n+    maxSecondsWithoutReauthentication: 3600 <5>\n ----\n --\n <1> URI of the token introspection endpoint.\n <2> Client ID to identify the client.\n <3> Client Secret and client ID is used for authentication.\n <4> The token claim (or key) that contains the actual user name in the token. The user name is the _principal_ used to identify the user. The `userNameClaim` value will depend on the authorization server used.\n+<5> (Optional) Setting this option activates the re-authentication mechanism which enforces session expiry to that of the access token. If the specified value is less than the time left for the access token to expire, then the client will have to re-authenticate before the actual token expiry. By default, the session does not expire when access token expires, and the client attempts no re-authentication.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "565de2f8689f0bce54f7998c9f6265c5b594ac13"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3MTQzMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * OAuth 2.0 authentication has to be configured with `maxSecondsWithoutReauthentication` option to enable re-authentication.\n          \n          \n            \n            * OAuth 2.0 authentication must be configured with the `maxSecondsWithoutReauthentication` option to enable re-authentication.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3336#discussion_r473771431", "createdAt": "2020-08-20T08:42:15Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/oauth/proc-oauth-authorization-broker-config.adoc", "diffHunk": "@@ -23,6 +23,7 @@ NOTE: xref:ref-kafka-authorization-super-user-deployment-configuration-kafka[Sup\n \n * Strimzi must be configured to use OAuth 2.0 with Keycloak for xref:assembly-oauth-authentication_str[token-based authentication].\n You use the same Keycloak server endpoint when you set up authorization.\n+* OAuth 2.0 authentication has to be configured with `maxSecondsWithoutReauthentication` option to enable re-authentication.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "565de2f8689f0bce54f7998c9f6265c5b594ac13"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4807cce744250e4c9ed4045e0d2bd0814abe6b4d", "author": {"user": {"login": "mstruk", "name": "Marko Strukelj"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/4807cce744250e4c9ed4045e0d2bd0814abe6b4d", "committedDate": "2020-08-20T13:07:43Z", "message": "Add @DefaultValue and @Minimum to CRD definition of new authorization options\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1de584e64ce874db0862a415222d8f664ee8909", "author": {"user": {"login": "mstruk", "name": "Marko Strukelj"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c1de584e64ce874db0862a415222d8f664ee8909", "committedDate": "2020-08-20T13:56:19Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Daniel Laing <dlaing@redhat.com>\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "812dfdde6f56013c187e66daf726e86c28182401", "author": {"user": {"login": "mstruk", "name": "Marko Strukelj"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/812dfdde6f56013c187e66daf726e86c28182401", "committedDate": "2020-08-20T13:56:19Z", "message": "Apply more suggestions from docs review\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4f7328574db33e257c7f7c09abc7a0780ea4aa02", "author": {"user": {"login": "mstruk", "name": "Marko Strukelj"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/4f7328574db33e257c7f7c09abc7a0780ea4aa02", "committedDate": "2020-08-20T13:33:01Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Daniel Laing <dlaing@redhat.com>"}, "afterCommit": {"oid": "812dfdde6f56013c187e66daf726e86c28182401", "author": {"user": {"login": "mstruk", "name": "Marko Strukelj"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/812dfdde6f56013c187e66daf726e86c28182401", "committedDate": "2020-08-20T13:56:19Z", "message": "Apply more suggestions from docs review\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNzM3NzM0", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3336#pullrequestreview-471737734", "createdAt": "2020-08-20T15:31:48Z", "commit": {"oid": "812dfdde6f56013c187e66daf726e86c28182401"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTozMTo0OFrOHEHI_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTozMTo0OFrOHEHI_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA3MzM0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The Kafka _SASL OAUTHBEARER_ mechanism supports a Kafka feature called the _re-authentication_ mechanism.\n          \n          \n            \n            The Kafka _SASL OAUTHBEARER_ mechanism, which is used for OAuth 2.0 authentication in Strimzi, supports a Kafka feature called the _re-authentication_ mechanism.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3336#discussion_r474073341", "createdAt": "2020-08-20T15:31:48Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/oauth/con-oauth-reauthentication.adoc", "diffHunk": "@@ -0,0 +1,28 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-oauth.adoc\n+\n+[id='con-oauth-reauthentication-{context}']\n+= Session re-authentication for Kafka brokers\n+\n+The Kafka _SASL OAUTHBEARER_ mechanism supports a Kafka feature called the _re-authentication_ mechanism.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "812dfdde6f56013c187e66daf726e86c28182401"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNzM4MTY5", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3336#pullrequestreview-471738169", "createdAt": "2020-08-20T15:32:17Z", "commit": {"oid": "812dfdde6f56013c187e66daf726e86c28182401"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTozMjoxN1rOHEHK-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTozMjoxN1rOHEHK-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA3Mzg0OA==", "bodyText": "Delete line 9.\nI think that simplifies the introduction a bit!", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3336#discussion_r474073848", "createdAt": "2020-08-20T15:32:17Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/oauth/con-oauth-reauthentication.adoc", "diffHunk": "@@ -0,0 +1,28 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-oauth.adoc\n+\n+[id='con-oauth-reauthentication-{context}']\n+= Session re-authentication for Kafka brokers\n+\n+The Kafka _SASL OAUTHBEARER_ mechanism supports a Kafka feature called the _re-authentication_ mechanism.\n+OAuth 2.0 authentication in Strimzi provides support for the re-authentication mechanism.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "812dfdde6f56013c187e66daf726e86c28182401"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNzQzMzE3", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3336#pullrequestreview-471743317", "createdAt": "2020-08-20T15:38:10Z", "commit": {"oid": "812dfdde6f56013c187e66daf726e86c28182401"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTozODoxMFrOHEHjBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTozODoxMFrOHEHjBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA4MDAwNw==", "bodyText": "Suggested addition to the above paragraph:\nSession re-authentication is supported for both types of token validation (fast local JWT and introspection endpoint). For an example configuration, see xref:proc-oauth-authentication-broker-config-{context}[].", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3336#discussion_r474080007", "createdAt": "2020-08-20T15:38:10Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/oauth/con-oauth-reauthentication.adoc", "diffHunk": "@@ -0,0 +1,28 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-oauth.adoc\n+\n+[id='con-oauth-reauthentication-{context}']\n+= Session re-authentication for Kafka brokers\n+\n+The Kafka _SASL OAUTHBEARER_ mechanism supports a Kafka feature called the _re-authentication_ mechanism.\n+OAuth 2.0 authentication in Strimzi provides support for the re-authentication mechanism.\n+\n+When the re-authentication mechanism is enabled in the configuration of an `oauth` type listener, the broker's authenticated session expires when the access token expires.\n+The client must then re-authenticate to the existing session by sending a new, valid access token to the broker, without dropping the connection.\n+\n+If token validation is successful, a new client session is started using the existing connection.\n+If the client fails to re-authenticate, the broker will close the connection if further attempts are made to send or receive messages.\n+Java clients that use Kafka client library 2.2 or later automatically re-authenticate if the re-authentication mechanism is enabled on the broker.\n+\n+You enable session re-authentication in the `Kafka` resource. Set the `maxSecondsWithoutReauthentication` property for a TLS listener with `type: oauth` authentication.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "812dfdde6f56013c187e66daf726e86c28182401"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNzYzMjk4", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3336#pullrequestreview-471763298", "createdAt": "2020-08-20T16:00:38Z", "commit": {"oid": "812dfdde6f56013c187e66daf726e86c28182401"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjowMDozOFrOHEIg-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjowMDozOFrOHEIg-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA5NTg2Ng==", "bodyText": "@mstruk - How many seconds should the user set for maxSecondsWithoutReauthentication? I think we should provide some guidance here.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3336#discussion_r474095866", "createdAt": "2020-08-20T16:00:38Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/oauth/proc-oauth-authentication-broker-config.adoc", "diffHunk": "@@ -56,23 +58,27 @@ external:\n     validIssuerUri: <__https://<auth-server-address>/auth/realms/external__> <2>\n     jwksEndpointUri: <__https://<auth-server-address>/auth/realms/external/protocol/openid-connect/certs__> <3>\n     userNameClaim: preferred_username <4>\n-    tlsTrustedCertificates: <5>\n+    maxSecondsWithoutReauthentication: 3600 <5>\n+    tlsTrustedCertificates: <6>\n     - secretName: oauth-server-cert\n       certificate: ca.crt\n-    disableTlsHostnameVerification: true <6>\n-    jwksExpirySeconds: 360 <7>\n-    jwksRefreshSeconds: 300 <8>\n-    enableECDSA: \"true\" <9>\n+    disableTlsHostnameVerification: true <7>\n+    jwksExpirySeconds: 360 <8>\n+    jwksRefreshSeconds: 300 <9>\n+    jwksMinRefreshPauseSeconds: 1 <10>\n+    enableECDSA: \"true\" <11>\n ----\n <1> Listener type set to `oauth`.\n <2> URI of the token issuer used for authentication.\n <3> URI of the JWKS certificate endpoint used for local JWT validation.\n <4> The token claim (or key) that contains the actual user name in the token. The user name is the _principal_ used to identify the user. The `userNameClaim` value will depend on the authentication flow and the authorization server used.\n-<5> (Optional) Trusted certificates for TLS connection to the authorization server.\n-<6> (Optional) Disable TLS hostname verification. Default is `false`.\n-<7> The duration the JWKs certificates are considered valid before they expire. Default is `360` seconds. If you specify a longer time, consider the risk of allowing access to revoked certificates.\n-<8> The period between refreshes of JWKs certificates. The interval must be at least 60 seconds shorter than the expiry interval. Default is `300` seconds.\n-<9> (Optional) If ECDSA is used for signing JWT tokens on authorization server, then this needs to be enabled. It installs additional crypto providers using BouncyCastle crypto library. Default is `false`.\n+<5> (Optional) Activates the Kafka re-authentication mechanism that enforces session expiry to the same length of time as the access token. If the specified value is less than the time left for the access token to expire, then the client will have to re-authenticate before the actual token expiry. By default, the session does not expire when the access token expires, and the client does not attempt re-authentication.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "812dfdde6f56013c187e66daf726e86c28182401"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6421bf162aa26782a1887d6012da6b5f4b1dd91c", "author": {"user": {"login": "mstruk", "name": "Marko Strukelj"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/6421bf162aa26782a1887d6012da6b5f4b1dd91c", "committedDate": "2020-08-20T18:02:58Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Daniel Laing <dlaing@redhat.com>\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cadee1cc04086af8f6ee36c99ed550147231d5f", "author": {"user": {"login": "mstruk", "name": "Marko Strukelj"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3cadee1cc04086af8f6ee36c99ed550147231d5f", "committedDate": "2020-08-20T18:19:56Z", "message": "Documentation changes based on suggestions\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9de4acdd3326fb97a1b6ff9d884d9f3755424f0d", "author": {"user": {"login": "mstruk", "name": "Marko Strukelj"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/9de4acdd3326fb97a1b6ff9d884d9f3755424f0d", "committedDate": "2020-08-20T17:48:58Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Daniel Laing <dlaing@redhat.com>"}, "afterCommit": {"oid": "3cadee1cc04086af8f6ee36c99ed550147231d5f", "author": {"user": {"login": "mstruk", "name": "Marko Strukelj"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3cadee1cc04086af8f6ee36c99ed550147231d5f", "committedDate": "2020-08-20T18:19:56Z", "message": "Documentation changes based on suggestions\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52b4dacd8329fae8e0b8921c2a3919d476450e68", "author": {"user": {"login": "mstruk", "name": "Marko Strukelj"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/52b4dacd8329fae8e0b8921c2a3919d476450e68", "committedDate": "2020-08-20T19:31:35Z", "message": "Update derived resources\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMzUxNDYy", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3336#pullrequestreview-472351462", "createdAt": "2020-08-21T09:41:37Z", "commit": {"oid": "52b4dacd8329fae8e0b8921c2a3919d476450e68"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37b6734c65516ccc5eb227b6c453e94ee6697f25", "author": {"user": {"login": "mstruk", "name": "Marko Strukelj"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/37b6734c65516ccc5eb227b6c453e94ee6697f25", "committedDate": "2020-08-21T13:29:16Z", "message": "Remove staging repository for strimzi-kafka-oauth 0.6.0\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNTYzMDI5", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3336#pullrequestreview-472563029", "createdAt": "2020-08-21T14:59:17Z", "commit": {"oid": "37b6734c65516ccc5eb227b6c453e94ee6697f25"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1330, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}