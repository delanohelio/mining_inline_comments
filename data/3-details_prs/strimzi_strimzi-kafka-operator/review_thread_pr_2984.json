{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NzI1NTg1", "number": 2984, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOTowNDo0NVrOD7JrtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxMzo1Nzo0NFrOD_My8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzUxMjIwOnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOTowNDo0NVrOGTTWlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwODo1MzoyMlrOGZPuHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg5MzIwNg==", "bodyText": "When the bridge is scaled to 0, the status should show that it is ready, but it should not list the URL. So I think you should add similar condition also arount the lines 106-110 to prevent this.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r422893206", "createdAt": "2020-05-11T09:04:45Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperator.java", "diffHunk": "@@ -100,7 +101,7 @@ public KafkaBridgeAssemblyOperator(Vertx vertx, PlatformFeaturesAvailability pfa\n             .compose(i -> deploymentOperations.reconcile(namespace, bridge.getName(), bridge.generateDeployment(annotations, pfa.isOpenshift(), imagePullPolicy, imagePullSecrets)))\n             .compose(i -> deploymentOperations.scaleUp(namespace, bridge.getName(), bridge.getReplicas()))\n             .compose(i -> deploymentOperations.waitForObserved(namespace, bridge.getName(), 1_000, operationTimeoutMs))\n-            .compose(i -> deploymentOperations.readiness(namespace, bridge.getName(), 1_000, operationTimeoutMs))\n+            .compose(i -> bridgeHasZeroReplicas ? Future.succeededFuture() : deploymentOperations.readiness(namespace, bridge.getName(), 1_000, operationTimeoutMs))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cee371ec9c953255af64be472bae3960717db2db"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyNTE0OQ==", "bodyText": "Done!", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429125149", "createdAt": "2020-05-22T08:53:22Z", "author": {"login": "leonardgee"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperator.java", "diffHunk": "@@ -100,7 +101,7 @@ public KafkaBridgeAssemblyOperator(Vertx vertx, PlatformFeaturesAvailability pfa\n             .compose(i -> deploymentOperations.reconcile(namespace, bridge.getName(), bridge.generateDeployment(annotations, pfa.isOpenshift(), imagePullPolicy, imagePullSecrets)))\n             .compose(i -> deploymentOperations.scaleUp(namespace, bridge.getName(), bridge.getReplicas()))\n             .compose(i -> deploymentOperations.waitForObserved(namespace, bridge.getName(), 1_000, operationTimeoutMs))\n-            .compose(i -> deploymentOperations.readiness(namespace, bridge.getName(), 1_000, operationTimeoutMs))\n+            .compose(i -> bridgeHasZeroReplicas ? Future.succeededFuture() : deploymentOperations.readiness(namespace, bridge.getName(), 1_000, operationTimeoutMs))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg5MzIwNg=="}, "originalCommit": {"oid": "cee371ec9c953255af64be472bae3960717db2db"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzUxMjUyOnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOTowNDo1MlrOGTTW0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwODoyMzowMlrOGZO1ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg5MzI2NA==", "bodyText": "Can you keep this as separte imports? Maybe that is the checkstyle issue crashing the CI builds?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r422893264", "createdAt": "2020-05-11T09:04:52Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java", "diffHunk": "@@ -67,10 +67,7 @@\n import static org.mockito.ArgumentMatchers.anyLong;\n import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.ArgumentMatchers.eq;\n-import static org.mockito.Mockito.doAnswer;\n-import static org.mockito.Mockito.never;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;\n+import static org.mockito.Mockito.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cee371ec9c953255af64be472bae3960717db2db"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTExMDcyMw==", "bodyText": "Sure!", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429110723", "createdAt": "2020-05-22T08:23:02Z", "author": {"login": "leonardgee"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java", "diffHunk": "@@ -67,10 +67,7 @@\n import static org.mockito.ArgumentMatchers.anyLong;\n import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.ArgumentMatchers.eq;\n-import static org.mockito.Mockito.doAnswer;\n-import static org.mockito.Mockito.never;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;\n+import static org.mockito.Mockito.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg5MzI2NA=="}, "originalCommit": {"oid": "cee371ec9c953255af64be472bae3960717db2db"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzUxNDE4OnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOTowNToxNVrOGTTXzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOToyNzoxM1rOGTUMEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg5MzUxNg==", "bodyText": "I think it would be great to also test the captured state to check that the URL is not present when scaled to 0.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r422893516", "createdAt": "2020-05-11T09:05:15Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java", "diffHunk": "@@ -684,4 +681,49 @@ public void testCreateClusterStatusNotReady(VertxTestContext context) {\n         });\n     }\n \n+    @Test\n+    public void testCreateOrUpdateBridgeZeroReplica(VertxTestContext context) {\n+        ResourceOperatorSupplier supplier = ResourceUtils.supplierWithMocks(true);\n+        CrdOperator mockBridgeOps = supplier.kafkaBridgeOperator;\n+        DeploymentOperator mockDcOps = supplier.deploymentOperations;\n+        PodDisruptionBudgetOperator mockPdbOps = supplier.podDisruptionBudgetOperator;\n+        ConfigMapOperator mockCmOps = supplier.configMapOperations;\n+        ServiceOperator mockServiceOps = supplier.serviceOperations;\n+\n+        String clusterCmName = \"foo\";\n+        String clusterCmNamespace = \"test\";\n+        String failureMsg = \"failure\";\n+        Map<String, Object> metricsCm = new HashMap<>();\n+        metricsCm.put(\"foo\", \"bar\");\n+        KafkaBridge clusterCm = ResourceUtils.createKafkaBridgeCluster(clusterCmNamespace, clusterCmName, image, 0,\n+                BOOTSTRAP_SERVERS, KAFKA_BRIDGE_PRODUCER_SPEC, KAFKA_BRIDGE_CONSUMER_SPEC, KAFKA_BRIDGE_HTTP_SPEC, metricsCm);\n+\n+        when(mockBridgeOps.get(clusterCmNamespace, clusterCmName)).thenReturn(clusterCm);\n+        when(mockBridgeOps.getAsync(anyString(), anyString())).thenReturn(Future.succeededFuture(clusterCm));\n+        when(mockServiceOps.reconcile(anyString(), anyString(), any())).thenReturn(Future.succeededFuture());\n+        when(mockDcOps.reconcile(anyString(), anyString(), any())).thenReturn(Future.succeededFuture());\n+        when(mockDcOps.scaleUp(anyString(), anyString(), anyInt())).thenReturn(Future.succeededFuture(42));\n+        when(mockDcOps.scaleDown(anyString(), anyString(), anyInt())).thenReturn(Future.succeededFuture(42));\n+        when(mockDcOps.waitForObserved(anyString(), anyString(), anyLong(), anyLong())).thenReturn(Future.succeededFuture());\n+        when(mockPdbOps.reconcile(anyString(), any(), any())).thenReturn(Future.succeededFuture());\n+        when(mockCmOps.reconcile(anyString(), any(), any())).thenReturn(Future.succeededFuture(ReconcileResult.created(new ConfigMap())));\n+        ArgumentCaptor<KafkaBridge> bridgeCaptor = ArgumentCaptor.forClass(KafkaBridge.class);\n+        when(mockBridgeOps.updateStatusAsync(bridgeCaptor.capture())).thenReturn(Future.succeededFuture());\n+        KafkaBridgeAssemblyOperator ops = new KafkaBridgeAssemblyOperator(vertx,\n+                new PlatformFeaturesAvailability(true, kubernetesVersion),\n+                new MockCertManager(), new PasswordGenerator(10, \"a\", \"a\"),\n+                supplier,\n+                ResourceUtils.dummyClusterOperatorConfig(VERSIONS));\n+\n+        Checkpoint async = context.checkpoint();\n+        ops.createOrUpdate(new Reconciliation(\"test-trigger\", KafkaBridge.RESOURCE_KIND, clusterCmNamespace, clusterCmName), clusterCm).setHandler(createResult -> {\n+            context.verify(() -> assertThat(createResult.succeeded(), is(true)));\n+\n+            // Replica is 0 so readiness shouldn't get called.\n+            verify(mockDcOps, never()).readiness(anyString(), anyString(), anyLong(), anyLong());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cee371ec9c953255af64be472bae3960717db2db"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkwNjg5OA==", "bodyText": "Agreed with Jakub", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r422906898", "createdAt": "2020-05-11T09:27:13Z", "author": {"login": "samuel-hawker"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java", "diffHunk": "@@ -684,4 +681,49 @@ public void testCreateClusterStatusNotReady(VertxTestContext context) {\n         });\n     }\n \n+    @Test\n+    public void testCreateOrUpdateBridgeZeroReplica(VertxTestContext context) {\n+        ResourceOperatorSupplier supplier = ResourceUtils.supplierWithMocks(true);\n+        CrdOperator mockBridgeOps = supplier.kafkaBridgeOperator;\n+        DeploymentOperator mockDcOps = supplier.deploymentOperations;\n+        PodDisruptionBudgetOperator mockPdbOps = supplier.podDisruptionBudgetOperator;\n+        ConfigMapOperator mockCmOps = supplier.configMapOperations;\n+        ServiceOperator mockServiceOps = supplier.serviceOperations;\n+\n+        String clusterCmName = \"foo\";\n+        String clusterCmNamespace = \"test\";\n+        String failureMsg = \"failure\";\n+        Map<String, Object> metricsCm = new HashMap<>();\n+        metricsCm.put(\"foo\", \"bar\");\n+        KafkaBridge clusterCm = ResourceUtils.createKafkaBridgeCluster(clusterCmNamespace, clusterCmName, image, 0,\n+                BOOTSTRAP_SERVERS, KAFKA_BRIDGE_PRODUCER_SPEC, KAFKA_BRIDGE_CONSUMER_SPEC, KAFKA_BRIDGE_HTTP_SPEC, metricsCm);\n+\n+        when(mockBridgeOps.get(clusterCmNamespace, clusterCmName)).thenReturn(clusterCm);\n+        when(mockBridgeOps.getAsync(anyString(), anyString())).thenReturn(Future.succeededFuture(clusterCm));\n+        when(mockServiceOps.reconcile(anyString(), anyString(), any())).thenReturn(Future.succeededFuture());\n+        when(mockDcOps.reconcile(anyString(), anyString(), any())).thenReturn(Future.succeededFuture());\n+        when(mockDcOps.scaleUp(anyString(), anyString(), anyInt())).thenReturn(Future.succeededFuture(42));\n+        when(mockDcOps.scaleDown(anyString(), anyString(), anyInt())).thenReturn(Future.succeededFuture(42));\n+        when(mockDcOps.waitForObserved(anyString(), anyString(), anyLong(), anyLong())).thenReturn(Future.succeededFuture());\n+        when(mockPdbOps.reconcile(anyString(), any(), any())).thenReturn(Future.succeededFuture());\n+        when(mockCmOps.reconcile(anyString(), any(), any())).thenReturn(Future.succeededFuture(ReconcileResult.created(new ConfigMap())));\n+        ArgumentCaptor<KafkaBridge> bridgeCaptor = ArgumentCaptor.forClass(KafkaBridge.class);\n+        when(mockBridgeOps.updateStatusAsync(bridgeCaptor.capture())).thenReturn(Future.succeededFuture());\n+        KafkaBridgeAssemblyOperator ops = new KafkaBridgeAssemblyOperator(vertx,\n+                new PlatformFeaturesAvailability(true, kubernetesVersion),\n+                new MockCertManager(), new PasswordGenerator(10, \"a\", \"a\"),\n+                supplier,\n+                ResourceUtils.dummyClusterOperatorConfig(VERSIONS));\n+\n+        Checkpoint async = context.checkpoint();\n+        ops.createOrUpdate(new Reconciliation(\"test-trigger\", KafkaBridge.RESOURCE_KIND, clusterCmNamespace, clusterCmName), clusterCm).setHandler(createResult -> {\n+            context.verify(() -> assertThat(createResult.succeeded(), is(true)));\n+\n+            // Replica is 0 so readiness shouldn't get called.\n+            verify(mockDcOps, never()).readiness(anyString(), anyString(), anyLong(), anyLong());\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg5MzUxNg=="}, "originalCommit": {"oid": "cee371ec9c953255af64be472bae3960717db2db"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzU5OTU0OnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOToyNzowM1rOGTULqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwODoyMzozMlrOGZO2ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkwNjc5Mg==", "bodyText": "// 0 Replicas - readiness should never get called.\n\nSlight tweak just to match the code syntax", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r422906792", "createdAt": "2020-05-11T09:27:03Z", "author": {"login": "samuel-hawker"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java", "diffHunk": "@@ -684,4 +681,49 @@ public void testCreateClusterStatusNotReady(VertxTestContext context) {\n         });\n     }\n \n+    @Test\n+    public void testCreateOrUpdateBridgeZeroReplica(VertxTestContext context) {\n+        ResourceOperatorSupplier supplier = ResourceUtils.supplierWithMocks(true);\n+        CrdOperator mockBridgeOps = supplier.kafkaBridgeOperator;\n+        DeploymentOperator mockDcOps = supplier.deploymentOperations;\n+        PodDisruptionBudgetOperator mockPdbOps = supplier.podDisruptionBudgetOperator;\n+        ConfigMapOperator mockCmOps = supplier.configMapOperations;\n+        ServiceOperator mockServiceOps = supplier.serviceOperations;\n+\n+        String clusterCmName = \"foo\";\n+        String clusterCmNamespace = \"test\";\n+        String failureMsg = \"failure\";\n+        Map<String, Object> metricsCm = new HashMap<>();\n+        metricsCm.put(\"foo\", \"bar\");\n+        KafkaBridge clusterCm = ResourceUtils.createKafkaBridgeCluster(clusterCmNamespace, clusterCmName, image, 0,\n+                BOOTSTRAP_SERVERS, KAFKA_BRIDGE_PRODUCER_SPEC, KAFKA_BRIDGE_CONSUMER_SPEC, KAFKA_BRIDGE_HTTP_SPEC, metricsCm);\n+\n+        when(mockBridgeOps.get(clusterCmNamespace, clusterCmName)).thenReturn(clusterCm);\n+        when(mockBridgeOps.getAsync(anyString(), anyString())).thenReturn(Future.succeededFuture(clusterCm));\n+        when(mockServiceOps.reconcile(anyString(), anyString(), any())).thenReturn(Future.succeededFuture());\n+        when(mockDcOps.reconcile(anyString(), anyString(), any())).thenReturn(Future.succeededFuture());\n+        when(mockDcOps.scaleUp(anyString(), anyString(), anyInt())).thenReturn(Future.succeededFuture(42));\n+        when(mockDcOps.scaleDown(anyString(), anyString(), anyInt())).thenReturn(Future.succeededFuture(42));\n+        when(mockDcOps.waitForObserved(anyString(), anyString(), anyLong(), anyLong())).thenReturn(Future.succeededFuture());\n+        when(mockPdbOps.reconcile(anyString(), any(), any())).thenReturn(Future.succeededFuture());\n+        when(mockCmOps.reconcile(anyString(), any(), any())).thenReturn(Future.succeededFuture(ReconcileResult.created(new ConfigMap())));\n+        ArgumentCaptor<KafkaBridge> bridgeCaptor = ArgumentCaptor.forClass(KafkaBridge.class);\n+        when(mockBridgeOps.updateStatusAsync(bridgeCaptor.capture())).thenReturn(Future.succeededFuture());\n+        KafkaBridgeAssemblyOperator ops = new KafkaBridgeAssemblyOperator(vertx,\n+                new PlatformFeaturesAvailability(true, kubernetesVersion),\n+                new MockCertManager(), new PasswordGenerator(10, \"a\", \"a\"),\n+                supplier,\n+                ResourceUtils.dummyClusterOperatorConfig(VERSIONS));\n+\n+        Checkpoint async = context.checkpoint();\n+        ops.createOrUpdate(new Reconciliation(\"test-trigger\", KafkaBridge.RESOURCE_KIND, clusterCmNamespace, clusterCmName), clusterCm).setHandler(createResult -> {\n+            context.verify(() -> assertThat(createResult.succeeded(), is(true)));\n+\n+            // Replica is 0 so readiness shouldn't get called.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cee371ec9c953255af64be472bae3960717db2db"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTExMDk0Mg==", "bodyText": "Sure!", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429110942", "createdAt": "2020-05-22T08:23:32Z", "author": {"login": "leonardgee"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java", "diffHunk": "@@ -684,4 +681,49 @@ public void testCreateClusterStatusNotReady(VertxTestContext context) {\n         });\n     }\n \n+    @Test\n+    public void testCreateOrUpdateBridgeZeroReplica(VertxTestContext context) {\n+        ResourceOperatorSupplier supplier = ResourceUtils.supplierWithMocks(true);\n+        CrdOperator mockBridgeOps = supplier.kafkaBridgeOperator;\n+        DeploymentOperator mockDcOps = supplier.deploymentOperations;\n+        PodDisruptionBudgetOperator mockPdbOps = supplier.podDisruptionBudgetOperator;\n+        ConfigMapOperator mockCmOps = supplier.configMapOperations;\n+        ServiceOperator mockServiceOps = supplier.serviceOperations;\n+\n+        String clusterCmName = \"foo\";\n+        String clusterCmNamespace = \"test\";\n+        String failureMsg = \"failure\";\n+        Map<String, Object> metricsCm = new HashMap<>();\n+        metricsCm.put(\"foo\", \"bar\");\n+        KafkaBridge clusterCm = ResourceUtils.createKafkaBridgeCluster(clusterCmNamespace, clusterCmName, image, 0,\n+                BOOTSTRAP_SERVERS, KAFKA_BRIDGE_PRODUCER_SPEC, KAFKA_BRIDGE_CONSUMER_SPEC, KAFKA_BRIDGE_HTTP_SPEC, metricsCm);\n+\n+        when(mockBridgeOps.get(clusterCmNamespace, clusterCmName)).thenReturn(clusterCm);\n+        when(mockBridgeOps.getAsync(anyString(), anyString())).thenReturn(Future.succeededFuture(clusterCm));\n+        when(mockServiceOps.reconcile(anyString(), anyString(), any())).thenReturn(Future.succeededFuture());\n+        when(mockDcOps.reconcile(anyString(), anyString(), any())).thenReturn(Future.succeededFuture());\n+        when(mockDcOps.scaleUp(anyString(), anyString(), anyInt())).thenReturn(Future.succeededFuture(42));\n+        when(mockDcOps.scaleDown(anyString(), anyString(), anyInt())).thenReturn(Future.succeededFuture(42));\n+        when(mockDcOps.waitForObserved(anyString(), anyString(), anyLong(), anyLong())).thenReturn(Future.succeededFuture());\n+        when(mockPdbOps.reconcile(anyString(), any(), any())).thenReturn(Future.succeededFuture());\n+        when(mockCmOps.reconcile(anyString(), any(), any())).thenReturn(Future.succeededFuture(ReconcileResult.created(new ConfigMap())));\n+        ArgumentCaptor<KafkaBridge> bridgeCaptor = ArgumentCaptor.forClass(KafkaBridge.class);\n+        when(mockBridgeOps.updateStatusAsync(bridgeCaptor.capture())).thenReturn(Future.succeededFuture());\n+        KafkaBridgeAssemblyOperator ops = new KafkaBridgeAssemblyOperator(vertx,\n+                new PlatformFeaturesAvailability(true, kubernetesVersion),\n+                new MockCertManager(), new PasswordGenerator(10, \"a\", \"a\"),\n+                supplier,\n+                ResourceUtils.dummyClusterOperatorConfig(VERSIONS));\n+\n+        Checkpoint async = context.checkpoint();\n+        ops.createOrUpdate(new Reconciliation(\"test-trigger\", KafkaBridge.RESOURCE_KIND, clusterCmNamespace, clusterCmName), clusterCm).setHandler(createResult -> {\n+            context.verify(() -> assertThat(createResult.succeeded(), is(true)));\n+\n+            // Replica is 0 so readiness shouldn't get called.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkwNjc5Mg=="}, "originalCommit": {"oid": "cee371ec9c953255af64be472bae3960717db2db"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzYwNjg4OnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOToyODo1OFrOGTUQNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwODo1NTo1OFrOGZPyrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkwNzk1OA==", "bodyText": "Can we change:\n        ops.createOrUpdate(new Reconciliation(\"test-trigger\", KafkaBridge.RESOURCE_KIND, clusterCmNamespace, clusterCmName), clusterCm).setHandler(createResult -> {\n            context.verify(() -> assertThat(createResult.succeeded(), is(true)));\n\nTo:\n        ops.createOrUpdate(new Reconciliation(\"test-trigger\", KafkaBridge.RESOURCE_KIND, clusterCmNamespace, clusterCmName), clusterCm)\n            .setHandler(context.succeeding(v -> context.verify(() ->\n\n\nContext succeeding ensures we always have a non error and stops the need to check the result", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r422907958", "createdAt": "2020-05-11T09:28:58Z", "author": {"login": "samuel-hawker"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java", "diffHunk": "@@ -684,4 +681,49 @@ public void testCreateClusterStatusNotReady(VertxTestContext context) {\n         });\n     }\n \n+    @Test\n+    public void testCreateOrUpdateBridgeZeroReplica(VertxTestContext context) {\n+        ResourceOperatorSupplier supplier = ResourceUtils.supplierWithMocks(true);\n+        CrdOperator mockBridgeOps = supplier.kafkaBridgeOperator;\n+        DeploymentOperator mockDcOps = supplier.deploymentOperations;\n+        PodDisruptionBudgetOperator mockPdbOps = supplier.podDisruptionBudgetOperator;\n+        ConfigMapOperator mockCmOps = supplier.configMapOperations;\n+        ServiceOperator mockServiceOps = supplier.serviceOperations;\n+\n+        String clusterCmName = \"foo\";\n+        String clusterCmNamespace = \"test\";\n+        String failureMsg = \"failure\";\n+        Map<String, Object> metricsCm = new HashMap<>();\n+        metricsCm.put(\"foo\", \"bar\");\n+        KafkaBridge clusterCm = ResourceUtils.createKafkaBridgeCluster(clusterCmNamespace, clusterCmName, image, 0,\n+                BOOTSTRAP_SERVERS, KAFKA_BRIDGE_PRODUCER_SPEC, KAFKA_BRIDGE_CONSUMER_SPEC, KAFKA_BRIDGE_HTTP_SPEC, metricsCm);\n+\n+        when(mockBridgeOps.get(clusterCmNamespace, clusterCmName)).thenReturn(clusterCm);\n+        when(mockBridgeOps.getAsync(anyString(), anyString())).thenReturn(Future.succeededFuture(clusterCm));\n+        when(mockServiceOps.reconcile(anyString(), anyString(), any())).thenReturn(Future.succeededFuture());\n+        when(mockDcOps.reconcile(anyString(), anyString(), any())).thenReturn(Future.succeededFuture());\n+        when(mockDcOps.scaleUp(anyString(), anyString(), anyInt())).thenReturn(Future.succeededFuture(42));\n+        when(mockDcOps.scaleDown(anyString(), anyString(), anyInt())).thenReturn(Future.succeededFuture(42));\n+        when(mockDcOps.waitForObserved(anyString(), anyString(), anyLong(), anyLong())).thenReturn(Future.succeededFuture());\n+        when(mockPdbOps.reconcile(anyString(), any(), any())).thenReturn(Future.succeededFuture());\n+        when(mockCmOps.reconcile(anyString(), any(), any())).thenReturn(Future.succeededFuture(ReconcileResult.created(new ConfigMap())));\n+        ArgumentCaptor<KafkaBridge> bridgeCaptor = ArgumentCaptor.forClass(KafkaBridge.class);\n+        when(mockBridgeOps.updateStatusAsync(bridgeCaptor.capture())).thenReturn(Future.succeededFuture());\n+        KafkaBridgeAssemblyOperator ops = new KafkaBridgeAssemblyOperator(vertx,\n+                new PlatformFeaturesAvailability(true, kubernetesVersion),\n+                new MockCertManager(), new PasswordGenerator(10, \"a\", \"a\"),\n+                supplier,\n+                ResourceUtils.dummyClusterOperatorConfig(VERSIONS));\n+\n+        Checkpoint async = context.checkpoint();\n+        ops.createOrUpdate(new Reconciliation(\"test-trigger\", KafkaBridge.RESOURCE_KIND, clusterCmNamespace, clusterCmName), clusterCm).setHandler(createResult -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cee371ec9c953255af64be472bae3960717db2db"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyNjMxOA==", "bodyText": "Done!", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429126318", "createdAt": "2020-05-22T08:55:58Z", "author": {"login": "leonardgee"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java", "diffHunk": "@@ -684,4 +681,49 @@ public void testCreateClusterStatusNotReady(VertxTestContext context) {\n         });\n     }\n \n+    @Test\n+    public void testCreateOrUpdateBridgeZeroReplica(VertxTestContext context) {\n+        ResourceOperatorSupplier supplier = ResourceUtils.supplierWithMocks(true);\n+        CrdOperator mockBridgeOps = supplier.kafkaBridgeOperator;\n+        DeploymentOperator mockDcOps = supplier.deploymentOperations;\n+        PodDisruptionBudgetOperator mockPdbOps = supplier.podDisruptionBudgetOperator;\n+        ConfigMapOperator mockCmOps = supplier.configMapOperations;\n+        ServiceOperator mockServiceOps = supplier.serviceOperations;\n+\n+        String clusterCmName = \"foo\";\n+        String clusterCmNamespace = \"test\";\n+        String failureMsg = \"failure\";\n+        Map<String, Object> metricsCm = new HashMap<>();\n+        metricsCm.put(\"foo\", \"bar\");\n+        KafkaBridge clusterCm = ResourceUtils.createKafkaBridgeCluster(clusterCmNamespace, clusterCmName, image, 0,\n+                BOOTSTRAP_SERVERS, KAFKA_BRIDGE_PRODUCER_SPEC, KAFKA_BRIDGE_CONSUMER_SPEC, KAFKA_BRIDGE_HTTP_SPEC, metricsCm);\n+\n+        when(mockBridgeOps.get(clusterCmNamespace, clusterCmName)).thenReturn(clusterCm);\n+        when(mockBridgeOps.getAsync(anyString(), anyString())).thenReturn(Future.succeededFuture(clusterCm));\n+        when(mockServiceOps.reconcile(anyString(), anyString(), any())).thenReturn(Future.succeededFuture());\n+        when(mockDcOps.reconcile(anyString(), anyString(), any())).thenReturn(Future.succeededFuture());\n+        when(mockDcOps.scaleUp(anyString(), anyString(), anyInt())).thenReturn(Future.succeededFuture(42));\n+        when(mockDcOps.scaleDown(anyString(), anyString(), anyInt())).thenReturn(Future.succeededFuture(42));\n+        when(mockDcOps.waitForObserved(anyString(), anyString(), anyLong(), anyLong())).thenReturn(Future.succeededFuture());\n+        when(mockPdbOps.reconcile(anyString(), any(), any())).thenReturn(Future.succeededFuture());\n+        when(mockCmOps.reconcile(anyString(), any(), any())).thenReturn(Future.succeededFuture(ReconcileResult.created(new ConfigMap())));\n+        ArgumentCaptor<KafkaBridge> bridgeCaptor = ArgumentCaptor.forClass(KafkaBridge.class);\n+        when(mockBridgeOps.updateStatusAsync(bridgeCaptor.capture())).thenReturn(Future.succeededFuture());\n+        KafkaBridgeAssemblyOperator ops = new KafkaBridgeAssemblyOperator(vertx,\n+                new PlatformFeaturesAvailability(true, kubernetesVersion),\n+                new MockCertManager(), new PasswordGenerator(10, \"a\", \"a\"),\n+                supplier,\n+                ResourceUtils.dummyClusterOperatorConfig(VERSIONS));\n+\n+        Checkpoint async = context.checkpoint();\n+        ops.createOrUpdate(new Reconciliation(\"test-trigger\", KafkaBridge.RESOURCE_KIND, clusterCmNamespace, clusterCmName), clusterCm).setHandler(createResult -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkwNzk1OA=="}, "originalCommit": {"oid": "cee371ec9c953255af64be472bae3960717db2db"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzMxODE2OnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaBridgeCluster.java", "isResolved": false, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzoyMjowN1rOGZW3Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxMToyNDowNlrOGZuTRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0MjE4Mw==", "bodyText": "TBH, most users would expect it to run. So I think the DEFAULT_REPLICAS should stay 1.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429242183", "createdAt": "2020-05-22T13:22:07Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaBridgeCluster.java", "diffHunk": "@@ -57,7 +57,7 @@\n     protected static final String PASSWORD_VOLUME_MOUNT = \"/opt/strimzi/bridge-password/\";\n \n     // Configuration defaults\n-    protected static final int DEFAULT_REPLICAS = 1;\n+    protected static final int DEFAULT_REPLICAS = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf12c11d06c07a158b8e44dc92b51ecda1592a64"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI1MjExNw==", "bodyText": "Are you saying that I should change the test KafkaBridgeClusterTest.testDefaultValues instead then?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429252117", "createdAt": "2020-05-22T13:40:47Z", "author": {"login": "leonardgee"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaBridgeCluster.java", "diffHunk": "@@ -57,7 +57,7 @@\n     protected static final String PASSWORD_VOLUME_MOUNT = \"/opt/strimzi/bridge-password/\";\n \n     // Configuration defaults\n-    protected static final int DEFAULT_REPLICAS = 1;\n+    protected static final int DEFAULT_REPLICAS = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0MjE4Mw=="}, "originalCommit": {"oid": "bf12c11d06c07a158b8e44dc92b51ecda1592a64"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI3NzMxMA==", "bodyText": "Sorry, I'm not sure I undertsand why. The default number of replicas was 1 before, so the test should work without any changes, or? The scaling to 0 should be used only when user explicitly sets the replicas field in the KafkaBridge CR to 0. Not by default when it is not set.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429277310", "createdAt": "2020-05-22T14:23:31Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaBridgeCluster.java", "diffHunk": "@@ -57,7 +57,7 @@\n     protected static final String PASSWORD_VOLUME_MOUNT = \"/opt/strimzi/bridge-password/\";\n \n     // Configuration defaults\n-    protected static final int DEFAULT_REPLICAS = 1;\n+    protected static final int DEFAULT_REPLICAS = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0MjE4Mw=="}, "originalCommit": {"oid": "bf12c11d06c07a158b8e44dc92b51ecda1592a64"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMwMTI5Nw==", "bodyText": "kafkaBridgeCluster.setReplicas's condition has changed from > to >= which breaks the above-mentioned test, thus the question.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429301297", "createdAt": "2020-05-22T15:04:34Z", "author": {"login": "leonardgee"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaBridgeCluster.java", "diffHunk": "@@ -57,7 +57,7 @@\n     protected static final String PASSWORD_VOLUME_MOUNT = \"/opt/strimzi/bridge-password/\";\n \n     // Configuration defaults\n-    protected static final int DEFAULT_REPLICAS = 1;\n+    protected static final int DEFAULT_REPLICAS = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0MjE4Mw=="}, "originalCommit": {"oid": "bf12c11d06c07a158b8e44dc92b51ecda1592a64"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMzNjgwNQ==", "bodyText": "I guess that might be because the replicas is defined as int in KafkaBridgeSpec class in api module which means that if not set it would be 0. I guess it should probably have the default one already there and this whole default part can be probably removed from KafkaBridgeCluster?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429336805", "createdAt": "2020-05-22T16:17:48Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaBridgeCluster.java", "diffHunk": "@@ -57,7 +57,7 @@\n     protected static final String PASSWORD_VOLUME_MOUNT = \"/opt/strimzi/bridge-password/\";\n \n     // Configuration defaults\n-    protected static final int DEFAULT_REPLICAS = 1;\n+    protected static final int DEFAULT_REPLICAS = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0MjE4Mw=="}, "originalCommit": {"oid": "bf12c11d06c07a158b8e44dc92b51ecda1592a64"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYxNDI1OA==", "bodyText": "It should be fixed now. Thanks for the clarification!", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429614258", "createdAt": "2020-05-24T08:53:56Z", "author": {"login": "leonardgee"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaBridgeCluster.java", "diffHunk": "@@ -57,7 +57,7 @@\n     protected static final String PASSWORD_VOLUME_MOUNT = \"/opt/strimzi/bridge-password/\";\n \n     // Configuration defaults\n-    protected static final int DEFAULT_REPLICAS = 1;\n+    protected static final int DEFAULT_REPLICAS = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0MjE4Mw=="}, "originalCommit": {"oid": "bf12c11d06c07a158b8e44dc92b51ecda1592a64"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYyMjc3MA==", "bodyText": "Oh, I didn't. The replica is still 0 in the test. I see there is a @DefaultValue(1) annotation in the getReplicas method of KafkaBridgeSpec, not sure why it still returns 0.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429622770", "createdAt": "2020-05-24T10:40:20Z", "author": {"login": "leonardgee"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaBridgeCluster.java", "diffHunk": "@@ -57,7 +57,7 @@\n     protected static final String PASSWORD_VOLUME_MOUNT = \"/opt/strimzi/bridge-password/\";\n \n     // Configuration defaults\n-    protected static final int DEFAULT_REPLICAS = 1;\n+    protected static final int DEFAULT_REPLICAS = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0MjE4Mw=="}, "originalCommit": {"oid": "bf12c11d06c07a158b8e44dc92b51ecda1592a64"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYyMzY1MQ==", "bodyText": "I can manually set the instance field to be 1 on initialization do you want me to do that?\ni.e. in the KafkaBridgeSpec I changed it to:\nprivate int replicas = 1", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429623651", "createdAt": "2020-05-24T10:52:21Z", "author": {"login": "leonardgee"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaBridgeCluster.java", "diffHunk": "@@ -57,7 +57,7 @@\n     protected static final String PASSWORD_VOLUME_MOUNT = \"/opt/strimzi/bridge-password/\";\n \n     // Configuration defaults\n-    protected static final int DEFAULT_REPLICAS = 1;\n+    protected static final int DEFAULT_REPLICAS = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0MjE4Mw=="}, "originalCommit": {"oid": "bf12c11d06c07a158b8e44dc92b51ecda1592a64"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYyNDIwNQ==", "bodyText": "Right, that is what I meant - sorry for not being clear on that. The @DefaultValue is AFAIK just for the docs.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429624205", "createdAt": "2020-05-24T10:58:30Z", "author": {"login": "scholzj"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaBridgeCluster.java", "diffHunk": "@@ -57,7 +57,7 @@\n     protected static final String PASSWORD_VOLUME_MOUNT = \"/opt/strimzi/bridge-password/\";\n \n     // Configuration defaults\n-    protected static final int DEFAULT_REPLICAS = 1;\n+    protected static final int DEFAULT_REPLICAS = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0MjE4Mw=="}, "originalCommit": {"oid": "bf12c11d06c07a158b8e44dc92b51ecda1592a64"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYyNjE4MQ==", "bodyText": "Sure, will do it now. Thanks a lot!", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429626181", "createdAt": "2020-05-24T11:24:06Z", "author": {"login": "leonardgee"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaBridgeCluster.java", "diffHunk": "@@ -57,7 +57,7 @@\n     protected static final String PASSWORD_VOLUME_MOUNT = \"/opt/strimzi/bridge-password/\";\n \n     // Configuration defaults\n-    protected static final int DEFAULT_REPLICAS = 1;\n+    protected static final int DEFAULT_REPLICAS = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0MjE4Mw=="}, "originalCommit": {"oid": "bf12c11d06c07a158b8e44dc92b51ecda1592a64"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTg2Mjc5OnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxMToxNTowMlrOGZuQTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxMToyNDoyMlrOGZuTXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYyNTQyMg==", "bodyText": "To match the recent vertx upgrade we did this should now be onComplete instead of setHandler", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429625422", "createdAt": "2020-05-24T11:15:02Z", "author": {"login": "samuel-hawker"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java", "diffHunk": "@@ -687,4 +688,49 @@ public void testCreateClusterStatusNotReady(VertxTestContext context) {\n             })));\n     }\n \n+    @Test\n+    public void testCreateOrUpdateBridgeZeroReplica(VertxTestContext context) {\n+        ResourceOperatorSupplier supplier = ResourceUtils.supplierWithMocks(true);\n+        CrdOperator mockBridgeOps = supplier.kafkaBridgeOperator;\n+        DeploymentOperator mockDcOps = supplier.deploymentOperations;\n+        PodDisruptionBudgetOperator mockPdbOps = supplier.podDisruptionBudgetOperator;\n+        ConfigMapOperator mockCmOps = supplier.configMapOperations;\n+        ServiceOperator mockServiceOps = supplier.serviceOperations;\n+\n+        String clusterCmName = \"foo\";\n+        String clusterCmNamespace = \"test\";\n+        String failureMsg = \"failure\";\n+        Map<String, Object> metricsCm = new HashMap<>();\n+        metricsCm.put(\"foo\", \"bar\");\n+        KafkaBridge clusterCm = ResourceUtils.createKafkaBridgeCluster(clusterCmNamespace, clusterCmName, image, 0,\n+                BOOTSTRAP_SERVERS, KAFKA_BRIDGE_PRODUCER_SPEC, KAFKA_BRIDGE_CONSUMER_SPEC, KAFKA_BRIDGE_HTTP_SPEC, metricsCm);\n+\n+        when(mockBridgeOps.get(clusterCmNamespace, clusterCmName)).thenReturn(clusterCm);\n+        when(mockBridgeOps.getAsync(anyString(), anyString())).thenReturn(Future.succeededFuture(clusterCm));\n+        when(mockServiceOps.reconcile(anyString(), anyString(), any())).thenReturn(Future.succeededFuture());\n+        when(mockDcOps.reconcile(anyString(), anyString(), any())).thenReturn(Future.succeededFuture());\n+        when(mockDcOps.scaleUp(anyString(), anyString(), anyInt())).thenReturn(Future.succeededFuture(42));\n+        when(mockDcOps.scaleDown(anyString(), anyString(), anyInt())).thenReturn(Future.succeededFuture(42));\n+        when(mockDcOps.waitForObserved(anyString(), anyString(), anyLong(), anyLong())).thenReturn(Future.succeededFuture());\n+        when(mockPdbOps.reconcile(anyString(), any(), any())).thenReturn(Future.succeededFuture());\n+        when(mockCmOps.reconcile(anyString(), any(), any())).thenReturn(Future.succeededFuture(ReconcileResult.created(new ConfigMap())));\n+        ArgumentCaptor<KafkaBridge> bridgeCaptor = ArgumentCaptor.forClass(KafkaBridge.class);\n+        when(mockBridgeOps.updateStatusAsync(bridgeCaptor.capture())).thenReturn(Future.succeededFuture());\n+        KafkaBridgeAssemblyOperator ops = new KafkaBridgeAssemblyOperator(vertx,\n+                new PlatformFeaturesAvailability(true, kubernetesVersion),\n+                new MockCertManager(), new PasswordGenerator(10, \"a\", \"a\"),\n+                supplier,\n+                ResourceUtils.dummyClusterOperatorConfig(VERSIONS));\n+\n+        Checkpoint async = context.checkpoint();\n+        ops.createOrUpdate(new Reconciliation(\"test-trigger\", KafkaBridge.RESOURCE_KIND, clusterCmNamespace, clusterCmName), clusterCm)\n+                .setHandler(context.succeeding(v -> context.verify(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76ecdd07b8eedf690aa1fe267744efc52127777b"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYyNjIwNQ==", "bodyText": "Sure!", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429626205", "createdAt": "2020-05-24T11:24:22Z", "author": {"login": "leonardgee"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java", "diffHunk": "@@ -687,4 +688,49 @@ public void testCreateClusterStatusNotReady(VertxTestContext context) {\n             })));\n     }\n \n+    @Test\n+    public void testCreateOrUpdateBridgeZeroReplica(VertxTestContext context) {\n+        ResourceOperatorSupplier supplier = ResourceUtils.supplierWithMocks(true);\n+        CrdOperator mockBridgeOps = supplier.kafkaBridgeOperator;\n+        DeploymentOperator mockDcOps = supplier.deploymentOperations;\n+        PodDisruptionBudgetOperator mockPdbOps = supplier.podDisruptionBudgetOperator;\n+        ConfigMapOperator mockCmOps = supplier.configMapOperations;\n+        ServiceOperator mockServiceOps = supplier.serviceOperations;\n+\n+        String clusterCmName = \"foo\";\n+        String clusterCmNamespace = \"test\";\n+        String failureMsg = \"failure\";\n+        Map<String, Object> metricsCm = new HashMap<>();\n+        metricsCm.put(\"foo\", \"bar\");\n+        KafkaBridge clusterCm = ResourceUtils.createKafkaBridgeCluster(clusterCmNamespace, clusterCmName, image, 0,\n+                BOOTSTRAP_SERVERS, KAFKA_BRIDGE_PRODUCER_SPEC, KAFKA_BRIDGE_CONSUMER_SPEC, KAFKA_BRIDGE_HTTP_SPEC, metricsCm);\n+\n+        when(mockBridgeOps.get(clusterCmNamespace, clusterCmName)).thenReturn(clusterCm);\n+        when(mockBridgeOps.getAsync(anyString(), anyString())).thenReturn(Future.succeededFuture(clusterCm));\n+        when(mockServiceOps.reconcile(anyString(), anyString(), any())).thenReturn(Future.succeededFuture());\n+        when(mockDcOps.reconcile(anyString(), anyString(), any())).thenReturn(Future.succeededFuture());\n+        when(mockDcOps.scaleUp(anyString(), anyString(), anyInt())).thenReturn(Future.succeededFuture(42));\n+        when(mockDcOps.scaleDown(anyString(), anyString(), anyInt())).thenReturn(Future.succeededFuture(42));\n+        when(mockDcOps.waitForObserved(anyString(), anyString(), anyLong(), anyLong())).thenReturn(Future.succeededFuture());\n+        when(mockPdbOps.reconcile(anyString(), any(), any())).thenReturn(Future.succeededFuture());\n+        when(mockCmOps.reconcile(anyString(), any(), any())).thenReturn(Future.succeededFuture(ReconcileResult.created(new ConfigMap())));\n+        ArgumentCaptor<KafkaBridge> bridgeCaptor = ArgumentCaptor.forClass(KafkaBridge.class);\n+        when(mockBridgeOps.updateStatusAsync(bridgeCaptor.capture())).thenReturn(Future.succeededFuture());\n+        KafkaBridgeAssemblyOperator ops = new KafkaBridgeAssemblyOperator(vertx,\n+                new PlatformFeaturesAvailability(true, kubernetesVersion),\n+                new MockCertManager(), new PasswordGenerator(10, \"a\", \"a\"),\n+                supplier,\n+                ResourceUtils.dummyClusterOperatorConfig(VERSIONS));\n+\n+        Checkpoint async = context.checkpoint();\n+        ops.createOrUpdate(new Reconciliation(\"test-trigger\", KafkaBridge.RESOURCE_KIND, clusterCmNamespace, clusterCmName), clusterCm)\n+                .setHandler(context.succeeding(v -> context.verify(() -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYyNTQyMg=="}, "originalCommit": {"oid": "76ecdd07b8eedf690aa1fe267744efc52127777b"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTk2NTI4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaBridgeSpec.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxMzo1Nzo0NFrOGZvHdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxNToyOTozNFrOGZvosQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYzOTU0MQ==", "bodyText": "Why are you not using the constant here to make clear the intent that replicas is initialized with the default", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429639541", "createdAt": "2020-05-24T13:57:44Z", "author": {"login": "samuel-hawker"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaBridgeSpec.java", "diffHunk": "@@ -35,7 +35,7 @@\n \n     private static final long serialVersionUID = 1L;\n \n-    private int replicas;\n+    private int replicas = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5855418c8c7bfca531c6731ffe99f9dc0b30b00a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0MzgxNQ==", "bodyText": "Which constants are you referring to here? The KafkaBridgeCluster.DEFAULT_REPLICAS? The access modifier is protected so I am afraid I can't use it here.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429643815", "createdAt": "2020-05-24T14:43:41Z", "author": {"login": "leonardgee"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaBridgeSpec.java", "diffHunk": "@@ -35,7 +35,7 @@\n \n     private static final long serialVersionUID = 1L;\n \n-    private int replicas;\n+    private int replicas = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYzOTU0MQ=="}, "originalCommit": {"oid": "5855418c8c7bfca531c6731ffe99f9dc0b30b00a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0NDQxNA==", "bodyText": "I have created a private constant for this now.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429644414", "createdAt": "2020-05-24T14:49:21Z", "author": {"login": "leonardgee"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaBridgeSpec.java", "diffHunk": "@@ -35,7 +35,7 @@\n \n     private static final long serialVersionUID = 1L;\n \n-    private int replicas;\n+    private int replicas = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYzOTU0MQ=="}, "originalCommit": {"oid": "5855418c8c7bfca531c6731ffe99f9dc0b30b00a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0NzA1Mw==", "bodyText": "I think switching default replicas in the KakaBridgeCluster class to public is perfectly fine given that It is an important implementation detail that it should be exposing to other classes. Unless @scholzj thinks differently on this?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429647053", "createdAt": "2020-05-24T15:18:00Z", "author": {"login": "samuel-hawker"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaBridgeSpec.java", "diffHunk": "@@ -35,7 +35,7 @@\n \n     private static final long serialVersionUID = 1L;\n \n-    private int replicas;\n+    private int replicas = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYzOTU0MQ=="}, "originalCommit": {"oid": "5855418c8c7bfca531c6731ffe99f9dc0b30b00a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0ODA0OQ==", "bodyText": "Let me know and I will change accordingly. Thanks.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429648049", "createdAt": "2020-05-24T15:29:34Z", "author": {"login": "leonardgee"}, "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaBridgeSpec.java", "diffHunk": "@@ -35,7 +35,7 @@\n \n     private static final long serialVersionUID = 1L;\n \n-    private int replicas;\n+    private int replicas = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYzOTU0MQ=="}, "originalCommit": {"oid": "5855418c8c7bfca531c6731ffe99f9dc0b30b00a"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 25, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}