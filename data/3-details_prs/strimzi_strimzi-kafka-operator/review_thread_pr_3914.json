{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1MDU2MDQ3", "number": 3914, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODoxNTo1NVrOE1HRyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNjo0MzowOFrOE1vm-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTI5MjI1OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/RecoveryST.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODoxNTo1NVrOHtNIYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMDowMTowNFrOHtRAWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2MzEwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    PodUtils.waitForPendingPod(clusterName + \"-kafka\");\n          \n          \n            \n                    PodUtils.waitForPendingPod(KafkaResources.kafkaStatefulSetName(clusterName));", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3914#discussion_r517163105", "createdAt": "2020-11-04T08:15:55Z", "author": {"login": "sknot-rh"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/RecoveryST.java", "diffHunk": "@@ -228,6 +235,42 @@ void testRecoveryFromKafkaBridgeMetricsConfigDeletion() {\n         timeMeasuringSystem.stopOperation(timeMeasuringSystem.getOperationID());\n     }\n \n+    @Test\n+    void testRecoveryFromImpossibleMemoryRequest() {\n+        String clusterName = \"my-cluster\";\n+\n+        Map<String, Quantity> requests = new HashMap<>(2);\n+        requests.put(\"memory\", new Quantity(\"465458732Gi\"));\n+\n+        ResourceRequirements resourceReq = new ResourceRequirementsBuilder()\n+            .withRequests(requests)\n+            .build();\n+\n+        KafkaResource.kafkaWithoutWait(KafkaResource.defaultKafka(clusterName, 3, 3)\n+            .editSpec()\n+                .editKafka()\n+                    .withResources(resourceReq)\n+                .endKafka()\n+            .endSpec()\n+            .build());\n+\n+        PodUtils.waitForPendingPod(clusterName + \"-kafka\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bcb35af9d15969d676eadb348c49b65738e4929"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIyNjU4Ng==", "bodyText": "Yep, sorry, my bad.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3914#discussion_r517226586", "createdAt": "2020-11-04T10:01:04Z", "author": {"login": "im-konge"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/RecoveryST.java", "diffHunk": "@@ -228,6 +235,42 @@ void testRecoveryFromKafkaBridgeMetricsConfigDeletion() {\n         timeMeasuringSystem.stopOperation(timeMeasuringSystem.getOperationID());\n     }\n \n+    @Test\n+    void testRecoveryFromImpossibleMemoryRequest() {\n+        String clusterName = \"my-cluster\";\n+\n+        Map<String, Quantity> requests = new HashMap<>(2);\n+        requests.put(\"memory\", new Quantity(\"465458732Gi\"));\n+\n+        ResourceRequirements resourceReq = new ResourceRequirementsBuilder()\n+            .withRequests(requests)\n+            .build();\n+\n+        KafkaResource.kafkaWithoutWait(KafkaResource.defaultKafka(clusterName, 3, 3)\n+            .editSpec()\n+                .editKafka()\n+                    .withResources(resourceReq)\n+                .endKafka()\n+            .endSpec()\n+            .build());\n+\n+        PodUtils.waitForPendingPod(clusterName + \"-kafka\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2MzEwNQ=="}, "originalCommit": {"oid": "4bcb35af9d15969d676eadb348c49b65738e4929"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTI5NzQ2OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/RecoveryST.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODoxNzozMVrOHtNLrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMDozNToyMlrOHtSTOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2Mzk1MQ==", "bodyText": "Is this test different from io.strimzi.systemtest.rollingupdate.KafkaRollerST#testKafkaPodPending apart from setting memory instead of CPU?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3914#discussion_r517163951", "createdAt": "2020-11-04T08:17:31Z", "author": {"login": "sknot-rh"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/RecoveryST.java", "diffHunk": "@@ -228,6 +235,42 @@ void testRecoveryFromKafkaBridgeMetricsConfigDeletion() {\n         timeMeasuringSystem.stopOperation(timeMeasuringSystem.getOperationID());\n     }\n \n+    @Test\n+    void testRecoveryFromImpossibleMemoryRequest() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bcb35af9d15969d676eadb348c49b65738e4929"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE4MDI3NA==", "bodyText": "Yes, I think so, as least potentially...\n\nThat test stands up a cluster first and then updates it with an impossible request. One of the things we ought to be checking there is that only one pod becomes unschedulable (i.e. we don't progressively take down the cluster) and that recovery is possible.\nThis test starts with an impossible request (so all pods are unschedulable) and we want to ensure that recovery is impossible. My recollection was that this is how, despite us already having protection against the former in the KafkaRoller, we still had the recent bug with the latter.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3914#discussion_r517180274", "createdAt": "2020-11-04T08:47:02Z", "author": {"login": "tombentley"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/RecoveryST.java", "diffHunk": "@@ -228,6 +235,42 @@ void testRecoveryFromKafkaBridgeMetricsConfigDeletion() {\n         timeMeasuringSystem.stopOperation(timeMeasuringSystem.getOperationID());\n     }\n \n+    @Test\n+    void testRecoveryFromImpossibleMemoryRequest() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2Mzk1MQ=="}, "originalCommit": {"oid": "4bcb35af9d15969d676eadb348c49b65738e4929"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE4MDk3Mg==", "bodyText": "So assuming I'm correct about this, I guess we need to improve KafkaRollerST#testKafkaPodPending so that it waits for multiple reconciliations and verifies that N-1 of the pods are still running.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3914#discussion_r517180972", "createdAt": "2020-11-04T08:48:22Z", "author": {"login": "tombentley"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/RecoveryST.java", "diffHunk": "@@ -228,6 +235,42 @@ void testRecoveryFromKafkaBridgeMetricsConfigDeletion() {\n         timeMeasuringSystem.stopOperation(timeMeasuringSystem.getOperationID());\n     }\n \n+    @Test\n+    void testRecoveryFromImpossibleMemoryRequest() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2Mzk1MQ=="}, "originalCommit": {"oid": "4bcb35af9d15969d676eadb348c49b65738e4929"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzNTA3NA==", "bodyText": "Ok. Thanks for the explanation.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3914#discussion_r517235074", "createdAt": "2020-11-04T10:15:03Z", "author": {"login": "sknot-rh"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/RecoveryST.java", "diffHunk": "@@ -228,6 +235,42 @@ void testRecoveryFromKafkaBridgeMetricsConfigDeletion() {\n         timeMeasuringSystem.stopOperation(timeMeasuringSystem.getOperationID());\n     }\n \n+    @Test\n+    void testRecoveryFromImpossibleMemoryRequest() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2Mzk1MQ=="}, "originalCommit": {"oid": "4bcb35af9d15969d676eadb348c49b65738e4929"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0NzgwMw==", "bodyText": "I guess I can add these checks to all KafkaRoller tests which @stanlyDoge added in his KR PR -> not just to the testKafkaPodPending", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3914#discussion_r517247803", "createdAt": "2020-11-04T10:35:22Z", "author": {"login": "im-konge"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/RecoveryST.java", "diffHunk": "@@ -228,6 +235,42 @@ void testRecoveryFromKafkaBridgeMetricsConfigDeletion() {\n         timeMeasuringSystem.stopOperation(timeMeasuringSystem.getOperationID());\n     }\n \n+    @Test\n+    void testRecoveryFromImpossibleMemoryRequest() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2Mzk1MQ=="}, "originalCommit": {"oid": "4bcb35af9d15969d676eadb348c49b65738e4929"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NTgwNTAwOnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/KafkaRollerST.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwODoyMDozMlrOHt38aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMToyNDoxMVrOHt-4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg2NDU1Mg==", "bodyText": "What's the purpose of this?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3914#discussion_r517864552", "createdAt": "2020-11-05T08:20:32Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/KafkaRollerST.java", "diffHunk": "@@ -168,11 +171,15 @@ void testKafkaPodCrashLooping() {\n     void testKafkaPodImagePullBackOff() {\n         KafkaResource.kafkaPersistent(CLUSTER_NAME, 3, 3).done();\n \n-        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka ->\n-                kafka.getSpec().getKafka().setImage(\"strimzi/kafka:not-existent-tag\"));\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+            kafka.getSpec().getKafka().setImage(\"strimzi/kafka:not-existent-tag\");\n+            kafka.getSpec().getZookeeper().setImage(\"strimzi/kafka:latest-kafka-\" + Environment.ST_KAFKA_VERSION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f1c8758b53997618680023241e5bc6de9b7c775"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg2NzI0NA==", "bodyText": "When you set image just to Kafka and not the Zookeeper -> so the ZK will not have any image -> he will get the Kafka image. So this is a test where the Kafka pod should go to ImagePullBackOff not the ZK. Setting the Zookeeper image will make that just Kafka pod will \"fail\". We discussed this with @scholzj and @stanlyDoge.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3914#discussion_r517867244", "createdAt": "2020-11-05T08:25:18Z", "author": {"login": "im-konge"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/KafkaRollerST.java", "diffHunk": "@@ -168,11 +171,15 @@ void testKafkaPodCrashLooping() {\n     void testKafkaPodImagePullBackOff() {\n         KafkaResource.kafkaPersistent(CLUSTER_NAME, 3, 3).done();\n \n-        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka ->\n-                kafka.getSpec().getKafka().setImage(\"strimzi/kafka:not-existent-tag\"));\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+            kafka.getSpec().getKafka().setImage(\"strimzi/kafka:not-existent-tag\");\n+            kafka.getSpec().getZookeeper().setImage(\"strimzi/kafka:latest-kafka-\" + Environment.ST_KAFKA_VERSION);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg2NDU1Mg=="}, "originalCommit": {"oid": "6f1c8758b53997618680023241e5bc6de9b7c775"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3ODE2Mg==", "bodyText": "Ok, thanks for the explanation", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3914#discussion_r517978162", "createdAt": "2020-11-05T11:24:11Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/KafkaRollerST.java", "diffHunk": "@@ -168,11 +171,15 @@ void testKafkaPodCrashLooping() {\n     void testKafkaPodImagePullBackOff() {\n         KafkaResource.kafkaPersistent(CLUSTER_NAME, 3, 3).done();\n \n-        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka ->\n-                kafka.getSpec().getKafka().setImage(\"strimzi/kafka:not-existent-tag\"));\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+            kafka.getSpec().getKafka().setImage(\"strimzi/kafka:not-existent-tag\");\n+            kafka.getSpec().getZookeeper().setImage(\"strimzi/kafka:latest-kafka-\" + Environment.ST_KAFKA_VERSION);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg2NDU1Mg=="}, "originalCommit": {"oid": "6f1c8758b53997618680023241e5bc6de9b7c775"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NTgwNTM0OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/RecoveryST.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwODoyMDozN1rOHt38lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMToyMzoyMVrOHt-2bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg2NDU5OQ==", "bodyText": "Shouldn't we have there some additional wait to see that pods are rly broken?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3914#discussion_r517864599", "createdAt": "2020-11-05T08:20:37Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/RecoveryST.java", "diffHunk": "@@ -228,6 +235,42 @@ void testRecoveryFromKafkaBridgeMetricsConfigDeletion() {\n         timeMeasuringSystem.stopOperation(timeMeasuringSystem.getOperationID());\n     }\n \n+    @Test\n+    void testRecoveryFromImpossibleMemoryRequest() {\n+        String clusterName = \"my-cluster\";\n+\n+        Map<String, Quantity> requests = new HashMap<>(2);\n+        requests.put(\"memory\", new Quantity(\"465458732Gi\"));\n+\n+        ResourceRequirements resourceReq = new ResourceRequirementsBuilder()\n+            .withRequests(requests)\n+            .build();\n+\n+        KafkaResource.kafkaWithoutWait(KafkaResource.defaultKafka(clusterName, 3, 3)\n+            .editSpec()\n+                .editKafka()\n+                    .withResources(resourceReq)\n+                .endKafka()\n+            .endSpec()\n+            .build());\n+\n+        PodUtils.waitForPendingPod(KafkaResources.kafkaStatefulSetName(clusterName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f1c8758b53997618680023241e5bc6de9b7c775"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg2ODA0MQ==", "bodyText": "You mean some wait for Kafka is NotReady? Or do you want some stability wait?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3914#discussion_r517868041", "createdAt": "2020-11-05T08:26:38Z", "author": {"login": "im-konge"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/RecoveryST.java", "diffHunk": "@@ -228,6 +235,42 @@ void testRecoveryFromKafkaBridgeMetricsConfigDeletion() {\n         timeMeasuringSystem.stopOperation(timeMeasuringSystem.getOperationID());\n     }\n \n+    @Test\n+    void testRecoveryFromImpossibleMemoryRequest() {\n+        String clusterName = \"my-cluster\";\n+\n+        Map<String, Quantity> requests = new HashMap<>(2);\n+        requests.put(\"memory\", new Quantity(\"465458732Gi\"));\n+\n+        ResourceRequirements resourceReq = new ResourceRequirementsBuilder()\n+            .withRequests(requests)\n+            .build();\n+\n+        KafkaResource.kafkaWithoutWait(KafkaResource.defaultKafka(clusterName, 3, 3)\n+            .editSpec()\n+                .editKafka()\n+                    .withResources(resourceReq)\n+                .endKafka()\n+            .endSpec()\n+            .build());\n+\n+        PodUtils.waitForPendingPod(KafkaResources.kafkaStatefulSetName(clusterName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg2NDU5OQ=="}, "originalCommit": {"oid": "6f1c8758b53997618680023241e5bc6de9b7c775"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3NzcwOQ==", "bodyText": "Ye, maybe some stability wait", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3914#discussion_r517977709", "createdAt": "2020-11-05T11:23:21Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/RecoveryST.java", "diffHunk": "@@ -228,6 +235,42 @@ void testRecoveryFromKafkaBridgeMetricsConfigDeletion() {\n         timeMeasuringSystem.stopOperation(timeMeasuringSystem.getOperationID());\n     }\n \n+    @Test\n+    void testRecoveryFromImpossibleMemoryRequest() {\n+        String clusterName = \"my-cluster\";\n+\n+        Map<String, Quantity> requests = new HashMap<>(2);\n+        requests.put(\"memory\", new Quantity(\"465458732Gi\"));\n+\n+        ResourceRequirements resourceReq = new ResourceRequirementsBuilder()\n+            .withRequests(requests)\n+            .build();\n+\n+        KafkaResource.kafkaWithoutWait(KafkaResource.defaultKafka(clusterName, 3, 3)\n+            .editSpec()\n+                .editKafka()\n+                    .withResources(resourceReq)\n+                .endKafka()\n+            .endSpec()\n+            .build());\n+\n+        PodUtils.waitForPendingPod(KafkaResources.kafkaStatefulSetName(clusterName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg2NDU5OQ=="}, "originalCommit": {"oid": "6f1c8758b53997618680023241e5bc6de9b7c775"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0Nzg5NTk1OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/KafkaRollerST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNjo0MjowOVrOHuMJ6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNjo0MjowOVrOHuMJ6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE5NTY5MA==", "bodyText": "checkIfExactlyOneKafkaPodIsNotReady would be clearer (otherwise it might be mistaken for an 'at least one' condition)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3914#discussion_r518195690", "createdAt": "2020-11-05T16:42:09Z", "author": {"login": "tombentley"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/KafkaRollerST.java", "diffHunk": "@@ -266,6 +275,13 @@ void testKafkaPodPendingDueToRack() {\n         KafkaUtils.waitForKafkaReady(CLUSTER_NAME);\n     }\n \n+    boolean checkIfOneKafkaPodIsNotReady(String clusterName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f1c8758b53997618680023241e5bc6de9b7c775"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzkwMDEwOnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/RecoveryST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNjo0MzowOFrOHuMMkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNjo0MzowOFrOHuMMkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE5NjM3MQ==", "bodyText": "Add javadoc here and to testKafkaPodPending to explain the difference between the tests.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3914#discussion_r518196371", "createdAt": "2020-11-05T16:43:08Z", "author": {"login": "tombentley"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/RecoveryST.java", "diffHunk": "@@ -228,6 +235,42 @@ void testRecoveryFromKafkaBridgeMetricsConfigDeletion() {\n         timeMeasuringSystem.stopOperation(timeMeasuringSystem.getOperationID());\n     }\n \n+    @Test\n+    void testRecoveryFromImpossibleMemoryRequest() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f1c8758b53997618680023241e5bc6de9b7c775"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1010, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}