{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczODE0NDM4", "number": 2537, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjoyNjo0MlrODfuEgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjoyNjo0MlrODfuEgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTg3MjY3OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/specific/SpecificST.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjoyNjo0MlrOFplwXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwNzoxMjoyNVrOFptWtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1NDUyNw==", "bodyText": "I think you found a bug here ... so you should not change the test accept the bug ;-). I opened #2550 to fix it.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2537#discussion_r379154527", "createdAt": "2020-02-13T22:26:42Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/specific/SpecificST.java", "diffHunk": "@@ -59,15 +56,25 @@ void testRackAware() throws Exception {\n                 .endKafka()\n             .endSpec().done();\n \n+        Affinity kafkaPodSpecAffinity = kubeClient().getStatefulSet(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME)).getSpec().getTemplate().getSpec().getAffinity();\n+        NodeSelectorRequirement kafkaPodNodeSelectorRequirement = kafkaPodSpecAffinity.getNodeAffinity()\n+                .getRequiredDuringSchedulingIgnoredDuringExecution().getNodeSelectorTerms().get(0).getMatchExpressions().get(0);\n+\n+        assertThat(kafkaPodNodeSelectorRequirement.getKey(), is(rackKey));\n+        assertThat(kafkaPodNodeSelectorRequirement.getOperator(), is(\"Exists\"));\n+\n+        PodAffinityTerm kafkaPodAffinityTerm = kafkaPodSpecAffinity.getPodAntiAffinity().getPreferredDuringSchedulingIgnoredDuringExecution().get(0).getPodAffinityTerm();\n+\n+        assertThat(kafkaPodAffinityTerm.getTopologyKey(), is(rackKey));\n+        assertThat(kafkaPodAffinityTerm.getLabelSelector().getMatchLabels(), hasEntry(\"strimzi.io/cluster\", CLUSTER_NAME));\n+        assertThat(kafkaPodAffinityTerm.getLabelSelector().getMatchLabels(), hasEntry(\"strimzi.io/name\", KafkaResources.kafkaStatefulSetName(CLUSTER_NAME)));\n+\n         String rackId = cmdKubeClient().execInPod(KafkaResources.kafkaPodName(CLUSTER_NAME, 0), \"/bin/bash\", \"-c\", \"cat /opt/kafka/init/rack.id\").out();\n         assertThat(rackId.trim(), is(\"zone\"));\n \n-        String brokerRack = cmdKubeClient().execInPod(KafkaResources.kafkaPodName(CLUSTER_NAME, 0), \"/bin/bash\", \"-c\", \"cat /tmp/strimzi.properties | grep broker.rack\").out();\n-        assertThat(brokerRack.contains(\"broker.rack=zone\"), is(true));\n+        String brokerRack = cmdKubeClient().execInPod(KafkaResources.kafkaPodName(CLUSTER_NAME, 0), \"/bin/bash\", \"-c\", \"cat /tmp/strimzi.properties | grep rack.id\").out();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9445281a38d466edb0d8dd3430a3be20c7bba719"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI3OTAzMA==", "bodyText": "hehe, I will change it back then :)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2537#discussion_r379279030", "createdAt": "2020-02-14T07:12:25Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/specific/SpecificST.java", "diffHunk": "@@ -59,15 +56,25 @@ void testRackAware() throws Exception {\n                 .endKafka()\n             .endSpec().done();\n \n+        Affinity kafkaPodSpecAffinity = kubeClient().getStatefulSet(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME)).getSpec().getTemplate().getSpec().getAffinity();\n+        NodeSelectorRequirement kafkaPodNodeSelectorRequirement = kafkaPodSpecAffinity.getNodeAffinity()\n+                .getRequiredDuringSchedulingIgnoredDuringExecution().getNodeSelectorTerms().get(0).getMatchExpressions().get(0);\n+\n+        assertThat(kafkaPodNodeSelectorRequirement.getKey(), is(rackKey));\n+        assertThat(kafkaPodNodeSelectorRequirement.getOperator(), is(\"Exists\"));\n+\n+        PodAffinityTerm kafkaPodAffinityTerm = kafkaPodSpecAffinity.getPodAntiAffinity().getPreferredDuringSchedulingIgnoredDuringExecution().get(0).getPodAffinityTerm();\n+\n+        assertThat(kafkaPodAffinityTerm.getTopologyKey(), is(rackKey));\n+        assertThat(kafkaPodAffinityTerm.getLabelSelector().getMatchLabels(), hasEntry(\"strimzi.io/cluster\", CLUSTER_NAME));\n+        assertThat(kafkaPodAffinityTerm.getLabelSelector().getMatchLabels(), hasEntry(\"strimzi.io/name\", KafkaResources.kafkaStatefulSetName(CLUSTER_NAME)));\n+\n         String rackId = cmdKubeClient().execInPod(KafkaResources.kafkaPodName(CLUSTER_NAME, 0), \"/bin/bash\", \"-c\", \"cat /opt/kafka/init/rack.id\").out();\n         assertThat(rackId.trim(), is(\"zone\"));\n \n-        String brokerRack = cmdKubeClient().execInPod(KafkaResources.kafkaPodName(CLUSTER_NAME, 0), \"/bin/bash\", \"-c\", \"cat /tmp/strimzi.properties | grep broker.rack\").out();\n-        assertThat(brokerRack.contains(\"broker.rack=zone\"), is(true));\n+        String brokerRack = cmdKubeClient().execInPod(KafkaResources.kafkaPodName(CLUSTER_NAME, 0), \"/bin/bash\", \"-c\", \"cat /tmp/strimzi.properties | grep rack.id\").out();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1NDUyNw=="}, "originalCommit": {"oid": "9445281a38d466edb0d8dd3430a3be20c7bba719"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 442, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}