{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1ODE2Mzgw", "number": 2763, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDo0MjoxMlrODtDIpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDo0Mzo1OFrODtDLGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTYzODc2OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDo0MjoxMlrOF-PvHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMzo0Njo1MVrOF-WmmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgxMzg1NA==", "bodyText": "This is already part of default check for user creation.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2763#discussion_r400813854", "createdAt": "2020-03-31T10:42:12Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java", "diffHunk": "@@ -157,43 +140,38 @@ void testKafkaConnectWithFileSinkPlugin() throws Exception {\n \n         KafkaConnectUtils.createFileSinkConnector(kafkaClientsPodName, CONNECT_TOPIC_NAME, Constants.DEFAULT_SINK_FILE_PATH, KafkaConnectResources.url(CLUSTER_NAME, NAMESPACE, 8083));\n \n-        Future<Integer> producer = externalBasicKafkaClient.sendMessages(CONNECT_TOPIC_NAME, NAMESPACE, CLUSTER_NAME, MESSAGE_COUNT);\n-        Future<Integer> consumer = externalBasicKafkaClient.receiveMessages(CONNECT_TOPIC_NAME, NAMESPACE, CLUSTER_NAME, MESSAGE_COUNT);\n+        internalKafkaClient.setPodName(kafkaClientsPodName);\n \n-        assertThat(producer.get(2, TimeUnit.MINUTES), is(MESSAGE_COUNT));\n-        assertThat(consumer.get(2, TimeUnit.MINUTES), is(MESSAGE_COUNT));\n+        internalKafkaClient.checkProducedAndConsumedMessages(\n+                internalKafkaClient.sendMessages(CONNECT_TOPIC_NAME, NAMESPACE, CLUSTER_NAME, MESSAGE_COUNT),\n+                internalKafkaClient.receiveMessages(CONNECT_TOPIC_NAME, NAMESPACE, CLUSTER_NAME, MESSAGE_COUNT, CONSUMER_GROUP_NAME + rng.nextInt(Integer.MAX_VALUE))\n+        );\n \n-        KafkaConnectUtils.waitForMessagesInKafkaConnectFileSink(kafkaConnectPodName, Constants.DEFAULT_SINK_FILE_PATH);\n+        KafkaConnectUtils.waitForMessagesInKafkaConnectFileSink(kafkaConnectPodName, Constants.DEFAULT_SINK_FILE_PATH, \"99\");\n \n         LOGGER.info(\"Deleting topic {} from CR\", CONNECT_TOPIC_NAME);\n         cmdKubeClient().deleteByName(\"kafkatopic\", CONNECT_TOPIC_NAME);\n         KafkaTopicUtils.waitForKafkaTopicDeletion(CONNECT_TOPIC_NAME);\n     }\n \n     @Test\n-    @Tag(NODEPORT_SUPPORTED)\n-    @Tag(EXTERNAL_CLIENTS_USED)\n-    void testKafkaConnectWithPlainAndScramShaAuthentication() throws InterruptedException, ExecutionException, TimeoutException, IOException {\n+    @Tag(INTERNAL_CLIENTS_USED)\n+    void testKafkaConnectWithPlainAndScramShaAuthentication() throws InterruptedException {\n         // Use a Kafka with plain listener disabled\n         KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3)\n                 .editSpec()\n                     .editKafka()\n                         .withNewListeners()\n                             .withNewPlain()\n-                                .withNewKafkaListenerAuthenticationScramSha512Auth()\n-                                .endKafkaListenerAuthenticationScramSha512Auth()\n+                                .withAuth(new KafkaListenerAuthenticationScramSha512())\n                             .endPlain()\n-                            .withNewKafkaListenerExternalNodePort()\n-                                .withNewKafkaListenerAuthenticationScramSha512Auth()\n-                                .endKafkaListenerAuthenticationScramSha512Auth()\n-                            .endKafkaListenerExternalNodePort()\n                         .endListeners()\n                     .endKafka()\n                 .endSpec()\n                 .done();\n \n-        KafkaUserResource.scramShaUser(CLUSTER_NAME, USER_NAME).done();\n-        KafkaUserUtils.waitForKafkaUserCreation(USER_NAME);\n+        KafkaUser kafkaUser = KafkaUserResource.scramShaUser(CLUSTER_NAME, USER_NAME).done();\n+        SecretUtils.waitForSecretReady(USER_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceef5724ccde7d8b5e24186a3170cd8548cd22d1"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDkyNjM2MA==", "bodyText": "my bad :)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2763#discussion_r400926360", "createdAt": "2020-03-31T13:46:51Z", "author": {"login": "im-konge"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java", "diffHunk": "@@ -157,43 +140,38 @@ void testKafkaConnectWithFileSinkPlugin() throws Exception {\n \n         KafkaConnectUtils.createFileSinkConnector(kafkaClientsPodName, CONNECT_TOPIC_NAME, Constants.DEFAULT_SINK_FILE_PATH, KafkaConnectResources.url(CLUSTER_NAME, NAMESPACE, 8083));\n \n-        Future<Integer> producer = externalBasicKafkaClient.sendMessages(CONNECT_TOPIC_NAME, NAMESPACE, CLUSTER_NAME, MESSAGE_COUNT);\n-        Future<Integer> consumer = externalBasicKafkaClient.receiveMessages(CONNECT_TOPIC_NAME, NAMESPACE, CLUSTER_NAME, MESSAGE_COUNT);\n+        internalKafkaClient.setPodName(kafkaClientsPodName);\n \n-        assertThat(producer.get(2, TimeUnit.MINUTES), is(MESSAGE_COUNT));\n-        assertThat(consumer.get(2, TimeUnit.MINUTES), is(MESSAGE_COUNT));\n+        internalKafkaClient.checkProducedAndConsumedMessages(\n+                internalKafkaClient.sendMessages(CONNECT_TOPIC_NAME, NAMESPACE, CLUSTER_NAME, MESSAGE_COUNT),\n+                internalKafkaClient.receiveMessages(CONNECT_TOPIC_NAME, NAMESPACE, CLUSTER_NAME, MESSAGE_COUNT, CONSUMER_GROUP_NAME + rng.nextInt(Integer.MAX_VALUE))\n+        );\n \n-        KafkaConnectUtils.waitForMessagesInKafkaConnectFileSink(kafkaConnectPodName, Constants.DEFAULT_SINK_FILE_PATH);\n+        KafkaConnectUtils.waitForMessagesInKafkaConnectFileSink(kafkaConnectPodName, Constants.DEFAULT_SINK_FILE_PATH, \"99\");\n \n         LOGGER.info(\"Deleting topic {} from CR\", CONNECT_TOPIC_NAME);\n         cmdKubeClient().deleteByName(\"kafkatopic\", CONNECT_TOPIC_NAME);\n         KafkaTopicUtils.waitForKafkaTopicDeletion(CONNECT_TOPIC_NAME);\n     }\n \n     @Test\n-    @Tag(NODEPORT_SUPPORTED)\n-    @Tag(EXTERNAL_CLIENTS_USED)\n-    void testKafkaConnectWithPlainAndScramShaAuthentication() throws InterruptedException, ExecutionException, TimeoutException, IOException {\n+    @Tag(INTERNAL_CLIENTS_USED)\n+    void testKafkaConnectWithPlainAndScramShaAuthentication() throws InterruptedException {\n         // Use a Kafka with plain listener disabled\n         KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3)\n                 .editSpec()\n                     .editKafka()\n                         .withNewListeners()\n                             .withNewPlain()\n-                                .withNewKafkaListenerAuthenticationScramSha512Auth()\n-                                .endKafkaListenerAuthenticationScramSha512Auth()\n+                                .withAuth(new KafkaListenerAuthenticationScramSha512())\n                             .endPlain()\n-                            .withNewKafkaListenerExternalNodePort()\n-                                .withNewKafkaListenerAuthenticationScramSha512Auth()\n-                                .endKafkaListenerAuthenticationScramSha512Auth()\n-                            .endKafkaListenerExternalNodePort()\n                         .endListeners()\n                     .endKafka()\n                 .endSpec()\n                 .done();\n \n-        KafkaUserResource.scramShaUser(CLUSTER_NAME, USER_NAME).done();\n-        KafkaUserUtils.waitForKafkaUserCreation(USER_NAME);\n+        KafkaUser kafkaUser = KafkaUserResource.scramShaUser(CLUSTER_NAME, USER_NAME).done();\n+        SecretUtils.waitForSecretReady(USER_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgxMzg1NA=="}, "originalCommit": {"oid": "ceef5724ccde7d8b5e24186a3170cd8548cd22d1"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTY0MTA1OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDo0Mjo0N1rOF-PwYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMzo0MjozOFrOF-WagQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgxNDE3Nw==", "bodyText": "Missing internal_clients tag", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2763#discussion_r400814177", "createdAt": "2020-03-31T10:42:47Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java", "diffHunk": "@@ -245,21 +229,9 @@ void testKafkaConnectWithPlainAndScramShaAuthentication() throws InterruptedExce\n \n     @Test\n     @Tag(ACCEPTANCE)\n-    @Tag(NODEPORT_SUPPORTED)\n     @Tag(CONNECTOR_OPERATOR)\n-    @Tag(EXTERNAL_CLIENTS_USED)\n-    void testKafkaConnectAndConnectorFileSinkPlugin() throws Exception {\n-        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3)\n-                .editSpec()\n-                    .editKafka()\n-                    .editListeners()\n-                        .withNewKafkaListenerExternalNodePort()\n-                            .withTls(false)\n-                        .endKafkaListenerExternalNodePort()\n-                    .endListeners()\n-                    .endKafka()\n-                .endSpec()\n-                .done();\n+    void testKafkaConnectAndConnectorFileSinkPlugin() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceef5724ccde7d8b5e24186a3170cd8548cd22d1"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDkyMzI2NQ==", "bodyText": "yep my bad", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2763#discussion_r400923265", "createdAt": "2020-03-31T13:42:38Z", "author": {"login": "im-konge"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java", "diffHunk": "@@ -245,21 +229,9 @@ void testKafkaConnectWithPlainAndScramShaAuthentication() throws InterruptedExce\n \n     @Test\n     @Tag(ACCEPTANCE)\n-    @Tag(NODEPORT_SUPPORTED)\n     @Tag(CONNECTOR_OPERATOR)\n-    @Tag(EXTERNAL_CLIENTS_USED)\n-    void testKafkaConnectAndConnectorFileSinkPlugin() throws Exception {\n-        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3)\n-                .editSpec()\n-                    .editKafka()\n-                    .editListeners()\n-                        .withNewKafkaListenerExternalNodePort()\n-                            .withTls(false)\n-                        .endKafkaListenerExternalNodePort()\n-                    .endListeners()\n-                    .endKafka()\n-                .endSpec()\n-                .done();\n+    void testKafkaConnectAndConnectorFileSinkPlugin() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgxNDE3Nw=="}, "originalCommit": {"oid": "ceef5724ccde7d8b5e24186a3170cd8548cd22d1"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTY0NTA0OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/UserST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDo0Mzo1OFrOF-PytA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDo0Mzo1OFrOF-PytA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgxNDc3Mg==", "bodyText": "I think you can now remove some NODEPORT_SUPPORTED tags fromUserST", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2763#discussion_r400814772", "createdAt": "2020-03-31T10:43:58Z", "author": {"login": "Frawless"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/UserST.java", "diffHunk": "@@ -201,15 +201,7 @@ void createBigAmountOfUsers(String typeOfUser) {\n     }\n \n     private void deployTestSpecificResources() {\n-        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 1, 1)\n-            .editSpec()\n-                .editKafka()\n-                    .editListeners()\n-                        .withNewKafkaListenerExternalNodePort()\n-                        .endKafkaListenerExternalNodePort()\n-                    .endListeners()\n-                .endKafka()\n-            .endSpec().done();\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 1, 1).done();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceef5724ccde7d8b5e24186a3170cd8548cd22d1"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 373, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}