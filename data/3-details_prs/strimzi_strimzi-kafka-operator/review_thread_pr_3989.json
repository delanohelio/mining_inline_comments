{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0Nzg5MDk4", "number": 3989, "reviewThreads": {"totalCount": 231, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODozNTo0MVrOE950aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMToyMDowMFrOFC3vRg==", "hasNextPage": false, "hasPreviousPage": true}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzQ1ODk2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODozNTo0MVrOH61PiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODozNTo0MVrOH61PiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1MTc4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n          \n          \n            \n            Here we assume that the Strimzi Cluster Operator has already been installed on the Kubernetes cluster.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531451785", "createdAt": "2020-11-27T08:35:41Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,462 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16582f6c776ff4ccd240537a7873a8aae60cbda8"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzY0MDgzOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOToyOTowM1rOH62-nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDoxNzo1OVrOH64p_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4MDIyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n          \n          \n            \n            Use your browser to connect to `\\http://localhost:8080/auth/admin` and use `admin` as username and password.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531480223", "createdAt": "2020-11-27T09:29:03Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,462 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16582f6c776ff4ccd240537a7873a8aae60cbda8"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUwNzcxMQ==", "bodyText": "I suppose this backslash becomes invisible when rendered but prevents some unwanted rendering that would otherwise occur?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531507711", "createdAt": "2020-11-27T10:17:59Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,462 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4MDIyMw=="}, "originalCommit": {"oid": "16582f6c776ff4ccd240537a7873a8aae60cbda8"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzY0Mjg3OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOToyOTozNFrOH62_2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOToyOTozNFrOH62_2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4MDUzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Initially the *Realm Settings* section is selected, but you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n          \n          \n            \n            Initially, the *Realm Settings* section is selected, but you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531480537", "createdAt": "2020-11-27T09:29:34Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,462 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+The default view usually displays the *Master* realm.\n+For this example we are interested in the `kafka-authz` realm, which you can select in the upper left corner.\n+\n+Initially the *Realm Settings* section is selected, but you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16582f6c776ff4ccd240537a7873a8aae60cbda8"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzY0NDE4OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOToyOTo1OFrOH63Apw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOToyOTo1OFrOH63Apw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4MDc0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n          \n          \n            \n            We login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531480743", "createdAt": "2020-11-27T09:29:58Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,462 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16582f6c776ff4ccd240537a7873a8aae60cbda8"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzY0NTg3OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTozMDoyNFrOH63Bpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTozMDoyNFrOH63Bpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4MDk5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n          \n          \n            \n            Then we use a browser to connect to `http://localhost:8080/auth/admin` using `admin` as username and password.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531480998", "createdAt": "2020-11-27T09:30:24Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,462 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16582f6c776ff4ccd240537a7873a8aae60cbda8"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzY0NzgyOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTozMDo1OVrOH63Cxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTozMDo1OVrOH63Cxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4MTI4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In Keycloak the groups can be stored in an LDAP identity provider.\n          \n          \n            \n            In Keycloak, groups can be stored in an LDAP identity provider.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531481287", "createdAt": "2020-11-27T09:30:59Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,462 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+The default view usually displays the *Master* realm.\n+For this example we are interested in the `kafka-authz` realm, which you can select in the upper left corner.\n+\n+Initially the *Realm Settings* section is selected, but you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16582f6c776ff4ccd240537a7873a8aae60cbda8"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzY1NDU1OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTozMzowMlrOH63G_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTozMzowMlrOH63G_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4MjM2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n          \n          \n            \n            Under *Users*, you can view all defined users. For this example, `alice` and `bob` are defined. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531482365", "createdAt": "2020-11-27T09:33:02Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,462 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+The default view usually displays the *Master* realm.\n+For this example we are interested in the `kafka-authz` realm, which you can select in the upper left corner.\n+\n+Initially the *Realm Settings* section is selected, but you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16582f6c776ff4ccd240537a7873a8aae60cbda8"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzY1NjMyOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTozMzozNlrOH63IEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTozMzozNlrOH63IEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4MjY0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In Keycloak the users can be stored in an LDAP identity provider.\n          \n          \n            \n            In Keycloak, users can be stored in an LDAP identity provider.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531482641", "createdAt": "2020-11-27T09:33:36Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,462 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+The default view usually displays the *Master* realm.\n+For this example we are interested in the `kafka-authz` realm, which you can select in the upper left corner.\n+\n+Initially the *Realm Settings* section is selected, but you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16582f6c776ff4ccd240537a7873a8aae60cbda8"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzY2MjIzOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTozNToxMFrOH63Lig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTozNToxMFrOH63Lig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4MzUzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n          \n          \n            \n            Under *Clients*, you can view the additional client configurations. For this eaxmple,  `kafka`, `kafka-cli`, `team-a-client`, `team-b-client` are configured.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531483530", "createdAt": "2020-11-27T09:35:10Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,462 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+The default view usually displays the *Master* realm.\n+For this example we are interested in the `kafka-authz` realm, which you can select in the upper left corner.\n+\n+Initially the *Realm Settings* section is selected, but you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16582f6c776ff4ccd240537a7873a8aae60cbda8"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzY2OTg4OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTozNzowOFrOH63P3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTozNzowOFrOH63P3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4NDYzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources as explained in xref:keycloak_authorization_services_model_for_managing_permissions(one of the previous chapters).\n          \n          \n            \n            Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources, as explained in xref:keycloak_authorization_services_model_for_managing_permissions[Keycloak Authorization Services model for managing permissions].", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531484639", "createdAt": "2020-11-27T09:37:08Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,462 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+The default view usually displays the *Master* realm.\n+For this example we are interested in the `kafka-authz` realm, which you can select in the upper left corner.\n+\n+Initially the *Realm Settings* section is selected, but you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources as explained in xref:keycloak_authorization_services_model_for_managing_permissions(one of the previous chapters).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16582f6c776ff4ccd240537a7873a8aae60cbda8"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzcxNzk5OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTo1MDowN1rOH63siQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTo1MDowN1rOH63siQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ5MTk3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Under *Authorization* / *Permissions* of `kafka` client you can see already granted permissions that make use of *Resources* and *Policies* defined under the other tabs:\n          \n          \n            \n            From *Authorization* / *Permissions* you can see the granted permissions that use resources and policies defined from other *Resources* and *Policies* tabs. For example, the `kafka` client has the following permissions:", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531491977", "createdAt": "2020-11-27T09:50:07Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,462 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+The default view usually displays the *Master* realm.\n+For this example we are interested in the `kafka-authz` realm, which you can select in the upper left corner.\n+\n+Initially the *Realm Settings* section is selected, but you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources as explained in xref:keycloak_authorization_services_model_for_managing_permissions(one of the previous chapters).\n+\n+Under *Authorization* / *Permissions* of `kafka` client you can see already granted permissions that make use of *Resources* and *Policies* defined under the other tabs:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16582f6c776ff4ccd240537a7873a8aae60cbda8"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzcyNTE1OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTo1MjowMVrOH63wwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTo1MjowMVrOH63wwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ5MzA1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            == Authorization in Action Using CLI Clients\n          \n          \n            \n            == Authorization in action using CLI clients", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531493058", "createdAt": "2020-11-27T09:52:01Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,462 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+The default view usually displays the *Master* realm.\n+For this example we are interested in the `kafka-authz` realm, which you can select in the upper left corner.\n+\n+Initially the *Realm Settings* section is selected, but you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources as explained in xref:keycloak_authorization_services_model_for_managing_permissions(one of the previous chapters).\n+\n+Under *Authorization* / *Permissions* of `kafka` client you can see already granted permissions that make use of *Resources* and *Policies* defined under the other tabs:\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+`Dev Team A can write to topics that start with x_ on any cluster` combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team A`.\n+\n+`Dev Team B can read from topics that start with x_ on any cluster` combines `Topic:x_*`, and `Group:x_*` resources, scopes `Describe` and `Read`, and `Dev Team B` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team B`. Matching users and clients have the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with `x_`.\n+\n+== Targeting permissions using group or role policies\n+\n+In Keycloak, confidential clients with service accounts enabled can authenticate to the server in their own name using a client ID and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use group policies, and should instead use role policies.\n+Conversely, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the group policies, rather than the role policies.\n+That is what is used for permissions that start with `ClusterManager`.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case, the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16582f6c776ff4ccd240537a7873a8aae60cbda8"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzczNDE2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTo1NDozMVrOH632RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTo1NDozMVrOH632RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ5NDQ2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `team-a-client` configuration is then used to produce messages to topic `a_messages`.\n          \n          \n            \n            The `team-a-client` configuration is then used to produce messages to topic `a_messages`:", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531494469", "createdAt": "2020-11-27T09:54:31Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,462 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+The default view usually displays the *Master* realm.\n+For this example we are interested in the `kafka-authz` realm, which you can select in the upper left corner.\n+\n+Initially the *Realm Settings* section is selected, but you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources as explained in xref:keycloak_authorization_services_model_for_managing_permissions(one of the previous chapters).\n+\n+Under *Authorization* / *Permissions* of `kafka` client you can see already granted permissions that make use of *Resources* and *Policies* defined under the other tabs:\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+`Dev Team A can write to topics that start with x_ on any cluster` combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team A`.\n+\n+`Dev Team B can read from topics that start with x_ on any cluster` combines `Topic:x_*`, and `Group:x_*` resources, scopes `Describe` and `Read`, and `Dev Team B` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team B`. Matching users and clients have the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with `x_`.\n+\n+== Targeting permissions using group or role policies\n+\n+In Keycloak, confidential clients with service accounts enabled can authenticate to the server in their own name using a client ID and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use group policies, and should instead use role policies.\n+Conversely, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the group policies, rather than the role policies.\n+That is what is used for permissions that start with `ClusterManager`.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case, the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+From menu:Clients[kafka>Authorization>Settings] make sure that *Decision Strategy* is set to *Affirmative*, and NOT to *Unanimous*.\n+Navigate in Keycloak to check that the expected resources, authorization claims, policies and permissions are defined.\n+\n+With the configuration in place, we can check access to Kafka by using a producer and consumer to create topics using different user and service accounts.\n+\n+First, a new interactive pod container is run using a Strimzi Kafka image to connect to a running Kafka broker.\n+\n+[source,shell]\n+----\n+kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+----\n+\n+NOTE: If `kubectl` times out waiting on the image download, subsequent attempts may result in an _AlreadyExists_ error. \n+\n+You can attach to the existing pod by running:\n+\n+[source,shell]\n+----\n+kubectl attach -ti kafka-cli\n+----\n+\n+To produce messages as client `team-a-client`, we prepare a Kafka client configuration file with authentication parameters.\n+\n+[source,shell]\n+----\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+----\n+\n+The roles assigned to a client, such as the `Dev Team A` realm role assigned to the `team-a-client` service account, are presented in Keycloak on the  *Service Account Roles* tab from *Clients*.\n+\n+We can use this configuration from the Kafka CLI to produce and consume messages, and perform other administration tasks.\n+\n+\n+.Producing messages with authorized access\n+\n+The `team-a-client` configuration is used to produce messages to topic `my-topic`:\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+----\n+\n+A `Not authorized to access topics: [my-topic]` error is returned when trying to push the first message.\n+\n+`team-a-client` has a `Dev Team A` role that gives it permission to perform any supported actions on topics that start with `a_`, but can only write to topics that start with `x_`.\n+The topic named `my-topic` matches neither of those rules.\n+\n+The `team-a-client` configuration is then used to produce messages to topic `a_messages`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16582f6c776ff4ccd240537a7873a8aae60cbda8"}, "originalPosition": 202}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzczOTI2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTo1NTo0NVrOH635SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTo1NTo0NVrOH635SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ5NTI0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            . Using clients with different permissions\n          \n          \n            \n            .Using clients with different permissions", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531495241", "createdAt": "2020-11-27T09:55:45Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,462 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+The default view usually displays the *Master* realm.\n+For this example we are interested in the `kafka-authz` realm, which you can select in the upper left corner.\n+\n+Initially the *Realm Settings* section is selected, but you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources as explained in xref:keycloak_authorization_services_model_for_managing_permissions(one of the previous chapters).\n+\n+Under *Authorization* / *Permissions* of `kafka` client you can see already granted permissions that make use of *Resources* and *Policies* defined under the other tabs:\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+`Dev Team A can write to topics that start with x_ on any cluster` combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team A`.\n+\n+`Dev Team B can read from topics that start with x_ on any cluster` combines `Topic:x_*`, and `Group:x_*` resources, scopes `Describe` and `Read`, and `Dev Team B` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team B`. Matching users and clients have the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with `x_`.\n+\n+== Targeting permissions using group or role policies\n+\n+In Keycloak, confidential clients with service accounts enabled can authenticate to the server in their own name using a client ID and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use group policies, and should instead use role policies.\n+Conversely, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the group policies, rather than the role policies.\n+That is what is used for permissions that start with `ClusterManager`.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case, the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+From menu:Clients[kafka>Authorization>Settings] make sure that *Decision Strategy* is set to *Affirmative*, and NOT to *Unanimous*.\n+Navigate in Keycloak to check that the expected resources, authorization claims, policies and permissions are defined.\n+\n+With the configuration in place, we can check access to Kafka by using a producer and consumer to create topics using different user and service accounts.\n+\n+First, a new interactive pod container is run using a Strimzi Kafka image to connect to a running Kafka broker.\n+\n+[source,shell]\n+----\n+kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+----\n+\n+NOTE: If `kubectl` times out waiting on the image download, subsequent attempts may result in an _AlreadyExists_ error. \n+\n+You can attach to the existing pod by running:\n+\n+[source,shell]\n+----\n+kubectl attach -ti kafka-cli\n+----\n+\n+To produce messages as client `team-a-client`, we prepare a Kafka client configuration file with authentication parameters.\n+\n+[source,shell]\n+----\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+----\n+\n+The roles assigned to a client, such as the `Dev Team A` realm role assigned to the `team-a-client` service account, are presented in Keycloak on the  *Service Account Roles* tab from *Clients*.\n+\n+We can use this configuration from the Kafka CLI to produce and consume messages, and perform other administration tasks.\n+\n+\n+.Producing messages with authorized access\n+\n+The `team-a-client` configuration is used to produce messages to topic `my-topic`:\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+----\n+\n+A `Not authorized to access topics: [my-topic]` error is returned when trying to push the first message.\n+\n+`team-a-client` has a `Dev Team A` role that gives it permission to perform any supported actions on topics that start with `a_`, but can only write to topics that start with `x_`.\n+The topic named `my-topic` matches neither of those rules.\n+\n+The `team-a-client` configuration is then used to produce messages to topic `a_messages`.\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+----\n+\n+The messages are pushed out successfully, and in the Kafka container log there is DEBUG level output saying `Authorization GRANTED`.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+[source,shell]\n+kubectl logs my-cluster-kafka-0 -f\n+\n+.Consuming messages with authorized access\n+\n+The `team-a-client` configuration is used to consume messages from topic `a_messages`:\n+\n+[source,shell,subs=+quotes]\n+----\n+bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --from-beginning --consumer.config /tmp/team-a-client.properties\n+----\n+\n+An error is returned as the `Dev Team A` role for `team-a-client` only has access to consumer groups that have names starting with `a_`.\n+The `team-a-client` configuration is then used to consume messages when specifying a custom consumer group with a name that starts with `a_`:\n+\n+[source,shell,subs=+quotes]\n+----\n+bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+----\n+\n+This time the consumer receives all the messages from the `a_messages` topic.\n+\n+\n+.Administering Kafka with authorized access\n+\n+The `team-a-client` configuration is used in administrative operations.\n+\n+Listing topics returns the `a_messages` topic.\n+\n+[source,shell]\n+----\n+bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+----    \n+\n+Listing consumer groups returns the `a_consumer_group_1` consumer group.\n+\n+[source,shell]\n+----\n+bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+----\n+\n+Fetching the default cluster configuration fails cluster authorization, because the operation requires cluster level permissions that `team-a-client` does not have.\n+\n+[source,shell]\n+----\n+bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+  --entity-type brokers --describe --entity-default\n+----\n+\n+\n+. Using clients with different permissions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16582f6c776ff4ccd240537a7873a8aae60cbda8"}, "originalPosition": 270}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzc0MTUzOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTo1NjoyNFrOH636wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTo1NjoyNFrOH636wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ5NTYxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Listing topics returns the `a_messages` topic.\n          \n          \n            \n            Listing topics returns the `a_messages` topic:", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531495618", "createdAt": "2020-11-27T09:56:24Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,462 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+The default view usually displays the *Master* realm.\n+For this example we are interested in the `kafka-authz` realm, which you can select in the upper left corner.\n+\n+Initially the *Realm Settings* section is selected, but you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources as explained in xref:keycloak_authorization_services_model_for_managing_permissions(one of the previous chapters).\n+\n+Under *Authorization* / *Permissions* of `kafka` client you can see already granted permissions that make use of *Resources* and *Policies* defined under the other tabs:\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+`Dev Team A can write to topics that start with x_ on any cluster` combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team A`.\n+\n+`Dev Team B can read from topics that start with x_ on any cluster` combines `Topic:x_*`, and `Group:x_*` resources, scopes `Describe` and `Read`, and `Dev Team B` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team B`. Matching users and clients have the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with `x_`.\n+\n+== Targeting permissions using group or role policies\n+\n+In Keycloak, confidential clients with service accounts enabled can authenticate to the server in their own name using a client ID and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use group policies, and should instead use role policies.\n+Conversely, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the group policies, rather than the role policies.\n+That is what is used for permissions that start with `ClusterManager`.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case, the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+From menu:Clients[kafka>Authorization>Settings] make sure that *Decision Strategy* is set to *Affirmative*, and NOT to *Unanimous*.\n+Navigate in Keycloak to check that the expected resources, authorization claims, policies and permissions are defined.\n+\n+With the configuration in place, we can check access to Kafka by using a producer and consumer to create topics using different user and service accounts.\n+\n+First, a new interactive pod container is run using a Strimzi Kafka image to connect to a running Kafka broker.\n+\n+[source,shell]\n+----\n+kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+----\n+\n+NOTE: If `kubectl` times out waiting on the image download, subsequent attempts may result in an _AlreadyExists_ error. \n+\n+You can attach to the existing pod by running:\n+\n+[source,shell]\n+----\n+kubectl attach -ti kafka-cli\n+----\n+\n+To produce messages as client `team-a-client`, we prepare a Kafka client configuration file with authentication parameters.\n+\n+[source,shell]\n+----\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+----\n+\n+The roles assigned to a client, such as the `Dev Team A` realm role assigned to the `team-a-client` service account, are presented in Keycloak on the  *Service Account Roles* tab from *Clients*.\n+\n+We can use this configuration from the Kafka CLI to produce and consume messages, and perform other administration tasks.\n+\n+\n+.Producing messages with authorized access\n+\n+The `team-a-client` configuration is used to produce messages to topic `my-topic`:\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+----\n+\n+A `Not authorized to access topics: [my-topic]` error is returned when trying to push the first message.\n+\n+`team-a-client` has a `Dev Team A` role that gives it permission to perform any supported actions on topics that start with `a_`, but can only write to topics that start with `x_`.\n+The topic named `my-topic` matches neither of those rules.\n+\n+The `team-a-client` configuration is then used to produce messages to topic `a_messages`.\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+----\n+\n+The messages are pushed out successfully, and in the Kafka container log there is DEBUG level output saying `Authorization GRANTED`.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+[source,shell]\n+kubectl logs my-cluster-kafka-0 -f\n+\n+.Consuming messages with authorized access\n+\n+The `team-a-client` configuration is used to consume messages from topic `a_messages`:\n+\n+[source,shell,subs=+quotes]\n+----\n+bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --from-beginning --consumer.config /tmp/team-a-client.properties\n+----\n+\n+An error is returned as the `Dev Team A` role for `team-a-client` only has access to consumer groups that have names starting with `a_`.\n+The `team-a-client` configuration is then used to consume messages when specifying a custom consumer group with a name that starts with `a_`:\n+\n+[source,shell,subs=+quotes]\n+----\n+bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+----\n+\n+This time the consumer receives all the messages from the `a_messages` topic.\n+\n+\n+.Administering Kafka with authorized access\n+\n+The `team-a-client` configuration is used in administrative operations.\n+\n+Listing topics returns the `a_messages` topic.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16582f6c776ff4ccd240537a7873a8aae60cbda8"}, "originalPosition": 247}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzc0MjE1OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTo1NjozNFrOH637JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTo1NjozNFrOH637JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ5NTcxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Listing consumer groups returns the `a_consumer_group_1` consumer group.\n          \n          \n            \n            Listing consumer groups returns the `a_consumer_group_1` consumer group:", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531495716", "createdAt": "2020-11-27T09:56:34Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,462 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+The default view usually displays the *Master* realm.\n+For this example we are interested in the `kafka-authz` realm, which you can select in the upper left corner.\n+\n+Initially the *Realm Settings* section is selected, but you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources as explained in xref:keycloak_authorization_services_model_for_managing_permissions(one of the previous chapters).\n+\n+Under *Authorization* / *Permissions* of `kafka` client you can see already granted permissions that make use of *Resources* and *Policies* defined under the other tabs:\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+`Dev Team A can write to topics that start with x_ on any cluster` combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team A`.\n+\n+`Dev Team B can read from topics that start with x_ on any cluster` combines `Topic:x_*`, and `Group:x_*` resources, scopes `Describe` and `Read`, and `Dev Team B` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team B`. Matching users and clients have the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with `x_`.\n+\n+== Targeting permissions using group or role policies\n+\n+In Keycloak, confidential clients with service accounts enabled can authenticate to the server in their own name using a client ID and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use group policies, and should instead use role policies.\n+Conversely, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the group policies, rather than the role policies.\n+That is what is used for permissions that start with `ClusterManager`.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case, the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+From menu:Clients[kafka>Authorization>Settings] make sure that *Decision Strategy* is set to *Affirmative*, and NOT to *Unanimous*.\n+Navigate in Keycloak to check that the expected resources, authorization claims, policies and permissions are defined.\n+\n+With the configuration in place, we can check access to Kafka by using a producer and consumer to create topics using different user and service accounts.\n+\n+First, a new interactive pod container is run using a Strimzi Kafka image to connect to a running Kafka broker.\n+\n+[source,shell]\n+----\n+kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+----\n+\n+NOTE: If `kubectl` times out waiting on the image download, subsequent attempts may result in an _AlreadyExists_ error. \n+\n+You can attach to the existing pod by running:\n+\n+[source,shell]\n+----\n+kubectl attach -ti kafka-cli\n+----\n+\n+To produce messages as client `team-a-client`, we prepare a Kafka client configuration file with authentication parameters.\n+\n+[source,shell]\n+----\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+----\n+\n+The roles assigned to a client, such as the `Dev Team A` realm role assigned to the `team-a-client` service account, are presented in Keycloak on the  *Service Account Roles* tab from *Clients*.\n+\n+We can use this configuration from the Kafka CLI to produce and consume messages, and perform other administration tasks.\n+\n+\n+.Producing messages with authorized access\n+\n+The `team-a-client` configuration is used to produce messages to topic `my-topic`:\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+----\n+\n+A `Not authorized to access topics: [my-topic]` error is returned when trying to push the first message.\n+\n+`team-a-client` has a `Dev Team A` role that gives it permission to perform any supported actions on topics that start with `a_`, but can only write to topics that start with `x_`.\n+The topic named `my-topic` matches neither of those rules.\n+\n+The `team-a-client` configuration is then used to produce messages to topic `a_messages`.\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+----\n+\n+The messages are pushed out successfully, and in the Kafka container log there is DEBUG level output saying `Authorization GRANTED`.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+[source,shell]\n+kubectl logs my-cluster-kafka-0 -f\n+\n+.Consuming messages with authorized access\n+\n+The `team-a-client` configuration is used to consume messages from topic `a_messages`:\n+\n+[source,shell,subs=+quotes]\n+----\n+bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --from-beginning --consumer.config /tmp/team-a-client.properties\n+----\n+\n+An error is returned as the `Dev Team A` role for `team-a-client` only has access to consumer groups that have names starting with `a_`.\n+The `team-a-client` configuration is then used to consume messages when specifying a custom consumer group with a name that starts with `a_`:\n+\n+[source,shell,subs=+quotes]\n+----\n+bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+----\n+\n+This time the consumer receives all the messages from the `a_messages` topic.\n+\n+\n+.Administering Kafka with authorized access\n+\n+The `team-a-client` configuration is used in administrative operations.\n+\n+Listing topics returns the `a_messages` topic.\n+\n+[source,shell]\n+----\n+bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+----    \n+\n+Listing consumer groups returns the `a_consumer_group_1` consumer group.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16582f6c776ff4ccd240537a7873a8aae60cbda8"}, "originalPosition": 254}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzc0NDIxOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTo1NzowNFrOH638SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTo1NzowNFrOH638SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ5NjAwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Fetching the default cluster configuration fails cluster authorization, because the operation requires cluster level permissions that `team-a-client` does not have.\n          \n          \n            \n            Fetching the default cluster configuration fails cluster authorization, because the operation requires cluster level permissions that `team-a-client` does not have:", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531496008", "createdAt": "2020-11-27T09:57:04Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,462 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+The default view usually displays the *Master* realm.\n+For this example we are interested in the `kafka-authz` realm, which you can select in the upper left corner.\n+\n+Initially the *Realm Settings* section is selected, but you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources as explained in xref:keycloak_authorization_services_model_for_managing_permissions(one of the previous chapters).\n+\n+Under *Authorization* / *Permissions* of `kafka` client you can see already granted permissions that make use of *Resources* and *Policies* defined under the other tabs:\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+`Dev Team A can write to topics that start with x_ on any cluster` combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team A`.\n+\n+`Dev Team B can read from topics that start with x_ on any cluster` combines `Topic:x_*`, and `Group:x_*` resources, scopes `Describe` and `Read`, and `Dev Team B` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team B`. Matching users and clients have the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with `x_`.\n+\n+== Targeting permissions using group or role policies\n+\n+In Keycloak, confidential clients with service accounts enabled can authenticate to the server in their own name using a client ID and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use group policies, and should instead use role policies.\n+Conversely, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the group policies, rather than the role policies.\n+That is what is used for permissions that start with `ClusterManager`.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case, the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+From menu:Clients[kafka>Authorization>Settings] make sure that *Decision Strategy* is set to *Affirmative*, and NOT to *Unanimous*.\n+Navigate in Keycloak to check that the expected resources, authorization claims, policies and permissions are defined.\n+\n+With the configuration in place, we can check access to Kafka by using a producer and consumer to create topics using different user and service accounts.\n+\n+First, a new interactive pod container is run using a Strimzi Kafka image to connect to a running Kafka broker.\n+\n+[source,shell]\n+----\n+kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+----\n+\n+NOTE: If `kubectl` times out waiting on the image download, subsequent attempts may result in an _AlreadyExists_ error. \n+\n+You can attach to the existing pod by running:\n+\n+[source,shell]\n+----\n+kubectl attach -ti kafka-cli\n+----\n+\n+To produce messages as client `team-a-client`, we prepare a Kafka client configuration file with authentication parameters.\n+\n+[source,shell]\n+----\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+----\n+\n+The roles assigned to a client, such as the `Dev Team A` realm role assigned to the `team-a-client` service account, are presented in Keycloak on the  *Service Account Roles* tab from *Clients*.\n+\n+We can use this configuration from the Kafka CLI to produce and consume messages, and perform other administration tasks.\n+\n+\n+.Producing messages with authorized access\n+\n+The `team-a-client` configuration is used to produce messages to topic `my-topic`:\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+----\n+\n+A `Not authorized to access topics: [my-topic]` error is returned when trying to push the first message.\n+\n+`team-a-client` has a `Dev Team A` role that gives it permission to perform any supported actions on topics that start with `a_`, but can only write to topics that start with `x_`.\n+The topic named `my-topic` matches neither of those rules.\n+\n+The `team-a-client` configuration is then used to produce messages to topic `a_messages`.\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+----\n+\n+The messages are pushed out successfully, and in the Kafka container log there is DEBUG level output saying `Authorization GRANTED`.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+[source,shell]\n+kubectl logs my-cluster-kafka-0 -f\n+\n+.Consuming messages with authorized access\n+\n+The `team-a-client` configuration is used to consume messages from topic `a_messages`:\n+\n+[source,shell,subs=+quotes]\n+----\n+bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --from-beginning --consumer.config /tmp/team-a-client.properties\n+----\n+\n+An error is returned as the `Dev Team A` role for `team-a-client` only has access to consumer groups that have names starting with `a_`.\n+The `team-a-client` configuration is then used to consume messages when specifying a custom consumer group with a name that starts with `a_`:\n+\n+[source,shell,subs=+quotes]\n+----\n+bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+----\n+\n+This time the consumer receives all the messages from the `a_messages` topic.\n+\n+\n+.Administering Kafka with authorized access\n+\n+The `team-a-client` configuration is used in administrative operations.\n+\n+Listing topics returns the `a_messages` topic.\n+\n+[source,shell]\n+----\n+bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+----    \n+\n+Listing consumer groups returns the `a_consumer_group_1` consumer group.\n+\n+[source,shell]\n+----\n+bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+----\n+\n+Fetching the default cluster configuration fails cluster authorization, because the operation requires cluster level permissions that `team-a-client` does not have.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16582f6c776ff4ccd240537a7873a8aae60cbda8"}, "originalPosition": 261}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzc0NjgzOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTo1Nzo0NVrOH6390w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTo1Nzo0NVrOH6390w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ5NjQwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            We switch again, but this time to topic that `team-b-client` can only read from, topic `x_messages`:\n          \n          \n            \n            We switch again, but this time to a topic that `team-b-client` can only read from, topic `x_messages`:", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531496403", "createdAt": "2020-11-27T09:57:45Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,462 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+The default view usually displays the *Master* realm.\n+For this example we are interested in the `kafka-authz` realm, which you can select in the upper left corner.\n+\n+Initially the *Realm Settings* section is selected, but you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources as explained in xref:keycloak_authorization_services_model_for_managing_permissions(one of the previous chapters).\n+\n+Under *Authorization* / *Permissions* of `kafka` client you can see already granted permissions that make use of *Resources* and *Policies* defined under the other tabs:\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+`Dev Team A can write to topics that start with x_ on any cluster` combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team A`.\n+\n+`Dev Team B can read from topics that start with x_ on any cluster` combines `Topic:x_*`, and `Group:x_*` resources, scopes `Describe` and `Read`, and `Dev Team B` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team B`. Matching users and clients have the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with `x_`.\n+\n+== Targeting permissions using group or role policies\n+\n+In Keycloak, confidential clients with service accounts enabled can authenticate to the server in their own name using a client ID and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use group policies, and should instead use role policies.\n+Conversely, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the group policies, rather than the role policies.\n+That is what is used for permissions that start with `ClusterManager`.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case, the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+From menu:Clients[kafka>Authorization>Settings] make sure that *Decision Strategy* is set to *Affirmative*, and NOT to *Unanimous*.\n+Navigate in Keycloak to check that the expected resources, authorization claims, policies and permissions are defined.\n+\n+With the configuration in place, we can check access to Kafka by using a producer and consumer to create topics using different user and service accounts.\n+\n+First, a new interactive pod container is run using a Strimzi Kafka image to connect to a running Kafka broker.\n+\n+[source,shell]\n+----\n+kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+----\n+\n+NOTE: If `kubectl` times out waiting on the image download, subsequent attempts may result in an _AlreadyExists_ error. \n+\n+You can attach to the existing pod by running:\n+\n+[source,shell]\n+----\n+kubectl attach -ti kafka-cli\n+----\n+\n+To produce messages as client `team-a-client`, we prepare a Kafka client configuration file with authentication parameters.\n+\n+[source,shell]\n+----\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+----\n+\n+The roles assigned to a client, such as the `Dev Team A` realm role assigned to the `team-a-client` service account, are presented in Keycloak on the  *Service Account Roles* tab from *Clients*.\n+\n+We can use this configuration from the Kafka CLI to produce and consume messages, and perform other administration tasks.\n+\n+\n+.Producing messages with authorized access\n+\n+The `team-a-client` configuration is used to produce messages to topic `my-topic`:\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+----\n+\n+A `Not authorized to access topics: [my-topic]` error is returned when trying to push the first message.\n+\n+`team-a-client` has a `Dev Team A` role that gives it permission to perform any supported actions on topics that start with `a_`, but can only write to topics that start with `x_`.\n+The topic named `my-topic` matches neither of those rules.\n+\n+The `team-a-client` configuration is then used to produce messages to topic `a_messages`.\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+----\n+\n+The messages are pushed out successfully, and in the Kafka container log there is DEBUG level output saying `Authorization GRANTED`.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+[source,shell]\n+kubectl logs my-cluster-kafka-0 -f\n+\n+.Consuming messages with authorized access\n+\n+The `team-a-client` configuration is used to consume messages from topic `a_messages`:\n+\n+[source,shell,subs=+quotes]\n+----\n+bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --from-beginning --consumer.config /tmp/team-a-client.properties\n+----\n+\n+An error is returned as the `Dev Team A` role for `team-a-client` only has access to consumer groups that have names starting with `a_`.\n+The `team-a-client` configuration is then used to consume messages when specifying a custom consumer group with a name that starts with `a_`:\n+\n+[source,shell,subs=+quotes]\n+----\n+bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+----\n+\n+This time the consumer receives all the messages from the `a_messages` topic.\n+\n+\n+.Administering Kafka with authorized access\n+\n+The `team-a-client` configuration is used in administrative operations.\n+\n+Listing topics returns the `a_messages` topic.\n+\n+[source,shell]\n+----\n+bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+----    \n+\n+Listing consumer groups returns the `a_consumer_group_1` consumer group.\n+\n+[source,shell]\n+----\n+bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+----\n+\n+Fetching the default cluster configuration fails cluster authorization, because the operation requires cluster level permissions that `team-a-client` does not have.\n+\n+[source,shell]\n+----\n+bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+  --entity-type brokers --describe --entity-default\n+----\n+\n+\n+. Using clients with different permissions\n+\n+As with `team-a-client`, we prepare a Kafka client configuration file with authentication parameters for `team-b-client`.\n+\n+[source,shell]\n+----\n+cat > /tmp/team-b-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-b-client\" \\\n+  oauth.client.secret=\"team-b-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+----\n+\n+The `team-b-client` client configuration includes a `Dev Team B` realm role and permissions that start with `Dev Team B ...`. These match the users and service accounts that have the `Dev Team B` realm role assigned to them.\n+The `Dev Team B` users have full access to topics beginning with `b_` on the Kafka cluster `my-cluster`, the name of the designated cluster, and read access on topics that start with `x_`.\n+\n+The `team-b-client` configuration is used to produce messages to topic `a_messages`:\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+----\n+\n+A `Not authorized to access topics: [a_messages]` error is returned when trying to push the first message, as expected, so we switch to topic `b_messages`:\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic b_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+Message 2\n+Message 3\n+----\n+\n+Producing messages to topic `b_messages` is authorized and successful.\n+\n+We switch again, but this time to topic that `team-b-client` can only read from, topic `x_messages`:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16582f6c776ff4ccd240537a7873a8aae60cbda8"}, "originalPosition": 312}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzc0OTI5OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTo1ODoyN1rOH63_Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTo1ODoyN1rOH63_Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ5Njc4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            User `bob` authenticates to the Keycloak server with his username and password to get a refresh token.\n          \n          \n            \n            User `bob` authenticates to the Keycloak server with his username and password to get a refresh token:", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531496783", "createdAt": "2020-11-27T09:58:27Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,462 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+The default view usually displays the *Master* realm.\n+For this example we are interested in the `kafka-authz` realm, which you can select in the upper left corner.\n+\n+Initially the *Realm Settings* section is selected, but you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources as explained in xref:keycloak_authorization_services_model_for_managing_permissions(one of the previous chapters).\n+\n+Under *Authorization* / *Permissions* of `kafka` client you can see already granted permissions that make use of *Resources* and *Policies* defined under the other tabs:\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+`Dev Team A can write to topics that start with x_ on any cluster` combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team A`.\n+\n+`Dev Team B can read from topics that start with x_ on any cluster` combines `Topic:x_*`, and `Group:x_*` resources, scopes `Describe` and `Read`, and `Dev Team B` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team B`. Matching users and clients have the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with `x_`.\n+\n+== Targeting permissions using group or role policies\n+\n+In Keycloak, confidential clients with service accounts enabled can authenticate to the server in their own name using a client ID and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use group policies, and should instead use role policies.\n+Conversely, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the group policies, rather than the role policies.\n+That is what is used for permissions that start with `ClusterManager`.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case, the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+From menu:Clients[kafka>Authorization>Settings] make sure that *Decision Strategy* is set to *Affirmative*, and NOT to *Unanimous*.\n+Navigate in Keycloak to check that the expected resources, authorization claims, policies and permissions are defined.\n+\n+With the configuration in place, we can check access to Kafka by using a producer and consumer to create topics using different user and service accounts.\n+\n+First, a new interactive pod container is run using a Strimzi Kafka image to connect to a running Kafka broker.\n+\n+[source,shell]\n+----\n+kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+----\n+\n+NOTE: If `kubectl` times out waiting on the image download, subsequent attempts may result in an _AlreadyExists_ error. \n+\n+You can attach to the existing pod by running:\n+\n+[source,shell]\n+----\n+kubectl attach -ti kafka-cli\n+----\n+\n+To produce messages as client `team-a-client`, we prepare a Kafka client configuration file with authentication parameters.\n+\n+[source,shell]\n+----\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+----\n+\n+The roles assigned to a client, such as the `Dev Team A` realm role assigned to the `team-a-client` service account, are presented in Keycloak on the  *Service Account Roles* tab from *Clients*.\n+\n+We can use this configuration from the Kafka CLI to produce and consume messages, and perform other administration tasks.\n+\n+\n+.Producing messages with authorized access\n+\n+The `team-a-client` configuration is used to produce messages to topic `my-topic`:\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+----\n+\n+A `Not authorized to access topics: [my-topic]` error is returned when trying to push the first message.\n+\n+`team-a-client` has a `Dev Team A` role that gives it permission to perform any supported actions on topics that start with `a_`, but can only write to topics that start with `x_`.\n+The topic named `my-topic` matches neither of those rules.\n+\n+The `team-a-client` configuration is then used to produce messages to topic `a_messages`.\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+----\n+\n+The messages are pushed out successfully, and in the Kafka container log there is DEBUG level output saying `Authorization GRANTED`.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+[source,shell]\n+kubectl logs my-cluster-kafka-0 -f\n+\n+.Consuming messages with authorized access\n+\n+The `team-a-client` configuration is used to consume messages from topic `a_messages`:\n+\n+[source,shell,subs=+quotes]\n+----\n+bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --from-beginning --consumer.config /tmp/team-a-client.properties\n+----\n+\n+An error is returned as the `Dev Team A` role for `team-a-client` only has access to consumer groups that have names starting with `a_`.\n+The `team-a-client` configuration is then used to consume messages when specifying a custom consumer group with a name that starts with `a_`:\n+\n+[source,shell,subs=+quotes]\n+----\n+bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+----\n+\n+This time the consumer receives all the messages from the `a_messages` topic.\n+\n+\n+.Administering Kafka with authorized access\n+\n+The `team-a-client` configuration is used in administrative operations.\n+\n+Listing topics returns the `a_messages` topic.\n+\n+[source,shell]\n+----\n+bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+----    \n+\n+Listing consumer groups returns the `a_consumer_group_1` consumer group.\n+\n+[source,shell]\n+----\n+bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+----\n+\n+Fetching the default cluster configuration fails cluster authorization, because the operation requires cluster level permissions that `team-a-client` does not have.\n+\n+[source,shell]\n+----\n+bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+  --entity-type brokers --describe --entity-default\n+----\n+\n+\n+. Using clients with different permissions\n+\n+As with `team-a-client`, we prepare a Kafka client configuration file with authentication parameters for `team-b-client`.\n+\n+[source,shell]\n+----\n+cat > /tmp/team-b-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-b-client\" \\\n+  oauth.client.secret=\"team-b-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+----\n+\n+The `team-b-client` client configuration includes a `Dev Team B` realm role and permissions that start with `Dev Team B ...`. These match the users and service accounts that have the `Dev Team B` realm role assigned to them.\n+The `Dev Team B` users have full access to topics beginning with `b_` on the Kafka cluster `my-cluster`, the name of the designated cluster, and read access on topics that start with `x_`.\n+\n+The `team-b-client` configuration is used to produce messages to topic `a_messages`:\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+----\n+\n+A `Not authorized to access topics: [a_messages]` error is returned when trying to push the first message, as expected, so we switch to topic `b_messages`:\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic b_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+Message 2\n+Message 3\n+----\n+\n+Producing messages to topic `b_messages` is authorized and successful.\n+\n+We switch again, but this time to topic that `team-b-client` can only read from, topic `x_messages`:\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+----\n+\n+A `Not authorized to access topics: [x_messages]` error is returned, as expected, so we switch to `team-a-client`:\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+Message 1\n+----\n+\n+A `Not authorized to access topics: [x_messages]` error is returned again. Though `team-a-client` can write to the `x_messages` topic, it it does not have a permission to create a topic if it does not yet exist. \n+\n+Before `team-a-client` can write to the `x_messages` topic, a admin _power user_ must create it with the correct configuration, such as the number of partitions and replicas.\n+\n+\n+.Managing Kafka with an authorized admin\n+\n+Admin user `bob` is created with full access to manage everything on the Kafka cluster `my-cluster`.\n+\n+Helper scripts are used to authenticate to the `keycloak` instance.\n+\n+The following scripts are downloaded to `/tmp` dir and made executable:\n+\n+[source,shell]\n+----\n+curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/oauth.sh -s > /tmp/oauth.sh\n+   chmod +x /tmp/oauth.sh\n+\n+curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/jwt.sh -s > /tmp/jwt.sh\n+   chmod +x /tmp/jwt.sh\n+----\n+\n+User `bob` authenticates to the Keycloak server with his username and password to get a refresh token.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16582f6c776ff4ccd240537a7873a8aae60cbda8"}, "originalPosition": 352}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzc1MjQwOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTo1OToxNFrOH64BOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTo1OToxNFrOH64BOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ5NzI3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            User `bob` can list the topic, but `team-a-client` and `team-b-client` cannot.\n          \n          \n            \n            User `bob` can list the topic, but `team-a-client` and `team-b-client` cannot:", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531497273", "createdAt": "2020-11-27T09:59:14Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,462 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+The default view usually displays the *Master* realm.\n+For this example we are interested in the `kafka-authz` realm, which you can select in the upper left corner.\n+\n+Initially the *Realm Settings* section is selected, but you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources as explained in xref:keycloak_authorization_services_model_for_managing_permissions(one of the previous chapters).\n+\n+Under *Authorization* / *Permissions* of `kafka` client you can see already granted permissions that make use of *Resources* and *Policies* defined under the other tabs:\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+`Dev Team A can write to topics that start with x_ on any cluster` combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team A`.\n+\n+`Dev Team B can read from topics that start with x_ on any cluster` combines `Topic:x_*`, and `Group:x_*` resources, scopes `Describe` and `Read`, and `Dev Team B` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team B`. Matching users and clients have the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with `x_`.\n+\n+== Targeting permissions using group or role policies\n+\n+In Keycloak, confidential clients with service accounts enabled can authenticate to the server in their own name using a client ID and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use group policies, and should instead use role policies.\n+Conversely, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the group policies, rather than the role policies.\n+That is what is used for permissions that start with `ClusterManager`.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case, the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+From menu:Clients[kafka>Authorization>Settings] make sure that *Decision Strategy* is set to *Affirmative*, and NOT to *Unanimous*.\n+Navigate in Keycloak to check that the expected resources, authorization claims, policies and permissions are defined.\n+\n+With the configuration in place, we can check access to Kafka by using a producer and consumer to create topics using different user and service accounts.\n+\n+First, a new interactive pod container is run using a Strimzi Kafka image to connect to a running Kafka broker.\n+\n+[source,shell]\n+----\n+kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+----\n+\n+NOTE: If `kubectl` times out waiting on the image download, subsequent attempts may result in an _AlreadyExists_ error. \n+\n+You can attach to the existing pod by running:\n+\n+[source,shell]\n+----\n+kubectl attach -ti kafka-cli\n+----\n+\n+To produce messages as client `team-a-client`, we prepare a Kafka client configuration file with authentication parameters.\n+\n+[source,shell]\n+----\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+----\n+\n+The roles assigned to a client, such as the `Dev Team A` realm role assigned to the `team-a-client` service account, are presented in Keycloak on the  *Service Account Roles* tab from *Clients*.\n+\n+We can use this configuration from the Kafka CLI to produce and consume messages, and perform other administration tasks.\n+\n+\n+.Producing messages with authorized access\n+\n+The `team-a-client` configuration is used to produce messages to topic `my-topic`:\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+----\n+\n+A `Not authorized to access topics: [my-topic]` error is returned when trying to push the first message.\n+\n+`team-a-client` has a `Dev Team A` role that gives it permission to perform any supported actions on topics that start with `a_`, but can only write to topics that start with `x_`.\n+The topic named `my-topic` matches neither of those rules.\n+\n+The `team-a-client` configuration is then used to produce messages to topic `a_messages`.\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+----\n+\n+The messages are pushed out successfully, and in the Kafka container log there is DEBUG level output saying `Authorization GRANTED`.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+[source,shell]\n+kubectl logs my-cluster-kafka-0 -f\n+\n+.Consuming messages with authorized access\n+\n+The `team-a-client` configuration is used to consume messages from topic `a_messages`:\n+\n+[source,shell,subs=+quotes]\n+----\n+bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --from-beginning --consumer.config /tmp/team-a-client.properties\n+----\n+\n+An error is returned as the `Dev Team A` role for `team-a-client` only has access to consumer groups that have names starting with `a_`.\n+The `team-a-client` configuration is then used to consume messages when specifying a custom consumer group with a name that starts with `a_`:\n+\n+[source,shell,subs=+quotes]\n+----\n+bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+----\n+\n+This time the consumer receives all the messages from the `a_messages` topic.\n+\n+\n+.Administering Kafka with authorized access\n+\n+The `team-a-client` configuration is used in administrative operations.\n+\n+Listing topics returns the `a_messages` topic.\n+\n+[source,shell]\n+----\n+bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+----    \n+\n+Listing consumer groups returns the `a_consumer_group_1` consumer group.\n+\n+[source,shell]\n+----\n+bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+----\n+\n+Fetching the default cluster configuration fails cluster authorization, because the operation requires cluster level permissions that `team-a-client` does not have.\n+\n+[source,shell]\n+----\n+bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+  --entity-type brokers --describe --entity-default\n+----\n+\n+\n+. Using clients with different permissions\n+\n+As with `team-a-client`, we prepare a Kafka client configuration file with authentication parameters for `team-b-client`.\n+\n+[source,shell]\n+----\n+cat > /tmp/team-b-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-b-client\" \\\n+  oauth.client.secret=\"team-b-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+----\n+\n+The `team-b-client` client configuration includes a `Dev Team B` realm role and permissions that start with `Dev Team B ...`. These match the users and service accounts that have the `Dev Team B` realm role assigned to them.\n+The `Dev Team B` users have full access to topics beginning with `b_` on the Kafka cluster `my-cluster`, the name of the designated cluster, and read access on topics that start with `x_`.\n+\n+The `team-b-client` configuration is used to produce messages to topic `a_messages`:\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+----\n+\n+A `Not authorized to access topics: [a_messages]` error is returned when trying to push the first message, as expected, so we switch to topic `b_messages`:\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic b_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+Message 2\n+Message 3\n+----\n+\n+Producing messages to topic `b_messages` is authorized and successful.\n+\n+We switch again, but this time to topic that `team-b-client` can only read from, topic `x_messages`:\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+----\n+\n+A `Not authorized to access topics: [x_messages]` error is returned, as expected, so we switch to `team-a-client`:\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+Message 1\n+----\n+\n+A `Not authorized to access topics: [x_messages]` error is returned again. Though `team-a-client` can write to the `x_messages` topic, it it does not have a permission to create a topic if it does not yet exist. \n+\n+Before `team-a-client` can write to the `x_messages` topic, a admin _power user_ must create it with the correct configuration, such as the number of partitions and replicas.\n+\n+\n+.Managing Kafka with an authorized admin\n+\n+Admin user `bob` is created with full access to manage everything on the Kafka cluster `my-cluster`.\n+\n+Helper scripts are used to authenticate to the `keycloak` instance.\n+\n+The following scripts are downloaded to `/tmp` dir and made executable:\n+\n+[source,shell]\n+----\n+curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/oauth.sh -s > /tmp/oauth.sh\n+   chmod +x /tmp/oauth.sh\n+\n+curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/jwt.sh -s > /tmp/jwt.sh\n+   chmod +x /tmp/jwt.sh\n+----\n+\n+User `bob` authenticates to the Keycloak server with his username and password to get a refresh token.\n+\n+[source,shell]\n+----\n+export TOKEN_ENDPOINT=http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\n+REFRESH_TOKEN=$(/tmp/oauth.sh -q bob)\n+----\n+\n+When prompted for a password, 'bob-password' is used.\n+\n+The refresh token in this case is an offline token which is a long-lived refresh token that does not expire:\n+\n+----\n+ /tmp/jwt.sh $REFRESH_TOKEN\n+----\n+\n+A configuration file is created for `bob`:\n+\n+[source,shell]\n+----\n+cat > /tmp/bob.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.refresh.token=\"$REFRESH_TOKEN\" \\\n+  oauth.client.id=\"kafka-cli\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+----\n+\n+The `kafka-cli` public client is used for the `oauth.client.id` in the `sasl.jaas.config`.\n+Since that is a public client it does not require a Secret.\n+We can use this because we authenticate with a token directly. In this case, the refresh token requests an access token behind the scenes, which is then sent to the Kafka broker for authentication. The refresh token has already been authenticated.\n+\n+\n+User `bob` has permission to create the `x_messages` topic:\n+\n+[source,shell]\n+----\n+bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/bob.properties \\\n+  --topic x_messages --create --replication-factor 1 --partitions 1\n+----\n+\n+\n+User `bob` can list the topic, but `team-a-client` and `team-b-client` cannot.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16582f6c776ff4ccd240537a7873a8aae60cbda8"}, "originalPosition": 397}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzc1NDI0OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTo1OTo0NFrOH64CWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTo1OTo0NFrOH64CWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ5NzU2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To produce messages as client `team-a-client`, we prepare a Kafka client configuration file with authentication parameters.\n          \n          \n            \n            To produce messages as client `team-a-client`, we prepare a Kafka client configuration file with authentication parameters:", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531497562", "createdAt": "2020-11-27T09:59:44Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,462 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+The default view usually displays the *Master* realm.\n+For this example we are interested in the `kafka-authz` realm, which you can select in the upper left corner.\n+\n+Initially the *Realm Settings* section is selected, but you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources as explained in xref:keycloak_authorization_services_model_for_managing_permissions(one of the previous chapters).\n+\n+Under *Authorization* / *Permissions* of `kafka` client you can see already granted permissions that make use of *Resources* and *Policies* defined under the other tabs:\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+`Dev Team A can write to topics that start with x_ on any cluster` combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team A`.\n+\n+`Dev Team B can read from topics that start with x_ on any cluster` combines `Topic:x_*`, and `Group:x_*` resources, scopes `Describe` and `Read`, and `Dev Team B` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team B`. Matching users and clients have the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with `x_`.\n+\n+== Targeting permissions using group or role policies\n+\n+In Keycloak, confidential clients with service accounts enabled can authenticate to the server in their own name using a client ID and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use group policies, and should instead use role policies.\n+Conversely, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the group policies, rather than the role policies.\n+That is what is used for permissions that start with `ClusterManager`.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case, the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+From menu:Clients[kafka>Authorization>Settings] make sure that *Decision Strategy* is set to *Affirmative*, and NOT to *Unanimous*.\n+Navigate in Keycloak to check that the expected resources, authorization claims, policies and permissions are defined.\n+\n+With the configuration in place, we can check access to Kafka by using a producer and consumer to create topics using different user and service accounts.\n+\n+First, a new interactive pod container is run using a Strimzi Kafka image to connect to a running Kafka broker.\n+\n+[source,shell]\n+----\n+kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+----\n+\n+NOTE: If `kubectl` times out waiting on the image download, subsequent attempts may result in an _AlreadyExists_ error. \n+\n+You can attach to the existing pod by running:\n+\n+[source,shell]\n+----\n+kubectl attach -ti kafka-cli\n+----\n+\n+To produce messages as client `team-a-client`, we prepare a Kafka client configuration file with authentication parameters.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16582f6c776ff4ccd240537a7873a8aae60cbda8"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzc1NTU5OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDowMDowNFrOH64DGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDowMDowNFrOH64DGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ5Nzc1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            As with `team-a-client`, we prepare a Kafka client configuration file with authentication parameters for `team-b-client`.\n          \n          \n            \n            As with `team-a-client`, we prepare a Kafka client configuration file with authentication parameters for `team-b-client`:", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531497754", "createdAt": "2020-11-27T10:00:04Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,462 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+The default view usually displays the *Master* realm.\n+For this example we are interested in the `kafka-authz` realm, which you can select in the upper left corner.\n+\n+Initially the *Realm Settings* section is selected, but you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources as explained in xref:keycloak_authorization_services_model_for_managing_permissions(one of the previous chapters).\n+\n+Under *Authorization* / *Permissions* of `kafka` client you can see already granted permissions that make use of *Resources* and *Policies* defined under the other tabs:\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+`Dev Team A can write to topics that start with x_ on any cluster` combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team A`.\n+\n+`Dev Team B can read from topics that start with x_ on any cluster` combines `Topic:x_*`, and `Group:x_*` resources, scopes `Describe` and `Read`, and `Dev Team B` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team B`. Matching users and clients have the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with `x_`.\n+\n+== Targeting permissions using group or role policies\n+\n+In Keycloak, confidential clients with service accounts enabled can authenticate to the server in their own name using a client ID and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use group policies, and should instead use role policies.\n+Conversely, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the group policies, rather than the role policies.\n+That is what is used for permissions that start with `ClusterManager`.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case, the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+From menu:Clients[kafka>Authorization>Settings] make sure that *Decision Strategy* is set to *Affirmative*, and NOT to *Unanimous*.\n+Navigate in Keycloak to check that the expected resources, authorization claims, policies and permissions are defined.\n+\n+With the configuration in place, we can check access to Kafka by using a producer and consumer to create topics using different user and service accounts.\n+\n+First, a new interactive pod container is run using a Strimzi Kafka image to connect to a running Kafka broker.\n+\n+[source,shell]\n+----\n+kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+----\n+\n+NOTE: If `kubectl` times out waiting on the image download, subsequent attempts may result in an _AlreadyExists_ error. \n+\n+You can attach to the existing pod by running:\n+\n+[source,shell]\n+----\n+kubectl attach -ti kafka-cli\n+----\n+\n+To produce messages as client `team-a-client`, we prepare a Kafka client configuration file with authentication parameters.\n+\n+[source,shell]\n+----\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+----\n+\n+The roles assigned to a client, such as the `Dev Team A` realm role assigned to the `team-a-client` service account, are presented in Keycloak on the  *Service Account Roles* tab from *Clients*.\n+\n+We can use this configuration from the Kafka CLI to produce and consume messages, and perform other administration tasks.\n+\n+\n+.Producing messages with authorized access\n+\n+The `team-a-client` configuration is used to produce messages to topic `my-topic`:\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+----\n+\n+A `Not authorized to access topics: [my-topic]` error is returned when trying to push the first message.\n+\n+`team-a-client` has a `Dev Team A` role that gives it permission to perform any supported actions on topics that start with `a_`, but can only write to topics that start with `x_`.\n+The topic named `my-topic` matches neither of those rules.\n+\n+The `team-a-client` configuration is then used to produce messages to topic `a_messages`.\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+----\n+\n+The messages are pushed out successfully, and in the Kafka container log there is DEBUG level output saying `Authorization GRANTED`.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+[source,shell]\n+kubectl logs my-cluster-kafka-0 -f\n+\n+.Consuming messages with authorized access\n+\n+The `team-a-client` configuration is used to consume messages from topic `a_messages`:\n+\n+[source,shell,subs=+quotes]\n+----\n+bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --from-beginning --consumer.config /tmp/team-a-client.properties\n+----\n+\n+An error is returned as the `Dev Team A` role for `team-a-client` only has access to consumer groups that have names starting with `a_`.\n+The `team-a-client` configuration is then used to consume messages when specifying a custom consumer group with a name that starts with `a_`:\n+\n+[source,shell,subs=+quotes]\n+----\n+bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+----\n+\n+This time the consumer receives all the messages from the `a_messages` topic.\n+\n+\n+.Administering Kafka with authorized access\n+\n+The `team-a-client` configuration is used in administrative operations.\n+\n+Listing topics returns the `a_messages` topic.\n+\n+[source,shell]\n+----\n+bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+----    \n+\n+Listing consumer groups returns the `a_consumer_group_1` consumer group.\n+\n+[source,shell]\n+----\n+bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+----\n+\n+Fetching the default cluster configuration fails cluster authorization, because the operation requires cluster level permissions that `team-a-client` does not have.\n+\n+[source,shell]\n+----\n+bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+  --entity-type brokers --describe --entity-default\n+----\n+\n+\n+. Using clients with different permissions\n+\n+As with `team-a-client`, we prepare a Kafka client configuration file with authentication parameters for `team-b-client`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16582f6c776ff4ccd240537a7873a8aae60cbda8"}, "originalPosition": 272}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzc2MTY1OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDowMTozOVrOH64Gow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDowMTozOVrOH64Gow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ5ODY1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            == Mapping Keycloak Authorization Services to Kafka Model\n          \n          \n            \n            == Mapping Keycloak Authorization Services to the Kafka authorization model", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531498659", "createdAt": "2020-11-27T10:01:39Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,317 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Managing policies and permissions in Keycloak Authorization Services\n+\n+== Kafka authorization model for resources\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and the permissions available for each type.\n+When an action is performed by a Kafka client on a broker, the broker uses a configured authorizer to check permissions, depending on the action performed and the resource type.\n+\n+Kafka has five resource types for controlling access: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+Each resource type has different permissions:\n+\n+Topic:\n+\n+* `Create`\n+* `Write`\n+* `Read`\n+* `Delete`\n+* `Describe`\n+* `DescribeConfigs`\n+* `Alter`\n+* `AlterConfigs`\n+\n+Group:\n+\n+* `Read`\n+* `Describe`\n+* `Delete`\n+\n+Cluster:\n+\n+*  `Create`\n+*  `Describe`\n+*  `Alter`\n+*  `DescribeConfigs`\n+*  `AlterConfigs`\n+*  `IdempotentWrite`\n+*  `ClusterAction`\n+\n+TransactionalId:\n+\n+*  `Describe`\n+*  `Write`\n+\n+DelegationToken:\n+\n+* `Describe`\n+\n+== Keycloak Authorization Services model for managing permissions\n+\n+Keycloak Authorization Services use four concepts to define and grant permissions: _resources_, _authorization scopes_, _policies_, and _permissions_.\n+\n+Resources:: Resources are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with the same prefix.\n+The resource definition has a set of available authorization scopes associated with it, which represent a set of all actions available on the particular resource.\n+Often, only a subset of these actions is actually permitted.\n+\n+Authorization scopes:: Authorization scopes is simply a set of all available actions on all the different resource types. When defining a new resource,  scopes are added from the set of all scopes.\n+\n+Policies:: Policies are rules that use criteria to match a list of accounts. Policies can match service accounts based on client id or roles, or user accounts based on username, groups, or roles.\n+\n+Permissions:: Permissions grant a subset of authorization scopes on a specific resource definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16582f6c776ff4ccd240537a7873a8aae60cbda8"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzc2NTgyOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDowMjo1NVrOH64JZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDowMjo1NVrOH64JZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ5OTM2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            .Deleting the topic\n          \n          \n            \n            .Deleting a topic", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531499364", "createdAt": "2020-11-27T10:02:55Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,317 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Managing policies and permissions in Keycloak Authorization Services\n+\n+== Kafka authorization model for resources\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and the permissions available for each type.\n+When an action is performed by a Kafka client on a broker, the broker uses a configured authorizer to check permissions, depending on the action performed and the resource type.\n+\n+Kafka has five resource types for controlling access: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+Each resource type has different permissions:\n+\n+Topic:\n+\n+* `Create`\n+* `Write`\n+* `Read`\n+* `Delete`\n+* `Describe`\n+* `DescribeConfigs`\n+* `Alter`\n+* `AlterConfigs`\n+\n+Group:\n+\n+* `Read`\n+* `Describe`\n+* `Delete`\n+\n+Cluster:\n+\n+*  `Create`\n+*  `Describe`\n+*  `Alter`\n+*  `DescribeConfigs`\n+*  `AlterConfigs`\n+*  `IdempotentWrite`\n+*  `ClusterAction`\n+\n+TransactionalId:\n+\n+*  `Describe`\n+*  `Write`\n+\n+DelegationToken:\n+\n+* `Describe`\n+\n+== Keycloak Authorization Services model for managing permissions\n+\n+Keycloak Authorization Services use four concepts to define and grant permissions: _resources_, _authorization scopes_, _policies_, and _permissions_.\n+\n+Resources:: Resources are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with the same prefix.\n+The resource definition has a set of available authorization scopes associated with it, which represent a set of all actions available on the particular resource.\n+Often, only a subset of these actions is actually permitted.\n+\n+Authorization scopes:: Authorization scopes is simply a set of all available actions on all the different resource types. When defining a new resource,  scopes are added from the set of all scopes.\n+\n+Policies:: Policies are rules that use criteria to match a list of accounts. Policies can match service accounts based on client id or roles, or user accounts based on username, groups, or roles.\n+\n+Permissions:: Permissions grant a subset of authorization scopes on a specific resource definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+Use Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker to grant Kafka permissions to users or service accounts. Typically, the OAuth client has `kafka` as its client id.\n+\n+The OAuth 2.0 client definition must have the _Authorization Enabled_ option activated.\n+\n+All permissions exist within the scope of this OAuth 2.0 client, which means that if you have different Kafka clusters configured with different OAuth 2.0 client IDs they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client use the _SASL OAUTHBEARER_ mechanism, the Keycloak authorizer (`KeycloakRBACAuthorizer`) retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Introducing authorization scopes\n+\n+Typically, an initial configuration involves uploading the authorization scopes to create a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, you can add authorization scopes manually.\n+\n+The authorization scopes should contain all the possible Kafka permissions regardless of the resource type:\n+\n+* `Create`\n+* `Write`\n+* `Read`\n+* `Delete`\n+* `Describe`\n+* `Alter`\n+* `DescribeConfig`\n+* `AlterConfig`\n+* `ClusterAction`\n+* `IdempotentWrite`\n+\n+.Defining resource patterns for permission checks\n+\n+The resources use pattern names for pattern matching against the targeted resources when performing permission checks.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+.Example patterns for resources\n+    Topic:my-topic\n+    Topic:orders-*\n+    Group:orders-*\n+    Cluster:*\n+\n+In addition, the general pattern can be prefixed by `kafka-cluster:CLUSTER_NAME` followed by a comma, where the cluster name refers to the `metadata.name` in the Kafka custom resource.\n+\n+.Example patterns for resources with cluster prefix\n+    kafka-cluster:my-cluster,Topic:*\n+    kafka-cluster:*,Group:b_*\n+\n+When the `kafka-cluster` prefix is not present it is assumed to be `kafka-cluster:*`.\n+\n+When defining a resource, you can associate a list of possible authorization scopes relevant to the resource.\n+Set whatever actions make sense for the targeted resource type.\n+\n+While you may add any authorization scope to any resource, only the scopes supported by the resource type are considered for access control.\n+\n+.Policies\n+\n+Policies are used to target permissions to one or more accounts.\n+Targeting can refer to:\n+* Specific user or service accounts\n+* Realm roles or client roles\n+* User groups\n+* JS rule to match a client IP address\n+\n+A policy is given a unique name, and can be reused to target multiple permissions to multiple resources.\n+\n+.Defining permissions based on scopes, resources and policies \n+\n+Use fine-grained permissions to pull together the policies, resources, and authorization scopes that grant access to users.\n+\n+\n+The name of the each permission should should clearly define what permissions it grants to which users.\n+\n+For more information on how to configure permissions through Keycloak Authorization Services, see xref:con-oauth-authorization-keycloak-example_str[the authorization example].\n+\n+\n+== Example permissions required for operations on Kafka\n+\n+The following  examples demonstrate the permissions required for performing common operations on Kafka.\n+\n+.Creating a topic\n+\n+To create a topic the `Create` permission is required for the specific topic or for `Cluster:kafka-cluster`.\n+\n+[source,shell]\n+----\n+bin/kafka-topics.sh --create --topic my-topic \\\n+  --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config=/tmp/config.properties\n+----\n+\n+.Listing the topic\n+\n+If user has `Describe` permission on the topic, the topic will be listed, otherwise not.\n+\n+[source,shell]\n+----\n+bin/kafka-topics.sh --list \\\n+  --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config=/tmp/config.properties\n+----\n+\n+.Displaying the topic details\n+\n+To display the topic details the `Describe`, and `DescribeConfigs` permissions are required on the topic.\n+\n+[source,shell]\n+----\n+bin/kafka-topics.sh --describe --topic my-topic \\\n+  --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config=/tmp/config.properties\n+----\n+\n+.Producing to the topic\n+\n+To produce to the topic the user needs `Describe` and `Write` permissions on the topic.\n+If topic has not yet been created, and autocreation is enabled, the permissions to create the topic are required.\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh  --topic my-topic \\\n+  --broker-list my-cluster-kafka-bootstrap:9092 --producer.config=/tmp/config.properties\n+----\n+\n+.Consuming from the topic\n+\n+To consume from the topic the user needs `Describe` and `Read` permissions on the topic.\n+Consuming from the topic normally relies on storing the consumer offsets in a consumer group.\n+That requires additional `Describe` and `Read` permissions on the consumer group.\n+\n+Two `resources` are needed for matching. For example:\n+\n+----\n+Topic:my-topic\n+Group:my-group-*\n+----    \n+\n+[source,shell]\n+----\n+bin/kafka-console-consumer.sh --topic my-topic --group my-group-1 --from-beginning \\\n+  --bootstrap-server my-cluster-kafka-bootstrap:9092 --consumer.config /tmp/config.properties\n+----\n+\n+.Producing to the topic using an idempotent producer\n+\n+Besides needing the permissions for ordinary producing to the topic, an additional `IdempotentWrite` permission is required on the `Cluster` resource.\n+\n+Two `resources` are needed for matching. For example:\n+\n+    Topic:my-topic\n+    Cluster:kafka-cluster\n+\n+\n+.Listing consumer groups\n+\n+When listing consumer groups, only the groups on which the user has `Describe` permissions are returned.\n+Alternatively, if the user has `Describe` permission on the `Cluster:kafka-cluster`, all the consumer groups are returned.\n+\n+[source,shell]\n+----\n+bin/kafka-consumer-groups.sh --list \\\n+  --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config=/tmp/config.properties\n+----\n+\n+.Displaying the consumer group details\n+\n+To display the consumer group details the `Describe` permission is required on the group, and on the topic associated with the group.\n+\n+[source,shell]\n+----\n+bin/kafka-consumer-groups.sh --describe --group my-group-1 \\\n+  --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config=/tmp/config.properties\n+----\n+\n+.Changing the topic configuration\n+\n+To change the topic configuration the `Describe` and `Alter` permissions are required on the topic.\n+\n+[source,shell]\n+----\n+bin/kafka-topics.sh --alter --topic my-topic --partitions 2 \\\n+  --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config=/tmp/config.properties\n+----\n+\n+.Displaying the Kafka broker configuration\n+\n+To be able to use `kafka-configs.sh` to get the broker configuration, `DescribeConfigs` permission is required on the `Cluster:kafka-cluster`.\n+\n+[source,shell]\n+----\n+bin/kafka-configs.sh --entity-type brokers --entity-name 0 --describe --all \\\n+  --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config=/tmp/config.properties\n+----\n+\n+.Changing the Kafka broker configuration\n+\n+To change the Kafka broker configuration the 'DescribeConfigs', and `AlterConfigs` permissions are required on `Cluster:kafka-cluster`.\n+\n+[source,shell]\n+----\n+bin/kafka-configs --entity-type brokers --entity-name 0 --alter --add-config log.cleaner.threads=2 \\\n+  --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config=/tmp/config.properties\n+----\n+\n+.Deleting the topic", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16582f6c776ff4ccd240537a7873a8aae60cbda8"}, "originalPosition": 271}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzc2Nzk5OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDowMzozMlrOH64KqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDowMzozMlrOH64KqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ5OTY4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            .Selecting the leader\n          \n          \n            \n            .Selecting a leader partition", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531499688", "createdAt": "2020-11-27T10:03:32Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,317 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Managing policies and permissions in Keycloak Authorization Services\n+\n+== Kafka authorization model for resources\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and the permissions available for each type.\n+When an action is performed by a Kafka client on a broker, the broker uses a configured authorizer to check permissions, depending on the action performed and the resource type.\n+\n+Kafka has five resource types for controlling access: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+Each resource type has different permissions:\n+\n+Topic:\n+\n+* `Create`\n+* `Write`\n+* `Read`\n+* `Delete`\n+* `Describe`\n+* `DescribeConfigs`\n+* `Alter`\n+* `AlterConfigs`\n+\n+Group:\n+\n+* `Read`\n+* `Describe`\n+* `Delete`\n+\n+Cluster:\n+\n+*  `Create`\n+*  `Describe`\n+*  `Alter`\n+*  `DescribeConfigs`\n+*  `AlterConfigs`\n+*  `IdempotentWrite`\n+*  `ClusterAction`\n+\n+TransactionalId:\n+\n+*  `Describe`\n+*  `Write`\n+\n+DelegationToken:\n+\n+* `Describe`\n+\n+== Keycloak Authorization Services model for managing permissions\n+\n+Keycloak Authorization Services use four concepts to define and grant permissions: _resources_, _authorization scopes_, _policies_, and _permissions_.\n+\n+Resources:: Resources are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with the same prefix.\n+The resource definition has a set of available authorization scopes associated with it, which represent a set of all actions available on the particular resource.\n+Often, only a subset of these actions is actually permitted.\n+\n+Authorization scopes:: Authorization scopes is simply a set of all available actions on all the different resource types. When defining a new resource,  scopes are added from the set of all scopes.\n+\n+Policies:: Policies are rules that use criteria to match a list of accounts. Policies can match service accounts based on client id or roles, or user accounts based on username, groups, or roles.\n+\n+Permissions:: Permissions grant a subset of authorization scopes on a specific resource definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+Use Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker to grant Kafka permissions to users or service accounts. Typically, the OAuth client has `kafka` as its client id.\n+\n+The OAuth 2.0 client definition must have the _Authorization Enabled_ option activated.\n+\n+All permissions exist within the scope of this OAuth 2.0 client, which means that if you have different Kafka clusters configured with different OAuth 2.0 client IDs they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client use the _SASL OAUTHBEARER_ mechanism, the Keycloak authorizer (`KeycloakRBACAuthorizer`) retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Introducing authorization scopes\n+\n+Typically, an initial configuration involves uploading the authorization scopes to create a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, you can add authorization scopes manually.\n+\n+The authorization scopes should contain all the possible Kafka permissions regardless of the resource type:\n+\n+* `Create`\n+* `Write`\n+* `Read`\n+* `Delete`\n+* `Describe`\n+* `Alter`\n+* `DescribeConfig`\n+* `AlterConfig`\n+* `ClusterAction`\n+* `IdempotentWrite`\n+\n+.Defining resource patterns for permission checks\n+\n+The resources use pattern names for pattern matching against the targeted resources when performing permission checks.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+.Example patterns for resources\n+    Topic:my-topic\n+    Topic:orders-*\n+    Group:orders-*\n+    Cluster:*\n+\n+In addition, the general pattern can be prefixed by `kafka-cluster:CLUSTER_NAME` followed by a comma, where the cluster name refers to the `metadata.name` in the Kafka custom resource.\n+\n+.Example patterns for resources with cluster prefix\n+    kafka-cluster:my-cluster,Topic:*\n+    kafka-cluster:*,Group:b_*\n+\n+When the `kafka-cluster` prefix is not present it is assumed to be `kafka-cluster:*`.\n+\n+When defining a resource, you can associate a list of possible authorization scopes relevant to the resource.\n+Set whatever actions make sense for the targeted resource type.\n+\n+While you may add any authorization scope to any resource, only the scopes supported by the resource type are considered for access control.\n+\n+.Policies\n+\n+Policies are used to target permissions to one or more accounts.\n+Targeting can refer to:\n+* Specific user or service accounts\n+* Realm roles or client roles\n+* User groups\n+* JS rule to match a client IP address\n+\n+A policy is given a unique name, and can be reused to target multiple permissions to multiple resources.\n+\n+.Defining permissions based on scopes, resources and policies \n+\n+Use fine-grained permissions to pull together the policies, resources, and authorization scopes that grant access to users.\n+\n+\n+The name of the each permission should should clearly define what permissions it grants to which users.\n+\n+For more information on how to configure permissions through Keycloak Authorization Services, see xref:con-oauth-authorization-keycloak-example_str[the authorization example].\n+\n+\n+== Example permissions required for operations on Kafka\n+\n+The following  examples demonstrate the permissions required for performing common operations on Kafka.\n+\n+.Creating a topic\n+\n+To create a topic the `Create` permission is required for the specific topic or for `Cluster:kafka-cluster`.\n+\n+[source,shell]\n+----\n+bin/kafka-topics.sh --create --topic my-topic \\\n+  --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config=/tmp/config.properties\n+----\n+\n+.Listing the topic\n+\n+If user has `Describe` permission on the topic, the topic will be listed, otherwise not.\n+\n+[source,shell]\n+----\n+bin/kafka-topics.sh --list \\\n+  --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config=/tmp/config.properties\n+----\n+\n+.Displaying the topic details\n+\n+To display the topic details the `Describe`, and `DescribeConfigs` permissions are required on the topic.\n+\n+[source,shell]\n+----\n+bin/kafka-topics.sh --describe --topic my-topic \\\n+  --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config=/tmp/config.properties\n+----\n+\n+.Producing to the topic\n+\n+To produce to the topic the user needs `Describe` and `Write` permissions on the topic.\n+If topic has not yet been created, and autocreation is enabled, the permissions to create the topic are required.\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh  --topic my-topic \\\n+  --broker-list my-cluster-kafka-bootstrap:9092 --producer.config=/tmp/config.properties\n+----\n+\n+.Consuming from the topic\n+\n+To consume from the topic the user needs `Describe` and `Read` permissions on the topic.\n+Consuming from the topic normally relies on storing the consumer offsets in a consumer group.\n+That requires additional `Describe` and `Read` permissions on the consumer group.\n+\n+Two `resources` are needed for matching. For example:\n+\n+----\n+Topic:my-topic\n+Group:my-group-*\n+----    \n+\n+[source,shell]\n+----\n+bin/kafka-console-consumer.sh --topic my-topic --group my-group-1 --from-beginning \\\n+  --bootstrap-server my-cluster-kafka-bootstrap:9092 --consumer.config /tmp/config.properties\n+----\n+\n+.Producing to the topic using an idempotent producer\n+\n+Besides needing the permissions for ordinary producing to the topic, an additional `IdempotentWrite` permission is required on the `Cluster` resource.\n+\n+Two `resources` are needed for matching. For example:\n+\n+    Topic:my-topic\n+    Cluster:kafka-cluster\n+\n+\n+.Listing consumer groups\n+\n+When listing consumer groups, only the groups on which the user has `Describe` permissions are returned.\n+Alternatively, if the user has `Describe` permission on the `Cluster:kafka-cluster`, all the consumer groups are returned.\n+\n+[source,shell]\n+----\n+bin/kafka-consumer-groups.sh --list \\\n+  --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config=/tmp/config.properties\n+----\n+\n+.Displaying the consumer group details\n+\n+To display the consumer group details the `Describe` permission is required on the group, and on the topic associated with the group.\n+\n+[source,shell]\n+----\n+bin/kafka-consumer-groups.sh --describe --group my-group-1 \\\n+  --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config=/tmp/config.properties\n+----\n+\n+.Changing the topic configuration\n+\n+To change the topic configuration the `Describe` and `Alter` permissions are required on the topic.\n+\n+[source,shell]\n+----\n+bin/kafka-topics.sh --alter --topic my-topic --partitions 2 \\\n+  --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config=/tmp/config.properties\n+----\n+\n+.Displaying the Kafka broker configuration\n+\n+To be able to use `kafka-configs.sh` to get the broker configuration, `DescribeConfigs` permission is required on the `Cluster:kafka-cluster`.\n+\n+[source,shell]\n+----\n+bin/kafka-configs.sh --entity-type brokers --entity-name 0 --describe --all \\\n+  --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config=/tmp/config.properties\n+----\n+\n+.Changing the Kafka broker configuration\n+\n+To change the Kafka broker configuration the 'DescribeConfigs', and `AlterConfigs` permissions are required on `Cluster:kafka-cluster`.\n+\n+[source,shell]\n+----\n+bin/kafka-configs --entity-type brokers --entity-name 0 --alter --add-config log.cleaner.threads=2 \\\n+  --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config=/tmp/config.properties\n+----\n+\n+.Deleting the topic\n+\n+To delete the topic the `Describe`, and `Delete` permissions are required on the topic.\n+\n+[source,shell]\n+----\n+bin/kafka-topics.sh --delete --topic my-topic \\\n+  --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config=/tmp/config.properties\n+----\n+\n+.Selecting the leader", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16582f6c776ff4ccd240537a7873a8aae60cbda8"}, "originalPosition": 281}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzc3MjQyOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDowNDo0NFrOH64NSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDowNDo0NFrOH64NSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUwMDM2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n          \n          \n            \n            We then connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531500360", "createdAt": "2020-11-27T10:04:44Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,462 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16582f6c776ff4ccd240537a7873a8aae60cbda8"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzc3MzUyOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDowNTowNlrOH64OCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDo0MjoxOVrOH65juw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUwMDU1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n          \n          \n            \n            Finally, we connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531500555", "createdAt": "2020-11-27T10:05:06Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,462 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16582f6c776ff4ccd240537a7873a8aae60cbda8"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUwMDczNg==", "bodyText": "These might work better as bullets", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531500736", "createdAt": "2020-11-27T10:05:25Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,462 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUwMDU1NQ=="}, "originalCommit": {"oid": "16582f6c776ff4ccd240537a7873a8aae60cbda8"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUyMjQ5MQ==", "bodyText": "I leave that to you :)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531522491", "createdAt": "2020-11-27T10:42:19Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,462 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUwMDU1NQ=="}, "originalCommit": {"oid": "16582f6c776ff4ccd240537a7873a8aae60cbda8"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzg1OTQ5OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDoyOTo1M1rOH65DJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDoyOTo1M1rOH65DJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxNDE0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            User `bob` should can read from or write to any topic:\n          \n          \n            \n            User `bob` can read from or write to any topic:", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531514148", "createdAt": "2020-11-27T10:29:53Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,462 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+The default view usually displays the *Master* realm.\n+For this example we are interested in the `kafka-authz` realm, which you can select in the upper left corner.\n+\n+Initially the *Realm Settings* section is selected, but you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources as explained in xref:keycloak_authorization_services_model_for_managing_permissions(one of the previous chapters).\n+\n+Under *Authorization* / *Permissions* of `kafka` client you can see already granted permissions that make use of *Resources* and *Policies* defined under the other tabs:\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+`Dev Team A can write to topics that start with x_ on any cluster` combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team A`.\n+\n+`Dev Team B can read from topics that start with x_ on any cluster` combines `Topic:x_*`, and `Group:x_*` resources, scopes `Describe` and `Read`, and `Dev Team B` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team B`. Matching users and clients have the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with `x_`.\n+\n+== Targeting permissions using group or role policies\n+\n+In Keycloak, confidential clients with service accounts enabled can authenticate to the server in their own name using a client ID and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use group policies, and should instead use role policies.\n+Conversely, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the group policies, rather than the role policies.\n+That is what is used for permissions that start with `ClusterManager`.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case, the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+From menu:Clients[kafka>Authorization>Settings] make sure that *Decision Strategy* is set to *Affirmative*, and NOT to *Unanimous*.\n+Navigate in Keycloak to check that the expected resources, authorization claims, policies and permissions are defined.\n+\n+With the configuration in place, we can check access to Kafka by using a producer and consumer to create topics using different user and service accounts.\n+\n+First, a new interactive pod container is run using a Strimzi Kafka image to connect to a running Kafka broker.\n+\n+[source,shell]\n+----\n+kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+----\n+\n+NOTE: If `kubectl` times out waiting on the image download, subsequent attempts may result in an _AlreadyExists_ error. \n+\n+You can attach to the existing pod by running:\n+\n+[source,shell]\n+----\n+kubectl attach -ti kafka-cli\n+----\n+\n+To produce messages as client `team-a-client`, we prepare a Kafka client configuration file with authentication parameters.\n+\n+[source,shell]\n+----\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+----\n+\n+The roles assigned to a client, such as the `Dev Team A` realm role assigned to the `team-a-client` service account, are presented in Keycloak on the  *Service Account Roles* tab from *Clients*.\n+\n+We can use this configuration from the Kafka CLI to produce and consume messages, and perform other administration tasks.\n+\n+\n+.Producing messages with authorized access\n+\n+The `team-a-client` configuration is used to produce messages to topic `my-topic`:\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+----\n+\n+A `Not authorized to access topics: [my-topic]` error is returned when trying to push the first message.\n+\n+`team-a-client` has a `Dev Team A` role that gives it permission to perform any supported actions on topics that start with `a_`, but can only write to topics that start with `x_`.\n+The topic named `my-topic` matches neither of those rules.\n+\n+The `team-a-client` configuration is then used to produce messages to topic `a_messages`.\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+----\n+\n+The messages are pushed out successfully, and in the Kafka container log there is DEBUG level output saying `Authorization GRANTED`.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+[source,shell]\n+kubectl logs my-cluster-kafka-0 -f\n+\n+.Consuming messages with authorized access\n+\n+The `team-a-client` configuration is used to consume messages from topic `a_messages`:\n+\n+[source,shell,subs=+quotes]\n+----\n+bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --from-beginning --consumer.config /tmp/team-a-client.properties\n+----\n+\n+An error is returned as the `Dev Team A` role for `team-a-client` only has access to consumer groups that have names starting with `a_`.\n+The `team-a-client` configuration is then used to consume messages when specifying a custom consumer group with a name that starts with `a_`:\n+\n+[source,shell,subs=+quotes]\n+----\n+bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+----\n+\n+This time the consumer receives all the messages from the `a_messages` topic.\n+\n+\n+.Administering Kafka with authorized access\n+\n+The `team-a-client` configuration is used in administrative operations.\n+\n+Listing topics returns the `a_messages` topic.\n+\n+[source,shell]\n+----\n+bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+----    \n+\n+Listing consumer groups returns the `a_consumer_group_1` consumer group.\n+\n+[source,shell]\n+----\n+bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+----\n+\n+Fetching the default cluster configuration fails cluster authorization, because the operation requires cluster level permissions that `team-a-client` does not have.\n+\n+[source,shell]\n+----\n+bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+  --entity-type brokers --describe --entity-default\n+----\n+\n+\n+. Using clients with different permissions\n+\n+As with `team-a-client`, we prepare a Kafka client configuration file with authentication parameters for `team-b-client`.\n+\n+[source,shell]\n+----\n+cat > /tmp/team-b-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-b-client\" \\\n+  oauth.client.secret=\"team-b-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+----\n+\n+The `team-b-client` client configuration includes a `Dev Team B` realm role and permissions that start with `Dev Team B ...`. These match the users and service accounts that have the `Dev Team B` realm role assigned to them.\n+The `Dev Team B` users have full access to topics beginning with `b_` on the Kafka cluster `my-cluster`, the name of the designated cluster, and read access on topics that start with `x_`.\n+\n+The `team-b-client` configuration is used to produce messages to topic `a_messages`:\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+----\n+\n+A `Not authorized to access topics: [a_messages]` error is returned when trying to push the first message, as expected, so we switch to topic `b_messages`:\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic b_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+Message 2\n+Message 3\n+----\n+\n+Producing messages to topic `b_messages` is authorized and successful.\n+\n+We switch again, but this time to topic that `team-b-client` can only read from, topic `x_messages`:\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+----\n+\n+A `Not authorized to access topics: [x_messages]` error is returned, as expected, so we switch to `team-a-client`:\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+Message 1\n+----\n+\n+A `Not authorized to access topics: [x_messages]` error is returned again. Though `team-a-client` can write to the `x_messages` topic, it it does not have a permission to create a topic if it does not yet exist. \n+\n+Before `team-a-client` can write to the `x_messages` topic, a admin _power user_ must create it with the correct configuration, such as the number of partitions and replicas.\n+\n+\n+.Managing Kafka with an authorized admin\n+\n+Admin user `bob` is created with full access to manage everything on the Kafka cluster `my-cluster`.\n+\n+Helper scripts are used to authenticate to the `keycloak` instance.\n+\n+The following scripts are downloaded to `/tmp` dir and made executable:\n+\n+[source,shell]\n+----\n+curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/oauth.sh -s > /tmp/oauth.sh\n+   chmod +x /tmp/oauth.sh\n+\n+curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/jwt.sh -s > /tmp/jwt.sh\n+   chmod +x /tmp/jwt.sh\n+----\n+\n+User `bob` authenticates to the Keycloak server with his username and password to get a refresh token.\n+\n+[source,shell]\n+----\n+export TOKEN_ENDPOINT=http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\n+REFRESH_TOKEN=$(/tmp/oauth.sh -q bob)\n+----\n+\n+When prompted for a password, 'bob-password' is used.\n+\n+The refresh token in this case is an offline token which is a long-lived refresh token that does not expire:\n+\n+----\n+ /tmp/jwt.sh $REFRESH_TOKEN\n+----\n+\n+A configuration file is created for `bob`:\n+\n+[source,shell]\n+----\n+cat > /tmp/bob.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.refresh.token=\"$REFRESH_TOKEN\" \\\n+  oauth.client.id=\"kafka-cli\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+----\n+\n+The `kafka-cli` public client is used for the `oauth.client.id` in the `sasl.jaas.config`.\n+Since that is a public client it does not require a Secret.\n+We can use this because we authenticate with a token directly. In this case, the refresh token requests an access token behind the scenes, which is then sent to the Kafka broker for authentication. The refresh token has already been authenticated.\n+\n+\n+User `bob` has permission to create the `x_messages` topic:\n+\n+[source,shell]\n+----\n+bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/bob.properties \\\n+  --topic x_messages --create --replication-factor 1 --partitions 1\n+----\n+\n+\n+User `bob` can list the topic, but `team-a-client` and `team-b-client` cannot.\n+\n+[source,shell]\n+----\n+bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/bob.properties --list\n+bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-b-client.properties --list\n+----\n+\n+The `Dev Team A`, and `Dev Team B` roles both have `Describe` permission on topics that start with `x_`, but they cannot see the other team's topics as they do not have `Describe` permissions on them.\n+\n+The `team-a-client` can now successfully produce to the `x_messages` topic:\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+Message 1\n+Message 2\n+Message 3\n+----\n+\n+As expected, `team-b-client` still cannot produce to the `x_messages` topic, and the following operation returns an error:\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 4\n+Message 5\n+----\n+\n+However, due to its Keycloak settings `team-b-client` can consume messages from the `x_messages` topic:\n+\n+[source,shell]\n+----\n+bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --from-beginning --consumer.config /tmp/team-b-client.properties --group x_consumer_group_b\n+----\n+Conversely, even though `team-a-client` can write to topic `x_messages`, the following read request returns a `Not authorized to access group: x_consumer_group_a` error:\n+\n+[source,shell]\n+----\n+bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --from-beginning --consumer.config /tmp/team-a-client.properties --group x_consumer_group_a\n+----\n+\n+A consumer group that begins with `a_` is used in the next read request:\n+\n+[source,shell]\n+----\n+bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_a\n+----\n+\n+An error is still returned, but this time it is `Not authorized to access topics: [x_messages]`.\n+\n+`Dev Team A` has no `Read` access on topics that start with 'x_'.\n+\n+User `bob` should can read from or write to any topic:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16582f6c776ff4ccd240537a7873a8aae60cbda8"}, "originalPosition": 456}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NTUwOTI2OnYy", "diffSide": "RIGHT", "path": ".azure/scripts/check_docs.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMToxMTowNVrOICPMVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNTozOTo0N1rOICbIZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIxNjk4MA==", "bodyText": "Is this change still needed? I think the issue was fixed in #3988 in the meantime.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r539216980", "createdAt": "2020-12-09T11:11:05Z", "author": {"login": "scholzj"}, "path": ".azure/scripts/check_docs.sh", "diffHunk": "@@ -25,7 +25,7 @@ function grep_check {\n # Check for latin abbrevs\n grep_check '[^[:alpha:]](e\\.g\\.|eg)[^[:alpha:]]' \"Replace 'e.g'. with 'for example, '\"\n grep_check '[^[:alpha:]](i\\.e\\.|ie)[^[:alpha:]]' \"Replace 'i.e'. with 'that is, '\"\n-grep_check '[^[:alpha:]]etc\\.[^[:alpha:]]?' \"Replace 'etc.'. with ' and so on.'\"\n+grep_check '[^[:alpha:]]etc[\\.\\n\\r\\s]' \"Replace 'etc.'. with ' and so on.'\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "147eb37597a702d2d77ee065e4bc7da8d40600ce"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQxMjU4Mg==", "bodyText": "Looks like with #3988 it's not needed. I'll rebase the PR ...", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r539412582", "createdAt": "2020-12-09T15:39:47Z", "author": {"login": "mstruk"}, "path": ".azure/scripts/check_docs.sh", "diffHunk": "@@ -25,7 +25,7 @@ function grep_check {\n # Check for latin abbrevs\n grep_check '[^[:alpha:]](e\\.g\\.|eg)[^[:alpha:]]' \"Replace 'e.g'. with 'for example, '\"\n grep_check '[^[:alpha:]](i\\.e\\.|ie)[^[:alpha:]]' \"Replace 'i.e'. with 'that is, '\"\n-grep_check '[^[:alpha:]]etc\\.[^[:alpha:]]?' \"Replace 'etc.'. with ' and so on.'\"\n+grep_check '[^[:alpha:]]etc[\\.\\n\\r\\s]' \"Replace 'etc.'. with ' and so on.'\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIxNjk4MA=="}, "originalCommit": {"oid": "147eb37597a702d2d77ee065e4bc7da8d40600ce"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NTUzMTUyOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMToxNjoxOFrOICPZVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxODowMDo0MlrOIS7tJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIyMDMxMA==", "bodyText": "I'm not sure we want to have this in the documentation. The installation should just link to Keycloak docs. That makes it clear that it is their responsibility. I think this docs should just start from the assumption that the user installed Keycloak with whatever their preferred method is.\nAnd even if others think it should be here, it should definitely:\n\nnot point to master but needs to point to a tag with the release used in given Strimzi release.\nHave a clear warning that this is not any secure production deployment.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r539220310", "createdAt": "2020-12-09T11:16:18Z", "author": {"login": "scholzj"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,461 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We then connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token-based authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization, a custom authorizer is configured on the Kafka broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting the pods", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "147eb37597a702d2d77ee065e4bc7da8d40600ce"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQyNDA5Mw==", "bodyText": "This is an example of integration of Kafka with Keycloak, and the yamls are specifically configured to automatically import example realms that the example needs in order to work. These yamls are part of strimzi-kafka-oauth examples. If you have no ready-made way to set up the example as it was intended, then this whole chapter is quite useless. And Strimzi example is not a concern of the Keycloak project. Also, the example chapter is really the reason for this PR. There is no Kubernetes based example anywhere else.\nPointing to a release tag is a great idea. Is there a mechanism in place that allows this, or is it something we have to develop?\nWe can also add a warning about this being just an insecure example, sure.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r539424093", "createdAt": "2020-12-09T15:52:49Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,461 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We then connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token-based authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization, a custom authorizer is configured on the Kafka broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting the pods", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIyMDMxMA=="}, "originalCommit": {"oid": "147eb37597a702d2d77ee065e4bc7da8d40600ce"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYwMTYyMg==", "bodyText": "This is an example of integration of Kafka with Keycloak, and the yamls are specifically configured to automatically import example realms that the example needs in order to work.\n\nI'm not sure this helps to be honest. Because you give them ready to use environment to play with it, but then you tell them that this is for nothing else then playing. So they would need to deploy it differently and then they would not know how to import the things?\n\nPointing to a release tag is a great idea. Is there a mechanism in place that allows this, or is it something we have to develop?\n\nThere is variable oauth-artifact-version which should have the OAuth library version (which is the same as GitHub tag).\n\nWe can also add a warning about this being just an insecure example, sure.\n\nNot just insecure, but mainly not production ready. So I guess the warning should be for both.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r539601622", "createdAt": "2020-12-09T19:53:44Z", "author": {"login": "scholzj"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,461 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We then connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token-based authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization, a custom authorizer is configured on the Kafka broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting the pods", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIyMDMxMA=="}, "originalCommit": {"oid": "147eb37597a702d2d77ee065e4bc7da8d40600ce"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ0MjE2OA==", "bodyText": "@mstruk Can you look at this so that we can merge this?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r554442168", "createdAt": "2021-01-09T16:01:16Z", "author": {"login": "scholzj"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,461 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We then connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token-based authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization, a custom authorizer is configured on the Kafka broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting the pods", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIyMDMxMA=="}, "originalCommit": {"oid": "147eb37597a702d2d77ee065e4bc7da8d40600ce"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA0MTk5MA==", "bodyText": "There's several issues mentioned here:\n\nthis content should in your opinion not be here - there should be a pointer to Keycloak documentation and then just instructions on how to import the realms. Problem: Importing the realm is only possible by mounting the realm file in yaml and deploying a new pod definition - it can not be done through UI on the existing running Keycloak instance because all the passwords, and secrets are lost in that case. But then the existing instructions do just that.\nneed to use the oauth-artifact-version variable\nadd warnings\n\nWould addressing the last two issues be good enough?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r555041990", "createdAt": "2021-01-11T13:22:26Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,461 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We then connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token-based authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization, a custom authorizer is configured on the Kafka broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting the pods", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIyMDMxMA=="}, "originalCommit": {"oid": "147eb37597a702d2d77ee065e4bc7da8d40600ce"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA0OTkyMA==", "bodyText": "I guess I gave up on the first point I guess. WDYT @strimzi/maintainers?\nThe second and third point should be fixed.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r555049920", "createdAt": "2021-01-11T13:35:39Z", "author": {"login": "scholzj"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,461 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We then connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token-based authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization, a custom authorizer is configured on the Kafka broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting the pods", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIyMDMxMA=="}, "originalCommit": {"oid": "147eb37597a702d2d77ee065e4bc7da8d40600ce"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjcyMzQ5NQ==", "bodyText": "Added the variables, and a caution note.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r556723495", "createdAt": "2021-01-13T18:00:42Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,461 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We then connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token-based authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization, a custom authorizer is configured on the Kafka broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting the pods", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIyMDMxMA=="}, "originalCommit": {"oid": "147eb37597a702d2d77ee065e4bc7da8d40600ce"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NTU0Njk0OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMToyMDowMFrOICPiVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxMzoyNDowMlrOIRVIfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIyMjYxMw==", "bodyText": "Is this replaced with the right tag at release time? I think it needs to enable replacing variables in the snipper and use some variable which is fixed at release time to create stabel documentation.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r539222613", "createdAt": "2020-12-09T11:20:00Z", "author": {"login": "scholzj"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,461 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We then connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token-based authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization, a custom authorizer is configured on the Kafka broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting the pods\n+\n+For this example, we use the kubernetes deployment scripts available at https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes:\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on the Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+We login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Then we use a browser to connect to `http://localhost:8080/auth/admin` using `admin` as username and password.\n+\n+The default view usually displays the *Master* realm.\n+For this example we are interested in the `kafka-authz` realm, which you can select in the upper left corner.\n+\n+Initially, the *Realm Settings* section is selected, but you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak, groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, you can view all defined users. For this example, `alice` and `bob` are defined. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak, users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations. For this eaxmple,  `kafka`, `kafka-cli`, `team-a-client`, `team-b-client` are configured.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources, as explained in xref:keycloak_authorization_services_model_for_managing_permissions[Keycloak Authorization Services model for managing permissions].\n+\n+From *Authorization* / *Permissions* you can see the granted permissions that use resources and policies defined from other *Resources* and *Policies* tabs. For example, the `kafka` client has the following permissions:\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+`Dev Team A can write to topics that start with x_ on any cluster` combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team A`.\n+\n+`Dev Team B can read from topics that start with x_ on any cluster` combines `Topic:x_*`, and `Group:x_*` resources, scopes `Describe` and `Read`, and `Dev Team B` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team B`. Matching users and clients have the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with `x_`.\n+\n+== Targeting permissions using group or role policies\n+\n+In Keycloak, confidential clients with service accounts enabled can authenticate to the server in their own name using a client ID and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use group policies, and should instead use role policies.\n+Conversely, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the group policies, rather than the role policies.\n+That is what is used for permissions that start with `ClusterManager`.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case, the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in action using CLI clients\n+\n+Make sure that authorization rules have been properly imported.\n+\n+From menu:Clients[kafka>Authorization>Settings] make sure that *Decision Strategy* is set to *Affirmative*, and NOT to *Unanimous*.\n+Navigate in Keycloak to check that the expected resources, authorization claims, policies and permissions are defined.\n+\n+With the configuration in place, we can check access to Kafka by using a producer and consumer to create topics using different user and service accounts.\n+\n+First, a new interactive pod container is run using a Strimzi Kafka image to connect to a running Kafka broker.\n+\n+[source,shell]\n+----\n+kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "147eb37597a702d2d77ee065e4bc7da8d40600ce"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQyNTAxNw==", "bodyText": "Do we have a mechanism like that for the docs?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r539425017", "createdAt": "2020-12-09T15:53:55Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,461 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We then connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token-based authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization, a custom authorizer is configured on the Kafka broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting the pods\n+\n+For this example, we use the kubernetes deployment scripts available at https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes:\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on the Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+We login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Then we use a browser to connect to `http://localhost:8080/auth/admin` using `admin` as username and password.\n+\n+The default view usually displays the *Master* realm.\n+For this example we are interested in the `kafka-authz` realm, which you can select in the upper left corner.\n+\n+Initially, the *Realm Settings* section is selected, but you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak, groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, you can view all defined users. For this example, `alice` and `bob` are defined. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak, users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations. For this eaxmple,  `kafka`, `kafka-cli`, `team-a-client`, `team-b-client` are configured.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources, as explained in xref:keycloak_authorization_services_model_for_managing_permissions[Keycloak Authorization Services model for managing permissions].\n+\n+From *Authorization* / *Permissions* you can see the granted permissions that use resources and policies defined from other *Resources* and *Policies* tabs. For example, the `kafka` client has the following permissions:\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+`Dev Team A can write to topics that start with x_ on any cluster` combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team A`.\n+\n+`Dev Team B can read from topics that start with x_ on any cluster` combines `Topic:x_*`, and `Group:x_*` resources, scopes `Describe` and `Read`, and `Dev Team B` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team B`. Matching users and clients have the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with `x_`.\n+\n+== Targeting permissions using group or role policies\n+\n+In Keycloak, confidential clients with service accounts enabled can authenticate to the server in their own name using a client ID and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use group policies, and should instead use role policies.\n+Conversely, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the group policies, rather than the role policies.\n+That is what is used for permissions that start with `ClusterManager`.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case, the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in action using CLI clients\n+\n+Make sure that authorization rules have been properly imported.\n+\n+From menu:Clients[kafka>Authorization>Settings] make sure that *Decision Strategy* is set to *Affirmative*, and NOT to *Unanimous*.\n+Navigate in Keycloak to check that the expected resources, authorization claims, policies and permissions are defined.\n+\n+With the configuration in place, we can check access to Kafka by using a producer and consumer to create topics using different user and service accounts.\n+\n+First, a new interactive pod container is run using a Strimzi Kafka image to connect to a running Kafka broker.\n+\n+[source,shell]\n+----\n+kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIyMjYxMw=="}, "originalCommit": {"oid": "147eb37597a702d2d77ee065e4bc7da8d40600ce"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU5OTEyNg==", "bodyText": "There is variable DockerKafkaImageCurrent which this. So you need to enable the variable substitution and use something like this:\nkubectl run -ti --rm --restart=Never --image={DockerKafkaImageCurrent}", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r539599126", "createdAt": "2020-12-09T19:49:51Z", "author": {"login": "scholzj"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,461 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We then connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token-based authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization, a custom authorizer is configured on the Kafka broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting the pods\n+\n+For this example, we use the kubernetes deployment scripts available at https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes:\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on the Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+We login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Then we use a browser to connect to `http://localhost:8080/auth/admin` using `admin` as username and password.\n+\n+The default view usually displays the *Master* realm.\n+For this example we are interested in the `kafka-authz` realm, which you can select in the upper left corner.\n+\n+Initially, the *Realm Settings* section is selected, but you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak, groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, you can view all defined users. For this example, `alice` and `bob` are defined. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak, users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations. For this eaxmple,  `kafka`, `kafka-cli`, `team-a-client`, `team-b-client` are configured.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources, as explained in xref:keycloak_authorization_services_model_for_managing_permissions[Keycloak Authorization Services model for managing permissions].\n+\n+From *Authorization* / *Permissions* you can see the granted permissions that use resources and policies defined from other *Resources* and *Policies* tabs. For example, the `kafka` client has the following permissions:\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+`Dev Team A can write to topics that start with x_ on any cluster` combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team A`.\n+\n+`Dev Team B can read from topics that start with x_ on any cluster` combines `Topic:x_*`, and `Group:x_*` resources, scopes `Describe` and `Read`, and `Dev Team B` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team B`. Matching users and clients have the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with `x_`.\n+\n+== Targeting permissions using group or role policies\n+\n+In Keycloak, confidential clients with service accounts enabled can authenticate to the server in their own name using a client ID and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use group policies, and should instead use role policies.\n+Conversely, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the group policies, rather than the role policies.\n+That is what is used for permissions that start with `ClusterManager`.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case, the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in action using CLI clients\n+\n+Make sure that authorization rules have been properly imported.\n+\n+From menu:Clients[kafka>Authorization>Settings] make sure that *Decision Strategy* is set to *Affirmative*, and NOT to *Unanimous*.\n+Navigate in Keycloak to check that the expected resources, authorization claims, policies and permissions are defined.\n+\n+With the configuration in place, we can check access to Kafka by using a producer and consumer to create topics using different user and service accounts.\n+\n+First, a new interactive pod container is run using a Strimzi Kafka image to connect to a running Kafka broker.\n+\n+[source,shell]\n+----\n+kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIyMjYxMw=="}, "originalCommit": {"oid": "147eb37597a702d2d77ee065e4bc7da8d40600ce"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ0MjE1Nw==", "bodyText": "@mstruk Can you look at this so that we can merge this?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r554442157", "createdAt": "2021-01-09T16:01:06Z", "author": {"login": "scholzj"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,461 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We then connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token-based authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization, a custom authorizer is configured on the Kafka broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting the pods\n+\n+For this example, we use the kubernetes deployment scripts available at https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes:\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on the Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+We login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Then we use a browser to connect to `http://localhost:8080/auth/admin` using `admin` as username and password.\n+\n+The default view usually displays the *Master* realm.\n+For this example we are interested in the `kafka-authz` realm, which you can select in the upper left corner.\n+\n+Initially, the *Realm Settings* section is selected, but you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak, groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, you can view all defined users. For this example, `alice` and `bob` are defined. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak, users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations. For this eaxmple,  `kafka`, `kafka-cli`, `team-a-client`, `team-b-client` are configured.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources, as explained in xref:keycloak_authorization_services_model_for_managing_permissions[Keycloak Authorization Services model for managing permissions].\n+\n+From *Authorization* / *Permissions* you can see the granted permissions that use resources and policies defined from other *Resources* and *Policies* tabs. For example, the `kafka` client has the following permissions:\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+`Dev Team A can write to topics that start with x_ on any cluster` combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team A`.\n+\n+`Dev Team B can read from topics that start with x_ on any cluster` combines `Topic:x_*`, and `Group:x_*` resources, scopes `Describe` and `Read`, and `Dev Team B` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team B`. Matching users and clients have the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with `x_`.\n+\n+== Targeting permissions using group or role policies\n+\n+In Keycloak, confidential clients with service accounts enabled can authenticate to the server in their own name using a client ID and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use group policies, and should instead use role policies.\n+Conversely, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the group policies, rather than the role policies.\n+That is what is used for permissions that start with `ClusterManager`.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case, the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in action using CLI clients\n+\n+Make sure that authorization rules have been properly imported.\n+\n+From menu:Clients[kafka>Authorization>Settings] make sure that *Decision Strategy* is set to *Affirmative*, and NOT to *Unanimous*.\n+Navigate in Keycloak to check that the expected resources, authorization claims, policies and permissions are defined.\n+\n+With the configuration in place, we can check access to Kafka by using a producer and consumer to create topics using different user and service accounts.\n+\n+First, a new interactive pod container is run using a Strimzi Kafka image to connect to a running Kafka broker.\n+\n+[source,shell]\n+----\n+kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIyMjYxMw=="}, "originalCommit": {"oid": "147eb37597a702d2d77ee065e4bc7da8d40600ce"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA0Mjk0MQ==", "bodyText": "Ok, here it's just replacing the constants with a variable.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r555042941", "createdAt": "2021-01-11T13:24:02Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,461 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We then connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token-based authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization, a custom authorizer is configured on the Kafka broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting the pods\n+\n+For this example, we use the kubernetes deployment scripts available at https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes:\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on the Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+We login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Then we use a browser to connect to `http://localhost:8080/auth/admin` using `admin` as username and password.\n+\n+The default view usually displays the *Master* realm.\n+For this example we are interested in the `kafka-authz` realm, which you can select in the upper left corner.\n+\n+Initially, the *Realm Settings* section is selected, but you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak, groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, you can view all defined users. For this example, `alice` and `bob` are defined. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak, users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations. For this eaxmple,  `kafka`, `kafka-cli`, `team-a-client`, `team-b-client` are configured.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources, as explained in xref:keycloak_authorization_services_model_for_managing_permissions[Keycloak Authorization Services model for managing permissions].\n+\n+From *Authorization* / *Permissions* you can see the granted permissions that use resources and policies defined from other *Resources* and *Policies* tabs. For example, the `kafka` client has the following permissions:\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+`Dev Team A can write to topics that start with x_ on any cluster` combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team A`.\n+\n+`Dev Team B can read from topics that start with x_ on any cluster` combines `Topic:x_*`, and `Group:x_*` resources, scopes `Describe` and `Read`, and `Dev Team B` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team B`. Matching users and clients have the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with `x_`.\n+\n+== Targeting permissions using group or role policies\n+\n+In Keycloak, confidential clients with service accounts enabled can authenticate to the server in their own name using a client ID and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use group policies, and should instead use role policies.\n+Conversely, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the group policies, rather than the role policies.\n+That is what is used for permissions that start with `ClusterManager`.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case, the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in action using CLI clients\n+\n+Make sure that authorization rules have been properly imported.\n+\n+From menu:Clients[kafka>Authorization>Settings] make sure that *Decision Strategy* is set to *Affirmative*, and NOT to *Unanimous*.\n+Navigate in Keycloak to check that the expected resources, authorization claims, policies and permissions are defined.\n+\n+With the configuration in place, we can check access to Kafka by using a producer and consumer to create topics using different user and service accounts.\n+\n+First, a new interactive pod container is run using a Strimzi Kafka image to connect to a running Kafka broker.\n+\n+[source,shell]\n+----\n+kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIyMjYxMw=="}, "originalCommit": {"oid": "147eb37597a702d2d77ee065e4bc7da8d40600ce"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDMyMjU1OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDozNDo0OFrOH45puw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDozNDo0OFrOH45puw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQyNjg3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n          \n          \n            \n            Each resource can contain a list of authorization scopes - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529426875", "createdAt": "2020-11-24T10:34:48Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDMyNTI0OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDozNToxM1rOH45roQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDozNToxM1rOH45roQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQyNzM2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n          \n          \n            \n            Policies define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529427361", "createdAt": "2020-11-24T10:35:13Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDMzODk2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDozNzoxMVrOH450Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDozNzoxMVrOH450Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQyOTYwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n          \n          \n            \n            Finally, permissions tie together the resources, authorization scopes and policies that specify _users U can perform actions A on resource R_.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529429603", "createdAt": "2020-11-24T10:37:11Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDM3MjY1OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDo0MTo1MlrOH46Kog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDo0MjoxNlrOH46Mbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQzNTI5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n          \n          \n            \n            For more information about Keycloak Authorization Services, see {keycloak-authorization-services}, but note that the Authorization Services documentation is focused primarily on using the Authorization Services to protect web resources rather than access to Kafka.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529435298", "createdAt": "2020-11-24T10:41:52Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQzNTc1OA==", "bodyText": "We have an attribute for this link.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529435758", "createdAt": "2020-11-24T10:42:16Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQzNTI5OA=="}, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDM5NzIwOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDo0NToxOVrOH46awg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDo0NToxOVrOH46awg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQzOTQyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n          \n          \n            \n            These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n          \n          \n            \n            The format is quite simple. For example:\n          \n          \n            \n            When viewing resources from the Keycloak user interface you will see a list of resource definitions.\n          \n          \n            \n            These are resource specifiers, patterns in a specific format that are used to target policies to specific resources.\n          \n          \n            \n            For example, this pattern targets only topics in kafka cluster `cluster-1` with names starting with `a_`:", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529439426", "createdAt": "2020-11-24T10:45:19Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDQ1ODY5OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDo1Mzo1NFrOH47DLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDo1Mzo1NFrOH47DLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ0OTc3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Topic:my-topic\n          \n          \n            \n                Group:my-group-*\n          \n          \n            \n            ----\n          \n          \n            \n            Topic:my-topic\n          \n          \n            \n            Group:my-group-*\n          \n          \n            \n            ----", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529449772", "createdAt": "2020-11-24T10:53:54Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,204 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Managing policies and permissions in Keycloak Authorization Services\n+\n+== Kafka authorization model for resources\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and the permissions available for each type.\n+When an action is performed by a Kafka client on a broker, the broker uses a configured authorizer to check permissions, depending on the action performed and the resource type.\n+\n+Kafka has five resource types for controlling access: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+Each resource type has different permissions:\n+\n+Topic:\n+\n+* `Create`\n+* `Write`\n+* `Read`\n+* `Delete`\n+* `Describe`\n+* `DescribeConfigs`\n+* `Alter`\n+* `AlterConfigs`\n+\n+Group:\n+\n+* `Read`\n+* `Describe`\n+* `Delete`\n+\n+Cluster:\n+\n+*  `Create`\n+*  `Describe`\n+*  `Alter`\n+*  `DescribeConfigs`\n+*  `AlterConfigs`\n+*  `IdempotentWrite`\n+*  `ClusterAction`\n+\n+TransactionalId:\n+\n+*  `Describe`\n+*  `Write`\n+\n+DelegationToken:\n+\n+* `Describe`\n+\n+== Keycloak Authorization Services model for managing permissions\n+\n+Keycloak Authorization Services use four concepts to define and grant permissions: _resources_, _authorization scopes_, _policies_, and _permissions_.\n+\n+Resources:: Resources are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with the same prefix.\n+The resource definition has a set of available authorization scopes associated with it, which represent a set of all actions available on the particular resource.\n+Often, only a subset of these actions is actually permitted.\n+\n+Authorization scopes:: Authorization scopes is simply a set of all available actions on all the different resource types. When defining a new resource,  scopes are added from the set of all scopes.\n+\n+Policies:: Policies are rules that use criteria to match a list of accounts. Policies can match service accounts based on client id or roles, or user accounts based on username, groups, or roles.\n+\n+Permissions:: Permissions grant a subset of authorization scopes on a specific resource definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+Use Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker to grant Kafka permissions to users or service accounts. Typically, the OAuth client has `kafka` as its client id.\n+\n+The OAuth 2.0 client definition must have the _Authorization Enabled_ option activated.\n+\n+All permissions exist within the scope of this OAuth 2.0 client, which means that if you have different Kafka clusters configured with different OAuth 2.0 client IDs they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client use the _SASL OAUTHBEARER_ mechanism, the Keycloak authorizer (`KeycloakRBACAuthorizer`) retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Introducing authorization scopes\n+\n+Typically, an initial configuration involves uploading the authorization scopes to create a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, you can add authorization scopes manually.\n+\n+The authorization scopes should contain all the possible Kafka permissions regardless of the resource type:\n+\n+* `Create`\n+* `Write`\n+* `Read`\n+* `Delete`\n+* `Describe`\n+* `Alter`\n+* `DescribeConfig`\n+* `AlterConfig`\n+* `ClusterAction`\n+* `IdempotentWrite`\n+\n+.Defining resource patterns for permission checks\n+\n+The resources use pattern names for pattern matching against the targeted resources when performing permission checks.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+.Example patterns for resources\n+    Topic:my-topic\n+    Topic:orders-*\n+    Group:orders-*\n+    Cluster:*\n+\n+In addition, the general pattern can be prefixed by `kafka-cluster:CLUSTER_NAME` followed by a comma, where the cluster name refers to the `metadata.name` in the Kafka custom resource.\n+\n+.Example patterns for resources with cluster prefix\n+    kafka-cluster:my-cluster,Topic:*\n+    kafka-cluster:*,Group:b_*\n+\n+When the `kafka-cluster` prefix is not present it is assumed to be `kafka-cluster:*`.\n+\n+When defining a resource, you can associate a list of possible authorization scopes relevant to the resource.\n+Set whatever actions make sense for the targeted resource type.\n+\n+While you may add any authorization scope to any resource, only the scopes supported by the resource type are considered for access control.\n+\n+.Policies\n+\n+Policies are used to target permissions to one or more accounts.\n+Targeting can refer to:\n+* Specific user or service accounts\n+* Realm roles or client roles\n+* User groups\n+* JS rule to match a client IP address\n+\n+A policy is given a unique name, and can be reused to target multiple permissions to multiple resources.\n+\n+.Defining permissions based on scopes, resources and policies \n+\n+Use fine-grained permissions to pull together the policies, resources, and authorization scopes that grant access to users.\n+\n+\n+The name of the each permission should should clearly define what permissions it grants to which users.\n+\n+For more information on how to configure permissions through Keycloak Authorization Services, see xref:con-oauth-authorization-keycloak-example_str[the authorization example].\n+\n+\n+== Example permissions required for operations on Kafka\n+\n+The following  examples demonstrate the permissions required for performing common operations on Kafka.\n+\n+.Creating a topic\n+\n+To create a topic the `Create` permission is required for the specific topic or `Cluster:kafka-cluster`.\n+\n+.Displaying the topic info\n+\n+To display the info on the topic the `Describe` permission is required for the specific topic.\n+\n+.Producing to the topic\n+\n+To produce to the topic the user needs `Describe` and `Write` permissions on the topic.\n+If topic has not yet been created, and autocreation is enabled, the permissions to create the topic are required.\n+\n+.Consuming from the topic\n+\n+To consume from the topic the user needs `Describe` and `Read` permissions on the topic.\n+Consuming from the topic normally relies on storing the consumer offsets in a consumer group.\n+That requires additional `Describe` and `Read` permissions on the consumer group.\n+\n+Two `resources` are needed for matching. For example:\n+\n+    Topic:my-topic\n+    Group:my-group-*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDY4NTY2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTo0ODowNVrOH49OUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTo0ODowNVrOH49OUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ4NTM5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n          \n          \n            \n            ----\n          \n          \n            \n            kafka-cluster:cluster-1,Topic:a_*  \n          \n          \n            \n            ----", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529485392", "createdAt": "2020-11-24T11:48:05Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDY5NDYwOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTo1MDozNlrOH49T_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTo1MDozNlrOH49T_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ4Njg0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n          \n          \n            \n            \n          \n          \n            \n            - `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n          \n          \n            \n            If a cluster is not specified by name ( `kafka-cluster:cluster-1`), the specifier targets any cluster. For example, this pattern targets any cluster with a name starting  `x_`:\n          \n          \n            \n            ----\n          \n          \n            \n            Group:x_* \n          \n          \n            \n            ----", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529486846", "createdAt": "2020-11-24T11:50:36Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDcwNDMzOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTo1MzoyNFrOH49aCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTo1MzoyNFrOH49aCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ4ODM5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n          \n          \n            \n            The possible resource types, such as `Topic`, `Group` and `Cluster`, mirror the xref:kafka_authorization_model[Kafka authorization model].", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529488395", "createdAt": "2020-11-24T11:53:24Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDcwOTM2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTo1NDo0MVrOH49c6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTo1NDo0MVrOH49c6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ4OTEzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n          \n          \n            \n            *Authorization Scopes* lists of all the possible actions (Kafka permissions) that can be granted on specific resources.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529489131", "createdAt": "2020-11-24T11:54:41Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDcxMjc5OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTo1NTozN1rOH49e-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTo1NTozN1rOH49e-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ4OTY1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This list mirrors Kafka permissions and should be the same for any deployment.\n          \n          \n            \n            The list of actions mirrors Kafka permissions and is the same for any deployment.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529489656", "createdAt": "2020-11-24T11:55:37Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTU0MzkyOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNToxMDo1OFrOH5FZtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNToxMDo1OFrOH5FZtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYxOTM4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n          \n          \n            \n            In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n          \n          \n            \n            For this example the authorization scopes have already been imported as part of the realm import.\n          \n          \n            \n            Rather than importing authorization scopes manually into every new client, you can use a link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file.\n          \n          \n            \n            \n          \n          \n            \n            You must make sure that the client is enabled in Keycloak for Authorization Services. After which, you can import a JSON file from the *Authorization* tab. You can see the loaded scopes from the *Authorization Scopes* page.\n          \n          \n            \n            \n          \n          \n            \n            For this example the authorization scopes have already been imported as part of the realm import.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529619380", "createdAt": "2020-11-24T15:10:58Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTU1NDQ3OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNToxMzowNFrOH5FgIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNToxMzowNFrOH5FgIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYyMTAyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Under the `Policies` sub-tab there are filters that match sets of users.\n          \n          \n            \n            The *Policies* tab has filters that match sets of users.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529621025", "createdAt": "2020-11-24T15:13:04Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTU1NzI1OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNToxMzo0NVrOH5Fh7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNToxMzo0NVrOH5Fh7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYyMTQ4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n          \n          \n            \n            Users can be explicitly listed, or they can be matched based on the roles, or groups they are assigned.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529621484", "createdAt": "2020-11-24T15:13:45Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTU5NDcyOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNToyMDo1MFrOH5F4-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNToyMDo1MFrOH5F4-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYyNzM4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n          \n          \n            \n            Policies can even be defined programmatically using JavaScript so the logic considers the context of the client session, such as the IP of a Kafka client.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529627384", "createdAt": "2020-11-24T15:20:50Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTYxMDkwOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNToyNDoxMVrOH5GDHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNToyNDoxMVrOH5GDHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYyOTk4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n          \n          \n            \n            The *Permissions* tab defines role bindings that associate resources, authorization scopes and policies for applying a set of permissions on specific resources for certain users.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529629980", "createdAt": "2020-11-24T15:24:11Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTYxOTM4OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNToyNTozMVrOH5GImg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNToyNTozMVrOH5GImg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYzMTM4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n          \n          \n            \n            Use a clear, descriptive name for each permission definition so that it is obvious what kind of access is granted to which users.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529631386", "createdAt": "2020-11-24T15:25:31Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTYzMTM2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNToyNzowMFrOH5GQcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNToyNzowMFrOH5GQcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYzMzM5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Dev Team A can write to topics that start with x_ on any cluster\n          \n          \n            \n            \n          \n          \n            \n                Dev Team B can read from topics that start with x_ on any cluster\n          \n          \n            \n                Dev Team B can update consumer group offsets that start with x_ on any cluster\n          \n          \n            \n            \n          \n          \n            \n                ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n          \n          \n            \n                ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n          \n          \n            \n                ClusterManager of my-cluster Group has full access to topics on my-cluster\n          \n          \n            \n            ----\n          \n          \n            \n            Dev Team A can write to topics that start with x_ on any cluster\n          \n          \n            \n            Dev Team B can read from topics that start with x_ on any cluster\n          \n          \n            \n            Dev Team B can update consumer group offsets that start with x_ on any cluster\n          \n          \n            \n            ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n          \n          \n            \n            ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n          \n          \n            \n            ClusterManager of my-cluster Group has full access to topics on my-cluster\n          \n          \n            \n            ----", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529633392", "createdAt": "2020-11-24T15:27:00Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTYzOTUzOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNToyNzo1M1rOH5GVzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNToyNzo1M1rOH5GVzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYzNDc2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ## Authorization in Action Using CLI Clients\n          \n          \n            \n            == Authorization in action using CLI clients", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529634764", "createdAt": "2020-11-24T15:27:53Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTg0MjkxOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNTo1MjoxNVrOH5IcuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNTo1MjoxNVrOH5IcuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY2OTMwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n          \n          \n            \n            If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n          \n          \n            \n            \n          \n          \n            \n            Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n          \n          \n            \n            The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n          \n          \n            \n            `Dev Team A can write to topics that start with x_ on any cluster` combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team A`.\n          \n          \n            \n            \n          \n          \n            \n            `Dev Team B can read from topics that start with x_ on any cluster` combines `Topic:x_*`, and `Group:x_*` resources, scopes `Describe` and `Read`, and `Dev Team B` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team B`. Matching users and clients have the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with `x_`.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529669304", "createdAt": "2020-11-24T15:52:15Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTg0NzE1OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNTo1Mjo0NlrOH5Ifjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNTo1Mjo0NlrOH5Ifjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY3MDAzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ## Targeting Permissions - Clients and Roles vs. Users and Groups\n          \n          \n            \n            == Targeting permissions using group or role policies", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529670030", "createdAt": "2020-11-24T15:52:46Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTg3ODA2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNTo1NjoyMlrOH5Iz9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDoyMzoyN1rOH5sp5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY3NTI1NA==", "bodyText": "Maybe start the section with:\nWhether you use group or role policies to control access is dependent on the type of access. Generally, you will use roles for client access, and groups for user access.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529675254", "createdAt": "2020-11-24T15:56:22Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI2MjUwMQ==", "bodyText": "I don't think this is quite true. Users may easily decide to not use groups at all, and to only use roles for all types of accounts.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530262501", "createdAt": "2020-11-25T10:23:27Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY3NTI1NA=="}, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTg4Njc1OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNTo1NzoyMVrOH5I5yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNTo1NzoyMVrOH5I5yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY3Njc0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n          \n          \n            \n            In Keycloak, confidential clients with service accounts enabled can authenticate to the server in their own name using a client ID and a secret.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529676744", "createdAt": "2020-11-24T15:57:21Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTg5MDk0OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNTo1Nzo0OFrOH5I8UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNTo1Nzo0OFrOH5I8UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY3NzM5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n          \n          \n            \n            As a consequence, if you want to target permissions to microservices using service accounts, you cannot use group policies, and should instead use role policies.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529677393", "createdAt": "2020-11-24T15:57:48Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTg5NTc2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNTo1ODoyNlrOH5I_vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNTo1ODoyNlrOH5I_vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY3ODI3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n          \n          \n            \n            Conversely, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the group policies, rather than the role policies.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529678271", "createdAt": "2020-11-24T15:58:26Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTkwMzQ4OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNTo1OToyMFrOH5JFCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNTo1OToyMFrOH5JFCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY3OTYyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            That's what we see used in `permissions` that start with 'ClusterManager'.\n          \n          \n            \n            That is what is used for permissions that start with `ClusterManager`.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529679625", "createdAt": "2020-11-24T15:59:20Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTkxMTY4OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjowMDoxNVrOH5JKgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjowMDoxNVrOH5JKgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY4MTAyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n          \n          \n            \n            It makes sense to require the user to log in, before using the resulting access token to authenticate to the Kafka Broker.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529681026", "createdAt": "2020-11-24T16:00:15Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTkxODEwOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjowMTowM1rOH5JO7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjowMTowM1rOH5JO7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY4MjE1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In this case the access token represents the specific user, rather than the client application.\n          \n          \n            \n            In this case, the access token represents the specific user, rather than the client application.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529682158", "createdAt": "2020-11-24T16:01:03Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTk0NTAwOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjowNDowMlrOH5Jgmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDo0OTo1NVrOH65zgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY4NjY4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n          \n          \n            \n            Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n          \n          \n            \n            Before trying any new authorization configuration, make sure that authorization rules have been properly imported when Keycloak starts.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529686682", "createdAt": "2020-11-24T16:04:02Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI2ODAxNg==", "bodyText": "This doesn't sound right to me. The check here in the example refers to a particular bug that should already be gone. I wouldn't add this check as a regular procedure each time you import the authorization rules.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530268016", "createdAt": "2020-11-25T10:31:58Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY4NjY4Mg=="}, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA0OTQzNA==", "bodyText": "Can we drop this section then? Concerned about future-proofing the content", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531049434", "createdAt": "2020-11-26T14:02:52Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY4NjY4Mg=="}, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxMDg5Mw==", "bodyText": "Ok. Let's drop it then.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531510893", "createdAt": "2020-11-27T10:23:52Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY4NjY4Mg=="}, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUyNjUzMA==", "bodyText": "Or what if we just do it like this:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n          \n          \n            \n            Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n          \n          \n            \n            Make sure that authorization rules have been properly imported.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531526530", "createdAt": "2020-11-27T10:49:55Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY4NjY4Mg=="}, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTk1NDcwOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjowNToxMlrOH5Jmxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjowNToxMlrOH5Jmxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY4ODI2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Once the Kafka Broker has obtained an access token by using [Strimzi Kafka OAuth](https://github.com/strimzi/strimzi-kafka-oauth) for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n          \n          \n            \n            Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529688262", "createdAt": "2020-11-24T16:05:12Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,481 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using [Strimzi Kafka OAuth](https://github.com/strimzi/strimzi-kafka-oauth) for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eed9f30862feae58fc655d04a36186853b4df38d"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTk3Mzg4OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjowNzo1NFrOH5JzYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjowNzo1NFrOH5JzYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY5MTQ4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For this, Strimzi Kafka OAuth supports the use of Keycloak Authorization Services.\n          \n          \n            \n            For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529691489", "createdAt": "2020-11-24T16:07:54Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,481 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using [Strimzi Kafka OAuth](https://github.com/strimzi/strimzi-kafka-oauth) for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka OAuth supports the use of Keycloak Authorization Services.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eed9f30862feae58fc655d04a36186853b4df38d"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTk4NTIzOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjowOToyNFrOH5J6mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjowOToyNFrOH5J6mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY5MzMzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A custom authorizer has to be configured on the Kafka Broker to take advantage of the Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n          \n          \n            \n            When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529693337", "createdAt": "2020-11-24T16:09:24Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,481 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using [Strimzi Kafka OAuth](https://github.com/strimzi/strimzi-kafka-oauth) for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka OAuth supports the use of Keycloak Authorization Services.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of the Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eed9f30862feae58fc655d04a36186853b4df38d"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjA0OTY1OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjoxOTowNFrOH5Kixw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjoxOTowNFrOH5Kixw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcwMzYyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n          \n          \n            \n            From menu:Clients[kafka>Authorization>Settings] make sure that *Decision Strategy* is set to *Affirmative*, and NOT to *Unanimous*.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529703623", "createdAt": "2020-11-24T16:19:04Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjA1Mzk1OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjoxOTo1NlrOH5KlXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjoxOTo1NlrOH5KlXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcwNDI4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n          \n          \n            \n            Navigate in Keycloak to check that the expected resources, authorization claims, policies and permissions are defined.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529704284", "createdAt": "2020-11-24T16:19:56Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjA2NDE0OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjoyMjowNFrOH5Krqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjoyMjowNFrOH5Krqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcwNTg5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n          \n          \n            \n            With the configuration in place, we can check access to Kafka by using a producer and consumer to create topics using different user and service accounts.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529705898", "createdAt": "2020-11-24T16:22:04Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjExNTI1OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjozMzowNlrOH5LLRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDozMzozM1rOH5tDjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcxMzk5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n          \n          \n            \n            \n          \n          \n            \n                kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n          \n          \n            \n            First, a new interactive pod container is run using a Strimzi Kafka image to connect to a running Kafka broker.\n          \n          \n            \n            \n          \n          \n            \n            [source,shell]\n          \n          \n            \n            ----\n          \n          \n            \n            kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n          \n          \n            \n            ----", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529713991", "createdAt": "2020-11-24T16:33:06Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcxNTkwNA==", "bodyText": "Would this section be okay for a downstream doc? Are we expecting people to step through the example or is it intended for reference? Impact on testing.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529715904", "createdAt": "2020-11-24T16:35:42Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcxMzk5MQ=="}, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI2OTA2OQ==", "bodyText": "AFAIC it should be fine.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530269069", "createdAt": "2020-11-25T10:33:33Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcxMzk5MQ=="}, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjEzNzA0OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjozNzo0MVrOH5LYUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDozNDoxN1rOH5tFMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcxNzMyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n          \n          \n            \n            NOTE: If `kubectl` times out waiting on the image download, subsequent attempts may result in an _AlreadyExists_ error.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529717329", "createdAt": "2020-11-24T16:37:41Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcxNzc4Nw==", "bodyText": "Maybe we should say whether the error can be ignored or what is the workaround.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529717787", "createdAt": "2020-11-24T16:38:20Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcxNzMyOQ=="}, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI2OTQ5MA==", "bodyText": "The next line below is the workaround.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530269490", "createdAt": "2020-11-25T10:34:17Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcxNzMyOQ=="}, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjE0MzU5OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjozOTowOVrOH5LcaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjozOTowOVrOH5LcaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcxODM3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You can attach to the existing pod by running:\n          \n          \n            \n            \n          \n          \n            \n                kubectl attach -ti kafka-cli\n          \n          \n            \n            You can attach to the existing pod by running:\n          \n          \n            \n            \n          \n          \n            \n            [source,shell]\n          \n          \n            \n            ----\n          \n          \n            \n            kubectl attach -ti kafka-cli\n          \n          \n            \n            ----", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529718377", "createdAt": "2020-11-24T16:39:09Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjE0ODg1OnYy", "diffSide": "LEFT", "path": "documentation/modules/oauth/proc-oauth-authorization-broker-config.adoc", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjo0MDoxMVrOH5LfjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNDowNToxMlrOH6cxRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcxOTE4MA==", "bodyText": "Are we linking to the new sections instead?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529719180", "createdAt": "2020-11-24T16:40:11Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/proc-oauth-authorization-broker-config.adoc", "diffHunk": "@@ -24,7 +24,6 @@ NOTE: xref:property-simple-authorization-superusers-reference[Super users] alway\n * Strimzi must be configured to use OAuth 2.0 with Keycloak for xref:assembly-oauth-authentication_str[token-based authentication].\n You use the same Keycloak server endpoint when you set up authorization.\n * OAuth 2.0 authentication must be configured with the `maxSecondsWithoutReauthentication` option to enable re-authentication.\n-* You need to understand how to manage policies and permissions for Keycloak Authorization Services, as described in the {keycloak-server-doc}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxNTA0Mg==", "bodyText": "The new thing comes right after this chapter, and is not required for configuring the authorization in Strimzi, but for configuring the authorization rules in Keycloak. It's not a precondition / requirement for the steps that follow.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530415042", "createdAt": "2020-11-25T14:30:00Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/proc-oauth-authorization-broker-config.adoc", "diffHunk": "@@ -24,7 +24,6 @@ NOTE: xref:property-simple-authorization-superusers-reference[Super users] alway\n * Strimzi must be configured to use OAuth 2.0 with Keycloak for xref:assembly-oauth-authentication_str[token-based authentication].\n You use the same Keycloak server endpoint when you set up authorization.\n * OAuth 2.0 authentication must be configured with the `maxSecondsWithoutReauthentication` option to enable re-authentication.\n-* You need to understand how to manage policies and permissions for Keycloak Authorization Services, as described in the {keycloak-server-doc}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcxOTE4MA=="}, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA1MDgyMA==", "bodyText": "Okay", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531050820", "createdAt": "2020-11-26T14:05:12Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/proc-oauth-authorization-broker-config.adoc", "diffHunk": "@@ -24,7 +24,6 @@ NOTE: xref:property-simple-authorization-superusers-reference[Super users] alway\n * Strimzi must be configured to use OAuth 2.0 with Keycloak for xref:assembly-oauth-authentication_str[token-based authentication].\n You use the same Keycloak server endpoint when you set up authorization.\n * OAuth 2.0 authentication must be configured with the `maxSecondsWithoutReauthentication` option to enable re-authentication.\n-* You need to understand how to manage policies and permissions for Keycloak Authorization Services, as described in the {keycloak-server-doc}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcxOTE4MA=="}, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjE1MjUxOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjo0MDo1OVrOH5Lh2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjo0MDo1OVrOH5Lh2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcxOTc2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Let's try to produce some messages as client `team-a-client`.\n          \n          \n            \n            \n          \n          \n            \n            First, we prepare a Kafka client configuration file with authentication parameters.\n          \n          \n            \n            To produce messages as client `team-a-client`, we prepare a Kafka client configuration file with authentication parameters.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529719769", "createdAt": "2020-11-24T16:40:59Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjE3MzE4OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjo0NToyOVrOH5LucQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjo0NToyOVrOH5LucQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcyMjk5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ```\n          \n          \n            \n            cat > /tmp/team-a-client.properties << EOF\n          \n          \n            \n            security.protocol=SASL_PLAINTEXT\n          \n          \n            \n            sasl.mechanism=OAUTHBEARER\n          \n          \n            \n            sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n          \n          \n            \n              oauth.client.id=\"team-a-client\" \\\n          \n          \n            \n              oauth.client.secret=\"team-a-client-secret\" \\\n          \n          \n            \n              oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n          \n          \n            \n            sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n          \n          \n            \n            EOF\n          \n          \n            \n            ```\n          \n          \n            \n            [source,shell]\n          \n          \n            \n            ----\n          \n          \n            \n            cat > /tmp/team-a-client.properties << EOF\n          \n          \n            \n            security.protocol=SASL_PLAINTEXT\n          \n          \n            \n            sasl.mechanism=OAUTHBEARER\n          \n          \n            \n            sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n          \n          \n            \n              oauth.client.id=\"team-a-client\" \\\n          \n          \n            \n              oauth.client.secret=\"team-a-client-secret\" \\\n          \n          \n            \n              oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n          \n          \n            \n            sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n          \n          \n            \n            EOF\n          \n          \n            \n            ----", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529722993", "createdAt": "2020-11-24T16:45:29Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 193}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjE5NDMyOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjo1MDoyM1rOH5L71w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjo1MDoyM1rOH5L71w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcyNjQyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n          \n          \n            \n            and then opening the `Service Account Roles` tab for the client.\n          \n          \n            \n            You should see the `Dev Team A` realm role assigned.\n          \n          \n            \n            The roles assigned to a client, such as the `Dev Team A` realm role assigned to the `team-a-client` service account, are presented in Keycloak on the  *Service Account Roles* tab from *Clients*.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529726423", "createdAt": "2020-11-24T16:50:23Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjIxOTMwOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjo1NTo0NVrOH5MLWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjo1NTo0NVrOH5MLWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczMDM5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            We can now use this configuration with Kafka's CLI tools.\n          \n          \n            \n            We can use this configuration from the Kafka CLI to produce and consume messages, and perform other administration tasks.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529730394", "createdAt": "2020-11-24T16:55:45Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 199}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjIyNDUxOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjo1Njo1MlrOH5MOsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjo1Njo1MlrOH5MOsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczMTI0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ### Producing the Messages\n          \n          \n            \n            .Producing messages with authorized access", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529731249", "createdAt": "2020-11-24T16:56:52Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 202}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjIzNjQ0OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjo1OTozNFrOH5MWRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjo1OTozNFrOH5MWRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczMzE5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Let's try to produce some messages to topic 'my-topic':\n          \n          \n            \n            \n          \n          \n            \n            ```\n          \n          \n            \n            bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n          \n          \n            \n              --producer.config=/tmp/team-a-client.properties\n          \n          \n            \n            First message\n          \n          \n            \n            ```\n          \n          \n            \n            The `team-a-client` configuration is used to produce messages to topic `my-topic`:\n          \n          \n            \n            \n          \n          \n            \n            [source,shell]\n          \n          \n            \n            ----\n          \n          \n            \n            bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n          \n          \n            \n              --producer.config=/tmp/team-a-client.properties\n          \n          \n            \n            First message\n          \n          \n            \n            ----", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529733191", "createdAt": "2020-11-24T16:59:34Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 210}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjI0MDA0OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzowMDoyMVrOH5MYgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzowMDoyMVrOH5MYgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczMzc2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n          \n          \n            \n            A `Not authorized to access topics: [my-topic]` error is returned when trying to push the first message.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529733761", "createdAt": "2020-11-24T17:00:21Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 212}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjI0NzEwOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzowMTo1OVrOH5Mc9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzowMTo1OVrOH5Mc9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczNDkwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n          \n          \n            \n            `team-a-client` has a `Dev Team A` role that gives it permission to perform any supported actions on topics that start with `a_`, but can only write to topics that start with `x_`.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529734903", "createdAt": "2020-11-24T17:01:59Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjI0OTE1OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzowMjoyMlrOH5MeIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzowMjoyMlrOH5MeIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczNTIwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The topic named `my-topic` matches neither of those.\n          \n          \n            \n            The topic named `my-topic` matches neither of those rules.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529735200", "createdAt": "2020-11-24T17:02:22Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 215}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjI1OTA5OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzowNDo0OFrOH5MkRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzowNDo0OFrOH5MkRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczNjc3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n          \n          \n            \n            \n          \n          \n            \n            ```\n          \n          \n            \n            bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n          \n          \n            \n              --producer.config /tmp/team-a-client.properties\n          \n          \n            \n            First message\n          \n          \n            \n            Second message\n          \n          \n            \n            ```\n          \n          \n            \n            The `team-a-client` configuration is then used to produce messages to topic `a_messages`.\n          \n          \n            \n            \n          \n          \n            \n            [source,shell]\n          \n          \n            \n            ----\n          \n          \n            \n            bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n          \n          \n            \n              --producer.config /tmp/team-a-client.properties\n          \n          \n            \n            First message\n          \n          \n            \n            Second message\n          \n          \n            \n            ----", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529736772", "createdAt": "2020-11-24T17:04:48Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 224}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjI2Mzk3OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzowNTo1NlrOH5MnXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzowNTo1NlrOH5MnXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczNzU2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n          \n          \n            \n            The messages are pushed out successfully, and in the Kafka container log there is DEBUG level output saying `Authorization GRANTED`.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529737567", "createdAt": "2020-11-24T17:05:56Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 226}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjI2NDY3OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzowNjowOFrOH5Mn1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNDowNDo0OVrOH6cwfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczNzY4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Use CTRL-C to exit the CLI application.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529737684", "createdAt": "2020-11-24T17:06:08Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 228}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI3MTYyNg==", "bodyText": "Why would you remove this? Exiting the current CLI releases the shell for the next steps in this tutorial.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530271626", "createdAt": "2020-11-25T10:37:48Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczNzY4NA=="}, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 228}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA1MDYyMA==", "bodyText": "Let's return it then. I assumed we'd be doing this between steps", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531050620", "createdAt": "2020-11-26T14:04:49Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczNzY4NA=="}, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 228}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjI2Nzk2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzowNjo1NFrOH5Mp6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzowNjo1NFrOH5Mp6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczODIxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You can see the Kafka container log by running:\n          \n          \n            \n            \n          \n          \n            \n                kubectl logs my-cluster-kafka-0 -f\n          \n          \n            \n            You can see the Kafka container log by running:\n          \n          \n            \n            \n          \n          \n            \n            [source,shell]\n          \n          \n            \n            kubectl logs my-cluster-kafka-0 -f", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529738216", "createdAt": "2020-11-24T17:06:54Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 232}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjI3Mzg1OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzowODoxN1rOH5Mthg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzowODoxN1rOH5Mthg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczOTE0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ### Consuming the Messages\n          \n          \n            \n            .Consuming messages with authorized access", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529739142", "createdAt": "2020-11-24T17:08:17Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 234}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjI5MTgxOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzoxMjoyOVrOH5M4dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzoxMjoyOVrOH5M4dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc0MTk0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Let's now try to consume the messages we have produced.\n          \n          \n            \n            \n          \n          \n            \n                bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n          \n          \n            \n                  --from-beginning --consumer.config /tmp/team-a-client.properties\n          \n          \n            \n            The `team-a-client` configuration is used to consume messages from topic `a_messages`:\n          \n          \n            \n            \n          \n          \n            \n            [source,shell,subs=+quotes]\n          \n          \n            \n            ----\n          \n          \n            \n            bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n          \n          \n            \n              --from-beginning --consumer.config /tmp/team-a-client.properties\n          \n          \n            \n            ----", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529741941", "createdAt": "2020-11-24T17:12:29Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 239}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjMxMTMwOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzoxNzowNVrOH5NEcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzoxNzowNVrOH5NEcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc0NTAxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n          \n          \n            \n            \n          \n          \n            \n            The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n          \n          \n            \n            An error is returned as the `Dev Team A` role for `team-a-client` only has access to consumer groups that have names starting with `a_`.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529745011", "createdAt": "2020-11-24T17:17:05Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 243}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjM0MTE2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzoyNDowN1rOH5NW2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzoyNDowN1rOH5NW2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc0OTcyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Let's set custom consumer group name that starts with 'a_'\n          \n          \n            \n            \n          \n          \n            \n                bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n          \n          \n            \n                  --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n          \n          \n            \n            \n          \n          \n            \n            We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n          \n          \n            \n            \n          \n          \n            \n            Use CTRL-C to exit.\n          \n          \n            \n            The `team-a-client` configuration is then used to consume messages when specifying a custom consumer group with a name that starts with `a_`:\n          \n          \n            \n            \n          \n          \n            \n            [source,shell,subs=+quotes]\n          \n          \n            \n            ----\n          \n          \n            \n            bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n          \n          \n            \n              --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n          \n          \n            \n            ----\n          \n          \n            \n            \n          \n          \n            \n            This time the consumer receives all the messages from the `a_messages` topic.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529749721", "createdAt": "2020-11-24T17:24:07Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n+Let's set custom consumer group name that starts with 'a_'\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+\n+We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n+\n+Use CTRL-C to exit.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 251}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjM1MzY5OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzoyNjo0N1rOH5NeRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzoyNjo0N1rOH5NeRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc1MTYyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ### Using Kafka's CLI Administration Tools\n          \n          \n            \n            .Administering Kafka with authorized access", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529751621", "createdAt": "2020-11-24T17:26:47Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n+Let's set custom consumer group name that starts with 'a_'\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+\n+We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n+\n+Use CTRL-C to exit.\n+\n+\n+### Using Kafka's CLI Administration Tools", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 254}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjM2MDMwOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzoyODoxM1rOH5NiJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzoyODoxM1rOH5NiJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc1MjYxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Let's now list the topics:\n          \n          \n            \n            The `team-a-client` configuration is used in administrative operations.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529752614", "createdAt": "2020-11-24T17:28:13Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n+Let's set custom consumer group name that starts with 'a_'\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+\n+We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n+\n+Use CTRL-C to exit.\n+\n+\n+### Using Kafka's CLI Administration Tools\n+\n+Let's now list the topics:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 256}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjM2NzQ3OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzoyOTo1N1rOH5NmzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzoyOTo1N1rOH5NmzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc1MzgwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n          \n          \n            \n            \n          \n          \n            \n            We get one topic listed: `a_messages`.\n          \n          \n            \n            Listing topics returns the `a_messages` topic.\n          \n          \n            \n            \n          \n          \n            \n            [source,shell]\n          \n          \n            \n            ----\n          \n          \n            \n            bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n          \n          \n            \n            ----", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529753804", "createdAt": "2020-11-24T17:29:57Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n+Let's set custom consumer group name that starts with 'a_'\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+\n+We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n+\n+Use CTRL-C to exit.\n+\n+\n+### Using Kafka's CLI Administration Tools\n+\n+Let's now list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+We get one topic listed: `a_messages`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 260}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjM3NDI4OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzozMToyOVrOH5Nq_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzozMToyOVrOH5Nq_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc1NDg3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Let's try and list the consumer groups:\n          \n          \n            \n            \n          \n          \n            \n                bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n          \n          \n            \n            \n          \n          \n            \n            Similarly to listing topics, we get one consumer group listed: `a_consumer_group_1`.\n          \n          \n            \n            Listing consumer groups returns the `a_consumer_group_1` consumer group.\n          \n          \n            \n            \n          \n          \n            \n            [source,shell]\n          \n          \n            \n            ----\n          \n          \n            \n            bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n          \n          \n            \n            ----", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529754878", "createdAt": "2020-11-24T17:31:29Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n+Let's set custom consumer group name that starts with 'a_'\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+\n+We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n+\n+Use CTRL-C to exit.\n+\n+\n+### Using Kafka's CLI Administration Tools\n+\n+Let's now list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+We get one topic listed: `a_messages`.\n+\n+Let's try and list the consumer groups:\n+\n+    bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+Similarly to listing topics, we get one consumer group listed: `a_consumer_group_1`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 266}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjM4MjkxOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzozMzo0NlrOH5NwdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzozMzo0NlrOH5NwdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc1NjI3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            There are more CLI administrative tools. For example we can try to get the default cluster configuration:\n          \n          \n            \n            \n          \n          \n            \n                bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n          \n          \n            \n                  --entity-type brokers --describe --entity-default\n          \n          \n            \n            \n          \n          \n            \n            But that will fail with `Cluster authorization failed.` error, because this operation requires cluster level permissions which `team-a-client` does not have.\n          \n          \n            \n            Fetching the default cluster configuration fails cluster authorization, because the operation requires cluster level permissions that `team-a-client` does not have.\n          \n          \n            \n            \n          \n          \n            \n            [source,shell]\n          \n          \n            \n            ----\n          \n          \n            \n            bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n          \n          \n            \n              --entity-type brokers --describe --entity-default\n          \n          \n            \n            ----", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529756276", "createdAt": "2020-11-24T17:33:46Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of `authorization scopes` - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+`Policies` define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, the `permissions` tie together specific `resources`, `action scopes` and `policies` to define that 'specific users U can perform certain actions A on the resource R'.\n+\n+You can read more about `Keycloak Authorization Services` on link:https://www.keycloak.org/docs/latest/authorization_services/index.html[project's web site], but note that the documentation there is focused primarily on using the Authorization Services to protect web resources, whereas here we're using it to protect access to Kafka.\n+\n+If we take a look under the `Resources` sub-tab of `Authorization` tab, we'll see the list of resource definitions.\n+These are resource specifiers - patterns in a specific format, that are used to target policies to specific resources.\n+The format is quite simple. For example:\n+\n+- `kafka-cluster:cluster-1,Topic:a_*`  ... targets only topics in kafka cluster 'cluster-1' with names starting with 'a_'\n+\n+If `kafka-cluster:XXX` segment is not present, the specifier targets any cluster.\n+\n+- `Group:x_*` ... targets all consumer groups on any cluster with names starting with 'x_'\n+\n+The possible resource types mirror the xref:kafka_authorization_model[Kafka authorization model] (`Topic`, `Group`, `Cluster`, ...).\n+\n+Under `Authorization Scopes` we can see a list of all the possible actions (Kafka permissions) that can be granted on resources of different types.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+This list mirrors Kafka permissions and should be the same for any deployment.\n+\n+There is an link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file containing the authorization scopes that can be imported, so that they do not have to be manually entered for every new `Authorization Services` enabled client.\n+In order to import `authorization-scopes.json` into a new client, first make sure the new client is `Authorization Enabled` and saved. Then, click on the `Authorization` tab and use the `Import` to import the file. Afterwards, if you select the `Authorization Scopes` you will see the loaded scopes.\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+Under the `Policies` sub-tab there are filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the Roles, or Groups they are assigned.\n+Policies can even be programmatically defined using JavaScript where logic can take into account the context of the client session - for example, client ip (that is client ip of the Kafka client).\n+\n+Then, finally, there is the `Permissions` sub-tab, which defines 'role bindings' where `resources`, `authorization scopes` and `policies` are tied together to apply a set of permissions on specific resources for certain users.\n+\n+Each `permission` definition can have a nice descriptive name which can make it very clear what kind of access is granted to which users.\n+For example:\n+\n+    Dev Team A can write to topics that start with x_ on any cluster\n+\n+    Dev Team B can read from topics that start with x_ on any cluster\n+    Dev Team B can update consumer group offsets that start with x_ on any cluster\n+\n+    ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+    ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+    ClusterManager of my-cluster Group has full access to topics on my-cluster\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+## Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n+Let's set custom consumer group name that starts with 'a_'\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+\n+We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n+\n+Use CTRL-C to exit.\n+\n+\n+### Using Kafka's CLI Administration Tools\n+\n+Let's now list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+We get one topic listed: `a_messages`.\n+\n+Let's try and list the consumer groups:\n+\n+    bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+Similarly to listing topics, we get one consumer group listed: `a_consumer_group_1`.\n+\n+There are more CLI administrative tools. For example we can try to get the default cluster configuration:\n+\n+    bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+      --entity-type brokers --describe --entity-default\n+\n+But that will fail with `Cluster authorization failed.` error, because this operation requires cluster level permissions which `team-a-client` does not have.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 273}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTEyMzYxOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODoxMzo0MVrOH5ngrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODoxMzo0MVrOH5ngrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE3ODIyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ### Client with Different Permissions\n          \n          \n            \n            . Using clients with different permissions", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530178220", "createdAt": "2020-11-25T08:13:41Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,481 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+From the *Realm Settings* you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources.\n+\n+Resources define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of authorization scopes - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+Policies define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, permissions tie together the resources, authorization scopes and policies that specify _users U can perform actions A on resource R_.\n+\n+For more information about Keycloak Authorization Services, see {keycloak-authorization-services}, but note that the Authorization Services documentation is focused primarily on using the Authorization Services to protect web resources rather than access to Kafka.\n+\n+When viewing resources from the Keycloak user interface you will see a list of resource definitions.\n+These are resource specifiers, patterns in a specific format that are used to target policies to specific resources.\n+For example, this pattern targets only topics in kafka cluster 'cluster-1' with names starting with 'a_':\n+\n+----\n+kafka-cluster:cluster-1,Topic:a_*  \n+---- \n+\n+If a cluster is not specified by name ( `kafka-cluster:cluster-1`), the specifier targets any cluster. For example, this pattern targets any cluster with a name starting  'x_':\n+----\n+Group:x_* \n+----\n+\n+\n+The possible resource types, such as `Topic`, `Group` and `Cluster`, mirror the xref:kafka_authorization_model[Kafka authorization model].\n+\n+*Authorization Scopes* lists of all the possible actions (Kafka permissions) that can be granted on specific resources.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+The list of actions mirrors Kafka permissions and is the same for any deployment.\n+\n+Rather than importing authorization scopes manually into every new client, you can use a link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file.\n+\n+You must make sure that the client is enabled in Keycloak for Authorization Services. After which, you can import a JSON file from the *Authorization* tab. You can see the loaded scopes from the *Authorization Scopes* page.\n+\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+The *Policies* tab has filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the roles, or groups they are assigned.\n+Policies can even be defined programmatically using JavaScript so the logic considers the context of the client session, such as the IP of a Kafka client.\n+\n+The *Permissions* tab defines role bindings that associate resources, authorization scopes and policies for applying a set of permissions on specific resources for certain users.\n+\n+Use a clear, descriptive name for each permission definition so that it is obvious what kind of access is granted to which users.\n+For example:\n+\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n+Let's set custom consumer group name that starts with 'a_'\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+\n+We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n+\n+Use CTRL-C to exit.\n+\n+\n+### Using Kafka's CLI Administration Tools\n+\n+Let's now list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+We get one topic listed: `a_messages`.\n+\n+Let's try and list the consumer groups:\n+\n+    bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+Similarly to listing topics, we get one consumer group listed: `a_consumer_group_1`.\n+\n+There are more CLI administrative tools. For example we can try to get the default cluster configuration:\n+\n+    bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+      --entity-type brokers --describe --entity-default\n+\n+But that will fail with `Cluster authorization failed.` error, because this operation requires cluster level permissions which `team-a-client` does not have.\n+\n+\n+### Client with Different Permissions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230db92e0f4d880e8d667eef9353cc2ceaa999f8"}, "originalPosition": 306}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTE0MDA3OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODoxODozMVrOH5nqgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODoxODozMVrOH5nqgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE4MDczNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Let's prepare a configuration for `team-b-client`:\n          \n          \n            \n            As with `team-a-client`, we prepare a Kafka client configuration file with authentication parameters for `team-b-client`.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530180736", "createdAt": "2020-11-25T08:18:31Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,481 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+From the *Realm Settings* you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources.\n+\n+Resources define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of authorization scopes - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+Policies define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, permissions tie together the resources, authorization scopes and policies that specify _users U can perform actions A on resource R_.\n+\n+For more information about Keycloak Authorization Services, see {keycloak-authorization-services}, but note that the Authorization Services documentation is focused primarily on using the Authorization Services to protect web resources rather than access to Kafka.\n+\n+When viewing resources from the Keycloak user interface you will see a list of resource definitions.\n+These are resource specifiers, patterns in a specific format that are used to target policies to specific resources.\n+For example, this pattern targets only topics in kafka cluster 'cluster-1' with names starting with 'a_':\n+\n+----\n+kafka-cluster:cluster-1,Topic:a_*  \n+---- \n+\n+If a cluster is not specified by name ( `kafka-cluster:cluster-1`), the specifier targets any cluster. For example, this pattern targets any cluster with a name starting  'x_':\n+----\n+Group:x_* \n+----\n+\n+\n+The possible resource types, such as `Topic`, `Group` and `Cluster`, mirror the xref:kafka_authorization_model[Kafka authorization model].\n+\n+*Authorization Scopes* lists of all the possible actions (Kafka permissions) that can be granted on specific resources.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+The list of actions mirrors Kafka permissions and is the same for any deployment.\n+\n+Rather than importing authorization scopes manually into every new client, you can use a link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file.\n+\n+You must make sure that the client is enabled in Keycloak for Authorization Services. After which, you can import a JSON file from the *Authorization* tab. You can see the loaded scopes from the *Authorization Scopes* page.\n+\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+The *Policies* tab has filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the roles, or groups they are assigned.\n+Policies can even be defined programmatically using JavaScript so the logic considers the context of the client session, such as the IP of a Kafka client.\n+\n+The *Permissions* tab defines role bindings that associate resources, authorization scopes and policies for applying a set of permissions on specific resources for certain users.\n+\n+Use a clear, descriptive name for each permission definition so that it is obvious what kind of access is granted to which users.\n+For example:\n+\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n+Let's set custom consumer group name that starts with 'a_'\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+\n+We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n+\n+Use CTRL-C to exit.\n+\n+\n+### Using Kafka's CLI Administration Tools\n+\n+Let's now list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+We get one topic listed: `a_messages`.\n+\n+Let's try and list the consumer groups:\n+\n+    bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+Similarly to listing topics, we get one consumer group listed: `a_consumer_group_1`.\n+\n+There are more CLI administrative tools. For example we can try to get the default cluster configuration:\n+\n+    bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+      --entity-type brokers --describe --entity-default\n+\n+But that will fail with `Cluster authorization failed.` error, because this operation requires cluster level permissions which `team-a-client` does not have.\n+\n+\n+### Client with Different Permissions\n+\n+Let's prepare a configuration for `team-b-client`:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230db92e0f4d880e8d667eef9353cc2ceaa999f8"}, "originalPosition": 308}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTE0NTM2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODoxOTo1NVrOH5ntsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODoxOTo1NVrOH5ntsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE4MTU1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ```\n          \n          \n            \n            cat > /tmp/team-b-client.properties << EOF\n          \n          \n            \n            security.protocol=SASL_PLAINTEXT\n          \n          \n            \n            sasl.mechanism=OAUTHBEARER\n          \n          \n            \n            sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n          \n          \n            \n              oauth.client.id=\"team-b-client\" \\\n          \n          \n            \n              oauth.client.secret=\"team-b-client-secret\" \\\n          \n          \n            \n              oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n          \n          \n            \n            sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n          \n          \n            \n            EOF\n          \n          \n            \n            ```\n          \n          \n            \n            [source,shell]\n          \n          \n            \n            ----\n          \n          \n            \n            cat > /tmp/team-b-client.properties << EOF\n          \n          \n            \n            security.protocol=SASL_PLAINTEXT\n          \n          \n            \n            sasl.mechanism=OAUTHBEARER\n          \n          \n            \n            sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n          \n          \n            \n              oauth.client.id=\"team-b-client\" \\\n          \n          \n            \n              oauth.client.secret=\"team-b-client-secret\" \\\n          \n          \n            \n              oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n          \n          \n            \n            sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n          \n          \n            \n            EOF\n          \n          \n            \n            ----", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530181555", "createdAt": "2020-11-25T08:19:55Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,481 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+From the *Realm Settings* you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources.\n+\n+Resources define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of authorization scopes - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+Policies define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, permissions tie together the resources, authorization scopes and policies that specify _users U can perform actions A on resource R_.\n+\n+For more information about Keycloak Authorization Services, see {keycloak-authorization-services}, but note that the Authorization Services documentation is focused primarily on using the Authorization Services to protect web resources rather than access to Kafka.\n+\n+When viewing resources from the Keycloak user interface you will see a list of resource definitions.\n+These are resource specifiers, patterns in a specific format that are used to target policies to specific resources.\n+For example, this pattern targets only topics in kafka cluster 'cluster-1' with names starting with 'a_':\n+\n+----\n+kafka-cluster:cluster-1,Topic:a_*  \n+---- \n+\n+If a cluster is not specified by name ( `kafka-cluster:cluster-1`), the specifier targets any cluster. For example, this pattern targets any cluster with a name starting  'x_':\n+----\n+Group:x_* \n+----\n+\n+\n+The possible resource types, such as `Topic`, `Group` and `Cluster`, mirror the xref:kafka_authorization_model[Kafka authorization model].\n+\n+*Authorization Scopes* lists of all the possible actions (Kafka permissions) that can be granted on specific resources.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+The list of actions mirrors Kafka permissions and is the same for any deployment.\n+\n+Rather than importing authorization scopes manually into every new client, you can use a link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file.\n+\n+You must make sure that the client is enabled in Keycloak for Authorization Services. After which, you can import a JSON file from the *Authorization* tab. You can see the loaded scopes from the *Authorization Scopes* page.\n+\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+The *Policies* tab has filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the roles, or groups they are assigned.\n+Policies can even be defined programmatically using JavaScript so the logic considers the context of the client session, such as the IP of a Kafka client.\n+\n+The *Permissions* tab defines role bindings that associate resources, authorization scopes and policies for applying a set of permissions on specific resources for certain users.\n+\n+Use a clear, descriptive name for each permission definition so that it is obvious what kind of access is granted to which users.\n+For example:\n+\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n+Let's set custom consumer group name that starts with 'a_'\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+\n+We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n+\n+Use CTRL-C to exit.\n+\n+\n+### Using Kafka's CLI Administration Tools\n+\n+Let's now list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+We get one topic listed: `a_messages`.\n+\n+Let's try and list the consumer groups:\n+\n+    bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+Similarly to listing topics, we get one consumer group listed: `a_consumer_group_1`.\n+\n+There are more CLI administrative tools. For example we can try to get the default cluster configuration:\n+\n+    bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+      --entity-type brokers --describe --entity-default\n+\n+But that will fail with `Cluster authorization failed.` error, because this operation requires cluster level permissions which `team-a-client` does not have.\n+\n+\n+### Client with Different Permissions\n+\n+Let's prepare a configuration for `team-b-client`:\n+\n+```\n+cat > /tmp/team-b-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-b-client\" \\\n+  oauth.client.secret=\"team-b-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230db92e0f4d880e8d667eef9353cc2ceaa999f8"}, "originalPosition": 320}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTE3MzczOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODoyNzo0NFrOH5n_Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODoyNzo0NFrOH5n_Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE4NjAwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If we look at `team-b-client` client configuration in Keycloak, under `Service Account Roles` we can see that it has `Dev Team B` realm role assigned.\n          \n          \n            \n            Looking in Keycloak Console at the `kafka` client's `Authorization` tab where `Permissions` are listed, we can see the permissions that start with 'Dev Team B ...'.\n          \n          \n            \n            These match the users and service accounts that have the `Dev Team B` realm role assigned to them.\n          \n          \n            \n            The `Dev Team B` users have full access to topics beginning with 'b_' on Kafka cluster `my-cluster` (which is the designated cluster name of the demo cluster we brought up), and read access on topics that start with 'x_'.\n          \n          \n            \n            The `team-b-client` client configuration includes a `Dev Team B` realm role and permissions that start with `Dev Team B ...`. These match the users and service accounts that have the `Dev Team B` realm role assigned to them.\n          \n          \n            \n            The `Dev Team B` users have full access to topics beginning with `b_` on the Kafka cluster `my-cluster`, the name of the designated cluster, and read access on topics that start with `x_`.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530186006", "createdAt": "2020-11-25T08:27:44Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,481 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+From the *Realm Settings* you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources.\n+\n+Resources define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of authorization scopes - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+Policies define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, permissions tie together the resources, authorization scopes and policies that specify _users U can perform actions A on resource R_.\n+\n+For more information about Keycloak Authorization Services, see {keycloak-authorization-services}, but note that the Authorization Services documentation is focused primarily on using the Authorization Services to protect web resources rather than access to Kafka.\n+\n+When viewing resources from the Keycloak user interface you will see a list of resource definitions.\n+These are resource specifiers, patterns in a specific format that are used to target policies to specific resources.\n+For example, this pattern targets only topics in kafka cluster 'cluster-1' with names starting with 'a_':\n+\n+----\n+kafka-cluster:cluster-1,Topic:a_*  \n+---- \n+\n+If a cluster is not specified by name ( `kafka-cluster:cluster-1`), the specifier targets any cluster. For example, this pattern targets any cluster with a name starting  'x_':\n+----\n+Group:x_* \n+----\n+\n+\n+The possible resource types, such as `Topic`, `Group` and `Cluster`, mirror the xref:kafka_authorization_model[Kafka authorization model].\n+\n+*Authorization Scopes* lists of all the possible actions (Kafka permissions) that can be granted on specific resources.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+The list of actions mirrors Kafka permissions and is the same for any deployment.\n+\n+Rather than importing authorization scopes manually into every new client, you can use a link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file.\n+\n+You must make sure that the client is enabled in Keycloak for Authorization Services. After which, you can import a JSON file from the *Authorization* tab. You can see the loaded scopes from the *Authorization Scopes* page.\n+\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+The *Policies* tab has filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the roles, or groups they are assigned.\n+Policies can even be defined programmatically using JavaScript so the logic considers the context of the client session, such as the IP of a Kafka client.\n+\n+The *Permissions* tab defines role bindings that associate resources, authorization scopes and policies for applying a set of permissions on specific resources for certain users.\n+\n+Use a clear, descriptive name for each permission definition so that it is obvious what kind of access is granted to which users.\n+For example:\n+\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n+Let's set custom consumer group name that starts with 'a_'\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+\n+We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n+\n+Use CTRL-C to exit.\n+\n+\n+### Using Kafka's CLI Administration Tools\n+\n+Let's now list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+We get one topic listed: `a_messages`.\n+\n+Let's try and list the consumer groups:\n+\n+    bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+Similarly to listing topics, we get one consumer group listed: `a_consumer_group_1`.\n+\n+There are more CLI administrative tools. For example we can try to get the default cluster configuration:\n+\n+    bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+      --entity-type brokers --describe --entity-default\n+\n+But that will fail with `Cluster authorization failed.` error, because this operation requires cluster level permissions which `team-a-client` does not have.\n+\n+\n+### Client with Different Permissions\n+\n+Let's prepare a configuration for `team-b-client`:\n+\n+```\n+cat > /tmp/team-b-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-b-client\" \\\n+  oauth.client.secret=\"team-b-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+If we look at `team-b-client` client configuration in Keycloak, under `Service Account Roles` we can see that it has `Dev Team B` realm role assigned.\n+Looking in Keycloak Console at the `kafka` client's `Authorization` tab where `Permissions` are listed, we can see the permissions that start with 'Dev Team B ...'.\n+These match the users and service accounts that have the `Dev Team B` realm role assigned to them.\n+The `Dev Team B` users have full access to topics beginning with 'b_' on Kafka cluster `my-cluster` (which is the designated cluster name of the demo cluster we brought up), and read access on topics that start with 'x_'.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230db92e0f4d880e8d667eef9353cc2ceaa999f8"}, "originalPosition": 325}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTE4MjYxOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODozMDoxMFrOH5oEiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODozMDoxMFrOH5oEiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE4NzQwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Let's try produce some messages to topic `a_messages` as `team-b-client`:\n          \n          \n            \n            \n          \n          \n            \n            ```\n          \n          \n            \n            bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n          \n          \n            \n              --producer.config /tmp/team-b-client.properties\n          \n          \n            \n            Message 1\n          \n          \n            \n            ```\n          \n          \n            \n            The `team-b-client` configuration is used to produce messages to topic `a_messages`:\n          \n          \n            \n            \n          \n          \n            \n            [source,shell]\n          \n          \n            \n            ----\n          \n          \n            \n            bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n          \n          \n            \n              --producer.config /tmp/team-b-client.properties\n          \n          \n            \n            Message 1\n          \n          \n            \n            ----", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530187400", "createdAt": "2020-11-25T08:30:10Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,481 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+From the *Realm Settings* you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources.\n+\n+Resources define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of authorization scopes - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+Policies define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, permissions tie together the resources, authorization scopes and policies that specify _users U can perform actions A on resource R_.\n+\n+For more information about Keycloak Authorization Services, see {keycloak-authorization-services}, but note that the Authorization Services documentation is focused primarily on using the Authorization Services to protect web resources rather than access to Kafka.\n+\n+When viewing resources from the Keycloak user interface you will see a list of resource definitions.\n+These are resource specifiers, patterns in a specific format that are used to target policies to specific resources.\n+For example, this pattern targets only topics in kafka cluster 'cluster-1' with names starting with 'a_':\n+\n+----\n+kafka-cluster:cluster-1,Topic:a_*  \n+---- \n+\n+If a cluster is not specified by name ( `kafka-cluster:cluster-1`), the specifier targets any cluster. For example, this pattern targets any cluster with a name starting  'x_':\n+----\n+Group:x_* \n+----\n+\n+\n+The possible resource types, such as `Topic`, `Group` and `Cluster`, mirror the xref:kafka_authorization_model[Kafka authorization model].\n+\n+*Authorization Scopes* lists of all the possible actions (Kafka permissions) that can be granted on specific resources.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+The list of actions mirrors Kafka permissions and is the same for any deployment.\n+\n+Rather than importing authorization scopes manually into every new client, you can use a link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file.\n+\n+You must make sure that the client is enabled in Keycloak for Authorization Services. After which, you can import a JSON file from the *Authorization* tab. You can see the loaded scopes from the *Authorization Scopes* page.\n+\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+The *Policies* tab has filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the roles, or groups they are assigned.\n+Policies can even be defined programmatically using JavaScript so the logic considers the context of the client session, such as the IP of a Kafka client.\n+\n+The *Permissions* tab defines role bindings that associate resources, authorization scopes and policies for applying a set of permissions on specific resources for certain users.\n+\n+Use a clear, descriptive name for each permission definition so that it is obvious what kind of access is granted to which users.\n+For example:\n+\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n+Let's set custom consumer group name that starts with 'a_'\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+\n+We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n+\n+Use CTRL-C to exit.\n+\n+\n+### Using Kafka's CLI Administration Tools\n+\n+Let's now list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+We get one topic listed: `a_messages`.\n+\n+Let's try and list the consumer groups:\n+\n+    bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+Similarly to listing topics, we get one consumer group listed: `a_consumer_group_1`.\n+\n+There are more CLI administrative tools. For example we can try to get the default cluster configuration:\n+\n+    bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+      --entity-type brokers --describe --entity-default\n+\n+But that will fail with `Cluster authorization failed.` error, because this operation requires cluster level permissions which `team-a-client` does not have.\n+\n+\n+### Client with Different Permissions\n+\n+Let's prepare a configuration for `team-b-client`:\n+\n+```\n+cat > /tmp/team-b-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-b-client\" \\\n+  oauth.client.secret=\"team-b-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+If we look at `team-b-client` client configuration in Keycloak, under `Service Account Roles` we can see that it has `Dev Team B` realm role assigned.\n+Looking in Keycloak Console at the `kafka` client's `Authorization` tab where `Permissions` are listed, we can see the permissions that start with 'Dev Team B ...'.\n+These match the users and service accounts that have the `Dev Team B` realm role assigned to them.\n+The `Dev Team B` users have full access to topics beginning with 'b_' on Kafka cluster `my-cluster` (which is the designated cluster name of the demo cluster we brought up), and read access on topics that start with 'x_'.\n+\n+Let's try produce some messages to topic `a_messages` as `team-b-client`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230db92e0f4d880e8d667eef9353cc2ceaa999f8"}, "originalPosition": 333}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTIwMzc3OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODozNTo0MFrOH5oQ8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODozNTo0MFrOH5oQ8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE5MDU3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            We get `Not authorized to access topics: [a_messages]` error as we expected. Let's try to produce to topic `b_messages`:\n          \n          \n            \n            A `Not authorized to access topics: [a_messages]` error is returned when trying to push the first message, as expected, so we switch to topic `b_messages`:", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530190576", "createdAt": "2020-11-25T08:35:40Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,481 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+From the *Realm Settings* you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources.\n+\n+Resources define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of authorization scopes - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+Policies define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, permissions tie together the resources, authorization scopes and policies that specify _users U can perform actions A on resource R_.\n+\n+For more information about Keycloak Authorization Services, see {keycloak-authorization-services}, but note that the Authorization Services documentation is focused primarily on using the Authorization Services to protect web resources rather than access to Kafka.\n+\n+When viewing resources from the Keycloak user interface you will see a list of resource definitions.\n+These are resource specifiers, patterns in a specific format that are used to target policies to specific resources.\n+For example, this pattern targets only topics in kafka cluster 'cluster-1' with names starting with 'a_':\n+\n+----\n+kafka-cluster:cluster-1,Topic:a_*  \n+---- \n+\n+If a cluster is not specified by name ( `kafka-cluster:cluster-1`), the specifier targets any cluster. For example, this pattern targets any cluster with a name starting  'x_':\n+----\n+Group:x_* \n+----\n+\n+\n+The possible resource types, such as `Topic`, `Group` and `Cluster`, mirror the xref:kafka_authorization_model[Kafka authorization model].\n+\n+*Authorization Scopes* lists of all the possible actions (Kafka permissions) that can be granted on specific resources.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+The list of actions mirrors Kafka permissions and is the same for any deployment.\n+\n+Rather than importing authorization scopes manually into every new client, you can use a link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file.\n+\n+You must make sure that the client is enabled in Keycloak for Authorization Services. After which, you can import a JSON file from the *Authorization* tab. You can see the loaded scopes from the *Authorization Scopes* page.\n+\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+The *Policies* tab has filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the roles, or groups they are assigned.\n+Policies can even be defined programmatically using JavaScript so the logic considers the context of the client session, such as the IP of a Kafka client.\n+\n+The *Permissions* tab defines role bindings that associate resources, authorization scopes and policies for applying a set of permissions on specific resources for certain users.\n+\n+Use a clear, descriptive name for each permission definition so that it is obvious what kind of access is granted to which users.\n+For example:\n+\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n+Let's set custom consumer group name that starts with 'a_'\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+\n+We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n+\n+Use CTRL-C to exit.\n+\n+\n+### Using Kafka's CLI Administration Tools\n+\n+Let's now list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+We get one topic listed: `a_messages`.\n+\n+Let's try and list the consumer groups:\n+\n+    bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+Similarly to listing topics, we get one consumer group listed: `a_consumer_group_1`.\n+\n+There are more CLI administrative tools. For example we can try to get the default cluster configuration:\n+\n+    bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+      --entity-type brokers --describe --entity-default\n+\n+But that will fail with `Cluster authorization failed.` error, because this operation requires cluster level permissions which `team-a-client` does not have.\n+\n+\n+### Client with Different Permissions\n+\n+Let's prepare a configuration for `team-b-client`:\n+\n+```\n+cat > /tmp/team-b-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-b-client\" \\\n+  oauth.client.secret=\"team-b-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+If we look at `team-b-client` client configuration in Keycloak, under `Service Account Roles` we can see that it has `Dev Team B` realm role assigned.\n+Looking in Keycloak Console at the `kafka` client's `Authorization` tab where `Permissions` are listed, we can see the permissions that start with 'Dev Team B ...'.\n+These match the users and service accounts that have the `Dev Team B` realm role assigned to them.\n+The `Dev Team B` users have full access to topics beginning with 'b_' on Kafka cluster `my-cluster` (which is the designated cluster name of the demo cluster we brought up), and read access on topics that start with 'x_'.\n+\n+Let's try produce some messages to topic `a_messages` as `team-b-client`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get `Not authorized to access topics: [a_messages]` error as we expected. Let's try to produce to topic `b_messages`:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230db92e0f4d880e8d667eef9353cc2ceaa999f8"}, "originalPosition": 335}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTIwNjUzOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODozNjoyNFrOH5oSmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODozNjoyNFrOH5oSmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE5MTAwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ```\n          \n          \n            \n            bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic b_messages \\\n          \n          \n            \n              --producer.config /tmp/team-b-client.properties\n          \n          \n            \n            Message 1\n          \n          \n            \n            Message 2\n          \n          \n            \n            Message 3\n          \n          \n            \n            ```\n          \n          \n            \n            [source,shell]\n          \n          \n            \n            ----\n          \n          \n            \n            bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic b_messages \\\n          \n          \n            \n              --producer.config /tmp/team-b-client.properties\n          \n          \n            \n            Message 1\n          \n          \n            \n            Message 2\n          \n          \n            \n            Message 3\n          \n          \n            \n            ----", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530191000", "createdAt": "2020-11-25T08:36:24Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,481 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+From the *Realm Settings* you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources.\n+\n+Resources define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of authorization scopes - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+Policies define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, permissions tie together the resources, authorization scopes and policies that specify _users U can perform actions A on resource R_.\n+\n+For more information about Keycloak Authorization Services, see {keycloak-authorization-services}, but note that the Authorization Services documentation is focused primarily on using the Authorization Services to protect web resources rather than access to Kafka.\n+\n+When viewing resources from the Keycloak user interface you will see a list of resource definitions.\n+These are resource specifiers, patterns in a specific format that are used to target policies to specific resources.\n+For example, this pattern targets only topics in kafka cluster 'cluster-1' with names starting with 'a_':\n+\n+----\n+kafka-cluster:cluster-1,Topic:a_*  \n+---- \n+\n+If a cluster is not specified by name ( `kafka-cluster:cluster-1`), the specifier targets any cluster. For example, this pattern targets any cluster with a name starting  'x_':\n+----\n+Group:x_* \n+----\n+\n+\n+The possible resource types, such as `Topic`, `Group` and `Cluster`, mirror the xref:kafka_authorization_model[Kafka authorization model].\n+\n+*Authorization Scopes* lists of all the possible actions (Kafka permissions) that can be granted on specific resources.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+The list of actions mirrors Kafka permissions and is the same for any deployment.\n+\n+Rather than importing authorization scopes manually into every new client, you can use a link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file.\n+\n+You must make sure that the client is enabled in Keycloak for Authorization Services. After which, you can import a JSON file from the *Authorization* tab. You can see the loaded scopes from the *Authorization Scopes* page.\n+\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+The *Policies* tab has filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the roles, or groups they are assigned.\n+Policies can even be defined programmatically using JavaScript so the logic considers the context of the client session, such as the IP of a Kafka client.\n+\n+The *Permissions* tab defines role bindings that associate resources, authorization scopes and policies for applying a set of permissions on specific resources for certain users.\n+\n+Use a clear, descriptive name for each permission definition so that it is obvious what kind of access is granted to which users.\n+For example:\n+\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n+Let's set custom consumer group name that starts with 'a_'\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+\n+We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n+\n+Use CTRL-C to exit.\n+\n+\n+### Using Kafka's CLI Administration Tools\n+\n+Let's now list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+We get one topic listed: `a_messages`.\n+\n+Let's try and list the consumer groups:\n+\n+    bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+Similarly to listing topics, we get one consumer group listed: `a_consumer_group_1`.\n+\n+There are more CLI administrative tools. For example we can try to get the default cluster configuration:\n+\n+    bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+      --entity-type brokers --describe --entity-default\n+\n+But that will fail with `Cluster authorization failed.` error, because this operation requires cluster level permissions which `team-a-client` does not have.\n+\n+\n+### Client with Different Permissions\n+\n+Let's prepare a configuration for `team-b-client`:\n+\n+```\n+cat > /tmp/team-b-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-b-client\" \\\n+  oauth.client.secret=\"team-b-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+If we look at `team-b-client` client configuration in Keycloak, under `Service Account Roles` we can see that it has `Dev Team B` realm role assigned.\n+Looking in Keycloak Console at the `kafka` client's `Authorization` tab where `Permissions` are listed, we can see the permissions that start with 'Dev Team B ...'.\n+These match the users and service accounts that have the `Dev Team B` realm role assigned to them.\n+The `Dev Team B` users have full access to topics beginning with 'b_' on Kafka cluster `my-cluster` (which is the designated cluster name of the demo cluster we brought up), and read access on topics that start with 'x_'.\n+\n+Let's try produce some messages to topic `a_messages` as `team-b-client`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get `Not authorized to access topics: [a_messages]` error as we expected. Let's try to produce to topic `b_messages`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic b_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+Message 2\n+Message 3\n+```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230db92e0f4d880e8d667eef9353cc2ceaa999f8"}, "originalPosition": 343}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTIxMDg3OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODozNzozM1rOH5oVPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODozNzozM1rOH5oVPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE5MTY3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This should work fine.\n          \n          \n            \n            Producing messages to topic `b_messages` is authorized and successful.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530191677", "createdAt": "2020-11-25T08:37:33Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,481 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+From the *Realm Settings* you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources.\n+\n+Resources define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of authorization scopes - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+Policies define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, permissions tie together the resources, authorization scopes and policies that specify _users U can perform actions A on resource R_.\n+\n+For more information about Keycloak Authorization Services, see {keycloak-authorization-services}, but note that the Authorization Services documentation is focused primarily on using the Authorization Services to protect web resources rather than access to Kafka.\n+\n+When viewing resources from the Keycloak user interface you will see a list of resource definitions.\n+These are resource specifiers, patterns in a specific format that are used to target policies to specific resources.\n+For example, this pattern targets only topics in kafka cluster 'cluster-1' with names starting with 'a_':\n+\n+----\n+kafka-cluster:cluster-1,Topic:a_*  \n+---- \n+\n+If a cluster is not specified by name ( `kafka-cluster:cluster-1`), the specifier targets any cluster. For example, this pattern targets any cluster with a name starting  'x_':\n+----\n+Group:x_* \n+----\n+\n+\n+The possible resource types, such as `Topic`, `Group` and `Cluster`, mirror the xref:kafka_authorization_model[Kafka authorization model].\n+\n+*Authorization Scopes* lists of all the possible actions (Kafka permissions) that can be granted on specific resources.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+The list of actions mirrors Kafka permissions and is the same for any deployment.\n+\n+Rather than importing authorization scopes manually into every new client, you can use a link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file.\n+\n+You must make sure that the client is enabled in Keycloak for Authorization Services. After which, you can import a JSON file from the *Authorization* tab. You can see the loaded scopes from the *Authorization Scopes* page.\n+\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+The *Policies* tab has filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the roles, or groups they are assigned.\n+Policies can even be defined programmatically using JavaScript so the logic considers the context of the client session, such as the IP of a Kafka client.\n+\n+The *Permissions* tab defines role bindings that associate resources, authorization scopes and policies for applying a set of permissions on specific resources for certain users.\n+\n+Use a clear, descriptive name for each permission definition so that it is obvious what kind of access is granted to which users.\n+For example:\n+\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n+Let's set custom consumer group name that starts with 'a_'\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+\n+We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n+\n+Use CTRL-C to exit.\n+\n+\n+### Using Kafka's CLI Administration Tools\n+\n+Let's now list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+We get one topic listed: `a_messages`.\n+\n+Let's try and list the consumer groups:\n+\n+    bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+Similarly to listing topics, we get one consumer group listed: `a_consumer_group_1`.\n+\n+There are more CLI administrative tools. For example we can try to get the default cluster configuration:\n+\n+    bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+      --entity-type brokers --describe --entity-default\n+\n+But that will fail with `Cluster authorization failed.` error, because this operation requires cluster level permissions which `team-a-client` does not have.\n+\n+\n+### Client with Different Permissions\n+\n+Let's prepare a configuration for `team-b-client`:\n+\n+```\n+cat > /tmp/team-b-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-b-client\" \\\n+  oauth.client.secret=\"team-b-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+If we look at `team-b-client` client configuration in Keycloak, under `Service Account Roles` we can see that it has `Dev Team B` realm role assigned.\n+Looking in Keycloak Console at the `kafka` client's `Authorization` tab where `Permissions` are listed, we can see the permissions that start with 'Dev Team B ...'.\n+These match the users and service accounts that have the `Dev Team B` realm role assigned to them.\n+The `Dev Team B` users have full access to topics beginning with 'b_' on Kafka cluster `my-cluster` (which is the designated cluster name of the demo cluster we brought up), and read access on topics that start with 'x_'.\n+\n+Let's try produce some messages to topic `a_messages` as `team-b-client`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get `Not authorized to access topics: [a_messages]` error as we expected. Let's try to produce to topic `b_messages`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic b_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+Message 2\n+Message 3\n+```\n+\n+This should work fine.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230db92e0f4d880e8d667eef9353cc2ceaa999f8"}, "originalPosition": 345}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTIzMjQwOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODo0Mjo1N1rOH5oiFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODo0Mjo1N1rOH5oiFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE5NDk2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            What about producing to topic `x_messages`. `team-b-client` is only supposed to be able to read from such a topic.\n          \n          \n            \n            \n          \n          \n            \n            ```\n          \n          \n            \n            bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n          \n          \n            \n              --producer.config /tmp/team-b-client.properties\n          \n          \n            \n            Message 1\n          \n          \n            \n            ```\n          \n          \n            \n            We switch again, but this time to topic that `team-b-client` can only read from, topic `x_messages`:\n          \n          \n            \n            \n          \n          \n            \n            [source,shell]\n          \n          \n            \n            ----\n          \n          \n            \n            bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n          \n          \n            \n              --producer.config /tmp/team-b-client.properties\n          \n          \n            \n            Message 1\n          \n          \n            \n            ----", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530194967", "createdAt": "2020-11-25T08:42:57Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,481 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+From the *Realm Settings* you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources.\n+\n+Resources define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of authorization scopes - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+Policies define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, permissions tie together the resources, authorization scopes and policies that specify _users U can perform actions A on resource R_.\n+\n+For more information about Keycloak Authorization Services, see {keycloak-authorization-services}, but note that the Authorization Services documentation is focused primarily on using the Authorization Services to protect web resources rather than access to Kafka.\n+\n+When viewing resources from the Keycloak user interface you will see a list of resource definitions.\n+These are resource specifiers, patterns in a specific format that are used to target policies to specific resources.\n+For example, this pattern targets only topics in kafka cluster 'cluster-1' with names starting with 'a_':\n+\n+----\n+kafka-cluster:cluster-1,Topic:a_*  \n+---- \n+\n+If a cluster is not specified by name ( `kafka-cluster:cluster-1`), the specifier targets any cluster. For example, this pattern targets any cluster with a name starting  'x_':\n+----\n+Group:x_* \n+----\n+\n+\n+The possible resource types, such as `Topic`, `Group` and `Cluster`, mirror the xref:kafka_authorization_model[Kafka authorization model].\n+\n+*Authorization Scopes* lists of all the possible actions (Kafka permissions) that can be granted on specific resources.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+The list of actions mirrors Kafka permissions and is the same for any deployment.\n+\n+Rather than importing authorization scopes manually into every new client, you can use a link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file.\n+\n+You must make sure that the client is enabled in Keycloak for Authorization Services. After which, you can import a JSON file from the *Authorization* tab. You can see the loaded scopes from the *Authorization Scopes* page.\n+\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+The *Policies* tab has filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the roles, or groups they are assigned.\n+Policies can even be defined programmatically using JavaScript so the logic considers the context of the client session, such as the IP of a Kafka client.\n+\n+The *Permissions* tab defines role bindings that associate resources, authorization scopes and policies for applying a set of permissions on specific resources for certain users.\n+\n+Use a clear, descriptive name for each permission definition so that it is obvious what kind of access is granted to which users.\n+For example:\n+\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n+Let's set custom consumer group name that starts with 'a_'\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+\n+We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n+\n+Use CTRL-C to exit.\n+\n+\n+### Using Kafka's CLI Administration Tools\n+\n+Let's now list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+We get one topic listed: `a_messages`.\n+\n+Let's try and list the consumer groups:\n+\n+    bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+Similarly to listing topics, we get one consumer group listed: `a_consumer_group_1`.\n+\n+There are more CLI administrative tools. For example we can try to get the default cluster configuration:\n+\n+    bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+      --entity-type brokers --describe --entity-default\n+\n+But that will fail with `Cluster authorization failed.` error, because this operation requires cluster level permissions which `team-a-client` does not have.\n+\n+\n+### Client with Different Permissions\n+\n+Let's prepare a configuration for `team-b-client`:\n+\n+```\n+cat > /tmp/team-b-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-b-client\" \\\n+  oauth.client.secret=\"team-b-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+If we look at `team-b-client` client configuration in Keycloak, under `Service Account Roles` we can see that it has `Dev Team B` realm role assigned.\n+Looking in Keycloak Console at the `kafka` client's `Authorization` tab where `Permissions` are listed, we can see the permissions that start with 'Dev Team B ...'.\n+These match the users and service accounts that have the `Dev Team B` realm role assigned to them.\n+The `Dev Team B` users have full access to topics beginning with 'b_' on Kafka cluster `my-cluster` (which is the designated cluster name of the demo cluster we brought up), and read access on topics that start with 'x_'.\n+\n+Let's try produce some messages to topic `a_messages` as `team-b-client`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get `Not authorized to access topics: [a_messages]` error as we expected. Let's try to produce to topic `b_messages`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic b_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+Message 2\n+Message 3\n+```\n+\n+This should work fine.\n+\n+What about producing to topic `x_messages`. `team-b-client` is only supposed to be able to read from such a topic.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230db92e0f4d880e8d667eef9353cc2ceaa999f8"}, "originalPosition": 353}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTM4MDgxOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOToxODo0MlrOH5p8Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOToxODo0MlrOH5p8Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIxNzk4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            We get a `Not authorized to access topics: [x_messages]` error as we expected.\n          \n          \n            \n            Client `team-a-client`, on the other hand, should be able to write to such a topic:\n          \n          \n            \n            A `Not authorized to access topics: [x_messages]` error is returned, as expected, so we switch to `team-a-client`:", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530217987", "createdAt": "2020-11-25T09:18:42Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,481 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+From the *Realm Settings* you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources.\n+\n+Resources define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of authorization scopes - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+Policies define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, permissions tie together the resources, authorization scopes and policies that specify _users U can perform actions A on resource R_.\n+\n+For more information about Keycloak Authorization Services, see {keycloak-authorization-services}, but note that the Authorization Services documentation is focused primarily on using the Authorization Services to protect web resources rather than access to Kafka.\n+\n+When viewing resources from the Keycloak user interface you will see a list of resource definitions.\n+These are resource specifiers, patterns in a specific format that are used to target policies to specific resources.\n+For example, this pattern targets only topics in kafka cluster 'cluster-1' with names starting with 'a_':\n+\n+----\n+kafka-cluster:cluster-1,Topic:a_*  \n+---- \n+\n+If a cluster is not specified by name ( `kafka-cluster:cluster-1`), the specifier targets any cluster. For example, this pattern targets any cluster with a name starting  'x_':\n+----\n+Group:x_* \n+----\n+\n+\n+The possible resource types, such as `Topic`, `Group` and `Cluster`, mirror the xref:kafka_authorization_model[Kafka authorization model].\n+\n+*Authorization Scopes* lists of all the possible actions (Kafka permissions) that can be granted on specific resources.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+The list of actions mirrors Kafka permissions and is the same for any deployment.\n+\n+Rather than importing authorization scopes manually into every new client, you can use a link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file.\n+\n+You must make sure that the client is enabled in Keycloak for Authorization Services. After which, you can import a JSON file from the *Authorization* tab. You can see the loaded scopes from the *Authorization Scopes* page.\n+\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+The *Policies* tab has filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the roles, or groups they are assigned.\n+Policies can even be defined programmatically using JavaScript so the logic considers the context of the client session, such as the IP of a Kafka client.\n+\n+The *Permissions* tab defines role bindings that associate resources, authorization scopes and policies for applying a set of permissions on specific resources for certain users.\n+\n+Use a clear, descriptive name for each permission definition so that it is obvious what kind of access is granted to which users.\n+For example:\n+\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n+Let's set custom consumer group name that starts with 'a_'\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+\n+We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n+\n+Use CTRL-C to exit.\n+\n+\n+### Using Kafka's CLI Administration Tools\n+\n+Let's now list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+We get one topic listed: `a_messages`.\n+\n+Let's try and list the consumer groups:\n+\n+    bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+Similarly to listing topics, we get one consumer group listed: `a_consumer_group_1`.\n+\n+There are more CLI administrative tools. For example we can try to get the default cluster configuration:\n+\n+    bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+      --entity-type brokers --describe --entity-default\n+\n+But that will fail with `Cluster authorization failed.` error, because this operation requires cluster level permissions which `team-a-client` does not have.\n+\n+\n+### Client with Different Permissions\n+\n+Let's prepare a configuration for `team-b-client`:\n+\n+```\n+cat > /tmp/team-b-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-b-client\" \\\n+  oauth.client.secret=\"team-b-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+If we look at `team-b-client` client configuration in Keycloak, under `Service Account Roles` we can see that it has `Dev Team B` realm role assigned.\n+Looking in Keycloak Console at the `kafka` client's `Authorization` tab where `Permissions` are listed, we can see the permissions that start with 'Dev Team B ...'.\n+These match the users and service accounts that have the `Dev Team B` realm role assigned to them.\n+The `Dev Team B` users have full access to topics beginning with 'b_' on Kafka cluster `my-cluster` (which is the designated cluster name of the demo cluster we brought up), and read access on topics that start with 'x_'.\n+\n+Let's try produce some messages to topic `a_messages` as `team-b-client`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get `Not authorized to access topics: [a_messages]` error as we expected. Let's try to produce to topic `b_messages`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic b_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+Message 2\n+Message 3\n+```\n+\n+This should work fine.\n+\n+What about producing to topic `x_messages`. `team-b-client` is only supposed to be able to read from such a topic.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get a `Not authorized to access topics: [x_messages]` error as we expected.\n+Client `team-a-client`, on the other hand, should be able to write to such a topic:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230db92e0f4d880e8d667eef9353cc2ceaa999f8"}, "originalPosition": 356}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTQwOTI4OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOToyNTowNlrOH5qNfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOToyNTowNlrOH5qNfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIyMjQ2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            ```\n          \n          \n            \n            bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n          \n          \n            \n              --producer.config /tmp/team-a-client.properties\n          \n          \n            \n            Message 1\n          \n          \n            \n            ```\n          \n          \n            \n            \n          \n          \n            \n            [source,shell]\n          \n          \n            \n            ----\n          \n          \n            \n            bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n          \n          \n            \n              --producer.config /tmp/team-a-client.properties\n          \n          \n            \n            Message 1\n          \n          \n            \n            ----", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530222461", "createdAt": "2020-11-25T09:25:06Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,481 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+From the *Realm Settings* you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources.\n+\n+Resources define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of authorization scopes - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+Policies define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, permissions tie together the resources, authorization scopes and policies that specify _users U can perform actions A on resource R_.\n+\n+For more information about Keycloak Authorization Services, see {keycloak-authorization-services}, but note that the Authorization Services documentation is focused primarily on using the Authorization Services to protect web resources rather than access to Kafka.\n+\n+When viewing resources from the Keycloak user interface you will see a list of resource definitions.\n+These are resource specifiers, patterns in a specific format that are used to target policies to specific resources.\n+For example, this pattern targets only topics in kafka cluster 'cluster-1' with names starting with 'a_':\n+\n+----\n+kafka-cluster:cluster-1,Topic:a_*  \n+---- \n+\n+If a cluster is not specified by name ( `kafka-cluster:cluster-1`), the specifier targets any cluster. For example, this pattern targets any cluster with a name starting  'x_':\n+----\n+Group:x_* \n+----\n+\n+\n+The possible resource types, such as `Topic`, `Group` and `Cluster`, mirror the xref:kafka_authorization_model[Kafka authorization model].\n+\n+*Authorization Scopes* lists of all the possible actions (Kafka permissions) that can be granted on specific resources.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+The list of actions mirrors Kafka permissions and is the same for any deployment.\n+\n+Rather than importing authorization scopes manually into every new client, you can use a link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file.\n+\n+You must make sure that the client is enabled in Keycloak for Authorization Services. After which, you can import a JSON file from the *Authorization* tab. You can see the loaded scopes from the *Authorization Scopes* page.\n+\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+The *Policies* tab has filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the roles, or groups they are assigned.\n+Policies can even be defined programmatically using JavaScript so the logic considers the context of the client session, such as the IP of a Kafka client.\n+\n+The *Permissions* tab defines role bindings that associate resources, authorization scopes and policies for applying a set of permissions on specific resources for certain users.\n+\n+Use a clear, descriptive name for each permission definition so that it is obvious what kind of access is granted to which users.\n+For example:\n+\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n+Let's set custom consumer group name that starts with 'a_'\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+\n+We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n+\n+Use CTRL-C to exit.\n+\n+\n+### Using Kafka's CLI Administration Tools\n+\n+Let's now list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+We get one topic listed: `a_messages`.\n+\n+Let's try and list the consumer groups:\n+\n+    bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+Similarly to listing topics, we get one consumer group listed: `a_consumer_group_1`.\n+\n+There are more CLI administrative tools. For example we can try to get the default cluster configuration:\n+\n+    bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+      --entity-type brokers --describe --entity-default\n+\n+But that will fail with `Cluster authorization failed.` error, because this operation requires cluster level permissions which `team-a-client` does not have.\n+\n+\n+### Client with Different Permissions\n+\n+Let's prepare a configuration for `team-b-client`:\n+\n+```\n+cat > /tmp/team-b-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-b-client\" \\\n+  oauth.client.secret=\"team-b-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+If we look at `team-b-client` client configuration in Keycloak, under `Service Account Roles` we can see that it has `Dev Team B` realm role assigned.\n+Looking in Keycloak Console at the `kafka` client's `Authorization` tab where `Permissions` are listed, we can see the permissions that start with 'Dev Team B ...'.\n+These match the users and service accounts that have the `Dev Team B` realm role assigned to them.\n+The `Dev Team B` users have full access to topics beginning with 'b_' on Kafka cluster `my-cluster` (which is the designated cluster name of the demo cluster we brought up), and read access on topics that start with 'x_'.\n+\n+Let's try produce some messages to topic `a_messages` as `team-b-client`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get `Not authorized to access topics: [a_messages]` error as we expected. Let's try to produce to topic `b_messages`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic b_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+Message 2\n+Message 3\n+```\n+\n+This should work fine.\n+\n+What about producing to topic `x_messages`. `team-b-client` is only supposed to be able to read from such a topic.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get a `Not authorized to access topics: [x_messages]` error as we expected.\n+Client `team-a-client`, on the other hand, should be able to write to such a topic:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+Message 1\n+```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230db92e0f4d880e8d667eef9353cc2ceaa999f8"}, "originalPosition": 362}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTQyNjQ1OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOToyOToxMVrOH5qYRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOToyOToxMVrOH5qYRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIyNTIyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            However, we again receive `Not authorized to access topics: [x_messages]`. What's going on?\n          \n          \n            \n            The reason for failure is that while `team-a-client` can write to `x_messages` topic, it does not have a permission to create a topic if it does not yet exist.\n          \n          \n            \n            A `Not authorized to access topics: [x_messages]` error is returned again. Though `team-a-client` can write to the `x_messages` topic, it it does not have a permission to create a topic if it does not yet exist.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530225222", "createdAt": "2020-11-25T09:29:11Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,481 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+From the *Realm Settings* you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources.\n+\n+Resources define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of authorization scopes - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+Policies define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, permissions tie together the resources, authorization scopes and policies that specify _users U can perform actions A on resource R_.\n+\n+For more information about Keycloak Authorization Services, see {keycloak-authorization-services}, but note that the Authorization Services documentation is focused primarily on using the Authorization Services to protect web resources rather than access to Kafka.\n+\n+When viewing resources from the Keycloak user interface you will see a list of resource definitions.\n+These are resource specifiers, patterns in a specific format that are used to target policies to specific resources.\n+For example, this pattern targets only topics in kafka cluster 'cluster-1' with names starting with 'a_':\n+\n+----\n+kafka-cluster:cluster-1,Topic:a_*  \n+---- \n+\n+If a cluster is not specified by name ( `kafka-cluster:cluster-1`), the specifier targets any cluster. For example, this pattern targets any cluster with a name starting  'x_':\n+----\n+Group:x_* \n+----\n+\n+\n+The possible resource types, such as `Topic`, `Group` and `Cluster`, mirror the xref:kafka_authorization_model[Kafka authorization model].\n+\n+*Authorization Scopes* lists of all the possible actions (Kafka permissions) that can be granted on specific resources.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+The list of actions mirrors Kafka permissions and is the same for any deployment.\n+\n+Rather than importing authorization scopes manually into every new client, you can use a link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file.\n+\n+You must make sure that the client is enabled in Keycloak for Authorization Services. After which, you can import a JSON file from the *Authorization* tab. You can see the loaded scopes from the *Authorization Scopes* page.\n+\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+The *Policies* tab has filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the roles, or groups they are assigned.\n+Policies can even be defined programmatically using JavaScript so the logic considers the context of the client session, such as the IP of a Kafka client.\n+\n+The *Permissions* tab defines role bindings that associate resources, authorization scopes and policies for applying a set of permissions on specific resources for certain users.\n+\n+Use a clear, descriptive name for each permission definition so that it is obvious what kind of access is granted to which users.\n+For example:\n+\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n+Let's set custom consumer group name that starts with 'a_'\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+\n+We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n+\n+Use CTRL-C to exit.\n+\n+\n+### Using Kafka's CLI Administration Tools\n+\n+Let's now list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+We get one topic listed: `a_messages`.\n+\n+Let's try and list the consumer groups:\n+\n+    bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+Similarly to listing topics, we get one consumer group listed: `a_consumer_group_1`.\n+\n+There are more CLI administrative tools. For example we can try to get the default cluster configuration:\n+\n+    bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+      --entity-type brokers --describe --entity-default\n+\n+But that will fail with `Cluster authorization failed.` error, because this operation requires cluster level permissions which `team-a-client` does not have.\n+\n+\n+### Client with Different Permissions\n+\n+Let's prepare a configuration for `team-b-client`:\n+\n+```\n+cat > /tmp/team-b-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-b-client\" \\\n+  oauth.client.secret=\"team-b-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+If we look at `team-b-client` client configuration in Keycloak, under `Service Account Roles` we can see that it has `Dev Team B` realm role assigned.\n+Looking in Keycloak Console at the `kafka` client's `Authorization` tab where `Permissions` are listed, we can see the permissions that start with 'Dev Team B ...'.\n+These match the users and service accounts that have the `Dev Team B` realm role assigned to them.\n+The `Dev Team B` users have full access to topics beginning with 'b_' on Kafka cluster `my-cluster` (which is the designated cluster name of the demo cluster we brought up), and read access on topics that start with 'x_'.\n+\n+Let's try produce some messages to topic `a_messages` as `team-b-client`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get `Not authorized to access topics: [a_messages]` error as we expected. Let's try to produce to topic `b_messages`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic b_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+Message 2\n+Message 3\n+```\n+\n+This should work fine.\n+\n+What about producing to topic `x_messages`. `team-b-client` is only supposed to be able to read from such a topic.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get a `Not authorized to access topics: [x_messages]` error as we expected.\n+Client `team-a-client`, on the other hand, should be able to write to such a topic:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+Message 1\n+```\n+\n+However, we again receive `Not authorized to access topics: [x_messages]`. What's going on?\n+The reason for failure is that while `team-a-client` can write to `x_messages` topic, it does not have a permission to create a topic if it does not yet exist.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230db92e0f4d880e8d667eef9353cc2ceaa999f8"}, "originalPosition": 365}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTQ0MjA5OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTozMjoyNFrOH5qhZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTozMjoyNFrOH5qhZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIyNzU1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            We now need a power user that can create a topic with all the proper settings - like the right number of partitions and replicas.\n          \n          \n            \n            Before `team-a-client` can write to the `x_messages` topic, a admin _power user_ must create it with the correct configuration, such as the number of partitions and replicas.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530227556", "createdAt": "2020-11-25T09:32:24Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,481 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+From the *Realm Settings* you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources.\n+\n+Resources define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of authorization scopes - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+Policies define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, permissions tie together the resources, authorization scopes and policies that specify _users U can perform actions A on resource R_.\n+\n+For more information about Keycloak Authorization Services, see {keycloak-authorization-services}, but note that the Authorization Services documentation is focused primarily on using the Authorization Services to protect web resources rather than access to Kafka.\n+\n+When viewing resources from the Keycloak user interface you will see a list of resource definitions.\n+These are resource specifiers, patterns in a specific format that are used to target policies to specific resources.\n+For example, this pattern targets only topics in kafka cluster 'cluster-1' with names starting with 'a_':\n+\n+----\n+kafka-cluster:cluster-1,Topic:a_*  \n+---- \n+\n+If a cluster is not specified by name ( `kafka-cluster:cluster-1`), the specifier targets any cluster. For example, this pattern targets any cluster with a name starting  'x_':\n+----\n+Group:x_* \n+----\n+\n+\n+The possible resource types, such as `Topic`, `Group` and `Cluster`, mirror the xref:kafka_authorization_model[Kafka authorization model].\n+\n+*Authorization Scopes* lists of all the possible actions (Kafka permissions) that can be granted on specific resources.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+The list of actions mirrors Kafka permissions and is the same for any deployment.\n+\n+Rather than importing authorization scopes manually into every new client, you can use a link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file.\n+\n+You must make sure that the client is enabled in Keycloak for Authorization Services. After which, you can import a JSON file from the *Authorization* tab. You can see the loaded scopes from the *Authorization Scopes* page.\n+\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+The *Policies* tab has filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the roles, or groups they are assigned.\n+Policies can even be defined programmatically using JavaScript so the logic considers the context of the client session, such as the IP of a Kafka client.\n+\n+The *Permissions* tab defines role bindings that associate resources, authorization scopes and policies for applying a set of permissions on specific resources for certain users.\n+\n+Use a clear, descriptive name for each permission definition so that it is obvious what kind of access is granted to which users.\n+For example:\n+\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n+Let's set custom consumer group name that starts with 'a_'\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+\n+We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n+\n+Use CTRL-C to exit.\n+\n+\n+### Using Kafka's CLI Administration Tools\n+\n+Let's now list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+We get one topic listed: `a_messages`.\n+\n+Let's try and list the consumer groups:\n+\n+    bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+Similarly to listing topics, we get one consumer group listed: `a_consumer_group_1`.\n+\n+There are more CLI administrative tools. For example we can try to get the default cluster configuration:\n+\n+    bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+      --entity-type brokers --describe --entity-default\n+\n+But that will fail with `Cluster authorization failed.` error, because this operation requires cluster level permissions which `team-a-client` does not have.\n+\n+\n+### Client with Different Permissions\n+\n+Let's prepare a configuration for `team-b-client`:\n+\n+```\n+cat > /tmp/team-b-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-b-client\" \\\n+  oauth.client.secret=\"team-b-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+If we look at `team-b-client` client configuration in Keycloak, under `Service Account Roles` we can see that it has `Dev Team B` realm role assigned.\n+Looking in Keycloak Console at the `kafka` client's `Authorization` tab where `Permissions` are listed, we can see the permissions that start with 'Dev Team B ...'.\n+These match the users and service accounts that have the `Dev Team B` realm role assigned to them.\n+The `Dev Team B` users have full access to topics beginning with 'b_' on Kafka cluster `my-cluster` (which is the designated cluster name of the demo cluster we brought up), and read access on topics that start with 'x_'.\n+\n+Let's try produce some messages to topic `a_messages` as `team-b-client`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get `Not authorized to access topics: [a_messages]` error as we expected. Let's try to produce to topic `b_messages`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic b_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+Message 2\n+Message 3\n+```\n+\n+This should work fine.\n+\n+What about producing to topic `x_messages`. `team-b-client` is only supposed to be able to read from such a topic.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get a `Not authorized to access topics: [x_messages]` error as we expected.\n+Client `team-a-client`, on the other hand, should be able to write to such a topic:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+Message 1\n+```\n+\n+However, we again receive `Not authorized to access topics: [x_messages]`. What's going on?\n+The reason for failure is that while `team-a-client` can write to `x_messages` topic, it does not have a permission to create a topic if it does not yet exist.\n+\n+We now need a power user that can create a topic with all the proper settings - like the right number of partitions and replicas.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230db92e0f4d880e8d667eef9353cc2ceaa999f8"}, "originalPosition": 367}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTQ3MTYwOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTozOToyMFrOH5qzwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTozOToyMFrOH5qzwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIzMjI1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ### Power User Can Do Anything\n          \n          \n            \n            .Managing Kafka with an authorized admin", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530232257", "createdAt": "2020-11-25T09:39:20Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,481 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+From the *Realm Settings* you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources.\n+\n+Resources define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of authorization scopes - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+Policies define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, permissions tie together the resources, authorization scopes and policies that specify _users U can perform actions A on resource R_.\n+\n+For more information about Keycloak Authorization Services, see {keycloak-authorization-services}, but note that the Authorization Services documentation is focused primarily on using the Authorization Services to protect web resources rather than access to Kafka.\n+\n+When viewing resources from the Keycloak user interface you will see a list of resource definitions.\n+These are resource specifiers, patterns in a specific format that are used to target policies to specific resources.\n+For example, this pattern targets only topics in kafka cluster 'cluster-1' with names starting with 'a_':\n+\n+----\n+kafka-cluster:cluster-1,Topic:a_*  \n+---- \n+\n+If a cluster is not specified by name ( `kafka-cluster:cluster-1`), the specifier targets any cluster. For example, this pattern targets any cluster with a name starting  'x_':\n+----\n+Group:x_* \n+----\n+\n+\n+The possible resource types, such as `Topic`, `Group` and `Cluster`, mirror the xref:kafka_authorization_model[Kafka authorization model].\n+\n+*Authorization Scopes* lists of all the possible actions (Kafka permissions) that can be granted on specific resources.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+The list of actions mirrors Kafka permissions and is the same for any deployment.\n+\n+Rather than importing authorization scopes manually into every new client, you can use a link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file.\n+\n+You must make sure that the client is enabled in Keycloak for Authorization Services. After which, you can import a JSON file from the *Authorization* tab. You can see the loaded scopes from the *Authorization Scopes* page.\n+\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+The *Policies* tab has filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the roles, or groups they are assigned.\n+Policies can even be defined programmatically using JavaScript so the logic considers the context of the client session, such as the IP of a Kafka client.\n+\n+The *Permissions* tab defines role bindings that associate resources, authorization scopes and policies for applying a set of permissions on specific resources for certain users.\n+\n+Use a clear, descriptive name for each permission definition so that it is obvious what kind of access is granted to which users.\n+For example:\n+\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n+Let's set custom consumer group name that starts with 'a_'\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+\n+We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n+\n+Use CTRL-C to exit.\n+\n+\n+### Using Kafka's CLI Administration Tools\n+\n+Let's now list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+We get one topic listed: `a_messages`.\n+\n+Let's try and list the consumer groups:\n+\n+    bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+Similarly to listing topics, we get one consumer group listed: `a_consumer_group_1`.\n+\n+There are more CLI administrative tools. For example we can try to get the default cluster configuration:\n+\n+    bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+      --entity-type brokers --describe --entity-default\n+\n+But that will fail with `Cluster authorization failed.` error, because this operation requires cluster level permissions which `team-a-client` does not have.\n+\n+\n+### Client with Different Permissions\n+\n+Let's prepare a configuration for `team-b-client`:\n+\n+```\n+cat > /tmp/team-b-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-b-client\" \\\n+  oauth.client.secret=\"team-b-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+If we look at `team-b-client` client configuration in Keycloak, under `Service Account Roles` we can see that it has `Dev Team B` realm role assigned.\n+Looking in Keycloak Console at the `kafka` client's `Authorization` tab where `Permissions` are listed, we can see the permissions that start with 'Dev Team B ...'.\n+These match the users and service accounts that have the `Dev Team B` realm role assigned to them.\n+The `Dev Team B` users have full access to topics beginning with 'b_' on Kafka cluster `my-cluster` (which is the designated cluster name of the demo cluster we brought up), and read access on topics that start with 'x_'.\n+\n+Let's try produce some messages to topic `a_messages` as `team-b-client`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get `Not authorized to access topics: [a_messages]` error as we expected. Let's try to produce to topic `b_messages`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic b_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+Message 2\n+Message 3\n+```\n+\n+This should work fine.\n+\n+What about producing to topic `x_messages`. `team-b-client` is only supposed to be able to read from such a topic.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get a `Not authorized to access topics: [x_messages]` error as we expected.\n+Client `team-a-client`, on the other hand, should be able to write to such a topic:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+Message 1\n+```\n+\n+However, we again receive `Not authorized to access topics: [x_messages]`. What's going on?\n+The reason for failure is that while `team-a-client` can write to `x_messages` topic, it does not have a permission to create a topic if it does not yet exist.\n+\n+We now need a power user that can create a topic with all the proper settings - like the right number of partitions and replicas.\n+\n+\n+### Power User Can Do Anything", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230db92e0f4d880e8d667eef9353cc2ceaa999f8"}, "originalPosition": 370}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTQ5MzA2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTo0NDoxM1rOH5rBCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTo0NDoxM1rOH5rBCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIzNTY1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Let's create a configuration for user `bob` who has full ability to manage everything on Kafka cluster `my-cluster`.\n          \n          \n            \n            \n          \n          \n            \n            We'll need some helper scripts so we can authenticate to the `keycloak` instance.\n          \n          \n            \n            Admin user `bob` is created with full access to manage everything on the Kafka cluster `my-cluster`.\n          \n          \n            \n            \n          \n          \n            \n            Helper scripts are used to authenticate to the `keycloak` instance.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530235659", "createdAt": "2020-11-25T09:44:13Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,481 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+From the *Realm Settings* you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources.\n+\n+Resources define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of authorization scopes - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+Policies define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, permissions tie together the resources, authorization scopes and policies that specify _users U can perform actions A on resource R_.\n+\n+For more information about Keycloak Authorization Services, see {keycloak-authorization-services}, but note that the Authorization Services documentation is focused primarily on using the Authorization Services to protect web resources rather than access to Kafka.\n+\n+When viewing resources from the Keycloak user interface you will see a list of resource definitions.\n+These are resource specifiers, patterns in a specific format that are used to target policies to specific resources.\n+For example, this pattern targets only topics in kafka cluster 'cluster-1' with names starting with 'a_':\n+\n+----\n+kafka-cluster:cluster-1,Topic:a_*  \n+---- \n+\n+If a cluster is not specified by name ( `kafka-cluster:cluster-1`), the specifier targets any cluster. For example, this pattern targets any cluster with a name starting  'x_':\n+----\n+Group:x_* \n+----\n+\n+\n+The possible resource types, such as `Topic`, `Group` and `Cluster`, mirror the xref:kafka_authorization_model[Kafka authorization model].\n+\n+*Authorization Scopes* lists of all the possible actions (Kafka permissions) that can be granted on specific resources.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+The list of actions mirrors Kafka permissions and is the same for any deployment.\n+\n+Rather than importing authorization scopes manually into every new client, you can use a link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file.\n+\n+You must make sure that the client is enabled in Keycloak for Authorization Services. After which, you can import a JSON file from the *Authorization* tab. You can see the loaded scopes from the *Authorization Scopes* page.\n+\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+The *Policies* tab has filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the roles, or groups they are assigned.\n+Policies can even be defined programmatically using JavaScript so the logic considers the context of the client session, such as the IP of a Kafka client.\n+\n+The *Permissions* tab defines role bindings that associate resources, authorization scopes and policies for applying a set of permissions on specific resources for certain users.\n+\n+Use a clear, descriptive name for each permission definition so that it is obvious what kind of access is granted to which users.\n+For example:\n+\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n+Let's set custom consumer group name that starts with 'a_'\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+\n+We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n+\n+Use CTRL-C to exit.\n+\n+\n+### Using Kafka's CLI Administration Tools\n+\n+Let's now list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+We get one topic listed: `a_messages`.\n+\n+Let's try and list the consumer groups:\n+\n+    bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+Similarly to listing topics, we get one consumer group listed: `a_consumer_group_1`.\n+\n+There are more CLI administrative tools. For example we can try to get the default cluster configuration:\n+\n+    bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+      --entity-type brokers --describe --entity-default\n+\n+But that will fail with `Cluster authorization failed.` error, because this operation requires cluster level permissions which `team-a-client` does not have.\n+\n+\n+### Client with Different Permissions\n+\n+Let's prepare a configuration for `team-b-client`:\n+\n+```\n+cat > /tmp/team-b-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-b-client\" \\\n+  oauth.client.secret=\"team-b-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+If we look at `team-b-client` client configuration in Keycloak, under `Service Account Roles` we can see that it has `Dev Team B` realm role assigned.\n+Looking in Keycloak Console at the `kafka` client's `Authorization` tab where `Permissions` are listed, we can see the permissions that start with 'Dev Team B ...'.\n+These match the users and service accounts that have the `Dev Team B` realm role assigned to them.\n+The `Dev Team B` users have full access to topics beginning with 'b_' on Kafka cluster `my-cluster` (which is the designated cluster name of the demo cluster we brought up), and read access on topics that start with 'x_'.\n+\n+Let's try produce some messages to topic `a_messages` as `team-b-client`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get `Not authorized to access topics: [a_messages]` error as we expected. Let's try to produce to topic `b_messages`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic b_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+Message 2\n+Message 3\n+```\n+\n+This should work fine.\n+\n+What about producing to topic `x_messages`. `team-b-client` is only supposed to be able to read from such a topic.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get a `Not authorized to access topics: [x_messages]` error as we expected.\n+Client `team-a-client`, on the other hand, should be able to write to such a topic:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+Message 1\n+```\n+\n+However, we again receive `Not authorized to access topics: [x_messages]`. What's going on?\n+The reason for failure is that while `team-a-client` can write to `x_messages` topic, it does not have a permission to create a topic if it does not yet exist.\n+\n+We now need a power user that can create a topic with all the proper settings - like the right number of partitions and replicas.\n+\n+\n+### Power User Can Do Anything\n+\n+Let's create a configuration for user `bob` who has full ability to manage everything on Kafka cluster `my-cluster`.\n+\n+We'll need some helper scripts so we can authenticate to the `keycloak` instance.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230db92e0f4d880e8d667eef9353cc2ceaa999f8"}, "originalPosition": 374}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTUxMDg1OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTo0ODowMlrOH5rLtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTo0ODowMlrOH5rLtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIzODM4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Download the following `oauth.sh` and `jwt.sh` tools to `/tmp` dir and make them executable:\n          \n          \n            \n            \n          \n          \n            \n               curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/oauth.sh -s > /tmp/oauth.sh\n          \n          \n            \n               chmod +x /tmp/oauth.sh\n          \n          \n            \n            \n          \n          \n            \n               curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/jwt.sh -s > /tmp/jwt.sh\n          \n          \n            \n               chmod +x /tmp/jwt.sh\n          \n          \n            \n            The following scripts are downloaded to `/tmp` dir and made executable:\n          \n          \n            \n            \n          \n          \n            \n            [source,shell]\n          \n          \n            \n            ----\n          \n          \n            \n            curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/oauth.sh -s > /tmp/oauth.sh\n          \n          \n            \n               chmod +x /tmp/oauth.sh\n          \n          \n            \n            \n          \n          \n            \n            curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/jwt.sh -s > /tmp/jwt.sh\n          \n          \n            \n               chmod +x /tmp/jwt.sh\n          \n          \n            \n            ----", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530238388", "createdAt": "2020-11-25T09:48:02Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,481 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+From the *Realm Settings* you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources.\n+\n+Resources define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of authorization scopes - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+Policies define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, permissions tie together the resources, authorization scopes and policies that specify _users U can perform actions A on resource R_.\n+\n+For more information about Keycloak Authorization Services, see {keycloak-authorization-services}, but note that the Authorization Services documentation is focused primarily on using the Authorization Services to protect web resources rather than access to Kafka.\n+\n+When viewing resources from the Keycloak user interface you will see a list of resource definitions.\n+These are resource specifiers, patterns in a specific format that are used to target policies to specific resources.\n+For example, this pattern targets only topics in kafka cluster 'cluster-1' with names starting with 'a_':\n+\n+----\n+kafka-cluster:cluster-1,Topic:a_*  \n+---- \n+\n+If a cluster is not specified by name ( `kafka-cluster:cluster-1`), the specifier targets any cluster. For example, this pattern targets any cluster with a name starting  'x_':\n+----\n+Group:x_* \n+----\n+\n+\n+The possible resource types, such as `Topic`, `Group` and `Cluster`, mirror the xref:kafka_authorization_model[Kafka authorization model].\n+\n+*Authorization Scopes* lists of all the possible actions (Kafka permissions) that can be granted on specific resources.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+The list of actions mirrors Kafka permissions and is the same for any deployment.\n+\n+Rather than importing authorization scopes manually into every new client, you can use a link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file.\n+\n+You must make sure that the client is enabled in Keycloak for Authorization Services. After which, you can import a JSON file from the *Authorization* tab. You can see the loaded scopes from the *Authorization Scopes* page.\n+\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+The *Policies* tab has filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the roles, or groups they are assigned.\n+Policies can even be defined programmatically using JavaScript so the logic considers the context of the client session, such as the IP of a Kafka client.\n+\n+The *Permissions* tab defines role bindings that associate resources, authorization scopes and policies for applying a set of permissions on specific resources for certain users.\n+\n+Use a clear, descriptive name for each permission definition so that it is obvious what kind of access is granted to which users.\n+For example:\n+\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n+Let's set custom consumer group name that starts with 'a_'\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+\n+We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n+\n+Use CTRL-C to exit.\n+\n+\n+### Using Kafka's CLI Administration Tools\n+\n+Let's now list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+We get one topic listed: `a_messages`.\n+\n+Let's try and list the consumer groups:\n+\n+    bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+Similarly to listing topics, we get one consumer group listed: `a_consumer_group_1`.\n+\n+There are more CLI administrative tools. For example we can try to get the default cluster configuration:\n+\n+    bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+      --entity-type brokers --describe --entity-default\n+\n+But that will fail with `Cluster authorization failed.` error, because this operation requires cluster level permissions which `team-a-client` does not have.\n+\n+\n+### Client with Different Permissions\n+\n+Let's prepare a configuration for `team-b-client`:\n+\n+```\n+cat > /tmp/team-b-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-b-client\" \\\n+  oauth.client.secret=\"team-b-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+If we look at `team-b-client` client configuration in Keycloak, under `Service Account Roles` we can see that it has `Dev Team B` realm role assigned.\n+Looking in Keycloak Console at the `kafka` client's `Authorization` tab where `Permissions` are listed, we can see the permissions that start with 'Dev Team B ...'.\n+These match the users and service accounts that have the `Dev Team B` realm role assigned to them.\n+The `Dev Team B` users have full access to topics beginning with 'b_' on Kafka cluster `my-cluster` (which is the designated cluster name of the demo cluster we brought up), and read access on topics that start with 'x_'.\n+\n+Let's try produce some messages to topic `a_messages` as `team-b-client`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get `Not authorized to access topics: [a_messages]` error as we expected. Let's try to produce to topic `b_messages`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic b_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+Message 2\n+Message 3\n+```\n+\n+This should work fine.\n+\n+What about producing to topic `x_messages`. `team-b-client` is only supposed to be able to read from such a topic.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get a `Not authorized to access topics: [x_messages]` error as we expected.\n+Client `team-a-client`, on the other hand, should be able to write to such a topic:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+Message 1\n+```\n+\n+However, we again receive `Not authorized to access topics: [x_messages]`. What's going on?\n+The reason for failure is that while `team-a-client` can write to `x_messages` topic, it does not have a permission to create a topic if it does not yet exist.\n+\n+We now need a power user that can create a topic with all the proper settings - like the right number of partitions and replicas.\n+\n+\n+### Power User Can Do Anything\n+\n+Let's create a configuration for user `bob` who has full ability to manage everything on Kafka cluster `my-cluster`.\n+\n+We'll need some helper scripts so we can authenticate to the `keycloak` instance.\n+\n+Download the following `oauth.sh` and `jwt.sh` tools to `/tmp` dir and make them executable:\n+\n+   curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/oauth.sh -s > /tmp/oauth.sh\n+   chmod +x /tmp/oauth.sh\n+\n+   curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/jwt.sh -s > /tmp/jwt.sh\n+   chmod +x /tmp/jwt.sh", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230db92e0f4d880e8d667eef9353cc2ceaa999f8"}, "originalPosition": 382}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTUyNjE2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTo1MToyOVrOH5rVAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTo1MToyOVrOH5rVAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI0MDc2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Now, `bob` will authenticate to Keycloak server with his username and password and get a refresh token.\n          \n          \n            \n            \n          \n          \n            \n               export TOKEN_ENDPOINT=http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\n          \n          \n            \n               REFRESH_TOKEN=$(/tmp/oauth.sh -q bob)\n          \n          \n            \n            User `bob` authenticates to the Keycloak server with his username and password to get a refresh token.\n          \n          \n            \n            \n          \n          \n            \n            [source,shell]\n          \n          \n            \n            ----\n          \n          \n            \n            export TOKEN_ENDPOINT=http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\n          \n          \n            \n            REFRESH_TOKEN=$(/tmp/oauth.sh -q bob)\n          \n          \n            \n            ----", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530240769", "createdAt": "2020-11-25T09:51:29Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,481 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+From the *Realm Settings* you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources.\n+\n+Resources define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of authorization scopes - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+Policies define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, permissions tie together the resources, authorization scopes and policies that specify _users U can perform actions A on resource R_.\n+\n+For more information about Keycloak Authorization Services, see {keycloak-authorization-services}, but note that the Authorization Services documentation is focused primarily on using the Authorization Services to protect web resources rather than access to Kafka.\n+\n+When viewing resources from the Keycloak user interface you will see a list of resource definitions.\n+These are resource specifiers, patterns in a specific format that are used to target policies to specific resources.\n+For example, this pattern targets only topics in kafka cluster 'cluster-1' with names starting with 'a_':\n+\n+----\n+kafka-cluster:cluster-1,Topic:a_*  \n+---- \n+\n+If a cluster is not specified by name ( `kafka-cluster:cluster-1`), the specifier targets any cluster. For example, this pattern targets any cluster with a name starting  'x_':\n+----\n+Group:x_* \n+----\n+\n+\n+The possible resource types, such as `Topic`, `Group` and `Cluster`, mirror the xref:kafka_authorization_model[Kafka authorization model].\n+\n+*Authorization Scopes* lists of all the possible actions (Kafka permissions) that can be granted on specific resources.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+The list of actions mirrors Kafka permissions and is the same for any deployment.\n+\n+Rather than importing authorization scopes manually into every new client, you can use a link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file.\n+\n+You must make sure that the client is enabled in Keycloak for Authorization Services. After which, you can import a JSON file from the *Authorization* tab. You can see the loaded scopes from the *Authorization Scopes* page.\n+\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+The *Policies* tab has filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the roles, or groups they are assigned.\n+Policies can even be defined programmatically using JavaScript so the logic considers the context of the client session, such as the IP of a Kafka client.\n+\n+The *Permissions* tab defines role bindings that associate resources, authorization scopes and policies for applying a set of permissions on specific resources for certain users.\n+\n+Use a clear, descriptive name for each permission definition so that it is obvious what kind of access is granted to which users.\n+For example:\n+\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n+Let's set custom consumer group name that starts with 'a_'\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+\n+We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n+\n+Use CTRL-C to exit.\n+\n+\n+### Using Kafka's CLI Administration Tools\n+\n+Let's now list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+We get one topic listed: `a_messages`.\n+\n+Let's try and list the consumer groups:\n+\n+    bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+Similarly to listing topics, we get one consumer group listed: `a_consumer_group_1`.\n+\n+There are more CLI administrative tools. For example we can try to get the default cluster configuration:\n+\n+    bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+      --entity-type brokers --describe --entity-default\n+\n+But that will fail with `Cluster authorization failed.` error, because this operation requires cluster level permissions which `team-a-client` does not have.\n+\n+\n+### Client with Different Permissions\n+\n+Let's prepare a configuration for `team-b-client`:\n+\n+```\n+cat > /tmp/team-b-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-b-client\" \\\n+  oauth.client.secret=\"team-b-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+If we look at `team-b-client` client configuration in Keycloak, under `Service Account Roles` we can see that it has `Dev Team B` realm role assigned.\n+Looking in Keycloak Console at the `kafka` client's `Authorization` tab where `Permissions` are listed, we can see the permissions that start with 'Dev Team B ...'.\n+These match the users and service accounts that have the `Dev Team B` realm role assigned to them.\n+The `Dev Team B` users have full access to topics beginning with 'b_' on Kafka cluster `my-cluster` (which is the designated cluster name of the demo cluster we brought up), and read access on topics that start with 'x_'.\n+\n+Let's try produce some messages to topic `a_messages` as `team-b-client`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get `Not authorized to access topics: [a_messages]` error as we expected. Let's try to produce to topic `b_messages`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic b_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+Message 2\n+Message 3\n+```\n+\n+This should work fine.\n+\n+What about producing to topic `x_messages`. `team-b-client` is only supposed to be able to read from such a topic.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get a `Not authorized to access topics: [x_messages]` error as we expected.\n+Client `team-a-client`, on the other hand, should be able to write to such a topic:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+Message 1\n+```\n+\n+However, we again receive `Not authorized to access topics: [x_messages]`. What's going on?\n+The reason for failure is that while `team-a-client` can write to `x_messages` topic, it does not have a permission to create a topic if it does not yet exist.\n+\n+We now need a power user that can create a topic with all the proper settings - like the right number of partitions and replicas.\n+\n+\n+### Power User Can Do Anything\n+\n+Let's create a configuration for user `bob` who has full ability to manage everything on Kafka cluster `my-cluster`.\n+\n+We'll need some helper scripts so we can authenticate to the `keycloak` instance.\n+\n+Download the following `oauth.sh` and `jwt.sh` tools to `/tmp` dir and make them executable:\n+\n+   curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/oauth.sh -s > /tmp/oauth.sh\n+   chmod +x /tmp/oauth.sh\n+\n+   curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/jwt.sh -s > /tmp/jwt.sh\n+   chmod +x /tmp/jwt.sh\n+\n+Now, `bob` will authenticate to Keycloak server with his username and password and get a refresh token.\n+\n+   export TOKEN_ENDPOINT=http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\n+   REFRESH_TOKEN=$(/tmp/oauth.sh -q bob)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230db92e0f4d880e8d667eef9353cc2ceaa999f8"}, "originalPosition": 387}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTU3NTM3OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDowMjoyNlrOH5rzUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDowMjoyNlrOH5rzUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI0ODUzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This will prompt you for a password. Type 'bob-password'.\n          \n          \n            \n            When prompted for a password, 'bob-password' is used.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530248530", "createdAt": "2020-11-25T10:02:26Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,481 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+From the *Realm Settings* you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources.\n+\n+Resources define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of authorization scopes - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+Policies define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, permissions tie together the resources, authorization scopes and policies that specify _users U can perform actions A on resource R_.\n+\n+For more information about Keycloak Authorization Services, see {keycloak-authorization-services}, but note that the Authorization Services documentation is focused primarily on using the Authorization Services to protect web resources rather than access to Kafka.\n+\n+When viewing resources from the Keycloak user interface you will see a list of resource definitions.\n+These are resource specifiers, patterns in a specific format that are used to target policies to specific resources.\n+For example, this pattern targets only topics in kafka cluster 'cluster-1' with names starting with 'a_':\n+\n+----\n+kafka-cluster:cluster-1,Topic:a_*  \n+---- \n+\n+If a cluster is not specified by name ( `kafka-cluster:cluster-1`), the specifier targets any cluster. For example, this pattern targets any cluster with a name starting  'x_':\n+----\n+Group:x_* \n+----\n+\n+\n+The possible resource types, such as `Topic`, `Group` and `Cluster`, mirror the xref:kafka_authorization_model[Kafka authorization model].\n+\n+*Authorization Scopes* lists of all the possible actions (Kafka permissions) that can be granted on specific resources.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+The list of actions mirrors Kafka permissions and is the same for any deployment.\n+\n+Rather than importing authorization scopes manually into every new client, you can use a link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file.\n+\n+You must make sure that the client is enabled in Keycloak for Authorization Services. After which, you can import a JSON file from the *Authorization* tab. You can see the loaded scopes from the *Authorization Scopes* page.\n+\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+The *Policies* tab has filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the roles, or groups they are assigned.\n+Policies can even be defined programmatically using JavaScript so the logic considers the context of the client session, such as the IP of a Kafka client.\n+\n+The *Permissions* tab defines role bindings that associate resources, authorization scopes and policies for applying a set of permissions on specific resources for certain users.\n+\n+Use a clear, descriptive name for each permission definition so that it is obvious what kind of access is granted to which users.\n+For example:\n+\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n+Let's set custom consumer group name that starts with 'a_'\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+\n+We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n+\n+Use CTRL-C to exit.\n+\n+\n+### Using Kafka's CLI Administration Tools\n+\n+Let's now list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+We get one topic listed: `a_messages`.\n+\n+Let's try and list the consumer groups:\n+\n+    bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+Similarly to listing topics, we get one consumer group listed: `a_consumer_group_1`.\n+\n+There are more CLI administrative tools. For example we can try to get the default cluster configuration:\n+\n+    bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+      --entity-type brokers --describe --entity-default\n+\n+But that will fail with `Cluster authorization failed.` error, because this operation requires cluster level permissions which `team-a-client` does not have.\n+\n+\n+### Client with Different Permissions\n+\n+Let's prepare a configuration for `team-b-client`:\n+\n+```\n+cat > /tmp/team-b-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-b-client\" \\\n+  oauth.client.secret=\"team-b-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+If we look at `team-b-client` client configuration in Keycloak, under `Service Account Roles` we can see that it has `Dev Team B` realm role assigned.\n+Looking in Keycloak Console at the `kafka` client's `Authorization` tab where `Permissions` are listed, we can see the permissions that start with 'Dev Team B ...'.\n+These match the users and service accounts that have the `Dev Team B` realm role assigned to them.\n+The `Dev Team B` users have full access to topics beginning with 'b_' on Kafka cluster `my-cluster` (which is the designated cluster name of the demo cluster we brought up), and read access on topics that start with 'x_'.\n+\n+Let's try produce some messages to topic `a_messages` as `team-b-client`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get `Not authorized to access topics: [a_messages]` error as we expected. Let's try to produce to topic `b_messages`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic b_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+Message 2\n+Message 3\n+```\n+\n+This should work fine.\n+\n+What about producing to topic `x_messages`. `team-b-client` is only supposed to be able to read from such a topic.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get a `Not authorized to access topics: [x_messages]` error as we expected.\n+Client `team-a-client`, on the other hand, should be able to write to such a topic:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+Message 1\n+```\n+\n+However, we again receive `Not authorized to access topics: [x_messages]`. What's going on?\n+The reason for failure is that while `team-a-client` can write to `x_messages` topic, it does not have a permission to create a topic if it does not yet exist.\n+\n+We now need a power user that can create a topic with all the proper settings - like the right number of partitions and replicas.\n+\n+\n+### Power User Can Do Anything\n+\n+Let's create a configuration for user `bob` who has full ability to manage everything on Kafka cluster `my-cluster`.\n+\n+We'll need some helper scripts so we can authenticate to the `keycloak` instance.\n+\n+Download the following `oauth.sh` and `jwt.sh` tools to `/tmp` dir and make them executable:\n+\n+   curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/oauth.sh -s > /tmp/oauth.sh\n+   chmod +x /tmp/oauth.sh\n+\n+   curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/jwt.sh -s > /tmp/jwt.sh\n+   chmod +x /tmp/jwt.sh\n+\n+Now, `bob` will authenticate to Keycloak server with his username and password and get a refresh token.\n+\n+   export TOKEN_ENDPOINT=http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\n+   REFRESH_TOKEN=$(/tmp/oauth.sh -q bob)\n+\n+This will prompt you for a password. Type 'bob-password'.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230db92e0f4d880e8d667eef9353cc2ceaa999f8"}, "originalPosition": 389}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTU4NTU0OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDowNDo0N1rOH5r5nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDowNDo0N1rOH5r5nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI1MDE0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            We can inspect the refresh token:\n          \n          \n            \n            \n          \n          \n            \n               /tmp/jwt.sh $REFRESH_TOKEN\n          \n          \n            \n            \n          \n          \n            \n            By default this is a long-lived refresh token that does not expire.\n          \n          \n            \n            The refresh token is a long-lived token that does not expire:\n          \n          \n            \n            \n          \n          \n            \n            ----\n          \n          \n            \n             /tmp/jwt.sh $REFRESH_TOKEN\n          \n          \n            \n            ----", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530250140", "createdAt": "2020-11-25T10:04:47Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,481 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+From the *Realm Settings* you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources.\n+\n+Resources define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of authorization scopes - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+Policies define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, permissions tie together the resources, authorization scopes and policies that specify _users U can perform actions A on resource R_.\n+\n+For more information about Keycloak Authorization Services, see {keycloak-authorization-services}, but note that the Authorization Services documentation is focused primarily on using the Authorization Services to protect web resources rather than access to Kafka.\n+\n+When viewing resources from the Keycloak user interface you will see a list of resource definitions.\n+These are resource specifiers, patterns in a specific format that are used to target policies to specific resources.\n+For example, this pattern targets only topics in kafka cluster 'cluster-1' with names starting with 'a_':\n+\n+----\n+kafka-cluster:cluster-1,Topic:a_*  \n+---- \n+\n+If a cluster is not specified by name ( `kafka-cluster:cluster-1`), the specifier targets any cluster. For example, this pattern targets any cluster with a name starting  'x_':\n+----\n+Group:x_* \n+----\n+\n+\n+The possible resource types, such as `Topic`, `Group` and `Cluster`, mirror the xref:kafka_authorization_model[Kafka authorization model].\n+\n+*Authorization Scopes* lists of all the possible actions (Kafka permissions) that can be granted on specific resources.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+The list of actions mirrors Kafka permissions and is the same for any deployment.\n+\n+Rather than importing authorization scopes manually into every new client, you can use a link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file.\n+\n+You must make sure that the client is enabled in Keycloak for Authorization Services. After which, you can import a JSON file from the *Authorization* tab. You can see the loaded scopes from the *Authorization Scopes* page.\n+\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+The *Policies* tab has filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the roles, or groups they are assigned.\n+Policies can even be defined programmatically using JavaScript so the logic considers the context of the client session, such as the IP of a Kafka client.\n+\n+The *Permissions* tab defines role bindings that associate resources, authorization scopes and policies for applying a set of permissions on specific resources for certain users.\n+\n+Use a clear, descriptive name for each permission definition so that it is obvious what kind of access is granted to which users.\n+For example:\n+\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n+Let's set custom consumer group name that starts with 'a_'\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+\n+We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n+\n+Use CTRL-C to exit.\n+\n+\n+### Using Kafka's CLI Administration Tools\n+\n+Let's now list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+We get one topic listed: `a_messages`.\n+\n+Let's try and list the consumer groups:\n+\n+    bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+Similarly to listing topics, we get one consumer group listed: `a_consumer_group_1`.\n+\n+There are more CLI administrative tools. For example we can try to get the default cluster configuration:\n+\n+    bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+      --entity-type brokers --describe --entity-default\n+\n+But that will fail with `Cluster authorization failed.` error, because this operation requires cluster level permissions which `team-a-client` does not have.\n+\n+\n+### Client with Different Permissions\n+\n+Let's prepare a configuration for `team-b-client`:\n+\n+```\n+cat > /tmp/team-b-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-b-client\" \\\n+  oauth.client.secret=\"team-b-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+If we look at `team-b-client` client configuration in Keycloak, under `Service Account Roles` we can see that it has `Dev Team B` realm role assigned.\n+Looking in Keycloak Console at the `kafka` client's `Authorization` tab where `Permissions` are listed, we can see the permissions that start with 'Dev Team B ...'.\n+These match the users and service accounts that have the `Dev Team B` realm role assigned to them.\n+The `Dev Team B` users have full access to topics beginning with 'b_' on Kafka cluster `my-cluster` (which is the designated cluster name of the demo cluster we brought up), and read access on topics that start with 'x_'.\n+\n+Let's try produce some messages to topic `a_messages` as `team-b-client`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get `Not authorized to access topics: [a_messages]` error as we expected. Let's try to produce to topic `b_messages`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic b_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+Message 2\n+Message 3\n+```\n+\n+This should work fine.\n+\n+What about producing to topic `x_messages`. `team-b-client` is only supposed to be able to read from such a topic.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get a `Not authorized to access topics: [x_messages]` error as we expected.\n+Client `team-a-client`, on the other hand, should be able to write to such a topic:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+Message 1\n+```\n+\n+However, we again receive `Not authorized to access topics: [x_messages]`. What's going on?\n+The reason for failure is that while `team-a-client` can write to `x_messages` topic, it does not have a permission to create a topic if it does not yet exist.\n+\n+We now need a power user that can create a topic with all the proper settings - like the right number of partitions and replicas.\n+\n+\n+### Power User Can Do Anything\n+\n+Let's create a configuration for user `bob` who has full ability to manage everything on Kafka cluster `my-cluster`.\n+\n+We'll need some helper scripts so we can authenticate to the `keycloak` instance.\n+\n+Download the following `oauth.sh` and `jwt.sh` tools to `/tmp` dir and make them executable:\n+\n+   curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/oauth.sh -s > /tmp/oauth.sh\n+   chmod +x /tmp/oauth.sh\n+\n+   curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/jwt.sh -s > /tmp/jwt.sh\n+   chmod +x /tmp/jwt.sh\n+\n+Now, `bob` will authenticate to Keycloak server with his username and password and get a refresh token.\n+\n+   export TOKEN_ENDPOINT=http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\n+   REFRESH_TOKEN=$(/tmp/oauth.sh -q bob)\n+\n+This will prompt you for a password. Type 'bob-password'.\n+\n+We can inspect the refresh token:\n+\n+   /tmp/jwt.sh $REFRESH_TOKEN\n+\n+By default this is a long-lived refresh token that does not expire.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230db92e0f4d880e8d667eef9353cc2ceaa999f8"}, "originalPosition": 395}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTU4ODg0OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDowNTozNFrOH5r7pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDowNTozNFrOH5r7pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI1MDY2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Now we will create the configuration file for `bob`:\n          \n          \n            \n            \n          \n          \n            \n            ```\n          \n          \n            \n            cat > /tmp/bob.properties << EOF\n          \n          \n            \n            security.protocol=SASL_PLAINTEXT\n          \n          \n            \n            sasl.mechanism=OAUTHBEARER\n          \n          \n            \n            sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n          \n          \n            \n              oauth.refresh.token=\"$REFRESH_TOKEN\" \\\n          \n          \n            \n              oauth.client.id=\"kafka-cli\" \\\n          \n          \n            \n              oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n          \n          \n            \n            sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n          \n          \n            \n            EOF\n          \n          \n            \n            ```\n          \n          \n            \n            A configuration file is created for `bob`:\n          \n          \n            \n            \n          \n          \n            \n            [source,shell]\n          \n          \n            \n            ----\n          \n          \n            \n            cat > /tmp/bob.properties << EOF\n          \n          \n            \n            security.protocol=SASL_PLAINTEXT\n          \n          \n            \n            sasl.mechanism=OAUTHBEARER\n          \n          \n            \n            sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n          \n          \n            \n              oauth.refresh.token=\"$REFRESH_TOKEN\" \\\n          \n          \n            \n              oauth.client.id=\"kafka-cli\" \\\n          \n          \n            \n              oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n          \n          \n            \n            sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n          \n          \n            \n            EOF\n          \n          \n            \n            ----", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530250663", "createdAt": "2020-11-25T10:05:34Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,481 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+From the *Realm Settings* you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources.\n+\n+Resources define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of authorization scopes - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+Policies define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, permissions tie together the resources, authorization scopes and policies that specify _users U can perform actions A on resource R_.\n+\n+For more information about Keycloak Authorization Services, see {keycloak-authorization-services}, but note that the Authorization Services documentation is focused primarily on using the Authorization Services to protect web resources rather than access to Kafka.\n+\n+When viewing resources from the Keycloak user interface you will see a list of resource definitions.\n+These are resource specifiers, patterns in a specific format that are used to target policies to specific resources.\n+For example, this pattern targets only topics in kafka cluster 'cluster-1' with names starting with 'a_':\n+\n+----\n+kafka-cluster:cluster-1,Topic:a_*  \n+---- \n+\n+If a cluster is not specified by name ( `kafka-cluster:cluster-1`), the specifier targets any cluster. For example, this pattern targets any cluster with a name starting  'x_':\n+----\n+Group:x_* \n+----\n+\n+\n+The possible resource types, such as `Topic`, `Group` and `Cluster`, mirror the xref:kafka_authorization_model[Kafka authorization model].\n+\n+*Authorization Scopes* lists of all the possible actions (Kafka permissions) that can be granted on specific resources.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+The list of actions mirrors Kafka permissions and is the same for any deployment.\n+\n+Rather than importing authorization scopes manually into every new client, you can use a link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file.\n+\n+You must make sure that the client is enabled in Keycloak for Authorization Services. After which, you can import a JSON file from the *Authorization* tab. You can see the loaded scopes from the *Authorization Scopes* page.\n+\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+The *Policies* tab has filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the roles, or groups they are assigned.\n+Policies can even be defined programmatically using JavaScript so the logic considers the context of the client session, such as the IP of a Kafka client.\n+\n+The *Permissions* tab defines role bindings that associate resources, authorization scopes and policies for applying a set of permissions on specific resources for certain users.\n+\n+Use a clear, descriptive name for each permission definition so that it is obvious what kind of access is granted to which users.\n+For example:\n+\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n+Let's set custom consumer group name that starts with 'a_'\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+\n+We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n+\n+Use CTRL-C to exit.\n+\n+\n+### Using Kafka's CLI Administration Tools\n+\n+Let's now list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+We get one topic listed: `a_messages`.\n+\n+Let's try and list the consumer groups:\n+\n+    bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+Similarly to listing topics, we get one consumer group listed: `a_consumer_group_1`.\n+\n+There are more CLI administrative tools. For example we can try to get the default cluster configuration:\n+\n+    bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+      --entity-type brokers --describe --entity-default\n+\n+But that will fail with `Cluster authorization failed.` error, because this operation requires cluster level permissions which `team-a-client` does not have.\n+\n+\n+### Client with Different Permissions\n+\n+Let's prepare a configuration for `team-b-client`:\n+\n+```\n+cat > /tmp/team-b-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-b-client\" \\\n+  oauth.client.secret=\"team-b-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+If we look at `team-b-client` client configuration in Keycloak, under `Service Account Roles` we can see that it has `Dev Team B` realm role assigned.\n+Looking in Keycloak Console at the `kafka` client's `Authorization` tab where `Permissions` are listed, we can see the permissions that start with 'Dev Team B ...'.\n+These match the users and service accounts that have the `Dev Team B` realm role assigned to them.\n+The `Dev Team B` users have full access to topics beginning with 'b_' on Kafka cluster `my-cluster` (which is the designated cluster name of the demo cluster we brought up), and read access on topics that start with 'x_'.\n+\n+Let's try produce some messages to topic `a_messages` as `team-b-client`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get `Not authorized to access topics: [a_messages]` error as we expected. Let's try to produce to topic `b_messages`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic b_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+Message 2\n+Message 3\n+```\n+\n+This should work fine.\n+\n+What about producing to topic `x_messages`. `team-b-client` is only supposed to be able to read from such a topic.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get a `Not authorized to access topics: [x_messages]` error as we expected.\n+Client `team-a-client`, on the other hand, should be able to write to such a topic:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+Message 1\n+```\n+\n+However, we again receive `Not authorized to access topics: [x_messages]`. What's going on?\n+The reason for failure is that while `team-a-client` can write to `x_messages` topic, it does not have a permission to create a topic if it does not yet exist.\n+\n+We now need a power user that can create a topic with all the proper settings - like the right number of partitions and replicas.\n+\n+\n+### Power User Can Do Anything\n+\n+Let's create a configuration for user `bob` who has full ability to manage everything on Kafka cluster `my-cluster`.\n+\n+We'll need some helper scripts so we can authenticate to the `keycloak` instance.\n+\n+Download the following `oauth.sh` and `jwt.sh` tools to `/tmp` dir and make them executable:\n+\n+   curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/oauth.sh -s > /tmp/oauth.sh\n+   chmod +x /tmp/oauth.sh\n+\n+   curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/jwt.sh -s > /tmp/jwt.sh\n+   chmod +x /tmp/jwt.sh\n+\n+Now, `bob` will authenticate to Keycloak server with his username and password and get a refresh token.\n+\n+   export TOKEN_ENDPOINT=http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\n+   REFRESH_TOKEN=$(/tmp/oauth.sh -q bob)\n+\n+This will prompt you for a password. Type 'bob-password'.\n+\n+We can inspect the refresh token:\n+\n+   /tmp/jwt.sh $REFRESH_TOKEN\n+\n+By default this is a long-lived refresh token that does not expire.\n+\n+Now we will create the configuration file for `bob`:\n+\n+```\n+cat > /tmp/bob.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.refresh.token=\"$REFRESH_TOKEN\" \\\n+  oauth.client.id=\"kafka-cli\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230db92e0f4d880e8d667eef9353cc2ceaa999f8"}, "originalPosition": 409}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTYwNDIxOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDowOToyMlrOH5sFBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDowOToyMlrOH5sFBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI1MzA2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Note that we use the `kafka-cli` public client for the `oauth.client.id` in the `sasl.jaas.config`.\n          \n          \n            \n            Since that is a public client it does not require any secret.\n          \n          \n            \n            We can use this because we authenticate with a token directly (in this case a refresh token is used to request an access token behind the scenes which is then sent to Kafka broker for authentication, and we already did the authentication for the refresh token).\n          \n          \n            \n            The `kafka-cli` public client is used for the `oauth.client.id` in the `sasl.jaas.config`.\n          \n          \n            \n            Since that is a public client it does not require a Secret.\n          \n          \n            \n            We can use this because we authenticate with a token directly. In this case, the refresh token requests an access token behind the scenes, which is then sent to the Kafka broker for authentication. The refresh token has already been authenticated.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530253061", "createdAt": "2020-11-25T10:09:22Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,481 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+From the *Realm Settings* you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources.\n+\n+Resources define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of authorization scopes - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+Policies define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, permissions tie together the resources, authorization scopes and policies that specify _users U can perform actions A on resource R_.\n+\n+For more information about Keycloak Authorization Services, see {keycloak-authorization-services}, but note that the Authorization Services documentation is focused primarily on using the Authorization Services to protect web resources rather than access to Kafka.\n+\n+When viewing resources from the Keycloak user interface you will see a list of resource definitions.\n+These are resource specifiers, patterns in a specific format that are used to target policies to specific resources.\n+For example, this pattern targets only topics in kafka cluster 'cluster-1' with names starting with 'a_':\n+\n+----\n+kafka-cluster:cluster-1,Topic:a_*  \n+---- \n+\n+If a cluster is not specified by name ( `kafka-cluster:cluster-1`), the specifier targets any cluster. For example, this pattern targets any cluster with a name starting  'x_':\n+----\n+Group:x_* \n+----\n+\n+\n+The possible resource types, such as `Topic`, `Group` and `Cluster`, mirror the xref:kafka_authorization_model[Kafka authorization model].\n+\n+*Authorization Scopes* lists of all the possible actions (Kafka permissions) that can be granted on specific resources.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+The list of actions mirrors Kafka permissions and is the same for any deployment.\n+\n+Rather than importing authorization scopes manually into every new client, you can use a link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file.\n+\n+You must make sure that the client is enabled in Keycloak for Authorization Services. After which, you can import a JSON file from the *Authorization* tab. You can see the loaded scopes from the *Authorization Scopes* page.\n+\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+The *Policies* tab has filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the roles, or groups they are assigned.\n+Policies can even be defined programmatically using JavaScript so the logic considers the context of the client session, such as the IP of a Kafka client.\n+\n+The *Permissions* tab defines role bindings that associate resources, authorization scopes and policies for applying a set of permissions on specific resources for certain users.\n+\n+Use a clear, descriptive name for each permission definition so that it is obvious what kind of access is granted to which users.\n+For example:\n+\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n+Let's set custom consumer group name that starts with 'a_'\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+\n+We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n+\n+Use CTRL-C to exit.\n+\n+\n+### Using Kafka's CLI Administration Tools\n+\n+Let's now list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+We get one topic listed: `a_messages`.\n+\n+Let's try and list the consumer groups:\n+\n+    bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+Similarly to listing topics, we get one consumer group listed: `a_consumer_group_1`.\n+\n+There are more CLI administrative tools. For example we can try to get the default cluster configuration:\n+\n+    bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+      --entity-type brokers --describe --entity-default\n+\n+But that will fail with `Cluster authorization failed.` error, because this operation requires cluster level permissions which `team-a-client` does not have.\n+\n+\n+### Client with Different Permissions\n+\n+Let's prepare a configuration for `team-b-client`:\n+\n+```\n+cat > /tmp/team-b-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-b-client\" \\\n+  oauth.client.secret=\"team-b-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+If we look at `team-b-client` client configuration in Keycloak, under `Service Account Roles` we can see that it has `Dev Team B` realm role assigned.\n+Looking in Keycloak Console at the `kafka` client's `Authorization` tab where `Permissions` are listed, we can see the permissions that start with 'Dev Team B ...'.\n+These match the users and service accounts that have the `Dev Team B` realm role assigned to them.\n+The `Dev Team B` users have full access to topics beginning with 'b_' on Kafka cluster `my-cluster` (which is the designated cluster name of the demo cluster we brought up), and read access on topics that start with 'x_'.\n+\n+Let's try produce some messages to topic `a_messages` as `team-b-client`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get `Not authorized to access topics: [a_messages]` error as we expected. Let's try to produce to topic `b_messages`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic b_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+Message 2\n+Message 3\n+```\n+\n+This should work fine.\n+\n+What about producing to topic `x_messages`. `team-b-client` is only supposed to be able to read from such a topic.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get a `Not authorized to access topics: [x_messages]` error as we expected.\n+Client `team-a-client`, on the other hand, should be able to write to such a topic:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+Message 1\n+```\n+\n+However, we again receive `Not authorized to access topics: [x_messages]`. What's going on?\n+The reason for failure is that while `team-a-client` can write to `x_messages` topic, it does not have a permission to create a topic if it does not yet exist.\n+\n+We now need a power user that can create a topic with all the proper settings - like the right number of partitions and replicas.\n+\n+\n+### Power User Can Do Anything\n+\n+Let's create a configuration for user `bob` who has full ability to manage everything on Kafka cluster `my-cluster`.\n+\n+We'll need some helper scripts so we can authenticate to the `keycloak` instance.\n+\n+Download the following `oauth.sh` and `jwt.sh` tools to `/tmp` dir and make them executable:\n+\n+   curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/oauth.sh -s > /tmp/oauth.sh\n+   chmod +x /tmp/oauth.sh\n+\n+   curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/jwt.sh -s > /tmp/jwt.sh\n+   chmod +x /tmp/jwt.sh\n+\n+Now, `bob` will authenticate to Keycloak server with his username and password and get a refresh token.\n+\n+   export TOKEN_ENDPOINT=http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\n+   REFRESH_TOKEN=$(/tmp/oauth.sh -q bob)\n+\n+This will prompt you for a password. Type 'bob-password'.\n+\n+We can inspect the refresh token:\n+\n+   /tmp/jwt.sh $REFRESH_TOKEN\n+\n+By default this is a long-lived refresh token that does not expire.\n+\n+Now we will create the configuration file for `bob`:\n+\n+```\n+cat > /tmp/bob.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.refresh.token=\"$REFRESH_TOKEN\" \\\n+  oauth.client.id=\"kafka-cli\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+Note that we use the `kafka-cli` public client for the `oauth.client.id` in the `sasl.jaas.config`.\n+Since that is a public client it does not require any secret.\n+We can use this because we authenticate with a token directly (in this case a refresh token is used to request an access token behind the scenes which is then sent to Kafka broker for authentication, and we already did the authentication for the refresh token).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230db92e0f4d880e8d667eef9353cc2ceaa999f8"}, "originalPosition": 413}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTYxMTU4OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDoxMTowNFrOH5sJfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDoxMTowNFrOH5sJfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI1NDIwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Let's now try to create the `x_messages` topic:\n          \n          \n            \n            \n          \n          \n            \n                bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/bob.properties \\\n          \n          \n            \n                  --topic x_messages --create --replication-factor 1 --partitions 1\n          \n          \n            \n            User `bob` has permission to create the `x_messages` topic:\n          \n          \n            \n            \n          \n          \n            \n            [source,shell]\n          \n          \n            \n            ----\n          \n          \n            \n            bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/bob.properties \\\n          \n          \n            \n              --topic x_messages --create --replication-factor 1 --partitions 1\n          \n          \n            \n            ----", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530254204", "createdAt": "2020-11-25T10:11:04Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,481 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+From the *Realm Settings* you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources.\n+\n+Resources define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of authorization scopes - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+Policies define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, permissions tie together the resources, authorization scopes and policies that specify _users U can perform actions A on resource R_.\n+\n+For more information about Keycloak Authorization Services, see {keycloak-authorization-services}, but note that the Authorization Services documentation is focused primarily on using the Authorization Services to protect web resources rather than access to Kafka.\n+\n+When viewing resources from the Keycloak user interface you will see a list of resource definitions.\n+These are resource specifiers, patterns in a specific format that are used to target policies to specific resources.\n+For example, this pattern targets only topics in kafka cluster 'cluster-1' with names starting with 'a_':\n+\n+----\n+kafka-cluster:cluster-1,Topic:a_*  \n+---- \n+\n+If a cluster is not specified by name ( `kafka-cluster:cluster-1`), the specifier targets any cluster. For example, this pattern targets any cluster with a name starting  'x_':\n+----\n+Group:x_* \n+----\n+\n+\n+The possible resource types, such as `Topic`, `Group` and `Cluster`, mirror the xref:kafka_authorization_model[Kafka authorization model].\n+\n+*Authorization Scopes* lists of all the possible actions (Kafka permissions) that can be granted on specific resources.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+The list of actions mirrors Kafka permissions and is the same for any deployment.\n+\n+Rather than importing authorization scopes manually into every new client, you can use a link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file.\n+\n+You must make sure that the client is enabled in Keycloak for Authorization Services. After which, you can import a JSON file from the *Authorization* tab. You can see the loaded scopes from the *Authorization Scopes* page.\n+\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+The *Policies* tab has filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the roles, or groups they are assigned.\n+Policies can even be defined programmatically using JavaScript so the logic considers the context of the client session, such as the IP of a Kafka client.\n+\n+The *Permissions* tab defines role bindings that associate resources, authorization scopes and policies for applying a set of permissions on specific resources for certain users.\n+\n+Use a clear, descriptive name for each permission definition so that it is obvious what kind of access is granted to which users.\n+For example:\n+\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n+Let's set custom consumer group name that starts with 'a_'\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+\n+We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n+\n+Use CTRL-C to exit.\n+\n+\n+### Using Kafka's CLI Administration Tools\n+\n+Let's now list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+We get one topic listed: `a_messages`.\n+\n+Let's try and list the consumer groups:\n+\n+    bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+Similarly to listing topics, we get one consumer group listed: `a_consumer_group_1`.\n+\n+There are more CLI administrative tools. For example we can try to get the default cluster configuration:\n+\n+    bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+      --entity-type brokers --describe --entity-default\n+\n+But that will fail with `Cluster authorization failed.` error, because this operation requires cluster level permissions which `team-a-client` does not have.\n+\n+\n+### Client with Different Permissions\n+\n+Let's prepare a configuration for `team-b-client`:\n+\n+```\n+cat > /tmp/team-b-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-b-client\" \\\n+  oauth.client.secret=\"team-b-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+If we look at `team-b-client` client configuration in Keycloak, under `Service Account Roles` we can see that it has `Dev Team B` realm role assigned.\n+Looking in Keycloak Console at the `kafka` client's `Authorization` tab where `Permissions` are listed, we can see the permissions that start with 'Dev Team B ...'.\n+These match the users and service accounts that have the `Dev Team B` realm role assigned to them.\n+The `Dev Team B` users have full access to topics beginning with 'b_' on Kafka cluster `my-cluster` (which is the designated cluster name of the demo cluster we brought up), and read access on topics that start with 'x_'.\n+\n+Let's try produce some messages to topic `a_messages` as `team-b-client`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get `Not authorized to access topics: [a_messages]` error as we expected. Let's try to produce to topic `b_messages`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic b_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+Message 2\n+Message 3\n+```\n+\n+This should work fine.\n+\n+What about producing to topic `x_messages`. `team-b-client` is only supposed to be able to read from such a topic.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get a `Not authorized to access topics: [x_messages]` error as we expected.\n+Client `team-a-client`, on the other hand, should be able to write to such a topic:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+Message 1\n+```\n+\n+However, we again receive `Not authorized to access topics: [x_messages]`. What's going on?\n+The reason for failure is that while `team-a-client` can write to `x_messages` topic, it does not have a permission to create a topic if it does not yet exist.\n+\n+We now need a power user that can create a topic with all the proper settings - like the right number of partitions and replicas.\n+\n+\n+### Power User Can Do Anything\n+\n+Let's create a configuration for user `bob` who has full ability to manage everything on Kafka cluster `my-cluster`.\n+\n+We'll need some helper scripts so we can authenticate to the `keycloak` instance.\n+\n+Download the following `oauth.sh` and `jwt.sh` tools to `/tmp` dir and make them executable:\n+\n+   curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/oauth.sh -s > /tmp/oauth.sh\n+   chmod +x /tmp/oauth.sh\n+\n+   curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/jwt.sh -s > /tmp/jwt.sh\n+   chmod +x /tmp/jwt.sh\n+\n+Now, `bob` will authenticate to Keycloak server with his username and password and get a refresh token.\n+\n+   export TOKEN_ENDPOINT=http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\n+   REFRESH_TOKEN=$(/tmp/oauth.sh -q bob)\n+\n+This will prompt you for a password. Type 'bob-password'.\n+\n+We can inspect the refresh token:\n+\n+   /tmp/jwt.sh $REFRESH_TOKEN\n+\n+By default this is a long-lived refresh token that does not expire.\n+\n+Now we will create the configuration file for `bob`:\n+\n+```\n+cat > /tmp/bob.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.refresh.token=\"$REFRESH_TOKEN\" \\\n+  oauth.client.id=\"kafka-cli\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+Note that we use the `kafka-cli` public client for the `oauth.client.id` in the `sasl.jaas.config`.\n+Since that is a public client it does not require any secret.\n+We can use this because we authenticate with a token directly (in this case a refresh token is used to request an access token behind the scenes which is then sent to Kafka broker for authentication, and we already did the authentication for the refresh token).\n+\n+\n+Let's now try to create the `x_messages` topic:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/bob.properties \\\n+      --topic x_messages --create --replication-factor 1 --partitions 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230db92e0f4d880e8d667eef9353cc2ceaa999f8"}, "originalPosition": 419}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTYyOTA2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDoxNDo1NFrOH5sTuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDoxNDo1NFrOH5sTuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI1NjgyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The operation should succeed (you can ignore the warning about periods and underscores).", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530256824", "createdAt": "2020-11-25T10:14:54Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,481 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+From the *Realm Settings* you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources.\n+\n+Resources define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of authorization scopes - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+Policies define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, permissions tie together the resources, authorization scopes and policies that specify _users U can perform actions A on resource R_.\n+\n+For more information about Keycloak Authorization Services, see {keycloak-authorization-services}, but note that the Authorization Services documentation is focused primarily on using the Authorization Services to protect web resources rather than access to Kafka.\n+\n+When viewing resources from the Keycloak user interface you will see a list of resource definitions.\n+These are resource specifiers, patterns in a specific format that are used to target policies to specific resources.\n+For example, this pattern targets only topics in kafka cluster 'cluster-1' with names starting with 'a_':\n+\n+----\n+kafka-cluster:cluster-1,Topic:a_*  \n+---- \n+\n+If a cluster is not specified by name ( `kafka-cluster:cluster-1`), the specifier targets any cluster. For example, this pattern targets any cluster with a name starting  'x_':\n+----\n+Group:x_* \n+----\n+\n+\n+The possible resource types, such as `Topic`, `Group` and `Cluster`, mirror the xref:kafka_authorization_model[Kafka authorization model].\n+\n+*Authorization Scopes* lists of all the possible actions (Kafka permissions) that can be granted on specific resources.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+The list of actions mirrors Kafka permissions and is the same for any deployment.\n+\n+Rather than importing authorization scopes manually into every new client, you can use a link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file.\n+\n+You must make sure that the client is enabled in Keycloak for Authorization Services. After which, you can import a JSON file from the *Authorization* tab. You can see the loaded scopes from the *Authorization Scopes* page.\n+\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+The *Policies* tab has filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the roles, or groups they are assigned.\n+Policies can even be defined programmatically using JavaScript so the logic considers the context of the client session, such as the IP of a Kafka client.\n+\n+The *Permissions* tab defines role bindings that associate resources, authorization scopes and policies for applying a set of permissions on specific resources for certain users.\n+\n+Use a clear, descriptive name for each permission definition so that it is obvious what kind of access is granted to which users.\n+For example:\n+\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n+Let's set custom consumer group name that starts with 'a_'\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+\n+We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n+\n+Use CTRL-C to exit.\n+\n+\n+### Using Kafka's CLI Administration Tools\n+\n+Let's now list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+We get one topic listed: `a_messages`.\n+\n+Let's try and list the consumer groups:\n+\n+    bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+Similarly to listing topics, we get one consumer group listed: `a_consumer_group_1`.\n+\n+There are more CLI administrative tools. For example we can try to get the default cluster configuration:\n+\n+    bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+      --entity-type brokers --describe --entity-default\n+\n+But that will fail with `Cluster authorization failed.` error, because this operation requires cluster level permissions which `team-a-client` does not have.\n+\n+\n+### Client with Different Permissions\n+\n+Let's prepare a configuration for `team-b-client`:\n+\n+```\n+cat > /tmp/team-b-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-b-client\" \\\n+  oauth.client.secret=\"team-b-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+If we look at `team-b-client` client configuration in Keycloak, under `Service Account Roles` we can see that it has `Dev Team B` realm role assigned.\n+Looking in Keycloak Console at the `kafka` client's `Authorization` tab where `Permissions` are listed, we can see the permissions that start with 'Dev Team B ...'.\n+These match the users and service accounts that have the `Dev Team B` realm role assigned to them.\n+The `Dev Team B` users have full access to topics beginning with 'b_' on Kafka cluster `my-cluster` (which is the designated cluster name of the demo cluster we brought up), and read access on topics that start with 'x_'.\n+\n+Let's try produce some messages to topic `a_messages` as `team-b-client`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get `Not authorized to access topics: [a_messages]` error as we expected. Let's try to produce to topic `b_messages`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic b_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+Message 2\n+Message 3\n+```\n+\n+This should work fine.\n+\n+What about producing to topic `x_messages`. `team-b-client` is only supposed to be able to read from such a topic.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get a `Not authorized to access topics: [x_messages]` error as we expected.\n+Client `team-a-client`, on the other hand, should be able to write to such a topic:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+Message 1\n+```\n+\n+However, we again receive `Not authorized to access topics: [x_messages]`. What's going on?\n+The reason for failure is that while `team-a-client` can write to `x_messages` topic, it does not have a permission to create a topic if it does not yet exist.\n+\n+We now need a power user that can create a topic with all the proper settings - like the right number of partitions and replicas.\n+\n+\n+### Power User Can Do Anything\n+\n+Let's create a configuration for user `bob` who has full ability to manage everything on Kafka cluster `my-cluster`.\n+\n+We'll need some helper scripts so we can authenticate to the `keycloak` instance.\n+\n+Download the following `oauth.sh` and `jwt.sh` tools to `/tmp` dir and make them executable:\n+\n+   curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/oauth.sh -s > /tmp/oauth.sh\n+   chmod +x /tmp/oauth.sh\n+\n+   curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/jwt.sh -s > /tmp/jwt.sh\n+   chmod +x /tmp/jwt.sh\n+\n+Now, `bob` will authenticate to Keycloak server with his username and password and get a refresh token.\n+\n+   export TOKEN_ENDPOINT=http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\n+   REFRESH_TOKEN=$(/tmp/oauth.sh -q bob)\n+\n+This will prompt you for a password. Type 'bob-password'.\n+\n+We can inspect the refresh token:\n+\n+   /tmp/jwt.sh $REFRESH_TOKEN\n+\n+By default this is a long-lived refresh token that does not expire.\n+\n+Now we will create the configuration file for `bob`:\n+\n+```\n+cat > /tmp/bob.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.refresh.token=\"$REFRESH_TOKEN\" \\\n+  oauth.client.id=\"kafka-cli\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+Note that we use the `kafka-cli` public client for the `oauth.client.id` in the `sasl.jaas.config`.\n+Since that is a public client it does not require any secret.\n+We can use this because we authenticate with a token directly (in this case a refresh token is used to request an access token behind the scenes which is then sent to Kafka broker for authentication, and we already did the authentication for the refresh token).\n+\n+\n+Let's now try to create the `x_messages` topic:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/bob.properties \\\n+      --topic x_messages --create --replication-factor 1 --partitions 1\n+\n+The operation should succeed (you can ignore the warning about periods and underscores).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230db92e0f4d880e8d667eef9353cc2ceaa999f8"}, "originalPosition": 421}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTY1ODg0OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDoyMToxN1rOH5skhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDoyMToxN1rOH5skhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI2MTEyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            We can list the topics:\n          \n          \n            \n            \n          \n          \n            \n                bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/bob.properties --list\n          \n          \n            \n            \n          \n          \n            \n            If we try the same as `team-a-client` or `team-b-client` we will get different responses.\n          \n          \n            \n            \n          \n          \n            \n                bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n          \n          \n            \n                bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-b-client.properties --list\n          \n          \n            \n            User `bob` can list the topic, but `team-a-client` and `team-b-client` cannot.\n          \n          \n            \n            \n          \n          \n            \n            [source,shell]\n          \n          \n            \n            ----\n          \n          \n            \n            bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/bob.properties --list\n          \n          \n            \n            bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n          \n          \n            \n            bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-b-client.properties --list", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530261125", "createdAt": "2020-11-25T10:21:17Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,481 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+From the *Realm Settings* you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources.\n+\n+Resources define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of authorization scopes - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+Policies define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, permissions tie together the resources, authorization scopes and policies that specify _users U can perform actions A on resource R_.\n+\n+For more information about Keycloak Authorization Services, see {keycloak-authorization-services}, but note that the Authorization Services documentation is focused primarily on using the Authorization Services to protect web resources rather than access to Kafka.\n+\n+When viewing resources from the Keycloak user interface you will see a list of resource definitions.\n+These are resource specifiers, patterns in a specific format that are used to target policies to specific resources.\n+For example, this pattern targets only topics in kafka cluster 'cluster-1' with names starting with 'a_':\n+\n+----\n+kafka-cluster:cluster-1,Topic:a_*  \n+---- \n+\n+If a cluster is not specified by name ( `kafka-cluster:cluster-1`), the specifier targets any cluster. For example, this pattern targets any cluster with a name starting  'x_':\n+----\n+Group:x_* \n+----\n+\n+\n+The possible resource types, such as `Topic`, `Group` and `Cluster`, mirror the xref:kafka_authorization_model[Kafka authorization model].\n+\n+*Authorization Scopes* lists of all the possible actions (Kafka permissions) that can be granted on specific resources.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+The list of actions mirrors Kafka permissions and is the same for any deployment.\n+\n+Rather than importing authorization scopes manually into every new client, you can use a link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file.\n+\n+You must make sure that the client is enabled in Keycloak for Authorization Services. After which, you can import a JSON file from the *Authorization* tab. You can see the loaded scopes from the *Authorization Scopes* page.\n+\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+The *Policies* tab has filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the roles, or groups they are assigned.\n+Policies can even be defined programmatically using JavaScript so the logic considers the context of the client session, such as the IP of a Kafka client.\n+\n+The *Permissions* tab defines role bindings that associate resources, authorization scopes and policies for applying a set of permissions on specific resources for certain users.\n+\n+Use a clear, descriptive name for each permission definition so that it is obvious what kind of access is granted to which users.\n+For example:\n+\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n+Let's set custom consumer group name that starts with 'a_'\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+\n+We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n+\n+Use CTRL-C to exit.\n+\n+\n+### Using Kafka's CLI Administration Tools\n+\n+Let's now list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+We get one topic listed: `a_messages`.\n+\n+Let's try and list the consumer groups:\n+\n+    bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+Similarly to listing topics, we get one consumer group listed: `a_consumer_group_1`.\n+\n+There are more CLI administrative tools. For example we can try to get the default cluster configuration:\n+\n+    bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+      --entity-type brokers --describe --entity-default\n+\n+But that will fail with `Cluster authorization failed.` error, because this operation requires cluster level permissions which `team-a-client` does not have.\n+\n+\n+### Client with Different Permissions\n+\n+Let's prepare a configuration for `team-b-client`:\n+\n+```\n+cat > /tmp/team-b-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-b-client\" \\\n+  oauth.client.secret=\"team-b-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+If we look at `team-b-client` client configuration in Keycloak, under `Service Account Roles` we can see that it has `Dev Team B` realm role assigned.\n+Looking in Keycloak Console at the `kafka` client's `Authorization` tab where `Permissions` are listed, we can see the permissions that start with 'Dev Team B ...'.\n+These match the users and service accounts that have the `Dev Team B` realm role assigned to them.\n+The `Dev Team B` users have full access to topics beginning with 'b_' on Kafka cluster `my-cluster` (which is the designated cluster name of the demo cluster we brought up), and read access on topics that start with 'x_'.\n+\n+Let's try produce some messages to topic `a_messages` as `team-b-client`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get `Not authorized to access topics: [a_messages]` error as we expected. Let's try to produce to topic `b_messages`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic b_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+Message 2\n+Message 3\n+```\n+\n+This should work fine.\n+\n+What about producing to topic `x_messages`. `team-b-client` is only supposed to be able to read from such a topic.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get a `Not authorized to access topics: [x_messages]` error as we expected.\n+Client `team-a-client`, on the other hand, should be able to write to such a topic:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+Message 1\n+```\n+\n+However, we again receive `Not authorized to access topics: [x_messages]`. What's going on?\n+The reason for failure is that while `team-a-client` can write to `x_messages` topic, it does not have a permission to create a topic if it does not yet exist.\n+\n+We now need a power user that can create a topic with all the proper settings - like the right number of partitions and replicas.\n+\n+\n+### Power User Can Do Anything\n+\n+Let's create a configuration for user `bob` who has full ability to manage everything on Kafka cluster `my-cluster`.\n+\n+We'll need some helper scripts so we can authenticate to the `keycloak` instance.\n+\n+Download the following `oauth.sh` and `jwt.sh` tools to `/tmp` dir and make them executable:\n+\n+   curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/oauth.sh -s > /tmp/oauth.sh\n+   chmod +x /tmp/oauth.sh\n+\n+   curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/jwt.sh -s > /tmp/jwt.sh\n+   chmod +x /tmp/jwt.sh\n+\n+Now, `bob` will authenticate to Keycloak server with his username and password and get a refresh token.\n+\n+   export TOKEN_ENDPOINT=http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\n+   REFRESH_TOKEN=$(/tmp/oauth.sh -q bob)\n+\n+This will prompt you for a password. Type 'bob-password'.\n+\n+We can inspect the refresh token:\n+\n+   /tmp/jwt.sh $REFRESH_TOKEN\n+\n+By default this is a long-lived refresh token that does not expire.\n+\n+Now we will create the configuration file for `bob`:\n+\n+```\n+cat > /tmp/bob.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.refresh.token=\"$REFRESH_TOKEN\" \\\n+  oauth.client.id=\"kafka-cli\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+Note that we use the `kafka-cli` public client for the `oauth.client.id` in the `sasl.jaas.config`.\n+Since that is a public client it does not require any secret.\n+We can use this because we authenticate with a token directly (in this case a refresh token is used to request an access token behind the scenes which is then sent to Kafka broker for authentication, and we already did the authentication for the refresh token).\n+\n+\n+Let's now try to create the `x_messages` topic:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/bob.properties \\\n+      --topic x_messages --create --replication-factor 1 --partitions 1\n+\n+The operation should succeed (you can ignore the warning about periods and underscores).\n+\n+We can list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/bob.properties --list\n+\n+If we try the same as `team-a-client` or `team-b-client` we will get different responses.\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-b-client.properties --list", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230db92e0f4d880e8d667eef9353cc2ceaa999f8"}, "originalPosition": 430}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTY2MTg4OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDoyMjowMlrOH5smWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDoyMjowMlrOH5smWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI2MTU5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Roles `Dev Team A`, and `Dev Team B` both have `Describe` permission on topics that start with 'x_', but they cannot see the other team's topics as they do not have `Describe` permissions on them.\n          \n          \n            \n            The `Dev Team A`, and `Dev Team B` roles both have `Describe` permission on topics that start with `x_`, but they cannot see the other team's topics as they do not have `Describe` permissions on them.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530261594", "createdAt": "2020-11-25T10:22:02Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,481 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+From the *Realm Settings* you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources.\n+\n+Resources define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of authorization scopes - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+Policies define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, permissions tie together the resources, authorization scopes and policies that specify _users U can perform actions A on resource R_.\n+\n+For more information about Keycloak Authorization Services, see {keycloak-authorization-services}, but note that the Authorization Services documentation is focused primarily on using the Authorization Services to protect web resources rather than access to Kafka.\n+\n+When viewing resources from the Keycloak user interface you will see a list of resource definitions.\n+These are resource specifiers, patterns in a specific format that are used to target policies to specific resources.\n+For example, this pattern targets only topics in kafka cluster 'cluster-1' with names starting with 'a_':\n+\n+----\n+kafka-cluster:cluster-1,Topic:a_*  \n+---- \n+\n+If a cluster is not specified by name ( `kafka-cluster:cluster-1`), the specifier targets any cluster. For example, this pattern targets any cluster with a name starting  'x_':\n+----\n+Group:x_* \n+----\n+\n+\n+The possible resource types, such as `Topic`, `Group` and `Cluster`, mirror the xref:kafka_authorization_model[Kafka authorization model].\n+\n+*Authorization Scopes* lists of all the possible actions (Kafka permissions) that can be granted on specific resources.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+The list of actions mirrors Kafka permissions and is the same for any deployment.\n+\n+Rather than importing authorization scopes manually into every new client, you can use a link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file.\n+\n+You must make sure that the client is enabled in Keycloak for Authorization Services. After which, you can import a JSON file from the *Authorization* tab. You can see the loaded scopes from the *Authorization Scopes* page.\n+\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+The *Policies* tab has filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the roles, or groups they are assigned.\n+Policies can even be defined programmatically using JavaScript so the logic considers the context of the client session, such as the IP of a Kafka client.\n+\n+The *Permissions* tab defines role bindings that associate resources, authorization scopes and policies for applying a set of permissions on specific resources for certain users.\n+\n+Use a clear, descriptive name for each permission definition so that it is obvious what kind of access is granted to which users.\n+For example:\n+\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n+Let's set custom consumer group name that starts with 'a_'\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+\n+We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n+\n+Use CTRL-C to exit.\n+\n+\n+### Using Kafka's CLI Administration Tools\n+\n+Let's now list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+We get one topic listed: `a_messages`.\n+\n+Let's try and list the consumer groups:\n+\n+    bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+Similarly to listing topics, we get one consumer group listed: `a_consumer_group_1`.\n+\n+There are more CLI administrative tools. For example we can try to get the default cluster configuration:\n+\n+    bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+      --entity-type brokers --describe --entity-default\n+\n+But that will fail with `Cluster authorization failed.` error, because this operation requires cluster level permissions which `team-a-client` does not have.\n+\n+\n+### Client with Different Permissions\n+\n+Let's prepare a configuration for `team-b-client`:\n+\n+```\n+cat > /tmp/team-b-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-b-client\" \\\n+  oauth.client.secret=\"team-b-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+If we look at `team-b-client` client configuration in Keycloak, under `Service Account Roles` we can see that it has `Dev Team B` realm role assigned.\n+Looking in Keycloak Console at the `kafka` client's `Authorization` tab where `Permissions` are listed, we can see the permissions that start with 'Dev Team B ...'.\n+These match the users and service accounts that have the `Dev Team B` realm role assigned to them.\n+The `Dev Team B` users have full access to topics beginning with 'b_' on Kafka cluster `my-cluster` (which is the designated cluster name of the demo cluster we brought up), and read access on topics that start with 'x_'.\n+\n+Let's try produce some messages to topic `a_messages` as `team-b-client`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get `Not authorized to access topics: [a_messages]` error as we expected. Let's try to produce to topic `b_messages`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic b_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+Message 2\n+Message 3\n+```\n+\n+This should work fine.\n+\n+What about producing to topic `x_messages`. `team-b-client` is only supposed to be able to read from such a topic.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get a `Not authorized to access topics: [x_messages]` error as we expected.\n+Client `team-a-client`, on the other hand, should be able to write to such a topic:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+Message 1\n+```\n+\n+However, we again receive `Not authorized to access topics: [x_messages]`. What's going on?\n+The reason for failure is that while `team-a-client` can write to `x_messages` topic, it does not have a permission to create a topic if it does not yet exist.\n+\n+We now need a power user that can create a topic with all the proper settings - like the right number of partitions and replicas.\n+\n+\n+### Power User Can Do Anything\n+\n+Let's create a configuration for user `bob` who has full ability to manage everything on Kafka cluster `my-cluster`.\n+\n+We'll need some helper scripts so we can authenticate to the `keycloak` instance.\n+\n+Download the following `oauth.sh` and `jwt.sh` tools to `/tmp` dir and make them executable:\n+\n+   curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/oauth.sh -s > /tmp/oauth.sh\n+   chmod +x /tmp/oauth.sh\n+\n+   curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/jwt.sh -s > /tmp/jwt.sh\n+   chmod +x /tmp/jwt.sh\n+\n+Now, `bob` will authenticate to Keycloak server with his username and password and get a refresh token.\n+\n+   export TOKEN_ENDPOINT=http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\n+   REFRESH_TOKEN=$(/tmp/oauth.sh -q bob)\n+\n+This will prompt you for a password. Type 'bob-password'.\n+\n+We can inspect the refresh token:\n+\n+   /tmp/jwt.sh $REFRESH_TOKEN\n+\n+By default this is a long-lived refresh token that does not expire.\n+\n+Now we will create the configuration file for `bob`:\n+\n+```\n+cat > /tmp/bob.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.refresh.token=\"$REFRESH_TOKEN\" \\\n+  oauth.client.id=\"kafka-cli\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+Note that we use the `kafka-cli` public client for the `oauth.client.id` in the `sasl.jaas.config`.\n+Since that is a public client it does not require any secret.\n+We can use this because we authenticate with a token directly (in this case a refresh token is used to request an access token behind the scenes which is then sent to Kafka broker for authentication, and we already did the authentication for the refresh token).\n+\n+\n+Let's now try to create the `x_messages` topic:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/bob.properties \\\n+      --topic x_messages --create --replication-factor 1 --partitions 1\n+\n+The operation should succeed (you can ignore the warning about periods and underscores).\n+\n+We can list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/bob.properties --list\n+\n+If we try the same as `team-a-client` or `team-b-client` we will get different responses.\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-b-client.properties --list\n+\n+Roles `Dev Team A`, and `Dev Team B` both have `Describe` permission on topics that start with 'x_', but they cannot see the other team's topics as they do not have `Describe` permissions on them.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230db92e0f4d880e8d667eef9353cc2ceaa999f8"}, "originalPosition": 432}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTY3MTA2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDoyNDoyMFrOH5ssFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDoyNDoyMFrOH5ssFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI2MzA2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            We can now again try to produce to the topic as `team-a-client`.\n          \n          \n            \n            \n          \n          \n            \n            ```\n          \n          \n            \n            bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n          \n          \n            \n              --producer.config /tmp/team-a-client.properties\n          \n          \n            \n            Message 1\n          \n          \n            \n            Message 2\n          \n          \n            \n            Message 3\n          \n          \n            \n            ```\n          \n          \n            \n            \n          \n          \n            \n            This works.\n          \n          \n            \n            The `team-a-client` can now successfully produce to the `x_messages` topic:\n          \n          \n            \n            \n          \n          \n            \n            [source,shell]\n          \n          \n            \n            ----\n          \n          \n            \n            bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n          \n          \n            \n              --producer.config /tmp/team-a-client.properties\n          \n          \n            \n            Message 1\n          \n          \n            \n            Message 2\n          \n          \n            \n            Message 3\n          \n          \n            \n            ----", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530263061", "createdAt": "2020-11-25T10:24:20Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,481 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+From the *Realm Settings* you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources.\n+\n+Resources define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of authorization scopes - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+Policies define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, permissions tie together the resources, authorization scopes and policies that specify _users U can perform actions A on resource R_.\n+\n+For more information about Keycloak Authorization Services, see {keycloak-authorization-services}, but note that the Authorization Services documentation is focused primarily on using the Authorization Services to protect web resources rather than access to Kafka.\n+\n+When viewing resources from the Keycloak user interface you will see a list of resource definitions.\n+These are resource specifiers, patterns in a specific format that are used to target policies to specific resources.\n+For example, this pattern targets only topics in kafka cluster 'cluster-1' with names starting with 'a_':\n+\n+----\n+kafka-cluster:cluster-1,Topic:a_*  \n+---- \n+\n+If a cluster is not specified by name ( `kafka-cluster:cluster-1`), the specifier targets any cluster. For example, this pattern targets any cluster with a name starting  'x_':\n+----\n+Group:x_* \n+----\n+\n+\n+The possible resource types, such as `Topic`, `Group` and `Cluster`, mirror the xref:kafka_authorization_model[Kafka authorization model].\n+\n+*Authorization Scopes* lists of all the possible actions (Kafka permissions) that can be granted on specific resources.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+The list of actions mirrors Kafka permissions and is the same for any deployment.\n+\n+Rather than importing authorization scopes manually into every new client, you can use a link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file.\n+\n+You must make sure that the client is enabled in Keycloak for Authorization Services. After which, you can import a JSON file from the *Authorization* tab. You can see the loaded scopes from the *Authorization Scopes* page.\n+\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+The *Policies* tab has filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the roles, or groups they are assigned.\n+Policies can even be defined programmatically using JavaScript so the logic considers the context of the client session, such as the IP of a Kafka client.\n+\n+The *Permissions* tab defines role bindings that associate resources, authorization scopes and policies for applying a set of permissions on specific resources for certain users.\n+\n+Use a clear, descriptive name for each permission definition so that it is obvious what kind of access is granted to which users.\n+For example:\n+\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n+Let's set custom consumer group name that starts with 'a_'\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+\n+We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n+\n+Use CTRL-C to exit.\n+\n+\n+### Using Kafka's CLI Administration Tools\n+\n+Let's now list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+We get one topic listed: `a_messages`.\n+\n+Let's try and list the consumer groups:\n+\n+    bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+Similarly to listing topics, we get one consumer group listed: `a_consumer_group_1`.\n+\n+There are more CLI administrative tools. For example we can try to get the default cluster configuration:\n+\n+    bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+      --entity-type brokers --describe --entity-default\n+\n+But that will fail with `Cluster authorization failed.` error, because this operation requires cluster level permissions which `team-a-client` does not have.\n+\n+\n+### Client with Different Permissions\n+\n+Let's prepare a configuration for `team-b-client`:\n+\n+```\n+cat > /tmp/team-b-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-b-client\" \\\n+  oauth.client.secret=\"team-b-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+If we look at `team-b-client` client configuration in Keycloak, under `Service Account Roles` we can see that it has `Dev Team B` realm role assigned.\n+Looking in Keycloak Console at the `kafka` client's `Authorization` tab where `Permissions` are listed, we can see the permissions that start with 'Dev Team B ...'.\n+These match the users and service accounts that have the `Dev Team B` realm role assigned to them.\n+The `Dev Team B` users have full access to topics beginning with 'b_' on Kafka cluster `my-cluster` (which is the designated cluster name of the demo cluster we brought up), and read access on topics that start with 'x_'.\n+\n+Let's try produce some messages to topic `a_messages` as `team-b-client`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get `Not authorized to access topics: [a_messages]` error as we expected. Let's try to produce to topic `b_messages`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic b_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+Message 2\n+Message 3\n+```\n+\n+This should work fine.\n+\n+What about producing to topic `x_messages`. `team-b-client` is only supposed to be able to read from such a topic.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get a `Not authorized to access topics: [x_messages]` error as we expected.\n+Client `team-a-client`, on the other hand, should be able to write to such a topic:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+Message 1\n+```\n+\n+However, we again receive `Not authorized to access topics: [x_messages]`. What's going on?\n+The reason for failure is that while `team-a-client` can write to `x_messages` topic, it does not have a permission to create a topic if it does not yet exist.\n+\n+We now need a power user that can create a topic with all the proper settings - like the right number of partitions and replicas.\n+\n+\n+### Power User Can Do Anything\n+\n+Let's create a configuration for user `bob` who has full ability to manage everything on Kafka cluster `my-cluster`.\n+\n+We'll need some helper scripts so we can authenticate to the `keycloak` instance.\n+\n+Download the following `oauth.sh` and `jwt.sh` tools to `/tmp` dir and make them executable:\n+\n+   curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/oauth.sh -s > /tmp/oauth.sh\n+   chmod +x /tmp/oauth.sh\n+\n+   curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/jwt.sh -s > /tmp/jwt.sh\n+   chmod +x /tmp/jwt.sh\n+\n+Now, `bob` will authenticate to Keycloak server with his username and password and get a refresh token.\n+\n+   export TOKEN_ENDPOINT=http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\n+   REFRESH_TOKEN=$(/tmp/oauth.sh -q bob)\n+\n+This will prompt you for a password. Type 'bob-password'.\n+\n+We can inspect the refresh token:\n+\n+   /tmp/jwt.sh $REFRESH_TOKEN\n+\n+By default this is a long-lived refresh token that does not expire.\n+\n+Now we will create the configuration file for `bob`:\n+\n+```\n+cat > /tmp/bob.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.refresh.token=\"$REFRESH_TOKEN\" \\\n+  oauth.client.id=\"kafka-cli\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+Note that we use the `kafka-cli` public client for the `oauth.client.id` in the `sasl.jaas.config`.\n+Since that is a public client it does not require any secret.\n+We can use this because we authenticate with a token directly (in this case a refresh token is used to request an access token behind the scenes which is then sent to Kafka broker for authentication, and we already did the authentication for the refresh token).\n+\n+\n+Let's now try to create the `x_messages` topic:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/bob.properties \\\n+      --topic x_messages --create --replication-factor 1 --partitions 1\n+\n+The operation should succeed (you can ignore the warning about periods and underscores).\n+\n+We can list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/bob.properties --list\n+\n+If we try the same as `team-a-client` or `team-b-client` we will get different responses.\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-b-client.properties --list\n+\n+Roles `Dev Team A`, and `Dev Team B` both have `Describe` permission on topics that start with 'x_', but they cannot see the other team's topics as they do not have `Describe` permissions on them.\n+\n+We can now again try to produce to the topic as `team-a-client`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+Message 1\n+Message 2\n+Message 3\n+```\n+\n+This works.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230db92e0f4d880e8d667eef9353cc2ceaa999f8"}, "originalPosition": 444}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTY3ODM2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDoyNjowM1rOH5swbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDoyNjowM1rOH5swbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI2NDE3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If we try the same as `team-b-client` it should fail.\n          \n          \n            \n            \n          \n          \n            \n            ```\n          \n          \n            \n            bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n          \n          \n            \n              --producer.config /tmp/team-b-client.properties\n          \n          \n            \n            Message 4\n          \n          \n            \n            Message 5\n          \n          \n            \n            ```\n          \n          \n            \n            \n          \n          \n            \n            We get an error - `Not authorized to access topics: [x_messages]`.\n          \n          \n            \n            As expected, `team-b-client` still cannot produce to the `x_messages` topic, and the following operation returns an error:\n          \n          \n            \n            \n          \n          \n            \n            [source,shell]\n          \n          \n            \n            ----\n          \n          \n            \n            bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n          \n          \n            \n              --producer.config /tmp/team-b-client.properties\n          \n          \n            \n            Message 4\n          \n          \n            \n            Message 5\n          \n          \n            \n            ----", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530264172", "createdAt": "2020-11-25T10:26:03Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,481 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+From the *Realm Settings* you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources.\n+\n+Resources define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of authorization scopes - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+Policies define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, permissions tie together the resources, authorization scopes and policies that specify _users U can perform actions A on resource R_.\n+\n+For more information about Keycloak Authorization Services, see {keycloak-authorization-services}, but note that the Authorization Services documentation is focused primarily on using the Authorization Services to protect web resources rather than access to Kafka.\n+\n+When viewing resources from the Keycloak user interface you will see a list of resource definitions.\n+These are resource specifiers, patterns in a specific format that are used to target policies to specific resources.\n+For example, this pattern targets only topics in kafka cluster 'cluster-1' with names starting with 'a_':\n+\n+----\n+kafka-cluster:cluster-1,Topic:a_*  \n+---- \n+\n+If a cluster is not specified by name ( `kafka-cluster:cluster-1`), the specifier targets any cluster. For example, this pattern targets any cluster with a name starting  'x_':\n+----\n+Group:x_* \n+----\n+\n+\n+The possible resource types, such as `Topic`, `Group` and `Cluster`, mirror the xref:kafka_authorization_model[Kafka authorization model].\n+\n+*Authorization Scopes* lists of all the possible actions (Kafka permissions) that can be granted on specific resources.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+The list of actions mirrors Kafka permissions and is the same for any deployment.\n+\n+Rather than importing authorization scopes manually into every new client, you can use a link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file.\n+\n+You must make sure that the client is enabled in Keycloak for Authorization Services. After which, you can import a JSON file from the *Authorization* tab. You can see the loaded scopes from the *Authorization Scopes* page.\n+\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+The *Policies* tab has filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the roles, or groups they are assigned.\n+Policies can even be defined programmatically using JavaScript so the logic considers the context of the client session, such as the IP of a Kafka client.\n+\n+The *Permissions* tab defines role bindings that associate resources, authorization scopes and policies for applying a set of permissions on specific resources for certain users.\n+\n+Use a clear, descriptive name for each permission definition so that it is obvious what kind of access is granted to which users.\n+For example:\n+\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n+Let's set custom consumer group name that starts with 'a_'\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+\n+We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n+\n+Use CTRL-C to exit.\n+\n+\n+### Using Kafka's CLI Administration Tools\n+\n+Let's now list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+We get one topic listed: `a_messages`.\n+\n+Let's try and list the consumer groups:\n+\n+    bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+Similarly to listing topics, we get one consumer group listed: `a_consumer_group_1`.\n+\n+There are more CLI administrative tools. For example we can try to get the default cluster configuration:\n+\n+    bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+      --entity-type brokers --describe --entity-default\n+\n+But that will fail with `Cluster authorization failed.` error, because this operation requires cluster level permissions which `team-a-client` does not have.\n+\n+\n+### Client with Different Permissions\n+\n+Let's prepare a configuration for `team-b-client`:\n+\n+```\n+cat > /tmp/team-b-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-b-client\" \\\n+  oauth.client.secret=\"team-b-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+If we look at `team-b-client` client configuration in Keycloak, under `Service Account Roles` we can see that it has `Dev Team B` realm role assigned.\n+Looking in Keycloak Console at the `kafka` client's `Authorization` tab where `Permissions` are listed, we can see the permissions that start with 'Dev Team B ...'.\n+These match the users and service accounts that have the `Dev Team B` realm role assigned to them.\n+The `Dev Team B` users have full access to topics beginning with 'b_' on Kafka cluster `my-cluster` (which is the designated cluster name of the demo cluster we brought up), and read access on topics that start with 'x_'.\n+\n+Let's try produce some messages to topic `a_messages` as `team-b-client`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get `Not authorized to access topics: [a_messages]` error as we expected. Let's try to produce to topic `b_messages`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic b_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+Message 2\n+Message 3\n+```\n+\n+This should work fine.\n+\n+What about producing to topic `x_messages`. `team-b-client` is only supposed to be able to read from such a topic.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get a `Not authorized to access topics: [x_messages]` error as we expected.\n+Client `team-a-client`, on the other hand, should be able to write to such a topic:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+Message 1\n+```\n+\n+However, we again receive `Not authorized to access topics: [x_messages]`. What's going on?\n+The reason for failure is that while `team-a-client` can write to `x_messages` topic, it does not have a permission to create a topic if it does not yet exist.\n+\n+We now need a power user that can create a topic with all the proper settings - like the right number of partitions and replicas.\n+\n+\n+### Power User Can Do Anything\n+\n+Let's create a configuration for user `bob` who has full ability to manage everything on Kafka cluster `my-cluster`.\n+\n+We'll need some helper scripts so we can authenticate to the `keycloak` instance.\n+\n+Download the following `oauth.sh` and `jwt.sh` tools to `/tmp` dir and make them executable:\n+\n+   curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/oauth.sh -s > /tmp/oauth.sh\n+   chmod +x /tmp/oauth.sh\n+\n+   curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/jwt.sh -s > /tmp/jwt.sh\n+   chmod +x /tmp/jwt.sh\n+\n+Now, `bob` will authenticate to Keycloak server with his username and password and get a refresh token.\n+\n+   export TOKEN_ENDPOINT=http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\n+   REFRESH_TOKEN=$(/tmp/oauth.sh -q bob)\n+\n+This will prompt you for a password. Type 'bob-password'.\n+\n+We can inspect the refresh token:\n+\n+   /tmp/jwt.sh $REFRESH_TOKEN\n+\n+By default this is a long-lived refresh token that does not expire.\n+\n+Now we will create the configuration file for `bob`:\n+\n+```\n+cat > /tmp/bob.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.refresh.token=\"$REFRESH_TOKEN\" \\\n+  oauth.client.id=\"kafka-cli\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+Note that we use the `kafka-cli` public client for the `oauth.client.id` in the `sasl.jaas.config`.\n+Since that is a public client it does not require any secret.\n+We can use this because we authenticate with a token directly (in this case a refresh token is used to request an access token behind the scenes which is then sent to Kafka broker for authentication, and we already did the authentication for the refresh token).\n+\n+\n+Let's now try to create the `x_messages` topic:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/bob.properties \\\n+      --topic x_messages --create --replication-factor 1 --partitions 1\n+\n+The operation should succeed (you can ignore the warning about periods and underscores).\n+\n+We can list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/bob.properties --list\n+\n+If we try the same as `team-a-client` or `team-b-client` we will get different responses.\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-b-client.properties --list\n+\n+Roles `Dev Team A`, and `Dev Team B` both have `Describe` permission on topics that start with 'x_', but they cannot see the other team's topics as they do not have `Describe` permissions on them.\n+\n+We can now again try to produce to the topic as `team-a-client`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+Message 1\n+Message 2\n+Message 3\n+```\n+\n+This works.\n+\n+If we try the same as `team-b-client` it should fail.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 4\n+Message 5\n+```\n+\n+We get an error - `Not authorized to access topics: [x_messages]`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230db92e0f4d880e8d667eef9353cc2ceaa999f8"}, "originalPosition": 455}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTY4NTUxOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDoyNzo0M1rOH5s0xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDoyNzo0M1rOH5s0xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI2NTI4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            But `team-b-client` should be able to consume messages from the `x_messages` topic:\n          \n          \n            \n            \n          \n          \n            \n                bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n          \n          \n            \n                  --from-beginning --consumer.config /tmp/team-b-client.properties --group x_consumer_group_b\n          \n          \n            \n            However, due to its Keycloak settings `team-b-client` can consume messages from the `x_messages` topic:\n          \n          \n            \n            \n          \n          \n            \n            [source,shell]\n          \n          \n            \n            ----\n          \n          \n            \n            bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n          \n          \n            \n              --from-beginning --consumer.config /tmp/team-b-client.properties --group x_consumer_group_b\n          \n          \n            \n            ----", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530265286", "createdAt": "2020-11-25T10:27:43Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,481 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+From the *Realm Settings* you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources.\n+\n+Resources define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of authorization scopes - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+Policies define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, permissions tie together the resources, authorization scopes and policies that specify _users U can perform actions A on resource R_.\n+\n+For more information about Keycloak Authorization Services, see {keycloak-authorization-services}, but note that the Authorization Services documentation is focused primarily on using the Authorization Services to protect web resources rather than access to Kafka.\n+\n+When viewing resources from the Keycloak user interface you will see a list of resource definitions.\n+These are resource specifiers, patterns in a specific format that are used to target policies to specific resources.\n+For example, this pattern targets only topics in kafka cluster 'cluster-1' with names starting with 'a_':\n+\n+----\n+kafka-cluster:cluster-1,Topic:a_*  \n+---- \n+\n+If a cluster is not specified by name ( `kafka-cluster:cluster-1`), the specifier targets any cluster. For example, this pattern targets any cluster with a name starting  'x_':\n+----\n+Group:x_* \n+----\n+\n+\n+The possible resource types, such as `Topic`, `Group` and `Cluster`, mirror the xref:kafka_authorization_model[Kafka authorization model].\n+\n+*Authorization Scopes* lists of all the possible actions (Kafka permissions) that can be granted on specific resources.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+The list of actions mirrors Kafka permissions and is the same for any deployment.\n+\n+Rather than importing authorization scopes manually into every new client, you can use a link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file.\n+\n+You must make sure that the client is enabled in Keycloak for Authorization Services. After which, you can import a JSON file from the *Authorization* tab. You can see the loaded scopes from the *Authorization Scopes* page.\n+\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+The *Policies* tab has filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the roles, or groups they are assigned.\n+Policies can even be defined programmatically using JavaScript so the logic considers the context of the client session, such as the IP of a Kafka client.\n+\n+The *Permissions* tab defines role bindings that associate resources, authorization scopes and policies for applying a set of permissions on specific resources for certain users.\n+\n+Use a clear, descriptive name for each permission definition so that it is obvious what kind of access is granted to which users.\n+For example:\n+\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n+Let's set custom consumer group name that starts with 'a_'\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+\n+We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n+\n+Use CTRL-C to exit.\n+\n+\n+### Using Kafka's CLI Administration Tools\n+\n+Let's now list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+We get one topic listed: `a_messages`.\n+\n+Let's try and list the consumer groups:\n+\n+    bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+Similarly to listing topics, we get one consumer group listed: `a_consumer_group_1`.\n+\n+There are more CLI administrative tools. For example we can try to get the default cluster configuration:\n+\n+    bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+      --entity-type brokers --describe --entity-default\n+\n+But that will fail with `Cluster authorization failed.` error, because this operation requires cluster level permissions which `team-a-client` does not have.\n+\n+\n+### Client with Different Permissions\n+\n+Let's prepare a configuration for `team-b-client`:\n+\n+```\n+cat > /tmp/team-b-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-b-client\" \\\n+  oauth.client.secret=\"team-b-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+If we look at `team-b-client` client configuration in Keycloak, under `Service Account Roles` we can see that it has `Dev Team B` realm role assigned.\n+Looking in Keycloak Console at the `kafka` client's `Authorization` tab where `Permissions` are listed, we can see the permissions that start with 'Dev Team B ...'.\n+These match the users and service accounts that have the `Dev Team B` realm role assigned to them.\n+The `Dev Team B` users have full access to topics beginning with 'b_' on Kafka cluster `my-cluster` (which is the designated cluster name of the demo cluster we brought up), and read access on topics that start with 'x_'.\n+\n+Let's try produce some messages to topic `a_messages` as `team-b-client`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get `Not authorized to access topics: [a_messages]` error as we expected. Let's try to produce to topic `b_messages`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic b_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+Message 2\n+Message 3\n+```\n+\n+This should work fine.\n+\n+What about producing to topic `x_messages`. `team-b-client` is only supposed to be able to read from such a topic.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get a `Not authorized to access topics: [x_messages]` error as we expected.\n+Client `team-a-client`, on the other hand, should be able to write to such a topic:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+Message 1\n+```\n+\n+However, we again receive `Not authorized to access topics: [x_messages]`. What's going on?\n+The reason for failure is that while `team-a-client` can write to `x_messages` topic, it does not have a permission to create a topic if it does not yet exist.\n+\n+We now need a power user that can create a topic with all the proper settings - like the right number of partitions and replicas.\n+\n+\n+### Power User Can Do Anything\n+\n+Let's create a configuration for user `bob` who has full ability to manage everything on Kafka cluster `my-cluster`.\n+\n+We'll need some helper scripts so we can authenticate to the `keycloak` instance.\n+\n+Download the following `oauth.sh` and `jwt.sh` tools to `/tmp` dir and make them executable:\n+\n+   curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/oauth.sh -s > /tmp/oauth.sh\n+   chmod +x /tmp/oauth.sh\n+\n+   curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/jwt.sh -s > /tmp/jwt.sh\n+   chmod +x /tmp/jwt.sh\n+\n+Now, `bob` will authenticate to Keycloak server with his username and password and get a refresh token.\n+\n+   export TOKEN_ENDPOINT=http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\n+   REFRESH_TOKEN=$(/tmp/oauth.sh -q bob)\n+\n+This will prompt you for a password. Type 'bob-password'.\n+\n+We can inspect the refresh token:\n+\n+   /tmp/jwt.sh $REFRESH_TOKEN\n+\n+By default this is a long-lived refresh token that does not expire.\n+\n+Now we will create the configuration file for `bob`:\n+\n+```\n+cat > /tmp/bob.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.refresh.token=\"$REFRESH_TOKEN\" \\\n+  oauth.client.id=\"kafka-cli\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+Note that we use the `kafka-cli` public client for the `oauth.client.id` in the `sasl.jaas.config`.\n+Since that is a public client it does not require any secret.\n+We can use this because we authenticate with a token directly (in this case a refresh token is used to request an access token behind the scenes which is then sent to Kafka broker for authentication, and we already did the authentication for the refresh token).\n+\n+\n+Let's now try to create the `x_messages` topic:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/bob.properties \\\n+      --topic x_messages --create --replication-factor 1 --partitions 1\n+\n+The operation should succeed (you can ignore the warning about periods and underscores).\n+\n+We can list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/bob.properties --list\n+\n+If we try the same as `team-a-client` or `team-b-client` we will get different responses.\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-b-client.properties --list\n+\n+Roles `Dev Team A`, and `Dev Team B` both have `Describe` permission on topics that start with 'x_', but they cannot see the other team's topics as they do not have `Describe` permissions on them.\n+\n+We can now again try to produce to the topic as `team-a-client`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+Message 1\n+Message 2\n+Message 3\n+```\n+\n+This works.\n+\n+If we try the same as `team-b-client` it should fail.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 4\n+Message 5\n+```\n+\n+We get an error - `Not authorized to access topics: [x_messages]`.\n+\n+But `team-b-client` should be able to consume messages from the `x_messages` topic:\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+      --from-beginning --consumer.config /tmp/team-b-client.properties --group x_consumer_group_b\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230db92e0f4d880e8d667eef9353cc2ceaa999f8"}, "originalPosition": 461}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTY5NzM0OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDozMDo0MlrOH5s8Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDozMDo0MlrOH5s8Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI2NzIwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Whereas `team-a-client` does not have permission to read, even though they can write:\n          \n          \n            \n            \n          \n          \n            \n                bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n          \n          \n            \n                  --from-beginning --consumer.config /tmp/team-a-client.properties --group x_consumer_group_a\n          \n          \n            \n            \n          \n          \n            \n            We get a `Not authorized to access group: x_consumer_group_a` error.\n          \n          \n            \n            Conversely, even though `team-a-client` can write to topic `x_messages`, the following read request returns a `Not authorized to access group: x_consumer_group_a` error:\n          \n          \n            \n            \n          \n          \n            \n            [source,shell]\n          \n          \n            \n            ----\n          \n          \n            \n            bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n          \n          \n            \n              --from-beginning --consumer.config /tmp/team-a-client.properties --group x_consumer_group_a\n          \n          \n            \n            ----", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530267207", "createdAt": "2020-11-25T10:30:42Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,481 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+From the *Realm Settings* you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources.\n+\n+Resources define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of authorization scopes - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+Policies define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, permissions tie together the resources, authorization scopes and policies that specify _users U can perform actions A on resource R_.\n+\n+For more information about Keycloak Authorization Services, see {keycloak-authorization-services}, but note that the Authorization Services documentation is focused primarily on using the Authorization Services to protect web resources rather than access to Kafka.\n+\n+When viewing resources from the Keycloak user interface you will see a list of resource definitions.\n+These are resource specifiers, patterns in a specific format that are used to target policies to specific resources.\n+For example, this pattern targets only topics in kafka cluster 'cluster-1' with names starting with 'a_':\n+\n+----\n+kafka-cluster:cluster-1,Topic:a_*  \n+---- \n+\n+If a cluster is not specified by name ( `kafka-cluster:cluster-1`), the specifier targets any cluster. For example, this pattern targets any cluster with a name starting  'x_':\n+----\n+Group:x_* \n+----\n+\n+\n+The possible resource types, such as `Topic`, `Group` and `Cluster`, mirror the xref:kafka_authorization_model[Kafka authorization model].\n+\n+*Authorization Scopes* lists of all the possible actions (Kafka permissions) that can be granted on specific resources.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+The list of actions mirrors Kafka permissions and is the same for any deployment.\n+\n+Rather than importing authorization scopes manually into every new client, you can use a link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file.\n+\n+You must make sure that the client is enabled in Keycloak for Authorization Services. After which, you can import a JSON file from the *Authorization* tab. You can see the loaded scopes from the *Authorization Scopes* page.\n+\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+The *Policies* tab has filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the roles, or groups they are assigned.\n+Policies can even be defined programmatically using JavaScript so the logic considers the context of the client session, such as the IP of a Kafka client.\n+\n+The *Permissions* tab defines role bindings that associate resources, authorization scopes and policies for applying a set of permissions on specific resources for certain users.\n+\n+Use a clear, descriptive name for each permission definition so that it is obvious what kind of access is granted to which users.\n+For example:\n+\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n+Let's set custom consumer group name that starts with 'a_'\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+\n+We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n+\n+Use CTRL-C to exit.\n+\n+\n+### Using Kafka's CLI Administration Tools\n+\n+Let's now list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+We get one topic listed: `a_messages`.\n+\n+Let's try and list the consumer groups:\n+\n+    bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+Similarly to listing topics, we get one consumer group listed: `a_consumer_group_1`.\n+\n+There are more CLI administrative tools. For example we can try to get the default cluster configuration:\n+\n+    bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+      --entity-type brokers --describe --entity-default\n+\n+But that will fail with `Cluster authorization failed.` error, because this operation requires cluster level permissions which `team-a-client` does not have.\n+\n+\n+### Client with Different Permissions\n+\n+Let's prepare a configuration for `team-b-client`:\n+\n+```\n+cat > /tmp/team-b-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-b-client\" \\\n+  oauth.client.secret=\"team-b-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+If we look at `team-b-client` client configuration in Keycloak, under `Service Account Roles` we can see that it has `Dev Team B` realm role assigned.\n+Looking in Keycloak Console at the `kafka` client's `Authorization` tab where `Permissions` are listed, we can see the permissions that start with 'Dev Team B ...'.\n+These match the users and service accounts that have the `Dev Team B` realm role assigned to them.\n+The `Dev Team B` users have full access to topics beginning with 'b_' on Kafka cluster `my-cluster` (which is the designated cluster name of the demo cluster we brought up), and read access on topics that start with 'x_'.\n+\n+Let's try produce some messages to topic `a_messages` as `team-b-client`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get `Not authorized to access topics: [a_messages]` error as we expected. Let's try to produce to topic `b_messages`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic b_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+Message 2\n+Message 3\n+```\n+\n+This should work fine.\n+\n+What about producing to topic `x_messages`. `team-b-client` is only supposed to be able to read from such a topic.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get a `Not authorized to access topics: [x_messages]` error as we expected.\n+Client `team-a-client`, on the other hand, should be able to write to such a topic:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+Message 1\n+```\n+\n+However, we again receive `Not authorized to access topics: [x_messages]`. What's going on?\n+The reason for failure is that while `team-a-client` can write to `x_messages` topic, it does not have a permission to create a topic if it does not yet exist.\n+\n+We now need a power user that can create a topic with all the proper settings - like the right number of partitions and replicas.\n+\n+\n+### Power User Can Do Anything\n+\n+Let's create a configuration for user `bob` who has full ability to manage everything on Kafka cluster `my-cluster`.\n+\n+We'll need some helper scripts so we can authenticate to the `keycloak` instance.\n+\n+Download the following `oauth.sh` and `jwt.sh` tools to `/tmp` dir and make them executable:\n+\n+   curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/oauth.sh -s > /tmp/oauth.sh\n+   chmod +x /tmp/oauth.sh\n+\n+   curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/jwt.sh -s > /tmp/jwt.sh\n+   chmod +x /tmp/jwt.sh\n+\n+Now, `bob` will authenticate to Keycloak server with his username and password and get a refresh token.\n+\n+   export TOKEN_ENDPOINT=http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\n+   REFRESH_TOKEN=$(/tmp/oauth.sh -q bob)\n+\n+This will prompt you for a password. Type 'bob-password'.\n+\n+We can inspect the refresh token:\n+\n+   /tmp/jwt.sh $REFRESH_TOKEN\n+\n+By default this is a long-lived refresh token that does not expire.\n+\n+Now we will create the configuration file for `bob`:\n+\n+```\n+cat > /tmp/bob.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.refresh.token=\"$REFRESH_TOKEN\" \\\n+  oauth.client.id=\"kafka-cli\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+Note that we use the `kafka-cli` public client for the `oauth.client.id` in the `sasl.jaas.config`.\n+Since that is a public client it does not require any secret.\n+We can use this because we authenticate with a token directly (in this case a refresh token is used to request an access token behind the scenes which is then sent to Kafka broker for authentication, and we already did the authentication for the refresh token).\n+\n+\n+Let's now try to create the `x_messages` topic:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/bob.properties \\\n+      --topic x_messages --create --replication-factor 1 --partitions 1\n+\n+The operation should succeed (you can ignore the warning about periods and underscores).\n+\n+We can list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/bob.properties --list\n+\n+If we try the same as `team-a-client` or `team-b-client` we will get different responses.\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-b-client.properties --list\n+\n+Roles `Dev Team A`, and `Dev Team B` both have `Describe` permission on topics that start with 'x_', but they cannot see the other team's topics as they do not have `Describe` permissions on them.\n+\n+We can now again try to produce to the topic as `team-a-client`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+Message 1\n+Message 2\n+Message 3\n+```\n+\n+This works.\n+\n+If we try the same as `team-b-client` it should fail.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 4\n+Message 5\n+```\n+\n+We get an error - `Not authorized to access topics: [x_messages]`.\n+\n+But `team-b-client` should be able to consume messages from the `x_messages` topic:\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+      --from-beginning --consumer.config /tmp/team-b-client.properties --group x_consumer_group_b\n+\n+Whereas `team-a-client` does not have permission to read, even though they can write:\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group x_consumer_group_a\n+\n+We get a `Not authorized to access group: x_consumer_group_a` error.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230db92e0f4d880e8d667eef9353cc2ceaa999f8"}, "originalPosition": 467}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTc2MDY3OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDo0NjoyNFrOH5tipg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDo0NjoyNFrOH5tipg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI3NzAzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            What if we try to use a consumer group name that starts with 'a_'?\n          \n          \n            \n            \n          \n          \n            \n                bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n          \n          \n            \n                  --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_a\n          \n          \n            \n            \n          \n          \n            \n            We now get a different error: `Not authorized to access topics: [x_messages]`\n          \n          \n            \n            A consumer group that begins with `a_` is used in the next read request:\n          \n          \n            \n            \n          \n          \n            \n            [source,shell]\n          \n          \n            \n            ----\n          \n          \n            \n            bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n          \n          \n            \n              --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_a\n          \n          \n            \n            ----\n          \n          \n            \n            \n          \n          \n            \n            An error is still returned, but this time it is `Not authorized to access topics: [x_messages]`.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530277030", "createdAt": "2020-11-25T10:46:24Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,481 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+From the *Realm Settings* you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources.\n+\n+Resources define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of authorization scopes - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+Policies define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, permissions tie together the resources, authorization scopes and policies that specify _users U can perform actions A on resource R_.\n+\n+For more information about Keycloak Authorization Services, see {keycloak-authorization-services}, but note that the Authorization Services documentation is focused primarily on using the Authorization Services to protect web resources rather than access to Kafka.\n+\n+When viewing resources from the Keycloak user interface you will see a list of resource definitions.\n+These are resource specifiers, patterns in a specific format that are used to target policies to specific resources.\n+For example, this pattern targets only topics in kafka cluster 'cluster-1' with names starting with 'a_':\n+\n+----\n+kafka-cluster:cluster-1,Topic:a_*  \n+---- \n+\n+If a cluster is not specified by name ( `kafka-cluster:cluster-1`), the specifier targets any cluster. For example, this pattern targets any cluster with a name starting  'x_':\n+----\n+Group:x_* \n+----\n+\n+\n+The possible resource types, such as `Topic`, `Group` and `Cluster`, mirror the xref:kafka_authorization_model[Kafka authorization model].\n+\n+*Authorization Scopes* lists of all the possible actions (Kafka permissions) that can be granted on specific resources.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+The list of actions mirrors Kafka permissions and is the same for any deployment.\n+\n+Rather than importing authorization scopes manually into every new client, you can use a link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file.\n+\n+You must make sure that the client is enabled in Keycloak for Authorization Services. After which, you can import a JSON file from the *Authorization* tab. You can see the loaded scopes from the *Authorization Scopes* page.\n+\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+The *Policies* tab has filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the roles, or groups they are assigned.\n+Policies can even be defined programmatically using JavaScript so the logic considers the context of the client session, such as the IP of a Kafka client.\n+\n+The *Permissions* tab defines role bindings that associate resources, authorization scopes and policies for applying a set of permissions on specific resources for certain users.\n+\n+Use a clear, descriptive name for each permission definition so that it is obvious what kind of access is granted to which users.\n+For example:\n+\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n+Let's set custom consumer group name that starts with 'a_'\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+\n+We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n+\n+Use CTRL-C to exit.\n+\n+\n+### Using Kafka's CLI Administration Tools\n+\n+Let's now list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+We get one topic listed: `a_messages`.\n+\n+Let's try and list the consumer groups:\n+\n+    bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+Similarly to listing topics, we get one consumer group listed: `a_consumer_group_1`.\n+\n+There are more CLI administrative tools. For example we can try to get the default cluster configuration:\n+\n+    bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+      --entity-type brokers --describe --entity-default\n+\n+But that will fail with `Cluster authorization failed.` error, because this operation requires cluster level permissions which `team-a-client` does not have.\n+\n+\n+### Client with Different Permissions\n+\n+Let's prepare a configuration for `team-b-client`:\n+\n+```\n+cat > /tmp/team-b-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-b-client\" \\\n+  oauth.client.secret=\"team-b-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+If we look at `team-b-client` client configuration in Keycloak, under `Service Account Roles` we can see that it has `Dev Team B` realm role assigned.\n+Looking in Keycloak Console at the `kafka` client's `Authorization` tab where `Permissions` are listed, we can see the permissions that start with 'Dev Team B ...'.\n+These match the users and service accounts that have the `Dev Team B` realm role assigned to them.\n+The `Dev Team B` users have full access to topics beginning with 'b_' on Kafka cluster `my-cluster` (which is the designated cluster name of the demo cluster we brought up), and read access on topics that start with 'x_'.\n+\n+Let's try produce some messages to topic `a_messages` as `team-b-client`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get `Not authorized to access topics: [a_messages]` error as we expected. Let's try to produce to topic `b_messages`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic b_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+Message 2\n+Message 3\n+```\n+\n+This should work fine.\n+\n+What about producing to topic `x_messages`. `team-b-client` is only supposed to be able to read from such a topic.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get a `Not authorized to access topics: [x_messages]` error as we expected.\n+Client `team-a-client`, on the other hand, should be able to write to such a topic:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+Message 1\n+```\n+\n+However, we again receive `Not authorized to access topics: [x_messages]`. What's going on?\n+The reason for failure is that while `team-a-client` can write to `x_messages` topic, it does not have a permission to create a topic if it does not yet exist.\n+\n+We now need a power user that can create a topic with all the proper settings - like the right number of partitions and replicas.\n+\n+\n+### Power User Can Do Anything\n+\n+Let's create a configuration for user `bob` who has full ability to manage everything on Kafka cluster `my-cluster`.\n+\n+We'll need some helper scripts so we can authenticate to the `keycloak` instance.\n+\n+Download the following `oauth.sh` and `jwt.sh` tools to `/tmp` dir and make them executable:\n+\n+   curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/oauth.sh -s > /tmp/oauth.sh\n+   chmod +x /tmp/oauth.sh\n+\n+   curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/jwt.sh -s > /tmp/jwt.sh\n+   chmod +x /tmp/jwt.sh\n+\n+Now, `bob` will authenticate to Keycloak server with his username and password and get a refresh token.\n+\n+   export TOKEN_ENDPOINT=http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\n+   REFRESH_TOKEN=$(/tmp/oauth.sh -q bob)\n+\n+This will prompt you for a password. Type 'bob-password'.\n+\n+We can inspect the refresh token:\n+\n+   /tmp/jwt.sh $REFRESH_TOKEN\n+\n+By default this is a long-lived refresh token that does not expire.\n+\n+Now we will create the configuration file for `bob`:\n+\n+```\n+cat > /tmp/bob.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.refresh.token=\"$REFRESH_TOKEN\" \\\n+  oauth.client.id=\"kafka-cli\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+Note that we use the `kafka-cli` public client for the `oauth.client.id` in the `sasl.jaas.config`.\n+Since that is a public client it does not require any secret.\n+We can use this because we authenticate with a token directly (in this case a refresh token is used to request an access token behind the scenes which is then sent to Kafka broker for authentication, and we already did the authentication for the refresh token).\n+\n+\n+Let's now try to create the `x_messages` topic:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/bob.properties \\\n+      --topic x_messages --create --replication-factor 1 --partitions 1\n+\n+The operation should succeed (you can ignore the warning about periods and underscores).\n+\n+We can list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/bob.properties --list\n+\n+If we try the same as `team-a-client` or `team-b-client` we will get different responses.\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-b-client.properties --list\n+\n+Roles `Dev Team A`, and `Dev Team B` both have `Describe` permission on topics that start with 'x_', but they cannot see the other team's topics as they do not have `Describe` permissions on them.\n+\n+We can now again try to produce to the topic as `team-a-client`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+Message 1\n+Message 2\n+Message 3\n+```\n+\n+This works.\n+\n+If we try the same as `team-b-client` it should fail.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 4\n+Message 5\n+```\n+\n+We get an error - `Not authorized to access topics: [x_messages]`.\n+\n+But `team-b-client` should be able to consume messages from the `x_messages` topic:\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+      --from-beginning --consumer.config /tmp/team-b-client.properties --group x_consumer_group_b\n+\n+Whereas `team-a-client` does not have permission to read, even though they can write:\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group x_consumer_group_a\n+\n+We get a `Not authorized to access group: x_consumer_group_a` error.\n+\n+What if we try to use a consumer group name that starts with 'a_'?\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_a\n+\n+We now get a different error: `Not authorized to access topics: [x_messages]`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230db92e0f4d880e8d667eef9353cc2ceaa999f8"}, "originalPosition": 474}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTc2MzI4OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDo0NzowM1rOH5tkPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDo0NzowM1rOH5tkPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI3NzQzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            It just won't work - `Dev Team A` has no `Read` access on topics that start with 'x_'.\n          \n          \n            \n            `Dev Team A` has no `Read` access on topics that start with 'x_'.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530277439", "createdAt": "2020-11-25T10:47:03Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,481 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+From the *Realm Settings* you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources.\n+\n+Resources define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of authorization scopes - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+Policies define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, permissions tie together the resources, authorization scopes and policies that specify _users U can perform actions A on resource R_.\n+\n+For more information about Keycloak Authorization Services, see {keycloak-authorization-services}, but note that the Authorization Services documentation is focused primarily on using the Authorization Services to protect web resources rather than access to Kafka.\n+\n+When viewing resources from the Keycloak user interface you will see a list of resource definitions.\n+These are resource specifiers, patterns in a specific format that are used to target policies to specific resources.\n+For example, this pattern targets only topics in kafka cluster 'cluster-1' with names starting with 'a_':\n+\n+----\n+kafka-cluster:cluster-1,Topic:a_*  \n+---- \n+\n+If a cluster is not specified by name ( `kafka-cluster:cluster-1`), the specifier targets any cluster. For example, this pattern targets any cluster with a name starting  'x_':\n+----\n+Group:x_* \n+----\n+\n+\n+The possible resource types, such as `Topic`, `Group` and `Cluster`, mirror the xref:kafka_authorization_model[Kafka authorization model].\n+\n+*Authorization Scopes* lists of all the possible actions (Kafka permissions) that can be granted on specific resources.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+The list of actions mirrors Kafka permissions and is the same for any deployment.\n+\n+Rather than importing authorization scopes manually into every new client, you can use a link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file.\n+\n+You must make sure that the client is enabled in Keycloak for Authorization Services. After which, you can import a JSON file from the *Authorization* tab. You can see the loaded scopes from the *Authorization Scopes* page.\n+\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+The *Policies* tab has filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the roles, or groups they are assigned.\n+Policies can even be defined programmatically using JavaScript so the logic considers the context of the client session, such as the IP of a Kafka client.\n+\n+The *Permissions* tab defines role bindings that associate resources, authorization scopes and policies for applying a set of permissions on specific resources for certain users.\n+\n+Use a clear, descriptive name for each permission definition so that it is obvious what kind of access is granted to which users.\n+For example:\n+\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n+Let's set custom consumer group name that starts with 'a_'\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+\n+We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n+\n+Use CTRL-C to exit.\n+\n+\n+### Using Kafka's CLI Administration Tools\n+\n+Let's now list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+We get one topic listed: `a_messages`.\n+\n+Let's try and list the consumer groups:\n+\n+    bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+Similarly to listing topics, we get one consumer group listed: `a_consumer_group_1`.\n+\n+There are more CLI administrative tools. For example we can try to get the default cluster configuration:\n+\n+    bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+      --entity-type brokers --describe --entity-default\n+\n+But that will fail with `Cluster authorization failed.` error, because this operation requires cluster level permissions which `team-a-client` does not have.\n+\n+\n+### Client with Different Permissions\n+\n+Let's prepare a configuration for `team-b-client`:\n+\n+```\n+cat > /tmp/team-b-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-b-client\" \\\n+  oauth.client.secret=\"team-b-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+If we look at `team-b-client` client configuration in Keycloak, under `Service Account Roles` we can see that it has `Dev Team B` realm role assigned.\n+Looking in Keycloak Console at the `kafka` client's `Authorization` tab where `Permissions` are listed, we can see the permissions that start with 'Dev Team B ...'.\n+These match the users and service accounts that have the `Dev Team B` realm role assigned to them.\n+The `Dev Team B` users have full access to topics beginning with 'b_' on Kafka cluster `my-cluster` (which is the designated cluster name of the demo cluster we brought up), and read access on topics that start with 'x_'.\n+\n+Let's try produce some messages to topic `a_messages` as `team-b-client`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get `Not authorized to access topics: [a_messages]` error as we expected. Let's try to produce to topic `b_messages`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic b_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+Message 2\n+Message 3\n+```\n+\n+This should work fine.\n+\n+What about producing to topic `x_messages`. `team-b-client` is only supposed to be able to read from such a topic.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get a `Not authorized to access topics: [x_messages]` error as we expected.\n+Client `team-a-client`, on the other hand, should be able to write to such a topic:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+Message 1\n+```\n+\n+However, we again receive `Not authorized to access topics: [x_messages]`. What's going on?\n+The reason for failure is that while `team-a-client` can write to `x_messages` topic, it does not have a permission to create a topic if it does not yet exist.\n+\n+We now need a power user that can create a topic with all the proper settings - like the right number of partitions and replicas.\n+\n+\n+### Power User Can Do Anything\n+\n+Let's create a configuration for user `bob` who has full ability to manage everything on Kafka cluster `my-cluster`.\n+\n+We'll need some helper scripts so we can authenticate to the `keycloak` instance.\n+\n+Download the following `oauth.sh` and `jwt.sh` tools to `/tmp` dir and make them executable:\n+\n+   curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/oauth.sh -s > /tmp/oauth.sh\n+   chmod +x /tmp/oauth.sh\n+\n+   curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/jwt.sh -s > /tmp/jwt.sh\n+   chmod +x /tmp/jwt.sh\n+\n+Now, `bob` will authenticate to Keycloak server with his username and password and get a refresh token.\n+\n+   export TOKEN_ENDPOINT=http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\n+   REFRESH_TOKEN=$(/tmp/oauth.sh -q bob)\n+\n+This will prompt you for a password. Type 'bob-password'.\n+\n+We can inspect the refresh token:\n+\n+   /tmp/jwt.sh $REFRESH_TOKEN\n+\n+By default this is a long-lived refresh token that does not expire.\n+\n+Now we will create the configuration file for `bob`:\n+\n+```\n+cat > /tmp/bob.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.refresh.token=\"$REFRESH_TOKEN\" \\\n+  oauth.client.id=\"kafka-cli\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+Note that we use the `kafka-cli` public client for the `oauth.client.id` in the `sasl.jaas.config`.\n+Since that is a public client it does not require any secret.\n+We can use this because we authenticate with a token directly (in this case a refresh token is used to request an access token behind the scenes which is then sent to Kafka broker for authentication, and we already did the authentication for the refresh token).\n+\n+\n+Let's now try to create the `x_messages` topic:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/bob.properties \\\n+      --topic x_messages --create --replication-factor 1 --partitions 1\n+\n+The operation should succeed (you can ignore the warning about periods and underscores).\n+\n+We can list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/bob.properties --list\n+\n+If we try the same as `team-a-client` or `team-b-client` we will get different responses.\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-b-client.properties --list\n+\n+Roles `Dev Team A`, and `Dev Team B` both have `Describe` permission on topics that start with 'x_', but they cannot see the other team's topics as they do not have `Describe` permissions on them.\n+\n+We can now again try to produce to the topic as `team-a-client`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+Message 1\n+Message 2\n+Message 3\n+```\n+\n+This works.\n+\n+If we try the same as `team-b-client` it should fail.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 4\n+Message 5\n+```\n+\n+We get an error - `Not authorized to access topics: [x_messages]`.\n+\n+But `team-b-client` should be able to consume messages from the `x_messages` topic:\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+      --from-beginning --consumer.config /tmp/team-b-client.properties --group x_consumer_group_b\n+\n+Whereas `team-a-client` does not have permission to read, even though they can write:\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group x_consumer_group_a\n+\n+We get a `Not authorized to access group: x_consumer_group_a` error.\n+\n+What if we try to use a consumer group name that starts with 'a_'?\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_a\n+\n+We now get a different error: `Not authorized to access topics: [x_messages]`\n+\n+It just won't work - `Dev Team A` has no `Read` access on topics that start with 'x_'.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230db92e0f4d880e8d667eef9353cc2ceaa999f8"}, "originalPosition": 476}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTc2NzY5OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDo0ODowNFrOH5tm3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDo0ODowNFrOH5tm3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI3ODEwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            User `bob` should have no problem reading from or writing to any topic:\n          \n          \n            \n            \n          \n          \n            \n                bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n          \n          \n            \n                  --from-beginning --consumer.config /tmp/bob.properties\n          \n          \n            \n            User `bob` should can read from or write to any topic:\n          \n          \n            \n            \n          \n          \n            \n            [source,shell]\n          \n          \n            \n            ----\n          \n          \n            \n            bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n          \n          \n            \n              --from-beginning --consumer.config /tmp/bob.properties\n          \n          \n            \n            ----", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530278108", "createdAt": "2020-11-25T10:48:04Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,481 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+From the *Realm Settings* you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources.\n+\n+Resources define _what_ we are protecting from unauthorized access.\n+Each resource can contain a list of authorization scopes - actions that are available on the resource, so that permission on a resource can be granted for one or more actions only.\n+Policies define the groups of users we want to target with permissions. Users can be targeted based on group membership, assigned roles, or individually.\n+Finally, permissions tie together the resources, authorization scopes and policies that specify _users U can perform actions A on resource R_.\n+\n+For more information about Keycloak Authorization Services, see {keycloak-authorization-services}, but note that the Authorization Services documentation is focused primarily on using the Authorization Services to protect web resources rather than access to Kafka.\n+\n+When viewing resources from the Keycloak user interface you will see a list of resource definitions.\n+These are resource specifiers, patterns in a specific format that are used to target policies to specific resources.\n+For example, this pattern targets only topics in kafka cluster 'cluster-1' with names starting with 'a_':\n+\n+----\n+kafka-cluster:cluster-1,Topic:a_*  \n+---- \n+\n+If a cluster is not specified by name ( `kafka-cluster:cluster-1`), the specifier targets any cluster. For example, this pattern targets any cluster with a name starting  'x_':\n+----\n+Group:x_* \n+----\n+\n+\n+The possible resource types, such as `Topic`, `Group` and `Cluster`, mirror the xref:kafka_authorization_model[Kafka authorization model].\n+\n+*Authorization Scopes* lists of all the possible actions (Kafka permissions) that can be granted on specific resources.\n+It requires some understanding of link:https://kafka.apache.org/documentation/#resources_in_kafka[Kafka's permissions model] to know which of these make sense with which resource type.\n+The list of actions mirrors Kafka permissions and is the same for any deployment.\n+\n+Rather than importing authorization scopes manually into every new client, you can use a link:https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/oauth-keycloak-authorizer/etc/authorization-scopes.json[authorization-scopes.json] file.\n+\n+You must make sure that the client is enabled in Keycloak for Authorization Services. After which, you can import a JSON file from the *Authorization* tab. You can see the loaded scopes from the *Authorization Scopes* page.\n+\n+For this example the authorization scopes have already been imported as part of the realm import.\n+\n+The *Policies* tab has filters that match sets of users.\n+Users can be explicitly listed, or they can be matched based on the roles, or groups they are assigned.\n+Policies can even be defined programmatically using JavaScript so the logic considers the context of the client session, such as the IP of a Kafka client.\n+\n+The *Permissions* tab defines role bindings that associate resources, authorization scopes and policies for applying a set of permissions on specific resources for certain users.\n+\n+Use a clear, descriptive name for each permission definition so that it is obvious what kind of access is granted to which users.\n+For example:\n+\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+If we take a closer look at the `Dev Team A can write ...` permission definition, we see that it combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy.\n+If we click on the `Dev Team A` policy, we see that it matches all users that have a realm role called `Dev Team A`.\n+\n+Similarly, the `Dev Team B ...` permissions perform matching using the `Dev Team B` policy which also uses realm role to match allowed users - in this case those with realm role `Dev Team B`.\n+The `Dev Team B ...` permissions grant users `Describe` and `Read` on `Topic:x_*`, and `Group:x_*` resources, effectively giving matching users and clients the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with 'x_'.\n+\n+## Targeting Permissions - Clients and Roles vs. Users and Groups\n+\n+In Keycloak, confidential clients with 'service accounts' enabled can authenticate to the server in their own name using a clientId and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use Group policies, and should instead use Role policies.\n+Or, thinking about it another way, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the Group policies, rather than the Role policies.\n+That's what we see used in `permissions` that start with 'ClusterManager'.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log-in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+Under `Clients` / `kafka` / `Authorization` / `Settings` make sure the `Decision Strategy` is set to `Affirmative`, and NOT to `Unanimous`.\n+Click on other tabs and make sure there are some resources, authorization claims, policies and permissions defined.\n+\n+With configuration now in place, let's create some topics, use a producer, a consumer, and try to perform some management operations using different user and service accounts.\n+\n+First, we run a new interactive pod container using a Strimzi Kafka image which we use to connect to the already running Kafka broker.\n+\n+    kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+\n+The first time you run this, the `kubectl` might timeout waiting on the image to be downloaded, but your subsequent attempts may result in AlreadyExists error.\n+\n+You can attach to the existing pod by running:\n+\n+    kubectl attach -ti kafka-cli\n+\n+Let's try to produce some messages as client `team-a-client`.\n+\n+First, we prepare a Kafka client configuration file with authentication parameters.\n+\n+```\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+In the Keycloak Console you can find which roles are assigned to the `team-a-client` service account, by selecting `team-a-client` in the `Clients` section.\n+and then opening the `Service Account Roles` tab for the client.\n+You should see the `Dev Team A` realm role assigned.\n+\n+We can now use this configuration with Kafka's CLI tools.\n+\n+\n+### Producing the Messages\n+\n+Let's try to produce some messages to topic 'my-topic':\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+```\n+\n+When we press `Enter` to push the first message we receive `Not authorized to access topics: [my-topic]` error.\n+\n+`team-a-client` has a `Dev Team A` role which gives it permissions to do anything on topics that start with 'a_', and only write to topics that start with 'x_'.\n+The topic named `my-topic` matches neither of those.\n+\n+Use CTRL-C to exit the CLI application, and let's try to write to topic `a_messages`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+```\n+\n+Although we can see some unrelated warnings, looking at the Kafka container log there is DEBUG level output saying 'Authorization GRANTED'.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+    kubectl logs my-cluster-kafka-0 -f\n+\n+### Consuming the Messages\n+\n+Let's now try to consume the messages we have produced.\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties\n+\n+This gives us an error like: `Not authorized to access group: console-consumer-55841`.\n+\n+The reason is that we have to override the default consumer group name - `Dev Team A` only has access to consumer groups that have names starting with 'a_'.\n+Let's set custom consumer group name that starts with 'a_'\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+\n+We should now receive all the messages for the 'a_messages' topic, after which the client blocks waiting for more messages.\n+\n+Use CTRL-C to exit.\n+\n+\n+### Using Kafka's CLI Administration Tools\n+\n+Let's now list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+We get one topic listed: `a_messages`.\n+\n+Let's try and list the consumer groups:\n+\n+    bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+\n+Similarly to listing topics, we get one consumer group listed: `a_consumer_group_1`.\n+\n+There are more CLI administrative tools. For example we can try to get the default cluster configuration:\n+\n+    bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+      --entity-type brokers --describe --entity-default\n+\n+But that will fail with `Cluster authorization failed.` error, because this operation requires cluster level permissions which `team-a-client` does not have.\n+\n+\n+### Client with Different Permissions\n+\n+Let's prepare a configuration for `team-b-client`:\n+\n+```\n+cat > /tmp/team-b-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-b-client\" \\\n+  oauth.client.secret=\"team-b-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+If we look at `team-b-client` client configuration in Keycloak, under `Service Account Roles` we can see that it has `Dev Team B` realm role assigned.\n+Looking in Keycloak Console at the `kafka` client's `Authorization` tab where `Permissions` are listed, we can see the permissions that start with 'Dev Team B ...'.\n+These match the users and service accounts that have the `Dev Team B` realm role assigned to them.\n+The `Dev Team B` users have full access to topics beginning with 'b_' on Kafka cluster `my-cluster` (which is the designated cluster name of the demo cluster we brought up), and read access on topics that start with 'x_'.\n+\n+Let's try produce some messages to topic `a_messages` as `team-b-client`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get `Not authorized to access topics: [a_messages]` error as we expected. Let's try to produce to topic `b_messages`:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic b_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+Message 2\n+Message 3\n+```\n+\n+This should work fine.\n+\n+What about producing to topic `x_messages`. `team-b-client` is only supposed to be able to read from such a topic.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+```\n+\n+We get a `Not authorized to access topics: [x_messages]` error as we expected.\n+Client `team-a-client`, on the other hand, should be able to write to such a topic:\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+Message 1\n+```\n+\n+However, we again receive `Not authorized to access topics: [x_messages]`. What's going on?\n+The reason for failure is that while `team-a-client` can write to `x_messages` topic, it does not have a permission to create a topic if it does not yet exist.\n+\n+We now need a power user that can create a topic with all the proper settings - like the right number of partitions and replicas.\n+\n+\n+### Power User Can Do Anything\n+\n+Let's create a configuration for user `bob` who has full ability to manage everything on Kafka cluster `my-cluster`.\n+\n+We'll need some helper scripts so we can authenticate to the `keycloak` instance.\n+\n+Download the following `oauth.sh` and `jwt.sh` tools to `/tmp` dir and make them executable:\n+\n+   curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/oauth.sh -s > /tmp/oauth.sh\n+   chmod +x /tmp/oauth.sh\n+\n+   curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/jwt.sh -s > /tmp/jwt.sh\n+   chmod +x /tmp/jwt.sh\n+\n+Now, `bob` will authenticate to Keycloak server with his username and password and get a refresh token.\n+\n+   export TOKEN_ENDPOINT=http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\n+   REFRESH_TOKEN=$(/tmp/oauth.sh -q bob)\n+\n+This will prompt you for a password. Type 'bob-password'.\n+\n+We can inspect the refresh token:\n+\n+   /tmp/jwt.sh $REFRESH_TOKEN\n+\n+By default this is a long-lived refresh token that does not expire.\n+\n+Now we will create the configuration file for `bob`:\n+\n+```\n+cat > /tmp/bob.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.refresh.token=\"$REFRESH_TOKEN\" \\\n+  oauth.client.id=\"kafka-cli\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+```\n+\n+Note that we use the `kafka-cli` public client for the `oauth.client.id` in the `sasl.jaas.config`.\n+Since that is a public client it does not require any secret.\n+We can use this because we authenticate with a token directly (in this case a refresh token is used to request an access token behind the scenes which is then sent to Kafka broker for authentication, and we already did the authentication for the refresh token).\n+\n+\n+Let's now try to create the `x_messages` topic:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/bob.properties \\\n+      --topic x_messages --create --replication-factor 1 --partitions 1\n+\n+The operation should succeed (you can ignore the warning about periods and underscores).\n+\n+We can list the topics:\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/bob.properties --list\n+\n+If we try the same as `team-a-client` or `team-b-client` we will get different responses.\n+\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+    bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-b-client.properties --list\n+\n+Roles `Dev Team A`, and `Dev Team B` both have `Describe` permission on topics that start with 'x_', but they cannot see the other team's topics as they do not have `Describe` permissions on them.\n+\n+We can now again try to produce to the topic as `team-a-client`.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+Message 1\n+Message 2\n+Message 3\n+```\n+\n+This works.\n+\n+If we try the same as `team-b-client` it should fail.\n+\n+```\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 4\n+Message 5\n+```\n+\n+We get an error - `Not authorized to access topics: [x_messages]`.\n+\n+But `team-b-client` should be able to consume messages from the `x_messages` topic:\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+      --from-beginning --consumer.config /tmp/team-b-client.properties --group x_consumer_group_b\n+\n+Whereas `team-a-client` does not have permission to read, even though they can write:\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group x_consumer_group_a\n+\n+We get a `Not authorized to access group: x_consumer_group_a` error.\n+\n+What if we try to use a consumer group name that starts with 'a_'?\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+      --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_a\n+\n+We now get a different error: `Not authorized to access topics: [x_messages]`\n+\n+It just won't work - `Dev Team A` has no `Read` access on topics that start with 'x_'.\n+\n+User `bob` should have no problem reading from or writing to any topic:\n+\n+    bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+      --from-beginning --consumer.config /tmp/bob.properties", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230db92e0f4d880e8d667eef9353cc2ceaa999f8"}, "originalPosition": 481}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjgzMDQ1OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNTowOTozMFrOH53vDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNTowOTozMFrOH53vDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ0NDA0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            By default this is a long-lived refresh token that does not expire.\n          \n          \n            \n            By default this is an offline token which is a long-lived refresh token that does not expire.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530444044", "createdAt": "2020-11-25T15:09:30Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,465 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+The default view usually displays the *Master* realm.\n+For this example we are interested in the `kafka-authz` realm, which you can select in the upper left corner.\n+\n+Initially the *Realm Settings* section is selected, but you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources as explained in xref:keycloak_authorization_services_model_for_managing_permissions(one of the previous chapters).\n+\n+Under *Authorization* / *Permissions* of `kafka` client you can see already granted permissions that make use of *Resources* and *Policies* defined under the other tabs:\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+`Dev Team A can write to topics that start with x_ on any cluster` combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team A`.\n+\n+`Dev Team B can read from topics that start with x_ on any cluster` combines `Topic:x_*`, and `Group:x_*` resources, scopes `Describe` and `Read`, and `Dev Team B` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team B`. Matching users and clients have the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with `x_`.\n+\n+== Targeting permissions using group or role policies\n+\n+In Keycloak, confidential clients with service accounts enabled can authenticate to the server in their own name using a client ID and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use group policies, and should instead use role policies.\n+Conversely, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the group policies, rather than the role policies.\n+That is what is used for permissions that start with `ClusterManager`.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case, the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+From menu:Clients[kafka>Authorization>Settings] make sure that *Decision Strategy* is set to *Affirmative*, and NOT to *Unanimous*.\n+Navigate in Keycloak to check that the expected resources, authorization claims, policies and permissions are defined.\n+\n+With the configuration in place, we can check access to Kafka by using a producer and consumer to create topics using different user and service accounts.\n+\n+First, a new interactive pod container is run using a Strimzi Kafka image to connect to a running Kafka broker.\n+\n+[source,shell]\n+----\n+kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+----\n+\n+NOTE: If `kubectl` times out waiting on the image download, subsequent attempts may result in an _AlreadyExists_ error. \n+\n+You can attach to the existing pod by running:\n+\n+[source,shell]\n+----\n+kubectl attach -ti kafka-cli\n+----\n+\n+To produce messages as client `team-a-client`, we prepare a Kafka client configuration file with authentication parameters.\n+\n+[source,shell]\n+----\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+----\n+\n+The roles assigned to a client, such as the `Dev Team A` realm role assigned to the `team-a-client` service account, are presented in Keycloak on the  *Service Account Roles* tab from *Clients*.\n+\n+We can use this configuration from the Kafka CLI to produce and consume messages, and perform other administration tasks.\n+\n+\n+.Producing messages with authorized access\n+\n+The `team-a-client` configuration is used to produce messages to topic `my-topic`:\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+----\n+\n+A `Not authorized to access topics: [my-topic]` error is returned when trying to push the first message.\n+\n+`team-a-client` has a `Dev Team A` role that gives it permission to perform any supported actions on topics that start with `a_`, but can only write to topics that start with `x_`.\n+The topic named `my-topic` matches neither of those rules.\n+\n+The `team-a-client` configuration is then used to produce messages to topic `a_messages`.\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+----\n+\n+The messages are pushed out successfully, and in the Kafka container log there is DEBUG level output saying `Authorization GRANTED`.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+[source,shell]\n+kubectl logs my-cluster-kafka-0 -f\n+\n+.Consuming messages with authorized access\n+\n+The `team-a-client` configuration is used to consume messages from topic `a_messages`:\n+\n+[source,shell,subs=+quotes]\n+----\n+bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --from-beginning --consumer.config /tmp/team-a-client.properties\n+----\n+\n+An error is returned as the `Dev Team A` role for `team-a-client` only has access to consumer groups that have names starting with `a_`.\n+The `team-a-client` configuration is then used to consume messages when specifying a custom consumer group with a name that starts with `a_`:\n+\n+[source,shell,subs=+quotes]\n+----\n+bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+----\n+\n+This time the consumer receives all the messages from the `a_messages` topic.\n+\n+\n+.Administering Kafka with authorized access\n+\n+The `team-a-client` configuration is used in administrative operations.\n+\n+Listing topics returns the `a_messages` topic.\n+\n+[source,shell]\n+----\n+bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+----    \n+\n+Listing consumer groups returns the `a_consumer_group_1` consumer group.\n+\n+[source,shell]\n+----\n+bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+----\n+\n+Fetching the default cluster configuration fails cluster authorization, because the operation requires cluster level permissions that `team-a-client` does not have.\n+\n+[source,shell]\n+----\n+bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+  --entity-type brokers --describe --entity-default\n+----\n+\n+\n+. Using clients with different permissions\n+\n+As with `team-a-client`, we prepare a Kafka client configuration file with authentication parameters for `team-b-client`.\n+\n+[source,shell]\n+----\n+cat > /tmp/team-b-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-b-client\" \\\n+  oauth.client.secret=\"team-b-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+----\n+\n+The `team-b-client` client configuration includes a `Dev Team B` realm role and permissions that start with `Dev Team B ...`. These match the users and service accounts that have the `Dev Team B` realm role assigned to them.\n+The `Dev Team B` users have full access to topics beginning with `b_` on the Kafka cluster `my-cluster`, the name of the designated cluster, and read access on topics that start with `x_`.\n+\n+The `team-b-client` configuration is used to produce messages to topic `a_messages`:\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+----\n+\n+A `Not authorized to access topics: [a_messages]` error is returned when trying to push the first message, as expected, so we switch to topic `b_messages`:\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic b_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+Message 2\n+Message 3\n+----\n+\n+Producing messages to topic `b_messages` is authorized and successful.\n+\n+We switch again, but this time to topic that `team-b-client` can only read from, topic `x_messages`:\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+----\n+\n+A `Not authorized to access topics: [x_messages]` error is returned, as expected, so we switch to `team-a-client`:\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+Message 1\n+----\n+\n+A `Not authorized to access topics: [x_messages]` error is returned again. Though `team-a-client` can write to the `x_messages` topic, it it does not have a permission to create a topic if it does not yet exist. \n+\n+Before `team-a-client` can write to the `x_messages` topic, a admin _power user_ must create it with the correct configuration, such as the number of partitions and replicas.\n+\n+\n+.Managing Kafka with an authorized admin\n+\n+Admin user `bob` is created with full access to manage everything on the Kafka cluster `my-cluster`.\n+\n+Helper scripts are used to authenticate to the `keycloak` instance.\n+\n+The following scripts are downloaded to `/tmp` dir and made executable:\n+\n+[source,shell]\n+----\n+curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/oauth.sh -s > /tmp/oauth.sh\n+   chmod +x /tmp/oauth.sh\n+\n+curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/jwt.sh -s > /tmp/jwt.sh\n+   chmod +x /tmp/jwt.sh\n+----\n+\n+User `bob` authenticates to the Keycloak server with his username and password to get a refresh token.\n+\n+[source,shell]\n+----\n+export TOKEN_ENDPOINT=http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\n+REFRESH_TOKEN=$(/tmp/oauth.sh -q bob)\n+----\n+\n+When prompted for a password, 'bob-password' is used.\n+\n+We can inspect the refresh token:\n+\n+   /tmp/jwt.sh $REFRESH_TOKEN\n+\n+By default this is a long-lived refresh token that does not expire.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ae285eb9cd521a44fe7317e917b16c7018706b"}, "originalPosition": 370}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjgzOTUxOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNToxMToyMlrOH530pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNToxMToyMlrOH530pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ0NTQ3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The refresh token is a long-lived token that does not expire:\n          \n          \n            \n            The refresh token in this case is an offline token which is a long-lived refresh token that does not expire:", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530445479", "createdAt": "2020-11-25T15:11:22Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,465 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+[source,yaml]\n+----\n+export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+----\n+\n+.Deploy the Postgres database for Keycloak\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+----\n+\n+.Deploy the Keycloak server\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+----\n+\n+If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:\n+\n+[source,yaml]\n+----\n+curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+----\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+[source,yaml]\n+----\n+kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+----\n+\n+\n+== Using the Keycloak Admin Console to configure authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+[source,yaml]\n+----\n+kubectl port-forward keycloak 8080\n+----\n+\n+Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.\n+\n+The default view usually displays the *Master* realm.\n+For this example we are interested in the `kafka-authz` realm, which you can select in the upper left corner.\n+\n+Initially the *Realm Settings* section is selected, but you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.\n+\n+Under *Groups*, you can view groups to mark users as having some permissions.\n+Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.\n+\n+Under *Users*, when viewing all users you will see two users defined: `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.\n+Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.\n+\n+Under *Clients*, you can view the additional client configurations: `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.\n+This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.\n+\n+\n+== Defining Authorization Services for access control\n+\n+Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources as explained in xref:keycloak_authorization_services_model_for_managing_permissions(one of the previous chapters).\n+\n+Under *Authorization* / *Permissions* of `kafka` client you can see already granted permissions that make use of *Resources* and *Policies* defined under the other tabs:\n+----\n+Dev Team A can write to topics that start with x_ on any cluster\n+Dev Team B can read from topics that start with x_ on any cluster\n+Dev Team B can update consumer group offsets that start with x_ on any cluster\n+ClusterManager of my-cluster Group has full access to cluster config on my-cluster\n+ClusterManager of my-cluster Group has full access to consumer groups on my-cluster\n+ClusterManager of my-cluster Group has full access to topics on my-cluster\n+----\n+\n+`Dev Team A can write to topics that start with x_ on any cluster` combines a resource called `Topic:x_*`, scopes `Describe` and `Write`, and `Dev Team A` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team A`.\n+\n+`Dev Team B can read from topics that start with x_ on any cluster` combines `Topic:x_*`, and `Group:x_*` resources, scopes `Describe` and `Read`, and `Dev Team B` policy. The `Dev Team A` policy matches all users that have a realm role called `Dev Team B`. Matching users and clients have the ability to read from topics, and update the consumed offsets for topics and consumer groups that have names starting with `x_`.\n+\n+== Targeting permissions using group or role policies\n+\n+In Keycloak, confidential clients with service accounts enabled can authenticate to the server in their own name using a client ID and a secret.\n+This is convenient for microservices which typically act in their own name, and not as agents of a particular user (like a web site would, for example).\n+Service accounts can have roles assigned like regular users.\n+They cannot, however, have groups assigned.\n+As a consequence, if you want to target permissions to microservices using service accounts, you cannot use group policies, and should instead use role policies.\n+Conversely, if you want to limit certain permissions only to regular user accounts where authentication with username and password is required, you can achieve that as a side effect of using the group policies, rather than the role policies.\n+That is what is used for permissions that start with `ClusterManager`.\n+Performing cluster management is usually done interactively - in person - using CLI tools.\n+It makes sense to require the user to log in, before using the resulting access token to authenticate to the Kafka Broker.\n+In this case, the access token represents the specific user, rather than the client application.\n+\n+\n+== Authorization in Action Using CLI Clients\n+\n+A note of caution - this example uses the latest version of Keycloak, and relies on bugfixes of issues in some older versions.\n+Let's make sure the Authorization rules have been properly imported when the Keycloak was started.\n+\n+From menu:Clients[kafka>Authorization>Settings] make sure that *Decision Strategy* is set to *Affirmative*, and NOT to *Unanimous*.\n+Navigate in Keycloak to check that the expected resources, authorization claims, policies and permissions are defined.\n+\n+With the configuration in place, we can check access to Kafka by using a producer and consumer to create topics using different user and service accounts.\n+\n+First, a new interactive pod container is run using a Strimzi Kafka image to connect to a running Kafka broker.\n+\n+[source,shell]\n+----\n+kubectl run -ti --rm --restart=Never --image=quay.io/strimzi/kafka:latest-kafka-2.6.0 kafka-cli -- /bin/sh\n+----\n+\n+NOTE: If `kubectl` times out waiting on the image download, subsequent attempts may result in an _AlreadyExists_ error. \n+\n+You can attach to the existing pod by running:\n+\n+[source,shell]\n+----\n+kubectl attach -ti kafka-cli\n+----\n+\n+To produce messages as client `team-a-client`, we prepare a Kafka client configuration file with authentication parameters.\n+\n+[source,shell]\n+----\n+cat > /tmp/team-a-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-a-client\" \\\n+  oauth.client.secret=\"team-a-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+----\n+\n+The roles assigned to a client, such as the `Dev Team A` realm role assigned to the `team-a-client` service account, are presented in Keycloak on the  *Service Account Roles* tab from *Clients*.\n+\n+We can use this configuration from the Kafka CLI to produce and consume messages, and perform other administration tasks.\n+\n+\n+.Producing messages with authorized access\n+\n+The `team-a-client` configuration is used to produce messages to topic `my-topic`:\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic \\\n+  --producer.config=/tmp/team-a-client.properties\n+First message\n+----\n+\n+A `Not authorized to access topics: [my-topic]` error is returned when trying to push the first message.\n+\n+`team-a-client` has a `Dev Team A` role that gives it permission to perform any supported actions on topics that start with `a_`, but can only write to topics that start with `x_`.\n+The topic named `my-topic` matches neither of those rules.\n+\n+The `team-a-client` configuration is then used to produce messages to topic `a_messages`.\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+First message\n+Second message\n+----\n+\n+The messages are pushed out successfully, and in the Kafka container log there is DEBUG level output saying `Authorization GRANTED`.\n+\n+Use CTRL-C to exit the CLI application.\n+\n+You can see the Kafka container log by running:\n+\n+[source,shell]\n+kubectl logs my-cluster-kafka-0 -f\n+\n+.Consuming messages with authorized access\n+\n+The `team-a-client` configuration is used to consume messages from topic `a_messages`:\n+\n+[source,shell,subs=+quotes]\n+----\n+bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --from-beginning --consumer.config /tmp/team-a-client.properties\n+----\n+\n+An error is returned as the `Dev Team A` role for `team-a-client` only has access to consumer groups that have names starting with `a_`.\n+The `team-a-client` configuration is then used to consume messages when specifying a custom consumer group with a name that starts with `a_`:\n+\n+[source,shell,subs=+quotes]\n+----\n+bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --from-beginning --consumer.config /tmp/team-a-client.properties --group a_consumer_group_1\n+----\n+\n+This time the consumer receives all the messages from the `a_messages` topic.\n+\n+\n+.Administering Kafka with authorized access\n+\n+The `team-a-client` configuration is used in administrative operations.\n+\n+Listing topics returns the `a_messages` topic.\n+\n+[source,shell]\n+----\n+bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+----    \n+\n+Listing consumer groups returns the `a_consumer_group_1` consumer group.\n+\n+[source,shell]\n+----\n+bin/kafka-consumer-groups.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties --list\n+----\n+\n+Fetching the default cluster configuration fails cluster authorization, because the operation requires cluster level permissions that `team-a-client` does not have.\n+\n+[source,shell]\n+----\n+bin/kafka-configs.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --command-config /tmp/team-a-client.properties \\\n+  --entity-type brokers --describe --entity-default\n+----\n+\n+\n+. Using clients with different permissions\n+\n+As with `team-a-client`, we prepare a Kafka client configuration file with authentication parameters for `team-b-client`.\n+\n+[source,shell]\n+----\n+cat > /tmp/team-b-client.properties << EOF\n+security.protocol=SASL_PLAINTEXT\n+sasl.mechanism=OAUTHBEARER\n+sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n+  oauth.client.id=\"team-b-client\" \\\n+  oauth.client.secret=\"team-b-client-secret\" \\\n+  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n+sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n+EOF\n+----\n+\n+The `team-b-client` client configuration includes a `Dev Team B` realm role and permissions that start with `Dev Team B ...`. These match the users and service accounts that have the `Dev Team B` realm role assigned to them.\n+The `Dev Team B` users have full access to topics beginning with `b_` on the Kafka cluster `my-cluster`, the name of the designated cluster, and read access on topics that start with `x_`.\n+\n+The `team-b-client` configuration is used to produce messages to topic `a_messages`:\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic a_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+----\n+\n+A `Not authorized to access topics: [a_messages]` error is returned when trying to push the first message, as expected, so we switch to topic `b_messages`:\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic b_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+Message 2\n+Message 3\n+----\n+\n+Producing messages to topic `b_messages` is authorized and successful.\n+\n+We switch again, but this time to topic that `team-b-client` can only read from, topic `x_messages`:\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-b-client.properties\n+Message 1\n+----\n+\n+A `Not authorized to access topics: [x_messages]` error is returned, as expected, so we switch to `team-a-client`:\n+\n+[source,shell]\n+----\n+bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic x_messages \\\n+  --producer.config /tmp/team-a-client.properties\n+Message 1\n+----\n+\n+A `Not authorized to access topics: [x_messages]` error is returned again. Though `team-a-client` can write to the `x_messages` topic, it it does not have a permission to create a topic if it does not yet exist. \n+\n+Before `team-a-client` can write to the `x_messages` topic, a admin _power user_ must create it with the correct configuration, such as the number of partitions and replicas.\n+\n+\n+.Managing Kafka with an authorized admin\n+\n+Admin user `bob` is created with full access to manage everything on the Kafka cluster `my-cluster`.\n+\n+Helper scripts are used to authenticate to the `keycloak` instance.\n+\n+The following scripts are downloaded to `/tmp` dir and made executable:\n+\n+[source,shell]\n+----\n+curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/oauth.sh -s > /tmp/oauth.sh\n+   chmod +x /tmp/oauth.sh\n+\n+curl https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master/examples/docker/kafka-oauth-strimzi/kafka/jwt.sh -s > /tmp/jwt.sh\n+   chmod +x /tmp/jwt.sh\n+----\n+\n+User `bob` authenticates to the Keycloak server with his username and password to get a refresh token.\n+\n+[source,shell]\n+----\n+export TOKEN_ENDPOINT=http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\n+REFRESH_TOKEN=$(/tmp/oauth.sh -q bob)\n+----\n+\n+When prompted for a password, 'bob-password' is used.\n+\n+The refresh token is a long-lived token that does not expire:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8acb0f28c4f03ba98dd57bc1db348d8f1afd2c5c"}, "originalPosition": 366}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzQ0ODcwOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODozMjoyMFrOH61JUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODozMjoyMFrOH61JUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1MDE5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n          \n          \n            \n            When using `keycloak` authorization, a custom authorizer is configured on the Kafka broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531450193", "createdAt": "2020-11-27T08:32:20Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,462 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16582f6c776ff4ccd240537a7873a8aae60cbda8"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzQ0OTk3OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODozMjo0OFrOH61KFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODozMjo0OFrOH61KFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1MDM5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n          \n          \n            \n            Grants are cached and enforced locally on the Kafka broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531450391", "createdAt": "2020-11-27T08:32:48Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,462 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16582f6c776ff4ccd240537a7873a8aae60cbda8"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzQ1MjIyOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODozMzozN1rOH61LfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODozMzozN1rOH61LfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1MDc0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            == Token Based Authorization with Keycloak Authorization Services\n          \n          \n            \n            == Token-based authorization with Keycloak Authorization Services", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531450749", "createdAt": "2020-11-27T08:33:37Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,462 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16582f6c776ff4ccd240537a7873a8aae60cbda8"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzQ1MzMzOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODozMzo1OFrOH61MKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODozMzo1OFrOH61MKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1MDkyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            == Starting Up the Pods\n          \n          \n            \n            == Starting the pods", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531450922", "createdAt": "2020-11-27T08:33:58Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,462 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16582f6c776ff4ccd240537a7873a8aae60cbda8"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzQ1NDMwOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODozNDoxNVrOH61MtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODozNDoxNVrOH61MtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1MTA2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For this example we're using the kubernetes deployment scripts available at https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n          \n          \n            \n            For this example, we use the kubernetes deployment scripts available at https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes:", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r531451060", "createdAt": "2020-11-27T08:34:15Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,462 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Example authorization rules configuration using Authorization Services\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+== Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using `oauth` authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this, Strimzi Kafka Operator comes with `keycloak` authorization which uses Keycloak Authorization Services to centrally manage permissions.\n+\n+When using `keycloak` authorization a custom authorizer is configured on the Kafka Broker that uses Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.\n+Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.\n+\n+\n+== Starting Up the Pods\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16582f6c776ff4ccd240537a7873a8aae60cbda8"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDY0ODE4OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwODoyNDoxMlrOH4C_Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwODozOTo1OFrOH4De6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUzMTIzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            = Manage policies and permissions in Keycloak Authorization Services\n          \n          \n            \n            = Managing policies and permissions in Keycloak Authorization Services", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528531231", "createdAt": "2020-11-23T08:24:12Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUzOTM2OA==", "bodyText": "Could we introduce this chapter with a line to say what we'll be looking at and why? \"To use Keycloak with Strimzi, the Keycloak Authorization Services model must capture all possible Kafka permissions for resources. This section describes how the Kafka authorization model for resources maps to the Keycloak Authorization Services model for granting permissions.\"  Or similar.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528539368", "createdAt": "2020-11-23T08:39:58Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUzMTIzMQ=="}, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDcwNDIyOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwODo0MDoxOVrOH4Dfow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwODo0MDoxOVrOH4Dfow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUzOTU1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            == Kafka Authorization Model\n          \n          \n            \n            == Kafka authorization model for resources", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528539555", "createdAt": "2020-11-23T08:40:19Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDg5OTk2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOTozMzo0NVrOH4FSsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOTozMzo0NVrOH4FSsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU2OTAwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n          \n          \n            \n            The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and the permissions available for each type.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528569008", "createdAt": "2020-11-23T09:33:45Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDkwMzY0OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOTozNDo0M1rOH4FU6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOTo0ODo0OFrOH4F2oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU2OTU3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n          \n          \n            \n            When an action is performed by a Kafka client on a broker, the broker uses a configured authorizer to check permissions, depending on the action performed and the resource type.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528569579", "createdAt": "2020-11-23T09:34:43Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU3ODIwOA==", "bodyText": "I think I would make this the first sentence. And then the next sentence introduces what we will read next...\nWhen an action is performed by a Kafka client on a broker, the broker uses a configured authorizer to check permissions, depending on the action performed and the resource type. The Kafka authorization model defines resource types, and permissions available for each type.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528578208", "createdAt": "2020-11-23T09:48:48Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU2OTU3OQ=="}, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDk3MjMwOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOTo1MTo0MlrOH4F91w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDoyMjowNVrOH4HGqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU4MDA1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            And these are the different permissions for each resource type:\n          \n          \n            \n            Each resource type has different permissions:", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528580055", "createdAt": "2020-11-23T09:51:42Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU4NTA1NA==", "bodyText": "Are these the permissions we need to capture in Keycloak Authorization Services? If so, maybe we should say that: Each resource type has different permissions. The permissions listed here for each resource type, based on supported operations, must be captured in the Keycloak Authorization Services Model.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528585054", "createdAt": "2020-11-23T09:59:27Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU4MDA1NQ=="}, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU5ODY5OQ==", "bodyText": "How much are we likely to have to update these lists? Would it be accurate to say something like make sure you capture permissions for all the supported operations of each resource?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528598699", "createdAt": "2020-11-23T10:22:05Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU4MDA1NQ=="}, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTEwNDc5OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDoyNToyMFrOH4HOLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDoyNToyMFrOH4HOLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYwMDYyMg==", "bodyText": "I guess we could have all these in the config/code format Topic.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528600622", "createdAt": "2020-11-23T10:25:20Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTEwNjY1OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDoyNTo0N1rOH4HPVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzo1MjowNVrOH4Y7JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYwMDkxOQ==", "bodyText": "additional space", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528600919", "createdAt": "2020-11-23T10:25:47Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc3OTYyNQ==", "bodyText": "WDYM? A space too much and should be removed, or another space needs to be added?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528779625", "createdAt": "2020-11-23T15:19:45Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYwMDkxOQ=="}, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg5MDY2MQ==", "bodyText": "Removed one empty line.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528890661", "createdAt": "2020-11-23T17:52:05Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYwMDkxOQ=="}, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTExMjYyOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDoyNzoyNlrOH4HS_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDoyNzoyNlrOH4HS_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYwMTg1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n          \n          \n            \n            Kafka has five resource types for controlling access: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528601852", "createdAt": "2020-11-23T10:27:26Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTEzNDg4OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDozMjo1N1rOH4HgPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDozMjo1N1rOH4HgPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYwNTI0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n          \n          \n            \n            Keycloak Authorization Services use four concepts to define and grant permissions: _resources_, _authorization scopes_, _policies_, and _permissions_.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528605246", "createdAt": "2020-11-23T10:32:57Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTE4NjcwOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDo0Njo0MlrOH4H_bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDo0Njo0MlrOH4H_bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYxMzIzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n          \n          \n            \n            For example, a resource can be an individual topic, or it can be a set of all topics with names that start with the same prefix.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528613230", "createdAt": "2020-11-23T10:46:42Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTIwMjQ4OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDo1MToyMlrOH4IJNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDo1MjozMlrOH4ILsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYxNTczMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `Resources` are a set of resource definitions that are used to match permitted actions.\n          \n          \n            \n            Resources:: Resources are a set of resource definitions that are used to match permitted actions.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528615732", "createdAt": "2020-11-23T10:51:22Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYxNjM3MQ==", "bodyText": "For the four concepts, we could remove the code format (`) and format as description lists, so they look like like this:", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528616371", "createdAt": "2020-11-23T10:52:32Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYxNTczMg=="}, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTIzNzA3OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMTowMDozM1rOH4Iddw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMTowODoxMVrOH4ItrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyMDkxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n          \n          \n            \n            Authorization scopes: Authorization scopes is simply a set of all available actions on all the different resource types. When defining a new resource,  scopes are added from the set of all scopes.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528620919", "createdAt": "2020-11-23T11:00:33Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyNTA2OQ==", "bodyText": "Assuming descriptions list and no code formatting on concept terms^^", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528625069", "createdAt": "2020-11-23T11:08:11Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyMDkxOQ=="}, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTI1MTEyOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMTowNDozOVrOH4ImNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMTowNzoyMVrOH4Ir4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyMzE1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n          \n          \n            \n            Policies:: Policies are rules that use criteria to match a list of accounts. Policies can match service accounts based on client ID, or user accounts based on username, group, or roles.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528623156", "createdAt": "2020-11-23T11:04:39Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyNDYwOA==", "bodyText": "Assuming descriptions list and no code formatting on concept terms^^", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528624608", "createdAt": "2020-11-23T11:07:21Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyMzE1Ng=="}, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTI1NDk1OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMTowNTo0MVrOH4IofQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMTowNjowM1rOH4IpIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyMzc0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n          \n          \n            \n            Permissions:: Permissions grant a subset of authorization scopes on a specific resource definition to a set of users.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528623741", "createdAt": "2020-11-23T11:05:41Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyMzkwNQ==", "bodyText": "Assuming descriptions list and no code formatting on concept terms^^", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528623905", "createdAt": "2020-11-23T11:06:03Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyMzc0MQ=="}, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTI2Njg2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMTowOToxMlrOH4IvvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNDowMjo0OVrOH4Ovtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyNTU5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n          \n          \n            \n            The resource definition has a set of available authorization scopes associated with it, which represent a set of all actions that are permitted.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528625597", "createdAt": "2020-11-23T11:09:12Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcyMzg5NA==", "bodyText": "In fact the original meaning 'can be permitted' is different than the suggested meaning 'are permitted'. The idea here is not to give permissions by adding the to list, but to compose a list of available permissions for this particular resource instance. Then on the Policies tab the granting of permissions on this particualr resource instance will be limited to 'can be permitted' actions. Maybe:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n          \n          \n            \n            The resource definition has a set of available authorization scopes associated with it, which represent a set of all actions available on the particular resource.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528723894", "createdAt": "2020-11-23T14:02:49Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyNTU5Nw=="}, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTQ1NzM3OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMjowMzozMlrOH4KhLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMjowMzozMlrOH4KhLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY1NDYzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            == Keycloak Authorization Services Model\n          \n          \n            \n            == Keycloak Authorization Services model for granting permissions", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528654639", "createdAt": "2020-11-23T12:03:32Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTc0Mzk4OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMzoyMjowNlrOH4NMxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTo0NTo1NlrOH4TZCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5ODU2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n          \n          \n            \n            To be able to grant Kafka permissions to users or service accounts, you must define Authorization Services rules for the OAuth 2.0 client in Keycloak that represents the Kafka broker. Typically, the OAuth 2.0 client has `kafka` as its client ID.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528698564", "createdAt": "2020-11-23T13:22:06Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgwMDAxMQ==", "bodyText": "i wonder if we should introduce this section with what we're describing? To map the Kafka authorization model to Keycloak Authorization Services, you create an OAuth 2.0 client in Keycloak that represents the Kafka broker, then define and enable Authorization Services for the client through scopes, resources, policies and permissions. You can then use the client to grant permissions to users or service accounts. Typically, the OAuth 2.0 client has kafka as its client ID. This section describes some of the best practices for setting up your Authorization Services for the client. Or something.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528800011", "createdAt": "2020-11-23T15:45:56Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5ODU2NA=="}, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTk0OTY3OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNDoxMjoyOVrOH4PIxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNDoxMjoyOVrOH4PIxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODczMDMxMA==", "bodyText": "A slight improvement - originally missed roles for service account targetting, making it seem as if only user accounts can be targeted with roles.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Policies:: Policies are rules that use criteria to match a list of accounts. Policies can match service accounts based on client id, or user accounts based on username, group, or roles.\n          \n          \n            \n            Policies:: Policies are rules that use criteria to match a list of accounts. Policies can match service accounts based on client id or roles, or user accounts based on username, groups, or roles.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528730310", "createdAt": "2020-11-23T14:12:29Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Managing policies and permissions in Keycloak Authorization Services\n+\n+== Kafka authorization model for resources\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and the permissions available for each type.\n+When an action is performed by a Kafka client on a broker, the broker uses a configured authorizer to check permissions, depending on the action performed and the resource type.\n+\n+Kafka has five resource types for controlling access: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+Each resource type has different permissions:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services model for managing permissions\n+\n+Keycloak Authorization Services use four concepts to define and grant permissions: _resources_, _authorization scopes_, _policies_, and _permissions_.\n+\n+Resources:: Resources are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with the same prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+Authorization scopes: Authorization scopes is simply a set of all available actions on all the different resource types. When defining a new resource,  scopes are added from the set of all scopes.\n+\n+Policies:: Policies are rules that use criteria to match a list of accounts. Policies can match service accounts based on client id, or user accounts based on username, group, or roles.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6e0c02ec214b89fdfea5d5c7c268ca126c8cd8f"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjE5MTk3OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTowNDo1M1rOH4Rd_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTowNDo1M1rOH4Rd_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc2ODUwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This client needs to have `Authorization Enabled` option activated.\n          \n          \n            \n            The OAuth 2.0 client definition must have the _Authorization Enabled_ option activated.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528768508", "createdAt": "2020-11-23T15:04:53Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjE5NzYyOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTowNjowM1rOH4RhcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNToxODoxM1rOH4SFMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc2OTM5Mg==", "bodyText": "I guess to be consistent with the rest of the guide, we should use OAUTH 2.0 and upper case ID in this content.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528769392", "createdAt": "2020-11-23T15:06:03Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc3ODU0NA==", "bodyText": "True, we're using that all over the documentation so let's be consistent ...", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528778544", "createdAt": "2020-11-23T15:18:13Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc2OTM5Mg=="}, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjI2NjE2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNToyMDozOVrOH4SMKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNToyNDowNFrOH4SWDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc4MDMyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n          \n          \n            \n            When the Kafka client use the _SASL OAUTHBEARER_ mechanism, the Keycloak authorizer (`KeycloakRBACAuthorizer`) retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528780328", "createdAt": "2020-11-23T15:20:39Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc4Mjg2Mg==", "bodyText": "We use SASL OAUTHBEARER mechanism elsewhere in the guide. Should we use it here?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528782862", "createdAt": "2020-11-23T15:24:04Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc4MDMyOA=="}, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjI4NzYwOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNToyNToxMFrOH4SZdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNToyNToxMFrOH4SZdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc4MzczMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            .Authorization scopes\n          \n          \n            \n            .Introducing authorization scopes", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528783732", "createdAt": "2020-11-23T15:25:10Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjMxNzE1OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTozMToxNlrOH4SsNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTozMToxNlrOH4SsNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc4ODUzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n          \n          \n            \n            All permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client IDs they would each have a separate set of permissions even though they are part of the same realm.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528788532", "createdAt": "2020-11-23T15:31:16Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjM5ODQxOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTo0NzoxNlrOH4Tc6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTo0NzoxNlrOH4Tc6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgwMTAwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n          \n          \n            \n            Typically, an initial configuration involves uploading the authorization scopes to create a list of all the possible actions that can be performed on all the Kafka resource types.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528801001", "createdAt": "2020-11-23T15:47:16Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjQxMTY2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTo1MDoxMFrOH4TlHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTo1MDozOVrOH4Tm5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgwMzEwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.\n          \n          \n            \n            This step is performed only once, before defining any permissions. Alternatively, you can add authorization scopes manually.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528803103", "createdAt": "2020-11-23T15:50:10Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgwMzU1Ng==", "bodyText": "I think we could say the thing about typos anywhere we talk about config.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528803556", "createdAt": "2020-11-23T15:50:39Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgwMzEwMw=="}, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjQxNjA2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTo1MDo1OFrOH4Tnqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTo1MDo1OFrOH4Tnqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgwMzc1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `authorization scopes` should simply contain all the possible Kafka permissions regardless of the resource type:\n          \n          \n            \n            The authorization scopes should contain all the possible Kafka permissions regardless of the resource type:", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528803755", "createdAt": "2020-11-23T15:50:58Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.\n+\n+The `authorization scopes` should simply contain all the possible Kafka permissions regardless of the resource type:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjQyNTQ2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTo1Mjo1MlrOH4TtQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTo1Mjo1MlrOH4TtQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgwNTE4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `resources` use pattern names to be used with pattern matching against the targeted resources when performing the permission check.\n          \n          \n            \n            The resources use pattern names for pattern matching against the targeted resources when performing permission checks.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528805187", "createdAt": "2020-11-23T15:52:52Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.\n+\n+The `authorization scopes` should simply contain all the possible Kafka permissions regardless of the resource type:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* Alter\n+* DescribeConfig\n+* AlterConfig\n+* ClusterAction\n+* IdempotentWrite\n+\n+.Resources\n+\n+The `resources` use pattern names to be used with pattern matching against the targeted resources when performing the permission check.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjQzMjI0OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTo1NDoxNlrOH4TxYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTo1NDoxNlrOH4TxYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgwNjI0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A few examples:\n          \n          \n            \n            .Example patterns for resources", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528806242", "createdAt": "2020-11-23T15:54:16Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.\n+\n+The `authorization scopes` should simply contain all the possible Kafka permissions regardless of the resource type:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* Alter\n+* DescribeConfig\n+* AlterConfig\n+* ClusterAction\n+* IdempotentWrite\n+\n+.Resources\n+\n+The `resources` use pattern names to be used with pattern matching against the targeted resources when performing the permission check.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+A few examples:\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjQzNjY1OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTo1NTowOFrOH4Tz-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzozMzowOFrOH4YNXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgwNjkwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In addition, the general pattern can be prefixed by another one of the format `kafka-cluster:CLUSTER_NAME`, followed by comma, where the cluster name refers to the `metadata.name` in the Kafka CR.\n          \n          \n            \n            In addition, the general pattern can be prefixed by `kafka-cluster:CLUSTER_NAME` followed by a comma, where the cluster name refers to the `metadata.name` in the Kafka custom resource.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528806907", "createdAt": "2020-11-23T15:55:08Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.\n+\n+The `authorization scopes` should simply contain all the possible Kafka permissions regardless of the resource type:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* Alter\n+* DescribeConfig\n+* AlterConfig\n+* ClusterAction\n+* IdempotentWrite\n+\n+.Resources\n+\n+The `resources` use pattern names to be used with pattern matching against the targeted resources when performing the permission check.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+A few examples:\n+\n+    Topic:my-topic\n+    Topic:orders-*\n+    Group:orders-*\n+    Cluster:*\n+\n+In addition, the general pattern can be prefixed by another one of the format `kafka-cluster:CLUSTER_NAME`, followed by comma, where the cluster name refers to the `metadata.name` in the Kafka CR.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgwODM5Nw==", "bodyText": "In addition or alternatively?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528808397", "createdAt": "2020-11-23T15:57:06Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.\n+\n+The `authorization scopes` should simply contain all the possible Kafka permissions regardless of the resource type:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* Alter\n+* DescribeConfig\n+* AlterConfig\n+* ClusterAction\n+* IdempotentWrite\n+\n+.Resources\n+\n+The `resources` use pattern names to be used with pattern matching against the targeted resources when performing the permission check.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+A few examples:\n+\n+    Topic:my-topic\n+    Topic:orders-*\n+    Group:orders-*\n+    Cluster:*\n+\n+In addition, the general pattern can be prefixed by another one of the format `kafka-cluster:CLUSTER_NAME`, followed by comma, where the cluster name refers to the `metadata.name` in the Kafka CR.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgwNjkwNw=="}, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg3ODk0MA==", "bodyText": "Is there semantic difference or just a matter of how it sounds?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528878940", "createdAt": "2020-11-23T17:33:08Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.\n+\n+The `authorization scopes` should simply contain all the possible Kafka permissions regardless of the resource type:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* Alter\n+* DescribeConfig\n+* AlterConfig\n+* ClusterAction\n+* IdempotentWrite\n+\n+.Resources\n+\n+The `resources` use pattern names to be used with pattern matching against the targeted resources when performing the permission check.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+A few examples:\n+\n+    Topic:my-topic\n+    Topic:orders-*\n+    Group:orders-*\n+    Cluster:*\n+\n+In addition, the general pattern can be prefixed by another one of the format `kafka-cluster:CLUSTER_NAME`, followed by comma, where the cluster name refers to the `metadata.name` in the Kafka CR.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgwNjkwNw=="}, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjQ0OTUxOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTo1Nzo0NFrOH4T76Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTo1Nzo0NFrOH4T76Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgwODkzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For example:\n          \n          \n            \n            .Example patterns for resources with cluster prefix", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528808937", "createdAt": "2020-11-23T15:57:44Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.\n+\n+The `authorization scopes` should simply contain all the possible Kafka permissions regardless of the resource type:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* Alter\n+* DescribeConfig\n+* AlterConfig\n+* ClusterAction\n+* IdempotentWrite\n+\n+.Resources\n+\n+The `resources` use pattern names to be used with pattern matching against the targeted resources when performing the permission check.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+A few examples:\n+\n+    Topic:my-topic\n+    Topic:orders-*\n+    Group:orders-*\n+    Cluster:*\n+\n+In addition, the general pattern can be prefixed by another one of the format `kafka-cluster:CLUSTER_NAME`, followed by comma, where the cluster name refers to the `metadata.name` in the Kafka CR.\n+\n+For example:\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjQ2NjUzOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTo1OTo0OFrOH4UHKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTo1OTo0OFrOH4UHKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgxMTgxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When the resource is defined, a list of possible authorization scopes relevant to the resource should be added to the list of scopes.\n          \n          \n            \n            When defining a resource, you can associate a list of possible authorization scopes relevant to the resource.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528811818", "createdAt": "2020-11-23T15:59:48Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.\n+\n+The `authorization scopes` should simply contain all the possible Kafka permissions regardless of the resource type:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* Alter\n+* DescribeConfig\n+* AlterConfig\n+* ClusterAction\n+* IdempotentWrite\n+\n+.Resources\n+\n+The `resources` use pattern names to be used with pattern matching against the targeted resources when performing the permission check.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+A few examples:\n+\n+    Topic:my-topic\n+    Topic:orders-*\n+    Group:orders-*\n+    Cluster:*\n+\n+In addition, the general pattern can be prefixed by another one of the format `kafka-cluster:CLUSTER_NAME`, followed by comma, where the cluster name refers to the `metadata.name` in the Kafka CR.\n+\n+For example:\n+\n+    kafka-cluster:my-cluster,Topic:*\n+    kafka-cluster:*,Group:b_*\n+\n+When the `kafka-cluster` prefix is not present it is assumed to be `kafka-cluster:*`.\n+\n+When the resource is defined, a list of possible authorization scopes relevant to the resource should be added to the list of scopes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjUwMzk2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjowNToxNFrOH4Uf0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjowNToxNFrOH4Uf0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgxODEzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            While you may add any `authorization scope` to any `resource`, only the scopes supported by the resource type will ever matter.\n          \n          \n            \n            While you may add any authorization scope to any resource, only the scopes supported by the resource type are considered for access control.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528818131", "createdAt": "2020-11-23T16:05:14Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.\n+\n+The `authorization scopes` should simply contain all the possible Kafka permissions regardless of the resource type:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* Alter\n+* DescribeConfig\n+* AlterConfig\n+* ClusterAction\n+* IdempotentWrite\n+\n+.Resources\n+\n+The `resources` use pattern names to be used with pattern matching against the targeted resources when performing the permission check.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+A few examples:\n+\n+    Topic:my-topic\n+    Topic:orders-*\n+    Group:orders-*\n+    Cluster:*\n+\n+In addition, the general pattern can be prefixed by another one of the format `kafka-cluster:CLUSTER_NAME`, followed by comma, where the cluster name refers to the `metadata.name` in the Kafka CR.\n+\n+For example:\n+\n+    kafka-cluster:my-cluster,Topic:*\n+    kafka-cluster:*,Group:b_*\n+\n+When the `kafka-cluster` prefix is not present it is assumed to be `kafka-cluster:*`.\n+\n+When the resource is defined, a list of possible authorization scopes relevant to the resource should be added to the list of scopes.\n+Set whatever actions make sense for the targeted resource type.\n+\n+While you may add any `authorization scope` to any `resource`, only the scopes supported by the resource type will ever matter.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjUxNTQzOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjowNzo0MlrOH4Umvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjowNzo0MlrOH4Umvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgxOTkwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `policies` are used to target permissions to one or more accounts.\n          \n          \n            \n            Policies are used to target permissions to one or more accounts.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528819902", "createdAt": "2020-11-23T16:07:42Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.\n+\n+The `authorization scopes` should simply contain all the possible Kafka permissions regardless of the resource type:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* Alter\n+* DescribeConfig\n+* AlterConfig\n+* ClusterAction\n+* IdempotentWrite\n+\n+.Resources\n+\n+The `resources` use pattern names to be used with pattern matching against the targeted resources when performing the permission check.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+A few examples:\n+\n+    Topic:my-topic\n+    Topic:orders-*\n+    Group:orders-*\n+    Cluster:*\n+\n+In addition, the general pattern can be prefixed by another one of the format `kafka-cluster:CLUSTER_NAME`, followed by comma, where the cluster name refers to the `metadata.name` in the Kafka CR.\n+\n+For example:\n+\n+    kafka-cluster:my-cluster,Topic:*\n+    kafka-cluster:*,Group:b_*\n+\n+When the `kafka-cluster` prefix is not present it is assumed to be `kafka-cluster:*`.\n+\n+When the resource is defined, a list of possible authorization scopes relevant to the resource should be added to the list of scopes.\n+Set whatever actions make sense for the targeted resource type.\n+\n+While you may add any `authorization scope` to any `resource`, only the scopes supported by the resource type will ever matter.\n+\n+.Policies\n+\n+The `policies` are used to target permissions to one or more accounts.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjUyMjQ2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjowOToyNVrOH4UrFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjowOToyNVrOH4UrFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgyMTAxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The targeting can refer to specific user or service accounts, it can refer to the realm roles or client roles, it can refer to user groups, and it can even use a JS rule and match client's IP address for example.\n          \n          \n            \n            Targeting can refer to:\n          \n          \n            \n            * Specific user or service accounts\n          \n          \n            \n            * Realm roles or client roles\n          \n          \n            \n            * User groups\n          \n          \n            \n            * JS rule to match a client IP address", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528821013", "createdAt": "2020-11-23T16:09:25Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.\n+\n+The `authorization scopes` should simply contain all the possible Kafka permissions regardless of the resource type:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* Alter\n+* DescribeConfig\n+* AlterConfig\n+* ClusterAction\n+* IdempotentWrite\n+\n+.Resources\n+\n+The `resources` use pattern names to be used with pattern matching against the targeted resources when performing the permission check.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+A few examples:\n+\n+    Topic:my-topic\n+    Topic:orders-*\n+    Group:orders-*\n+    Cluster:*\n+\n+In addition, the general pattern can be prefixed by another one of the format `kafka-cluster:CLUSTER_NAME`, followed by comma, where the cluster name refers to the `metadata.name` in the Kafka CR.\n+\n+For example:\n+\n+    kafka-cluster:my-cluster,Topic:*\n+    kafka-cluster:*,Group:b_*\n+\n+When the `kafka-cluster` prefix is not present it is assumed to be `kafka-cluster:*`.\n+\n+When the resource is defined, a list of possible authorization scopes relevant to the resource should be added to the list of scopes.\n+Set whatever actions make sense for the targeted resource type.\n+\n+While you may add any `authorization scope` to any `resource`, only the scopes supported by the resource type will ever matter.\n+\n+.Policies\n+\n+The `policies` are used to target permissions to one or more accounts.\n+The targeting can refer to specific user or service accounts, it can refer to the realm roles or client roles, it can refer to user groups, and it can even use a JS rule and match client's IP address for example.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjUyNzA0OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjoxMDoyMlrOH4Utvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjoxMDoyMlrOH4Utvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgyMTY5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Each policy can be given a name, and can be reused to target multiple permissions to multiple resources.\n          \n          \n            \n            A policy is given a unique name, and can be reused to target multiple permissions to multiple resources.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528821695", "createdAt": "2020-11-23T16:10:22Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.\n+\n+The `authorization scopes` should simply contain all the possible Kafka permissions regardless of the resource type:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* Alter\n+* DescribeConfig\n+* AlterConfig\n+* ClusterAction\n+* IdempotentWrite\n+\n+.Resources\n+\n+The `resources` use pattern names to be used with pattern matching against the targeted resources when performing the permission check.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+A few examples:\n+\n+    Topic:my-topic\n+    Topic:orders-*\n+    Group:orders-*\n+    Cluster:*\n+\n+In addition, the general pattern can be prefixed by another one of the format `kafka-cluster:CLUSTER_NAME`, followed by comma, where the cluster name refers to the `metadata.name` in the Kafka CR.\n+\n+For example:\n+\n+    kafka-cluster:my-cluster,Topic:*\n+    kafka-cluster:*,Group:b_*\n+\n+When the `kafka-cluster` prefix is not present it is assumed to be `kafka-cluster:*`.\n+\n+When the resource is defined, a list of possible authorization scopes relevant to the resource should be added to the list of scopes.\n+Set whatever actions make sense for the targeted resource type.\n+\n+While you may add any `authorization scope` to any `resource`, only the scopes supported by the resource type will ever matter.\n+\n+.Policies\n+\n+The `policies` are used to target permissions to one or more accounts.\n+The targeting can refer to specific user or service accounts, it can refer to the realm roles or client roles, it can refer to user groups, and it can even use a JS rule and match client's IP address for example.\n+\n+Each policy can be given a name, and can be reused to target multiple permissions to multiple resources.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjUzMjM0OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjoxMToyN1rOH4Uw7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjoxMToyN1rOH4Uw7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgyMjUwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            .Resources\n          \n          \n            \n            .Defining resource patterns for permission checks", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528822509", "createdAt": "2020-11-23T16:11:27Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.\n+\n+The `authorization scopes` should simply contain all the possible Kafka permissions regardless of the resource type:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* Alter\n+* DescribeConfig\n+* AlterConfig\n+* ClusterAction\n+* IdempotentWrite\n+\n+.Resources", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjUzNTcwOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjoxMjowOVrOH4UzBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjoxMjowOVrOH4UzBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgyMzA0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            .Permissions\n          \n          \n            \n            .Defining permissions based on scopes, resources and policies", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528823044", "createdAt": "2020-11-23T16:12:09Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.\n+\n+The `authorization scopes` should simply contain all the possible Kafka permissions regardless of the resource type:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* Alter\n+* DescribeConfig\n+* AlterConfig\n+* ClusterAction\n+* IdempotentWrite\n+\n+.Resources\n+\n+The `resources` use pattern names to be used with pattern matching against the targeted resources when performing the permission check.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+A few examples:\n+\n+    Topic:my-topic\n+    Topic:orders-*\n+    Group:orders-*\n+    Cluster:*\n+\n+In addition, the general pattern can be prefixed by another one of the format `kafka-cluster:CLUSTER_NAME`, followed by comma, where the cluster name refers to the `metadata.name` in the Kafka CR.\n+\n+For example:\n+\n+    kafka-cluster:my-cluster,Topic:*\n+    kafka-cluster:*,Group:b_*\n+\n+When the `kafka-cluster` prefix is not present it is assumed to be `kafka-cluster:*`.\n+\n+When the resource is defined, a list of possible authorization scopes relevant to the resource should be added to the list of scopes.\n+Set whatever actions make sense for the targeted resource type.\n+\n+While you may add any `authorization scope` to any `resource`, only the scopes supported by the resource type will ever matter.\n+\n+.Policies\n+\n+The `policies` are used to target permissions to one or more accounts.\n+The targeting can refer to specific user or service accounts, it can refer to the realm roles or client roles, it can refer to user groups, and it can even use a JS rule and match client's IP address for example.\n+\n+Each policy can be given a name, and can be reused to target multiple permissions to multiple resources.\n+\n+.Permissions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjU0MzAyOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjoxMzo1N1rOH4U3uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjoxMzo1N1rOH4U3uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgyNDI0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `permissions` are the final step where you pull together the `policies`, `resources`, and `authorization scopes` to grant access to one or more users.\n          \n          \n            \n            Use fine-grained permissions to pull together the policies, resources, and authorization scopes that grant access to users.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528824248", "createdAt": "2020-11-23T16:13:57Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.\n+\n+The `authorization scopes` should simply contain all the possible Kafka permissions regardless of the resource type:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* Alter\n+* DescribeConfig\n+* AlterConfig\n+* ClusterAction\n+* IdempotentWrite\n+\n+.Resources\n+\n+The `resources` use pattern names to be used with pattern matching against the targeted resources when performing the permission check.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+A few examples:\n+\n+    Topic:my-topic\n+    Topic:orders-*\n+    Group:orders-*\n+    Cluster:*\n+\n+In addition, the general pattern can be prefixed by another one of the format `kafka-cluster:CLUSTER_NAME`, followed by comma, where the cluster name refers to the `metadata.name` in the Kafka CR.\n+\n+For example:\n+\n+    kafka-cluster:my-cluster,Topic:*\n+    kafka-cluster:*,Group:b_*\n+\n+When the `kafka-cluster` prefix is not present it is assumed to be `kafka-cluster:*`.\n+\n+When the resource is defined, a list of possible authorization scopes relevant to the resource should be added to the list of scopes.\n+Set whatever actions make sense for the targeted resource type.\n+\n+While you may add any `authorization scope` to any `resource`, only the scopes supported by the resource type will ever matter.\n+\n+.Policies\n+\n+The `policies` are used to target permissions to one or more accounts.\n+The targeting can refer to specific user or service accounts, it can refer to the realm roles or client roles, it can refer to user groups, and it can even use a JS rule and match client's IP address for example.\n+\n+Each policy can be given a name, and can be reused to target multiple permissions to multiple resources.\n+\n+.Permissions\n+\n+The `permissions` are the final step where you pull together the `policies`, `resources`, and `authorization scopes` to grant access to one or more users.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjU1MTg4OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjoxNTo0NlrOH4U9GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjoxNTo0NlrOH4U9GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgyNTYyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Scope permissions should be used to grant fine-grained permissions to users.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528825624", "createdAt": "2020-11-23T16:15:46Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.\n+\n+The `authorization scopes` should simply contain all the possible Kafka permissions regardless of the resource type:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* Alter\n+* DescribeConfig\n+* AlterConfig\n+* ClusterAction\n+* IdempotentWrite\n+\n+.Resources\n+\n+The `resources` use pattern names to be used with pattern matching against the targeted resources when performing the permission check.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+A few examples:\n+\n+    Topic:my-topic\n+    Topic:orders-*\n+    Group:orders-*\n+    Cluster:*\n+\n+In addition, the general pattern can be prefixed by another one of the format `kafka-cluster:CLUSTER_NAME`, followed by comma, where the cluster name refers to the `metadata.name` in the Kafka CR.\n+\n+For example:\n+\n+    kafka-cluster:my-cluster,Topic:*\n+    kafka-cluster:*,Group:b_*\n+\n+When the `kafka-cluster` prefix is not present it is assumed to be `kafka-cluster:*`.\n+\n+When the resource is defined, a list of possible authorization scopes relevant to the resource should be added to the list of scopes.\n+Set whatever actions make sense for the targeted resource type.\n+\n+While you may add any `authorization scope` to any `resource`, only the scopes supported by the resource type will ever matter.\n+\n+.Policies\n+\n+The `policies` are used to target permissions to one or more accounts.\n+The targeting can refer to specific user or service accounts, it can refer to the realm roles or client roles, it can refer to user groups, and it can even use a JS rule and match client's IP address for example.\n+\n+Each policy can be given a name, and can be reused to target multiple permissions to multiple resources.\n+\n+.Permissions\n+\n+The `permissions` are the final step where you pull together the `policies`, `resources`, and `authorization scopes` to grant access to one or more users.\n+\n+Scope permissions should be used to grant fine-grained permissions to users.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjU1NjI1OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjoxNjo0MFrOH4U_rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjoxNjo0MFrOH4U_rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgyNjI4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Each policy should be descriptively named in order to make it very clear what permissions it grants to which users.\n          \n          \n            \n            The name of the each permission should should clearly define what permissions it grants to which users.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528826285", "createdAt": "2020-11-23T16:16:40Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.\n+\n+The `authorization scopes` should simply contain all the possible Kafka permissions regardless of the resource type:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* Alter\n+* DescribeConfig\n+* AlterConfig\n+* ClusterAction\n+* IdempotentWrite\n+\n+.Resources\n+\n+The `resources` use pattern names to be used with pattern matching against the targeted resources when performing the permission check.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+A few examples:\n+\n+    Topic:my-topic\n+    Topic:orders-*\n+    Group:orders-*\n+    Cluster:*\n+\n+In addition, the general pattern can be prefixed by another one of the format `kafka-cluster:CLUSTER_NAME`, followed by comma, where the cluster name refers to the `metadata.name` in the Kafka CR.\n+\n+For example:\n+\n+    kafka-cluster:my-cluster,Topic:*\n+    kafka-cluster:*,Group:b_*\n+\n+When the `kafka-cluster` prefix is not present it is assumed to be `kafka-cluster:*`.\n+\n+When the resource is defined, a list of possible authorization scopes relevant to the resource should be added to the list of scopes.\n+Set whatever actions make sense for the targeted resource type.\n+\n+While you may add any `authorization scope` to any `resource`, only the scopes supported by the resource type will ever matter.\n+\n+.Policies\n+\n+The `policies` are used to target permissions to one or more accounts.\n+The targeting can refer to specific user or service accounts, it can refer to the realm roles or client roles, it can refer to user groups, and it can even use a JS rule and match client's IP address for example.\n+\n+Each policy can be given a name, and can be reused to target multiple permissions to multiple resources.\n+\n+.Permissions\n+\n+The `permissions` are the final step where you pull together the `policies`, `resources`, and `authorization scopes` to grant access to one or more users.\n+\n+Scope permissions should be used to grant fine-grained permissions to users.\n+\n+Each policy should be descriptively named in order to make it very clear what permissions it grants to which users.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjU2NTAyOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjoxODoyMlrOH4VE5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjoxODoyMlrOH4VE5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgyNzYyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            See xref:con-oauth-authorization-keycloak-example_str[the authorization example] to get a hands-on understanding of how to configure the permissions through Keycloak Authorization Services.\n          \n          \n            \n            For more information on how to configure permissions through Keycloak Authorization Services, see xref:con-oauth-authorization-keycloak-example_str[the authorization example].", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528827622", "createdAt": "2020-11-23T16:18:22Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.\n+\n+The `authorization scopes` should simply contain all the possible Kafka permissions regardless of the resource type:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* Alter\n+* DescribeConfig\n+* AlterConfig\n+* ClusterAction\n+* IdempotentWrite\n+\n+.Resources\n+\n+The `resources` use pattern names to be used with pattern matching against the targeted resources when performing the permission check.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+A few examples:\n+\n+    Topic:my-topic\n+    Topic:orders-*\n+    Group:orders-*\n+    Cluster:*\n+\n+In addition, the general pattern can be prefixed by another one of the format `kafka-cluster:CLUSTER_NAME`, followed by comma, where the cluster name refers to the `metadata.name` in the Kafka CR.\n+\n+For example:\n+\n+    kafka-cluster:my-cluster,Topic:*\n+    kafka-cluster:*,Group:b_*\n+\n+When the `kafka-cluster` prefix is not present it is assumed to be `kafka-cluster:*`.\n+\n+When the resource is defined, a list of possible authorization scopes relevant to the resource should be added to the list of scopes.\n+Set whatever actions make sense for the targeted resource type.\n+\n+While you may add any `authorization scope` to any `resource`, only the scopes supported by the resource type will ever matter.\n+\n+.Policies\n+\n+The `policies` are used to target permissions to one or more accounts.\n+The targeting can refer to specific user or service accounts, it can refer to the realm roles or client roles, it can refer to user groups, and it can even use a JS rule and match client's IP address for example.\n+\n+Each policy can be given a name, and can be reused to target multiple permissions to multiple resources.\n+\n+.Permissions\n+\n+The `permissions` are the final step where you pull together the `policies`, `resources`, and `authorization scopes` to grant access to one or more users.\n+\n+Scope permissions should be used to grant fine-grained permissions to users.\n+\n+Each policy should be descriptively named in order to make it very clear what permissions it grants to which users.\n+\n+See xref:con-oauth-authorization-keycloak-example_str[the authorization example] to get a hands-on understanding of how to configure the permissions through Keycloak Authorization Services.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjY3OTg2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjo0MzoyNVrOH4WLqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxODowMzowNFrOH4ZVNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg0NTczNw==", "bodyText": "We need some context here. What are describing in this section and how it's relevant to the reader.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528845737", "createdAt": "2020-11-23T16:43:25Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.\n+\n+The `authorization scopes` should simply contain all the possible Kafka permissions regardless of the resource type:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* Alter\n+* DescribeConfig\n+* AlterConfig\n+* ClusterAction\n+* IdempotentWrite\n+\n+.Resources\n+\n+The `resources` use pattern names to be used with pattern matching against the targeted resources when performing the permission check.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+A few examples:\n+\n+    Topic:my-topic\n+    Topic:orders-*\n+    Group:orders-*\n+    Cluster:*\n+\n+In addition, the general pattern can be prefixed by another one of the format `kafka-cluster:CLUSTER_NAME`, followed by comma, where the cluster name refers to the `metadata.name` in the Kafka CR.\n+\n+For example:\n+\n+    kafka-cluster:my-cluster,Topic:*\n+    kafka-cluster:*,Group:b_*\n+\n+When the `kafka-cluster` prefix is not present it is assumed to be `kafka-cluster:*`.\n+\n+When the resource is defined, a list of possible authorization scopes relevant to the resource should be added to the list of scopes.\n+Set whatever actions make sense for the targeted resource type.\n+\n+While you may add any `authorization scope` to any `resource`, only the scopes supported by the resource type will ever matter.\n+\n+.Policies\n+\n+The `policies` are used to target permissions to one or more accounts.\n+The targeting can refer to specific user or service accounts, it can refer to the realm roles or client roles, it can refer to user groups, and it can even use a JS rule and match client's IP address for example.\n+\n+Each policy can be given a name, and can be reused to target multiple permissions to multiple resources.\n+\n+.Permissions\n+\n+The `permissions` are the final step where you pull together the `policies`, `resources`, and `authorization scopes` to grant access to one or more users.\n+\n+Scope permissions should be used to grant fine-grained permissions to users.\n+\n+Each policy should be descriptively named in order to make it very clear what permissions it grants to which users.\n+\n+See xref:con-oauth-authorization-keycloak-example_str[the authorization example] to get a hands-on understanding of how to configure the permissions through Keycloak Authorization Services.\n+\n+\n+== Permissions required by operations\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg5NzMzMw==", "bodyText": "Added the next line.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528897333", "createdAt": "2020-11-23T18:03:04Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.\n+\n+The `authorization scopes` should simply contain all the possible Kafka permissions regardless of the resource type:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* Alter\n+* DescribeConfig\n+* AlterConfig\n+* ClusterAction\n+* IdempotentWrite\n+\n+.Resources\n+\n+The `resources` use pattern names to be used with pattern matching against the targeted resources when performing the permission check.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+A few examples:\n+\n+    Topic:my-topic\n+    Topic:orders-*\n+    Group:orders-*\n+    Cluster:*\n+\n+In addition, the general pattern can be prefixed by another one of the format `kafka-cluster:CLUSTER_NAME`, followed by comma, where the cluster name refers to the `metadata.name` in the Kafka CR.\n+\n+For example:\n+\n+    kafka-cluster:my-cluster,Topic:*\n+    kafka-cluster:*,Group:b_*\n+\n+When the `kafka-cluster` prefix is not present it is assumed to be `kafka-cluster:*`.\n+\n+When the resource is defined, a list of possible authorization scopes relevant to the resource should be added to the list of scopes.\n+Set whatever actions make sense for the targeted resource type.\n+\n+While you may add any `authorization scope` to any `resource`, only the scopes supported by the resource type will ever matter.\n+\n+.Policies\n+\n+The `policies` are used to target permissions to one or more accounts.\n+The targeting can refer to specific user or service accounts, it can refer to the realm roles or client roles, it can refer to user groups, and it can even use a JS rule and match client's IP address for example.\n+\n+Each policy can be given a name, and can be reused to target multiple permissions to multiple resources.\n+\n+.Permissions\n+\n+The `permissions` are the final step where you pull together the `policies`, `resources`, and `authorization scopes` to grant access to one or more users.\n+\n+Scope permissions should be used to grant fine-grained permissions to users.\n+\n+Each policy should be descriptively named in order to make it very clear what permissions it grants to which users.\n+\n+See xref:con-oauth-authorization-keycloak-example_str[the authorization example] to get a hands-on understanding of how to configure the permissions through Keycloak Authorization Services.\n+\n+\n+== Permissions required by operations\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg0NTczNw=="}, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjY4Mzk2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjo0NDoyMlrOH4WOLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjo0NDoyMlrOH4WOLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg0NjM4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In order to create the topic the `Create` permission is required for the specific topic or on `Cluster:kafka-cluster`.\n          \n          \n            \n            To create a topic the `Create` permission is required for the specific topic or `Cluster:kafka-cluster`.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528846381", "createdAt": "2020-11-23T16:44:22Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.\n+\n+The `authorization scopes` should simply contain all the possible Kafka permissions regardless of the resource type:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* Alter\n+* DescribeConfig\n+* AlterConfig\n+* ClusterAction\n+* IdempotentWrite\n+\n+.Resources\n+\n+The `resources` use pattern names to be used with pattern matching against the targeted resources when performing the permission check.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+A few examples:\n+\n+    Topic:my-topic\n+    Topic:orders-*\n+    Group:orders-*\n+    Cluster:*\n+\n+In addition, the general pattern can be prefixed by another one of the format `kafka-cluster:CLUSTER_NAME`, followed by comma, where the cluster name refers to the `metadata.name` in the Kafka CR.\n+\n+For example:\n+\n+    kafka-cluster:my-cluster,Topic:*\n+    kafka-cluster:*,Group:b_*\n+\n+When the `kafka-cluster` prefix is not present it is assumed to be `kafka-cluster:*`.\n+\n+When the resource is defined, a list of possible authorization scopes relevant to the resource should be added to the list of scopes.\n+Set whatever actions make sense for the targeted resource type.\n+\n+While you may add any `authorization scope` to any `resource`, only the scopes supported by the resource type will ever matter.\n+\n+.Policies\n+\n+The `policies` are used to target permissions to one or more accounts.\n+The targeting can refer to specific user or service accounts, it can refer to the realm roles or client roles, it can refer to user groups, and it can even use a JS rule and match client's IP address for example.\n+\n+Each policy can be given a name, and can be reused to target multiple permissions to multiple resources.\n+\n+.Permissions\n+\n+The `permissions` are the final step where you pull together the `policies`, `resources`, and `authorization scopes` to grant access to one or more users.\n+\n+Scope permissions should be used to grant fine-grained permissions to users.\n+\n+Each policy should be descriptively named in order to make it very clear what permissions it grants to which users.\n+\n+See xref:con-oauth-authorization-keycloak-example_str[the authorization example] to get a hands-on understanding of how to configure the permissions through Keycloak Authorization Services.\n+\n+\n+== Permissions required by operations\n+\n+.Creating the topic\n+\n+In order to create the topic the `Create` permission is required for the specific topic or on `Cluster:kafka-cluster`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjY4NjA1OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjo0NDo1MlrOH4WPhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxODoxMzoxNlrOH4ZrSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg0NjcyNA==", "bodyText": "Separate sub-section?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528846724", "createdAt": "2020-11-23T16:44:52Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.\n+\n+The `authorization scopes` should simply contain all the possible Kafka permissions regardless of the resource type:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* Alter\n+* DescribeConfig\n+* AlterConfig\n+* ClusterAction\n+* IdempotentWrite\n+\n+.Resources\n+\n+The `resources` use pattern names to be used with pattern matching against the targeted resources when performing the permission check.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+A few examples:\n+\n+    Topic:my-topic\n+    Topic:orders-*\n+    Group:orders-*\n+    Cluster:*\n+\n+In addition, the general pattern can be prefixed by another one of the format `kafka-cluster:CLUSTER_NAME`, followed by comma, where the cluster name refers to the `metadata.name` in the Kafka CR.\n+\n+For example:\n+\n+    kafka-cluster:my-cluster,Topic:*\n+    kafka-cluster:*,Group:b_*\n+\n+When the `kafka-cluster` prefix is not present it is assumed to be `kafka-cluster:*`.\n+\n+When the resource is defined, a list of possible authorization scopes relevant to the resource should be added to the list of scopes.\n+Set whatever actions make sense for the targeted resource type.\n+\n+While you may add any `authorization scope` to any `resource`, only the scopes supported by the resource type will ever matter.\n+\n+.Policies\n+\n+The `policies` are used to target permissions to one or more accounts.\n+The targeting can refer to specific user or service accounts, it can refer to the realm roles or client roles, it can refer to user groups, and it can even use a JS rule and match client's IP address for example.\n+\n+Each policy can be given a name, and can be reused to target multiple permissions to multiple resources.\n+\n+.Permissions\n+\n+The `permissions` are the final step where you pull together the `policies`, `resources`, and `authorization scopes` to grant access to one or more users.\n+\n+Scope permissions should be used to grant fine-grained permissions to users.\n+\n+Each policy should be descriptively named in order to make it very clear what permissions it grants to which users.\n+\n+See xref:con-oauth-authorization-keycloak-example_str[the authorization example] to get a hands-on understanding of how to configure the permissions through Keycloak Authorization Services.\n+\n+\n+== Permissions required by operations\n+\n+.Creating the topic\n+\n+In order to create the topic the `Create` permission is required for the specific topic or on `Cluster:kafka-cluster`.\n+To display the details of the created topic the `Describe` permission is required for the specific topic.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkwMjk4Nw==", "bodyText": "Done.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528902987", "createdAt": "2020-11-23T18:13:16Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.\n+\n+The `authorization scopes` should simply contain all the possible Kafka permissions regardless of the resource type:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* Alter\n+* DescribeConfig\n+* AlterConfig\n+* ClusterAction\n+* IdempotentWrite\n+\n+.Resources\n+\n+The `resources` use pattern names to be used with pattern matching against the targeted resources when performing the permission check.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+A few examples:\n+\n+    Topic:my-topic\n+    Topic:orders-*\n+    Group:orders-*\n+    Cluster:*\n+\n+In addition, the general pattern can be prefixed by another one of the format `kafka-cluster:CLUSTER_NAME`, followed by comma, where the cluster name refers to the `metadata.name` in the Kafka CR.\n+\n+For example:\n+\n+    kafka-cluster:my-cluster,Topic:*\n+    kafka-cluster:*,Group:b_*\n+\n+When the `kafka-cluster` prefix is not present it is assumed to be `kafka-cluster:*`.\n+\n+When the resource is defined, a list of possible authorization scopes relevant to the resource should be added to the list of scopes.\n+Set whatever actions make sense for the targeted resource type.\n+\n+While you may add any `authorization scope` to any `resource`, only the scopes supported by the resource type will ever matter.\n+\n+.Policies\n+\n+The `policies` are used to target permissions to one or more accounts.\n+The targeting can refer to specific user or service accounts, it can refer to the realm roles or client roles, it can refer to user groups, and it can even use a JS rule and match client's IP address for example.\n+\n+Each policy can be given a name, and can be reused to target multiple permissions to multiple resources.\n+\n+.Permissions\n+\n+The `permissions` are the final step where you pull together the `policies`, `resources`, and `authorization scopes` to grant access to one or more users.\n+\n+Scope permissions should be used to grant fine-grained permissions to users.\n+\n+Each policy should be descriptively named in order to make it very clear what permissions it grants to which users.\n+\n+See xref:con-oauth-authorization-keycloak-example_str[the authorization example] to get a hands-on understanding of how to configure the permissions through Keycloak Authorization Services.\n+\n+\n+== Permissions required by operations\n+\n+.Creating the topic\n+\n+In order to create the topic the `Create` permission is required for the specific topic or on `Cluster:kafka-cluster`.\n+To display the details of the created topic the `Describe` permission is required for the specific topic.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg0NjcyNA=="}, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjc5MTExOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzowOTowMFrOH4XQFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzowOTowMFrOH4XQFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2MzI1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            .Creating the topic\n          \n          \n            \n            .Creating a topic", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528863253", "createdAt": "2020-11-23T17:09:00Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.\n+\n+The `authorization scopes` should simply contain all the possible Kafka permissions regardless of the resource type:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* Alter\n+* DescribeConfig\n+* AlterConfig\n+* ClusterAction\n+* IdempotentWrite\n+\n+.Resources\n+\n+The `resources` use pattern names to be used with pattern matching against the targeted resources when performing the permission check.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+A few examples:\n+\n+    Topic:my-topic\n+    Topic:orders-*\n+    Group:orders-*\n+    Cluster:*\n+\n+In addition, the general pattern can be prefixed by another one of the format `kafka-cluster:CLUSTER_NAME`, followed by comma, where the cluster name refers to the `metadata.name` in the Kafka CR.\n+\n+For example:\n+\n+    kafka-cluster:my-cluster,Topic:*\n+    kafka-cluster:*,Group:b_*\n+\n+When the `kafka-cluster` prefix is not present it is assumed to be `kafka-cluster:*`.\n+\n+When the resource is defined, a list of possible authorization scopes relevant to the resource should be added to the list of scopes.\n+Set whatever actions make sense for the targeted resource type.\n+\n+While you may add any `authorization scope` to any `resource`, only the scopes supported by the resource type will ever matter.\n+\n+.Policies\n+\n+The `policies` are used to target permissions to one or more accounts.\n+The targeting can refer to specific user or service accounts, it can refer to the realm roles or client roles, it can refer to user groups, and it can even use a JS rule and match client's IP address for example.\n+\n+Each policy can be given a name, and can be reused to target multiple permissions to multiple resources.\n+\n+.Permissions\n+\n+The `permissions` are the final step where you pull together the `policies`, `resources`, and `authorization scopes` to grant access to one or more users.\n+\n+Scope permissions should be used to grant fine-grained permissions to users.\n+\n+Each policy should be descriptively named in order to make it very clear what permissions it grants to which users.\n+\n+See xref:con-oauth-authorization-keycloak-example_str[the authorization example] to get a hands-on understanding of how to configure the permissions through Keycloak Authorization Services.\n+\n+\n+== Permissions required by operations\n+\n+.Creating the topic", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjc5MzQ1OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzowOTozNFrOH4XRfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzowOTozNFrOH4XRfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2MzYxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In order to produce to the topic the user needs `Describe` and `Write` permissions on the topic.\n          \n          \n            \n            To produce to the topic the user needs `Describe` and `Write` permissions on the topic.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528863613", "createdAt": "2020-11-23T17:09:34Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.\n+\n+The `authorization scopes` should simply contain all the possible Kafka permissions regardless of the resource type:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* Alter\n+* DescribeConfig\n+* AlterConfig\n+* ClusterAction\n+* IdempotentWrite\n+\n+.Resources\n+\n+The `resources` use pattern names to be used with pattern matching against the targeted resources when performing the permission check.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+A few examples:\n+\n+    Topic:my-topic\n+    Topic:orders-*\n+    Group:orders-*\n+    Cluster:*\n+\n+In addition, the general pattern can be prefixed by another one of the format `kafka-cluster:CLUSTER_NAME`, followed by comma, where the cluster name refers to the `metadata.name` in the Kafka CR.\n+\n+For example:\n+\n+    kafka-cluster:my-cluster,Topic:*\n+    kafka-cluster:*,Group:b_*\n+\n+When the `kafka-cluster` prefix is not present it is assumed to be `kafka-cluster:*`.\n+\n+When the resource is defined, a list of possible authorization scopes relevant to the resource should be added to the list of scopes.\n+Set whatever actions make sense for the targeted resource type.\n+\n+While you may add any `authorization scope` to any `resource`, only the scopes supported by the resource type will ever matter.\n+\n+.Policies\n+\n+The `policies` are used to target permissions to one or more accounts.\n+The targeting can refer to specific user or service accounts, it can refer to the realm roles or client roles, it can refer to user groups, and it can even use a JS rule and match client's IP address for example.\n+\n+Each policy can be given a name, and can be reused to target multiple permissions to multiple resources.\n+\n+.Permissions\n+\n+The `permissions` are the final step where you pull together the `policies`, `resources`, and `authorization scopes` to grant access to one or more users.\n+\n+Scope permissions should be used to grant fine-grained permissions to users.\n+\n+Each policy should be descriptively named in order to make it very clear what permissions it grants to which users.\n+\n+See xref:con-oauth-authorization-keycloak-example_str[the authorization example] to get a hands-on understanding of how to configure the permissions through Keycloak Authorization Services.\n+\n+\n+== Permissions required by operations\n+\n+.Creating the topic\n+\n+In order to create the topic the `Create` permission is required for the specific topic or on `Cluster:kafka-cluster`.\n+To display the details of the created topic the `Describe` permission is required for the specific topic.\n+\n+.Producing to the topic\n+\n+In order to produce to the topic the user needs `Describe` and `Write` permissions on the topic.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjgwNjMzOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzoxMjoyN1rOH4XZVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzoxMjoyN1rOH4XZVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2NTYyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In order to consume from the topic the user needs `Describe` and `Read` permissions on the topic.\n          \n          \n            \n            To consume from the topic the user needs `Describe` and `Read` permissions on the topic.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528865623", "createdAt": "2020-11-23T17:12:27Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.\n+\n+The `authorization scopes` should simply contain all the possible Kafka permissions regardless of the resource type:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* Alter\n+* DescribeConfig\n+* AlterConfig\n+* ClusterAction\n+* IdempotentWrite\n+\n+.Resources\n+\n+The `resources` use pattern names to be used with pattern matching against the targeted resources when performing the permission check.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+A few examples:\n+\n+    Topic:my-topic\n+    Topic:orders-*\n+    Group:orders-*\n+    Cluster:*\n+\n+In addition, the general pattern can be prefixed by another one of the format `kafka-cluster:CLUSTER_NAME`, followed by comma, where the cluster name refers to the `metadata.name` in the Kafka CR.\n+\n+For example:\n+\n+    kafka-cluster:my-cluster,Topic:*\n+    kafka-cluster:*,Group:b_*\n+\n+When the `kafka-cluster` prefix is not present it is assumed to be `kafka-cluster:*`.\n+\n+When the resource is defined, a list of possible authorization scopes relevant to the resource should be added to the list of scopes.\n+Set whatever actions make sense for the targeted resource type.\n+\n+While you may add any `authorization scope` to any `resource`, only the scopes supported by the resource type will ever matter.\n+\n+.Policies\n+\n+The `policies` are used to target permissions to one or more accounts.\n+The targeting can refer to specific user or service accounts, it can refer to the realm roles or client roles, it can refer to user groups, and it can even use a JS rule and match client's IP address for example.\n+\n+Each policy can be given a name, and can be reused to target multiple permissions to multiple resources.\n+\n+.Permissions\n+\n+The `permissions` are the final step where you pull together the `policies`, `resources`, and `authorization scopes` to grant access to one or more users.\n+\n+Scope permissions should be used to grant fine-grained permissions to users.\n+\n+Each policy should be descriptively named in order to make it very clear what permissions it grants to which users.\n+\n+See xref:con-oauth-authorization-keycloak-example_str[the authorization example] to get a hands-on understanding of how to configure the permissions through Keycloak Authorization Services.\n+\n+\n+== Permissions required by operations\n+\n+.Creating the topic\n+\n+In order to create the topic the `Create` permission is required for the specific topic or on `Cluster:kafka-cluster`.\n+To display the details of the created topic the `Describe` permission is required for the specific topic.\n+\n+.Producing to the topic\n+\n+In order to produce to the topic the user needs `Describe` and `Write` permissions on the topic.\n+If topic has not yet been created, and autocreation is enabled, the permissions to create the topic are required.\n+\n+.Consuming from the topic\n+\n+In order to consume from the topic the user needs `Describe` and `Read` permissions on the topic.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjgwNzgwOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzoxMjo0N1rOH4XaKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzoxMjo0N1rOH4XaKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2NTgzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Two `resources` would be needed for matching, for example:\n          \n          \n            \n            Two `resources` are needed for matching. For example:", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528865834", "createdAt": "2020-11-23T17:12:47Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.\n+\n+The `authorization scopes` should simply contain all the possible Kafka permissions regardless of the resource type:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* Alter\n+* DescribeConfig\n+* AlterConfig\n+* ClusterAction\n+* IdempotentWrite\n+\n+.Resources\n+\n+The `resources` use pattern names to be used with pattern matching against the targeted resources when performing the permission check.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+A few examples:\n+\n+    Topic:my-topic\n+    Topic:orders-*\n+    Group:orders-*\n+    Cluster:*\n+\n+In addition, the general pattern can be prefixed by another one of the format `kafka-cluster:CLUSTER_NAME`, followed by comma, where the cluster name refers to the `metadata.name` in the Kafka CR.\n+\n+For example:\n+\n+    kafka-cluster:my-cluster,Topic:*\n+    kafka-cluster:*,Group:b_*\n+\n+When the `kafka-cluster` prefix is not present it is assumed to be `kafka-cluster:*`.\n+\n+When the resource is defined, a list of possible authorization scopes relevant to the resource should be added to the list of scopes.\n+Set whatever actions make sense for the targeted resource type.\n+\n+While you may add any `authorization scope` to any `resource`, only the scopes supported by the resource type will ever matter.\n+\n+.Policies\n+\n+The `policies` are used to target permissions to one or more accounts.\n+The targeting can refer to specific user or service accounts, it can refer to the realm roles or client roles, it can refer to user groups, and it can even use a JS rule and match client's IP address for example.\n+\n+Each policy can be given a name, and can be reused to target multiple permissions to multiple resources.\n+\n+.Permissions\n+\n+The `permissions` are the final step where you pull together the `policies`, `resources`, and `authorization scopes` to grant access to one or more users.\n+\n+Scope permissions should be used to grant fine-grained permissions to users.\n+\n+Each policy should be descriptively named in order to make it very clear what permissions it grants to which users.\n+\n+See xref:con-oauth-authorization-keycloak-example_str[the authorization example] to get a hands-on understanding of how to configure the permissions through Keycloak Authorization Services.\n+\n+\n+== Permissions required by operations\n+\n+.Creating the topic\n+\n+In order to create the topic the `Create` permission is required for the specific topic or on `Cluster:kafka-cluster`.\n+To display the details of the created topic the `Describe` permission is required for the specific topic.\n+\n+.Producing to the topic\n+\n+In order to produce to the topic the user needs `Describe` and `Write` permissions on the topic.\n+If topic has not yet been created, and autocreation is enabled, the permissions to create the topic are required.\n+\n+.Consuming from the topic\n+\n+In order to consume from the topic the user needs `Describe` and `Read` permissions on the topic.\n+Consuming from the topic normally relies on storing the consumer offsets in a consumer group.\n+That requires additional `Describe` and `Read` permissions on the consumer group.\n+\n+Two `resources` would be needed for matching, for example:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjgwOTY0OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzoxMzoxOFrOH4XbZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzoxMzoxOFrOH4XbZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2NjE0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Two `resources` would be needed for matching, for example:\n          \n          \n            \n            Two `resources` are needed for matching. For example:", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528866149", "createdAt": "2020-11-23T17:13:18Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.\n+\n+The `authorization scopes` should simply contain all the possible Kafka permissions regardless of the resource type:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* Alter\n+* DescribeConfig\n+* AlterConfig\n+* ClusterAction\n+* IdempotentWrite\n+\n+.Resources\n+\n+The `resources` use pattern names to be used with pattern matching against the targeted resources when performing the permission check.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+A few examples:\n+\n+    Topic:my-topic\n+    Topic:orders-*\n+    Group:orders-*\n+    Cluster:*\n+\n+In addition, the general pattern can be prefixed by another one of the format `kafka-cluster:CLUSTER_NAME`, followed by comma, where the cluster name refers to the `metadata.name` in the Kafka CR.\n+\n+For example:\n+\n+    kafka-cluster:my-cluster,Topic:*\n+    kafka-cluster:*,Group:b_*\n+\n+When the `kafka-cluster` prefix is not present it is assumed to be `kafka-cluster:*`.\n+\n+When the resource is defined, a list of possible authorization scopes relevant to the resource should be added to the list of scopes.\n+Set whatever actions make sense for the targeted resource type.\n+\n+While you may add any `authorization scope` to any `resource`, only the scopes supported by the resource type will ever matter.\n+\n+.Policies\n+\n+The `policies` are used to target permissions to one or more accounts.\n+The targeting can refer to specific user or service accounts, it can refer to the realm roles or client roles, it can refer to user groups, and it can even use a JS rule and match client's IP address for example.\n+\n+Each policy can be given a name, and can be reused to target multiple permissions to multiple resources.\n+\n+.Permissions\n+\n+The `permissions` are the final step where you pull together the `policies`, `resources`, and `authorization scopes` to grant access to one or more users.\n+\n+Scope permissions should be used to grant fine-grained permissions to users.\n+\n+Each policy should be descriptively named in order to make it very clear what permissions it grants to which users.\n+\n+See xref:con-oauth-authorization-keycloak-example_str[the authorization example] to get a hands-on understanding of how to configure the permissions through Keycloak Authorization Services.\n+\n+\n+== Permissions required by operations\n+\n+.Creating the topic\n+\n+In order to create the topic the `Create` permission is required for the specific topic or on `Cluster:kafka-cluster`.\n+To display the details of the created topic the `Describe` permission is required for the specific topic.\n+\n+.Producing to the topic\n+\n+In order to produce to the topic the user needs `Describe` and `Write` permissions on the topic.\n+If topic has not yet been created, and autocreation is enabled, the permissions to create the topic are required.\n+\n+.Consuming from the topic\n+\n+In order to consume from the topic the user needs `Describe` and `Read` permissions on the topic.\n+Consuming from the topic normally relies on storing the consumer offsets in a consumer group.\n+That requires additional `Describe` and `Read` permissions on the consumer group.\n+\n+Two `resources` would be needed for matching, for example:\n+\n+    Topic:my-topic\n+    Group:my-group-*\n+\n+.Producing to the topic using an idempotent producer\n+\n+Besides needing the permissions for ordinary producing to the topic, an additional `IdempotentWrite` permission is required on the `Cluster` resource.\n+\n+Two `resources` would be needed for matching, for example:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjgxMjk2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzoxNDoxMlrOH4XdfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzoxNDoxMlrOH4XdfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2NjY4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            .Listing the topics\n          \n          \n            \n            .Listing topics", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528866685", "createdAt": "2020-11-23T17:14:12Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.\n+\n+The `authorization scopes` should simply contain all the possible Kafka permissions regardless of the resource type:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* Alter\n+* DescribeConfig\n+* AlterConfig\n+* ClusterAction\n+* IdempotentWrite\n+\n+.Resources\n+\n+The `resources` use pattern names to be used with pattern matching against the targeted resources when performing the permission check.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+A few examples:\n+\n+    Topic:my-topic\n+    Topic:orders-*\n+    Group:orders-*\n+    Cluster:*\n+\n+In addition, the general pattern can be prefixed by another one of the format `kafka-cluster:CLUSTER_NAME`, followed by comma, where the cluster name refers to the `metadata.name` in the Kafka CR.\n+\n+For example:\n+\n+    kafka-cluster:my-cluster,Topic:*\n+    kafka-cluster:*,Group:b_*\n+\n+When the `kafka-cluster` prefix is not present it is assumed to be `kafka-cluster:*`.\n+\n+When the resource is defined, a list of possible authorization scopes relevant to the resource should be added to the list of scopes.\n+Set whatever actions make sense for the targeted resource type.\n+\n+While you may add any `authorization scope` to any `resource`, only the scopes supported by the resource type will ever matter.\n+\n+.Policies\n+\n+The `policies` are used to target permissions to one or more accounts.\n+The targeting can refer to specific user or service accounts, it can refer to the realm roles or client roles, it can refer to user groups, and it can even use a JS rule and match client's IP address for example.\n+\n+Each policy can be given a name, and can be reused to target multiple permissions to multiple resources.\n+\n+.Permissions\n+\n+The `permissions` are the final step where you pull together the `policies`, `resources`, and `authorization scopes` to grant access to one or more users.\n+\n+Scope permissions should be used to grant fine-grained permissions to users.\n+\n+Each policy should be descriptively named in order to make it very clear what permissions it grants to which users.\n+\n+See xref:con-oauth-authorization-keycloak-example_str[the authorization example] to get a hands-on understanding of how to configure the permissions through Keycloak Authorization Services.\n+\n+\n+== Permissions required by operations\n+\n+.Creating the topic\n+\n+In order to create the topic the `Create` permission is required for the specific topic or on `Cluster:kafka-cluster`.\n+To display the details of the created topic the `Describe` permission is required for the specific topic.\n+\n+.Producing to the topic\n+\n+In order to produce to the topic the user needs `Describe` and `Write` permissions on the topic.\n+If topic has not yet been created, and autocreation is enabled, the permissions to create the topic are required.\n+\n+.Consuming from the topic\n+\n+In order to consume from the topic the user needs `Describe` and `Read` permissions on the topic.\n+Consuming from the topic normally relies on storing the consumer offsets in a consumer group.\n+That requires additional `Describe` and `Read` permissions on the consumer group.\n+\n+Two `resources` would be needed for matching, for example:\n+\n+    Topic:my-topic\n+    Group:my-group-*\n+\n+.Producing to the topic using an idempotent producer\n+\n+Besides needing the permissions for ordinary producing to the topic, an additional `IdempotentWrite` permission is required on the `Cluster` resource.\n+\n+Two `resources` would be needed for matching, for example:\n+\n+    Topic:my-topic\n+    Cluster:kafka-cluster\n+\n+.Listing the topics", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjgxNDcwOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzoxNDozNVrOH4XegQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzoxNDozNVrOH4XegQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2Njk0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When listing the topics only the topics on which the user has `Describe` permission are returned.\n          \n          \n            \n            When listing topics, only the topics on which a user has `Describe` permission are returned.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528866945", "createdAt": "2020-11-23T17:14:35Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.\n+\n+The `authorization scopes` should simply contain all the possible Kafka permissions regardless of the resource type:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* Alter\n+* DescribeConfig\n+* AlterConfig\n+* ClusterAction\n+* IdempotentWrite\n+\n+.Resources\n+\n+The `resources` use pattern names to be used with pattern matching against the targeted resources when performing the permission check.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+A few examples:\n+\n+    Topic:my-topic\n+    Topic:orders-*\n+    Group:orders-*\n+    Cluster:*\n+\n+In addition, the general pattern can be prefixed by another one of the format `kafka-cluster:CLUSTER_NAME`, followed by comma, where the cluster name refers to the `metadata.name` in the Kafka CR.\n+\n+For example:\n+\n+    kafka-cluster:my-cluster,Topic:*\n+    kafka-cluster:*,Group:b_*\n+\n+When the `kafka-cluster` prefix is not present it is assumed to be `kafka-cluster:*`.\n+\n+When the resource is defined, a list of possible authorization scopes relevant to the resource should be added to the list of scopes.\n+Set whatever actions make sense for the targeted resource type.\n+\n+While you may add any `authorization scope` to any `resource`, only the scopes supported by the resource type will ever matter.\n+\n+.Policies\n+\n+The `policies` are used to target permissions to one or more accounts.\n+The targeting can refer to specific user or service accounts, it can refer to the realm roles or client roles, it can refer to user groups, and it can even use a JS rule and match client's IP address for example.\n+\n+Each policy can be given a name, and can be reused to target multiple permissions to multiple resources.\n+\n+.Permissions\n+\n+The `permissions` are the final step where you pull together the `policies`, `resources`, and `authorization scopes` to grant access to one or more users.\n+\n+Scope permissions should be used to grant fine-grained permissions to users.\n+\n+Each policy should be descriptively named in order to make it very clear what permissions it grants to which users.\n+\n+See xref:con-oauth-authorization-keycloak-example_str[the authorization example] to get a hands-on understanding of how to configure the permissions through Keycloak Authorization Services.\n+\n+\n+== Permissions required by operations\n+\n+.Creating the topic\n+\n+In order to create the topic the `Create` permission is required for the specific topic or on `Cluster:kafka-cluster`.\n+To display the details of the created topic the `Describe` permission is required for the specific topic.\n+\n+.Producing to the topic\n+\n+In order to produce to the topic the user needs `Describe` and `Write` permissions on the topic.\n+If topic has not yet been created, and autocreation is enabled, the permissions to create the topic are required.\n+\n+.Consuming from the topic\n+\n+In order to consume from the topic the user needs `Describe` and `Read` permissions on the topic.\n+Consuming from the topic normally relies on storing the consumer offsets in a consumer group.\n+That requires additional `Describe` and `Read` permissions on the consumer group.\n+\n+Two `resources` would be needed for matching, for example:\n+\n+    Topic:my-topic\n+    Group:my-group-*\n+\n+.Producing to the topic using an idempotent producer\n+\n+Besides needing the permissions for ordinary producing to the topic, an additional `IdempotentWrite` permission is required on the `Cluster` resource.\n+\n+Two `resources` would be needed for matching, for example:\n+\n+    Topic:my-topic\n+    Cluster:kafka-cluster\n+\n+.Listing the topics\n+\n+When listing the topics only the topics on which the user has `Describe` permission are returned.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjgxODQxOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzoxNToyM1rOH4XgrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzoxNToyM1rOH4XgrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2NzUwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `DescribeConfigs` permission is required on the topic in order to get information like partitions, replicas, leaders ...\n          \n          \n            \n            The `DescribeConfigs` permission is required on the topic to be able to retrieve information on partitions, replicas, and so on.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528867500", "createdAt": "2020-11-23T17:15:23Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.\n+\n+The `authorization scopes` should simply contain all the possible Kafka permissions regardless of the resource type:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* Alter\n+* DescribeConfig\n+* AlterConfig\n+* ClusterAction\n+* IdempotentWrite\n+\n+.Resources\n+\n+The `resources` use pattern names to be used with pattern matching against the targeted resources when performing the permission check.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+A few examples:\n+\n+    Topic:my-topic\n+    Topic:orders-*\n+    Group:orders-*\n+    Cluster:*\n+\n+In addition, the general pattern can be prefixed by another one of the format `kafka-cluster:CLUSTER_NAME`, followed by comma, where the cluster name refers to the `metadata.name` in the Kafka CR.\n+\n+For example:\n+\n+    kafka-cluster:my-cluster,Topic:*\n+    kafka-cluster:*,Group:b_*\n+\n+When the `kafka-cluster` prefix is not present it is assumed to be `kafka-cluster:*`.\n+\n+When the resource is defined, a list of possible authorization scopes relevant to the resource should be added to the list of scopes.\n+Set whatever actions make sense for the targeted resource type.\n+\n+While you may add any `authorization scope` to any `resource`, only the scopes supported by the resource type will ever matter.\n+\n+.Policies\n+\n+The `policies` are used to target permissions to one or more accounts.\n+The targeting can refer to specific user or service accounts, it can refer to the realm roles or client roles, it can refer to user groups, and it can even use a JS rule and match client's IP address for example.\n+\n+Each policy can be given a name, and can be reused to target multiple permissions to multiple resources.\n+\n+.Permissions\n+\n+The `permissions` are the final step where you pull together the `policies`, `resources`, and `authorization scopes` to grant access to one or more users.\n+\n+Scope permissions should be used to grant fine-grained permissions to users.\n+\n+Each policy should be descriptively named in order to make it very clear what permissions it grants to which users.\n+\n+See xref:con-oauth-authorization-keycloak-example_str[the authorization example] to get a hands-on understanding of how to configure the permissions through Keycloak Authorization Services.\n+\n+\n+== Permissions required by operations\n+\n+.Creating the topic\n+\n+In order to create the topic the `Create` permission is required for the specific topic or on `Cluster:kafka-cluster`.\n+To display the details of the created topic the `Describe` permission is required for the specific topic.\n+\n+.Producing to the topic\n+\n+In order to produce to the topic the user needs `Describe` and `Write` permissions on the topic.\n+If topic has not yet been created, and autocreation is enabled, the permissions to create the topic are required.\n+\n+.Consuming from the topic\n+\n+In order to consume from the topic the user needs `Describe` and `Read` permissions on the topic.\n+Consuming from the topic normally relies on storing the consumer offsets in a consumer group.\n+That requires additional `Describe` and `Read` permissions on the consumer group.\n+\n+Two `resources` would be needed for matching, for example:\n+\n+    Topic:my-topic\n+    Group:my-group-*\n+\n+.Producing to the topic using an idempotent producer\n+\n+Besides needing the permissions for ordinary producing to the topic, an additional `IdempotentWrite` permission is required on the `Cluster` resource.\n+\n+Two `resources` would be needed for matching, for example:\n+\n+    Topic:my-topic\n+    Cluster:kafka-cluster\n+\n+.Listing the topics\n+\n+When listing the topics only the topics on which the user has `Describe` permission are returned.\n+\n+.Displaying topic details\n+\n+The `DescribeConfigs` permission is required on the topic in order to get information like partitions, replicas, leaders ...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjgyMDM2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzoxNTo0OVrOH4Xhyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzoxNTo0OVrOH4Xhyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2Nzc4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When listing the consumer groups only the groups on which the user has `Describe` permissions are returned.\n          \n          \n            \n            When listing consumer groups, only the groups on which the user has `Describe` permissions are returned.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528867787", "createdAt": "2020-11-23T17:15:49Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.\n+\n+The `authorization scopes` should simply contain all the possible Kafka permissions regardless of the resource type:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* Alter\n+* DescribeConfig\n+* AlterConfig\n+* ClusterAction\n+* IdempotentWrite\n+\n+.Resources\n+\n+The `resources` use pattern names to be used with pattern matching against the targeted resources when performing the permission check.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+A few examples:\n+\n+    Topic:my-topic\n+    Topic:orders-*\n+    Group:orders-*\n+    Cluster:*\n+\n+In addition, the general pattern can be prefixed by another one of the format `kafka-cluster:CLUSTER_NAME`, followed by comma, where the cluster name refers to the `metadata.name` in the Kafka CR.\n+\n+For example:\n+\n+    kafka-cluster:my-cluster,Topic:*\n+    kafka-cluster:*,Group:b_*\n+\n+When the `kafka-cluster` prefix is not present it is assumed to be `kafka-cluster:*`.\n+\n+When the resource is defined, a list of possible authorization scopes relevant to the resource should be added to the list of scopes.\n+Set whatever actions make sense for the targeted resource type.\n+\n+While you may add any `authorization scope` to any `resource`, only the scopes supported by the resource type will ever matter.\n+\n+.Policies\n+\n+The `policies` are used to target permissions to one or more accounts.\n+The targeting can refer to specific user or service accounts, it can refer to the realm roles or client roles, it can refer to user groups, and it can even use a JS rule and match client's IP address for example.\n+\n+Each policy can be given a name, and can be reused to target multiple permissions to multiple resources.\n+\n+.Permissions\n+\n+The `permissions` are the final step where you pull together the `policies`, `resources`, and `authorization scopes` to grant access to one or more users.\n+\n+Scope permissions should be used to grant fine-grained permissions to users.\n+\n+Each policy should be descriptively named in order to make it very clear what permissions it grants to which users.\n+\n+See xref:con-oauth-authorization-keycloak-example_str[the authorization example] to get a hands-on understanding of how to configure the permissions through Keycloak Authorization Services.\n+\n+\n+== Permissions required by operations\n+\n+.Creating the topic\n+\n+In order to create the topic the `Create` permission is required for the specific topic or on `Cluster:kafka-cluster`.\n+To display the details of the created topic the `Describe` permission is required for the specific topic.\n+\n+.Producing to the topic\n+\n+In order to produce to the topic the user needs `Describe` and `Write` permissions on the topic.\n+If topic has not yet been created, and autocreation is enabled, the permissions to create the topic are required.\n+\n+.Consuming from the topic\n+\n+In order to consume from the topic the user needs `Describe` and `Read` permissions on the topic.\n+Consuming from the topic normally relies on storing the consumer offsets in a consumer group.\n+That requires additional `Describe` and `Read` permissions on the consumer group.\n+\n+Two `resources` would be needed for matching, for example:\n+\n+    Topic:my-topic\n+    Group:my-group-*\n+\n+.Producing to the topic using an idempotent producer\n+\n+Besides needing the permissions for ordinary producing to the topic, an additional `IdempotentWrite` permission is required on the `Cluster` resource.\n+\n+Two `resources` would be needed for matching, for example:\n+\n+    Topic:my-topic\n+    Cluster:kafka-cluster\n+\n+.Listing the topics\n+\n+When listing the topics only the topics on which the user has `Describe` permission are returned.\n+\n+.Displaying topic details\n+\n+The `DescribeConfigs` permission is required on the topic in order to get information like partitions, replicas, leaders ...\n+\n+.Listing the consumer groups\n+\n+When listing the consumer groups only the groups on which the user has `Describe` permissions are returned.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjgyMDgxOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzoxNTo1N1rOH4XiFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzoxNTo1N1rOH4XiFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2Nzg2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            .Listing the consumer groups\n          \n          \n            \n            .Listing consumer groups", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528867862", "createdAt": "2020-11-23T17:15:57Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.\n+\n+The `authorization scopes` should simply contain all the possible Kafka permissions regardless of the resource type:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* Alter\n+* DescribeConfig\n+* AlterConfig\n+* ClusterAction\n+* IdempotentWrite\n+\n+.Resources\n+\n+The `resources` use pattern names to be used with pattern matching against the targeted resources when performing the permission check.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+A few examples:\n+\n+    Topic:my-topic\n+    Topic:orders-*\n+    Group:orders-*\n+    Cluster:*\n+\n+In addition, the general pattern can be prefixed by another one of the format `kafka-cluster:CLUSTER_NAME`, followed by comma, where the cluster name refers to the `metadata.name` in the Kafka CR.\n+\n+For example:\n+\n+    kafka-cluster:my-cluster,Topic:*\n+    kafka-cluster:*,Group:b_*\n+\n+When the `kafka-cluster` prefix is not present it is assumed to be `kafka-cluster:*`.\n+\n+When the resource is defined, a list of possible authorization scopes relevant to the resource should be added to the list of scopes.\n+Set whatever actions make sense for the targeted resource type.\n+\n+While you may add any `authorization scope` to any `resource`, only the scopes supported by the resource type will ever matter.\n+\n+.Policies\n+\n+The `policies` are used to target permissions to one or more accounts.\n+The targeting can refer to specific user or service accounts, it can refer to the realm roles or client roles, it can refer to user groups, and it can even use a JS rule and match client's IP address for example.\n+\n+Each policy can be given a name, and can be reused to target multiple permissions to multiple resources.\n+\n+.Permissions\n+\n+The `permissions` are the final step where you pull together the `policies`, `resources`, and `authorization scopes` to grant access to one or more users.\n+\n+Scope permissions should be used to grant fine-grained permissions to users.\n+\n+Each policy should be descriptively named in order to make it very clear what permissions it grants to which users.\n+\n+See xref:con-oauth-authorization-keycloak-example_str[the authorization example] to get a hands-on understanding of how to configure the permissions through Keycloak Authorization Services.\n+\n+\n+== Permissions required by operations\n+\n+.Creating the topic\n+\n+In order to create the topic the `Create` permission is required for the specific topic or on `Cluster:kafka-cluster`.\n+To display the details of the created topic the `Describe` permission is required for the specific topic.\n+\n+.Producing to the topic\n+\n+In order to produce to the topic the user needs `Describe` and `Write` permissions on the topic.\n+If topic has not yet been created, and autocreation is enabled, the permissions to create the topic are required.\n+\n+.Consuming from the topic\n+\n+In order to consume from the topic the user needs `Describe` and `Read` permissions on the topic.\n+Consuming from the topic normally relies on storing the consumer offsets in a consumer group.\n+That requires additional `Describe` and `Read` permissions on the consumer group.\n+\n+Two `resources` would be needed for matching, for example:\n+\n+    Topic:my-topic\n+    Group:my-group-*\n+\n+.Producing to the topic using an idempotent producer\n+\n+Besides needing the permissions for ordinary producing to the topic, an additional `IdempotentWrite` permission is required on the `Cluster` resource.\n+\n+Two `resources` would be needed for matching, for example:\n+\n+    Topic:my-topic\n+    Cluster:kafka-cluster\n+\n+.Listing the topics\n+\n+When listing the topics only the topics on which the user has `Describe` permission are returned.\n+\n+.Displaying topic details\n+\n+The `DescribeConfigs` permission is required on the topic in order to get information like partitions, replicas, leaders ...\n+\n+.Listing the consumer groups", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 186}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjgyMTc5OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzoxNjoxNFrOH4XiuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzoxNjoxNFrOH4XiuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2ODAyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Alternatively, if the user has `Describe` permission on the `Cluster:kafka-cluster` all the consumer groups are returned.\n          \n          \n            \n            Alternatively, if the user has `Describe` permission on the `Cluster:kafka-cluster`, all the consumer groups are returned.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528868025", "createdAt": "2020-11-23T17:16:14Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.\n+\n+The `authorization scopes` should simply contain all the possible Kafka permissions regardless of the resource type:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* Alter\n+* DescribeConfig\n+* AlterConfig\n+* ClusterAction\n+* IdempotentWrite\n+\n+.Resources\n+\n+The `resources` use pattern names to be used with pattern matching against the targeted resources when performing the permission check.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+A few examples:\n+\n+    Topic:my-topic\n+    Topic:orders-*\n+    Group:orders-*\n+    Cluster:*\n+\n+In addition, the general pattern can be prefixed by another one of the format `kafka-cluster:CLUSTER_NAME`, followed by comma, where the cluster name refers to the `metadata.name` in the Kafka CR.\n+\n+For example:\n+\n+    kafka-cluster:my-cluster,Topic:*\n+    kafka-cluster:*,Group:b_*\n+\n+When the `kafka-cluster` prefix is not present it is assumed to be `kafka-cluster:*`.\n+\n+When the resource is defined, a list of possible authorization scopes relevant to the resource should be added to the list of scopes.\n+Set whatever actions make sense for the targeted resource type.\n+\n+While you may add any `authorization scope` to any `resource`, only the scopes supported by the resource type will ever matter.\n+\n+.Policies\n+\n+The `policies` are used to target permissions to one or more accounts.\n+The targeting can refer to specific user or service accounts, it can refer to the realm roles or client roles, it can refer to user groups, and it can even use a JS rule and match client's IP address for example.\n+\n+Each policy can be given a name, and can be reused to target multiple permissions to multiple resources.\n+\n+.Permissions\n+\n+The `permissions` are the final step where you pull together the `policies`, `resources`, and `authorization scopes` to grant access to one or more users.\n+\n+Scope permissions should be used to grant fine-grained permissions to users.\n+\n+Each policy should be descriptively named in order to make it very clear what permissions it grants to which users.\n+\n+See xref:con-oauth-authorization-keycloak-example_str[the authorization example] to get a hands-on understanding of how to configure the permissions through Keycloak Authorization Services.\n+\n+\n+== Permissions required by operations\n+\n+.Creating the topic\n+\n+In order to create the topic the `Create` permission is required for the specific topic or on `Cluster:kafka-cluster`.\n+To display the details of the created topic the `Describe` permission is required for the specific topic.\n+\n+.Producing to the topic\n+\n+In order to produce to the topic the user needs `Describe` and `Write` permissions on the topic.\n+If topic has not yet been created, and autocreation is enabled, the permissions to create the topic are required.\n+\n+.Consuming from the topic\n+\n+In order to consume from the topic the user needs `Describe` and `Read` permissions on the topic.\n+Consuming from the topic normally relies on storing the consumer offsets in a consumer group.\n+That requires additional `Describe` and `Read` permissions on the consumer group.\n+\n+Two `resources` would be needed for matching, for example:\n+\n+    Topic:my-topic\n+    Group:my-group-*\n+\n+.Producing to the topic using an idempotent producer\n+\n+Besides needing the permissions for ordinary producing to the topic, an additional `IdempotentWrite` permission is required on the `Cluster` resource.\n+\n+Two `resources` would be needed for matching, for example:\n+\n+    Topic:my-topic\n+    Cluster:kafka-cluster\n+\n+.Listing the topics\n+\n+When listing the topics only the topics on which the user has `Describe` permission are returned.\n+\n+.Displaying topic details\n+\n+The `DescribeConfigs` permission is required on the topic in order to get information like partitions, replicas, leaders ...\n+\n+.Listing the consumer groups\n+\n+When listing the consumer groups only the groups on which the user has `Describe` permissions are returned.\n+Alternatively, if the user has `Describe` permission on the `Cluster:kafka-cluster` all the consumer groups are returned.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjgyNDg2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzoxNjo1OFrOH4Xkmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzoxNjo1OFrOH4Xkmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2ODUwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Using `kafka-configs.sh` to get the broker configuration requires `Describe` permission on the `Cluster:kafka-cluster`.\n          \n          \n            \n            To be able to use `kafka-configs.sh` to get the broker configuration, `Describe` permission is required on the `Cluster:kafka-cluster`.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528868507", "createdAt": "2020-11-23T17:16:58Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.\n+\n+The `authorization scopes` should simply contain all the possible Kafka permissions regardless of the resource type:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* Alter\n+* DescribeConfig\n+* AlterConfig\n+* ClusterAction\n+* IdempotentWrite\n+\n+.Resources\n+\n+The `resources` use pattern names to be used with pattern matching against the targeted resources when performing the permission check.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+A few examples:\n+\n+    Topic:my-topic\n+    Topic:orders-*\n+    Group:orders-*\n+    Cluster:*\n+\n+In addition, the general pattern can be prefixed by another one of the format `kafka-cluster:CLUSTER_NAME`, followed by comma, where the cluster name refers to the `metadata.name` in the Kafka CR.\n+\n+For example:\n+\n+    kafka-cluster:my-cluster,Topic:*\n+    kafka-cluster:*,Group:b_*\n+\n+When the `kafka-cluster` prefix is not present it is assumed to be `kafka-cluster:*`.\n+\n+When the resource is defined, a list of possible authorization scopes relevant to the resource should be added to the list of scopes.\n+Set whatever actions make sense for the targeted resource type.\n+\n+While you may add any `authorization scope` to any `resource`, only the scopes supported by the resource type will ever matter.\n+\n+.Policies\n+\n+The `policies` are used to target permissions to one or more accounts.\n+The targeting can refer to specific user or service accounts, it can refer to the realm roles or client roles, it can refer to user groups, and it can even use a JS rule and match client's IP address for example.\n+\n+Each policy can be given a name, and can be reused to target multiple permissions to multiple resources.\n+\n+.Permissions\n+\n+The `permissions` are the final step where you pull together the `policies`, `resources`, and `authorization scopes` to grant access to one or more users.\n+\n+Scope permissions should be used to grant fine-grained permissions to users.\n+\n+Each policy should be descriptively named in order to make it very clear what permissions it grants to which users.\n+\n+See xref:con-oauth-authorization-keycloak-example_str[the authorization example] to get a hands-on understanding of how to configure the permissions through Keycloak Authorization Services.\n+\n+\n+== Permissions required by operations\n+\n+.Creating the topic\n+\n+In order to create the topic the `Create` permission is required for the specific topic or on `Cluster:kafka-cluster`.\n+To display the details of the created topic the `Describe` permission is required for the specific topic.\n+\n+.Producing to the topic\n+\n+In order to produce to the topic the user needs `Describe` and `Write` permissions on the topic.\n+If topic has not yet been created, and autocreation is enabled, the permissions to create the topic are required.\n+\n+.Consuming from the topic\n+\n+In order to consume from the topic the user needs `Describe` and `Read` permissions on the topic.\n+Consuming from the topic normally relies on storing the consumer offsets in a consumer group.\n+That requires additional `Describe` and `Read` permissions on the consumer group.\n+\n+Two `resources` would be needed for matching, for example:\n+\n+    Topic:my-topic\n+    Group:my-group-*\n+\n+.Producing to the topic using an idempotent producer\n+\n+Besides needing the permissions for ordinary producing to the topic, an additional `IdempotentWrite` permission is required on the `Cluster` resource.\n+\n+Two `resources` would be needed for matching, for example:\n+\n+    Topic:my-topic\n+    Cluster:kafka-cluster\n+\n+.Listing the topics\n+\n+When listing the topics only the topics on which the user has `Describe` permission are returned.\n+\n+.Displaying topic details\n+\n+The `DescribeConfigs` permission is required on the topic in order to get information like partitions, replicas, leaders ...\n+\n+.Listing the consumer groups\n+\n+When listing the consumer groups only the groups on which the user has `Describe` permissions are returned.\n+Alternatively, if the user has `Describe` permission on the `Cluster:kafka-cluster` all the consumer groups are returned.\n+\n+.Getting the Kafka broker configuration\n+\n+Using `kafka-configs.sh` to get the broker configuration requires `Describe` permission on the `Cluster:kafka-cluster`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 193}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjgyNzQ1OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzoxNzozM1rOH4XmNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzoxNzozM1rOH4XmNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2ODkxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            .Describing the consumer groups\n          \n          \n            \n            .Describing consumer groups", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528868916", "createdAt": "2020-11-23T17:17:33Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.\n+\n+The `authorization scopes` should simply contain all the possible Kafka permissions regardless of the resource type:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* Alter\n+* DescribeConfig\n+* AlterConfig\n+* ClusterAction\n+* IdempotentWrite\n+\n+.Resources\n+\n+The `resources` use pattern names to be used with pattern matching against the targeted resources when performing the permission check.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+A few examples:\n+\n+    Topic:my-topic\n+    Topic:orders-*\n+    Group:orders-*\n+    Cluster:*\n+\n+In addition, the general pattern can be prefixed by another one of the format `kafka-cluster:CLUSTER_NAME`, followed by comma, where the cluster name refers to the `metadata.name` in the Kafka CR.\n+\n+For example:\n+\n+    kafka-cluster:my-cluster,Topic:*\n+    kafka-cluster:*,Group:b_*\n+\n+When the `kafka-cluster` prefix is not present it is assumed to be `kafka-cluster:*`.\n+\n+When the resource is defined, a list of possible authorization scopes relevant to the resource should be added to the list of scopes.\n+Set whatever actions make sense for the targeted resource type.\n+\n+While you may add any `authorization scope` to any `resource`, only the scopes supported by the resource type will ever matter.\n+\n+.Policies\n+\n+The `policies` are used to target permissions to one or more accounts.\n+The targeting can refer to specific user or service accounts, it can refer to the realm roles or client roles, it can refer to user groups, and it can even use a JS rule and match client's IP address for example.\n+\n+Each policy can be given a name, and can be reused to target multiple permissions to multiple resources.\n+\n+.Permissions\n+\n+The `permissions` are the final step where you pull together the `policies`, `resources`, and `authorization scopes` to grant access to one or more users.\n+\n+Scope permissions should be used to grant fine-grained permissions to users.\n+\n+Each policy should be descriptively named in order to make it very clear what permissions it grants to which users.\n+\n+See xref:con-oauth-authorization-keycloak-example_str[the authorization example] to get a hands-on understanding of how to configure the permissions through Keycloak Authorization Services.\n+\n+\n+== Permissions required by operations\n+\n+.Creating the topic\n+\n+In order to create the topic the `Create` permission is required for the specific topic or on `Cluster:kafka-cluster`.\n+To display the details of the created topic the `Describe` permission is required for the specific topic.\n+\n+.Producing to the topic\n+\n+In order to produce to the topic the user needs `Describe` and `Write` permissions on the topic.\n+If topic has not yet been created, and autocreation is enabled, the permissions to create the topic are required.\n+\n+.Consuming from the topic\n+\n+In order to consume from the topic the user needs `Describe` and `Read` permissions on the topic.\n+Consuming from the topic normally relies on storing the consumer offsets in a consumer group.\n+That requires additional `Describe` and `Read` permissions on the consumer group.\n+\n+Two `resources` would be needed for matching, for example:\n+\n+    Topic:my-topic\n+    Group:my-group-*\n+\n+.Producing to the topic using an idempotent producer\n+\n+Besides needing the permissions for ordinary producing to the topic, an additional `IdempotentWrite` permission is required on the `Cluster` resource.\n+\n+Two `resources` would be needed for matching, for example:\n+\n+    Topic:my-topic\n+    Cluster:kafka-cluster\n+\n+.Listing the topics\n+\n+When listing the topics only the topics on which the user has `Describe` permission are returned.\n+\n+.Displaying topic details\n+\n+The `DescribeConfigs` permission is required on the topic in order to get information like partitions, replicas, leaders ...\n+\n+.Listing the consumer groups\n+\n+When listing the consumer groups only the groups on which the user has `Describe` permissions are returned.\n+Alternatively, if the user has `Describe` permission on the `Cluster:kafka-cluster` all the consumer groups are returned.\n+\n+.Getting the Kafka broker configuration\n+\n+Using `kafka-configs.sh` to get the broker configuration requires `Describe` permission on the `Cluster:kafka-cluster`.\n+\n+.Describing the consumer groups", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjgzMDU3OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzoxODoyNFrOH4XoMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzoxODoyNFrOH4XoMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2OTQyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Using `kafka-consumer-groups.sh` to get the detailed information about all the consumer groups requires `Describe` permission on the `Cluster:kafka-cluster`.\n          \n          \n            \n            To be able to `kafka-consumer-groups.sh` to get detailed information about all consumer groups, `Describe` permission is required on the `Cluster:kafka-cluster`.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528869425", "createdAt": "2020-11-23T17:18:24Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,199 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Manage policies and permissions in Keycloak Authorization Services\n+\n+== Kafka Authorization Model\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and permissions available for each type.\n+Whenever some action is performed by the Kafka client, one or more permissions are checked by the broker (depending on the action performed) using the configured authorizer.\n+\n+There are five resource types: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+And these are the different permissions for each resource type:\n+\n+Topic:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* DescribeConfigs\n+* Alter\n+* AlterConfigs\n+\n+Group:\n+\n+* Read\n+* Describe\n+* Delete\n+\n+Cluster:\n+\n+*  Create\n+*  Describe\n+*  Alter\n+*  DescribeConfigs\n+*  AlterConfigs\n+*  IdempotentWrite\n+*  ClusterAction\n+\n+TransactionalId:\n+\n+*  Describe\n+*  Write\n+\n+DelegationToken:\n+\n+* Describe\n+\n+\n+== Keycloak Authorization Services Model\n+\n+There are four concepts used in Keycloak Authorization Services to grant permissions: `resources`, `authorization scopes`, `policies`, and `permissions`.\n+\n+`Resources` are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with some prefix.\n+The resource definition has a set of available `authorization scopes` associated with it. These represent a set of all actions that can be permitted.\n+Often, only a subset of these actions is actually permitted.\n+\n+`Authorization scopes` is simply a set of all available actions on all the different resource types. When defining a new `resource` the `scopes` added there are taken from this set of all scopes.\n+\n+`Policies` are rules that can use various criteria to match a list of accounts. They can match service accounts based on clientId, they can match user accounts based on username, or group, or roles.\n+\n+Finally, `Permissions` are used to grant a subset of `authorization scopes` on the specific `resource` definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+In order to grant Kafka permissions to users or service accounts you have to use the Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker - typically this client has `kafka` as its clientId.\n+\n+This client needs to have `Authorization Enabled` option activated.\n+\n+All the permissions exist within the scope of this OAuth client, which means that if you have different Kafka clusters configured with different OAuth client ids they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client authenticates using `SASL_OAUTHBEARER` the `KeycloakRBACAuthorizer` retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Authorization scopes\n+\n+Typically the initial configuration involves uploading the authorization scopes which creates a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, the authorization scopes can be added manually, but make sure to not introduce typos.\n+\n+The `authorization scopes` should simply contain all the possible Kafka permissions regardless of the resource type:\n+\n+* Create\n+* Write\n+* Read\n+* Delete\n+* Describe\n+* Alter\n+* DescribeConfig\n+* AlterConfig\n+* ClusterAction\n+* IdempotentWrite\n+\n+.Resources\n+\n+The `resources` use pattern names to be used with pattern matching against the targeted resources when performing the permission check.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+A few examples:\n+\n+    Topic:my-topic\n+    Topic:orders-*\n+    Group:orders-*\n+    Cluster:*\n+\n+In addition, the general pattern can be prefixed by another one of the format `kafka-cluster:CLUSTER_NAME`, followed by comma, where the cluster name refers to the `metadata.name` in the Kafka CR.\n+\n+For example:\n+\n+    kafka-cluster:my-cluster,Topic:*\n+    kafka-cluster:*,Group:b_*\n+\n+When the `kafka-cluster` prefix is not present it is assumed to be `kafka-cluster:*`.\n+\n+When the resource is defined, a list of possible authorization scopes relevant to the resource should be added to the list of scopes.\n+Set whatever actions make sense for the targeted resource type.\n+\n+While you may add any `authorization scope` to any `resource`, only the scopes supported by the resource type will ever matter.\n+\n+.Policies\n+\n+The `policies` are used to target permissions to one or more accounts.\n+The targeting can refer to specific user or service accounts, it can refer to the realm roles or client roles, it can refer to user groups, and it can even use a JS rule and match client's IP address for example.\n+\n+Each policy can be given a name, and can be reused to target multiple permissions to multiple resources.\n+\n+.Permissions\n+\n+The `permissions` are the final step where you pull together the `policies`, `resources`, and `authorization scopes` to grant access to one or more users.\n+\n+Scope permissions should be used to grant fine-grained permissions to users.\n+\n+Each policy should be descriptively named in order to make it very clear what permissions it grants to which users.\n+\n+See xref:con-oauth-authorization-keycloak-example_str[the authorization example] to get a hands-on understanding of how to configure the permissions through Keycloak Authorization Services.\n+\n+\n+== Permissions required by operations\n+\n+.Creating the topic\n+\n+In order to create the topic the `Create` permission is required for the specific topic or on `Cluster:kafka-cluster`.\n+To display the details of the created topic the `Describe` permission is required for the specific topic.\n+\n+.Producing to the topic\n+\n+In order to produce to the topic the user needs `Describe` and `Write` permissions on the topic.\n+If topic has not yet been created, and autocreation is enabled, the permissions to create the topic are required.\n+\n+.Consuming from the topic\n+\n+In order to consume from the topic the user needs `Describe` and `Read` permissions on the topic.\n+Consuming from the topic normally relies on storing the consumer offsets in a consumer group.\n+That requires additional `Describe` and `Read` permissions on the consumer group.\n+\n+Two `resources` would be needed for matching, for example:\n+\n+    Topic:my-topic\n+    Group:my-group-*\n+\n+.Producing to the topic using an idempotent producer\n+\n+Besides needing the permissions for ordinary producing to the topic, an additional `IdempotentWrite` permission is required on the `Cluster` resource.\n+\n+Two `resources` would be needed for matching, for example:\n+\n+    Topic:my-topic\n+    Cluster:kafka-cluster\n+\n+.Listing the topics\n+\n+When listing the topics only the topics on which the user has `Describe` permission are returned.\n+\n+.Displaying topic details\n+\n+The `DescribeConfigs` permission is required on the topic in order to get information like partitions, replicas, leaders ...\n+\n+.Listing the consumer groups\n+\n+When listing the consumer groups only the groups on which the user has `Describe` permissions are returned.\n+Alternatively, if the user has `Describe` permission on the `Cluster:kafka-cluster` all the consumer groups are returned.\n+\n+.Getting the Kafka broker configuration\n+\n+Using `kafka-configs.sh` to get the broker configuration requires `Describe` permission on the `Cluster:kafka-cluster`.\n+\n+.Describing the consumer groups\n+\n+Using `kafka-consumer-groups.sh` to get the detailed information about all the consumer groups requires `Describe` permission on the `Cluster:kafka-cluster`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjg0NjkwOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzoyMjowOVrOH4XySA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODowNjoxNlrOH4wUyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg3MjAwOA==", "bodyText": "Can we introduce what we're trying to achieve with this example? And how each section helps.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528872008", "createdAt": "2020-11-23T17:22:09Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkxNjk5MA==", "bodyText": "Hmmm ... It's an end to end example that demonstrates how to configure permissions. It's actually the more important addition in terms of helping users to use Keycloak Authorization Services for authorization. It is a 'port' of examples/README-authz.md from Docker to Strimzi and was requested by users. As such it is written in a different style as the regular documentations.\nI don't know how to address the sections part but the introduction could be something like:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            = Keycloak Authorization Services Example\n          \n          \n            \n            = Keycloak Authorization Services Example\n          \n          \n            \n            \n          \n          \n            \n            This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n          \n          \n            \n            The example starts by deploying the Keycloak server with pre-configured realm, requiring no additional configuration.\n          \n          \n            \n            We deploy the Kafka cluster configured to use one of the pre-configured realms.\n          \n          \n            \n            We connect to the Keycloak Admin Console and demonstrate the sections of the UI where authorizations rules are configured.\n          \n          \n            \n            We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528916990", "createdAt": "2020-11-23T18:38:32Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg3MjAwOA=="}, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI3NDA1Ng==", "bodyText": "Great. Looks good Marko. Couple of things: with pre-configured realms? And we use user interface rather than UI. \ud83d\udc4d", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529274056", "createdAt": "2020-11-24T08:06:16Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg3MjAwOA=="}, "originalCommit": {"oid": "7ea78555314cba3a00a177f43668fd505efd7e3e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzAzMTI5OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxODowOToyNlrOH4Zi2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxODowOToyNlrOH4Zi2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkwMDgyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Here are a few examples which permissions are required when performing some operations on Kafka.\n          \n          \n            \n            The following  examples demonstrate the permissions required for performing common operations on Kafka.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528900826", "createdAt": "2020-11-23T18:09:26Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,204 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Managing policies and permissions in Keycloak Authorization Services\n+\n+== Kafka authorization model for resources\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and the permissions available for each type.\n+When an action is performed by a Kafka client on a broker, the broker uses a configured authorizer to check permissions, depending on the action performed and the resource type.\n+\n+Kafka has five resource types for controlling access: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+Each resource type has different permissions:\n+\n+Topic:\n+\n+* `Create`\n+* `Write`\n+* `Read`\n+* `Delete`\n+* `Describe`\n+* `DescribeConfigs`\n+* `Alter`\n+* `AlterConfigs`\n+\n+Group:\n+\n+* `Read`\n+* `Describe`\n+* `Delete`\n+\n+Cluster:\n+\n+*  `Create`\n+*  `Describe`\n+*  `Alter`\n+*  `DescribeConfigs`\n+*  `AlterConfigs`\n+*  `IdempotentWrite`\n+*  `ClusterAction`\n+\n+TransactionalId:\n+\n+*  `Describe`\n+*  `Write`\n+\n+DelegationToken:\n+\n+* `Describe`\n+\n+== Keycloak Authorization Services model for managing permissions\n+\n+Keycloak Authorization Services use four concepts to define and grant permissions: _resources_, _authorization scopes_, _policies_, and _permissions_.\n+\n+Resources:: Resources are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with the same prefix.\n+The resource definition has a set of available authorization scopes associated with it, which represent a set of all actions available on the particular resource.\n+Often, only a subset of these actions is actually permitted.\n+\n+Authorization scopes:: Authorization scopes is simply a set of all available actions on all the different resource types. When defining a new resource,  scopes are added from the set of all scopes.\n+\n+Policies:: Policies are rules that use criteria to match a list of accounts. Policies can match service accounts based on client id or roles, or user accounts based on username, groups, or roles.\n+\n+Permissions:: Permissions grant a subset of authorization scopes on a specific resource definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+Use Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker to grant Kafka permissions to users or service accounts. Typically, the OAuth client has `kafka` as its client id.\n+\n+The OAuth 2.0 client definition must have the _Authorization Enabled_ option activated.\n+\n+All permissions exist within the scope of this OAuth 2.0 client, which means that if you have different Kafka clusters configured with different OAuth 2.0 client IDs they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client use the _SASL OAUTHBEARER_ mechanism, the Keycloak authorizer (`KeycloakRBACAuthorizer`) retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Introducing authorization scopes\n+\n+Typically, an initial configuration involves uploading the authorization scopes to create a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, you can add authorization scopes manually.\n+\n+The authorization scopes should contain all the possible Kafka permissions regardless of the resource type:\n+\n+* `Create`\n+* `Write`\n+* `Read`\n+* `Delete`\n+* `Describe`\n+* `Alter`\n+* `DescribeConfig`\n+* `AlterConfig`\n+* `ClusterAction`\n+* `IdempotentWrite`\n+\n+.Defining resource patterns for permission checks\n+\n+The resources use pattern names for pattern matching against the targeted resources when performing permission checks.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+.Example patterns for resources\n+    Topic:my-topic\n+    Topic:orders-*\n+    Group:orders-*\n+    Cluster:*\n+\n+In addition, the general pattern can be prefixed by `kafka-cluster:CLUSTER_NAME` followed by a comma, where the cluster name refers to the `metadata.name` in the Kafka custom resource.\n+\n+.Example patterns for resources with cluster prefix\n+    kafka-cluster:my-cluster,Topic:*\n+    kafka-cluster:*,Group:b_*\n+\n+When the `kafka-cluster` prefix is not present it is assumed to be `kafka-cluster:*`.\n+\n+When defining a resource, you can associate a list of possible authorization scopes relevant to the resource.\n+Set whatever actions make sense for the targeted resource type.\n+\n+While you may add any authorization scope to any resource, only the scopes supported by the resource type are considered for access control.\n+\n+.Policies\n+\n+Policies are used to target permissions to one or more accounts.\n+Targeting can refer to:\n+* Specific user or service accounts\n+* Realm roles or client roles\n+* User groups\n+* JS rule to match a client IP address\n+\n+A policy is given a unique name, and can be reused to target multiple permissions to multiple resources.\n+\n+.Defining permissions based on scopes, resources and policies \n+\n+Use fine-grained permissions to pull together the policies, resources, and authorization scopes that grant access to users.\n+\n+\n+The name of the each permission should should clearly define what permissions it grants to which users.\n+\n+For more information on how to configure permissions through Keycloak Authorization Services, see xref:con-oauth-authorization-keycloak-example_str[the authorization example].\n+\n+\n+== Permissions required by operations\n+\n+Here are a few examples which permissions are required when performing some operations on Kafka.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa6bfd6fb3a5ce8e0ccd57f2341af72e4b87786d"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzAzMzY1OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxODoxMDowM1rOH4ZkSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxODoxMDowM1rOH4ZkSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkwMTE5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            == Permissions required by operations\n          \n          \n            \n            == Example permissions required for operations on Kafka", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r528901194", "createdAt": "2020-11-23T18:10:03Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-authorization-services.adoc", "diffHunk": "@@ -0,0 +1,204 @@\n+// Module included in the following module:\n+//\n+// proc-oauth-authorization-broker-config.adoc\n+\n+[id='con-oauth-authorization-keycloak-authorization-services_{context}']\n+= Managing policies and permissions in Keycloak Authorization Services\n+\n+== Kafka authorization model for resources\n+\n+The link:https://kafka.apache.org/documentation/#security_authz_primitives[Kafka authorization model] defines resource types, and the permissions available for each type.\n+When an action is performed by a Kafka client on a broker, the broker uses a configured authorizer to check permissions, depending on the action performed and the resource type.\n+\n+Kafka has five resource types for controlling access: `Topic`, `Group`, `Cluster`, `TransactionalId`, `DelegationToken`.\n+\n+Each resource type has different permissions:\n+\n+Topic:\n+\n+* `Create`\n+* `Write`\n+* `Read`\n+* `Delete`\n+* `Describe`\n+* `DescribeConfigs`\n+* `Alter`\n+* `AlterConfigs`\n+\n+Group:\n+\n+* `Read`\n+* `Describe`\n+* `Delete`\n+\n+Cluster:\n+\n+*  `Create`\n+*  `Describe`\n+*  `Alter`\n+*  `DescribeConfigs`\n+*  `AlterConfigs`\n+*  `IdempotentWrite`\n+*  `ClusterAction`\n+\n+TransactionalId:\n+\n+*  `Describe`\n+*  `Write`\n+\n+DelegationToken:\n+\n+* `Describe`\n+\n+== Keycloak Authorization Services model for managing permissions\n+\n+Keycloak Authorization Services use four concepts to define and grant permissions: _resources_, _authorization scopes_, _policies_, and _permissions_.\n+\n+Resources:: Resources are a set of resource definitions that are used to match permitted actions.\n+For example, a resource can be an individual topic, or it can be a set of all topics with names that start with the same prefix.\n+The resource definition has a set of available authorization scopes associated with it, which represent a set of all actions available on the particular resource.\n+Often, only a subset of these actions is actually permitted.\n+\n+Authorization scopes:: Authorization scopes is simply a set of all available actions on all the different resource types. When defining a new resource,  scopes are added from the set of all scopes.\n+\n+Policies:: Policies are rules that use criteria to match a list of accounts. Policies can match service accounts based on client id or roles, or user accounts based on username, groups, or roles.\n+\n+Permissions:: Permissions grant a subset of authorization scopes on a specific resource definition to a set of users.\n+\n+== Mapping Keycloak Authorization Services to Kafka Model\n+\n+Use Keycloak Authorization Services rules on the OAuth client that represents the Kafka Broker to grant Kafka permissions to users or service accounts. Typically, the OAuth client has `kafka` as its client id.\n+\n+The OAuth 2.0 client definition must have the _Authorization Enabled_ option activated.\n+\n+All permissions exist within the scope of this OAuth 2.0 client, which means that if you have different Kafka clusters configured with different OAuth 2.0 client IDs they would each have a separate set of permissions even though they are part of the same realm.\n+\n+When the Kafka client use the _SASL OAUTHBEARER_ mechanism, the Keycloak authorizer (`KeycloakRBACAuthorizer`) retrieves the list of grants for the current session from the Keycloak server using the access token of the current session.\n+This list of grants is the result of evaluating the Keycloak Authorization Services policies and permissions.\n+\n+.Introducing authorization scopes\n+\n+Typically, an initial configuration involves uploading the authorization scopes to create a list of all the possible actions that can be performed on all the Kafka resource types.\n+This step is performed only once, before defining any permissions. Alternatively, you can add authorization scopes manually.\n+\n+The authorization scopes should contain all the possible Kafka permissions regardless of the resource type:\n+\n+* `Create`\n+* `Write`\n+* `Read`\n+* `Delete`\n+* `Describe`\n+* `Alter`\n+* `DescribeConfig`\n+* `AlterConfig`\n+* `ClusterAction`\n+* `IdempotentWrite`\n+\n+.Defining resource patterns for permission checks\n+\n+The resources use pattern names for pattern matching against the targeted resources when performing permission checks.\n+\n+The general pattern is as follows: `RESOURCE_TYPE:NAME_PATTERN`\n+\n+The resource types mirror the Kafka authorization model.\n+The pattern allows for the two matching options: exact matching (when the pattern does not end with `\\*`), and prefix matching (when the pattern ends with `*`).\n+\n+.Example patterns for resources\n+    Topic:my-topic\n+    Topic:orders-*\n+    Group:orders-*\n+    Cluster:*\n+\n+In addition, the general pattern can be prefixed by `kafka-cluster:CLUSTER_NAME` followed by a comma, where the cluster name refers to the `metadata.name` in the Kafka custom resource.\n+\n+.Example patterns for resources with cluster prefix\n+    kafka-cluster:my-cluster,Topic:*\n+    kafka-cluster:*,Group:b_*\n+\n+When the `kafka-cluster` prefix is not present it is assumed to be `kafka-cluster:*`.\n+\n+When defining a resource, you can associate a list of possible authorization scopes relevant to the resource.\n+Set whatever actions make sense for the targeted resource type.\n+\n+While you may add any authorization scope to any resource, only the scopes supported by the resource type are considered for access control.\n+\n+.Policies\n+\n+Policies are used to target permissions to one or more accounts.\n+Targeting can refer to:\n+* Specific user or service accounts\n+* Realm roles or client roles\n+* User groups\n+* JS rule to match a client IP address\n+\n+A policy is given a unique name, and can be reused to target multiple permissions to multiple resources.\n+\n+.Defining permissions based on scopes, resources and policies \n+\n+Use fine-grained permissions to pull together the policies, resources, and authorization scopes that grant access to users.\n+\n+\n+The name of the each permission should should clearly define what permissions it grants to which users.\n+\n+For more information on how to configure permissions through Keycloak Authorization Services, see xref:con-oauth-authorization-keycloak-example_str[the authorization example].\n+\n+\n+== Permissions required by operations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa6bfd6fb3a5ce8e0ccd57f2341af72e4b87786d"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTQwNjkzOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODowNzoyNFrOH4wXCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODowNzoyNFrOH4wXCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI3NDYzMg==", "bodyText": "Are we replacing OAuth with OAuth 2.0?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529274632", "createdAt": "2020-11-24T08:07:24Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTQwODY1OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODowNzo0OVrOH4wYDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODowNzo0OVrOH4wYDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI3NDg5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n          \n          \n            \n            For this, Strimzi Kafka OAuth supports the use of Keycloak Authorization Services.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529274895", "createdAt": "2020-11-24T08:07:49Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTQxMTIzOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODowODo0M1rOH4wZ1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODowODo0M1rOH4wZ1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI3NTM0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n          \n          \n            \n            A custom authorizer has to be configured on the Kafka Broker to take advantage of the Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529275348", "createdAt": "2020-11-24T08:08:43Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTQxNTQyOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODowOTo1MFrOH4wceQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODowOTo1MFrOH4wceQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI3NjAyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n          \n          \n            \n            The list of grants (permissions) is fetched as the first action after an authenticated session is established by the Kafka client, and then regularly refreshed in the background.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529276025", "createdAt": "2020-11-24T08:09:50Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTQyNTA1OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODoxMjoxNVrOH4wiNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODoxMjoxNVrOH4wiNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI3NzQ5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n          \n          \n            \n            Grants are cached and enforced locally on the Kafka Broker for each user session to provide fast authorization decisions. Because they are refreshed, any changes to the grants on the Keycloak server are detected and enforced.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529277493", "createdAt": "2020-11-24T08:12:15Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTQ1MjUzOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODoyMDowNVrOH4wzYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODoyMDowNVrOH4wzYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI4MTg4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            = Keycloak Authorization Services Example\n          \n          \n            \n            = Example authorization rules configuration using Authorization Services", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529281889", "createdAt": "2020-11-24T08:20:05Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTQ1NTgxOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODoyMDo1OFrOH4w1fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODoyMDo1OFrOH4w1fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI4MjQyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ## Token Based Authorization with Keycloak Authorization Services\n          \n          \n            \n            == Token-based authorization with Keycloak Authorization Services", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529282429", "createdAt": "2020-11-24T08:20:58Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTQ1NzExOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODoyMToxNlrOH4w2Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODoyMToxNlrOH4w2Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI4MjYyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ## Starting Up the Pods\n          \n          \n            \n            == Starting Up the Pods", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529282622", "createdAt": "2020-11-24T08:21:16Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTQ2NzcyOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODoyMzo1NlrOH4w81Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODoyMzo1NlrOH4w81Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI4NDMwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n          \n          \n            \n            If your default namespace is not `myproject` (for example, `default`), use the following to deploy Keycloak:", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529284309", "createdAt": "2020-11-24T08:23:56Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTQ4NTI1OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODoyODoxOVrOH4xH0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODoyODoxOVrOH4xH0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI4NzEyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n          \n          \n            \n            [source,shell]\n          \n          \n            \n            ----\n          \n          \n            \n            export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n          \n          \n            \n            ----", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529287123", "createdAt": "2020-11-24T08:28:19Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTQ4OTUzOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODoyOToyMFrOH4xKdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODoyOToyMFrOH4xKdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI4Nzc5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n          \n          \n            \n                kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n          \n          \n            \n            [source,shell]\n          \n          \n            \n            ----\n          \n          \n            \n            kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n          \n          \n            \n            kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n          \n          \n            \n            ----", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529287799", "createdAt": "2020-11-24T08:29:20Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTQ5OTI1OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODozMTozNVrOH4xQWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODozMTozNVrOH4xQWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI4OTMwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n          \n          \n            \n                kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n          \n          \n            \n            [source,shell]\n          \n          \n            \n            ----\n          \n          \n            \n            kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n          \n          \n            \n            kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n          \n          \n            \n            ----", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529289304", "createdAt": "2020-11-24T08:31:35Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTUwMTQ5OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODozMjoxNlrOH4xR3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODozMjoxNlrOH4xR3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI4OTY5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n          \n          \n            \n            [source,shell]\n          \n          \n            \n            ----\n          \n          \n            \n            curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n          \n          \n            \n            ----", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529289694", "createdAt": "2020-11-24T08:32:16Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTUwNDExOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODozMjo1OVrOH4xTnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODozMjo1OVrOH4xTnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI5MDE0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n          \n          \n            \n            [source,shell]\n          \n          \n            \n            ----\n          \n          \n            \n            kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n          \n          \n            \n            ----", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529290141", "createdAt": "2020-11-24T08:32:59Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTUwNTgwOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODozMzozMVrOH4xUyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODozMzozMVrOH4xUyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI5MDQ0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                kubectl port-forward keycloak 8080\n          \n          \n            \n            [source,shell]\n          \n          \n            \n            ----\n          \n          \n            \n            kubectl port-forward keycloak 8080\n          \n          \n            \n            ----", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529290440", "createdAt": "2020-11-24T08:33:31Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTUwNzE4OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODozMzo1N1rOH4xVsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODozMzo1N1rOH4xVsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI5MDY3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ## Using the Keycloak Admin Console to Configure Authorization\n          \n          \n            \n            == Using the Keycloak Admin Console to configure authorization", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529290675", "createdAt": "2020-11-24T08:33:57Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTUxMDY1OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODozNDo0OVrOH4xXzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODozNDo0OVrOH4xXzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI5MTIxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            .Deploy the Postgres database for the Keycloak\n          \n          \n            \n            .Deploy the Postgres database for Keycloak", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529291214", "createdAt": "2020-11-24T08:34:49Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTUxMzczOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODozNTozN1rOH4xZtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODozNTozN1rOH4xZtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI5MTcwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n          \n          \n            \n            Use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as username and password.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529291700", "createdAt": "2020-11-24T08:35:37Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTUxODM4OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODozNjo1MlrOH4xcrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOToyNzowOFrOH40gtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI5MjQ2MA==", "bodyText": "I wonder if we're too detailed here, particularly as it's not core Strimzi/Streams content. If the User interface changes, this content might easily fall out of sync.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529292460", "createdAt": "2020-11-24T08:36:52Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM0MjY0NQ==", "bodyText": "The UI hasn't changed for years so it's unlikely to change soon. It's essential that users have no doubt when following the instructions which due to Keycloak Admin Console UI being very complex is quite likely if not giving them detailed instructions.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529342645", "createdAt": "2020-11-24T09:27:08Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI5MjQ2MA=="}, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTUzMDY0OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODozOTo1NFrOH4xkMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDoyNDo1NFrOH51vNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI5NDM4NA==", "bodyText": "Could we drop the specifics from In the upper left corner...to  ...for the kafka-authz realm. and just say: Locate and open Realm Settings for the kafka-authz realm?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529294384", "createdAt": "2020-11-24T08:39:54Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI5NzY1MQ==", "bodyText": "Highlight ui text with bold (* each side of *\\text*)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529297651", "createdAt": "2020-11-24T08:44:51Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI5NDM4NA=="}, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM1MjM1Ng==", "bodyText": "Absolutely.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529352356", "createdAt": "2020-11-24T09:34:50Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI5NDM4NA=="}, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczMDk0Mg==", "bodyText": "In fact, it's quite a bit more tricky. Let me think a bit about this.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529730942", "createdAt": "2020-11-24T16:56:28Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI5NDM4NA=="}, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxMTMxNw==", "bodyText": "I hope I addressed it adequately.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r530411317", "createdAt": "2020-11-25T14:24:54Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI5NDM4NA=="}, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTU2MjUzOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODo0NzozNVrOH4x3qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODo0NzozNVrOH4x3qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI5OTM2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n          \n          \n            \n            From the *Realm Settings* you can navigate to  *Groups*, *Roles*, *Clients* and *Users*.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529299369", "createdAt": "2020-11-24T08:47:35Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTc1MDkzOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOToxNzoyMlrOH4zw1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOToxNzoyMlrOH4zw1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTMzMDM5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n          \n          \n            \n            Groups are sets of users with a name assigned. Typically, they are used to compartmentalize users into geographical, organizational or departmental units, and so on.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529330391", "createdAt": "2020-11-24T09:17:22Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTc1MzQxOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOToxNzo0MlrOH4zydQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOToxNzo0MlrOH4zydQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTMzMDgwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The example starts by deploying the Keycloak server with pre-configured realm, requiring no additional configuration.\n          \n          \n            \n            The example starts by deploying the Keycloak server with pre-configured realms, requiring no additional configuration.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529330805", "createdAt": "2020-11-24T09:17:42Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,458 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realm, requiring no additional configuration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd24e6b2bdb26f28174f194f6db86bea974867ea"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTc1NTYzOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOToxODowMlrOH4z0Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOToxODowMlrOH4z0Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTMzMTIxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            We connect to the Keycloak Admin Console and demonstrate the sections of the UI where authorizations rules are configured.\n          \n          \n            \n            We connect to the Keycloak Admin Console and demonstrate the sections of the user interface where authorizations rules are configured.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529331211", "createdAt": "2020-11-24T09:18:02Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,458 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realm, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the UI where authorizations rules are configured.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd24e6b2bdb26f28174f194f6db86bea974867ea"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTc2MTExOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOToxODo1MlrOH4z3vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOToxODo1MlrOH4z3vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTMzMjE1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n          \n          \n            \n            That makes it possible to make a user a member of a group through a custom LDAP server admin user interface, for example, to grant them some permissions on Kafka resources.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529332157", "createdAt": "2020-11-24T09:18:52Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTc2NTAyOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOToxOToyNlrOH4z6WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOToyMDoxNlrOH4z-nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTMzMjgyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n          \n          \n            \n            Once the Kafka Broker has obtained an access token by using [Strimzi Kafka OAuth](https://github.com/strimzi/strimzi-kafka-oauth) for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529332825", "createdAt": "2020-11-24T09:19:26Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,458 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realm, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the UI where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd24e6b2bdb26f28174f194f6db86bea974867ea"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTMzMzkxNw==", "bodyText": "Here I refer to the project ... I made it more clear by turning it into a web link.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529333917", "createdAt": "2020-11-24T09:20:16Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,458 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+This is an end-to-end example of using Keycloak Authorization Services to configure authorization rules for use with `keycloak` authorization in Strimzi.\n+The example starts by deploying the Keycloak server with pre-configured realm, requiring no additional configuration.\n+We deploy the Kafka cluster configured to use one of the pre-configured realms.\n+We connect to the Keycloak Admin Console and demonstrate the sections of the UI where authorizations rules are configured.\n+We use Kafka CLI client tools with different personal and service accounts to demonstrate limited access based on the permissions granted to different accounts.\n+\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTMzMjgyNQ=="}, "originalCommit": {"oid": "fd24e6b2bdb26f28174f194f6db86bea974867ea"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTc2Nzc5OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOToxOTo0N1rOH4z8KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOToxOTo0N1rOH4z8KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTMzMzI4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n          \n          \n            \n            Under *Users*, when viewing all users you will see two users defined: \n          \n          \n            \n            * `alice` \n          \n          \n            \n            * `bob`. \n          \n          \n            \n            \n          \n          \n            \n            `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529333289", "createdAt": "2020-11-24T09:19:47Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTc3OTAzOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOToyMToxOFrOH40DYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOToyMjozOVrOH40KCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTMzNTEzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n          \n          \n            \n            Under *Groups*, you can view groups to mark users as having some permissions.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529335136", "createdAt": "2020-11-24T09:21:18Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTMzNjg0Mw==", "bodyText": "I wonder if we should have inline headings (.title) for Groups, Users, Roles and Clients in this section.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529336843", "createdAt": "2020-11-24T09:22:39Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTMzNTEzNg=="}, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTc5NzgwOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOToyMzo1MFrOH40QCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOToyMzo1MFrOH40QCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTMzODM3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n          \n          \n            \n            Under *Roles*, you can view the realm roles to mark users or clients as having some permissions.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529338376", "createdAt": "2020-11-24T09:23:50Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTgxMTgyOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOToyNTo0MFrOH40ZPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOToyNTo0MFrOH40ZPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM0MDczNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n          \n          \n            \n            Roles are a concept analogous to groups. They are usually used to _tag_ users with organizational roles and have the requisite permissions.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529340734", "createdAt": "2020-11-24T09:25:40Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTg0MTgxOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOToyOTozOFrOH40tEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOToyOTozOFrOH40tEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM0NTgxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n          \n          \n            \n            Roles cannot be stored in an LDAP identity provider. If LDAP is a requirement, you could use groups instead.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529345811", "createdAt": "2020-11-24T09:29:38Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTg0ODYyOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOTozMDozM1rOH40xpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOTozMDozM1rOH40xpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM0Njk4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n          \n          \n            \n            Under *Clients*, you can view the additional client configurations: \n          \n          \n            \n            * `kafka`\n          \n          \n            \n            * `kafka-cli`\n          \n          \n            \n            * `team-a-client`\n          \n          \n            \n            * `team-b-client`.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529346980", "createdAt": "2020-11-24T09:30:33Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTg4NDg1OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOTozNToxOVrOH41JAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOTozNToxOVrOH41JAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM1Mjk2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n          \n          \n            \n            The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth 2.0 communication for access token validation,", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529352961", "createdAt": "2020-11-24T09:35:19Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTkwNjA1OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOTozODoxOVrOH41XKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOTozODoxOVrOH41XKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM1NjU4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n          \n          \n            \n            and to authenticate to other Kafka Broker instances using OAuth 2.0 client authentication.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529356587", "createdAt": "2020-11-24T09:38:19Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTkwOTk0OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOTozODo0OFrOH41Zlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOTozODo0OFrOH41Zlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM1NzIwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n          \n          \n            \n            This client also contains the Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529357207", "createdAt": "2020-11-24T09:38:48Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTkzMzg3OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOTo0MjowNFrOH41pgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOTo0MjowNFrOH41pgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM2MTI4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n          \n          \n            \n            This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n          \n          \n            \n            The authorization configuration is defined in the `kafka` client from the *Authorization* tab, which becomes visible when *Authorization Enabled* is switched on from the *Settings* tab.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529361283", "createdAt": "2020-11-24T09:42:04Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTkzNjk0OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOTo0MjoyOFrOH41rqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNTozNToxNlrOH5G9pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM2MTgzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n          \n          \n            \n            == Defining Authorization Services for access control", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529361834", "createdAt": "2020-11-24T09:42:28Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM3NDcwMw==", "bodyText": "This section reads like concepts and recommendations rather than part of the example. It seems like we're going over similar ground to Mapping Keycloak Authorization Services to Kafka Model", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529374703", "createdAt": "2020-11-24T09:52:23Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM2MTgzNA=="}, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY0NDk2Nw==", "bodyText": "That's true. It makes sense for a standalone example / tutorial, but maybe not when it's part of a document that in previous chapter explained all this.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529644967", "createdAt": "2020-11-24T15:35:16Z", "author": {"login": "mstruk"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM2MTgzNA=="}, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDA0MzIyOnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOTo1NjoxMFrOH42xCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOTo1NjoxMFrOH42xCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM3OTU5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n          \n          \n            \n            Keycloak Authorization Services use authorization scopes, policies and permissions to define and apply access control to resources.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529379595", "createdAt": "2020-11-24T09:56:10Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDMxODE1OnYy", "diffSide": "RIGHT", "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDozNDoxM1rOH45myQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDozNDoxM1rOH45myQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQyNjEyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `Resources` define _what_ we are protecting from unauthorized access.\n          \n          \n            \n            Resources define _what_ we are protecting from unauthorized access.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3989#discussion_r529426121", "createdAt": "2020-11-24T10:34:13Z", "author": {"login": "PaulRMellor"}, "path": "documentation/modules/oauth/con-oauth-authorization-keycloak-example.adoc", "diffHunk": "@@ -0,0 +1,452 @@\n+// Module included in the following module:\n+//\n+// con-oauth-authorization-keycloak-authorization-services.adoc\n+\n+[id='con-oauth-authorization-keycloak-example_{context}']\n+= Keycloak Authorization Services Example\n+\n+## Token Based Authorization with Keycloak Authorization Services\n+\n+Once the Kafka Broker has obtained an access token by using Strimzi Kafka OAuth for authentication, it is possible to use centrally managed authorization rules to enforce access restrictions onto Kafka Clients.\n+For this Strimzi Kafka OAuth supports the use of `Keycloak Authorization Services`.\n+\n+A custom authorizer has to be configured on the Kafka Broker to take advantage of Authorization Services REST endpoints available on Keycloak, which provide a list of granted permissions on resources for authenticated users.\n+The list of grants (permissions) is first fetched during the first action after authenticated session is established by Kafka client, and then regularly refreshed in the background.\n+Grants are cached, and enforced locally on the Kafka Broker for each user session in order to provide fast authorization decisions. Because they are refreshed, any changes at Keycloak side are detected and enforced.\n+\n+\n+## Starting Up the Pods\n+\n+NOTE: TODO: Change the url to: https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/kubernetes\n+\n+For this example we're using the kubernetes deployment scripts available at https://github.com/mstruk/strimzi-kafka-oauth/tree/examples/examples/kubernetes\n+\n+NOTE: TODO: Change the url to: https://raw.githubusercontent.com/strimzi/strimzi-kafka-oauth/master\n+\n+    export ROOT=https://raw.githubusercontent.com/mstruk/strimzi-kafka-oauth/examples\n+\n+.Deploy the Postgres database for the Keycloak\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres-pvc.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/postgres.yaml\n+\n+.Deploy the Keycloak server\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-realms-configmap.yaml\n+    kubectl apply -f $ROOT/examples/kubernetes/keycloak-postgres.yaml\n+\n+If your default namespace is not `myproject` but something else (for example, `default`), then use the following to deploy Keycloak:\n+\n+    curl -s $ROOT/examples/kubernetes/keycloak-postgres.yaml | sed -e \"s#myproject#default#\" | kubectl apply -f -\n+\n+.Deploy the minimal Kafka cluster\n+\n+Here we assume that the Strimzi Cluster Operator has already been installed on your Kubernetes cluster.\n+\n+    kubectl apply -f $ROOT/examples/kubernetes/kafka-oauth-single-authz.yaml\n+\n+\n+## Using the Keycloak Admin Console to Configure Authorization\n+\n+You can login to the Keycloak Admin Console by creating a tunnel to the keycloak pod:\n+\n+    kubectl port-forward keycloak 8080\n+\n+Now use your browser to connect to `http://localhost:8080/auth/admin` and use `admin` as both a username, and a password.\n+\n+In the upper left corner under the Keycloak icon you should see `Master` selected as the current realm.\n+Moving the mouse pointer over it should reveal two additional realms - `Demo` and `Kafka-authz`.\n+\n+For this example we are interested in the `kafka-authz` realm.\n+Selecting it will open the `Realm Settings` for the `kafka-authz` realm.\n+Next to the `Realm Settings` there are other sections we are interested in - `Groups`, `Roles`, `Clients` and `Users`.\n+\n+Under `Groups` we can see several groups that can be used to mark users as having some permissions.\n+Groups are sets of users with name assigned. Typically they are used to geographically or organisationally compartmentalize users into organisations, organisational units, departments, and so on.\n+\n+In Keycloak the groups can be stored in an LDAP identity provider.\n+That makes it possible to make some user a member of some group - through a custom LDAP server admin UI for example, which grants them some permissions on Kafka resources.\n+\n+Under `Users`, click on the `View all users` button and you will see two users defined - `alice` and `bob`. `alice` is a member of the `ClusterManager Group`, and `bob` is a member of `ClusterManager-my-cluster Group`.\n+In Keycloak the users can be stored in an LDAP identity provider.\n+\n+Under `Roles` we can see several realm roles which can be used to mark users or clients as having some permissions.\n+Roles are a concept analogous to groups. They are usually used to 'tag' users as playing organisational roles and having permissions that pertain to it.\n+In Keycloak the roles cannot be stored in an LDAP identity provider - if that is your requirement then you should use groups instead.\n+\n+Under `Clients` we can see some additional clients configured - `kafka`, `kafka-cli`, `team-a-client`, `team-b-client`.\n+The client with client id `kafka` is used by Kafka Brokers to perform the necessary OAuth2 communication for access token validation,\n+and to authenticate to other Kafka Broker instances using OAuth2 client authentication.\n+This client also contains Authorization Services resource definitions, policies and authorization scopes used to perform authorization on the Kafka Brokers.\n+\n+The client with client id `kafka-cli` is a public client that can be used by the Kafka command line tools when authenticating with username and password to obtain an access token or a refresh token.\n+\n+Clients `team-a-client`, and `team-b-client` are confidential clients representing services with partial access to certain Kafka topics.\n+\n+The authorization configuration is defined in the `kafka` client under `Authorization` tab.\n+This tab becomes visible when `Authorization Enabled` is turned on under the `Settings` tab.\n+\n+\n+## Authorization Services - Resources, Authorization Scopes, Policies and Permissions\n+\n+`Keycloak Authorization Services` use several concepts that together take part in defining, and applying access control to resources.\n+\n+`Resources` define _what_ we are protecting from unauthorized access.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bab89961e4af7af74c896083be2f6d4fe0cc74f"}, "originalPosition": 94}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 718, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}