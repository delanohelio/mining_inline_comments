{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MDEwMjkw", "number": 3924, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMjowMTowM1rOE1oBvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNDoyMTo0NlrOE3uZnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjY1NzkxOnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/user/UserST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMjowMTowM1rOHuAJog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMjowMTowM1rOHuAJog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5OTAxMA==", "bodyText": "Should you check the actual deletion in addition to this?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3924#discussion_r517999010", "createdAt": "2020-11-05T12:01:03Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/user/UserST.java", "diffHunk": "@@ -216,6 +217,42 @@ void testUserWithQuotas(KafkaUser user) {\n         });\n     }\n \n+    @Test\n+    void testCreatingUsersWithSecretPrefix() {\n+        String clusterName = \"second-cluster\";\n+        String secretPrefix = \"top-secret-\";\n+        String tlsUserName = \"encrypted-leopold\";\n+        String scramShaUserName = \"scramed-leopold\";\n+\n+        KafkaResource.kafkaEphemeral(clusterName, 3)\n+            .editSpec()\n+                .editEntityOperator()\n+                    .editUserOperator()\n+                        .withNewSecretPrefix(secretPrefix)\n+                    .endUserOperator()\n+                .endEntityOperator()\n+            .endSpec()\n+            .done();\n+\n+        KafkaUserResource.tlsUser(clusterName, tlsUserName).done();\n+        KafkaUserResource.scramShaUser(clusterName, scramShaUserName).done();\n+\n+        Secret tlsSecret = kubeClient().getSecret(secretPrefix + tlsUserName);\n+        Secret scramShaSecret = kubeClient().getSecret(secretPrefix + scramShaUserName);\n+\n+        LOGGER.info(\"Checking if user secrets with secret prefixes exists\");\n+        assertNotNull(tlsSecret);\n+        assertNotNull(scramShaSecret);\n+\n+        LOGGER.info(\"Checking if secrets contains right user names\");\n+        assertThat(tlsSecret.getMetadata().getOwnerReferences().get(0).getName(), is(tlsUserName));\n+        assertThat(scramShaSecret.getMetadata().getOwnerReferences().get(0).getName(), is(scramShaUserName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1a29ffde480634bbdeef015683eda162918e862"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjY2MTQ1OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/user/UserST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMjowMTo1NlrOHuALtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMjowMTo1NlrOHuALtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5OTU0Mg==", "bodyText": "Not sure I see the point of this. The KafkaUser resources are created by you on line 237+238. So you are just checking if you used the right name there. What you really want to check is the username in Kafka and CN of the certificate I guess.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3924#discussion_r517999542", "createdAt": "2020-11-05T12:01:56Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/user/UserST.java", "diffHunk": "@@ -216,6 +217,42 @@ void testUserWithQuotas(KafkaUser user) {\n         });\n     }\n \n+    @Test\n+    void testCreatingUsersWithSecretPrefix() {\n+        String clusterName = \"second-cluster\";\n+        String secretPrefix = \"top-secret-\";\n+        String tlsUserName = \"encrypted-leopold\";\n+        String scramShaUserName = \"scramed-leopold\";\n+\n+        KafkaResource.kafkaEphemeral(clusterName, 3)\n+            .editSpec()\n+                .editEntityOperator()\n+                    .editUserOperator()\n+                        .withNewSecretPrefix(secretPrefix)\n+                    .endUserOperator()\n+                .endEntityOperator()\n+            .endSpec()\n+            .done();\n+\n+        KafkaUserResource.tlsUser(clusterName, tlsUserName).done();\n+        KafkaUserResource.scramShaUser(clusterName, scramShaUserName).done();\n+\n+        Secret tlsSecret = kubeClient().getSecret(secretPrefix + tlsUserName);\n+        Secret scramShaSecret = kubeClient().getSecret(secretPrefix + scramShaUserName);\n+\n+        LOGGER.info(\"Checking if user secrets with secret prefixes exists\");\n+        assertNotNull(tlsSecret);\n+        assertNotNull(scramShaSecret);\n+\n+        LOGGER.info(\"Checking if secrets contains right user names\");\n+        assertThat(tlsSecret.getMetadata().getOwnerReferences().get(0).getName(), is(tlsUserName));\n+        assertThat(scramShaSecret.getMetadata().getOwnerReferences().get(0).getName(), is(scramShaUserName));\n+\n+        LOGGER.info(\"Checking if users are created without the secret prefixes\");\n+        assertNotNull(KafkaUserResource.kafkaUserClient().inNamespace(NAMESPACE).withName(tlsUserName).get());\n+        assertNotNull(KafkaUserResource.kafkaUserClient().inNamespace(NAMESPACE).withName(scramShaUserName).get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1a29ffde480634bbdeef015683eda162918e862"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjY2MzU3OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/user/UserST.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMjowMjozM1rOHuAM6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMToxOTo1M1rOHvqB_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5OTg1MQ==", "bodyText": "Is there any first cluster?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3924#discussion_r517999851", "createdAt": "2020-11-05T12:02:33Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/user/UserST.java", "diffHunk": "@@ -216,6 +217,42 @@ void testUserWithQuotas(KafkaUser user) {\n         });\n     }\n \n+    @Test\n+    void testCreatingUsersWithSecretPrefix() {\n+        String clusterName = \"second-cluster\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1a29ffde480634bbdeef015683eda162918e862"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAwMjAyNQ==", "bodyText": "Yes, here:\nprivate void deployTestSpecificResources() {\n        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 1, 1).done();\n    }\n\nThat's for other tests, so I guess it's better to have different kafka cluster here.\nThe method is used in @BeforeAll block**", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3924#discussion_r518002025", "createdAt": "2020-11-05T12:06:38Z", "author": {"login": "im-konge"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/user/UserST.java", "diffHunk": "@@ -216,6 +217,42 @@ void testUserWithQuotas(KafkaUser user) {\n         });\n     }\n \n+    @Test\n+    void testCreatingUsersWithSecretPrefix() {\n+        String clusterName = \"second-cluster\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5OTg1MQ=="}, "originalCommit": {"oid": "d1a29ffde480634bbdeef015683eda162918e862"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODExNDU4Ng==", "bodyText": "Soooo ... I can live with it if that is really what you want to do. But this is kinda mess to create one cluster before all here, the next one inside test etc. It makes the tests hard to read and understand but also debug. Probably outside the scope of this PR, but it would be good to have this done in some more clear way and maybe not mix the tests in one class etc.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3924#discussion_r518114586", "createdAt": "2020-11-05T14:57:22Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/user/UserST.java", "diffHunk": "@@ -216,6 +217,42 @@ void testUserWithQuotas(KafkaUser user) {\n         });\n     }\n \n+    @Test\n+    void testCreatingUsersWithSecretPrefix() {\n+        String clusterName = \"second-cluster\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5OTg1MQ=="}, "originalCommit": {"oid": "d1a29ffde480634bbdeef015683eda162918e862"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTczMTU0MA==", "bodyText": "I'll take a look at it and try to separate it to two suites, if it'll make sense. Thanks for this spot.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3924#discussion_r519731540", "createdAt": "2020-11-09T11:15:59Z", "author": {"login": "im-konge"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/user/UserST.java", "diffHunk": "@@ -216,6 +217,42 @@ void testUserWithQuotas(KafkaUser user) {\n         });\n     }\n \n+    @Test\n+    void testCreatingUsersWithSecretPrefix() {\n+        String clusterName = \"second-cluster\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5OTg1MQ=="}, "originalCommit": {"oid": "d1a29ffde480634bbdeef015683eda162918e862"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTczMzc1Nw==", "bodyText": "Anyway, as I said, that is more general readability ... feel free to leave it for later, it does not need to be addressed in this PR.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3924#discussion_r519733757", "createdAt": "2020-11-09T11:19:53Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/user/UserST.java", "diffHunk": "@@ -216,6 +217,42 @@ void testUserWithQuotas(KafkaUser user) {\n         });\n     }\n \n+    @Test\n+    void testCreatingUsersWithSecretPrefix() {\n+        String clusterName = \"second-cluster\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5OTg1MQ=="}, "originalCommit": {"oid": "d1a29ffde480634bbdeef015683eda162918e862"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDIxNTY5OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/user/UserST.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOToyMzo1NlrOHv-KZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMzo0MToxMFrOHxNmHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA2MzU4OQ==", "bodyText": "Should you try to send/receive also for the SCRAM user?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3924#discussion_r520063589", "createdAt": "2020-11-09T19:23:56Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/user/UserST.java", "diffHunk": "@@ -216,6 +223,85 @@ void testUserWithQuotas(KafkaUser user) {\n         });\n     }\n \n+    @Test\n+    void testCreatingUsersWithSecretPrefix() {\n+        String clusterName = \"second-cluster\";\n+        String secretPrefix = \"top-secret-\";\n+        String tlsUserName = \"encrypted-leopold\";\n+        String scramShaUserName = \"scramed-leopold\";\n+\n+        KafkaResource.kafkaEphemeral(clusterName, 3)\n+            .editSpec()\n+                .editKafka()\n+                    .withNewListeners()\n+                        .addNewGenericKafkaListener()\n+                            .withName(Constants.TLS_LISTENER_DEFAULT_NAME)\n+                            .withPort(9093)\n+                            .withType(KafkaListenerType.INTERNAL)\n+                            .withTls(true)\n+                            .withNewKafkaListenerAuthenticationTlsAuth()\n+                            .endKafkaListenerAuthenticationTlsAuth()\n+                        .endGenericKafkaListener()\n+                    .endListeners()\n+                .endKafka()\n+                .editEntityOperator()\n+                    .editUserOperator()\n+                        .withNewSecretPrefix(secretPrefix)\n+                    .endUserOperator()\n+                .endEntityOperator()\n+            .endSpec()\n+            .done();\n+\n+        KafkaTopicResource.topic(clusterName, TOPIC_NAME).done();\n+        KafkaUser tlsUser = KafkaUserResource.tlsUser(clusterName, tlsUserName).done();\n+        KafkaUserResource.scramShaUser(clusterName, scramShaUserName).done();\n+\n+        KafkaClientsResource.deployKafkaClients(true, clusterName + \"-\" + Constants.KAFKA_CLIENTS, true, null, secretPrefix, tlsUser).done();\n+        String kafkaClientsName = kubeClient().listPodsByPrefixInName(clusterName + \"-\" + Constants.KAFKA_CLIENTS).get(0).getMetadata().getName();\n+\n+        InternalKafkaClient internalKafkaClient = new InternalKafkaClient.Builder()\n+            .withUsingPodName(kafkaClientsName)\n+            .withNamespaceName(NAMESPACE)\n+            .withTopicName(TOPIC_NAME)\n+            .withKafkaUsername(tlsUserName)\n+            .withSecurityProtocol(SecurityProtocol.SASL_SSL)\n+            .withListenerName(Constants.TLS_LISTENER_DEFAULT_NAME)\n+            .withClusterName(clusterName)\n+            .withMessageCount(MESSAGE_COUNT)\n+            .withSecretPrefix(secretPrefix)\n+            .build();\n+\n+        internalKafkaClient.assertSentAndReceivedMessages(\n+            internalKafkaClient.sendMessagesTls(),\n+            internalKafkaClient.receiveMessagesTls()\n+        );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be1724891319d9f086500c6ef7f73a13c4900c1c"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM2NTAyMg==", "bodyText": "Yes, I wanted to add it :) thanks", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3924#discussion_r521365022", "createdAt": "2020-11-11T13:41:10Z", "author": {"login": "im-konge"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/user/UserST.java", "diffHunk": "@@ -216,6 +223,85 @@ void testUserWithQuotas(KafkaUser user) {\n         });\n     }\n \n+    @Test\n+    void testCreatingUsersWithSecretPrefix() {\n+        String clusterName = \"second-cluster\";\n+        String secretPrefix = \"top-secret-\";\n+        String tlsUserName = \"encrypted-leopold\";\n+        String scramShaUserName = \"scramed-leopold\";\n+\n+        KafkaResource.kafkaEphemeral(clusterName, 3)\n+            .editSpec()\n+                .editKafka()\n+                    .withNewListeners()\n+                        .addNewGenericKafkaListener()\n+                            .withName(Constants.TLS_LISTENER_DEFAULT_NAME)\n+                            .withPort(9093)\n+                            .withType(KafkaListenerType.INTERNAL)\n+                            .withTls(true)\n+                            .withNewKafkaListenerAuthenticationTlsAuth()\n+                            .endKafkaListenerAuthenticationTlsAuth()\n+                        .endGenericKafkaListener()\n+                    .endListeners()\n+                .endKafka()\n+                .editEntityOperator()\n+                    .editUserOperator()\n+                        .withNewSecretPrefix(secretPrefix)\n+                    .endUserOperator()\n+                .endEntityOperator()\n+            .endSpec()\n+            .done();\n+\n+        KafkaTopicResource.topic(clusterName, TOPIC_NAME).done();\n+        KafkaUser tlsUser = KafkaUserResource.tlsUser(clusterName, tlsUserName).done();\n+        KafkaUserResource.scramShaUser(clusterName, scramShaUserName).done();\n+\n+        KafkaClientsResource.deployKafkaClients(true, clusterName + \"-\" + Constants.KAFKA_CLIENTS, true, null, secretPrefix, tlsUser).done();\n+        String kafkaClientsName = kubeClient().listPodsByPrefixInName(clusterName + \"-\" + Constants.KAFKA_CLIENTS).get(0).getMetadata().getName();\n+\n+        InternalKafkaClient internalKafkaClient = new InternalKafkaClient.Builder()\n+            .withUsingPodName(kafkaClientsName)\n+            .withNamespaceName(NAMESPACE)\n+            .withTopicName(TOPIC_NAME)\n+            .withKafkaUsername(tlsUserName)\n+            .withSecurityProtocol(SecurityProtocol.SASL_SSL)\n+            .withListenerName(Constants.TLS_LISTENER_DEFAULT_NAME)\n+            .withClusterName(clusterName)\n+            .withMessageCount(MESSAGE_COUNT)\n+            .withSecretPrefix(secretPrefix)\n+            .build();\n+\n+        internalKafkaClient.assertSentAndReceivedMessages(\n+            internalKafkaClient.sendMessagesTls(),\n+            internalKafkaClient.receiveMessagesTls()\n+        );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA2MzU4OQ=="}, "originalCommit": {"oid": "be1724891319d9f086500c6ef7f73a13c4900c1c"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODY2NzA4OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/user/UserST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNDoyMDoyM1rOHxPIEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNDoyMDoyM1rOHxPIEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM5MDA5Ng==", "bodyText": "Should this be SASL_PLAINTEXT?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3924#discussion_r521390096", "createdAt": "2020-11-11T14:20:23Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/user/UserST.java", "diffHunk": "@@ -216,6 +223,112 @@ void testUserWithQuotas(KafkaUser user) {\n         });\n     }\n \n+    @Test\n+    void testCreatingUsersWithSecretPrefix() {\n+        String clusterName = \"second-cluster\";\n+        String secretPrefix = \"top-secret-\";\n+        String tlsUserName = \"encrypted-leopold\";\n+        String scramShaUserName = \"scramed-leopold\";\n+\n+        KafkaResource.kafkaEphemeral(clusterName, 3)\n+            .editSpec()\n+                .editKafka()\n+                    .withNewListeners()\n+                        .addNewGenericKafkaListener()\n+                            .withName(Constants.PLAIN_LISTENER_DEFAULT_NAME)\n+                            .withPort(9092)\n+                            .withType(KafkaListenerType.INTERNAL)\n+                            .withTls(false)\n+                            .withNewKafkaListenerAuthenticationScramSha512Auth()\n+                            .endKafkaListenerAuthenticationScramSha512Auth()\n+                        .endGenericKafkaListener()\n+                        .addNewGenericKafkaListener()\n+                            .withName(Constants.TLS_LISTENER_DEFAULT_NAME)\n+                            .withPort(9093)\n+                            .withType(KafkaListenerType.INTERNAL)\n+                            .withTls(true)\n+                            .withNewKafkaListenerAuthenticationTlsAuth()\n+                            .endKafkaListenerAuthenticationTlsAuth()\n+                        .endGenericKafkaListener()\n+                    .endListeners()\n+                .endKafka()\n+                .editEntityOperator()\n+                    .editUserOperator()\n+                        .withNewSecretPrefix(secretPrefix)\n+                    .endUserOperator()\n+                .endEntityOperator()\n+            .endSpec()\n+            .done();\n+\n+        KafkaTopicResource.topic(clusterName, TOPIC_NAME).done();\n+        KafkaUser tlsUser = KafkaUserResource.tlsUser(clusterName, tlsUserName).done();\n+        KafkaUser scramShaUser = KafkaUserResource.scramShaUser(clusterName, scramShaUserName).done();\n+\n+        LOGGER.info(\"Deploying KafkaClients pod for TLS listener\");\n+        KafkaClientsResource.deployKafkaClients(true, clusterName + \"-tls-\" + Constants.KAFKA_CLIENTS, true, Constants.TLS_LISTENER_DEFAULT_NAME, secretPrefix, tlsUser).done();\n+        String tlsKafkaClientsName = kubeClient().listPodsByPrefixInName(clusterName + \"-tls-\" + Constants.KAFKA_CLIENTS).get(0).getMetadata().getName();\n+\n+        LOGGER.info(\"Deploying KafkaClients pod for PLAIN listener\");\n+        KafkaClientsResource.deployKafkaClients(false, clusterName + \"-plain-\" + Constants.KAFKA_CLIENTS, true, Constants.PLAIN_LISTENER_DEFAULT_NAME, secretPrefix, scramShaUser).done();\n+        String plainKafkaClientsName = kubeClient().listPodsByPrefixInName(clusterName + \"-plain-\" + Constants.KAFKA_CLIENTS).get(0).getMetadata().getName();\n+\n+        InternalKafkaClient internalKafkaClient = new InternalKafkaClient.Builder()\n+            .withUsingPodName(tlsKafkaClientsName)\n+            .withNamespaceName(NAMESPACE)\n+            .withTopicName(TOPIC_NAME)\n+            .withKafkaUsername(tlsUserName)\n+            .withSecurityProtocol(SecurityProtocol.SASL_SSL)\n+            .withListenerName(Constants.TLS_LISTENER_DEFAULT_NAME)\n+            .withClusterName(clusterName)\n+            .withMessageCount(MESSAGE_COUNT)\n+            .withSecretPrefix(secretPrefix)\n+            .build();\n+\n+        LOGGER.info(\"Checking if TLS user is able to send messages\");\n+        internalKafkaClient.assertSentAndReceivedMessages(\n+            internalKafkaClient.sendMessagesTls(),\n+            internalKafkaClient.receiveMessagesTls()\n+        );\n+\n+        internalKafkaClient = internalKafkaClient.toBuilder()\n+            .withUsingPodName(plainKafkaClientsName)\n+            .withSecurityProtocol(SecurityProtocol.PLAINTEXT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49a85788333558d2491518439b0f737bfe231a2b"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODY3MzU5OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/user/UserST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNDoyMTo0NlrOHxPL9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNDoyMTo0NlrOHxPL9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM5MTA5Mg==", "bodyText": "Should this be checked before sending the messages? It seems to me like a pre-requisite for it. Withotu the secrets, the clients should not work.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3924#discussion_r521391092", "createdAt": "2020-11-11T14:21:46Z", "author": {"login": "scholzj"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/operators/user/UserST.java", "diffHunk": "@@ -216,6 +223,112 @@ void testUserWithQuotas(KafkaUser user) {\n         });\n     }\n \n+    @Test\n+    void testCreatingUsersWithSecretPrefix() {\n+        String clusterName = \"second-cluster\";\n+        String secretPrefix = \"top-secret-\";\n+        String tlsUserName = \"encrypted-leopold\";\n+        String scramShaUserName = \"scramed-leopold\";\n+\n+        KafkaResource.kafkaEphemeral(clusterName, 3)\n+            .editSpec()\n+                .editKafka()\n+                    .withNewListeners()\n+                        .addNewGenericKafkaListener()\n+                            .withName(Constants.PLAIN_LISTENER_DEFAULT_NAME)\n+                            .withPort(9092)\n+                            .withType(KafkaListenerType.INTERNAL)\n+                            .withTls(false)\n+                            .withNewKafkaListenerAuthenticationScramSha512Auth()\n+                            .endKafkaListenerAuthenticationScramSha512Auth()\n+                        .endGenericKafkaListener()\n+                        .addNewGenericKafkaListener()\n+                            .withName(Constants.TLS_LISTENER_DEFAULT_NAME)\n+                            .withPort(9093)\n+                            .withType(KafkaListenerType.INTERNAL)\n+                            .withTls(true)\n+                            .withNewKafkaListenerAuthenticationTlsAuth()\n+                            .endKafkaListenerAuthenticationTlsAuth()\n+                        .endGenericKafkaListener()\n+                    .endListeners()\n+                .endKafka()\n+                .editEntityOperator()\n+                    .editUserOperator()\n+                        .withNewSecretPrefix(secretPrefix)\n+                    .endUserOperator()\n+                .endEntityOperator()\n+            .endSpec()\n+            .done();\n+\n+        KafkaTopicResource.topic(clusterName, TOPIC_NAME).done();\n+        KafkaUser tlsUser = KafkaUserResource.tlsUser(clusterName, tlsUserName).done();\n+        KafkaUser scramShaUser = KafkaUserResource.scramShaUser(clusterName, scramShaUserName).done();\n+\n+        LOGGER.info(\"Deploying KafkaClients pod for TLS listener\");\n+        KafkaClientsResource.deployKafkaClients(true, clusterName + \"-tls-\" + Constants.KAFKA_CLIENTS, true, Constants.TLS_LISTENER_DEFAULT_NAME, secretPrefix, tlsUser).done();\n+        String tlsKafkaClientsName = kubeClient().listPodsByPrefixInName(clusterName + \"-tls-\" + Constants.KAFKA_CLIENTS).get(0).getMetadata().getName();\n+\n+        LOGGER.info(\"Deploying KafkaClients pod for PLAIN listener\");\n+        KafkaClientsResource.deployKafkaClients(false, clusterName + \"-plain-\" + Constants.KAFKA_CLIENTS, true, Constants.PLAIN_LISTENER_DEFAULT_NAME, secretPrefix, scramShaUser).done();\n+        String plainKafkaClientsName = kubeClient().listPodsByPrefixInName(clusterName + \"-plain-\" + Constants.KAFKA_CLIENTS).get(0).getMetadata().getName();\n+\n+        InternalKafkaClient internalKafkaClient = new InternalKafkaClient.Builder()\n+            .withUsingPodName(tlsKafkaClientsName)\n+            .withNamespaceName(NAMESPACE)\n+            .withTopicName(TOPIC_NAME)\n+            .withKafkaUsername(tlsUserName)\n+            .withSecurityProtocol(SecurityProtocol.SASL_SSL)\n+            .withListenerName(Constants.TLS_LISTENER_DEFAULT_NAME)\n+            .withClusterName(clusterName)\n+            .withMessageCount(MESSAGE_COUNT)\n+            .withSecretPrefix(secretPrefix)\n+            .build();\n+\n+        LOGGER.info(\"Checking if TLS user is able to send messages\");\n+        internalKafkaClient.assertSentAndReceivedMessages(\n+            internalKafkaClient.sendMessagesTls(),\n+            internalKafkaClient.receiveMessagesTls()\n+        );\n+\n+        internalKafkaClient = internalKafkaClient.toBuilder()\n+            .withUsingPodName(plainKafkaClientsName)\n+            .withSecurityProtocol(SecurityProtocol.PLAINTEXT)\n+            .withListenerName(Constants.PLAIN_LISTENER_DEFAULT_NAME)\n+            .withKafkaUsername(scramShaUserName)\n+            .build();\n+\n+        LOGGER.info(\"Checking if SCRAM-SHA user is able to send messages\");\n+        internalKafkaClient.assertSentAndReceivedMessages(\n+            internalKafkaClient.sendMessagesPlain(),\n+            internalKafkaClient.receiveMessagesPlain()\n+        );\n+\n+        Secret tlsSecret = kubeClient().getSecret(secretPrefix + tlsUserName);\n+        Secret scramShaSecret = kubeClient().getSecret(secretPrefix + scramShaUserName);\n+\n+        LOGGER.info(\"Checking if user secrets with secret prefixes exists\");\n+        assertNotNull(tlsSecret);\n+        assertNotNull(scramShaSecret);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49a85788333558d2491518439b0f737bfe231a2b"}, "originalPosition": 119}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1016, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}