{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3NDg4NzE4", "number": 3397, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNjo1NDo1MVrOESrVAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMjoyMTo1NVrOESyQTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MDE5NzE0OnYy", "diffSide": "RIGHT", "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlIsolatedST.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNjo1NDo1MVrOG3_Fag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNjo1NDo1MVrOG3_Fag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM1ODQ0Mg==", "bodyText": "why setting throttling and leader movements for this test?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3397#discussion_r461358442", "createdAt": "2020-07-28T06:54:51Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlIsolatedST.java", "diffHunk": "@@ -125,6 +122,37 @@ void testCruiseControlWithSingleNodeKafka() {\n         assertThat(kafkaStatus.getConditions().get(0).getMessage(), is(not(errMessage)));\n     }\n \n+    @Test\n+    void testCruiseControlTopicExclusion() {\n+        String excludedTopic1 = \"excluded-topic-1\";\n+        String excludedTopic2 = \"excluded-topic-2\";\n+        String includedTopic = \"included-topic\";\n+\n+        KafkaResource.kafkaWithCruiseControl(CLUSTER_NAME, 3, 3).done();\n+        KafkaTopicResource.topic(CLUSTER_NAME, excludedTopic1).done();\n+        KafkaTopicResource.topic(CLUSTER_NAME, excludedTopic2).done();\n+        KafkaTopicResource.topic(CLUSTER_NAME, includedTopic).done();\n+\n+        KafkaRebalanceResource.kafkaRebalance(CLUSTER_NAME)\n+            .editOrNewSpec()\n+                .withExcludedTopics(\"excluded-.*\")\n+                .withReplicationThrottle(200000)\n+                .withConcurrentLeaderMovements(1200)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fb34f945e4097036fe490ab401b262a3c713e10"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MDYxMDAzOnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaRebalanceUtils.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwODo1Mjo0NVrOG4DC1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMjowMDoyNlrOG4JRFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQyMzMxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .execInCurrentNamespace(\"annotate\", \"kafkarebalance\", resourceName, \"strimzi.io/rebalance=\" + annotation.toString())\n          \n          \n            \n                        .execInCurrentNamespace(\"annotate\", \"kafkarebalance\", resourceName, KafkaRebalanceAssemblyOperator.ANNO_STRIMZI_IO_REBALANCE + \"=\" + annotation.toString())", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3397#discussion_r461423319", "createdAt": "2020-07-28T08:52:45Z", "author": {"login": "samuel-hawker"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaRebalanceUtils.java", "diffHunk": "@@ -45,7 +47,14 @@ private static Condition rebalanceStateCondition(String resourceName) {\n \n     public static void waitForKafkaRebalanceCustomResourceState(String resourceName, KafkaRebalanceState state) {\n         KafkaRebalance kafkaRebalance = KafkaRebalanceResource.kafkaRebalanceClient().inNamespace(kubeClient().getNamespace()).withName(resourceName).get();\n-        ResourceManager.waitForResourceStatus(KafkaRebalanceResource.kafkaRebalanceClient(), kafkaRebalance, state.toString());\n+        ResourceManager.waitForResourceStatus(KafkaRebalanceResource.kafkaRebalanceClient(), kafkaRebalance, state.toString(), ResourceOperation.getTimeoutForKafkaRebalanceState(state));\n+    }\n+\n+    public static String annotateKafkaRebalanceResource(String resourceName, KafkaRebalanceAnnotation annotation) {\n+        LOGGER.info(\"Annotating KafkaRebalance:{} with annotation {}\", resourceName, annotation.toString());\n+        return ResourceManager.cmdKubeClient().namespace(kubeClient().getNamespace())\n+            .execInCurrentNamespace(\"annotate\", \"kafkarebalance\", resourceName, \"strimzi.io/rebalance=\" + annotation.toString())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fb34f945e4097036fe490ab401b262a3c713e10"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQyNjM3Ng==", "bodyText": "Yeah that looks better!", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3397#discussion_r461426376", "createdAt": "2020-07-28T08:57:34Z", "author": {"login": "im-konge"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaRebalanceUtils.java", "diffHunk": "@@ -45,7 +47,14 @@ private static Condition rebalanceStateCondition(String resourceName) {\n \n     public static void waitForKafkaRebalanceCustomResourceState(String resourceName, KafkaRebalanceState state) {\n         KafkaRebalance kafkaRebalance = KafkaRebalanceResource.kafkaRebalanceClient().inNamespace(kubeClient().getNamespace()).withName(resourceName).get();\n-        ResourceManager.waitForResourceStatus(KafkaRebalanceResource.kafkaRebalanceClient(), kafkaRebalance, state.toString());\n+        ResourceManager.waitForResourceStatus(KafkaRebalanceResource.kafkaRebalanceClient(), kafkaRebalance, state.toString(), ResourceOperation.getTimeoutForKafkaRebalanceState(state));\n+    }\n+\n+    public static String annotateKafkaRebalanceResource(String resourceName, KafkaRebalanceAnnotation annotation) {\n+        LOGGER.info(\"Annotating KafkaRebalance:{} with annotation {}\", resourceName, annotation.toString());\n+        return ResourceManager.cmdKubeClient().namespace(kubeClient().getNamespace())\n+            .execInCurrentNamespace(\"annotate\", \"kafkarebalance\", resourceName, \"strimzi.io/rebalance=\" + annotation.toString())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQyMzMxOQ=="}, "originalCommit": {"oid": "9fb34f945e4097036fe490ab401b262a3c713e10"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQzMDM1Mg==", "bodyText": "why not ...\nLOGGER.info(\"Annotating KafkaRebalance:{} with annotation {}={}\", resourceName, annotation.toString());\n        return ResourceManager.cmdKubeClient().namespace(kubeClient().getNamespace())\n            .execInCurrentNamespace(\"annotate\", \"kafkarebalance\", resourceName, KafkaRebalanceAssemblyOperator.ANNO_STRIMZI_IO_REBALANCE, annotation.toString())\navoiding the last string concatenation :P", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3397#discussion_r461430352", "createdAt": "2020-07-28T09:04:11Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaRebalanceUtils.java", "diffHunk": "@@ -45,7 +47,14 @@ private static Condition rebalanceStateCondition(String resourceName) {\n \n     public static void waitForKafkaRebalanceCustomResourceState(String resourceName, KafkaRebalanceState state) {\n         KafkaRebalance kafkaRebalance = KafkaRebalanceResource.kafkaRebalanceClient().inNamespace(kubeClient().getNamespace()).withName(resourceName).get();\n-        ResourceManager.waitForResourceStatus(KafkaRebalanceResource.kafkaRebalanceClient(), kafkaRebalance, state.toString());\n+        ResourceManager.waitForResourceStatus(KafkaRebalanceResource.kafkaRebalanceClient(), kafkaRebalance, state.toString(), ResourceOperation.getTimeoutForKafkaRebalanceState(state));\n+    }\n+\n+    public static String annotateKafkaRebalanceResource(String resourceName, KafkaRebalanceAnnotation annotation) {\n+        LOGGER.info(\"Annotating KafkaRebalance:{} with annotation {}\", resourceName, annotation.toString());\n+        return ResourceManager.cmdKubeClient().namespace(kubeClient().getNamespace())\n+            .execInCurrentNamespace(\"annotate\", \"kafkarebalance\", resourceName, \"strimzi.io/rebalance=\" + annotation.toString())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQyMzMxOQ=="}, "originalCommit": {"oid": "9fb34f945e4097036fe490ab401b262a3c713e10"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ0NTAxMQ==", "bodyText": "but won't that miss out the \"=\"?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3397#discussion_r461445011", "createdAt": "2020-07-28T09:26:02Z", "author": {"login": "tomncooper"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaRebalanceUtils.java", "diffHunk": "@@ -45,7 +47,14 @@ private static Condition rebalanceStateCondition(String resourceName) {\n \n     public static void waitForKafkaRebalanceCustomResourceState(String resourceName, KafkaRebalanceState state) {\n         KafkaRebalance kafkaRebalance = KafkaRebalanceResource.kafkaRebalanceClient().inNamespace(kubeClient().getNamespace()).withName(resourceName).get();\n-        ResourceManager.waitForResourceStatus(KafkaRebalanceResource.kafkaRebalanceClient(), kafkaRebalance, state.toString());\n+        ResourceManager.waitForResourceStatus(KafkaRebalanceResource.kafkaRebalanceClient(), kafkaRebalance, state.toString(), ResourceOperation.getTimeoutForKafkaRebalanceState(state));\n+    }\n+\n+    public static String annotateKafkaRebalanceResource(String resourceName, KafkaRebalanceAnnotation annotation) {\n+        LOGGER.info(\"Annotating KafkaRebalance:{} with annotation {}\", resourceName, annotation.toString());\n+        return ResourceManager.cmdKubeClient().namespace(kubeClient().getNamespace())\n+            .execInCurrentNamespace(\"annotate\", \"kafkarebalance\", resourceName, \"strimzi.io/rebalance=\" + annotation.toString())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQyMzMxOQ=="}, "originalCommit": {"oid": "9fb34f945e4097036fe490ab401b262a3c713e10"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ1MDI0NQ==", "bodyText": "I have put it in the formatting string \"annotation {}={}\"", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3397#discussion_r461450245", "createdAt": "2020-07-28T09:34:42Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaRebalanceUtils.java", "diffHunk": "@@ -45,7 +47,14 @@ private static Condition rebalanceStateCondition(String resourceName) {\n \n     public static void waitForKafkaRebalanceCustomResourceState(String resourceName, KafkaRebalanceState state) {\n         KafkaRebalance kafkaRebalance = KafkaRebalanceResource.kafkaRebalanceClient().inNamespace(kubeClient().getNamespace()).withName(resourceName).get();\n-        ResourceManager.waitForResourceStatus(KafkaRebalanceResource.kafkaRebalanceClient(), kafkaRebalance, state.toString());\n+        ResourceManager.waitForResourceStatus(KafkaRebalanceResource.kafkaRebalanceClient(), kafkaRebalance, state.toString(), ResourceOperation.getTimeoutForKafkaRebalanceState(state));\n+    }\n+\n+    public static String annotateKafkaRebalanceResource(String resourceName, KafkaRebalanceAnnotation annotation) {\n+        LOGGER.info(\"Annotating KafkaRebalance:{} with annotation {}\", resourceName, annotation.toString());\n+        return ResourceManager.cmdKubeClient().namespace(kubeClient().getNamespace())\n+            .execInCurrentNamespace(\"annotate\", \"kafkarebalance\", resourceName, \"strimzi.io/rebalance=\" + annotation.toString())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQyMzMxOQ=="}, "originalCommit": {"oid": "9fb34f945e4097036fe490ab401b262a3c713e10"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUxMTA1OA==", "bodyText": "Here is needed that =, how @samuel-hawker and @tomncooper said.\nio.strimzi.test.k8s.exceptions.KubeClusterException: `oc --namespace cruise-control-isolated-test annotate kafkarebalance my-cluster strimzi.io/rebalance approve` got status code 1 and stderr:\n------\nerror: at least one annotation update is required", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3397#discussion_r461511058", "createdAt": "2020-07-28T11:31:21Z", "author": {"login": "im-konge"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaRebalanceUtils.java", "diffHunk": "@@ -45,7 +47,14 @@ private static Condition rebalanceStateCondition(String resourceName) {\n \n     public static void waitForKafkaRebalanceCustomResourceState(String resourceName, KafkaRebalanceState state) {\n         KafkaRebalance kafkaRebalance = KafkaRebalanceResource.kafkaRebalanceClient().inNamespace(kubeClient().getNamespace()).withName(resourceName).get();\n-        ResourceManager.waitForResourceStatus(KafkaRebalanceResource.kafkaRebalanceClient(), kafkaRebalance, state.toString());\n+        ResourceManager.waitForResourceStatus(KafkaRebalanceResource.kafkaRebalanceClient(), kafkaRebalance, state.toString(), ResourceOperation.getTimeoutForKafkaRebalanceState(state));\n+    }\n+\n+    public static String annotateKafkaRebalanceResource(String resourceName, KafkaRebalanceAnnotation annotation) {\n+        LOGGER.info(\"Annotating KafkaRebalance:{} with annotation {}\", resourceName, annotation.toString());\n+        return ResourceManager.cmdKubeClient().namespace(kubeClient().getNamespace())\n+            .execInCurrentNamespace(\"annotate\", \"kafkarebalance\", resourceName, \"strimzi.io/rebalance=\" + annotation.toString())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQyMzMxOQ=="}, "originalCommit": {"oid": "9fb34f945e4097036fe490ab401b262a3c713e10"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUyNTI3MQ==", "bodyText": "I mislead with the previous logger instruction :)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3397#discussion_r461525271", "createdAt": "2020-07-28T12:00:26Z", "author": {"login": "ppatierno"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaRebalanceUtils.java", "diffHunk": "@@ -45,7 +47,14 @@ private static Condition rebalanceStateCondition(String resourceName) {\n \n     public static void waitForKafkaRebalanceCustomResourceState(String resourceName, KafkaRebalanceState state) {\n         KafkaRebalance kafkaRebalance = KafkaRebalanceResource.kafkaRebalanceClient().inNamespace(kubeClient().getNamespace()).withName(resourceName).get();\n-        ResourceManager.waitForResourceStatus(KafkaRebalanceResource.kafkaRebalanceClient(), kafkaRebalance, state.toString());\n+        ResourceManager.waitForResourceStatus(KafkaRebalanceResource.kafkaRebalanceClient(), kafkaRebalance, state.toString(), ResourceOperation.getTimeoutForKafkaRebalanceState(state));\n+    }\n+\n+    public static String annotateKafkaRebalanceResource(String resourceName, KafkaRebalanceAnnotation annotation) {\n+        LOGGER.info(\"Annotating KafkaRebalance:{} with annotation {}\", resourceName, annotation.toString());\n+        return ResourceManager.cmdKubeClient().namespace(kubeClient().getNamespace())\n+            .execInCurrentNamespace(\"annotate\", \"kafkarebalance\", resourceName, \"strimzi.io/rebalance=\" + annotation.toString())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQyMzMxOQ=="}, "originalCommit": {"oid": "9fb34f945e4097036fe490ab401b262a3c713e10"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTMzMTk2OnYy", "diffSide": "RIGHT", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaRebalanceUtils.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMjoyMTo1NVrOG4J9Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMjozMDoyNVrOG4KQdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUzNjU5MQ==", "bodyText": "What is this import used for? I think it would be much better to keep clean separation between the system tests and internal code of the cluster operator.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3397#discussion_r461536591", "createdAt": "2020-07-28T12:21:55Z", "author": {"login": "scholzj"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaRebalanceUtils.java", "diffHunk": "@@ -6,8 +6,11 @@\n \n import io.strimzi.api.kafka.model.KafkaRebalance;\n import io.strimzi.api.kafka.model.status.Condition;\n+import io.strimzi.api.kafka.operator.assembly.KafkaRebalanceAnnotation;\n import io.strimzi.api.kafka.operator.assembly.KafkaRebalanceState;\n+import io.strimzi.operator.cluster.operator.assembly.KafkaRebalanceAssemblyOperator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92b711c60550e3bc64cb0c1b23a3083ef2bd60be"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUzNzU5NA==", "bodyText": "Yeah I was thinking about that too. But this was imported after #3397 (review)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3397#discussion_r461537594", "createdAt": "2020-07-28T12:23:48Z", "author": {"login": "im-konge"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaRebalanceUtils.java", "diffHunk": "@@ -6,8 +6,11 @@\n \n import io.strimzi.api.kafka.model.KafkaRebalance;\n import io.strimzi.api.kafka.model.status.Condition;\n+import io.strimzi.api.kafka.operator.assembly.KafkaRebalanceAnnotation;\n import io.strimzi.api.kafka.operator.assembly.KafkaRebalanceState;\n+import io.strimzi.operator.cluster.operator.assembly.KafkaRebalanceAssemblyOperator;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUzNjU5MQ=="}, "originalCommit": {"oid": "92b711c60550e3bc64cb0c1b23a3083ef2bd60be"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUzNzcyNA==", "bodyText": "So maybe I should create some constant?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3397#discussion_r461537724", "createdAt": "2020-07-28T12:24:02Z", "author": {"login": "im-konge"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaRebalanceUtils.java", "diffHunk": "@@ -6,8 +6,11 @@\n \n import io.strimzi.api.kafka.model.KafkaRebalance;\n import io.strimzi.api.kafka.model.status.Condition;\n+import io.strimzi.api.kafka.operator.assembly.KafkaRebalanceAnnotation;\n import io.strimzi.api.kafka.operator.assembly.KafkaRebalanceState;\n+import io.strimzi.operator.cluster.operator.assembly.KafkaRebalanceAssemblyOperator;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUzNjU5MQ=="}, "originalCommit": {"oid": "92b711c60550e3bc64cb0c1b23a3083ef2bd60be"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU0MTQ5NA==", "bodyText": "I think this is similar to the enums for example. We expect the users to use the annotation but we want them to hardcode it in code. If that is good enough for the users, it is for sure good enough for the system tests. I think it should be either moved to the api module somewhere or it should be just hardcoded here instead of depending on the cluster-operator module.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3397#discussion_r461541494", "createdAt": "2020-07-28T12:30:25Z", "author": {"login": "scholzj"}, "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaRebalanceUtils.java", "diffHunk": "@@ -6,8 +6,11 @@\n \n import io.strimzi.api.kafka.model.KafkaRebalance;\n import io.strimzi.api.kafka.model.status.Condition;\n+import io.strimzi.api.kafka.operator.assembly.KafkaRebalanceAnnotation;\n import io.strimzi.api.kafka.operator.assembly.KafkaRebalanceState;\n+import io.strimzi.operator.cluster.operator.assembly.KafkaRebalanceAssemblyOperator;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUzNjU5MQ=="}, "originalCommit": {"oid": "92b711c60550e3bc64cb0c1b23a3083ef2bd60be"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1544, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}