{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MjEwMDA5", "number": 2658, "title": "Fix issues in Quota management in the User Operator", "bodyText": "Type of change\n\nBugfix\n\nDescription\nThis PR attempts to fix serveral issues in the Quota management in the User Operator:\n\nNPE triggered in every reocnciliation probably caused by #2525 in combination with insufficient test coverage\n\n[2020-03-06 19:20:27,136] ERROR <ractOperator:124> [oop-thread-1] Reconciliation #0(watch) User(user-cluster-test/arnost): createOrUpdate failed\njava.lang.NullPointerException: null\n\tat java.util.Objects.requireNonNull(Objects.java:203) ~[?:1.8.0_242]\n\tat java.util.Optional.<init>(Optional.java:96) ~[?:1.8.0_242]\n\tat java.util.Optional.of(Optional.java:108) ~[?:1.8.0_242]\n\tat io.strimzi.operator.common.operator.resource.ReconcileResult$Patched.<init>(ReconcileResult.java:45) ~[io.strimzi.operator-common-0.18.0-SNAPSHOT.jar:0.18.0-SNAPSHOT]\n\tat io.strimzi.operator.common.operator.resource.ReconcileResult$Patched.<init>(ReconcileResult.java:42) ~[io.strimzi.operator-common-0.18.0-SNAPSHOT.jar:0.18.0-SNAPSHOT]\n\tat io.strimzi.operator.common.operator.resource.ReconcileResult.patched(ReconcileResult.java:61) ~[io.strimzi.operator-common-0.18.0-SNAPSHOT.jar:0.18.0-SNAPSHOT]\n\tat io.strimzi.operator.user.operator.KafkaUserQuotasOperator.lambda$reconcile$0(KafkaUserQuotasOperator.java:47) ~[io.strimzi.user-operator-0.18.0-SNAPSHOT.jar:0.18.0-SNAPSHOT]\n\tat io.vertx.core.impl.ContextImpl.lambda$executeBlocking$2(ContextImpl.java:316) ~[io.vertx.vertx-core-3.8.5.jar:3.8.5]\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) [io.netty.netty-common-4.1.45.Final.jar:4.1.45.Final]\n\tat java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]\n\n\nIssue with deleting single quota from the configuration while keeping other quotas\nIssue with quota management for SCRAM-SHA users where the ScramSha operator and the Quota operator are touching the same path in Zookeeper and were overwritting each other\n\nAs a bugfix, this should be cherry-picked for 0.17.0.\nChecklist\n\n Write tests\n Make sure all tests pass\n Try your changes from Pod inside your Kubernetes and OpenShift cluster, not just locally", "createdAt": "2020-03-08T00:39:17Z", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2658", "merged": true, "mergeCommit": {"oid": "f98436267c6ff3e981bbc0b6e5ad914f3d94b004"}, "closed": true, "closedAt": "2020-03-09T08:46:12Z", "author": {"login": "scholzj"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcLeQcrAH2gAyMzg1MjEwMDA5OmFhODQ3NDVkM2E2YTFmZTk1ZDQ3ZjYyYWI5MDNlYWFhOGY2NjZmZGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcLqIkIgH2gAyMzg1MjEwMDA5OmJiZWNhYjM3Nzg4MTQxYzY1YmVlNTFkZGYxNDBjMTQxNDYzZjQxYjA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "aa84745d3a6a1fe95d47f62ab903eaaa8f666fdc", "author": {"user": {"login": "scholzj", "name": "Jakub Scholz"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/aa84745d3a6a1fe95d47f62ab903eaaa8f666fdc", "committedDate": "2020-03-08T00:34:22Z", "message": "Fix issues in Quota management in the User Operator\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwODE2NzYy", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2658#pullrequestreview-370816762", "createdAt": "2020-03-08T09:36:33Z", "commit": {"oid": "aa84745d3a6a1fe95d47f62ab903eaaa8f666fdc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwODMyOTc5", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2658#pullrequestreview-370832979", "createdAt": "2020-03-08T14:10:28Z", "commit": {"oid": "aa84745d3a6a1fe95d47f62ab903eaaa8f666fdc"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxNDoxMDoyOFrOFzVblg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxNDoxMDoyOFrOFzVblg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM3MjgyMg==", "bodyText": "maybe we can do just one verify with all assertThat inside as done in #2651 ?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2658#discussion_r389372822", "createdAt": "2020-03-08T14:10:28Z", "author": {"login": "ppatierno"}, "path": "user-operator/src/test/java/io/strimzi/operator/user/operator/KafkaUserQuotasIT.java", "diffHunk": "@@ -170,27 +176,166 @@ public void testDeletion()  {\n     }\n \n     @Test\n-    public void testUpdate()  {\n-        JsonObject original = new JsonObject().put(\"version\", 1).put(\"config\", new JsonObject().put(\"consumer_byte_rate\", \"1000\"));\n+    public void testUpdateAndFieldRemoval()  {\n         KafkaUserQuotas quotas = new KafkaUserQuotas();\n         quotas.setConsumerByteRate(2000);\n-        JsonObject updated = new JsonObject(new String(kuq.updateUserJson(original.encode().getBytes(StandardCharsets.UTF_8), quotas), StandardCharsets.UTF_8));\n+        quotas.setProducerByteRate(4000);\n+        quotas.setRequestPercentage(40);\n+\n+        JsonObject created = new JsonObject(new String(kuq.createUserJson(quotas), StandardCharsets.UTF_8));\n+        assertThat(created.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(notNullValue()));\n+        assertThat(created.getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(notNullValue()));\n+        assertThat(created.getJsonObject(\"config\").getString(\"request_percentage\"), is(notNullValue()));\n+        assertThat(created.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(\"2000\"));\n+        assertThat(created.getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(\"4000\"));\n+        assertThat(created.getJsonObject(\"config\").getString(\"request_percentage\"), is(\"40\"));\n+\n+        byte[] createdBytes = created.encode().getBytes(StandardCharsets.UTF_8);\n+\n+        KafkaUserQuotas quotas2 = new KafkaUserQuotas();\n+        quotas2.setConsumerByteRate(2000);\n+        quotas2.setProducerByteRate(4000);\n+\n+        JsonObject updated = new JsonObject(new String(kuq.createOrUpdateUserJson(createdBytes, quotas2), StandardCharsets.UTF_8));\n         assertThat(updated.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(notNullValue()));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(notNullValue()));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"request_percentage\"), is(nullValue()));\n         assertThat(updated.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(\"2000\"));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(\"4000\"));\n \n-        quotas.setConsumerByteRate(3000);\n-        quotas.setProducerByteRate(4000);\n-        original = new JsonObject().put(\"version\", 1).put(\"config\", new JsonObject().put(\"consumer_byte_rate\", \"1000\").put(\"producer_byte_rate\", \"2000\"));\n-        updated = new JsonObject(new String(kuq.updateUserJson(original.encode().getBytes(StandardCharsets.UTF_8), quotas), StandardCharsets.UTF_8));\n+        KafkaUserQuotas quotas3 = new KafkaUserQuotas();\n+        quotas3.setConsumerByteRate(2000);\n+        quotas3.setRequestPercentage(40);\n+\n+        updated = new JsonObject(new String(kuq.createOrUpdateUserJson(createdBytes, quotas3), StandardCharsets.UTF_8));\n         assertThat(updated.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(notNullValue()));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(nullValue()));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"request_percentage\"), is(notNullValue()));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(\"2000\"));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"request_percentage\"), is(\"40\"));\n+\n+        KafkaUserQuotas quotas4 = new KafkaUserQuotas();\n+        quotas4.setProducerByteRate(4000);\n+        quotas4.setRequestPercentage(40);\n+\n+        updated = new JsonObject(new String(kuq.createOrUpdateUserJson(createdBytes, quotas4), StandardCharsets.UTF_8));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(nullValue()));\n         assertThat(updated.getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(notNullValue()));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"request_percentage\"), is(notNullValue()));\n         assertThat(updated.getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(\"4000\"));\n-        assertThat(updated.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(\"3000\"));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"request_percentage\"), is(\"40\"));\n \n-        original = new JsonObject().put(\"version\", 1).put(\"config\", new JsonObject());\n-        quotas.setProducerByteRate(null);\n-        quotas.setConsumerByteRate(1000);\n-        updated = new JsonObject(new String(kuq.updateUserJson(original.encode().getBytes(StandardCharsets.UTF_8), quotas), StandardCharsets.UTF_8));\n+        KafkaUserQuotas quotas5 = new KafkaUserQuotas();\n+        quotas5.setConsumerByteRate(20000);\n+        quotas5.setProducerByteRate(40000);\n+        quotas5.setRequestPercentage(50);\n+\n+        updated = new JsonObject(new String(kuq.createOrUpdateUserJson(createdBytes, quotas5), StandardCharsets.UTF_8));\n         assertThat(updated.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(notNullValue()));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(notNullValue()));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"request_percentage\"), is(notNullValue()));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(\"20000\"));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(\"40000\"));\n+        assertThat(updated.getJsonObject(\"config\").getString(\"request_percentage\"), is(\"50\"));\n+    }\n+\n+    @Test\n+    public void testReconcileCreate(VertxTestContext testContext)  {\n+        String user = \"createTestUser\";\n+        KafkaUserQuotas quotas = new KafkaUserQuotas();\n+        quotas.setConsumerByteRate(2_000_000);\n+        quotas.setProducerByteRate(1_000_000);\n+        quotas.setRequestPercentage(50);\n+\n+        testContext.verify(() -> assertThat(kuq.exists(user), is(false)));\n+\n+        Checkpoint async = testContext.checkpoint();\n+        kuq.reconcile(user, quotas)\n+                .setHandler(testContext.succeeding(res -> {\n+                    testContext.verify(() -> assertThat(kuq.exists(user), is(true)));\n+                    testContext.verify(() -> assertThat(kuq.getQuotas(user).getJsonObject(\"config\").getString(\"consumer_byte_rate\"), is(\"2000000\")));\n+                    testContext.verify(() -> assertThat(kuq.getQuotas(user).getJsonObject(\"config\").getString(\"producer_byte_rate\"), is(\"1000000\")));\n+                    testContext.verify(() -> assertThat(kuq.getQuotas(user).getJsonObject(\"config\").getString(\"request_percentage\"), is(\"50\")));\n+                    testContext.verify(() -> assertThat(kuq.isPathExist(\"/config/users/\" + user), is(true)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa84745d3a6a1fe95d47f62ab903eaaa8f666fdc"}, "originalPosition": 130}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbecab37788141c65bee51ddf140c141463f41b0", "author": {"user": {"login": "scholzj", "name": "Jakub Scholz"}}, "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/bbecab37788141c65bee51ddf140c141463f41b0", "committedDate": "2020-03-08T14:24:37Z", "message": "Review comments\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2028, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}