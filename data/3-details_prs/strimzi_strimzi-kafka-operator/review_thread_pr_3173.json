{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxMjk1NDEy", "number": 3173, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzo1Nzo1MFrOEDkAkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODoyNzo1NVrOEEMdVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTcxMTU1OnYy", "diffSide": "RIGHT", "path": "CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzo1Nzo1MFrOGgpveg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzoxOTo0MVrOGhJZxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg5MTUxNA==", "bodyText": "I'm not sure this is worth mentioning. If something, I would probably rather mention what makes this upgrade interesting for users.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3173#discussion_r436891514", "createdAt": "2020-06-08T17:57:50Z", "author": {"login": "scholzj"}, "path": "CHANGELOG.md", "diffHunk": "@@ -5,6 +5,7 @@\n \n * Remove deprecated `Kafka.spec.topicOperator` classes and deployment logic\n * Use Java 11 as the Java runtime\n+* Upgrade to Cruise Control version 2.0.108", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29eba83febc84f3dbba924ac0ebd1e444fa780c4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQxMDI0Ng==", "bodyText": "Worth mentioning that they no longer need to create the strimzi.cruisecontrol.metrics topic before deployment if auto.create.topics.enable: false is configured.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3173#discussion_r437410246", "createdAt": "2020-06-09T13:19:41Z", "author": {"login": "laidan6000"}, "path": "CHANGELOG.md", "diffHunk": "@@ -5,6 +5,7 @@\n \n * Remove deprecated `Kafka.spec.topicOperator` classes and deployment logic\n * Use Java 11 as the Java runtime\n+* Upgrade to Cruise Control version 2.0.108", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg5MTUxNA=="}, "originalCommit": {"oid": "29eba83febc84f3dbba924ac0ebd1e444fa780c4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDE4MDIwOnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/cruisecontrol/CruiseControlApiImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTo0NzowMVrOGhBpew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTo0NzowMVrOGhBpew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI4MzE5NQ==", "bodyText": "typo \"the status\"", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3173#discussion_r437283195", "createdAt": "2020-06-09T09:47:01Z", "author": {"login": "ppatierno"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/cruisecontrol/CruiseControlApiImpl.java", "diffHunk": "@@ -204,36 +204,36 @@ public CruiseControlApiImpl(Vertx vertx, int idleTimeout) {\n                             JsonObject statusJson = new JsonObject();\n                             String taskStatus = jsonUserTask.getString(\"Status\");\n                             statusJson.put(\"Status\", taskStatus);\n-                            // The status could be ACTIVE in which case there will not be a \"summary\" so we check that we are\n-                            // in a state that actually has that key.\n-                            if (taskStatus.equals(CruiseControlUserTaskStatus.IN_EXECUTION.toString()) ||\n-                                    taskStatus.equals(CruiseControlUserTaskStatus.COMPLETED.toString())) {\n-                                // We now need to extract the original response which is in a raw string (not nicely formatted JSON)\n+\n+                            CruiseControlUserTaskResponse ccResponse;\n+                            if (taskStatus.equals(CruiseControlUserTaskStatus.IN_EXECUTION.toString()) || taskStatus.equals(CruiseControlUserTaskStatus.COMPLETED.toString())) {\n+                                // Tasks in execution will be rebalance tasks, so their original response will contain the summary of the rebalance they are executing\n+                                // Completed tasks likewise will have the original rebalance summary in their original response\n                                 statusJson.put(\"summary\", ((JsonObject) Json.decodeValue(jsonUserTask.getString(\"originalResponse\"))).getJsonObject(\"summary\"));\n+                                ccResponse = new CruiseControlUserTaskResponse(userTaskID, statusJson);\n+                            } else if (taskStatus.equals(CruiseControlUserTaskStatus.ACTIVE.toString())) {\n+                                // If he status is ACTIVE there will not be a \"summary\" so we skip pulling the summary key", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01c08d0d31047b3ec3be89bce09b5c76515aed40"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDE4ODk4OnYy", "diffSide": "LEFT", "path": "documentation/modules/cruise-control/ref-cruise-control-configuration.adoc", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTo0OTozMVrOGhBvPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzoyNzoyNlrOGhJvOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI4NDY2OQ==", "bodyText": "I would not remove everything. The summary and description about what topics are in place are useful I think. I would remove the parts where creating the metrics topic is mentioned.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3173#discussion_r437284669", "createdAt": "2020-06-09T09:49:31Z", "author": {"login": "ppatierno"}, "path": "documentation/modules/cruise-control/ref-cruise-control-configuration.adoc", "diffHunk": "@@ -97,49 +97,6 @@ spec:\n .Additional resources\n For more information, refer to the xref:type-BrokerCapacity-reference[].\n \n-[#auto-created-topics-logs]\n-[discrete]\n-== Auto-created topics and log compaction\n-\n-Cruise Control requires the following three topics in order to work:\n-\n-* `strimzi.cruisecontrol.partitionmetricsamples`\n-* `strimzi.cruisecontrol.modeltrainingsamples`\n-* `strimzi.cruisecontrol.metrics`\n-\n-These three topics are usually auto-created by Strimzi and Cruise Control. First, the metric reporters create the `strimzi.cruisecontrol.metrics` topic. \n-Then, Cruise Control creates the `strimzi.cruisecontrol.partitionmetricsamples` and `strimzi.cruisecontrol.modeltrainingsamples` topics.\n-\n-However, if automatic topic creation is _disabled_ in Kafka (`auto.create.topics.enable: false` is configured in `spec.kafka.config` when starting a new Kafka cluster) the Cruise Control metric reporters are unable to create the `strimzi.cruisecontrol.metrics` topic.\n-In this situation, you need to manually create the `strimzi.cruisecontrol.metrics` topic before deploying Cruise Control. \n-You can do this using the following command:\n-\n-[source,shell,subs=\"attributes+\"]\n-----\n-kubectl apply -f examples/cruise-control/cruise-control-topic.yaml\n-----\n-\n-Log compaction might remove records that are needed by Cruise Control; therefore, all auto-created topics must be configured with `cleanup.policy=delete` to disable log compaction. \n-Cruise Control will automatically disable log compaction for the `strimzi.cruisecontrol.partitionmetricsamples` and `strimzi.cruisecontrol.modeltrainingsamples` topics.\n-The Cruise Control metric reporters attempt to disable log compaction for the `strimzi.cruisecontrol.metrics` topic, but fail if they are started with a new Kafka cluster.\n-This is only a problem if log compaction is enabled in Kafka with the setting `log.cleanup.policy=compact` in `spec.kafka.config`. \n-In this situation, log compaction will be enabled for the `strimzi.cruisecontrol.metrics` topic and will need to be overridden with `cleanup.policy=delete` in the `strimzi.cruisecontrol.metrics` topic.\n-\n-Here is an example where log compaction is disabled in a topic that was auto-created by Cruise Control:\n-\n-[source,yaml,subs=\"+quotes,attributes\"]\n-----\n-apiVersion: kafka.strimzi.io/v1beta1\n-kind: KafkaTopic\n-metadata:\n-  name: strimzi.cruisecontrol.metrics\n-spec:\n-  partitions: 1\n-  replicas: 1\n-  config:\n-    cleanup.policy: delete\n-----\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01c08d0d31047b3ec3be89bce09b5c76515aed40"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI5MTU3Ng==", "bodyText": "Agree that the topic description might be useful but not sure where would be the best place for it? Topic names aren't configurable AFAIK?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3173#discussion_r437291576", "createdAt": "2020-06-09T10:01:18Z", "author": {"login": "tomncooper"}, "path": "documentation/modules/cruise-control/ref-cruise-control-configuration.adoc", "diffHunk": "@@ -97,49 +97,6 @@ spec:\n .Additional resources\n For more information, refer to the xref:type-BrokerCapacity-reference[].\n \n-[#auto-created-topics-logs]\n-[discrete]\n-== Auto-created topics and log compaction\n-\n-Cruise Control requires the following three topics in order to work:\n-\n-* `strimzi.cruisecontrol.partitionmetricsamples`\n-* `strimzi.cruisecontrol.modeltrainingsamples`\n-* `strimzi.cruisecontrol.metrics`\n-\n-These three topics are usually auto-created by Strimzi and Cruise Control. First, the metric reporters create the `strimzi.cruisecontrol.metrics` topic. \n-Then, Cruise Control creates the `strimzi.cruisecontrol.partitionmetricsamples` and `strimzi.cruisecontrol.modeltrainingsamples` topics.\n-\n-However, if automatic topic creation is _disabled_ in Kafka (`auto.create.topics.enable: false` is configured in `spec.kafka.config` when starting a new Kafka cluster) the Cruise Control metric reporters are unable to create the `strimzi.cruisecontrol.metrics` topic.\n-In this situation, you need to manually create the `strimzi.cruisecontrol.metrics` topic before deploying Cruise Control. \n-You can do this using the following command:\n-\n-[source,shell,subs=\"attributes+\"]\n-----\n-kubectl apply -f examples/cruise-control/cruise-control-topic.yaml\n-----\n-\n-Log compaction might remove records that are needed by Cruise Control; therefore, all auto-created topics must be configured with `cleanup.policy=delete` to disable log compaction. \n-Cruise Control will automatically disable log compaction for the `strimzi.cruisecontrol.partitionmetricsamples` and `strimzi.cruisecontrol.modeltrainingsamples` topics.\n-The Cruise Control metric reporters attempt to disable log compaction for the `strimzi.cruisecontrol.metrics` topic, but fail if they are started with a new Kafka cluster.\n-This is only a problem if log compaction is enabled in Kafka with the setting `log.cleanup.policy=compact` in `spec.kafka.config`. \n-In this situation, log compaction will be enabled for the `strimzi.cruisecontrol.metrics` topic and will need to be overridden with `cleanup.policy=delete` in the `strimzi.cruisecontrol.metrics` topic.\n-\n-Here is an example where log compaction is disabled in a topic that was auto-created by Cruise Control:\n-\n-[source,yaml,subs=\"+quotes,attributes\"]\n-----\n-apiVersion: kafka.strimzi.io/v1beta1\n-kind: KafkaTopic\n-metadata:\n-  name: strimzi.cruisecontrol.metrics\n-spec:\n-  partitions: 1\n-  replicas: 1\n-  config:\n-    cleanup.policy: delete\n-----\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI4NDY2OQ=="}, "originalCommit": {"oid": "01c08d0d31047b3ec3be89bce09b5c76515aed40"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMwMTg5MA==", "bodyText": "Yes, the names cannot be changed but still describing what they are sounds useful to me. I would say that the current place is fine but we should make it a concept more than a reference (even if experts are @laidan6000 and @PaulRMellor here) and we should change the title. It's more about explaining why the user will see some new topics, who created them and what's their purpose.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3173#discussion_r437301890", "createdAt": "2020-06-09T10:19:45Z", "author": {"login": "ppatierno"}, "path": "documentation/modules/cruise-control/ref-cruise-control-configuration.adoc", "diffHunk": "@@ -97,49 +97,6 @@ spec:\n .Additional resources\n For more information, refer to the xref:type-BrokerCapacity-reference[].\n \n-[#auto-created-topics-logs]\n-[discrete]\n-== Auto-created topics and log compaction\n-\n-Cruise Control requires the following three topics in order to work:\n-\n-* `strimzi.cruisecontrol.partitionmetricsamples`\n-* `strimzi.cruisecontrol.modeltrainingsamples`\n-* `strimzi.cruisecontrol.metrics`\n-\n-These three topics are usually auto-created by Strimzi and Cruise Control. First, the metric reporters create the `strimzi.cruisecontrol.metrics` topic. \n-Then, Cruise Control creates the `strimzi.cruisecontrol.partitionmetricsamples` and `strimzi.cruisecontrol.modeltrainingsamples` topics.\n-\n-However, if automatic topic creation is _disabled_ in Kafka (`auto.create.topics.enable: false` is configured in `spec.kafka.config` when starting a new Kafka cluster) the Cruise Control metric reporters are unable to create the `strimzi.cruisecontrol.metrics` topic.\n-In this situation, you need to manually create the `strimzi.cruisecontrol.metrics` topic before deploying Cruise Control. \n-You can do this using the following command:\n-\n-[source,shell,subs=\"attributes+\"]\n-----\n-kubectl apply -f examples/cruise-control/cruise-control-topic.yaml\n-----\n-\n-Log compaction might remove records that are needed by Cruise Control; therefore, all auto-created topics must be configured with `cleanup.policy=delete` to disable log compaction. \n-Cruise Control will automatically disable log compaction for the `strimzi.cruisecontrol.partitionmetricsamples` and `strimzi.cruisecontrol.modeltrainingsamples` topics.\n-The Cruise Control metric reporters attempt to disable log compaction for the `strimzi.cruisecontrol.metrics` topic, but fail if they are started with a new Kafka cluster.\n-This is only a problem if log compaction is enabled in Kafka with the setting `log.cleanup.policy=compact` in `spec.kafka.config`. \n-In this situation, log compaction will be enabled for the `strimzi.cruisecontrol.metrics` topic and will need to be overridden with `cleanup.policy=delete` in the `strimzi.cruisecontrol.metrics` topic.\n-\n-Here is an example where log compaction is disabled in a topic that was auto-created by Cruise Control:\n-\n-[source,yaml,subs=\"+quotes,attributes\"]\n-----\n-apiVersion: kafka.strimzi.io/v1beta1\n-kind: KafkaTopic\n-metadata:\n-  name: strimzi.cruisecontrol.metrics\n-spec:\n-  partitions: 1\n-  replicas: 1\n-  config:\n-    cleanup.policy: delete\n-----\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI4NDY2OQ=="}, "originalCommit": {"oid": "01c08d0d31047b3ec3be89bce09b5c76515aed40"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMwMzQzNQ==", "bodyText": "Agreed, @laidan6000 would it make sense to leave this removal from the configuration in this PR and for you to do a PR adding this description of the metrics topics into an appropriate section (installation/deployment)?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3173#discussion_r437303435", "createdAt": "2020-06-09T10:22:36Z", "author": {"login": "tomncooper"}, "path": "documentation/modules/cruise-control/ref-cruise-control-configuration.adoc", "diffHunk": "@@ -97,49 +97,6 @@ spec:\n .Additional resources\n For more information, refer to the xref:type-BrokerCapacity-reference[].\n \n-[#auto-created-topics-logs]\n-[discrete]\n-== Auto-created topics and log compaction\n-\n-Cruise Control requires the following three topics in order to work:\n-\n-* `strimzi.cruisecontrol.partitionmetricsamples`\n-* `strimzi.cruisecontrol.modeltrainingsamples`\n-* `strimzi.cruisecontrol.metrics`\n-\n-These three topics are usually auto-created by Strimzi and Cruise Control. First, the metric reporters create the `strimzi.cruisecontrol.metrics` topic. \n-Then, Cruise Control creates the `strimzi.cruisecontrol.partitionmetricsamples` and `strimzi.cruisecontrol.modeltrainingsamples` topics.\n-\n-However, if automatic topic creation is _disabled_ in Kafka (`auto.create.topics.enable: false` is configured in `spec.kafka.config` when starting a new Kafka cluster) the Cruise Control metric reporters are unable to create the `strimzi.cruisecontrol.metrics` topic.\n-In this situation, you need to manually create the `strimzi.cruisecontrol.metrics` topic before deploying Cruise Control. \n-You can do this using the following command:\n-\n-[source,shell,subs=\"attributes+\"]\n-----\n-kubectl apply -f examples/cruise-control/cruise-control-topic.yaml\n-----\n-\n-Log compaction might remove records that are needed by Cruise Control; therefore, all auto-created topics must be configured with `cleanup.policy=delete` to disable log compaction. \n-Cruise Control will automatically disable log compaction for the `strimzi.cruisecontrol.partitionmetricsamples` and `strimzi.cruisecontrol.modeltrainingsamples` topics.\n-The Cruise Control metric reporters attempt to disable log compaction for the `strimzi.cruisecontrol.metrics` topic, but fail if they are started with a new Kafka cluster.\n-This is only a problem if log compaction is enabled in Kafka with the setting `log.cleanup.policy=compact` in `spec.kafka.config`. \n-In this situation, log compaction will be enabled for the `strimzi.cruisecontrol.metrics` topic and will need to be overridden with `cleanup.policy=delete` in the `strimzi.cruisecontrol.metrics` topic.\n-\n-Here is an example where log compaction is disabled in a topic that was auto-created by Cruise Control:\n-\n-[source,yaml,subs=\"+quotes,attributes\"]\n-----\n-apiVersion: kafka.strimzi.io/v1beta1\n-kind: KafkaTopic\n-metadata:\n-  name: strimzi.cruisecontrol.metrics\n-spec:\n-  partitions: 1\n-  replicas: 1\n-  config:\n-    cleanup.policy: delete\n-----\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI4NDY2OQ=="}, "originalCommit": {"oid": "01c08d0d31047b3ec3be89bce09b5c76515aed40"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQxNTczNg==", "bodyText": "Yes, good idea to keep the explanations of the CC topics as a concept. I'm happy to do this in a separate PR.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3173#discussion_r437415736", "createdAt": "2020-06-09T13:27:26Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/cruise-control/ref-cruise-control-configuration.adoc", "diffHunk": "@@ -97,49 +97,6 @@ spec:\n .Additional resources\n For more information, refer to the xref:type-BrokerCapacity-reference[].\n \n-[#auto-created-topics-logs]\n-[discrete]\n-== Auto-created topics and log compaction\n-\n-Cruise Control requires the following three topics in order to work:\n-\n-* `strimzi.cruisecontrol.partitionmetricsamples`\n-* `strimzi.cruisecontrol.modeltrainingsamples`\n-* `strimzi.cruisecontrol.metrics`\n-\n-These three topics are usually auto-created by Strimzi and Cruise Control. First, the metric reporters create the `strimzi.cruisecontrol.metrics` topic. \n-Then, Cruise Control creates the `strimzi.cruisecontrol.partitionmetricsamples` and `strimzi.cruisecontrol.modeltrainingsamples` topics.\n-\n-However, if automatic topic creation is _disabled_ in Kafka (`auto.create.topics.enable: false` is configured in `spec.kafka.config` when starting a new Kafka cluster) the Cruise Control metric reporters are unable to create the `strimzi.cruisecontrol.metrics` topic.\n-In this situation, you need to manually create the `strimzi.cruisecontrol.metrics` topic before deploying Cruise Control. \n-You can do this using the following command:\n-\n-[source,shell,subs=\"attributes+\"]\n-----\n-kubectl apply -f examples/cruise-control/cruise-control-topic.yaml\n-----\n-\n-Log compaction might remove records that are needed by Cruise Control; therefore, all auto-created topics must be configured with `cleanup.policy=delete` to disable log compaction. \n-Cruise Control will automatically disable log compaction for the `strimzi.cruisecontrol.partitionmetricsamples` and `strimzi.cruisecontrol.modeltrainingsamples` topics.\n-The Cruise Control metric reporters attempt to disable log compaction for the `strimzi.cruisecontrol.metrics` topic, but fail if they are started with a new Kafka cluster.\n-This is only a problem if log compaction is enabled in Kafka with the setting `log.cleanup.policy=compact` in `spec.kafka.config`. \n-In this situation, log compaction will be enabled for the `strimzi.cruisecontrol.metrics` topic and will need to be overridden with `cleanup.policy=delete` in the `strimzi.cruisecontrol.metrics` topic.\n-\n-Here is an example where log compaction is disabled in a topic that was auto-created by Cruise Control:\n-\n-[source,yaml,subs=\"+quotes,attributes\"]\n-----\n-apiVersion: kafka.strimzi.io/v1beta1\n-kind: KafkaTopic\n-metadata:\n-  name: strimzi.cruisecontrol.metrics\n-spec:\n-  partitions: 1\n-  replicas: 1\n-  config:\n-    cleanup.policy: delete\n-----\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI4NDY2OQ=="}, "originalCommit": {"oid": "01c08d0d31047b3ec3be89bce09b5c76515aed40"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTI2MDAzOnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/cruisecontrol/CruiseControlApiImpl.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDoxMzo1NlrOGhMLlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDo0OToxN1rOGhN3iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ1NTc2NA==", "bodyText": "How is it reflected in the resource status? The user will see the \"summary\" with the original proposal and the final state will be Ready but no evidence that it's completed with error?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3173#discussion_r437455764", "createdAt": "2020-06-09T14:13:56Z", "author": {"login": "ppatierno"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/cruisecontrol/CruiseControlApiImpl.java", "diffHunk": "@@ -202,38 +202,40 @@ public CruiseControlApiImpl(Vertx vertx, int idleTimeout) {\n                                                 json.getString(CC_REST_API_ERROR_KEY)));\n                             }\n                             JsonObject statusJson = new JsonObject();\n-                            String taskStatus = jsonUserTask.getString(\"Status\");\n-                            statusJson.put(\"Status\", taskStatus);\n-                            // The status could be ACTIVE in which case there will not be a \"summary\" so we check that we are\n-                            // in a state that actually has that key.\n-                            if (taskStatus.equals(CruiseControlUserTaskStatus.IN_EXECUTION.toString()) ||\n-                                    taskStatus.equals(CruiseControlUserTaskStatus.COMPLETED.toString())) {\n-                                // We now need to extract the original response which is in a raw string (not nicely formatted JSON)\n-                                statusJson.put(\"summary\", ((JsonObject) Json.decodeValue(jsonUserTask.getString(\"originalResponse\"))).getJsonObject(\"summary\"));\n+                            String taskStatusStr = jsonUserTask.getString(\"Status\");\n+                            statusJson.put(\"Status\", taskStatusStr);\n+                            CruiseControlUserTaskStatus taskStatus = CruiseControlUserTaskStatus.lookup(taskStatusStr);\n+                            switch (taskStatus) {\n+                                case ACTIVE:\n+                                    // If the status is ACTIVE there will not be a \"summary\" so we skip pulling the summary key\n+                                    break;\n+                                case IN_EXECUTION:\n+                                    // Tasks in execution will be rebalance tasks, so their original response will contain the summary of the rebalance they are executing\n+                                    // We handle these in the same way as COMPLETED tasks so we drop down to that case.\n+                                case COMPLETED:\n+                                    // Completed tasks will have the original rebalance proposal summary in their original response\n+                                    statusJson.put(\"summary\", ((JsonObject) Json.decodeValue(jsonUserTask.getString(\"originalResponse\"))).getJsonObject(\"summary\"));\n+                                    break;\n+                                case COMPLETED_WITH_ERROR:\n+                                    // Completed with error tasks will have \"CompletedWithError\" as their original response, which is not Json.\n+                                    statusJson.put(\"summary\", jsonUserTask.getString(\"originalResponse\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ccfe2d3e4243e0b53b4e0c93b8c9205bcc97be3"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ1OTc2OQ==", "bodyText": "No the status of the field is still CompletedWithError and this will be picked up in the KRAO onRebalancing method  where the status will be set to NotReady.  We could just have a blank summary but in future this will hopefully contain details of the actual error (I have a rough idea for upstream CC PR to retain that info for the user task).", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3173#discussion_r437459769", "createdAt": "2020-06-09T14:19:11Z", "author": {"login": "tomncooper"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/cruisecontrol/CruiseControlApiImpl.java", "diffHunk": "@@ -202,38 +202,40 @@ public CruiseControlApiImpl(Vertx vertx, int idleTimeout) {\n                                                 json.getString(CC_REST_API_ERROR_KEY)));\n                             }\n                             JsonObject statusJson = new JsonObject();\n-                            String taskStatus = jsonUserTask.getString(\"Status\");\n-                            statusJson.put(\"Status\", taskStatus);\n-                            // The status could be ACTIVE in which case there will not be a \"summary\" so we check that we are\n-                            // in a state that actually has that key.\n-                            if (taskStatus.equals(CruiseControlUserTaskStatus.IN_EXECUTION.toString()) ||\n-                                    taskStatus.equals(CruiseControlUserTaskStatus.COMPLETED.toString())) {\n-                                // We now need to extract the original response which is in a raw string (not nicely formatted JSON)\n-                                statusJson.put(\"summary\", ((JsonObject) Json.decodeValue(jsonUserTask.getString(\"originalResponse\"))).getJsonObject(\"summary\"));\n+                            String taskStatusStr = jsonUserTask.getString(\"Status\");\n+                            statusJson.put(\"Status\", taskStatusStr);\n+                            CruiseControlUserTaskStatus taskStatus = CruiseControlUserTaskStatus.lookup(taskStatusStr);\n+                            switch (taskStatus) {\n+                                case ACTIVE:\n+                                    // If the status is ACTIVE there will not be a \"summary\" so we skip pulling the summary key\n+                                    break;\n+                                case IN_EXECUTION:\n+                                    // Tasks in execution will be rebalance tasks, so their original response will contain the summary of the rebalance they are executing\n+                                    // We handle these in the same way as COMPLETED tasks so we drop down to that case.\n+                                case COMPLETED:\n+                                    // Completed tasks will have the original rebalance proposal summary in their original response\n+                                    statusJson.put(\"summary\", ((JsonObject) Json.decodeValue(jsonUserTask.getString(\"originalResponse\"))).getJsonObject(\"summary\"));\n+                                    break;\n+                                case COMPLETED_WITH_ERROR:\n+                                    // Completed with error tasks will have \"CompletedWithError\" as their original response, which is not Json.\n+                                    statusJson.put(\"summary\", jsonUserTask.getString(\"originalResponse\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ1NTc2NA=="}, "originalCommit": {"oid": "3ccfe2d3e4243e0b53b4e0c93b8c9205bcc97be3"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ2MjQ5OQ==", "bodyText": "No the status of the field is still CompletedWithError\n\nwhich status field? in the next sentence you said it's NotReady.\n\nand this will be picked up in the KRAO onRebalancing method where the status will be set to NotReady\n\nso you are saying that the KafkaRebalance will be in NotReady status but with a valid summary? I think it's really confusing for the user.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3173#discussion_r437462499", "createdAt": "2020-06-09T14:22:43Z", "author": {"login": "ppatierno"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/cruisecontrol/CruiseControlApiImpl.java", "diffHunk": "@@ -202,38 +202,40 @@ public CruiseControlApiImpl(Vertx vertx, int idleTimeout) {\n                                                 json.getString(CC_REST_API_ERROR_KEY)));\n                             }\n                             JsonObject statusJson = new JsonObject();\n-                            String taskStatus = jsonUserTask.getString(\"Status\");\n-                            statusJson.put(\"Status\", taskStatus);\n-                            // The status could be ACTIVE in which case there will not be a \"summary\" so we check that we are\n-                            // in a state that actually has that key.\n-                            if (taskStatus.equals(CruiseControlUserTaskStatus.IN_EXECUTION.toString()) ||\n-                                    taskStatus.equals(CruiseControlUserTaskStatus.COMPLETED.toString())) {\n-                                // We now need to extract the original response which is in a raw string (not nicely formatted JSON)\n-                                statusJson.put(\"summary\", ((JsonObject) Json.decodeValue(jsonUserTask.getString(\"originalResponse\"))).getJsonObject(\"summary\"));\n+                            String taskStatusStr = jsonUserTask.getString(\"Status\");\n+                            statusJson.put(\"Status\", taskStatusStr);\n+                            CruiseControlUserTaskStatus taskStatus = CruiseControlUserTaskStatus.lookup(taskStatusStr);\n+                            switch (taskStatus) {\n+                                case ACTIVE:\n+                                    // If the status is ACTIVE there will not be a \"summary\" so we skip pulling the summary key\n+                                    break;\n+                                case IN_EXECUTION:\n+                                    // Tasks in execution will be rebalance tasks, so their original response will contain the summary of the rebalance they are executing\n+                                    // We handle these in the same way as COMPLETED tasks so we drop down to that case.\n+                                case COMPLETED:\n+                                    // Completed tasks will have the original rebalance proposal summary in their original response\n+                                    statusJson.put(\"summary\", ((JsonObject) Json.decodeValue(jsonUserTask.getString(\"originalResponse\"))).getJsonObject(\"summary\"));\n+                                    break;\n+                                case COMPLETED_WITH_ERROR:\n+                                    // Completed with error tasks will have \"CompletedWithError\" as their original response, which is not Json.\n+                                    statusJson.put(\"summary\", jsonUserTask.getString(\"originalResponse\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ1NTc2NA=="}, "originalCommit": {"oid": "3ccfe2d3e4243e0b53b4e0c93b8c9205bcc97be3"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ2ODIwNA==", "bodyText": "This is the CC client? It doesn't touch the KafkaReabalance status field. The KRAO does that in the onRebalancing method. The status field of the CruiseControlReponse's json is CompletedWithError which will trigger the appropriate branch in the KRAO which will not set a summary (which matches what it does currently).", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3173#discussion_r437468204", "createdAt": "2020-06-09T14:29:57Z", "author": {"login": "tomncooper"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/cruisecontrol/CruiseControlApiImpl.java", "diffHunk": "@@ -202,38 +202,40 @@ public CruiseControlApiImpl(Vertx vertx, int idleTimeout) {\n                                                 json.getString(CC_REST_API_ERROR_KEY)));\n                             }\n                             JsonObject statusJson = new JsonObject();\n-                            String taskStatus = jsonUserTask.getString(\"Status\");\n-                            statusJson.put(\"Status\", taskStatus);\n-                            // The status could be ACTIVE in which case there will not be a \"summary\" so we check that we are\n-                            // in a state that actually has that key.\n-                            if (taskStatus.equals(CruiseControlUserTaskStatus.IN_EXECUTION.toString()) ||\n-                                    taskStatus.equals(CruiseControlUserTaskStatus.COMPLETED.toString())) {\n-                                // We now need to extract the original response which is in a raw string (not nicely formatted JSON)\n-                                statusJson.put(\"summary\", ((JsonObject) Json.decodeValue(jsonUserTask.getString(\"originalResponse\"))).getJsonObject(\"summary\"));\n+                            String taskStatusStr = jsonUserTask.getString(\"Status\");\n+                            statusJson.put(\"Status\", taskStatusStr);\n+                            CruiseControlUserTaskStatus taskStatus = CruiseControlUserTaskStatus.lookup(taskStatusStr);\n+                            switch (taskStatus) {\n+                                case ACTIVE:\n+                                    // If the status is ACTIVE there will not be a \"summary\" so we skip pulling the summary key\n+                                    break;\n+                                case IN_EXECUTION:\n+                                    // Tasks in execution will be rebalance tasks, so their original response will contain the summary of the rebalance they are executing\n+                                    // We handle these in the same way as COMPLETED tasks so we drop down to that case.\n+                                case COMPLETED:\n+                                    // Completed tasks will have the original rebalance proposal summary in their original response\n+                                    statusJson.put(\"summary\", ((JsonObject) Json.decodeValue(jsonUserTask.getString(\"originalResponse\"))).getJsonObject(\"summary\"));\n+                                    break;\n+                                case COMPLETED_WITH_ERROR:\n+                                    // Completed with error tasks will have \"CompletedWithError\" as their original response, which is not Json.\n+                                    statusJson.put(\"summary\", jsonUserTask.getString(\"originalResponse\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ1NTc2NA=="}, "originalCommit": {"oid": "3ccfe2d3e4243e0b53b4e0c93b8c9205bcc97be3"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ4MzQwMw==", "bodyText": "You are right! I did too many reviews today! ;-)", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3173#discussion_r437483403", "createdAt": "2020-06-09T14:49:17Z", "author": {"login": "ppatierno"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/cruisecontrol/CruiseControlApiImpl.java", "diffHunk": "@@ -202,38 +202,40 @@ public CruiseControlApiImpl(Vertx vertx, int idleTimeout) {\n                                                 json.getString(CC_REST_API_ERROR_KEY)));\n                             }\n                             JsonObject statusJson = new JsonObject();\n-                            String taskStatus = jsonUserTask.getString(\"Status\");\n-                            statusJson.put(\"Status\", taskStatus);\n-                            // The status could be ACTIVE in which case there will not be a \"summary\" so we check that we are\n-                            // in a state that actually has that key.\n-                            if (taskStatus.equals(CruiseControlUserTaskStatus.IN_EXECUTION.toString()) ||\n-                                    taskStatus.equals(CruiseControlUserTaskStatus.COMPLETED.toString())) {\n-                                // We now need to extract the original response which is in a raw string (not nicely formatted JSON)\n-                                statusJson.put(\"summary\", ((JsonObject) Json.decodeValue(jsonUserTask.getString(\"originalResponse\"))).getJsonObject(\"summary\"));\n+                            String taskStatusStr = jsonUserTask.getString(\"Status\");\n+                            statusJson.put(\"Status\", taskStatusStr);\n+                            CruiseControlUserTaskStatus taskStatus = CruiseControlUserTaskStatus.lookup(taskStatusStr);\n+                            switch (taskStatus) {\n+                                case ACTIVE:\n+                                    // If the status is ACTIVE there will not be a \"summary\" so we skip pulling the summary key\n+                                    break;\n+                                case IN_EXECUTION:\n+                                    // Tasks in execution will be rebalance tasks, so their original response will contain the summary of the rebalance they are executing\n+                                    // We handle these in the same way as COMPLETED tasks so we drop down to that case.\n+                                case COMPLETED:\n+                                    // Completed tasks will have the original rebalance proposal summary in their original response\n+                                    statusJson.put(\"summary\", ((JsonObject) Json.decodeValue(jsonUserTask.getString(\"originalResponse\"))).getJsonObject(\"summary\"));\n+                                    break;\n+                                case COMPLETED_WITH_ERROR:\n+                                    // Completed with error tasks will have \"CompletedWithError\" as their original response, which is not Json.\n+                                    statusJson.put(\"summary\", jsonUserTask.getString(\"originalResponse\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ1NTc2NA=="}, "originalCommit": {"oid": "3ccfe2d3e4243e0b53b4e0c93b8c9205bcc97be3"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTQ2ODkyOnYy", "diffSide": "RIGHT", "path": "CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDo1Nzo1MVrOGhORxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNToyNjoyNlrOGhQG6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ5MDExOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Upgraded to Cruise Control version 2.0.108 - This removes the need to manually create metrics topics if topic auto creation is disabled.\n          \n          \n            \n            * Remove the need to manually create Cruise Control topics if topic auto creation is disabled.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3173#discussion_r437490119", "createdAt": "2020-06-09T14:57:51Z", "author": {"login": "scholzj"}, "path": "CHANGELOG.md", "diffHunk": "@@ -5,6 +5,7 @@\n \n * Remove deprecated `Kafka.spec.topicOperator` classes and deployment logic\n * Use Java 11 as the Java runtime\n+* Upgraded to Cruise Control version 2.0.108 - This removes the need to manually create metrics topics if topic auto creation is disabled.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ebe79d88835979d975eb71b7488f371e0fa96ef"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ5MTYwNA==", "bodyText": "Why is the version of the upstream system not relevant?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3173#discussion_r437491604", "createdAt": "2020-06-09T14:59:48Z", "author": {"login": "tomncooper"}, "path": "CHANGELOG.md", "diffHunk": "@@ -5,6 +5,7 @@\n \n * Remove deprecated `Kafka.spec.topicOperator` classes and deployment logic\n * Use Java 11 as the Java runtime\n+* Upgraded to Cruise Control version 2.0.108 - This removes the need to manually create metrics topics if topic auto creation is disabled.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ5MDExOQ=="}, "originalCommit": {"oid": "8ebe79d88835979d975eb71b7488f371e0fa96ef"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ5NTYwNQ==", "bodyText": "And why is it relevant? Especially with the weird CC versioning and the version change being patch only, for most people it is meaning less.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3173#discussion_r437495605", "createdAt": "2020-06-09T15:05:04Z", "author": {"login": "scholzj"}, "path": "CHANGELOG.md", "diffHunk": "@@ -5,6 +5,7 @@\n \n * Remove deprecated `Kafka.spec.topicOperator` classes and deployment logic\n * Use Java 11 as the Java runtime\n+* Upgraded to Cruise Control version 2.0.108 - This removes the need to manually create metrics topics if topic auto creation is disabled.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ5MDExOQ=="}, "originalCommit": {"oid": "8ebe79d88835979d975eb71b7488f371e0fa96ef"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ5OTkwMQ==", "bodyText": "Well it is a log of changes and this is a change? Maybe the users can decide for themselves if the version number is important info or not?\nIf you feel that strongly about it I will take it out. But I don't think we have the CC version documented anywhere (other than the upstream poms) so we should probably add it to the docs somewhere?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3173#discussion_r437499901", "createdAt": "2020-06-09T15:09:59Z", "author": {"login": "tomncooper"}, "path": "CHANGELOG.md", "diffHunk": "@@ -5,6 +5,7 @@\n \n * Remove deprecated `Kafka.spec.topicOperator` classes and deployment logic\n * Use Java 11 as the Java runtime\n+* Upgraded to Cruise Control version 2.0.108 - This removes the need to manually create metrics topics if topic auto creation is disabled.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ5MDExOQ=="}, "originalCommit": {"oid": "8ebe79d88835979d975eb71b7488f371e0fa96ef"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUyMDEwNQ==", "bodyText": "I feel strongly about it. We do not document there patch versions of Zookeeper, minor versions of Fabric8 or Vert.x updates etc.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3173#discussion_r437520105", "createdAt": "2020-06-09T15:26:26Z", "author": {"login": "scholzj"}, "path": "CHANGELOG.md", "diffHunk": "@@ -5,6 +5,7 @@\n \n * Remove deprecated `Kafka.spec.topicOperator` classes and deployment logic\n * Use Java 11 as the Java runtime\n+* Upgraded to Cruise Control version 2.0.108 - This removes the need to manually create metrics topics if topic auto creation is disabled.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ5MDExOQ=="}, "originalCommit": {"oid": "8ebe79d88835979d975eb71b7488f371e0fa96ef"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTQ4NDYzOnYy", "diffSide": "RIGHT", "path": "documentation/modules/cruise-control/proc-deploying-cruise-control.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTowMToxNFrOGhOcJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNToxOTo0MlrOGhPptw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ5Mjc3Mw==", "bodyText": "Following the new and less strict documentation rules ... maybe you can remove the proceudure structure (The prerequisites heading, the procedure heading etc.) which seem to have lot more noise than value.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3173#discussion_r437492773", "createdAt": "2020-06-09T15:01:14Z", "author": {"login": "scholzj"}, "path": "documentation/modules/cruise-control/proc-deploying-cruise-control.adoc", "diffHunk": "@@ -9,23 +9,13 @@ To deploy Cruise Control to your Strimzi cluster, define the configuration using\n \n Deploy one instance of Cruise Control per Kafka cluster.\n \n-NOTE: Step one is only required if automatic topic creation is disabled in the Kafka cluster.\n-\n .Prerequisites\n \n * A Kubernetes cluster\n * A running Cluster Operator\n-* You are aware of the guidance on xref:#auto-created-topics-logs[Auto-created topics and log compaction].\n \n .Procedure\n \n-. If automatic topic creation is disabled (`auto.create.topics.enable: false` is configured in `spec.kafka.config`), first create the `strimzi.cruisecontrol.metrics` topic:\n-+\n-[source,shell,subs=\"attributes+\"]\n-----\n-kubectl apply -f examples/cruise-control/cruise-control-topic.yaml\n-----\n-\n . Edit the `cruiseControl` property of the `Kafka` resource.\n +\n The properties you can configure are shown in this example configuration:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ebe79d88835979d975eb71b7488f371e0fa96ef"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUxMjYzMQ==", "bodyText": "I think @laidan6000 has said he will do a follow up PR which will add the CC metric topic info etc to the intro so maybe these edits could be made in that PR?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3173#discussion_r437512631", "createdAt": "2020-06-09T15:19:42Z", "author": {"login": "tomncooper"}, "path": "documentation/modules/cruise-control/proc-deploying-cruise-control.adoc", "diffHunk": "@@ -9,23 +9,13 @@ To deploy Cruise Control to your Strimzi cluster, define the configuration using\n \n Deploy one instance of Cruise Control per Kafka cluster.\n \n-NOTE: Step one is only required if automatic topic creation is disabled in the Kafka cluster.\n-\n .Prerequisites\n \n * A Kubernetes cluster\n * A running Cluster Operator\n-* You are aware of the guidance on xref:#auto-created-topics-logs[Auto-created topics and log compaction].\n \n .Procedure\n \n-. If automatic topic creation is disabled (`auto.create.topics.enable: false` is configured in `spec.kafka.config`), first create the `strimzi.cruisecontrol.metrics` topic:\n-+\n-[source,shell,subs=\"attributes+\"]\n-----\n-kubectl apply -f examples/cruise-control/cruise-control-topic.yaml\n-----\n-\n . Edit the `cruiseControl` property of the `Kafka` resource.\n +\n The properties you can configure are shown in this example configuration:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ5Mjc3Mw=="}, "originalCommit": {"oid": "8ebe79d88835979d975eb71b7488f371e0fa96ef"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTQ4ODIwOnYy", "diffSide": "RIGHT", "path": "documentation/modules/cruise-control/proc-deploying-cruise-control.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTowMjowM1rOGhOedQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNjoxOTo1M1rOGhSYnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ5MzM2NQ==", "bodyText": "Should this say something like _Edit the Kafka resource and add cruideControl property?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3173#discussion_r437493365", "createdAt": "2020-06-09T15:02:03Z", "author": {"login": "scholzj"}, "path": "documentation/modules/cruise-control/proc-deploying-cruise-control.adoc", "diffHunk": "@@ -9,23 +9,13 @@ To deploy Cruise Control to your Strimzi cluster, define the configuration using\n \n Deploy one instance of Cruise Control per Kafka cluster.\n \n-NOTE: Step one is only required if automatic topic creation is disabled in the Kafka cluster.\n-\n .Prerequisites\n \n * A Kubernetes cluster\n * A running Cluster Operator\n-* You are aware of the guidance on xref:#auto-created-topics-logs[Auto-created topics and log compaction].\n \n .Procedure\n \n-. If automatic topic creation is disabled (`auto.create.topics.enable: false` is configured in `spec.kafka.config`), first create the `strimzi.cruisecontrol.metrics` topic:\n-+\n-[source,shell,subs=\"attributes+\"]\n-----\n-kubectl apply -f examples/cruise-control/cruise-control-topic.yaml\n-----\n-\n . Edit the `cruiseControl` property of the `Kafka` resource.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ebe79d88835979d975eb71b7488f371e0fa96ef"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU1NzQwNw==", "bodyText": "Yes, it should. Good spot.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3173#discussion_r437557407", "createdAt": "2020-06-09T16:19:53Z", "author": {"login": "laidan6000"}, "path": "documentation/modules/cruise-control/proc-deploying-cruise-control.adoc", "diffHunk": "@@ -9,23 +9,13 @@ To deploy Cruise Control to your Strimzi cluster, define the configuration using\n \n Deploy one instance of Cruise Control per Kafka cluster.\n \n-NOTE: Step one is only required if automatic topic creation is disabled in the Kafka cluster.\n-\n .Prerequisites\n \n * A Kubernetes cluster\n * A running Cluster Operator\n-* You are aware of the guidance on xref:#auto-created-topics-logs[Auto-created topics and log compaction].\n \n .Procedure\n \n-. If automatic topic creation is disabled (`auto.create.topics.enable: false` is configured in `spec.kafka.config`), first create the `strimzi.cruisecontrol.metrics` topic:\n-+\n-[source,shell,subs=\"attributes+\"]\n-----\n-kubectl apply -f examples/cruise-control/cruise-control-topic.yaml\n-----\n-\n . Edit the `cruiseControl` property of the `Kafka` resource.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ5MzM2NQ=="}, "originalCommit": {"oid": "8ebe79d88835979d975eb71b7488f371e0fa96ef"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjA2NTAyOnYy", "diffSide": "RIGHT", "path": "CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzowODozM1rOGhUNuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzowODozM1rOGhUNuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU4NzM4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Removed the need to manually create Cruise Control  metrics topics if topic auto creation is disabled.\n          \n          \n            \n            * Removed the need to manually create Cruise Control metrics topics if topic auto creation is disabled.", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3173#discussion_r437587385", "createdAt": "2020-06-09T17:08:33Z", "author": {"login": "scholzj"}, "path": "CHANGELOG.md", "diffHunk": "@@ -5,6 +5,7 @@\n \n * Remove deprecated `Kafka.spec.topicOperator` classes and deployment logic\n * Use Java 11 as the Java runtime\n+* Removed the need to manually create Cruise Control  metrics topics if topic auto creation is disabled.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef472fd364eb2b8440eaa67661fdbe87e6aa2293"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODMyMjc2OnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/cruisecontrol/CruiseControlApiImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODoyMzo0MFrOGhqQMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODoyMzo0MFrOGhqQMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk0ODQ2Ng==", "bodyText": "We use this Status string a few times, maybe worth making it a constant somewhere?", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3173#discussion_r437948466", "createdAt": "2020-06-10T08:23:40Z", "author": {"login": "samuel-hawker"}, "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/cruisecontrol/CruiseControlApiImpl.java", "diffHunk": "@@ -202,38 +202,40 @@ public CruiseControlApiImpl(Vertx vertx, int idleTimeout) {\n                                                 json.getString(CC_REST_API_ERROR_KEY)));\n                             }\n                             JsonObject statusJson = new JsonObject();\n-                            String taskStatus = jsonUserTask.getString(\"Status\");\n-                            statusJson.put(\"Status\", taskStatus);\n-                            // The status could be ACTIVE in which case there will not be a \"summary\" so we check that we are\n-                            // in a state that actually has that key.\n-                            if (taskStatus.equals(CruiseControlUserTaskStatus.IN_EXECUTION.toString()) ||\n-                                    taskStatus.equals(CruiseControlUserTaskStatus.COMPLETED.toString())) {\n-                                // We now need to extract the original response which is in a raw string (not nicely formatted JSON)\n-                                statusJson.put(\"summary\", ((JsonObject) Json.decodeValue(jsonUserTask.getString(\"originalResponse\"))).getJsonObject(\"summary\"));\n+                            String taskStatusStr = jsonUserTask.getString(\"Status\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "727259319118d3aacbc24917dd1ec8b33d27e602"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODMzODc5OnYy", "diffSide": "RIGHT", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaRebalanceStateMachineTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODoyNzo1NVrOGhqanw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODoyNzo1NVrOGhqanw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk1MTEzNQ==", "bodyText": "Missing a context.succeeding", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3173#discussion_r437951135", "createdAt": "2020-06-10T08:27:55Z", "author": {"login": "samuel-hawker"}, "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaRebalanceStateMachineTest.java", "diffHunk": "@@ -190,8 +192,8 @@ public String cruiseControlHost(String clusterName, String clusterNamespace) {\n         when(mockRebalanceOps.get(CLUSTER_NAMESPACE, RESOURCE_NAME)).thenReturn(kcRebalance);\n         when(mockRebalanceOps.getAsync(CLUSTER_NAMESPACE, RESOURCE_NAME)).thenReturn(Future.succeededFuture(kcRebalance));\n \n-        return kcrao.computeNextStatus(\n-                recon, HOST, client, kcRebalance, currentState, initialAnnotation, rbOptions).compose(result -> {\n+        return kcrao.computeNextStatus(recon, HOST, client, kcRebalance, currentState, initialAnnotation, rbOptions)\n+                .compose(result -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "727259319118d3aacbc24917dd1ec8b33d27e602"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1644, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}