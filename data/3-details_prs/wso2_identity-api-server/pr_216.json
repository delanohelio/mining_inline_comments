{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2NjE0NDE0", "number": 216, "title": "Validate input values when updating IDP claims config", "bodyText": "Resolves wso2/product-is#9702\nApproach\nValidate the userIdClaim and roleClaim with existing role mappings and validate the claim URIs.\nTests\nFollowing test scenarios were passed locally.\n<class name=\"org.wso2.identity.integration.test.rest.api.server.idp.v1.IdPSuccessTest\"/>\n<class name=\"org.wso2.identity.integration.test.rest.api.server.idp.v1.IdPFailureTest\"/>", "createdAt": "2020-10-20T09:05:41Z", "url": "https://github.com/wso2/identity-api-server/pull/216", "merged": true, "mergeCommit": {"oid": "e24d6adfc2bc5ebe8ce8e4dc0d8961448a8b0f43"}, "closed": true, "closedAt": "2020-10-21T11:27:41Z", "author": {"login": "somindatommy"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdUVBMjAH2gAyNTA2NjE0NDE0OmNmODljYmZlNjE3MzhmMDRlMGJmNGQyYWIwYTcxYjExN2RkZTRjMTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUmv9jAFqTUxMzMyMjY2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "cf89cbfe61738f04e0bf4d2ab0a71b117dde4c19", "author": {"user": {"login": "somindatommy", "name": "Sominda Gamage"}}, "url": "https://github.com/wso2/identity-api-server/commit/cf89cbfe61738f04e0bf4d2ab0a71b117dde4c19", "committedDate": "2020-10-20T09:05:02Z", "message": "Validate input values when updating IDP claims config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90ef844c9f65a7ca50719a01ca71e8c70a3d319d", "author": {"user": {"login": "somindatommy", "name": "Sominda Gamage"}}, "url": "https://github.com/wso2/identity-api-server/commit/90ef844c9f65a7ca50719a01ca71e8c70a3d319d", "committedDate": "2020-10-20T10:06:06Z", "message": "[FIX] Formatting issue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyNTUwNDg5", "url": "https://github.com/wso2/identity-api-server/pull/216#pullrequestreview-512550489", "createdAt": "2020-10-20T10:15:35Z", "commit": {"oid": "90ef844c9f65a7ca50719a01ca71e8c70a3d319d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDoxNTozNVrOHk1EgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDoxNTozNVrOHk1EgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM4MDI4OQ==", "bodyText": "Can use CollectionUtils.isEmpty", "url": "https://github.com/wso2/identity-api-server/pull/216#discussion_r508380289", "createdAt": "2020-10-20T10:15:35Z", "author": {"login": "janakamarasena"}, "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java", "diffHunk": "@@ -2772,4 +2775,119 @@ private static String includeData(Constants.ErrorMessage error, String data) {\n         }\n         return message;\n     }\n+\n+    /**\n+     * Validate the claim configs of an IDP.\n+     *\n+     * @param tenantDomain Tenant domain.\n+     * @param claims       Claim configs.\n+     * @throws IdentityProviderManagementException If an error while validating the claim configs or if an invalid\n+     *                                             config is found.\n+     */\n+    private void validateClaims(String tenantDomain, Claims claims) throws IdentityProviderManagementException {\n+\n+        String userClaimURI = claims.getUserIdClaim().getUri();\n+        String roleClaimURI = claims.getRoleClaim().getUri();\n+        List<org.wso2.carbon.identity.api.server.idp.v1.model.ClaimMapping> claimMappings = claims.getMappings();\n+\n+        // EMPTY claimMappings indicate that the IDP is using local claim dialect.\n+        if (claimMappings == null || claimMappings.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90ef844c9f65a7ca50719a01ca71e8c70a3d319d"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyNTUzNjc0", "url": "https://github.com/wso2/identity-api-server/pull/216#pullrequestreview-512553674", "createdAt": "2020-10-20T10:19:40Z", "commit": {"oid": "90ef844c9f65a7ca50719a01ca71e8c70a3d319d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDoxOTo0MFrOHk1Nrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDoxOTo0MFrOHk1Nrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM4MjYzOQ==", "bodyText": "can userClaimURI or roleClaimURI be null?", "url": "https://github.com/wso2/identity-api-server/pull/216#discussion_r508382639", "createdAt": "2020-10-20T10:19:40Z", "author": {"login": "janakamarasena"}, "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java", "diffHunk": "@@ -2772,4 +2775,119 @@ private static String includeData(Constants.ErrorMessage error, String data) {\n         }\n         return message;\n     }\n+\n+    /**\n+     * Validate the claim configs of an IDP.\n+     *\n+     * @param tenantDomain Tenant domain.\n+     * @param claims       Claim configs.\n+     * @throws IdentityProviderManagementException If an error while validating the claim configs or if an invalid\n+     *                                             config is found.\n+     */\n+    private void validateClaims(String tenantDomain, Claims claims) throws IdentityProviderManagementException {\n+\n+        String userClaimURI = claims.getUserIdClaim().getUri();\n+        String roleClaimURI = claims.getRoleClaim().getUri();\n+        List<org.wso2.carbon.identity.api.server.idp.v1.model.ClaimMapping> claimMappings = claims.getMappings();\n+\n+        // EMPTY claimMappings indicate that the IDP is using local claim dialect.\n+        if (claimMappings == null || claimMappings.isEmpty()) {\n+            List<LocalClaim> localClaimsList = getLocalClaimURIs(tenantDomain);\n+            Set<String> claimURIs = localClaimsList.stream().map(LocalClaim::getClaimURI).collect(Collectors.toSet());\n+            // Validate userClaimURI and roleClaimURI.\n+            if (claimURIs.add(userClaimURI)) {\n+                throw new IdentityProviderManagementClientException(\n+                        Constants.ErrorMessage.ERROR_CODE_NOT_EXISTING_USER_CLAIM_URI.getCode(),\n+                        String.format(Constants.ErrorMessage.ERROR_CODE_NOT_EXISTING_USER_CLAIM_URI.getDescription(),\n+                                tenantDomain));\n+            }\n+            if (claimURIs.add(roleClaimURI)) {\n+                throw new IdentityProviderManagementClientException(\n+                        Constants.ErrorMessage.ERROR_CODE_NOT_EXISTING_ROLE_CLAIM_URI.getCode(),\n+                        String.format(Constants.ErrorMessage.ERROR_CODE_NOT_EXISTING_ROLE_CLAIM_URI.getDescription(),\n+                                tenantDomain));\n+            }\n+            return;\n+        }\n+        validateUserAndRoleClaims(userClaimURI, roleClaimURI, claimMappings);\n+\n+        // Validate LocalClaim objects against local claim URIs.\n+        List<LocalClaim> localClaimsList = getLocalClaimURIs(tenantDomain);\n+        Set<String> claimURIs = localClaimsList.stream().map(LocalClaim::getClaimURI).collect(Collectors.toSet());\n+        for (org.wso2.carbon.identity.api.server.idp.v1.model.ClaimMapping claimMapping : claimMappings) {\n+\n+            // If a claim URI can be added to the existing claimURIs, then that's a not existing URI.\n+            if (claimURIs.add(claimMapping.getLocalClaim().getUri())) {\n+                throw new IdentityProviderManagementClientException(\n+                        Constants.ErrorMessage.ERROR_CODE_NOT_EXISTING_CLAIM_URI.getCode(),\n+                        Constants.ErrorMessage.ERROR_CODE_NOT_EXISTING_CLAIM_URI.getDescription());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Validate whether the userClaimURI and the roleClaimURI align with the claim mappings.\n+     *\n+     * @param userClaimURI  User claim URI.\n+     * @param roleClaimURI  Role claim URI.\n+     * @param claimMappings List of claim mapping for the IDP.\n+     * @throws IdentityProviderManagementClientException If the serClaimURI and the roleClaimURI does not match with\n+     *                                                   the claim mappings.\n+     */\n+    private void validateUserAndRoleClaims(String userClaimURI, String roleClaimURI,\n+                                List<org.wso2.carbon.identity.api.server.idp.v1.model.ClaimMapping> claimMappings)\n+            throws IdentityProviderManagementClientException {\n+\n+        boolean isValidUserClaimURI = false;\n+        boolean isValidRoleClaimURI = false;\n+        for (org.wso2.carbon.identity.api.server.idp.v1.model.ClaimMapping claimMapping : claimMappings) {\n+            if (userClaimURI.equals(claimMapping.getIdpClaim())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90ef844c9f65a7ca50719a01ca71e8c70a3d319d"}, "originalPosition": 100}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyNTA4MTM0", "url": "https://github.com/wso2/identity-api-server/pull/216#pullrequestreview-512508134", "createdAt": "2020-10-20T09:25:57Z", "commit": {"oid": "cf89cbfe61738f04e0bf4d2ab0a71b117dde4c19"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOToyNTo1N1rOHkzFkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjoyODoxOFrOHk5z5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM0Nzc5Mg==", "bodyText": "duplicate code", "url": "https://github.com/wso2/identity-api-server/pull/216#discussion_r508347792", "createdAt": "2020-10-20T09:25:57Z", "author": {"login": "pulasthi7"}, "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java", "diffHunk": "@@ -116,6 +116,16 @@\n         ERROR_CODE_OUTBOUND_PROVISIONING_CONFIG_NOT_FOUND(\"60029\", \"Unable to update Outbound \" +\n                 \"Provisioning Connector\", \"Outbound Provisioning Connector properties have not specified \" +\n                 \"for connector : %s\"),\n+        ERROR_CODE_INVALID_USER_CLAIM_URI(\"60030\", \"Invalid user ID claim URI\",\n+                \"User ID claim URI: %s does not match with the claim mappings\"),\n+        ERROR_CODE_INVALID_ROLE_CLAIM_URI(\"60031\", \"Invalid role claim URI\",\n+                \"Role claim URI: %s does not match with the claim mappings\"),\n+        ERROR_CODE_NOT_EXISTING_CLAIM_URI(\"IDP-60032\", \"Invalid claim URI\",\n+                \"One or more local claim URIs does not exist\"),\n+        ERROR_CODE_NOT_EXISTING_USER_CLAIM_URI(\"IDP-60033\", \"Invlaid user ID claim URI\",\n+                \"User ID claim URI is not a local claim for tenant: %s\"),\n+        ERROR_CODE_NOT_EXISTING_ROLE_CLAIM_URI(\"IDP-60033\", \"Invalid role claim URI\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf89cbfe61738f04e0bf4d2ab0a71b117dde4c19"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM0ODgyMg==", "bodyText": "any reason to use 9 here instead 56? If so shall we move this to the relevant place so that the codes are ordered", "url": "https://github.com/wso2/identity-api-server/pull/216#discussion_r508348822", "createdAt": "2020-10-20T09:27:26Z", "author": {"login": "pulasthi7"}, "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java", "diffHunk": "@@ -213,7 +223,10 @@\n                 \"Error occurred while updating the IDP template with identifier %s.\"),\n         ERROR_CODE_ERROR_RETRIEVING_IDP_TEMPLATE(\"65054\", \"Unable to retrieve IDP template.\",\n                 \"Error occurred while retrieving the IDP template with identifier %s\"),\n-        ERROR_CODE_ERROR_INVALID_SEARCH_FILTER(\"65055\", \"Search request validation failed.\", \"Invalid search filter.\");\n+        ERROR_CODE_ERROR_INVALID_SEARCH_FILTER(\"65055\", \"Search request validation failed.\",\n+                \"Invalid search filter.\"),\n+        ERROR_CODE_VALIDATING_LOCAL_CLAIM_URIS(\"IDP-65009\", \"Error while validation local claim URIs\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf89cbfe61738f04e0bf4d2ab0a71b117dde4c19"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM0OTk2Nw==", "bodyText": "better to use contains() instead", "url": "https://github.com/wso2/identity-api-server/pull/216#discussion_r508349967", "createdAt": "2020-10-20T09:29:03Z", "author": {"login": "pulasthi7"}, "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java", "diffHunk": "@@ -2772,4 +2775,119 @@ private static String includeData(Constants.ErrorMessage error, String data) {\n         }\n         return message;\n     }\n+\n+    /**\n+     * Validate the claim configs of an IDP.\n+     *\n+     * @param tenantDomain Tenant domain.\n+     * @param claims       Claim configs.\n+     * @throws IdentityProviderManagementException If an error while validating the claim configs or if an invalid\n+     *                                             config is found.\n+     */\n+    private void validateClaims(String tenantDomain, Claims claims) throws IdentityProviderManagementException {\n+\n+        String userClaimURI = claims.getUserIdClaim().getUri();\n+        String roleClaimURI = claims.getRoleClaim().getUri();\n+        List<org.wso2.carbon.identity.api.server.idp.v1.model.ClaimMapping> claimMappings = claims.getMappings();\n+\n+        // EMPTY claimMappings indicate that the IDP is using local claim dialect.\n+        if (claimMappings == null || claimMappings.isEmpty()) {\n+            List<LocalClaim> localClaimsList = getLocalClaimURIs(tenantDomain);\n+            Set<String> claimURIs = localClaimsList.stream().map(LocalClaim::getClaimURI).collect(Collectors.toSet());\n+            // Validate userClaimURI and roleClaimURI.\n+            if (claimURIs.add(userClaimURI)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf89cbfe61738f04e0bf4d2ab0a71b117dde4c19"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM1MDI1Ng==", "bodyText": "better to use contains()", "url": "https://github.com/wso2/identity-api-server/pull/216#discussion_r508350256", "createdAt": "2020-10-20T09:29:31Z", "author": {"login": "pulasthi7"}, "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java", "diffHunk": "@@ -2772,4 +2775,119 @@ private static String includeData(Constants.ErrorMessage error, String data) {\n         }\n         return message;\n     }\n+\n+    /**\n+     * Validate the claim configs of an IDP.\n+     *\n+     * @param tenantDomain Tenant domain.\n+     * @param claims       Claim configs.\n+     * @throws IdentityProviderManagementException If an error while validating the claim configs or if an invalid\n+     *                                             config is found.\n+     */\n+    private void validateClaims(String tenantDomain, Claims claims) throws IdentityProviderManagementException {\n+\n+        String userClaimURI = claims.getUserIdClaim().getUri();\n+        String roleClaimURI = claims.getRoleClaim().getUri();\n+        List<org.wso2.carbon.identity.api.server.idp.v1.model.ClaimMapping> claimMappings = claims.getMappings();\n+\n+        // EMPTY claimMappings indicate that the IDP is using local claim dialect.\n+        if (claimMappings == null || claimMappings.isEmpty()) {\n+            List<LocalClaim> localClaimsList = getLocalClaimURIs(tenantDomain);\n+            Set<String> claimURIs = localClaimsList.stream().map(LocalClaim::getClaimURI).collect(Collectors.toSet());\n+            // Validate userClaimURI and roleClaimURI.\n+            if (claimURIs.add(userClaimURI)) {\n+                throw new IdentityProviderManagementClientException(\n+                        Constants.ErrorMessage.ERROR_CODE_NOT_EXISTING_USER_CLAIM_URI.getCode(),\n+                        String.format(Constants.ErrorMessage.ERROR_CODE_NOT_EXISTING_USER_CLAIM_URI.getDescription(),\n+                                tenantDomain));\n+            }\n+            if (claimURIs.add(roleClaimURI)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf89cbfe61738f04e0bf4d2ab0a71b117dde4c19"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1Nzk1Ng==", "bodyText": "Use the util method Collections.emptyList() instead", "url": "https://github.com/wso2/identity-api-server/pull/216#discussion_r508457956", "createdAt": "2020-10-20T12:28:18Z", "author": {"login": "pulasthi7"}, "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java", "diffHunk": "@@ -2772,4 +2775,119 @@ private static String includeData(Constants.ErrorMessage error, String data) {\n         }\n         return message;\n     }\n+\n+    /**\n+     * Validate the claim configs of an IDP.\n+     *\n+     * @param tenantDomain Tenant domain.\n+     * @param claims       Claim configs.\n+     * @throws IdentityProviderManagementException If an error while validating the claim configs or if an invalid\n+     *                                             config is found.\n+     */\n+    private void validateClaims(String tenantDomain, Claims claims) throws IdentityProviderManagementException {\n+\n+        String userClaimURI = claims.getUserIdClaim().getUri();\n+        String roleClaimURI = claims.getRoleClaim().getUri();\n+        List<org.wso2.carbon.identity.api.server.idp.v1.model.ClaimMapping> claimMappings = claims.getMappings();\n+\n+        // EMPTY claimMappings indicate that the IDP is using local claim dialect.\n+        if (claimMappings == null || claimMappings.isEmpty()) {\n+            List<LocalClaim> localClaimsList = getLocalClaimURIs(tenantDomain);\n+            Set<String> claimURIs = localClaimsList.stream().map(LocalClaim::getClaimURI).collect(Collectors.toSet());\n+            // Validate userClaimURI and roleClaimURI.\n+            if (claimURIs.add(userClaimURI)) {\n+                throw new IdentityProviderManagementClientException(\n+                        Constants.ErrorMessage.ERROR_CODE_NOT_EXISTING_USER_CLAIM_URI.getCode(),\n+                        String.format(Constants.ErrorMessage.ERROR_CODE_NOT_EXISTING_USER_CLAIM_URI.getDescription(),\n+                                tenantDomain));\n+            }\n+            if (claimURIs.add(roleClaimURI)) {\n+                throw new IdentityProviderManagementClientException(\n+                        Constants.ErrorMessage.ERROR_CODE_NOT_EXISTING_ROLE_CLAIM_URI.getCode(),\n+                        String.format(Constants.ErrorMessage.ERROR_CODE_NOT_EXISTING_ROLE_CLAIM_URI.getDescription(),\n+                                tenantDomain));\n+            }\n+            return;\n+        }\n+        validateUserAndRoleClaims(userClaimURI, roleClaimURI, claimMappings);\n+\n+        // Validate LocalClaim objects against local claim URIs.\n+        List<LocalClaim> localClaimsList = getLocalClaimURIs(tenantDomain);\n+        Set<String> claimURIs = localClaimsList.stream().map(LocalClaim::getClaimURI).collect(Collectors.toSet());\n+        for (org.wso2.carbon.identity.api.server.idp.v1.model.ClaimMapping claimMapping : claimMappings) {\n+\n+            // If a claim URI can be added to the existing claimURIs, then that's a not existing URI.\n+            if (claimURIs.add(claimMapping.getLocalClaim().getUri())) {\n+                throw new IdentityProviderManagementClientException(\n+                        Constants.ErrorMessage.ERROR_CODE_NOT_EXISTING_CLAIM_URI.getCode(),\n+                        Constants.ErrorMessage.ERROR_CODE_NOT_EXISTING_CLAIM_URI.getDescription());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Validate whether the userClaimURI and the roleClaimURI align with the claim mappings.\n+     *\n+     * @param userClaimURI  User claim URI.\n+     * @param roleClaimURI  Role claim URI.\n+     * @param claimMappings List of claim mapping for the IDP.\n+     * @throws IdentityProviderManagementClientException If the serClaimURI and the roleClaimURI does not match with\n+     *                                                   the claim mappings.\n+     */\n+    private void validateUserAndRoleClaims(String userClaimURI, String roleClaimURI,\n+                                List<org.wso2.carbon.identity.api.server.idp.v1.model.ClaimMapping> claimMappings)\n+            throws IdentityProviderManagementClientException {\n+\n+        boolean isValidUserClaimURI = false;\n+        boolean isValidRoleClaimURI = false;\n+        for (org.wso2.carbon.identity.api.server.idp.v1.model.ClaimMapping claimMapping : claimMappings) {\n+            if (userClaimURI.equals(claimMapping.getIdpClaim())) {\n+                isValidUserClaimURI = true;\n+            }\n+            if (roleClaimURI.equals(claimMapping.getIdpClaim())) {\n+                isValidRoleClaimURI = true;\n+            }\n+        }\n+        if (!isValidUserClaimURI) {\n+            throw new IdentityProviderManagementClientException(\n+                    Constants.ErrorMessage.ERROR_CODE_INVALID_USER_CLAIM_URI.getCode(),\n+                    String.format(Constants.ErrorMessage.ERROR_CODE_INVALID_USER_CLAIM_URI.getDescription(),\n+                            userClaimURI));\n+        }\n+        if (!isValidRoleClaimURI) {\n+            throw new IdentityProviderManagementClientException(\n+                    Constants.ErrorMessage.ERROR_CODE_INVALID_ROLE_CLAIM_URI.getCode(),\n+                    String.format(Constants.ErrorMessage.ERROR_CODE_INVALID_ROLE_CLAIM_URI.getMessage(), roleClaimURI));\n+        }\n+    }\n+\n+    /**\n+     * Get the local claim URIs of the tenant.\n+     *\n+     * @param tenantDomain Tenant domain.\n+     * @return List of local claim URIs.\n+     * @throws IdentityProviderManagementServerException If an error occurred while getting the claims list.\n+     */\n+    private List<LocalClaim> getLocalClaimURIs(String tenantDomain) throws IdentityProviderManagementServerException {\n+\n+        try {\n+            List<LocalClaim> localClaimsList =\n+                    IdentityProviderServiceHolder.getClaimMetadataManagementService().getLocalClaims(tenantDomain);\n+            if (localClaimsList.isEmpty()) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"No local claims found for tenant:\" + tenantDomain + \".Therefore, skipping \" +\n+                            \"local claim URI validation.\");\n+                }\n+                return new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90ef844c9f65a7ca50719a01ca71e8c70a3d319d"}, "originalPosition": 137}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee3ee198465d08f2d8a69a1ddcc4f5a61588dbc7", "author": {"user": {"login": "somindatommy", "name": "Sominda Gamage"}}, "url": "https://github.com/wso2/identity-api-server/commit/ee3ee198465d08f2d8a69a1ddcc4f5a61588dbc7", "committedDate": "2020-10-20T15:21:21Z", "message": "Addressing comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyODkwMjEx", "url": "https://github.com/wso2/identity-api-server/pull/216#pullrequestreview-512890211", "createdAt": "2020-10-20T15:55:46Z", "commit": {"oid": "ee3ee198465d08f2d8a69a1ddcc4f5a61588dbc7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTo1NTo0NlrOHlFGTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTo1NTo0NlrOHlFGTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY0Mjg5NQ==", "bodyText": "Shoudn't this be not contains?\n!claimURIs.contains(userClaimURI)", "url": "https://github.com/wso2/identity-api-server/pull/216#discussion_r508642895", "createdAt": "2020-10-20T15:55:46Z", "author": {"login": "IsuraD"}, "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java", "diffHunk": "@@ -2772,4 +2776,125 @@ private static String includeData(Constants.ErrorMessage error, String data) {\n         }\n         return message;\n     }\n+\n+    /**\n+     * Validate the claim configs of an IDP.\n+     *\n+     * @param tenantDomain Tenant domain.\n+     * @param claims       Claim configs.\n+     * @throws IdentityProviderManagementException If an error while validating the claim configs or if an invalid\n+     *                                             config is found.\n+     */\n+    private void validateClaims(String tenantDomain, Claims claims) throws IdentityProviderManagementException {\n+\n+        if (claims == null) {\n+            return;\n+        }\n+        String userClaimURI = claims.getUserIdClaim() == null ? null : claims.getUserIdClaim().getUri();\n+        String roleClaimURI = claims.getRoleClaim() == null ? null : claims.getRoleClaim().getUri();\n+        List<org.wso2.carbon.identity.api.server.idp.v1.model.ClaimMapping> claimMappings = claims.getMappings();\n+\n+        // EMPTY claimMappings indicate that the IDP is using local claim dialect.\n+        if (CollectionUtils.isEmpty(claimMappings)) {\n+            List<LocalClaim> localClaimsList = getLocalClaimURIs(tenantDomain);\n+            Set<String> claimURIs = localClaimsList.stream().map(LocalClaim::getClaimURI).collect(Collectors.toSet());\n+            // Validate userClaimURI and roleClaimURI.\n+            if (StringUtils.isNotBlank(userClaimURI) && claimURIs.contains(userClaimURI)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee3ee198465d08f2d8a69a1ddcc4f5a61588dbc7"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyODkwNDg5", "url": "https://github.com/wso2/identity-api-server/pull/216#pullrequestreview-512890489", "createdAt": "2020-10-20T15:56:01Z", "commit": {"oid": "ee3ee198465d08f2d8a69a1ddcc4f5a61588dbc7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTo1NjowMlrOHlFHcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTo1NjowMlrOHlFHcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY0MzE4NQ==", "bodyText": "Shoudn't this be not contains?\n!claimURIs.contains(roleClaimURI)", "url": "https://github.com/wso2/identity-api-server/pull/216#discussion_r508643185", "createdAt": "2020-10-20T15:56:02Z", "author": {"login": "IsuraD"}, "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java", "diffHunk": "@@ -2772,4 +2776,125 @@ private static String includeData(Constants.ErrorMessage error, String data) {\n         }\n         return message;\n     }\n+\n+    /**\n+     * Validate the claim configs of an IDP.\n+     *\n+     * @param tenantDomain Tenant domain.\n+     * @param claims       Claim configs.\n+     * @throws IdentityProviderManagementException If an error while validating the claim configs or if an invalid\n+     *                                             config is found.\n+     */\n+    private void validateClaims(String tenantDomain, Claims claims) throws IdentityProviderManagementException {\n+\n+        if (claims == null) {\n+            return;\n+        }\n+        String userClaimURI = claims.getUserIdClaim() == null ? null : claims.getUserIdClaim().getUri();\n+        String roleClaimURI = claims.getRoleClaim() == null ? null : claims.getRoleClaim().getUri();\n+        List<org.wso2.carbon.identity.api.server.idp.v1.model.ClaimMapping> claimMappings = claims.getMappings();\n+\n+        // EMPTY claimMappings indicate that the IDP is using local claim dialect.\n+        if (CollectionUtils.isEmpty(claimMappings)) {\n+            List<LocalClaim> localClaimsList = getLocalClaimURIs(tenantDomain);\n+            Set<String> claimURIs = localClaimsList.stream().map(LocalClaim::getClaimURI).collect(Collectors.toSet());\n+            // Validate userClaimURI and roleClaimURI.\n+            if (StringUtils.isNotBlank(userClaimURI) && claimURIs.contains(userClaimURI)) {\n+                throw new IdentityProviderManagementClientException(\n+                        Constants.ErrorMessage.ERROR_CODE_NOT_EXISTING_USER_CLAIM_URI.getCode(),\n+                        String.format(Constants.ErrorMessage.ERROR_CODE_NOT_EXISTING_USER_CLAIM_URI.getDescription(),\n+                                tenantDomain));\n+            }\n+            if (StringUtils.isNotBlank(roleClaimURI) && claimURIs.contains(roleClaimURI)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee3ee198465d08f2d8a69a1ddcc4f5a61588dbc7"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyODk2MzM3", "url": "https://github.com/wso2/identity-api-server/pull/216#pullrequestreview-512896337", "createdAt": "2020-10-20T16:01:52Z", "commit": {"oid": "ee3ee198465d08f2d8a69a1ddcc4f5a61588dbc7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjowMTo1MlrOHlFeFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjowMTo1MlrOHlFeFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY0ODk4MQ==", "bodyText": "Shoud be not contain?\nif (!claimURIs.contains(claimMapping.getLocalClaim().getUri())) {", "url": "https://github.com/wso2/identity-api-server/pull/216#discussion_r508648981", "createdAt": "2020-10-20T16:01:52Z", "author": {"login": "IsuraD"}, "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java", "diffHunk": "@@ -2772,4 +2776,125 @@ private static String includeData(Constants.ErrorMessage error, String data) {\n         }\n         return message;\n     }\n+\n+    /**\n+     * Validate the claim configs of an IDP.\n+     *\n+     * @param tenantDomain Tenant domain.\n+     * @param claims       Claim configs.\n+     * @throws IdentityProviderManagementException If an error while validating the claim configs or if an invalid\n+     *                                             config is found.\n+     */\n+    private void validateClaims(String tenantDomain, Claims claims) throws IdentityProviderManagementException {\n+\n+        if (claims == null) {\n+            return;\n+        }\n+        String userClaimURI = claims.getUserIdClaim() == null ? null : claims.getUserIdClaim().getUri();\n+        String roleClaimURI = claims.getRoleClaim() == null ? null : claims.getRoleClaim().getUri();\n+        List<org.wso2.carbon.identity.api.server.idp.v1.model.ClaimMapping> claimMappings = claims.getMappings();\n+\n+        // EMPTY claimMappings indicate that the IDP is using local claim dialect.\n+        if (CollectionUtils.isEmpty(claimMappings)) {\n+            List<LocalClaim> localClaimsList = getLocalClaimURIs(tenantDomain);\n+            Set<String> claimURIs = localClaimsList.stream().map(LocalClaim::getClaimURI).collect(Collectors.toSet());\n+            // Validate userClaimURI and roleClaimURI.\n+            if (StringUtils.isNotBlank(userClaimURI) && claimURIs.contains(userClaimURI)) {\n+                throw new IdentityProviderManagementClientException(\n+                        Constants.ErrorMessage.ERROR_CODE_NOT_EXISTING_USER_CLAIM_URI.getCode(),\n+                        String.format(Constants.ErrorMessage.ERROR_CODE_NOT_EXISTING_USER_CLAIM_URI.getDescription(),\n+                                tenantDomain));\n+            }\n+            if (StringUtils.isNotBlank(roleClaimURI) && claimURIs.contains(roleClaimURI)) {\n+                throw new IdentityProviderManagementClientException(\n+                        Constants.ErrorMessage.ERROR_CODE_NOT_EXISTING_ROLE_CLAIM_URI.getCode(),\n+                        String.format(Constants.ErrorMessage.ERROR_CODE_NOT_EXISTING_ROLE_CLAIM_URI.getDescription(),\n+                                tenantDomain));\n+            }\n+            return;\n+        }\n+        validateUserAndRoleClaims(userClaimURI, roleClaimURI, claimMappings);\n+\n+        // Validate LocalClaim objects against local claim URIs.\n+        List<LocalClaim> localClaimsList = getLocalClaimURIs(tenantDomain);\n+        Set<String> claimURIs = localClaimsList.stream().map(LocalClaim::getClaimURI).collect(Collectors.toSet());\n+        for (org.wso2.carbon.identity.api.server.idp.v1.model.ClaimMapping claimMapping : claimMappings) {\n+\n+            // If a claim URI can be added to the existing claimURIs, then that's a not existing URI.\n+            if (claimURIs.contains(claimMapping.getLocalClaim().getUri())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee3ee198465d08f2d8a69a1ddcc4f5a61588dbc7"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyOTAyMzg4", "url": "https://github.com/wso2/identity-api-server/pull/216#pullrequestreview-512902388", "createdAt": "2020-10-20T16:08:08Z", "commit": {"oid": "ee3ee198465d08f2d8a69a1ddcc4f5a61588dbc7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjowODowOFrOHlF2fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjowODowOFrOHlF2fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY1NTIyOQ==", "bodyText": "grammer :  URIs does not exist", "url": "https://github.com/wso2/identity-api-server/pull/216#discussion_r508655229", "createdAt": "2020-10-20T16:08:08Z", "author": {"login": "IsuraD"}, "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java", "diffHunk": "@@ -116,6 +116,16 @@\n         ERROR_CODE_OUTBOUND_PROVISIONING_CONFIG_NOT_FOUND(\"60029\", \"Unable to update Outbound \" +\n                 \"Provisioning Connector\", \"Outbound Provisioning Connector properties have not specified \" +\n                 \"for connector : %s\"),\n+        ERROR_CODE_INVALID_USER_CLAIM_URI(\"60030\", \"Invalid user ID claim URI\",\n+                \"User ID claim URI: %s does not match with the claim mappings\"),\n+        ERROR_CODE_INVALID_ROLE_CLAIM_URI(\"60031\", \"Invalid role claim URI\",\n+                \"Role claim URI: %s does not match with the claim mappings\"),\n+        ERROR_CODE_NOT_EXISTING_CLAIM_URI(\"IDP-60032\", \"Invalid claim URI\",\n+                \"One or more local claim URIs does not exist\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee3ee198465d08f2d8a69a1ddcc4f5a61588dbc7"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f44b32e0efda15349b0bbf3d014763ee0b8297ad", "author": {"user": {"login": "somindatommy", "name": "Sominda Gamage"}}, "url": "https://github.com/wso2/identity-api-server/commit/f44b32e0efda15349b0bbf3d014763ee0b8297ad", "committedDate": "2020-10-20T17:59:57Z", "message": "Refactoring validation logic"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMjgzODQ0", "url": "https://github.com/wso2/identity-api-server/pull/216#pullrequestreview-513283844", "createdAt": "2020-10-21T03:37:36Z", "commit": {"oid": "f44b32e0efda15349b0bbf3d014763ee0b8297ad"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzozNzozNlrOHlZC5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzozNzozNlrOHlZC5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk2OTcwMg==", "bodyText": "Shall we rename to isUserClaimURINotDefined, isRoleClaimURINotDefined", "url": "https://github.com/wso2/identity-api-server/pull/216#discussion_r508969702", "createdAt": "2020-10-21T03:37:36Z", "author": {"login": "IsuraD"}, "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java", "diffHunk": "@@ -2842,26 +2842,32 @@ private void validateUserAndRoleClaims(String userClaimURI, String roleClaimURI,\n                                List<org.wso2.carbon.identity.api.server.idp.v1.model.ClaimMapping> claimMappings)\n             throws IdentityProviderManagementClientException {\n \n-        boolean isUserClaimURISpecified = StringUtils.isNotBlank(userClaimURI);\n-        boolean isRoleClaimURISpecified = StringUtils.isNotBlank(roleClaimURI);\n-        boolean isValidUserClaimURI = false;\n-        boolean isValidRoleClaimURI = false;\n+        /*\n+         * Not defining the userId claim or role claim is a valid claim update scenario. Therefore, considering it as a\n+         * valid claim URI. When the claims are defined, initial validation is considered as false (Invalid).\n+         */\n+        boolean isValidUserClaimURI = StringUtils.isBlank(userClaimURI);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f44b32e0efda15349b0bbf3d014763ee0b8297ad"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMjg5NjAx", "url": "https://github.com/wso2/identity-api-server/pull/216#pullrequestreview-513289601", "createdAt": "2020-10-21T03:58:52Z", "commit": {"oid": "f44b32e0efda15349b0bbf3d014763ee0b8297ad"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzo1ODo1MlrOHlZXxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzo1OTozNVrOHlZYYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk3NTA0NQ==", "bodyText": "why do these codes have the prefix and the previous ones don't?", "url": "https://github.com/wso2/identity-api-server/pull/216#discussion_r508975045", "createdAt": "2020-10-21T03:58:52Z", "author": {"login": "pulasthi7"}, "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java", "diffHunk": "@@ -116,6 +116,16 @@\n         ERROR_CODE_OUTBOUND_PROVISIONING_CONFIG_NOT_FOUND(\"60029\", \"Unable to update Outbound \" +\n                 \"Provisioning Connector\", \"Outbound Provisioning Connector properties have not specified \" +\n                 \"for connector : %s\"),\n+        ERROR_CODE_INVALID_USER_CLAIM_URI(\"60030\", \"Invalid user ID claim URI\",\n+                \"User ID claim URI: %s does not match with the claim mappings\"),\n+        ERROR_CODE_INVALID_ROLE_CLAIM_URI(\"60031\", \"Invalid role claim URI\",\n+                \"Role claim URI: %s does not match with the claim mappings\"),\n+        ERROR_CODE_NOT_EXISTING_CLAIM_URI(\"IDP-60032\", \"Invalid claim URI\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f44b32e0efda15349b0bbf3d014763ee0b8297ad"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk3NTIwMg==", "bodyText": "Similar as above comment here", "url": "https://github.com/wso2/identity-api-server/pull/216#discussion_r508975202", "createdAt": "2020-10-21T03:59:35Z", "author": {"login": "pulasthi7"}, "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java", "diffHunk": "@@ -213,7 +223,10 @@\n                 \"Error occurred while updating the IDP template with identifier %s.\"),\n         ERROR_CODE_ERROR_RETRIEVING_IDP_TEMPLATE(\"65054\", \"Unable to retrieve IDP template.\",\n                 \"Error occurred while retrieving the IDP template with identifier %s\"),\n-        ERROR_CODE_ERROR_INVALID_SEARCH_FILTER(\"65055\", \"Search request validation failed.\", \"Invalid search filter.\");\n+        ERROR_CODE_ERROR_INVALID_SEARCH_FILTER(\"65055\", \"Search request validation failed.\",\n+                \"Invalid search filter.\"),\n+        ERROR_CODE_VALIDATING_LOCAL_CLAIM_URIS(\"IDP-65056\", \"Error while validation local claim URIs\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f44b32e0efda15349b0bbf3d014763ee0b8297ad"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d758b5bfff01a26c5caa8d68cf92ad084d86927", "author": {"user": {"login": "somindatommy", "name": "Sominda Gamage"}}, "url": "https://github.com/wso2/identity-api-server/commit/0d758b5bfff01a26c5caa8d68cf92ad084d86927", "committedDate": "2020-10-21T05:39:18Z", "message": "Refactoring validation logic and improving error codes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMzIyNjY4", "url": "https://github.com/wso2/identity-api-server/pull/216#pullrequestreview-513322668", "createdAt": "2020-10-21T05:44:30Z", "commit": {"oid": "0d758b5bfff01a26c5caa8d68cf92ad084d86927"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1401, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}