{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNDMzOTY3", "number": 120, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjoyMTozMVrODp2NXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzoyNjoyOVrOETj7KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjA2MzY3OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjoyMTozMVrOF5Rhxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjoyMTozMVrOF5Rhxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwMDMyNw==", "bodyText": "shall we add scope provided", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r395600327", "createdAt": "2020-03-20T12:21:31Z", "author": {"login": "emswbandara"}, "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/pom.xml", "diffHunk": "@@ -58,6 +58,10 @@\n             <artifactId>spring-web</artifactId>\n             <scope>provided</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.wso2.carbon.identity.framework</groupId>\n+            <artifactId>org.wso2.carbon.identity.template.mgt</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c010b44fac3776bc9a15f289dce7c527487d9cd"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjA2NTE2OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjoyMjowOFrOF5Riyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjoyMjowOFrOF5Riyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwMDU4Ng==", "bodyText": "use standard comment format. add space after // and add fullstop at end.", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r395600586", "createdAt": "2020-03-20T12:22:08Z", "author": {"login": "emswbandara"}, "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java", "diffHunk": "@@ -61,6 +62,11 @@\n     public static final String FEDERATED_AUTHENTICATORS = \"federatedAuthenticators\";\n     public static final String PROVISIONING = \"provisioning\";\n \n+    //IdP template property keys", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c010b44fac3776bc9a15f289dce7c527487d9cd"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjA2ODYxOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/IdentityProviderServiceHolder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjoyMzoxNVrOF5Rkyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjoyMzoxNVrOF5Rkyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwMTA5OQ==", "bodyText": "add fullstop", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r395601099", "createdAt": "2020-03-20T12:23:15Z", "author": {"login": "emswbandara"}, "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/IdentityProviderServiceHolder.java", "diffHunk": "@@ -67,4 +69,24 @@ public static void setClaimMetadataManagementService(\n \n         IdentityProviderServiceHolder.claimMetadataManagementService = claimMetadataManagementService;\n     }\n+\n+    /**\n+     * Set TemplateManager osgi service.\n+     *\n+     * @param templateManager TemplateManager service\n+     */\n+    public static void setTemplateManager(TemplateManager templateManager) {\n+\n+        IdentityProviderServiceHolder.templateManager = templateManager;\n+    }\n+\n+    /**\n+     * Get TemplateManager osgi service", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c010b44fac3776bc9a15f289dce7c527487d9cd"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjA2OTE5OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/factory/TemplateMgtOSGIServiceFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjoyMzoyOVrOF5RlKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjoyMzoyOVrOF5RlKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwMTE5NQ==", "bodyText": "add license header", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r395601195", "createdAt": "2020-03-20T12:23:29Z", "author": {"login": "emswbandara"}, "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/factory/TemplateMgtOSGIServiceFactory.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package org.wso2.carbon.identity.api.server.idp.common.factory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c010b44fac3776bc9a15f289dce7c527487d9cd"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjA3MTE2OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjoyNDowM1rOF5RmRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjoyNDowM1rOF5RmRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwMTQ3Ng==", "bodyText": "add scope as provided", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r395601476", "createdAt": "2020-03-20T12:24:03Z", "author": {"login": "emswbandara"}, "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/pom.xml", "diffHunk": "@@ -180,6 +180,10 @@\n             <groupId>commons-beanutils</groupId>\n             <artifactId>commons-beanutils</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>org.wso2.carbon.identity.framework</groupId>\n+            <artifactId>org.wso2.carbon.identity.template.mgt</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c010b44fac3776bc9a15f289dce7c527487d9cd"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjA3NjU1OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjoyNTo1NlrOF5RplQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjoyNTo1NlrOF5RplQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwMjMyNQ==", "bodyText": "let's use a sample filter for the templates in the example", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r395602325", "createdAt": "2020-03-20T12:25:56Z", "author": {"login": "emswbandara"}, "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java", "diffHunk": "@@ -808,7 +825,240 @@ public ConnectedApps getConnectedApps(String resourceId, Integer limit, Integer\n         }\n     }\n \n-    // Private utility Methods.\n+    /**\n+     * Retrieve the list of IDP templates.\n+     *\n+     * @param limit      Items per page.\n+     * @param offset     Offset.\n+     * @param filter     Filter string. E.g. filter=\"name\" sw \"google\" and \"isEnabled\" eq \"true\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c010b44fac3776bc9a15f289dce7c527487d9cd"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjA4NzEyOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjoyOToyNlrOF5RwEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNDoyNjo0N1rOF52low==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwMzk4NQ==", "bodyText": "check whether idpTemplate is null. If null, send 404 not found.", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r395603985", "createdAt": "2020-03-20T12:29:26Z", "author": {"login": "emswbandara"}, "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java", "diffHunk": "@@ -808,7 +825,240 @@ public ConnectedApps getConnectedApps(String resourceId, Integer limit, Integer\n         }\n     }\n \n-    // Private utility Methods.\n+    /**\n+     * Retrieve the list of IDP templates.\n+     *\n+     * @param limit      Items per page.\n+     * @param offset     Offset.\n+     * @param filter     Filter string. E.g. filter=\"name\" sw \"google\" and \"isEnabled\" eq \"true\"\n+     * @return  List of identity templates.\n+     */\n+    public IdentityProviderTemplateListResponse getIDPTemplates(Integer limit, Integer offset, String filter) {\n+\n+        try {\n+            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n+            List<Template> templateList = templateManager.listTemplates(\n+                    TemplateMgtConstants.TemplateType.IDP_TEMPLATE.toString(), limit, offset);\n+            return createIDPTemplateListResponse(templateList, offset, limit, filter);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_LISTING_IDP_TEMPLATES, null);\n+        }\n+    }\n+\n+    /**\n+     * Get an identity provider template identified by resource ID.\n+     *\n+     * @param templateId IDP template Id\n+     * @return IdentityProviderTemplateResponse\n+     */\n+    public IdentityProviderTemplate getIDPTemplate(String templateId) {\n+\n+        try {\n+            Template idpTemplate = IdentityProviderServiceHolder.getTemplateManager().getTemplateById(templateId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c010b44fac3776bc9a15f289dce7c527487d9cd"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxODQwNg==", "bodyText": "TemplateManager throws an exception when resource is not found. So this is handled at handleTemplateMgtException method. Is it necessary to handle the null in here also?", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r396018406", "createdAt": "2020-03-21T18:51:42Z", "author": {"login": "mevan-karu"}, "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java", "diffHunk": "@@ -808,7 +825,240 @@ public ConnectedApps getConnectedApps(String resourceId, Integer limit, Integer\n         }\n     }\n \n-    // Private utility Methods.\n+    /**\n+     * Retrieve the list of IDP templates.\n+     *\n+     * @param limit      Items per page.\n+     * @param offset     Offset.\n+     * @param filter     Filter string. E.g. filter=\"name\" sw \"google\" and \"isEnabled\" eq \"true\"\n+     * @return  List of identity templates.\n+     */\n+    public IdentityProviderTemplateListResponse getIDPTemplates(Integer limit, Integer offset, String filter) {\n+\n+        try {\n+            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n+            List<Template> templateList = templateManager.listTemplates(\n+                    TemplateMgtConstants.TemplateType.IDP_TEMPLATE.toString(), limit, offset);\n+            return createIDPTemplateListResponse(templateList, offset, limit, filter);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_LISTING_IDP_TEMPLATES, null);\n+        }\n+    }\n+\n+    /**\n+     * Get an identity provider template identified by resource ID.\n+     *\n+     * @param templateId IDP template Id\n+     * @return IdentityProviderTemplateResponse\n+     */\n+    public IdentityProviderTemplate getIDPTemplate(String templateId) {\n+\n+        try {\n+            Template idpTemplate = IdentityProviderServiceHolder.getTemplateManager().getTemplateById(templateId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwMzk4NQ=="}, "originalCommit": {"oid": "9c010b44fac3776bc9a15f289dce7c527487d9cd"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwNzUyMw==", "bodyText": "Then it is fine. However you need to map the error code of that exception to http 404 in https://github.com/wso2/identity-rest-dispatcher/blob/master/components/org.wso2.carbon.identity.api.dispatcher/src/main/resources/ErrorMappings.properties", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r396207523", "createdAt": "2020-03-23T04:26:47Z", "author": {"login": "emswbandara"}, "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java", "diffHunk": "@@ -808,7 +825,240 @@ public ConnectedApps getConnectedApps(String resourceId, Integer limit, Integer\n         }\n     }\n \n-    // Private utility Methods.\n+    /**\n+     * Retrieve the list of IDP templates.\n+     *\n+     * @param limit      Items per page.\n+     * @param offset     Offset.\n+     * @param filter     Filter string. E.g. filter=\"name\" sw \"google\" and \"isEnabled\" eq \"true\"\n+     * @return  List of identity templates.\n+     */\n+    public IdentityProviderTemplateListResponse getIDPTemplates(Integer limit, Integer offset, String filter) {\n+\n+        try {\n+            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n+            List<Template> templateList = templateManager.listTemplates(\n+                    TemplateMgtConstants.TemplateType.IDP_TEMPLATE.toString(), limit, offset);\n+            return createIDPTemplateListResponse(templateList, offset, limit, filter);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_LISTING_IDP_TEMPLATES, null);\n+        }\n+    }\n+\n+    /**\n+     * Get an identity provider template identified by resource ID.\n+     *\n+     * @param templateId IDP template Id\n+     * @return IdentityProviderTemplateResponse\n+     */\n+    public IdentityProviderTemplate getIDPTemplate(String templateId) {\n+\n+        try {\n+            Template idpTemplate = IdentityProviderServiceHolder.getTemplateManager().getTemplateById(templateId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwMzk4NQ=="}, "originalCommit": {"oid": "9c010b44fac3776bc9a15f289dce7c527487d9cd"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjA5NDQ3OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/impl/IdentityProvidersApiServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjozMTo0OVrOF5R0tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjozMTo0OVrOF5R0tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwNTE3NA==", "bodyText": "status should be 200 ok in update requests", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r395605174", "createdAt": "2020-03-20T12:31:49Z", "author": {"login": "emswbandara"}, "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/impl/IdentityProvidersApiServiceImpl.java", "diffHunk": "@@ -185,6 +216,14 @@ public Response updateFederatedAuthenticator(String identityProviderId, String f\n                 .build();\n     }\n \n+    @Override\n+    public Response updateIDPTemplate(String templateId, IdentityProviderTemplate\n+            identityProviderTemplatePOSTRequest) {\n+\n+        idpManagementService.updateIDPTemplate(templateId, identityProviderTemplatePOSTRequest);\n+        return Response.noContent().build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c010b44fac3776bc9a15f289dce7c527487d9cd"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjExMzI2OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/resources/idp.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjozNzo0OVrOF5SAbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjozNzo0OVrOF5SAbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwODE3NQ==", "bodyText": "lets remove content for 401, 403 reason: wso2/product-is#6414", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r395608175", "createdAt": "2020-03-20T12:37:49Z", "author": {"login": "emswbandara"}, "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/resources/idp.yaml", "diffHunk": "@@ -49,8 +49,16 @@ paths:\n                 $ref: '#/components/schemas/Error'\n         '401':\n           description: Unauthorized\n+          content:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c010b44fac3776bc9a15f289dce7c527487d9cd"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Njg0OTIwOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/gen/java/org/wso2/carbon/identity/api/server/idp/v1/model/IdentityProviderTemplate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNTowNzoxOFrOF7fqOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNTowNzoxOFrOF7fqOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyOTAxOQ==", "bodyText": "change the code generator to have 2020", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r397929019", "createdAt": "2020-03-25T15:07:18Z", "author": {"login": "thanujalk"}, "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/gen/java/org/wso2/carbon/identity/api/server/idp/v1/model/IdentityProviderTemplate.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+* Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "135504a02ef2b01fe125a36a66c01ff2fed632d1"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDkzMDkzOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/gen/java/org/wso2/carbon/identity/api/server/idp/v1/model/IdentityProviderTemplate.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxOToxOTozNFrOGcpGVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNjo0ODoxM1rOG6t-tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY4NjY3Nw==", "bodyText": "Missing the doc comment. Check other places as well.", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r432686677", "createdAt": "2020-05-29T19:19:34Z", "author": {"login": "NipuniBhagya"}, "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/gen/java/org/wso2/carbon/identity/api/server/idp/v1/model/IdentityProviderTemplate.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+* Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+*\n+* http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.wso2.carbon.identity.api.server.idp.v1.model;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+import org.wso2.carbon.identity.api.server.idp.v1.model.IdentityProviderPOSTRequest;\n+import javax.validation.constraints.*;\n+\n+\n+import io.swagger.annotations.*;\n+import java.util.Objects;\n+import javax.validation.Valid;\n+import javax.xml.bind.annotation.*;\n+\n+public class IdentityProviderTemplate  {\n+  \n+    private String id;\n+    private String name;\n+    private String description;\n+    private String image;\n+\n+@XmlType(name=\"CategoryEnum\")\n+@XmlEnum(String.class)\n+public enum CategoryEnum {\n+\n+    @XmlEnumValue(\"DEFAULT\") DEFAULT(String.valueOf(\"DEFAULT\")), @XmlEnumValue(\"CUSTOM\") CUSTOM(String.valueOf(\"CUSTOM\"));\n+\n+\n+    private String value;\n+\n+    CategoryEnum(String v) {\n+        value = v;\n+    }\n+\n+    public String value() {\n+        return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.valueOf(value);\n+    }\n+\n+    public static CategoryEnum fromValue(String value) {\n+        for (CategoryEnum b : CategoryEnum.values()) {\n+            if (b.value.equals(value)) {\n+                return b;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"Unexpected value '\" + value + \"'\");\n+    }\n+}\n+\n+    private CategoryEnum category;\n+    private Integer displayOrder;\n+    private IdentityProviderPOSTRequest idp;\n+\n+    /**\n+    **/\n+    public IdentityProviderTemplate id(String id) {\n+\n+        this.id = id;\n+        return this;\n+    }\n+    \n+    @ApiModelProperty(example = \"123e4567-e89b-12d3-a456-556642440000\", value = \"\")\n+    @JsonProperty(\"id\")\n+    @Valid\n+    public String getId() {\n+        return id;\n+    }\n+    public void setId(String id) {\n+        this.id = id;\n+    }\n+\n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88fa5194c446519ca9e55e036bffa47996a7f78c"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIyMzkyNA==", "bodyText": "Fixed with #191", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r464223924", "createdAt": "2020-08-03T06:48:13Z", "author": {"login": "mevan-karu"}, "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/gen/java/org/wso2/carbon/identity/api/server/idp/v1/model/IdentityProviderTemplate.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+* Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+*\n+* http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.wso2.carbon.identity.api.server.idp.v1.model;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+import org.wso2.carbon.identity.api.server.idp.v1.model.IdentityProviderPOSTRequest;\n+import javax.validation.constraints.*;\n+\n+\n+import io.swagger.annotations.*;\n+import java.util.Objects;\n+import javax.validation.Valid;\n+import javax.xml.bind.annotation.*;\n+\n+public class IdentityProviderTemplate  {\n+  \n+    private String id;\n+    private String name;\n+    private String description;\n+    private String image;\n+\n+@XmlType(name=\"CategoryEnum\")\n+@XmlEnum(String.class)\n+public enum CategoryEnum {\n+\n+    @XmlEnumValue(\"DEFAULT\") DEFAULT(String.valueOf(\"DEFAULT\")), @XmlEnumValue(\"CUSTOM\") CUSTOM(String.valueOf(\"CUSTOM\"));\n+\n+\n+    private String value;\n+\n+    CategoryEnum(String v) {\n+        value = v;\n+    }\n+\n+    public String value() {\n+        return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.valueOf(value);\n+    }\n+\n+    public static CategoryEnum fromValue(String value) {\n+        for (CategoryEnum b : CategoryEnum.values()) {\n+            if (b.value.equals(value)) {\n+                return b;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"Unexpected value '\" + value + \"'\");\n+    }\n+}\n+\n+    private CategoryEnum category;\n+    private Integer displayOrder;\n+    private IdentityProviderPOSTRequest idp;\n+\n+    /**\n+    **/\n+    public IdentityProviderTemplate id(String id) {\n+\n+        this.id = id;\n+        return this;\n+    }\n+    \n+    @ApiModelProperty(example = \"123e4567-e89b-12d3-a456-556642440000\", value = \"\")\n+    @JsonProperty(\"id\")\n+    @Valid\n+    public String getId() {\n+        return id;\n+    }\n+    public void setId(String id) {\n+        this.id = id;\n+    }\n+\n+    /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY4NjY3Nw=="}, "originalCommit": {"oid": "88fa5194c446519ca9e55e036bffa47996a7f78c"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTY4MTIwOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/gen/java/org/wso2/carbon/identity/api/server/idp/v1/model/IdentityProviderTemplate.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMjo1Njo0NlrOGcwP1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNjo0ODoyN1rOG6t_CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwMzc5Nw==", "bodyText": "Let's remove this unnecessary line.", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r432803797", "createdAt": "2020-05-30T02:56:46Z", "author": {"login": "NipuniBhagya"}, "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/gen/java/org/wso2/carbon/identity/api/server/idp/v1/model/IdentityProviderTemplate.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+* Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+*\n+* http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.wso2.carbon.identity.api.server.idp.v1.model;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+import org.wso2.carbon.identity.api.server.idp.v1.model.IdentityProviderPOSTRequest;\n+import javax.validation.constraints.*;\n+\n+\n+import io.swagger.annotations.*;\n+import java.util.Objects;\n+import javax.validation.Valid;\n+import javax.xml.bind.annotation.*;\n+\n+public class IdentityProviderTemplate  {\n+  \n+    private String id;\n+    private String name;\n+    private String description;\n+    private String image;\n+\n+@XmlType(name=\"CategoryEnum\")\n+@XmlEnum(String.class)\n+public enum CategoryEnum {\n+\n+    @XmlEnumValue(\"DEFAULT\") DEFAULT(String.valueOf(\"DEFAULT\")), @XmlEnumValue(\"CUSTOM\") CUSTOM(String.valueOf(\"CUSTOM\"));\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88fa5194c446519ca9e55e036bffa47996a7f78c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIyNDAwOQ==", "bodyText": "Fixed with #191", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r464224009", "createdAt": "2020-08-03T06:48:27Z", "author": {"login": "mevan-karu"}, "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/gen/java/org/wso2/carbon/identity/api/server/idp/v1/model/IdentityProviderTemplate.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+* Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+*\n+* http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.wso2.carbon.identity.api.server.idp.v1.model;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+import org.wso2.carbon.identity.api.server.idp.v1.model.IdentityProviderPOSTRequest;\n+import javax.validation.constraints.*;\n+\n+\n+import io.swagger.annotations.*;\n+import java.util.Objects;\n+import javax.validation.Valid;\n+import javax.xml.bind.annotation.*;\n+\n+public class IdentityProviderTemplate  {\n+  \n+    private String id;\n+    private String name;\n+    private String description;\n+    private String image;\n+\n+@XmlType(name=\"CategoryEnum\")\n+@XmlEnum(String.class)\n+public enum CategoryEnum {\n+\n+    @XmlEnumValue(\"DEFAULT\") DEFAULT(String.valueOf(\"DEFAULT\")), @XmlEnumValue(\"CUSTOM\") CUSTOM(String.valueOf(\"CUSTOM\"));\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwMzc5Nw=="}, "originalCommit": {"oid": "88fa5194c446519ca9e55e036bffa47996a7f78c"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTQ2OTg0OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzoyNjoyOVrOG5XKiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNjo0ODozM1rOG6t_Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgwMTU0NQ==", "bodyText": "This type of comment is not the normal convention. Ideally each method needs to have the comment explaining it is a utility and what it is for.", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r462801545", "createdAt": "2020-07-30T07:26:29Z", "author": {"login": "ruwanta"}, "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java", "diffHunk": "@@ -808,7 +826,234 @@ public ConnectedApps getConnectedApps(String resourceId, Integer limit, Integer\n         }\n     }\n \n-    // Private utility Methods.\n+    /**\n+     * Retrieve the list of IDP templates.\n+     *\n+     * @param limit      Items per page.\n+     * @param offset     Offset.\n+     * @param filter     Filter string. E.g. filter=\"name\" sw \"google\" and \"category\" eq \"DEFAULT\"\n+     * @return  List of identity templates.\n+     */\n+    public IdentityProviderTemplateListResponse getIDPTemplates(Integer limit, Integer offset, String filter) {\n+\n+        try {\n+            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n+            List<Template> templateList = templateManager.listTemplates(\n+                    TemplateMgtConstants.TemplateType.IDP_TEMPLATE.toString(), limit, offset);\n+            return createIDPTemplateListResponse(templateList, offset, limit, filter);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_LISTING_IDP_TEMPLATES, null);\n+        }\n+    }\n+\n+    /**\n+     * Get an identity provider template identified by resource ID.\n+     *\n+     * @param templateId IDP template Id\n+     * @return IdentityProviderTemplateResponse\n+     */\n+    public IdentityProviderTemplate getIDPTemplate(String templateId) {\n+\n+        try {\n+            Template idpTemplate = IdentityProviderServiceHolder.getTemplateManager().getTemplateById(templateId);\n+            return createIDPTemplateResponse(idpTemplate);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_RETRIEVING_IDP_TEMPLATE,\n+                    templateId);\n+        } catch (IOException e) {\n+            throw handleException(Response.Status.INTERNAL_SERVER_ERROR,\n+                    Constants.ErrorMessage.ERROR_CODE_ERROR_RETRIEVING_IDP_TEMPLATE, templateId);\n+        }\n+    }\n+\n+    /**\n+     * Update IDP template.\n+     *\n+     * @param identityProviderTemplate Updated IDP template\n+     */\n+    public void updateIDPTemplate(String templateId, IdentityProviderTemplate identityProviderTemplate) {\n+\n+        try {\n+            Template idpTemplate = generateIDPTemplate(identityProviderTemplate);\n+            IdentityProviderServiceHolder.getTemplateManager().updateTemplateById(templateId, idpTemplate);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_UPDATING_IDP_TEMPLATE,\n+                    identityProviderTemplate.getId());\n+        } catch (JsonProcessingException e) {\n+            throw handleException(Response.Status.BAD_REQUEST,\n+                    Constants.ErrorMessage.ERROR_CODE_ERROR_UPDATING_IDP_TEMPLATE, templateId);\n+        }\n+    }\n+\n+    /**\n+     * Create a new IDP template.\n+     *\n+     * @param identityProviderTemplate identityProviderTemplatePOSTRequest\n+     * @return IdentityProviderTemplateResponse\n+     */\n+    public String createIDPTemplate(IdentityProviderTemplate identityProviderTemplate) {\n+\n+        try {\n+            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n+            Template idpTemplate = generateIDPTemplate(identityProviderTemplate);\n+            return templateManager.addTemplate(idpTemplate);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_ADDING_IDP_TEMPLATE, null);\n+        } catch (JsonProcessingException e) {\n+            throw handleException(Response.Status.BAD_REQUEST,\n+                    Constants.ErrorMessage.ERROR_CODE_ERROR_ADDING_IDP_TEMPLATE, null);\n+        }\n+    }\n+\n+    /**\n+     * Delete a IDP template identified by resource Id.\n+     *\n+     * @param templateId Id of the IDP template\n+     */\n+    public void deleteIDPTemplate(String templateId) {\n+\n+        try {\n+            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n+            templateManager.deleteTemplateById(templateId);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_DELETING_IDP_TEMPLATE,\n+                    templateId);\n+        }\n+    }\n+\n+//  Private utility Methods.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88fa5194c446519ca9e55e036bffa47996a7f78c"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIyNDAzNA==", "bodyText": "Fixed with #191", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r464224034", "createdAt": "2020-08-03T06:48:33Z", "author": {"login": "mevan-karu"}, "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java", "diffHunk": "@@ -808,7 +826,234 @@ public ConnectedApps getConnectedApps(String resourceId, Integer limit, Integer\n         }\n     }\n \n-    // Private utility Methods.\n+    /**\n+     * Retrieve the list of IDP templates.\n+     *\n+     * @param limit      Items per page.\n+     * @param offset     Offset.\n+     * @param filter     Filter string. E.g. filter=\"name\" sw \"google\" and \"category\" eq \"DEFAULT\"\n+     * @return  List of identity templates.\n+     */\n+    public IdentityProviderTemplateListResponse getIDPTemplates(Integer limit, Integer offset, String filter) {\n+\n+        try {\n+            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n+            List<Template> templateList = templateManager.listTemplates(\n+                    TemplateMgtConstants.TemplateType.IDP_TEMPLATE.toString(), limit, offset);\n+            return createIDPTemplateListResponse(templateList, offset, limit, filter);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_LISTING_IDP_TEMPLATES, null);\n+        }\n+    }\n+\n+    /**\n+     * Get an identity provider template identified by resource ID.\n+     *\n+     * @param templateId IDP template Id\n+     * @return IdentityProviderTemplateResponse\n+     */\n+    public IdentityProviderTemplate getIDPTemplate(String templateId) {\n+\n+        try {\n+            Template idpTemplate = IdentityProviderServiceHolder.getTemplateManager().getTemplateById(templateId);\n+            return createIDPTemplateResponse(idpTemplate);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_RETRIEVING_IDP_TEMPLATE,\n+                    templateId);\n+        } catch (IOException e) {\n+            throw handleException(Response.Status.INTERNAL_SERVER_ERROR,\n+                    Constants.ErrorMessage.ERROR_CODE_ERROR_RETRIEVING_IDP_TEMPLATE, templateId);\n+        }\n+    }\n+\n+    /**\n+     * Update IDP template.\n+     *\n+     * @param identityProviderTemplate Updated IDP template\n+     */\n+    public void updateIDPTemplate(String templateId, IdentityProviderTemplate identityProviderTemplate) {\n+\n+        try {\n+            Template idpTemplate = generateIDPTemplate(identityProviderTemplate);\n+            IdentityProviderServiceHolder.getTemplateManager().updateTemplateById(templateId, idpTemplate);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_UPDATING_IDP_TEMPLATE,\n+                    identityProviderTemplate.getId());\n+        } catch (JsonProcessingException e) {\n+            throw handleException(Response.Status.BAD_REQUEST,\n+                    Constants.ErrorMessage.ERROR_CODE_ERROR_UPDATING_IDP_TEMPLATE, templateId);\n+        }\n+    }\n+\n+    /**\n+     * Create a new IDP template.\n+     *\n+     * @param identityProviderTemplate identityProviderTemplatePOSTRequest\n+     * @return IdentityProviderTemplateResponse\n+     */\n+    public String createIDPTemplate(IdentityProviderTemplate identityProviderTemplate) {\n+\n+        try {\n+            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n+            Template idpTemplate = generateIDPTemplate(identityProviderTemplate);\n+            return templateManager.addTemplate(idpTemplate);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_ADDING_IDP_TEMPLATE, null);\n+        } catch (JsonProcessingException e) {\n+            throw handleException(Response.Status.BAD_REQUEST,\n+                    Constants.ErrorMessage.ERROR_CODE_ERROR_ADDING_IDP_TEMPLATE, null);\n+        }\n+    }\n+\n+    /**\n+     * Delete a IDP template identified by resource Id.\n+     *\n+     * @param templateId Id of the IDP template\n+     */\n+    public void deleteIDPTemplate(String templateId) {\n+\n+        try {\n+            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n+            templateManager.deleteTemplateById(templateId);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_DELETING_IDP_TEMPLATE,\n+                    templateId);\n+        }\n+    }\n+\n+//  Private utility Methods.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgwMTU0NQ=="}, "originalCommit": {"oid": "88fa5194c446519ca9e55e036bffa47996a7f78c"}, "originalPosition": 169}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1529, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}