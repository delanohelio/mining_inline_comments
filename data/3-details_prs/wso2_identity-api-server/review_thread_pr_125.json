{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNTgxODk2", "number": 125, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDo0OTo0M1rODrP7rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwOToyNjozNVrODrjtgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Njc2Mzk3OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.common/src/main/java/org/wso2/carbon/identity/api/server/application/management/common/ApplicationManagementServiceHolder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDo0OTo0M1rOF7ezIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwOToyNDozOFrOF7959w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxNDkxMg==", "bodyText": "This class is written in 2019 and this should be a singleton class...", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r397914912", "createdAt": "2020-03-25T14:49:43Z", "author": {"login": "thanujalk"}, "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.common/src/main/java/org/wso2/carbon/identity/api/server/application/management/common/ApplicationManagementServiceHolder.java", "diffHunk": "@@ -85,4 +88,14 @@ public static void setoAuthServerConfiguration(OAuthServerConfiguration oAuthSer\n \n         ApplicationManagementServiceHolder.oAuthServerConfiguration = oAuthServerConfiguration;\n     }\n+\n+    public static TemplateManager getTemplateManager() {\n+\n+        return templateManager;\n+    }\n+\n+    public static void setTemplateManager(TemplateManager templateManager) {\n+\n+        ApplicationManagementServiceHolder.templateManager = templateManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb18e163989ec3cc7a85a75e5c2e5a93b9a104aa"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQyNDU2Nw==", "bodyText": "Fixed with a9f6e38", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r398424567", "createdAt": "2020-03-26T09:24:38Z", "author": {"login": "pamodaaw"}, "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.common/src/main/java/org/wso2/carbon/identity/api/server/application/management/common/ApplicationManagementServiceHolder.java", "diffHunk": "@@ -85,4 +88,14 @@ public static void setoAuthServerConfiguration(OAuthServerConfiguration oAuthSer\n \n         ApplicationManagementServiceHolder.oAuthServerConfiguration = oAuthServerConfiguration;\n     }\n+\n+    public static TemplateManager getTemplateManager() {\n+\n+        return templateManager;\n+    }\n+\n+    public static void setTemplateManager(TemplateManager templateManager) {\n+\n+        ApplicationManagementServiceHolder.templateManager = templateManager;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxNDkxMg=="}, "originalCommit": {"oid": "fb18e163989ec3cc7a85a75e5c2e5a93b9a104aa"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Njc3NjUwOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.v1/src/gen/java/org/wso2/carbon/identity/api/server/application/management/v1/ApplicationTemplateModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDo1MjoxOVrOF7e7Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDo1MjoxOVrOF7e7Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxNzAwMw==", "bodyText": "change the src generator to have 2020.", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r397917003", "createdAt": "2020-03-25T14:52:19Z", "author": {"login": "thanujalk"}, "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.v1/src/gen/java/org/wso2/carbon/identity/api/server/application/management/v1/ApplicationTemplateModel.java", "diffHunk": "@@ -0,0 +1,280 @@\n+/*\n+* Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb18e163989ec3cc7a85a75e5c2e5a93b9a104aa"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Njc4MzYwOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.v1/src/main/java/org/wso2/carbon/identity/api/server/application/management/v1/core/ServerApplicationManagementService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDo1Mzo0N1rOF7fADA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxOTo0NDowMVrOF7rghw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxODIyMA==", "bodyText": "missing method comment", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r397918220", "createdAt": "2020-03-25T14:53:47Z", "author": {"login": "thanujalk"}, "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.v1/src/main/java/org/wso2/carbon/identity/api/server/application/management/v1/core/ServerApplicationManagementService.java", "diffHunk": "@@ -475,6 +500,74 @@ public void updateCustomInbound(String applicationId, String inboundType,\n         putInbound(applicationId, customInbound, CustomInboundFunctions::putCustomInbound);\n     }\n \n+    public String createApplicationTemplate(ApplicationTemplateModel applicationTemplateModel) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb18e163989ec3cc7a85a75e5c2e5a93b9a104aa"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEyMzE0Mw==", "bodyText": "added", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r398123143", "createdAt": "2020-03-25T19:44:01Z", "author": {"login": "pamodaaw"}, "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.v1/src/main/java/org/wso2/carbon/identity/api/server/application/management/v1/core/ServerApplicationManagementService.java", "diffHunk": "@@ -475,6 +500,74 @@ public void updateCustomInbound(String applicationId, String inboundType,\n         putInbound(applicationId, customInbound, CustomInboundFunctions::putCustomInbound);\n     }\n \n+    public String createApplicationTemplate(ApplicationTemplateModel applicationTemplateModel) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxODIyMA=="}, "originalCommit": {"oid": "fb18e163989ec3cc7a85a75e5c2e5a93b9a104aa"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Njc4NDU2OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.v1/src/main/java/org/wso2/carbon/identity/api/server/application/management/v1/core/ServerApplicationManagementService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDo1Mzo1OFrOF7fAsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxOTo0NDoxM1rOF7rg9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxODM4Ng==", "bodyText": "missing method comment", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r397918386", "createdAt": "2020-03-25T14:53:58Z", "author": {"login": "thanujalk"}, "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.v1/src/main/java/org/wso2/carbon/identity/api/server/application/management/v1/core/ServerApplicationManagementService.java", "diffHunk": "@@ -475,6 +500,74 @@ public void updateCustomInbound(String applicationId, String inboundType,\n         putInbound(applicationId, customInbound, CustomInboundFunctions::putCustomInbound);\n     }\n \n+    public String createApplicationTemplate(ApplicationTemplateModel applicationTemplateModel) {\n+\n+        Template template = new ApplicationTemplateApiModelToTemplate().apply(applicationTemplateModel);\n+\n+        try {\n+            return getTemplateManager().addTemplate(template);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateManagementException(e, \"Error while adding the new application template.\");\n+        }\n+    }\n+\n+    public ApplicationTemplatesList listApplicationTemplates(Integer limit, Integer offset) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb18e163989ec3cc7a85a75e5c2e5a93b9a104aa"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEyMzI1Mw==", "bodyText": "added", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r398123253", "createdAt": "2020-03-25T19:44:13Z", "author": {"login": "pamodaaw"}, "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.v1/src/main/java/org/wso2/carbon/identity/api/server/application/management/v1/core/ServerApplicationManagementService.java", "diffHunk": "@@ -475,6 +500,74 @@ public void updateCustomInbound(String applicationId, String inboundType,\n         putInbound(applicationId, customInbound, CustomInboundFunctions::putCustomInbound);\n     }\n \n+    public String createApplicationTemplate(ApplicationTemplateModel applicationTemplateModel) {\n+\n+        Template template = new ApplicationTemplateApiModelToTemplate().apply(applicationTemplateModel);\n+\n+        try {\n+            return getTemplateManager().addTemplate(template);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateManagementException(e, \"Error while adding the new application template.\");\n+        }\n+    }\n+\n+    public ApplicationTemplatesList listApplicationTemplates(Integer limit, Integer offset) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxODM4Ng=="}, "originalCommit": {"oid": "fb18e163989ec3cc7a85a75e5c2e5a93b9a104aa"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NjgwNTE2OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.v1/src/main/java/org/wso2/carbon/identity/api/server/application/management/v1/core/ServerApplicationManagementService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDo1ODowN1rOF7fN1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxOTo0NDoyOFrOF7rhmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyMTc0OA==", "bodyText": "missing method comment", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r397921748", "createdAt": "2020-03-25T14:58:07Z", "author": {"login": "thanujalk"}, "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.v1/src/main/java/org/wso2/carbon/identity/api/server/application/management/v1/core/ServerApplicationManagementService.java", "diffHunk": "@@ -475,6 +500,74 @@ public void updateCustomInbound(String applicationId, String inboundType,\n         putInbound(applicationId, customInbound, CustomInboundFunctions::putCustomInbound);\n     }\n \n+    public String createApplicationTemplate(ApplicationTemplateModel applicationTemplateModel) {\n+\n+        Template template = new ApplicationTemplateApiModelToTemplate().apply(applicationTemplateModel);\n+\n+        try {\n+            return getTemplateManager().addTemplate(template);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateManagementException(e, \"Error while adding the new application template.\");\n+        }\n+    }\n+\n+    public ApplicationTemplatesList listApplicationTemplates(Integer limit, Integer offset) {\n+\n+        validatePaginationSupport(limit, offset);\n+        try {\n+            List<Template> templateList = getTemplateManager().listTemplates(TemplateMgtConstants.TemplateType\n+                    .APPLICATION_TEMPLATE.toString(), null, null);\n+            List<ApplicationTemplatesListItem> applicationTemplateList = templateList.stream().map(new\n+                    TemplateToApplicationTemplateListItem()).collect(Collectors.toList());\n+\n+            ApplicationTemplatesList applicationTemplates = new ApplicationTemplatesList();\n+            applicationTemplates.setTemplates(applicationTemplateList);\n+            return applicationTemplates;\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateManagementException(e, \"Error while listing application templates.\");\n+        }\n+    }\n+\n+    public ApplicationTemplateModel getApplicationTemplateById(String templateId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb18e163989ec3cc7a85a75e5c2e5a93b9a104aa"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEyMzQxOA==", "bodyText": "added", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r398123418", "createdAt": "2020-03-25T19:44:28Z", "author": {"login": "pamodaaw"}, "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.v1/src/main/java/org/wso2/carbon/identity/api/server/application/management/v1/core/ServerApplicationManagementService.java", "diffHunk": "@@ -475,6 +500,74 @@ public void updateCustomInbound(String applicationId, String inboundType,\n         putInbound(applicationId, customInbound, CustomInboundFunctions::putCustomInbound);\n     }\n \n+    public String createApplicationTemplate(ApplicationTemplateModel applicationTemplateModel) {\n+\n+        Template template = new ApplicationTemplateApiModelToTemplate().apply(applicationTemplateModel);\n+\n+        try {\n+            return getTemplateManager().addTemplate(template);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateManagementException(e, \"Error while adding the new application template.\");\n+        }\n+    }\n+\n+    public ApplicationTemplatesList listApplicationTemplates(Integer limit, Integer offset) {\n+\n+        validatePaginationSupport(limit, offset);\n+        try {\n+            List<Template> templateList = getTemplateManager().listTemplates(TemplateMgtConstants.TemplateType\n+                    .APPLICATION_TEMPLATE.toString(), null, null);\n+            List<ApplicationTemplatesListItem> applicationTemplateList = templateList.stream().map(new\n+                    TemplateToApplicationTemplateListItem()).collect(Collectors.toList());\n+\n+            ApplicationTemplatesList applicationTemplates = new ApplicationTemplatesList();\n+            applicationTemplates.setTemplates(applicationTemplateList);\n+            return applicationTemplates;\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateManagementException(e, \"Error while listing application templates.\");\n+        }\n+    }\n+\n+    public ApplicationTemplateModel getApplicationTemplateById(String templateId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyMTc0OA=="}, "originalCommit": {"oid": "fb18e163989ec3cc7a85a75e5c2e5a93b9a104aa"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NjgwNTUwOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.v1/src/main/java/org/wso2/carbon/identity/api/server/application/management/v1/core/ServerApplicationManagementService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDo1ODoxMVrOF7fODw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxOTo0NDo0MlrOF7riMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyMTgwNw==", "bodyText": "missing method comment", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r397921807", "createdAt": "2020-03-25T14:58:11Z", "author": {"login": "thanujalk"}, "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.v1/src/main/java/org/wso2/carbon/identity/api/server/application/management/v1/core/ServerApplicationManagementService.java", "diffHunk": "@@ -475,6 +500,74 @@ public void updateCustomInbound(String applicationId, String inboundType,\n         putInbound(applicationId, customInbound, CustomInboundFunctions::putCustomInbound);\n     }\n \n+    public String createApplicationTemplate(ApplicationTemplateModel applicationTemplateModel) {\n+\n+        Template template = new ApplicationTemplateApiModelToTemplate().apply(applicationTemplateModel);\n+\n+        try {\n+            return getTemplateManager().addTemplate(template);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateManagementException(e, \"Error while adding the new application template.\");\n+        }\n+    }\n+\n+    public ApplicationTemplatesList listApplicationTemplates(Integer limit, Integer offset) {\n+\n+        validatePaginationSupport(limit, offset);\n+        try {\n+            List<Template> templateList = getTemplateManager().listTemplates(TemplateMgtConstants.TemplateType\n+                    .APPLICATION_TEMPLATE.toString(), null, null);\n+            List<ApplicationTemplatesListItem> applicationTemplateList = templateList.stream().map(new\n+                    TemplateToApplicationTemplateListItem()).collect(Collectors.toList());\n+\n+            ApplicationTemplatesList applicationTemplates = new ApplicationTemplatesList();\n+            applicationTemplates.setTemplates(applicationTemplateList);\n+            return applicationTemplates;\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateManagementException(e, \"Error while listing application templates.\");\n+        }\n+    }\n+\n+    public ApplicationTemplateModel getApplicationTemplateById(String templateId) {\n+\n+        try {\n+            return new TemplateToApplicationTemplate().apply(getTemplateManager().getTemplateById(templateId));\n+        } catch (TemplateManagementException e) {\n+            if (TemplateMgtConstants.ErrorMessages.ERROR_CODE_TEMPLATE_NOT_FOUND.getCode().equals(e.getErrorCode())) {\n+                throw handleTemplateNotFoundException(e);\n+            }\n+            String errorMessage = \"Error while retrieving the application template with id \" + templateId + \".\";\n+            throw handleTemplateManagementException(e, errorMessage);\n+        }\n+    }\n+\n+    public void deleteApplicationTemplateById(String templateId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb18e163989ec3cc7a85a75e5c2e5a93b9a104aa"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEyMzU3MQ==", "bodyText": "added", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r398123571", "createdAt": "2020-03-25T19:44:42Z", "author": {"login": "pamodaaw"}, "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.v1/src/main/java/org/wso2/carbon/identity/api/server/application/management/v1/core/ServerApplicationManagementService.java", "diffHunk": "@@ -475,6 +500,74 @@ public void updateCustomInbound(String applicationId, String inboundType,\n         putInbound(applicationId, customInbound, CustomInboundFunctions::putCustomInbound);\n     }\n \n+    public String createApplicationTemplate(ApplicationTemplateModel applicationTemplateModel) {\n+\n+        Template template = new ApplicationTemplateApiModelToTemplate().apply(applicationTemplateModel);\n+\n+        try {\n+            return getTemplateManager().addTemplate(template);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateManagementException(e, \"Error while adding the new application template.\");\n+        }\n+    }\n+\n+    public ApplicationTemplatesList listApplicationTemplates(Integer limit, Integer offset) {\n+\n+        validatePaginationSupport(limit, offset);\n+        try {\n+            List<Template> templateList = getTemplateManager().listTemplates(TemplateMgtConstants.TemplateType\n+                    .APPLICATION_TEMPLATE.toString(), null, null);\n+            List<ApplicationTemplatesListItem> applicationTemplateList = templateList.stream().map(new\n+                    TemplateToApplicationTemplateListItem()).collect(Collectors.toList());\n+\n+            ApplicationTemplatesList applicationTemplates = new ApplicationTemplatesList();\n+            applicationTemplates.setTemplates(applicationTemplateList);\n+            return applicationTemplates;\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateManagementException(e, \"Error while listing application templates.\");\n+        }\n+    }\n+\n+    public ApplicationTemplateModel getApplicationTemplateById(String templateId) {\n+\n+        try {\n+            return new TemplateToApplicationTemplate().apply(getTemplateManager().getTemplateById(templateId));\n+        } catch (TemplateManagementException e) {\n+            if (TemplateMgtConstants.ErrorMessages.ERROR_CODE_TEMPLATE_NOT_FOUND.getCode().equals(e.getErrorCode())) {\n+                throw handleTemplateNotFoundException(e);\n+            }\n+            String errorMessage = \"Error while retrieving the application template with id \" + templateId + \".\";\n+            throw handleTemplateManagementException(e, errorMessage);\n+        }\n+    }\n+\n+    public void deleteApplicationTemplateById(String templateId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyMTgwNw=="}, "originalCommit": {"oid": "fb18e163989ec3cc7a85a75e5c2e5a93b9a104aa"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NjgwNTk3OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.v1/src/main/java/org/wso2/carbon/identity/api/server/application/management/v1/core/ServerApplicationManagementService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDo1ODoxN1rOF7fOXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxOTo0NDo1NFrOF7rikQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyMTg4Nw==", "bodyText": "missing method comment", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r397921887", "createdAt": "2020-03-25T14:58:17Z", "author": {"login": "thanujalk"}, "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.v1/src/main/java/org/wso2/carbon/identity/api/server/application/management/v1/core/ServerApplicationManagementService.java", "diffHunk": "@@ -475,6 +500,74 @@ public void updateCustomInbound(String applicationId, String inboundType,\n         putInbound(applicationId, customInbound, CustomInboundFunctions::putCustomInbound);\n     }\n \n+    public String createApplicationTemplate(ApplicationTemplateModel applicationTemplateModel) {\n+\n+        Template template = new ApplicationTemplateApiModelToTemplate().apply(applicationTemplateModel);\n+\n+        try {\n+            return getTemplateManager().addTemplate(template);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateManagementException(e, \"Error while adding the new application template.\");\n+        }\n+    }\n+\n+    public ApplicationTemplatesList listApplicationTemplates(Integer limit, Integer offset) {\n+\n+        validatePaginationSupport(limit, offset);\n+        try {\n+            List<Template> templateList = getTemplateManager().listTemplates(TemplateMgtConstants.TemplateType\n+                    .APPLICATION_TEMPLATE.toString(), null, null);\n+            List<ApplicationTemplatesListItem> applicationTemplateList = templateList.stream().map(new\n+                    TemplateToApplicationTemplateListItem()).collect(Collectors.toList());\n+\n+            ApplicationTemplatesList applicationTemplates = new ApplicationTemplatesList();\n+            applicationTemplates.setTemplates(applicationTemplateList);\n+            return applicationTemplates;\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateManagementException(e, \"Error while listing application templates.\");\n+        }\n+    }\n+\n+    public ApplicationTemplateModel getApplicationTemplateById(String templateId) {\n+\n+        try {\n+            return new TemplateToApplicationTemplate().apply(getTemplateManager().getTemplateById(templateId));\n+        } catch (TemplateManagementException e) {\n+            if (TemplateMgtConstants.ErrorMessages.ERROR_CODE_TEMPLATE_NOT_FOUND.getCode().equals(e.getErrorCode())) {\n+                throw handleTemplateNotFoundException(e);\n+            }\n+            String errorMessage = \"Error while retrieving the application template with id \" + templateId + \".\";\n+            throw handleTemplateManagementException(e, errorMessage);\n+        }\n+    }\n+\n+    public void deleteApplicationTemplateById(String templateId) {\n+\n+        try {\n+            getTemplateManager().deleteTemplateById(templateId);\n+        } catch (TemplateManagementException e) {\n+            if (TemplateMgtConstants.ErrorMessages.ERROR_CODE_TEMPLATE_NOT_FOUND.getCode().equals(e.getErrorCode())) {\n+                throw handleTemplateNotFoundException(e);\n+            }\n+            String errorMessage = \"Error while deleting the application template with id \" + templateId + \".\";\n+            throw handleTemplateManagementException(e, errorMessage);\n+        }\n+    }\n+\n+    public void updateApplicationTemplateById(String templateId, ApplicationTemplateModel model) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb18e163989ec3cc7a85a75e5c2e5a93b9a104aa"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEyMzY2NQ==", "bodyText": "added", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r398123665", "createdAt": "2020-03-25T19:44:54Z", "author": {"login": "pamodaaw"}, "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.v1/src/main/java/org/wso2/carbon/identity/api/server/application/management/v1/core/ServerApplicationManagementService.java", "diffHunk": "@@ -475,6 +500,74 @@ public void updateCustomInbound(String applicationId, String inboundType,\n         putInbound(applicationId, customInbound, CustomInboundFunctions::putCustomInbound);\n     }\n \n+    public String createApplicationTemplate(ApplicationTemplateModel applicationTemplateModel) {\n+\n+        Template template = new ApplicationTemplateApiModelToTemplate().apply(applicationTemplateModel);\n+\n+        try {\n+            return getTemplateManager().addTemplate(template);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateManagementException(e, \"Error while adding the new application template.\");\n+        }\n+    }\n+\n+    public ApplicationTemplatesList listApplicationTemplates(Integer limit, Integer offset) {\n+\n+        validatePaginationSupport(limit, offset);\n+        try {\n+            List<Template> templateList = getTemplateManager().listTemplates(TemplateMgtConstants.TemplateType\n+                    .APPLICATION_TEMPLATE.toString(), null, null);\n+            List<ApplicationTemplatesListItem> applicationTemplateList = templateList.stream().map(new\n+                    TemplateToApplicationTemplateListItem()).collect(Collectors.toList());\n+\n+            ApplicationTemplatesList applicationTemplates = new ApplicationTemplatesList();\n+            applicationTemplates.setTemplates(applicationTemplateList);\n+            return applicationTemplates;\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateManagementException(e, \"Error while listing application templates.\");\n+        }\n+    }\n+\n+    public ApplicationTemplateModel getApplicationTemplateById(String templateId) {\n+\n+        try {\n+            return new TemplateToApplicationTemplate().apply(getTemplateManager().getTemplateById(templateId));\n+        } catch (TemplateManagementException e) {\n+            if (TemplateMgtConstants.ErrorMessages.ERROR_CODE_TEMPLATE_NOT_FOUND.getCode().equals(e.getErrorCode())) {\n+                throw handleTemplateNotFoundException(e);\n+            }\n+            String errorMessage = \"Error while retrieving the application template with id \" + templateId + \".\";\n+            throw handleTemplateManagementException(e, errorMessage);\n+        }\n+    }\n+\n+    public void deleteApplicationTemplateById(String templateId) {\n+\n+        try {\n+            getTemplateManager().deleteTemplateById(templateId);\n+        } catch (TemplateManagementException e) {\n+            if (TemplateMgtConstants.ErrorMessages.ERROR_CODE_TEMPLATE_NOT_FOUND.getCode().equals(e.getErrorCode())) {\n+                throw handleTemplateNotFoundException(e);\n+            }\n+            String errorMessage = \"Error while deleting the application template with id \" + templateId + \".\";\n+            throw handleTemplateManagementException(e, errorMessage);\n+        }\n+    }\n+\n+    public void updateApplicationTemplateById(String templateId, ApplicationTemplateModel model) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyMTg4Nw=="}, "originalCommit": {"oid": "fb18e163989ec3cc7a85a75e5c2e5a93b9a104aa"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NjgyMDUzOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.v1/src/main/java/org/wso2/carbon/identity/api/server/application/management/v1/core/functions/template/TemplateToApplicationTemplate.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNTowMTowNVrOF7fXnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNDozMzo0NlrOF73Ehg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyNDI1Mw==", "bodyText": "redundant empty check.", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r397924253", "createdAt": "2020-03-25T15:01:05Z", "author": {"login": "thanujalk"}, "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.v1/src/main/java/org/wso2/carbon/identity/api/server/application/management/v1/core/functions/template/TemplateToApplicationTemplate.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.api.server.application.management.v1.core.functions.template;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.identity.api.server.application.management.common.ApplicationManagementConstants;\n+import org.wso2.carbon.identity.api.server.application.management.v1.ApplicationModel;\n+import org.wso2.carbon.identity.api.server.application.management.v1.ApplicationTemplateModel;\n+import org.wso2.carbon.identity.template.mgt.model.Template;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.function.Function;\n+\n+import static org.wso2.carbon.identity.api.server.application.management.v1.core.functions.Utils.buildServerError;\n+\n+/**\n+ * Converts the Template to ApplicationTemplate model.\n+ */\n+public class TemplateToApplicationTemplate implements Function<Template, ApplicationTemplateModel> {\n+\n+    @Override\n+    public ApplicationTemplateModel apply(Template template) {\n+\n+        ApplicationTemplateModel applicationTemplate = new ApplicationTemplateModel();\n+        applicationTemplate.setName(template.getTemplateName());\n+        applicationTemplate.setId(template.getTemplateId());\n+        applicationTemplate.setDescription(template.getDescription());\n+        applicationTemplate.setImage(template.getImageUrl());\n+\n+        if (StringUtils.isNotBlank(template.getTemplateScript())) {\n+            applicationTemplate.setApplication(createApplicationTemplate(template.getTemplateScript()));\n+        }\n+\n+        if (!template.getPropertiesMap().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb18e163989ec3cc7a85a75e5c2e5a93b9a104aa"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxMjU4Mg==", "bodyText": "Changed this to a null check. Otherwise there can be NullPointer Exceptions when trying to retrieve the data", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r398312582", "createdAt": "2020-03-26T04:33:46Z", "author": {"login": "pamodaaw"}, "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.v1/src/main/java/org/wso2/carbon/identity/api/server/application/management/v1/core/functions/template/TemplateToApplicationTemplate.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.api.server.application.management.v1.core.functions.template;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.identity.api.server.application.management.common.ApplicationManagementConstants;\n+import org.wso2.carbon.identity.api.server.application.management.v1.ApplicationModel;\n+import org.wso2.carbon.identity.api.server.application.management.v1.ApplicationTemplateModel;\n+import org.wso2.carbon.identity.template.mgt.model.Template;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.function.Function;\n+\n+import static org.wso2.carbon.identity.api.server.application.management.v1.core.functions.Utils.buildServerError;\n+\n+/**\n+ * Converts the Template to ApplicationTemplate model.\n+ */\n+public class TemplateToApplicationTemplate implements Function<Template, ApplicationTemplateModel> {\n+\n+    @Override\n+    public ApplicationTemplateModel apply(Template template) {\n+\n+        ApplicationTemplateModel applicationTemplate = new ApplicationTemplateModel();\n+        applicationTemplate.setName(template.getTemplateName());\n+        applicationTemplate.setId(template.getTemplateId());\n+        applicationTemplate.setDescription(template.getDescription());\n+        applicationTemplate.setImage(template.getImageUrl());\n+\n+        if (StringUtils.isNotBlank(template.getTemplateScript())) {\n+            applicationTemplate.setApplication(createApplicationTemplate(template.getTemplateScript()));\n+        }\n+\n+        if (!template.getPropertiesMap().isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyNDI1Mw=="}, "originalCommit": {"oid": "fb18e163989ec3cc7a85a75e5c2e5a93b9a104aa"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NjgyMzMyOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.v1/src/main/java/org/wso2/carbon/identity/api/server/application/management/v1/core/functions/template/TemplateToApplicationTemplateListItem.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNTowMTozOFrOF7fZdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNDozMzo1M1rOF73EpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyNDcyNA==", "bodyText": "redundant empty check.", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r397924724", "createdAt": "2020-03-25T15:01:38Z", "author": {"login": "thanujalk"}, "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.v1/src/main/java/org/wso2/carbon/identity/api/server/application/management/v1/core/functions/template/TemplateToApplicationTemplateListItem.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.api.server.application.management.v1.core.functions.template;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.identity.api.server.application.management.common.ApplicationManagementConstants;\n+import org.wso2.carbon.identity.api.server.application.management.v1.ApplicationTemplatesListItem;\n+import org.wso2.carbon.identity.api.server.common.Constants;\n+import org.wso2.carbon.identity.api.server.common.ContextLoader;\n+import org.wso2.carbon.identity.template.mgt.model.Template;\n+\n+import java.util.Arrays;\n+import java.util.function.Function;\n+\n+import static org.wso2.carbon.identity.api.server.application.management.common.ApplicationManagementConstants\n+        .APPLICATION_MANAGEMENT_PATH_COMPONENT;\n+import static org.wso2.carbon.identity.api.server.application.management.common.ApplicationManagementConstants\n+        .APPLICATION_TEMPLATE_MANAGEMENT_PATH_COMPONENT;\n+\n+/**\n+ * Converts the Template to ApplicationTemplateListItem model.\n+ */\n+public class TemplateToApplicationTemplateListItem implements Function<Template, ApplicationTemplatesListItem> {\n+\n+    @Override\n+    public ApplicationTemplatesListItem apply(Template template) {\n+\n+        ApplicationTemplatesListItem listItem = new ApplicationTemplatesListItem();\n+        listItem.setName(template.getTemplateName());\n+        listItem.setId(template.getTemplateId());\n+        listItem.setSelf(getApplicationTemplateLocation(template.getTemplateId()));\n+        listItem.setDescription(template.getDescription());\n+        listItem.setImage(template.getImageUrl());\n+\n+        if (!template.getPropertiesMap().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb18e163989ec3cc7a85a75e5c2e5a93b9a104aa"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxMjYxMw==", "bodyText": "Changed this to a null check. Otherwise there can be NullPointer Exceptions when trying to retrieve the data", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r398312613", "createdAt": "2020-03-26T04:33:53Z", "author": {"login": "pamodaaw"}, "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.v1/src/main/java/org/wso2/carbon/identity/api/server/application/management/v1/core/functions/template/TemplateToApplicationTemplateListItem.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.api.server.application.management.v1.core.functions.template;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.identity.api.server.application.management.common.ApplicationManagementConstants;\n+import org.wso2.carbon.identity.api.server.application.management.v1.ApplicationTemplatesListItem;\n+import org.wso2.carbon.identity.api.server.common.Constants;\n+import org.wso2.carbon.identity.api.server.common.ContextLoader;\n+import org.wso2.carbon.identity.template.mgt.model.Template;\n+\n+import java.util.Arrays;\n+import java.util.function.Function;\n+\n+import static org.wso2.carbon.identity.api.server.application.management.common.ApplicationManagementConstants\n+        .APPLICATION_MANAGEMENT_PATH_COMPONENT;\n+import static org.wso2.carbon.identity.api.server.application.management.common.ApplicationManagementConstants\n+        .APPLICATION_TEMPLATE_MANAGEMENT_PATH_COMPONENT;\n+\n+/**\n+ * Converts the Template to ApplicationTemplateListItem model.\n+ */\n+public class TemplateToApplicationTemplateListItem implements Function<Template, ApplicationTemplatesListItem> {\n+\n+    @Override\n+    public ApplicationTemplatesListItem apply(Template template) {\n+\n+        ApplicationTemplatesListItem listItem = new ApplicationTemplatesListItem();\n+        listItem.setName(template.getTemplateName());\n+        listItem.setId(template.getTemplateId());\n+        listItem.setSelf(getApplicationTemplateLocation(template.getTemplateId()));\n+        listItem.setDescription(template.getDescription());\n+        listItem.setImage(template.getImageUrl());\n+\n+        if (!template.getPropertiesMap().isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyNDcyNA=="}, "originalCommit": {"oid": "fb18e163989ec3cc7a85a75e5c2e5a93b9a104aa"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NjgyOTE1OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.v1/src/main/resources/META-INF/cxf/applications-server-v1-cxf.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNTowMjo1NVrOF7fdPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNDozNToyNlrOF73GGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyNTY5Mw==", "bodyText": "length exceeds 120.", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r397925693", "createdAt": "2020-03-25T15:02:55Z", "author": {"login": "thanujalk"}, "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.v1/src/main/resources/META-INF/cxf/applications-server-v1-cxf.xml", "diffHunk": "@@ -47,4 +52,6 @@\n           class=\"org.wso2.carbon.identity.api.server.application.management.common.factory.STSAdminOSGiServiceFactory\"/>\n     <bean id=\"samlSsoConfigServiceFactoryBean\"\n           class=\"org.wso2.carbon.identity.api.server.application.management.common.factory.SAMLSSOConfigOSGiServiceFactory\"/>\n+    <bean id=\"templateManagerServiceFactoryBean\"\n+          class=\"org.wso2.carbon.identity.api.server.application.management.common.factory.TemplateManagementOSGiServiceFactory\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb18e163989ec3cc7a85a75e5c2e5a93b9a104aa"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxMjk4Nw==", "bodyText": "In this file, the class name is given in a single line at all the other places. Therefore I used the same way.", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r398312987", "createdAt": "2020-03-26T04:35:26Z", "author": {"login": "pamodaaw"}, "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.v1/src/main/resources/META-INF/cxf/applications-server-v1-cxf.xml", "diffHunk": "@@ -47,4 +52,6 @@\n           class=\"org.wso2.carbon.identity.api.server.application.management.common.factory.STSAdminOSGiServiceFactory\"/>\n     <bean id=\"samlSsoConfigServiceFactoryBean\"\n           class=\"org.wso2.carbon.identity.api.server.application.management.common.factory.SAMLSSOConfigOSGiServiceFactory\"/>\n+    <bean id=\"templateManagerServiceFactoryBean\"\n+          class=\"org.wso2.carbon.identity.api.server.application.management.common.factory.TemplateManagementOSGiServiceFactory\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyNTY5Mw=="}, "originalCommit": {"oid": "fb18e163989ec3cc7a85a75e5c2e5a93b9a104aa"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDAwNDQ5OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.common/src/main/java/org/wso2/carbon/identity/api/server/application/management/common/ApplicationManagementServiceHolder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwOToyNjozNVrOF79_GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNjozMjoxNVrOF8PpUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQyNTg4MA==", "bodyText": "make the constructor of ApplicationManagementServiceHolder private", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r398425880", "createdAt": "2020-03-26T09:26:35Z", "author": {"login": "emswbandara"}, "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.common/src/main/java/org/wso2/carbon/identity/api/server/application/management/common/ApplicationManagementServiceHolder.java", "diffHunk": "@@ -36,53 +40,70 @@\n \n     private static OAuthServerConfiguration oAuthServerConfiguration;\n \n-    public static ApplicationManagementService getApplicationManagementService() {\n+    private static TemplateManager templateManager;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9f6e387b927fc0e84b0abc4e46a77327e60649a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODcxNTIxOA==", "bodyText": "Added with 61c58f9", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r398715218", "createdAt": "2020-03-26T16:32:15Z", "author": {"login": "pamodaaw"}, "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.common/src/main/java/org/wso2/carbon/identity/api/server/application/management/common/ApplicationManagementServiceHolder.java", "diffHunk": "@@ -36,53 +40,70 @@\n \n     private static OAuthServerConfiguration oAuthServerConfiguration;\n \n-    public static ApplicationManagementService getApplicationManagementService() {\n+    private static TemplateManager templateManager;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQyNTg4MA=="}, "originalCommit": {"oid": "a9f6e387b927fc0e84b0abc4e46a77327e60649a"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1460, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}