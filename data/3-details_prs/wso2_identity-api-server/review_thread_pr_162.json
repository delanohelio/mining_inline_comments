{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyNzM3NTg0", "number": 162, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNjozMjo0N1rOD43XVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMTo1ODoyOVrOEWwyLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTUzOTQwOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNjozMjo0N1rOGP0BJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNjozMjo0N1rOGP0BJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIzNDA4Nw==", "bodyText": "I think we have to break the flow. If we cannot build the URL.\nCheck whether you can throw an APIError from here", "url": "https://github.com/wso2/identity-api-server/pull/162#discussion_r419234087", "createdAt": "2020-05-04T06:32:47Z", "author": {"login": "mefarazath"}, "path": "components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java", "diffHunk": "@@ -73,9 +76,20 @@ public static String getUsernameFromContext() {\n      */\n     public static URI buildURIForBody(String endpoint) {\n \n-        String tenantQualifiedRelativePath =\n-                String.format(TENANT_CONTEXT_PATH_COMPONENT, getTenantDomainFromContext()) + SERVER_API_PATH_COMPONENT;\n-        String url = IdentityUtil.getEndpointURIPath(tenantQualifiedRelativePath + endpoint, true, true);\n+        String url = \"\";\n+        if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n+            String context = SERVER_API_PATH_COMPONENT + endpoint;\n+            try {\n+                url = ServiceURLBuilder.create().addPath(context).build().getRelativePublicURL();\n+            } catch (URLBuilderException e) {\n+                LOG.error(\"Server encountered an error while building the location URL in tenant qualified scheme.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb8589077919751452702187fa0140669515e5ff"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDUwODQwOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjowMzoyM1rOGP9SCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjowMzoyM1rOGP9SCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4NTg2Ng==", "bodyText": "Here also need to do the same as above suggested by @mefarazath. Throw a relevant expectation from here and handle it where this API is consumed.", "url": "https://github.com/wso2/identity-api-server/pull/162#discussion_r419385866", "createdAt": "2020-05-04T12:03:23Z", "author": {"login": "ashensw"}, "path": "components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java", "diffHunk": "@@ -88,21 +102,36 @@ public static URI buildURIForBody(String endpoint) {\n      */\n     public static URI buildURIForHeader(String endpoint) {\n \n-        String tenantQualifiedRelativePath =\n-                String.format(TENANT_CONTEXT_PATH_COMPONENT, getTenantDomainFromContext()) + SERVER_API_PATH_COMPONENT;\n-        String url = IdentityUtil.getEndpointURIPath(tenantQualifiedRelativePath + endpoint, false, true);\n-\n-        URI loc = URI.create(url);\n-        if (!loc.isAbsolute()) {\n-            Message currentMessage = PhaseInterceptorChain.getCurrentMessage();\n-            if (currentMessage != null) {\n-                UriInfo ui = new UriInfoImpl(currentMessage.getExchange().getInMessage(), null);\n-                try {\n-                    return new URI(ui.getBaseUri().getScheme(), ui.getBaseUri().getAuthority(), url, null, null);\n-                } catch (URISyntaxException e) {\n-                    LOG.error(\"Server encountered an error while building the location URL with scheme: \" +\n-                            ui.getBaseUri().getScheme() + \", authority: \" + ui.getBaseUri().getAuthority() +\n-                            \", url: \" + url, e);\n+        String url;\n+        URI loc = null;\n+\n+        if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n+            try {\n+                // Creating the context path from the endpoint which needs to be added to build the absolute public url.\n+                String context = SERVER_API_PATH_COMPONENT + endpoint;\n+                url = ServiceURLBuilder.create().addPath(context).build().getAbsolutePublicURL();\n+                loc = URI.create(url);\n+            } catch (URLBuilderException e) {\n+                LOG.error(\"Server encountered an error while building the location URL in tenant qualified scheme.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb8589077919751452702187fa0140669515e5ff"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTAzNzcyOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDoxMzoxMFrOGQCRBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDoxMzoxMFrOGQCRBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2NzUyNA==", "bodyText": "We don't need to log here. It will be handled by the layer which catches the APIError", "url": "https://github.com/wso2/identity-api-server/pull/162#discussion_r419467524", "createdAt": "2020-05-04T14:13:10Z", "author": {"login": "mefarazath"}, "path": "components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java", "diffHunk": "@@ -88,24 +109,63 @@ public static URI buildURIForBody(String endpoint) {\n      */\n     public static URI buildURIForHeader(String endpoint) {\n \n-        String tenantQualifiedRelativePath =\n-                String.format(TENANT_CONTEXT_PATH_COMPONENT, getTenantDomainFromContext()) + SERVER_API_PATH_COMPONENT;\n-        String url = IdentityUtil.getEndpointURIPath(tenantQualifiedRelativePath + endpoint, false, true);\n-\n-        URI loc = URI.create(url);\n-        if (!loc.isAbsolute()) {\n-            Message currentMessage = PhaseInterceptorChain.getCurrentMessage();\n-            if (currentMessage != null) {\n-                UriInfo ui = new UriInfoImpl(currentMessage.getExchange().getInMessage(), null);\n-                try {\n-                    return new URI(ui.getBaseUri().getScheme(), ui.getBaseUri().getAuthority(), url, null, null);\n-                } catch (URISyntaxException e) {\n-                    LOG.error(\"Server encountered an error while building the location URL with scheme: \" +\n-                            ui.getBaseUri().getScheme() + \", authority: \" + ui.getBaseUri().getAuthority() +\n-                            \", url: \" + url, e);\n+        String url;\n+        URI loc = null;\n+\n+        if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n+            try {\n+                // Creating the context path from the endpoint which needs to be added to build the absolute public url.\n+                String context = SERVER_API_PATH_COMPONENT + endpoint;\n+                url = ServiceURLBuilder.create().addPath(context).build().getAbsolutePublicURL();\n+                loc = URI.create(url);\n+            } catch (URLBuilderException e) {\n+                String errorDescription = \"Server encountered an error while building URLs in tenant qualified mode.\";\n+                LOG.error(errorDescription);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "064800d646e9676f3d3ba6d8ed4b5394f6c277af"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTAzODQ0OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDoxMzoyMVrOGQCReg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDoxMzoyMVrOGQCReg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2NzY0Mg==", "bodyText": "We don't need to log here. It will be handled by the layer which catches the APIError", "url": "https://github.com/wso2/identity-api-server/pull/162#discussion_r419467642", "createdAt": "2020-05-04T14:13:21Z", "author": {"login": "mefarazath"}, "path": "components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java", "diffHunk": "@@ -73,9 +81,22 @@ public static String getUsernameFromContext() {\n      */\n     public static URI buildURIForBody(String endpoint) {\n \n-        String tenantQualifiedRelativePath =\n-                String.format(TENANT_CONTEXT_PATH_COMPONENT, getTenantDomainFromContext()) + SERVER_API_PATH_COMPONENT;\n-        String url = IdentityUtil.getEndpointURIPath(tenantQualifiedRelativePath + endpoint, true, true);\n+        String url = \"\";\n+        if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n+            String context = SERVER_API_PATH_COMPONENT + endpoint;\n+            try {\n+                url = ServiceURLBuilder.create().addPath(context).build().getRelativePublicURL();\n+            } catch (URLBuilderException e) {\n+                String errorDescription = \"Server encountered an error while building URLs in tenant qualified mode.\";\n+                LOG.error(errorDescription);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "064800d646e9676f3d3ba6d8ed4b5394f6c277af"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTIxNDQxOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDo1MToyNVrOGQD-6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDo1MToyNVrOGQD-6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ5NTY1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            String errorDescription = \"Server encountered an error while building URLs in tenant qualified mode.\";\n          \n          \n            \n                            String errorDescription = \"Server encountered an error while building location URL.\";", "url": "https://github.com/wso2/identity-api-server/pull/162#discussion_r419495659", "createdAt": "2020-05-04T14:51:25Z", "author": {"login": "mefarazath"}, "path": "components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java", "diffHunk": "@@ -88,24 +109,63 @@ public static URI buildURIForBody(String endpoint) {\n      */\n     public static URI buildURIForHeader(String endpoint) {\n \n-        String tenantQualifiedRelativePath =\n-                String.format(TENANT_CONTEXT_PATH_COMPONENT, getTenantDomainFromContext()) + SERVER_API_PATH_COMPONENT;\n-        String url = IdentityUtil.getEndpointURIPath(tenantQualifiedRelativePath + endpoint, false, true);\n-\n-        URI loc = URI.create(url);\n-        if (!loc.isAbsolute()) {\n-            Message currentMessage = PhaseInterceptorChain.getCurrentMessage();\n-            if (currentMessage != null) {\n-                UriInfo ui = new UriInfoImpl(currentMessage.getExchange().getInMessage(), null);\n-                try {\n-                    return new URI(ui.getBaseUri().getScheme(), ui.getBaseUri().getAuthority(), url, null, null);\n-                } catch (URISyntaxException e) {\n-                    LOG.error(\"Server encountered an error while building the location URL with scheme: \" +\n-                            ui.getBaseUri().getScheme() + \", authority: \" + ui.getBaseUri().getAuthority() +\n-                            \", url: \" + url, e);\n+        String url;\n+        URI loc = null;\n+\n+        if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n+            try {\n+                // Creating the context path from the endpoint which needs to be added to build the absolute public url.\n+                String context = SERVER_API_PATH_COMPONENT + endpoint;\n+                url = ServiceURLBuilder.create().addPath(context).build().getAbsolutePublicURL();\n+                loc = URI.create(url);\n+            } catch (URLBuilderException e) {\n+                String errorDescription = \"Server encountered an error while building URLs in tenant qualified mode.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "064800d646e9676f3d3ba6d8ed4b5394f6c277af"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTIxODI4OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDo1MjoxM1rOGQEBTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDo1MjoxM1rOGQEBTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ5NjI2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            String errorDescription = \"Server encountered an error while building URLs in tenant qualified mode.\";\n          \n          \n            \n                            String errorDescription = \"Server encountered an error while building location URL.\";", "url": "https://github.com/wso2/identity-api-server/pull/162#discussion_r419496269", "createdAt": "2020-05-04T14:52:13Z", "author": {"login": "mefarazath"}, "path": "components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java", "diffHunk": "@@ -73,9 +81,22 @@ public static String getUsernameFromContext() {\n      */\n     public static URI buildURIForBody(String endpoint) {\n \n-        String tenantQualifiedRelativePath =\n-                String.format(TENANT_CONTEXT_PATH_COMPONENT, getTenantDomainFromContext()) + SERVER_API_PATH_COMPONENT;\n-        String url = IdentityUtil.getEndpointURIPath(tenantQualifiedRelativePath + endpoint, true, true);\n+        String url = \"\";\n+        if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n+            String context = SERVER_API_PATH_COMPONENT + endpoint;\n+            try {\n+                url = ServiceURLBuilder.create().addPath(context).build().getRelativePublicURL();\n+            } catch (URLBuilderException e) {\n+                String errorDescription = \"Server encountered an error while building URLs in tenant qualified mode.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "064800d646e9676f3d3ba6d8ed4b5394f6c277af"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODA1OTQxOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNTo1MTowMFrOGRE1xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNTo1MTowMFrOGRE1xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU1ODI3OA==", "bodyText": "Better to explain why we need this method.\nie. in tenant qualified mode ServiceURLBuilder appends the tenant domain as a path param automatically. But in not tenant qualified mode it doesn't. So we need to append the tenant domain manually in the path", "url": "https://github.com/wso2/identity-api-server/pull/162#discussion_r420558278", "createdAt": "2020-05-06T05:51:00Z", "author": {"login": "mefarazath"}, "path": "components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java", "diffHunk": "@@ -88,24 +97,56 @@ public static URI buildURIForBody(String endpoint) {\n      */\n     public static URI buildURIForHeader(String endpoint) {\n \n-        String tenantQualifiedRelativePath =\n-                String.format(TENANT_CONTEXT_PATH_COMPONENT, getTenantDomainFromContext()) + SERVER_API_PATH_COMPONENT;\n-        String url = IdentityUtil.getEndpointURIPath(tenantQualifiedRelativePath + endpoint, false, true);\n-\n-        URI loc = URI.create(url);\n-        if (!loc.isAbsolute()) {\n-            Message currentMessage = PhaseInterceptorChain.getCurrentMessage();\n-            if (currentMessage != null) {\n-                UriInfo ui = new UriInfoImpl(currentMessage.getExchange().getInMessage(), null);\n-                try {\n-                    return new URI(ui.getBaseUri().getScheme(), ui.getBaseUri().getAuthority(), url, null, null);\n-                } catch (URISyntaxException e) {\n-                    LOG.error(\"Server encountered an error while building the location URL with scheme: \" +\n-                            ui.getBaseUri().getScheme() + \", authority: \" + ui.getBaseUri().getAuthority() +\n-                            \", url: \" + url, e);\n-                }\n-            }\n+        URI loc;\n+        String context = getContext(endpoint);\n+\n+        try {\n+            String url = ServiceURLBuilder.create().addPath(context).build().getAbsolutePublicURL();\n+            loc = URI.create(url);\n+        } catch (URLBuilderException e) {\n+            String errorDescription = \"Server encountered an error while building URL for response header.\";\n+            throw buildInternalServerError(e, errorDescription);\n         }\n         return loc;\n     }\n+\n+    /**\n+     * This method builds the API context by checking whether the tenant qualified url is enabled or not.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "758d574751dadbb033f26e0a2d983a12a8c1f6cb"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODA2MDU0OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNTo1MTozNlrOGRE2aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNTo1MTozNlrOGRE2aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU1ODQ0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * This method is used to build the internal server error when the URL build is failed.\n          \n          \n            \n                 * Builds APIError to be thrown the URL building fails.", "url": "https://github.com/wso2/identity-api-server/pull/162#discussion_r420558443", "createdAt": "2020-05-06T05:51:36Z", "author": {"login": "mefarazath"}, "path": "components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java", "diffHunk": "@@ -88,24 +97,56 @@ public static URI buildURIForBody(String endpoint) {\n      */\n     public static URI buildURIForHeader(String endpoint) {\n \n-        String tenantQualifiedRelativePath =\n-                String.format(TENANT_CONTEXT_PATH_COMPONENT, getTenantDomainFromContext()) + SERVER_API_PATH_COMPONENT;\n-        String url = IdentityUtil.getEndpointURIPath(tenantQualifiedRelativePath + endpoint, false, true);\n-\n-        URI loc = URI.create(url);\n-        if (!loc.isAbsolute()) {\n-            Message currentMessage = PhaseInterceptorChain.getCurrentMessage();\n-            if (currentMessage != null) {\n-                UriInfo ui = new UriInfoImpl(currentMessage.getExchange().getInMessage(), null);\n-                try {\n-                    return new URI(ui.getBaseUri().getScheme(), ui.getBaseUri().getAuthority(), url, null, null);\n-                } catch (URISyntaxException e) {\n-                    LOG.error(\"Server encountered an error while building the location URL with scheme: \" +\n-                            ui.getBaseUri().getScheme() + \", authority: \" + ui.getBaseUri().getAuthority() +\n-                            \", url: \" + url, e);\n-                }\n-            }\n+        URI loc;\n+        String context = getContext(endpoint);\n+\n+        try {\n+            String url = ServiceURLBuilder.create().addPath(context).build().getAbsolutePublicURL();\n+            loc = URI.create(url);\n+        } catch (URLBuilderException e) {\n+            String errorDescription = \"Server encountered an error while building URL for response header.\";\n+            throw buildInternalServerError(e, errorDescription);\n         }\n         return loc;\n     }\n+\n+    /**\n+     * This method builds the API context by checking whether the tenant qualified url is enabled or not.\n+     *\n+     * @param endpoint Relative endpoint path.\n+     * @return Context of the API.\n+     */\n+    private static String getContext(String endpoint) {\n+\n+        String context;\n+        if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n+            context = SERVER_API_PATH_COMPONENT + endpoint;\n+        } else {\n+            context = String.format(TENANT_CONTEXT_PATH_COMPONENT, getTenantDomainFromContext()) +\n+                    SERVER_API_PATH_COMPONENT + endpoint;\n+        }\n+        return context;\n+    }\n+\n+    /**\n+     * This method is used to build the internal server error when the URL build is failed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "758d574751dadbb033f26e0a2d983a12a8c1f6cb"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODM5NzU0OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODowMzoxNVrOGRID1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODowMzoxNVrOGRID1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxMTAyOQ==", "bodyText": "Shall we mention this will return a relative URL?", "url": "https://github.com/wso2/identity-api-server/pull/162#discussion_r420611029", "createdAt": "2020-05-06T08:03:15Z", "author": {"login": "ashensw"}, "path": "components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java", "diffHunk": "@@ -73,9 +76,15 @@ public static String getUsernameFromContext() {\n      */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0ed2158de70b890ff5474cf59caab37d4f6d888"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzAzNDA0OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMTo1ODoyOVrOG-Lkbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxNzoyNjowMlrOHU7ybA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg1NDQ0Ng==", "bodyText": "Shall we fix the formatting errors here?", "url": "https://github.com/wso2/identity-api-server/pull/162#discussion_r467854446", "createdAt": "2020-08-10T11:58:29Z", "author": {"login": "somindatommy"}, "path": "components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java", "diffHunk": "@@ -88,24 +97,58 @@ public static URI buildURIForBody(String endpoint) {\n      */\n     public static URI buildURIForHeader(String endpoint) {\n \n-        String tenantQualifiedRelativePath =\n-                String.format(TENANT_CONTEXT_PATH_COMPONENT, getTenantDomainFromContext()) + SERVER_API_PATH_COMPONENT;\n-        String url = IdentityUtil.getEndpointURIPath(tenantQualifiedRelativePath + endpoint, false, true);\n-\n-        URI loc = URI.create(url);\n-        if (!loc.isAbsolute()) {\n-            Message currentMessage = PhaseInterceptorChain.getCurrentMessage();\n-            if (currentMessage != null) {\n-                UriInfo ui = new UriInfoImpl(currentMessage.getExchange().getInMessage(), null);\n-                try {\n-                    return new URI(ui.getBaseUri().getScheme(), ui.getBaseUri().getAuthority(), url, null, null);\n-                } catch (URISyntaxException e) {\n-                    LOG.error(\"Server encountered an error while building the location URL with scheme: \" +\n-                            ui.getBaseUri().getScheme() + \", authority: \" + ui.getBaseUri().getAuthority() +\n-                            \", url: \" + url, e);\n-                }\n-            }\n+        URI loc;\n+        String context = getContext(endpoint);\n+\n+        try {\n+            String url = ServiceURLBuilder.create().addPath(context).build().getAbsolutePublicURL();\n+            loc = URI.create(url);\n+        } catch (URLBuilderException e) {\n+            String errorDescription = \"Server encountered an error while building URL for response header.\";\n+            throw buildInternalServerError(e, errorDescription);\n         }\n         return loc;\n     }\n+\n+    /**\n+     * Builds the API context on whether the tenant qualified url is enabled or not. In tenant qualified mode the\n+     * ServiceURLBuilder appends the tenant domain to the URI as a path param automatically. But\n+     * in non tenant qualified mode we need to append the tenant domain to the path manually.\n+     *\n+     * @param endpoint Relative endpoint path.\n+     * @return Context of the API.\n+     */\n+    private static String getContext(String endpoint) {\n+\n+        String context;\n+        if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n+            context = SERVER_API_PATH_COMPONENT + endpoint;\n+        } else {\n+            context = String.format(TENANT_CONTEXT_PATH_COMPONENT, getTenantDomainFromContext()) +\n+                    SERVER_API_PATH_COMPONENT + endpoint;\n+        }\n+        return context;\n+    }\n+\n+    /**\n+     * Builds APIError to be thrown if the URL building fails.\n+     *\n+     * @param e Exception occurred while building the URL.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "560b3293af7b25c8dc5f1aa6e0b24c8473dc059a"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcxMzEzMg==", "bodyText": "Can you please mention the exact formatting error here?", "url": "https://github.com/wso2/identity-api-server/pull/162#discussion_r491713132", "createdAt": "2020-09-20T17:26:02Z", "author": {"login": "ShanChathusanda93"}, "path": "components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java", "diffHunk": "@@ -88,24 +97,58 @@ public static URI buildURIForBody(String endpoint) {\n      */\n     public static URI buildURIForHeader(String endpoint) {\n \n-        String tenantQualifiedRelativePath =\n-                String.format(TENANT_CONTEXT_PATH_COMPONENT, getTenantDomainFromContext()) + SERVER_API_PATH_COMPONENT;\n-        String url = IdentityUtil.getEndpointURIPath(tenantQualifiedRelativePath + endpoint, false, true);\n-\n-        URI loc = URI.create(url);\n-        if (!loc.isAbsolute()) {\n-            Message currentMessage = PhaseInterceptorChain.getCurrentMessage();\n-            if (currentMessage != null) {\n-                UriInfo ui = new UriInfoImpl(currentMessage.getExchange().getInMessage(), null);\n-                try {\n-                    return new URI(ui.getBaseUri().getScheme(), ui.getBaseUri().getAuthority(), url, null, null);\n-                } catch (URISyntaxException e) {\n-                    LOG.error(\"Server encountered an error while building the location URL with scheme: \" +\n-                            ui.getBaseUri().getScheme() + \", authority: \" + ui.getBaseUri().getAuthority() +\n-                            \", url: \" + url, e);\n-                }\n-            }\n+        URI loc;\n+        String context = getContext(endpoint);\n+\n+        try {\n+            String url = ServiceURLBuilder.create().addPath(context).build().getAbsolutePublicURL();\n+            loc = URI.create(url);\n+        } catch (URLBuilderException e) {\n+            String errorDescription = \"Server encountered an error while building URL for response header.\";\n+            throw buildInternalServerError(e, errorDescription);\n         }\n         return loc;\n     }\n+\n+    /**\n+     * Builds the API context on whether the tenant qualified url is enabled or not. In tenant qualified mode the\n+     * ServiceURLBuilder appends the tenant domain to the URI as a path param automatically. But\n+     * in non tenant qualified mode we need to append the tenant domain to the path manually.\n+     *\n+     * @param endpoint Relative endpoint path.\n+     * @return Context of the API.\n+     */\n+    private static String getContext(String endpoint) {\n+\n+        String context;\n+        if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n+            context = SERVER_API_PATH_COMPONENT + endpoint;\n+        } else {\n+            context = String.format(TENANT_CONTEXT_PATH_COMPONENT, getTenantDomainFromContext()) +\n+                    SERVER_API_PATH_COMPONENT + endpoint;\n+        }\n+        return context;\n+    }\n+\n+    /**\n+     * Builds APIError to be thrown if the URL building fails.\n+     *\n+     * @param e Exception occurred while building the URL.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg1NDQ0Ng=="}, "originalCommit": {"oid": "560b3293af7b25c8dc5f1aa6e0b24c8473dc059a"}, "originalPosition": 110}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1481, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}