{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyMTI0MTYz", "number": 122, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNDoyMjoyNlrODqOydg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNjozNjowNlrODrFH_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjA5MDc4OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/java/org/wso2/carbon/identity/api/server/userstore/v1/core/ServerUserStoreService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNDoyMjoyNlrOF52ieg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNDo1MjoyNlrOF525Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwNjcxNA==", "bodyText": "why were the pagination + sorting params removed?", "url": "https://github.com/wso2/identity-api-server/pull/122#discussion_r396206714", "createdAt": "2020-03-23T04:22:26Z", "author": {"login": "emswbandara"}, "path": "components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/java/org/wso2/carbon/identity/api/server/userstore/v1/core/ServerUserStoreService.java", "diffHunk": "@@ -238,35 +238,24 @@ public UserStoreConfigurationsRes getUserStoreByDomainId(String domainId) {\n     }\n \n     /**\n-     * Retrieve the meta of configured user store type.\n+     * Retrieve the meta of user store type.\n      *\n      * @param typeId the user store type id.\n-     * @param limit  items per page.\n-     * @param offset to specify the offset param.\n-     * @param filter to specify the filtering capabilities.\n-     * @param sort   to specify the sorting order.\n      * @return MetaUserStoreType.\n      */\n \n-    public List<MetaUserStoreType> getUserStoreManagerProperties(String typeId, Integer limit, Integer offset,\n-                                                                 String filter, String sort) {\n-\n-        handleNotImplementedBehaviour(limit, offset, filter, sort);\n+    public MetaUserStoreType getUserStoreManagerProperties(String typeId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44fc7abacee19ccf15ae00247454e48e800997fb"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIxMjQ5OQ==", "bodyText": "Previously pagination and sorting have been added because it retrieves an array containing all configured userstores which are in the defined userstore type. Thus, the same set of properties which can be configured for that userstore type is repeated.\nex: If we use \"typeId\": \"VW5pcXVlSURKREJDVXNlclN0b3JlTWFuYWdlcg\" which maps with\n\"typeName\": \"UniqueIDJDBCUserStoreManager\", and there are 20 userstores configured in that type, the response contains all of these userstores properties. We can use pagination to take 10 results per page. Similarly, sorting can be used to sort the response according to user store name, etc. However, this is not supported yet.\nSince now we provide only the set of properties for the particular user store type, pagination and sorting are not required.", "url": "https://github.com/wso2/identity-api-server/pull/122#discussion_r396212499", "createdAt": "2020-03-23T04:52:26Z", "author": {"login": "AnuradhaSK"}, "path": "components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/java/org/wso2/carbon/identity/api/server/userstore/v1/core/ServerUserStoreService.java", "diffHunk": "@@ -238,35 +238,24 @@ public UserStoreConfigurationsRes getUserStoreByDomainId(String domainId) {\n     }\n \n     /**\n-     * Retrieve the meta of configured user store type.\n+     * Retrieve the meta of user store type.\n      *\n      * @param typeId the user store type id.\n-     * @param limit  items per page.\n-     * @param offset to specify the offset param.\n-     * @param filter to specify the filtering capabilities.\n-     * @param sort   to specify the sorting order.\n      * @return MetaUserStoreType.\n      */\n \n-    public List<MetaUserStoreType> getUserStoreManagerProperties(String typeId, Integer limit, Integer offset,\n-                                                                 String filter, String sort) {\n-\n-        handleNotImplementedBehaviour(limit, offset, filter, sort);\n+    public MetaUserStoreType getUserStoreManagerProperties(String typeId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwNjcxNA=="}, "originalCommit": {"oid": "44fc7abacee19ccf15ae00247454e48e800997fb"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjA5MzYwOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/java/org/wso2/carbon/identity/api/server/userstore/v1/core/ServerUserStoreService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNDoyNDo0NFrOF52kNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjozMTowOFrOF6NtOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwNzE1OQ==", "bodyText": "can classNames become null here? if so we need to add a null check.", "url": "https://github.com/wso2/identity-api-server/pull/122#discussion_r396207159", "createdAt": "2020-03-23T04:24:44Z", "author": {"login": "emswbandara"}, "path": "components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/java/org/wso2/carbon/identity/api/server/userstore/v1/core/ServerUserStoreService.java", "diffHunk": "@@ -238,35 +238,24 @@ public UserStoreConfigurationsRes getUserStoreByDomainId(String domainId) {\n     }\n \n     /**\n-     * Retrieve the meta of configured user store type.\n+     * Retrieve the meta of user store type.\n      *\n      * @param typeId the user store type id.\n-     * @param limit  items per page.\n-     * @param offset to specify the offset param.\n-     * @param filter to specify the filtering capabilities.\n-     * @param sort   to specify the sorting order.\n      * @return MetaUserStoreType.\n      */\n \n-    public List<MetaUserStoreType> getUserStoreManagerProperties(String typeId, Integer limit, Integer offset,\n-                                                                 String filter, String sort) {\n-\n-        handleNotImplementedBehaviour(limit, offset, filter, sort);\n+    public MetaUserStoreType getUserStoreManagerProperties(String typeId) {\n \n         UserStoreConfigService userStoreConfigService = UserStoreConfigServiceHolder.getUserStoreConfigService();\n+        Set<String> classNames;\n         try {\n-            UserStoreDTO[] userStoreDTOS = userStoreConfigService.getUserStores();\n-            if (userStoreDTOS.length == 0) {\n-                throw handleException(Response.Status.NOT_FOUND, UserStoreConstants.ErrorMessage.ERROR_CODE_NOT_FOUND);\n-            }\n-            List<UserStoreDTO> userStoresByTypeNameList = new ArrayList<>();\n-            for (UserStoreDTO userStoreDTO : userStoreDTOS) {\n-                if (Objects.equals(getUserStoreType(base64URLDecodeId(typeId)), userStoreDTO.getClassName())) {\n-                    userStoresByTypeNameList.add(userStoreDTO);\n-                }\n+            classNames = userStoreConfigService.getAvailableUserStoreClasses();\n+            if (classNames.contains(getUserStoreType(base64URLDecodeId(typeId)))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44fc7abacee19ccf15ae00247454e48e800997fb"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU4NjI5OQ==", "bodyText": "addressed in f145414", "url": "https://github.com/wso2/identity-api-server/pull/122#discussion_r396586299", "createdAt": "2020-03-23T16:31:08Z", "author": {"login": "AnuradhaSK"}, "path": "components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/java/org/wso2/carbon/identity/api/server/userstore/v1/core/ServerUserStoreService.java", "diffHunk": "@@ -238,35 +238,24 @@ public UserStoreConfigurationsRes getUserStoreByDomainId(String domainId) {\n     }\n \n     /**\n-     * Retrieve the meta of configured user store type.\n+     * Retrieve the meta of user store type.\n      *\n      * @param typeId the user store type id.\n-     * @param limit  items per page.\n-     * @param offset to specify the offset param.\n-     * @param filter to specify the filtering capabilities.\n-     * @param sort   to specify the sorting order.\n      * @return MetaUserStoreType.\n      */\n \n-    public List<MetaUserStoreType> getUserStoreManagerProperties(String typeId, Integer limit, Integer offset,\n-                                                                 String filter, String sort) {\n-\n-        handleNotImplementedBehaviour(limit, offset, filter, sort);\n+    public MetaUserStoreType getUserStoreManagerProperties(String typeId) {\n \n         UserStoreConfigService userStoreConfigService = UserStoreConfigServiceHolder.getUserStoreConfigService();\n+        Set<String> classNames;\n         try {\n-            UserStoreDTO[] userStoreDTOS = userStoreConfigService.getUserStores();\n-            if (userStoreDTOS.length == 0) {\n-                throw handleException(Response.Status.NOT_FOUND, UserStoreConstants.ErrorMessage.ERROR_CODE_NOT_FOUND);\n-            }\n-            List<UserStoreDTO> userStoresByTypeNameList = new ArrayList<>();\n-            for (UserStoreDTO userStoreDTO : userStoreDTOS) {\n-                if (Objects.equals(getUserStoreType(base64URLDecodeId(typeId)), userStoreDTO.getClassName())) {\n-                    userStoresByTypeNameList.add(userStoreDTO);\n-                }\n+            classNames = userStoreConfigService.getAvailableUserStoreClasses();\n+            if (classNames.contains(getUserStoreType(base64URLDecodeId(typeId)))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwNzE1OQ=="}, "originalCommit": {"oid": "44fc7abacee19ccf15ae00247454e48e800997fb"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDk5MDQ5OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/java/org/wso2/carbon/identity/api/server/userstore/v1/core/ServerUserStoreService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNjozNDoyM1rOF7Np3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNzo1OToyMlrOF7PgQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzNDAxNQ==", "bodyText": "shall we use CollectionUtils.isNotEmpty(classNames) here?", "url": "https://github.com/wso2/identity-api-server/pull/122#discussion_r397634015", "createdAt": "2020-03-25T06:34:23Z", "author": {"login": "emswbandara"}, "path": "components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/java/org/wso2/carbon/identity/api/server/userstore/v1/core/ServerUserStoreService.java", "diffHunk": "@@ -238,35 +238,24 @@ public UserStoreConfigurationsRes getUserStoreByDomainId(String domainId) {\n     }\n \n     /**\n-     * Retrieve the meta of configured user store type.\n+     * Retrieve the meta of user store type.\n      *\n      * @param typeId the user store type id.\n-     * @param limit  items per page.\n-     * @param offset to specify the offset param.\n-     * @param filter to specify the filtering capabilities.\n-     * @param sort   to specify the sorting order.\n      * @return MetaUserStoreType.\n      */\n \n-    public List<MetaUserStoreType> getUserStoreManagerProperties(String typeId, Integer limit, Integer offset,\n-                                                                 String filter, String sort) {\n-\n-        handleNotImplementedBehaviour(limit, offset, filter, sort);\n+    public MetaUserStoreType getUserStoreManagerProperties(String typeId) {\n \n         UserStoreConfigService userStoreConfigService = UserStoreConfigServiceHolder.getUserStoreConfigService();\n+        Set<String> classNames;\n         try {\n-            UserStoreDTO[] userStoreDTOS = userStoreConfigService.getUserStores();\n-            if (userStoreDTOS.length == 0) {\n-                throw handleException(Response.Status.NOT_FOUND, UserStoreConstants.ErrorMessage.ERROR_CODE_NOT_FOUND);\n-            }\n-            List<UserStoreDTO> userStoresByTypeNameList = new ArrayList<>();\n-            for (UserStoreDTO userStoreDTO : userStoreDTOS) {\n-                if (Objects.equals(getUserStoreType(base64URLDecodeId(typeId)), userStoreDTO.getClassName())) {\n-                    userStoresByTypeNameList.add(userStoreDTO);\n-                }\n+            classNames = userStoreConfigService.getAvailableUserStoreClasses();\n+            if (!classNames.isEmpty() && classNames.contains(getUserStoreType(base64URLDecodeId(typeId)))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1858735d552af847784bd640d2346186216cbb6f"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY2NDMyMA==", "bodyText": "addressed in 2231481", "url": "https://github.com/wso2/identity-api-server/pull/122#discussion_r397664320", "createdAt": "2020-03-25T07:59:22Z", "author": {"login": "AnuradhaSK"}, "path": "components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/java/org/wso2/carbon/identity/api/server/userstore/v1/core/ServerUserStoreService.java", "diffHunk": "@@ -238,35 +238,24 @@ public UserStoreConfigurationsRes getUserStoreByDomainId(String domainId) {\n     }\n \n     /**\n-     * Retrieve the meta of configured user store type.\n+     * Retrieve the meta of user store type.\n      *\n      * @param typeId the user store type id.\n-     * @param limit  items per page.\n-     * @param offset to specify the offset param.\n-     * @param filter to specify the filtering capabilities.\n-     * @param sort   to specify the sorting order.\n      * @return MetaUserStoreType.\n      */\n \n-    public List<MetaUserStoreType> getUserStoreManagerProperties(String typeId, Integer limit, Integer offset,\n-                                                                 String filter, String sort) {\n-\n-        handleNotImplementedBehaviour(limit, offset, filter, sort);\n+    public MetaUserStoreType getUserStoreManagerProperties(String typeId) {\n \n         UserStoreConfigService userStoreConfigService = UserStoreConfigServiceHolder.getUserStoreConfigService();\n+        Set<String> classNames;\n         try {\n-            UserStoreDTO[] userStoreDTOS = userStoreConfigService.getUserStores();\n-            if (userStoreDTOS.length == 0) {\n-                throw handleException(Response.Status.NOT_FOUND, UserStoreConstants.ErrorMessage.ERROR_CODE_NOT_FOUND);\n-            }\n-            List<UserStoreDTO> userStoresByTypeNameList = new ArrayList<>();\n-            for (UserStoreDTO userStoreDTO : userStoreDTOS) {\n-                if (Objects.equals(getUserStoreType(base64URLDecodeId(typeId)), userStoreDTO.getClassName())) {\n-                    userStoresByTypeNameList.add(userStoreDTO);\n-                }\n+            classNames = userStoreConfigService.getAvailableUserStoreClasses();\n+            if (!classNames.isEmpty() && classNames.contains(getUserStoreType(base64URLDecodeId(typeId)))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzNDAxNQ=="}, "originalCommit": {"oid": "1858735d552af847784bd640d2346186216cbb6f"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDk5MTc5OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/java/org/wso2/carbon/identity/api/server/userstore/v1/core/ServerUserStoreService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNjozNTowOFrOF7Nqqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNzo1OToxM1rOF7PgDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzNDIxOA==", "bodyText": "check whether properties is null before calling its methods", "url": "https://github.com/wso2/identity-api-server/pull/122#discussion_r397634218", "createdAt": "2020-03-25T06:35:08Z", "author": {"login": "emswbandara"}, "path": "components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/java/org/wso2/carbon/identity/api/server/userstore/v1/core/ServerUserStoreService.java", "diffHunk": "@@ -483,32 +472,26 @@ private void addUserstoreProperties(UserStoreDTO userStoreDTO, UserStoreListResp\n     }\n \n     /**\n-     * Construct the configured user store type's meta.\n+     * Construct the user store type's meta.\n      *\n-     * @param userStoreDTOS the list of {@link UserStoreDTO}.\n      * @param typeId        the type id of the user store.\n      * @return MetaUserStoreType.\n      */\n-    private List<MetaUserStoreType> buildUserStoreMetaResponse(List<UserStoreDTO> userStoreDTOS, String typeId) {\n-\n-        List<MetaUserStoreType> metaUserStoreTypes = new ArrayList<>();\n-        for (UserStoreDTO userStoreDTO : userStoreDTOS) {\n-            Properties properties = UserStoreManagerRegistry.getUserStoreProperties(userStoreDTO.getClassName());\n-            MetaUserStoreType metaUserStore = new MetaUserStoreType();\n-            UserStorePropertiesRes userStorePropertiesRes = new UserStorePropertiesRes();\n-            userStorePropertiesRes.mandatory(buildPropertiesRes(properties.getMandatoryProperties()));\n-            userStorePropertiesRes.optional(buildPropertiesRes(properties.getOptionalProperties()));\n-            userStorePropertiesRes.advanced(buildPropertiesRes(properties.getAdvancedProperties()));\n-            metaUserStore.setProperties(userStorePropertiesRes);\n-            metaUserStore.setTypeId(typeId);\n-            metaUserStore.setName(userStoreDTO.getDomainId());\n-            metaUserStore.setDescription(userStoreDTO.getDescription());\n-            metaUserStore.setTypeName(base64URLDecodeId(typeId));\n-            metaUserStore.setClassName(getUserStoreType(base64URLDecodeId(typeId)));\n-            metaUserStoreTypes.add(metaUserStore);\n-\n-        }\n-        return metaUserStoreTypes;\n+    private MetaUserStoreType buildUserStoreMetaResponse(String typeId) {\n+\n+        Properties properties = UserStoreManagerRegistry.getUserStoreProperties(\n+                getUserStoreType(base64URLDecodeId(typeId)));\n+        MetaUserStoreType metaUserStore = new MetaUserStoreType();\n+        UserStorePropertiesRes userStorePropertiesRes = new UserStorePropertiesRes();\n+        userStorePropertiesRes.mandatory(buildPropertiesRes(properties.getMandatoryProperties()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1858735d552af847784bd640d2346186216cbb6f"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY2NDI2OQ==", "bodyText": "addressed in 2231481", "url": "https://github.com/wso2/identity-api-server/pull/122#discussion_r397664269", "createdAt": "2020-03-25T07:59:13Z", "author": {"login": "AnuradhaSK"}, "path": "components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/java/org/wso2/carbon/identity/api/server/userstore/v1/core/ServerUserStoreService.java", "diffHunk": "@@ -483,32 +472,26 @@ private void addUserstoreProperties(UserStoreDTO userStoreDTO, UserStoreListResp\n     }\n \n     /**\n-     * Construct the configured user store type's meta.\n+     * Construct the user store type's meta.\n      *\n-     * @param userStoreDTOS the list of {@link UserStoreDTO}.\n      * @param typeId        the type id of the user store.\n      * @return MetaUserStoreType.\n      */\n-    private List<MetaUserStoreType> buildUserStoreMetaResponse(List<UserStoreDTO> userStoreDTOS, String typeId) {\n-\n-        List<MetaUserStoreType> metaUserStoreTypes = new ArrayList<>();\n-        for (UserStoreDTO userStoreDTO : userStoreDTOS) {\n-            Properties properties = UserStoreManagerRegistry.getUserStoreProperties(userStoreDTO.getClassName());\n-            MetaUserStoreType metaUserStore = new MetaUserStoreType();\n-            UserStorePropertiesRes userStorePropertiesRes = new UserStorePropertiesRes();\n-            userStorePropertiesRes.mandatory(buildPropertiesRes(properties.getMandatoryProperties()));\n-            userStorePropertiesRes.optional(buildPropertiesRes(properties.getOptionalProperties()));\n-            userStorePropertiesRes.advanced(buildPropertiesRes(properties.getAdvancedProperties()));\n-            metaUserStore.setProperties(userStorePropertiesRes);\n-            metaUserStore.setTypeId(typeId);\n-            metaUserStore.setName(userStoreDTO.getDomainId());\n-            metaUserStore.setDescription(userStoreDTO.getDescription());\n-            metaUserStore.setTypeName(base64URLDecodeId(typeId));\n-            metaUserStore.setClassName(getUserStoreType(base64URLDecodeId(typeId)));\n-            metaUserStoreTypes.add(metaUserStore);\n-\n-        }\n-        return metaUserStoreTypes;\n+    private MetaUserStoreType buildUserStoreMetaResponse(String typeId) {\n+\n+        Properties properties = UserStoreManagerRegistry.getUserStoreProperties(\n+                getUserStoreType(base64URLDecodeId(typeId)));\n+        MetaUserStoreType metaUserStore = new MetaUserStoreType();\n+        UserStorePropertiesRes userStorePropertiesRes = new UserStorePropertiesRes();\n+        userStorePropertiesRes.mandatory(buildPropertiesRes(properties.getMandatoryProperties()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzNDIxOA=="}, "originalCommit": {"oid": "1858735d552af847784bd640d2346186216cbb6f"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDk5MzI2OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/java/org/wso2/carbon/identity/api/server/userstore/v1/core/ServerUserStoreService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNjozNjowNlrOF7Nrmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNzo1OTowM1rOF7PfpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzNDQ1OA==", "bodyText": "shall we call base64URLDecodeId(typeId) once , assign it to a variable and re-use line line 491 and 492", "url": "https://github.com/wso2/identity-api-server/pull/122#discussion_r397634458", "createdAt": "2020-03-25T06:36:06Z", "author": {"login": "emswbandara"}, "path": "components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/java/org/wso2/carbon/identity/api/server/userstore/v1/core/ServerUserStoreService.java", "diffHunk": "@@ -483,32 +472,26 @@ private void addUserstoreProperties(UserStoreDTO userStoreDTO, UserStoreListResp\n     }\n \n     /**\n-     * Construct the configured user store type's meta.\n+     * Construct the user store type's meta.\n      *\n-     * @param userStoreDTOS the list of {@link UserStoreDTO}.\n      * @param typeId        the type id of the user store.\n      * @return MetaUserStoreType.\n      */\n-    private List<MetaUserStoreType> buildUserStoreMetaResponse(List<UserStoreDTO> userStoreDTOS, String typeId) {\n-\n-        List<MetaUserStoreType> metaUserStoreTypes = new ArrayList<>();\n-        for (UserStoreDTO userStoreDTO : userStoreDTOS) {\n-            Properties properties = UserStoreManagerRegistry.getUserStoreProperties(userStoreDTO.getClassName());\n-            MetaUserStoreType metaUserStore = new MetaUserStoreType();\n-            UserStorePropertiesRes userStorePropertiesRes = new UserStorePropertiesRes();\n-            userStorePropertiesRes.mandatory(buildPropertiesRes(properties.getMandatoryProperties()));\n-            userStorePropertiesRes.optional(buildPropertiesRes(properties.getOptionalProperties()));\n-            userStorePropertiesRes.advanced(buildPropertiesRes(properties.getAdvancedProperties()));\n-            metaUserStore.setProperties(userStorePropertiesRes);\n-            metaUserStore.setTypeId(typeId);\n-            metaUserStore.setName(userStoreDTO.getDomainId());\n-            metaUserStore.setDescription(userStoreDTO.getDescription());\n-            metaUserStore.setTypeName(base64URLDecodeId(typeId));\n-            metaUserStore.setClassName(getUserStoreType(base64URLDecodeId(typeId)));\n-            metaUserStoreTypes.add(metaUserStore);\n-\n-        }\n-        return metaUserStoreTypes;\n+    private MetaUserStoreType buildUserStoreMetaResponse(String typeId) {\n+\n+        Properties properties = UserStoreManagerRegistry.getUserStoreProperties(\n+                getUserStoreType(base64URLDecodeId(typeId)));\n+        MetaUserStoreType metaUserStore = new MetaUserStoreType();\n+        UserStorePropertiesRes userStorePropertiesRes = new UserStorePropertiesRes();\n+        userStorePropertiesRes.mandatory(buildPropertiesRes(properties.getMandatoryProperties()));\n+        userStorePropertiesRes.optional(buildPropertiesRes(properties.getOptionalProperties()));\n+        userStorePropertiesRes.advanced(buildPropertiesRes(properties.getAdvancedProperties()));\n+        metaUserStore.setProperties(userStorePropertiesRes);\n+        metaUserStore.setTypeId(typeId);\n+        metaUserStore.setTypeName(base64URLDecodeId(typeId));\n+        metaUserStore.setClassName(getUserStoreType(base64URLDecodeId(typeId)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1858735d552af847784bd640d2346186216cbb6f"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzNDY3Nw==", "bodyText": "we can assign the variable in the beginning of the method and re-use in line 483 as well", "url": "https://github.com/wso2/identity-api-server/pull/122#discussion_r397634677", "createdAt": "2020-03-25T06:36:44Z", "author": {"login": "emswbandara"}, "path": "components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/java/org/wso2/carbon/identity/api/server/userstore/v1/core/ServerUserStoreService.java", "diffHunk": "@@ -483,32 +472,26 @@ private void addUserstoreProperties(UserStoreDTO userStoreDTO, UserStoreListResp\n     }\n \n     /**\n-     * Construct the configured user store type's meta.\n+     * Construct the user store type's meta.\n      *\n-     * @param userStoreDTOS the list of {@link UserStoreDTO}.\n      * @param typeId        the type id of the user store.\n      * @return MetaUserStoreType.\n      */\n-    private List<MetaUserStoreType> buildUserStoreMetaResponse(List<UserStoreDTO> userStoreDTOS, String typeId) {\n-\n-        List<MetaUserStoreType> metaUserStoreTypes = new ArrayList<>();\n-        for (UserStoreDTO userStoreDTO : userStoreDTOS) {\n-            Properties properties = UserStoreManagerRegistry.getUserStoreProperties(userStoreDTO.getClassName());\n-            MetaUserStoreType metaUserStore = new MetaUserStoreType();\n-            UserStorePropertiesRes userStorePropertiesRes = new UserStorePropertiesRes();\n-            userStorePropertiesRes.mandatory(buildPropertiesRes(properties.getMandatoryProperties()));\n-            userStorePropertiesRes.optional(buildPropertiesRes(properties.getOptionalProperties()));\n-            userStorePropertiesRes.advanced(buildPropertiesRes(properties.getAdvancedProperties()));\n-            metaUserStore.setProperties(userStorePropertiesRes);\n-            metaUserStore.setTypeId(typeId);\n-            metaUserStore.setName(userStoreDTO.getDomainId());\n-            metaUserStore.setDescription(userStoreDTO.getDescription());\n-            metaUserStore.setTypeName(base64URLDecodeId(typeId));\n-            metaUserStore.setClassName(getUserStoreType(base64URLDecodeId(typeId)));\n-            metaUserStoreTypes.add(metaUserStore);\n-\n-        }\n-        return metaUserStoreTypes;\n+    private MetaUserStoreType buildUserStoreMetaResponse(String typeId) {\n+\n+        Properties properties = UserStoreManagerRegistry.getUserStoreProperties(\n+                getUserStoreType(base64URLDecodeId(typeId)));\n+        MetaUserStoreType metaUserStore = new MetaUserStoreType();\n+        UserStorePropertiesRes userStorePropertiesRes = new UserStorePropertiesRes();\n+        userStorePropertiesRes.mandatory(buildPropertiesRes(properties.getMandatoryProperties()));\n+        userStorePropertiesRes.optional(buildPropertiesRes(properties.getOptionalProperties()));\n+        userStorePropertiesRes.advanced(buildPropertiesRes(properties.getAdvancedProperties()));\n+        metaUserStore.setProperties(userStorePropertiesRes);\n+        metaUserStore.setTypeId(typeId);\n+        metaUserStore.setTypeName(base64URLDecodeId(typeId));\n+        metaUserStore.setClassName(getUserStoreType(base64URLDecodeId(typeId)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzNDQ1OA=="}, "originalCommit": {"oid": "1858735d552af847784bd640d2346186216cbb6f"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY2NDE2NA==", "bodyText": "addressed in 2231481", "url": "https://github.com/wso2/identity-api-server/pull/122#discussion_r397664164", "createdAt": "2020-03-25T07:59:03Z", "author": {"login": "AnuradhaSK"}, "path": "components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/java/org/wso2/carbon/identity/api/server/userstore/v1/core/ServerUserStoreService.java", "diffHunk": "@@ -483,32 +472,26 @@ private void addUserstoreProperties(UserStoreDTO userStoreDTO, UserStoreListResp\n     }\n \n     /**\n-     * Construct the configured user store type's meta.\n+     * Construct the user store type's meta.\n      *\n-     * @param userStoreDTOS the list of {@link UserStoreDTO}.\n      * @param typeId        the type id of the user store.\n      * @return MetaUserStoreType.\n      */\n-    private List<MetaUserStoreType> buildUserStoreMetaResponse(List<UserStoreDTO> userStoreDTOS, String typeId) {\n-\n-        List<MetaUserStoreType> metaUserStoreTypes = new ArrayList<>();\n-        for (UserStoreDTO userStoreDTO : userStoreDTOS) {\n-            Properties properties = UserStoreManagerRegistry.getUserStoreProperties(userStoreDTO.getClassName());\n-            MetaUserStoreType metaUserStore = new MetaUserStoreType();\n-            UserStorePropertiesRes userStorePropertiesRes = new UserStorePropertiesRes();\n-            userStorePropertiesRes.mandatory(buildPropertiesRes(properties.getMandatoryProperties()));\n-            userStorePropertiesRes.optional(buildPropertiesRes(properties.getOptionalProperties()));\n-            userStorePropertiesRes.advanced(buildPropertiesRes(properties.getAdvancedProperties()));\n-            metaUserStore.setProperties(userStorePropertiesRes);\n-            metaUserStore.setTypeId(typeId);\n-            metaUserStore.setName(userStoreDTO.getDomainId());\n-            metaUserStore.setDescription(userStoreDTO.getDescription());\n-            metaUserStore.setTypeName(base64URLDecodeId(typeId));\n-            metaUserStore.setClassName(getUserStoreType(base64URLDecodeId(typeId)));\n-            metaUserStoreTypes.add(metaUserStore);\n-\n-        }\n-        return metaUserStoreTypes;\n+    private MetaUserStoreType buildUserStoreMetaResponse(String typeId) {\n+\n+        Properties properties = UserStoreManagerRegistry.getUserStoreProperties(\n+                getUserStoreType(base64URLDecodeId(typeId)));\n+        MetaUserStoreType metaUserStore = new MetaUserStoreType();\n+        UserStorePropertiesRes userStorePropertiesRes = new UserStorePropertiesRes();\n+        userStorePropertiesRes.mandatory(buildPropertiesRes(properties.getMandatoryProperties()));\n+        userStorePropertiesRes.optional(buildPropertiesRes(properties.getOptionalProperties()));\n+        userStorePropertiesRes.advanced(buildPropertiesRes(properties.getAdvancedProperties()));\n+        metaUserStore.setProperties(userStorePropertiesRes);\n+        metaUserStore.setTypeId(typeId);\n+        metaUserStore.setTypeName(base64URLDecodeId(typeId));\n+        metaUserStore.setClassName(getUserStoreType(base64URLDecodeId(typeId)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzNDQ1OA=="}, "originalCommit": {"oid": "1858735d552af847784bd640d2346186216cbb6f"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1533, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}