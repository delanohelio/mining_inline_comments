{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2MjE5MjYw", "number": 151, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNDo0NDoyMVrOD0CkDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNToxMTo0OFrOD0TIgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODk0NTQxOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.email.template/org.wso2.carbon.identity.api.server.email.template.common/src/main/java/org/wso2/carbon/identity/api/server/email/template/common/Constants.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNDo0NDoyMVrOGIyO0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNDo0NDoyMVrOGIyO0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg2NDc4Ng==", "bodyText": "we need to support other possible attributes too..", "url": "https://github.com/wso2/identity-api-server/pull/151#discussion_r411864786", "createdAt": "2020-04-21T04:44:21Z", "author": {"login": "emswbandara"}, "path": "components/org.wso2.carbon.identity.api.server.email.template/org.wso2.carbon.identity.api.server.email.template.common/src/main/java/org/wso2/carbon/identity/api/server/email/template/common/Constants.java", "diffHunk": "@@ -34,6 +34,9 @@\n     public static final String EMAIL_TEMPLATES_PATH = \"/templates\";\n     public static final String PATH_SEPARATOR = \"/\";\n \n+    // Required attributes.\n+    public static final String LOCALE = \"templates.id\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9640b2b860ee256fe310f0b292a9525881883054"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTY2MDE2OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.email.template/org.wso2.carbon.identity.rest.api.server.email.template.v1/src/main/java/org/wso2/carbon/identity/rest/api/server/email/template/v1/core/ServerEmailTemplatesService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNToxMTo0OFrOGJLHiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNDozNToxNFrOGJi8Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI3MjUyMA==", "bodyText": "let's use multi-line comment format", "url": "https://github.com/wso2/identity-api-server/pull/151#discussion_r412272520", "createdAt": "2020-04-21T15:11:48Z", "author": {"login": "emswbandara"}, "path": "components/org.wso2.carbon.identity.api.server.email.template/org.wso2.carbon.identity.rest.api.server.email.template.v1/src/main/java/org/wso2/carbon/identity/rest/api/server/email/template/v1/core/ServerEmailTemplatesService.java", "diffHunk": "@@ -392,26 +414,66 @@ private void addEmailTemplateToTheSystem(String templateTypeDisplayName, EmailTe\n     /**\n      * Create a list EmailTemplateTypeWithoutTemplates objects by reading an internal EmailTemplate list.\n      *\n+     * @param emailTemplateTypes List of available email template types.\n      * @param internalEmailTemplates List of EmailTemplate objects.\n+     * @param requestedAttributeList List of required attributes.\n      * @return List of EmailTemplateTypeWithoutTemplates objects.\n      */\n     private List<EmailTemplateTypeWithoutTemplates> buildEmailTemplateTypeWithoutTemplatesList(\n-            List<EmailTemplate> internalEmailTemplates) {\n+            List<String> emailTemplateTypes, List<EmailTemplate> internalEmailTemplates,\n+            List<String> requestedAttributeList) {\n \n         Map<String, EmailTemplateTypeWithoutTemplates> templateTypeMap = new HashMap<>();\n-        for (EmailTemplate emailTemplate : internalEmailTemplates) {\n-            if (!templateTypeMap.containsKey(emailTemplate.getTemplateType())) {\n-\n-                EmailTemplateTypeWithoutTemplates emailTemplateType = new EmailTemplateTypeWithoutTemplates();\n-                // Set display name.\n-                emailTemplateType.setDisplayName(emailTemplate.getTemplateDisplayName());\n-                // Set id.\n-                String templateTypeId = getEmailTemplateIdFromDisplayName(emailTemplate.getTemplateDisplayName());\n-                emailTemplateType.setId(templateTypeId);\n-                // Set location.\n-                emailTemplateType.setSelf(getTemplateTypeLocation(templateTypeId));\n+        for (String templateType : emailTemplateTypes) {\n+\n+            EmailTemplateTypeWithoutTemplates emailTemplateType = new EmailTemplateTypeWithoutTemplates();\n+            // Set display name.\n+            emailTemplateType.setDisplayName(templateType);\n+            // Set id.\n+            String templateTypeId = getEmailTemplateIdFromDisplayName(templateType);\n+            emailTemplateType.setId(templateTypeId);\n+            // Set location.\n+            emailTemplateType.setSelf(getTemplateTypeLocation(templateTypeId));\n+\n+            if (requestedAttributeList != null) {\n+                emailTemplateType.setTemplates(new ArrayList<>());\n+            }\n+            templateTypeMap.put(templateType, emailTemplateType);\n+        }\n \n-                templateTypeMap.put(emailTemplate.getTemplateType(), emailTemplateType);\n+        // Populate optional email template information if exists.\n+        if (requestedAttributeList != null) {\n+            for (EmailTemplate emailTemplate : internalEmailTemplates) {\n+                EmailTemplateWithID templateWithID = new EmailTemplateWithID();\n+                for (String requestedAttribute : requestedAttributeList) {\n+                    switch (requestedAttribute) {\n+                        case Constants.TEMPLATES:\n+                            templateWithID.setContentType(emailTemplate.getEmailContentType());\n+                            templateWithID.setSubject(emailTemplate.getSubject());\n+                            templateWithID.setBody(emailTemplate.getBody());\n+                            templateWithID.setFooter(emailTemplate.getFooter());\n+                            templateWithID.setId(emailTemplate.getLocale());\n+                            break;\n+                        case Constants.LOCALE:\n+                            templateWithID.setId(emailTemplate.getLocale());\n+                            break;\n+                        case Constants.CONTENT_TYPE:\n+                            templateWithID.setContentType(emailTemplate.getEmailContentType());\n+                            break;\n+                        case Constants.SUBJECT:\n+                            templateWithID.setSubject(emailTemplate.getSubject());\n+                            break;\n+                        case Constants.BODY:\n+                            templateWithID.setBody(emailTemplate.getBody());\n+                            break;\n+                        case Constants.FOOTER:\n+                            templateWithID.setFooter(emailTemplate.getFooter());\n+                            break;\n+                    }\n+                }\n+                // Email template's display name is used to search templateTypeMap key because", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "984344fef3895e269a602870ab8d4e3d21e50a0d"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2MjgxNQ==", "bodyText": "addressed in 1bbab04", "url": "https://github.com/wso2/identity-api-server/pull/151#discussion_r412662815", "createdAt": "2020-04-22T04:35:14Z", "author": {"login": "AnuradhaSK"}, "path": "components/org.wso2.carbon.identity.api.server.email.template/org.wso2.carbon.identity.rest.api.server.email.template.v1/src/main/java/org/wso2/carbon/identity/rest/api/server/email/template/v1/core/ServerEmailTemplatesService.java", "diffHunk": "@@ -392,26 +414,66 @@ private void addEmailTemplateToTheSystem(String templateTypeDisplayName, EmailTe\n     /**\n      * Create a list EmailTemplateTypeWithoutTemplates objects by reading an internal EmailTemplate list.\n      *\n+     * @param emailTemplateTypes List of available email template types.\n      * @param internalEmailTemplates List of EmailTemplate objects.\n+     * @param requestedAttributeList List of required attributes.\n      * @return List of EmailTemplateTypeWithoutTemplates objects.\n      */\n     private List<EmailTemplateTypeWithoutTemplates> buildEmailTemplateTypeWithoutTemplatesList(\n-            List<EmailTemplate> internalEmailTemplates) {\n+            List<String> emailTemplateTypes, List<EmailTemplate> internalEmailTemplates,\n+            List<String> requestedAttributeList) {\n \n         Map<String, EmailTemplateTypeWithoutTemplates> templateTypeMap = new HashMap<>();\n-        for (EmailTemplate emailTemplate : internalEmailTemplates) {\n-            if (!templateTypeMap.containsKey(emailTemplate.getTemplateType())) {\n-\n-                EmailTemplateTypeWithoutTemplates emailTemplateType = new EmailTemplateTypeWithoutTemplates();\n-                // Set display name.\n-                emailTemplateType.setDisplayName(emailTemplate.getTemplateDisplayName());\n-                // Set id.\n-                String templateTypeId = getEmailTemplateIdFromDisplayName(emailTemplate.getTemplateDisplayName());\n-                emailTemplateType.setId(templateTypeId);\n-                // Set location.\n-                emailTemplateType.setSelf(getTemplateTypeLocation(templateTypeId));\n+        for (String templateType : emailTemplateTypes) {\n+\n+            EmailTemplateTypeWithoutTemplates emailTemplateType = new EmailTemplateTypeWithoutTemplates();\n+            // Set display name.\n+            emailTemplateType.setDisplayName(templateType);\n+            // Set id.\n+            String templateTypeId = getEmailTemplateIdFromDisplayName(templateType);\n+            emailTemplateType.setId(templateTypeId);\n+            // Set location.\n+            emailTemplateType.setSelf(getTemplateTypeLocation(templateTypeId));\n+\n+            if (requestedAttributeList != null) {\n+                emailTemplateType.setTemplates(new ArrayList<>());\n+            }\n+            templateTypeMap.put(templateType, emailTemplateType);\n+        }\n \n-                templateTypeMap.put(emailTemplate.getTemplateType(), emailTemplateType);\n+        // Populate optional email template information if exists.\n+        if (requestedAttributeList != null) {\n+            for (EmailTemplate emailTemplate : internalEmailTemplates) {\n+                EmailTemplateWithID templateWithID = new EmailTemplateWithID();\n+                for (String requestedAttribute : requestedAttributeList) {\n+                    switch (requestedAttribute) {\n+                        case Constants.TEMPLATES:\n+                            templateWithID.setContentType(emailTemplate.getEmailContentType());\n+                            templateWithID.setSubject(emailTemplate.getSubject());\n+                            templateWithID.setBody(emailTemplate.getBody());\n+                            templateWithID.setFooter(emailTemplate.getFooter());\n+                            templateWithID.setId(emailTemplate.getLocale());\n+                            break;\n+                        case Constants.LOCALE:\n+                            templateWithID.setId(emailTemplate.getLocale());\n+                            break;\n+                        case Constants.CONTENT_TYPE:\n+                            templateWithID.setContentType(emailTemplate.getEmailContentType());\n+                            break;\n+                        case Constants.SUBJECT:\n+                            templateWithID.setSubject(emailTemplate.getSubject());\n+                            break;\n+                        case Constants.BODY:\n+                            templateWithID.setBody(emailTemplate.getBody());\n+                            break;\n+                        case Constants.FOOTER:\n+                            templateWithID.setFooter(emailTemplate.getFooter());\n+                            break;\n+                    }\n+                }\n+                // Email template's display name is used to search templateTypeMap key because", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI3MjUyMA=="}, "originalCommit": {"oid": "984344fef3895e269a602870ab8d4e3d21e50a0d"}, "originalPosition": 165}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1472, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}