{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2MjE5MjYw", "number": 151, "title": "Add requeriedAttribute support for the API", "bodyText": "Purpose\n\n\nResolves  wso2/product-is#8090\n\n\nFix incorrect constant (ALIAS_PATH) used in populateIDPListResponse\n\n\nWhen to Merge\nAfter merging wso2-extensions/identity-event-handler-notification#122\nand wso2-extensions/identity-event-handler-notification#123", "createdAt": "2020-04-20T18:12:05Z", "url": "https://github.com/wso2/identity-api-server/pull/151", "merged": true, "mergeCommit": {"oid": "783f757e65829b8b63ec1e87f85703c33b58b92e"}, "closed": true, "closedAt": "2020-04-22T04:40:36Z", "author": {"login": "AnuradhaSK"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZsNIIgFqTM5Njk4MjkxNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaAqDngH2gAyNDA2MjE5MjYwOmM1ODI3ODU3MDBkOWUyYTE0MGZmNmMxYzc2NzAxYWExMTQxOTdhMTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2OTgyOTE0", "url": "https://github.com/wso2/identity-api-server/pull/151#pullrequestreview-396982914", "createdAt": "2020-04-21T04:44:21Z", "commit": {"oid": "9640b2b860ee256fe310f0b292a9525881883054"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNDo0NDoyMVrOGIyO0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNDo0NDoyMVrOGIyO0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg2NDc4Ng==", "bodyText": "we need to support other possible attributes too..", "url": "https://github.com/wso2/identity-api-server/pull/151#discussion_r411864786", "createdAt": "2020-04-21T04:44:21Z", "author": {"login": "emswbandara"}, "path": "components/org.wso2.carbon.identity.api.server.email.template/org.wso2.carbon.identity.api.server.email.template.common/src/main/java/org/wso2/carbon/identity/api/server/email/template/common/Constants.java", "diffHunk": "@@ -34,6 +34,9 @@\n     public static final String EMAIL_TEMPLATES_PATH = \"/templates\";\n     public static final String PATH_SEPARATOR = \"/\";\n \n+    // Required attributes.\n+    public static final String LOCALE = \"templates.id\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9640b2b860ee256fe310f0b292a9525881883054"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba493a8dbe8814ff2e55f98fd0c6d0c1b2af58ae", "author": {"user": {"login": "AnuradhaSK", "name": "Anuradha Karunarathna"}}, "url": "https://github.com/wso2/identity-api-server/commit/ba493a8dbe8814ff2e55f98fd0c6d0c1b2af58ae", "committedDate": "2020-04-21T12:31:56Z", "message": "Add requeriedAttribute support for the API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29a591129dc0f5d35af1accbac0646a69c8f1150", "author": {"user": {"login": "AnuradhaSK", "name": "Anuradha Karunarathna"}}, "url": "https://github.com/wso2/identity-api-server/commit/29a591129dc0f5d35af1accbac0646a69c8f1150", "committedDate": "2020-04-21T12:31:56Z", "message": "Fix incorrect constant used in populateIDPListResponse"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6aaecbc9fec24a4f3ca4f80e03ad9d45ad7f10f", "author": {"user": {"login": "AnuradhaSK", "name": "Anuradha Karunarathna"}}, "url": "https://github.com/wso2/identity-api-server/commit/b6aaecbc9fec24a4f3ca4f80e03ad9d45ad7f10f", "committedDate": "2020-04-21T12:31:56Z", "message": "Add generated files for updated yaml file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d53b93b072753d2602bdab0dd096952ec22ebbcb", "author": {"user": {"login": "AnuradhaSK", "name": "Anuradha Karunarathna"}}, "url": "https://github.com/wso2/identity-api-server/commit/d53b93b072753d2602bdab0dd096952ec22ebbcb", "committedDate": "2020-04-21T12:31:56Z", "message": "Remove formatting from generated file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "984344fef3895e269a602870ab8d4e3d21e50a0d", "author": {"user": {"login": "AnuradhaSK", "name": "Anuradha Karunarathna"}}, "url": "https://github.com/wso2/identity-api-server/commit/984344fef3895e269a602870ab8d4e3d21e50a0d", "committedDate": "2020-04-21T12:31:56Z", "message": "Add requiredAttribute support for all template attributes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9640b2b860ee256fe310f0b292a9525881883054", "author": {"user": {"login": "AnuradhaSK", "name": "Anuradha Karunarathna"}}, "url": "https://github.com/wso2/identity-api-server/commit/9640b2b860ee256fe310f0b292a9525881883054", "committedDate": "2020-04-20T18:07:59Z", "message": "Remove formatting from generated file"}, "afterCommit": {"oid": "984344fef3895e269a602870ab8d4e3d21e50a0d", "author": {"user": {"login": "AnuradhaSK", "name": "Anuradha Karunarathna"}}, "url": "https://github.com/wso2/identity-api-server/commit/984344fef3895e269a602870ab8d4e3d21e50a0d", "committedDate": "2020-04-21T12:31:56Z", "message": "Add requiredAttribute support for all template attributes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NDMwNDg0", "url": "https://github.com/wso2/identity-api-server/pull/151#pullrequestreview-397430484", "createdAt": "2020-04-21T15:11:48Z", "commit": {"oid": "984344fef3895e269a602870ab8d4e3d21e50a0d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNToxMTo0OFrOGJLHiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNToxMTo0OFrOGJLHiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI3MjUyMA==", "bodyText": "let's use multi-line comment format", "url": "https://github.com/wso2/identity-api-server/pull/151#discussion_r412272520", "createdAt": "2020-04-21T15:11:48Z", "author": {"login": "emswbandara"}, "path": "components/org.wso2.carbon.identity.api.server.email.template/org.wso2.carbon.identity.rest.api.server.email.template.v1/src/main/java/org/wso2/carbon/identity/rest/api/server/email/template/v1/core/ServerEmailTemplatesService.java", "diffHunk": "@@ -392,26 +414,66 @@ private void addEmailTemplateToTheSystem(String templateTypeDisplayName, EmailTe\n     /**\n      * Create a list EmailTemplateTypeWithoutTemplates objects by reading an internal EmailTemplate list.\n      *\n+     * @param emailTemplateTypes List of available email template types.\n      * @param internalEmailTemplates List of EmailTemplate objects.\n+     * @param requestedAttributeList List of required attributes.\n      * @return List of EmailTemplateTypeWithoutTemplates objects.\n      */\n     private List<EmailTemplateTypeWithoutTemplates> buildEmailTemplateTypeWithoutTemplatesList(\n-            List<EmailTemplate> internalEmailTemplates) {\n+            List<String> emailTemplateTypes, List<EmailTemplate> internalEmailTemplates,\n+            List<String> requestedAttributeList) {\n \n         Map<String, EmailTemplateTypeWithoutTemplates> templateTypeMap = new HashMap<>();\n-        for (EmailTemplate emailTemplate : internalEmailTemplates) {\n-            if (!templateTypeMap.containsKey(emailTemplate.getTemplateType())) {\n-\n-                EmailTemplateTypeWithoutTemplates emailTemplateType = new EmailTemplateTypeWithoutTemplates();\n-                // Set display name.\n-                emailTemplateType.setDisplayName(emailTemplate.getTemplateDisplayName());\n-                // Set id.\n-                String templateTypeId = getEmailTemplateIdFromDisplayName(emailTemplate.getTemplateDisplayName());\n-                emailTemplateType.setId(templateTypeId);\n-                // Set location.\n-                emailTemplateType.setSelf(getTemplateTypeLocation(templateTypeId));\n+        for (String templateType : emailTemplateTypes) {\n+\n+            EmailTemplateTypeWithoutTemplates emailTemplateType = new EmailTemplateTypeWithoutTemplates();\n+            // Set display name.\n+            emailTemplateType.setDisplayName(templateType);\n+            // Set id.\n+            String templateTypeId = getEmailTemplateIdFromDisplayName(templateType);\n+            emailTemplateType.setId(templateTypeId);\n+            // Set location.\n+            emailTemplateType.setSelf(getTemplateTypeLocation(templateTypeId));\n+\n+            if (requestedAttributeList != null) {\n+                emailTemplateType.setTemplates(new ArrayList<>());\n+            }\n+            templateTypeMap.put(templateType, emailTemplateType);\n+        }\n \n-                templateTypeMap.put(emailTemplate.getTemplateType(), emailTemplateType);\n+        // Populate optional email template information if exists.\n+        if (requestedAttributeList != null) {\n+            for (EmailTemplate emailTemplate : internalEmailTemplates) {\n+                EmailTemplateWithID templateWithID = new EmailTemplateWithID();\n+                for (String requestedAttribute : requestedAttributeList) {\n+                    switch (requestedAttribute) {\n+                        case Constants.TEMPLATES:\n+                            templateWithID.setContentType(emailTemplate.getEmailContentType());\n+                            templateWithID.setSubject(emailTemplate.getSubject());\n+                            templateWithID.setBody(emailTemplate.getBody());\n+                            templateWithID.setFooter(emailTemplate.getFooter());\n+                            templateWithID.setId(emailTemplate.getLocale());\n+                            break;\n+                        case Constants.LOCALE:\n+                            templateWithID.setId(emailTemplate.getLocale());\n+                            break;\n+                        case Constants.CONTENT_TYPE:\n+                            templateWithID.setContentType(emailTemplate.getEmailContentType());\n+                            break;\n+                        case Constants.SUBJECT:\n+                            templateWithID.setSubject(emailTemplate.getSubject());\n+                            break;\n+                        case Constants.BODY:\n+                            templateWithID.setBody(emailTemplate.getBody());\n+                            break;\n+                        case Constants.FOOTER:\n+                            templateWithID.setFooter(emailTemplate.getFooter());\n+                            break;\n+                    }\n+                }\n+                // Email template's display name is used to search templateTypeMap key because", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "984344fef3895e269a602870ab8d4e3d21e50a0d"}, "originalPosition": 165}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NDMxMjIw", "url": "https://github.com/wso2/identity-api-server/pull/151#pullrequestreview-397431220", "createdAt": "2020-04-21T15:12:37Z", "commit": {"oid": "984344fef3895e269a602870ab8d4e3d21e50a0d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bbab048df7ab95cbf4757e21035235a9238d69e", "author": {"user": {"login": "AnuradhaSK", "name": "Anuradha Karunarathna"}}, "url": "https://github.com/wso2/identity-api-server/commit/1bbab048df7ab95cbf4757e21035235a9238d69e", "committedDate": "2020-04-21T16:02:08Z", "message": "update a comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c582785700d9e2a140ff6c1c76701aa114197a11", "author": {"user": {"login": "AnuradhaSK", "name": "Anuradha Karunarathna"}}, "url": "https://github.com/wso2/identity-api-server/commit/c582785700d9e2a140ff6c1c76701aa114197a11", "committedDate": "2020-04-22T04:34:03Z", "message": "upgrade identity event handler version"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1352, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}