{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3ODg4MDgx", "number": 84, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwOTowNzoxMFrODbf46A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwOToyMjo1OFrODbgKLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTYwNjE2OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.oidc.scope.management/org.wso2.carbon.identity.api.server.oidc.scope.management.common/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwOTowNzoxMFrOFjBC5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwOTowNzoxMFrOFjBC5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI2MTYwNA==", "bodyText": "Add new line", "url": "https://github.com/wso2/identity-api-server/pull/84#discussion_r372261604", "createdAt": "2020-01-29T09:07:10Z", "author": {"login": "madurangasiriwardena"}, "path": "components/org.wso2.carbon.identity.api.server.oidc.scope.management/org.wso2.carbon.identity.api.server.oidc.scope.management.common/pom.xml", "diffHunk": "@@ -0,0 +1,61 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+  ~\n+  ~ WSO2 Inc. licenses this file to you under the Apache License,\n+  ~ Version 2.0 (the \"License\"); you may not use this file except\n+  ~ in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~ http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+    <parent>\n+        <groupId>org.wso2.carbon.identity.server.api</groupId>\n+        <artifactId>org.wso2.carbon.identity.api.server.oidc.scope.management</artifactId>\n+        <relativePath>../pom.xml</relativePath>\n+        <version>1.0.62-SNAPSHOT</version>\n+    </parent>\n+\n+    <modelVersion>4.0.0</modelVersion>\n+    <artifactId>org.wso2.carbon.identity.api.server.oidc.scope.management.common</artifactId>\n+    <packaging>jar</packaging>\n+    <name>WSO2 Identity Server - OIDC Scope Management Rest API Common</name>\n+    <description>WSO2 Identity Server - OIDC Scope Management Rest API Common</description>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <configuration>\n+                    <source>1.8</source>\n+                    <target>1.8</target>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-web</artifactId>\n+            <scope>provided</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.carbon.identity.inbound.auth.oauth2</groupId>\n+            <artifactId>org.wso2.carbon.identity.oauth</artifactId>\n+            <scope>provided</scope>\n+        </dependency>\n+    </dependencies>\n+</project>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c90f110fd64f1ecaeca46c540ba87e127b112d"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTYwNzMxOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.oidc.scope.management/org.wso2.carbon.identity.api.server.oidc.scope.management.common/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwOTowNzozN1rOFjBDrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwOTowNzozN1rOFjBDrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI2MTgwNA==", "bodyText": "License year 2020.", "url": "https://github.com/wso2/identity-api-server/pull/84#discussion_r372261804", "createdAt": "2020-01-29T09:07:37Z", "author": {"login": "madurangasiriwardena"}, "path": "components/org.wso2.carbon.identity.api.server.oidc.scope.management/org.wso2.carbon.identity.api.server.oidc.scope.management.common/pom.xml", "diffHunk": "@@ -0,0 +1,61 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c90f110fd64f1ecaeca46c540ba87e127b112d"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTYxMDM0OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.oidc.scope.management/org.wso2.carbon.identity.api.server.oidc.scope.management.common/src/main/java/org/wso2/carbon/identity/api/server/oidc/scope/management/common/OidcScopeConstants.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwOTowODo0M1rOFjBFlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwOTowODo0M1rOFjBFlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI2MjI5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ERROR_CONFLICT_REQUEST(\"41004\", \"Scope is already exists.\");\n          \n          \n            \n                    ERROR_CONFLICT_REQUEST(\"41004\", \"Scope already exists.\");", "url": "https://github.com/wso2/identity-api-server/pull/84#discussion_r372262292", "createdAt": "2020-01-29T09:08:43Z", "author": {"login": "madurangasiriwardena"}, "path": "components/org.wso2.carbon.identity.api.server.oidc.scope.management/org.wso2.carbon.identity.api.server.oidc.scope.management.common/src/main/java/org/wso2/carbon/identity/api/server/oidc/scope/management/common/OidcScopeConstants.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package org.wso2.carbon.identity.api.server.oidc.scope.management.common;\n+\n+/**\n+ * Contains all the OIDC Scope Management Service related constants.\n+ */\n+public class OidcScopeConstants {\n+\n+    public static final String OIDC_SCOPE_API_PATH_COMPONENT = \"/oidc/scopes\";\n+    public static final String PATH_SEPERATOR = \"/\";\n+\n+    /**\n+     * Enum for OIDC scope management service related errors.\n+     */\n+    public enum ErrorMessage {\n+\n+        INVALID_REQUEST(\"60001\", \"Invalid Request.\"),\n+        ERROR_CONFLICT_REQUEST(\"41004\", \"Scope is already exists.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c90f110fd64f1ecaeca46c540ba87e127b112d"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTYzNzI5OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.oidc.scope.management/org.wso2.carbon.identity.api.server.oidc.scope.management.common/src/main/java/org/wso2/carbon/identity/api/server/oidc/scope/management/common/OidcScopeConstants.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwOToxODoxOFrOFjBWUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwOToxODoxOFrOFjBWUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI2NjU3OQ==", "bodyText": "License", "url": "https://github.com/wso2/identity-api-server/pull/84#discussion_r372266579", "createdAt": "2020-01-29T09:18:18Z", "author": {"login": "madurangasiriwardena"}, "path": "components/org.wso2.carbon.identity.api.server.oidc.scope.management/org.wso2.carbon.identity.api.server.oidc.scope.management.common/src/main/java/org/wso2/carbon/identity/api/server/oidc/scope/management/common/OidcScopeConstants.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package org.wso2.carbon.identity.api.server.oidc.scope.management.common;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c90f110fd64f1ecaeca46c540ba87e127b112d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTY0NDc3OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.oidc.scope.management/org.wso2.carbon.identity.api.server.oidc.scope.management.v1/src/main/java/org/wso2/carbon/identity/api/server/oidc/scope/management/v1/core/OidcScopeManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwOToyMTowM1rOFjBbKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwOToyMTowM1rOFjBbKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI2NzgxOQ==", "bodyText": "License", "url": "https://github.com/wso2/identity-api-server/pull/84#discussion_r372267819", "createdAt": "2020-01-29T09:21:03Z", "author": {"login": "madurangasiriwardena"}, "path": "components/org.wso2.carbon.identity.api.server.oidc.scope.management/org.wso2.carbon.identity.api.server.oidc.scope.management.v1/src/main/java/org/wso2/carbon/identity/api/server/oidc/scope/management/v1/core/OidcScopeManagementService.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package org.wso2.carbon.identity.api.server.oidc.scope.management.v1.core;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c90f110fd64f1ecaeca46c540ba87e127b112d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTY0OTYyOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.oidc.scope.management/org.wso2.carbon.identity.api.server.oidc.scope.management.v1/src/main/java/org/wso2/carbon/identity/api/server/oidc/scope/management/v1/core/OidcScopeManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwOToyMjo0NFrOFjBeeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwOToyMjo0NFrOFjBeeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI2ODY2NA==", "bodyText": "Unnecessary new line", "url": "https://github.com/wso2/identity-api-server/pull/84#discussion_r372268664", "createdAt": "2020-01-29T09:22:44Z", "author": {"login": "madurangasiriwardena"}, "path": "components/org.wso2.carbon.identity.api.server.oidc.scope.management/org.wso2.carbon.identity.api.server.oidc.scope.management.v1/src/main/java/org/wso2/carbon/identity/api/server/oidc/scope/management/v1/core/OidcScopeManagementService.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package org.wso2.carbon.identity.api.server.oidc.scope.management.v1.core;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.api.server.common.error.APIError;\n+import org.wso2.carbon.identity.api.server.common.error.ErrorResponse;\n+import org.wso2.carbon.identity.api.server.oidc.scope.management.common.OidcScopeConstants;\n+import org.wso2.carbon.identity.api.server.oidc.scope.management.v1.model.Scope;\n+import org.wso2.carbon.identity.api.server.oidc.scope.management.v1.model.ScopeUpdateRequest;\n+import org.wso2.carbon.identity.oauth.IdentityOAuthAdminException;\n+import org.wso2.carbon.identity.oauth.dto.ScopeDTO;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.ws.rs.core.Response;\n+\n+import static org.wso2.carbon.identity.api.server.oidc.scope.management.common.OIDCScopeManagementServiceHolder.getOAuthAdminService;\n+\n+/**\n+ * OIDC scope management APIs are processed in this class.\n+ */\n+public class OidcScopeManagementService {\n+\n+    private static final Log LOG = LogFactory.getLog(OidcScopeManagementService.class);\n+\n+    /**\n+     * Add an OIDC scope.\n+     *\n+     * @param scopeObject Scope.\n+     * @return Return location URI of created scope.\n+     */\n+    public String addScope(Scope scopeObject) {\n+\n+        try {\n+            List<String> claimList = scopeObject.getClaims();\n+            String[] claimArray = claimList.toArray(new String[claimList.size()]);\n+            ScopeDTO scopeDTO = new ScopeDTO(scopeObject.getName(), scopeObject.getDisplayName(),\n+                    scopeObject.getDescription(), claimArray);\n+            getOAuthAdminService().addScope(scopeDTO);\n+            return scopeDTO.getName();\n+        } catch (IdentityOAuthAdminException e) {\n+            throw handleException(e, \"Server encountered an error while adding OIDC scope: \" + scopeObject.getName());\n+        }\n+    }\n+\n+    /**\n+     * Delete an OIDC scope.\n+     *\n+     * @param id Scope name.\n+     */\n+    public void deleteScope(String id) {\n+\n+        try {\n+            getOAuthAdminService().deleteScope(id);\n+        } catch (IdentityOAuthAdminException e) {\n+            throw handleException(e, \"Server encountered an error while deleting OIDC scope: \" + id);\n+        }\n+    }\n+\n+    /**\n+     * Get an OIDC scope.\n+     *\n+     * @param id Scope name.\n+     * @return Return scope details.\n+     */\n+    public Scope getScope(String id) {\n+\n+        try {\n+            ScopeDTO scopeDTO = getOAuthAdminService().getScope(id);\n+            return convertScopeDTOObjectToScope(scopeDTO);\n+        } catch (IdentityOAuthAdminException e) {\n+            throw handleException(e, \"Server encountered an error while retrieving OIDC scope: \" + id);\n+        }\n+    }\n+\n+    /**\n+     * List all available OIDC scopes.\n+     *\n+     * @return List of scopes.\n+     */\n+    public List<Scope> getScopes() {\n+\n+        try {\n+            ScopeDTO[] scopes = getOAuthAdminService().getScopes();\n+            return buildScopeList(scopes);\n+        } catch (IdentityOAuthAdminException e) {\n+            throw handleException(e, \"Server encountered an error while listing OIDC scopes.\");\n+        }\n+\n+    }\n+\n+    /**\n+     * Update an existing scope.\n+     *\n+     * @param id                Scope name.\n+     * @param scopeUpdateObject Updated scope object.\n+     */\n+    public void updateScope(String id, ScopeUpdateRequest scopeUpdateObject) {\n+\n+        try {\n+            List<String> claimList = scopeUpdateObject.getClaims();\n+            String[] claimArray = claimList.toArray(new String[claimList.size()]);\n+            ScopeDTO scopeDTO = new ScopeDTO(id, scopeUpdateObject.getDisplayName(),\n+                    scopeUpdateObject.getDescription(), claimArray);\n+            getOAuthAdminService().updateScope(scopeDTO);\n+        } catch (IdentityOAuthAdminException e) {\n+            throw handleException(e, \"Server encountered an error while updating OIDC scope: \" + id);\n+        }\n+    }\n+\n+    /**\n+     * Build scope list.\n+     *\n+     * @param scopeDTOS ScopeDTOs.\n+     * @return Return list of scope.\n+     */\n+    private List<Scope> buildScopeList(ScopeDTO[] scopeDTOS) {\n+\n+        List<Scope> scopeList = new ArrayList<>();\n+\n+        for (int i = 0; i < scopeDTOS.length; i++) {\n+            scopeList.add(convertScopeDTOObjectToScope(scopeDTOS[i]));\n+        }\n+        return scopeList;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c90f110fd64f1ecaeca46c540ba87e127b112d"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTY1MDM4OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.oidc.scope.management/org.wso2.carbon.identity.api.server.oidc.scope.management.v1/src/main/java/org/wso2/carbon/identity/api/server/oidc/scope/management/v1/core/OidcScopeManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwOToyMjo1OFrOFjBe9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwOToyMjo1OFrOFjBe9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI2ODc5MA==", "bodyText": "Unnecessary new line", "url": "https://github.com/wso2/identity-api-server/pull/84#discussion_r372268790", "createdAt": "2020-01-29T09:22:58Z", "author": {"login": "madurangasiriwardena"}, "path": "components/org.wso2.carbon.identity.api.server.oidc.scope.management/org.wso2.carbon.identity.api.server.oidc.scope.management.v1/src/main/java/org/wso2/carbon/identity/api/server/oidc/scope/management/v1/core/OidcScopeManagementService.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package org.wso2.carbon.identity.api.server.oidc.scope.management.v1.core;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.api.server.common.error.APIError;\n+import org.wso2.carbon.identity.api.server.common.error.ErrorResponse;\n+import org.wso2.carbon.identity.api.server.oidc.scope.management.common.OidcScopeConstants;\n+import org.wso2.carbon.identity.api.server.oidc.scope.management.v1.model.Scope;\n+import org.wso2.carbon.identity.api.server.oidc.scope.management.v1.model.ScopeUpdateRequest;\n+import org.wso2.carbon.identity.oauth.IdentityOAuthAdminException;\n+import org.wso2.carbon.identity.oauth.dto.ScopeDTO;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.ws.rs.core.Response;\n+\n+import static org.wso2.carbon.identity.api.server.oidc.scope.management.common.OIDCScopeManagementServiceHolder.getOAuthAdminService;\n+\n+/**\n+ * OIDC scope management APIs are processed in this class.\n+ */\n+public class OidcScopeManagementService {\n+\n+    private static final Log LOG = LogFactory.getLog(OidcScopeManagementService.class);\n+\n+    /**\n+     * Add an OIDC scope.\n+     *\n+     * @param scopeObject Scope.\n+     * @return Return location URI of created scope.\n+     */\n+    public String addScope(Scope scopeObject) {\n+\n+        try {\n+            List<String> claimList = scopeObject.getClaims();\n+            String[] claimArray = claimList.toArray(new String[claimList.size()]);\n+            ScopeDTO scopeDTO = new ScopeDTO(scopeObject.getName(), scopeObject.getDisplayName(),\n+                    scopeObject.getDescription(), claimArray);\n+            getOAuthAdminService().addScope(scopeDTO);\n+            return scopeDTO.getName();\n+        } catch (IdentityOAuthAdminException e) {\n+            throw handleException(e, \"Server encountered an error while adding OIDC scope: \" + scopeObject.getName());\n+        }\n+    }\n+\n+    /**\n+     * Delete an OIDC scope.\n+     *\n+     * @param id Scope name.\n+     */\n+    public void deleteScope(String id) {\n+\n+        try {\n+            getOAuthAdminService().deleteScope(id);\n+        } catch (IdentityOAuthAdminException e) {\n+            throw handleException(e, \"Server encountered an error while deleting OIDC scope: \" + id);\n+        }\n+    }\n+\n+    /**\n+     * Get an OIDC scope.\n+     *\n+     * @param id Scope name.\n+     * @return Return scope details.\n+     */\n+    public Scope getScope(String id) {\n+\n+        try {\n+            ScopeDTO scopeDTO = getOAuthAdminService().getScope(id);\n+            return convertScopeDTOObjectToScope(scopeDTO);\n+        } catch (IdentityOAuthAdminException e) {\n+            throw handleException(e, \"Server encountered an error while retrieving OIDC scope: \" + id);\n+        }\n+    }\n+\n+    /**\n+     * List all available OIDC scopes.\n+     *\n+     * @return List of scopes.\n+     */\n+    public List<Scope> getScopes() {\n+\n+        try {\n+            ScopeDTO[] scopes = getOAuthAdminService().getScopes();\n+            return buildScopeList(scopes);\n+        } catch (IdentityOAuthAdminException e) {\n+            throw handleException(e, \"Server encountered an error while listing OIDC scopes.\");\n+        }\n+\n+    }\n+\n+    /**\n+     * Update an existing scope.\n+     *\n+     * @param id                Scope name.\n+     * @param scopeUpdateObject Updated scope object.\n+     */\n+    public void updateScope(String id, ScopeUpdateRequest scopeUpdateObject) {\n+\n+        try {\n+            List<String> claimList = scopeUpdateObject.getClaims();\n+            String[] claimArray = claimList.toArray(new String[claimList.size()]);\n+            ScopeDTO scopeDTO = new ScopeDTO(id, scopeUpdateObject.getDisplayName(),\n+                    scopeUpdateObject.getDescription(), claimArray);\n+            getOAuthAdminService().updateScope(scopeDTO);\n+        } catch (IdentityOAuthAdminException e) {\n+            throw handleException(e, \"Server encountered an error while updating OIDC scope: \" + id);\n+        }\n+    }\n+\n+    /**\n+     * Build scope list.\n+     *\n+     * @param scopeDTOS ScopeDTOs.\n+     * @return Return list of scope.\n+     */\n+    private List<Scope> buildScopeList(ScopeDTO[] scopeDTOS) {\n+\n+        List<Scope> scopeList = new ArrayList<>();\n+\n+        for (int i = 0; i < scopeDTOS.length; i++) {\n+            scopeList.add(convertScopeDTOObjectToScope(scopeDTOS[i]));\n+        }\n+        return scopeList;\n+\n+    }\n+\n+    /**\n+     * Convert ScopeDTO to Scope object.\n+     *\n+     * @param scopeDTO ScopeDTO.\n+     * @return Converted Scope.\n+     */\n+    private Scope convertScopeDTOObjectToScope(ScopeDTO scopeDTO) {\n+\n+        Scope scope = new Scope();\n+        scope.setName(scopeDTO.getName());\n+        scope.setDisplayName(scopeDTO.getDisplayName());\n+        scope.setDescription(scopeDTO.getDescription());\n+        scope.setClaims(Arrays.asList(scopeDTO.getClaim()));\n+        return scope;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c90f110fd64f1ecaeca46c540ba87e127b112d"}, "originalPosition": 144}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1516, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}