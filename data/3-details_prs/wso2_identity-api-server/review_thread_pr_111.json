{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyMzIyMzkz", "number": 111, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMTo1MjowNVrODkPUwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNDozODowOFrODk6OEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzI2NDAwOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/gen/java/org/wso2/carbon/identity/api/server/userstore/v1/UserstoresApi.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMTo1MjowNVrOFwc3fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNDowNzo1M1rOFxfaZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM0ODkyNA==", "bodyText": "let's use requiredAttributes for consistency. We are following that in IDP, APP etc.", "url": "https://github.com/wso2/identity-api-server/pull/111#discussion_r386348924", "createdAt": "2020-03-02T11:52:05Z", "author": {"login": "emswbandara"}, "path": "components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/gen/java/org/wso2/carbon/identity/api/server/userstore/v1/UserstoresApi.java", "diffHunk": "@@ -130,9 +134,9 @@ public Response getAvailableUserStoreTypes() {\n         @ApiResponse(code = 500, message = \"Internal Server Error.\", response = Error.class),\n         @ApiResponse(code = 501, message = \"Not Implemented.\", response = Error.class)\n     })\n-    public Response getSecondaryUserStores(    @Valid@ApiParam(value = \"maximum number of records to return\")  @QueryParam(\"limit\") Integer limit,     @Valid@ApiParam(value = \"number of records to skip for pagination\")  @QueryParam(\"offset\") Integer offset,     @Valid@ApiParam(value = \"Condition to filter the retrival of records.\")  @QueryParam(\"filter\") String filter,     @Valid@ApiParam(value = \"Define the order how the retrieved records should be sorted.\")  @QueryParam(\"sort\") String sort) {\n+    public Response getSecondaryUserStores(    @Valid@ApiParam(value = \"maximum number of records to return\")  @QueryParam(\"limit\") Integer limit,     @Valid@ApiParam(value = \"number of records to skip for pagination\")  @QueryParam(\"offset\") Integer offset,     @Valid@ApiParam(value = \"Condition to filter the retrival of records.\")  @QueryParam(\"filter\") String filter,     @Valid@ApiParam(value = \"Define the order how the retrieved records should be sorted.\")  @QueryParam(\"sort\") String sort,     @Valid@ApiParam(value = \"Define set of user store attributes (as comma separated) to be returned.\")  @QueryParam(\"attributes\") String attributes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18eb823b23f443ba5854195de18405b515116492"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzOTIwNw==", "bodyText": "addressed", "url": "https://github.com/wso2/identity-api-server/pull/111#discussion_r387439207", "createdAt": "2020-03-04T04:07:53Z", "author": {"login": "sarubi"}, "path": "components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/gen/java/org/wso2/carbon/identity/api/server/userstore/v1/UserstoresApi.java", "diffHunk": "@@ -130,9 +134,9 @@ public Response getAvailableUserStoreTypes() {\n         @ApiResponse(code = 500, message = \"Internal Server Error.\", response = Error.class),\n         @ApiResponse(code = 501, message = \"Not Implemented.\", response = Error.class)\n     })\n-    public Response getSecondaryUserStores(    @Valid@ApiParam(value = \"maximum number of records to return\")  @QueryParam(\"limit\") Integer limit,     @Valid@ApiParam(value = \"number of records to skip for pagination\")  @QueryParam(\"offset\") Integer offset,     @Valid@ApiParam(value = \"Condition to filter the retrival of records.\")  @QueryParam(\"filter\") String filter,     @Valid@ApiParam(value = \"Define the order how the retrieved records should be sorted.\")  @QueryParam(\"sort\") String sort) {\n+    public Response getSecondaryUserStores(    @Valid@ApiParam(value = \"maximum number of records to return\")  @QueryParam(\"limit\") Integer limit,     @Valid@ApiParam(value = \"number of records to skip for pagination\")  @QueryParam(\"offset\") Integer offset,     @Valid@ApiParam(value = \"Condition to filter the retrival of records.\")  @QueryParam(\"filter\") String filter,     @Valid@ApiParam(value = \"Define the order how the retrieved records should be sorted.\")  @QueryParam(\"sort\") String sort,     @Valid@ApiParam(value = \"Define set of user store attributes (as comma separated) to be returned.\")  @QueryParam(\"attributes\") String attributes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM0ODkyNA=="}, "originalCommit": {"oid": "18eb823b23f443ba5854195de18405b515116492"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDI5MjAwOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/java/org/wso2/carbon/identity/api/server/userstore/v1/core/ServerUserStoreService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNDozODowOFrOFxfx1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNjozMToxM1rOFyuYGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0NTIwNg==", "bodyText": "Shall we move this separator to a constant file?", "url": "https://github.com/wso2/identity-api-server/pull/111#discussion_r387445206", "createdAt": "2020-03-04T04:38:08Z", "author": {"login": "Kanapriya"}, "path": "components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/java/org/wso2/carbon/identity/api/server/userstore/v1/core/ServerUserStoreService.java", "diffHunk": "@@ -447,11 +450,37 @@ private UserStoreDTO createUserStoreDTO(UserStoreReq userStoreReq) {\n             userStoreList.setSelf(ContextLoader.buildURIForBody(String.format(V1_API_PATH_COMPONENT +\n                             UserStoreConstants.USER_STORE_PATH_COMPONENT + \"/%s\",\n                     base64URLEncodeId(jsonObject.getDomainId()))).toString());\n+\n+            if (StringUtils.isNotBlank(requiredAttributes)) {\n+                String[] requiredAttributesArray = requiredAttributes.split(\",\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a125ba95b66c540f5c69014ba9923fd515dc56d"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODczMjk1Mw==", "bodyText": "fixed", "url": "https://github.com/wso2/identity-api-server/pull/111#discussion_r388732953", "createdAt": "2020-03-06T06:31:13Z", "author": {"login": "sarubi"}, "path": "components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/java/org/wso2/carbon/identity/api/server/userstore/v1/core/ServerUserStoreService.java", "diffHunk": "@@ -447,11 +450,37 @@ private UserStoreDTO createUserStoreDTO(UserStoreReq userStoreReq) {\n             userStoreList.setSelf(ContextLoader.buildURIForBody(String.format(V1_API_PATH_COMPONENT +\n                             UserStoreConstants.USER_STORE_PATH_COMPONENT + \"/%s\",\n                     base64URLEncodeId(jsonObject.getDomainId()))).toString());\n+\n+            if (StringUtils.isNotBlank(requiredAttributes)) {\n+                String[] requiredAttributesArray = requiredAttributes.split(\",\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0NTIwNg=="}, "originalCommit": {"oid": "2a125ba95b66c540f5c69014ba9923fd515dc56d"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1523, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}