{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMjIzNjE3", "number": 404, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNjoxODoxNFrODp7oSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOTo1Nzo1NFrODqiNTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Mjk1MTc3OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/remote/FirestoreStorageManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNjoxODoxNFrOF5aaOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNjoxODoxNFrOF5aaOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc0NTg0OQ==", "bodyText": "Sorry just noticing this now, but should this method return a Completable since it's async?", "url": "https://github.com/google/ground-android/pull/404#discussion_r395745849", "createdAt": "2020-03-20T16:18:14Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/remote/FirestoreStorageManager.java", "diffHunk": "@@ -40,32 +40,31 @@\n     this.storageReference = storageReference;\n   }\n \n-  /** Returns a reference to the root media dir. */\n-  private StorageReference getRootMediaDir() {\n-    return storageReference.child(MEDIA_ROOT_DIR);\n-  }\n-\n   /**\n-   * Returns a reference to a object under the root media dir.\n+   * Generates destination path for saving the image to Firestore Storage.\n    *\n-   * @param fileName Name of the uploaded media\n+   * <p>/uploaded_media/{project_id}/{form_id}/{feature_id}/{filename.jpg}\n    */\n-  private StorageReference createReference(String fileName) {\n-    return getRootMediaDir().child(fileName);\n+  public static String getRemoteImagePath(\n+      String projectId, String formId, String featureId, String filename) {\n+    return new StringJoiner(File.separator)\n+        .add(MEDIA_ROOT_DIR)\n+        .add(projectId)\n+        .add(formId)\n+        .add(featureId)\n+        .add(filename)\n+        .toString();\n   }\n \n   public Task<Uri> getDownloadUrl(String path) {\n     return storageReference.child(path).getDownloadUrl();\n   }\n \n   /** Upload file to Firebase Storage. */\n-  public String uploadMediaFromFile(File file, String destinationPath) {\n-    StorageReference reference = createReference(destinationPath);\n+  public void uploadMediaFromFile(File file, String destinationPath) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9b77f1064d14c60f25ddf9f10c29b10d49d921a"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Mjk2MjMyOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/sync/PhotoSyncWorkManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNjoyMDo1OVrOF5ag_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxOToyNjowOVrOF5gmaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc0NzU4MA==", "bodyText": "Fyi, files #408 to revisit allowing user to specific constraints for upload.", "url": "https://github.com/google/ground-android/pull/404#discussion_r395747580", "createdAt": "2020-03-20T16:20:59Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/sync/PhotoSyncWorkManager.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.sync;\n+\n+import androidx.work.Constraints;\n+import androidx.work.NetworkType;\n+import androidx.work.OneTimeWorkRequest;\n+import androidx.work.WorkManager;\n+import io.reactivex.Completable;\n+import javax.inject.Inject;\n+import javax.inject.Provider;\n+\n+/** Enqueues photo upload work to be done in the background. */\n+public class PhotoSyncWorkManager {\n+\n+  private static final Constraints CONSTRAINTS =\n+      new Constraints.Builder().setRequiredNetworkType(NetworkType.CONNECTED).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9b77f1064d14c60f25ddf9f10c29b10d49d921a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg0NzI3NQ==", "bodyText": "Ack", "url": "https://github.com/google/ground-android/pull/404#discussion_r395847275", "createdAt": "2020-03-20T19:26:09Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/sync/PhotoSyncWorkManager.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.sync;\n+\n+import androidx.work.Constraints;\n+import androidx.work.NetworkType;\n+import androidx.work.OneTimeWorkRequest;\n+import androidx.work.WorkManager;\n+import io.reactivex.Completable;\n+import javax.inject.Inject;\n+import javax.inject.Provider;\n+\n+/** Enqueues photo upload work to be done in the background. */\n+public class PhotoSyncWorkManager {\n+\n+  private static final Constraints CONSTRAINTS =\n+      new Constraints.Builder().setRequiredNetworkType(NetworkType.CONNECTED).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc0NzU4MA=="}, "originalCommit": {"oid": "c9b77f1064d14c60f25ddf9f10c29b10d49d921a"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Mjk2Mzk2OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/sync/PhotoSyncWorkManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNjoyMToyNFrOF5aiDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNjoyMToyNFrOF5aiDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc0Nzg1NA==", "bodyText": "Nit: Change -> chance", "url": "https://github.com/google/ground-android/pull/404#discussion_r395747854", "createdAt": "2020-03-20T16:21:24Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/sync/PhotoSyncWorkManager.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.sync;\n+\n+import androidx.work.Constraints;\n+import androidx.work.NetworkType;\n+import androidx.work.OneTimeWorkRequest;\n+import androidx.work.WorkManager;\n+import io.reactivex.Completable;\n+import javax.inject.Inject;\n+import javax.inject.Provider;\n+\n+/** Enqueues photo upload work to be done in the background. */\n+public class PhotoSyncWorkManager {\n+\n+  private static final Constraints CONSTRAINTS =\n+      new Constraints.Builder().setRequiredNetworkType(NetworkType.CONNECTED).build();\n+\n+  /**\n+   * WorkManager is injected via {@code Provider} rather than directly to ensure the {@code\n+   * Application} has a change to initialize it before {@code WorkManager.getInstance()} is called.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9b77f1064d14c60f25ddf9f10c29b10d49d921a"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzE1ODk1OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationViewModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNzoxNjowN1rOF5cgvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNzoxNjowN1rOF5cgvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc4MDI4NQ==", "bodyText": "It would seem saving the bitmap to local storage is out of scope of the viewmodel's responsibilities. Ideally both this and the access to the worker would be managed by the storageManager. Could these be moved there, or a TODO added to do so?", "url": "https://github.com/google/ground-android/pull/404#discussion_r395780285", "createdAt": "2020-03-20T17:16:07Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationViewModel.java", "diffHunk": "@@ -249,33 +249,18 @@ private Completable handlePhotoCaptureResult(String fieldId) {\n   private Completable saveBitmapAndUpdateResponse(Bitmap bitmap, String fieldId)\n       throws IOException {\n     File file = fileUtil.saveBitmap(bitmap, fieldId + \".jpg\");\n-    String destinationPath = getRemoteImagePath(file.getName());\n-\n-    // If offline, Firebase will automatically upload the image when the network\n-    // connectivity is  re-established.\n-    // TODO: Implement offline photo sync using Android Workers and local db\n-    String url = firestoreStorageManager.uploadMediaFromFile(file, destinationPath);\n+    String destinationPath =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9b77f1064d14c60f25ddf9f10c29b10d49d921a"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTI2NTA3OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/sync/PhotoSyncWorker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOTo1NTo0M1rOF6V1iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDozNzozNFrOF6XLMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcxOTQ5OQ==", "bodyText": "In a future PR, it might make sense to fail against certain exceptions\u2014not sure precisely what exceptions that function can throw, but I imagine there may be some cases that are unrecoverable, in which case it doesn't make sense to continue retry work.", "url": "https://github.com/google/ground-android/pull/404#discussion_r396719499", "createdAt": "2020-03-23T19:55:43Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/sync/PhotoSyncWorker.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.sync;\n+\n+import android.content.Context;\n+import androidx.annotation.NonNull;\n+import androidx.work.Data;\n+import androidx.work.Worker;\n+import androidx.work.WorkerParameters;\n+import com.google.android.gnd.persistence.remote.RemoteStorageManager;\n+import java.io.File;\n+import timber.log.Timber;\n+\n+/**\n+ * A worker that uploads photos from observations to the FirestoreStorage in the background. The\n+ * source file and remote destination path are provided in a {@link Data} object. This worker should\n+ * only run when the device has a network connection.\n+ */\n+public class PhotoSyncWorker extends Worker {\n+\n+  private static final String SOURCE_FILE_PATH_PARAM_KEY = \"sourceFilePath\";\n+  private static final String DESTINATION_PATH_PARAM_KEY = \"destinationPath\";\n+\n+  private final RemoteStorageManager remoteStorageManager;\n+  private final String localSourcePath;\n+  private final String remoteDestinationPath;\n+\n+  public PhotoSyncWorker(\n+      @NonNull Context context,\n+      @NonNull WorkerParameters workerParams,\n+      RemoteStorageManager remoteStorageManager) {\n+    super(context, workerParams);\n+    this.remoteStorageManager = remoteStorageManager;\n+    this.localSourcePath = workerParams.getInputData().getString(SOURCE_FILE_PATH_PARAM_KEY);\n+    this.remoteDestinationPath = workerParams.getInputData().getString(DESTINATION_PATH_PARAM_KEY);\n+  }\n+\n+  public static Data createInputData(String sourceFilePath, String destinationPath) {\n+    return new Data.Builder()\n+        .putString(SOURCE_FILE_PATH_PARAM_KEY, sourceFilePath)\n+        .putString(DESTINATION_PATH_PARAM_KEY, destinationPath)\n+        .build();\n+  }\n+\n+  @NonNull\n+  @Override\n+  public Result doWork() {\n+    Timber.d(\"Attempting photo sync: %s, %s\", localSourcePath, remoteDestinationPath);\n+    File file = new File(localSourcePath);\n+    if (file.exists()) {\n+      Timber.d(\"Starting photo upload: %s, %s\", localSourcePath, remoteDestinationPath);\n+      try {\n+        remoteStorageManager\n+            .uploadMediaFromFile(new File(localSourcePath), remoteDestinationPath)\n+            .blockingAwait();\n+        return Result.success();\n+      } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27cb7d057167c741f33d03b8a48a21ef22cbd763"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0MTQyNg==", "bodyText": "Makes sense! Let's open a new bug to keep a track of this", "url": "https://github.com/google/ground-android/pull/404#discussion_r396741426", "createdAt": "2020-03-23T20:37:34Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/sync/PhotoSyncWorker.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.sync;\n+\n+import android.content.Context;\n+import androidx.annotation.NonNull;\n+import androidx.work.Data;\n+import androidx.work.Worker;\n+import androidx.work.WorkerParameters;\n+import com.google.android.gnd.persistence.remote.RemoteStorageManager;\n+import java.io.File;\n+import timber.log.Timber;\n+\n+/**\n+ * A worker that uploads photos from observations to the FirestoreStorage in the background. The\n+ * source file and remote destination path are provided in a {@link Data} object. This worker should\n+ * only run when the device has a network connection.\n+ */\n+public class PhotoSyncWorker extends Worker {\n+\n+  private static final String SOURCE_FILE_PATH_PARAM_KEY = \"sourceFilePath\";\n+  private static final String DESTINATION_PATH_PARAM_KEY = \"destinationPath\";\n+\n+  private final RemoteStorageManager remoteStorageManager;\n+  private final String localSourcePath;\n+  private final String remoteDestinationPath;\n+\n+  public PhotoSyncWorker(\n+      @NonNull Context context,\n+      @NonNull WorkerParameters workerParams,\n+      RemoteStorageManager remoteStorageManager) {\n+    super(context, workerParams);\n+    this.remoteStorageManager = remoteStorageManager;\n+    this.localSourcePath = workerParams.getInputData().getString(SOURCE_FILE_PATH_PARAM_KEY);\n+    this.remoteDestinationPath = workerParams.getInputData().getString(DESTINATION_PATH_PARAM_KEY);\n+  }\n+\n+  public static Data createInputData(String sourceFilePath, String destinationPath) {\n+    return new Data.Builder()\n+        .putString(SOURCE_FILE_PATH_PARAM_KEY, sourceFilePath)\n+        .putString(DESTINATION_PATH_PARAM_KEY, destinationPath)\n+        .build();\n+  }\n+\n+  @NonNull\n+  @Override\n+  public Result doWork() {\n+    Timber.d(\"Attempting photo sync: %s, %s\", localSourcePath, remoteDestinationPath);\n+    File file = new File(localSourcePath);\n+    if (file.exists()) {\n+      Timber.d(\"Starting photo upload: %s, %s\", localSourcePath, remoteDestinationPath);\n+      try {\n+        remoteStorageManager\n+            .uploadMediaFromFile(new File(localSourcePath), remoteDestinationPath)\n+            .blockingAwait();\n+        return Result.success();\n+      } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcxOTQ5OQ=="}, "originalCommit": {"oid": "27cb7d057167c741f33d03b8a48a21ef22cbd763"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTI3MjQ1OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationViewModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOTo1Nzo1NFrOF6V6Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDozOTo0OVrOF6XPvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcyMDcxNQ==", "bodyText": "Should we make this file extension a constant in the Config? Photo EXT or something like that?", "url": "https://github.com/google/ground-android/pull/404#discussion_r396720715", "createdAt": "2020-03-23T19:57:54Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationViewModel.java", "diffHunk": "@@ -248,34 +239,18 @@ private Completable handlePhotoCaptureResult(String fieldId) {\n \n   private Completable saveBitmapAndUpdateResponse(Bitmap bitmap, String fieldId)\n       throws IOException {\n-    File file = fileUtil.saveBitmap(bitmap, fieldId + \".jpg\");\n-    String destinationPath = getRemoteImagePath(file.getName());\n-\n-    // If offline, Firebase will automatically upload the image when the network\n-    // connectivity is  re-established.\n-    // TODO: Implement offline photo sync using Android Workers and local db\n-    String url = firestoreStorageManager.uploadMediaFromFile(file, destinationPath);\n+    String localFileName = fieldId + \".jpg\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27cb7d057167c741f33d03b8a48a21ef22cbd763"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0MjU4OQ==", "bodyText": "Done", "url": "https://github.com/google/ground-android/pull/404#discussion_r396742589", "createdAt": "2020-03-23T20:39:49Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationViewModel.java", "diffHunk": "@@ -248,34 +239,18 @@ private Completable handlePhotoCaptureResult(String fieldId) {\n \n   private Completable saveBitmapAndUpdateResponse(Bitmap bitmap, String fieldId)\n       throws IOException {\n-    File file = fileUtil.saveBitmap(bitmap, fieldId + \".jpg\");\n-    String destinationPath = getRemoteImagePath(file.getName());\n-\n-    // If offline, Firebase will automatically upload the image when the network\n-    // connectivity is  re-established.\n-    // TODO: Implement offline photo sync using Android Workers and local db\n-    String url = firestoreStorageManager.uploadMediaFromFile(file, destinationPath);\n+    String localFileName = fieldId + \".jpg\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcyMDcxNQ=="}, "originalCommit": {"oid": "27cb7d057167c741f33d03b8a48a21ef22cbd763"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2649, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}