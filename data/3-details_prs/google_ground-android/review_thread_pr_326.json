{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0MjM5MTI1", "number": 326, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwNTo0Mzo1NFrODY-9tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwNTo0ODo1MlrODY--WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTI0MDIyOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/system/NetworkManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwNTo0Mzo1NFrOFfJpjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMTowNjoyMFrOFiWnQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwODI3MA==", "bodyText": "Why are we providing the context here as a parameter when there's already a method isNetworkAvailable() for the same purpose?", "url": "https://github.com/google/ground-android/pull/326#discussion_r368208270", "createdAt": "2020-01-18T05:43:54Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/system/NetworkManager.java", "diffHunk": "@@ -41,6 +44,14 @@ public static boolean isNetworkAvailable(Context context) {\n     return networkInfo != null && networkInfo.isConnected();\n   }\n \n+  /**\n+   * Returns a Completable that completes immediately on subscribe if network is available, or fails\n+   * in error if not.\n+   */\n+  public static Completable requireActiveNetwork(Context context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb4b8625d72969cc63b3ab793df31aa35ef8985e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2NjQwMw==", "bodyText": "It's needed because it's used by FluentCollectionReference, which isn't injectable (currently instantiated on demand). Instead, it gets the context from the Firebase API. We could create a Provider with Dagger but that might be overkill for now.", "url": "https://github.com/google/ground-android/pull/326#discussion_r371566403", "createdAt": "2020-01-28T01:06:20Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/system/NetworkManager.java", "diffHunk": "@@ -41,6 +44,14 @@ public static boolean isNetworkAvailable(Context context) {\n     return networkInfo != null && networkInfo.isConnected();\n   }\n \n+  /**\n+   * Returns a Completable that completes immediately on subscribe if network is available, or fails\n+   * in error if not.\n+   */\n+  public static Completable requireActiveNetwork(Context context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwODI3MA=="}, "originalCommit": {"oid": "cb4b8625d72969cc63b3ab793df31aa35ef8985e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTI0MDQ3OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/fluent/FluentFirestore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwNTo0NDo1NVrOFfJptA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwNTo0NDo1NVrOFfJptA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwODMwOA==", "bodyText": "2020", "url": "https://github.com/google/ground-android/pull/326#discussion_r368208308", "createdAt": "2020-01-18T05:44:55Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/fluent/FluentFirestore.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2018 Google LLC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb4b8625d72969cc63b3ab793df31aa35ef8985e"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTI0MTMwOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/fluent/FluentDocumentReference.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwNTo0NzoxN1rOFfJqIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMTowNjoyOVrOFiWnZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwODQxNg==", "bodyText": "Can we instead call this method reference()?", "url": "https://github.com/google/ground-android/pull/326#discussion_r368208416", "createdAt": "2020-01-18T05:47:17Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/fluent/FluentDocumentReference.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.remote.firestore.fluent;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.firestore.DocumentReference;\n+import com.google.firebase.firestore.SetOptions;\n+import com.google.firebase.firestore.WriteBatch;\n+\n+public class FluentDocumentReference {\n+  protected final DocumentReference ref;\n+\n+  protected FluentDocumentReference(DocumentReference ref) {\n+    this.ref = ref;\n+  }\n+\n+  /**\n+   * Adds a request to the specified batch to merge the provided key-value pairs into the remote\n+   * database. If the document does not yet exist, one is created on commit.\n+   */\n+  public void merge(ImmutableMap<String, Object> values, WriteBatch batch) {\n+    batch.set(ref, values, SetOptions.merge());\n+  }\n+\n+  public DocumentReference ref() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb4b8625d72969cc63b3ab793df31aa35ef8985e"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2NjQzOA==", "bodyText": "Done.", "url": "https://github.com/google/ground-android/pull/326#discussion_r371566438", "createdAt": "2020-01-28T01:06:29Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/fluent/FluentDocumentReference.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.remote.firestore.fluent;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.firestore.DocumentReference;\n+import com.google.firebase.firestore.SetOptions;\n+import com.google.firebase.firestore.WriteBatch;\n+\n+public class FluentDocumentReference {\n+  protected final DocumentReference ref;\n+\n+  protected FluentDocumentReference(DocumentReference ref) {\n+    this.ref = ref;\n+  }\n+\n+  /**\n+   * Adds a request to the specified batch to merge the provided key-value pairs into the remote\n+   * database. If the document does not yet exist, one is created on commit.\n+   */\n+  public void merge(ImmutableMap<String, Object> values, WriteBatch batch) {\n+    batch.set(ref, values, SetOptions.merge());\n+  }\n+\n+  public DocumentReference ref() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwODQxNg=="}, "originalCommit": {"oid": "cb4b8625d72969cc63b3ab793df31aa35ef8985e"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTI0MTg0OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/fluent/FluentCollectionReference.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwNTo0ODo1MlrOFfJqXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMTowNjozNlrOFiWnhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwODQ3Ng==", "bodyText": "Can we call this method reference() instead?", "url": "https://github.com/google/ground-android/pull/326#discussion_r368208476", "createdAt": "2020-01-18T05:48:52Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/fluent/FluentCollectionReference.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.remote.firestore.fluent;\n+\n+import com.google.android.gnd.system.NetworkManager;\n+import com.google.firebase.firestore.CollectionReference;\n+import com.google.firebase.firestore.DocumentSnapshot;\n+import com.google.firebase.firestore.Query;\n+import durdinapps.rxfirebase2.RxFirestore;\n+import io.reactivex.Completable;\n+import io.reactivex.Single;\n+import java.util.List;\n+import java8.util.function.Function;\n+\n+public abstract class FluentCollectionReference {\n+  protected final CollectionReference ref;\n+\n+  protected FluentCollectionReference(CollectionReference ref) {\n+    this.ref = ref;\n+  }\n+\n+  /**\n+   * Returns a Completable that completes immediately on subscribe if network is available, or fails\n+   * in error if not.\n+   */\n+  private Completable requireActiveNetwork() {\n+    return NetworkManager.requireActiveNetwork(ref.getFirestore().getApp().getApplicationContext());\n+  }\n+\n+  /**\n+   * Runs the specified query, returning a Single containing a List of values created by applying\n+   * the mappingFunction to all results. Fails immediately with an error if an active network is not\n+   * available.\n+   */\n+  protected <T> Single<List<T>> runQuery(\n+      Query query, Function<DocumentSnapshot, T> mappingFunction) {\n+    return requireActiveNetwork()\n+        .andThen(FluentFirestore.toSingleList(RxFirestore.getCollection(query), mappingFunction));\n+  }\n+\n+  public CollectionReference ref() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb4b8625d72969cc63b3ab793df31aa35ef8985e"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2NjQ2OQ==", "bodyText": "Done.", "url": "https://github.com/google/ground-android/pull/326#discussion_r371566469", "createdAt": "2020-01-28T01:06:36Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/fluent/FluentCollectionReference.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.remote.firestore.fluent;\n+\n+import com.google.android.gnd.system.NetworkManager;\n+import com.google.firebase.firestore.CollectionReference;\n+import com.google.firebase.firestore.DocumentSnapshot;\n+import com.google.firebase.firestore.Query;\n+import durdinapps.rxfirebase2.RxFirestore;\n+import io.reactivex.Completable;\n+import io.reactivex.Single;\n+import java.util.List;\n+import java8.util.function.Function;\n+\n+public abstract class FluentCollectionReference {\n+  protected final CollectionReference ref;\n+\n+  protected FluentCollectionReference(CollectionReference ref) {\n+    this.ref = ref;\n+  }\n+\n+  /**\n+   * Returns a Completable that completes immediately on subscribe if network is available, or fails\n+   * in error if not.\n+   */\n+  private Completable requireActiveNetwork() {\n+    return NetworkManager.requireActiveNetwork(ref.getFirestore().getApp().getApplicationContext());\n+  }\n+\n+  /**\n+   * Runs the specified query, returning a Single containing a List of values created by applying\n+   * the mappingFunction to all results. Fails immediately with an error if an active network is not\n+   * available.\n+   */\n+  protected <T> Single<List<T>> runQuery(\n+      Query query, Function<DocumentSnapshot, T> mappingFunction) {\n+    return requireActiveNetwork()\n+        .andThen(FluentFirestore.toSingleList(RxFirestore.getCollection(query), mappingFunction));\n+  }\n+\n+  public CollectionReference ref() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwODQ3Ng=="}, "originalCommit": {"oid": "cb4b8625d72969cc63b3ab793df31aa35ef8985e"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2584, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}