{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0Mjg0NjE4", "number": 417, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzozMTo0NFrODr87aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNTo1Nzo0MlrODub-gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDEzNjExOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/repository/OfflineAreaRepository.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzozMTo0NFrOF8l2Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNDoxOTozMFrOF-YJEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA3ODk1OA==", "bodyText": "TAG is unused. Please remove", "url": "https://github.com/google/ground-android/pull/417#discussion_r399078958", "createdAt": "2020-03-27T07:31:44Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/repository/OfflineAreaRepository.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.repository;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.stream.StreamSupport.stream;\n+\n+import android.content.Context;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.Config;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.OfflineArea.State;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.persistence.geojson.GeoJsonParser;\n+import com.google.android.gnd.persistence.local.LocalDataStore;\n+import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;\n+import com.google.android.gnd.workers.TileDownloadWorkManager;\n+import com.google.common.collect.ImmutableList;\n+import io.reactivex.Completable;\n+import java.io.File;\n+import javax.inject.Inject;\n+import timber.log.Timber;\n+\n+public class OfflineAreaRepository {\n+  private final TileDownloadWorkManager tileDownloadWorkManager;\n+  private final LocalDataStore localDataStore;\n+  private final GeoJsonParser geoJsonParser;\n+  private final Context context;\n+\n+  private static final String TAG = OfflineAreaRepository.class.getSimpleName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e05dee813378997c5015ae7e4edc64b3f9761529"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk0MDcyNQ==", "bodyText": "Done thanks!", "url": "https://github.com/google/ground-android/pull/417#discussion_r400940725", "createdAt": "2020-03-31T14:05:23Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/repository/OfflineAreaRepository.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.repository;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.stream.StreamSupport.stream;\n+\n+import android.content.Context;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.Config;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.OfflineArea.State;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.persistence.geojson.GeoJsonParser;\n+import com.google.android.gnd.persistence.local.LocalDataStore;\n+import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;\n+import com.google.android.gnd.workers.TileDownloadWorkManager;\n+import com.google.common.collect.ImmutableList;\n+import io.reactivex.Completable;\n+import java.io.File;\n+import javax.inject.Inject;\n+import timber.log.Timber;\n+\n+public class OfflineAreaRepository {\n+  private final TileDownloadWorkManager tileDownloadWorkManager;\n+  private final LocalDataStore localDataStore;\n+  private final GeoJsonParser geoJsonParser;\n+  private final Context context;\n+\n+  private static final String TAG = OfflineAreaRepository.class.getSimpleName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA3ODk1OA=="}, "originalCommit": {"oid": "e05dee813378997c5015ae7e4edc64b3f9761529"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk1MTU2OA==", "bodyText": "be912f6", "url": "https://github.com/google/ground-android/pull/417#discussion_r400951568", "createdAt": "2020-03-31T14:19:30Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/repository/OfflineAreaRepository.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.repository;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.stream.StreamSupport.stream;\n+\n+import android.content.Context;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.Config;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.OfflineArea.State;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.persistence.geojson.GeoJsonParser;\n+import com.google.android.gnd.persistence.local.LocalDataStore;\n+import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;\n+import com.google.android.gnd.workers.TileDownloadWorkManager;\n+import com.google.common.collect.ImmutableList;\n+import io.reactivex.Completable;\n+import java.io.File;\n+import javax.inject.Inject;\n+import timber.log.Timber;\n+\n+public class OfflineAreaRepository {\n+  private final TileDownloadWorkManager tileDownloadWorkManager;\n+  private final LocalDataStore localDataStore;\n+  private final GeoJsonParser geoJsonParser;\n+  private final Context context;\n+\n+  private static final String TAG = OfflineAreaRepository.class.getSimpleName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA3ODk1OA=="}, "originalCommit": {"oid": "e05dee813378997c5015ae7e4edc64b3f9761529"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDE0MTY5OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/repository/OfflineAreaRepository.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzozNDowNlrOF8l5bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNDoxOToyNFrOF-YIww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA3OTc5MQ==", "bodyText": "Please use FileUtil instead so later it's easier to change source dir, if needed.\nFile jsonSource = fileUtil.getFile(Config.GEO_JSON_SOURCE);", "url": "https://github.com/google/ground-android/pull/417#discussion_r399079791", "createdAt": "2020-03-27T07:34:06Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/repository/OfflineAreaRepository.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.repository;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.stream.StreamSupport.stream;\n+\n+import android.content.Context;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.Config;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.OfflineArea.State;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.persistence.geojson.GeoJsonParser;\n+import com.google.android.gnd.persistence.local.LocalDataStore;\n+import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;\n+import com.google.android.gnd.workers.TileDownloadWorkManager;\n+import com.google.common.collect.ImmutableList;\n+import io.reactivex.Completable;\n+import java.io.File;\n+import javax.inject.Inject;\n+import timber.log.Timber;\n+\n+public class OfflineAreaRepository {\n+  private final TileDownloadWorkManager tileDownloadWorkManager;\n+  private final LocalDataStore localDataStore;\n+  private final GeoJsonParser geoJsonParser;\n+  private final Context context;\n+\n+  private static final String TAG = OfflineAreaRepository.class.getSimpleName();\n+  private final OfflineUuidGenerator uuidGenerator;\n+\n+  @Inject\n+  public OfflineAreaRepository(\n+      TileDownloadWorkManager tileDownloadWorkManager,\n+      LocalDataStore localDataStore,\n+      GeoJsonParser geoJsonParser,\n+      Context context,\n+      OfflineUuidGenerator uuidGenerator) {\n+    this.tileDownloadWorkManager = tileDownloadWorkManager;\n+    this.localDataStore = localDataStore;\n+    this.geoJsonParser = geoJsonParser;\n+    this.context = context;\n+    this.uuidGenerator = uuidGenerator;\n+  }\n+\n+  private Completable enqueueTileDownloads(OfflineArea area) {\n+\n+    File jsonSource = new File(context.getFilesDir(), Config.GEO_JSON_SOURCE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e05dee813378997c5015ae7e4edc64b3f9761529"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk0NTU0Mw==", "bodyText": "Done!", "url": "https://github.com/google/ground-android/pull/417#discussion_r400945543", "createdAt": "2020-03-31T14:11:49Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/repository/OfflineAreaRepository.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.repository;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.stream.StreamSupport.stream;\n+\n+import android.content.Context;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.Config;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.OfflineArea.State;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.persistence.geojson.GeoJsonParser;\n+import com.google.android.gnd.persistence.local.LocalDataStore;\n+import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;\n+import com.google.android.gnd.workers.TileDownloadWorkManager;\n+import com.google.common.collect.ImmutableList;\n+import io.reactivex.Completable;\n+import java.io.File;\n+import javax.inject.Inject;\n+import timber.log.Timber;\n+\n+public class OfflineAreaRepository {\n+  private final TileDownloadWorkManager tileDownloadWorkManager;\n+  private final LocalDataStore localDataStore;\n+  private final GeoJsonParser geoJsonParser;\n+  private final Context context;\n+\n+  private static final String TAG = OfflineAreaRepository.class.getSimpleName();\n+  private final OfflineUuidGenerator uuidGenerator;\n+\n+  @Inject\n+  public OfflineAreaRepository(\n+      TileDownloadWorkManager tileDownloadWorkManager,\n+      LocalDataStore localDataStore,\n+      GeoJsonParser geoJsonParser,\n+      Context context,\n+      OfflineUuidGenerator uuidGenerator) {\n+    this.tileDownloadWorkManager = tileDownloadWorkManager;\n+    this.localDataStore = localDataStore;\n+    this.geoJsonParser = geoJsonParser;\n+    this.context = context;\n+    this.uuidGenerator = uuidGenerator;\n+  }\n+\n+  private Completable enqueueTileDownloads(OfflineArea area) {\n+\n+    File jsonSource = new File(context.getFilesDir(), Config.GEO_JSON_SOURCE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA3OTc5MQ=="}, "originalCommit": {"oid": "e05dee813378997c5015ae7e4edc64b3f9761529"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk1MTQ5MQ==", "bodyText": "be912f6", "url": "https://github.com/google/ground-android/pull/417#discussion_r400951491", "createdAt": "2020-03-31T14:19:24Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/repository/OfflineAreaRepository.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.repository;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.stream.StreamSupport.stream;\n+\n+import android.content.Context;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.Config;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.OfflineArea.State;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.persistence.geojson.GeoJsonParser;\n+import com.google.android.gnd.persistence.local.LocalDataStore;\n+import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;\n+import com.google.android.gnd.workers.TileDownloadWorkManager;\n+import com.google.common.collect.ImmutableList;\n+import io.reactivex.Completable;\n+import java.io.File;\n+import javax.inject.Inject;\n+import timber.log.Timber;\n+\n+public class OfflineAreaRepository {\n+  private final TileDownloadWorkManager tileDownloadWorkManager;\n+  private final LocalDataStore localDataStore;\n+  private final GeoJsonParser geoJsonParser;\n+  private final Context context;\n+\n+  private static final String TAG = OfflineAreaRepository.class.getSimpleName();\n+  private final OfflineUuidGenerator uuidGenerator;\n+\n+  @Inject\n+  public OfflineAreaRepository(\n+      TileDownloadWorkManager tileDownloadWorkManager,\n+      LocalDataStore localDataStore,\n+      GeoJsonParser geoJsonParser,\n+      Context context,\n+      OfflineUuidGenerator uuidGenerator) {\n+    this.tileDownloadWorkManager = tileDownloadWorkManager;\n+    this.localDataStore = localDataStore;\n+    this.geoJsonParser = geoJsonParser;\n+    this.context = context;\n+    this.uuidGenerator = uuidGenerator;\n+  }\n+\n+  private Completable enqueueTileDownloads(OfflineArea area) {\n+\n+    File jsonSource = new File(context.getFilesDir(), Config.GEO_JSON_SOURCE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA3OTc5MQ=="}, "originalCommit": {"oid": "e05dee813378997c5015ae7e4edc64b3f9761529"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDE1MzU4OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/Config.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzozOToxOVrOF8mApw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNDo1OTo1NVrOF-aHCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4MTYzOQ==", "bodyText": "Can source be omitted from the comments? I'm guessing that the settings are generic and don't have anything specific to do with the source or destination. Also, then GEO_JSON_CONFIG_FILENAME.\nThoughts?", "url": "https://github.com/google/ground-android/pull/417#discussion_r399081639", "createdAt": "2020-03-27T07:39:19Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/Config.java", "diffHunk": "@@ -30,4 +30,7 @@\n \n   // Photos\n   public static final String PHOTO_EXT = \".jpg\";\n+\n+  // Local geojson source settings.\n+  public static final String GEO_JSON_SOURCE = \"gnd-geojson.json\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e05dee813378997c5015ae7e4edc64b3f9761529"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk1MzA4NQ==", "bodyText": "I went with source because it's possible that we'll use a URL in the future instead of a file on the device...maybe just GEO_JSON would suffice with a more detailed comment?", "url": "https://github.com/google/ground-android/pull/417#discussion_r400953085", "createdAt": "2020-03-31T14:21:19Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/Config.java", "diffHunk": "@@ -30,4 +30,7 @@\n \n   // Photos\n   public static final String PHOTO_EXT = \".jpg\";\n+\n+  // Local geojson source settings.\n+  public static final String GEO_JSON_SOURCE = \"gnd-geojson.json\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4MTYzOQ=="}, "originalCommit": {"oid": "e05dee813378997c5015ae7e4edc64b3f9761529"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk4MzgxOQ==", "bodyText": "e4a770b -- went with GEO_JSON and added additional commentary.", "url": "https://github.com/google/ground-android/pull/417#discussion_r400983819", "createdAt": "2020-03-31T14:59:55Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/Config.java", "diffHunk": "@@ -30,4 +30,7 @@\n \n   // Photos\n   public static final String PHOTO_EXT = \".jpg\";\n+\n+  // Local geojson source settings.\n+  public static final String GEO_JSON_SOURCE = \"gnd-geojson.json\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4MTYzOQ=="}, "originalCommit": {"oid": "e05dee813378997c5015ae7e4edc64b3f9761529"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDE4NjU5OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/repository/OfflineAreaRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzo1MjoyMVrOF8mUWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNDoxOTowM1rOF-YHuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4NjY4Mg==", "bodyText": "For consistency, please rename viewport to bounds", "url": "https://github.com/google/ground-android/pull/417#discussion_r399086682", "createdAt": "2020-03-27T07:52:21Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/repository/OfflineAreaRepository.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.repository;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.stream.StreamSupport.stream;\n+\n+import android.content.Context;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.Config;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.OfflineArea.State;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.persistence.geojson.GeoJsonParser;\n+import com.google.android.gnd.persistence.local.LocalDataStore;\n+import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;\n+import com.google.android.gnd.workers.TileDownloadWorkManager;\n+import com.google.common.collect.ImmutableList;\n+import io.reactivex.Completable;\n+import java.io.File;\n+import javax.inject.Inject;\n+import timber.log.Timber;\n+\n+public class OfflineAreaRepository {\n+  private final TileDownloadWorkManager tileDownloadWorkManager;\n+  private final LocalDataStore localDataStore;\n+  private final GeoJsonParser geoJsonParser;\n+  private final Context context;\n+\n+  private static final String TAG = OfflineAreaRepository.class.getSimpleName();\n+  private final OfflineUuidGenerator uuidGenerator;\n+\n+  @Inject\n+  public OfflineAreaRepository(\n+      TileDownloadWorkManager tileDownloadWorkManager,\n+      LocalDataStore localDataStore,\n+      GeoJsonParser geoJsonParser,\n+      Context context,\n+      OfflineUuidGenerator uuidGenerator) {\n+    this.tileDownloadWorkManager = tileDownloadWorkManager;\n+    this.localDataStore = localDataStore;\n+    this.geoJsonParser = geoJsonParser;\n+    this.context = context;\n+    this.uuidGenerator = uuidGenerator;\n+  }\n+\n+  private Completable enqueueTileDownloads(OfflineArea area) {\n+\n+    File jsonSource = new File(context.getFilesDir(), Config.GEO_JSON_SOURCE);\n+\n+    ImmutableList<Tile> tiles = geoJsonParser.intersectingTiles(area.getBounds(), jsonSource);\n+\n+    return localDataStore\n+        .insertOrUpdateOfflineArea(area.toBuilder().setState(State.IN_PROGRESS).build())\n+        .andThen(\n+            Completable.merge(\n+                stream(tiles.asList())\n+                    .map(localDataStore::insertOrUpdateTile)\n+                    .collect(toImmutableList())))\n+        .doOnError(__ -> Timber.d(\"failed to add/update a tile in the database\"))\n+        .andThen(tileDownloadWorkManager.enqueueTileDownloadWorker());\n+  }\n+\n+  public Completable addAreaAndEnqueue(LatLngBounds viewport) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e05dee813378997c5015ae7e4edc64b3f9761529"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk1MTIyNw==", "bodyText": "be912f6", "url": "https://github.com/google/ground-android/pull/417#discussion_r400951227", "createdAt": "2020-03-31T14:19:03Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/repository/OfflineAreaRepository.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.repository;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.stream.StreamSupport.stream;\n+\n+import android.content.Context;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.Config;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.OfflineArea.State;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.persistence.geojson.GeoJsonParser;\n+import com.google.android.gnd.persistence.local.LocalDataStore;\n+import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;\n+import com.google.android.gnd.workers.TileDownloadWorkManager;\n+import com.google.common.collect.ImmutableList;\n+import io.reactivex.Completable;\n+import java.io.File;\n+import javax.inject.Inject;\n+import timber.log.Timber;\n+\n+public class OfflineAreaRepository {\n+  private final TileDownloadWorkManager tileDownloadWorkManager;\n+  private final LocalDataStore localDataStore;\n+  private final GeoJsonParser geoJsonParser;\n+  private final Context context;\n+\n+  private static final String TAG = OfflineAreaRepository.class.getSimpleName();\n+  private final OfflineUuidGenerator uuidGenerator;\n+\n+  @Inject\n+  public OfflineAreaRepository(\n+      TileDownloadWorkManager tileDownloadWorkManager,\n+      LocalDataStore localDataStore,\n+      GeoJsonParser geoJsonParser,\n+      Context context,\n+      OfflineUuidGenerator uuidGenerator) {\n+    this.tileDownloadWorkManager = tileDownloadWorkManager;\n+    this.localDataStore = localDataStore;\n+    this.geoJsonParser = geoJsonParser;\n+    this.context = context;\n+    this.uuidGenerator = uuidGenerator;\n+  }\n+\n+  private Completable enqueueTileDownloads(OfflineArea area) {\n+\n+    File jsonSource = new File(context.getFilesDir(), Config.GEO_JSON_SOURCE);\n+\n+    ImmutableList<Tile> tiles = geoJsonParser.intersectingTiles(area.getBounds(), jsonSource);\n+\n+    return localDataStore\n+        .insertOrUpdateOfflineArea(area.toBuilder().setState(State.IN_PROGRESS).build())\n+        .andThen(\n+            Completable.merge(\n+                stream(tiles.asList())\n+                    .map(localDataStore::insertOrUpdateTile)\n+                    .collect(toImmutableList())))\n+        .doOnError(__ -> Timber.d(\"failed to add/update a tile in the database\"))\n+        .andThen(tileDownloadWorkManager.enqueueTileDownloadWorker());\n+  }\n+\n+  public Completable addAreaAndEnqueue(LatLngBounds viewport) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4NjY4Mg=="}, "originalCommit": {"oid": "e05dee813378997c5015ae7e4edc64b3f9761529"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDE5MzM2OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/home/mapcontainer/MapContainerFragment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzo1NDo0N1rOF8mYXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNDoyOTowMFrOF-Ymxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4NzcwOA==", "bodyText": "Timber.v(\"Update camera: %s\", update);", "url": "https://github.com/google/ground-android/pull/417#discussion_r399087708", "createdAt": "2020-03-27T07:54:47Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/home/mapcontainer/MapContainerFragment.java", "diffHunk": "@@ -213,7 +214,7 @@ private void showUserActionFailureMessage(int resId) {\n   }\n \n   private void onCameraUpdate(MapContainerViewModel.CameraUpdate update, MapAdapter map) {\n-    Log.v(TAG, \"Update camera: \" + update);\n+    Timber.tag(TAG).v(\"Update camera: %s\", update);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e05dee813378997c5015ae7e4edc64b3f9761529"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk1OTE3NA==", "bodyText": "9ff3737", "url": "https://github.com/google/ground-android/pull/417#discussion_r400959174", "createdAt": "2020-03-31T14:29:00Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/home/mapcontainer/MapContainerFragment.java", "diffHunk": "@@ -213,7 +214,7 @@ private void showUserActionFailureMessage(int resId) {\n   }\n \n   private void onCameraUpdate(MapContainerViewModel.CameraUpdate update, MapAdapter map) {\n-    Log.v(TAG, \"Update camera: \" + update);\n+    Timber.tag(TAG).v(\"Update camera: %s\", update);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4NzcwOA=="}, "originalCommit": {"oid": "e05dee813378997c5015ae7e4edc64b3f9761529"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDE5ODIwOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/map/gms/GoogleMapsMapAdapter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzo1NjozNVrOF8mbTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNDo0Nzo0M1rOF-ZgWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4ODQ2Mw==", "bodyText": "Can we use try-with-resources for autoclosing the handler?", "url": "https://github.com/google/ground-android/pull/417#discussion_r399088463", "createdAt": "2020-03-27T07:56:35Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/map/gms/GoogleMapsMapAdapter.java", "diffHunk": "@@ -234,4 +236,11 @@ private void onCameraMove() {\n   public LatLngBounds getViewport() {\n     return map.getProjection().getVisibleRegion().latLngBounds;\n   }\n+\n+  @Override\n+  public void renderTileOverlay() {\n+    MapBoxOfflineTileProvider tileProvider = new MapBoxOfflineTileProvider(context.getFilesDir());\n+    map.addTileOverlay(new TileOverlayOptions().tileProvider(tileProvider));\n+    tileProvider.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e05dee813378997c5015ae7e4edc64b3f9761529"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk3MjAyOA==", "bodyText": "Indeed we can! It implements Closable.", "url": "https://github.com/google/ground-android/pull/417#discussion_r400972028", "createdAt": "2020-03-31T14:45:22Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/map/gms/GoogleMapsMapAdapter.java", "diffHunk": "@@ -234,4 +236,11 @@ private void onCameraMove() {\n   public LatLngBounds getViewport() {\n     return map.getProjection().getVisibleRegion().latLngBounds;\n   }\n+\n+  @Override\n+  public void renderTileOverlay() {\n+    MapBoxOfflineTileProvider tileProvider = new MapBoxOfflineTileProvider(context.getFilesDir());\n+    map.addTileOverlay(new TileOverlayOptions().tileProvider(tileProvider));\n+    tileProvider.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4ODQ2Mw=="}, "originalCommit": {"oid": "e05dee813378997c5015ae7e4edc64b3f9761529"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk3MzkxMw==", "bodyText": "6eed868", "url": "https://github.com/google/ground-android/pull/417#discussion_r400973913", "createdAt": "2020-03-31T14:47:43Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/map/gms/GoogleMapsMapAdapter.java", "diffHunk": "@@ -234,4 +236,11 @@ private void onCameraMove() {\n   public LatLngBounds getViewport() {\n     return map.getProjection().getVisibleRegion().latLngBounds;\n   }\n+\n+  @Override\n+  public void renderTileOverlay() {\n+    MapBoxOfflineTileProvider tileProvider = new MapBoxOfflineTileProvider(context.getFilesDir());\n+    map.addTileOverlay(new TileOverlayOptions().tileProvider(tileProvider));\n+    tileProvider.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4ODQ2Mw=="}, "originalCommit": {"oid": "e05dee813378997c5015ae7e4edc64b3f9761529"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDIxMTM2OnYy", "diffSide": "RIGHT", "path": "third_party/android-gmaps-addons/src/com/cocoahero/android/gmaps/addons/mapbox/MapBoxOfflineTileProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwODowMToxNVrOF8mjHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNDo1MDowN1rOF-ZoNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA5MDQ2MA==", "bodyText": "We should limit the usage of single-variable names to standard usages. (e.g. i, j, k for counters, e for exceptions, etc.).\nPlease rename this to file", "url": "https://github.com/google/ground-android/pull/417#discussion_r399090460", "createdAt": "2020-03-27T08:01:15Z", "author": {"login": "shobhitagarwal1612"}, "path": "third_party/android-gmaps-addons/src/com/cocoahero/android/gmaps/addons/mapbox/MapBoxOfflineTileProvider.java", "diffHunk": "@@ -47,6 +47,18 @@ public MapBoxOfflineTileProvider(String pathToFile) {\n     @Override\n     public Tile getTile(int x, int y, int z) {\n         Tile tile = NO_TILE;\n+        String pathToFile = this.basepath + \"/\" + z + \"-\" + x + \"-\" + y + \".mbtiles\";\n+        File f = new File(pathToFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e05dee813378997c5015ae7e4edc64b3f9761529"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk3NTkyNQ==", "bodyText": "done! b461845", "url": "https://github.com/google/ground-android/pull/417#discussion_r400975925", "createdAt": "2020-03-31T14:50:07Z", "author": {"login": "scolsen"}, "path": "third_party/android-gmaps-addons/src/com/cocoahero/android/gmaps/addons/mapbox/MapBoxOfflineTileProvider.java", "diffHunk": "@@ -47,6 +47,18 @@ public MapBoxOfflineTileProvider(String pathToFile) {\n     @Override\n     public Tile getTile(int x, int y, int z) {\n         Tile tile = NO_TILE;\n+        String pathToFile = this.basepath + \"/\" + z + \"-\" + x + \"-\" + y + \".mbtiles\";\n+        File f = new File(pathToFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA5MDQ2MA=="}, "originalCommit": {"oid": "e05dee813378997c5015ae7e4edc64b3f9761529"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDIxNjQ5OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/repository/OfflineAreaRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwODowMzoyM1rOF8mmSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNDoxODo1MFrOF-YHBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA5MTI3NQ==", "bodyText": "Please use Timber.e for errors", "url": "https://github.com/google/ground-android/pull/417#discussion_r399091275", "createdAt": "2020-03-27T08:03:23Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/repository/OfflineAreaRepository.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.repository;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.stream.StreamSupport.stream;\n+\n+import android.content.Context;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.Config;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.OfflineArea.State;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.persistence.geojson.GeoJsonParser;\n+import com.google.android.gnd.persistence.local.LocalDataStore;\n+import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;\n+import com.google.android.gnd.workers.TileDownloadWorkManager;\n+import com.google.common.collect.ImmutableList;\n+import io.reactivex.Completable;\n+import java.io.File;\n+import javax.inject.Inject;\n+import timber.log.Timber;\n+\n+public class OfflineAreaRepository {\n+  private final TileDownloadWorkManager tileDownloadWorkManager;\n+  private final LocalDataStore localDataStore;\n+  private final GeoJsonParser geoJsonParser;\n+  private final Context context;\n+\n+  private static final String TAG = OfflineAreaRepository.class.getSimpleName();\n+  private final OfflineUuidGenerator uuidGenerator;\n+\n+  @Inject\n+  public OfflineAreaRepository(\n+      TileDownloadWorkManager tileDownloadWorkManager,\n+      LocalDataStore localDataStore,\n+      GeoJsonParser geoJsonParser,\n+      Context context,\n+      OfflineUuidGenerator uuidGenerator) {\n+    this.tileDownloadWorkManager = tileDownloadWorkManager;\n+    this.localDataStore = localDataStore;\n+    this.geoJsonParser = geoJsonParser;\n+    this.context = context;\n+    this.uuidGenerator = uuidGenerator;\n+  }\n+\n+  private Completable enqueueTileDownloads(OfflineArea area) {\n+\n+    File jsonSource = new File(context.getFilesDir(), Config.GEO_JSON_SOURCE);\n+\n+    ImmutableList<Tile> tiles = geoJsonParser.intersectingTiles(area.getBounds(), jsonSource);\n+\n+    return localDataStore\n+        .insertOrUpdateOfflineArea(area.toBuilder().setState(State.IN_PROGRESS).build())\n+        .andThen(\n+            Completable.merge(\n+                stream(tiles.asList())\n+                    .map(localDataStore::insertOrUpdateTile)\n+                    .collect(toImmutableList())))\n+        .doOnError(__ -> Timber.d(\"failed to add/update a tile in the database\"))\n+        .andThen(tileDownloadWorkManager.enqueueTileDownloadWorker());\n+  }\n+\n+  public Completable addAreaAndEnqueue(LatLngBounds viewport) {\n+    OfflineArea offlineArea =\n+        OfflineArea.newBuilder()\n+            .setBounds(viewport)\n+            .setId(uuidGenerator.generateUuid())\n+            .setState(State.PENDING)\n+            .build();\n+\n+    return localDataStore\n+        .insertOrUpdateOfflineArea(offlineArea)\n+        .doOnError(__ -> Timber.d(\"failed to add/update offline area in the database\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e05dee813378997c5015ae7e4edc64b3f9761529"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk1MTA0NA==", "bodyText": "be912f6", "url": "https://github.com/google/ground-android/pull/417#discussion_r400951044", "createdAt": "2020-03-31T14:18:50Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/repository/OfflineAreaRepository.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.repository;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.stream.StreamSupport.stream;\n+\n+import android.content.Context;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.Config;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.OfflineArea.State;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.persistence.geojson.GeoJsonParser;\n+import com.google.android.gnd.persistence.local.LocalDataStore;\n+import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;\n+import com.google.android.gnd.workers.TileDownloadWorkManager;\n+import com.google.common.collect.ImmutableList;\n+import io.reactivex.Completable;\n+import java.io.File;\n+import javax.inject.Inject;\n+import timber.log.Timber;\n+\n+public class OfflineAreaRepository {\n+  private final TileDownloadWorkManager tileDownloadWorkManager;\n+  private final LocalDataStore localDataStore;\n+  private final GeoJsonParser geoJsonParser;\n+  private final Context context;\n+\n+  private static final String TAG = OfflineAreaRepository.class.getSimpleName();\n+  private final OfflineUuidGenerator uuidGenerator;\n+\n+  @Inject\n+  public OfflineAreaRepository(\n+      TileDownloadWorkManager tileDownloadWorkManager,\n+      LocalDataStore localDataStore,\n+      GeoJsonParser geoJsonParser,\n+      Context context,\n+      OfflineUuidGenerator uuidGenerator) {\n+    this.tileDownloadWorkManager = tileDownloadWorkManager;\n+    this.localDataStore = localDataStore;\n+    this.geoJsonParser = geoJsonParser;\n+    this.context = context;\n+    this.uuidGenerator = uuidGenerator;\n+  }\n+\n+  private Completable enqueueTileDownloads(OfflineArea area) {\n+\n+    File jsonSource = new File(context.getFilesDir(), Config.GEO_JSON_SOURCE);\n+\n+    ImmutableList<Tile> tiles = geoJsonParser.intersectingTiles(area.getBounds(), jsonSource);\n+\n+    return localDataStore\n+        .insertOrUpdateOfflineArea(area.toBuilder().setState(State.IN_PROGRESS).build())\n+        .andThen(\n+            Completable.merge(\n+                stream(tiles.asList())\n+                    .map(localDataStore::insertOrUpdateTile)\n+                    .collect(toImmutableList())))\n+        .doOnError(__ -> Timber.d(\"failed to add/update a tile in the database\"))\n+        .andThen(tileDownloadWorkManager.enqueueTileDownloadWorker());\n+  }\n+\n+  public Completable addAreaAndEnqueue(LatLngBounds viewport) {\n+    OfflineArea offlineArea =\n+        OfflineArea.newBuilder()\n+            .setBounds(viewport)\n+            .setId(uuidGenerator.generateUuid())\n+            .setState(State.PENDING)\n+            .build();\n+\n+    return localDataStore\n+        .insertOrUpdateOfflineArea(offlineArea)\n+        .doOnError(__ -> Timber.d(\"failed to add/update offline area in the database\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA5MTI3NQ=="}, "originalCommit": {"oid": "e05dee813378997c5015ae7e4edc64b3f9761529"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzMwNzI4OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/repository/OfflineAreaRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzoxNjozMFrOF-gCSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODoyNDoyNlrOF-ikSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA4MDkwNQ==", "bodyText": "Can we use Timber.e here?", "url": "https://github.com/google/ground-android/pull/417#discussion_r401080905", "createdAt": "2020-03-31T17:16:30Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/repository/OfflineAreaRepository.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.repository;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.stream.StreamSupport.stream;\n+\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.Config;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.OfflineArea.State;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.persistence.geojson.GeoJsonParser;\n+import com.google.android.gnd.persistence.local.LocalDataStore;\n+import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;\n+import com.google.android.gnd.ui.util.FileUtil;\n+import com.google.android.gnd.workers.TileDownloadWorkManager;\n+import com.google.common.collect.ImmutableList;\n+import io.reactivex.Completable;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import javax.inject.Inject;\n+import timber.log.Timber;\n+\n+public class OfflineAreaRepository {\n+  private final TileDownloadWorkManager tileDownloadWorkManager;\n+  private final LocalDataStore localDataStore;\n+  private final GeoJsonParser geoJsonParser;\n+  private final FileUtil fileUtil;\n+\n+  private final OfflineUuidGenerator uuidGenerator;\n+\n+  @Inject\n+  public OfflineAreaRepository(\n+      TileDownloadWorkManager tileDownloadWorkManager,\n+      LocalDataStore localDataStore,\n+      GeoJsonParser geoJsonParser,\n+      OfflineUuidGenerator uuidGenerator,\n+      FileUtil fileUtil) {\n+    this.tileDownloadWorkManager = tileDownloadWorkManager;\n+    this.localDataStore = localDataStore;\n+    this.geoJsonParser = geoJsonParser;\n+    this.uuidGenerator = uuidGenerator;\n+    this.fileUtil = fileUtil;\n+  }\n+\n+  private Completable enqueueTileDownloads(OfflineArea area) {\n+    try {\n+      File jsonSource = fileUtil.getFile(Config.GEO_JSON);\n+\n+      ImmutableList<Tile> tiles = geoJsonParser.intersectingTiles(area.getBounds(), jsonSource);\n+\n+      return localDataStore\n+          .insertOrUpdateOfflineArea(area.toBuilder().setState(State.IN_PROGRESS).build())\n+          .andThen(\n+              Completable.merge(\n+                  stream(tiles.asList())\n+                      .map(localDataStore::insertOrUpdateTile)\n+                      .collect(toImmutableList())))\n+          .doOnError(__ -> Timber.d(\"failed to add/update a tile in the database\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4436f033b09c3c1e210557d905109a77b00255b6"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyMjM3OQ==", "bodyText": "Nice catch, thanks! 95827ce", "url": "https://github.com/google/ground-android/pull/417#discussion_r401122379", "createdAt": "2020-03-31T18:24:26Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/repository/OfflineAreaRepository.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.repository;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.stream.StreamSupport.stream;\n+\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.Config;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.OfflineArea.State;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.persistence.geojson.GeoJsonParser;\n+import com.google.android.gnd.persistence.local.LocalDataStore;\n+import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;\n+import com.google.android.gnd.ui.util.FileUtil;\n+import com.google.android.gnd.workers.TileDownloadWorkManager;\n+import com.google.common.collect.ImmutableList;\n+import io.reactivex.Completable;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import javax.inject.Inject;\n+import timber.log.Timber;\n+\n+public class OfflineAreaRepository {\n+  private final TileDownloadWorkManager tileDownloadWorkManager;\n+  private final LocalDataStore localDataStore;\n+  private final GeoJsonParser geoJsonParser;\n+  private final FileUtil fileUtil;\n+\n+  private final OfflineUuidGenerator uuidGenerator;\n+\n+  @Inject\n+  public OfflineAreaRepository(\n+      TileDownloadWorkManager tileDownloadWorkManager,\n+      LocalDataStore localDataStore,\n+      GeoJsonParser geoJsonParser,\n+      OfflineUuidGenerator uuidGenerator,\n+      FileUtil fileUtil) {\n+    this.tileDownloadWorkManager = tileDownloadWorkManager;\n+    this.localDataStore = localDataStore;\n+    this.geoJsonParser = geoJsonParser;\n+    this.uuidGenerator = uuidGenerator;\n+    this.fileUtil = fileUtil;\n+  }\n+\n+  private Completable enqueueTileDownloads(OfflineArea area) {\n+    try {\n+      File jsonSource = fileUtil.getFile(Config.GEO_JSON);\n+\n+      ImmutableList<Tile> tiles = geoJsonParser.intersectingTiles(area.getBounds(), jsonSource);\n+\n+      return localDataStore\n+          .insertOrUpdateOfflineArea(area.toBuilder().setState(State.IN_PROGRESS).build())\n+          .andThen(\n+              Completable.merge(\n+                  stream(tiles.asList())\n+                      .map(localDataStore::insertOrUpdateTile)\n+                      .collect(toImmutableList())))\n+          .doOnError(__ -> Timber.d(\"failed to add/update a tile in the database\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA4MDkwNQ=="}, "originalCommit": {"oid": "4436f033b09c3c1e210557d905109a77b00255b6"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzMxODYwOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/repository/OfflineAreaRepository.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzoxOToxMlrOF-gJGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOToyMzozOFrOF-ku_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA4MjY0OA==", "bodyText": "I'm guessing that FileNotFoundException can only be raised while attempting to load the json file, right? If yes, then we should only wrap the first line of the method with try-catch. Sorry, I somehow missed this earlier.", "url": "https://github.com/google/ground-android/pull/417#discussion_r401082648", "createdAt": "2020-03-31T17:19:12Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/repository/OfflineAreaRepository.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.repository;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.stream.StreamSupport.stream;\n+\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.Config;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.OfflineArea.State;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.persistence.geojson.GeoJsonParser;\n+import com.google.android.gnd.persistence.local.LocalDataStore;\n+import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;\n+import com.google.android.gnd.ui.util.FileUtil;\n+import com.google.android.gnd.workers.TileDownloadWorkManager;\n+import com.google.common.collect.ImmutableList;\n+import io.reactivex.Completable;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import javax.inject.Inject;\n+import timber.log.Timber;\n+\n+public class OfflineAreaRepository {\n+  private final TileDownloadWorkManager tileDownloadWorkManager;\n+  private final LocalDataStore localDataStore;\n+  private final GeoJsonParser geoJsonParser;\n+  private final FileUtil fileUtil;\n+\n+  private final OfflineUuidGenerator uuidGenerator;\n+\n+  @Inject\n+  public OfflineAreaRepository(\n+      TileDownloadWorkManager tileDownloadWorkManager,\n+      LocalDataStore localDataStore,\n+      GeoJsonParser geoJsonParser,\n+      OfflineUuidGenerator uuidGenerator,\n+      FileUtil fileUtil) {\n+    this.tileDownloadWorkManager = tileDownloadWorkManager;\n+    this.localDataStore = localDataStore;\n+    this.geoJsonParser = geoJsonParser;\n+    this.uuidGenerator = uuidGenerator;\n+    this.fileUtil = fileUtil;\n+  }\n+\n+  private Completable enqueueTileDownloads(OfflineArea area) {\n+    try {\n+      File jsonSource = fileUtil.getFile(Config.GEO_JSON);\n+\n+      ImmutableList<Tile> tiles = geoJsonParser.intersectingTiles(area.getBounds(), jsonSource);\n+\n+      return localDataStore\n+          .insertOrUpdateOfflineArea(area.toBuilder().setState(State.IN_PROGRESS).build())\n+          .andThen(\n+              Completable.merge(\n+                  stream(tiles.asList())\n+                      .map(localDataStore::insertOrUpdateTile)\n+                      .collect(toImmutableList())))\n+          .doOnError(__ -> Timber.d(\"failed to add/update a tile in the database\"))\n+          .andThen(tileDownloadWorkManager.enqueueTileDownloadWorker());\n+    } catch (FileNotFoundException e) {\n+      return Completable.error(e);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4436f033b09c3c1e210557d905109a77b00255b6"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyMzQ0OQ==", "bodyText": "That would make sense, but as far as I can tell, Java scopes declarations to try blocks, so any code that needs to use the declared variable has to also be wrapped in the block\u2014to restrict the block to the assignment only we'd have to separate the declaration from the assignment which would result in some extra checks, I think, in this case....I'm not super familiar w/ Java though, is there a common idiom we can use to get around this?", "url": "https://github.com/google/ground-android/pull/417#discussion_r401123449", "createdAt": "2020-03-31T18:26:15Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/repository/OfflineAreaRepository.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.repository;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.stream.StreamSupport.stream;\n+\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.Config;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.OfflineArea.State;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.persistence.geojson.GeoJsonParser;\n+import com.google.android.gnd.persistence.local.LocalDataStore;\n+import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;\n+import com.google.android.gnd.ui.util.FileUtil;\n+import com.google.android.gnd.workers.TileDownloadWorkManager;\n+import com.google.common.collect.ImmutableList;\n+import io.reactivex.Completable;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import javax.inject.Inject;\n+import timber.log.Timber;\n+\n+public class OfflineAreaRepository {\n+  private final TileDownloadWorkManager tileDownloadWorkManager;\n+  private final LocalDataStore localDataStore;\n+  private final GeoJsonParser geoJsonParser;\n+  private final FileUtil fileUtil;\n+\n+  private final OfflineUuidGenerator uuidGenerator;\n+\n+  @Inject\n+  public OfflineAreaRepository(\n+      TileDownloadWorkManager tileDownloadWorkManager,\n+      LocalDataStore localDataStore,\n+      GeoJsonParser geoJsonParser,\n+      OfflineUuidGenerator uuidGenerator,\n+      FileUtil fileUtil) {\n+    this.tileDownloadWorkManager = tileDownloadWorkManager;\n+    this.localDataStore = localDataStore;\n+    this.geoJsonParser = geoJsonParser;\n+    this.uuidGenerator = uuidGenerator;\n+    this.fileUtil = fileUtil;\n+  }\n+\n+  private Completable enqueueTileDownloads(OfflineArea area) {\n+    try {\n+      File jsonSource = fileUtil.getFile(Config.GEO_JSON);\n+\n+      ImmutableList<Tile> tiles = geoJsonParser.intersectingTiles(area.getBounds(), jsonSource);\n+\n+      return localDataStore\n+          .insertOrUpdateOfflineArea(area.toBuilder().setState(State.IN_PROGRESS).build())\n+          .andThen(\n+              Completable.merge(\n+                  stream(tiles.asList())\n+                      .map(localDataStore::insertOrUpdateTile)\n+                      .collect(toImmutableList())))\n+          .doOnError(__ -> Timber.d(\"failed to add/update a tile in the database\"))\n+          .andThen(tileDownloadWorkManager.enqueueTileDownloadWorker());\n+    } catch (FileNotFoundException e) {\n+      return Completable.error(e);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA4MjY0OA=="}, "originalCommit": {"oid": "4436f033b09c3c1e210557d905109a77b00255b6"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0NzM3Mg==", "bodyText": "This should work\n  private Completable enqueueTileDownloads(OfflineArea area) {\n    File jsonSource;\n    try {\n      jsonSource = fileUtil.getFile(Config.GEO_JSON);\n    } catch (FileNotFoundException e) {\n      return Completable.error(e);\n    }\n\n    ImmutableList<Tile> tiles = geoJsonParser.intersectingTiles(area.getBounds(), jsonSource);\n    return localDataStore\n        .insertOrUpdateOfflineArea(area.toBuilder().setState(State.IN_PROGRESS).build())\n        .andThen(\n            Completable.merge(\n                stream(tiles.asList())\n                    .map(localDataStore::insertOrUpdateTile)\n                    .collect(toImmutableList())))\n        .doOnError(__ -> Timber.e(\"failed to add/update a tile in the database\"))\n        .andThen(tileDownloadWorkManager.enqueueTileDownloadWorker());\n  }", "url": "https://github.com/google/ground-android/pull/417#discussion_r401147372", "createdAt": "2020-03-31T19:05:05Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/repository/OfflineAreaRepository.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.repository;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.stream.StreamSupport.stream;\n+\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.Config;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.OfflineArea.State;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.persistence.geojson.GeoJsonParser;\n+import com.google.android.gnd.persistence.local.LocalDataStore;\n+import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;\n+import com.google.android.gnd.ui.util.FileUtil;\n+import com.google.android.gnd.workers.TileDownloadWorkManager;\n+import com.google.common.collect.ImmutableList;\n+import io.reactivex.Completable;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import javax.inject.Inject;\n+import timber.log.Timber;\n+\n+public class OfflineAreaRepository {\n+  private final TileDownloadWorkManager tileDownloadWorkManager;\n+  private final LocalDataStore localDataStore;\n+  private final GeoJsonParser geoJsonParser;\n+  private final FileUtil fileUtil;\n+\n+  private final OfflineUuidGenerator uuidGenerator;\n+\n+  @Inject\n+  public OfflineAreaRepository(\n+      TileDownloadWorkManager tileDownloadWorkManager,\n+      LocalDataStore localDataStore,\n+      GeoJsonParser geoJsonParser,\n+      OfflineUuidGenerator uuidGenerator,\n+      FileUtil fileUtil) {\n+    this.tileDownloadWorkManager = tileDownloadWorkManager;\n+    this.localDataStore = localDataStore;\n+    this.geoJsonParser = geoJsonParser;\n+    this.uuidGenerator = uuidGenerator;\n+    this.fileUtil = fileUtil;\n+  }\n+\n+  private Completable enqueueTileDownloads(OfflineArea area) {\n+    try {\n+      File jsonSource = fileUtil.getFile(Config.GEO_JSON);\n+\n+      ImmutableList<Tile> tiles = geoJsonParser.intersectingTiles(area.getBounds(), jsonSource);\n+\n+      return localDataStore\n+          .insertOrUpdateOfflineArea(area.toBuilder().setState(State.IN_PROGRESS).build())\n+          .andThen(\n+              Completable.merge(\n+                  stream(tiles.asList())\n+                      .map(localDataStore::insertOrUpdateTile)\n+                      .collect(toImmutableList())))\n+          .doOnError(__ -> Timber.d(\"failed to add/update a tile in the database\"))\n+          .andThen(tileDownloadWorkManager.enqueueTileDownloadWorker());\n+    } catch (FileNotFoundException e) {\n+      return Completable.error(e);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA4MjY0OA=="}, "originalCommit": {"oid": "4436f033b09c3c1e210557d905109a77b00255b6"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1Nzg4Ng==", "bodyText": "ah, duh! Thanks Shobhit!", "url": "https://github.com/google/ground-android/pull/417#discussion_r401157886", "createdAt": "2020-03-31T19:23:38Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/repository/OfflineAreaRepository.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.repository;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.stream.StreamSupport.stream;\n+\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.Config;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.OfflineArea.State;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.persistence.geojson.GeoJsonParser;\n+import com.google.android.gnd.persistence.local.LocalDataStore;\n+import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;\n+import com.google.android.gnd.ui.util.FileUtil;\n+import com.google.android.gnd.workers.TileDownloadWorkManager;\n+import com.google.common.collect.ImmutableList;\n+import io.reactivex.Completable;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import javax.inject.Inject;\n+import timber.log.Timber;\n+\n+public class OfflineAreaRepository {\n+  private final TileDownloadWorkManager tileDownloadWorkManager;\n+  private final LocalDataStore localDataStore;\n+  private final GeoJsonParser geoJsonParser;\n+  private final FileUtil fileUtil;\n+\n+  private final OfflineUuidGenerator uuidGenerator;\n+\n+  @Inject\n+  public OfflineAreaRepository(\n+      TileDownloadWorkManager tileDownloadWorkManager,\n+      LocalDataStore localDataStore,\n+      GeoJsonParser geoJsonParser,\n+      OfflineUuidGenerator uuidGenerator,\n+      FileUtil fileUtil) {\n+    this.tileDownloadWorkManager = tileDownloadWorkManager;\n+    this.localDataStore = localDataStore;\n+    this.geoJsonParser = geoJsonParser;\n+    this.uuidGenerator = uuidGenerator;\n+    this.fileUtil = fileUtil;\n+  }\n+\n+  private Completable enqueueTileDownloads(OfflineArea area) {\n+    try {\n+      File jsonSource = fileUtil.getFile(Config.GEO_JSON);\n+\n+      ImmutableList<Tile> tiles = geoJsonParser.intersectingTiles(area.getBounds(), jsonSource);\n+\n+      return localDataStore\n+          .insertOrUpdateOfflineArea(area.toBuilder().setState(State.IN_PROGRESS).build())\n+          .andThen(\n+              Completable.merge(\n+                  stream(tiles.asList())\n+                      .map(localDataStore::insertOrUpdateTile)\n+                      .collect(toImmutableList())))\n+          .doOnError(__ -> Timber.d(\"failed to add/update a tile in the database\"))\n+          .andThen(tileDownloadWorkManager.enqueueTileDownloadWorker());\n+    } catch (FileNotFoundException e) {\n+      return Completable.error(e);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA4MjY0OA=="}, "originalCommit": {"oid": "4436f033b09c3c1e210557d905109a77b00255b6"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDE5NDU2OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/repository/OfflineAreaRepository.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNTo1Nzo0MlrOGAbm2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDowNDozNVrOGCw2rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEwNTQ5OA==", "bodyText": "This copies the raw file to /data dir each time the function is called. Instead, let's first try to load the file from Config.GEO_JSON and save a copy to data dir only when FileNotFound exception gets raised. That logic should probably be added to getFileFromRawResource() in fileutil\nwdyt?", "url": "https://github.com/google/ground-android/pull/417#discussion_r403105498", "createdAt": "2020-04-03T15:57:42Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/repository/OfflineAreaRepository.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.repository;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.stream.StreamSupport.stream;\n+\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.Config;\n+import com.google.android.gnd.R;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.OfflineArea.State;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.persistence.geojson.GeoJsonParser;\n+import com.google.android.gnd.persistence.local.LocalDataStore;\n+import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;\n+import com.google.android.gnd.ui.util.FileUtil;\n+import com.google.android.gnd.workers.TileDownloadWorkManager;\n+import com.google.common.collect.ImmutableList;\n+import io.reactivex.Completable;\n+import java.io.File;\n+import java.io.IOException;\n+import javax.inject.Inject;\n+import timber.log.Timber;\n+\n+public class OfflineAreaRepository {\n+  private final TileDownloadWorkManager tileDownloadWorkManager;\n+  private final LocalDataStore localDataStore;\n+  private final GeoJsonParser geoJsonParser;\n+  private final FileUtil fileUtil;\n+\n+  private final OfflineUuidGenerator uuidGenerator;\n+\n+  @Inject\n+  public OfflineAreaRepository(\n+      TileDownloadWorkManager tileDownloadWorkManager,\n+      LocalDataStore localDataStore,\n+      GeoJsonParser geoJsonParser,\n+      OfflineUuidGenerator uuidGenerator,\n+      FileUtil fileUtil) {\n+    this.tileDownloadWorkManager = tileDownloadWorkManager;\n+    this.localDataStore = localDataStore;\n+    this.geoJsonParser = geoJsonParser;\n+    this.uuidGenerator = uuidGenerator;\n+    this.fileUtil = fileUtil;\n+  }\n+\n+  private Completable enqueueTileDownloads(OfflineArea area) {\n+    File jsonSource;\n+\n+    try {\n+      jsonSource = fileUtil.getFileFromRawResource(R.raw.gnd_geojson, Config.GEO_JSON);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b8969dca73281d3404ad82a78b7341b681d65f0"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzExOTk0Mg==", "bodyText": "Great point! Will do.", "url": "https://github.com/google/ground-android/pull/417#discussion_r403119942", "createdAt": "2020-04-03T16:17:39Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/repository/OfflineAreaRepository.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.repository;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.stream.StreamSupport.stream;\n+\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.Config;\n+import com.google.android.gnd.R;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.OfflineArea.State;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.persistence.geojson.GeoJsonParser;\n+import com.google.android.gnd.persistence.local.LocalDataStore;\n+import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;\n+import com.google.android.gnd.ui.util.FileUtil;\n+import com.google.android.gnd.workers.TileDownloadWorkManager;\n+import com.google.common.collect.ImmutableList;\n+import io.reactivex.Completable;\n+import java.io.File;\n+import java.io.IOException;\n+import javax.inject.Inject;\n+import timber.log.Timber;\n+\n+public class OfflineAreaRepository {\n+  private final TileDownloadWorkManager tileDownloadWorkManager;\n+  private final LocalDataStore localDataStore;\n+  private final GeoJsonParser geoJsonParser;\n+  private final FileUtil fileUtil;\n+\n+  private final OfflineUuidGenerator uuidGenerator;\n+\n+  @Inject\n+  public OfflineAreaRepository(\n+      TileDownloadWorkManager tileDownloadWorkManager,\n+      LocalDataStore localDataStore,\n+      GeoJsonParser geoJsonParser,\n+      OfflineUuidGenerator uuidGenerator,\n+      FileUtil fileUtil) {\n+    this.tileDownloadWorkManager = tileDownloadWorkManager;\n+    this.localDataStore = localDataStore;\n+    this.geoJsonParser = geoJsonParser;\n+    this.uuidGenerator = uuidGenerator;\n+    this.fileUtil = fileUtil;\n+  }\n+\n+  private Completable enqueueTileDownloads(OfflineArea area) {\n+    File jsonSource;\n+\n+    try {\n+      jsonSource = fileUtil.getFileFromRawResource(R.raw.gnd_geojson, Config.GEO_JSON);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEwNTQ5OA=="}, "originalCommit": {"oid": "6b8969dca73281d3404ad82a78b7341b681d65f0"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1MDc2Ng==", "bodyText": "00dfee8", "url": "https://github.com/google/ground-android/pull/417#discussion_r405550766", "createdAt": "2020-04-08T14:04:35Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/repository/OfflineAreaRepository.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.repository;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.stream.StreamSupport.stream;\n+\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.Config;\n+import com.google.android.gnd.R;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.OfflineArea.State;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.persistence.geojson.GeoJsonParser;\n+import com.google.android.gnd.persistence.local.LocalDataStore;\n+import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;\n+import com.google.android.gnd.ui.util.FileUtil;\n+import com.google.android.gnd.workers.TileDownloadWorkManager;\n+import com.google.common.collect.ImmutableList;\n+import io.reactivex.Completable;\n+import java.io.File;\n+import java.io.IOException;\n+import javax.inject.Inject;\n+import timber.log.Timber;\n+\n+public class OfflineAreaRepository {\n+  private final TileDownloadWorkManager tileDownloadWorkManager;\n+  private final LocalDataStore localDataStore;\n+  private final GeoJsonParser geoJsonParser;\n+  private final FileUtil fileUtil;\n+\n+  private final OfflineUuidGenerator uuidGenerator;\n+\n+  @Inject\n+  public OfflineAreaRepository(\n+      TileDownloadWorkManager tileDownloadWorkManager,\n+      LocalDataStore localDataStore,\n+      GeoJsonParser geoJsonParser,\n+      OfflineUuidGenerator uuidGenerator,\n+      FileUtil fileUtil) {\n+    this.tileDownloadWorkManager = tileDownloadWorkManager;\n+    this.localDataStore = localDataStore;\n+    this.geoJsonParser = geoJsonParser;\n+    this.uuidGenerator = uuidGenerator;\n+    this.fileUtil = fileUtil;\n+  }\n+\n+  private Completable enqueueTileDownloads(OfflineArea area) {\n+    File jsonSource;\n+\n+    try {\n+      jsonSource = fileUtil.getFileFromRawResource(R.raw.gnd_geojson, Config.GEO_JSON);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEwNTQ5OA=="}, "originalCommit": {"oid": "6b8969dca73281d3404ad82a78b7341b681d65f0"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2664, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}