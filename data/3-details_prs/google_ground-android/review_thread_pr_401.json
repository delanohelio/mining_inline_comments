{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwNjgyNzEx", "number": 401, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMjowNToxNFrODpS28A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMjowNToxNFrODpS28A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjI3MTg0OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/observationdetails/ObservationDetailsFragment.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMjowNToxNFrOF4Yg1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMjowODo1OFrOF4Ymxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2NjE5Ng==", "bodyText": "It appears this method is called both from init() and here. Is this intentional? If so, why?", "url": "https://github.com/google/ground-android/pull/401#discussion_r394666196", "createdAt": "2020-03-18T22:05:14Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/observationdetails/ObservationDetailsFragment.java", "diffHunk": "@@ -156,35 +149,25 @@ private void addField(Field field, Observation observation) {\n     observation\n         .getResponses()\n         .getResponse(field.getId())\n-        .map(r -> r.getDetailsText(field))\n         .ifPresent(\n-            value -> {\n-              if (field.getType().equals(Type.PHOTO)) {\n-                binding.fieldValue.setVisibility(View.GONE);\n-                binding.imagePreview.setVisibility(View.VISIBLE);\n-\n-                // TODO: Subscriptions should only be made inside lifecycle methods so they can be\n-                // properly disposed of in their equivalent end lifecycle methods. To do this\n-                // safely, we can create a PublishSubject in the view model that gets exposed to\n-                // the fragment as a LiveData.\n-                storageManager\n-                    .getDownloadUrl(value)\n-                    .subscribeOn(schedulers.io())\n-                    .observeOn(schedulers.ui())\n-                    .as(autoDisposable(this))\n-                    .subscribe(\n-                        uri ->\n-                            Picasso.get()\n-                                .load(uri)\n-                                .placeholder(R.drawable.ic_photo_grey_600_24dp)\n-                                .into(binding.imagePreview));\n-\n+            response -> {\n+              if (field.getType() == Type.PHOTO) {\n+                addPhotoField((ViewGroup) binding.getRoot(), field, response);\n               } else {\n-                binding.fieldValue.setText(value);\n+                binding.fieldValue.setText(response.getDetailsText(field));\n               }\n             });\n   }\n \n+  private void addPhotoField(ViewGroup container, Field field, Response response) {\n+    PhotoFieldBinding photoFieldBinding = PhotoFieldBinding.inflate(getLayoutInflater());\n+    PhotoFieldViewModel photoFieldViewModel = viewModelFactory.create(PhotoFieldViewModel.class);\n+    photoFieldBinding.setLifecycleOwner(this);\n+    photoFieldBinding.setViewModel(photoFieldViewModel);\n+    photoFieldViewModel.updateField(response, field);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c171e586b8108519afeb7a41fdc6c5d95f0ebe1"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2NzQzOA==", "bodyText": "init() takes an ObservableMap as a parameter and calls updateField() whenever the response is changed. Here, we don't use init() as this is an one time update.", "url": "https://github.com/google/ground-android/pull/401#discussion_r394667438", "createdAt": "2020-03-18T22:08:16Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/observationdetails/ObservationDetailsFragment.java", "diffHunk": "@@ -156,35 +149,25 @@ private void addField(Field field, Observation observation) {\n     observation\n         .getResponses()\n         .getResponse(field.getId())\n-        .map(r -> r.getDetailsText(field))\n         .ifPresent(\n-            value -> {\n-              if (field.getType().equals(Type.PHOTO)) {\n-                binding.fieldValue.setVisibility(View.GONE);\n-                binding.imagePreview.setVisibility(View.VISIBLE);\n-\n-                // TODO: Subscriptions should only be made inside lifecycle methods so they can be\n-                // properly disposed of in their equivalent end lifecycle methods. To do this\n-                // safely, we can create a PublishSubject in the view model that gets exposed to\n-                // the fragment as a LiveData.\n-                storageManager\n-                    .getDownloadUrl(value)\n-                    .subscribeOn(schedulers.io())\n-                    .observeOn(schedulers.ui())\n-                    .as(autoDisposable(this))\n-                    .subscribe(\n-                        uri ->\n-                            Picasso.get()\n-                                .load(uri)\n-                                .placeholder(R.drawable.ic_photo_grey_600_24dp)\n-                                .into(binding.imagePreview));\n-\n+            response -> {\n+              if (field.getType() == Type.PHOTO) {\n+                addPhotoField((ViewGroup) binding.getRoot(), field, response);\n               } else {\n-                binding.fieldValue.setText(value);\n+                binding.fieldValue.setText(response.getDetailsText(field));\n               }\n             });\n   }\n \n+  private void addPhotoField(ViewGroup container, Field field, Response response) {\n+    PhotoFieldBinding photoFieldBinding = PhotoFieldBinding.inflate(getLayoutInflater());\n+    PhotoFieldViewModel photoFieldViewModel = viewModelFactory.create(PhotoFieldViewModel.class);\n+    photoFieldBinding.setLifecycleOwner(this);\n+    photoFieldBinding.setViewModel(photoFieldViewModel);\n+    photoFieldViewModel.updateField(response, field);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2NjE5Ng=="}, "originalCommit": {"oid": "8c171e586b8108519afeb7a41fdc6c5d95f0ebe1"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2NzcxOQ==", "bodyText": "Makes me wonder if init() should a part of PhotoFieldViewModel at all....", "url": "https://github.com/google/ground-android/pull/401#discussion_r394667719", "createdAt": "2020-03-18T22:08:58Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/observationdetails/ObservationDetailsFragment.java", "diffHunk": "@@ -156,35 +149,25 @@ private void addField(Field field, Observation observation) {\n     observation\n         .getResponses()\n         .getResponse(field.getId())\n-        .map(r -> r.getDetailsText(field))\n         .ifPresent(\n-            value -> {\n-              if (field.getType().equals(Type.PHOTO)) {\n-                binding.fieldValue.setVisibility(View.GONE);\n-                binding.imagePreview.setVisibility(View.VISIBLE);\n-\n-                // TODO: Subscriptions should only be made inside lifecycle methods so they can be\n-                // properly disposed of in their equivalent end lifecycle methods. To do this\n-                // safely, we can create a PublishSubject in the view model that gets exposed to\n-                // the fragment as a LiveData.\n-                storageManager\n-                    .getDownloadUrl(value)\n-                    .subscribeOn(schedulers.io())\n-                    .observeOn(schedulers.ui())\n-                    .as(autoDisposable(this))\n-                    .subscribe(\n-                        uri ->\n-                            Picasso.get()\n-                                .load(uri)\n-                                .placeholder(R.drawable.ic_photo_grey_600_24dp)\n-                                .into(binding.imagePreview));\n-\n+            response -> {\n+              if (field.getType() == Type.PHOTO) {\n+                addPhotoField((ViewGroup) binding.getRoot(), field, response);\n               } else {\n-                binding.fieldValue.setText(value);\n+                binding.fieldValue.setText(response.getDetailsText(field));\n               }\n             });\n   }\n \n+  private void addPhotoField(ViewGroup container, Field field, Response response) {\n+    PhotoFieldBinding photoFieldBinding = PhotoFieldBinding.inflate(getLayoutInflater());\n+    PhotoFieldViewModel photoFieldViewModel = viewModelFactory.create(PhotoFieldViewModel.class);\n+    photoFieldBinding.setLifecycleOwner(this);\n+    photoFieldBinding.setViewModel(photoFieldViewModel);\n+    photoFieldViewModel.updateField(response, field);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2NjE5Ng=="}, "originalCommit": {"oid": "8c171e586b8108519afeb7a41fdc6c5d95f0ebe1"}, "originalPosition": 115}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2643, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}