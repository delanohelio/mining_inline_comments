{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5Nzg3OTY3", "number": 342, "reviewThreads": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMjowMDowOFrODcXoQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMjo1MTo1MFrODg4djw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDczODU3OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/util/GeoJsonParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMjowMDowOFrOFkZHdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMjowMToyM1rOFkZJCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcwNDU2Ng==", "bodyText": "This is wrong -.- Have to fix this.", "url": "https://github.com/google/ground-android/pull/342#discussion_r373704566", "createdAt": "2020-01-31T22:00:08Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/util/GeoJsonParser.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.util;\n+\n+import static java8.util.J8Arrays.stream;\n+\n+import android.util.Log;\n+import com.google.android.gms.maps.model.LatLng;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.model.basemap.tile.Tile.State;\n+import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;\n+import com.google.common.collect.ImmutableList;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java8.util.Optional;\n+import javax.inject.Inject;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class GeoJsonParser {\n+\n+  private static final String TAG = GeoJsonParser.class.getSimpleName();\n+  private final OfflineUuidGenerator uuidGenerator;\n+\n+  @Inject\n+  GeoJsonParser(OfflineUuidGenerator uuidGenerator) {\n+    this.uuidGenerator = uuidGenerator;\n+  }\n+\n+  static class Cartesian {\n+    private final int xcoordinate;\n+    private final int ycoordinate;\n+    private final int zcoordinate;\n+\n+    Cartesian(int x, int y, int z) {\n+      this.xcoordinate = x;\n+      this.ycoordinate = y;\n+      this.zcoordinate = z;\n+    }\n+\n+    private static Cartesian fromString(String catersianCoords) {\n+      String[] values = catersianCoords.replaceAll(\"[()]\", \"\").split(\",\");\n+      int[] coords = new int[3];\n+\n+      for (int i = 0; i < coords.length && i < values.length; i++) {\n+        coords[i] = Integer.parseInt(values[i]);\n+      }\n+\n+      return new Cartesian(coords[0], coords[1], coords[2]);\n+    }\n+  }\n+\n+  /**\n+   * A GeoJSONTile is any polygon that describes a single exterior ring comprised of four ordered\n+   * coordinates: South/West, South/East, North/West, North/East, has a cartesian representation,\n+   * and has an associated URL.\n+   */\n+  private static class GeoJsonTile {\n+\n+    private final LatLng[] coordinates;\n+    private final Cartesian cartesian;\n+    private final String url;\n+\n+    private GeoJsonTile(LatLng[] coordinates, Cartesian cartesian, String url) {\n+      this.coordinates = coordinates.clone();\n+      this.cartesian = cartesian;\n+      this.url = url;\n+    }\n+\n+    /**\n+     * Constructs a GeoJSONTile based on the contents of {@param jsonObject}.\n+     *\n+     * <p>A valid tile has the following information:\n+     *\n+     * <p>- a geometry describing a polygon. - an id specifying cartesian coordinates. - a URL\n+     * specifying a source for the tile imagery.\n+     *\n+     * <p>GeoJSON Polygons are described using coordinate arrays that form a linear ring. The first\n+     * and last value in a linear ring are equivalent. We assume coordinates are ordered, S/W, S/E,\n+     * N/E, N/W, (S/W again, closing the ring).\n+     *\n+     * <p>Interior rings, which describe holes in the polygon, are ignored.\n+     */\n+    private static Optional<GeoJsonTile> fromJsonObject(JSONObject jsonObject) {\n+      try {\n+        JSONObject geometry = jsonObject.getJSONObject(\"geometry\");\n+        JSONArray sw = geometry.getJSONArray(\"coordinates\").getJSONArray(0);\n+        JSONArray ne = geometry.getJSONArray(\"coordinates\").getJSONArray(2);\n+        String id = jsonObject.getString(\"id\");\n+        String url = jsonObject.getJSONObject(\"properties\").getString(\"title\");\n+\n+        double south = sw.getDouble(0);\n+        double west = sw.getDouble(1);\n+        double north = ne.getDouble(0);\n+        double east = ne.getDouble(1);\n+\n+        LatLng[] coords = {\n+          new LatLng(south, west),\n+          new LatLng(south, east),\n+          new LatLng(north, west),\n+          new LatLng(north, east)\n+        };\n+\n+        Cartesian cartesian = Cartesian.fromString(id);\n+\n+        return Optional.of(new GeoJsonTile(coords, cartesian, url));\n+      } catch (JSONException e) {\n+        Log.e(TAG, \"failed to parse geoJSONPolygon\", e);\n+      }\n+      return Optional.empty();\n+    }\n+\n+    /**\n+     * Returns true iff any of {@link GeoJsonTile#coordinates} are contained within {@param bounds}.\n+     *\n+     * <p>This method assumes {@param bounds} is larger than the bounds described by {@link\n+     * GeoJsonTile#coordinates} and does not account for cases in which the inverse is true.\n+     */\n+    private boolean intersects(LatLngBounds bounds) {\n+      return stream(this.coordinates).anyMatch(bounds::contains);\n+    }\n+  }\n+\n+  /**\n+   * Converts a JSONArray to an array of JSONObjects. Provided for compatibility with java8 streams.\n+   * JSONArray itself only inherits from Object, and is not convertible to a stream.\n+   */\n+  private static JSONObject[] toArray(JSONArray arr) {\n+    JSONObject[] result = new JSONObject[arr.length()];\n+\n+    for (int i = 0; i < arr.length(); i++) {\n+      try {\n+        JSONObject o = arr.getJSONObject(i);\n+        result[i] = o;\n+      } catch (JSONException e) {\n+        Log.e(TAG, \"couldn't parse json\", e);\n+      }\n+    }\n+\n+    return result;\n+  }\n+\n+  /**\n+   * Returns the immutable list of tiles specified in {@param geojson} that intersect {@param\n+   * bounds}.\n+   */\n+  public ImmutableList<Tile> intersectingTiles(LatLngBounds bounds, File geojson) {\n+    try {\n+      InputStream is = new FileInputStream(geojson);\n+      BufferedReader buf = new BufferedReader(new InputStreamReader(is));\n+      String line = buf.readLine();\n+      StringBuilder sb = new StringBuilder();\n+      while (line != null) {\n+        sb.append(line).append('\\n');\n+        line = buf.readLine();\n+      }\n+\n+      JSONObject geoJson = new JSONObject(sb.toString());\n+      JSONArray features = geoJson.getJSONArray(\"features\");\n+\n+      stream(toArray(features))\n+          .filter(GeoJsonParser::hasGeometry)\n+          .filter(GeoJsonParser::isPolygon)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d67638cb22a31fb02f0a1b01f572e8b6e3f8a14c"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcwNDk2OA==", "bodyText": "isPolygon expects a geometry object, but here we return the entire feature object (and we need to maintain it down stream).\nI should move these checks into the GeoJsonTile.fromJson method anyway.", "url": "https://github.com/google/ground-android/pull/342#discussion_r373704968", "createdAt": "2020-01-31T22:01:23Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/util/GeoJsonParser.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.util;\n+\n+import static java8.util.J8Arrays.stream;\n+\n+import android.util.Log;\n+import com.google.android.gms.maps.model.LatLng;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.model.basemap.tile.Tile.State;\n+import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;\n+import com.google.common.collect.ImmutableList;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java8.util.Optional;\n+import javax.inject.Inject;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class GeoJsonParser {\n+\n+  private static final String TAG = GeoJsonParser.class.getSimpleName();\n+  private final OfflineUuidGenerator uuidGenerator;\n+\n+  @Inject\n+  GeoJsonParser(OfflineUuidGenerator uuidGenerator) {\n+    this.uuidGenerator = uuidGenerator;\n+  }\n+\n+  static class Cartesian {\n+    private final int xcoordinate;\n+    private final int ycoordinate;\n+    private final int zcoordinate;\n+\n+    Cartesian(int x, int y, int z) {\n+      this.xcoordinate = x;\n+      this.ycoordinate = y;\n+      this.zcoordinate = z;\n+    }\n+\n+    private static Cartesian fromString(String catersianCoords) {\n+      String[] values = catersianCoords.replaceAll(\"[()]\", \"\").split(\",\");\n+      int[] coords = new int[3];\n+\n+      for (int i = 0; i < coords.length && i < values.length; i++) {\n+        coords[i] = Integer.parseInt(values[i]);\n+      }\n+\n+      return new Cartesian(coords[0], coords[1], coords[2]);\n+    }\n+  }\n+\n+  /**\n+   * A GeoJSONTile is any polygon that describes a single exterior ring comprised of four ordered\n+   * coordinates: South/West, South/East, North/West, North/East, has a cartesian representation,\n+   * and has an associated URL.\n+   */\n+  private static class GeoJsonTile {\n+\n+    private final LatLng[] coordinates;\n+    private final Cartesian cartesian;\n+    private final String url;\n+\n+    private GeoJsonTile(LatLng[] coordinates, Cartesian cartesian, String url) {\n+      this.coordinates = coordinates.clone();\n+      this.cartesian = cartesian;\n+      this.url = url;\n+    }\n+\n+    /**\n+     * Constructs a GeoJSONTile based on the contents of {@param jsonObject}.\n+     *\n+     * <p>A valid tile has the following information:\n+     *\n+     * <p>- a geometry describing a polygon. - an id specifying cartesian coordinates. - a URL\n+     * specifying a source for the tile imagery.\n+     *\n+     * <p>GeoJSON Polygons are described using coordinate arrays that form a linear ring. The first\n+     * and last value in a linear ring are equivalent. We assume coordinates are ordered, S/W, S/E,\n+     * N/E, N/W, (S/W again, closing the ring).\n+     *\n+     * <p>Interior rings, which describe holes in the polygon, are ignored.\n+     */\n+    private static Optional<GeoJsonTile> fromJsonObject(JSONObject jsonObject) {\n+      try {\n+        JSONObject geometry = jsonObject.getJSONObject(\"geometry\");\n+        JSONArray sw = geometry.getJSONArray(\"coordinates\").getJSONArray(0);\n+        JSONArray ne = geometry.getJSONArray(\"coordinates\").getJSONArray(2);\n+        String id = jsonObject.getString(\"id\");\n+        String url = jsonObject.getJSONObject(\"properties\").getString(\"title\");\n+\n+        double south = sw.getDouble(0);\n+        double west = sw.getDouble(1);\n+        double north = ne.getDouble(0);\n+        double east = ne.getDouble(1);\n+\n+        LatLng[] coords = {\n+          new LatLng(south, west),\n+          new LatLng(south, east),\n+          new LatLng(north, west),\n+          new LatLng(north, east)\n+        };\n+\n+        Cartesian cartesian = Cartesian.fromString(id);\n+\n+        return Optional.of(new GeoJsonTile(coords, cartesian, url));\n+      } catch (JSONException e) {\n+        Log.e(TAG, \"failed to parse geoJSONPolygon\", e);\n+      }\n+      return Optional.empty();\n+    }\n+\n+    /**\n+     * Returns true iff any of {@link GeoJsonTile#coordinates} are contained within {@param bounds}.\n+     *\n+     * <p>This method assumes {@param bounds} is larger than the bounds described by {@link\n+     * GeoJsonTile#coordinates} and does not account for cases in which the inverse is true.\n+     */\n+    private boolean intersects(LatLngBounds bounds) {\n+      return stream(this.coordinates).anyMatch(bounds::contains);\n+    }\n+  }\n+\n+  /**\n+   * Converts a JSONArray to an array of JSONObjects. Provided for compatibility with java8 streams.\n+   * JSONArray itself only inherits from Object, and is not convertible to a stream.\n+   */\n+  private static JSONObject[] toArray(JSONArray arr) {\n+    JSONObject[] result = new JSONObject[arr.length()];\n+\n+    for (int i = 0; i < arr.length(); i++) {\n+      try {\n+        JSONObject o = arr.getJSONObject(i);\n+        result[i] = o;\n+      } catch (JSONException e) {\n+        Log.e(TAG, \"couldn't parse json\", e);\n+      }\n+    }\n+\n+    return result;\n+  }\n+\n+  /**\n+   * Returns the immutable list of tiles specified in {@param geojson} that intersect {@param\n+   * bounds}.\n+   */\n+  public ImmutableList<Tile> intersectingTiles(LatLngBounds bounds, File geojson) {\n+    try {\n+      InputStream is = new FileInputStream(geojson);\n+      BufferedReader buf = new BufferedReader(new InputStreamReader(is));\n+      String line = buf.readLine();\n+      StringBuilder sb = new StringBuilder();\n+      while (line != null) {\n+        sb.append(line).append('\\n');\n+        line = buf.readLine();\n+      }\n+\n+      JSONObject geoJson = new JSONObject(sb.toString());\n+      JSONArray features = geoJson.getJSONArray(\"features\");\n+\n+      stream(toArray(features))\n+          .filter(GeoJsonParser::hasGeometry)\n+          .filter(GeoJsonParser::isPolygon)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcwNDU2Ng=="}, "originalCommit": {"oid": "d67638cb22a31fb02f0a1b01f572e8b6e3f8a14c"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTA0NDQyOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/model/basemap/tile/Tile.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMjoyNDo1NFrOFkb-eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMTo0OTowOFrOFlBJWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1MTQxNg==", "bodyText": "Would getFilenameFromCoords() be more appropriate?", "url": "https://github.com/google/ground-android/pull/342#discussion_r373751416", "createdAt": "2020-02-01T02:24:54Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/model/basemap/tile/Tile.java", "diffHunk": "@@ -37,14 +46,16 @@ public static Builder newBuilder() {\n     return new AutoValue_Tile.Builder();\n   }\n \n-  public static String pathFromId(String tileId) {\n+  public static String pathFromCoords(int x, int y, int z) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d67638cb22a31fb02f0a1b01f572e8b6e3f8a14c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM2MDQwOA==", "bodyText": "I like filenameFromCoords --but I'm dropping get because this method is static (though maybe it shouldn't be static)!", "url": "https://github.com/google/ground-android/pull/342#discussion_r374360408", "createdAt": "2020-02-03T21:49:08Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/model/basemap/tile/Tile.java", "diffHunk": "@@ -37,14 +46,16 @@ public static Builder newBuilder() {\n     return new AutoValue_Tile.Builder();\n   }\n \n-  public static String pathFromId(String tileId) {\n+  public static String pathFromCoords(int x, int y, int z) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1MTQxNg=="}, "originalCommit": {"oid": "d67638cb22a31fb02f0a1b01f572e8b6e3f8a14c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTA0NjEwOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/workers/FileDownloadWorker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMjoyODo0NlrOFkb_XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMjoyODo0NlrOFkb_XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1MTY0NA==", "bodyText": "Nit: maybe -> Maybe", "url": "https://github.com/google/ground-android/pull/342#discussion_r373751644", "createdAt": "2020-02-01T02:28:46Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/workers/FileDownloadWorker.java", "diffHunk": "@@ -183,24 +150,21 @@ private Result checkDownload(Tile tile) {\n   @NonNull\n   @Override\n   public Result doWork() {\n-    Log.d(TAG, \"Downloading tile: \" + Tile.pathFromId(tileId));\n     Tile tile = localDataStore.getTile(tileId).blockingGet();\n \n     // When there is no tile in the db, the maybe completes and returns null.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d67638cb22a31fb02f0a1b01f572e8b6e3f8a14c"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTA0NjI3OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/workers/FileDownloadWorker.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMjoyOToxN1rOFkb_cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODowMjoyNVrOFld6gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1MTY2Nw==", "bodyText": "What if the tile has been deleted since this job was queued? Maybe we shouldn't fail but just exit?", "url": "https://github.com/google/ground-android/pull/342#discussion_r373751667", "createdAt": "2020-02-01T02:29:17Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/workers/FileDownloadWorker.java", "diffHunk": "@@ -183,24 +150,21 @@ private Result checkDownload(Tile tile) {\n   @NonNull\n   @Override\n   public Result doWork() {\n-    Log.d(TAG, \"Downloading tile: \" + Tile.pathFromId(tileId));\n     Tile tile = localDataStore.getTile(tileId).blockingGet();\n \n     // When there is no tile in the db, the maybe completes and returns null.\n+    // We expect tiles to be added to the DB prior to downloading.\n+    // If that isn't the case, we fail.\n     if (tile == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d67638cb22a31fb02f0a1b01f572e8b6e3f8a14c"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM2MzY5NA==", "bodyText": "Hmm, it seems like the right solution here is to use the workManager to cancel the jobs as soon as the tile is deleted: https://developer.android.com/topic/libraries/architecture/workmanager/how-to/cancel-stop-work. Probably some listener on the DB that fires off cancelAllWork when a user deletes an area and all its corresponding tiles are up for deletion. i.e. whatever method we implement that deletes tiles first checks in w/ the manager to see if any work is queued and stops all the relevant work first. -- we'll probably have to tag jobs by area id to ensure we stop work for just that area (and not e.g. other areas that were queued up immediately after)\nI think this would appropriately handle that case, while this check explicitly uncovers whether or not we queued this without adding something to the DB first.", "url": "https://github.com/google/ground-android/pull/342#discussion_r374363694", "createdAt": "2020-02-03T21:56:21Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/workers/FileDownloadWorker.java", "diffHunk": "@@ -183,24 +150,21 @@ private Result checkDownload(Tile tile) {\n   @NonNull\n   @Override\n   public Result doWork() {\n-    Log.d(TAG, \"Downloading tile: \" + Tile.pathFromId(tileId));\n     Tile tile = localDataStore.getTile(tileId).blockingGet();\n \n     // When there is no tile in the db, the maybe completes and returns null.\n+    // We expect tiles to be added to the DB prior to downloading.\n+    // If that isn't the case, we fail.\n     if (tile == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1MTY2Nw=="}, "originalCommit": {"oid": "d67638cb22a31fb02f0a1b01f572e8b6e3f8a14c"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ5MDI3OA==", "bodyText": "I don't feel smart enough to consider all the interactions between the workers and managers, so as a defensive maneuver would normally try to make everything idempotent that can be. Besides the user deleting the tile, it could also get remove if the user clears the app cache; I'm not sure if workers get cancelled as well when that happens. Even if they do, it would be nice not to need to know whether that's the case. Perhaps we can just bail out and log a debug log message instead?", "url": "https://github.com/google/ground-android/pull/342#discussion_r374490278", "createdAt": "2020-02-04T06:14:19Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/workers/FileDownloadWorker.java", "diffHunk": "@@ -183,24 +150,21 @@ private Result checkDownload(Tile tile) {\n   @NonNull\n   @Override\n   public Result doWork() {\n-    Log.d(TAG, \"Downloading tile: \" + Tile.pathFromId(tileId));\n     Tile tile = localDataStore.getTile(tileId).blockingGet();\n \n     // When there is no tile in the db, the maybe completes and returns null.\n+    // We expect tiles to be added to the DB prior to downloading.\n+    // If that isn't the case, we fail.\n     if (tile == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1MTY2Nw=="}, "originalCommit": {"oid": "d67638cb22a31fb02f0a1b01f572e8b6e3f8a14c"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc1NTY0Mw==", "bodyText": "That sounds fair to me--so, I suppose we need to move this nullness check into the manager and avoid scheduling any work in the first place if we can't find the tile in the DB.", "url": "https://github.com/google/ground-android/pull/342#discussion_r374755643", "createdAt": "2020-02-04T15:51:33Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/workers/FileDownloadWorker.java", "diffHunk": "@@ -183,24 +150,21 @@ private Result checkDownload(Tile tile) {\n   @NonNull\n   @Override\n   public Result doWork() {\n-    Log.d(TAG, \"Downloading tile: \" + Tile.pathFromId(tileId));\n     Tile tile = localDataStore.getTile(tileId).blockingGet();\n \n     // When there is no tile in the db, the maybe completes and returns null.\n+    // We expect tiles to be added to the DB prior to downloading.\n+    // If that isn't the case, we fail.\n     if (tile == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1MTY2Nw=="}, "originalCommit": {"oid": "d67638cb22a31fb02f0a1b01f572e8b6e3f8a14c"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgzMTc0NA==", "bodyText": "We will need the nullness check here regardless, since this logic is executed in a different scheduler than the thread that queues the tile. Currently the manager will only queue work after adding the tiles anyway iirc?", "url": "https://github.com/google/ground-android/pull/342#discussion_r374831744", "createdAt": "2020-02-04T18:02:25Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/workers/FileDownloadWorker.java", "diffHunk": "@@ -183,24 +150,21 @@ private Result checkDownload(Tile tile) {\n   @NonNull\n   @Override\n   public Result doWork() {\n-    Log.d(TAG, \"Downloading tile: \" + Tile.pathFromId(tileId));\n     Tile tile = localDataStore.getTile(tileId).blockingGet();\n \n     // When there is no tile in the db, the maybe completes and returns null.\n+    // We expect tiles to be added to the DB prior to downloading.\n+    // If that isn't the case, we fail.\n     if (tile == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1MTY2Nw=="}, "originalCommit": {"oid": "d67638cb22a31fb02f0a1b01f572e8b6e3f8a14c"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTkzNjA3OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/model/basemap/tile/Tile.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNTo1NjoxOFrOFlI1gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNTo0ODoxNFrOFlZI1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ4NjQwMw==", "bodyText": "Java auto converts int when using + with Strings, e.g:\nString filename = z + \"-\" + x + \"-\" y;", "url": "https://github.com/google/ground-android/pull/342#discussion_r374486403", "createdAt": "2020-02-04T05:56:18Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/model/basemap/tile/Tile.java", "diffHunk": "@@ -37,14 +46,16 @@ public static Builder newBuilder() {\n     return new AutoValue_Tile.Builder();\n   }\n \n-  public static String pathFromId(String tileId) {\n+  public static String filenameFromCoords(int x, int y, int z) {\n     // Tile ids are stored as x-y-z. Paths must be z-x-y.mbtiles.\n     // TODO: Convert tile ids to paths in a less restrictive and less hacky manner.\n     // TODO: Move this method to a more appropriate home? We need to perform (and possibly will no\n     // matter where the tiles are stored) translation between the tile ID and the file path of the\n     // corresponding tile source in remote storage/wherever we pull the source tile from.\n-    String[] fields = tileId.replaceAll(\"[()]\", \"\").split(\", \");\n-    String filename = fields[2] + \"-\" + fields[0] + \"-\" + fields[1];\n+    String xstr = String.valueOf(x);\n+    String ystr = String.valueOf(y);\n+    String zstr = String.valueOf(z);\n+    String filename = zstr + \"-\" + xstr + \"-\" + ystr;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c1e3d7945d4d1d598887a9a7d17c090c9082f8d"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc1MzQ5Mw==", "bodyText": "Gotcha, thanks!", "url": "https://github.com/google/ground-android/pull/342#discussion_r374753493", "createdAt": "2020-02-04T15:48:14Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/model/basemap/tile/Tile.java", "diffHunk": "@@ -37,14 +46,16 @@ public static Builder newBuilder() {\n     return new AutoValue_Tile.Builder();\n   }\n \n-  public static String pathFromId(String tileId) {\n+  public static String filenameFromCoords(int x, int y, int z) {\n     // Tile ids are stored as x-y-z. Paths must be z-x-y.mbtiles.\n     // TODO: Convert tile ids to paths in a less restrictive and less hacky manner.\n     // TODO: Move this method to a more appropriate home? We need to perform (and possibly will no\n     // matter where the tiles are stored) translation between the tile ID and the file path of the\n     // corresponding tile source in remote storage/wherever we pull the source tile from.\n-    String[] fields = tileId.replaceAll(\"[()]\", \"\").split(\", \");\n-    String filename = fields[2] + \"-\" + fields[0] + \"-\" + fields[1];\n+    String xstr = String.valueOf(x);\n+    String ystr = String.valueOf(y);\n+    String zstr = String.valueOf(z);\n+    String filename = zstr + \"-\" + xstr + \"-\" + ystr;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ4NjQwMw=="}, "originalCommit": {"oid": "2c1e3d7945d4d1d598887a9a7d17c090c9082f8d"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTkzNzI1OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/util/GeoJsonParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNTo1NzoxNlrOFlI2RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNTo1NzoxNlrOFlI2RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ4NjU5Ng==", "bodyText": "=> getTileUrl(..)?", "url": "https://github.com/google/ground-android/pull/342#discussion_r374486596", "createdAt": "2020-02-04T05:57:16Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/util/GeoJsonParser.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.util;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.J8Arrays.stream;\n+\n+import android.util.Log;\n+import com.google.android.gms.maps.model.LatLng;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.model.basemap.tile.Tile.State;\n+import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;\n+import com.google.common.collect.ImmutableList;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java8.util.Optional;\n+import javax.inject.Inject;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class GeoJsonParser {\n+\n+  private static final String TAG = GeoJsonParser.class.getSimpleName();\n+  private final OfflineUuidGenerator uuidGenerator;\n+\n+  @Inject\n+  GeoJsonParser(OfflineUuidGenerator uuidGenerator) {\n+    this.uuidGenerator = uuidGenerator;\n+  }\n+\n+  static class Cartesian {\n+    private final int xcoordinate;\n+    private final int ycoordinate;\n+    private final int zcoordinate;\n+\n+    Cartesian(int x, int y, int z) {\n+      this.xcoordinate = x;\n+      this.ycoordinate = y;\n+      this.zcoordinate = z;\n+    }\n+\n+    private static Cartesian fromString(String catersianCoords) {\n+      String[] values = catersianCoords.replaceAll(\"[()]\", \"\").split(\",\");\n+      int[] coords = new int[3];\n+\n+      for (int i = 0; i < coords.length && i < values.length; i++) {\n+        coords[i] = Integer.parseInt(values[i]);\n+      }\n+\n+      return new Cartesian(coords[0], coords[1], coords[2]);\n+    }\n+  }\n+\n+  /**\n+   * A GeoJSONTile is any polygon that describes a single exterior ring comprised of four ordered\n+   * coordinates: South/West, South/East, North/West, North/East, has a cartesian representation,\n+   * and has an associated URL.\n+   */\n+  private static class GeoJsonTile {\n+\n+    private final LatLng[] coordinates;\n+    private final Cartesian cartesian;\n+    private final String url;\n+\n+    private GeoJsonTile(LatLng[] coordinates, Cartesian cartesian, String url) {\n+      this.coordinates = coordinates.clone();\n+      this.cartesian = cartesian;\n+      this.url = url;\n+    }\n+\n+    /**\n+     * Constructs a GeoJSONTile based on the contents of {@param jsonObject}.\n+     *\n+     * <p>A valid tile has the following information:\n+     *\n+     * <p>- a geometry describing a polygon. - an id specifying cartesian coordinates. - a URL\n+     * specifying a source for the tile imagery.\n+     *\n+     * <p>GeoJSON Polygons are described using coordinate arrays that form a linear ring. The first\n+     * and last value in a linear ring are equivalent. We assume coordinates are ordered, S/W, S/E,\n+     * N/E, N/W, (S/W again, closing the ring).\n+     *\n+     * <p>Interior rings, which describe holes in the polygon, are ignored.\n+     */\n+    private static Optional<GeoJsonTile> fromJsonObject(JSONObject jsonObject) {\n+      Optional<JSONObject> tileGeometry = jsonTileGeometry(jsonObject);\n+\n+      if (tileGeometry.isEmpty()) {\n+        return Optional.empty();\n+      }\n+\n+      try {\n+        LatLng[] coords = jsonTileCoordinates(tileGeometry.get());\n+        String id = jsonTileId(jsonObject);\n+        String url = jsonTileUrl(jsonObject);\n+\n+        Cartesian cartesian = Cartesian.fromString(id);\n+\n+        return Optional.of(new GeoJsonTile(coords, cartesian, url));\n+      } catch (JSONException e) {\n+        Log.e(TAG, \"failed to parse tile JSON\", e);\n+      }\n+      return Optional.empty();\n+    }\n+\n+    /**\n+     * Attempts to retrieve a URL from {@param jsonObject}. Since this field is required for tiles,\n+     * we throw an exception if we fail to parse a URL.\n+     *\n+     * @throws JSONException\n+     */\n+    private static String jsonTileUrl(JSONObject jsonObject) throws JSONException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c1e3d7945d4d1d598887a9a7d17c090c9082f8d"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTkzODQ1OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/util/GeoJsonParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNTo1ODowMlrOFlI2-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNTo1ODowMlrOFlI2-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ4Njc3Nw==", "bodyText": "Please move field names into String constants.", "url": "https://github.com/google/ground-android/pull/342#discussion_r374486777", "createdAt": "2020-02-04T05:58:02Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/util/GeoJsonParser.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.util;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.J8Arrays.stream;\n+\n+import android.util.Log;\n+import com.google.android.gms.maps.model.LatLng;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.model.basemap.tile.Tile.State;\n+import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;\n+import com.google.common.collect.ImmutableList;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java8.util.Optional;\n+import javax.inject.Inject;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class GeoJsonParser {\n+\n+  private static final String TAG = GeoJsonParser.class.getSimpleName();\n+  private final OfflineUuidGenerator uuidGenerator;\n+\n+  @Inject\n+  GeoJsonParser(OfflineUuidGenerator uuidGenerator) {\n+    this.uuidGenerator = uuidGenerator;\n+  }\n+\n+  static class Cartesian {\n+    private final int xcoordinate;\n+    private final int ycoordinate;\n+    private final int zcoordinate;\n+\n+    Cartesian(int x, int y, int z) {\n+      this.xcoordinate = x;\n+      this.ycoordinate = y;\n+      this.zcoordinate = z;\n+    }\n+\n+    private static Cartesian fromString(String catersianCoords) {\n+      String[] values = catersianCoords.replaceAll(\"[()]\", \"\").split(\",\");\n+      int[] coords = new int[3];\n+\n+      for (int i = 0; i < coords.length && i < values.length; i++) {\n+        coords[i] = Integer.parseInt(values[i]);\n+      }\n+\n+      return new Cartesian(coords[0], coords[1], coords[2]);\n+    }\n+  }\n+\n+  /**\n+   * A GeoJSONTile is any polygon that describes a single exterior ring comprised of four ordered\n+   * coordinates: South/West, South/East, North/West, North/East, has a cartesian representation,\n+   * and has an associated URL.\n+   */\n+  private static class GeoJsonTile {\n+\n+    private final LatLng[] coordinates;\n+    private final Cartesian cartesian;\n+    private final String url;\n+\n+    private GeoJsonTile(LatLng[] coordinates, Cartesian cartesian, String url) {\n+      this.coordinates = coordinates.clone();\n+      this.cartesian = cartesian;\n+      this.url = url;\n+    }\n+\n+    /**\n+     * Constructs a GeoJSONTile based on the contents of {@param jsonObject}.\n+     *\n+     * <p>A valid tile has the following information:\n+     *\n+     * <p>- a geometry describing a polygon. - an id specifying cartesian coordinates. - a URL\n+     * specifying a source for the tile imagery.\n+     *\n+     * <p>GeoJSON Polygons are described using coordinate arrays that form a linear ring. The first\n+     * and last value in a linear ring are equivalent. We assume coordinates are ordered, S/W, S/E,\n+     * N/E, N/W, (S/W again, closing the ring).\n+     *\n+     * <p>Interior rings, which describe holes in the polygon, are ignored.\n+     */\n+    private static Optional<GeoJsonTile> fromJsonObject(JSONObject jsonObject) {\n+      Optional<JSONObject> tileGeometry = jsonTileGeometry(jsonObject);\n+\n+      if (tileGeometry.isEmpty()) {\n+        return Optional.empty();\n+      }\n+\n+      try {\n+        LatLng[] coords = jsonTileCoordinates(tileGeometry.get());\n+        String id = jsonTileId(jsonObject);\n+        String url = jsonTileUrl(jsonObject);\n+\n+        Cartesian cartesian = Cartesian.fromString(id);\n+\n+        return Optional.of(new GeoJsonTile(coords, cartesian, url));\n+      } catch (JSONException e) {\n+        Log.e(TAG, \"failed to parse tile JSON\", e);\n+      }\n+      return Optional.empty();\n+    }\n+\n+    /**\n+     * Attempts to retrieve a URL from {@param jsonObject}. Since this field is required for tiles,\n+     * we throw an exception if we fail to parse a URL.\n+     *\n+     * @throws JSONException\n+     */\n+    private static String jsonTileUrl(JSONObject jsonObject) throws JSONException {\n+      try {\n+        return jsonObject.getJSONObject(\"properties\").getString(\"title\");\n+      } catch (JSONException e) {\n+        Log.e(TAG, \"couldn't parse json tile url\", e);\n+        throw e;\n+      }\n+    }\n+\n+    /**\n+     * Attempts to retrieve coordinates from {@param jsonGeometry}. Since these fields are required\n+     * for tiles, we throw an exception if we fail to parse coordinates.\n+     *\n+     * @throws JSONException\n+     */\n+    private static LatLng[] jsonTileCoordinates(JSONObject jsonGeometry) throws JSONException {\n+      try {\n+        JSONArray sw = jsonGeometry.getJSONArray(\"coordinates\").getJSONArray(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c1e3d7945d4d1d598887a9a7d17c090c9082f8d"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTk0MDQ4OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/util/GeoJsonParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNTo1OToxOVrOFlI4Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNTo0NTowM1rOFlZA4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ4NzA5OA==", "bodyText": "Since you're throwing a checked exception, the caller will need to handle it, in which case the catch() and Log statements aren't needed here.", "url": "https://github.com/google/ground-android/pull/342#discussion_r374487098", "createdAt": "2020-02-04T05:59:19Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/util/GeoJsonParser.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.util;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.J8Arrays.stream;\n+\n+import android.util.Log;\n+import com.google.android.gms.maps.model.LatLng;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.model.basemap.tile.Tile.State;\n+import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;\n+import com.google.common.collect.ImmutableList;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java8.util.Optional;\n+import javax.inject.Inject;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class GeoJsonParser {\n+\n+  private static final String TAG = GeoJsonParser.class.getSimpleName();\n+  private final OfflineUuidGenerator uuidGenerator;\n+\n+  @Inject\n+  GeoJsonParser(OfflineUuidGenerator uuidGenerator) {\n+    this.uuidGenerator = uuidGenerator;\n+  }\n+\n+  static class Cartesian {\n+    private final int xcoordinate;\n+    private final int ycoordinate;\n+    private final int zcoordinate;\n+\n+    Cartesian(int x, int y, int z) {\n+      this.xcoordinate = x;\n+      this.ycoordinate = y;\n+      this.zcoordinate = z;\n+    }\n+\n+    private static Cartesian fromString(String catersianCoords) {\n+      String[] values = catersianCoords.replaceAll(\"[()]\", \"\").split(\",\");\n+      int[] coords = new int[3];\n+\n+      for (int i = 0; i < coords.length && i < values.length; i++) {\n+        coords[i] = Integer.parseInt(values[i]);\n+      }\n+\n+      return new Cartesian(coords[0], coords[1], coords[2]);\n+    }\n+  }\n+\n+  /**\n+   * A GeoJSONTile is any polygon that describes a single exterior ring comprised of four ordered\n+   * coordinates: South/West, South/East, North/West, North/East, has a cartesian representation,\n+   * and has an associated URL.\n+   */\n+  private static class GeoJsonTile {\n+\n+    private final LatLng[] coordinates;\n+    private final Cartesian cartesian;\n+    private final String url;\n+\n+    private GeoJsonTile(LatLng[] coordinates, Cartesian cartesian, String url) {\n+      this.coordinates = coordinates.clone();\n+      this.cartesian = cartesian;\n+      this.url = url;\n+    }\n+\n+    /**\n+     * Constructs a GeoJSONTile based on the contents of {@param jsonObject}.\n+     *\n+     * <p>A valid tile has the following information:\n+     *\n+     * <p>- a geometry describing a polygon. - an id specifying cartesian coordinates. - a URL\n+     * specifying a source for the tile imagery.\n+     *\n+     * <p>GeoJSON Polygons are described using coordinate arrays that form a linear ring. The first\n+     * and last value in a linear ring are equivalent. We assume coordinates are ordered, S/W, S/E,\n+     * N/E, N/W, (S/W again, closing the ring).\n+     *\n+     * <p>Interior rings, which describe holes in the polygon, are ignored.\n+     */\n+    private static Optional<GeoJsonTile> fromJsonObject(JSONObject jsonObject) {\n+      Optional<JSONObject> tileGeometry = jsonTileGeometry(jsonObject);\n+\n+      if (tileGeometry.isEmpty()) {\n+        return Optional.empty();\n+      }\n+\n+      try {\n+        LatLng[] coords = jsonTileCoordinates(tileGeometry.get());\n+        String id = jsonTileId(jsonObject);\n+        String url = jsonTileUrl(jsonObject);\n+\n+        Cartesian cartesian = Cartesian.fromString(id);\n+\n+        return Optional.of(new GeoJsonTile(coords, cartesian, url));\n+      } catch (JSONException e) {\n+        Log.e(TAG, \"failed to parse tile JSON\", e);\n+      }\n+      return Optional.empty();\n+    }\n+\n+    /**\n+     * Attempts to retrieve a URL from {@param jsonObject}. Since this field is required for tiles,\n+     * we throw an exception if we fail to parse a URL.\n+     *\n+     * @throws JSONException\n+     */\n+    private static String jsonTileUrl(JSONObject jsonObject) throws JSONException {\n+      try {\n+        return jsonObject.getJSONObject(\"properties\").getString(\"title\");\n+      } catch (JSONException e) {\n+        Log.e(TAG, \"couldn't parse json tile url\", e);\n+        throw e;\n+      }\n+    }\n+\n+    /**\n+     * Attempts to retrieve coordinates from {@param jsonGeometry}. Since these fields are required\n+     * for tiles, we throw an exception if we fail to parse coordinates.\n+     *\n+     * @throws JSONException\n+     */\n+    private static LatLng[] jsonTileCoordinates(JSONObject jsonGeometry) throws JSONException {\n+      try {\n+        JSONArray sw = jsonGeometry.getJSONArray(\"coordinates\").getJSONArray(0);\n+        JSONArray ne = jsonGeometry.getJSONArray(\"coordinates\").getJSONArray(2);\n+\n+        double south = sw.getDouble(0);\n+        double west = sw.getDouble(1);\n+        double north = ne.getDouble(0);\n+        double east = ne.getDouble(1);\n+\n+        return new LatLng[] {\n+          new LatLng(south, west),\n+          new LatLng(south, east),\n+          new LatLng(north, west),\n+          new LatLng(north, east)\n+        };\n+\n+      } catch (JSONException e) {\n+        Log.e(TAG, \"couldn't parse json tile coordinates\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c1e3d7945d4d1d598887a9a7d17c090c9082f8d"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc1MTQ1OQ==", "bodyText": "My thinking was to particularize the point of failure by catching and logging in the helper methods + the caller.\nSo for instance, if we failed to get coordinates, we'd have a log + stack trace of roughly:\nGeoJsonParser: Failed to parse geojson\nGeoJsonParser: couldn't parse json tile coordinates\nIn which case we have more info to work with to debug -- wdyt? Is that overkill? Is it better to define a custom exception instead to differentiate and throw those? --that way we can still be specific about the cause of failure and only need to catch in the caller", "url": "https://github.com/google/ground-android/pull/342#discussion_r374751459", "createdAt": "2020-02-04T15:45:03Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/util/GeoJsonParser.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.util;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.J8Arrays.stream;\n+\n+import android.util.Log;\n+import com.google.android.gms.maps.model.LatLng;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.model.basemap.tile.Tile.State;\n+import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;\n+import com.google.common.collect.ImmutableList;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java8.util.Optional;\n+import javax.inject.Inject;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class GeoJsonParser {\n+\n+  private static final String TAG = GeoJsonParser.class.getSimpleName();\n+  private final OfflineUuidGenerator uuidGenerator;\n+\n+  @Inject\n+  GeoJsonParser(OfflineUuidGenerator uuidGenerator) {\n+    this.uuidGenerator = uuidGenerator;\n+  }\n+\n+  static class Cartesian {\n+    private final int xcoordinate;\n+    private final int ycoordinate;\n+    private final int zcoordinate;\n+\n+    Cartesian(int x, int y, int z) {\n+      this.xcoordinate = x;\n+      this.ycoordinate = y;\n+      this.zcoordinate = z;\n+    }\n+\n+    private static Cartesian fromString(String catersianCoords) {\n+      String[] values = catersianCoords.replaceAll(\"[()]\", \"\").split(\",\");\n+      int[] coords = new int[3];\n+\n+      for (int i = 0; i < coords.length && i < values.length; i++) {\n+        coords[i] = Integer.parseInt(values[i]);\n+      }\n+\n+      return new Cartesian(coords[0], coords[1], coords[2]);\n+    }\n+  }\n+\n+  /**\n+   * A GeoJSONTile is any polygon that describes a single exterior ring comprised of four ordered\n+   * coordinates: South/West, South/East, North/West, North/East, has a cartesian representation,\n+   * and has an associated URL.\n+   */\n+  private static class GeoJsonTile {\n+\n+    private final LatLng[] coordinates;\n+    private final Cartesian cartesian;\n+    private final String url;\n+\n+    private GeoJsonTile(LatLng[] coordinates, Cartesian cartesian, String url) {\n+      this.coordinates = coordinates.clone();\n+      this.cartesian = cartesian;\n+      this.url = url;\n+    }\n+\n+    /**\n+     * Constructs a GeoJSONTile based on the contents of {@param jsonObject}.\n+     *\n+     * <p>A valid tile has the following information:\n+     *\n+     * <p>- a geometry describing a polygon. - an id specifying cartesian coordinates. - a URL\n+     * specifying a source for the tile imagery.\n+     *\n+     * <p>GeoJSON Polygons are described using coordinate arrays that form a linear ring. The first\n+     * and last value in a linear ring are equivalent. We assume coordinates are ordered, S/W, S/E,\n+     * N/E, N/W, (S/W again, closing the ring).\n+     *\n+     * <p>Interior rings, which describe holes in the polygon, are ignored.\n+     */\n+    private static Optional<GeoJsonTile> fromJsonObject(JSONObject jsonObject) {\n+      Optional<JSONObject> tileGeometry = jsonTileGeometry(jsonObject);\n+\n+      if (tileGeometry.isEmpty()) {\n+        return Optional.empty();\n+      }\n+\n+      try {\n+        LatLng[] coords = jsonTileCoordinates(tileGeometry.get());\n+        String id = jsonTileId(jsonObject);\n+        String url = jsonTileUrl(jsonObject);\n+\n+        Cartesian cartesian = Cartesian.fromString(id);\n+\n+        return Optional.of(new GeoJsonTile(coords, cartesian, url));\n+      } catch (JSONException e) {\n+        Log.e(TAG, \"failed to parse tile JSON\", e);\n+      }\n+      return Optional.empty();\n+    }\n+\n+    /**\n+     * Attempts to retrieve a URL from {@param jsonObject}. Since this field is required for tiles,\n+     * we throw an exception if we fail to parse a URL.\n+     *\n+     * @throws JSONException\n+     */\n+    private static String jsonTileUrl(JSONObject jsonObject) throws JSONException {\n+      try {\n+        return jsonObject.getJSONObject(\"properties\").getString(\"title\");\n+      } catch (JSONException e) {\n+        Log.e(TAG, \"couldn't parse json tile url\", e);\n+        throw e;\n+      }\n+    }\n+\n+    /**\n+     * Attempts to retrieve coordinates from {@param jsonGeometry}. Since these fields are required\n+     * for tiles, we throw an exception if we fail to parse coordinates.\n+     *\n+     * @throws JSONException\n+     */\n+    private static LatLng[] jsonTileCoordinates(JSONObject jsonGeometry) throws JSONException {\n+      try {\n+        JSONArray sw = jsonGeometry.getJSONArray(\"coordinates\").getJSONArray(0);\n+        JSONArray ne = jsonGeometry.getJSONArray(\"coordinates\").getJSONArray(2);\n+\n+        double south = sw.getDouble(0);\n+        double west = sw.getDouble(1);\n+        double north = ne.getDouble(0);\n+        double east = ne.getDouble(1);\n+\n+        return new LatLng[] {\n+          new LatLng(south, west),\n+          new LatLng(south, east),\n+          new LatLng(north, west),\n+          new LatLng(north, east)\n+        };\n+\n+      } catch (JSONException e) {\n+        Log.e(TAG, \"couldn't parse json tile coordinates\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ4NzA5OA=="}, "originalCommit": {"oid": "2c1e3d7945d4d1d598887a9a7d17c090c9082f8d"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTk1MTgyOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/util/GeoJsonParser.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNjowNzoxMVrOFlI_Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODowMjo0OVrOFld7RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ4ODg0Ng==", "bodyText": "A few suggestions on code structure:\n\n This deals with deserializing JSON files, so it probably in the persistence package. (e.g. ...persistence.geojson?)\n Rather than pass JSONObject around to static methods, can we wrap the different instances in typed accessor objects? (e.g., JsonGeometry, JsonTileExtent, etc)? (https://testing.googleblog.com/2017/11/obsessed-with-primitives.html)\n If this file is  moved to its own package, the inner classes and be promoted to outer classes in their own file to help readability.\n GeoJsonParser can then provide a custom GeoJson object with the data we're interested in.\n\nWdyt?", "url": "https://github.com/google/ground-android/pull/342#discussion_r374488846", "createdAt": "2020-02-04T06:07:11Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/util/GeoJsonParser.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c1e3d7945d4d1d598887a9a7d17c090c9082f8d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc1MzIwNQ==", "bodyText": "SG! After the initial impl, this component seems complex enough to me to up-level it to its own package, which will make it easier to define accessor objects like you suggest--plus it'll make it easier to extend in the future.", "url": "https://github.com/google/ground-android/pull/342#discussion_r374753205", "createdAt": "2020-02-04T15:47:46Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/util/GeoJsonParser.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ4ODg0Ng=="}, "originalCommit": {"oid": "2c1e3d7945d4d1d598887a9a7d17c090c9082f8d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgzMTk0MA==", "bodyText": "Thanks for taking a look!", "url": "https://github.com/google/ground-android/pull/342#discussion_r374831940", "createdAt": "2020-02-04T18:02:49Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/util/GeoJsonParser.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ4ODg0Ng=="}, "originalCommit": {"oid": "2c1e3d7945d4d1d598887a9a7d17c090c9082f8d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODU0NjkxOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonExtent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMTozNjo0N1rOFofJHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNjowMzozOVrOFpZrQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5NzU5Ng==", "bodyText": "Consider using List instead. Also, an empty list is synonymous with Optional.empty(), so Optional isn't needed here.", "url": "https://github.com/google/ground-android/pull/342#discussion_r377997596", "createdAt": "2020-02-12T01:36:47Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonExtent.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.geojson;\n+\n+import com.google.android.gms.maps.model.LatLng;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import java8.util.Optional;\n+import javax.annotation.Nullable;\n+import org.json.JSONArray;\n+\n+public class GeoJsonExtent {\n+\n+  private final GeoJsonGeometry geometry;\n+  private final Optional<LatLng[]> coordinates;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879d9f3b3e29208577c0566b642cf762244cc8c2"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk1NjYxMQ==", "bodyText": "Oh, nice! Thanks for the tip!", "url": "https://github.com/google/ground-android/pull/342#discussion_r378956611", "createdAt": "2020-02-13T16:03:39Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonExtent.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.geojson;\n+\n+import com.google.android.gms.maps.model.LatLng;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import java8.util.Optional;\n+import javax.annotation.Nullable;\n+import org.json.JSONArray;\n+\n+public class GeoJsonExtent {\n+\n+  private final GeoJsonGeometry geometry;\n+  private final Optional<LatLng[]> coordinates;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5NzU5Ng=="}, "originalCommit": {"oid": "879d9f3b3e29208577c0566b642cf762244cc8c2"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODU0NzQ4OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonExtent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMTozNzowN1rOFofJdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNjo0MzowN1rOFpbOkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5NzY4NQ==", "bodyText": "Consider renaming to vertices.", "url": "https://github.com/google/ground-android/pull/342#discussion_r377997685", "createdAt": "2020-02-12T01:37:07Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonExtent.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.geojson;\n+\n+import com.google.android.gms.maps.model.LatLng;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import java8.util.Optional;\n+import javax.annotation.Nullable;\n+import org.json.JSONArray;\n+\n+public class GeoJsonExtent {\n+\n+  private final GeoJsonGeometry geometry;\n+  private final Optional<LatLng[]> coordinates;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879d9f3b3e29208577c0566b642cf762244cc8c2"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk4MjAzNA==", "bodyText": "Done!", "url": "https://github.com/google/ground-android/pull/342#discussion_r378982034", "createdAt": "2020-02-13T16:43:07Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonExtent.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.geojson;\n+\n+import com.google.android.gms.maps.model.LatLng;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import java8.util.Optional;\n+import javax.annotation.Nullable;\n+import org.json.JSONArray;\n+\n+public class GeoJsonExtent {\n+\n+  private final GeoJsonGeometry geometry;\n+  private final Optional<LatLng[]> coordinates;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5NzY4NQ=="}, "originalCommit": {"oid": "879d9f3b3e29208577c0566b642cf762244cc8c2"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODU0OTIzOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonExtent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMTozODowOFrOFofKjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNjo0MzowNFrOFpbOaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5Nzk2NQ==", "bodyText": "Extracting the coordinates from the geometry seems to be almost free, so we should prefer to remove this derived state and calculate when called.", "url": "https://github.com/google/ground-android/pull/342#discussion_r377997965", "createdAt": "2020-02-12T01:38:08Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonExtent.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.geojson;\n+\n+import com.google.android.gms.maps.model.LatLng;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import java8.util.Optional;\n+import javax.annotation.Nullable;\n+import org.json.JSONArray;\n+\n+public class GeoJsonExtent {\n+\n+  private final GeoJsonGeometry geometry;\n+  private final Optional<LatLng[]> coordinates;\n+\n+  @Nullable\n+  GeoJsonExtent(GeoJsonGeometry geometry) {\n+    this.geometry = geometry;\n+    this.coordinates = getPolygonCoordinates();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879d9f3b3e29208577c0566b642cf762244cc8c2"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk4MTk5NQ==", "bodyText": "sg!", "url": "https://github.com/google/ground-android/pull/342#discussion_r378981995", "createdAt": "2020-02-13T16:43:04Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonExtent.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.geojson;\n+\n+import com.google.android.gms.maps.model.LatLng;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import java8.util.Optional;\n+import javax.annotation.Nullable;\n+import org.json.JSONArray;\n+\n+public class GeoJsonExtent {\n+\n+  private final GeoJsonGeometry geometry;\n+  private final Optional<LatLng[]> coordinates;\n+\n+  @Nullable\n+  GeoJsonExtent(GeoJsonGeometry geometry) {\n+    this.geometry = geometry;\n+    this.coordinates = getPolygonCoordinates();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5Nzk2NQ=="}, "originalCommit": {"oid": "879d9f3b3e29208577c0566b642cf762244cc8c2"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODU1MTAxOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonExtent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMTozODo1NlrOFofLiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNjo0MzozOVrOFpbP0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5ODIxNg==", "bodyText": "this is only needed in the constructor to disambiguate the field name from the constructor arg, please remove throughout.", "url": "https://github.com/google/ground-android/pull/342#discussion_r377998216", "createdAt": "2020-02-12T01:38:56Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonExtent.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.geojson;\n+\n+import com.google.android.gms.maps.model.LatLng;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import java8.util.Optional;\n+import javax.annotation.Nullable;\n+import org.json.JSONArray;\n+\n+public class GeoJsonExtent {\n+\n+  private final GeoJsonGeometry geometry;\n+  private final Optional<LatLng[]> coordinates;\n+\n+  @Nullable\n+  GeoJsonExtent(GeoJsonGeometry geometry) {\n+    this.geometry = geometry;\n+    this.coordinates = getPolygonCoordinates();\n+  }\n+\n+  Optional<LatLngBounds> getBounds() {\n+    return this.coordinates.map(cs -> new LatLngBounds(cs[0], cs[2]));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879d9f3b3e29208577c0566b642cf762244cc8c2"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk4MjM1NA==", "bodyText": "Done!", "url": "https://github.com/google/ground-android/pull/342#discussion_r378982354", "createdAt": "2020-02-13T16:43:39Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonExtent.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.geojson;\n+\n+import com.google.android.gms.maps.model.LatLng;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import java8.util.Optional;\n+import javax.annotation.Nullable;\n+import org.json.JSONArray;\n+\n+public class GeoJsonExtent {\n+\n+  private final GeoJsonGeometry geometry;\n+  private final Optional<LatLng[]> coordinates;\n+\n+  @Nullable\n+  GeoJsonExtent(GeoJsonGeometry geometry) {\n+    this.geometry = geometry;\n+    this.coordinates = getPolygonCoordinates();\n+  }\n+\n+  Optional<LatLngBounds> getBounds() {\n+    return this.coordinates.map(cs -> new LatLngBounds(cs[0], cs[2]));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5ODIxNg=="}, "originalCommit": {"oid": "879d9f3b3e29208577c0566b642cf762244cc8c2"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODU1NDcxOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonExtent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMTo0MTowN1rOFofNqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNjo0ODozNVrOFpbbjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5ODc2MA==", "bodyText": "get() with throw an exception if the Optional is empty. We should either check .isPresent() first, use functional methods to propagate the empty state, or avoid the Optional altogether.", "url": "https://github.com/google/ground-android/pull/342#discussion_r377998760", "createdAt": "2020-02-12T01:41:07Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonExtent.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.geojson;\n+\n+import com.google.android.gms.maps.model.LatLng;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import java8.util.Optional;\n+import javax.annotation.Nullable;\n+import org.json.JSONArray;\n+\n+public class GeoJsonExtent {\n+\n+  private final GeoJsonGeometry geometry;\n+  private final Optional<LatLng[]> coordinates;\n+\n+  @Nullable\n+  GeoJsonExtent(GeoJsonGeometry geometry) {\n+    this.geometry = geometry;\n+    this.coordinates = getPolygonCoordinates();\n+  }\n+\n+  Optional<LatLngBounds> getBounds() {\n+    return this.coordinates.map(cs -> new LatLngBounds(cs[0], cs[2]));\n+  }\n+\n+  private Optional<LatLng[]> getPolygonCoordinates() {\n+    JSONArray sw = this.geometry.getCoordinates().map(j -> j.optJSONArray(0)).get();\n+    JSONArray ne = this.geometry.getCoordinates().map(j -> j.optJSONArray(2)).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879d9f3b3e29208577c0566b642cf762244cc8c2"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk4NTM1OA==", "bodyText": "sg, for the first commit addressing these comments I'm going to stick with the optional and just add a check for empties--I think your suggestion to remove the optional entirely makes sense in this case though, so in subsequent commits I may do that.", "url": "https://github.com/google/ground-android/pull/342#discussion_r378985358", "createdAt": "2020-02-13T16:48:35Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonExtent.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.geojson;\n+\n+import com.google.android.gms.maps.model.LatLng;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import java8.util.Optional;\n+import javax.annotation.Nullable;\n+import org.json.JSONArray;\n+\n+public class GeoJsonExtent {\n+\n+  private final GeoJsonGeometry geometry;\n+  private final Optional<LatLng[]> coordinates;\n+\n+  @Nullable\n+  GeoJsonExtent(GeoJsonGeometry geometry) {\n+    this.geometry = geometry;\n+    this.coordinates = getPolygonCoordinates();\n+  }\n+\n+  Optional<LatLngBounds> getBounds() {\n+    return this.coordinates.map(cs -> new LatLngBounds(cs[0], cs[2]));\n+  }\n+\n+  private Optional<LatLng[]> getPolygonCoordinates() {\n+    JSONArray sw = this.geometry.getCoordinates().map(j -> j.optJSONArray(0)).get();\n+    JSONArray ne = this.geometry.getCoordinates().map(j -> j.optJSONArray(2)).get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5ODc2MA=="}, "originalCommit": {"oid": "879d9f3b3e29208577c0566b642cf762244cc8c2"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODU1NTk4OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonExtent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMTo0MTo1OVrOFofOgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNjo1MDo1MVrOFpbhCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5ODk3Ng==", "bodyText": "This could then become Arrays.asList(new LatLng(..), new LatLng(..)..)", "url": "https://github.com/google/ground-android/pull/342#discussion_r377998976", "createdAt": "2020-02-12T01:41:59Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonExtent.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.geojson;\n+\n+import com.google.android.gms.maps.model.LatLng;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import java8.util.Optional;\n+import javax.annotation.Nullable;\n+import org.json.JSONArray;\n+\n+public class GeoJsonExtent {\n+\n+  private final GeoJsonGeometry geometry;\n+  private final Optional<LatLng[]> coordinates;\n+\n+  @Nullable\n+  GeoJsonExtent(GeoJsonGeometry geometry) {\n+    this.geometry = geometry;\n+    this.coordinates = getPolygonCoordinates();\n+  }\n+\n+  Optional<LatLngBounds> getBounds() {\n+    return this.coordinates.map(cs -> new LatLngBounds(cs[0], cs[2]));\n+  }\n+\n+  private Optional<LatLng[]> getPolygonCoordinates() {\n+    JSONArray sw = this.geometry.getCoordinates().map(j -> j.optJSONArray(0)).get();\n+    JSONArray ne = this.geometry.getCoordinates().map(j -> j.optJSONArray(2)).get();\n+\n+    if (sw == null || ne == null) {\n+      return Optional.empty();\n+    }\n+\n+    double south = sw.optDouble(0, 0.0);\n+    double west = sw.optDouble(1, 0.0);\n+    double north = ne.optDouble(0, 0.0);\n+    double east = ne.optDouble(1, 0.0);\n+\n+    return Optional.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879d9f3b3e29208577c0566b642cf762244cc8c2"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk4Njc2Mg==", "bodyText": "Gotcha", "url": "https://github.com/google/ground-android/pull/342#discussion_r378986762", "createdAt": "2020-02-13T16:50:51Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonExtent.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.geojson;\n+\n+import com.google.android.gms.maps.model.LatLng;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import java8.util.Optional;\n+import javax.annotation.Nullable;\n+import org.json.JSONArray;\n+\n+public class GeoJsonExtent {\n+\n+  private final GeoJsonGeometry geometry;\n+  private final Optional<LatLng[]> coordinates;\n+\n+  @Nullable\n+  GeoJsonExtent(GeoJsonGeometry geometry) {\n+    this.geometry = geometry;\n+    this.coordinates = getPolygonCoordinates();\n+  }\n+\n+  Optional<LatLngBounds> getBounds() {\n+    return this.coordinates.map(cs -> new LatLngBounds(cs[0], cs[2]));\n+  }\n+\n+  private Optional<LatLng[]> getPolygonCoordinates() {\n+    JSONArray sw = this.geometry.getCoordinates().map(j -> j.optJSONArray(0)).get();\n+    JSONArray ne = this.geometry.getCoordinates().map(j -> j.optJSONArray(2)).get();\n+\n+    if (sw == null || ne == null) {\n+      return Optional.empty();\n+    }\n+\n+    double south = sw.optDouble(0, 0.0);\n+    double west = sw.optDouble(1, 0.0);\n+    double north = ne.optDouble(0, 0.0);\n+    double east = ne.optDouble(1, 0.0);\n+\n+    return Optional.of(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5ODk3Ng=="}, "originalCommit": {"oid": "879d9f3b3e29208577c0566b642cf762244cc8c2"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODU1ODQyOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonGeometry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMTo0MzozNFrOFofP4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNjo1ODowNVrOFpbyOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5OTMyOQ==", "bodyText": "Same comment here - let's get these states on the fly rather than caching them since it adds carrying cost without adding performance [possible overoptimization].", "url": "https://github.com/google/ground-android/pull/342#discussion_r377999329", "createdAt": "2020-02-12T01:43:34Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonGeometry.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.geojson;\n+\n+import java8.util.Optional;\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n+\n+public class GeoJsonGeometry {\n+\n+  private static final String GEOMETRY_KEY = \"geometry\";\n+  private static final String GEOMETRY_TYPE_KEY = \"type\";\n+  private static final String COORDINATES_JSON_KEY = \"coordinates\";\n+\n+  private final Optional<JSONObject> json;\n+  private final Optional<String> type;\n+  private final Optional<JSONArray> coordinates;\n+\n+  GeoJsonGeometry(JSONObject jsonObject) {\n+    this.json = Optional.ofNullable(jsonObject.optJSONObject(GEOMETRY_KEY));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879d9f3b3e29208577c0566b642cf762244cc8c2"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5MTE2Mg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/google/ground-android/pull/342#discussion_r378991162", "createdAt": "2020-02-13T16:58:05Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonGeometry.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.geojson;\n+\n+import java8.util.Optional;\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n+\n+public class GeoJsonGeometry {\n+\n+  private static final String GEOMETRY_KEY = \"geometry\";\n+  private static final String GEOMETRY_TYPE_KEY = \"type\";\n+  private static final String COORDINATES_JSON_KEY = \"coordinates\";\n+\n+  private final Optional<JSONObject> json;\n+  private final Optional<String> type;\n+  private final Optional<JSONArray> coordinates;\n+\n+  GeoJsonGeometry(JSONObject jsonObject) {\n+    this.json = Optional.ofNullable(jsonObject.optJSONObject(GEOMETRY_KEY));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5OTMyOQ=="}, "originalCommit": {"oid": "879d9f3b3e29208577c0566b642cf762244cc8c2"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODU2MDkxOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonGeometry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMTo0NTowOFrOFofRUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNjo1ODo1NlrOFpb0RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5OTY5Ng==", "bodyText": "Please make these classes package private (i.e. class GeoJsonGeometry) to avoid accidental usage outside this package and to signal they're tightly coupled to the parser.", "url": "https://github.com/google/ground-android/pull/342#discussion_r377999696", "createdAt": "2020-02-12T01:45:08Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonGeometry.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.geojson;\n+\n+import java8.util.Optional;\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n+\n+public class GeoJsonGeometry {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879d9f3b3e29208577c0566b642cf762244cc8c2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5MTY4NQ==", "bodyText": "\u2705", "url": "https://github.com/google/ground-android/pull/342#discussion_r378991685", "createdAt": "2020-02-13T16:58:56Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonGeometry.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.geojson;\n+\n+import java8.util.Optional;\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n+\n+public class GeoJsonGeometry {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5OTY5Ng=="}, "originalCommit": {"oid": "879d9f3b3e29208577c0566b642cf762244cc8c2"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODU2MjM2OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMTo0NjowNFrOFofSPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMTo0NjowNFrOFofSPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5OTkzMw==", "bodyText": "Please move down to after the public method that depends on it or after all public methods.", "url": "https://github.com/google/ground-android/pull/342#discussion_r377999933", "createdAt": "2020-02-12T01:46:04Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonParser.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.geojson;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.J8Arrays.stream;\n+\n+import android.util.Log;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.model.basemap.tile.Tile.State;\n+import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;\n+import com.google.common.collect.ImmutableList;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import javax.inject.Inject;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class GeoJsonParser {\n+\n+  private static final String TAG = GeoJsonParser.class.getSimpleName();\n+  private final OfflineUuidGenerator uuidGenerator;\n+\n+  @Inject\n+  GeoJsonParser(OfflineUuidGenerator uuidGenerator) {\n+    this.uuidGenerator = uuidGenerator;\n+  }\n+\n+  /**\n+   * Converts a JSONArray to an array of JSONObjects. Provided for compatibility with java8 streams.\n+   * JSONArray itself only inherits from Object, and is not convertible to a stream.\n+   */\n+  private static JSONObject[] toArray(JSONArray arr) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879d9f3b3e29208577c0566b642cf762244cc8c2"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODU4MjM2OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonParser.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMTo1ODo0MFrOFofebA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzoyMDo1NFrOFpco9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwMzA1Mg==", "bodyText": "Not sure if this is better or not, but I think this method could also be written as something like:\nreturn IntStream.range(0, arr.length()).map(i -> arr. getJSONObject(i));\n\nThe returned stream could them be used directly without first iterating. May need to experiment on how to best handle JSONExceptions.", "url": "https://github.com/google/ground-android/pull/342#discussion_r378003052", "createdAt": "2020-02-12T01:58:40Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonParser.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.geojson;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.J8Arrays.stream;\n+\n+import android.util.Log;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.model.basemap.tile.Tile.State;\n+import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;\n+import com.google.common.collect.ImmutableList;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import javax.inject.Inject;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class GeoJsonParser {\n+\n+  private static final String TAG = GeoJsonParser.class.getSimpleName();\n+  private final OfflineUuidGenerator uuidGenerator;\n+\n+  @Inject\n+  GeoJsonParser(OfflineUuidGenerator uuidGenerator) {\n+    this.uuidGenerator = uuidGenerator;\n+  }\n+\n+  /**\n+   * Converts a JSONArray to an array of JSONObjects. Provided for compatibility with java8 streams.\n+   * JSONArray itself only inherits from Object, and is not convertible to a stream.\n+   */\n+  private static JSONObject[] toArray(JSONArray arr) {\n+    JSONObject[] result = new JSONObject[arr.length()];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879d9f3b3e29208577c0566b642cf762244cc8c2"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5NTExNg==", "bodyText": "That is way better! We can use optJSONObject instead of getJSONObject to workaround exceptions.", "url": "https://github.com/google/ground-android/pull/342#discussion_r378995116", "createdAt": "2020-02-13T17:03:21Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonParser.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.geojson;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.J8Arrays.stream;\n+\n+import android.util.Log;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.model.basemap.tile.Tile.State;\n+import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;\n+import com.google.common.collect.ImmutableList;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import javax.inject.Inject;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class GeoJsonParser {\n+\n+  private static final String TAG = GeoJsonParser.class.getSimpleName();\n+  private final OfflineUuidGenerator uuidGenerator;\n+\n+  @Inject\n+  GeoJsonParser(OfflineUuidGenerator uuidGenerator) {\n+    this.uuidGenerator = uuidGenerator;\n+  }\n+\n+  /**\n+   * Converts a JSONArray to an array of JSONObjects. Provided for compatibility with java8 streams.\n+   * JSONArray itself only inherits from Object, and is not convertible to a stream.\n+   */\n+  private static JSONObject[] toArray(JSONArray arr) {\n+    JSONObject[] result = new JSONObject[arr.length()];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwMzA1Mg=="}, "originalCommit": {"oid": "879d9f3b3e29208577c0566b642cf762244cc8c2"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAwNTE3Mg==", "bodyText": "Turns out we can't conveniently use this approach due to lack of range functions (the libs we're using for stream support require spliterators)", "url": "https://github.com/google/ground-android/pull/342#discussion_r379005172", "createdAt": "2020-02-13T17:20:54Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonParser.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.geojson;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.J8Arrays.stream;\n+\n+import android.util.Log;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.model.basemap.tile.Tile.State;\n+import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;\n+import com.google.common.collect.ImmutableList;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import javax.inject.Inject;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class GeoJsonParser {\n+\n+  private static final String TAG = GeoJsonParser.class.getSimpleName();\n+  private final OfflineUuidGenerator uuidGenerator;\n+\n+  @Inject\n+  GeoJsonParser(OfflineUuidGenerator uuidGenerator) {\n+    this.uuidGenerator = uuidGenerator;\n+  }\n+\n+  /**\n+   * Converts a JSONArray to an array of JSONObjects. Provided for compatibility with java8 streams.\n+   * JSONArray itself only inherits from Object, and is not convertible to a stream.\n+   */\n+  private static JSONObject[] toArray(JSONArray arr) {\n+    JSONObject[] result = new JSONObject[arr.length()];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwMzA1Mg=="}, "originalCommit": {"oid": "879d9f3b3e29208577c0566b642cf762244cc8c2"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODU5MTU2OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonParser.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMjowNDowOFrOFofj9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzo0NDo0NlrOFpdaYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwNDQ2OA==", "bodyText": "Please use System.lineSeparator() instead of \\n.", "url": "https://github.com/google/ground-android/pull/342#discussion_r378004468", "createdAt": "2020-02-12T02:04:08Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonParser.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.geojson;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.J8Arrays.stream;\n+\n+import android.util.Log;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.model.basemap.tile.Tile.State;\n+import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;\n+import com.google.common.collect.ImmutableList;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import javax.inject.Inject;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class GeoJsonParser {\n+\n+  private static final String TAG = GeoJsonParser.class.getSimpleName();\n+  private final OfflineUuidGenerator uuidGenerator;\n+\n+  @Inject\n+  GeoJsonParser(OfflineUuidGenerator uuidGenerator) {\n+    this.uuidGenerator = uuidGenerator;\n+  }\n+\n+  /**\n+   * Converts a JSONArray to an array of JSONObjects. Provided for compatibility with java8 streams.\n+   * JSONArray itself only inherits from Object, and is not convertible to a stream.\n+   */\n+  private static JSONObject[] toArray(JSONArray arr) {\n+    JSONObject[] result = new JSONObject[arr.length()];\n+\n+    for (int i = 0; i < arr.length(); i++) {\n+      try {\n+        JSONObject o = arr.getJSONObject(i);\n+        result[i] = o;\n+      } catch (JSONException e) {\n+        Log.e(TAG, \"couldn't parse json\", e);\n+      }\n+    }\n+\n+    return result;\n+  }\n+\n+  /**\n+   * Returns the immutable list of tiles specified in {@param geojson} that intersect {@param\n+   * bounds}.\n+   */\n+  public ImmutableList<Tile> intersectingTiles(LatLngBounds bounds, File geojson) {\n+    try {\n+      InputStream is = new FileInputStream(geojson);\n+      BufferedReader buf = new BufferedReader(new InputStreamReader(is));\n+      String line = buf.readLine();\n+      StringBuilder sb = new StringBuilder();\n+      while (line != null) {\n+        sb.append(line).append('\\n');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879d9f3b3e29208577c0566b642cf762244cc8c2"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAxNTcyOQ==", "bodyText": "done", "url": "https://github.com/google/ground-android/pull/342#discussion_r379015729", "createdAt": "2020-02-13T17:41:03Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonParser.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.geojson;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.J8Arrays.stream;\n+\n+import android.util.Log;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.model.basemap.tile.Tile.State;\n+import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;\n+import com.google.common.collect.ImmutableList;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import javax.inject.Inject;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class GeoJsonParser {\n+\n+  private static final String TAG = GeoJsonParser.class.getSimpleName();\n+  private final OfflineUuidGenerator uuidGenerator;\n+\n+  @Inject\n+  GeoJsonParser(OfflineUuidGenerator uuidGenerator) {\n+    this.uuidGenerator = uuidGenerator;\n+  }\n+\n+  /**\n+   * Converts a JSONArray to an array of JSONObjects. Provided for compatibility with java8 streams.\n+   * JSONArray itself only inherits from Object, and is not convertible to a stream.\n+   */\n+  private static JSONObject[] toArray(JSONArray arr) {\n+    JSONObject[] result = new JSONObject[arr.length()];\n+\n+    for (int i = 0; i < arr.length(); i++) {\n+      try {\n+        JSONObject o = arr.getJSONObject(i);\n+        result[i] = o;\n+      } catch (JSONException e) {\n+        Log.e(TAG, \"couldn't parse json\", e);\n+      }\n+    }\n+\n+    return result;\n+  }\n+\n+  /**\n+   * Returns the immutable list of tiles specified in {@param geojson} that intersect {@param\n+   * bounds}.\n+   */\n+  public ImmutableList<Tile> intersectingTiles(LatLngBounds bounds, File geojson) {\n+    try {\n+      InputStream is = new FileInputStream(geojson);\n+      BufferedReader buf = new BufferedReader(new InputStreamReader(is));\n+      String line = buf.readLine();\n+      StringBuilder sb = new StringBuilder();\n+      while (line != null) {\n+        sb.append(line).append('\\n');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwNDQ2OA=="}, "originalCommit": {"oid": "879d9f3b3e29208577c0566b642cf762244cc8c2"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAxNzgyNw==", "bodyText": "Changed to reading this char by char", "url": "https://github.com/google/ground-android/pull/342#discussion_r379017827", "createdAt": "2020-02-13T17:44:46Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonParser.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.geojson;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.J8Arrays.stream;\n+\n+import android.util.Log;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.model.basemap.tile.Tile.State;\n+import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;\n+import com.google.common.collect.ImmutableList;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import javax.inject.Inject;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class GeoJsonParser {\n+\n+  private static final String TAG = GeoJsonParser.class.getSimpleName();\n+  private final OfflineUuidGenerator uuidGenerator;\n+\n+  @Inject\n+  GeoJsonParser(OfflineUuidGenerator uuidGenerator) {\n+    this.uuidGenerator = uuidGenerator;\n+  }\n+\n+  /**\n+   * Converts a JSONArray to an array of JSONObjects. Provided for compatibility with java8 streams.\n+   * JSONArray itself only inherits from Object, and is not convertible to a stream.\n+   */\n+  private static JSONObject[] toArray(JSONArray arr) {\n+    JSONObject[] result = new JSONObject[arr.length()];\n+\n+    for (int i = 0; i < arr.length(); i++) {\n+      try {\n+        JSONObject o = arr.getJSONObject(i);\n+        result[i] = o;\n+      } catch (JSONException e) {\n+        Log.e(TAG, \"couldn't parse json\", e);\n+      }\n+    }\n+\n+    return result;\n+  }\n+\n+  /**\n+   * Returns the immutable list of tiles specified in {@param geojson} that intersect {@param\n+   * bounds}.\n+   */\n+  public ImmutableList<Tile> intersectingTiles(LatLngBounds bounds, File geojson) {\n+    try {\n+      InputStream is = new FileInputStream(geojson);\n+      BufferedReader buf = new BufferedReader(new InputStreamReader(is));\n+      String line = buf.readLine();\n+      StringBuilder sb = new StringBuilder();\n+      while (line != null) {\n+        sb.append(line).append('\\n');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwNDQ2OA=="}, "originalCommit": {"oid": "879d9f3b3e29208577c0566b642cf762244cc8c2"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODU5MjM4OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMjowNDo0OVrOFofkeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzo0NTowMFrOFpdayw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwNDYwMQ==", "bodyText": "The arg name geojson collides with bar geoJson. Perhaps rename to file for clarity?", "url": "https://github.com/google/ground-android/pull/342#discussion_r378004601", "createdAt": "2020-02-12T02:04:49Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonParser.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.geojson;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.J8Arrays.stream;\n+\n+import android.util.Log;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.model.basemap.tile.Tile.State;\n+import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;\n+import com.google.common.collect.ImmutableList;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import javax.inject.Inject;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class GeoJsonParser {\n+\n+  private static final String TAG = GeoJsonParser.class.getSimpleName();\n+  private final OfflineUuidGenerator uuidGenerator;\n+\n+  @Inject\n+  GeoJsonParser(OfflineUuidGenerator uuidGenerator) {\n+    this.uuidGenerator = uuidGenerator;\n+  }\n+\n+  /**\n+   * Converts a JSONArray to an array of JSONObjects. Provided for compatibility with java8 streams.\n+   * JSONArray itself only inherits from Object, and is not convertible to a stream.\n+   */\n+  private static JSONObject[] toArray(JSONArray arr) {\n+    JSONObject[] result = new JSONObject[arr.length()];\n+\n+    for (int i = 0; i < arr.length(); i++) {\n+      try {\n+        JSONObject o = arr.getJSONObject(i);\n+        result[i] = o;\n+      } catch (JSONException e) {\n+        Log.e(TAG, \"couldn't parse json\", e);\n+      }\n+    }\n+\n+    return result;\n+  }\n+\n+  /**\n+   * Returns the immutable list of tiles specified in {@param geojson} that intersect {@param\n+   * bounds}.\n+   */\n+  public ImmutableList<Tile> intersectingTiles(LatLngBounds bounds, File geojson) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879d9f3b3e29208577c0566b642cf762244cc8c2"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAxNzkzMQ==", "bodyText": "done", "url": "https://github.com/google/ground-android/pull/342#discussion_r379017931", "createdAt": "2020-02-13T17:45:00Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonParser.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.geojson;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.J8Arrays.stream;\n+\n+import android.util.Log;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.model.basemap.tile.Tile.State;\n+import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;\n+import com.google.common.collect.ImmutableList;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import javax.inject.Inject;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class GeoJsonParser {\n+\n+  private static final String TAG = GeoJsonParser.class.getSimpleName();\n+  private final OfflineUuidGenerator uuidGenerator;\n+\n+  @Inject\n+  GeoJsonParser(OfflineUuidGenerator uuidGenerator) {\n+    this.uuidGenerator = uuidGenerator;\n+  }\n+\n+  /**\n+   * Converts a JSONArray to an array of JSONObjects. Provided for compatibility with java8 streams.\n+   * JSONArray itself only inherits from Object, and is not convertible to a stream.\n+   */\n+  private static JSONObject[] toArray(JSONArray arr) {\n+    JSONObject[] result = new JSONObject[arr.length()];\n+\n+    for (int i = 0; i < arr.length(); i++) {\n+      try {\n+        JSONObject o = arr.getJSONObject(i);\n+        result[i] = o;\n+      } catch (JSONException e) {\n+        Log.e(TAG, \"couldn't parse json\", e);\n+      }\n+    }\n+\n+    return result;\n+  }\n+\n+  /**\n+   * Returns the immutable list of tiles specified in {@param geojson} that intersect {@param\n+   * bounds}.\n+   */\n+  public ImmutableList<Tile> intersectingTiles(LatLngBounds bounds, File geojson) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwNDYwMQ=="}, "originalCommit": {"oid": "879d9f3b3e29208577c0566b642cf762244cc8c2"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODU5NTAwOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMjowNjoyNlrOFofmCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzo1MToxMlrOFpdnSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwNTAwMA==", "bodyText": "Either use orElse() to provide a default here and below, make required (not Optional), or check these fields are present before hand to prevent get() from crashing the app.", "url": "https://github.com/google/ground-android/pull/342#discussion_r378005000", "createdAt": "2020-02-12T02:06:26Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonParser.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.geojson;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.J8Arrays.stream;\n+\n+import android.util.Log;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.model.basemap.tile.Tile.State;\n+import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;\n+import com.google.common.collect.ImmutableList;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import javax.inject.Inject;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class GeoJsonParser {\n+\n+  private static final String TAG = GeoJsonParser.class.getSimpleName();\n+  private final OfflineUuidGenerator uuidGenerator;\n+\n+  @Inject\n+  GeoJsonParser(OfflineUuidGenerator uuidGenerator) {\n+    this.uuidGenerator = uuidGenerator;\n+  }\n+\n+  /**\n+   * Converts a JSONArray to an array of JSONObjects. Provided for compatibility with java8 streams.\n+   * JSONArray itself only inherits from Object, and is not convertible to a stream.\n+   */\n+  private static JSONObject[] toArray(JSONArray arr) {\n+    JSONObject[] result = new JSONObject[arr.length()];\n+\n+    for (int i = 0; i < arr.length(); i++) {\n+      try {\n+        JSONObject o = arr.getJSONObject(i);\n+        result[i] = o;\n+      } catch (JSONException e) {\n+        Log.e(TAG, \"couldn't parse json\", e);\n+      }\n+    }\n+\n+    return result;\n+  }\n+\n+  /**\n+   * Returns the immutable list of tiles specified in {@param geojson} that intersect {@param\n+   * bounds}.\n+   */\n+  public ImmutableList<Tile> intersectingTiles(LatLngBounds bounds, File geojson) {\n+    try {\n+      InputStream is = new FileInputStream(geojson);\n+      BufferedReader buf = new BufferedReader(new InputStreamReader(is));\n+      String line = buf.readLine();\n+      StringBuilder sb = new StringBuilder();\n+      while (line != null) {\n+        sb.append(line).append('\\n');\n+        line = buf.readLine();\n+      }\n+\n+      JSONObject geoJson = new JSONObject(sb.toString());\n+      JSONArray features = geoJson.getJSONArray(\"features\");\n+\n+      return stream(toArray(features))\n+          .map(GeoJsonTile::new)\n+          .filter(tile -> tile.boundsIntersect(bounds))\n+          .map(this::jsonToTile)\n+          .collect(toImmutableList());\n+\n+    } catch (IOException | JSONException e) {\n+      Log.e(TAG, \"Unable to load JSON layer\", e);\n+    }\n+    return ImmutableList.of();\n+  }\n+\n+  /** Returns the {@link Tile} specified by {@param json}. */\n+  private Tile jsonToTile(GeoJsonTile json) {\n+    return Tile.newBuilder()\n+        .setId(uuidGenerator.generateUuid())\n+        .setUrl(json.getUrl().get())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879d9f3b3e29208577c0566b642cf762244cc8c2"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAyMTEzMQ==", "bodyText": "Using orElse() for now and setting an empty string--but these should probably be required.", "url": "https://github.com/google/ground-android/pull/342#discussion_r379021131", "createdAt": "2020-02-13T17:51:12Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonParser.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.geojson;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.J8Arrays.stream;\n+\n+import android.util.Log;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.model.basemap.tile.Tile.State;\n+import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;\n+import com.google.common.collect.ImmutableList;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import javax.inject.Inject;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class GeoJsonParser {\n+\n+  private static final String TAG = GeoJsonParser.class.getSimpleName();\n+  private final OfflineUuidGenerator uuidGenerator;\n+\n+  @Inject\n+  GeoJsonParser(OfflineUuidGenerator uuidGenerator) {\n+    this.uuidGenerator = uuidGenerator;\n+  }\n+\n+  /**\n+   * Converts a JSONArray to an array of JSONObjects. Provided for compatibility with java8 streams.\n+   * JSONArray itself only inherits from Object, and is not convertible to a stream.\n+   */\n+  private static JSONObject[] toArray(JSONArray arr) {\n+    JSONObject[] result = new JSONObject[arr.length()];\n+\n+    for (int i = 0; i < arr.length(); i++) {\n+      try {\n+        JSONObject o = arr.getJSONObject(i);\n+        result[i] = o;\n+      } catch (JSONException e) {\n+        Log.e(TAG, \"couldn't parse json\", e);\n+      }\n+    }\n+\n+    return result;\n+  }\n+\n+  /**\n+   * Returns the immutable list of tiles specified in {@param geojson} that intersect {@param\n+   * bounds}.\n+   */\n+  public ImmutableList<Tile> intersectingTiles(LatLngBounds bounds, File geojson) {\n+    try {\n+      InputStream is = new FileInputStream(geojson);\n+      BufferedReader buf = new BufferedReader(new InputStreamReader(is));\n+      String line = buf.readLine();\n+      StringBuilder sb = new StringBuilder();\n+      while (line != null) {\n+        sb.append(line).append('\\n');\n+        line = buf.readLine();\n+      }\n+\n+      JSONObject geoJson = new JSONObject(sb.toString());\n+      JSONArray features = geoJson.getJSONArray(\"features\");\n+\n+      return stream(toArray(features))\n+          .map(GeoJsonTile::new)\n+          .filter(tile -> tile.boundsIntersect(bounds))\n+          .map(this::jsonToTile)\n+          .collect(toImmutableList());\n+\n+    } catch (IOException | JSONException e) {\n+      Log.e(TAG, \"Unable to load JSON layer\", e);\n+    }\n+    return ImmutableList.of();\n+  }\n+\n+  /** Returns the {@link Tile} specified by {@param json}. */\n+  private Tile jsonToTile(GeoJsonTile json) {\n+    return Tile.newBuilder()\n+        .setId(uuidGenerator.generateUuid())\n+        .setUrl(json.getUrl().get())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwNTAwMA=="}, "originalCommit": {"oid": "879d9f3b3e29208577c0566b642cf762244cc8c2"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODU5NjA1OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonTile.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMjowNzoyMFrOFofmtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzo1NzowMlrOFpdzag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwNTE3NA==", "bodyText": "Same here re cached state.", "url": "https://github.com/google/ground-android/pull/342#discussion_r378005174", "createdAt": "2020-02-12T02:07:20Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonTile.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.geojson;\n+\n+import static java8.util.J8Arrays.stream;\n+\n+import com.google.android.gms.maps.model.LatLng;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import java8.util.Optional;\n+import org.json.JSONObject;\n+\n+/**\n+ * A GeoJSONTile is any polygon that describes a single exterior ring comprised of four ordered\n+ * coordinates: South/West, South/East, North/West, North/East, has a cartesian representation, and\n+ * has an associated URL.\n+ */\n+public class GeoJsonTile {\n+\n+  private static final String ID_KEY = \"id\";\n+  private static final String PROPERTIES_KEY = \"properties\";\n+  private static final String URL_KEY = \"title\";\n+\n+  private final GeoJsonExtent extent;\n+  private final Optional<String> id;\n+  private final Optional<String> url;\n+\n+  /**\n+   * Constructs a GeoJSONTile based on the contents of {@param jsonObject}.\n+   *\n+   * <p>A valid tile has the following information:\n+   *\n+   * <p>- a geometry describing a polygon. - an id specifying cartesian coordinates. - a URL\n+   * specifying a source for the tile imagery.\n+   *\n+   * <p>GeoJSON Polygons are described using coordinate arrays that form a linear ring. The first\n+   * and last value in a linear ring are equivalent. We assume coordinates are ordered, S/W, S/E,\n+   * N/E, N/W, (S/W again, closing the ring).\n+   *\n+   * <p>Interior rings, which describe holes in the polygon, are ignored.\n+   */\n+  GeoJsonTile(JSONObject jsonObject) {\n+    this.extent = new GeoJsonExtent(new GeoJsonGeometry(jsonObject));\n+    this.id = Optional.of(jsonObject.optString(ID_KEY));\n+    this.url =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879d9f3b3e29208577c0566b642cf762244cc8c2"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAyNDIzNA==", "bodyText": "done", "url": "https://github.com/google/ground-android/pull/342#discussion_r379024234", "createdAt": "2020-02-13T17:57:02Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonTile.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.geojson;\n+\n+import static java8.util.J8Arrays.stream;\n+\n+import com.google.android.gms.maps.model.LatLng;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import java8.util.Optional;\n+import org.json.JSONObject;\n+\n+/**\n+ * A GeoJSONTile is any polygon that describes a single exterior ring comprised of four ordered\n+ * coordinates: South/West, South/East, North/West, North/East, has a cartesian representation, and\n+ * has an associated URL.\n+ */\n+public class GeoJsonTile {\n+\n+  private static final String ID_KEY = \"id\";\n+  private static final String PROPERTIES_KEY = \"properties\";\n+  private static final String URL_KEY = \"title\";\n+\n+  private final GeoJsonExtent extent;\n+  private final Optional<String> id;\n+  private final Optional<String> url;\n+\n+  /**\n+   * Constructs a GeoJSONTile based on the contents of {@param jsonObject}.\n+   *\n+   * <p>A valid tile has the following information:\n+   *\n+   * <p>- a geometry describing a polygon. - an id specifying cartesian coordinates. - a URL\n+   * specifying a source for the tile imagery.\n+   *\n+   * <p>GeoJSON Polygons are described using coordinate arrays that form a linear ring. The first\n+   * and last value in a linear ring are equivalent. We assume coordinates are ordered, S/W, S/E,\n+   * N/E, N/W, (S/W again, closing the ring).\n+   *\n+   * <p>Interior rings, which describe holes in the polygon, are ignored.\n+   */\n+  GeoJsonTile(JSONObject jsonObject) {\n+    this.extent = new GeoJsonExtent(new GeoJsonGeometry(jsonObject));\n+    this.id = Optional.of(jsonObject.optString(ID_KEY));\n+    this.url =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwNTE3NA=="}, "originalCommit": {"oid": "879d9f3b3e29208577c0566b642cf762244cc8c2"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODU5ODA5OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMjowODo0MVrOFofn7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzo1MToyNVrOFpdnzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwNTQ4Nw==", "bodyText": "Can we split the loading of the file into a String into a separate method so that this method will focus on  parsing its contents?", "url": "https://github.com/google/ground-android/pull/342#discussion_r378005487", "createdAt": "2020-02-12T02:08:41Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonParser.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.geojson;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.J8Arrays.stream;\n+\n+import android.util.Log;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.model.basemap.tile.Tile.State;\n+import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;\n+import com.google.common.collect.ImmutableList;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import javax.inject.Inject;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class GeoJsonParser {\n+\n+  private static final String TAG = GeoJsonParser.class.getSimpleName();\n+  private final OfflineUuidGenerator uuidGenerator;\n+\n+  @Inject\n+  GeoJsonParser(OfflineUuidGenerator uuidGenerator) {\n+    this.uuidGenerator = uuidGenerator;\n+  }\n+\n+  /**\n+   * Converts a JSONArray to an array of JSONObjects. Provided for compatibility with java8 streams.\n+   * JSONArray itself only inherits from Object, and is not convertible to a stream.\n+   */\n+  private static JSONObject[] toArray(JSONArray arr) {\n+    JSONObject[] result = new JSONObject[arr.length()];\n+\n+    for (int i = 0; i < arr.length(); i++) {\n+      try {\n+        JSONObject o = arr.getJSONObject(i);\n+        result[i] = o;\n+      } catch (JSONException e) {\n+        Log.e(TAG, \"couldn't parse json\", e);\n+      }\n+    }\n+\n+    return result;\n+  }\n+\n+  /**\n+   * Returns the immutable list of tiles specified in {@param geojson} that intersect {@param\n+   * bounds}.\n+   */\n+  public ImmutableList<Tile> intersectingTiles(LatLngBounds bounds, File geojson) {\n+    try {\n+      InputStream is = new FileInputStream(geojson);\n+      BufferedReader buf = new BufferedReader(new InputStreamReader(is));\n+      String line = buf.readLine();\n+      StringBuilder sb = new StringBuilder();\n+      while (line != null) {\n+        sb.append(line).append('\\n');\n+        line = buf.readLine();\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879d9f3b3e29208577c0566b642cf762244cc8c2"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAyMTI2Mg==", "bodyText": "Done!", "url": "https://github.com/google/ground-android/pull/342#discussion_r379021262", "createdAt": "2020-02-13T17:51:25Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonParser.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.geojson;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.J8Arrays.stream;\n+\n+import android.util.Log;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.model.basemap.tile.Tile.State;\n+import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;\n+import com.google.common.collect.ImmutableList;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import javax.inject.Inject;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class GeoJsonParser {\n+\n+  private static final String TAG = GeoJsonParser.class.getSimpleName();\n+  private final OfflineUuidGenerator uuidGenerator;\n+\n+  @Inject\n+  GeoJsonParser(OfflineUuidGenerator uuidGenerator) {\n+    this.uuidGenerator = uuidGenerator;\n+  }\n+\n+  /**\n+   * Converts a JSONArray to an array of JSONObjects. Provided for compatibility with java8 streams.\n+   * JSONArray itself only inherits from Object, and is not convertible to a stream.\n+   */\n+  private static JSONObject[] toArray(JSONArray arr) {\n+    JSONObject[] result = new JSONObject[arr.length()];\n+\n+    for (int i = 0; i < arr.length(); i++) {\n+      try {\n+        JSONObject o = arr.getJSONObject(i);\n+        result[i] = o;\n+      } catch (JSONException e) {\n+        Log.e(TAG, \"couldn't parse json\", e);\n+      }\n+    }\n+\n+    return result;\n+  }\n+\n+  /**\n+   * Returns the immutable list of tiles specified in {@param geojson} that intersect {@param\n+   * bounds}.\n+   */\n+  public ImmutableList<Tile> intersectingTiles(LatLngBounds bounds, File geojson) {\n+    try {\n+      InputStream is = new FileInputStream(geojson);\n+      BufferedReader buf = new BufferedReader(new InputStreamReader(is));\n+      String line = buf.readLine();\n+      StringBuilder sb = new StringBuilder();\n+      while (line != null) {\n+        sb.append(line).append('\\n');\n+        line = buf.readLine();\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwNTQ4Nw=="}, "originalCommit": {"oid": "879d9f3b3e29208577c0566b642cf762244cc8c2"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTg3NzEyOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonExtent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjoyODoyM1rOFplzLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTozNDo1NlrOFrTQVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1NTI0NQ==", "bodyText": "Can we get rid of this method and expose or rename getPolygonVertices()", "url": "https://github.com/google/ground-android/pull/342#discussion_r379155245", "createdAt": "2020-02-13T22:28:23Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonExtent.java", "diffHunk": "@@ -17,49 +17,44 @@\n package com.google.android.gnd.persistence.geojson;\n \n import com.google.android.gms.maps.model.LatLng;\n-import com.google.android.gms.maps.model.LatLngBounds;\n-import java8.util.Optional;\n+import com.google.common.collect.ImmutableList;\n import javax.annotation.Nullable;\n import org.json.JSONArray;\n \n-public class GeoJsonExtent {\n+class GeoJsonExtent {\n \n   private final GeoJsonGeometry geometry;\n-  private final Optional<LatLng[]> coordinates;\n \n   @Nullable\n   GeoJsonExtent(GeoJsonGeometry geometry) {\n     this.geometry = geometry;\n-    this.coordinates = getPolygonCoordinates();\n   }\n \n-  Optional<LatLngBounds> getBounds() {\n-    return this.coordinates.map(cs -> new LatLngBounds(cs[0], cs[2]));\n+  ImmutableList<LatLng> getVertices() {\n+    return getPolygonVertices();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb10b27112ecbcd8d5d212a32287abd34b353a51"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0ODU2NQ==", "bodyText": "Sgtm, done!", "url": "https://github.com/google/ground-android/pull/342#discussion_r380948565", "createdAt": "2020-02-18T21:34:56Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonExtent.java", "diffHunk": "@@ -17,49 +17,44 @@\n package com.google.android.gnd.persistence.geojson;\n \n import com.google.android.gms.maps.model.LatLng;\n-import com.google.android.gms.maps.model.LatLngBounds;\n-import java8.util.Optional;\n+import com.google.common.collect.ImmutableList;\n import javax.annotation.Nullable;\n import org.json.JSONArray;\n \n-public class GeoJsonExtent {\n+class GeoJsonExtent {\n \n   private final GeoJsonGeometry geometry;\n-  private final Optional<LatLng[]> coordinates;\n \n   @Nullable\n   GeoJsonExtent(GeoJsonGeometry geometry) {\n     this.geometry = geometry;\n-    this.coordinates = getPolygonCoordinates();\n   }\n \n-  Optional<LatLngBounds> getBounds() {\n-    return this.coordinates.map(cs -> new LatLngBounds(cs[0], cs[2]));\n+  ImmutableList<LatLng> getVertices() {\n+    return getPolygonVertices();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1NTI0NQ=="}, "originalCommit": {"oid": "bb10b27112ecbcd8d5d212a32287abd34b353a51"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTg4NDE3OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjozMToxMFrOFpl3rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTozNjo1MFrOFrTUAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1NjM5OA==", "bodyText": "Instead of eating the exception and returning \"\", we can throw it and catch it in intersectingTiles, eliminating the need for a \"fake\" value in the interim.", "url": "https://github.com/google/ground-android/pull/342#discussion_r379156398", "createdAt": "2020-02-13T22:31:10Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonParser.java", "diffHunk": "@@ -46,41 +46,32 @@\n     this.uuidGenerator = uuidGenerator;\n   }\n \n-  /**\n-   * Converts a JSONArray to an array of JSONObjects. Provided for compatibility with java8 streams.\n-   * JSONArray itself only inherits from Object, and is not convertible to a stream.\n-   */\n-  private static JSONObject[] toArray(JSONArray arr) {\n-    JSONObject[] result = new JSONObject[arr.length()];\n+  private String readJsonFile(File file) {\n+    try {\n+      InputStream is = new FileInputStream(file);\n+      BufferedReader buf = new BufferedReader(new InputStreamReader(is));\n+      StringBuilder sb = new StringBuilder();\n \n-    for (int i = 0; i < arr.length(); i++) {\n-      try {\n-        JSONObject o = arr.getJSONObject(i);\n-        result[i] = o;\n-      } catch (JSONException e) {\n-        Log.e(TAG, \"couldn't parse json\", e);\n+      int res = buf.read();\n+      while (res != -1) {\n+        sb.append(res);\n+        res = buf.read();\n       }\n+      return sb.toString();\n+    } catch (IOException e) {\n+      Log.e(TAG, \"Unable to load JSON\", e);\n     }\n-\n-    return result;\n+    return \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb10b27112ecbcd8d5d212a32287abd34b353a51"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0OTUwNw==", "bodyText": "Ah, gotcha. \u2705", "url": "https://github.com/google/ground-android/pull/342#discussion_r380949507", "createdAt": "2020-02-18T21:36:50Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonParser.java", "diffHunk": "@@ -46,41 +46,32 @@\n     this.uuidGenerator = uuidGenerator;\n   }\n \n-  /**\n-   * Converts a JSONArray to an array of JSONObjects. Provided for compatibility with java8 streams.\n-   * JSONArray itself only inherits from Object, and is not convertible to a stream.\n-   */\n-  private static JSONObject[] toArray(JSONArray arr) {\n-    JSONObject[] result = new JSONObject[arr.length()];\n+  private String readJsonFile(File file) {\n+    try {\n+      InputStream is = new FileInputStream(file);\n+      BufferedReader buf = new BufferedReader(new InputStreamReader(is));\n+      StringBuilder sb = new StringBuilder();\n \n-    for (int i = 0; i < arr.length(); i++) {\n-      try {\n-        JSONObject o = arr.getJSONObject(i);\n-        result[i] = o;\n-      } catch (JSONException e) {\n-        Log.e(TAG, \"couldn't parse json\", e);\n+      int res = buf.read();\n+      while (res != -1) {\n+        sb.append(res);\n+        res = buf.read();\n       }\n+      return sb.toString();\n+    } catch (IOException e) {\n+      Log.e(TAG, \"Unable to load JSON\", e);\n     }\n-\n-    return result;\n+    return \"\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1NjM5OA=="}, "originalCommit": {"oid": "bb10b27112ecbcd8d5d212a32287abd34b353a51"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTg4NTEwOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjozMTozMlrOFpl4RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTozOTowMVrOFrTYLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1NjU0OA==", "bodyText": "These two lines can be combined.", "url": "https://github.com/google/ground-android/pull/342#discussion_r379156548", "createdAt": "2020-02-13T22:31:32Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonParser.java", "diffHunk": "@@ -89,19 +80,39 @@\n           .map(this::jsonToTile)\n           .collect(toImmutableList());\n \n-    } catch (IOException | JSONException e) {\n-      Log.e(TAG, \"Unable to load JSON layer\", e);\n+    } catch (JSONException e) {\n+      Log.e(TAG, \"Unable to parse JSON\", e);\n     }\n+\n     return ImmutableList.of();\n   }\n \n+  /**\n+   * Converts a JSONArray to an array of JSONObjects. Provided for compatibility with java8 streams.\n+   * JSONArray itself only inherits from Object, and is not convertible to a stream.\n+   */\n+  private static JSONObject[] toArray(JSONArray arr) {\n+    JSONObject[] result = new JSONObject[arr.length()];\n+\n+    for (int i = 0; i < arr.length(); i++) {\n+      try {\n+        JSONObject o = arr.getJSONObject(i);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb10b27112ecbcd8d5d212a32287abd34b353a51"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MDU3NA==", "bodyText": "Done!", "url": "https://github.com/google/ground-android/pull/342#discussion_r380950574", "createdAt": "2020-02-18T21:39:01Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonParser.java", "diffHunk": "@@ -89,19 +80,39 @@\n           .map(this::jsonToTile)\n           .collect(toImmutableList());\n \n-    } catch (IOException | JSONException e) {\n-      Log.e(TAG, \"Unable to load JSON layer\", e);\n+    } catch (JSONException e) {\n+      Log.e(TAG, \"Unable to parse JSON\", e);\n     }\n+\n     return ImmutableList.of();\n   }\n \n+  /**\n+   * Converts a JSONArray to an array of JSONObjects. Provided for compatibility with java8 streams.\n+   * JSONArray itself only inherits from Object, and is not convertible to a stream.\n+   */\n+  private static JSONObject[] toArray(JSONArray arr) {\n+    JSONObject[] result = new JSONObject[arr.length()];\n+\n+    for (int i = 0; i < arr.length(); i++) {\n+      try {\n+        JSONObject o = arr.getJSONObject(i);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1NjU0OA=="}, "originalCommit": {"oid": "bb10b27112ecbcd8d5d212a32287abd34b353a51"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTg4OTMyOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjozMzoxNlrOFpl7AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTozOTowOVrOFrTYfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1NzI0OA==", "bodyText": "Ideally we wouldn't keep Tile in an invalidate state if the file is invalid. Could you add a TODO here to throw an Exception instead that gets handled downstream?", "url": "https://github.com/google/ground-android/pull/342#discussion_r379157248", "createdAt": "2020-02-13T22:33:16Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonParser.java", "diffHunk": "@@ -89,19 +80,39 @@\n           .map(this::jsonToTile)\n           .collect(toImmutableList());\n \n-    } catch (IOException | JSONException e) {\n-      Log.e(TAG, \"Unable to load JSON layer\", e);\n+    } catch (JSONException e) {\n+      Log.e(TAG, \"Unable to parse JSON\", e);\n     }\n+\n     return ImmutableList.of();\n   }\n \n+  /**\n+   * Converts a JSONArray to an array of JSONObjects. Provided for compatibility with java8 streams.\n+   * JSONArray itself only inherits from Object, and is not convertible to a stream.\n+   */\n+  private static JSONObject[] toArray(JSONArray arr) {\n+    JSONObject[] result = new JSONObject[arr.length()];\n+\n+    for (int i = 0; i < arr.length(); i++) {\n+      try {\n+        JSONObject o = arr.getJSONObject(i);\n+        result[i] = o;\n+      } catch (JSONException e) {\n+        Log.e(TAG, \"couldn't parse json\", e);\n+      }\n+    }\n+\n+    return result;\n+  }\n+\n   /** Returns the {@link Tile} specified by {@param json}. */\n   private Tile jsonToTile(GeoJsonTile json) {\n     return Tile.newBuilder()\n         .setId(uuidGenerator.generateUuid())\n-        .setUrl(json.getUrl().get())\n+        .setUrl(json.getUrl().orElse(\"\"))\n         .setState(State.PENDING)\n-        .setPath(Tile.pathFromId(json.getId().get()))\n+        .setPath(Tile.pathFromId(json.getId().orElse(\"\")))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb10b27112ecbcd8d5d212a32287abd34b353a51"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MDY1NA==", "bodyText": "Added.", "url": "https://github.com/google/ground-android/pull/342#discussion_r380950654", "createdAt": "2020-02-18T21:39:09Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonParser.java", "diffHunk": "@@ -89,19 +80,39 @@\n           .map(this::jsonToTile)\n           .collect(toImmutableList());\n \n-    } catch (IOException | JSONException e) {\n-      Log.e(TAG, \"Unable to load JSON layer\", e);\n+    } catch (JSONException e) {\n+      Log.e(TAG, \"Unable to parse JSON\", e);\n     }\n+\n     return ImmutableList.of();\n   }\n \n+  /**\n+   * Converts a JSONArray to an array of JSONObjects. Provided for compatibility with java8 streams.\n+   * JSONArray itself only inherits from Object, and is not convertible to a stream.\n+   */\n+  private static JSONObject[] toArray(JSONArray arr) {\n+    JSONObject[] result = new JSONObject[arr.length()];\n+\n+    for (int i = 0; i < arr.length(); i++) {\n+      try {\n+        JSONObject o = arr.getJSONObject(i);\n+        result[i] = o;\n+      } catch (JSONException e) {\n+        Log.e(TAG, \"couldn't parse json\", e);\n+      }\n+    }\n+\n+    return result;\n+  }\n+\n   /** Returns the {@link Tile} specified by {@param json}. */\n   private Tile jsonToTile(GeoJsonTile json) {\n     return Tile.newBuilder()\n         .setId(uuidGenerator.generateUuid())\n-        .setUrl(json.getUrl().get())\n+        .setUrl(json.getUrl().orElse(\"\"))\n         .setState(State.PENDING)\n-        .setPath(Tile.pathFromId(json.getId().get()))\n+        .setPath(Tile.pathFromId(json.getId().orElse(\"\")))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1NzI0OA=="}, "originalCommit": {"oid": "bb10b27112ecbcd8d5d212a32287abd34b353a51"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTg5MzU4OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonTile.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjozNTowN1rOFpl9og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTo1MDoyMlrOFrTunQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1NzkyMg==", "bodyText": "This will return Optional.of(\"\") if it doesn't exists. We should either model missing as null, Optional.empty(), or \"\". Any of those alternatives are fine, but all these will make edge cases harder to catch.", "url": "https://github.com/google/ground-android/pull/342#discussion_r379157922", "createdAt": "2020-02-13T22:35:07Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonTile.java", "diffHunk": "@@ -53,34 +52,22 @@\n    * <p>Interior rings, which describe holes in the polygon, are ignored.\n    */\n   GeoJsonTile(JSONObject jsonObject) {\n-    this.extent = new GeoJsonExtent(new GeoJsonGeometry(jsonObject));\n-    this.id = Optional.of(jsonObject.optString(ID_KEY));\n-    this.url =\n-        Optional.ofNullable(jsonObject.optJSONObject(PROPERTIES_KEY))\n-            .map(j -> j.optString(URL_KEY));\n+    this.json = jsonObject;\n   }\n \n-  public Optional<LatLngBounds> getBounds() {\n-    return this.extent.getBounds();\n-  }\n-\n-  public Optional<LatLng[]> getCoordinates() {\n-    return this.extent.getCoordinates();\n+  private ImmutableList<LatLng> getVertices() {\n+    return new GeoJsonExtent(new GeoJsonGeometry(json)).getVertices();\n   }\n \n   public Optional<String> getId() {\n-    return this.id;\n+    return Optional.of(json.optString(ID_KEY));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb10b27112ecbcd8d5d212a32287abd34b353a51"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1NjMxNw==", "bodyText": "Gotcha, returning Optional.empty on...well, empty values.", "url": "https://github.com/google/ground-android/pull/342#discussion_r380956317", "createdAt": "2020-02-18T21:50:22Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonTile.java", "diffHunk": "@@ -53,34 +52,22 @@\n    * <p>Interior rings, which describe holes in the polygon, are ignored.\n    */\n   GeoJsonTile(JSONObject jsonObject) {\n-    this.extent = new GeoJsonExtent(new GeoJsonGeometry(jsonObject));\n-    this.id = Optional.of(jsonObject.optString(ID_KEY));\n-    this.url =\n-        Optional.ofNullable(jsonObject.optJSONObject(PROPERTIES_KEY))\n-            .map(j -> j.optString(URL_KEY));\n+    this.json = jsonObject;\n   }\n \n-  public Optional<LatLngBounds> getBounds() {\n-    return this.extent.getBounds();\n-  }\n-\n-  public Optional<LatLng[]> getCoordinates() {\n-    return this.extent.getCoordinates();\n+  private ImmutableList<LatLng> getVertices() {\n+    return new GeoJsonExtent(new GeoJsonGeometry(json)).getVertices();\n   }\n \n   public Optional<String> getId() {\n-    return this.id;\n+    return Optional.of(json.optString(ID_KEY));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1NzkyMg=="}, "originalCommit": {"oid": "bb10b27112ecbcd8d5d212a32287abd34b353a51"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODAzODg3OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonParser.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMjo0NDoxNlrOFrVL2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMjo1NjowOFrOFrVgZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk4MDE4Nw==", "bodyText": "If you're throwing the exception callers will need to catch it, and they will try to log it as well; in that case no need for the try/catch and Log,", "url": "https://github.com/google/ground-android/pull/342#discussion_r380980187", "createdAt": "2020-02-18T22:44:16Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonParser.java", "diffHunk": "@@ -60,17 +60,17 @@ private String readJsonFile(File file) {\n       return sb.toString();\n     } catch (IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9015243dd1e7de3cb27390027d3c9daa2b7fa096"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk4MDUwOA==", "bodyText": "In fact I see it's logged in the calling function, so ok to remove the try/catch block.", "url": "https://github.com/google/ground-android/pull/342#discussion_r380980508", "createdAt": "2020-02-18T22:44:51Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonParser.java", "diffHunk": "@@ -60,17 +60,17 @@ private String readJsonFile(File file) {\n       return sb.toString();\n     } catch (IOException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk4MDE4Nw=="}, "originalCommit": {"oid": "9015243dd1e7de3cb27390027d3c9daa2b7fa096"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk4NTQ0Ng==", "bodyText": "Thanks!", "url": "https://github.com/google/ground-android/pull/342#discussion_r380985446", "createdAt": "2020-02-18T22:56:08Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonParser.java", "diffHunk": "@@ -60,17 +60,17 @@ private String readJsonFile(File file) {\n       return sb.toString();\n     } catch (IOException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk4MDE4Nw=="}, "originalCommit": {"oid": "9015243dd1e7de3cb27390027d3c9daa2b7fa096"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODA1MjgzOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMjo0OToxOVrOFrVUUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMzowODo0NFrOFrVy-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk4MjM1Mw==", "bodyText": "This error message is slightly misleading \"Ignoring Error in JSON\" might be more accurate.", "url": "https://github.com/google/ground-android/pull/342#discussion_r380982353", "createdAt": "2020-02-18T22:49:19Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonParser.java", "diffHunk": "@@ -96,8 +96,7 @@ private String readJsonFile(File file) {\n \n     for (int i = 0; i < arr.length(); i++) {\n       try {\n-        JSONObject o = arr.getJSONObject(i);\n-        result[i] = o;\n+        result[i] = arr.getJSONObject(i);\n       } catch (JSONException e) {\n         Log.e(TAG, \"couldn't parse json\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9015243dd1e7de3cb27390027d3c9daa2b7fa096"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk5MDIwMA==", "bodyText": "Good call, updated to \"Ignoring error in JSON array\"", "url": "https://github.com/google/ground-android/pull/342#discussion_r380990200", "createdAt": "2020-02-18T23:08:44Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonParser.java", "diffHunk": "@@ -96,8 +96,7 @@ private String readJsonFile(File file) {\n \n     for (int i = 0; i < arr.length(); i++) {\n       try {\n-        JSONObject o = arr.getJSONObject(i);\n-        result[i] = o;\n+        result[i] = arr.getJSONObject(i);\n       } catch (JSONException e) {\n         Log.e(TAG, \"couldn't parse json\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk4MjM1Mw=="}, "originalCommit": {"oid": "9015243dd1e7de3cb27390027d3c9daa2b7fa096"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODA2MDk1OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMjo1MTo1MFrOFrVY3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMzowODoxOFrOFrVyUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk4MzUxNg==", "bodyText": "When an exception is thrown here result[i] will remain uninitialized (null). In this case you'd need to filter them out in the caller intersectingTiles(). A cleaner/simpler approach would be to add them to an ArrayList instead of a primitive array.", "url": "https://github.com/google/ground-android/pull/342#discussion_r380983516", "createdAt": "2020-02-18T22:51:50Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonParser.java", "diffHunk": "@@ -96,8 +96,7 @@ private String readJsonFile(File file) {\n \n     for (int i = 0; i < arr.length(); i++) {\n       try {\n-        JSONObject o = arr.getJSONObject(i);\n-        result[i] = o;\n+        result[i] = arr.getJSONObject(i);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9015243dd1e7de3cb27390027d3c9daa2b7fa096"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk5MDAzNQ==", "bodyText": "Gotcha, switched to ArrayList", "url": "https://github.com/google/ground-android/pull/342#discussion_r380990035", "createdAt": "2020-02-18T23:08:18Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonParser.java", "diffHunk": "@@ -96,8 +96,7 @@ private String readJsonFile(File file) {\n \n     for (int i = 0; i < arr.length(); i++) {\n       try {\n-        JSONObject o = arr.getJSONObject(i);\n-        result[i] = o;\n+        result[i] = arr.getJSONObject(i);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk4MzUxNg=="}, "originalCommit": {"oid": "9015243dd1e7de3cb27390027d3c9daa2b7fa096"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2599, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}