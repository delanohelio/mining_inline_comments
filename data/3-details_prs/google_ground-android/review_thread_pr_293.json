{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5MzM4MDE2", "number": 293, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMzowOToyMFrODWiTrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNDoyMzowMVrODWjn_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0OTU3MzU3OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/model/User.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMzowOToyMFrOFbWU2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNjoyMjoxMFrOFbcR2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIyMTY1Nw==", "bodyText": "This can be removed now. Not being used anywhere.", "url": "https://github.com/google/ground-android/pull/293#discussion_r364221657", "createdAt": "2020-01-08T13:09:20Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/model/User.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.google.android.gnd.model;\n+\n+import com.google.auto.value.AutoValue;\n+\n+/** Represents a single application user. */\n+@AutoValue\n+public abstract class User {\n+\n+  // TODO: Replace this workaround with Optional<User> or UNKNOWN.\n+  public static final User ANONYMOUS =\n+      User.builder().setId(\"\").setEmail(\"\").setDisplayName(\"\").build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e88c538bebc77526c1a8ee619c9da7bbdad39a5e"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMxOTE5Mw==", "bodyText": "Weird, I thought I removed this. Amending my last commit to include its removal.", "url": "https://github.com/google/ground-android/pull/293#discussion_r364319193", "createdAt": "2020-01-08T16:22:10Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/model/User.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.google.android.gnd.model;\n+\n+import com.google.auto.value.AutoValue;\n+\n+/** Represents a single application user. */\n+@AutoValue\n+public abstract class User {\n+\n+  // TODO: Replace this workaround with Optional<User> or UNKNOWN.\n+  public static final User ANONYMOUS =\n+      User.builder().setId(\"\").setEmail(\"\").setDisplayName(\"\").build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIyMTY1Nw=="}, "originalCommit": {"oid": "e88c538bebc77526c1a8ee619c9da7bbdad39a5e"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0OTU4NTA5OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/local/room/AuditInfoEntity.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMzoxMzo1OFrOFbWb2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNjozOTo1NlrOFbc4nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIyMzQ1MQ==", "bodyText": "Please use Long instead of primitive type long for consistency.", "url": "https://github.com/google/ground-android/pull/293#discussion_r364223451", "createdAt": "2020-01-08T13:13:58Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/local/room/AuditInfoEntity.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.local.room;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.room.Embedded;\n+import com.google.android.gnd.model.AuditInfo;\n+import com.google.auto.value.AutoValue;\n+import com.google.auto.value.AutoValue.CopyAnnotations;\n+import java.util.Date;\n+import java8.util.Optional;\n+\n+/** User details and timestamp for creation or modification of a model object. */\n+@AutoValue\n+public abstract class AuditInfoEntity {\n+\n+  /**\n+   * Returns the user initiating the related action. This can never be null, since users must always\n+   * be logged in to make changes.\n+   */\n+  @CopyAnnotations\n+  @Embedded(prefix = \"user_\")\n+  @NonNull\n+  public abstract UserDetails getUser();\n+\n+  /** Returns the time at which the user action was initiated, according to the user's device. */\n+  @CopyAnnotations\n+  public abstract long getClientTimeMillis();\n+\n+  /**\n+   * Returns the time at which the server received the requested change according to the server's\n+   * internal clock, or null if the updated server time was not yet received.\n+   */\n+  @CopyAnnotations\n+  @Nullable\n+  public abstract Long getServerTimeMillis();\n+\n+  /** Converts a model object into a local db entity. */\n+  public static AuditInfoEntity fromObject(AuditInfo o) {\n+    return AuditInfoEntity.builder()\n+        .setUser(UserDetails.fromUser(o.getUser()))\n+        .setClientTimeMillis(o.getClientTimeMillis().getTime())\n+        .setServerTimeMillis(o.getServerTimeMillis().map(Date::getTime).orElse(null))\n+        .build();\n+  }\n+\n+  public static AuditInfo toObject(AuditInfoEntity e) {\n+    return AuditInfo.builder()\n+        .setUser(UserDetails.toUser(e.getUser()))\n+        .setClientTimeMillis(new Date(e.getClientTimeMillis()))\n+        .setServerTimeMillis(Optional.ofNullable(e.getServerTimeMillis()).map(Date::new))\n+        .build();\n+  }\n+\n+  // Generated by AutoValue plugin:\n+\n+  @NonNull\n+  public static AuditInfoEntity create(\n+      @NonNull UserDetails user, long clientTimeMillis, @Nullable Long serverTimeMillis) {\n+    return builder()\n+        .setUser(user)\n+        .setClientTimeMillis(clientTimeMillis)\n+        .setServerTimeMillis(serverTimeMillis)\n+        .build();\n+  }\n+\n+  public static Builder builder() {\n+    return new AutoValue_AuditInfoEntity.Builder();\n+  }\n+\n+  @AutoValue.Builder\n+  public abstract static class Builder {\n+\n+    public abstract Builder setUser(UserDetails newUser);\n+\n+    public abstract Builder setClientTimeMillis(@NonNull long newClientTimeMillis);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e88c538bebc77526c1a8ee619c9da7bbdad39a5e"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMyOTExNw==", "bodyText": "We generally use long for non-nulls, so wasn't sure which convention to be consistent with :). In doubt, pushed a commit to switch to Long.", "url": "https://github.com/google/ground-android/pull/293#discussion_r364329117", "createdAt": "2020-01-08T16:39:56Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/local/room/AuditInfoEntity.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.local.room;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.room.Embedded;\n+import com.google.android.gnd.model.AuditInfo;\n+import com.google.auto.value.AutoValue;\n+import com.google.auto.value.AutoValue.CopyAnnotations;\n+import java.util.Date;\n+import java8.util.Optional;\n+\n+/** User details and timestamp for creation or modification of a model object. */\n+@AutoValue\n+public abstract class AuditInfoEntity {\n+\n+  /**\n+   * Returns the user initiating the related action. This can never be null, since users must always\n+   * be logged in to make changes.\n+   */\n+  @CopyAnnotations\n+  @Embedded(prefix = \"user_\")\n+  @NonNull\n+  public abstract UserDetails getUser();\n+\n+  /** Returns the time at which the user action was initiated, according to the user's device. */\n+  @CopyAnnotations\n+  public abstract long getClientTimeMillis();\n+\n+  /**\n+   * Returns the time at which the server received the requested change according to the server's\n+   * internal clock, or null if the updated server time was not yet received.\n+   */\n+  @CopyAnnotations\n+  @Nullable\n+  public abstract Long getServerTimeMillis();\n+\n+  /** Converts a model object into a local db entity. */\n+  public static AuditInfoEntity fromObject(AuditInfo o) {\n+    return AuditInfoEntity.builder()\n+        .setUser(UserDetails.fromUser(o.getUser()))\n+        .setClientTimeMillis(o.getClientTimeMillis().getTime())\n+        .setServerTimeMillis(o.getServerTimeMillis().map(Date::getTime).orElse(null))\n+        .build();\n+  }\n+\n+  public static AuditInfo toObject(AuditInfoEntity e) {\n+    return AuditInfo.builder()\n+        .setUser(UserDetails.toUser(e.getUser()))\n+        .setClientTimeMillis(new Date(e.getClientTimeMillis()))\n+        .setServerTimeMillis(Optional.ofNullable(e.getServerTimeMillis()).map(Date::new))\n+        .build();\n+  }\n+\n+  // Generated by AutoValue plugin:\n+\n+  @NonNull\n+  public static AuditInfoEntity create(\n+      @NonNull UserDetails user, long clientTimeMillis, @Nullable Long serverTimeMillis) {\n+    return builder()\n+        .setUser(user)\n+        .setClientTimeMillis(clientTimeMillis)\n+        .setServerTimeMillis(serverTimeMillis)\n+        .build();\n+  }\n+\n+  public static Builder builder() {\n+    return new AutoValue_AuditInfoEntity.Builder();\n+  }\n+\n+  @AutoValue.Builder\n+  public abstract static class Builder {\n+\n+    public abstract Builder setUser(UserDetails newUser);\n+\n+    public abstract Builder setClientTimeMillis(@NonNull long newClientTimeMillis);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIyMzQ1MQ=="}, "originalCommit": {"oid": "e88c538bebc77526c1a8ee619c9da7bbdad39a5e"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0OTc0NjcwOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNDowODo0OFrOFbX8Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNjoyOToyOFrOFbcihA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDI0ODE1MA==", "bodyText": "Would this trigger even when the user is found, since it is within doOnComplete?", "url": "https://github.com/google/ground-android/pull/293#discussion_r364248150", "createdAt": "2020-01-08T14:08:48Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java", "diffHunk": "@@ -298,22 +299,68 @@ public Completable mergeObservation(Observation observation) {\n     ObservationEntity observationEntity = ObservationEntity.fromObservation(observation);\n     return observationMutationDao\n         .findByObservationId(observation.getId())\n-        .map(observationEntity::applyMutations)\n-        .flatMapCompletable(observationDao::insertOrUpdate)\n+        .flatMapCompletable(mutations -> mergeObservation(observationEntity, mutations));\n+  }\n+\n+  private Completable mergeObservation(\n+      ObservationEntity observation, List<ObservationMutationEntity> mutations) {\n+    if (mutations.isEmpty()) {\n+      return Completable.complete();\n+    }\n+    ObservationMutationEntity lastMutation = mutations.get(mutations.size() - 1);\n+    return loadUser(lastMutation.getUserId())\n+        .map(user -> applyMutations(observation, mutations, user))\n+        .flatMapCompletable(obs -> observationDao.insertOrUpdate(obs).subscribeOn(Schedulers.io()));\n+  }\n+\n+  private ObservationEntity applyMutations(\n+      ObservationEntity observation, List<ObservationMutationEntity> mutations, User user) {\n+    ObservationMutationEntity lastMutation = mutations.get(mutations.size() - 1);\n+    long clientTimestamp = lastMutation.getClientTimestamp();\n+    Log.v(TAG, \"Merging observation \" + this + \" with mutations \" + mutations);\n+    ObservationEntity.Builder builder = observation.toBuilder();\n+    // Merge changes to responses.\n+    for (ObservationMutationEntity mutation : mutations) {\n+      builder.applyMutation(mutation);\n+    }\n+    // Update modified user and time.\n+    AuditInfoEntity lastModified =\n+        AuditInfoEntity.builder()\n+            .setUser(UserDetails.fromUser(user))\n+            .setClientTimeMillis(clientTimestamp)\n+            .build();\n+    builder.setLastModified(lastModified);\n+    Log.v(TAG, \"Merged observation \" + builder.build());\n+    return builder.build();\n+  }\n+\n+  @Override\n+  public Single<User> loadUser(String id) {\n+    return userDao\n+        .findById(id)\n+        .doOnComplete(() -> Log.e(TAG, \"User missing local db: \" + id))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e88c538bebc77526c1a8ee619c9da7bbdad39a5e"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMyMzQ2MA==", "bodyText": "You have an impeccable eye for detail! It should have been doOnError Fixed.\nAdded some follow-up TODOs in the description of #15.", "url": "https://github.com/google/ground-android/pull/293#discussion_r364323460", "createdAt": "2020-01-08T16:29:28Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java", "diffHunk": "@@ -298,22 +299,68 @@ public Completable mergeObservation(Observation observation) {\n     ObservationEntity observationEntity = ObservationEntity.fromObservation(observation);\n     return observationMutationDao\n         .findByObservationId(observation.getId())\n-        .map(observationEntity::applyMutations)\n-        .flatMapCompletable(observationDao::insertOrUpdate)\n+        .flatMapCompletable(mutations -> mergeObservation(observationEntity, mutations));\n+  }\n+\n+  private Completable mergeObservation(\n+      ObservationEntity observation, List<ObservationMutationEntity> mutations) {\n+    if (mutations.isEmpty()) {\n+      return Completable.complete();\n+    }\n+    ObservationMutationEntity lastMutation = mutations.get(mutations.size() - 1);\n+    return loadUser(lastMutation.getUserId())\n+        .map(user -> applyMutations(observation, mutations, user))\n+        .flatMapCompletable(obs -> observationDao.insertOrUpdate(obs).subscribeOn(Schedulers.io()));\n+  }\n+\n+  private ObservationEntity applyMutations(\n+      ObservationEntity observation, List<ObservationMutationEntity> mutations, User user) {\n+    ObservationMutationEntity lastMutation = mutations.get(mutations.size() - 1);\n+    long clientTimestamp = lastMutation.getClientTimestamp();\n+    Log.v(TAG, \"Merging observation \" + this + \" with mutations \" + mutations);\n+    ObservationEntity.Builder builder = observation.toBuilder();\n+    // Merge changes to responses.\n+    for (ObservationMutationEntity mutation : mutations) {\n+      builder.applyMutation(mutation);\n+    }\n+    // Update modified user and time.\n+    AuditInfoEntity lastModified =\n+        AuditInfoEntity.builder()\n+            .setUser(UserDetails.fromUser(user))\n+            .setClientTimeMillis(clientTimestamp)\n+            .build();\n+    builder.setLastModified(lastModified);\n+    Log.v(TAG, \"Merged observation \" + builder.build());\n+    return builder.build();\n+  }\n+\n+  @Override\n+  public Single<User> loadUser(String id) {\n+    return userDao\n+        .findById(id)\n+        .doOnComplete(() -> Log.e(TAG, \"User missing local db: \" + id))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDI0ODE1MA=="}, "originalCommit": {"oid": "e88c538bebc77526c1a8ee619c9da7bbdad39a5e"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0OTc4OTQzOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/model/Mutation.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNDoyMzowMVrOFbYWpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNjozNTo1N1rOFbcw0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDI1NDg4Ng==", "bodyText": "Instead of passing userId, can we pass User object instead? The reason is so that we don't have to load User again from the id in RoomLocalDataStore\nSee usages of loadUser in RoomLocalDataStore", "url": "https://github.com/google/ground-android/pull/293#discussion_r364254886", "createdAt": "2020-01-08T14:23:01Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/model/Mutation.java", "diffHunk": "@@ -86,7 +91,9 @@ public String toString() {\n \n     public abstract T setProjectId(String newProjectId);\n \n-    public abstract T setUserId(String newUserId);\n+    public abstract T setUserId(@Nullable String newUserId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e88c538bebc77526c1a8ee619c9da7bbdad39a5e"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDI1OTgyNA==", "bodyText": "But that would require adding *MutationEntityRelations to fetch User when loading from local db.", "url": "https://github.com/google/ground-android/pull/293#discussion_r364259824", "createdAt": "2020-01-08T14:33:06Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/model/Mutation.java", "diffHunk": "@@ -86,7 +91,9 @@ public String toString() {\n \n     public abstract T setProjectId(String newProjectId);\n \n-    public abstract T setUserId(String newUserId);\n+    public abstract T setUserId(@Nullable String newUserId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDI1NDg4Ng=="}, "originalCommit": {"oid": "e88c538bebc77526c1a8ee619c9da7bbdad39a5e"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMyNzEyMA==", "bodyText": "That would push the loading of the User to the time of loading Mutations, which at DB level would mean either loading each User individually, or doing a join to fetch them together. Loading them individually isn't a big deal since they're small, there will be few of them (max 2?) and the db is practically in memory. If we go that route, I think doing a query to fill them in the persistence later is more discoverable than using MutationEntityRelations.\nFiled #301 to revisit this.", "url": "https://github.com/google/ground-android/pull/293#discussion_r364327120", "createdAt": "2020-01-08T16:35:57Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/model/Mutation.java", "diffHunk": "@@ -86,7 +91,9 @@ public String toString() {\n \n     public abstract T setProjectId(String newProjectId);\n \n-    public abstract T setUserId(String newUserId);\n+    public abstract T setUserId(@Nullable String newUserId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDI1NDg4Ng=="}, "originalCommit": {"oid": "e88c538bebc77526c1a8ee619c9da7bbdad39a5e"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2574, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}