{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1MDQxMDYx", "number": 671, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNDo1NzowNVrOFJyvEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjowNjowOFrOFJzxhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODEyNzUzOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/rx/EventStream.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNDo1NzowNVrOIMRJew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNDo1NzowNVrOIMRJew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTczNDc3OQ==", "bodyText": "typo s/and/any", "url": "https://github.com/google/ground-android/pull/671#discussion_r549734779", "createdAt": "2020-12-29T14:57:05Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/rx/EventStream.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx;\n+\n+/**\n+ * Marks an RxJava stream as emitting events. Events are only emitted as they occur, and new\n+ * observers are not notified of emits which occurred before subscribe(). The stream continues to\n+ * emit new events until the observer unsubscribes.\n+ *\n+ * <p>These streams are considered \"hot\"; subscribing does not trigger and events or otherwise alter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5228767b935151ef1a7d6bb15cfc422da19c75c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODEzODQ0OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/rx/EventStream.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNTowMTo0OFrOIMRPvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNTowMTo0OFrOIMRPvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTczNjM4MA==", "bodyText": "Instead of \"multiple observers may subscribe to received and process the same events\"\nWhat do you think of the following:\n\"When multiple observers are subscribed to the stream, each observer receives the emitted events.\"", "url": "https://github.com/google/ground-android/pull/671#discussion_r549736380", "createdAt": "2020-12-29T15:01:48Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/rx/EventStream.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx;\n+\n+/**\n+ * Marks an RxJava stream as emitting events. Events are only emitted as they occur, and new\n+ * observers are not notified of emits which occurred before subscribe(). The stream continues to\n+ * emit new events until the observer unsubscribes.\n+ *\n+ * <p>These streams are considered \"hot\"; subscribing does not trigger and events or otherwise alter\n+ * the stream, and the stream is suitable for multicasting (i.e., multiple observers may subscribe\n+ * to received and process the same events).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5228767b935151ef1a7d6bb15cfc422da19c75c"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODE0MDAxOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/rx/EventStream.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNTowMjoyMlrOIMRQlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNTowMjoyMlrOIMRQlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTczNjU5OQ==", "bodyText": "Should these also typically be infinite? Should we note that?", "url": "https://github.com/google/ground-android/pull/671#discussion_r549736599", "createdAt": "2020-12-29T15:02:22Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/rx/EventStream.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx;\n+\n+/**\n+ * Marks an RxJava stream as emitting events. Events are only emitted as they occur, and new", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5228767b935151ef1a7d6bb15cfc422da19c75c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODE0MjEzOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/rx/StateStream.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNTowMzoyMVrOIMRR2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNTowMzoyMVrOIMRR2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTczNjkyMw==", "bodyText": "Maybe: \"...on subscribe(); new states are continually emitted until the subscription is disposed.\"", "url": "https://github.com/google/ground-android/pull/671#discussion_r549736923", "createdAt": "2020-12-29T15:03:21Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/rx/StateStream.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx;\n+\n+/**\n+ * Marks an RxJava or LiveData stream as emitting state. The latest state is immediately emitted to\n+ * new observers on subscribe(), with new states continuing to be emitted until the subscription is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5228767b935151ef1a7d6bb15cfc422da19c75c"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODE0MjY3OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/rx/StateStream.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNTowMzozNlrOIMRSKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNTowMzozNlrOIMRSKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTczNzAwMQ==", "bodyText": "delete \"as\" before hot", "url": "https://github.com/google/ground-android/pull/671#discussion_r549737001", "createdAt": "2020-12-29T15:03:36Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/rx/StateStream.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx;\n+\n+/**\n+ * Marks an RxJava or LiveData stream as emitting state. The latest state is immediately emitted to\n+ * new observers on subscribe(), with new states continuing to be emitted until the subscription is\n+ * disposed.\n+ *\n+ * <p>The stream is considered as \"hot\"; subscribing has no effect on state and the stream is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5228767b935151ef1a7d6bb15cfc422da19c75c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODE0NTMzOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/Cold.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNTowNDo0NlrOIMRTuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNTowNDo0NlrOIMRTuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTczNzQwMw==", "bodyText": "s/observer/observers", "url": "https://github.com/google/ground-android/pull/671#discussion_r549737403", "createdAt": "2020-12-29T15:04:46Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/Cold.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx.annotations;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Marks an observable as \"cold\". Cold observables create a new producer each time an observer\n+ * subscribes.\n+ *\n+ * <p>Cold observables start emitting items when observer subscribe, so observers are guaranteed to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5228767b935151ef1a7d6bb15cfc422da19c75c"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODE2MjM4OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/Cold.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNToxMTo1MVrOIMRdZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxMTowNDozNVrOIQOMug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTczOTg3Nw==", "bodyText": "How about:\n\"Cold observables start emitting items when observers subscribe. Each observer of a cold observable is guaranteed to receive all of that observable's emissions, regardless of when the observer subscribed.\"", "url": "https://github.com/google/ground-android/pull/671#discussion_r549739877", "createdAt": "2020-12-29T15:11:51Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/Cold.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx.annotations;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Marks an observable as \"cold\". Cold observables create a new producer each time an observer\n+ * subscribes.\n+ *\n+ * <p>Cold observables start emitting items when observer subscribe, so observers are guaranteed to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5228767b935151ef1a7d6bb15cfc422da19c75c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg4MDc2Mg==", "bodyText": "I think stating they won't miss items as a result of subscribing too late is more correct here; an observer might miss items if they dispose of the observable too early.", "url": "https://github.com/google/ground-android/pull/671#discussion_r553880762", "createdAt": "2021-01-08T11:04:35Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/Cold.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx.annotations;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Marks an observable as \"cold\". Cold observables create a new producer each time an observer\n+ * subscribes.\n+ *\n+ * <p>Cold observables start emitting items when observer subscribe, so observers are guaranteed to", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTczOTg3Nw=="}, "originalCommit": {"oid": "c5228767b935151ef1a7d6bb15cfc422da19c75c"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODE2ODY3OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/Cold.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNToxNDoyMFrOIMRg5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxMToxMTowOFrOIQOYIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0MDc3Mw==", "bodyText": "For the sake of simplification, think we can avoid this notion of \"producers\" altogether? Maybe:\n\"The sequence of items emitted by a cold observable is regenerated for each observer that subscribes to the observable. As such....\"", "url": "https://github.com/google/ground-android/pull/671#discussion_r549740773", "createdAt": "2020-12-29T15:14:20Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/Cold.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx.annotations;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Marks an observable as \"cold\". Cold observables create a new producer each time an observer\n+ * subscribes.\n+ *\n+ * <p>Cold observables start emitting items when observer subscribe, so observers are guaranteed to\n+ * see the whole sequence from the beginning.\n+ *\n+ * <p>Since a new producer is created on each subscription, the sequence of items is regenerated for", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99334b4e21fd6db100db9faffa8e07198a20ac99"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg4MzY4MQ==", "bodyText": "They refer heavily to producers in the RxJava design doc. Nonetheless I tried but it's hard to describe accurately in other terms; \"is regenerated\" seems to imply that the observable is doing the work of generating results, which isn't the case. JavaDoc for Producer class states it: \"Provides a generic operation for producing an instance of a type.\", which also applies to our general concept of \"producer\" here.\nThat said, I agree the fewer technical terms we need to introduce here the better. Would you be willing to suggest some rewording in a follow-up PR?", "url": "https://github.com/google/ground-android/pull/671#discussion_r553883681", "createdAt": "2021-01-08T11:11:08Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/Cold.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx.annotations;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Marks an observable as \"cold\". Cold observables create a new producer each time an observer\n+ * subscribes.\n+ *\n+ * <p>Cold observables start emitting items when observer subscribe, so observers are guaranteed to\n+ * see the whole sequence from the beginning.\n+ *\n+ * <p>Since a new producer is created on each subscription, the sequence of items is regenerated for", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0MDc3Mw=="}, "originalCommit": {"oid": "99334b4e21fd6db100db9faffa8e07198a20ac99"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODE3MTYyOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/Cold.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNToxNTozMlrOIMRijQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNToxNTozMlrOIMRijQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0MTE5Nw==", "bodyText": "s/may turned/may be turned", "url": "https://github.com/google/ground-android/pull/671#discussion_r549741197", "createdAt": "2020-12-29T15:15:32Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/Cold.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx.annotations;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Marks an observable as \"cold\". Cold observables create a new producer each time an observer\n+ * subscribes.\n+ *\n+ * <p>Cold observables start emitting items when observer subscribe, so observers are guaranteed to\n+ * see the whole sequence from the beginning.\n+ *\n+ * <p>Since a new producer is created on each subscription, the sequence of items is regenerated for\n+ * each observer. As such, cold observables are unsuitable for multicasting.\n+ *\n+ * <p>LiveData and Rx observables backed by cold observables are also cold. New cold Rx observables\n+ * may also be created by emitting results inside the class passed to the observable's <code>\n+ * create()</code> method.\n+ *\n+ * <p>Cold Rx observables may turned into hot connectable observers using their respective <code>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99334b4e21fd6db100db9faffa8e07198a20ac99"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODE3MjU0OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/Cold.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNToxNTo1MlrOIMRjEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxMToxMzo0MlrOIQOcYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0MTMzMA==", "bodyText": "hot -- link to the Hot annotation here?", "url": "https://github.com/google/ground-android/pull/671#discussion_r549741330", "createdAt": "2020-12-29T15:15:52Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/Cold.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx.annotations;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Marks an observable as \"cold\". Cold observables create a new producer each time an observer\n+ * subscribes.\n+ *\n+ * <p>Cold observables start emitting items when observer subscribe, so observers are guaranteed to\n+ * see the whole sequence from the beginning.\n+ *\n+ * <p>Since a new producer is created on each subscription, the sequence of items is regenerated for\n+ * each observer. As such, cold observables are unsuitable for multicasting.\n+ *\n+ * <p>LiveData and Rx observables backed by cold observables are also cold. New cold Rx observables\n+ * may also be created by emitting results inside the class passed to the observable's <code>\n+ * create()</code> method.\n+ *\n+ * <p>Cold Rx observables may turned into hot connectable observers using their respective <code>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99334b4e21fd6db100db9faffa8e07198a20ac99"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg4NDc3MA==", "bodyText": "Actually removed this altogether; would prefer to find other solutions to share(), since it leads to \"warm\" observables that are hard to reason about in more complex systems, imo.", "url": "https://github.com/google/ground-android/pull/671#discussion_r553884770", "createdAt": "2021-01-08T11:13:42Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/Cold.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx.annotations;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Marks an observable as \"cold\". Cold observables create a new producer each time an observer\n+ * subscribes.\n+ *\n+ * <p>Cold observables start emitting items when observer subscribe, so observers are guaranteed to\n+ * see the whole sequence from the beginning.\n+ *\n+ * <p>Since a new producer is created on each subscription, the sequence of items is regenerated for\n+ * each observer. As such, cold observables are unsuitable for multicasting.\n+ *\n+ * <p>LiveData and Rx observables backed by cold observables are also cold. New cold Rx observables\n+ * may also be created by emitting results inside the class passed to the observable's <code>\n+ * create()</code> method.\n+ *\n+ * <p>Cold Rx observables may turned into hot connectable observers using their respective <code>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0MTMzMA=="}, "originalCommit": {"oid": "99334b4e21fd6db100db9faffa8e07198a20ac99"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODE3NDQ3OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/Cold.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNToxNjozOFrOIMRkIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxMToxNjoyN1rOIQOhhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0MTYwMg==", "bodyText": "Add a parenthetical: \"complete (stop emitting items)\"", "url": "https://github.com/google/ground-android/pull/671#discussion_r549741602", "createdAt": "2020-12-29T15:16:38Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/Cold.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx.annotations;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Marks an observable as \"cold\". Cold observables create a new producer each time an observer\n+ * subscribes.\n+ *\n+ * <p>Cold observables start emitting items when observer subscribe, so observers are guaranteed to\n+ * see the whole sequence from the beginning.\n+ *\n+ * <p>Since a new producer is created on each subscription, the sequence of items is regenerated for\n+ * each observer. As such, cold observables are unsuitable for multicasting.\n+ *\n+ * <p>LiveData and Rx observables backed by cold observables are also cold. New cold Rx observables\n+ * may also be created by emitting results inside the class passed to the observable's <code>\n+ * create()</code> method.\n+ *\n+ * <p>Cold Rx observables may turned into hot connectable observers using their respective <code>\n+ * share()</code> methods.\n+ */\n+@Documented\n+@Target({\n+  ElementType.ANNOTATION_TYPE,\n+  ElementType.FIELD,\n+  ElementType.LOCAL_VARIABLE,\n+  ElementType.METHOD,\n+  ElementType.PARAMETER\n+})\n+public @interface Cold {\n+  /**\n+   * Finite observables are expected to complete at some point in the future, usually before", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99334b4e21fd6db100db9faffa8e07198a20ac99"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg4NjA4Nw==", "bodyText": "\"Terminate\" implies more than that; it implies a terminal event is emitted (Completable.complete, Maybe.empty, etc.)", "url": "https://github.com/google/ground-android/pull/671#discussion_r553886087", "createdAt": "2021-01-08T11:16:27Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/Cold.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx.annotations;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Marks an observable as \"cold\". Cold observables create a new producer each time an observer\n+ * subscribes.\n+ *\n+ * <p>Cold observables start emitting items when observer subscribe, so observers are guaranteed to\n+ * see the whole sequence from the beginning.\n+ *\n+ * <p>Since a new producer is created on each subscription, the sequence of items is regenerated for\n+ * each observer. As such, cold observables are unsuitable for multicasting.\n+ *\n+ * <p>LiveData and Rx observables backed by cold observables are also cold. New cold Rx observables\n+ * may also be created by emitting results inside the class passed to the observable's <code>\n+ * create()</code> method.\n+ *\n+ * <p>Cold Rx observables may turned into hot connectable observers using their respective <code>\n+ * share()</code> methods.\n+ */\n+@Documented\n+@Target({\n+  ElementType.ANNOTATION_TYPE,\n+  ElementType.FIELD,\n+  ElementType.LOCAL_VARIABLE,\n+  ElementType.METHOD,\n+  ElementType.PARAMETER\n+})\n+public @interface Cold {\n+  /**\n+   * Finite observables are expected to complete at some point in the future, usually before", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0MTYwMg=="}, "originalCommit": {"oid": "99334b4e21fd6db100db9faffa8e07198a20ac99"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODE3NjM0OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/Cold.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNToxNzoxNVrOIMRlFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxMToxNTozNFrOIQOfwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0MTg0NQ==", "bodyText": "How about:\n\"Infinite observables should never complete.\"", "url": "https://github.com/google/ground-android/pull/671#discussion_r549741845", "createdAt": "2020-12-29T15:17:15Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/Cold.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx.annotations;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Marks an observable as \"cold\". Cold observables create a new producer each time an observer\n+ * subscribes.\n+ *\n+ * <p>Cold observables start emitting items when observer subscribe, so observers are guaranteed to\n+ * see the whole sequence from the beginning.\n+ *\n+ * <p>Since a new producer is created on each subscription, the sequence of items is regenerated for\n+ * each observer. As such, cold observables are unsuitable for multicasting.\n+ *\n+ * <p>LiveData and Rx observables backed by cold observables are also cold. New cold Rx observables\n+ * may also be created by emitting results inside the class passed to the observable's <code>\n+ * create()</code> method.\n+ *\n+ * <p>Cold Rx observables may turned into hot connectable observers using their respective <code>\n+ * share()</code> methods.\n+ */\n+@Documented\n+@Target({\n+  ElementType.ANNOTATION_TYPE,\n+  ElementType.FIELD,\n+  ElementType.LOCAL_VARIABLE,\n+  ElementType.METHOD,\n+  ElementType.PARAMETER\n+})\n+public @interface Cold {\n+  /**\n+   * Finite observables are expected to complete at some point in the future, usually before\n+   * observers unsubscribe. Infinite observables are not expected to ever complete.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99334b4e21fd6db100db9faffa8e07198a20ac99"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg4NTYzMw==", "bodyText": "Replaced \"complete\" with \"terminate\" which is more general in Rx, and reworded.", "url": "https://github.com/google/ground-android/pull/671#discussion_r553885633", "createdAt": "2021-01-08T11:15:34Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/Cold.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx.annotations;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Marks an observable as \"cold\". Cold observables create a new producer each time an observer\n+ * subscribes.\n+ *\n+ * <p>Cold observables start emitting items when observer subscribe, so observers are guaranteed to\n+ * see the whole sequence from the beginning.\n+ *\n+ * <p>Since a new producer is created on each subscription, the sequence of items is regenerated for\n+ * each observer. As such, cold observables are unsuitable for multicasting.\n+ *\n+ * <p>LiveData and Rx observables backed by cold observables are also cold. New cold Rx observables\n+ * may also be created by emitting results inside the class passed to the observable's <code>\n+ * create()</code> method.\n+ *\n+ * <p>Cold Rx observables may turned into hot connectable observers using their respective <code>\n+ * share()</code> methods.\n+ */\n+@Documented\n+@Target({\n+  ElementType.ANNOTATION_TYPE,\n+  ElementType.FIELD,\n+  ElementType.LOCAL_VARIABLE,\n+  ElementType.METHOD,\n+  ElementType.PARAMETER\n+})\n+public @interface Cold {\n+  /**\n+   * Finite observables are expected to complete at some point in the future, usually before\n+   * observers unsubscribe. Infinite observables are not expected to ever complete.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0MTg0NQ=="}, "originalCommit": {"oid": "99334b4e21fd6db100db9faffa8e07198a20ac99"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODI4ODkzOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/Hot.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjowMjozMlrOIMSlOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjowMjo1NlrOIMSlrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc1ODI2NQ==", "bodyText": "s/the/they", "url": "https://github.com/google/ground-android/pull/671#discussion_r549758265", "createdAt": "2020-12-29T16:02:32Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/Hot.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx.annotations;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Marks an observable as \"hot\". Hot observables expose an existing producer to observers rather\n+ * than creating a new one for each observer.\n+ *\n+ * <p>Hot observables may start emitting items as soon as they're created. Observers only receive\n+ * items emitted after the subscribe; and items emitted before then are note received.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860d724527631be0223e62d707349ab71b3ddc9e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc1ODM4Mg==", "bodyText": "s/note/not -- semicolon should be a comma", "url": "https://github.com/google/ground-android/pull/671#discussion_r549758382", "createdAt": "2020-12-29T16:02:56Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/Hot.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx.annotations;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Marks an observable as \"hot\". Hot observables expose an existing producer to observers rather\n+ * than creating a new one for each observer.\n+ *\n+ * <p>Hot observables may start emitting items as soon as they're created. Observers only receive\n+ * items emitted after the subscribe; and items emitted before then are note received.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc1ODI2NQ=="}, "originalCommit": {"oid": "860d724527631be0223e62d707349ab71b3ddc9e"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODI5MDI3OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/Hot.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjowMzoxN1rOIMSmGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjowMzoxN1rOIMSmGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc1ODQ5MA==", "bodyText": "s/all observers/subscribed observers", "url": "https://github.com/google/ground-android/pull/671#discussion_r549758490", "createdAt": "2020-12-29T16:03:17Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/Hot.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx.annotations;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Marks an observable as \"hot\". Hot observables expose an existing producer to observers rather\n+ * than creating a new one for each observer.\n+ *\n+ * <p>Hot observables may start emitting items as soon as they're created. Observers only receive\n+ * items emitted after the subscribe; and items emitted before then are note received.\n+ *\n+ * <p>Since the producer generating results is shared among observers, hot observables are\n+ * considered to \"multicast\" the same set of items to all observers by default. For simplicity,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860d724527631be0223e62d707349ab71b3ddc9e"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODI5MTIwOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/Hot.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjowMzozOFrOIMSmnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjowMzozOFrOIMSmnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc1ODYyMQ==", "bodyText": "s/multiple producers/multiple observers", "url": "https://github.com/google/ground-android/pull/671#discussion_r549758621", "createdAt": "2020-12-29T16:03:38Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/Hot.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx.annotations;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Marks an observable as \"hot\". Hot observables expose an existing producer to observers rather\n+ * than creating a new one for each observer.\n+ *\n+ * <p>Hot observables may start emitting items as soon as they're created. Observers only receive\n+ * items emitted after the subscribe; and items emitted before then are note received.\n+ *\n+ * <p>Since the producer generating results is shared among observers, hot observables are\n+ * considered to \"multicast\" the same set of items to all observers by default. For simplicity,\n+ * producers backing hot observables are assumed to always be capable of multicasting results to\n+ * multiple producers.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860d724527631be0223e62d707349ab71b3ddc9e"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODI5MjY3OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/RxEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjowNDoxN1rOIMSneg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjowNDoxN1rOIMSneg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc1ODg0Mg==", "bodyText": "s/and/any", "url": "https://github.com/google/ground-android/pull/671#discussion_r549758842", "createdAt": "2020-12-29T16:04:17Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/RxEvents.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx.annotations;\n+\n+import java.lang.annotation.Documented;\n+\n+/**\n+ * Marks an RxJava stream as emitting events. Events are only emitted as they occur, and new\n+ * observers are not notified of emits which occurred before subscribe(). The stream continues to\n+ * emit new events until the observer unsubscribes.\n+ *\n+ * <p>These streams are considered \"hot\"; subscribing does not trigger and events or otherwise alter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860d724527631be0223e62d707349ab71b3ddc9e"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODI5NDI5OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/RxResult.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjowNDo1MFrOIMSoXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjowNDo1MFrOIMSoXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc1OTA2OA==", "bodyText": "s/indicated/indicates", "url": "https://github.com/google/ground-android/pull/671#discussion_r549759068", "createdAt": "2020-12-29T16:04:50Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/RxResult.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx.annotations;\n+\n+import java.lang.annotation.Documented;\n+\n+/**\n+ * Indicates the result of an asynchronous operation modeled as a reactive stream. Specifically, it\n+ * indicated the result observable annotated is a cold, finite observable.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860d724527631be0223e62d707349ab71b3ddc9e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODI5NzY2OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/RxState.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjowNjowOFrOIMSqUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjowNjowOFrOIMSqUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc1OTU2OA==", "bodyText": "delete \"as\" before hot", "url": "https://github.com/google/ground-android/pull/671#discussion_r549759568", "createdAt": "2020-12-29T16:06:08Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/RxState.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx.annotations;\n+\n+import java.lang.annotation.Documented;\n+\n+/**\n+ * Marks an RxJava2 observable as emitting state. The latest state is immediately emitted to new\n+ * observers on subscribe(), with new states continuing to be emitted until the subscription is\n+ * disposed.\n+ *\n+ * <p>The stream is considered as \"hot\"; subscribing has no effect on state and the stream is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860d724527631be0223e62d707349ab71b3ddc9e"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2436, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}