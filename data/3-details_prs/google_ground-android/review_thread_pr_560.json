{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2MzAwNzQ2", "number": 560, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxMDoyOTowOVrOEYsBFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxMDo1MToyOFrOEYsGoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MzIyNDUyOnYy", "diffSide": "LEFT", "path": "gnd/google-services.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxMDoyOTowOVrOHBJVAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxOToxMjo1NVrOHB3idw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk2MzQ1Nw==", "bodyText": "Please revert this one and remove the unused file gnd_geojson.json", "url": "https://github.com/google/ground-android/pull/560#discussion_r470963457", "createdAt": "2020-08-15T10:29:09Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/google-services.json", "diffHunk": "@@ -1,51 +0,0 @@\n-{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0660a3fa22728ed035b4f2b7fde516062eace9b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcyMDU2Nw==", "bodyText": "80f43c4 sorry about that!", "url": "https://github.com/google/ground-android/pull/560#discussion_r471720567", "createdAt": "2020-08-17T19:12:55Z", "author": {"login": "scolsen"}, "path": "gnd/google-services.json", "diffHunk": "@@ -1,51 +0,0 @@\n-{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk2MzQ1Nw=="}, "originalCommit": {"oid": "f0660a3fa22728ed035b4f2b7fde516062eace9b"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MzIyODE3OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/local/room/entity/OptionEntity.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxMDozNDo0M1rOHBJWqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxOToxNjozNFrOHB3pXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk2Mzg4MA==", "bodyText": "Could you also please remove the NOPMD from all these 3 places and 1 more in the same file?\nIt was added because of 4 occurrences of string literal \"field_id\". Now there are only 3\nhttps://pmd.github.io/latest/pmd_rules_java_errorprone.html#avoidduplicateliterals\nAlso, we should think about whether to disable this check as it is a bit annoying and less useful.", "url": "https://github.com/google/ground-android/pull/560#discussion_r470963880", "createdAt": "2020-08-15T10:34:43Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/local/room/entity/OptionEntity.java", "diffHunk": "@@ -35,7 +35,7 @@\n             childColumns = \"field_id\", // NOPMD\n             onDelete = ForeignKey.CASCADE),\n     indices = {@Index(\"field_id\")}, // NOPMD\n-    primaryKeys = {\"code\", \"field_id\"}) // NOPMD\n+    primaryKeys = {\"id\"}) // NOPMD", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0660a3fa22728ed035b4f2b7fde516062eace9b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcyMjMzNA==", "bodyText": "5b11ee0 thanks!", "url": "https://github.com/google/ground-android/pull/560#discussion_r471722334", "createdAt": "2020-08-17T19:16:34Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/local/room/entity/OptionEntity.java", "diffHunk": "@@ -35,7 +35,7 @@\n             childColumns = \"field_id\", // NOPMD\n             onDelete = ForeignKey.CASCADE),\n     indices = {@Index(\"field_id\")}, // NOPMD\n-    primaryKeys = {\"code\", \"field_id\"}) // NOPMD\n+    primaryKeys = {\"id\"}) // NOPMD", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk2Mzg4MA=="}, "originalCommit": {"oid": "f0660a3fa22728ed035b4f2b7fde516062eace9b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MzIzMjk5OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/repository/OfflineAreaRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxMDo0MjoyOVrOHBJYzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxOToyNzozNlrOHB39lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk2NDQzMA==", "bodyText": "This block can be refactored into a new method and then reused in the rest of the code.", "url": "https://github.com/google/ground-android/pull/560#discussion_r470964430", "createdAt": "2020-08-15T10:42:29Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/repository/OfflineAreaRepository.java", "diffHunk": "@@ -85,18 +109,33 @@ private Completable enqueueTileDownloads(OfflineArea area) {\n         .andThen(tileDownloadWorkManager.enqueueTileDownloadWorker());\n   }\n \n+  /**\n+   * Determine the set of tiles that need to be downloaded for a given area, then enqueue tile\n+   * downloads.\n+   */\n+  private Completable enqueueTileDownloads(OfflineArea area) {\n+    return projectRepository\n+        .getActiveProjectOnceAndStream()\n+        .compose(Loadable::values)\n+        .map(Project::getOfflineBaseMapSources)\n+        .map(this::downloadOfflineBaseMapSource)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0660a3fa22728ed035b4f2b7fde516062eace9b"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcyNzUxMA==", "bodyText": "Good call, thanks! 80e58f8", "url": "https://github.com/google/ground-android/pull/560#discussion_r471727510", "createdAt": "2020-08-17T19:27:36Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/repository/OfflineAreaRepository.java", "diffHunk": "@@ -85,18 +109,33 @@ private Completable enqueueTileDownloads(OfflineArea area) {\n         .andThen(tileDownloadWorkManager.enqueueTileDownloadWorker());\n   }\n \n+  /**\n+   * Determine the set of tiles that need to be downloaded for a given area, then enqueue tile\n+   * downloads.\n+   */\n+  private Completable enqueueTileDownloads(OfflineArea area) {\n+    return projectRepository\n+        .getActiveProjectOnceAndStream()\n+        .compose(Loadable::values)\n+        .map(Project::getOfflineBaseMapSources)\n+        .map(this::downloadOfflineBaseMapSource)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk2NDQzMA=="}, "originalCommit": {"oid": "f0660a3fa22728ed035b4f2b7fde516062eace9b"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MzIzNDc0OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/repository/OfflineAreaRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxMDo0NTowOFrOHBJZlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxOToyNzoyNlrOHB39Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk2NDYyOQ==", "bodyText": "How about passing only the first OfflineBaseMapSource to this method?\nSince the method is named downloadOfflineBaseMapSource, the error \"No basemap sources specified for this project.\" doesn't seem very intuitive. So that check should be done before the call reaches this function.\nWdyt?", "url": "https://github.com/google/ground-android/pull/560#discussion_r470964629", "createdAt": "2020-08-15T10:45:08Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/repository/OfflineAreaRepository.java", "diffHunk": "@@ -38,42 +41,63 @@\n import io.reactivex.Single;\n import java.io.File;\n import java.io.IOException;\n+import java.net.URL;\n import javax.inject.Inject;\n+import org.apache.commons.io.FileUtils;\n import timber.log.Timber;\n \n public class OfflineAreaRepository {\n   private final TileDownloadWorkManager tileDownloadWorkManager;\n   private final LocalDataStore localDataStore;\n+  private final ProjectRepository projectRepository;\n   private final GeoJsonParser geoJsonParser;\n   private final FileUtil fileUtil;\n+  private final Schedulers schedulers;\n \n   private final OfflineUuidGenerator uuidGenerator;\n \n   @Inject\n   public OfflineAreaRepository(\n       TileDownloadWorkManager tileDownloadWorkManager,\n       LocalDataStore localDataStore,\n+      ProjectRepository projectRepository,\n       GeoJsonParser geoJsonParser,\n       OfflineUuidGenerator uuidGenerator,\n-      FileUtil fileUtil) {\n+      FileUtil fileUtil,\n+      Schedulers schedulers) {\n     this.tileDownloadWorkManager = tileDownloadWorkManager;\n     this.localDataStore = localDataStore;\n     this.geoJsonParser = geoJsonParser;\n     this.uuidGenerator = uuidGenerator;\n+    this.projectRepository = projectRepository;\n     this.fileUtil = fileUtil;\n+    this.schedulers = schedulers;\n   }\n \n-  private Completable enqueueTileDownloads(OfflineArea area) {\n-    File jsonSource;\n-\n-    try {\n-      jsonSource = fileUtil.getFileFromRawResource(R.raw.gnd_geojson, Config.GEO_JSON);\n-    } catch (IOException e) {\n-      return Completable.error(e);\n+  /**\n+   * Download the offline basemap source for the active project.\n+   *\n+   * <p>Only the first basemap source is used. Sources are always re-downloaded and overwritten on\n+   * subsequent calls.\n+   */\n+  private File downloadOfflineBaseMapSource(\n+      ImmutableList<OfflineBaseMapSource> offlineBaseMapSources)\n+      throws IOException, NoBaseMapSourceException {\n+    if (offlineBaseMapSources.isEmpty()) {\n+      throw new NoBaseMapSourceException(\"No basemap sources specified for this project.\");\n     }\n \n-    ImmutableList<Tile> tiles = geoJsonParser.intersectingTiles(area.getBounds(), jsonSource);\n+    OfflineBaseMapSource source = offlineBaseMapSources.get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0660a3fa22728ed035b4f2b7fde516062eace9b"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcyNzQzNQ==", "bodyText": "80e58f8 thanks!", "url": "https://github.com/google/ground-android/pull/560#discussion_r471727435", "createdAt": "2020-08-17T19:27:26Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/repository/OfflineAreaRepository.java", "diffHunk": "@@ -38,42 +41,63 @@\n import io.reactivex.Single;\n import java.io.File;\n import java.io.IOException;\n+import java.net.URL;\n import javax.inject.Inject;\n+import org.apache.commons.io.FileUtils;\n import timber.log.Timber;\n \n public class OfflineAreaRepository {\n   private final TileDownloadWorkManager tileDownloadWorkManager;\n   private final LocalDataStore localDataStore;\n+  private final ProjectRepository projectRepository;\n   private final GeoJsonParser geoJsonParser;\n   private final FileUtil fileUtil;\n+  private final Schedulers schedulers;\n \n   private final OfflineUuidGenerator uuidGenerator;\n \n   @Inject\n   public OfflineAreaRepository(\n       TileDownloadWorkManager tileDownloadWorkManager,\n       LocalDataStore localDataStore,\n+      ProjectRepository projectRepository,\n       GeoJsonParser geoJsonParser,\n       OfflineUuidGenerator uuidGenerator,\n-      FileUtil fileUtil) {\n+      FileUtil fileUtil,\n+      Schedulers schedulers) {\n     this.tileDownloadWorkManager = tileDownloadWorkManager;\n     this.localDataStore = localDataStore;\n     this.geoJsonParser = geoJsonParser;\n     this.uuidGenerator = uuidGenerator;\n+    this.projectRepository = projectRepository;\n     this.fileUtil = fileUtil;\n+    this.schedulers = schedulers;\n   }\n \n-  private Completable enqueueTileDownloads(OfflineArea area) {\n-    File jsonSource;\n-\n-    try {\n-      jsonSource = fileUtil.getFileFromRawResource(R.raw.gnd_geojson, Config.GEO_JSON);\n-    } catch (IOException e) {\n-      return Completable.error(e);\n+  /**\n+   * Download the offline basemap source for the active project.\n+   *\n+   * <p>Only the first basemap source is used. Sources are always re-downloaded and overwritten on\n+   * subsequent calls.\n+   */\n+  private File downloadOfflineBaseMapSource(\n+      ImmutableList<OfflineBaseMapSource> offlineBaseMapSources)\n+      throws IOException, NoBaseMapSourceException {\n+    if (offlineBaseMapSources.isEmpty()) {\n+      throw new NoBaseMapSourceException(\"No basemap sources specified for this project.\");\n     }\n \n-    ImmutableList<Tile> tiles = geoJsonParser.intersectingTiles(area.getBounds(), jsonSource);\n+    OfflineBaseMapSource source = offlineBaseMapSources.get(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk2NDYyOQ=="}, "originalCommit": {"oid": "f0660a3fa22728ed035b4f2b7fde516062eace9b"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MzIzNTU1OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/repository/OfflineAreaRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxMDo0NjoxOFrOHBJZ8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxOToyNzoxNFrOHB387Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk2NDcyMg==", "bodyText": "Please refactor as mentioned above.", "url": "https://github.com/google/ground-android/pull/560#discussion_r470964722", "createdAt": "2020-08-15T10:46:18Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/repository/OfflineAreaRepository.java", "diffHunk": "@@ -109,19 +148,17 @@ public Completable addAreaAndEnqueue(LatLngBounds bounds) {\n \n   public Flowable<ImmutableSet<Tile>> getIntersectingDownloadedTilesOnceAndStream(\n       OfflineArea offlineArea) {\n-    File jsonSource;\n-\n-    try {\n-      jsonSource = fileUtil.getFileFromRawResource(R.raw.gnd_geojson, Config.GEO_JSON);\n-    } catch (IOException e) {\n-      return Flowable.error(e);\n-    }\n-\n-    ImmutableList<Tile> tiles =\n-        geoJsonParser.intersectingTiles(offlineArea.getBounds(), jsonSource);\n-\n-    return getDownloadedTilesOnceAndStream()\n-        .map(ts -> stream(tiles).filter(tiles::contains).collect(toImmutableSet()));\n+    return projectRepository\n+        .getActiveProjectOnceAndStream()\n+        .compose(Loadable::values)\n+        .map(Project::getOfflineBaseMapSources)\n+        .map(this::downloadOfflineBaseMapSource)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0660a3fa22728ed035b4f2b7fde516062eace9b"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcyNzM0MQ==", "bodyText": "80e58f8", "url": "https://github.com/google/ground-android/pull/560#discussion_r471727341", "createdAt": "2020-08-17T19:27:14Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/repository/OfflineAreaRepository.java", "diffHunk": "@@ -109,19 +148,17 @@ public Completable addAreaAndEnqueue(LatLngBounds bounds) {\n \n   public Flowable<ImmutableSet<Tile>> getIntersectingDownloadedTilesOnceAndStream(\n       OfflineArea offlineArea) {\n-    File jsonSource;\n-\n-    try {\n-      jsonSource = fileUtil.getFileFromRawResource(R.raw.gnd_geojson, Config.GEO_JSON);\n-    } catch (IOException e) {\n-      return Flowable.error(e);\n-    }\n-\n-    ImmutableList<Tile> tiles =\n-        geoJsonParser.intersectingTiles(offlineArea.getBounds(), jsonSource);\n-\n-    return getDownloadedTilesOnceAndStream()\n-        .map(ts -> stream(tiles).filter(tiles::contains).collect(toImmutableSet()));\n+    return projectRepository\n+        .getActiveProjectOnceAndStream()\n+        .compose(Loadable::values)\n+        .map(Project::getOfflineBaseMapSources)\n+        .map(this::downloadOfflineBaseMapSource)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk2NDcyMg=="}, "originalCommit": {"oid": "f0660a3fa22728ed035b4f2b7fde516062eace9b"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MzIzNjU4OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/repository/OfflineAreaRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxMDo0ODoxNFrOHBJaaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxOToyNzo1MlrOHB3-FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk2NDg0MA==", "bodyText": "Is the error non-fatal? If not, then please consider adding Timber.e() so that it eventually ends up in error/crash reporting.", "url": "https://github.com/google/ground-android/pull/560#discussion_r470964840", "createdAt": "2020-08-15T10:48:14Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/repository/OfflineAreaRepository.java", "diffHunk": "@@ -109,19 +148,17 @@ public Completable addAreaAndEnqueue(LatLngBounds bounds) {\n \n   public Flowable<ImmutableSet<Tile>> getIntersectingDownloadedTilesOnceAndStream(\n       OfflineArea offlineArea) {\n-    File jsonSource;\n-\n-    try {\n-      jsonSource = fileUtil.getFileFromRawResource(R.raw.gnd_geojson, Config.GEO_JSON);\n-    } catch (IOException e) {\n-      return Flowable.error(e);\n-    }\n-\n-    ImmutableList<Tile> tiles =\n-        geoJsonParser.intersectingTiles(offlineArea.getBounds(), jsonSource);\n-\n-    return getDownloadedTilesOnceAndStream()\n-        .map(ts -> stream(tiles).filter(tiles::contains).collect(toImmutableSet()));\n+    return projectRepository\n+        .getActiveProjectOnceAndStream()\n+        .compose(Loadable::values)\n+        .map(Project::getOfflineBaseMapSources)\n+        .map(this::downloadOfflineBaseMapSource)\n+        .map(json -> geoJsonParser.intersectingTiles(offlineArea.getBounds(), json))\n+        .flatMap(\n+            tiles ->\n+                getDownloadedTilesOnceAndStream()\n+                    .map(ts -> stream(ts).filter(tiles::contains).collect(toImmutableSet())))\n+        .onErrorReturn(throwable -> ImmutableSet.of());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0660a3fa22728ed035b4f2b7fde516062eace9b"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcyNzYzNw==", "bodyText": "It's not fatal in this case--added a brief explanation. 80e58f8", "url": "https://github.com/google/ground-android/pull/560#discussion_r471727637", "createdAt": "2020-08-17T19:27:52Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/repository/OfflineAreaRepository.java", "diffHunk": "@@ -109,19 +148,17 @@ public Completable addAreaAndEnqueue(LatLngBounds bounds) {\n \n   public Flowable<ImmutableSet<Tile>> getIntersectingDownloadedTilesOnceAndStream(\n       OfflineArea offlineArea) {\n-    File jsonSource;\n-\n-    try {\n-      jsonSource = fileUtil.getFileFromRawResource(R.raw.gnd_geojson, Config.GEO_JSON);\n-    } catch (IOException e) {\n-      return Flowable.error(e);\n-    }\n-\n-    ImmutableList<Tile> tiles =\n-        geoJsonParser.intersectingTiles(offlineArea.getBounds(), jsonSource);\n-\n-    return getDownloadedTilesOnceAndStream()\n-        .map(ts -> stream(tiles).filter(tiles::contains).collect(toImmutableSet()));\n+    return projectRepository\n+        .getActiveProjectOnceAndStream()\n+        .compose(Loadable::values)\n+        .map(Project::getOfflineBaseMapSources)\n+        .map(this::downloadOfflineBaseMapSource)\n+        .map(json -> geoJsonParser.intersectingTiles(offlineArea.getBounds(), json))\n+        .flatMap(\n+            tiles ->\n+                getDownloadedTilesOnceAndStream()\n+                    .map(ts -> stream(ts).filter(tiles::contains).collect(toImmutableSet())))\n+        .onErrorReturn(throwable -> ImmutableSet.of());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk2NDg0MA=="}, "originalCommit": {"oid": "f0660a3fa22728ed035b4f2b7fde516062eace9b"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MzIzODczOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/util/FileUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxMDo1MToyOFrOHBJbYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxOToxOTo1NlrOHB3vMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk2NTA4OA==", "bodyText": "makeFile -> createFile?\nIn the comment, you've mentioned that it creates a new empty file. But it is not always going to be true if the file for the provided filename already exists. Please consider adding a check to validate that no file exists for the given name or update comment.", "url": "https://github.com/google/ground-android/pull/560#discussion_r470965088", "createdAt": "2020-08-15T10:51:28Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/util/FileUtil.java", "diffHunk": "@@ -70,6 +70,13 @@ public File getFile(String filename) throws FileNotFoundException {\n     return file;\n   }\n \n+  /**\n+   * Creates a new empty file in the app's file directory /data/data/com.google.android.gnd/files\n+   */\n+  public File makeFile(String filename) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0660a3fa22728ed035b4f2b7fde516062eace9b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcyMzgyNg==", "bodyText": "I've renamed it to getOrCreateFile and updated the comment accordingly, thanks! e17a280", "url": "https://github.com/google/ground-android/pull/560#discussion_r471723826", "createdAt": "2020-08-17T19:19:56Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/util/FileUtil.java", "diffHunk": "@@ -70,6 +70,13 @@ public File getFile(String filename) throws FileNotFoundException {\n     return file;\n   }\n \n+  /**\n+   * Creates a new empty file in the app's file directory /data/data/com.google.android.gnd/files\n+   */\n+  public File makeFile(String filename) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk2NTA4OA=="}, "originalCommit": {"oid": "f0660a3fa22728ed035b4f2b7fde516062eace9b"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2515, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}