{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzNDE1NTI3", "number": 630, "title": "[Docs] Initial Android architecture docs and diagram", "bodyText": "Added the initial version of the Android architecture docs. I'll also add this page to the Android wiki once this PR is merged.", "createdAt": "2020-11-18T19:20:11Z", "url": "https://github.com/google/ground-android/pull/630", "merged": true, "mergeCommit": {"oid": "5bd37706379278c37e8f73b826686552bd2c29ff"}, "closed": true, "closedAt": "2021-05-24T14:52:05Z", "author": {"login": "mmisim"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddzC3wAH2gAyNTIzNDE1NTI3Ojk3MTUzNzc0ODgxZTQ5NjNmNmM3NGU1MGU3OWE4YzdjMGZlN2RmOTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABeZ7b6fgH2gAyNTIzNDE1NTI3OmU5MWZkZDEwYWVkNzk4YzhkMDg0YjY2NzU4NjhhNDU0ZTQyNDdkODE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "97153774881e4963f6c74e50e79a8c7c0fe7df95", "author": {"user": {"login": "mmisim", "name": "Michael Marturana"}}, "url": "https://github.com/google/ground-android/commit/97153774881e4963f6c74e50e79a8c7c0fe7df95", "committedDate": "2020-11-18T19:09:20Z", "message": "added the initial Android architecture docs and diagram"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMzg0ODM4", "url": "https://github.com/google/ground-android/pull/630#pullrequestreview-540384838", "createdAt": "2020-11-28T16:14:04Z", "commit": {"oid": "97153774881e4963f6c74e50e79a8c7c0fe7df95"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f7bf6b7eef9616235abce4a7fedd3ffb23d7785", "author": {"user": {"login": "gino-m", "name": "Gino Miceli"}}, "url": "https://github.com/google/ground-android/commit/1f7bf6b7eef9616235abce4a7fedd3ffb23d7785", "committedDate": "2020-11-28T16:14:11Z", "message": "Merge branch 'master' into android-architecture-docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMzg0OTA5", "url": "https://github.com/google/ground-android/pull/630#pullrequestreview-540384909", "createdAt": "2020-11-28T16:15:00Z", "commit": {"oid": "97153774881e4963f6c74e50e79a8c7c0fe7df95"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxNjoxNTowMFrOH7aJrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxNjoyODoyN1rOH7aPQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA1NjQ5Mg==", "bodyText": "It relies heavily on these two, but they don't form an exhaustive list of libraries used; can this be reworded somehow to make that more clear?", "url": "https://github.com/google/ground-android/pull/630#discussion_r532056492", "createdAt": "2020-11-28T16:15:00Z", "author": {"login": "gino-m"}, "path": "docs/architecture-docs.md", "diffHunk": "@@ -0,0 +1,29 @@\n+# Ground Android app architecture\n+\n+The Ground Android app is written in Java using the [Android Jetpack](https://developer.android.com/jetpack) and [RxJava](https://github.com/ReactiveX/RxJava) libraries. This page provides an overview of the high-level app architecture, including key components and libraries.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97153774881e4963f6c74e50e79a8c7c0fe7df95"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA1NjYxNQ==", "bodyText": "s.->pl. \"Fragments\" so that it's clearer this is a class of thing rather than a specific instance.", "url": "https://github.com/google/ground-android/pull/630#discussion_r532056615", "createdAt": "2020-11-28T16:15:47Z", "author": {"login": "gino-m"}, "path": "docs/architecture-docs.md", "diffHunk": "@@ -0,0 +1,29 @@\n+# Ground Android app architecture\n+\n+The Ground Android app is written in Java using the [Android Jetpack](https://developer.android.com/jetpack) and [RxJava](https://github.com/ReactiveX/RxJava) libraries. This page provides an overview of the high-level app architecture, including key components and libraries.\n+\n+<!-- Editable image source: https://docs.google.com/drawings/d/1UjetRJsudLHg3YsWaf0sKqHfmrPNNBH4UKI7Ivajx-0/ -->\n+![Ground Android app architecture diagram](android-architecture-diagram.png)\n+\n+## Components\n+\n+The app is comprised of the following components:\n+\n+- **MainActivity**: Ground is a single-activity app. The main [activity](https://developer.android.com/guide/components/activities/intro-activities) contains all other app components.\n+- **Fragment**: Each part of the app interface is defined as a [fragment](https://developer.android.com/guide/components/fragments). Examples of fragments are the home screen and the map interface.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97153774881e4963f6c74e50e79a8c7c0fe7df95"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA1NjY4OA==", "bodyText": "\"used by ViewModels\" -> \"used throughout the app\"", "url": "https://github.com/google/ground-android/pull/630#discussion_r532056688", "createdAt": "2020-11-28T16:16:30Z", "author": {"login": "gino-m"}, "path": "docs/architecture-docs.md", "diffHunk": "@@ -0,0 +1,29 @@\n+# Ground Android app architecture\n+\n+The Ground Android app is written in Java using the [Android Jetpack](https://developer.android.com/jetpack) and [RxJava](https://github.com/ReactiveX/RxJava) libraries. This page provides an overview of the high-level app architecture, including key components and libraries.\n+\n+<!-- Editable image source: https://docs.google.com/drawings/d/1UjetRJsudLHg3YsWaf0sKqHfmrPNNBH4UKI7Ivajx-0/ -->\n+![Ground Android app architecture diagram](android-architecture-diagram.png)\n+\n+## Components\n+\n+The app is comprised of the following components:\n+\n+- **MainActivity**: Ground is a single-activity app. The main [activity](https://developer.android.com/guide/components/activities/intro-activities) contains all other app components.\n+- **Fragment**: Each part of the app interface is defined as a [fragment](https://developer.android.com/guide/components/fragments). Examples of fragments are the home screen and the map interface.\n+- **ViewModel**: Each fragment has a corresponding [ViewModel](https://developer.android.com/topic/libraries/architecture/viewmodel), which encapsulates its UI state, logic, and functionality, as well as the lifecycle callback methods.\n+- **Managers**: The app managers abstract access to system services directly for the ViewModels. Examples of services handled by managers are location services and camera access.\n+- **Models**: Entity representations used by ViewModels, such as the app's representations of map concepts, are defined as models. Models allow the app to remain platform agnostic because we can update model definitions without affecting ViewModels or other app components. Examples of entities defined models are the app's representation of offline imagery.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97153774881e4963f6c74e50e79a8c7c0fe7df95"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA1Njk1Nw==", "bodyText": "Models -> Model (singular, since there's only one \"model\")\n\nModels allow the app to remain platform agnostic because we can update model definitions without affecting ViewModels or other app components.\n\nI'd replace this with something like \"the .model package represents data across the various components of app\",.\nMore here:\nhttps://developer.android.com/jetpack/guide#drive-ui-from-model", "url": "https://github.com/google/ground-android/pull/630#discussion_r532056957", "createdAt": "2020-11-28T16:19:19Z", "author": {"login": "gino-m"}, "path": "docs/architecture-docs.md", "diffHunk": "@@ -0,0 +1,29 @@\n+# Ground Android app architecture\n+\n+The Ground Android app is written in Java using the [Android Jetpack](https://developer.android.com/jetpack) and [RxJava](https://github.com/ReactiveX/RxJava) libraries. This page provides an overview of the high-level app architecture, including key components and libraries.\n+\n+<!-- Editable image source: https://docs.google.com/drawings/d/1UjetRJsudLHg3YsWaf0sKqHfmrPNNBH4UKI7Ivajx-0/ -->\n+![Ground Android app architecture diagram](android-architecture-diagram.png)\n+\n+## Components\n+\n+The app is comprised of the following components:\n+\n+- **MainActivity**: Ground is a single-activity app. The main [activity](https://developer.android.com/guide/components/activities/intro-activities) contains all other app components.\n+- **Fragment**: Each part of the app interface is defined as a [fragment](https://developer.android.com/guide/components/fragments). Examples of fragments are the home screen and the map interface.\n+- **ViewModel**: Each fragment has a corresponding [ViewModel](https://developer.android.com/topic/libraries/architecture/viewmodel), which encapsulates its UI state, logic, and functionality, as well as the lifecycle callback methods.\n+- **Managers**: The app managers abstract access to system services directly for the ViewModels. Examples of services handled by managers are location services and camera access.\n+- **Models**: Entity representations used by ViewModels, such as the app's representations of map concepts, are defined as models. Models allow the app to remain platform agnostic because we can update model definitions without affecting ViewModels or other app components. Examples of entities defined models are the app's representation of offline imagery.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97153774881e4963f6c74e50e79a8c7c0fe7df95"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA1NzAyMg==", "bodyText": "There isn't necessarily a 1:1 representation between model classes and repositories; repositories are organized by thematic area.", "url": "https://github.com/google/ground-android/pull/630#discussion_r532057022", "createdAt": "2020-11-28T16:19:50Z", "author": {"login": "gino-m"}, "path": "docs/architecture-docs.md", "diffHunk": "@@ -0,0 +1,29 @@\n+# Ground Android app architecture\n+\n+The Ground Android app is written in Java using the [Android Jetpack](https://developer.android.com/jetpack) and [RxJava](https://github.com/ReactiveX/RxJava) libraries. This page provides an overview of the high-level app architecture, including key components and libraries.\n+\n+<!-- Editable image source: https://docs.google.com/drawings/d/1UjetRJsudLHg3YsWaf0sKqHfmrPNNBH4UKI7Ivajx-0/ -->\n+![Ground Android app architecture diagram](android-architecture-diagram.png)\n+\n+## Components\n+\n+The app is comprised of the following components:\n+\n+- **MainActivity**: Ground is a single-activity app. The main [activity](https://developer.android.com/guide/components/activities/intro-activities) contains all other app components.\n+- **Fragment**: Each part of the app interface is defined as a [fragment](https://developer.android.com/guide/components/fragments). Examples of fragments are the home screen and the map interface.\n+- **ViewModel**: Each fragment has a corresponding [ViewModel](https://developer.android.com/topic/libraries/architecture/viewmodel), which encapsulates its UI state, logic, and functionality, as well as the lifecycle callback methods.\n+- **Managers**: The app managers abstract access to system services directly for the ViewModels. Examples of services handled by managers are location services and camera access.\n+- **Models**: Entity representations used by ViewModels, such as the app's representations of map concepts, are defined as models. Models allow the app to remain platform agnostic because we can update model definitions without affecting ViewModels or other app components. Examples of entities defined models are the app's representation of offline imagery.\n+- **Repository**: Each model has a corresponding repository that defines the APIs for interaction between ViewModels and data stores. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97153774881e4963f6c74e50e79a8c7c0fe7df95"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA1NzE4MQ==", "bodyText": "The data store encapsulates details about how data is stored locally. The default implementation uses Room and SQLite to do so, but the architecture attempts to remain clean by not exposing these implementation details to the rest of the app.", "url": "https://github.com/google/ground-android/pull/630#discussion_r532057181", "createdAt": "2020-11-28T16:21:12Z", "author": {"login": "gino-m"}, "path": "docs/architecture-docs.md", "diffHunk": "@@ -0,0 +1,29 @@\n+# Ground Android app architecture\n+\n+The Ground Android app is written in Java using the [Android Jetpack](https://developer.android.com/jetpack) and [RxJava](https://github.com/ReactiveX/RxJava) libraries. This page provides an overview of the high-level app architecture, including key components and libraries.\n+\n+<!-- Editable image source: https://docs.google.com/drawings/d/1UjetRJsudLHg3YsWaf0sKqHfmrPNNBH4UKI7Ivajx-0/ -->\n+![Ground Android app architecture diagram](android-architecture-diagram.png)\n+\n+## Components\n+\n+The app is comprised of the following components:\n+\n+- **MainActivity**: Ground is a single-activity app. The main [activity](https://developer.android.com/guide/components/activities/intro-activities) contains all other app components.\n+- **Fragment**: Each part of the app interface is defined as a [fragment](https://developer.android.com/guide/components/fragments). Examples of fragments are the home screen and the map interface.\n+- **ViewModel**: Each fragment has a corresponding [ViewModel](https://developer.android.com/topic/libraries/architecture/viewmodel), which encapsulates its UI state, logic, and functionality, as well as the lifecycle callback methods.\n+- **Managers**: The app managers abstract access to system services directly for the ViewModels. Examples of services handled by managers are location services and camera access.\n+- **Models**: Entity representations used by ViewModels, such as the app's representations of map concepts, are defined as models. Models allow the app to remain platform agnostic because we can update model definitions without affecting ViewModels or other app components. Examples of entities defined models are the app's representation of offline imagery.\n+- **Repository**: Each model has a corresponding repository that defines the APIs for interaction between ViewModels and data stores. \n+    - **Local data store**: Local data is stored in a SQLite database and the app uses the [Room persistence library](https://developer.android.com/topic/libraries/architecture/room) to manage interaction with the library.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97153774881e4963f6c74e50e79a8c7c0fe7df95"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA1NzIwNg==", "bodyText": "Same applies for the remote data store.", "url": "https://github.com/google/ground-android/pull/630#discussion_r532057206", "createdAt": "2020-11-28T16:21:21Z", "author": {"login": "gino-m"}, "path": "docs/architecture-docs.md", "diffHunk": "@@ -0,0 +1,29 @@\n+# Ground Android app architecture\n+\n+The Ground Android app is written in Java using the [Android Jetpack](https://developer.android.com/jetpack) and [RxJava](https://github.com/ReactiveX/RxJava) libraries. This page provides an overview of the high-level app architecture, including key components and libraries.\n+\n+<!-- Editable image source: https://docs.google.com/drawings/d/1UjetRJsudLHg3YsWaf0sKqHfmrPNNBH4UKI7Ivajx-0/ -->\n+![Ground Android app architecture diagram](android-architecture-diagram.png)\n+\n+## Components\n+\n+The app is comprised of the following components:\n+\n+- **MainActivity**: Ground is a single-activity app. The main [activity](https://developer.android.com/guide/components/activities/intro-activities) contains all other app components.\n+- **Fragment**: Each part of the app interface is defined as a [fragment](https://developer.android.com/guide/components/fragments). Examples of fragments are the home screen and the map interface.\n+- **ViewModel**: Each fragment has a corresponding [ViewModel](https://developer.android.com/topic/libraries/architecture/viewmodel), which encapsulates its UI state, logic, and functionality, as well as the lifecycle callback methods.\n+- **Managers**: The app managers abstract access to system services directly for the ViewModels. Examples of services handled by managers are location services and camera access.\n+- **Models**: Entity representations used by ViewModels, such as the app's representations of map concepts, are defined as models. Models allow the app to remain platform agnostic because we can update model definitions without affecting ViewModels or other app components. Examples of entities defined models are the app's representation of offline imagery.\n+- **Repository**: Each model has a corresponding repository that defines the APIs for interaction between ViewModels and data stores. \n+    - **Local data store**: Local data is stored in a SQLite database and the app uses the [Room persistence library](https://developer.android.com/topic/libraries/architecture/room) to manage interaction with the library.\n+    - **Remote data store**: Remote data is stored in [Firebase Cloud Firestore](https://firebase.google.com/docs/firestore). For more information on how remote data is structured, see [Cloud Firestore Representation](https://github.com/google/ground-platform/wiki/Cloud-Firestore-Representation)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97153774881e4963f6c74e50e79a8c7c0fe7df95"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA1NzIzNw==", "bodyText": "background thread -> jobs that can run while the app is closed.", "url": "https://github.com/google/ground-android/pull/630#discussion_r532057237", "createdAt": "2020-11-28T16:21:45Z", "author": {"login": "gino-m"}, "path": "docs/architecture-docs.md", "diffHunk": "@@ -0,0 +1,29 @@\n+# Ground Android app architecture\n+\n+The Ground Android app is written in Java using the [Android Jetpack](https://developer.android.com/jetpack) and [RxJava](https://github.com/ReactiveX/RxJava) libraries. This page provides an overview of the high-level app architecture, including key components and libraries.\n+\n+<!-- Editable image source: https://docs.google.com/drawings/d/1UjetRJsudLHg3YsWaf0sKqHfmrPNNBH4UKI7Ivajx-0/ -->\n+![Ground Android app architecture diagram](android-architecture-diagram.png)\n+\n+## Components\n+\n+The app is comprised of the following components:\n+\n+- **MainActivity**: Ground is a single-activity app. The main [activity](https://developer.android.com/guide/components/activities/intro-activities) contains all other app components.\n+- **Fragment**: Each part of the app interface is defined as a [fragment](https://developer.android.com/guide/components/fragments). Examples of fragments are the home screen and the map interface.\n+- **ViewModel**: Each fragment has a corresponding [ViewModel](https://developer.android.com/topic/libraries/architecture/viewmodel), which encapsulates its UI state, logic, and functionality, as well as the lifecycle callback methods.\n+- **Managers**: The app managers abstract access to system services directly for the ViewModels. Examples of services handled by managers are location services and camera access.\n+- **Models**: Entity representations used by ViewModels, such as the app's representations of map concepts, are defined as models. Models allow the app to remain platform agnostic because we can update model definitions without affecting ViewModels or other app components. Examples of entities defined models are the app's representation of offline imagery.\n+- **Repository**: Each model has a corresponding repository that defines the APIs for interaction between ViewModels and data stores. \n+    - **Local data store**: Local data is stored in a SQLite database and the app uses the [Room persistence library](https://developer.android.com/topic/libraries/architecture/room) to manage interaction with the library.\n+    - **Remote data store**: Remote data is stored in [Firebase Cloud Firestore](https://firebase.google.com/docs/firestore). For more information on how remote data is structured, see [Cloud Firestore Representation](https://github.com/google/ground-platform/wiki/Cloud-Firestore-Representation)\n+- **Workers** (not pictured in the diagram): Jobs that run on a background thread are implemented via [workers](https://developer.android.com/reference/androidx/work/Worker). Examples of tasks handed by workers are syncing local and remote data when a network connection is available.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97153774881e4963f6c74e50e79a8c7c0fe7df95"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA1NzMzMw==", "bodyText": "I would reference Dependency Injection here specifically, since \"dependencies\" can have several meanings in this context.", "url": "https://github.com/google/ground-android/pull/630#discussion_r532057333", "createdAt": "2020-11-28T16:22:37Z", "author": {"login": "gino-m"}, "path": "docs/architecture-docs.md", "diffHunk": "@@ -0,0 +1,29 @@\n+# Ground Android app architecture\n+\n+The Ground Android app is written in Java using the [Android Jetpack](https://developer.android.com/jetpack) and [RxJava](https://github.com/ReactiveX/RxJava) libraries. This page provides an overview of the high-level app architecture, including key components and libraries.\n+\n+<!-- Editable image source: https://docs.google.com/drawings/d/1UjetRJsudLHg3YsWaf0sKqHfmrPNNBH4UKI7Ivajx-0/ -->\n+![Ground Android app architecture diagram](android-architecture-diagram.png)\n+\n+## Components\n+\n+The app is comprised of the following components:\n+\n+- **MainActivity**: Ground is a single-activity app. The main [activity](https://developer.android.com/guide/components/activities/intro-activities) contains all other app components.\n+- **Fragment**: Each part of the app interface is defined as a [fragment](https://developer.android.com/guide/components/fragments). Examples of fragments are the home screen and the map interface.\n+- **ViewModel**: Each fragment has a corresponding [ViewModel](https://developer.android.com/topic/libraries/architecture/viewmodel), which encapsulates its UI state, logic, and functionality, as well as the lifecycle callback methods.\n+- **Managers**: The app managers abstract access to system services directly for the ViewModels. Examples of services handled by managers are location services and camera access.\n+- **Models**: Entity representations used by ViewModels, such as the app's representations of map concepts, are defined as models. Models allow the app to remain platform agnostic because we can update model definitions without affecting ViewModels or other app components. Examples of entities defined models are the app's representation of offline imagery.\n+- **Repository**: Each model has a corresponding repository that defines the APIs for interaction between ViewModels and data stores. \n+    - **Local data store**: Local data is stored in a SQLite database and the app uses the [Room persistence library](https://developer.android.com/topic/libraries/architecture/room) to manage interaction with the library.\n+    - **Remote data store**: Remote data is stored in [Firebase Cloud Firestore](https://firebase.google.com/docs/firestore). For more information on how remote data is structured, see [Cloud Firestore Representation](https://github.com/google/ground-platform/wiki/Cloud-Firestore-Representation)\n+- **Workers** (not pictured in the diagram): Jobs that run on a background thread are implemented via [workers](https://developer.android.com/reference/androidx/work/Worker). Examples of tasks handed by workers are syncing local and remote data when a network connection is available.\n+\n+## Data flows\n+\n+- Data flows between components is managed via [LiveData](https://developer.android.com/topic/libraries/architecture/livedata) and [RxJava](https://github.com/ReactiveX/RxJava). \n+- Dependencies between components are managed via [Hilt](https://developer.android.com/training/dependency-injection/hilt-android) (Dagger).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97153774881e4963f6c74e50e79a8c7c0fe7df95"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA1NzkyMA==", "bodyText": "\"Data flows\" - Perhaps a more precise description here might be \"application components rely heavily on LiveData and RxJava to represent asynchronous flows of events and data through the app.\"", "url": "https://github.com/google/ground-android/pull/630#discussion_r532057920", "createdAt": "2020-11-28T16:28:27Z", "author": {"login": "gino-m"}, "path": "docs/architecture-docs.md", "diffHunk": "@@ -0,0 +1,29 @@\n+# Ground Android app architecture\n+\n+The Ground Android app is written in Java using the [Android Jetpack](https://developer.android.com/jetpack) and [RxJava](https://github.com/ReactiveX/RxJava) libraries. This page provides an overview of the high-level app architecture, including key components and libraries.\n+\n+<!-- Editable image source: https://docs.google.com/drawings/d/1UjetRJsudLHg3YsWaf0sKqHfmrPNNBH4UKI7Ivajx-0/ -->\n+![Ground Android app architecture diagram](android-architecture-diagram.png)\n+\n+## Components\n+\n+The app is comprised of the following components:\n+\n+- **MainActivity**: Ground is a single-activity app. The main [activity](https://developer.android.com/guide/components/activities/intro-activities) contains all other app components.\n+- **Fragment**: Each part of the app interface is defined as a [fragment](https://developer.android.com/guide/components/fragments). Examples of fragments are the home screen and the map interface.\n+- **ViewModel**: Each fragment has a corresponding [ViewModel](https://developer.android.com/topic/libraries/architecture/viewmodel), which encapsulates its UI state, logic, and functionality, as well as the lifecycle callback methods.\n+- **Managers**: The app managers abstract access to system services directly for the ViewModels. Examples of services handled by managers are location services and camera access.\n+- **Models**: Entity representations used by ViewModels, such as the app's representations of map concepts, are defined as models. Models allow the app to remain platform agnostic because we can update model definitions without affecting ViewModels or other app components. Examples of entities defined models are the app's representation of offline imagery.\n+- **Repository**: Each model has a corresponding repository that defines the APIs for interaction between ViewModels and data stores. \n+    - **Local data store**: Local data is stored in a SQLite database and the app uses the [Room persistence library](https://developer.android.com/topic/libraries/architecture/room) to manage interaction with the library.\n+    - **Remote data store**: Remote data is stored in [Firebase Cloud Firestore](https://firebase.google.com/docs/firestore). For more information on how remote data is structured, see [Cloud Firestore Representation](https://github.com/google/ground-platform/wiki/Cloud-Firestore-Representation)\n+- **Workers** (not pictured in the diagram): Jobs that run on a background thread are implemented via [workers](https://developer.android.com/reference/androidx/work/Worker). Examples of tasks handed by workers are syncing local and remote data when a network connection is available.\n+\n+## Data flows\n+\n+- Data flows between components is managed via [LiveData](https://developer.android.com/topic/libraries/architecture/livedata) and [RxJava](https://github.com/ReactiveX/RxJava). ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97153774881e4963f6c74e50e79a8c7c0fe7df95"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1a638e7be4f5f98ee0bb566d62d654df6933d93", "author": {"user": {"login": "gino-m", "name": "Gino Miceli"}}, "url": "https://github.com/google/ground-android/commit/e1a638e7be4f5f98ee0bb566d62d654df6933d93", "committedDate": "2020-12-13T12:24:36Z", "message": "Merge branch 'master' into android-architecture-docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2b4a60077e17df13d064279132f40cfafc6ba70", "author": {"user": {"login": "mmisim", "name": "Michael Marturana"}}, "url": "https://github.com/google/ground-android/commit/f2b4a60077e17df13d064279132f40cfafc6ba70", "committedDate": "2021-01-22T22:59:23Z", "message": "updated docs and diagram based on review feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0bfd8a21118a417b847b6a5e089bad9b76e370a", "author": {"user": {"login": "mmisim", "name": "Michael Marturana"}}, "url": "https://github.com/google/ground-android/commit/e0bfd8a21118a417b847b6a5e089bad9b76e370a", "committedDate": "2021-01-22T23:00:13Z", "message": "Merge branch 'android-architecture-docs' of https://github.com/mmisim/ground-android into android-architecture-docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc1NjIxNjE0", "url": "https://github.com/google/ground-android/pull/630#pullrequestreview-575621614", "createdAt": "2021-01-25T17:15:36Z", "commit": {"oid": "e0bfd8a21118a417b847b6a5e089bad9b76e370a"}, "state": "DISMISSED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxNzoxNTozNlrOIZxg0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxNzoxODozOVrOIZxpWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzg5NjUzMQ==", "bodyText": "optional nit: interface -> user interface (since Java supports interfaces as a programming concept as well).", "url": "https://github.com/google/ground-android/pull/630#discussion_r563896531", "createdAt": "2021-01-25T17:15:36Z", "author": {"login": "scolsen"}, "path": "docs/architecture-docs.md", "diffHunk": "@@ -0,0 +1,29 @@\n+# Ground Android app architecture\n+\n+The Ground Android app is written in Java and uses the [Android Jetpack](https://developer.android.com/jetpack) and [RxJava](https://github.com/ReactiveX/RxJava) libraries, among others. This page provides an overview of the high-level app architecture, including key components and libraries.\n+\n+<!-- Editable image source: https://docs.google.com/drawings/d/1UjetRJsudLHg3YsWaf0sKqHfmrPNNBH4UKI7Ivajx-0/ -->\n+![Ground Android app architecture diagram](android-architecture-diagram.png)\n+\n+## Components\n+\n+The app is comprised of the following components:\n+\n+- **MainActivity**: Ground is a single-activity app. The main [activity](https://developer.android.com/guide/components/activities/intro-activities) contains all other app components.\n+- **Fragments**: Each part of the app interface is defined as a [fragment](https://developer.android.com/guide/components/fragments). Examples of fragments are the home screen and the map interface.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0bfd8a21118a417b847b6a5e089bad9b76e370a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzg5ODcxMw==", "bodyText": "nit: Since there's only one example here, make the structure singular, rather than plural? For example, syncing local and remote data when a network connection is available is a task that can run while the app is closed and is handled by a worker.", "url": "https://github.com/google/ground-android/pull/630#discussion_r563898713", "createdAt": "2021-01-25T17:18:39Z", "author": {"login": "scolsen"}, "path": "docs/architecture-docs.md", "diffHunk": "@@ -0,0 +1,29 @@\n+# Ground Android app architecture\n+\n+The Ground Android app is written in Java and uses the [Android Jetpack](https://developer.android.com/jetpack) and [RxJava](https://github.com/ReactiveX/RxJava) libraries, among others. This page provides an overview of the high-level app architecture, including key components and libraries.\n+\n+<!-- Editable image source: https://docs.google.com/drawings/d/1UjetRJsudLHg3YsWaf0sKqHfmrPNNBH4UKI7Ivajx-0/ -->\n+![Ground Android app architecture diagram](android-architecture-diagram.png)\n+\n+## Components\n+\n+The app is comprised of the following components:\n+\n+- **MainActivity**: Ground is a single-activity app. The main [activity](https://developer.android.com/guide/components/activities/intro-activities) contains all other app components.\n+- **Fragments**: Each part of the app interface is defined as a [fragment](https://developer.android.com/guide/components/fragments). Examples of fragments are the home screen and the map interface.\n+- **ViewModel**: Each fragment has a corresponding [ViewModel](https://developer.android.com/topic/libraries/architecture/viewmodel), which encapsulates its UI state, logic, and functionality, as well as the lifecycle callback methods.\n+- **Managers**: The app managers abstract access to system services directly for the ViewModels. Examples of services handled by managers are location services and camera access.\n+- **Model**: Entity representations used throughout the app, such as the app's representations of map concepts, are defined by the model. The model package represents data across the various components of the app. Examples of entities defined by the model are the app's representation of offline imagery.\n+- **Repository**: The model classes are linked to the repositories, which are organized by thematic area, that define the APIs for interaction between ViewModels and data stores. \n+    - **Local data store**: Local data is stored in a SQLite database and the app uses the [Room persistence library](https://developer.android.com/topic/libraries/architecture/room) to manage interaction with the library.\n+    - **Remote data store**: Remote data is stored in [Firebase Cloud Firestore](https://firebase.google.com/docs/firestore). For more information on how remote data is structured, see [Cloud Firestore Representation](https://github.com/google/ground-platform/wiki/Cloud-Firestore-Representation)\n+- **Workers** (not pictured in the diagram): Jobs that that can run while the app is closed are implemented via [workers](https://developer.android.com/reference/androidx/work/Worker). Examples of tasks handed by workers are syncing local and remote data when a network connection is available.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0bfd8a21118a417b847b6a5e089bad9b76e370a"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "141ed0c06e9ed7b4eddfcdee28cc46f8b57e37b9", "author": {"user": {"login": "mmisim", "name": "Michael Marturana"}}, "url": "https://github.com/google/ground-android/commit/141ed0c06e9ed7b4eddfcdee28cc46f8b57e37b9", "committedDate": "2021-01-27T14:56:15Z", "message": "made minor edits from review feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2af7afb8731751c96e7383df4b83ce17bab67f64", "author": {"user": {"login": "gino-m", "name": "Gino Miceli"}}, "url": "https://github.com/google/ground-android/commit/2af7afb8731751c96e7383df4b83ce17bab67f64", "committedDate": "2021-02-18T16:51:55Z", "message": "Merge branch 'master' into android-architecture-docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8489581953a13624d6596a695c677167e6b0a16d", "author": {"user": {"login": "gino-m", "name": "Gino Miceli"}}, "url": "https://github.com/google/ground-android/commit/8489581953a13624d6596a695c677167e6b0a16d", "committedDate": "2021-02-24T23:17:48Z", "message": "Merge branch 'master' into android-architecture-docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e91fdd10aed798c8d084b6675868a454e4247d81", "author": {"user": {"login": "gino-m", "name": "Gino Miceli"}}, "url": "https://github.com/google/ground-android/commit/e91fdd10aed798c8d084b6675868a454e4247d81", "committedDate": "2021-05-24T14:51:23Z", "message": "Merge branch 'master' into android-architecture-docs"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1660, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}