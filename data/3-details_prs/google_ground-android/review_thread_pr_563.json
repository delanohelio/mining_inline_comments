{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3MjY5NjUx", "number": 563, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODozMjo1M1rOEYLsCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDo1MDoxNlrOEYgBQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzkyNzc3OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODozMjo1M1rOHAYe6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNzo0NzoyN1rOHAq6Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE2MzE3OQ==", "bodyText": "Consider Completable.fromRunnable(() -> ) instead.", "url": "https://github.com/google/ground-android/pull/563#discussion_r470163179", "createdAt": "2020-08-13T18:32:53Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java", "diffHunk": "@@ -110,10 +127,54 @@ private Completable processMutations(ImmutableList<Mutation> mutations, String u\n   private Completable processMutations(ImmutableList<Mutation> mutations, User user) {\n     return remoteDataStore\n         .applyMutations(mutations, user)\n+        .andThen(processPhotoFieldMutations(mutations))\n         // TODO: If the remote sync fails, reset the state to DEFAULT.\n         .andThen(localDataStore.finalizePendingMutations(mutations));\n   }\n \n+  /**\n+   * Filter all mutations containing observation mutations with changes to photo fields. Delete old\n+   * photo from remote storage and enqueue new photo for upload.\n+   */\n+  private Completable processPhotoFieldMutations(ImmutableList<Mutation> mutations) {\n+    return Observable.fromIterable(mutations)\n+        .filter(mutation -> mutation instanceof ObservationMutation)\n+        .cast(ObservationMutation.class)\n+        .flatMapCompletable(\n+            mutation ->\n+                Observable.fromIterable(mutation.getResponseDeltas())\n+                    .filter(delta -> delta.getFieldType() == Type.PHOTO)\n+                    .flatMapCompletable(\n+                        delta ->\n+                            enqueuePhotoUpload(delta.getNewResponse())\n+                                .andThen(deleteRemotePhoto(delta.getOriginalResponse()))));\n+  }\n+\n+  /** Enqueue photo for uploading to remote storage. */\n+  private Completable enqueuePhotoUpload(Optional<Response> response) {\n+    return Completable.create(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0356487c14ca377b1e094a7e577aba9453bbc002"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ2NTA5OA==", "bodyText": "Done", "url": "https://github.com/google/ground-android/pull/563#discussion_r470465098", "createdAt": "2020-08-14T07:47:27Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java", "diffHunk": "@@ -110,10 +127,54 @@ private Completable processMutations(ImmutableList<Mutation> mutations, String u\n   private Completable processMutations(ImmutableList<Mutation> mutations, User user) {\n     return remoteDataStore\n         .applyMutations(mutations, user)\n+        .andThen(processPhotoFieldMutations(mutations))\n         // TODO: If the remote sync fails, reset the state to DEFAULT.\n         .andThen(localDataStore.finalizePendingMutations(mutations));\n   }\n \n+  /**\n+   * Filter all mutations containing observation mutations with changes to photo fields. Delete old\n+   * photo from remote storage and enqueue new photo for upload.\n+   */\n+  private Completable processPhotoFieldMutations(ImmutableList<Mutation> mutations) {\n+    return Observable.fromIterable(mutations)\n+        .filter(mutation -> mutation instanceof ObservationMutation)\n+        .cast(ObservationMutation.class)\n+        .flatMapCompletable(\n+            mutation ->\n+                Observable.fromIterable(mutation.getResponseDeltas())\n+                    .filter(delta -> delta.getFieldType() == Type.PHOTO)\n+                    .flatMapCompletable(\n+                        delta ->\n+                            enqueuePhotoUpload(delta.getNewResponse())\n+                                .andThen(deleteRemotePhoto(delta.getOriginalResponse()))));\n+  }\n+\n+  /** Enqueue photo for uploading to remote storage. */\n+  private Completable enqueuePhotoUpload(Optional<Response> response) {\n+    return Completable.create(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE2MzE3OQ=="}, "originalCommit": {"oid": "0356487c14ca377b1e094a7e577aba9453bbc002"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTIxNjUzOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/local/room/converter/ResponseDeltasTypeConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDo0MzowNFrOHA3Oxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNToxNToxNlrOHA4fMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY2Njk1MQ==", "bodyText": "Can we use short camel-cased keys without spaces here to make them more idiomatic JSON? e.g. \"fieldType\" and \"newResponse\"?", "url": "https://github.com/google/ground-android/pull/563#discussion_r470666951", "createdAt": "2020-08-14T14:43:04Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/local/room/converter/ResponseDeltasTypeConverter.java", "diffHunk": "@@ -32,18 +35,25 @@\n  */\n public class ResponseDeltasTypeConverter {\n \n+  private static final String KEY_FIELD_TYPE = \"field type\";\n+  private static final String KEY_NEW_RESPONSE = \"new response\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bff16b4585c46b432ca14b45cfc6601efe9df84a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY4NzUzNw==", "bodyText": "Yes, thanks!", "url": "https://github.com/google/ground-android/pull/563#discussion_r470687537", "createdAt": "2020-08-14T15:15:16Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/local/room/converter/ResponseDeltasTypeConverter.java", "diffHunk": "@@ -32,18 +35,25 @@\n  */\n public class ResponseDeltasTypeConverter {\n \n+  private static final String KEY_FIELD_TYPE = \"field type\";\n+  private static final String KEY_NEW_RESPONSE = \"new response\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY2Njk1MQ=="}, "originalCommit": {"oid": "bff16b4585c46b432ca14b45cfc6601efe9df84a"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTIzNDUzOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDo0NTowNVrOHA3YIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNToxNTowNlrOHA4e0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY2OTM0Ng==", "bodyText": "Nit: Filter -> Filters", "url": "https://github.com/google/ground-android/pull/563#discussion_r470669346", "createdAt": "2020-08-14T14:45:05Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java", "diffHunk": "@@ -110,10 +117,32 @@ private Completable processMutations(ImmutableList<Mutation> mutations, String u\n   private Completable processMutations(ImmutableList<Mutation> mutations, User user) {\n     return remoteDataStore\n         .applyMutations(mutations, user)\n+        .andThen(processPhotoFieldMutations(mutations))\n         // TODO: If the remote sync fails, reset the state to DEFAULT.\n         .andThen(localDataStore.finalizePendingMutations(mutations));\n   }\n \n+  /**\n+   * Filter all mutations containing observation mutations with changes to photo fields and uploads\n+   * to remote storage.\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bff16b4585c46b432ca14b45cfc6601efe9df84a"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY4NzQ0MA==", "bodyText": "Done", "url": "https://github.com/google/ground-android/pull/563#discussion_r470687440", "createdAt": "2020-08-14T15:15:06Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java", "diffHunk": "@@ -110,10 +117,32 @@ private Completable processMutations(ImmutableList<Mutation> mutations, String u\n   private Completable processMutations(ImmutableList<Mutation> mutations, User user) {\n     return remoteDataStore\n         .applyMutations(mutations, user)\n+        .andThen(processPhotoFieldMutations(mutations))\n         // TODO: If the remote sync fails, reset the state to DEFAULT.\n         .andThen(localDataStore.finalizePendingMutations(mutations));\n   }\n \n+  /**\n+   * Filter all mutations containing observation mutations with changes to photo fields and uploads\n+   * to remote storage.\n+   */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY2OTM0Ng=="}, "originalCommit": {"oid": "bff16b4585c46b432ca14b45cfc6601efe9df84a"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTI0NTgzOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDo0Njo0NlrOHA3eLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNToxNTozN1rOHA4f7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3MDg5NQ==", "bodyText": "isPresent() returns a boolean; wouldn't the next line cause remotePath to be \"true\" or \"false\"?", "url": "https://github.com/google/ground-android/pull/563#discussion_r470670895", "createdAt": "2020-08-14T14:46:46Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java", "diffHunk": "@@ -110,10 +117,32 @@ private Completable processMutations(ImmutableList<Mutation> mutations, String u\n   private Completable processMutations(ImmutableList<Mutation> mutations, User user) {\n     return remoteDataStore\n         .applyMutations(mutations, user)\n+        .andThen(processPhotoFieldMutations(mutations))\n         // TODO: If the remote sync fails, reset the state to DEFAULT.\n         .andThen(localDataStore.finalizePendingMutations(mutations));\n   }\n \n+  /**\n+   * Filter all mutations containing observation mutations with changes to photo fields and uploads\n+   * to remote storage.\n+   */\n+  private Completable processPhotoFieldMutations(ImmutableList<Mutation> mutations) {\n+    return Observable.fromIterable(mutations)\n+        .filter(mutation -> mutation instanceof ObservationMutation)\n+        .cast(ObservationMutation.class)\n+        .flatMapCompletable(\n+            mutation ->\n+                Observable.fromIterable(mutation.getResponseDeltas())\n+                    .filter(delta -> delta.getFieldType() == Type.PHOTO)\n+                    .map(ResponseDelta::getNewResponse)\n+                    .map(Optional::isPresent)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bff16b4585c46b432ca14b45cfc6601efe9df84a"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY4NzcyNg==", "bodyText": "Fixed and tested", "url": "https://github.com/google/ground-android/pull/563#discussion_r470687726", "createdAt": "2020-08-14T15:15:37Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java", "diffHunk": "@@ -110,10 +117,32 @@ private Completable processMutations(ImmutableList<Mutation> mutations, String u\n   private Completable processMutations(ImmutableList<Mutation> mutations, User user) {\n     return remoteDataStore\n         .applyMutations(mutations, user)\n+        .andThen(processPhotoFieldMutations(mutations))\n         // TODO: If the remote sync fails, reset the state to DEFAULT.\n         .andThen(localDataStore.finalizePendingMutations(mutations));\n   }\n \n+  /**\n+   * Filter all mutations containing observation mutations with changes to photo fields and uploads\n+   * to remote storage.\n+   */\n+  private Completable processPhotoFieldMutations(ImmutableList<Mutation> mutations) {\n+    return Observable.fromIterable(mutations)\n+        .filter(mutation -> mutation instanceof ObservationMutation)\n+        .cast(ObservationMutation.class)\n+        .flatMapCompletable(\n+            mutation ->\n+                Observable.fromIterable(mutation.getResponseDeltas())\n+                    .filter(delta -> delta.getFieldType() == Type.PHOTO)\n+                    .map(ResponseDelta::getNewResponse)\n+                    .map(Optional::isPresent)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3MDg5NQ=="}, "originalCommit": {"oid": "bff16b4585c46b432ca14b45cfc6601efe9df84a"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTI1ODA4OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDo1MDowM1rOHA3lvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNToxNTo1NFrOHA4gew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3MjgyOQ==", "bodyText": "I think this can be simplified, but not sure of the exact syntax.", "url": "https://github.com/google/ground-android/pull/563#discussion_r470672829", "createdAt": "2020-08-14T14:50:03Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java", "diffHunk": "@@ -110,10 +117,32 @@ private Completable processMutations(ImmutableList<Mutation> mutations, String u\n   private Completable processMutations(ImmutableList<Mutation> mutations, User user) {\n     return remoteDataStore\n         .applyMutations(mutations, user)\n+        .andThen(processPhotoFieldMutations(mutations))\n         // TODO: If the remote sync fails, reset the state to DEFAULT.\n         .andThen(localDataStore.finalizePendingMutations(mutations));\n   }\n \n+  /**\n+   * Filter all mutations containing observation mutations with changes to photo fields and uploads\n+   * to remote storage.\n+   */\n+  private Completable processPhotoFieldMutations(ImmutableList<Mutation> mutations) {\n+    return Observable.fromIterable(mutations)\n+        .filter(mutation -> mutation instanceof ObservationMutation)\n+        .cast(ObservationMutation.class)\n+        .flatMapCompletable(\n+            mutation ->\n+                Observable.fromIterable(mutation.getResponseDeltas())\n+                    .filter(delta -> delta.getFieldType() == Type.PHOTO)\n+                    .map(ResponseDelta::getNewResponse)\n+                    .map(Optional::isPresent)\n+                    .map(Object::toString)\n+                    .flatMapCompletable(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bff16b4585c46b432ca14b45cfc6601efe9df84a"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY4Nzg2Nw==", "bodyText": "Done a478804", "url": "https://github.com/google/ground-android/pull/563#discussion_r470687867", "createdAt": "2020-08-14T15:15:54Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java", "diffHunk": "@@ -110,10 +117,32 @@ private Completable processMutations(ImmutableList<Mutation> mutations, String u\n   private Completable processMutations(ImmutableList<Mutation> mutations, User user) {\n     return remoteDataStore\n         .applyMutations(mutations, user)\n+        .andThen(processPhotoFieldMutations(mutations))\n         // TODO: If the remote sync fails, reset the state to DEFAULT.\n         .andThen(localDataStore.finalizePendingMutations(mutations));\n   }\n \n+  /**\n+   * Filter all mutations containing observation mutations with changes to photo fields and uploads\n+   * to remote storage.\n+   */\n+  private Completable processPhotoFieldMutations(ImmutableList<Mutation> mutations) {\n+    return Observable.fromIterable(mutations)\n+        .filter(mutation -> mutation instanceof ObservationMutation)\n+        .cast(ObservationMutation.class)\n+        .flatMapCompletable(\n+            mutation ->\n+                Observable.fromIterable(mutation.getResponseDeltas())\n+                    .filter(delta -> delta.getFieldType() == Type.PHOTO)\n+                    .map(ResponseDelta::getNewResponse)\n+                    .map(Optional::isPresent)\n+                    .map(Object::toString)\n+                    .flatMapCompletable(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3MjgyOQ=="}, "originalCommit": {"oid": "bff16b4585c46b432ca14b45cfc6601efe9df84a"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTI1ODg5OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDo1MDoxNlrOHA3mQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNToxNjowMVrOHA4gwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3Mjk2Mg==", "bodyText": "Does flatMapIterable() help here?", "url": "https://github.com/google/ground-android/pull/563#discussion_r470672962", "createdAt": "2020-08-14T14:50:16Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java", "diffHunk": "@@ -110,10 +117,32 @@ private Completable processMutations(ImmutableList<Mutation> mutations, String u\n   private Completable processMutations(ImmutableList<Mutation> mutations, User user) {\n     return remoteDataStore\n         .applyMutations(mutations, user)\n+        .andThen(processPhotoFieldMutations(mutations))\n         // TODO: If the remote sync fails, reset the state to DEFAULT.\n         .andThen(localDataStore.finalizePendingMutations(mutations));\n   }\n \n+  /**\n+   * Filter all mutations containing observation mutations with changes to photo fields and uploads\n+   * to remote storage.\n+   */\n+  private Completable processPhotoFieldMutations(ImmutableList<Mutation> mutations) {\n+    return Observable.fromIterable(mutations)\n+        .filter(mutation -> mutation instanceof ObservationMutation)\n+        .cast(ObservationMutation.class)\n+        .flatMapCompletable(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bff16b4585c46b432ca14b45cfc6601efe9df84a"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY4NzkzNg==", "bodyText": "Yes it does a478804", "url": "https://github.com/google/ground-android/pull/563#discussion_r470687936", "createdAt": "2020-08-14T15:16:01Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java", "diffHunk": "@@ -110,10 +117,32 @@ private Completable processMutations(ImmutableList<Mutation> mutations, String u\n   private Completable processMutations(ImmutableList<Mutation> mutations, User user) {\n     return remoteDataStore\n         .applyMutations(mutations, user)\n+        .andThen(processPhotoFieldMutations(mutations))\n         // TODO: If the remote sync fails, reset the state to DEFAULT.\n         .andThen(localDataStore.finalizePendingMutations(mutations));\n   }\n \n+  /**\n+   * Filter all mutations containing observation mutations with changes to photo fields and uploads\n+   * to remote storage.\n+   */\n+  private Completable processPhotoFieldMutations(ImmutableList<Mutation> mutations) {\n+    return Observable.fromIterable(mutations)\n+        .filter(mutation -> mutation instanceof ObservationMutation)\n+        .cast(ObservationMutation.class)\n+        .flatMapCompletable(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3Mjk2Mg=="}, "originalCommit": {"oid": "bff16b4585c46b432ca14b45cfc6601efe9df84a"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2518, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}