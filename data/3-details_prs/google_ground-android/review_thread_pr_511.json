{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMzEwNDQx", "number": 511, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDo0NjowMVrOEKiruQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODozMjozOVrOEOYZ_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDg5NDY1OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/selector/OfflineAreaSelectorViewModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDo0NjowMVrOGrpGeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzozMToxOFrOGrvI_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxNTM1Mw==", "bodyText": "I believe in this case the toast will re-appear every time to view is restored (e.g. after configuration change). To ensure they're single use, you can wrap DownloadTrigger in our custom class  Event<>.", "url": "https://github.com/google/ground-android/pull/511#discussion_r448415353", "createdAt": "2020-07-01T14:46:01Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/selector/OfflineAreaSelectorViewModel.java", "diffHunk": "@@ -16,27 +16,51 @@\n \n package com.google.android.gnd.ui.offlinearea.selector;\n \n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.LiveDataReactiveStreams;\n import com.google.android.gms.maps.model.LatLngBounds;\n import com.google.android.gnd.repository.OfflineAreaRepository;\n import com.google.android.gnd.ui.common.AbstractViewModel;\n+import io.reactivex.BackpressureStrategy;\n+import io.reactivex.subjects.PublishSubject;\n import javax.inject.Inject;\n import timber.log.Timber;\n \n public class OfflineAreaSelectorViewModel extends AbstractViewModel {\n \n+  private final LiveData<DownloadTrigger> downloads;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d9b4a6f17a630134fe5e6ede2ba4d0ff3b18390"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUxNDMwMg==", "bodyText": "Done", "url": "https://github.com/google/ground-android/pull/511#discussion_r448514302", "createdAt": "2020-07-01T17:31:18Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/selector/OfflineAreaSelectorViewModel.java", "diffHunk": "@@ -16,27 +16,51 @@\n \n package com.google.android.gnd.ui.offlinearea.selector;\n \n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.LiveDataReactiveStreams;\n import com.google.android.gms.maps.model.LatLngBounds;\n import com.google.android.gnd.repository.OfflineAreaRepository;\n import com.google.android.gnd.ui.common.AbstractViewModel;\n+import io.reactivex.BackpressureStrategy;\n+import io.reactivex.subjects.PublishSubject;\n import javax.inject.Inject;\n import timber.log.Timber;\n \n public class OfflineAreaSelectorViewModel extends AbstractViewModel {\n \n+  private final LiveData<DownloadTrigger> downloads;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxNTM1Mw=="}, "originalCommit": {"oid": "4d9b4a6f17a630134fe5e6ede2ba4d0ff3b18390"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDg5Njk4OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/selector/OfflineAreaSelectorViewModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDo0NjozOVrOGrpIBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzozMToyNFrOGrvJLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxNTc1MQ==", "bodyText": "downloads -> downloadEvents?", "url": "https://github.com/google/ground-android/pull/511#discussion_r448415751", "createdAt": "2020-07-01T14:46:39Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/selector/OfflineAreaSelectorViewModel.java", "diffHunk": "@@ -16,27 +16,51 @@\n \n package com.google.android.gnd.ui.offlinearea.selector;\n \n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.LiveDataReactiveStreams;\n import com.google.android.gms.maps.model.LatLngBounds;\n import com.google.android.gnd.repository.OfflineAreaRepository;\n import com.google.android.gnd.ui.common.AbstractViewModel;\n+import io.reactivex.BackpressureStrategy;\n+import io.reactivex.subjects.PublishSubject;\n import javax.inject.Inject;\n import timber.log.Timber;\n \n public class OfflineAreaSelectorViewModel extends AbstractViewModel {\n \n+  private final LiveData<DownloadTrigger> downloads;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d9b4a6f17a630134fe5e6ede2ba4d0ff3b18390"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUxNDM1MQ==", "bodyText": "Done", "url": "https://github.com/google/ground-android/pull/511#discussion_r448514351", "createdAt": "2020-07-01T17:31:24Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/selector/OfflineAreaSelectorViewModel.java", "diffHunk": "@@ -16,27 +16,51 @@\n \n package com.google.android.gnd.ui.offlinearea.selector;\n \n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.LiveDataReactiveStreams;\n import com.google.android.gms.maps.model.LatLngBounds;\n import com.google.android.gnd.repository.OfflineAreaRepository;\n import com.google.android.gnd.ui.common.AbstractViewModel;\n+import io.reactivex.BackpressureStrategy;\n+import io.reactivex.subjects.PublishSubject;\n import javax.inject.Inject;\n import timber.log.Timber;\n \n public class OfflineAreaSelectorViewModel extends AbstractViewModel {\n \n+  private final LiveData<DownloadTrigger> downloads;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxNTc1MQ=="}, "originalCommit": {"oid": "4d9b4a6f17a630134fe5e6ede2ba4d0ff3b18390"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDg5OTA2OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/selector/OfflineAreaSelectorViewModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDo0NzowN1rOGrpJXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzozMToyOVrOGrvJXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxNjA5Mw==", "bodyText": "DownloadEvent?", "url": "https://github.com/google/ground-android/pull/511#discussion_r448416093", "createdAt": "2020-07-01T14:47:07Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/selector/OfflineAreaSelectorViewModel.java", "diffHunk": "@@ -16,27 +16,51 @@\n \n package com.google.android.gnd.ui.offlinearea.selector;\n \n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.LiveDataReactiveStreams;\n import com.google.android.gms.maps.model.LatLngBounds;\n import com.google.android.gnd.repository.OfflineAreaRepository;\n import com.google.android.gnd.ui.common.AbstractViewModel;\n+import io.reactivex.BackpressureStrategy;\n+import io.reactivex.subjects.PublishSubject;\n import javax.inject.Inject;\n import timber.log.Timber;\n \n public class OfflineAreaSelectorViewModel extends AbstractViewModel {\n \n+  private final LiveData<DownloadTrigger> downloads;\n+\n+  public LiveData<DownloadTrigger> getDownloadTriggers() {\n+    return this.downloads;\n+  }\n+\n+  enum DownloadTrigger {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d9b4a6f17a630134fe5e6ede2ba4d0ff3b18390"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUxNDM5Nw==", "bodyText": "Done", "url": "https://github.com/google/ground-android/pull/511#discussion_r448514397", "createdAt": "2020-07-01T17:31:29Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/selector/OfflineAreaSelectorViewModel.java", "diffHunk": "@@ -16,27 +16,51 @@\n \n package com.google.android.gnd.ui.offlinearea.selector;\n \n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.LiveDataReactiveStreams;\n import com.google.android.gms.maps.model.LatLngBounds;\n import com.google.android.gnd.repository.OfflineAreaRepository;\n import com.google.android.gnd.ui.common.AbstractViewModel;\n+import io.reactivex.BackpressureStrategy;\n+import io.reactivex.subjects.PublishSubject;\n import javax.inject.Inject;\n import timber.log.Timber;\n \n public class OfflineAreaSelectorViewModel extends AbstractViewModel {\n \n+  private final LiveData<DownloadTrigger> downloads;\n+\n+  public LiveData<DownloadTrigger> getDownloadTriggers() {\n+    return this.downloads;\n+  }\n+\n+  enum DownloadTrigger {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxNjA5Mw=="}, "originalCommit": {"oid": "4d9b4a6f17a630134fe5e6ede2ba4d0ff3b18390"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDkwMzU5OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/selector/OfflineAreaSelectorViewModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDo0ODowNVrOGrpMKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzozMTo1MVrOGrvKEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxNjgxMQ==", "bodyText": "Please add a TODO to handle this asynchronously instead of blocking the UI.", "url": "https://github.com/google/ground-android/pull/511#discussion_r448416811", "createdAt": "2020-07-01T14:48:05Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/selector/OfflineAreaSelectorViewModel.java", "diffHunk": "@@ -16,27 +16,51 @@\n \n package com.google.android.gnd.ui.offlinearea.selector;\n \n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.LiveDataReactiveStreams;\n import com.google.android.gms.maps.model.LatLngBounds;\n import com.google.android.gnd.repository.OfflineAreaRepository;\n import com.google.android.gnd.ui.common.AbstractViewModel;\n+import io.reactivex.BackpressureStrategy;\n+import io.reactivex.subjects.PublishSubject;\n import javax.inject.Inject;\n import timber.log.Timber;\n \n public class OfflineAreaSelectorViewModel extends AbstractViewModel {\n \n+  private final LiveData<DownloadTrigger> downloads;\n+\n+  public LiveData<DownloadTrigger> getDownloadTriggers() {\n+    return this.downloads;\n+  }\n+\n+  enum DownloadTrigger {\n+    Started,\n+    Failure\n+  }\n+\n   private final OfflineAreaRepository offlineAreaRepository;\n+  private final PublishSubject<DownloadTrigger> downloadsPublishSubject = PublishSubject.create();\n \n   @Inject\n   OfflineAreaSelectorViewModel(OfflineAreaRepository offlineAreaRepository) {\n     this.offlineAreaRepository = offlineAreaRepository;\n+    this.downloads =\n+        LiveDataReactiveStreams.fromPublisher(\n+            downloadsPublishSubject.toFlowable(BackpressureStrategy.LATEST));\n   }\n \n   // TODO: Use an abstraction over LatLngBounds\n   public void onDownloadClick(LatLngBounds viewport) {\n     Timber.d(\"viewport:%s\", viewport);\n-    offlineAreaRepository.addAreaAndEnqueue(viewport)\n-      .doOnError(err -> Timber.e(\"Failed to add area and queue downloads: %s\", err.getMessage()))\n-      .onErrorComplete()\n-      .blockingAwait();\n+    offlineAreaRepository\n+        .addAreaAndEnqueue(viewport)\n+        .doOnError(\n+            err -> {\n+              Timber.e(\"Failed to add area and queue downloads: %s\", err.getMessage());\n+              downloadsPublishSubject.onNext(DownloadTrigger.Failure);\n+            })\n+        .doOnComplete(() -> downloadsPublishSubject.onNext(DownloadTrigger.Started))\n+        .blockingAwait();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d9b4a6f17a630134fe5e6ede2ba4d0ff3b18390"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUxNDU3Ng==", "bodyText": "I just made it non-blocking by introducing a click stream+subscription", "url": "https://github.com/google/ground-android/pull/511#discussion_r448514576", "createdAt": "2020-07-01T17:31:51Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/selector/OfflineAreaSelectorViewModel.java", "diffHunk": "@@ -16,27 +16,51 @@\n \n package com.google.android.gnd.ui.offlinearea.selector;\n \n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.LiveDataReactiveStreams;\n import com.google.android.gms.maps.model.LatLngBounds;\n import com.google.android.gnd.repository.OfflineAreaRepository;\n import com.google.android.gnd.ui.common.AbstractViewModel;\n+import io.reactivex.BackpressureStrategy;\n+import io.reactivex.subjects.PublishSubject;\n import javax.inject.Inject;\n import timber.log.Timber;\n \n public class OfflineAreaSelectorViewModel extends AbstractViewModel {\n \n+  private final LiveData<DownloadTrigger> downloads;\n+\n+  public LiveData<DownloadTrigger> getDownloadTriggers() {\n+    return this.downloads;\n+  }\n+\n+  enum DownloadTrigger {\n+    Started,\n+    Failure\n+  }\n+\n   private final OfflineAreaRepository offlineAreaRepository;\n+  private final PublishSubject<DownloadTrigger> downloadsPublishSubject = PublishSubject.create();\n \n   @Inject\n   OfflineAreaSelectorViewModel(OfflineAreaRepository offlineAreaRepository) {\n     this.offlineAreaRepository = offlineAreaRepository;\n+    this.downloads =\n+        LiveDataReactiveStreams.fromPublisher(\n+            downloadsPublishSubject.toFlowable(BackpressureStrategy.LATEST));\n   }\n \n   // TODO: Use an abstraction over LatLngBounds\n   public void onDownloadClick(LatLngBounds viewport) {\n     Timber.d(\"viewport:%s\", viewport);\n-    offlineAreaRepository.addAreaAndEnqueue(viewport)\n-      .doOnError(err -> Timber.e(\"Failed to add area and queue downloads: %s\", err.getMessage()))\n-      .onErrorComplete()\n-      .blockingAwait();\n+    offlineAreaRepository\n+        .addAreaAndEnqueue(viewport)\n+        .doOnError(\n+            err -> {\n+              Timber.e(\"Failed to add area and queue downloads: %s\", err.getMessage());\n+              downloadsPublishSubject.onNext(DownloadTrigger.Failure);\n+            })\n+        .doOnComplete(() -> downloadsPublishSubject.onNext(DownloadTrigger.Started))\n+        .blockingAwait();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxNjgxMQ=="}, "originalCommit": {"oid": "4d9b4a6f17a630134fe5e6ede2ba4d0ff3b18390"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDkwNzQwOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/selector/OfflineAreaSelectorViewModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDo0OTowN1rOGrpO2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDo0OTowN1rOGrpO2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxNzQ5OQ==", "bodyText": "Since you're blocking, you can just move this operation outside of the stream immediately following the blockingAwait().", "url": "https://github.com/google/ground-android/pull/511#discussion_r448417499", "createdAt": "2020-07-01T14:49:07Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/selector/OfflineAreaSelectorViewModel.java", "diffHunk": "@@ -16,27 +16,51 @@\n \n package com.google.android.gnd.ui.offlinearea.selector;\n \n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.LiveDataReactiveStreams;\n import com.google.android.gms.maps.model.LatLngBounds;\n import com.google.android.gnd.repository.OfflineAreaRepository;\n import com.google.android.gnd.ui.common.AbstractViewModel;\n+import io.reactivex.BackpressureStrategy;\n+import io.reactivex.subjects.PublishSubject;\n import javax.inject.Inject;\n import timber.log.Timber;\n \n public class OfflineAreaSelectorViewModel extends AbstractViewModel {\n \n+  private final LiveData<DownloadTrigger> downloads;\n+\n+  public LiveData<DownloadTrigger> getDownloadTriggers() {\n+    return this.downloads;\n+  }\n+\n+  enum DownloadTrigger {\n+    Started,\n+    Failure\n+  }\n+\n   private final OfflineAreaRepository offlineAreaRepository;\n+  private final PublishSubject<DownloadTrigger> downloadsPublishSubject = PublishSubject.create();\n \n   @Inject\n   OfflineAreaSelectorViewModel(OfflineAreaRepository offlineAreaRepository) {\n     this.offlineAreaRepository = offlineAreaRepository;\n+    this.downloads =\n+        LiveDataReactiveStreams.fromPublisher(\n+            downloadsPublishSubject.toFlowable(BackpressureStrategy.LATEST));\n   }\n \n   // TODO: Use an abstraction over LatLngBounds\n   public void onDownloadClick(LatLngBounds viewport) {\n     Timber.d(\"viewport:%s\", viewport);\n-    offlineAreaRepository.addAreaAndEnqueue(viewport)\n-      .doOnError(err -> Timber.e(\"Failed to add area and queue downloads: %s\", err.getMessage()))\n-      .onErrorComplete()\n-      .blockingAwait();\n+    offlineAreaRepository\n+        .addAreaAndEnqueue(viewport)\n+        .doOnError(\n+            err -> {\n+              Timber.e(\"Failed to add area and queue downloads: %s\", err.getMessage());\n+              downloadsPublishSubject.onNext(DownloadTrigger.Failure);\n+            })\n+        .doOnComplete(() -> downloadsPublishSubject.onNext(DownloadTrigger.Started))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d9b4a6f17a630134fe5e6ede2ba4d0ff3b18390"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDkxMDkxOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/selector/OfflineAreaSelectorViewModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDo1MDowMVrOGrpREQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzozMjoxMlrOGrvK3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxODA2NQ==", "bodyText": "This will report the error but it won't catch it; I believe blockingAwait() will throw an exception for unhandled errors, so may want to use try{} catch around this call instead so you'd catch both cases.", "url": "https://github.com/google/ground-android/pull/511#discussion_r448418065", "createdAt": "2020-07-01T14:50:01Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/selector/OfflineAreaSelectorViewModel.java", "diffHunk": "@@ -16,27 +16,51 @@\n \n package com.google.android.gnd.ui.offlinearea.selector;\n \n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.LiveDataReactiveStreams;\n import com.google.android.gms.maps.model.LatLngBounds;\n import com.google.android.gnd.repository.OfflineAreaRepository;\n import com.google.android.gnd.ui.common.AbstractViewModel;\n+import io.reactivex.BackpressureStrategy;\n+import io.reactivex.subjects.PublishSubject;\n import javax.inject.Inject;\n import timber.log.Timber;\n \n public class OfflineAreaSelectorViewModel extends AbstractViewModel {\n \n+  private final LiveData<DownloadTrigger> downloads;\n+\n+  public LiveData<DownloadTrigger> getDownloadTriggers() {\n+    return this.downloads;\n+  }\n+\n+  enum DownloadTrigger {\n+    Started,\n+    Failure\n+  }\n+\n   private final OfflineAreaRepository offlineAreaRepository;\n+  private final PublishSubject<DownloadTrigger> downloadsPublishSubject = PublishSubject.create();\n \n   @Inject\n   OfflineAreaSelectorViewModel(OfflineAreaRepository offlineAreaRepository) {\n     this.offlineAreaRepository = offlineAreaRepository;\n+    this.downloads =\n+        LiveDataReactiveStreams.fromPublisher(\n+            downloadsPublishSubject.toFlowable(BackpressureStrategy.LATEST));\n   }\n \n   // TODO: Use an abstraction over LatLngBounds\n   public void onDownloadClick(LatLngBounds viewport) {\n     Timber.d(\"viewport:%s\", viewport);\n-    offlineAreaRepository.addAreaAndEnqueue(viewport)\n-      .doOnError(err -> Timber.e(\"Failed to add area and queue downloads: %s\", err.getMessage()))\n-      .onErrorComplete()\n-      .blockingAwait();\n+    offlineAreaRepository\n+        .addAreaAndEnqueue(viewport)\n+        .doOnError(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d9b4a6f17a630134fe5e6ede2ba4d0ff3b18390"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUxNDc4Mw==", "bodyText": "Handled via subscribe instead", "url": "https://github.com/google/ground-android/pull/511#discussion_r448514783", "createdAt": "2020-07-01T17:32:12Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/selector/OfflineAreaSelectorViewModel.java", "diffHunk": "@@ -16,27 +16,51 @@\n \n package com.google.android.gnd.ui.offlinearea.selector;\n \n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.LiveDataReactiveStreams;\n import com.google.android.gms.maps.model.LatLngBounds;\n import com.google.android.gnd.repository.OfflineAreaRepository;\n import com.google.android.gnd.ui.common.AbstractViewModel;\n+import io.reactivex.BackpressureStrategy;\n+import io.reactivex.subjects.PublishSubject;\n import javax.inject.Inject;\n import timber.log.Timber;\n \n public class OfflineAreaSelectorViewModel extends AbstractViewModel {\n \n+  private final LiveData<DownloadTrigger> downloads;\n+\n+  public LiveData<DownloadTrigger> getDownloadTriggers() {\n+    return this.downloads;\n+  }\n+\n+  enum DownloadTrigger {\n+    Started,\n+    Failure\n+  }\n+\n   private final OfflineAreaRepository offlineAreaRepository;\n+  private final PublishSubject<DownloadTrigger> downloadsPublishSubject = PublishSubject.create();\n \n   @Inject\n   OfflineAreaSelectorViewModel(OfflineAreaRepository offlineAreaRepository) {\n     this.offlineAreaRepository = offlineAreaRepository;\n+    this.downloads =\n+        LiveDataReactiveStreams.fromPublisher(\n+            downloadsPublishSubject.toFlowable(BackpressureStrategy.LATEST));\n   }\n \n   // TODO: Use an abstraction over LatLngBounds\n   public void onDownloadClick(LatLngBounds viewport) {\n     Timber.d(\"viewport:%s\", viewport);\n-    offlineAreaRepository.addAreaAndEnqueue(viewport)\n-      .doOnError(err -> Timber.e(\"Failed to add area and queue downloads: %s\", err.getMessage()))\n-      .onErrorComplete()\n-      .blockingAwait();\n+    offlineAreaRepository\n+        .addAreaAndEnqueue(viewport)\n+        .doOnError(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxODA2NQ=="}, "originalCommit": {"oid": "4d9b4a6f17a630134fe5e6ede2ba4d0ff3b18390"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDkxNTI3OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/selector/OfflineAreaSelectorViewModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDo1MDo1NlrOGrpT8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzozMjoxOFrOGrvK_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxODgwMQ==", "bodyText": "Enum values are constants so they're general ALL_CAPS in Java.", "url": "https://github.com/google/ground-android/pull/511#discussion_r448418801", "createdAt": "2020-07-01T14:50:56Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/selector/OfflineAreaSelectorViewModel.java", "diffHunk": "@@ -16,27 +16,51 @@\n \n package com.google.android.gnd.ui.offlinearea.selector;\n \n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.LiveDataReactiveStreams;\n import com.google.android.gms.maps.model.LatLngBounds;\n import com.google.android.gnd.repository.OfflineAreaRepository;\n import com.google.android.gnd.ui.common.AbstractViewModel;\n+import io.reactivex.BackpressureStrategy;\n+import io.reactivex.subjects.PublishSubject;\n import javax.inject.Inject;\n import timber.log.Timber;\n \n public class OfflineAreaSelectorViewModel extends AbstractViewModel {\n \n+  private final LiveData<DownloadTrigger> downloads;\n+\n+  public LiveData<DownloadTrigger> getDownloadTriggers() {\n+    return this.downloads;\n+  }\n+\n+  enum DownloadTrigger {\n+    Started,\n+    Failure", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d9b4a6f17a630134fe5e6ede2ba4d0ff3b18390"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUxNDgxNA==", "bodyText": "Done", "url": "https://github.com/google/ground-android/pull/511#discussion_r448514814", "createdAt": "2020-07-01T17:32:18Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/selector/OfflineAreaSelectorViewModel.java", "diffHunk": "@@ -16,27 +16,51 @@\n \n package com.google.android.gnd.ui.offlinearea.selector;\n \n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.LiveDataReactiveStreams;\n import com.google.android.gms.maps.model.LatLngBounds;\n import com.google.android.gnd.repository.OfflineAreaRepository;\n import com.google.android.gnd.ui.common.AbstractViewModel;\n+import io.reactivex.BackpressureStrategy;\n+import io.reactivex.subjects.PublishSubject;\n import javax.inject.Inject;\n import timber.log.Timber;\n \n public class OfflineAreaSelectorViewModel extends AbstractViewModel {\n \n+  private final LiveData<DownloadTrigger> downloads;\n+\n+  public LiveData<DownloadTrigger> getDownloadTriggers() {\n+    return this.downloads;\n+  }\n+\n+  enum DownloadTrigger {\n+    Started,\n+    Failure", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxODgwMQ=="}, "originalCommit": {"oid": "4d9b4a6f17a630134fe5e6ede2ba4d0ff3b18390"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTkyOTI3OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/selector/OfflineAreaSelectorFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTo0OTo1M1rOGrzQiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTo0OTo1M1rOGrzQiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4MTc2OA==", "bodyText": "Add \"break;\" here and below.", "url": "https://github.com/google/ground-android/pull/511#discussion_r448581768", "createdAt": "2020-07-01T19:49:53Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/selector/OfflineAreaSelectorFragment.java", "diffHunk": "@@ -56,6 +61,24 @@ public void onCreate(@Nullable Bundle savedInstanceState) {\n     // TODO: use the viewmodel\n     Single<MapAdapter> mapAdapter = mapProvider.getMapAdapter();\n     mapAdapter.as(autoDisposable(this)).subscribe(this::onMapReady);\n+    viewModel\n+        .getDownloadEvents()\n+        .observe(\n+            this,\n+            e -> {\n+              e.ifUnhandled(this::onDownloadEvent);\n+            });\n+  }\n+\n+  private void onDownloadEvent(DownloadEvent downloadEvent) {\n+    switch (downloadEvent) {\n+      case FAILURE:\n+        EphemeralPopups.showError(getContext(), R.string.offline_area_download_failed);\n+        navigator.navigateUp();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6de3e69e1f740f3e07e5ba4a5a7d6c7a7ab982fd"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTkzMDU0OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/selector/OfflineAreaSelectorViewModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTo1MDowOVrOGrzRMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTo1MDowOVrOGrzRMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4MTkzOA==", "bodyText": "Pls move enum declaration to start of class.", "url": "https://github.com/google/ground-android/pull/511#discussion_r448581938", "createdAt": "2020-07-01T19:50:09Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/selector/OfflineAreaSelectorViewModel.java", "diffHunk": "@@ -16,27 +16,62 @@\n \n package com.google.android.gnd.ui.offlinearea.selector;\n \n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.LiveDataReactiveStreams;\n import com.google.android.gms.maps.model.LatLngBounds;\n import com.google.android.gnd.repository.OfflineAreaRepository;\n+import com.google.android.gnd.rx.Event;\n+import com.google.android.gnd.rx.Schedulers;\n import com.google.android.gnd.ui.common.AbstractViewModel;\n+import io.reactivex.BackpressureStrategy;\n+import io.reactivex.Observable;\n+import io.reactivex.subjects.PublishSubject;\n import javax.inject.Inject;\n import timber.log.Timber;\n \n public class OfflineAreaSelectorViewModel extends AbstractViewModel {\n \n-  private final OfflineAreaRepository offlineAreaRepository;\n+  private final LiveData<Event<DownloadEvent>> downloadEvents;\n+\n+  public LiveData<Event<DownloadEvent>> getDownloadEvents() {\n+    return this.downloadEvents;\n+  }\n+\n+  enum DownloadEvent {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6de3e69e1f740f3e07e5ba4a5a7d6c7a7ab982fd"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTkzNjI1OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/selector/OfflineAreaSelectorViewModel.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTo1MjowNlrOGrzUuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMToyMDowOFrOGr1t5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4Mjg0MA==", "bodyText": "I think maybe here you'd just want to use flatMapCompletable without the additional andThen?", "url": "https://github.com/google/ground-android/pull/511#discussion_r448582840", "createdAt": "2020-07-01T19:52:06Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/selector/OfflineAreaSelectorViewModel.java", "diffHunk": "@@ -16,27 +16,62 @@\n \n package com.google.android.gnd.ui.offlinearea.selector;\n \n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.LiveDataReactiveStreams;\n import com.google.android.gms.maps.model.LatLngBounds;\n import com.google.android.gnd.repository.OfflineAreaRepository;\n+import com.google.android.gnd.rx.Event;\n+import com.google.android.gnd.rx.Schedulers;\n import com.google.android.gnd.ui.common.AbstractViewModel;\n+import io.reactivex.BackpressureStrategy;\n+import io.reactivex.Observable;\n+import io.reactivex.subjects.PublishSubject;\n import javax.inject.Inject;\n import timber.log.Timber;\n \n public class OfflineAreaSelectorViewModel extends AbstractViewModel {\n \n-  private final OfflineAreaRepository offlineAreaRepository;\n+  private final LiveData<Event<DownloadEvent>> downloadEvents;\n+\n+  public LiveData<Event<DownloadEvent>> getDownloadEvents() {\n+    return this.downloadEvents;\n+  }\n+\n+  enum DownloadEvent {\n+    STARTED,\n+    FAILURE\n+  }\n+\n+  private final PublishSubject<DownloadEvent> downloadsPublishSubject = PublishSubject.create();\n+  private final PublishSubject<LatLngBounds> downloadClickSubject = PublishSubject.create();\n \n   @Inject\n-  OfflineAreaSelectorViewModel(OfflineAreaRepository offlineAreaRepository) {\n-    this.offlineAreaRepository = offlineAreaRepository;\n+  OfflineAreaSelectorViewModel(OfflineAreaRepository offlineAreaRepository, Schedulers schedulers) {\n+\n+    disposeOnClear(\n+        downloadClickSubject\n+            .flatMap(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6de3e69e1f740f3e07e5ba4a5a7d6c7a7ab982fd"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxODQ4Mg==", "bodyText": "@gino-m\nunfortunately, flatMapCompletable won't work here unless we call onComplete explicitly on the PublishSubject , from the docs:\n\nMaps each element of the upstream Observable into CompletableSources, subscribes to them and waits until the upstream and all CompletableSources complete.\n\nSo, since a PublishSubject continually listens for clicks, it never completes and the flatmap will never complete either (since it's perpetually waiting for the subject to complete). Contrarily normal flatmap works as intended here since it doesn't await completions, only emissions.\nI added the comment just above the lambda to describe this predicament\nUnless there's a subject we should use instead of PublishSubject? We could also force it to complete, but that would ensure the user can only ever click Download once, which is the current effect anyway. wdyt?", "url": "https://github.com/google/ground-android/pull/511#discussion_r448618482", "createdAt": "2020-07-01T21:11:47Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/selector/OfflineAreaSelectorViewModel.java", "diffHunk": "@@ -16,27 +16,62 @@\n \n package com.google.android.gnd.ui.offlinearea.selector;\n \n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.LiveDataReactiveStreams;\n import com.google.android.gms.maps.model.LatLngBounds;\n import com.google.android.gnd.repository.OfflineAreaRepository;\n+import com.google.android.gnd.rx.Event;\n+import com.google.android.gnd.rx.Schedulers;\n import com.google.android.gnd.ui.common.AbstractViewModel;\n+import io.reactivex.BackpressureStrategy;\n+import io.reactivex.Observable;\n+import io.reactivex.subjects.PublishSubject;\n import javax.inject.Inject;\n import timber.log.Timber;\n \n public class OfflineAreaSelectorViewModel extends AbstractViewModel {\n \n-  private final OfflineAreaRepository offlineAreaRepository;\n+  private final LiveData<Event<DownloadEvent>> downloadEvents;\n+\n+  public LiveData<Event<DownloadEvent>> getDownloadEvents() {\n+    return this.downloadEvents;\n+  }\n+\n+  enum DownloadEvent {\n+    STARTED,\n+    FAILURE\n+  }\n+\n+  private final PublishSubject<DownloadEvent> downloadsPublishSubject = PublishSubject.create();\n+  private final PublishSubject<LatLngBounds> downloadClickSubject = PublishSubject.create();\n \n   @Inject\n-  OfflineAreaSelectorViewModel(OfflineAreaRepository offlineAreaRepository) {\n-    this.offlineAreaRepository = offlineAreaRepository;\n+  OfflineAreaSelectorViewModel(OfflineAreaRepository offlineAreaRepository, Schedulers schedulers) {\n+\n+    disposeOnClear(\n+        downloadClickSubject\n+            .flatMap(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4Mjg0MA=="}, "originalCommit": {"oid": "6de3e69e1f740f3e07e5ba4a5a7d6c7a7ab982fd"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyMjA1Mg==", "bodyText": "I think if we're ok with limiting the user to a single click, the right approach is probably to use a SingleSubject for the clicks, then we can use flatMapCompletable since calling onSuccess will immediately complete the upstream", "url": "https://github.com/google/ground-android/pull/511#discussion_r448622052", "createdAt": "2020-07-01T21:20:08Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/selector/OfflineAreaSelectorViewModel.java", "diffHunk": "@@ -16,27 +16,62 @@\n \n package com.google.android.gnd.ui.offlinearea.selector;\n \n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.LiveDataReactiveStreams;\n import com.google.android.gms.maps.model.LatLngBounds;\n import com.google.android.gnd.repository.OfflineAreaRepository;\n+import com.google.android.gnd.rx.Event;\n+import com.google.android.gnd.rx.Schedulers;\n import com.google.android.gnd.ui.common.AbstractViewModel;\n+import io.reactivex.BackpressureStrategy;\n+import io.reactivex.Observable;\n+import io.reactivex.subjects.PublishSubject;\n import javax.inject.Inject;\n import timber.log.Timber;\n \n public class OfflineAreaSelectorViewModel extends AbstractViewModel {\n \n-  private final OfflineAreaRepository offlineAreaRepository;\n+  private final LiveData<Event<DownloadEvent>> downloadEvents;\n+\n+  public LiveData<Event<DownloadEvent>> getDownloadEvents() {\n+    return this.downloadEvents;\n+  }\n+\n+  enum DownloadEvent {\n+    STARTED,\n+    FAILURE\n+  }\n+\n+  private final PublishSubject<DownloadEvent> downloadsPublishSubject = PublishSubject.create();\n+  private final PublishSubject<LatLngBounds> downloadClickSubject = PublishSubject.create();\n \n   @Inject\n-  OfflineAreaSelectorViewModel(OfflineAreaRepository offlineAreaRepository) {\n-    this.offlineAreaRepository = offlineAreaRepository;\n+  OfflineAreaSelectorViewModel(OfflineAreaRepository offlineAreaRepository, Schedulers schedulers) {\n+\n+    disposeOnClear(\n+        downloadClickSubject\n+            .flatMap(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4Mjg0MA=="}, "originalCommit": {"oid": "6de3e69e1f740f3e07e5ba4a5a7d6c7a7ab982fd"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTk0MjI1OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/selector/OfflineAreaSelectorViewModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTo1NDoyMlrOGrzYkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTo1NDoyMlrOGrzYkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4MzgyNw==", "bodyText": "Following up on the more idiomatic use about, you should then be able to do:\n  .toSingleDefault(DownloadEvent.STARTED)\n  .onErrorReturn(DownloadEvent.FAILURE)\n  .subscribe(downloadsPublishSubject::onNext);", "url": "https://github.com/google/ground-android/pull/511#discussion_r448583827", "createdAt": "2020-07-01T19:54:22Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/selector/OfflineAreaSelectorViewModel.java", "diffHunk": "@@ -16,27 +16,62 @@\n \n package com.google.android.gnd.ui.offlinearea.selector;\n \n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.LiveDataReactiveStreams;\n import com.google.android.gms.maps.model.LatLngBounds;\n import com.google.android.gnd.repository.OfflineAreaRepository;\n+import com.google.android.gnd.rx.Event;\n+import com.google.android.gnd.rx.Schedulers;\n import com.google.android.gnd.ui.common.AbstractViewModel;\n+import io.reactivex.BackpressureStrategy;\n+import io.reactivex.Observable;\n+import io.reactivex.subjects.PublishSubject;\n import javax.inject.Inject;\n import timber.log.Timber;\n \n public class OfflineAreaSelectorViewModel extends AbstractViewModel {\n \n-  private final OfflineAreaRepository offlineAreaRepository;\n+  private final LiveData<Event<DownloadEvent>> downloadEvents;\n+\n+  public LiveData<Event<DownloadEvent>> getDownloadEvents() {\n+    return this.downloadEvents;\n+  }\n+\n+  enum DownloadEvent {\n+    STARTED,\n+    FAILURE\n+  }\n+\n+  private final PublishSubject<DownloadEvent> downloadsPublishSubject = PublishSubject.create();\n+  private final PublishSubject<LatLngBounds> downloadClickSubject = PublishSubject.create();\n \n   @Inject\n-  OfflineAreaSelectorViewModel(OfflineAreaRepository offlineAreaRepository) {\n-    this.offlineAreaRepository = offlineAreaRepository;\n+  OfflineAreaSelectorViewModel(OfflineAreaRepository offlineAreaRepository, Schedulers schedulers) {\n+\n+    disposeOnClear(\n+        downloadClickSubject\n+            .flatMap(\n+                // We need to handle this in the inner lambda instead of using a combinator such as\n+                // flatMapCompletable because the PublishSubject will never actually complete.\n+                // andThen enables us to fill the resulting stream w/ items to propagate completion.\n+                viewport ->\n+                    offlineAreaRepository\n+                        .addAreaAndEnqueue(viewport)\n+                        .andThen(Observable.just(new Object())))\n+            .observeOn(schedulers.ui())\n+            .doOnError(e -> Timber.e(\"Failed to add area and queue downloads: %s\", e.getMessage()))\n+            .subscribe(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6de3e69e1f740f3e07e5ba4a5a7d6c7a7ab982fd"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNTE1Mzg4OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/selector/OfflineAreaSelectorFragment.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODozMjozOVrOGxgOBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODo0ODo0NVrOGxgxsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU2MTI4NA==", "bodyText": "Why default? Doesn't this make above line case FAILURE redundant?", "url": "https://github.com/google/ground-android/pull/511#discussion_r454561284", "createdAt": "2020-07-14T18:32:39Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/selector/OfflineAreaSelectorFragment.java", "diffHunk": "@@ -55,6 +60,21 @@ public void onCreate(@Nullable Bundle savedInstanceState) {\n     // TODO: use the viewmodel\n     Single<MapAdapter> mapAdapter = mapProvider.getMapAdapter();\n     mapAdapter.as(autoDisposable(this)).subscribe(this::onMapReady);\n+    viewModel.getDownloadMessages().observe(this, e -> e.ifUnhandled(this::onDownloadMessage));\n+  }\n+\n+  private void onDownloadMessage(DownloadMessage message) {\n+    switch (message) {\n+      case STARTED:\n+        EphemeralPopups.showSuccess(getContext(), R.string.offline_area_download_started);\n+        navigator.navigateUp();\n+        break;\n+      case FAILURE:\n+      default:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea47af48d5c65a872313e368a5d61690478d87be"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU3MDQxNg==", "bodyText": "It does, but I believe PMD (or some other check) requires a default clause. We could drop the FAILURE clause, but I think it's ok to keep for now in case we decide we want to handle that case differently--this way we're explicit about discriminating over all the enum values.", "url": "https://github.com/google/ground-android/pull/511#discussion_r454570416", "createdAt": "2020-07-14T18:48:45Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/selector/OfflineAreaSelectorFragment.java", "diffHunk": "@@ -55,6 +60,21 @@ public void onCreate(@Nullable Bundle savedInstanceState) {\n     // TODO: use the viewmodel\n     Single<MapAdapter> mapAdapter = mapProvider.getMapAdapter();\n     mapAdapter.as(autoDisposable(this)).subscribe(this::onMapReady);\n+    viewModel.getDownloadMessages().observe(this, e -> e.ifUnhandled(this::onDownloadMessage));\n+  }\n+\n+  private void onDownloadMessage(DownloadMessage message) {\n+    switch (message) {\n+      case STARTED:\n+        EphemeralPopups.showSuccess(getContext(), R.string.offline_area_download_started);\n+        navigator.navigateUp();\n+        break;\n+      case FAILURE:\n+      default:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU2MTI4NA=="}, "originalCommit": {"oid": "ea47af48d5c65a872313e368a5d61690478d87be"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2486, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}