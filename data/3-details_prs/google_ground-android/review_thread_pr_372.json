{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2NDA2MzYw", "number": 372, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMTozMDoyNFrODhCT3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMTozMDoyNFrODhCT3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTY3NDU0OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/MapIcon.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMTozMDoyNFrOFrkvCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNzozNzo1OFrOFtXc2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIzNDk1Mw==", "bodyText": "In addition, let's log an error as well to keep track of such events.", "url": "https://github.com/google/ground-android/pull/372#discussion_r381234953", "createdAt": "2020-02-19T11:30:24Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/MapIcon.java", "diffHunk": "@@ -17,80 +17,54 @@\n package com.google.android.gnd.ui;\n \n import android.content.Context;\n-import android.content.res.Resources;\n import android.graphics.Bitmap;\n+import android.graphics.Canvas;\n import android.graphics.Color;\n-import android.graphics.drawable.BitmapDrawable;\n-import android.util.Log;\n-import androidx.annotation.DrawableRes;\n-import androidx.annotation.NonNull;\n+import android.graphics.PorterDuff;\n+import android.graphics.drawable.Drawable;\n import androidx.annotation.Nullable;\n-import androidx.core.content.ContextCompat;\n+import androidx.appcompat.content.res.AppCompatResources;\n import com.google.android.gms.maps.model.BitmapDescriptor;\n import com.google.android.gms.maps.model.BitmapDescriptorFactory;\n import com.google.android.gnd.R;\n-import com.google.android.gnd.ui.util.ViewUtil;\n \n // TODO: Move to common, rename Marker.\n public class MapIcon {\n-  private static final String TAG = MapIcon.class.getSimpleName();\n   private final Context context;\n-  private BitmapDrawable drawable;\n-  private int color;\n+  private final int color;\n \n-  public MapIcon(Context context, @Nullable String iconId, @Nullable String color) {\n+  public MapIcon(Context context, @Nullable String colorHexCode) {\n     this.context = context;\n-    this.color = getIconColor(context, color);\n-    int resourceId = getResourceId(context, iconId);\n-    this.drawable = (BitmapDrawable) ContextCompat.getDrawable(context, resourceId);\n+    this.color = getIconColor(context, colorHexCode);\n   }\n \n-  private static int getIconColor(Context context, String color) {\n-    try {\n-      return Color.parseColor(color);\n-    } catch (Exception e) {\n-      return context.getResources().getColor(R.color.colorMapAccent);\n-    }\n+  public BitmapDescriptor getBitmap() {\n+    Drawable outline = AppCompatResources.getDrawable(context, R.drawable.ic_marker_outline);\n+    Drawable fill = AppCompatResources.getDrawable(context, R.drawable.ic_marker_fill);\n+    Drawable overlay = AppCompatResources.getDrawable(context, R.drawable.ic_marker_overlay);\n+    // TODO: Define scale in resources.\n+    // TODO: Adjust size based on zoom level and selection state.\n+    float scale = 1.8f;\n+    int width = (int) (outline.getIntrinsicWidth() * scale);\n+    int height = (int) (outline.getIntrinsicHeight() * scale);\n+    Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);\n+    Canvas canvas = new Canvas(bitmap);\n+    outline.setBounds(0, 0, width, height);\n+    outline.draw(canvas);\n+    fill.setColorFilter(color, PorterDuff.Mode.SRC_ATOP);\n+    fill.setBounds(0, 0, width, height);\n+    fill.draw(canvas);\n+    overlay.setBounds(0, 0, width, height);\n+    overlay.draw(canvas);\n+    // TODO: Cache rendered bitmaps.\n+    return BitmapDescriptorFactory.fromBitmap(bitmap);\n   }\n \n-  @NonNull\n-  public static @DrawableRes int getResourceId(Context context, @Nullable String iconId) {\n-    if (iconId == null) {\n-      return R.drawable.ic_default_map_marker;\n-    }\n+  private static int getIconColor(Context context, String colorHexCode) {\n     try {\n-      String resourceName = \"ic_marker_\" + iconId.replace(\"-\", \"_\");\n-      int resourceId =\n-          context.getResources().getIdentifier(resourceName, \"drawable\", context.getPackageName());\n-      if (resourceId > 0) {\n-        return resourceId;\n-      }\n-    } catch (Resources.NotFoundException e) {\n-      Log.w(TAG, e);\n+      return Color.parseColor(colorHexCode);\n+    } catch (IllegalArgumentException e) {\n+      return context.getResources().getColor(R.color.colorMapAccent);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5cb855ad0b9809ac83b181892f7f613bb23a162"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMzNzI3MQ==", "bodyText": "Good idea! In the process I've done a little more cleanup that I'd probably never get back to otherwise: 50049aa", "url": "https://github.com/google/ground-android/pull/372#discussion_r381337271", "createdAt": "2020-02-19T14:46:38Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/MapIcon.java", "diffHunk": "@@ -17,80 +17,54 @@\n package com.google.android.gnd.ui;\n \n import android.content.Context;\n-import android.content.res.Resources;\n import android.graphics.Bitmap;\n+import android.graphics.Canvas;\n import android.graphics.Color;\n-import android.graphics.drawable.BitmapDrawable;\n-import android.util.Log;\n-import androidx.annotation.DrawableRes;\n-import androidx.annotation.NonNull;\n+import android.graphics.PorterDuff;\n+import android.graphics.drawable.Drawable;\n import androidx.annotation.Nullable;\n-import androidx.core.content.ContextCompat;\n+import androidx.appcompat.content.res.AppCompatResources;\n import com.google.android.gms.maps.model.BitmapDescriptor;\n import com.google.android.gms.maps.model.BitmapDescriptorFactory;\n import com.google.android.gnd.R;\n-import com.google.android.gnd.ui.util.ViewUtil;\n \n // TODO: Move to common, rename Marker.\n public class MapIcon {\n-  private static final String TAG = MapIcon.class.getSimpleName();\n   private final Context context;\n-  private BitmapDrawable drawable;\n-  private int color;\n+  private final int color;\n \n-  public MapIcon(Context context, @Nullable String iconId, @Nullable String color) {\n+  public MapIcon(Context context, @Nullable String colorHexCode) {\n     this.context = context;\n-    this.color = getIconColor(context, color);\n-    int resourceId = getResourceId(context, iconId);\n-    this.drawable = (BitmapDrawable) ContextCompat.getDrawable(context, resourceId);\n+    this.color = getIconColor(context, colorHexCode);\n   }\n \n-  private static int getIconColor(Context context, String color) {\n-    try {\n-      return Color.parseColor(color);\n-    } catch (Exception e) {\n-      return context.getResources().getColor(R.color.colorMapAccent);\n-    }\n+  public BitmapDescriptor getBitmap() {\n+    Drawable outline = AppCompatResources.getDrawable(context, R.drawable.ic_marker_outline);\n+    Drawable fill = AppCompatResources.getDrawable(context, R.drawable.ic_marker_fill);\n+    Drawable overlay = AppCompatResources.getDrawable(context, R.drawable.ic_marker_overlay);\n+    // TODO: Define scale in resources.\n+    // TODO: Adjust size based on zoom level and selection state.\n+    float scale = 1.8f;\n+    int width = (int) (outline.getIntrinsicWidth() * scale);\n+    int height = (int) (outline.getIntrinsicHeight() * scale);\n+    Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);\n+    Canvas canvas = new Canvas(bitmap);\n+    outline.setBounds(0, 0, width, height);\n+    outline.draw(canvas);\n+    fill.setColorFilter(color, PorterDuff.Mode.SRC_ATOP);\n+    fill.setBounds(0, 0, width, height);\n+    fill.draw(canvas);\n+    overlay.setBounds(0, 0, width, height);\n+    overlay.draw(canvas);\n+    // TODO: Cache rendered bitmaps.\n+    return BitmapDescriptorFactory.fromBitmap(bitmap);\n   }\n \n-  @NonNull\n-  public static @DrawableRes int getResourceId(Context context, @Nullable String iconId) {\n-    if (iconId == null) {\n-      return R.drawable.ic_default_map_marker;\n-    }\n+  private static int getIconColor(Context context, String colorHexCode) {\n     try {\n-      String resourceName = \"ic_marker_\" + iconId.replace(\"-\", \"_\");\n-      int resourceId =\n-          context.getResources().getIdentifier(resourceName, \"drawable\", context.getPackageName());\n-      if (resourceId > 0) {\n-        return resourceId;\n-      }\n-    } catch (Resources.NotFoundException e) {\n-      Log.w(TAG, e);\n+      return Color.parseColor(colorHexCode);\n+    } catch (IllegalArgumentException e) {\n+      return context.getResources().getColor(R.color.colorMapAccent);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIzNDk1Mw=="}, "originalCommit": {"oid": "f5cb855ad0b9809ac83b181892f7f613bb23a162"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzExNDQ1Ng==", "bodyText": "Thanks!", "url": "https://github.com/google/ground-android/pull/372#discussion_r383114456", "createdAt": "2020-02-24T07:37:58Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/MapIcon.java", "diffHunk": "@@ -17,80 +17,54 @@\n package com.google.android.gnd.ui;\n \n import android.content.Context;\n-import android.content.res.Resources;\n import android.graphics.Bitmap;\n+import android.graphics.Canvas;\n import android.graphics.Color;\n-import android.graphics.drawable.BitmapDrawable;\n-import android.util.Log;\n-import androidx.annotation.DrawableRes;\n-import androidx.annotation.NonNull;\n+import android.graphics.PorterDuff;\n+import android.graphics.drawable.Drawable;\n import androidx.annotation.Nullable;\n-import androidx.core.content.ContextCompat;\n+import androidx.appcompat.content.res.AppCompatResources;\n import com.google.android.gms.maps.model.BitmapDescriptor;\n import com.google.android.gms.maps.model.BitmapDescriptorFactory;\n import com.google.android.gnd.R;\n-import com.google.android.gnd.ui.util.ViewUtil;\n \n // TODO: Move to common, rename Marker.\n public class MapIcon {\n-  private static final String TAG = MapIcon.class.getSimpleName();\n   private final Context context;\n-  private BitmapDrawable drawable;\n-  private int color;\n+  private final int color;\n \n-  public MapIcon(Context context, @Nullable String iconId, @Nullable String color) {\n+  public MapIcon(Context context, @Nullable String colorHexCode) {\n     this.context = context;\n-    this.color = getIconColor(context, color);\n-    int resourceId = getResourceId(context, iconId);\n-    this.drawable = (BitmapDrawable) ContextCompat.getDrawable(context, resourceId);\n+    this.color = getIconColor(context, colorHexCode);\n   }\n \n-  private static int getIconColor(Context context, String color) {\n-    try {\n-      return Color.parseColor(color);\n-    } catch (Exception e) {\n-      return context.getResources().getColor(R.color.colorMapAccent);\n-    }\n+  public BitmapDescriptor getBitmap() {\n+    Drawable outline = AppCompatResources.getDrawable(context, R.drawable.ic_marker_outline);\n+    Drawable fill = AppCompatResources.getDrawable(context, R.drawable.ic_marker_fill);\n+    Drawable overlay = AppCompatResources.getDrawable(context, R.drawable.ic_marker_overlay);\n+    // TODO: Define scale in resources.\n+    // TODO: Adjust size based on zoom level and selection state.\n+    float scale = 1.8f;\n+    int width = (int) (outline.getIntrinsicWidth() * scale);\n+    int height = (int) (outline.getIntrinsicHeight() * scale);\n+    Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);\n+    Canvas canvas = new Canvas(bitmap);\n+    outline.setBounds(0, 0, width, height);\n+    outline.draw(canvas);\n+    fill.setColorFilter(color, PorterDuff.Mode.SRC_ATOP);\n+    fill.setBounds(0, 0, width, height);\n+    fill.draw(canvas);\n+    overlay.setBounds(0, 0, width, height);\n+    overlay.draw(canvas);\n+    // TODO: Cache rendered bitmaps.\n+    return BitmapDescriptorFactory.fromBitmap(bitmap);\n   }\n \n-  @NonNull\n-  public static @DrawableRes int getResourceId(Context context, @Nullable String iconId) {\n-    if (iconId == null) {\n-      return R.drawable.ic_default_map_marker;\n-    }\n+  private static int getIconColor(Context context, String colorHexCode) {\n     try {\n-      String resourceName = \"ic_marker_\" + iconId.replace(\"-\", \"_\");\n-      int resourceId =\n-          context.getResources().getIdentifier(resourceName, \"drawable\", context.getPackageName());\n-      if (resourceId > 0) {\n-        return resourceId;\n-      }\n-    } catch (Resources.NotFoundException e) {\n-      Log.w(TAG, e);\n+      return Color.parseColor(colorHexCode);\n+    } catch (IllegalArgumentException e) {\n+      return context.getResources().getColor(R.color.colorMapAccent);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIzNDk1Mw=="}, "originalCommit": {"oid": "f5cb855ad0b9809ac83b181892f7f613bb23a162"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2618, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}