{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1ODQ3NDgy", "number": 371, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMjoxNToyOFrODg33GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMjo0NToxNFrODg4WPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Nzk2MjQ4OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/FirestoreDataStore.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMjoxNToyOFrOFrUdAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoxNjo0OFrOFrtqHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk2ODE5Mg==", "bodyText": "Should we use exceptions for this case?\nI'm of the opinion that exceptions are more useful for states that are actually unrecoverable/catastrophic--places where crashing w/ a message + trace is a valid course of action, whereas when we do stuff like ignore or log a potential value we don't care about and otherwise continue running some kind of value wrapper type is more appropriate\u2014it doesn't make much of a difference at the end of the day, so I would bother if you have a different stance on this.", "url": "https://github.com/google/ground-android/pull/371#discussion_r380968192", "createdAt": "2020-02-18T22:15:28Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/FirestoreDataStore.java", "diffHunk": "@@ -91,30 +97,37 @@ public Completable applyMutations(ImmutableCollection<Mutation> mutations, User\n   private Task<?> applyMutationsInternal(ImmutableCollection<Mutation> mutations, User user) {\n     WriteBatch batch = db.batch();\n     for (Mutation mutation : mutations) {\n-      addMutationToBatch(mutation, user, batch);\n+      try {\n+        addMutationToBatch(mutation, user, batch);\n+      } catch (DataStoreException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4c6fff20bf30073a52ee2f3a564ac162a8cc0bb"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk4NjQ5MQ==", "bodyText": "If exceptions were unrecoverable, then there'd be no need for try/catch. Sun says \"An exception is an event that occurs during the execution of a program that disrupts the normal flow of instructions.\" Issues like these with bad input data prevent the deserialization of remote entities, but don't break the entire app. Where we handle these and how obviously an art and not a science, and I agree sometimes it may make sense to use value wrappers instead of exceptions. But for values that really really need to be there for the data be used (i.e., we're dropping data, the database is corrupt) an exception definitely seems like the right mechanism.\n@dturner in case you have anything to add!", "url": "https://github.com/google/ground-android/pull/371#discussion_r380986491", "createdAt": "2020-02-18T22:58:46Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/FirestoreDataStore.java", "diffHunk": "@@ -91,30 +97,37 @@ public Completable applyMutations(ImmutableCollection<Mutation> mutations, User\n   private Task<?> applyMutationsInternal(ImmutableCollection<Mutation> mutations, User user) {\n     WriteBatch batch = db.batch();\n     for (Mutation mutation : mutations) {\n-      addMutationToBatch(mutation, user, batch);\n+      try {\n+        addMutationToBatch(mutation, user, batch);\n+      } catch (DataStoreException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk2ODE5Mg=="}, "originalCommit": {"oid": "d4c6fff20bf30073a52ee2f3a564ac162a8cc0bb"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk5MjUwNg==", "bodyText": "That sounds reasonable to me. I'm fine with using them--I think at times they compete with alternatives like returning Result(x)--thanks for the explanation!\nBut i will drop this chart :)", "url": "https://github.com/google/ground-android/pull/371#discussion_r380992506", "createdAt": "2020-02-18T23:15:54Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/FirestoreDataStore.java", "diffHunk": "@@ -91,30 +97,37 @@ public Completable applyMutations(ImmutableCollection<Mutation> mutations, User\n   private Task<?> applyMutationsInternal(ImmutableCollection<Mutation> mutations, User user) {\n     WriteBatch batch = db.batch();\n     for (Mutation mutation : mutations) {\n-      addMutationToBatch(mutation, user, batch);\n+      try {\n+        addMutationToBatch(mutation, user, batch);\n+      } catch (DataStoreException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk2ODE5Mg=="}, "originalCommit": {"oid": "d4c6fff20bf30073a52ee2f3a564ac162a8cc0bb"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk5NzMxNg==", "bodyText": "+1, especially when we need a was to propagate errors in streams.\nI haven't seen that before, but at first glance it seems they may be confusing code readability with graph complexity, which I intuitively believe may not be strictly correlated. The abstraction provided by exception propagation could allow you to represent the call stack as a single box, in some sense... but I could be wrong.", "url": "https://github.com/google/ground-android/pull/371#discussion_r380997316", "createdAt": "2020-02-18T23:31:35Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/FirestoreDataStore.java", "diffHunk": "@@ -91,30 +97,37 @@ public Completable applyMutations(ImmutableCollection<Mutation> mutations, User\n   private Task<?> applyMutationsInternal(ImmutableCollection<Mutation> mutations, User user) {\n     WriteBatch batch = db.batch();\n     for (Mutation mutation : mutations) {\n-      addMutationToBatch(mutation, user, batch);\n+      try {\n+        addMutationToBatch(mutation, user, batch);\n+      } catch (DataStoreException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk2ODE5Mg=="}, "originalCommit": {"oid": "d4c6fff20bf30073a52ee2f3a564ac162a8cc0bb"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4MTE0OA==", "bodyText": "That's a good point! I guess I just think things are easier to reason about the less we mix styles--but it probably is simpler to go with exceptions in certain cases--I just hope doing things on a case-by-case basis doesn't make it more difficult to alter things in the long run. But I think our choices/boundaries are pretty clear right now, so it probably won't be an issue.", "url": "https://github.com/google/ground-android/pull/371#discussion_r381381148", "createdAt": "2020-02-19T16:16:48Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/FirestoreDataStore.java", "diffHunk": "@@ -91,30 +97,37 @@ public Completable applyMutations(ImmutableCollection<Mutation> mutations, User\n   private Task<?> applyMutationsInternal(ImmutableCollection<Mutation> mutations, User user) {\n     WriteBatch batch = db.batch();\n     for (Mutation mutation : mutations) {\n-      addMutationToBatch(mutation, user, batch);\n+      try {\n+        addMutationToBatch(mutation, user, batch);\n+      } catch (DataStoreException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk2ODE5Mg=="}, "originalCommit": {"oid": "d4c6fff20bf30073a52ee2f3a564ac162a8cc0bb"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Nzk3NDU1OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/AuditInfoConverter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMjoxOTozOVrOFrUkQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMzoyNjoxOFrOFrWIrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk3MDA1MQ==", "bodyText": "Is it really a POJO? Doesn't it depend on Firebase?", "url": "https://github.com/google/ground-android/pull/371#discussion_r380970051", "createdAt": "2020-02-18T22:19:39Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/AuditInfoConverter.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.remote.firestore.schema;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import com.google.android.gnd.model.AuditInfo;\n+import com.google.android.gnd.model.Mutation;\n+import com.google.android.gnd.model.User;\n+import com.google.firebase.Timestamp;\n+import java.util.Date;\n+import java8.util.Optional;\n+\n+/** Converts between Firestore nested objects and {@link AuditInfo} instances. */\n+class AuditInfoConverter {\n+\n+  /**\n+   * Converts a POJO representing user and timestamp data in Firebase into an equivalent model", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4c6fff20bf30073a52ee2f3a564ac162a8cc0bb"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk4ODQxNw==", "bodyText": "Good question... I think in this case they're still considered POJOs in the general sense in that they implement no special interfaces or external conventions; the annotations only provide hints for Firebase, but they're not required to use or create instances.\n\nThe idea is that if the object (actually class) were a POJO before any annotations were added, and would return to POJO status if the annotations are removed then it can still be considered a POJO. Then the basic object remains a POJO in that it has no special characteristics (such as an implemented interface) that makes it a \"Specialized Java Object\" (SJO or (sic) SoJO).\nhttps://en.wikipedia.org/wiki/Plain_old_Java_object#Definition", "url": "https://github.com/google/ground-android/pull/371#discussion_r380988417", "createdAt": "2020-02-18T23:03:59Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/AuditInfoConverter.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.remote.firestore.schema;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import com.google.android.gnd.model.AuditInfo;\n+import com.google.android.gnd.model.Mutation;\n+import com.google.android.gnd.model.User;\n+import com.google.firebase.Timestamp;\n+import java.util.Date;\n+import java8.util.Optional;\n+\n+/** Converts between Firestore nested objects and {@link AuditInfo} instances. */\n+class AuditInfoConverter {\n+\n+  /**\n+   * Converts a POJO representing user and timestamp data in Firebase into an equivalent model", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk3MDA1MQ=="}, "originalCommit": {"oid": "d4c6fff20bf30073a52ee2f3a564ac162a8cc0bb"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk5MTI2NA==", "bodyText": "Cool, sounds good! Thanks for clarifying.\nMight be best to just drop the term in this case? I don't think it adds much atm -- I think just calling it a converter to/from Firebase representation to the model is clear and effective.", "url": "https://github.com/google/ground-android/pull/371#discussion_r380991264", "createdAt": "2020-02-18T23:11:59Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/AuditInfoConverter.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.remote.firestore.schema;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import com.google.android.gnd.model.AuditInfo;\n+import com.google.android.gnd.model.Mutation;\n+import com.google.android.gnd.model.User;\n+import com.google.firebase.Timestamp;\n+import java.util.Date;\n+import java8.util.Optional;\n+\n+/** Converts between Firestore nested objects and {@link AuditInfo} instances. */\n+class AuditInfoConverter {\n+\n+  /**\n+   * Converts a POJO representing user and timestamp data in Firebase into an equivalent model", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk3MDA1MQ=="}, "originalCommit": {"oid": "d4c6fff20bf30073a52ee2f3a564ac162a8cc0bb"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk5NTc1OA==", "bodyText": "Done (9f16c32)! I was going to update the comment, but ended up deleting instead, since other converter methods don't have method-level JavaDoc, and what they're doing is mostly clear from the class JavaDoc.", "url": "https://github.com/google/ground-android/pull/371#discussion_r380995758", "createdAt": "2020-02-18T23:26:18Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/AuditInfoConverter.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.remote.firestore.schema;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import com.google.android.gnd.model.AuditInfo;\n+import com.google.android.gnd.model.Mutation;\n+import com.google.android.gnd.model.User;\n+import com.google.firebase.Timestamp;\n+import java.util.Date;\n+import java8.util.Optional;\n+\n+/** Converts between Firestore nested objects and {@link AuditInfo} instances. */\n+class AuditInfoConverter {\n+\n+  /**\n+   * Converts a POJO representing user and timestamp data in Firebase into an equivalent model", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk3MDA1MQ=="}, "originalCommit": {"oid": "d4c6fff20bf30073a52ee2f3a564ac162a8cc0bb"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Nzk4MDA3OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/AuditInfoConverter.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMjoyMTo0NFrOFrUnuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMzoyMzo0NFrOFrWFlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk3MDkzNg==", "bodyText": "If we know the user, shouldn't we ascribe the audit to the user even if the time is somehow unknown?", "url": "https://github.com/google/ground-android/pull/371#discussion_r380970936", "createdAt": "2020-02-18T22:21:44Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/AuditInfoConverter.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.remote.firestore.schema;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import com.google.android.gnd.model.AuditInfo;\n+import com.google.android.gnd.model.Mutation;\n+import com.google.android.gnd.model.User;\n+import com.google.firebase.Timestamp;\n+import java.util.Date;\n+import java8.util.Optional;\n+\n+/** Converts between Firestore nested objects and {@link AuditInfo} instances. */\n+class AuditInfoConverter {\n+\n+  /**\n+   * Converts a POJO representing user and timestamp data in Firebase into an equivalent model\n+   * object. This should never be empty in Firebase, but this method returns a default value when\n+   * the input is null to support legacy or corrupt dbs.\n+   */\n+  @NonNull\n+  static AuditInfo toAuditInfo(@Nullable AuditInfoNestedObject doc) {\n+    if (doc == null || doc.getClientTimeMillis() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4c6fff20bf30073a52ee2f3a564ac162a8cc0bb"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk3NDI1NA==", "bodyText": "We could also return defaults from the AuditInfoNestedObject getters themselves -- since we're accounting for a peculiarity of firebase and not our model.\nPlus that ensures the work performed by the converter is actual conversion from store values to model values (timestamp->date) and we don't give it the double duty of defining defaults for store values.", "url": "https://github.com/google/ground-android/pull/371#discussion_r380974254", "createdAt": "2020-02-18T22:29:50Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/AuditInfoConverter.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.remote.firestore.schema;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import com.google.android.gnd.model.AuditInfo;\n+import com.google.android.gnd.model.Mutation;\n+import com.google.android.gnd.model.User;\n+import com.google.firebase.Timestamp;\n+import java.util.Date;\n+import java8.util.Optional;\n+\n+/** Converts between Firestore nested objects and {@link AuditInfo} instances. */\n+class AuditInfoConverter {\n+\n+  /**\n+   * Converts a POJO representing user and timestamp data in Firebase into an equivalent model\n+   * object. This should never be empty in Firebase, but this method returns a default value when\n+   * the input is null to support legacy or corrupt dbs.\n+   */\n+  @NonNull\n+  static AuditInfo toAuditInfo(@Nullable AuditInfoNestedObject doc) {\n+    if (doc == null || doc.getClientTimeMillis() == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk3MDkzNg=="}, "originalCommit": {"oid": "d4c6fff20bf30073a52ee2f3a564ac162a8cc0bb"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk3NDM5OQ==", "bodyText": "I don't have a particularly strong opinion on this though, so up to you.", "url": "https://github.com/google/ground-android/pull/371#discussion_r380974399", "createdAt": "2020-02-18T22:30:13Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/AuditInfoConverter.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.remote.firestore.schema;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import com.google.android.gnd.model.AuditInfo;\n+import com.google.android.gnd.model.Mutation;\n+import com.google.android.gnd.model.User;\n+import com.google.firebase.Timestamp;\n+import java.util.Date;\n+import java8.util.Optional;\n+\n+/** Converts between Firestore nested objects and {@link AuditInfo} instances. */\n+class AuditInfoConverter {\n+\n+  /**\n+   * Converts a POJO representing user and timestamp data in Firebase into an equivalent model\n+   * object. This should never be empty in Firebase, but this method returns a default value when\n+   * the input is null to support legacy or corrupt dbs.\n+   */\n+  @NonNull\n+  static AuditInfo toAuditInfo(@Nullable AuditInfoNestedObject doc) {\n+    if (doc == null || doc.getClientTimeMillis() == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk3MDkzNg=="}, "originalCommit": {"oid": "d4c6fff20bf30073a52ee2f3a564ac162a8cc0bb"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk5MTM1OA==", "bodyText": "We could also return defaults from the AuditInfoNestedObject getters themselves -- since we're accounting for a peculiarity of firebase and not our model.\n\nThis would split out part of the conversion of remove data, making the conversion harder to debug.\n\nPlus that ensures the work performed by the converter is actual conversion from store values to model values (timestamp->date) and we don't give it the double duty of defining defaults for store values.\n\nI think it makes sense to a canonical representation of what's actually in Firebase separate from the handling of that data. It makes things easier to debug, and consolidates all logic that transforms that data (defaults, fallbacks, or otherwise) into a single place.\n\nIf we know the user, shouldn't we ascribe the audit to the user even if the time is somehow unknown?\n\nActually now that I think about it, an entity without a time should probably just be considered invalid, since it's one of the only identifying attributes of features and observations. Users, on the other hand, could delete their accounts, meaning we would need to delete the user data.", "url": "https://github.com/google/ground-android/pull/371#discussion_r380991358", "createdAt": "2020-02-18T23:12:18Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/AuditInfoConverter.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.remote.firestore.schema;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import com.google.android.gnd.model.AuditInfo;\n+import com.google.android.gnd.model.Mutation;\n+import com.google.android.gnd.model.User;\n+import com.google.firebase.Timestamp;\n+import java.util.Date;\n+import java8.util.Optional;\n+\n+/** Converts between Firestore nested objects and {@link AuditInfo} instances. */\n+class AuditInfoConverter {\n+\n+  /**\n+   * Converts a POJO representing user and timestamp data in Firebase into an equivalent model\n+   * object. This should never be empty in Firebase, but this method returns a default value when\n+   * the input is null to support legacy or corrupt dbs.\n+   */\n+  @NonNull\n+  static AuditInfo toAuditInfo(@Nullable AuditInfoNestedObject doc) {\n+    if (doc == null || doc.getClientTimeMillis() == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk3MDkzNg=="}, "originalCommit": {"oid": "d4c6fff20bf30073a52ee2f3a564ac162a8cc0bb"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk5MzEzMg==", "bodyText": "Sounds good!", "url": "https://github.com/google/ground-android/pull/371#discussion_r380993132", "createdAt": "2020-02-18T23:17:52Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/AuditInfoConverter.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.remote.firestore.schema;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import com.google.android.gnd.model.AuditInfo;\n+import com.google.android.gnd.model.Mutation;\n+import com.google.android.gnd.model.User;\n+import com.google.firebase.Timestamp;\n+import java.util.Date;\n+import java8.util.Optional;\n+\n+/** Converts between Firestore nested objects and {@link AuditInfo} instances. */\n+class AuditInfoConverter {\n+\n+  /**\n+   * Converts a POJO representing user and timestamp data in Firebase into an equivalent model\n+   * object. This should never be empty in Firebase, but this method returns a default value when\n+   * the input is null to support legacy or corrupt dbs.\n+   */\n+  @NonNull\n+  static AuditInfo toAuditInfo(@Nullable AuditInfoNestedObject doc) {\n+    if (doc == null || doc.getClientTimeMillis() == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk3MDkzNg=="}, "originalCommit": {"oid": "d4c6fff20bf30073a52ee2f3a564ac162a8cc0bb"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk5NDk2Ng==", "bodyText": "Fixed! Relevant patch: ab1b06f", "url": "https://github.com/google/ground-android/pull/371#discussion_r380994966", "createdAt": "2020-02-18T23:23:44Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/AuditInfoConverter.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.remote.firestore.schema;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import com.google.android.gnd.model.AuditInfo;\n+import com.google.android.gnd.model.Mutation;\n+import com.google.android.gnd.model.User;\n+import com.google.firebase.Timestamp;\n+import java.util.Date;\n+import java8.util.Optional;\n+\n+/** Converts between Firestore nested objects and {@link AuditInfo} instances. */\n+class AuditInfoConverter {\n+\n+  /**\n+   * Converts a POJO representing user and timestamp data in Firebase into an equivalent model\n+   * object. This should never be empty in Firebase, but this method returns a default value when\n+   * the input is null to support legacy or corrupt dbs.\n+   */\n+  @NonNull\n+  static AuditInfo toAuditInfo(@Nullable AuditInfoNestedObject doc) {\n+    if (doc == null || doc.getClientTimeMillis() == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk3MDkzNg=="}, "originalCommit": {"oid": "d4c6fff20bf30073a52ee2f3a564ac162a8cc0bb"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODAyNTczOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/FormConverter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMjozOToxMFrOFrVDrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMzoxODowMFrOFrV-pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk3ODA5NA==", "bodyText": "Is there a reason we don't store formIds on forms themselves?", "url": "https://github.com/google/ground-android/pull/371#discussion_r380978094", "createdAt": "2020-02-18T22:39:10Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/FormConverter.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.remote.firestore.schema;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.stream.StreamSupport.stream;\n+\n+import com.google.android.gnd.model.form.Form;\n+\n+/** Converts between Firestore nested objects and {@link Form} instances. */\n+class FormConverter {\n+\n+  static Form toForm(String formId, FormNestedObject obj) {\n+    return Form.newBuilder()\n+        .setId(formId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4c6fff20bf30073a52ee2f3a564ac162a8cc0bb"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk4OTA0NQ==", "bodyText": "Because they come from the enclosing map, e.g.\n{\n   'id1234': {\n     // nested object\n   }\n}", "url": "https://github.com/google/ground-android/pull/371#discussion_r380989045", "createdAt": "2020-02-18T23:05:38Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/FormConverter.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.remote.firestore.schema;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.stream.StreamSupport.stream;\n+\n+import com.google.android.gnd.model.form.Form;\n+\n+/** Converts between Firestore nested objects and {@link Form} instances. */\n+class FormConverter {\n+\n+  static Form toForm(String formId, FormNestedObject obj) {\n+    return Form.newBuilder()\n+        .setId(formId)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk3ODA5NA=="}, "originalCommit": {"oid": "d4c6fff20bf30073a52ee2f3a564ac162a8cc0bb"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk5MzE4OQ==", "bodyText": "I see, thanks!", "url": "https://github.com/google/ground-android/pull/371#discussion_r380993189", "createdAt": "2020-02-18T23:18:00Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/FormConverter.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.remote.firestore.schema;\n+\n+import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n+import static java8.util.stream.StreamSupport.stream;\n+\n+import com.google.android.gnd.model.form.Form;\n+\n+/** Converts between Firestore nested objects and {@link Form} instances. */\n+class FormConverter {\n+\n+  static Form toForm(String formId, FormNestedObject obj) {\n+    return Form.newBuilder()\n+        .setId(formId)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk3ODA5NA=="}, "originalCommit": {"oid": "d4c6fff20bf30073a52ee2f3a564ac162a8cc0bb"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODA0MjIwOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/ProjectConverter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMjo0NToxNFrOFrVNug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMzo0MTozOVrOFrWcEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk4MDY2Ng==", "bodyText": "Instead of doing a conversion here, could we just add a single layer of indirection to the DocSnapshots? -- so that their first interior/nested field is the representation of a Project, instead of having them represent the project itself? --or would that be rather fussy/pointless?", "url": "https://github.com/google/ground-android/pull/371#discussion_r380980666", "createdAt": "2020-02-18T22:45:14Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/ProjectConverter.java", "diffHunk": "@@ -14,36 +14,28 @@\n  * limitations under the License.\n  */\n \n-package com.google.android.gnd.persistence.remote.firestore;\n+package com.google.android.gnd.persistence.remote.firestore.schema;\n \n import static com.google.android.gnd.util.Localization.getLocalizedMessage;\n \n-import androidx.annotation.Nullable;\n import com.google.android.gnd.model.Project;\n+import com.google.android.gnd.persistence.remote.DataStoreException;\n import com.google.firebase.firestore.DocumentSnapshot;\n-import com.google.firebase.firestore.IgnoreExtraProperties;\n-import java.util.Map;\n import java8.util.Maps;\n \n-@IgnoreExtraProperties\n-public class ProjectDoc {\n-  @Nullable public Map<String, String> title;\n+/** Converts between Firestore documents and {@link Project} instances. */\n+class ProjectConverter {\n \n-  @Nullable public Map<String, String> description;\n-\n-  // TODO: Add AuditInfoDoc for created and lastModified.\n-\n-  @Nullable public Map<String, LayerDoc> featureTypes;\n-\n-  public static Project toObject(DocumentSnapshot doc) {\n-    ProjectDoc pd = doc.toObject(ProjectDoc.class);\n+  static Project toProject(DocumentSnapshot doc) throws DataStoreException {\n+    ProjectDocument pd = doc.toObject(ProjectDocument.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4c6fff20bf30073a52ee2f3a564ac162a8cc0bb"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk5MzQ0Nw==", "bodyText": "Based on:\n\nBecause they come from the enclosing map, e.g.\n{\n   'id1234': {\n     // nested object\n   }\n}\n\n\nSeems like it'd be a pain to do what I'm suggesting/asking here", "url": "https://github.com/google/ground-android/pull/371#discussion_r380993447", "createdAt": "2020-02-18T23:18:47Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/ProjectConverter.java", "diffHunk": "@@ -14,36 +14,28 @@\n  * limitations under the License.\n  */\n \n-package com.google.android.gnd.persistence.remote.firestore;\n+package com.google.android.gnd.persistence.remote.firestore.schema;\n \n import static com.google.android.gnd.util.Localization.getLocalizedMessage;\n \n-import androidx.annotation.Nullable;\n import com.google.android.gnd.model.Project;\n+import com.google.android.gnd.persistence.remote.DataStoreException;\n import com.google.firebase.firestore.DocumentSnapshot;\n-import com.google.firebase.firestore.IgnoreExtraProperties;\n-import java.util.Map;\n import java8.util.Maps;\n \n-@IgnoreExtraProperties\n-public class ProjectDoc {\n-  @Nullable public Map<String, String> title;\n+/** Converts between Firestore documents and {@link Project} instances. */\n+class ProjectConverter {\n \n-  @Nullable public Map<String, String> description;\n-\n-  // TODO: Add AuditInfoDoc for created and lastModified.\n-\n-  @Nullable public Map<String, LayerDoc> featureTypes;\n-\n-  public static Project toObject(DocumentSnapshot doc) {\n-    ProjectDoc pd = doc.toObject(ProjectDoc.class);\n+  static Project toProject(DocumentSnapshot doc) throws DataStoreException {\n+    ProjectDocument pd = doc.toObject(ProjectDocument.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk4MDY2Ng=="}, "originalCommit": {"oid": "d4c6fff20bf30073a52ee2f3a564ac162a8cc0bb"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk5OTk4MA==", "bodyText": "Firebase client libraries return you DocumentSnapshots; we'd still need to ask the API to convert them to objects for us someplace.", "url": "https://github.com/google/ground-android/pull/371#discussion_r380999980", "createdAt": "2020-02-18T23:39:31Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/ProjectConverter.java", "diffHunk": "@@ -14,36 +14,28 @@\n  * limitations under the License.\n  */\n \n-package com.google.android.gnd.persistence.remote.firestore;\n+package com.google.android.gnd.persistence.remote.firestore.schema;\n \n import static com.google.android.gnd.util.Localization.getLocalizedMessage;\n \n-import androidx.annotation.Nullable;\n import com.google.android.gnd.model.Project;\n+import com.google.android.gnd.persistence.remote.DataStoreException;\n import com.google.firebase.firestore.DocumentSnapshot;\n-import com.google.firebase.firestore.IgnoreExtraProperties;\n-import java.util.Map;\n import java8.util.Maps;\n \n-@IgnoreExtraProperties\n-public class ProjectDoc {\n-  @Nullable public Map<String, String> title;\n+/** Converts between Firestore documents and {@link Project} instances. */\n+class ProjectConverter {\n \n-  @Nullable public Map<String, String> description;\n-\n-  // TODO: Add AuditInfoDoc for created and lastModified.\n-\n-  @Nullable public Map<String, LayerDoc> featureTypes;\n-\n-  public static Project toObject(DocumentSnapshot doc) {\n-    ProjectDoc pd = doc.toObject(ProjectDoc.class);\n+  static Project toProject(DocumentSnapshot doc) throws DataStoreException {\n+    ProjectDocument pd = doc.toObject(ProjectDocument.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk4MDY2Ng=="}, "originalCommit": {"oid": "d4c6fff20bf30073a52ee2f3a564ac162a8cc0bb"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAwMDcyMg==", "bodyText": "If we wanted to abstract this I suppose we could define the classes to convert to declaratively in some sort of a registry, then define a standard interface for converters, but that would lead to a of boilerplate, and not allow us to provide custom args to converter methods as we do now, forcing us to propose the args to member variables of hypothetical converter instances. Oy. \ud83d\ude44 Open to other ideas if you had something else in mind though!", "url": "https://github.com/google/ground-android/pull/371#discussion_r381000722", "createdAt": "2020-02-18T23:41:39Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/ProjectConverter.java", "diffHunk": "@@ -14,36 +14,28 @@\n  * limitations under the License.\n  */\n \n-package com.google.android.gnd.persistence.remote.firestore;\n+package com.google.android.gnd.persistence.remote.firestore.schema;\n \n import static com.google.android.gnd.util.Localization.getLocalizedMessage;\n \n-import androidx.annotation.Nullable;\n import com.google.android.gnd.model.Project;\n+import com.google.android.gnd.persistence.remote.DataStoreException;\n import com.google.firebase.firestore.DocumentSnapshot;\n-import com.google.firebase.firestore.IgnoreExtraProperties;\n-import java.util.Map;\n import java8.util.Maps;\n \n-@IgnoreExtraProperties\n-public class ProjectDoc {\n-  @Nullable public Map<String, String> title;\n+/** Converts between Firestore documents and {@link Project} instances. */\n+class ProjectConverter {\n \n-  @Nullable public Map<String, String> description;\n-\n-  // TODO: Add AuditInfoDoc for created and lastModified.\n-\n-  @Nullable public Map<String, LayerDoc> featureTypes;\n-\n-  public static Project toObject(DocumentSnapshot doc) {\n-    ProjectDoc pd = doc.toObject(ProjectDoc.class);\n+  static Project toProject(DocumentSnapshot doc) throws DataStoreException {\n+    ProjectDocument pd = doc.toObject(ProjectDocument.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk4MDY2Ng=="}, "originalCommit": {"oid": "d4c6fff20bf30073a52ee2f3a564ac162a8cc0bb"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2615, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}