{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0NTU5MTk0", "number": 328, "reviewThreads": {"totalCount": 40, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNToyMzowMlrODZ3uiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMDowMjo0M1rODcY16A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDU0MDI0OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/res/layout/bottom_sheet.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNToyMzowMlrOFggGgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNToyMzowMlrOFggGgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYyNDcwNg==", "bodyText": "Add newline.", "url": "https://github.com/google/ground-android/pull/328#discussion_r369624706", "createdAt": "2020-01-22T15:23:02Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/res/layout/bottom_sheet.xml", "diffHunk": "@@ -0,0 +1,46 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<!--\n+  ~ Copyright 2020 Google LLC\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     https://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<layout xmlns:android=\"http://schemas.android.com/apk/res/android\">\n+\n+  <data>\n+    <variable\n+      name=\"fragment\"\n+      type=\"com.google.android.gnd.ui.editobservation.ActionBottomDialogFragment\" />\n+  </data>\n+\n+  <LinearLayout\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"wrap_content\"\n+    android:orientation=\"vertical\"\n+    android:paddingTop=\"8dp\"\n+    android:paddingBottom=\"8dp\">\n+    <TextView\n+      style=\"@style/AddPhotoActionItem\"\n+      android:drawableStart=\"@drawable/ic_photo_camera\"\n+      android:drawableLeft=\"@drawable/ic_photo_camera\"\n+      android:onClick=\"@{(view) -> fragment.onCapturePhoto()}\"\n+      android:text=\"@string/action_camera\" />\n+    <TextView\n+      style=\"@style/AddPhotoActionItem\"\n+      android:drawableStart=\"@drawable/ic_sd_storage\"\n+      android:drawableLeft=\"@drawable/ic_sd_storage\"\n+      android:onClick=\"@{(view) -> fragment.onSelectPhoto()}\"\n+      android:text=\"@string/action_storage\" />\n+  </LinearLayout>\n+\n+</layout>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b049cadb44c3dacfec8c26e600638b8bc4af900"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDU0MTExOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/res/layout/bottom_sheet.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNToyMzoxNVrOFggHFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNToyMzoxNVrOFggHFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYyNDg1Mw==", "bodyText": "Add newline.", "url": "https://github.com/google/ground-android/pull/328#discussion_r369624853", "createdAt": "2020-01-22T15:23:15Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/res/layout/bottom_sheet.xml", "diffHunk": "@@ -0,0 +1,46 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<!--\n+  ~ Copyright 2020 Google LLC\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     https://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<layout xmlns:android=\"http://schemas.android.com/apk/res/android\">\n+\n+  <data>\n+    <variable\n+      name=\"fragment\"\n+      type=\"com.google.android.gnd.ui.editobservation.ActionBottomDialogFragment\" />\n+  </data>\n+\n+  <LinearLayout\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"wrap_content\"\n+    android:orientation=\"vertical\"\n+    android:paddingTop=\"8dp\"\n+    android:paddingBottom=\"8dp\">\n+    <TextView\n+      style=\"@style/AddPhotoActionItem\"\n+      android:drawableStart=\"@drawable/ic_photo_camera\"\n+      android:drawableLeft=\"@drawable/ic_photo_camera\"\n+      android:onClick=\"@{(view) -> fragment.onCapturePhoto()}\"\n+      android:text=\"@string/action_camera\" />\n+    <TextView\n+      style=\"@style/AddPhotoActionItem\"\n+      android:drawableStart=\"@drawable/ic_sd_storage\"\n+      android:drawableLeft=\"@drawable/ic_sd_storage\"\n+      android:onClick=\"@{(view) -> fragment.onSelectPhoto()}\"\n+      android:text=\"@string/action_storage\" />\n+  </LinearLayout>\n+\n+</layout>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b049cadb44c3dacfec8c26e600638b8bc4af900"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDU0NzQ0OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/res/layout/bottom_sheet.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNToyNDo0NlrOFggK-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODo1OTozMlrOFgnYLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYyNTg1MA==", "bodyText": "Should we use a more specific name for this file? Instead of bottom_sheet, edit_observation_bottom_sheet?\nThis would make the name more consistent with the other files.", "url": "https://github.com/google/ground-android/pull/328#discussion_r369625850", "createdAt": "2020-01-22T15:24:46Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/res/layout/bottom_sheet.xml", "diffHunk": "@@ -0,0 +1,46 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b049cadb44c3dacfec8c26e600638b8bc4af900"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0MzkxOQ==", "bodyText": "Thanks", "url": "https://github.com/google/ground-android/pull/328#discussion_r369743919", "createdAt": "2020-01-22T18:59:32Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/res/layout/bottom_sheet.xml", "diffHunk": "@@ -0,0 +1,46 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYyNTg1MA=="}, "originalCommit": {"oid": "8b049cadb44c3dacfec8c26e600638b8bc4af900"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDcwMzI5OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/system/StorageManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjowMzo0OFrOFghrhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjowMzo0OFrOFghrhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY1MDU2Ng==", "bodyText": "Instead of using completeIf, why not have sendIntent return a completable?", "url": "https://github.com/google/ground-android/pull/328#discussion_r369650566", "createdAt": "2020-01-22T16:03:48Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/system/StorageManager.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.system;\n+\n+import android.Manifest.permission;\n+import android.content.Intent;\n+import android.util.Log;\n+import com.google.android.gnd.rx.RxCompletable;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+@Singleton\n+public class StorageManager {\n+\n+  public static final String TAG = StorageManager.class.getName();\n+\n+  private static final int PICKFILE_REQUEST_CODE = StorageManager.class.hashCode() & 0xffff;\n+  private final PermissionsManager permissionsManager;\n+  private final ActivityStreams activityStreams;\n+\n+  @Inject\n+  public StorageManager(PermissionsManager permissionsManager, ActivityStreams activityStreams) {\n+    this.permissionsManager = permissionsManager;\n+    this.activityStreams = activityStreams;\n+  }\n+\n+  public void imagePicker() {\n+    permissionsManager\n+        .obtainPermission(permission.READ_EXTERNAL_STORAGE)\n+        .andThen(RxCompletable.completeIf(this::sendIntent))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b049cadb44c3dacfec8c26e600638b8bc4af900"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDc0MDE1OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/system/StorageManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjoxNDowMFrOFgiDIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOToxNzo1NlrOFgn7sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY1NjYxMQ==", "bodyText": "Wrap in a call to Completable.fromObservable and return the completable? (This way we'll catch any (highly unlikely) errors emitted by the publish subject)\nsee: http://reactivex.io/RxJava/javadoc/io/reactivex/Completable.html#fromObservable-io.reactivex.ObservableSource-", "url": "https://github.com/google/ground-android/pull/328#discussion_r369656611", "createdAt": "2020-01-22T16:14:00Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/system/StorageManager.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.system;\n+\n+import android.Manifest.permission;\n+import android.content.Intent;\n+import android.util.Log;\n+import com.google.android.gnd.rx.RxCompletable;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+@Singleton\n+public class StorageManager {\n+\n+  public static final String TAG = StorageManager.class.getName();\n+\n+  private static final int PICKFILE_REQUEST_CODE = StorageManager.class.hashCode() & 0xffff;\n+  private final PermissionsManager permissionsManager;\n+  private final ActivityStreams activityStreams;\n+\n+  @Inject\n+  public StorageManager(PermissionsManager permissionsManager, ActivityStreams activityStreams) {\n+    this.permissionsManager = permissionsManager;\n+    this.activityStreams = activityStreams;\n+  }\n+\n+  public void imagePicker() {\n+    permissionsManager\n+        .obtainPermission(permission.READ_EXTERNAL_STORAGE)\n+        .andThen(RxCompletable.completeIf(this::sendIntent))\n+        .andThen(\n+            activityStreams\n+                .getNextActivityResult(PICKFILE_REQUEST_CODE)\n+                .doOnNext(\n+                    activityResult -> {\n+                      if (activityResult.isOk()) {\n+                        Intent intent = activityResult.getData();\n+                        if (intent != null) {\n+                          Log.d(TAG, activityResult.getData().getData() + \" = uri\");\n+                        }\n+                      } else if (activityResult.isCanceled()) {\n+                        Log.d(TAG, \"file picker canceled\");\n+                      }\n+                    }))\n+        .subscribe();\n+  }\n+\n+  private boolean sendIntent() {\n+    Log.d(TAG, \"Sending file picker intent\");\n+    activityStreams.withActivity(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b049cadb44c3dacfec8c26e600638b8bc4af900"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc1MzAxMA==", "bodyText": "I had to use Completable.fromAction as activityStreams.withActivity doesn't return anything", "url": "https://github.com/google/ground-android/pull/328#discussion_r369753010", "createdAt": "2020-01-22T19:17:56Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/system/StorageManager.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.system;\n+\n+import android.Manifest.permission;\n+import android.content.Intent;\n+import android.util.Log;\n+import com.google.android.gnd.rx.RxCompletable;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+@Singleton\n+public class StorageManager {\n+\n+  public static final String TAG = StorageManager.class.getName();\n+\n+  private static final int PICKFILE_REQUEST_CODE = StorageManager.class.hashCode() & 0xffff;\n+  private final PermissionsManager permissionsManager;\n+  private final ActivityStreams activityStreams;\n+\n+  @Inject\n+  public StorageManager(PermissionsManager permissionsManager, ActivityStreams activityStreams) {\n+    this.permissionsManager = permissionsManager;\n+    this.activityStreams = activityStreams;\n+  }\n+\n+  public void imagePicker() {\n+    permissionsManager\n+        .obtainPermission(permission.READ_EXTERNAL_STORAGE)\n+        .andThen(RxCompletable.completeIf(this::sendIntent))\n+        .andThen(\n+            activityStreams\n+                .getNextActivityResult(PICKFILE_REQUEST_CODE)\n+                .doOnNext(\n+                    activityResult -> {\n+                      if (activityResult.isOk()) {\n+                        Intent intent = activityResult.getData();\n+                        if (intent != null) {\n+                          Log.d(TAG, activityResult.getData().getData() + \" = uri\");\n+                        }\n+                      } else if (activityResult.isCanceled()) {\n+                        Log.d(TAG, \"file picker canceled\");\n+                      }\n+                    }))\n+        .subscribe();\n+  }\n+\n+  private boolean sendIntent() {\n+    Log.d(TAG, \"Sending file picker intent\");\n+    activityStreams.withActivity(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY1NjYxMQ=="}, "originalCommit": {"oid": "8b049cadb44c3dacfec8c26e600638b8bc4af900"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDc3Mjc4OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/system/CameraManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjoyMjo1NFrOFgiYOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjoyMjo1NFrOFgiYOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY2MjAxMQ==", "bodyText": "Wrap in a call to Completable.fromObservable and return the completable? (This way we'll catch any (highly unlikely) errors emitted by the publish subject)\nsee: http://reactivex.io/RxJava/javadoc/io/reactivex/Completable.html#fromObservable-io.reactivex.ObservableSource-", "url": "https://github.com/google/ground-android/pull/328#discussion_r369662011", "createdAt": "2020-01-22T16:22:54Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/system/CameraManager.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.system;\n+\n+import android.Manifest.permission;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.util.Log;\n+import com.google.android.gnd.rx.RxCompletable;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+@Singleton\n+public class CameraManager {\n+\n+  public static final String TAG = CameraManager.class.getName();\n+\n+  private static final int CAPTURE_PHOTO_REQUEST_CODE = CameraManager.class.hashCode() & 0xffff;\n+  private final PermissionsManager permissionsManager;\n+  private final ActivityStreams activityStreams;\n+\n+  @Inject\n+  public CameraManager(PermissionsManager permissionsManager, ActivityStreams activityStreams) {\n+    this.permissionsManager = permissionsManager;\n+    this.activityStreams = activityStreams;\n+  }\n+\n+  public void clickPhoto() {\n+    permissionsManager\n+        .obtainPermission(permission.WRITE_EXTERNAL_STORAGE)\n+        .andThen(permissionsManager.obtainPermission(permission.CAMERA))\n+        .andThen(RxCompletable.completeIf(this::sendIntent))\n+        .andThen(\n+            activityStreams\n+                .getNextActivityResult(CAPTURE_PHOTO_REQUEST_CODE)\n+                .doOnNext(\n+                    activityResult -> {\n+                      if (activityResult.isOk()) {\n+                        Intent intent = activityResult.getData();\n+                        if (intent != null) {\n+                          Bitmap photo = (Bitmap) intent.getExtras().get(\"data\");\n+                          Log.d(TAG, photo.toString());\n+                        }\n+                      } else if (activityResult.isCanceled()) {\n+                        Log.d(TAG, \"capture photo canceled\");\n+                      }\n+                    }))\n+        .subscribe();\n+  }\n+\n+  private boolean sendIntent() {\n+    Log.d(TAG, \"Sending capture photo intent\");\n+    activityStreams.withActivity(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b049cadb44c3dacfec8c26e600638b8bc4af900"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDc3NjI1OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/system/CameraManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjoyMzo1MFrOFgiaew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNzoxODoyNVrOFhVevA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY2MjU4Nw==", "bodyText": "Eventually, we probably don't want to subscribe in these classes themselves, but to expose their streams to callers and subscribe there.", "url": "https://github.com/google/ground-android/pull/328#discussion_r369662587", "createdAt": "2020-01-22T16:23:50Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/system/CameraManager.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.system;\n+\n+import android.Manifest.permission;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.util.Log;\n+import com.google.android.gnd.rx.RxCompletable;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+@Singleton\n+public class CameraManager {\n+\n+  public static final String TAG = CameraManager.class.getName();\n+\n+  private static final int CAPTURE_PHOTO_REQUEST_CODE = CameraManager.class.hashCode() & 0xffff;\n+  private final PermissionsManager permissionsManager;\n+  private final ActivityStreams activityStreams;\n+\n+  @Inject\n+  public CameraManager(PermissionsManager permissionsManager, ActivityStreams activityStreams) {\n+    this.permissionsManager = permissionsManager;\n+    this.activityStreams = activityStreams;\n+  }\n+\n+  public void clickPhoto() {\n+    permissionsManager\n+        .obtainPermission(permission.WRITE_EXTERNAL_STORAGE)\n+        .andThen(permissionsManager.obtainPermission(permission.CAMERA))\n+        .andThen(RxCompletable.completeIf(this::sendIntent))\n+        .andThen(\n+            activityStreams\n+                .getNextActivityResult(CAPTURE_PHOTO_REQUEST_CODE)\n+                .doOnNext(\n+                    activityResult -> {\n+                      if (activityResult.isOk()) {\n+                        Intent intent = activityResult.getData();\n+                        if (intent != null) {\n+                          Bitmap photo = (Bitmap) intent.getExtras().get(\"data\");\n+                          Log.d(TAG, photo.toString());\n+                        }\n+                      } else if (activityResult.isCanceled()) {\n+                        Log.d(TAG, \"capture photo canceled\");\n+                      }\n+                    }))\n+        .subscribe();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b049cadb44c3dacfec8c26e600638b8bc4af900"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ5OTI2MA==", "bodyText": "Fixed", "url": "https://github.com/google/ground-android/pull/328#discussion_r370499260", "createdAt": "2020-01-24T07:18:25Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/system/CameraManager.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.system;\n+\n+import android.Manifest.permission;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.util.Log;\n+import com.google.android.gnd.rx.RxCompletable;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+@Singleton\n+public class CameraManager {\n+\n+  public static final String TAG = CameraManager.class.getName();\n+\n+  private static final int CAPTURE_PHOTO_REQUEST_CODE = CameraManager.class.hashCode() & 0xffff;\n+  private final PermissionsManager permissionsManager;\n+  private final ActivityStreams activityStreams;\n+\n+  @Inject\n+  public CameraManager(PermissionsManager permissionsManager, ActivityStreams activityStreams) {\n+    this.permissionsManager = permissionsManager;\n+    this.activityStreams = activityStreams;\n+  }\n+\n+  public void clickPhoto() {\n+    permissionsManager\n+        .obtainPermission(permission.WRITE_EXTERNAL_STORAGE)\n+        .andThen(permissionsManager.obtainPermission(permission.CAMERA))\n+        .andThen(RxCompletable.completeIf(this::sendIntent))\n+        .andThen(\n+            activityStreams\n+                .getNextActivityResult(CAPTURE_PHOTO_REQUEST_CODE)\n+                .doOnNext(\n+                    activityResult -> {\n+                      if (activityResult.isOk()) {\n+                        Intent intent = activityResult.getData();\n+                        if (intent != null) {\n+                          Bitmap photo = (Bitmap) intent.getExtras().get(\"data\");\n+                          Log.d(TAG, photo.toString());\n+                        }\n+                      } else if (activityResult.isCanceled()) {\n+                        Log.d(TAG, \"capture photo canceled\");\n+                      }\n+                    }))\n+        .subscribe();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY2MjU4Nw=="}, "originalCommit": {"oid": "8b049cadb44c3dacfec8c26e600638b8bc4af900"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDc5MDU4OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationFragment.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjoyNzozOFrOFgijew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMToyNTozNVrOFhNIog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY2NDg5MQ==", "bodyText": "Can we somehow use butterknife binding  butterknife.BindView here instead instead of calls to show, etc.?", "url": "https://github.com/google/ground-android/pull/328#discussion_r369664891", "createdAt": "2020-01-22T16:27:38Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationFragment.java", "diffHunk": "@@ -197,6 +203,12 @@ public void onShowDialog(Field field) {\n     }\n   }\n \n+  public void onShowPhotoSelectorDialog(Field field) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b049cadb44c3dacfec8c26e600638b8bc4af900"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIyNDYzNQ==", "bodyText": "I'm okay with either of the two options. Just wanted to be consistent with other places. Should I replace this with Butterknife and remove DataBinding?\n@scolsen", "url": "https://github.com/google/ground-android/pull/328#discussion_r370224635", "createdAt": "2020-01-23T16:31:39Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationFragment.java", "diffHunk": "@@ -197,6 +203,12 @@ public void onShowDialog(Field field) {\n     }\n   }\n \n+  public void onShowPhotoSelectorDialog(Field field) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY2NDg5MQ=="}, "originalCommit": {"oid": "8b049cadb44c3dacfec8c26e600638b8bc4af900"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM2MjUzMA==", "bodyText": "Ah, all good--I think my initial comment is irrelevant here since this is dialog frag.\nThis should be fine.", "url": "https://github.com/google/ground-android/pull/328#discussion_r370362530", "createdAt": "2020-01-23T21:25:35Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationFragment.java", "diffHunk": "@@ -197,6 +203,12 @@ public void onShowDialog(Field field) {\n     }\n   }\n \n+  public void onShowPhotoSelectorDialog(Field field) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY2NDg5MQ=="}, "originalCommit": {"oid": "8b049cadb44c3dacfec8c26e600638b8bc4af900"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDc5NTc2OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/ActionBottomDialogFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjoyODo1OVrOFgimqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjoyODo1OVrOFgimqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY2NTcwNQ==", "bodyText": "Instead of making this generic, why not just call it PhotoDialogFragment for now and abstract later once and if we need to?", "url": "https://github.com/google/ground-android/pull/328#discussion_r369665705", "createdAt": "2020-01-22T16:28:59Z", "author": {"login": "scolsen"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/ActionBottomDialogFragment.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.ui.editobservation;\n+\n+import android.content.Context;\n+import android.os.Bundle;\n+import android.util.Log;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.fragment.app.Fragment;\n+import com.google.android.gnd.databinding.BottomSheetBinding;\n+import com.google.android.material.bottomsheet.BottomSheetDialogFragment;\n+\n+public class ActionBottomDialogFragment extends BottomSheetDialogFragment {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b049cadb44c3dacfec8c26e600638b8bc4af900"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NjcxMjE1OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/system/CameraManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMTozNzowMlrOFiSUHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMTozNzowMlrOFiSUHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ5NTk2NA==", "bodyText": "Please add Javadoc explaining [non-obvious details] of what this class is used for.", "url": "https://github.com/google/ground-android/pull/328#discussion_r371495964", "createdAt": "2020-01-27T21:37:02Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/system/CameraManager.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.system;\n+\n+import android.Manifest.permission;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.provider.MediaStore;\n+import android.util.Log;\n+import com.google.android.gnd.system.ActivityStreams.ActivityResult;\n+import io.reactivex.Completable;\n+import io.reactivex.Observable;\n+import java8.util.Optional;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+@Singleton\n+public class CameraManager {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c2f830f04b0025ddaf79e151fab858fcd4ada4b"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NjcxNzA0OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/system/StorageManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMTozODo0NVrOFiSXEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMTozODo0NVrOFiSXEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ5NjcyMw==", "bodyText": "Also here.", "url": "https://github.com/google/ground-android/pull/328#discussion_r371496723", "createdAt": "2020-01-27T21:38:45Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/system/StorageManager.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.system;\n+\n+import android.Manifest.permission;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.provider.MediaStore.Images.Media;\n+import android.util.Log;\n+import com.google.android.gnd.system.ActivityStreams.ActivityResult;\n+import io.reactivex.Completable;\n+import io.reactivex.Observable;\n+import java8.util.Optional;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+@Singleton\n+public class StorageManager {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c2f830f04b0025ddaf79e151fab858fcd4ada4b"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NjcxOTg4OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/system/StorageManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMTozOTo1M1rOFiSY8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMTozOTo1M1rOFiSY8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ5NzIwMg==", "bodyText": "Nit: Use PICK_IMAGE_REQUEST_CODE for consistency.", "url": "https://github.com/google/ground-android/pull/328#discussion_r371497202", "createdAt": "2020-01-27T21:39:53Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/system/StorageManager.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.system;\n+\n+import android.Manifest.permission;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.provider.MediaStore.Images.Media;\n+import android.util.Log;\n+import com.google.android.gnd.system.ActivityStreams.ActivityResult;\n+import io.reactivex.Completable;\n+import io.reactivex.Observable;\n+import java8.util.Optional;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+@Singleton\n+public class StorageManager {\n+\n+  public static final String TAG = StorageManager.class.getName();\n+\n+  private static final int PICKFILE_REQUEST_CODE = StorageManager.class.hashCode() & 0xffff;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c2f830f04b0025ddaf79e151fab858fcd4ada4b"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NjczMDM2OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/system/CameraManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMTo0MzoxNVrOFiSfNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMTo0MzoxNVrOFiSfNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ5ODgwNQ==", "bodyText": "I generally prefer to bail out on edge cases (==null) and fall through to the expected default base case (!=null). That said, this could optionally also be written functionally as:\nactivityResult -> Optional.ofNullable(activityResult.getData())\n   .map(Intent::getExtras)\n   .map(extras -> (Bitmap) extras.get(\"data\"));", "url": "https://github.com/google/ground-android/pull/328#discussion_r371498805", "createdAt": "2020-01-27T21:43:15Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/system/CameraManager.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.system;\n+\n+import android.Manifest.permission;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.provider.MediaStore;\n+import android.util.Log;\n+import com.google.android.gnd.system.ActivityStreams.ActivityResult;\n+import io.reactivex.Completable;\n+import io.reactivex.Observable;\n+import java8.util.Optional;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+@Singleton\n+public class CameraManager {\n+\n+  public static final String TAG = CameraManager.class.getName();\n+\n+  private static final int CAPTURE_PHOTO_REQUEST_CODE = CameraManager.class.hashCode() & 0xffff;\n+  private final PermissionsManager permissionsManager;\n+  private final ActivityStreams activityStreams;\n+\n+  @Inject\n+  public CameraManager(PermissionsManager permissionsManager, ActivityStreams activityStreams) {\n+    this.permissionsManager = permissionsManager;\n+    this.activityStreams = activityStreams;\n+  }\n+\n+  public Completable launchImageCapture() {\n+    return permissionsManager\n+        .obtainPermission(permission.WRITE_EXTERNAL_STORAGE)\n+        .andThen(permissionsManager.obtainPermission(permission.CAMERA))\n+        .andThen(sendCaptureImageIntent());\n+  }\n+\n+  public Observable<Optional<Bitmap>> captureImageResult() {\n+    return activityStreams\n+        .getNextActivityResult(CAPTURE_PHOTO_REQUEST_CODE)\n+        .filter(ActivityResult::isOk)\n+        .map(\n+            activityResult -> {\n+              Intent intent = activityResult.getData();\n+              if (intent != null && intent.getExtras() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c2f830f04b0025ddaf79e151fab858fcd4ada4b"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NjczNjM2OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/system/StorageManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMTo0NToxNVrOFiSi0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMTo0NToxNVrOFiSi0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ5OTcyOA==", "bodyText": "Same here:\nactivityResult ->\n  Optional.ofNullable(activityResult.getData())\n    .map(Intent::getData)\n    .map(data -> Media.getBitmap(context.getContentResolver(), data)", "url": "https://github.com/google/ground-android/pull/328#discussion_r371499728", "createdAt": "2020-01-27T21:45:15Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/system/StorageManager.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.system;\n+\n+import android.Manifest.permission;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.provider.MediaStore.Images.Media;\n+import android.util.Log;\n+import com.google.android.gnd.system.ActivityStreams.ActivityResult;\n+import io.reactivex.Completable;\n+import io.reactivex.Observable;\n+import java8.util.Optional;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+@Singleton\n+public class StorageManager {\n+\n+  public static final String TAG = StorageManager.class.getName();\n+\n+  private static final int PICKFILE_REQUEST_CODE = StorageManager.class.hashCode() & 0xffff;\n+  private final Context context;\n+  private final PermissionsManager permissionsManager;\n+  private final ActivityStreams activityStreams;\n+\n+  @Inject\n+  public StorageManager(\n+      Context context, PermissionsManager permissionsManager, ActivityStreams activityStreams) {\n+    this.context = context;\n+    this.permissionsManager = permissionsManager;\n+    this.activityStreams = activityStreams;\n+  }\n+\n+  public Completable launchImagePicker() {\n+    return permissionsManager\n+        .obtainPermission(permission.READ_EXTERNAL_STORAGE)\n+        .andThen(sendImagePickerIntent());\n+  }\n+\n+  public Observable<Optional<Bitmap>> imagePickerResult() {\n+    return activityStreams\n+        .getNextActivityResult(PICKFILE_REQUEST_CODE)\n+        .filter(ActivityResult::isOk)\n+        .map(\n+            activityResult -> {\n+              Intent intent = activityResult.getData();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c2f830f04b0025ddaf79e151fab858fcd4ada4b"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Njc0Nzk0OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMTo0ODo1N1rOFiSpsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMTo0ODo1N1rOFiSpsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwMTQ5MQ==", "bodyText": "Same here.", "url": "https://github.com/google/ground-android/pull/328#discussion_r371501491", "createdAt": "2020-01-27T21:48:57Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationFragment.java", "diffHunk": "@@ -169,12 +191,31 @@ public void addMultipleChoiceField(Field field) {\n   public void addPhotoField(Field field) {\n     PhotoInputFieldBinding binding =\n         PhotoInputFieldBinding.inflate(getLayoutInflater(), formLayout, false);\n-    binding.setViewModel(viewModel);\n     binding.setLifecycleOwner(this);\n     binding.setField(field);\n+    binding.setFragment(this);\n     formLayout.addView(binding.getRoot());\n     assignGeneratedId(binding.getRoot().findViewById(R.id.image_thumbnail_preview));\n     assignGeneratedId(binding.getRoot().findViewById(R.id.btn_select_photo));\n+\n+    viewModel", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c2f830f04b0025ddaf79e151fab858fcd4ada4b"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Njc0OTUwOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationFragment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMTo0OToyN1rOFiSqoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNjowOTo0MVrOFiaGOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwMTcyOQ==", "bodyText": "Can some of this logic be moved into the ViewModel?", "url": "https://github.com/google/ground-android/pull/328#discussion_r371501729", "createdAt": "2020-01-27T21:49:27Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationFragment.java", "diffHunk": "@@ -91,10 +101,22 @@ public void onViewCreated(\n     viewModel.getForm().observe(this, this::rebuildForm);\n     viewModel.getToolbarTitle().observe(this, toolbar::setTitle);\n     viewModel.getSaveResults().observe(this, e -> e.ifUnhandled(this::handleSaveResult));\n+    viewModel.getAddedPhoto().observe(this, this::onPhotoAdded);\n     // Initialize view model.\n     viewModel.initialize(EditObservationFragmentArgs.fromBundle(getArguments()));\n   }\n \n+  private void onPhotoAdded(Map<Field, File> fieldFileMap) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c2f830f04b0025ddaf79e151fab858fcd4ada4b"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYyMzQ4Mw==", "bodyText": "Thanks for pointing this out! This makes the code much simpler", "url": "https://github.com/google/ground-android/pull/328#discussion_r371623483", "createdAt": "2020-01-28T06:09:41Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationFragment.java", "diffHunk": "@@ -91,10 +101,22 @@ public void onViewCreated(\n     viewModel.getForm().observe(this, this::rebuildForm);\n     viewModel.getToolbarTitle().observe(this, toolbar::setTitle);\n     viewModel.getSaveResults().observe(this, e -> e.ifUnhandled(this::handleSaveResult));\n+    viewModel.getAddedPhoto().observe(this, this::onPhotoAdded);\n     // Initialize view model.\n     viewModel.initialize(EditObservationFragmentArgs.fromBundle(getArguments()));\n   }\n \n+  private void onPhotoAdded(Map<Field, File> fieldFileMap) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwMTcyOQ=="}, "originalCommit": {"oid": "9c2f830f04b0025ddaf79e151fab858fcd4ada4b"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Njc1MTY5OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationViewModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMTo1MDoxM1rOFiSsAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNjoxMDowN1rOFiaGhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwMjA4MA==", "bodyText": "Please add Javadoc re how this is used. Also, name implies this is a single added photo - should it be something newPhotos?", "url": "https://github.com/google/ground-android/pull/328#discussion_r371502080", "createdAt": "2020-01-27T21:50:13Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationViewModel.java", "diffHunk": "@@ -63,13 +69,18 @@\n   private final ObservationRepository observationRepository;\n   private final AuthenticationManager authManager;\n   private final Resources resources;\n+  private final StorageManager storageManager;\n+  private final CameraManager cameraManager;\n+  private final FileUtil fileUtil;\n \n   // Input events.\n \n   /** Arguments passed in from view on initialize(). */\n   private final BehaviorProcessor<EditObservationFragmentArgs> viewArgs =\n       BehaviorProcessor.create();\n \n+  private final BehaviorProcessor<Map<Field, File>> addedPhoto = BehaviorProcessor.create();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c2f830f04b0025ddaf79e151fab858fcd4ada4b"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYyMzU1Ng==", "bodyText": "Removed. Entire logic for updating responses moved directly into ViewModel", "url": "https://github.com/google/ground-android/pull/328#discussion_r371623556", "createdAt": "2020-01-28T06:10:07Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationViewModel.java", "diffHunk": "@@ -63,13 +69,18 @@\n   private final ObservationRepository observationRepository;\n   private final AuthenticationManager authManager;\n   private final Resources resources;\n+  private final StorageManager storageManager;\n+  private final CameraManager cameraManager;\n+  private final FileUtil fileUtil;\n \n   // Input events.\n \n   /** Arguments passed in from view on initialize(). */\n   private final BehaviorProcessor<EditObservationFragmentArgs> viewArgs =\n       BehaviorProcessor.create();\n \n+  private final BehaviorProcessor<Map<Field, File>> addedPhoto = BehaviorProcessor.create();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwMjA4MA=="}, "originalCommit": {"oid": "9c2f830f04b0025ddaf79e151fab858fcd4ada4b"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Njc1NTI3OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationViewModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMTo1MToyN1rOFiSuOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNjoxMDoxOVrOFiaGog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwMjY1MA==", "bodyText": "What do you mean by \"Added\" here? Photos that were added during the lifecycle of this ViewModel?", "url": "https://github.com/google/ground-android/pull/328#discussion_r371502650", "createdAt": "2020-01-27T21:51:27Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationViewModel.java", "diffHunk": "@@ -78,6 +89,9 @@\n   /** Form definition, loaded when view is initialized. */\n   private final LiveData<Form> form;\n \n+  /** Added image field. */\n+  private final LiveData<Map<Field, File>> photo;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c2f830f04b0025ddaf79e151fab858fcd4ada4b"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYyMzU4Ng==", "bodyText": "Same as above.", "url": "https://github.com/google/ground-android/pull/328#discussion_r371623586", "createdAt": "2020-01-28T06:10:19Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationViewModel.java", "diffHunk": "@@ -78,6 +89,9 @@\n   /** Form definition, loaded when view is initialized. */\n   private final LiveData<Form> form;\n \n+  /** Added image field. */\n+  private final LiveData<Map<Field, File>> photo;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwMjY1MA=="}, "originalCommit": {"oid": "9c2f830f04b0025ddaf79e151fab858fcd4ada4b"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Njc1NjcyOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationViewModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMTo1MjowMFrOFiSvKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNjoxMDoyN1rOFiaGvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwMjg5MA==", "bodyText": "Do we need both addedPhoto and photo? What's the difference?", "url": "https://github.com/google/ground-android/pull/328#discussion_r371502890", "createdAt": "2020-01-27T21:52:00Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationViewModel.java", "diffHunk": "@@ -120,12 +134,18 @@\n   EditObservationViewModel(\n       GndApplication application,\n       ObservationRepository observationRepository,\n-      AuthenticationManager authenticationManager) {\n+      AuthenticationManager authenticationManager,\n+      StorageManager storageManager,\n+      CameraManager cameraManager) {\n     this.resources = application.getResources();\n     this.observationRepository = observationRepository;\n     this.authManager = authenticationManager;\n+    this.storageManager = storageManager;\n+    this.cameraManager = cameraManager;\n+    this.fileUtil = new FileUtil(application);\n     this.form = fromPublisher(viewArgs.switchMapSingle(this::onInitialize));\n     this.saveResults = fromPublisher(saveClicks.switchMapSingle(__ -> onSave()));\n+    this.photo = fromPublisher(addedPhoto);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c2f830f04b0025ddaf79e151fab858fcd4ada4b"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYyMzYxNA==", "bodyText": "Removed", "url": "https://github.com/google/ground-android/pull/328#discussion_r371623614", "createdAt": "2020-01-28T06:10:27Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationViewModel.java", "diffHunk": "@@ -120,12 +134,18 @@\n   EditObservationViewModel(\n       GndApplication application,\n       ObservationRepository observationRepository,\n-      AuthenticationManager authenticationManager) {\n+      AuthenticationManager authenticationManager,\n+      StorageManager storageManager,\n+      CameraManager cameraManager) {\n     this.resources = application.getResources();\n     this.observationRepository = observationRepository;\n     this.authManager = authenticationManager;\n+    this.storageManager = storageManager;\n+    this.cameraManager = cameraManager;\n+    this.fileUtil = new FileUtil(application);\n     this.form = fromPublisher(viewArgs.switchMapSingle(this::onInitialize));\n     this.saveResults = fromPublisher(saveClicks.switchMapSingle(__ -> onSave()));\n+    this.photo = fromPublisher(addedPhoto);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwMjg5MA=="}, "originalCommit": {"oid": "9c2f830f04b0025ddaf79e151fab858fcd4ada4b"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Njc2NjgxOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/PhotoDialogFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMTo1NToyNFrOFiS1XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMTo1NToyNFrOFiS1XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwNDQ3Ng==", "bodyText": "Please add essential Javadoc about why this is needed and what it's used for.", "url": "https://github.com/google/ground-android/pull/328#discussion_r371504476", "createdAt": "2020-01-27T21:55:24Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/PhotoDialogFragment.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.ui.editobservation;\n+\n+import android.content.Context;\n+import android.os.Bundle;\n+import android.util.Log;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.fragment.app.Fragment;\n+import com.google.android.gnd.databinding.EditObservationBottomSheetBinding;\n+import com.google.android.material.bottomsheet.BottomSheetDialogFragment;\n+\n+public class PhotoDialogFragment extends BottomSheetDialogFragment {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c2f830f04b0025ddaf79e151fab858fcd4ada4b"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Njc2ODA3OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/PhotoDialogFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMTo1NTo1MFrOFiS2JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMTo1NTo1MFrOFiS2JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwNDY3Nw==", "bodyText": "Nit: Use .class.getSimpleName() name to ensure refactors rename this properly.", "url": "https://github.com/google/ground-android/pull/328#discussion_r371504677", "createdAt": "2020-01-27T21:55:50Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/PhotoDialogFragment.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.ui.editobservation;\n+\n+import android.content.Context;\n+import android.os.Bundle;\n+import android.util.Log;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.fragment.app.Fragment;\n+import com.google.android.gnd.databinding.EditObservationBottomSheetBinding;\n+import com.google.android.material.bottomsheet.BottomSheetDialogFragment;\n+\n+public class PhotoDialogFragment extends BottomSheetDialogFragment {\n+\n+  public static final String TAG = \"ActionBottomDialog\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c2f830f04b0025ddaf79e151fab858fcd4ada4b"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Njc3MzYwOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/util/FileUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMTo1Nzo0MVrOFiS5Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMTo1Nzo0MVrOFiS5Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwNTQ4Mg==", "bodyText": "Nit: Final \".\" (can remove trailing slash)", "url": "https://github.com/google/ground-android/pull/328#discussion_r371505482", "createdAt": "2020-01-27T21:57:41Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/util/FileUtil.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.ui.util;\n+\n+import android.content.Context;\n+import android.graphics.Bitmap;\n+import android.util.Log;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+\n+public class FileUtil {\n+\n+  private static final String TAG = FileUtil.class.getName();\n+  private final Context context;\n+\n+  public FileUtil(Context context) {\n+    this.context = context;\n+  }\n+\n+  /**\n+   * Creates a new file from bitmap and saves under internal app directory\n+   * /data/data/com.google.android.gnd/files/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c2f830f04b0025ddaf79e151fab858fcd4ada4b"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Njc3NTQ4OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/util/FileUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMTo1ODoyMVrOFiS6cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNTo1MTo1MlrOFiZ4oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwNTc3Ng==", "bodyText": "Since this is a low-level util shall we throw the exception up to the caller here instead of logging? (i.e. declare throws IOException)?", "url": "https://github.com/google/ground-android/pull/328#discussion_r371505776", "createdAt": "2020-01-27T21:58:21Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/util/FileUtil.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.ui.util;\n+\n+import android.content.Context;\n+import android.graphics.Bitmap;\n+import android.util.Log;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+\n+public class FileUtil {\n+\n+  private static final String TAG = FileUtil.class.getName();\n+  private final Context context;\n+\n+  public FileUtil(Context context) {\n+    this.context = context;\n+  }\n+\n+  /**\n+   * Creates a new file from bitmap and saves under internal app directory\n+   * /data/data/com.google.android.gnd/files/\n+   */\n+  public File saveBitmap(Bitmap bitmap, String filename) {\n+    File file = new File(context.getFilesDir(), filename);\n+    try (FileOutputStream fos = context.openFileOutput(filename, Context.MODE_PRIVATE)) {\n+      bitmap.compress(Bitmap.CompressFormat.JPEG, 100, fos);\n+    } catch (IOException e) {\n+      Log.e(TAG, e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c2f830f04b0025ddaf79e151fab858fcd4ada4b"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYyMDAwMA==", "bodyText": "Agreed", "url": "https://github.com/google/ground-android/pull/328#discussion_r371620000", "createdAt": "2020-01-28T05:51:52Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/util/FileUtil.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.ui.util;\n+\n+import android.content.Context;\n+import android.graphics.Bitmap;\n+import android.util.Log;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+\n+public class FileUtil {\n+\n+  private static final String TAG = FileUtil.class.getName();\n+  private final Context context;\n+\n+  public FileUtil(Context context) {\n+    this.context = context;\n+  }\n+\n+  /**\n+   * Creates a new file from bitmap and saves under internal app directory\n+   * /data/data/com.google.android.gnd/files/\n+   */\n+  public File saveBitmap(Bitmap bitmap, String filename) {\n+    File file = new File(context.getFilesDir(), filename);\n+    try (FileOutputStream fos = context.openFileOutput(filename, Context.MODE_PRIVATE)) {\n+      bitmap.compress(Bitmap.CompressFormat.JPEG, 100, fos);\n+    } catch (IOException e) {\n+      Log.e(TAG, e.getMessage(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwNTc3Ng=="}, "originalCommit": {"oid": "9c2f830f04b0025ddaf79e151fab858fcd4ada4b"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Njc4MTAxOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/PhotoDialogFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMjowMDowOFrOFiS9yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMjowMDowOFrOFiS9yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwNjYzMw==", "bodyText": "Javadoc here as well, maybe rename \"FIELD_ID_BUNDLE_ARG\" for clarity.", "url": "https://github.com/google/ground-android/pull/328#discussion_r371506633", "createdAt": "2020-01-27T22:00:08Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/PhotoDialogFragment.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.ui.editobservation;\n+\n+import android.content.Context;\n+import android.os.Bundle;\n+import android.util.Log;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.fragment.app.Fragment;\n+import com.google.android.gnd.databinding.EditObservationBottomSheetBinding;\n+import com.google.android.material.bottomsheet.BottomSheetDialogFragment;\n+\n+public class PhotoDialogFragment extends BottomSheetDialogFragment {\n+\n+  public static final String TAG = \"ActionBottomDialog\";\n+  public static final String FIELD_ID = \"field_id\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c2f830f04b0025ddaf79e151fab858fcd4ada4b"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Njc4MzczOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationViewModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMjowMTowM1rOFiS_cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMjowMTowM1rOFiS_cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwNzA1OA==", "bodyText": "Can this and the other lambdas blocks below be refactored into methods with clear names to make it easier to follow?", "url": "https://github.com/google/ground-android/pull/328#discussion_r371507058", "createdAt": "2020-01-27T22:01:03Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationViewModel.java", "diffHunk": "@@ -193,6 +212,52 @@ public void onFocusChange(Field field, boolean hasFocus) {\n     }\n   }\n \n+  void initPhotoSelector(String fieldId) {\n+    /*\n+     * Didn't subscribe this with Fragment's lifecycle because we need to retain the disposable\n+     * after the fragment is destroyed (for activity result)\n+     */\n+    disposeOnClear(\n+        storageManager\n+            .launchImagePicker()\n+            .andThen(\n+                storageManager\n+                    .imagePickerResult()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c2f830f04b0025ddaf79e151fab858fcd4ada4b"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Njc4ODE5OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationViewModel.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMjowMjo0NlrOFiTCZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMDowMToxM1rOFka_mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwNzgxMw==", "bodyText": "disposeOnClear will remove the subscription as soon as the ViewModel is removed, and we can't assume the ViewModel will stick around after the Fragment is destroyed. Do we need this because the photo picker Intent causes the fragment to go away? If so, can we launch image picker synchronously, and only subscribe to image picker results?", "url": "https://github.com/google/ground-android/pull/328#discussion_r371507813", "createdAt": "2020-01-27T22:02:46Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationViewModel.java", "diffHunk": "@@ -193,6 +212,52 @@ public void onFocusChange(Field field, boolean hasFocus) {\n     }\n   }\n \n+  void initPhotoSelector(String fieldId) {\n+    /*\n+     * Didn't subscribe this with Fragment's lifecycle because we need to retain the disposable\n+     * after the fragment is destroyed (for activity result)\n+     */\n+    disposeOnClear(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c2f830f04b0025ddaf79e151fab858fcd4ada4b"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYyNTI4OA==", "bodyText": "Initially, I tried subscribing the RxChain in Fragment using it's lifecycle. But during launch of Intent, the fragment gets destroyed and so does the disposable.\n\ncan we launch image picker synchronously, and only subscribe to image picker results?\n\nIf we separate this logic, then how would we pass the requesting fieldId to update the response later?\nSince one observation can have multiple photo fields, we have to know the requesting fieldId in advance. Thoughts?", "url": "https://github.com/google/ground-android/pull/328#discussion_r371625288", "createdAt": "2020-01-28T06:18:32Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationViewModel.java", "diffHunk": "@@ -193,6 +212,52 @@ public void onFocusChange(Field field, boolean hasFocus) {\n     }\n   }\n \n+  void initPhotoSelector(String fieldId) {\n+    /*\n+     * Didn't subscribe this with Fragment's lifecycle because we need to retain the disposable\n+     * after the fragment is destroyed (for activity result)\n+     */\n+    disposeOnClear(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwNzgxMw=="}, "originalCommit": {"oid": "9c2f830f04b0025ddaf79e151fab858fcd4ada4b"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1MzkzOQ==", "bodyText": "Can you use the Bundle stored in the Intent's \"extras\" to pass the field id through to the photo picker and back again?", "url": "https://github.com/google/ground-android/pull/328#discussion_r371853939", "createdAt": "2020-01-28T14:58:59Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationViewModel.java", "diffHunk": "@@ -193,6 +212,52 @@ public void onFocusChange(Field field, boolean hasFocus) {\n     }\n   }\n \n+  void initPhotoSelector(String fieldId) {\n+    /*\n+     * Didn't subscribe this with Fragment's lifecycle because we need to retain the disposable\n+     * after the fragment is destroyed (for activity result)\n+     */\n+    disposeOnClear(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwNzgxMw=="}, "originalCommit": {"oid": "9c2f830f04b0025ddaf79e151fab858fcd4ada4b"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzczNTMyMg==", "bodyText": "This method can be called multiple times, accumulating subscriptions until the view model is destroyed. If we can't decouple request from the activity response, please add a TODO here to trigger this from a switchMap or to find another way to split the stream in two to avoid accumulating subscriptions.", "url": "https://github.com/google/ground-android/pull/328#discussion_r373735322", "createdAt": "2020-02-01T00:01:13Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationViewModel.java", "diffHunk": "@@ -193,6 +212,52 @@ public void onFocusChange(Field field, boolean hasFocus) {\n     }\n   }\n \n+  void initPhotoSelector(String fieldId) {\n+    /*\n+     * Didn't subscribe this with Fragment's lifecycle because we need to retain the disposable\n+     * after the fragment is destroyed (for activity result)\n+     */\n+    disposeOnClear(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwNzgxMw=="}, "originalCommit": {"oid": "9c2f830f04b0025ddaf79e151fab858fcd4ada4b"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Njc4OTExOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationViewModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMjowMzowMVrOFiTC4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMjowMzowMVrOFiTC4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwNzkzNg==", "bodyText": "Can we inject this?", "url": "https://github.com/google/ground-android/pull/328#discussion_r371507936", "createdAt": "2020-01-27T22:03:01Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationViewModel.java", "diffHunk": "@@ -120,12 +134,18 @@\n   EditObservationViewModel(\n       GndApplication application,\n       ObservationRepository observationRepository,\n-      AuthenticationManager authenticationManager) {\n+      AuthenticationManager authenticationManager,\n+      StorageManager storageManager,\n+      CameraManager cameraManager) {\n     this.resources = application.getResources();\n     this.observationRepository = observationRepository;\n     this.authManager = authenticationManager;\n+    this.storageManager = storageManager;\n+    this.cameraManager = cameraManager;\n+    this.fileUtil = new FileUtil(application);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c2f830f04b0025ddaf79e151fab858fcd4ada4b"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Njc5MjkzOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMjowNDoyNVrOFiTFOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMjowNDoyNVrOFiTFOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwODUzNg==", "bodyText": "Naming nit: fileFieldMap", "url": "https://github.com/google/ground-android/pull/328#discussion_r371508536", "createdAt": "2020-01-27T22:04:25Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationFragment.java", "diffHunk": "@@ -91,10 +101,22 @@ public void onViewCreated(\n     viewModel.getForm().observe(this, this::rebuildForm);\n     viewModel.getToolbarTitle().observe(this, toolbar::setTitle);\n     viewModel.getSaveResults().observe(this, e -> e.ifUnhandled(this::handleSaveResult));\n+    viewModel.getAddedPhoto().observe(this, this::onPhotoAdded);\n     // Initialize view model.\n     viewModel.initialize(EditObservationFragmentArgs.fromBundle(getArguments()));\n   }\n \n+  private void onPhotoAdded(Map<Field, File> fieldFileMap) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c2f830f04b0025ddaf79e151fab858fcd4ada4b"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Njc5NDk3OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationFragment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMjowNTowNlrOFiTGcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNjoxMTowOVrOFiaHWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwODg1MQ==", "bodyText": "What does this do, and why does it do it for all image fields, not just the changed one?", "url": "https://github.com/google/ground-android/pull/328#discussion_r371508851", "createdAt": "2020-01-27T22:05:06Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationFragment.java", "diffHunk": "@@ -91,10 +101,22 @@ public void onViewCreated(\n     viewModel.getForm().observe(this, this::rebuildForm);\n     viewModel.getToolbarTitle().observe(this, toolbar::setTitle);\n     viewModel.getSaveResults().observe(this, e -> e.ifUnhandled(this::handleSaveResult));\n+    viewModel.getAddedPhoto().observe(this, this::onPhotoAdded);\n     // Initialize view model.\n     viewModel.initialize(EditObservationFragmentArgs.fromBundle(getArguments()));\n   }\n \n+  private void onPhotoAdded(Map<Field, File> fieldFileMap) {\n+    Log.d(TAG, fieldFileMap.toString());\n+\n+    // TODO: Upload photo to Firestore Storage\n+    // TODO: Fetch download url and update response in viewModel\n+    for (Field field : fieldFileMap.keySet()) {\n+      File file = fieldFileMap.get(field);\n+      viewModel.onResponseChanged(field, TextResponse.fromString(file.getPath()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c2f830f04b0025ddaf79e151fab858fcd4ada4b"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYyMzc3MA==", "bodyText": "Cleaned up", "url": "https://github.com/google/ground-android/pull/328#discussion_r371623770", "createdAt": "2020-01-28T06:11:09Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationFragment.java", "diffHunk": "@@ -91,10 +101,22 @@ public void onViewCreated(\n     viewModel.getForm().observe(this, this::rebuildForm);\n     viewModel.getToolbarTitle().observe(this, toolbar::setTitle);\n     viewModel.getSaveResults().observe(this, e -> e.ifUnhandled(this::handleSaveResult));\n+    viewModel.getAddedPhoto().observe(this, this::onPhotoAdded);\n     // Initialize view model.\n     viewModel.initialize(EditObservationFragmentArgs.fromBundle(getArguments()));\n   }\n \n+  private void onPhotoAdded(Map<Field, File> fieldFileMap) {\n+    Log.d(TAG, fieldFileMap.toString());\n+\n+    // TODO: Upload photo to Firestore Storage\n+    // TODO: Fetch download url and update response in viewModel\n+    for (Field field : fieldFileMap.keySet()) {\n+      File file = fieldFileMap.get(field);\n+      viewModel.onResponseChanged(field, TextResponse.fromString(file.getPath()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwODg1MQ=="}, "originalCommit": {"oid": "9c2f830f04b0025ddaf79e151fab858fcd4ada4b"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODkwMjg2OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/system/CameraManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDozMDoxNFrOFinCAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDozMDoxNFrOFinCAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgzNTM5Mg==", "bodyText": "If we don't need to return Optional, then this can be further simplified to remove the need to wrap and unwrap in Optional, e.g.:\nSorry!", "url": "https://github.com/google/ground-android/pull/328#discussion_r371835392", "createdAt": "2020-01-28T14:30:14Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/system/CameraManager.java", "diffHunk": "@@ -50,19 +51,17 @@ public Completable launchImageCapture() {\n         .andThen(sendCaptureImageIntent());\n   }\n \n-  public Observable<Optional<Bitmap>> captureImageResult() {\n+  public Observable<Bitmap> captureImageResult() {\n     return activityStreams\n         .getNextActivityResult(CAPTURE_PHOTO_REQUEST_CODE)\n         .filter(ActivityResult::isOk)\n         .map(\n-            activityResult -> {\n-              Intent intent = activityResult.getData();\n-              if (intent != null && intent.getExtras() != null) {\n-                Bitmap photo = (Bitmap) intent.getExtras().get(\"data\");\n-                return Optional.ofNullable(photo);\n-              }\n-              return Optional.empty();\n-            });\n+            activityResult ->\n+                Optional.ofNullable(activityResult.getData())\n+                    .map(Intent::getExtras)\n+                    .map(extras -> (Bitmap) extras.get(\"data\")))\n+        .filter(Optional::isPresent)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f25bbc8f6177d0f198952459c406941ffd892d45"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODkxMzI3OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/system/CameraManager.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDozMjo1NVrOFinIlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzozODozMlrOFkLjYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgzNzA3OA==", "bodyText": ".getNextActivityResult(CAPTURE_PHOTO_REQUEST_CODE)\n  .flatMap(this::onCaptureImageResult)\n\nThen:\nprivate static Observable<Bitmap> onCaptureImageResult(ActivityResult result) {\n  return Observable.create(em -> {\n    if (!result.isOk()) {\n      return;\n    }\n    Intent data = activityResult.getData();\n    if (data == null) {\n      return;\n    }\n    // and so on..\n    em.onNext((Bitmap) extras.get(\"data\"));\n  });\n}", "url": "https://github.com/google/ground-android/pull/328#discussion_r371837078", "createdAt": "2020-01-28T14:32:55Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/system/CameraManager.java", "diffHunk": "@@ -50,19 +51,17 @@ public Completable launchImageCapture() {\n         .andThen(sendCaptureImageIntent());\n   }\n \n-  public Observable<Optional<Bitmap>> captureImageResult() {\n+  public Observable<Bitmap> captureImageResult() {\n     return activityStreams\n         .getNextActivityResult(CAPTURE_PHOTO_REQUEST_CODE)\n         .filter(ActivityResult::isOk)\n         .map(\n-            activityResult -> {\n-              Intent intent = activityResult.getData();\n-              if (intent != null && intent.getExtras() != null) {\n-                Bitmap photo = (Bitmap) intent.getExtras().get(\"data\");\n-                return Optional.ofNullable(photo);\n-              }\n-              return Optional.empty();\n-            });\n+            activityResult ->\n+                Optional.ofNullable(activityResult.getData())\n+                    .map(Intent::getExtras)\n+                    .map(extras -> (Bitmap) extras.get(\"data\")))\n+        .filter(Optional::isPresent)\n+        .map(Optional::get);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f25bbc8f6177d0f198952459c406941ffd892d45"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM3MjY2Nw==", "bodyText": "This would convert our RxChains into flat code. What's the benefit of that?", "url": "https://github.com/google/ground-android/pull/328#discussion_r372372667", "createdAt": "2020-01-29T13:11:28Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/system/CameraManager.java", "diffHunk": "@@ -50,19 +51,17 @@ public Completable launchImageCapture() {\n         .andThen(sendCaptureImageIntent());\n   }\n \n-  public Observable<Optional<Bitmap>> captureImageResult() {\n+  public Observable<Bitmap> captureImageResult() {\n     return activityStreams\n         .getNextActivityResult(CAPTURE_PHOTO_REQUEST_CODE)\n         .filter(ActivityResult::isOk)\n         .map(\n-            activityResult -> {\n-              Intent intent = activityResult.getData();\n-              if (intent != null && intent.getExtras() != null) {\n-                Bitmap photo = (Bitmap) intent.getExtras().get(\"data\");\n-                return Optional.ofNullable(photo);\n-              }\n-              return Optional.empty();\n-            });\n+            activityResult ->\n+                Optional.ofNullable(activityResult.getData())\n+                    .map(Intent::getExtras)\n+                    .map(extras -> (Bitmap) extras.get(\"data\")))\n+        .filter(Optional::isPresent)\n+        .map(Optional::get);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgzNzA3OA=="}, "originalCommit": {"oid": "f25bbc8f6177d0f198952459c406941ffd892d45"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ3MDE1Mg==", "bodyText": "In this case, do you mean it would replace the functional reactive programming (FRP) paradigm with an imperative one?\nFunctional reactive constructs are very useful for representing flows of data while managing/limiting side effects in an expressive, consistent way. But since Java is primarily imperative, we'll always be jumping back and forth between functional and imperative paradigms anyway. Where we choose to do that is up to us, and imo, one clear place where it makes sense to switch to the imperative paradigm is synchronous code that would be much less readable if declared using the FRP model. At least this is what I've observed working with RxJava over the past two years or so.\n@scolsen, who has done more research on this than I have, what are your thoughts?", "url": "https://github.com/google/ground-android/pull/328#discussion_r372470152", "createdAt": "2020-01-29T15:56:40Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/system/CameraManager.java", "diffHunk": "@@ -50,19 +51,17 @@ public Completable launchImageCapture() {\n         .andThen(sendCaptureImageIntent());\n   }\n \n-  public Observable<Optional<Bitmap>> captureImageResult() {\n+  public Observable<Bitmap> captureImageResult() {\n     return activityStreams\n         .getNextActivityResult(CAPTURE_PHOTO_REQUEST_CODE)\n         .filter(ActivityResult::isOk)\n         .map(\n-            activityResult -> {\n-              Intent intent = activityResult.getData();\n-              if (intent != null && intent.getExtras() != null) {\n-                Bitmap photo = (Bitmap) intent.getExtras().get(\"data\");\n-                return Optional.ofNullable(photo);\n-              }\n-              return Optional.empty();\n-            });\n+            activityResult ->\n+                Optional.ofNullable(activityResult.getData())\n+                    .map(Intent::getExtras)\n+                    .map(extras -> (Bitmap) extras.get(\"data\")))\n+        .filter(Optional::isPresent)\n+        .map(Optional::get);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgzNzA3OA=="}, "originalCommit": {"oid": "f25bbc8f6177d0f198952459c406941ffd892d45"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ4MjMzNw==", "bodyText": "I agree with your points. Fixed", "url": "https://github.com/google/ground-android/pull/328#discussion_r373482337", "createdAt": "2020-01-31T13:38:32Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/system/CameraManager.java", "diffHunk": "@@ -50,19 +51,17 @@ public Completable launchImageCapture() {\n         .andThen(sendCaptureImageIntent());\n   }\n \n-  public Observable<Optional<Bitmap>> captureImageResult() {\n+  public Observable<Bitmap> captureImageResult() {\n     return activityStreams\n         .getNextActivityResult(CAPTURE_PHOTO_REQUEST_CODE)\n         .filter(ActivityResult::isOk)\n         .map(\n-            activityResult -> {\n-              Intent intent = activityResult.getData();\n-              if (intent != null && intent.getExtras() != null) {\n-                Bitmap photo = (Bitmap) intent.getExtras().get(\"data\");\n-                return Optional.ofNullable(photo);\n-              }\n-              return Optional.empty();\n-            });\n+            activityResult ->\n+                Optional.ofNullable(activityResult.getData())\n+                    .map(Intent::getExtras)\n+                    .map(extras -> (Bitmap) extras.get(\"data\")))\n+        .filter(Optional::isPresent)\n+        .map(Optional::get);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgzNzA3OA=="}, "originalCommit": {"oid": "f25bbc8f6177d0f198952459c406941ffd892d45"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODkxNjM0OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/system/CameraManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDozMzozM1rOFinKUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDozMzozM1rOFinKUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgzNzUyMw==", "bodyText": "Please use IMAGE (vs PHOTO) throughout for consistency.", "url": "https://github.com/google/ground-android/pull/328#discussion_r371837523", "createdAt": "2020-01-28T14:33:33Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/system/CameraManager.java", "diffHunk": "@@ -50,19 +51,17 @@ public Completable launchImageCapture() {\n         .andThen(sendCaptureImageIntent());\n   }\n \n-  public Observable<Optional<Bitmap>> captureImageResult() {\n+  public Observable<Bitmap> captureImageResult() {\n     return activityStreams\n         .getNextActivityResult(CAPTURE_PHOTO_REQUEST_CODE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f25bbc8f6177d0f198952459c406941ffd892d45"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDkxNzk4OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/system/CameraManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMzo0Njo0MlrOFka1Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxNzowOTowMVrOFkeWzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzczMjYyNg==", "bodyText": "It may make sense to return a Maybe here and in the helper given the semantics of these calls. Could you please add a TODO to investigate?", "url": "https://github.com/google/ground-android/pull/328#discussion_r373732626", "createdAt": "2020-01-31T23:46:42Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/system/CameraManager.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.system;\n+\n+import android.Manifest.permission;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.os.Bundle;\n+import android.provider.MediaStore;\n+import android.util.Log;\n+import com.google.android.gnd.system.ActivityStreams.ActivityResult;\n+import io.reactivex.Completable;\n+import io.reactivex.Observable;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+/** Manages permissions needed for using camera and related flows to/from Activity. */\n+@Singleton\n+public class CameraManager {\n+\n+  public static final String TAG = CameraManager.class.getName();\n+\n+  private static final int CAPTURE_PHOTO_REQUEST_CODE = CameraManager.class.hashCode() & 0xffff;\n+  private final PermissionsManager permissionsManager;\n+  private final ActivityStreams activityStreams;\n+\n+  @Inject\n+  public CameraManager(PermissionsManager permissionsManager, ActivityStreams activityStreams) {\n+    this.permissionsManager = permissionsManager;\n+    this.activityStreams = activityStreams;\n+  }\n+\n+  /**\n+   * Requests for capturing a photo from camera, if necessary permissions are granted. Otherwise,\n+   * requests for the permissions and then sends out the request.\n+   */\n+  public Completable launchPhotoCapture() {\n+    return permissionsManager\n+        .obtainPermission(permission.WRITE_EXTERNAL_STORAGE)\n+        .andThen(permissionsManager.obtainPermission(permission.CAMERA))\n+        .andThen(sendCapturePhotoIntent());\n+  }\n+\n+  /** Enqueue an intent for capturing a photo from camera. */\n+  private Completable sendCapturePhotoIntent() {\n+    return Completable.fromAction(\n+        () ->\n+            activityStreams.withActivity(\n+                activity -> {\n+                  Intent cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n+                  activity.startActivityForResult(cameraIntent, CAPTURE_PHOTO_REQUEST_CODE);\n+                  Log.d(TAG, \"capture photo intent sent\");\n+                }));\n+  }\n+\n+  /** Observe for the result of request code {@link CameraManager#CAPTURE_PHOTO_REQUEST_CODE}. */\n+  public Observable<Bitmap> capturePhotoResult() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e101c77b4f656e358f168e3985657e0ccd22d9e8"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5MDQxNA==", "bodyText": "Done", "url": "https://github.com/google/ground-android/pull/328#discussion_r373790414", "createdAt": "2020-02-01T17:09:01Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/system/CameraManager.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.system;\n+\n+import android.Manifest.permission;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.os.Bundle;\n+import android.provider.MediaStore;\n+import android.util.Log;\n+import com.google.android.gnd.system.ActivityStreams.ActivityResult;\n+import io.reactivex.Completable;\n+import io.reactivex.Observable;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+/** Manages permissions needed for using camera and related flows to/from Activity. */\n+@Singleton\n+public class CameraManager {\n+\n+  public static final String TAG = CameraManager.class.getName();\n+\n+  private static final int CAPTURE_PHOTO_REQUEST_CODE = CameraManager.class.hashCode() & 0xffff;\n+  private final PermissionsManager permissionsManager;\n+  private final ActivityStreams activityStreams;\n+\n+  @Inject\n+  public CameraManager(PermissionsManager permissionsManager, ActivityStreams activityStreams) {\n+    this.permissionsManager = permissionsManager;\n+    this.activityStreams = activityStreams;\n+  }\n+\n+  /**\n+   * Requests for capturing a photo from camera, if necessary permissions are granted. Otherwise,\n+   * requests for the permissions and then sends out the request.\n+   */\n+  public Completable launchPhotoCapture() {\n+    return permissionsManager\n+        .obtainPermission(permission.WRITE_EXTERNAL_STORAGE)\n+        .andThen(permissionsManager.obtainPermission(permission.CAMERA))\n+        .andThen(sendCapturePhotoIntent());\n+  }\n+\n+  /** Enqueue an intent for capturing a photo from camera. */\n+  private Completable sendCapturePhotoIntent() {\n+    return Completable.fromAction(\n+        () ->\n+            activityStreams.withActivity(\n+                activity -> {\n+                  Intent cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n+                  activity.startActivityForResult(cameraIntent, CAPTURE_PHOTO_REQUEST_CODE);\n+                  Log.d(TAG, \"capture photo intent sent\");\n+                }));\n+  }\n+\n+  /** Observe for the result of request code {@link CameraManager#CAPTURE_PHOTO_REQUEST_CODE}. */\n+  public Observable<Bitmap> capturePhotoResult() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzczMjYyNg=="}, "originalCommit": {"oid": "e101c77b4f656e358f168e3985657e0ccd22d9e8"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDkxOTQyOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/system/CameraManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMzo0ODowOVrOFka2Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxNzowOToxMFrOFkeW1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzczMjg2Ng==", "bodyText": "In that case this could be simplified to not be lazy, but rather to return a Maybe.empty() or Maybe.just().", "url": "https://github.com/google/ground-android/pull/328#discussion_r373732866", "createdAt": "2020-01-31T23:48:09Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/system/CameraManager.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.system;\n+\n+import android.Manifest.permission;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.os.Bundle;\n+import android.provider.MediaStore;\n+import android.util.Log;\n+import com.google.android.gnd.system.ActivityStreams.ActivityResult;\n+import io.reactivex.Completable;\n+import io.reactivex.Observable;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+/** Manages permissions needed for using camera and related flows to/from Activity. */\n+@Singleton\n+public class CameraManager {\n+\n+  public static final String TAG = CameraManager.class.getName();\n+\n+  private static final int CAPTURE_PHOTO_REQUEST_CODE = CameraManager.class.hashCode() & 0xffff;\n+  private final PermissionsManager permissionsManager;\n+  private final ActivityStreams activityStreams;\n+\n+  @Inject\n+  public CameraManager(PermissionsManager permissionsManager, ActivityStreams activityStreams) {\n+    this.permissionsManager = permissionsManager;\n+    this.activityStreams = activityStreams;\n+  }\n+\n+  /**\n+   * Requests for capturing a photo from camera, if necessary permissions are granted. Otherwise,\n+   * requests for the permissions and then sends out the request.\n+   */\n+  public Completable launchPhotoCapture() {\n+    return permissionsManager\n+        .obtainPermission(permission.WRITE_EXTERNAL_STORAGE)\n+        .andThen(permissionsManager.obtainPermission(permission.CAMERA))\n+        .andThen(sendCapturePhotoIntent());\n+  }\n+\n+  /** Enqueue an intent for capturing a photo from camera. */\n+  private Completable sendCapturePhotoIntent() {\n+    return Completable.fromAction(\n+        () ->\n+            activityStreams.withActivity(\n+                activity -> {\n+                  Intent cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n+                  activity.startActivityForResult(cameraIntent, CAPTURE_PHOTO_REQUEST_CODE);\n+                  Log.d(TAG, \"capture photo intent sent\");\n+                }));\n+  }\n+\n+  /** Observe for the result of request code {@link CameraManager#CAPTURE_PHOTO_REQUEST_CODE}. */\n+  public Observable<Bitmap> capturePhotoResult() {\n+    return activityStreams\n+        .getNextActivityResult(CAPTURE_PHOTO_REQUEST_CODE)\n+        .flatMap(this::onCapturePhotoResult);\n+  }\n+\n+  /** Fetch bitmap from the result, if present. */\n+  private Observable<Bitmap> onCapturePhotoResult(ActivityResult result) {\n+    return Observable.create(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e101c77b4f656e358f168e3985657e0ccd22d9e8"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5MDQyMQ==", "bodyText": "Added a TODO for the same", "url": "https://github.com/google/ground-android/pull/328#discussion_r373790421", "createdAt": "2020-02-01T17:09:10Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/system/CameraManager.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.system;\n+\n+import android.Manifest.permission;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.os.Bundle;\n+import android.provider.MediaStore;\n+import android.util.Log;\n+import com.google.android.gnd.system.ActivityStreams.ActivityResult;\n+import io.reactivex.Completable;\n+import io.reactivex.Observable;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+/** Manages permissions needed for using camera and related flows to/from Activity. */\n+@Singleton\n+public class CameraManager {\n+\n+  public static final String TAG = CameraManager.class.getName();\n+\n+  private static final int CAPTURE_PHOTO_REQUEST_CODE = CameraManager.class.hashCode() & 0xffff;\n+  private final PermissionsManager permissionsManager;\n+  private final ActivityStreams activityStreams;\n+\n+  @Inject\n+  public CameraManager(PermissionsManager permissionsManager, ActivityStreams activityStreams) {\n+    this.permissionsManager = permissionsManager;\n+    this.activityStreams = activityStreams;\n+  }\n+\n+  /**\n+   * Requests for capturing a photo from camera, if necessary permissions are granted. Otherwise,\n+   * requests for the permissions and then sends out the request.\n+   */\n+  public Completable launchPhotoCapture() {\n+    return permissionsManager\n+        .obtainPermission(permission.WRITE_EXTERNAL_STORAGE)\n+        .andThen(permissionsManager.obtainPermission(permission.CAMERA))\n+        .andThen(sendCapturePhotoIntent());\n+  }\n+\n+  /** Enqueue an intent for capturing a photo from camera. */\n+  private Completable sendCapturePhotoIntent() {\n+    return Completable.fromAction(\n+        () ->\n+            activityStreams.withActivity(\n+                activity -> {\n+                  Intent cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n+                  activity.startActivityForResult(cameraIntent, CAPTURE_PHOTO_REQUEST_CODE);\n+                  Log.d(TAG, \"capture photo intent sent\");\n+                }));\n+  }\n+\n+  /** Observe for the result of request code {@link CameraManager#CAPTURE_PHOTO_REQUEST_CODE}. */\n+  public Observable<Bitmap> capturePhotoResult() {\n+    return activityStreams\n+        .getNextActivityResult(CAPTURE_PHOTO_REQUEST_CODE)\n+        .flatMap(this::onCapturePhotoResult);\n+  }\n+\n+  /** Fetch bitmap from the result, if present. */\n+  private Observable<Bitmap> onCapturePhotoResult(ActivityResult result) {\n+    return Observable.create(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzczMjg2Ng=="}, "originalCommit": {"oid": "e101c77b4f656e358f168e3985657e0ccd22d9e8"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDkyMzUzOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationFragment.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMzo1MToyOFrOFka4gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNzoxODo0OVrOFkoFbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzczMzUwNQ==", "bodyText": "Can this be represented by a lambda, with the function extracted into its own method?", "url": "https://github.com/google/ground-android/pull/328#discussion_r373733505", "createdAt": "2020-01-31T23:51:28Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationFragment.java", "diffHunk": "@@ -169,12 +177,31 @@ public void addMultipleChoiceField(Field field) {\n   public void addPhotoField(Field field) {\n     PhotoInputFieldBinding binding =\n         PhotoInputFieldBinding.inflate(getLayoutInflater(), formLayout, false);\n-    binding.setViewModel(viewModel);\n     binding.setLifecycleOwner(this);\n     binding.setField(field);\n+    binding.setFragment(this);\n     formLayout.addView(binding.getRoot());\n     assignGeneratedId(binding.getRoot().findViewById(R.id.image_thumbnail_preview));\n     assignGeneratedId(binding.getRoot().findViewById(R.id.btn_select_photo));\n+\n+    viewModel\n+        .getResponses()\n+        .addOnMapChangedCallback(\n+            new OnMapChangedCallback<ObservableMap<String, Response>, String, Response>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e101c77b4f656e358f168e3985657e0ccd22d9e8"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5MjgyMA==", "bodyText": "Sadly no. I was looking into converting the Observable into a PublishProcessor for the Fragment to subscribe. But that needs some more refactoring which I'm planning to do later as it touches other codebase as well", "url": "https://github.com/google/ground-android/pull/328#discussion_r373792820", "createdAt": "2020-02-01T17:55:26Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationFragment.java", "diffHunk": "@@ -169,12 +177,31 @@ public void addMultipleChoiceField(Field field) {\n   public void addPhotoField(Field field) {\n     PhotoInputFieldBinding binding =\n         PhotoInputFieldBinding.inflate(getLayoutInflater(), formLayout, false);\n-    binding.setViewModel(viewModel);\n     binding.setLifecycleOwner(this);\n     binding.setField(field);\n+    binding.setFragment(this);\n     formLayout.addView(binding.getRoot());\n     assignGeneratedId(binding.getRoot().findViewById(R.id.image_thumbnail_preview));\n     assignGeneratedId(binding.getRoot().findViewById(R.id.btn_select_photo));\n+\n+    viewModel\n+        .getResponses()\n+        .addOnMapChangedCallback(\n+            new OnMapChangedCallback<ObservableMap<String, Response>, String, Response>() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzczMzUwNQ=="}, "originalCommit": {"oid": "e101c77b4f656e358f168e3985657e0ccd22d9e8"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk0OTgwNQ==", "bodyText": "Ok, thanks for checking.", "url": "https://github.com/google/ground-android/pull/328#discussion_r373949805", "createdAt": "2020-02-03T07:18:49Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationFragment.java", "diffHunk": "@@ -169,12 +177,31 @@ public void addMultipleChoiceField(Field field) {\n   public void addPhotoField(Field field) {\n     PhotoInputFieldBinding binding =\n         PhotoInputFieldBinding.inflate(getLayoutInflater(), formLayout, false);\n-    binding.setViewModel(viewModel);\n     binding.setLifecycleOwner(this);\n     binding.setField(field);\n+    binding.setFragment(this);\n     formLayout.addView(binding.getRoot());\n     assignGeneratedId(binding.getRoot().findViewById(R.id.image_thumbnail_preview));\n     assignGeneratedId(binding.getRoot().findViewById(R.id.btn_select_photo));\n+\n+    viewModel\n+        .getResponses()\n+        .addOnMapChangedCallback(\n+            new OnMapChangedCallback<ObservableMap<String, Response>, String, Response>() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzczMzUwNQ=="}, "originalCommit": {"oid": "e101c77b4f656e358f168e3985657e0ccd22d9e8"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDkyNDk5OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMzo1MjozNlrOFka5dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMzo1MjozNlrOFka5dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzczMzc0OQ==", "bodyText": "Also, please use \"return\" to bail out if conditions aren't met to avoid excessive nesting.", "url": "https://github.com/google/ground-android/pull/328#discussion_r373733749", "createdAt": "2020-01-31T23:52:36Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationFragment.java", "diffHunk": "@@ -169,12 +177,31 @@ public void addMultipleChoiceField(Field field) {\n   public void addPhotoField(Field field) {\n     PhotoInputFieldBinding binding =\n         PhotoInputFieldBinding.inflate(getLayoutInflater(), formLayout, false);\n-    binding.setViewModel(viewModel);\n     binding.setLifecycleOwner(this);\n     binding.setField(field);\n+    binding.setFragment(this);\n     formLayout.addView(binding.getRoot());\n     assignGeneratedId(binding.getRoot().findViewById(R.id.image_thumbnail_preview));\n     assignGeneratedId(binding.getRoot().findViewById(R.id.btn_select_photo));\n+\n+    viewModel\n+        .getResponses()\n+        .addOnMapChangedCallback(\n+            new OnMapChangedCallback<ObservableMap<String, Response>, String, Response>() {\n+              @Override\n+              public void onMapChanged(ObservableMap<String, Response> sender, String key) {\n+                if (key != null && key.equals(field.getId())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e101c77b4f656e358f168e3985657e0ccd22d9e8"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDkyNjI3OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMzo1MzozNFrOFka6MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMzo1MzozNFrOFka6MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzczMzkzNg==", "bodyText": "Also, this seems to be IO logic and not UI logic - can we move it out of the Fragment into a util class so it can be tested independently?", "url": "https://github.com/google/ground-android/pull/328#discussion_r373733936", "createdAt": "2020-01-31T23:53:34Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationFragment.java", "diffHunk": "@@ -169,12 +177,31 @@ public void addMultipleChoiceField(Field field) {\n   public void addPhotoField(Field field) {\n     PhotoInputFieldBinding binding =\n         PhotoInputFieldBinding.inflate(getLayoutInflater(), formLayout, false);\n-    binding.setViewModel(viewModel);\n     binding.setLifecycleOwner(this);\n     binding.setField(field);\n+    binding.setFragment(this);\n     formLayout.addView(binding.getRoot());\n     assignGeneratedId(binding.getRoot().findViewById(R.id.image_thumbnail_preview));\n     assignGeneratedId(binding.getRoot().findViewById(R.id.btn_select_photo));\n+\n+    viewModel\n+        .getResponses()\n+        .addOnMapChangedCallback(\n+            new OnMapChangedCallback<ObservableMap<String, Response>, String, Response>() {\n+              @Override\n+              public void onMapChanged(ObservableMap<String, Response> sender, String key) {\n+                if (key != null && key.equals(field.getId())) {\n+                  String imageFilePath = sender.get(key).getDetailsText(field);\n+                  File imageFile = new File(imageFilePath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e101c77b4f656e358f168e3985657e0ccd22d9e8"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDkzNTM5OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationViewModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMDowMTozNVrOFka_3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMDowMTozNVrOFka_3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzczNTM5MA==", "bodyText": "Same here re TODO.", "url": "https://github.com/google/ground-android/pull/328#discussion_r373735390", "createdAt": "2020-02-01T00:01:35Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationViewModel.java", "diffHunk": "@@ -193,6 +204,44 @@ public void onFocusChange(Field field, boolean hasFocus) {\n     }\n   }\n \n+  void initPhotoSelector(String fieldId) {\n+    /*\n+     * Didn't subscribe this with Fragment's lifecycle because we need to retain the disposable\n+     * after the fragment is destroyed (for activity result)\n+     */\n+    disposeOnClear(\n+        storageManager.launchPhotoPicker().andThen(handlePhotoPickerResult(fieldId)).subscribe());\n+  }\n+\n+  private Completable handlePhotoPickerResult(String fieldId) {\n+    return storageManager\n+        .photoPickerResult()\n+        .compose(bitmap -> saveBitmapAndUpdateResponse(bitmap, fieldId))\n+        .ignoreElements();\n+  }\n+\n+  void initPhotoCapture(String fieldId) {\n+    /*\n+     * Didn't subscribe this with Fragment's lifecycle because we need to retain the disposable\n+     * after the fragment is destroyed (for activity result)\n+     */\n+    disposeOnClear(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e101c77b4f656e358f168e3985657e0ccd22d9e8"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDkzNTQ0OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationViewModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMDowMTo0MVrOFka_6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMDowMTo0MVrOFka_6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzczNTQwMQ==", "bodyText": "Same here re name.", "url": "https://github.com/google/ground-android/pull/328#discussion_r373735401", "createdAt": "2020-02-01T00:01:41Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationViewModel.java", "diffHunk": "@@ -193,6 +204,44 @@ public void onFocusChange(Field field, boolean hasFocus) {\n     }\n   }\n \n+  void initPhotoSelector(String fieldId) {\n+    /*\n+     * Didn't subscribe this with Fragment's lifecycle because we need to retain the disposable\n+     * after the fragment is destroyed (for activity result)\n+     */\n+    disposeOnClear(\n+        storageManager.launchPhotoPicker().andThen(handlePhotoPickerResult(fieldId)).subscribe());\n+  }\n+\n+  private Completable handlePhotoPickerResult(String fieldId) {\n+    return storageManager\n+        .photoPickerResult()\n+        .compose(bitmap -> saveBitmapAndUpdateResponse(bitmap, fieldId))\n+        .ignoreElements();\n+  }\n+\n+  void initPhotoCapture(String fieldId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e101c77b4f656e358f168e3985657e0ccd22d9e8"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDkzNzM2OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationViewModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMDowMjo0M1rOFkbA5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMDowMjo0M1rOFkbA5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzczNTY1NA==", "bodyText": "\"init\" may imply it sets up the photo selector, but doesn't actually show it. One clearer name could be \"showPhotoSelector()\"", "url": "https://github.com/google/ground-android/pull/328#discussion_r373735654", "createdAt": "2020-02-01T00:02:43Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/ui/editobservation/EditObservationViewModel.java", "diffHunk": "@@ -193,6 +204,44 @@ public void onFocusChange(Field field, boolean hasFocus) {\n     }\n   }\n \n+  void initPhotoSelector(String fieldId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e101c77b4f656e358f168e3985657e0ccd22d9e8"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2590, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}