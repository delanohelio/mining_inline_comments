{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3NDQ5Njcz", "number": 392, "title": "Refactor Tile Download Worker to Download Pending Tiles in DB", "bodyText": "This PR updates the Tile Download worker to check the DB for pending tiles -- rather than take a list of tiles to download from the context.\ufeff\nThis simplifies the worker--in the future, it should take an area as an argument, and only check for pending tiles that intersect the given area bounds. (It will currently check all pending tiles).", "createdAt": "2020-03-12T20:08:00Z", "url": "https://github.com/google/ground-android/pull/392", "merged": true, "mergeCommit": {"oid": "f8d6b00dc83894cf94445f40a32cd89c1cb1a462"}, "closed": true, "closedAt": "2020-03-18T17:54:56Z", "author": {"login": "scolsen"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcNBZT9gH2gAyMzg3NDQ5NjczOjJkMzI1NDMwMjNhYjhlNGJhYzA1YTFiYTM5NmEwYjRlMjZmYjRlMzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcO60degH2gAyMzg3NDQ5NjczOjdkMzJhMWI1Y2NlYTM0MGZiMGZlYTY5MmRlNGZhZDgyZmRmMWFmNDQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2d32543023ab8e4bac05a1ba396a0b4e26fb4e39", "author": {"user": {"login": "scolsen", "name": "Scott Olsen"}}, "url": "https://github.com/google/ground-android/commit/2d32543023ab8e4bac05a1ba396a0b4e26fb4e39", "committedDate": "2020-03-12T20:04:39Z", "message": "Refactor Tile Download Worker to Poll DB\n\nThe Tile Download Worker originally accepted a tile id and the tile\ndownload work manager explicitly queued workers to conduct downloads\nof a list of tiles (given their ids). Now the tile download worker\ninstead checks the local data store for pending tiles and handles\ndownloading them independently -- the manager no longer passes any input\ndata to the worker.\n\nI've also made liberal use of completables, removed a method from the\nworker, and attempted to simplify the interface.\n\nThe findAll method in the TileDao now returns a single, as this behavior\nseems more appropriate (typically, we won't need to continue to\ncontinually react to the tile DB contents as a flowable allows, and this\nsimplifies the use of the stream in the worker, for situations that do\ncall for a flowable, the single may be converted)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af686d84c9b4dee13d48702555d7246ce1de31ee", "author": {"user": {"login": "scolsen", "name": "Scott Olsen"}}, "url": "https://github.com/google/ground-android/commit/af686d84c9b4dee13d48702555d7246ce1de31ee", "committedDate": "2020-03-12T20:04:56Z", "message": "Merge branch 'master' of https://github.com/google/ground-android into tile-worker"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczODkxODk0", "url": "https://github.com/google/ground-android/pull/392#pullrequestreview-373891894", "createdAt": "2020-03-12T20:51:45Z", "commit": {"oid": "af686d84c9b4dee13d48702555d7246ce1de31ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMDo1MTo0NVrOF1u5aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMDo1MTo0NVrOF1u5aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg4NzIwOQ==", "bodyText": "Rather than using findAll and filtering, can we define a method on the DAO that only returns tiles with state == PENDING?", "url": "https://github.com/google/ground-android/pull/392#discussion_r391887209", "createdAt": "2020-03-12T20:51:45Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java", "diffHunk": "@@ -436,4 +438,19 @@ public Completable insertOrUpdateTile(Tile tile) {\n   public Maybe<Tile> getTile(String tileId) {\n     return tileDao.findById(tileId).map(TileEntity::toTile).subscribeOn(schedulers.io());\n   }\n+\n+  @Override\n+  public Single<ImmutableList<Tile>> getPendingTiles() {\n+    // TODO: Only retrieve tiles for a given area.\n+    // This currently retrieves all pending tiles in the DB.\n+    return tileDao\n+        .findAll()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af686d84c9b4dee13d48702555d7246ce1de31ee"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczODkyNzg2", "url": "https://github.com/google/ground-android/pull/392#pullrequestreview-373892786", "createdAt": "2020-03-12T20:53:18Z", "commit": {"oid": "af686d84c9b4dee13d48702555d7246ce1de31ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMDo1MzoxOFrOF1u8Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMDo1MzoxOFrOF1u8Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg4Nzg5MA==", "bodyText": "Does this need to be in a finally block?", "url": "https://github.com/google/ground-android/pull/392#discussion_r391887890", "createdAt": "2020-03-12T20:53:18Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/workers/TileDownloadWorker.java", "diffHunk": "@@ -42,106 +45,106 @@\n public class TileDownloadWorker extends Worker {\n   private static final String TAG = TileDownloadWorker.class.getSimpleName();\n \n-  private static final String TILE_ID = \"tile_id\";\n   private static final int BUFFER_SIZE = 4096;\n \n   private final Context context;\n   private final LocalDataStore localDataStore;\n-  private final String tileId;\n \n   public TileDownloadWorker(\n       @NonNull Context context, @NonNull WorkerParameters params, LocalDataStore localDataStore) {\n     super(context, params);\n     this.context = context;\n     this.localDataStore = localDataStore;\n-    this.tileId = params.getInputData().getString(TILE_ID);\n-  }\n-\n-  /** Creates input data for the TileDownloadWorker. */\n-  public static Data createInputData(String tilePrimaryKey) {\n-    return new Data.Builder().putString(TILE_ID, tilePrimaryKey).build();\n   }\n \n   /**\n    * Given a tile, downloads the given {@param tile}'s source file and saves it to the device's app\n    * storage. Optional HTTP request header {@param requestProperties} may be provided.\n    */\n-  private Result downloadTileFile(Tile tile, Optional<HashMap<String, String>> requestProperties) {\n-    try {\n-      URL url = new URL(tile.getUrl());\n-      HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n-\n-      if (requestProperties.isPresent()) {\n-        for (Map.Entry<String, String> property : requestProperties.get().entrySet()) {\n-          connection.setRequestProperty(property.getKey(), property.getValue());\n-        }\n-      }\n-\n-      connection.connect();\n-\n-      InputStream is = connection.getInputStream();\n-      FileOutputStream fos = context.openFileOutput(tile.getPath(), Context.MODE_PRIVATE);\n-      byte[] byteChunk = new byte[BUFFER_SIZE];\n-      int n;\n-\n-      while ((n = is.read(byteChunk)) > 0) {\n-        fos.write(byteChunk, 0, n);\n+  private void downloadTileFile(Tile tile, Map<String, String> requestProperties)\n+      throws IOException {\n+    URL url = new URL(tile.getUrl());\n+    HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n+\n+    if (!requestProperties.isEmpty()) {\n+      for (Map.Entry<String, String> property : requestProperties.entrySet()) {\n+        connection.setRequestProperty(property.getKey(), property.getValue());\n       }\n+    }\n \n-      is.close();\n-      fos.close();\n-\n-      localDataStore\n-          .insertOrUpdateTile(tile.toBuilder().setState(Tile.State.DOWNLOADED).build())\n-          .blockingAwait();\n-\n-      return Result.success();\n-\n-    } catch (IOException e) {\n-      Log.d(TAG, \"Failed to download and write file.\", e);\n+    connection.connect();\n \n-      localDataStore\n-          .insertOrUpdateTile(tile.toBuilder().setState(Tile.State.FAILED).build())\n-          .blockingAwait();\n+    InputStream is = connection.getInputStream();\n+    FileOutputStream fos = context.openFileOutput(tile.getPath(), Context.MODE_PRIVATE);\n+    byte[] byteChunk = new byte[BUFFER_SIZE];\n+    int n;\n \n-      return Result.failure();\n+    while ((n = is.read(byteChunk)) > 0) {\n+      fos.write(byteChunk, 0, n);\n     }\n-  }\n-\n-  /** Update a tile's state in the database and initiate a download of the tile source file. */\n-  private Result downloadTile(Tile tile) {\n-    localDataStore\n-        .insertOrUpdateTile(tile.toBuilder().setState(Tile.State.IN_PROGRESS).build())\n-        .blockingAwait();\n \n-    return downloadTileFile(tile, Optional.empty());\n+    is.close();\n+    fos.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af686d84c9b4dee13d48702555d7246ce1de31ee"}, "originalPosition": 114}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczODk0MjYw", "url": "https://github.com/google/ground-android/pull/392#pullrequestreview-373894260", "createdAt": "2020-03-12T20:55:54Z", "commit": {"oid": "af686d84c9b4dee13d48702555d7246ce1de31ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMDo1NTo1NFrOF1vAmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMDo1NTo1NFrOF1vAmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg4OTA1MQ==", "bodyText": "Do I understand correct that \"Tile\" actually refers to an entire pyramid of tiles, and not a single tile? If so, at some point we may want to rename it something more appropriate to avoid confusing others (and ourselves).", "url": "https://github.com/google/ground-android/pull/392#discussion_r391889051", "createdAt": "2020-03-12T20:55:54Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/workers/TileDownloadWorker.java", "diffHunk": "@@ -42,106 +45,106 @@\n public class TileDownloadWorker extends Worker {\n   private static final String TAG = TileDownloadWorker.class.getSimpleName();\n \n-  private static final String TILE_ID = \"tile_id\";\n   private static final int BUFFER_SIZE = 4096;\n \n   private final Context context;\n   private final LocalDataStore localDataStore;\n-  private final String tileId;\n \n   public TileDownloadWorker(\n       @NonNull Context context, @NonNull WorkerParameters params, LocalDataStore localDataStore) {\n     super(context, params);\n     this.context = context;\n     this.localDataStore = localDataStore;\n-    this.tileId = params.getInputData().getString(TILE_ID);\n-  }\n-\n-  /** Creates input data for the TileDownloadWorker. */\n-  public static Data createInputData(String tilePrimaryKey) {\n-    return new Data.Builder().putString(TILE_ID, tilePrimaryKey).build();\n   }\n \n   /**\n    * Given a tile, downloads the given {@param tile}'s source file and saves it to the device's app\n    * storage. Optional HTTP request header {@param requestProperties} may be provided.\n    */\n-  private Result downloadTileFile(Tile tile, Optional<HashMap<String, String>> requestProperties) {\n-    try {\n-      URL url = new URL(tile.getUrl());\n-      HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n-\n-      if (requestProperties.isPresent()) {\n-        for (Map.Entry<String, String> property : requestProperties.get().entrySet()) {\n-          connection.setRequestProperty(property.getKey(), property.getValue());\n-        }\n-      }\n-\n-      connection.connect();\n-\n-      InputStream is = connection.getInputStream();\n-      FileOutputStream fos = context.openFileOutput(tile.getPath(), Context.MODE_PRIVATE);\n-      byte[] byteChunk = new byte[BUFFER_SIZE];\n-      int n;\n-\n-      while ((n = is.read(byteChunk)) > 0) {\n-        fos.write(byteChunk, 0, n);\n+  private void downloadTileFile(Tile tile, Map<String, String> requestProperties)\n+      throws IOException {\n+    URL url = new URL(tile.getUrl());\n+    HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n+\n+    if (!requestProperties.isEmpty()) {\n+      for (Map.Entry<String, String> property : requestProperties.entrySet()) {\n+        connection.setRequestProperty(property.getKey(), property.getValue());\n       }\n+    }\n \n-      is.close();\n-      fos.close();\n-\n-      localDataStore\n-          .insertOrUpdateTile(tile.toBuilder().setState(Tile.State.DOWNLOADED).build())\n-          .blockingAwait();\n-\n-      return Result.success();\n-\n-    } catch (IOException e) {\n-      Log.d(TAG, \"Failed to download and write file.\", e);\n+    connection.connect();\n \n-      localDataStore\n-          .insertOrUpdateTile(tile.toBuilder().setState(Tile.State.FAILED).build())\n-          .blockingAwait();\n+    InputStream is = connection.getInputStream();\n+    FileOutputStream fos = context.openFileOutput(tile.getPath(), Context.MODE_PRIVATE);\n+    byte[] byteChunk = new byte[BUFFER_SIZE];\n+    int n;\n \n-      return Result.failure();\n+    while ((n = is.read(byteChunk)) > 0) {\n+      fos.write(byteChunk, 0, n);\n     }\n-  }\n-\n-  /** Update a tile's state in the database and initiate a download of the tile source file. */\n-  private Result downloadTile(Tile tile) {\n-    localDataStore\n-        .insertOrUpdateTile(tile.toBuilder().setState(Tile.State.IN_PROGRESS).build())\n-        .blockingAwait();\n \n-    return downloadTileFile(tile, Optional.empty());\n+    is.close();\n+    fos.close();\n   }\n \n-  /** Resumes downloading the source for {@param tile} marked as {@code Tile.State.IN_PROGRESS}. */\n-  private Result resumeTileDownload(Tile tile) {\n-    File existingTileFile = new File(context.getFilesDir(), tile.getPath());\n+  /** Update a tile's state in the database and initiate a download of the tile source file. */\n+  private Completable downloadTile(Tile tile) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af686d84c9b4dee13d48702555d7246ce1de31ee"}, "originalPosition": 121}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczODk2NTg0", "url": "https://github.com/google/ground-android/pull/392#pullrequestreview-373896584", "createdAt": "2020-03-12T20:59:57Z", "commit": {"oid": "af686d84c9b4dee13d48702555d7246ce1de31ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMDo1OTo1N1rOF1vHtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMDo1OTo1N1rOF1vHtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg5MDg3MQ==", "bodyText": "If you use Completable.fromRunnable instead you don't need to return anything and can use an inline lambda instead of a block.", "url": "https://github.com/google/ground-android/pull/392#discussion_r391890871", "createdAt": "2020-03-12T20:59:57Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/workers/TileDownloadWorker.java", "diffHunk": "@@ -42,106 +45,106 @@\n public class TileDownloadWorker extends Worker {\n   private static final String TAG = TileDownloadWorker.class.getSimpleName();\n \n-  private static final String TILE_ID = \"tile_id\";\n   private static final int BUFFER_SIZE = 4096;\n \n   private final Context context;\n   private final LocalDataStore localDataStore;\n-  private final String tileId;\n \n   public TileDownloadWorker(\n       @NonNull Context context, @NonNull WorkerParameters params, LocalDataStore localDataStore) {\n     super(context, params);\n     this.context = context;\n     this.localDataStore = localDataStore;\n-    this.tileId = params.getInputData().getString(TILE_ID);\n-  }\n-\n-  /** Creates input data for the TileDownloadWorker. */\n-  public static Data createInputData(String tilePrimaryKey) {\n-    return new Data.Builder().putString(TILE_ID, tilePrimaryKey).build();\n   }\n \n   /**\n    * Given a tile, downloads the given {@param tile}'s source file and saves it to the device's app\n    * storage. Optional HTTP request header {@param requestProperties} may be provided.\n    */\n-  private Result downloadTileFile(Tile tile, Optional<HashMap<String, String>> requestProperties) {\n-    try {\n-      URL url = new URL(tile.getUrl());\n-      HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n-\n-      if (requestProperties.isPresent()) {\n-        for (Map.Entry<String, String> property : requestProperties.get().entrySet()) {\n-          connection.setRequestProperty(property.getKey(), property.getValue());\n-        }\n-      }\n-\n-      connection.connect();\n-\n-      InputStream is = connection.getInputStream();\n-      FileOutputStream fos = context.openFileOutput(tile.getPath(), Context.MODE_PRIVATE);\n-      byte[] byteChunk = new byte[BUFFER_SIZE];\n-      int n;\n-\n-      while ((n = is.read(byteChunk)) > 0) {\n-        fos.write(byteChunk, 0, n);\n+  private void downloadTileFile(Tile tile, Map<String, String> requestProperties)\n+      throws IOException {\n+    URL url = new URL(tile.getUrl());\n+    HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n+\n+    if (!requestProperties.isEmpty()) {\n+      for (Map.Entry<String, String> property : requestProperties.entrySet()) {\n+        connection.setRequestProperty(property.getKey(), property.getValue());\n       }\n+    }\n \n-      is.close();\n-      fos.close();\n-\n-      localDataStore\n-          .insertOrUpdateTile(tile.toBuilder().setState(Tile.State.DOWNLOADED).build())\n-          .blockingAwait();\n-\n-      return Result.success();\n-\n-    } catch (IOException e) {\n-      Log.d(TAG, \"Failed to download and write file.\", e);\n+    connection.connect();\n \n-      localDataStore\n-          .insertOrUpdateTile(tile.toBuilder().setState(Tile.State.FAILED).build())\n-          .blockingAwait();\n+    InputStream is = connection.getInputStream();\n+    FileOutputStream fos = context.openFileOutput(tile.getPath(), Context.MODE_PRIVATE);\n+    byte[] byteChunk = new byte[BUFFER_SIZE];\n+    int n;\n \n-      return Result.failure();\n+    while ((n = is.read(byteChunk)) > 0) {\n+      fos.write(byteChunk, 0, n);\n     }\n-  }\n-\n-  /** Update a tile's state in the database and initiate a download of the tile source file. */\n-  private Result downloadTile(Tile tile) {\n-    localDataStore\n-        .insertOrUpdateTile(tile.toBuilder().setState(Tile.State.IN_PROGRESS).build())\n-        .blockingAwait();\n \n-    return downloadTileFile(tile, Optional.empty());\n+    is.close();\n+    fos.close();\n   }\n \n-  /** Resumes downloading the source for {@param tile} marked as {@code Tile.State.IN_PROGRESS}. */\n-  private Result resumeTileDownload(Tile tile) {\n-    File existingTileFile = new File(context.getFilesDir(), tile.getPath());\n+  /** Update a tile's state in the database and initiate a download of the tile source file. */\n+  private Completable downloadTile(Tile tile) {\n     HashMap<String, String> requestProperties = new HashMap<>();\n \n-    requestProperties.put(\"Range\", existingTileFile.length() + \"-\");\n+    if (tile.getState() == State.IN_PROGRESS) {\n+      File existingTileFile = new File(context.getFilesDir(), tile.getPath());\n+      requestProperties.put(\"Range\", existingTileFile.length() + \"-\");\n+    }\n \n-    return downloadTileFile(tile, Optional.of(requestProperties));\n+    return localDataStore\n+        .insertOrUpdateTile(tile.toBuilder().setState(Tile.State.IN_PROGRESS).build())\n+        .andThen(\n+            Completable.fromCallable(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af686d84c9b4dee13d48702555d7246ce1de31ee"}, "originalPosition": 134}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczODk2ODcw", "url": "https://github.com/google/ground-android/pull/392#pullrequestreview-373896870", "createdAt": "2020-03-12T21:00:30Z", "commit": {"oid": "af686d84c9b4dee13d48702555d7246ce1de31ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTowMDozMFrOF1vIkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTowMDozMFrOF1vIkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg5MTA4OQ==", "bodyText": "Please add a comment explaining why we do this (to resume downloads)? Btw, have you seen this work in practice?", "url": "https://github.com/google/ground-android/pull/392#discussion_r391891089", "createdAt": "2020-03-12T21:00:30Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/workers/TileDownloadWorker.java", "diffHunk": "@@ -42,106 +45,106 @@\n public class TileDownloadWorker extends Worker {\n   private static final String TAG = TileDownloadWorker.class.getSimpleName();\n \n-  private static final String TILE_ID = \"tile_id\";\n   private static final int BUFFER_SIZE = 4096;\n \n   private final Context context;\n   private final LocalDataStore localDataStore;\n-  private final String tileId;\n \n   public TileDownloadWorker(\n       @NonNull Context context, @NonNull WorkerParameters params, LocalDataStore localDataStore) {\n     super(context, params);\n     this.context = context;\n     this.localDataStore = localDataStore;\n-    this.tileId = params.getInputData().getString(TILE_ID);\n-  }\n-\n-  /** Creates input data for the TileDownloadWorker. */\n-  public static Data createInputData(String tilePrimaryKey) {\n-    return new Data.Builder().putString(TILE_ID, tilePrimaryKey).build();\n   }\n \n   /**\n    * Given a tile, downloads the given {@param tile}'s source file and saves it to the device's app\n    * storage. Optional HTTP request header {@param requestProperties} may be provided.\n    */\n-  private Result downloadTileFile(Tile tile, Optional<HashMap<String, String>> requestProperties) {\n-    try {\n-      URL url = new URL(tile.getUrl());\n-      HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n-\n-      if (requestProperties.isPresent()) {\n-        for (Map.Entry<String, String> property : requestProperties.get().entrySet()) {\n-          connection.setRequestProperty(property.getKey(), property.getValue());\n-        }\n-      }\n-\n-      connection.connect();\n-\n-      InputStream is = connection.getInputStream();\n-      FileOutputStream fos = context.openFileOutput(tile.getPath(), Context.MODE_PRIVATE);\n-      byte[] byteChunk = new byte[BUFFER_SIZE];\n-      int n;\n-\n-      while ((n = is.read(byteChunk)) > 0) {\n-        fos.write(byteChunk, 0, n);\n+  private void downloadTileFile(Tile tile, Map<String, String> requestProperties)\n+      throws IOException {\n+    URL url = new URL(tile.getUrl());\n+    HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n+\n+    if (!requestProperties.isEmpty()) {\n+      for (Map.Entry<String, String> property : requestProperties.entrySet()) {\n+        connection.setRequestProperty(property.getKey(), property.getValue());\n       }\n+    }\n \n-      is.close();\n-      fos.close();\n-\n-      localDataStore\n-          .insertOrUpdateTile(tile.toBuilder().setState(Tile.State.DOWNLOADED).build())\n-          .blockingAwait();\n-\n-      return Result.success();\n-\n-    } catch (IOException e) {\n-      Log.d(TAG, \"Failed to download and write file.\", e);\n+    connection.connect();\n \n-      localDataStore\n-          .insertOrUpdateTile(tile.toBuilder().setState(Tile.State.FAILED).build())\n-          .blockingAwait();\n+    InputStream is = connection.getInputStream();\n+    FileOutputStream fos = context.openFileOutput(tile.getPath(), Context.MODE_PRIVATE);\n+    byte[] byteChunk = new byte[BUFFER_SIZE];\n+    int n;\n \n-      return Result.failure();\n+    while ((n = is.read(byteChunk)) > 0) {\n+      fos.write(byteChunk, 0, n);\n     }\n-  }\n-\n-  /** Update a tile's state in the database and initiate a download of the tile source file. */\n-  private Result downloadTile(Tile tile) {\n-    localDataStore\n-        .insertOrUpdateTile(tile.toBuilder().setState(Tile.State.IN_PROGRESS).build())\n-        .blockingAwait();\n \n-    return downloadTileFile(tile, Optional.empty());\n+    is.close();\n+    fos.close();\n   }\n \n-  /** Resumes downloading the source for {@param tile} marked as {@code Tile.State.IN_PROGRESS}. */\n-  private Result resumeTileDownload(Tile tile) {\n-    File existingTileFile = new File(context.getFilesDir(), tile.getPath());\n+  /** Update a tile's state in the database and initiate a download of the tile source file. */\n+  private Completable downloadTile(Tile tile) {\n     HashMap<String, String> requestProperties = new HashMap<>();\n \n-    requestProperties.put(\"Range\", existingTileFile.length() + \"-\");\n+    if (tile.getState() == State.IN_PROGRESS) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af686d84c9b4dee13d48702555d7246ce1de31ee"}, "originalPosition": 125}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczODk3NjM2", "url": "https://github.com/google/ground-android/pull/392#pullrequestreview-373897636", "createdAt": "2020-03-12T21:01:56Z", "commit": {"oid": "af686d84c9b4dee13d48702555d7246ce1de31ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTowMTo1N1rOF1vLGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTowMTo1N1rOF1vLGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg5MTczOQ==", "bodyText": "Please define variable as Map instead.", "url": "https://github.com/google/ground-android/pull/392#discussion_r391891739", "createdAt": "2020-03-12T21:01:57Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/workers/TileDownloadWorker.java", "diffHunk": "@@ -42,106 +45,106 @@\n public class TileDownloadWorker extends Worker {\n   private static final String TAG = TileDownloadWorker.class.getSimpleName();\n \n-  private static final String TILE_ID = \"tile_id\";\n   private static final int BUFFER_SIZE = 4096;\n \n   private final Context context;\n   private final LocalDataStore localDataStore;\n-  private final String tileId;\n \n   public TileDownloadWorker(\n       @NonNull Context context, @NonNull WorkerParameters params, LocalDataStore localDataStore) {\n     super(context, params);\n     this.context = context;\n     this.localDataStore = localDataStore;\n-    this.tileId = params.getInputData().getString(TILE_ID);\n-  }\n-\n-  /** Creates input data for the TileDownloadWorker. */\n-  public static Data createInputData(String tilePrimaryKey) {\n-    return new Data.Builder().putString(TILE_ID, tilePrimaryKey).build();\n   }\n \n   /**\n    * Given a tile, downloads the given {@param tile}'s source file and saves it to the device's app\n    * storage. Optional HTTP request header {@param requestProperties} may be provided.\n    */\n-  private Result downloadTileFile(Tile tile, Optional<HashMap<String, String>> requestProperties) {\n-    try {\n-      URL url = new URL(tile.getUrl());\n-      HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n-\n-      if (requestProperties.isPresent()) {\n-        for (Map.Entry<String, String> property : requestProperties.get().entrySet()) {\n-          connection.setRequestProperty(property.getKey(), property.getValue());\n-        }\n-      }\n-\n-      connection.connect();\n-\n-      InputStream is = connection.getInputStream();\n-      FileOutputStream fos = context.openFileOutput(tile.getPath(), Context.MODE_PRIVATE);\n-      byte[] byteChunk = new byte[BUFFER_SIZE];\n-      int n;\n-\n-      while ((n = is.read(byteChunk)) > 0) {\n-        fos.write(byteChunk, 0, n);\n+  private void downloadTileFile(Tile tile, Map<String, String> requestProperties)\n+      throws IOException {\n+    URL url = new URL(tile.getUrl());\n+    HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n+\n+    if (!requestProperties.isEmpty()) {\n+      for (Map.Entry<String, String> property : requestProperties.entrySet()) {\n+        connection.setRequestProperty(property.getKey(), property.getValue());\n       }\n+    }\n \n-      is.close();\n-      fos.close();\n-\n-      localDataStore\n-          .insertOrUpdateTile(tile.toBuilder().setState(Tile.State.DOWNLOADED).build())\n-          .blockingAwait();\n-\n-      return Result.success();\n-\n-    } catch (IOException e) {\n-      Log.d(TAG, \"Failed to download and write file.\", e);\n+    connection.connect();\n \n-      localDataStore\n-          .insertOrUpdateTile(tile.toBuilder().setState(Tile.State.FAILED).build())\n-          .blockingAwait();\n+    InputStream is = connection.getInputStream();\n+    FileOutputStream fos = context.openFileOutput(tile.getPath(), Context.MODE_PRIVATE);\n+    byte[] byteChunk = new byte[BUFFER_SIZE];\n+    int n;\n \n-      return Result.failure();\n+    while ((n = is.read(byteChunk)) > 0) {\n+      fos.write(byteChunk, 0, n);\n     }\n-  }\n-\n-  /** Update a tile's state in the database and initiate a download of the tile source file. */\n-  private Result downloadTile(Tile tile) {\n-    localDataStore\n-        .insertOrUpdateTile(tile.toBuilder().setState(Tile.State.IN_PROGRESS).build())\n-        .blockingAwait();\n \n-    return downloadTileFile(tile, Optional.empty());\n+    is.close();\n+    fos.close();\n   }\n \n-  /** Resumes downloading the source for {@param tile} marked as {@code Tile.State.IN_PROGRESS}. */\n-  private Result resumeTileDownload(Tile tile) {\n-    File existingTileFile = new File(context.getFilesDir(), tile.getPath());\n+  /** Update a tile's state in the database and initiate a download of the tile source file. */\n+  private Completable downloadTile(Tile tile) {\n     HashMap<String, String> requestProperties = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af686d84c9b4dee13d48702555d7246ce1de31ee"}, "originalPosition": 122}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczODk4Njcw", "url": "https://github.com/google/ground-android/pull/392#pullrequestreview-373898670", "createdAt": "2020-03-12T21:03:45Z", "commit": {"oid": "af686d84c9b4dee13d48702555d7246ce1de31ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTowMzo0NVrOF1vOTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTowMzo0NVrOF1vOTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg5MjU1OA==", "bodyText": "We shouldn't care if there are no pending tiles; if so another instance of the worker may have completed the job for us, and we should just exit since everything is in the proper state.", "url": "https://github.com/google/ground-android/pull/392#discussion_r391892558", "createdAt": "2020-03-12T21:03:45Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/workers/TileDownloadWorker.java", "diffHunk": "@@ -150,27 +153,23 @@ private Result checkDownload(Tile tile) {\n   @NonNull\n   @Override\n   public Result doWork() {\n-    Tile tile = localDataStore.getTile(tileId).blockingGet();\n+    ImmutableList<Tile> pendingTiles = localDataStore.getPendingTiles().blockingGet();\n \n-    // When there is no tile in the db, the Maybe completes and returns null.\n+    // When there are no tiles in the db, the blockingGet returns null.\n     // We expect tiles to be added to the DB prior to downloading.\n     // If that isn't the case, we fail.\n-    if (tile == null) {\n+    if (pendingTiles == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af686d84c9b4dee13d48702555d7246ce1de31ee"}, "originalPosition": 197}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczODk4OTE5", "url": "https://github.com/google/ground-android/pull/392#pullrequestreview-373898919", "createdAt": "2020-03-12T21:04:15Z", "commit": {"oid": "af686d84c9b4dee13d48702555d7246ce1de31ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTowNDoxNVrOF1vPIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTowNDoxNVrOF1vPIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg5Mjc2OA==", "bodyText": "Fyi: After Shobhit's recent PR, you can now just Timber.d(\"Downloading tiles %s\", pendingTiles).", "url": "https://github.com/google/ground-android/pull/392#discussion_r391892768", "createdAt": "2020-03-12T21:04:15Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/workers/TileDownloadWorker.java", "diffHunk": "@@ -150,27 +153,23 @@ private Result checkDownload(Tile tile) {\n   @NonNull\n   @Override\n   public Result doWork() {\n-    Tile tile = localDataStore.getTile(tileId).blockingGet();\n+    ImmutableList<Tile> pendingTiles = localDataStore.getPendingTiles().blockingGet();\n \n-    // When there is no tile in the db, the Maybe completes and returns null.\n+    // When there are no tiles in the db, the blockingGet returns null.\n     // We expect tiles to be added to the DB prior to downloading.\n     // If that isn't the case, we fail.\n-    if (tile == null) {\n+    if (pendingTiles == null) {\n       return Result.failure();\n     }\n \n-    Log.d(TAG, \"Downloading tile: \" + tile.getPath());\n-\n-    switch (tile.getState()) {\n-      case DOWNLOADED:\n-        return checkDownload(tile);\n-      case PENDING:\n-      case FAILED:\n-        return downloadTile(tile);\n-      case IN_PROGRESS:\n-        return resumeTileDownload(tile);\n-      default:\n-        return Result.failure();\n+    Log.d(TAG, \"Downloading tiles: \" + pendingTiles);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af686d84c9b4dee13d48702555d7246ce1de31ee"}, "originalPosition": 213}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczODk5NTA2", "url": "https://github.com/google/ground-android/pull/392#pullrequestreview-373899506", "createdAt": "2020-03-12T21:05:13Z", "commit": {"oid": "af686d84c9b4dee13d48702555d7246ce1de31ee"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NDQ0Njc5", "url": "https://github.com/google/ground-android/pull/392#pullrequestreview-374444679", "createdAt": "2020-03-13T16:33:09Z", "commit": {"oid": "af686d84c9b4dee13d48702555d7246ce1de31ee"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjozMzowOVrOF2KdpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjozNTo0MFrOF2Kj2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzODg1Mw==", "bodyText": "Hmm.. perhaps.. we can leave it for now provided we test it out.", "url": "https://github.com/google/ground-android/pull/392#discussion_r392338853", "createdAt": "2020-03-13T16:33:09Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/workers/TileDownloadWorker.java", "diffHunk": "@@ -42,106 +45,106 @@\n public class TileDownloadWorker extends Worker {\n   private static final String TAG = TileDownloadWorker.class.getSimpleName();\n \n-  private static final String TILE_ID = \"tile_id\";\n   private static final int BUFFER_SIZE = 4096;\n \n   private final Context context;\n   private final LocalDataStore localDataStore;\n-  private final String tileId;\n \n   public TileDownloadWorker(\n       @NonNull Context context, @NonNull WorkerParameters params, LocalDataStore localDataStore) {\n     super(context, params);\n     this.context = context;\n     this.localDataStore = localDataStore;\n-    this.tileId = params.getInputData().getString(TILE_ID);\n-  }\n-\n-  /** Creates input data for the TileDownloadWorker. */\n-  public static Data createInputData(String tilePrimaryKey) {\n-    return new Data.Builder().putString(TILE_ID, tilePrimaryKey).build();\n   }\n \n   /**\n    * Given a tile, downloads the given {@param tile}'s source file and saves it to the device's app\n    * storage. Optional HTTP request header {@param requestProperties} may be provided.\n    */\n-  private Result downloadTileFile(Tile tile, Optional<HashMap<String, String>> requestProperties) {\n-    try {\n-      URL url = new URL(tile.getUrl());\n-      HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n-\n-      if (requestProperties.isPresent()) {\n-        for (Map.Entry<String, String> property : requestProperties.get().entrySet()) {\n-          connection.setRequestProperty(property.getKey(), property.getValue());\n-        }\n-      }\n-\n-      connection.connect();\n-\n-      InputStream is = connection.getInputStream();\n-      FileOutputStream fos = context.openFileOutput(tile.getPath(), Context.MODE_PRIVATE);\n-      byte[] byteChunk = new byte[BUFFER_SIZE];\n-      int n;\n-\n-      while ((n = is.read(byteChunk)) > 0) {\n-        fos.write(byteChunk, 0, n);\n+  private void downloadTileFile(Tile tile, Map<String, String> requestProperties)\n+      throws IOException {\n+    URL url = new URL(tile.getUrl());\n+    HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n+\n+    if (!requestProperties.isEmpty()) {\n+      for (Map.Entry<String, String> property : requestProperties.entrySet()) {\n+        connection.setRequestProperty(property.getKey(), property.getValue());\n       }\n+    }\n \n-      is.close();\n-      fos.close();\n-\n-      localDataStore\n-          .insertOrUpdateTile(tile.toBuilder().setState(Tile.State.DOWNLOADED).build())\n-          .blockingAwait();\n-\n-      return Result.success();\n-\n-    } catch (IOException e) {\n-      Log.d(TAG, \"Failed to download and write file.\", e);\n+    connection.connect();\n \n-      localDataStore\n-          .insertOrUpdateTile(tile.toBuilder().setState(Tile.State.FAILED).build())\n-          .blockingAwait();\n+    InputStream is = connection.getInputStream();\n+    FileOutputStream fos = context.openFileOutput(tile.getPath(), Context.MODE_PRIVATE);\n+    byte[] byteChunk = new byte[BUFFER_SIZE];\n+    int n;\n \n-      return Result.failure();\n+    while ((n = is.read(byteChunk)) > 0) {\n+      fos.write(byteChunk, 0, n);\n     }\n-  }\n-\n-  /** Update a tile's state in the database and initiate a download of the tile source file. */\n-  private Result downloadTile(Tile tile) {\n-    localDataStore\n-        .insertOrUpdateTile(tile.toBuilder().setState(Tile.State.IN_PROGRESS).build())\n-        .blockingAwait();\n \n-    return downloadTileFile(tile, Optional.empty());\n+    is.close();\n+    fos.close();\n   }\n \n-  /** Resumes downloading the source for {@param tile} marked as {@code Tile.State.IN_PROGRESS}. */\n-  private Result resumeTileDownload(Tile tile) {\n-    File existingTileFile = new File(context.getFilesDir(), tile.getPath());\n+  /** Update a tile's state in the database and initiate a download of the tile source file. */\n+  private Completable downloadTile(Tile tile) {\n     HashMap<String, String> requestProperties = new HashMap<>();\n \n-    requestProperties.put(\"Range\", existingTileFile.length() + \"-\");\n+    if (tile.getState() == State.IN_PROGRESS) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg5MTA4OQ=="}, "originalCommit": {"oid": "af686d84c9b4dee13d48702555d7246ce1de31ee"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM0MDQ0Mg==", "bodyText": "Perhaps downloadTileFile() should catch the error and rethrow an unchecked exception?\nWe need to try {} finally {} in downloadTileFile() to close the connection, so adding catch() should be easy. Wdyt?", "url": "https://github.com/google/ground-android/pull/392#discussion_r392340442", "createdAt": "2020-03-13T16:35:40Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/workers/TileDownloadWorker.java", "diffHunk": "@@ -42,106 +45,106 @@\n public class TileDownloadWorker extends Worker {\n   private static final String TAG = TileDownloadWorker.class.getSimpleName();\n \n-  private static final String TILE_ID = \"tile_id\";\n   private static final int BUFFER_SIZE = 4096;\n \n   private final Context context;\n   private final LocalDataStore localDataStore;\n-  private final String tileId;\n \n   public TileDownloadWorker(\n       @NonNull Context context, @NonNull WorkerParameters params, LocalDataStore localDataStore) {\n     super(context, params);\n     this.context = context;\n     this.localDataStore = localDataStore;\n-    this.tileId = params.getInputData().getString(TILE_ID);\n-  }\n-\n-  /** Creates input data for the TileDownloadWorker. */\n-  public static Data createInputData(String tilePrimaryKey) {\n-    return new Data.Builder().putString(TILE_ID, tilePrimaryKey).build();\n   }\n \n   /**\n    * Given a tile, downloads the given {@param tile}'s source file and saves it to the device's app\n    * storage. Optional HTTP request header {@param requestProperties} may be provided.\n    */\n-  private Result downloadTileFile(Tile tile, Optional<HashMap<String, String>> requestProperties) {\n-    try {\n-      URL url = new URL(tile.getUrl());\n-      HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n-\n-      if (requestProperties.isPresent()) {\n-        for (Map.Entry<String, String> property : requestProperties.get().entrySet()) {\n-          connection.setRequestProperty(property.getKey(), property.getValue());\n-        }\n-      }\n-\n-      connection.connect();\n-\n-      InputStream is = connection.getInputStream();\n-      FileOutputStream fos = context.openFileOutput(tile.getPath(), Context.MODE_PRIVATE);\n-      byte[] byteChunk = new byte[BUFFER_SIZE];\n-      int n;\n-\n-      while ((n = is.read(byteChunk)) > 0) {\n-        fos.write(byteChunk, 0, n);\n+  private void downloadTileFile(Tile tile, Map<String, String> requestProperties)\n+      throws IOException {\n+    URL url = new URL(tile.getUrl());\n+    HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n+\n+    if (!requestProperties.isEmpty()) {\n+      for (Map.Entry<String, String> property : requestProperties.entrySet()) {\n+        connection.setRequestProperty(property.getKey(), property.getValue());\n       }\n+    }\n \n-      is.close();\n-      fos.close();\n-\n-      localDataStore\n-          .insertOrUpdateTile(tile.toBuilder().setState(Tile.State.DOWNLOADED).build())\n-          .blockingAwait();\n-\n-      return Result.success();\n-\n-    } catch (IOException e) {\n-      Log.d(TAG, \"Failed to download and write file.\", e);\n+    connection.connect();\n \n-      localDataStore\n-          .insertOrUpdateTile(tile.toBuilder().setState(Tile.State.FAILED).build())\n-          .blockingAwait();\n+    InputStream is = connection.getInputStream();\n+    FileOutputStream fos = context.openFileOutput(tile.getPath(), Context.MODE_PRIVATE);\n+    byte[] byteChunk = new byte[BUFFER_SIZE];\n+    int n;\n \n-      return Result.failure();\n+    while ((n = is.read(byteChunk)) > 0) {\n+      fos.write(byteChunk, 0, n);\n     }\n-  }\n-\n-  /** Update a tile's state in the database and initiate a download of the tile source file. */\n-  private Result downloadTile(Tile tile) {\n-    localDataStore\n-        .insertOrUpdateTile(tile.toBuilder().setState(Tile.State.IN_PROGRESS).build())\n-        .blockingAwait();\n \n-    return downloadTileFile(tile, Optional.empty());\n+    is.close();\n+    fos.close();\n   }\n \n-  /** Resumes downloading the source for {@param tile} marked as {@code Tile.State.IN_PROGRESS}. */\n-  private Result resumeTileDownload(Tile tile) {\n-    File existingTileFile = new File(context.getFilesDir(), tile.getPath());\n+  /** Update a tile's state in the database and initiate a download of the tile source file. */\n+  private Completable downloadTile(Tile tile) {\n     HashMap<String, String> requestProperties = new HashMap<>();\n \n-    requestProperties.put(\"Range\", existingTileFile.length() + \"-\");\n+    if (tile.getState() == State.IN_PROGRESS) {\n+      File existingTileFile = new File(context.getFilesDir(), tile.getPath());\n+      requestProperties.put(\"Range\", existingTileFile.length() + \"-\");\n+    }\n \n-    return downloadTileFile(tile, Optional.of(requestProperties));\n+    return localDataStore\n+        .insertOrUpdateTile(tile.toBuilder().setState(Tile.State.IN_PROGRESS).build())\n+        .andThen(\n+            Completable.fromCallable(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg5MDg3MQ=="}, "originalCommit": {"oid": "af686d84c9b4dee13d48702555d7246ce1de31ee"}, "originalPosition": 134}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5faf9d060e1e51928b8de643a0ce8cc1420b6318", "author": {"user": {"login": "gino-m", "name": "Gino Miceli"}}, "url": "https://github.com/google/ground-android/commit/5faf9d060e1e51928b8de643a0ce8cc1420b6318", "committedDate": "2020-03-16T20:04:24Z", "message": "Merge branch 'master' into tile-worker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b867a867411a78ce2c11e26b232a8abf6f02686", "author": {"user": {"login": "scolsen", "name": "Scott Olsen"}}, "url": "https://github.com/google/ground-android/commit/2b867a867411a78ce2c11e26b232a8abf6f02686", "committedDate": "2020-03-18T14:59:06Z", "message": "Add findByState method to TileDao\n\nInstead of finding all tiles and filtering based on tile state, we now\nuse a findByState method to retrieve tiles with a given state from the\nlocal data store. This removes the need for filtering downstream."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a1013bff0b901870d613bfc2688bf9038cc23ba", "author": {"user": {"login": "scolsen", "name": "Scott Olsen"}}, "url": "https://github.com/google/ground-android/commit/4a1013bff0b901870d613bfc2688bf9038cc23ba", "committedDate": "2020-03-18T15:00:06Z", "message": "Merge branch 'tile-worker' of https://github.com/google/ground-android into tile-worker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b81c0bd31e2974257992d6142834064c648c1a6", "author": {"user": {"login": "scolsen", "name": "Scott Olsen"}}, "url": "https://github.com/google/ground-android/commit/2b81c0bd31e2974257992d6142834064c648c1a6", "committedDate": "2020-03-18T15:21:08Z", "message": "Catch expections in downloadTileFile; make runnable\n\nCompletable.fromRunnable can't take methods that throw checked\nexpections, however its semantics are clearer than our previous approach\n(using fromCallable and returning null). So, we now catch checked\nexceptions in downloadTileFile and throw a runtime execption so that we\ncan use `fromRunnable`.\n\nThis change contains a couple improvements to our `downloadTileFile`\napproach:\n\n- Catch checked IO execptions in the `downloadTileFileException`\n- Use a try-with-resources block to ensure connections and streams are\n  closed\n- Use fromRunnable instead of fromCompleteable.\n- Use Timber for logging."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c68a03b116adc994f12fe14715966e6023e1ee54", "author": {"user": {"login": "scolsen", "name": "Scott Olsen"}}, "url": "https://github.com/google/ground-android/commit/c68a03b116adc994f12fe14715966e6023e1ee54", "committedDate": "2020-03-18T15:26:42Z", "message": "Small quality of life fixes in TileDownloadWorker\n\n- Use Timber to log.\n- Use `Map` instead of `HashMap` in type declarations.\n- Minor formatting corrections."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eec1754ef6db6a242593b747c2a6c905b6ba95ff", "author": {"user": {"login": "scolsen", "name": "Scott Olsen"}}, "url": "https://github.com/google/ground-android/commit/eec1754ef6db6a242593b747c2a6c905b6ba95ff", "committedDate": "2020-03-18T15:34:09Z", "message": "TileDownloadWorker: Return success on null pending tiles\n\nSince a null set of pending tiles may indicate that work has already\nbeen performed by another worker, we return success and stop the worker\nimmediately."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29983a609b54ede8bdf6adacc3cfd5a0f0a0f2ba", "author": {"user": {"login": "gino-m", "name": "Gino Miceli"}}, "url": "https://github.com/google/ground-android/commit/29983a609b54ede8bdf6adacc3cfd5a0f0a0f2ba", "committedDate": "2020-03-18T15:52:56Z", "message": "Merge branch 'master' into tile-worker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7582c4faacdf0fd4baad51936a85c7a89769c096", "author": {"user": {"login": "scolsen", "name": "Scott Olsen"}}, "url": "https://github.com/google/ground-android/commit/7582c4faacdf0fd4baad51936a85c7a89769c096", "committedDate": "2020-03-18T16:08:11Z", "message": "Specify an appropriate file mode based on Tile state\n\nPreviously, our download code was erroneous\u2014in cases in which we attempt\nto resume a partially downloaded tile, we were using MODE_PRIVATE, which\noverwrites, instead of appending, the contents of the tile file,\nresulting in partial file contents.\n\nWe now set the correct mode (Append or Create) based on the state of the\ntile.\n\nI've also fixed the value of the range property, which must specify the\nunit used (bytes in our case).\n\nI've also added clarificatory comments on our approach to resuming tile\ndownloads and fixed some formatting errors.\n\nAlso fixed a small PMD error."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de5953f827699ffb70383cb6557d9a04904851cf", "author": {"user": {"login": "scolsen", "name": "Scott Olsen"}}, "url": "https://github.com/google/ground-android/commit/de5953f827699ffb70383cb6557d9a04904851cf", "committedDate": "2020-03-18T16:08:36Z", "message": "Merge branch 'tile-worker' of https://github.com/google/ground-android into tile-worker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "096707a799c7efe3cea8755e4cedb2ec445b2be2", "author": {"user": {"login": "scolsen", "name": "Scott Olsen"}}, "url": "https://github.com/google/ground-android/commit/096707a799c7efe3cea8755e4cedb2ec445b2be2", "committedDate": "2020-03-18T16:11:27Z", "message": "Remove TODO related to local ds `getPendingTiles` method\n\nWe decided not to do this, as it would result in extra work.\n\nThe current approach is fine."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8ebd4c739d297fa8883672bb51198040887b1b0", "author": {"user": {"login": "scolsen", "name": "Scott Olsen"}}, "url": "https://github.com/google/ground-android/commit/b8ebd4c739d297fa8883672bb51198040887b1b0", "committedDate": "2020-03-18T16:14:05Z", "message": "Fix formatting in RoomLocalDataStore"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDM1OTk5", "url": "https://github.com/google/ground-android/pull/392#pullrequestreview-377035999", "createdAt": "2020-03-18T16:30:56Z", "commit": {"oid": "de5953f827699ffb70383cb6557d9a04904851cf"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjozMDo1NlrOF4NPcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjozMDo1NlrOF4NPcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ4MTUyMQ==", "bodyText": "Naming nit: Since this both checking and downloads, maybe downloadIfNotFound? This can be done in a follow up though.", "url": "https://github.com/google/ground-android/pull/392#discussion_r394481521", "createdAt": "2020-03-18T16:30:56Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/workers/TileDownloadWorker.java", "diffHunk": "@@ -32,116 +35,140 @@\n import java.net.URL;\n import java.util.HashMap;\n import java.util.Map;\n-import java8.util.Optional;\n+import timber.log.Timber;\n \n /**\n  * A worker that downloads files to the device in the background. The target URL and file name are\n  * provided in a {@link Data} object. This worker should only run when the device has a network\n  * connection.\n  */\n public class TileDownloadWorker extends Worker {\n-  private static final String TAG = TileDownloadWorker.class.getSimpleName();\n-\n-  private static final String TILE_ID = \"tile_id\";\n   private static final int BUFFER_SIZE = 4096;\n \n   private final Context context;\n   private final LocalDataStore localDataStore;\n-  private final String tileId;\n+\n+  class TileDownloadException extends RuntimeException {\n+\n+    TileDownloadException(String msg, Throwable e) {\n+      super(msg, e);\n+    }\n+  }\n \n   public TileDownloadWorker(\n       @NonNull Context context, @NonNull WorkerParameters params, LocalDataStore localDataStore) {\n     super(context, params);\n     this.context = context;\n     this.localDataStore = localDataStore;\n-    this.tileId = params.getInputData().getString(TILE_ID);\n-  }\n-\n-  /** Creates input data for the TileDownloadWorker. */\n-  public static Data createInputData(String tilePrimaryKey) {\n-    return new Data.Builder().putString(TILE_ID, tilePrimaryKey).build();\n   }\n \n   /**\n    * Given a tile, downloads the given {@param tile}'s source file and saves it to the device's app\n    * storage. Optional HTTP request header {@param requestProperties} may be provided.\n    */\n-  private Result downloadTileFile(Tile tile, Optional<HashMap<String, String>> requestProperties) {\n+  private void downloadTileFile(Tile tile, Map<String, String> requestProperties)\n+      throws TileDownloadException {\n+\n+    int mode = Context.MODE_PRIVATE;\n+\n     try {\n       URL url = new URL(tile.getUrl());\n       HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n \n-      if (requestProperties.isPresent()) {\n-        for (Map.Entry<String, String> property : requestProperties.get().entrySet()) {\n+      if (!requestProperties.isEmpty()) {\n+        for (Map.Entry<String, String> property : requestProperties.entrySet()) {\n           connection.setRequestProperty(property.getKey(), property.getValue());\n         }\n+        mode = Context.MODE_APPEND;\n       }\n \n       connection.connect();\n \n-      InputStream is = connection.getInputStream();\n-      FileOutputStream fos = context.openFileOutput(tile.getPath(), Context.MODE_PRIVATE);\n-      byte[] byteChunk = new byte[BUFFER_SIZE];\n-      int n;\n+      try (InputStream is = connection.getInputStream();\n+          FileOutputStream fos = context.openFileOutput(tile.getPath(), mode)) {\n \n-      while ((n = is.read(byteChunk)) > 0) {\n-        fos.write(byteChunk, 0, n);\n-      }\n-\n-      is.close();\n-      fos.close();\n-\n-      localDataStore\n-          .insertOrUpdateTile(tile.toBuilder().setState(Tile.State.DOWNLOADED).build())\n-          .blockingAwait();\n-\n-      return Result.success();\n+        byte[] byteChunk = new byte[BUFFER_SIZE];\n+        int n;\n \n+        while ((n = is.read(byteChunk)) > 0) {\n+          fos.write(byteChunk, 0, n);\n+        }\n+      }\n     } catch (IOException e) {\n-      Log.d(TAG, \"Failed to download and write file.\", e);\n-\n-      localDataStore\n-          .insertOrUpdateTile(tile.toBuilder().setState(Tile.State.FAILED).build())\n-          .blockingAwait();\n-\n-      return Result.failure();\n+      throw new TileDownloadException(\"Failed to download tile\", e);\n     }\n   }\n \n   /** Update a tile's state in the database and initiate a download of the tile source file. */\n-  private Result downloadTile(Tile tile) {\n-    localDataStore\n-        .insertOrUpdateTile(tile.toBuilder().setState(Tile.State.IN_PROGRESS).build())\n-        .blockingAwait();\n-\n-    return downloadTileFile(tile, Optional.empty());\n-  }\n-\n-  /** Resumes downloading the source for {@param tile} marked as {@code Tile.State.IN_PROGRESS}. */\n-  private Result resumeTileDownload(Tile tile) {\n-    File existingTileFile = new File(context.getFilesDir(), tile.getPath());\n-    HashMap<String, String> requestProperties = new HashMap<>();\n-\n-    requestProperties.put(\"Range\", existingTileFile.length() + \"-\");\n+  private Completable downloadTile(Tile tile) {\n+    Map<String, String> requestProperties = new HashMap<>();\n+\n+    // To resume a download for an in progress tile, we use the HTTP Range request property.\n+    // The range property takes a range of bytes, the server returns the content of the resource\n+    // that corresponds to the given byte range.\n+    //\n+    // To resume a download, we get the current length, in bytes, of the file on disk.\n+    // appending '-' to the byte value tells the server to return the range of bytes from the given\n+    // byte value to the end of the file, e.g. '500-' returns contents starting at byte 500 to EOF.\n+    //\n+    // Note that length returns 0 when the file does not exist, so this correctly handles an edge\n+    // case whereby the local DB has a tile state of IN_PROGRESS but none of the file has been\n+    // downloaded yet (since then we'll fetch the range '0-', the entire file).\n+    //\n+    // For more info see: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range\n+    if (tile.getState() == State.IN_PROGRESS) {\n+      File existingTileFile = new File(context.getFilesDir(), tile.getPath());\n+      requestProperties.put(\"Range\", \"bytes=\" + existingTileFile.length() + \"-\");\n+    }\n \n-    return downloadTileFile(tile, Optional.of(requestProperties));\n+    return localDataStore\n+        .insertOrUpdateTile(tile.toBuilder().setState(Tile.State.IN_PROGRESS).build())\n+        .andThen(\n+            Completable.fromRunnable(\n+                () -> {\n+                  downloadTileFile(tile, requestProperties);\n+                }))\n+        .onErrorResumeNext(\n+            e -> {\n+              Timber.d(e, \"Failed to download tile: %s\", tile);\n+              return localDataStore.insertOrUpdateTile(\n+                  tile.toBuilder().setState(State.FAILED).build());\n+            })\n+        .andThen(\n+            localDataStore.insertOrUpdateTile(tile.toBuilder().setState(State.DOWNLOADED).build()));\n   }\n \n   /**\n    * Verifies that {@param tile} marked as {@code Tile.State.DOWNLOADED} in the local database still\n    * exists in the app's storage. If the tile's source file isn't present, initiates a download of\n    * source file.\n    */\n-  private Result checkDownload(Tile tile) {\n+  private Completable checkDownload(Tile tile) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de5953f827699ffb70383cb6557d9a04904851cf"}, "originalPosition": 183}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6373a716eeba077eeb6fd3da605a0eb441e18835", "author": {"user": {"login": "scolsen", "name": "Scott Olsen"}}, "url": "https://github.com/google/ground-android/commit/6373a716eeba077eeb6fd3da605a0eb441e18835", "committedDate": "2020-03-18T16:56:49Z", "message": "Rename checkDownload -> downloadIfNotFound"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDg4NDI2", "url": "https://github.com/google/ground-android/pull/392#pullrequestreview-377088426", "createdAt": "2020-03-18T17:32:43Z", "commit": {"oid": "6373a716eeba077eeb6fd3da605a0eb441e18835"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d32a1b5ccea340fb0fea692de4fad82fdf1af44", "author": {"user": {"login": "gino-m", "name": "Gino Miceli"}}, "url": "https://github.com/google/ground-android/commit/7d32a1b5ccea340fb0fea692de4fad82fdf1af44", "committedDate": "2020-03-18T17:32:49Z", "message": "Merge branch 'master' into tile-worker"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1736, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}