{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNjI3ODMw", "number": 311, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjo1ODoyMVrODYky0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzowMDowMlrODYk1EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDk1MjUwOnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/system/MediaUploadManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjo1ODoyMVrOFegsSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzowODoxN1rOFehAkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUzNzIyNQ==", "bodyText": "FYI for when you get to this, you can use our util RxTask to convert the task to a Single.", "url": "https://github.com/google/ground-android/pull/311#discussion_r367537225", "createdAt": "2020-01-16T16:58:21Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/system/MediaUploadManager.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.system;\n+\n+import android.graphics.Bitmap;\n+import android.net.Uri;\n+import android.util.Log;\n+import com.google.firebase.storage.FirebaseStorage;\n+import com.google.firebase.storage.StorageReference;\n+import com.google.firebase.storage.UploadTask;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import java.util.Objects;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+// TODO: Add column to Observation table for storing uploaded media urls\n+// TODO: Synced to remote db as well\n+@Singleton\n+public class MediaUploadManager {\n+\n+  private static final String TAG = MediaUploadManager.class.getName();\n+  private static final String MEDIA_ROOT_DIR = \"uploaded_media\";\n+  private final SimpleDateFormat dateFormat =\n+      new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.getDefault());\n+\n+  @Inject\n+  MediaUploadManager() {}\n+\n+  /** Returns a reference to the default Storage bucket. */\n+  private FirebaseStorage getStorage() {\n+    return FirebaseStorage.getInstance();\n+  }\n+\n+  /** Returns a reference to the root media dir. */\n+  private StorageReference getRootMediaDir() {\n+    return getStorage().getReference().child(MEDIA_ROOT_DIR);\n+  }\n+\n+  /**\n+   * Returns a reference to a object under the root media dir.\n+   *\n+   * @param fileName Name of the uploaded media\n+   */\n+  private StorageReference createReference(String fileName) {\n+    return getRootMediaDir().child(fileName + '-' + getFilenameSuffix());\n+  }\n+\n+  /** Converts current timestamp to a string to be used a suffix for uploading media. */\n+  private String getFilenameSuffix() {\n+    return dateFormat.format(new Date());\n+  }\n+\n+  /**\n+   * Upload file to Firebase Storage.\n+   */\n+  public void uploadMediaFromFile(File file, String fileName) {\n+    StorageReference reference = createReference(fileName);\n+    UploadTask task = reference.putFile(Uri.fromFile(file));\n+\n+    uploadMediaToFirebaseStorage(task, fileName);\n+    fetchDownloadUrl(reference, task);\n+  }\n+\n+  /** Upload bitmap to Firebase Storage. */\n+  public void uploadMediaFromBitmap(Bitmap bitmap, String fileName) {\n+    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+    bitmap.compress(Bitmap.CompressFormat.JPEG, 100, baos);\n+    byte[] data = baos.toByteArray();\n+\n+    StorageReference reference = createReference(fileName);\n+    UploadTask task = reference.putBytes(data);\n+\n+    uploadMediaToFirebaseStorage(task, fileName);\n+    fetchDownloadUrl(reference, task);\n+  }\n+\n+  private void uploadMediaToFirebaseStorage(UploadTask uploadTask, String fileName) {\n+    // TODO: Create UploadState enum and use RxJava to broadcast upload state globally.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12c602f6be67efc65b012e8a486ef2373d50f10e"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU0MjQxNg==", "bodyText": "Note added", "url": "https://github.com/google/ground-android/pull/311#discussion_r367542416", "createdAt": "2020-01-16T17:08:17Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/system/MediaUploadManager.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.system;\n+\n+import android.graphics.Bitmap;\n+import android.net.Uri;\n+import android.util.Log;\n+import com.google.firebase.storage.FirebaseStorage;\n+import com.google.firebase.storage.StorageReference;\n+import com.google.firebase.storage.UploadTask;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import java.util.Objects;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+// TODO: Add column to Observation table for storing uploaded media urls\n+// TODO: Synced to remote db as well\n+@Singleton\n+public class MediaUploadManager {\n+\n+  private static final String TAG = MediaUploadManager.class.getName();\n+  private static final String MEDIA_ROOT_DIR = \"uploaded_media\";\n+  private final SimpleDateFormat dateFormat =\n+      new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.getDefault());\n+\n+  @Inject\n+  MediaUploadManager() {}\n+\n+  /** Returns a reference to the default Storage bucket. */\n+  private FirebaseStorage getStorage() {\n+    return FirebaseStorage.getInstance();\n+  }\n+\n+  /** Returns a reference to the root media dir. */\n+  private StorageReference getRootMediaDir() {\n+    return getStorage().getReference().child(MEDIA_ROOT_DIR);\n+  }\n+\n+  /**\n+   * Returns a reference to a object under the root media dir.\n+   *\n+   * @param fileName Name of the uploaded media\n+   */\n+  private StorageReference createReference(String fileName) {\n+    return getRootMediaDir().child(fileName + '-' + getFilenameSuffix());\n+  }\n+\n+  /** Converts current timestamp to a string to be used a suffix for uploading media. */\n+  private String getFilenameSuffix() {\n+    return dateFormat.format(new Date());\n+  }\n+\n+  /**\n+   * Upload file to Firebase Storage.\n+   */\n+  public void uploadMediaFromFile(File file, String fileName) {\n+    StorageReference reference = createReference(fileName);\n+    UploadTask task = reference.putFile(Uri.fromFile(file));\n+\n+    uploadMediaToFirebaseStorage(task, fileName);\n+    fetchDownloadUrl(reference, task);\n+  }\n+\n+  /** Upload bitmap to Firebase Storage. */\n+  public void uploadMediaFromBitmap(Bitmap bitmap, String fileName) {\n+    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+    bitmap.compress(Bitmap.CompressFormat.JPEG, 100, baos);\n+    byte[] data = baos.toByteArray();\n+\n+    StorageReference reference = createReference(fileName);\n+    UploadTask task = reference.putBytes(data);\n+\n+    uploadMediaToFirebaseStorage(task, fileName);\n+    fetchDownloadUrl(reference, task);\n+  }\n+\n+  private void uploadMediaToFirebaseStorage(UploadTask uploadTask, String fileName) {\n+    // TODO: Create UploadState enum and use RxJava to broadcast upload state globally.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUzNzIyNQ=="}, "originalCommit": {"oid": "12c602f6be67efc65b012e8a486ef2373d50f10e"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDk1ODI0OnYy", "diffSide": "RIGHT", "path": "gnd/src/main/java/com/google/android/gnd/system/MediaUploadManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzowMDowMlrOFegwAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzoxMToyOVrOFehHPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUzODE3Nw==", "bodyText": "Since this class interacts with the remote data store, and not Android SDK specifically, perhaps it belongs in ..persistence.remote? Also, I'd name it something Firestore specific. Later we'll need to extract a generic interface so that we have an internal API to switch providers if necessary.", "url": "https://github.com/google/ground-android/pull/311#discussion_r367538177", "createdAt": "2020-01-16T17:00:02Z", "author": {"login": "gino-m"}, "path": "gnd/src/main/java/com/google/android/gnd/system/MediaUploadManager.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.system;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12c602f6be67efc65b012e8a486ef2373d50f10e"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU0NDEyNg==", "bodyText": "Done", "url": "https://github.com/google/ground-android/pull/311#discussion_r367544126", "createdAt": "2020-01-16T17:11:29Z", "author": {"login": "shobhitagarwal1612"}, "path": "gnd/src/main/java/com/google/android/gnd/system/MediaUploadManager.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.system;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUzODE3Nw=="}, "originalCommit": {"oid": "12c602f6be67efc65b012e8a486ef2373d50f10e"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2581, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}