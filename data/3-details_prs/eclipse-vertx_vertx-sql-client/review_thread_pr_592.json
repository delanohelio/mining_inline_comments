{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNTQwNjAw", "number": 592, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToxNDozMFrODyHnCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToxNzoyMlrODyHsZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODgwMDczOnYy", "diffSide": "RIGHT", "path": "vertx-db2-client/src/test/java/io/vertx/db2client/DB2ErrorMessageTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToxNDozMFrOGF-n4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOTo1MjozN1rOGG01-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMjA4MQ==", "bodyText": "for these types of assertions instead of doing assertTrue(expected == actual, message) you can do assertEquals(expected, actual, message) and then you don't need to include the boiler plate text \"should have been X but was Y\" in each message, because it will be included automatically in the event of a failure, and then any message supplied (optional) will be appended to that", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/592#discussion_r408922081", "createdAt": "2020-04-15T15:14:30Z", "author": {"login": "aguibert"}, "path": "vertx-db2-client/src/test/java/io/vertx/db2client/DB2ErrorMessageTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright (C) 2020 IBM Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.vertx.db2client;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.db2client.impl.drda.SQLState;\n+import io.vertx.db2client.impl.drda.SqlCode;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class DB2ErrorMessageTest extends DB2TestBase {\n+\t\n+\t@Test\n+\t@Ignore\t\t// TODO - Need to figure out why this is blowing up in parseACCSECreply()\n+\tpublic void testConnectInvalidDatabase(TestContext ctx) {\n+\t  options.setDatabase(\"DOES_NOT_EXIST\");\n+\t  DB2Connection.connect(vertx, options, ctx.asyncAssertFailure(err -> {\n+\t\t  ctx.assertTrue(err instanceof DB2Exception, \"The error message returned is of the wrong type.  It should be a DB2Exception, but it was of type \" + err.getClass().getSimpleName());\n+//\t\t  DB2Exception ex = (DB2Exception) err;\n+//\t\t  ctx.assertTrue(ex.getMessage().contains(\"Invalid database\"), \"The SQL error message returned is not correct.  It should have contained \\\"Invalid database\\\", but instead it said \\\"\" + ex.getMessage() + \"\\\"\");\n+\t  }));\n+\t}\n+\t\n+\t@Test\n+\tpublic void testConnectInvalidUsername(TestContext ctx) {\n+\t  options.setUser(\"INVALID_USER_FOR_TESTING\");\n+\t  DB2Connection.connect(vertx, options, ctx.asyncAssertFailure(err -> {\n+\t\t  ctx.assertTrue(err instanceof DB2Exception, \"The error message returned is of the wrong type.  It should be a DB2Exception, but it was of type \" + err.getClass().getSimpleName());\n+\t\t  DB2Exception ex = (DB2Exception) err;\n+\t\t  ctx.assertTrue(ex.getMessage().contains(\"Invalid credentials\"), \"The SQL error message returned is not correct.  It should have contained \\\"Invalid credentials\\\", but instead it said \\\"\" + ex.getMessage() + \"\\\"\");\n+\t\t  ctx.assertTrue(ex.getErrorCode() == SqlCode.INVALID_CREDENTIALS, \"The SQL error code returned is not correct.  It should have been \" + SqlCode.INVALID_CREDENTIALS + \", but it was \" + ex.getErrorCode());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45913d7a267b9e240c770a3181496913ed3a6776"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgxMDQyNQ==", "bodyText": "Thanks Andy.  I have made these changes and re-pushed the code with just my changes in it.", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/592#discussion_r409810425", "createdAt": "2020-04-16T19:52:37Z", "author": {"login": "gjwatts"}, "path": "vertx-db2-client/src/test/java/io/vertx/db2client/DB2ErrorMessageTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright (C) 2020 IBM Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.vertx.db2client;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.db2client.impl.drda.SQLState;\n+import io.vertx.db2client.impl.drda.SqlCode;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class DB2ErrorMessageTest extends DB2TestBase {\n+\t\n+\t@Test\n+\t@Ignore\t\t// TODO - Need to figure out why this is blowing up in parseACCSECreply()\n+\tpublic void testConnectInvalidDatabase(TestContext ctx) {\n+\t  options.setDatabase(\"DOES_NOT_EXIST\");\n+\t  DB2Connection.connect(vertx, options, ctx.asyncAssertFailure(err -> {\n+\t\t  ctx.assertTrue(err instanceof DB2Exception, \"The error message returned is of the wrong type.  It should be a DB2Exception, but it was of type \" + err.getClass().getSimpleName());\n+//\t\t  DB2Exception ex = (DB2Exception) err;\n+//\t\t  ctx.assertTrue(ex.getMessage().contains(\"Invalid database\"), \"The SQL error message returned is not correct.  It should have contained \\\"Invalid database\\\", but instead it said \\\"\" + ex.getMessage() + \"\\\"\");\n+\t  }));\n+\t}\n+\t\n+\t@Test\n+\tpublic void testConnectInvalidUsername(TestContext ctx) {\n+\t  options.setUser(\"INVALID_USER_FOR_TESTING\");\n+\t  DB2Connection.connect(vertx, options, ctx.asyncAssertFailure(err -> {\n+\t\t  ctx.assertTrue(err instanceof DB2Exception, \"The error message returned is of the wrong type.  It should be a DB2Exception, but it was of type \" + err.getClass().getSimpleName());\n+\t\t  DB2Exception ex = (DB2Exception) err;\n+\t\t  ctx.assertTrue(ex.getMessage().contains(\"Invalid credentials\"), \"The SQL error message returned is not correct.  It should have contained \\\"Invalid credentials\\\", but instead it said \\\"\" + ex.getMessage() + \"\\\"\");\n+\t\t  ctx.assertTrue(ex.getErrorCode() == SqlCode.INVALID_CREDENTIALS, \"The SQL error code returned is not correct.  It should have been \" + SqlCode.INVALID_CREDENTIALS + \", but it was \" + ex.getErrorCode());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMjA4MQ=="}, "originalCommit": {"oid": "45913d7a267b9e240c770a3181496913ed3a6776"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODgxNDQ1OnYy", "diffSide": "RIGHT", "path": "vertx-db2-client/src/test/java/io/vertx/db2client/DB2ErrorMessageTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToxNzoyMlrOGF-wgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMTo1NDoxMFrOGG4hnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNDI4OQ==", "bodyText": "If we were to validate early in the blank username/password case, we would have it blow up immediately when setUser/setPassword is called, instead of waiting until the user tries to connect with the options", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/592#discussion_r408924289", "createdAt": "2020-04-15T15:17:22Z", "author": {"login": "aguibert"}, "path": "vertx-db2-client/src/test/java/io/vertx/db2client/DB2ErrorMessageTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright (C) 2020 IBM Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.vertx.db2client;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.db2client.impl.drda.SQLState;\n+import io.vertx.db2client.impl.drda.SqlCode;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class DB2ErrorMessageTest extends DB2TestBase {\n+\t\n+\t@Test\n+\t@Ignore\t\t// TODO - Need to figure out why this is blowing up in parseACCSECreply()\n+\tpublic void testConnectInvalidDatabase(TestContext ctx) {\n+\t  options.setDatabase(\"DOES_NOT_EXIST\");\n+\t  DB2Connection.connect(vertx, options, ctx.asyncAssertFailure(err -> {\n+\t\t  ctx.assertTrue(err instanceof DB2Exception, \"The error message returned is of the wrong type.  It should be a DB2Exception, but it was of type \" + err.getClass().getSimpleName());\n+//\t\t  DB2Exception ex = (DB2Exception) err;\n+//\t\t  ctx.assertTrue(ex.getMessage().contains(\"Invalid database\"), \"The SQL error message returned is not correct.  It should have contained \\\"Invalid database\\\", but instead it said \\\"\" + ex.getMessage() + \"\\\"\");\n+\t  }));\n+\t}\n+\t\n+\t@Test\n+\tpublic void testConnectInvalidUsername(TestContext ctx) {\n+\t  options.setUser(\"INVALID_USER_FOR_TESTING\");\n+\t  DB2Connection.connect(vertx, options, ctx.asyncAssertFailure(err -> {\n+\t\t  ctx.assertTrue(err instanceof DB2Exception, \"The error message returned is of the wrong type.  It should be a DB2Exception, but it was of type \" + err.getClass().getSimpleName());\n+\t\t  DB2Exception ex = (DB2Exception) err;\n+\t\t  ctx.assertTrue(ex.getMessage().contains(\"Invalid credentials\"), \"The SQL error message returned is not correct.  It should have contained \\\"Invalid credentials\\\", but instead it said \\\"\" + ex.getMessage() + \"\\\"\");\n+\t\t  ctx.assertTrue(ex.getErrorCode() == SqlCode.INVALID_CREDENTIALS, \"The SQL error code returned is not correct.  It should have been \" + SqlCode.INVALID_CREDENTIALS + \", but it was \" + ex.getErrorCode());\n+\t\t  ctx.assertTrue(ex.getSqlState() == SQLState.NET_CONNECT_AUTH_FAILED, \"The SQL state returned is not correct.  It should have been \" + SQLState.NET_CONNECT_AUTH_FAILED + \", but it was \" + ex.getSqlState());\n+\t\t  System.out.println(err.getMessage());\n+\t  }));\n+\t}\n+\t\n+\t@Test\n+\tpublic void testConnectInvalidPassword(TestContext ctx) {\n+\t\toptions.setPassword(\"INVALID_PASSWORD_FOR_TESTING\");\n+\t\t  DB2Connection.connect(vertx, options, ctx.asyncAssertFailure(err -> {\n+\t\t\t  ctx.assertTrue(err instanceof DB2Exception, \"The error message returned is of the wrong type.  It should be a DB2Exception, but it was of type \" + err.getClass().getSimpleName());\n+\t\t\t  DB2Exception ex = (DB2Exception) err;\n+\t\t\t  ctx.assertTrue(ex.getMessage().contains(\"Invalid credentials\"), \"The SQL error message returned is not correct.  It should have contained \\\"Invalid credentials\\\", but instead it said \\\"\" + ex.getMessage() + \"\\\"\");\n+\t\t\t  ctx.assertTrue(ex.getErrorCode() == SqlCode.INVALID_CREDENTIALS, \"The SQL error code returned is not correct.  It should have been \" + SqlCode.INVALID_CREDENTIALS + \", but it was \" + ex.getErrorCode());\n+\t\t\t  ctx.assertTrue(ex.getSqlState() == SQLState.NET_CONNECT_AUTH_FAILED, \"The SQL state returned is not correct.  It should have been \" + SQLState.NET_CONNECT_AUTH_FAILED + \", but it was \" + ex.getSqlState());\n+\t\t\t  System.out.println(err.getMessage());\n+\t\t  }));\n+\t}\n+\t\n+\t@Test\n+\t@Ignore  // TODO - @GJW I want to validate we would always want to fail a test for a blank user name.  If so, we want to catch this *before* we connect to the DB2 server\n+\tpublic void testConnectBlankUsername(TestContext ctx) {\n+\t  options.setUser(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45913d7a267b9e240c770a3181496913ed3a6776"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg3MDc1MQ==", "bodyText": "I will handle that in a future PR.", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/592#discussion_r409870751", "createdAt": "2020-04-16T21:54:10Z", "author": {"login": "gjwatts"}, "path": "vertx-db2-client/src/test/java/io/vertx/db2client/DB2ErrorMessageTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright (C) 2020 IBM Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.vertx.db2client;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.db2client.impl.drda.SQLState;\n+import io.vertx.db2client.impl.drda.SqlCode;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class DB2ErrorMessageTest extends DB2TestBase {\n+\t\n+\t@Test\n+\t@Ignore\t\t// TODO - Need to figure out why this is blowing up in parseACCSECreply()\n+\tpublic void testConnectInvalidDatabase(TestContext ctx) {\n+\t  options.setDatabase(\"DOES_NOT_EXIST\");\n+\t  DB2Connection.connect(vertx, options, ctx.asyncAssertFailure(err -> {\n+\t\t  ctx.assertTrue(err instanceof DB2Exception, \"The error message returned is of the wrong type.  It should be a DB2Exception, but it was of type \" + err.getClass().getSimpleName());\n+//\t\t  DB2Exception ex = (DB2Exception) err;\n+//\t\t  ctx.assertTrue(ex.getMessage().contains(\"Invalid database\"), \"The SQL error message returned is not correct.  It should have contained \\\"Invalid database\\\", but instead it said \\\"\" + ex.getMessage() + \"\\\"\");\n+\t  }));\n+\t}\n+\t\n+\t@Test\n+\tpublic void testConnectInvalidUsername(TestContext ctx) {\n+\t  options.setUser(\"INVALID_USER_FOR_TESTING\");\n+\t  DB2Connection.connect(vertx, options, ctx.asyncAssertFailure(err -> {\n+\t\t  ctx.assertTrue(err instanceof DB2Exception, \"The error message returned is of the wrong type.  It should be a DB2Exception, but it was of type \" + err.getClass().getSimpleName());\n+\t\t  DB2Exception ex = (DB2Exception) err;\n+\t\t  ctx.assertTrue(ex.getMessage().contains(\"Invalid credentials\"), \"The SQL error message returned is not correct.  It should have contained \\\"Invalid credentials\\\", but instead it said \\\"\" + ex.getMessage() + \"\\\"\");\n+\t\t  ctx.assertTrue(ex.getErrorCode() == SqlCode.INVALID_CREDENTIALS, \"The SQL error code returned is not correct.  It should have been \" + SqlCode.INVALID_CREDENTIALS + \", but it was \" + ex.getErrorCode());\n+\t\t  ctx.assertTrue(ex.getSqlState() == SQLState.NET_CONNECT_AUTH_FAILED, \"The SQL state returned is not correct.  It should have been \" + SQLState.NET_CONNECT_AUTH_FAILED + \", but it was \" + ex.getSqlState());\n+\t\t  System.out.println(err.getMessage());\n+\t  }));\n+\t}\n+\t\n+\t@Test\n+\tpublic void testConnectInvalidPassword(TestContext ctx) {\n+\t\toptions.setPassword(\"INVALID_PASSWORD_FOR_TESTING\");\n+\t\t  DB2Connection.connect(vertx, options, ctx.asyncAssertFailure(err -> {\n+\t\t\t  ctx.assertTrue(err instanceof DB2Exception, \"The error message returned is of the wrong type.  It should be a DB2Exception, but it was of type \" + err.getClass().getSimpleName());\n+\t\t\t  DB2Exception ex = (DB2Exception) err;\n+\t\t\t  ctx.assertTrue(ex.getMessage().contains(\"Invalid credentials\"), \"The SQL error message returned is not correct.  It should have contained \\\"Invalid credentials\\\", but instead it said \\\"\" + ex.getMessage() + \"\\\"\");\n+\t\t\t  ctx.assertTrue(ex.getErrorCode() == SqlCode.INVALID_CREDENTIALS, \"The SQL error code returned is not correct.  It should have been \" + SqlCode.INVALID_CREDENTIALS + \", but it was \" + ex.getErrorCode());\n+\t\t\t  ctx.assertTrue(ex.getSqlState() == SQLState.NET_CONNECT_AUTH_FAILED, \"The SQL state returned is not correct.  It should have been \" + SQLState.NET_CONNECT_AUTH_FAILED + \", but it was \" + ex.getSqlState());\n+\t\t\t  System.out.println(err.getMessage());\n+\t\t  }));\n+\t}\n+\t\n+\t@Test\n+\t@Ignore  // TODO - @GJW I want to validate we would always want to fail a test for a blank user name.  If so, we want to catch this *before* we connect to the DB2 server\n+\tpublic void testConnectBlankUsername(TestContext ctx) {\n+\t  options.setUser(\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNDI4OQ=="}, "originalCommit": {"oid": "45913d7a267b9e240c770a3181496913ed3a6776"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4479, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}