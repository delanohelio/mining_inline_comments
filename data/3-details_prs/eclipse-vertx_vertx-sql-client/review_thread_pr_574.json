{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5NjEzNDYw", "number": 574, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMDoyMzozMFrODwWLIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMjozMzoyOFrODwlrYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDIxNTM2OnYy", "diffSide": "LEFT", "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/Transaction.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMDoyMzozMFrOGDSzuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMTo1MTo1MFrOGDqs0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEwNzA2NQ==", "bodyText": "Can you clarify is it necessary that Transaction does not extend SqlClient anymore? I think it becomes more complicated since users have to use the connection API directly if doing some operations on a transaction.", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/574#discussion_r406107065", "createdAt": "2020-04-09T10:23:30Z", "author": {"login": "BillyYccc"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/Transaction.java", "diffHunk": "@@ -26,7 +26,7 @@\n  * A transaction that allows to control the transaction and receive events.\n  */\n @VertxGen\n-public interface Transaction extends SqlClient {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "060c1dec62332a2862d03f187ab7d6adb4d17ede"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjExNDMzNA==", "bodyText": "I removed it for several reasons:\n\nI wanted to have the ability to have Transaction extends Future<Void> instead of having a result() field and extending SqlClient was preventing this (unless we annotated SqlClient with @VertxGen(concrete = false))\nwe might add in the future the withTransaction method to SqlClient and in this case it does not make sense to have withTransaction on Transaction in this situation", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/574#discussion_r406114334", "createdAt": "2020-04-09T10:37:34Z", "author": {"login": "vietj"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/Transaction.java", "diffHunk": "@@ -26,7 +26,7 @@\n  * A transaction that allows to control the transaction and receive events.\n  */\n @VertxGen\n-public interface Transaction extends SqlClient {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEwNzA2NQ=="}, "originalCommit": {"oid": "060c1dec62332a2862d03f187ab7d6adb4d17ede"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE2Mjc4OA==", "bodyText": "how about duplicating the two interfaces query and preparedQuery on Transaction so that we can use Transaction instread of using the connection reference to schedule a command.", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/574#discussion_r406162788", "createdAt": "2020-04-09T12:17:43Z", "author": {"login": "BillyYccc"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/Transaction.java", "diffHunk": "@@ -26,7 +26,7 @@\n  * A transaction that allows to control the transaction and receive events.\n  */\n @VertxGen\n-public interface Transaction extends SqlClient {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEwNzA2NQ=="}, "originalCommit": {"oid": "060c1dec62332a2862d03f187ab7d6adb4d17ede"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE2NjU3OA==", "bodyText": "I believe Transaction should remain only there for managing transactions.", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/574#discussion_r406166578", "createdAt": "2020-04-09T12:25:02Z", "author": {"login": "vietj"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/Transaction.java", "diffHunk": "@@ -26,7 +26,7 @@\n  * A transaction that allows to control the transaction and receive events.\n  */\n @VertxGen\n-public interface Transaction extends SqlClient {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEwNzA2NQ=="}, "originalCommit": {"oid": "060c1dec62332a2862d03f187ab7d6adb4d17ede"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE2ODkyNQ==", "bodyText": "in other words, having Transaction extending SqlClient was a design mistake I did and I would like to fix it", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/574#discussion_r406168925", "createdAt": "2020-04-09T12:29:18Z", "author": {"login": "vietj"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/Transaction.java", "diffHunk": "@@ -26,7 +26,7 @@\n  * A transaction that allows to control the transaction and receive events.\n  */\n @VertxGen\n-public interface Transaction extends SqlClient {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEwNzA2NQ=="}, "originalCommit": {"oid": "060c1dec62332a2862d03f187ab7d6adb4d17ede"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ5NDEwNA==", "bodyText": "ok, it seems that we could also remove Transaction#prepare in this interface?", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/574#discussion_r406494104", "createdAt": "2020-04-09T21:41:54Z", "author": {"login": "BillyYccc"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/Transaction.java", "diffHunk": "@@ -26,7 +26,7 @@\n  * A transaction that allows to control the transaction and receive events.\n  */\n @VertxGen\n-public interface Transaction extends SqlClient {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEwNzA2NQ=="}, "originalCommit": {"oid": "060c1dec62332a2862d03f187ab7d6adb4d17ede"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ5Njg5Mw==", "bodyText": "yes totally, I think I forgot that and I will remove it, thanks for noticing", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/574#discussion_r406496893", "createdAt": "2020-04-09T21:48:10Z", "author": {"login": "vietj"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/Transaction.java", "diffHunk": "@@ -26,7 +26,7 @@\n  * A transaction that allows to control the transaction and receive events.\n  */\n @VertxGen\n-public interface Transaction extends SqlClient {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEwNzA2NQ=="}, "originalCommit": {"oid": "060c1dec62332a2862d03f187ab7d6adb4d17ede"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ5ODUxMw==", "bodyText": "I will also likely remove the abortHandler as it is now replaced with the fact that the transaction has a Future that gives the overral transaction result and thus onComplete can be called instead.", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/574#discussion_r406498513", "createdAt": "2020-04-09T21:51:50Z", "author": {"login": "vietj"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/Transaction.java", "diffHunk": "@@ -26,7 +26,7 @@\n  * A transaction that allows to control the transaction and receive events.\n  */\n @VertxGen\n-public interface Transaction extends SqlClient {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEwNzA2NQ=="}, "originalCommit": {"oid": "060c1dec62332a2862d03f187ab7d6adb4d17ede"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjc1MTU3OnYy", "diffSide": "RIGHT", "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/TransactionImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMjozMTo0MFrOGDrmSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMjozMTo0MFrOGDrmSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUxMzIyNQ==", "bodyText": "the field could be removed and use completionPromise.future() instead.", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/574#discussion_r406513225", "createdAt": "2020-04-09T22:31:40Z", "author": {"login": "BillyYccc"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/TransactionImpl.java", "diffHunk": "@@ -209,24 +218,12 @@ public void rollback(Handler<AsyncResult<Void>> handler) {\n     }\n   }\n \n-  @Override\n-  public void close() {\n-    rollback();\n-  }\n-\n-  @Override\n-  public io.vertx.sqlclient.Transaction abortHandler(Handler<Void> handler) {\n-    failedHandler = handler;\n-    return this;\n-  }\n-\n-  private ScheduledCommand<Void> doQuery(TxCommand cmd, Promise<Void> handler) {\n+  private <R> ScheduledCommand<R> doQuery(TxCommand<R> cmd, Promise<R> handler) {\n     return new ScheduledCommand<>(cmd, handler);\n   }\n-  \n+\n   @Override\n-  boolean autoCommit() {\n-    return false;\n+  public Future<Void> completion() {\n+    return completionFuture;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4797965a02ce7ee9e917b03be64ae2245f389582"}, "originalPosition": 243}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjc1NTU0OnYy", "diffSide": "RIGHT", "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/TransactionImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMjozMzoyOFrOGDrouA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMjozNjowOVrOGDrsWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUxMzg0OA==", "bodyText": "we can let the TransactionRollbackException include the failure context here, like new TransactionRollbackException(ar.cause).", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/574#discussion_r406513848", "createdAt": "2020-04-09T22:33:28Z", "author": {"login": "BillyYccc"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/TransactionImpl.java", "diffHunk": "@@ -58,21 +64,61 @@\n     }\n   }\n \n-  @Override\n-  protected <T> Promise<T> promise() {\n-    return context.promise();\n+  Future<Transaction> begin() {\n+    PromiseInternal<Transaction> promise = context.promise(this::afterBegin);\n+    ScheduledCommand<Transaction> b = doQuery(new TxCommand<>(TxCommand.Kind.BEGIN, this), promise);\n+    doSchedule(b.cmd, b.handler);\n+    return promise.future();\n   }\n \n-  @Override\n-  protected <T> Promise<T> promise(Handler<AsyncResult<T>> handler) {\n-    return context.promise(handler);\n+  private <R> void doSchedule(CommandBase<R> cmd, Handler<AsyncResult<R>> handler) {\n+    connection.schedule(cmd, context.promise(handler));\n   }\n \n-  private <R> void doSchedule(CommandBase<R> cmd, Handler<AsyncResult<R>> handler) {\n-    conn.schedule(cmd, context.promise(handler));\n+  private <R> void wrapAndSchedule(ScheduledCommand<R> scheduled) {\n+    CommandBase<R> cmd = scheduled.cmd;\n+    if (isComplete(cmd)) {\n+      status = ST_COMPLETED;\n+      doSchedule(cmd, ar -> {\n+        if (ar.succeeded()) {\n+          if (cmd == COMMIT) {\n+            completionPromise.tryComplete();\n+          } else {\n+            completionPromise.tryFail(TransactionRollbackException.INSTANCE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4797965a02ce7ee9e917b03be64ae2245f389582"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUxNDc3Nw==", "bodyText": "my bad, it's not possible here", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/574#discussion_r406514777", "createdAt": "2020-04-09T22:36:09Z", "author": {"login": "BillyYccc"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/TransactionImpl.java", "diffHunk": "@@ -58,21 +64,61 @@\n     }\n   }\n \n-  @Override\n-  protected <T> Promise<T> promise() {\n-    return context.promise();\n+  Future<Transaction> begin() {\n+    PromiseInternal<Transaction> promise = context.promise(this::afterBegin);\n+    ScheduledCommand<Transaction> b = doQuery(new TxCommand<>(TxCommand.Kind.BEGIN, this), promise);\n+    doSchedule(b.cmd, b.handler);\n+    return promise.future();\n   }\n \n-  @Override\n-  protected <T> Promise<T> promise(Handler<AsyncResult<T>> handler) {\n-    return context.promise(handler);\n+  private <R> void doSchedule(CommandBase<R> cmd, Handler<AsyncResult<R>> handler) {\n+    connection.schedule(cmd, context.promise(handler));\n   }\n \n-  private <R> void doSchedule(CommandBase<R> cmd, Handler<AsyncResult<R>> handler) {\n-    conn.schedule(cmd, context.promise(handler));\n+  private <R> void wrapAndSchedule(ScheduledCommand<R> scheduled) {\n+    CommandBase<R> cmd = scheduled.cmd;\n+    if (isComplete(cmd)) {\n+      status = ST_COMPLETED;\n+      doSchedule(cmd, ar -> {\n+        if (ar.succeeded()) {\n+          if (cmd == COMMIT) {\n+            completionPromise.tryComplete();\n+          } else {\n+            completionPromise.tryFail(TransactionRollbackException.INSTANCE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUxMzg0OA=="}, "originalCommit": {"oid": "4797965a02ce7ee9e917b03be64ae2245f389582"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4469, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}