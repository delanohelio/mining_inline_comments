{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MTk3MzA5", "number": 625, "title": "Tracing support", "bodyText": "Vert.x 4 supports tracing.\nFixes #653", "createdAt": "2020-05-13T08:18:49Z", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/625", "merged": true, "mergeCommit": {"oid": "05ed43bd168738ffdacc45530f6d7de36902cac3"}, "closed": true, "closedAt": "2020-05-24T13:47:21Z", "author": {"login": "vietj"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjua15gH2gAyNDE3MTk3MzA5OmY5NzkyZjgyNmFlYTNlY2YxNGU4YWNiNDJhOGM3ZmQ3NWIwYmFlYTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABckW2x1AH2gAyNDE3MTk3MzA5OjMyZWJiNDZiZjY3YmVlNjliM2NkM2Q5MmRhYjA3YTNlM2Q3MmI5ZGI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f9792f826aea3ecf14e8acb42a8c7fd75b0baea0", "author": {"user": {"login": "vietj", "name": "Julien Viet"}}, "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/f9792f826aea3ecf14e8acb42a8c7fd75b0baea0", "committedDate": "2020-05-22T08:58:23Z", "message": "Move all query command execution method in SqlResultBuilder"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "09a63f186694fcbfa266d18e5e7a4723388b3fc9", "author": {"user": {"login": "vietj", "name": "Julien Viet"}}, "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/09a63f186694fcbfa266d18e5e7a4723388b3fc9", "committedDate": "2020-05-13T08:17:43Z", "message": "Take a stab at tracing"}, "afterCommit": {"oid": "196411df0d07c3bc1d9d431384eca7fdbeb71e33", "author": {"user": {"login": "vietj", "name": "Julien Viet"}}, "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/196411df0d07c3bc1d9d431384eca7fdbeb71e33", "committedDate": "2020-05-22T10:07:08Z", "message": "Initial implementation of SQL client tracing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "624a111d7badfdc61c2d48f0090f49ce06fb5237", "author": {"user": {"login": "vietj", "name": "Julien Viet"}}, "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/624a111d7badfdc61c2d48f0090f49ce06fb5237", "committedDate": "2020-05-22T10:17:59Z", "message": "Initial implementation of SQL client tracing"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "196411df0d07c3bc1d9d431384eca7fdbeb71e33", "author": {"user": {"login": "vietj", "name": "Julien Viet"}}, "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/196411df0d07c3bc1d9d431384eca7fdbeb71e33", "committedDate": "2020-05-22T10:07:08Z", "message": "Initial implementation of SQL client tracing"}, "afterCommit": {"oid": "624a111d7badfdc61c2d48f0090f49ce06fb5237", "author": {"user": {"login": "vietj", "name": "Julien Viet"}}, "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/624a111d7badfdc61c2d48f0090f49ce06fb5237", "committedDate": "2020-05-22T10:17:59Z", "message": "Initial implementation of SQL client tracing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "680b3291f4337a589877766b214b7348049fccb5", "author": {"user": {"login": "vietj", "name": "Julien Viet"}}, "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/680b3291f4337a589877766b214b7348049fccb5", "committedDate": "2020-05-22T11:38:53Z", "message": "Minor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2OTY2MTE2", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/625#pullrequestreview-416966116", "createdAt": "2020-05-22T14:42:45Z", "commit": {"oid": "680b3291f4337a589877766b214b7348049fccb5"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNDo0Mjo0NVrOGZZuTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTozMTowM1rOGZbVRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI4OTAzNg==", "bodyText": "do we have to add the prepared statement parameters?(we could make it optional for saving the large payload transmission)", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/625#discussion_r429289036", "createdAt": "2020-05-22T14:42:45Z", "author": {"login": "BillyYccc"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/tracing/QueryRequest.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package io.vertx.sqlclient.impl.tracing;\n+\n+import io.vertx.sqlclient.Tuple;\n+\n+import java.util.List;\n+\n+/**\n+ * A traceable query.\n+ */\n+public class QueryRequest {\n+\n+  final SqlTracer tracer;\n+  final String sql;\n+  final List<Tuple> tuples;\n+\n+  public QueryRequest(SqlTracer tracer, String sql, List<Tuple> tuples) {\n+    this.tracer = tracer;\n+    this.sql = sql;\n+    this.tuples = tuples;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "680b3291f4337a589877766b214b7348049fccb5"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI5MDA2OA==", "bodyText": "the host might be an unresolved hostname,  we need to use SocketAddress to represent ip:port, hostname, ip, etc... more accurately.", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/625#discussion_r429290068", "createdAt": "2020-05-22T14:44:25Z", "author": {"login": "BillyYccc"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/tracing/SqlTracer.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package io.vertx.sqlclient.impl.tracing;\n+\n+import io.vertx.core.impl.ContextInternal;\n+import io.vertx.core.spi.tracing.TagExtractor;\n+import io.vertx.core.spi.tracing.VertxTracer;\n+import io.vertx.sqlclient.SqlConnectOptions;\n+import io.vertx.sqlclient.Tuple;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+/**\n+ * Tracer for SQL client, wrapping the generic tracer.\n+ */\n+public class SqlTracer {\n+\n+  enum RequestTags {\n+\n+    // Generic\n+    PEER_ADDRESS(\"peer.address\", q -> q.tracer.address),\n+    PEER_SERVICE(\"peer.service\", q -> \"todo\"),\n+    SPAN_KIND(\"span.kind\", q -> \"client\"),\n+\n+    // DB\n+    // See https://github.com/opentracing/specification/blob/master/semantic_conventions.md\n+\n+    DB_USER(\"db.user\", q -> q.tracer.user),\n+    DB_INSTANCE(\"db.instance\", q -> q.tracer.database),\n+    DB_STATEMENT(\"db.statement\", QueryRequest::sql),\n+    DB_TYPE(\"db.type\", q -> \"sql\");\n+\n+    final String name;\n+    final Function<QueryRequest, String> fn;\n+\n+    RequestTags(String name, Function<QueryRequest, String> fn) {\n+      this.name = name;\n+      this.fn = fn;\n+    }\n+  }\n+\n+  private static final TagExtractor<QueryRequest> REQUEST_TAG_EXTRACTOR = new TagExtractor<QueryRequest>() {\n+\n+    private final RequestTags[] TAGS = RequestTags.values();\n+\n+    @Override\n+    public int len(QueryRequest obj) {\n+      return TAGS.length;\n+    }\n+    @Override\n+    public String name(QueryRequest obj, int index) {\n+      return TAGS[index].name;\n+    }\n+    @Override\n+    public String value(QueryRequest obj, int index) {\n+      return TAGS[index].fn.apply(obj);\n+    }\n+  };\n+\n+  private final VertxTracer tracer;\n+  private final String address;\n+  private final String host;\n+  private final int port;\n+  private final String user;\n+  private final String database;\n+\n+  public SqlTracer(VertxTracer tracer, SqlConnectOptions options) {\n+    this.tracer = tracer;\n+    this.address = options.getHost() + \":\" + options.getPort();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "680b3291f4337a589877766b214b7348049fccb5"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxNDQyMw==", "bodyText": "peer.service is not used for now", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/625#discussion_r429314423", "createdAt": "2020-05-22T15:29:11Z", "author": {"login": "BillyYccc"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/tracing/SqlTracer.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package io.vertx.sqlclient.impl.tracing;\n+\n+import io.vertx.core.impl.ContextInternal;\n+import io.vertx.core.spi.tracing.TagExtractor;\n+import io.vertx.core.spi.tracing.VertxTracer;\n+import io.vertx.sqlclient.SqlConnectOptions;\n+import io.vertx.sqlclient.Tuple;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+/**\n+ * Tracer for SQL client, wrapping the generic tracer.\n+ */\n+public class SqlTracer {\n+\n+  enum RequestTags {\n+\n+    // Generic\n+    PEER_ADDRESS(\"peer.address\", q -> q.tracer.address),\n+    PEER_SERVICE(\"peer.service\", q -> \"todo\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "680b3291f4337a589877766b214b7348049fccb5"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxNTM5Nw==", "bodyText": "in the assertions order of the expected value and actual value is reversed which reports wrong error messages when tests fail.", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/625#discussion_r429315397", "createdAt": "2020-05-22T15:31:03Z", "author": {"login": "BillyYccc"}, "path": "vertx-pg-client/src/test/java/io/vertx/pgclient/TracingTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package io.vertx.pgclient;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Future;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.VertxOptions;\n+import io.vertx.core.spi.VertxTracerFactory;\n+import io.vertx.core.spi.tracing.TagExtractor;\n+import io.vertx.core.spi.tracing.VertxTracer;\n+import io.vertx.core.tracing.TracingOptions;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.sqlclient.PoolOptions;\n+import io.vertx.sqlclient.RowSet;\n+import io.vertx.sqlclient.SqlClient;\n+import io.vertx.sqlclient.Tuple;\n+import io.vertx.sqlclient.impl.tracing.QueryRequest;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.BiConsumer;\n+import java.util.function.Function;\n+\n+public class TracingTest extends PgTestBase {\n+\n+  Vertx vertx;\n+  VertxTracer tracer;\n+  PgPool pool;\n+\n+  @Before\n+  public void setup() throws Exception {\n+    super.setup();\n+    vertx = Vertx.vertx(new VertxOptions().setTracingOptions(\n+      new TracingOptions().setEnabled(true).setFactory(tracingOptions -> new VertxTracer() {\n+        @Override\n+        public Object sendRequest(Context context, Object request, String operation, BiConsumer headers, TagExtractor tagExtractor) {\n+          return tracer.sendRequest(context, request, operation, headers, tagExtractor);\n+        }\n+\n+        @Override\n+        public void receiveResponse(Context context, Object response, Object payload, Throwable failure, TagExtractor tagExtractor) {\n+          tracer.receiveResponse(context, response, payload, failure, tagExtractor);\n+        }\n+      }))\n+    );\n+    pool = PgPool.pool(vertx, options, new PoolOptions());\n+  }\n+\n+  @After\n+  public void teardown(TestContext ctx) {\n+    vertx.close(ctx.asyncAssertSuccess());\n+  }\n+\n+  @Test\n+  public void testTraceSimpleQuery(TestContext ctx) {\n+    String sql = \"SELECT * FROM Fortune WHERE id=1\";\n+    testTraceQuery(ctx, sql, Collections.emptyList(), conn -> conn.query(sql).execute());\n+  }\n+\n+  @Test\n+  public void testTracePreparedQuery(TestContext ctx) {\n+    String sql = \"SELECT * FROM Fortune WHERE id=$1\";\n+    Tuple tuple = Tuple.of(1);\n+    testTraceQuery(ctx, sql, Collections.singletonList(tuple), conn -> conn.preparedQuery(sql).execute(tuple));\n+  }\n+\n+  @Test\n+  public void testTraceBatchQuery(TestContext ctx) {\n+    String sql = \"SELECT * FROM Fortune WHERE id=$1\";\n+    List<Tuple> tuples = Arrays.asList(Tuple.of(1), Tuple.of(2));\n+    testTraceQuery(ctx, sql, tuples, conn -> conn.preparedQuery(sql).executeBatch(tuples));\n+  }\n+\n+  public void testTraceQuery(TestContext ctx, String expectedSql, List<Tuple> expectedTuples, Function<SqlClient, Future<?>> fn) {\n+    AtomicBoolean called = new AtomicBoolean();\n+    AtomicReference<Context> requestContext = new AtomicReference<>();\n+    AtomicReference<Context> responseContext = new AtomicReference<>();\n+    Object expectedPayload = new Object();\n+    tracer = new VertxTracer<Object, Object>() {\n+      @Override\n+      public <R> Object sendRequest(Context context, R request, String operation, BiConsumer<String, String> headers, TagExtractor<R> tagExtractor) {\n+        QueryRequest query = (QueryRequest) request;\n+        ctx.assertEquals(query.sql(), expectedSql);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "680b3291f4337a589877766b214b7348049fccb5"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MjYxMzgw", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/625#pullrequestreview-417261380", "createdAt": "2020-05-23T08:26:29Z", "commit": {"oid": "680b3291f4337a589877766b214b7348049fccb5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "899deeafc3869268e20d3324020f853337352ea8", "author": {"user": {"login": "vietj", "name": "Julien Viet"}}, "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/899deeafc3869268e20d3324020f853337352ea8", "committedDate": "2020-05-23T09:28:06Z", "message": "Remove peer.service that does not make any sense here"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c950b72051d734d1aab730042afd315f7d9ad093", "author": {"user": {"login": "vietj", "name": "Julien Viet"}}, "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/c950b72051d734d1aab730042afd315f7d9ad093", "committedDate": "2020-05-23T09:29:55Z", "message": "Revert some assertEquals operands to get correct failure reporting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ada9240b11eaa58407f8a56450f669c47e6b246e", "author": {"user": {"login": "vietj", "name": "Julien Viet"}}, "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/ada9240b11eaa58407f8a56450f669c47e6b246e", "committedDate": "2020-05-23T09:36:09Z", "message": "A few internal renaming"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32ebb46bf67bee69b3cd3d92dab07a3e3d72b9db", "author": {"user": {"login": "vietj", "name": "Julien Viet"}}, "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/32ebb46bf67bee69b3cd3d92dab07a3e3d72b9db", "committedDate": "2020-05-24T08:05:06Z", "message": "Rename SqlTracer -> QueryTracer"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1626, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}