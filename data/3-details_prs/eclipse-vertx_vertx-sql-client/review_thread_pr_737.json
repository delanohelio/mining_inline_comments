{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4OTY2OTk2", "number": 737, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQwODozMzoxNVrOF8QJSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xNVQwODoyNDozMVrOGKcn-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk4NzIzNDAwOnYy", "diffSide": "RIGHT", "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/HexSequence.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQwODozMzoxNVrOJYAesA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQwODo0MjowMVrOJYBf9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTE1MzQ1Ng==", "bodyText": "this should avoid using an intermediary string. Instead it should allocate the byte[] with the right length and poke the corresponding value in it.", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/737#discussion_r629153456", "createdAt": "2021-05-10T08:33:15Z", "author": {"login": "vietj"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/HexSequence.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0\n+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+ */\n+\n+package io.vertx.sqlclient.impl;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Locale;\n+\n+/**\n+ * A sequence of hex values, each terminated by a zero byte.\n+ *\n+ * The hex number is left padded to start with at least three 0\n+ * and to have at least seven digits.\n+ *\n+ * After 000FFFFFFFFFFFFFFFF it will restart with 0000000.\n+ *\n+ * The generated sequence:\n+ * <pre>\n+ * 0000000\n+ * 0000001\n+ * 0000002\n+ * ...\n+ * 000FFFF\n+ * 00010000\n+ * ...\n+ * 000FFFFF\n+ * 000100000\n+ * ...\n+ * 000FFFFFF\n+ * 0001000000\n+ * ...\n+ * 000FFFFFFFFFFFFFFFF\n+ * </pre>\n+ */\n+public class HexSequence {\n+  private long i;\n+\n+  /**\n+   * Start the sequence with 0000000.\n+   */\n+  public HexSequence() {\n+    i = 0;\n+  }\n+\n+  /**\n+   * @param startValue unsigned long for the first value returned by {@link #next()}\n+   */\n+  public HexSequence(long startValue) {\n+    i = startValue;\n+  }\n+\n+  /**\n+   * @return a copy of the next hex value, terminated by a zero byte.\n+   */\n+  public byte[] next() {\n+    String hex = Long.toUnsignedString(i, 16).toUpperCase(Locale.ROOT);\n+    i++;\n+    switch (hex.length()) {\n+    case 1: return (\"000000\" + hex + \"\\0\").getBytes(StandardCharsets.US_ASCII);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7934684555cc6181bf8db20106f95f7536325ae3"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTE2NDEyMg==", "bodyText": "for the hex conversion we can rely on branchless conversion https://gist.github.com/stryku/b8177a66f79540f912ca8b7909ffccda", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/737#discussion_r629164122", "createdAt": "2021-05-10T08:38:56Z", "author": {"login": "vietj"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/HexSequence.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0\n+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+ */\n+\n+package io.vertx.sqlclient.impl;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Locale;\n+\n+/**\n+ * A sequence of hex values, each terminated by a zero byte.\n+ *\n+ * The hex number is left padded to start with at least three 0\n+ * and to have at least seven digits.\n+ *\n+ * After 000FFFFFFFFFFFFFFFF it will restart with 0000000.\n+ *\n+ * The generated sequence:\n+ * <pre>\n+ * 0000000\n+ * 0000001\n+ * 0000002\n+ * ...\n+ * 000FFFF\n+ * 00010000\n+ * ...\n+ * 000FFFFF\n+ * 000100000\n+ * ...\n+ * 000FFFFFF\n+ * 0001000000\n+ * ...\n+ * 000FFFFFFFFFFFFFFFF\n+ * </pre>\n+ */\n+public class HexSequence {\n+  private long i;\n+\n+  /**\n+   * Start the sequence with 0000000.\n+   */\n+  public HexSequence() {\n+    i = 0;\n+  }\n+\n+  /**\n+   * @param startValue unsigned long for the first value returned by {@link #next()}\n+   */\n+  public HexSequence(long startValue) {\n+    i = startValue;\n+  }\n+\n+  /**\n+   * @return a copy of the next hex value, terminated by a zero byte.\n+   */\n+  public byte[] next() {\n+    String hex = Long.toUnsignedString(i, 16).toUpperCase(Locale.ROOT);\n+    i++;\n+    switch (hex.length()) {\n+    case 1: return (\"000000\" + hex + \"\\0\").getBytes(StandardCharsets.US_ASCII);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTE1MzQ1Ng=="}, "originalCommit": {"oid": "7934684555cc6181bf8db20106f95f7536325ae3"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTE3MDE2NQ==", "bodyText": "although I'm not sure it's worth optimizing using branchless", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/737#discussion_r629170165", "createdAt": "2021-05-10T08:42:01Z", "author": {"login": "vietj"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/HexSequence.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0\n+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+ */\n+\n+package io.vertx.sqlclient.impl;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Locale;\n+\n+/**\n+ * A sequence of hex values, each terminated by a zero byte.\n+ *\n+ * The hex number is left padded to start with at least three 0\n+ * and to have at least seven digits.\n+ *\n+ * After 000FFFFFFFFFFFFFFFF it will restart with 0000000.\n+ *\n+ * The generated sequence:\n+ * <pre>\n+ * 0000000\n+ * 0000001\n+ * 0000002\n+ * ...\n+ * 000FFFF\n+ * 00010000\n+ * ...\n+ * 000FFFFF\n+ * 000100000\n+ * ...\n+ * 000FFFFFF\n+ * 0001000000\n+ * ...\n+ * 000FFFFFFFFFFFFFFFF\n+ * </pre>\n+ */\n+public class HexSequence {\n+  private long i;\n+\n+  /**\n+   * Start the sequence with 0000000.\n+   */\n+  public HexSequence() {\n+    i = 0;\n+  }\n+\n+  /**\n+   * @param startValue unsigned long for the first value returned by {@link #next()}\n+   */\n+  public HexSequence(long startValue) {\n+    i = startValue;\n+  }\n+\n+  /**\n+   * @return a copy of the next hex value, terminated by a zero byte.\n+   */\n+  public byte[] next() {\n+    String hex = Long.toUnsignedString(i, 16).toUpperCase(Locale.ROOT);\n+    i++;\n+    switch (hex.length()) {\n+    case 1: return (\"000000\" + hex + \"\\0\").getBytes(StandardCharsets.US_ASCII);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTE1MzQ1Ng=="}, "originalCommit": {"oid": "7934684555cc6181bf8db20106f95f7536325ae3"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDEzNjA2MDYyOnYy", "diffSide": "RIGHT", "path": "vertx-pg-client/src/main/java/io/vertx/pgclient/impl/codec/PrepareStatementCommandCodec.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xNVQwODoyMDo1OFrOJtYJEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xNVQxMDo1NjoyNlrOJtfRWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MTU2MTIzNA==", "bodyText": "we should use a constant for this", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/737#discussion_r651561234", "createdAt": "2021-06-15T08:20:58Z", "author": {"login": "vietj"}, "path": "vertx-pg-client/src/main/java/io/vertx/pgclient/impl/codec/PrepareStatementCommandCodec.java", "diffHunk": "@@ -38,7 +38,7 @@ void encode(PgEncoder encoder) {\n       statement = encoder.nextStatementName();\n     } else {\n       // Use unnamed prepared statements that don't need to be closed\n-      statement = 0L;\n+      statement = new byte[] { 0 };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37fe67c1a1325a9614882bc481ea9e8c44207a6b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MTY3ODA0Mg==", "bodyText": "Replaced by EMPTY_STRING constant.", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/737#discussion_r651678042", "createdAt": "2021-06-15T10:56:26Z", "author": {"login": "julianladisch"}, "path": "vertx-pg-client/src/main/java/io/vertx/pgclient/impl/codec/PrepareStatementCommandCodec.java", "diffHunk": "@@ -38,7 +38,7 @@ void encode(PgEncoder encoder) {\n       statement = encoder.nextStatementName();\n     } else {\n       // Use unnamed prepared statements that don't need to be closed\n-      statement = 0L;\n+      statement = new byte[] { 0 };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MTU2MTIzNA=="}, "originalCommit": {"oid": "37fe67c1a1325a9614882bc481ea9e8c44207a6b"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDEzNjA2OTg3OnYy", "diffSide": "RIGHT", "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/StringLongSequence.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xNVQwODoyMjo0MlrOJtYOsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xNVQxMDo1NjozNlrOJtfRsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MTU2MjY3Mg==", "bodyText": "is that class still used ?", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/737#discussion_r651562672", "createdAt": "2021-06-15T08:22:42Z", "author": {"login": "vietj"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/StringLongSequence.java", "diffHunk": "@@ -21,6 +21,9 @@\n \n   private short count;\n \n+  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37fe67c1a1325a9614882bc481ea9e8c44207a6b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MTY3ODEyOA==", "bodyText": "No, removed.", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/737#discussion_r651678128", "createdAt": "2021-06-15T10:56:36Z", "author": {"login": "julianladisch"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/StringLongSequence.java", "diffHunk": "@@ -21,6 +21,9 @@\n \n   private short count;\n \n+  /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MTU2MjY3Mg=="}, "originalCommit": {"oid": "37fe67c1a1325a9614882bc481ea9e8c44207a6b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDEzNjA3OTI4OnYy", "diffSide": "RIGHT", "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/HexSequence.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xNVQwODoyNDozMVrOJtYUWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xN1QyMjoyMDo1OVrOJvtYiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MTU2NDEyMA==", "bodyText": "@franz1981 do you mind having a look ?", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/737#discussion_r651564120", "createdAt": "2021-06-15T08:24:31Z", "author": {"login": "vietj"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/HexSequence.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright (c) 2021 Contributors to the Eclipse Foundation\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0\n+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+ */\n+\n+package io.vertx.sqlclient.impl;\n+\n+/**\n+ * A sequence of hex values, each terminated by a zero byte.\n+ *\n+ * <p>The hex number is left padded to start with at least three 0\n+ * and to have at least seven digits.\n+ *\n+ * <p>After 000FFFFFFFFFFFFFFFF it will restart with 0000000.\n+ *\n+ * <p>The generated sequence:\n+ * <pre>\n+ * 0000000\n+ * 0000001\n+ * 0000002\n+ * ...\n+ * 000FFFF\n+ * 00010000\n+ * ...\n+ * 000FFFFF\n+ * 000100000\n+ * ...\n+ * 000FFFFFF\n+ * 0001000000\n+ * ...\n+ * 000FFFFFFFFFFFFFFFF\n+ * </pre>\n+ */\n+public class HexSequence {\n+  private long i;\n+\n+  /**\n+   * Start the sequence with 0000000.\n+   */\n+  public HexSequence() {\n+    i = 0;\n+  }\n+\n+  /**\n+   * @param startValue unsigned long for the first value returned by {@link #next()}\n+   */\n+  public HexSequence(long startValue) {\n+    i = startValue;\n+  }\n+\n+  private static byte toHex(long c) {\n+    if (c < 10) {\n+      return (byte)('0' + c);\n+    } else {\n+      return (byte)('A' + c - 10);\n+    }\n+  }\n+\n+  /**\n+   * A copy of the next hex value, terminated by a zero byte.\n+   */\n+  public byte[] next() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37fe67c1a1325a9614882bc481ea9e8c44207a6b"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MTU2Nzk0Ng==", "bodyText": "correctness or perf?", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/737#discussion_r651567946", "createdAt": "2021-06-15T08:29:10Z", "author": {"login": "franz1981"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/HexSequence.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright (c) 2021 Contributors to the Eclipse Foundation\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0\n+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+ */\n+\n+package io.vertx.sqlclient.impl;\n+\n+/**\n+ * A sequence of hex values, each terminated by a zero byte.\n+ *\n+ * <p>The hex number is left padded to start with at least three 0\n+ * and to have at least seven digits.\n+ *\n+ * <p>After 000FFFFFFFFFFFFFFFF it will restart with 0000000.\n+ *\n+ * <p>The generated sequence:\n+ * <pre>\n+ * 0000000\n+ * 0000001\n+ * 0000002\n+ * ...\n+ * 000FFFF\n+ * 00010000\n+ * ...\n+ * 000FFFFF\n+ * 000100000\n+ * ...\n+ * 000FFFFFF\n+ * 0001000000\n+ * ...\n+ * 000FFFFFFFFFFFFFFFF\n+ * </pre>\n+ */\n+public class HexSequence {\n+  private long i;\n+\n+  /**\n+   * Start the sequence with 0000000.\n+   */\n+  public HexSequence() {\n+    i = 0;\n+  }\n+\n+  /**\n+   * @param startValue unsigned long for the first value returned by {@link #next()}\n+   */\n+  public HexSequence(long startValue) {\n+    i = startValue;\n+  }\n+\n+  private static byte toHex(long c) {\n+    if (c < 10) {\n+      return (byte)('0' + c);\n+    } else {\n+      return (byte)('A' + c - 10);\n+    }\n+  }\n+\n+  /**\n+   * A copy of the next hex value, terminated by a zero byte.\n+   */\n+  public byte[] next() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MTU2NDEyMA=="}, "originalCommit": {"oid": "37fe67c1a1325a9614882bc481ea9e8c44207a6b"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDAwNjE3NA==", "bodyText": "correctness, it's not critical", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/737#discussion_r654006174", "createdAt": "2021-06-17T22:20:44Z", "author": {"login": "vietj"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/HexSequence.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright (c) 2021 Contributors to the Eclipse Foundation\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0\n+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+ */\n+\n+package io.vertx.sqlclient.impl;\n+\n+/**\n+ * A sequence of hex values, each terminated by a zero byte.\n+ *\n+ * <p>The hex number is left padded to start with at least three 0\n+ * and to have at least seven digits.\n+ *\n+ * <p>After 000FFFFFFFFFFFFFFFF it will restart with 0000000.\n+ *\n+ * <p>The generated sequence:\n+ * <pre>\n+ * 0000000\n+ * 0000001\n+ * 0000002\n+ * ...\n+ * 000FFFF\n+ * 00010000\n+ * ...\n+ * 000FFFFF\n+ * 000100000\n+ * ...\n+ * 000FFFFFF\n+ * 0001000000\n+ * ...\n+ * 000FFFFFFFFFFFFFFFF\n+ * </pre>\n+ */\n+public class HexSequence {\n+  private long i;\n+\n+  /**\n+   * Start the sequence with 0000000.\n+   */\n+  public HexSequence() {\n+    i = 0;\n+  }\n+\n+  /**\n+   * @param startValue unsigned long for the first value returned by {@link #next()}\n+   */\n+  public HexSequence(long startValue) {\n+    i = startValue;\n+  }\n+\n+  private static byte toHex(long c) {\n+    if (c < 10) {\n+      return (byte)('0' + c);\n+    } else {\n+      return (byte)('A' + c - 10);\n+    }\n+  }\n+\n+  /**\n+   * A copy of the next hex value, terminated by a zero byte.\n+   */\n+  public byte[] next() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MTU2NDEyMA=="}, "originalCommit": {"oid": "37fe67c1a1325a9614882bc481ea9e8c44207a6b"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDAwNjQwOA==", "bodyText": "but it does not mean it should be slower than necessary :-)", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/737#discussion_r654006408", "createdAt": "2021-06-17T22:20:59Z", "author": {"login": "vietj"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/HexSequence.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright (c) 2021 Contributors to the Eclipse Foundation\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0\n+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+ */\n+\n+package io.vertx.sqlclient.impl;\n+\n+/**\n+ * A sequence of hex values, each terminated by a zero byte.\n+ *\n+ * <p>The hex number is left padded to start with at least three 0\n+ * and to have at least seven digits.\n+ *\n+ * <p>After 000FFFFFFFFFFFFFFFF it will restart with 0000000.\n+ *\n+ * <p>The generated sequence:\n+ * <pre>\n+ * 0000000\n+ * 0000001\n+ * 0000002\n+ * ...\n+ * 000FFFF\n+ * 00010000\n+ * ...\n+ * 000FFFFF\n+ * 000100000\n+ * ...\n+ * 000FFFFFF\n+ * 0001000000\n+ * ...\n+ * 000FFFFFFFFFFFFFFFF\n+ * </pre>\n+ */\n+public class HexSequence {\n+  private long i;\n+\n+  /**\n+   * Start the sequence with 0000000.\n+   */\n+  public HexSequence() {\n+    i = 0;\n+  }\n+\n+  /**\n+   * @param startValue unsigned long for the first value returned by {@link #next()}\n+   */\n+  public HexSequence(long startValue) {\n+    i = startValue;\n+  }\n+\n+  private static byte toHex(long c) {\n+    if (c < 10) {\n+      return (byte)('0' + c);\n+    } else {\n+      return (byte)('A' + c - 10);\n+    }\n+  }\n+\n+  /**\n+   * A copy of the next hex value, terminated by a zero byte.\n+   */\n+  public byte[] next() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MTU2NDEyMA=="}, "originalCommit": {"oid": "37fe67c1a1325a9614882bc481ea9e8c44207a6b"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4400, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}