{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMDA1MTE0", "number": 554, "title": "Fluent queries", "bodyText": "Fluent queries based on the earlier proposal.\nThe refactor is done in several steps:\n\nPreparedQuery becomes PreparedQuery<T>, collector overload are removed in favor of collecting(Collector) method, a new mapping(Function<Row, T>) is added\n\n// Before\nconn\n   .prepare(SQL)\n   .flatMap(preparedQuery -> preparedQuery.execute(tuple, collector);\n\n// After\nconn\n   .prepare(SQL)\n   .flatMap(preparedQuery -> preparedQuery\n      .collecting(collector)\n      .execute(tuple);\n\nAdd a fluent Query interface used in SqlClient\n\n// Before\nclient.query(SQL, collector)\nclient.preparedQuery(SQL, tuple, collector)\nclient.preparedBatch(SQL, tuples, collector)\n\n// After\nclient.createQuery(SQL).collecting(collector).execute();\nclient.createPreparedQuery(SQL).collecting(collector).execute(tuple);\nclient.createPreparedQuery(SQL).collecting(collector).batch(tuples);\nNotes:\n\nPreparedQuery does not extend it (on purpose), only the collector variants are removed\ncreatePreparedQuery returns a Query and not a PreparedQuery (on purpose)\nno createPreparedBatch instead the batch method on Query\n\n\nRename PreparedQuery to PreparedStatement, nothing fancy here, the idea is that prepare returns something that is not a query but an explicit prepared statement\n\n// Before\nconn.prepare(ar -> {\n  if (ar.succeeded()) {\n    PreparedQuery<RowSet<Row>> prepared = ar.result();\n  }\n});\n\n// After\nconn.prepare(ar -> {\n  if (ar.succeeded()) {\n    PreparedStatement<RowSet<Row>> prepared = ar.result();\n  }\n});\n\nRemove PreparedStatement methods for query execution and instead provide a query() method returning Query<RowSet<Row>>, PreparedStatement is not generic anymore as this is now carried by the Query returned by query()\n\n// Before\nconn.prepare().flatMap(preparedQuery -> preparedQuery.execute(tuple));\nconn.prepare().flatMap(preparedQuery -> preparedQuery.execute(collector, tuple));\n\n// After\nconn\n   .prepare()\n   .flatMap(preparedStatement -> \n      preparedStatement\n         .query()\n         .execute(tuple));\nconn\n   .prepare()\n   .flatMap(preparedStatement -> \n      preparedStatement\n         .query()\n         .collecting(collector)\n         .execute(tuple));\n\n(not done) rename SqlClient#createQuery to SqlClient#query, same for createPreparedQuery\n\n// Before\nclient.query(SQL);\nclient.createQuery(SQL).execute();\n\n// After\nclient.query(SQL).execute();", "createdAt": "2020-03-24T13:54:20Z", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/554", "merged": true, "mergeCommit": {"oid": "68469731cdd522bc963799e548ddd45bd18c62c6"}, "closed": true, "closedAt": "2020-03-25T15:37:03Z", "author": {"login": "vietj"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQ0FDNgFqTM4MDM1NzkwOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRHhvXgFqTM4MTE0NTQ2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMzU3OTA5", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/554#pullrequestreview-380357909", "createdAt": "2020-03-24T14:22:39Z", "commit": {"oid": "883f92d3351935788df1a89fc3f832179732a90c"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDoyMjo0MFrOF6ylaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo0MzoyNVrOF6zlTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5MDUwNA==", "bodyText": "can these changes really be ported to 3.9? Isn't this a breaking change that would need to wait until 4.0?", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/554#discussion_r397190504", "createdAt": "2020-03-24T14:22:40Z", "author": {"login": "aguibert"}, "path": "vertx-mssql-client/src/main/java/io/vertx/mssqlclient/MSSQLConnection.java", "diffHunk": "@@ -84,56 +81,25 @@ static void connect(Vertx vertx, MSSQLConnectOptions connectOptions, Handler<Asy\n   @Override\n   MSSQLConnection preparedQuery(String s, Handler<AsyncResult<RowSet<Row>>> handler);\n \n-  /**\n-   * {@inheritDoc}\n-   */\n-  @Fluent\n-  @GenIgnore\n-  @Override\n-  <R> MSSQLConnection preparedQuery(String s, Collector<Row, ?, R> collector, Handler<AsyncResult<SqlResult<R>>> handler);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "883f92d3351935788df1a89fc3f832179732a90c"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwMDkyMA==", "bodyText": "I think these one-shot operations should be removed also. I know these are intended as \"convenience methods\" but my initial impression of using this library was I found it very confusing there were so many different ways to do the same thing. IMO we should only provide the user 1 API path where possible.\nThe only benefit of these one-shot commands is that it is slightly less typing:\n// One-shot way\npool.preparedQuery(SQL, ar -> this::processRows);\n\n// Regular way\npool.createPreparedQuery().execute(ar -> this::processRows);\nIf we get rid of the one-shot methods, it will significantly reduce the API surface and make the overall API much quicker for users to grasp.", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/554#discussion_r397200920", "createdAt": "2020-03-24T14:35:50Z", "author": {"login": "aguibert"}, "path": "vertx-mssql-client/src/main/java/io/vertx/mssqlclient/MSSQLPool.java", "diffHunk": "@@ -60,56 +58,25 @@ static MSSQLPool pool(Vertx vertx, MSSQLConnectOptions connectOptions, PoolOptio\n   @Override\n   MSSQLPool preparedQuery(String s, Handler<AsyncResult<RowSet<Row>>> handler);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "883f92d3351935788df1a89fc3f832179732a90c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwNjg2MA==", "bodyText": "Since cursor() and createStream() are both different flavors of executing queries, it seems that they would be better suited on the Query interface.\nBasically there are 4 ways that a user can retrieve results from their query:\n\nRowSet (default way)\nFunction<Row,U>\nCollector\nCursor (prepared statement only)\nRowStream (prepared statement only)\n\nI think it would be good if we only had 1 way of executing a query (via execute on the Query interface) and the result type could be selected prior to execution. For example:\n\n(nothing needed to get the default RowSet)\nQuery#mapping(Function<Row,U>)\nQuery#collecting(Collector)\nQuery#streaming(int fetchSize) (proposed)\nQuery#withCursor() (proposed)", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/554#discussion_r397206860", "createdAt": "2020-03-24T14:43:25Z", "author": {"login": "aguibert"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/PreparedStatement.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright (C) 2017 Julien Viet\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.vertx.sqlclient;\n+\n+import io.vertx.core.Future;\n+import io.vertx.sqlclient.impl.ArrayTuple;\n+import io.vertx.codegen.annotations.VertxGen;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+\n+/**\n+ * A prepared statement, the statement is pre-compiled and\n+ * it's more efficient to execute the statement for multiple times.\n+ * In addition, this kind of statement provides protection against SQL injection attacks.\n+ *\n+ * @author <a href=\"mailto:julien@julienviet.com\">Julien Viet</a>\n+ */\n+@VertxGen\n+public interface PreparedStatement {\n+\n+  /**\n+   * Create a query.\n+   *\n+   * @return the query\n+   */\n+  Query<RowSet<Row>> query();\n+\n+  /**\n+   * @return create a query cursor with a {@code fetch} size and empty arguments\n+   */\n+  default Cursor cursor() {\n+    return cursor(ArrayTuple.EMPTY);\n+  }\n+\n+  /**\n+   * Create a cursor with the provided {@code arguments}.\n+   *\n+   * @param args the list of arguments\n+   * @return the query\n+   */\n+  Cursor cursor(Tuple args);\n+\n+  /**\n+   * Execute the prepared query with a cursor and createStream the result. The createStream opens a cursor\n+   * with a {@code fetch} size to fetch the results.\n+   * <p/>\n+   * Note: this requires to be in a transaction, since cursors require it.\n+   *\n+   * @param fetch the cursor fetch size\n+   * @param args the prepared query arguments\n+   * @return the createStream\n+   */\n+  RowStream<Row> createStream(int fetch, Tuple args);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "883f92d3351935788df1a89fc3f832179732a90c"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNDA1MTE0", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/554#pullrequestreview-380405114", "createdAt": "2020-03-24T15:09:13Z", "commit": {"oid": "883f92d3351935788df1a89fc3f832179732a90c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTowOToxM1rOF602lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTowOToxM1rOF602lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIyNzY3MQ==", "bodyText": "I'm afraid users would be confused here especially those who have used client side prepared statement before, if someone writes code like this\nconn.createQuery(\"SELECT * FROM users WHERE id = ?\")\n        .execute(Tuple.of(1));\n\nThey will get wrong sql syntax error but what they expect is executing a query with a param.\nAnd even this kind of query can also be executed\nconn.createQuery(\"SELECT * FROM users\")\n        .execute(Tuple.of(1, 2, 3));", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/554#discussion_r397227671", "createdAt": "2020-03-24T15:09:13Z", "author": {"login": "BillyYccc"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/QueryImpl.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright (C) 2017 Julien Viet\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.vertx.sqlclient.impl;\n+\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Future;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Promise;\n+import io.vertx.sqlclient.Query;\n+import io.vertx.sqlclient.Row;\n+import io.vertx.sqlclient.RowSet;\n+import io.vertx.sqlclient.SqlResult;\n+import io.vertx.sqlclient.Tuple;\n+import io.vertx.sqlclient.impl.command.BiCommand;\n+import io.vertx.sqlclient.impl.command.PrepareStatementCommand;\n+\n+import java.util.List;\n+\n+/**\n+ * @author <a href=\"mailto:julien@julienviet.com\">Julien Viet</a>\n+ */\n+public class QueryImpl<T, R extends SqlResult<T>> extends QueryBase<T, R> {\n+\n+  static Query<RowSet<Row>> create(SqlClientBase<?> client, boolean autoCommit, boolean singleton, boolean prepared, String sql) {\n+    SqlResultBuilder<RowSet<Row>, RowSetImpl<Row>, RowSet<Row>> builder = new SqlResultBuilder<>(RowSetImpl.FACTORY, RowSetImpl.COLLECTOR);\n+    return new QueryImpl<>(client, autoCommit, singleton, prepared, sql, builder);\n+  }\n+\n+  private final SqlClientBase<?> scheduler;\n+  private final boolean singleton;\n+  private final boolean prepared;\n+  private final String sql;\n+\n+  public QueryImpl(SqlClientBase<?> client, boolean autoCommit, boolean singleton, boolean prepared, String sql, SqlResultBuilder<T, ?, R> builder) {\n+    super(autoCommit, builder);\n+    this.scheduler = client;\n+    this.singleton = singleton;\n+    this.prepared = prepared;\n+    this.sql = sql;\n+  }\n+\n+  @Override\n+  protected <T2, R2 extends SqlResult<T2>> QueryBase<T2, R2> copy(SqlResultBuilder<T2, ?, R2> builder) {\n+    return new QueryImpl<>(scheduler, autoCommit, singleton, prepared, sql, builder);\n+  }\n+\n+  private void execute(Tuple arguments, Promise<R> promise) {\n+    SqlResultHandler handler = builder.createHandler(promise);\n+    if (prepared) {\n+      BiCommand<PreparedStatement, Boolean> abc = new BiCommand<>(new PrepareStatementCommand(sql), ps -> {\n+        String msg = ps.prepare((TupleInternal) arguments);\n+        if (msg != null) {\n+          return Future.failedFuture(msg);\n+        }\n+        return Future.succeededFuture(builder.createCommand(ps, autoCommit, arguments, handler));\n+      });\n+      scheduler.schedule(abc, handler);\n+    } else {\n+      builder.execute(scheduler, sql, autoCommit, singleton, handler);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "883f92d3351935788df1a89fc3f832179732a90c"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNDgxMDUy", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/554#pullrequestreview-380481052", "createdAt": "2020-03-24T16:24:31Z", "commit": {"oid": "883f92d3351935788df1a89fc3f832179732a90c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjoyNDozMlrOF64gPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjoyNDozMlrOF64gPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI4NzQ4NQ==", "bodyText": "I think we need to have a separate PreparedQuery interface, because the methods that accept a Tuple argument are only for prepared queries.\nCurrently both createQuery() and createPreparedQuery() return type Query. As @BillyYccc pointed out a user could try to send in params to a non-prepared query, which is invalid:\n// Error: cannot set params on a non-prepared query\nclient.createQuery(SQL).execute(Tuple.of(\"foo\"));", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/554#discussion_r397287485", "createdAt": "2020-03-24T16:24:32Z", "author": {"login": "aguibert"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/Query.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright (C) 2017 Julien Viet\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.vertx.sqlclient;\n+\n+import io.vertx.codegen.annotations.GenIgnore;\n+import io.vertx.codegen.annotations.VertxGen;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Future;\n+import io.vertx.core.Handler;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.stream.Collector;\n+\n+/**\n+ * A query.\n+ *\n+ * @author <a href=\"mailto:julien@julienviet.com\">Julien Viet</a>\n+ */\n+@VertxGen\n+public interface Query<T> {\n+\n+  /**\n+   * Execute the query.\n+   *\n+   * @param handler the handler receiving the response\n+   */\n+  void execute(Handler<AsyncResult<T>> handler);\n+\n+  /**\n+   * Like {@link #execute(Handler)} but returns a {@code Future} of the asynchronous result\n+   */\n+  Future<T> execute();\n+\n+  /**\n+   * Execute the query.\n+   *\n+   * @param handler the handler receiving the response\n+   */\n+  void execute(Tuple tuple, Handler<AsyncResult<T>> handler);\n+\n+  /**\n+   * Like {@link #execute(Handler)} but returns a {@code Future} of the asynchronous result\n+   */\n+  Future<T> execute(Tuple tuple);\n+\n+  /**\n+   * Execute the query.\n+   *\n+   * @param batch the batch of tuples\n+   * @param handler the handler receiving the response\n+   */\n+  void batch(List<Tuple> batch, Handler<AsyncResult<T>> handler);\n+\n+  /**\n+   * Like {@link #batch(List, Handler)} but returns a {@code Future} of the asynchronous result\n+   */\n+  Future<T> batch(List<Tuple> batch);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "883f92d3351935788df1a89fc3f832179732a90c"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNTAzMjA3", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/554#pullrequestreview-380503207", "createdAt": "2020-03-24T16:47:53Z", "commit": {"oid": "883f92d3351935788df1a89fc3f832179732a90c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjo0Nzo1M1rOF65mXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjo0Nzo1M1rOF65mXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMwNTQzOA==", "bodyText": "I like the statement / query / {collector}? / execution API flow.", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/554#discussion_r397305438", "createdAt": "2020-03-24T16:47:53Z", "author": {"login": "jponge"}, "path": "vertx-db2-client/src/main/java/examples/SqlClientExamples.java", "diffHunk": "@@ -151,8 +151,8 @@ public void usingConnections01(Vertx vertx, Pool pool) {\n   public void usingConnections02(SqlConnection connection) {\n     connection.prepare(\"SELECT * FROM users WHERE first_name LIKE $1\", ar1 -> {\n       if (ar1.succeeded()) {\n-        PreparedQuery pq = ar1.result();\n-        pq.execute(Tuple.of(\"andy\"), ar2 -> {\n+        PreparedStatement pq = ar1.result();\n+        pq.query().execute(Tuple.of(\"andy\"), ar2 -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "883f92d3351935788df1a89fc3f832179732a90c"}, "originalPosition": 16}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7815f9d76ec84f9ed3524485a65b863bcfad26f0", "author": {"user": {"login": "vietj", "name": "Julien Viet"}}, "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/7815f9d76ec84f9ed3524485a65b863bcfad26f0", "committedDate": "2020-03-24T23:10:19Z", "message": "Rename createQuery -> query, createPreparedQuery -> preparedQuery, batch -> executeBatch"}, "afterCommit": {"oid": "9c618a9af5765d8030963c937a939e9081328f13", "author": {"user": {"login": "vietj", "name": "Julien Viet"}}, "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/9c618a9af5765d8030963c937a939e9081328f13", "committedDate": "2020-03-24T23:18:27Z", "message": "Rename createQuery -> query, createPreparedQuery -> preparedQuery, batch -> executeBatch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34cf9bdfd455b2c4fe4ed478249f328e5b14f06f", "author": {"user": {"login": "vietj", "name": "Julien Viet"}}, "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/34cf9bdfd455b2c4fe4ed478249f328e5b14f06f", "committedDate": "2020-03-25T07:45:49Z", "message": "Rework PreparedQuery to carry a generic result and collector queries are now PreparedQuery mutators"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab2c13580ac596b3e4bbcd2cc950c651f40d8be4", "author": {"user": {"login": "vietj", "name": "Julien Viet"}}, "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/ab2c13580ac596b3e4bbcd2cc950c651f40d8be4", "committedDate": "2020-03-25T07:45:49Z", "message": "Add fluent queries for the SqlClient interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c25be37883e3c268b7fa8c93072125aee03dc38", "author": {"user": {"login": "vietj", "name": "Julien Viet"}}, "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/8c25be37883e3c268b7fa8c93072125aee03dc38", "committedDate": "2020-03-25T07:45:49Z", "message": "Rename PreparedQuery -> PreparedStatement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "121bb8ea16362e91eeb93460076c7861b48aed59", "author": {"user": {"login": "vietj", "name": "Julien Viet"}}, "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/121bb8ea16362e91eeb93460076c7861b48aed59", "committedDate": "2020-03-25T07:45:49Z", "message": "PreparedStatement won't execute anymore, instead the new query() method returns a Query for execution or batching"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0afbc43cd9f77b3cb5742dbac7a224adbaa0cb5", "author": {"user": {"login": "vietj", "name": "Julien Viet"}}, "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/a0afbc43cd9f77b3cb5742dbac7a224adbaa0cb5", "committedDate": "2020-03-25T07:45:49Z", "message": "Introduce PreparedQuery extending Query for the tuple defining executing methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71789de0412a13aaab4d0d2d5070c933025c5df5", "author": {"user": {"login": "vietj", "name": "Julien Viet"}}, "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/71789de0412a13aaab4d0d2d5070c933025c5df5", "committedDate": "2020-03-25T07:46:37Z", "message": "Rename createQuery -> query, createPreparedQuery -> preparedQuery, batch -> executeBatch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65b900c22b2823ca867442d7c8fb41b54e4ed82d", "author": {"user": {"login": "vietj", "name": "Julien Viet"}}, "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/65b900c22b2823ca867442d7c8fb41b54e4ed82d", "committedDate": "2020-03-25T07:46:37Z", "message": "Complete javadoc"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a90361a91cec18446ed284e40097eda88d4adc7d", "author": {"user": {"login": "vietj", "name": "Julien Viet"}}, "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/a90361a91cec18446ed284e40097eda88d4adc7d", "committedDate": "2020-03-25T07:39:20Z", "message": "Complete javadoc"}, "afterCommit": {"oid": "65b900c22b2823ca867442d7c8fb41b54e4ed82d", "author": {"user": {"login": "vietj", "name": "Julien Viet"}}, "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/65b900c22b2823ca867442d7c8fb41b54e4ed82d", "committedDate": "2020-03-25T07:46:37Z", "message": "Complete javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxMTA3OTEw", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/554#pullrequestreview-381107910", "createdAt": "2020-03-25T12:40:03Z", "commit": {"oid": "65b900c22b2823ca867442d7c8fb41b54e4ed82d"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMjo0MjozMlrOF7ZNPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMjo1MDo1MVrOF7ZfqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyMzI5NA==", "bodyText": "we could add null check for these methods", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/554#discussion_r397823294", "createdAt": "2020-03-25T12:42:32Z", "author": {"login": "BillyYccc"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/QueryBase.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (C) 2017 Julien Viet\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.vertx.sqlclient.impl;\n+\n+import io.vertx.sqlclient.Query;\n+import io.vertx.sqlclient.Row;\n+import io.vertx.sqlclient.RowSet;\n+import io.vertx.sqlclient.SqlResult;\n+\n+import java.util.function.Function;\n+import java.util.stream.Collector;\n+\n+/**\n+ * @author <a href=\"mailto:julien@julienviet.com\">Julien Viet</a>\n+ */\n+abstract class QueryBase<T, R extends SqlResult<T>> implements Query<R> {\n+\n+  protected final SqlResultBuilder<T, ?, R> builder;\n+\n+  public QueryBase(SqlResultBuilder<T, ?, R> builder) {\n+    this.builder = builder;\n+  }\n+\n+  protected abstract <T2, R2  extends SqlResult<T2>> QueryBase<T2, R2> copy(SqlResultBuilder<T2, ?, R2> builder);\n+\n+  @Override\n+  public <U> Query<SqlResult<U>> collecting(Collector<Row, ?, U> collector) {\n+    return copy(new SqlResultBuilder<>(SqlResultImpl::new, collector));\n+  }\n+\n+  @Override\n+  public <U> Query<RowSet<U>> mapping(Function<Row, U> mapper) {\n+    return copy(new SqlResultBuilder<>(RowSetImpl.factory(), RowSetImpl.collector(mapper)));\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b900c22b2823ca867442d7c8fb41b54e4ed82d"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyNDM1NA==", "bodyText": "this method could be removed", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/554#discussion_r397824354", "createdAt": "2020-03-25T12:44:28Z", "author": {"login": "BillyYccc"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/SqlClientBase.java", "diffHunk": "@@ -175,7 +61,7 @@ public C preparedBatch(String sql, List<Tuple> batch, Handler<AsyncResult<RowSet\n     Function<R1, R2> factory,\n     Collector<Row, ?, R1> collector,\n     Promise<R3> handler) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b900c22b2823ca867442d7c8fb41b54e4ed82d"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyNjI1MA==", "bodyText": "useless import", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/554#discussion_r397826250", "createdAt": "2020-03-25T12:47:44Z", "author": {"login": "BillyYccc"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/SqlClient.java", "diffHunk": "@@ -17,15 +17,9 @@\n \n package io.vertx.sqlclient;\n \n-import io.vertx.codegen.annotations.Fluent;\n-import io.vertx.codegen.annotations.GenIgnore;\n import io.vertx.codegen.annotations.VertxGen;\n-import io.vertx.core.AsyncResult;\n-import io.vertx.core.Future;\n-import io.vertx.core.Handler;\n \n import java.util.List;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b900c22b2823ca867442d7c8fb41b54e4ed82d"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyNjQ0OQ==", "bodyText": "duplicated documentation", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/554#discussion_r397826449", "createdAt": "2020-03-25T12:48:05Z", "author": {"login": "BillyYccc"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/SqlClient.java", "diffHunk": "@@ -36,136 +30,21 @@\n public interface SqlClient {\n \n   /**\n-   * Execute a simple query using the given {@code sql} string, the asynchronous result is represented as a {@link RowSet}.\n+   * Create a query, the {@link Query#execute} method must be called to execute the query.\n    *\n-   * @param sql the query SQL\n-   * @param handler the handler notified with the execution result\n-   * @return a reference to this, so the API can be used fluently\n-   */\n-  @Fluent\n-  SqlClient query(String sql, Handler<AsyncResult<RowSet<Row>>> handler);\n-\n-  /**\n-   * Like {@link #query(String, Handler)} but returns a {@code Future} of the asynchronous result\n-   */\n-  Future<RowSet<Row>> query(String sql);\n-\n-  /**\n-   * Execute a simple query using the given {@code sql} string, the asynchronous result is represented as a collection of elements transformed by the provided {@link java.util.stream.Collector}.\n-   *\n-   * @param sql the query SQL\n-   * @param collector the collector\n-   * @param handler the handler notified with the execution result\n-   * @return a reference to this, so the API can be used fluently\n-   */\n-  @GenIgnore\n-  <R> SqlClient query(String sql, Collector<Row, ?, R> collector, Handler<AsyncResult<SqlResult<R>>> handler);\n-\n-  /**\n-   * Like {@link #query(String, Collector, Handler)} but returns a {@code Future} of the asynchronous result\n-   */\n-  @GenIgnore\n-  <R> Future<SqlResult<R>> query(String sql, Collector<Row, ?, R> collector);\n-\n-  /**\n-   * Execute the given {@code sql} string using a prepared statement without any parameter, the asynchronous result is represented as a {@link RowSet}.\n-   *\n-   * @param sql the prepared query SQL\n-   * @param handler the handler notified with the execution result\n-   * @return a reference to this, so the API can be used fluently\n-   */\n-  @Fluent\n-  SqlClient preparedQuery(String sql, Handler<AsyncResult<RowSet<Row>>> handler);\n-\n-  /**\n-   * Like {@link #preparedQuery(String, Handler)} but returns a {@code Future} of the asynchronous result\n-   */\n-  Future<RowSet<Row>> preparedQuery(String sql);\n-\n-  /**\n-   * Execute the given {@code sql} string using a prepared statement without any parameter, the asynchronous result is represented as a collection of elements transformed by the provided {@link java.util.stream.Collector}.\n+   * Create a query.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b900c22b2823ca867442d7c8fb41b54e4ed82d"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyNzgxMA==", "bodyText": "the created object is actually not a prepared query, how about writing as\n\nCreate a prepared query request, ...", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/554#discussion_r397827810", "createdAt": "2020-03-25T12:50:28Z", "author": {"login": "BillyYccc"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/SqlClient.java", "diffHunk": "@@ -36,136 +30,21 @@\n public interface SqlClient {\n \n   /**\n-   * Execute a simple query using the given {@code sql} string, the asynchronous result is represented as a {@link RowSet}.\n+   * Create a query, the {@link Query#execute} method must be called to execute the query.\n    *\n-   * @param sql the query SQL\n-   * @param handler the handler notified with the execution result\n-   * @return a reference to this, so the API can be used fluently\n-   */\n-  @Fluent\n-  SqlClient query(String sql, Handler<AsyncResult<RowSet<Row>>> handler);\n-\n-  /**\n-   * Like {@link #query(String, Handler)} but returns a {@code Future} of the asynchronous result\n-   */\n-  Future<RowSet<Row>> query(String sql);\n-\n-  /**\n-   * Execute a simple query using the given {@code sql} string, the asynchronous result is represented as a collection of elements transformed by the provided {@link java.util.stream.Collector}.\n-   *\n-   * @param sql the query SQL\n-   * @param collector the collector\n-   * @param handler the handler notified with the execution result\n-   * @return a reference to this, so the API can be used fluently\n-   */\n-  @GenIgnore\n-  <R> SqlClient query(String sql, Collector<Row, ?, R> collector, Handler<AsyncResult<SqlResult<R>>> handler);\n-\n-  /**\n-   * Like {@link #query(String, Collector, Handler)} but returns a {@code Future} of the asynchronous result\n-   */\n-  @GenIgnore\n-  <R> Future<SqlResult<R>> query(String sql, Collector<Row, ?, R> collector);\n-\n-  /**\n-   * Execute the given {@code sql} string using a prepared statement without any parameter, the asynchronous result is represented as a {@link RowSet}.\n-   *\n-   * @param sql the prepared query SQL\n-   * @param handler the handler notified with the execution result\n-   * @return a reference to this, so the API can be used fluently\n-   */\n-  @Fluent\n-  SqlClient preparedQuery(String sql, Handler<AsyncResult<RowSet<Row>>> handler);\n-\n-  /**\n-   * Like {@link #preparedQuery(String, Handler)} but returns a {@code Future} of the asynchronous result\n-   */\n-  Future<RowSet<Row>> preparedQuery(String sql);\n-\n-  /**\n-   * Execute the given {@code sql} string using a prepared statement without any parameter, the asynchronous result is represented as a collection of elements transformed by the provided {@link java.util.stream.Collector}.\n+   * Create a query.\n    *\n-   * @param sql the prepared query SQL\n-   * @param collector the collector\n-   * @param handler the handler notified with the execution result\n-   * @return a reference to this, so the API can be used fluently\n-   */\n-  @GenIgnore\n-  <R> SqlClient preparedQuery(String sql, Collector<Row, ?, R> collector, Handler<AsyncResult<SqlResult<R>>> handler);\n-\n-  /**\n-   * Like {@link #preparedQuery(String, Collector, Handler)} but returns a {@code Future} of the asynchronous result\n+   * @return the query\n    */\n-  @GenIgnore\n-  <R> Future<SqlResult<R>> preparedQuery(String sql, Collector<Row, ?, R> collector);\n+  Query<RowSet<Row>> query(String sql);\n \n   /**\n-   * Execute the given {@code sql} string using a prepared statement with parameters set in the {@code Tuple}, the asynchronous result is represented as a {@link RowSet}.\n+   * Create a prepared query, one of the {@link PreparedQuery#execute}, {@link PreparedQuery#executeBatch}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b900c22b2823ca867442d7c8fb41b54e4ed82d"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyODAwOQ==", "bodyText": "how about writing as\n\nCreate a query request, ...", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/554#discussion_r397828009", "createdAt": "2020-03-25T12:50:51Z", "author": {"login": "BillyYccc"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/SqlClient.java", "diffHunk": "@@ -36,136 +30,21 @@\n public interface SqlClient {\n \n   /**\n-   * Execute a simple query using the given {@code sql} string, the asynchronous result is represented as a {@link RowSet}.\n+   * Create a query, the {@link Query#execute} method must be called to execute the query.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b900c22b2823ca867442d7c8fb41b54e4ed82d"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8892007b532178f74ca202715c272c96c56ec48e", "author": {"user": {"login": "vietj", "name": "Julien Viet"}}, "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/8892007b532178f74ca202715c272c96c56ec48e", "committedDate": "2020-03-25T12:58:31Z", "message": "Update breaking tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "320c94e1fdbf8d32ab366cd947a19a127b024bf3", "author": {"user": {"login": "vietj", "name": "Julien Viet"}}, "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/320c94e1fdbf8d32ab366cd947a19a127b024bf3", "committedDate": "2020-03-25T13:10:51Z", "message": "PR feedback (to backport)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxMTQ1NDY3", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/554#pullrequestreview-381145467", "createdAt": "2020-03-25T13:28:59Z", "commit": {"oid": "320c94e1fdbf8d32ab366cd947a19a127b024bf3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1581, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}