{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MjY2MzU3", "number": 665, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNzozMDowNVrOEAZExg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDozMjo1OFrOEA1yfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODQ2Mjc4OnYy", "diffSide": "RIGHT", "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/spi/DatabaseMetaData.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNzozMDowNVrOGbo8xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNzoxNDowN1rOGcRU8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYzNTY1Mw==", "bodyText": "DatabaseMetadata , metadata is a single word (https://en.wikipedia.org/wiki/Metadata)", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/665#discussion_r431635653", "createdAt": "2020-05-28T07:30:05Z", "author": {"login": "vietj"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/spi/DatabaseMetaData.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package io.vertx.sqlclient.spi;\n+\n+import io.vertx.codegen.annotations.VertxGen;\n+\n+/**\n+ * Contains static metadata about the backend database server \n+ */\n+@VertxGen\n+public interface DatabaseMetaData {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "569eb4d2bd8e2bba656bcedd5b8aa959154c21d9"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg5NDc0Mw==", "bodyText": "This will be a fun review comment to fix on a case since I'm on a case insensitive OS \ud83d\ude43", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/665#discussion_r431894743", "createdAt": "2020-05-28T14:46:06Z", "author": {"login": "aguibert"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/spi/DatabaseMetaData.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package io.vertx.sqlclient.spi;\n+\n+import io.vertx.codegen.annotations.VertxGen;\n+\n+/**\n+ * Contains static metadata about the backend database server \n+ */\n+@VertxGen\n+public interface DatabaseMetaData {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYzNTY1Mw=="}, "originalCommit": {"oid": "569eb4d2bd8e2bba656bcedd5b8aa959154c21d9"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI5NzIwMA==", "bodyText": "sometimes I do have the same issue to deal with, here is how I deal with:\n1/ rename the file to something else like Foo\n2/ commit\n3/ rename Foo to the old name with case sensitivity change\n4/ commit\n5/ squash commits", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/665#discussion_r432297200", "createdAt": "2020-05-29T07:14:07Z", "author": {"login": "vietj"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/spi/DatabaseMetaData.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package io.vertx.sqlclient.spi;\n+\n+import io.vertx.codegen.annotations.VertxGen;\n+\n+/**\n+ * Contains static metadata about the backend database server \n+ */\n+@VertxGen\n+public interface DatabaseMetaData {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYzNTY1Mw=="}, "originalCommit": {"oid": "569eb4d2bd8e2bba656bcedd5b8aa959154c21d9"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODQ2MzkwOnYy", "diffSide": "RIGHT", "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/spi/DatabaseMetaData.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNzozMDoyNlrOGbo9fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNzozMDoyNlrOGbo9fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYzNTgzOQ==", "bodyText": "simply productName(), no need to prefix with database as we are in a class prefixed Database", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/665#discussion_r431635839", "createdAt": "2020-05-28T07:30:26Z", "author": {"login": "vietj"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/spi/DatabaseMetaData.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package io.vertx.sqlclient.spi;\n+\n+import io.vertx.codegen.annotations.VertxGen;\n+\n+/**\n+ * Contains static metadata about the backend database server \n+ */\n+@VertxGen\n+public interface DatabaseMetaData {\n+  \n+  /**\n+   * @return The product name of the backend database server\n+   */\n+  public String getDatabaseProductName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "569eb4d2bd8e2bba656bcedd5b8aa959154c21d9"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODQ2NzIxOnYy", "diffSide": "RIGHT", "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/spi/DatabaseMetaData.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNzozMTozMVrOGbo_jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNzozMTozMVrOGbo_jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYzNjM2NQ==", "bodyText": "simply majorVersion(), no need to prefix with database as we are in a class prefixed Database", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/665#discussion_r431636365", "createdAt": "2020-05-28T07:31:31Z", "author": {"login": "vietj"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/spi/DatabaseMetaData.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package io.vertx.sqlclient.spi;\n+\n+import io.vertx.codegen.annotations.VertxGen;\n+\n+/**\n+ * Contains static metadata about the backend database server \n+ */\n+@VertxGen\n+public interface DatabaseMetaData {\n+  \n+  /**\n+   * @return The product name of the backend database server\n+   */\n+  public String getDatabaseProductName();\n+  \n+  /**\n+   * @return The major version of the backend database server\n+   */\n+  public int getDatabaseMajorVersion();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "569eb4d2bd8e2bba656bcedd5b8aa959154c21d9"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODQ2NzYzOnYy", "diffSide": "RIGHT", "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/spi/DatabaseMetaData.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNzozMTozOVrOGbo_3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNzozMTozOVrOGbo_3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYzNjQ0Nw==", "bodyText": "simply minorVersion(), no need to prefix with database as we are in a class prefixed Database", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/665#discussion_r431636447", "createdAt": "2020-05-28T07:31:39Z", "author": {"login": "vietj"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/spi/DatabaseMetaData.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package io.vertx.sqlclient.spi;\n+\n+import io.vertx.codegen.annotations.VertxGen;\n+\n+/**\n+ * Contains static metadata about the backend database server \n+ */\n+@VertxGen\n+public interface DatabaseMetaData {\n+  \n+  /**\n+   * @return The product name of the backend database server\n+   */\n+  public String getDatabaseProductName();\n+  \n+  /**\n+   * @return The major version of the backend database server\n+   */\n+  public int getDatabaseMajorVersion();\n+  \n+  /**\n+   * @return The minor version of the backend database server\n+   */\n+  public int getDatabaseMinorVersion();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "569eb4d2bd8e2bba656bcedd5b8aa959154c21d9"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODQ3MDA0OnYy", "diffSide": "RIGHT", "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/SqlConnection.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNzozMjoyOFrOGbpBaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNTo0NDozNVrOGb7Zew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYzNjg0Mw==", "bodyText": "rename to databaseMetadata() - I'm wondering if that should not be directly on SqlClient", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/665#discussion_r431636843", "createdAt": "2020-05-28T07:32:28Z", "author": {"login": "vietj"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/SqlConnection.java", "diffHunk": "@@ -88,5 +89,7 @@\n    * @param handler the completion handler\n    */\n   void close(Handler<AsyncResult<Void>> handler);\n+  \n+  DatabaseMetaData getDatabaseMetaData();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "569eb4d2bd8e2bba656bcedd5b8aa959154c21d9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg4NTMwMA==", "bodyText": "Usually exposing such metadata is an internal feature for those users, I think it's better to keep the SqlClient API simple.", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/665#discussion_r431885300", "createdAt": "2020-05-28T14:35:30Z", "author": {"login": "BillyYccc"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/SqlConnection.java", "diffHunk": "@@ -88,5 +89,7 @@\n    * @param handler the completion handler\n    */\n   void close(Handler<AsyncResult<Void>> handler);\n+  \n+  DatabaseMetaData getDatabaseMetaData();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYzNjg0Mw=="}, "originalCommit": {"oid": "569eb4d2bd8e2bba656bcedd5b8aa959154c21d9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkzNzkxNQ==", "bodyText": "The SqlClient is more focused on one-shot operations, whereas obtaining DB metadata isn't really a one-shot operation, it's mainly something that would make sense to obtain after you've obtained a connection (like in JDBC).\nAlso, I'm considering the new metadata class as an SPI, which also supports @BillyYccc 's comment about keeping it off of the \"golden path\" API usage", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/665#discussion_r431937915", "createdAt": "2020-05-28T15:44:35Z", "author": {"login": "aguibert"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/SqlConnection.java", "diffHunk": "@@ -88,5 +89,7 @@\n    * @param handler the completion handler\n    */\n   void close(Handler<AsyncResult<Void>> handler);\n+  \n+  DatabaseMetaData getDatabaseMetaData();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYzNjg0Mw=="}, "originalCommit": {"oid": "569eb4d2bd8e2bba656bcedd5b8aa959154c21d9"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTk1NTAzOnYy", "diffSide": "RIGHT", "path": "vertx-mysql-client/src/main/java/io/vertx/mysqlclient/impl/MySQLDatabaseMetaData.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDozMDozOFrOGb35LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDozMjo1MFrOGb4Bog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg4MDQ5Mg==", "bodyText": "I think I need to rewrite the parser sometime later as it does not consider the situations of different database version semantics.", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/665#discussion_r431880492", "createdAt": "2020-05-28T14:30:38Z", "author": {"login": "BillyYccc"}, "path": "vertx-mysql-client/src/main/java/io/vertx/mysqlclient/impl/MySQLDatabaseMetaData.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package io.vertx.mysqlclient.impl;\n+\n+import io.vertx.sqlclient.spi.DatabaseMetaData;\n+\n+public class MySQLDatabaseMetaData implements DatabaseMetaData {\n+  \n+  private final int majorVersion;\n+  private final int minorVersion;\n+  private final int microVersion;\n+  \n+  public MySQLDatabaseMetaData(String serverVersion) {\n+    // we assume the server version follows ${major}.${minor}.${micro} in https://dev.mysql.com/doc/refman/8.0/en/which-version.html\n+    String[] versionNumbers = serverVersion.split(\"\\\\.\");\n+    majorVersion = Integer.parseInt(versionNumbers[0]);\n+    minorVersion = Integer.parseInt(versionNumbers[1]);\n+    // we should truncate the possible suffixes here\n+    String releaseVersion = versionNumbers[2];\n+    int indexOfFirstSeparator = releaseVersion.indexOf(\"-\");\n+    if (indexOfFirstSeparator != -1) {\n+      // handle unstable release suffixes\n+      String releaseNumberString = releaseVersion.substring(0, indexOfFirstSeparator);\n+      microVersion = Integer.parseInt(releaseNumberString);\n+    } else {\n+      microVersion = Integer.parseInt(versionNumbers[2]);\n+    }\n+  }\n+\n+  @Override\n+  public String getDatabaseProductName() {\n+    return \"MySQL\"; // TODO: Should this return MariaDB sometimes?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "569eb4d2bd8e2bba656bcedd5b8aa959154c21d9"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg4MjY1OA==", "bodyText": "Ok, at the moment it didn't seem like there was any MariaDB-specific code in the MySQL driver, aside from URL parsing.", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/665#discussion_r431882658", "createdAt": "2020-05-28T14:32:50Z", "author": {"login": "aguibert"}, "path": "vertx-mysql-client/src/main/java/io/vertx/mysqlclient/impl/MySQLDatabaseMetaData.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package io.vertx.mysqlclient.impl;\n+\n+import io.vertx.sqlclient.spi.DatabaseMetaData;\n+\n+public class MySQLDatabaseMetaData implements DatabaseMetaData {\n+  \n+  private final int majorVersion;\n+  private final int minorVersion;\n+  private final int microVersion;\n+  \n+  public MySQLDatabaseMetaData(String serverVersion) {\n+    // we assume the server version follows ${major}.${minor}.${micro} in https://dev.mysql.com/doc/refman/8.0/en/which-version.html\n+    String[] versionNumbers = serverVersion.split(\"\\\\.\");\n+    majorVersion = Integer.parseInt(versionNumbers[0]);\n+    minorVersion = Integer.parseInt(versionNumbers[1]);\n+    // we should truncate the possible suffixes here\n+    String releaseVersion = versionNumbers[2];\n+    int indexOfFirstSeparator = releaseVersion.indexOf(\"-\");\n+    if (indexOfFirstSeparator != -1) {\n+      // handle unstable release suffixes\n+      String releaseNumberString = releaseVersion.substring(0, indexOfFirstSeparator);\n+      microVersion = Integer.parseInt(releaseNumberString);\n+    } else {\n+      microVersion = Integer.parseInt(versionNumbers[2]);\n+    }\n+  }\n+\n+  @Override\n+  public String getDatabaseProductName() {\n+    return \"MySQL\"; // TODO: Should this return MariaDB sometimes?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg4MDQ5Mg=="}, "originalCommit": {"oid": "569eb4d2bd8e2bba656bcedd5b8aa959154c21d9"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzE2NzM0OnYy", "diffSide": "RIGHT", "path": "vertx-mysql-client/src/main/java/io/vertx/mysqlclient/impl/MySQLDatabaseMetadata.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDozMjo1OFrOGcXgnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMTo1ODowOFrOGcZv7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM5ODQ5Mg==", "bodyText": "There're a wide range of database servers supporting MySQL C/S protocol such as Percona, Vitess, TiDB... and their reponse version strings differ much. Don't worry about this, I will fix this in another PR since the version string is also used to control the EOF header flag setting in MySQL.", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/665#discussion_r432398492", "createdAt": "2020-05-29T10:32:58Z", "author": {"login": "BillyYccc"}, "path": "vertx-mysql-client/src/main/java/io/vertx/mysqlclient/impl/MySQLDatabaseMetadata.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package io.vertx.mysqlclient.impl;\n+\n+import java.util.Objects;\n+\n+import io.vertx.sqlclient.spi.DatabaseMetadata;\n+\n+public class MySQLDatabaseMetadata implements DatabaseMetadata {\n+  \n+  private final String fullVersion;\n+  private final boolean isMariaDB;\n+  private final int majorVersion;\n+  private final int minorVersion;\n+  private final int microVersion;\n+  \n+  public MySQLDatabaseMetadata(String serverVersion) {\n+    fullVersion = serverVersion;\n+    isMariaDB = serverVersion.toUpperCase().contains(\"MARIADB\");  \n+    String[] versionNumbers;\n+    if (!isMariaDB) {\n+      // we assume the server version follows ${major}.${minor}.${micro} in https://dev.mysql.com/doc/refman/8.0/en/which-version.html\n+      versionNumbers = serverVersion.split(\"\\\\.\");\n+    } else {\n+      // server version follows ${junk}-${major}.${minor}.${micro}-MariaDB-${junk}\n+      String[] parts = serverVersion.split(\"-\");\n+      versionNumbers = parts[1].split(\"\\\\.\");\n+    }\n+    majorVersion = Integer.parseInt(versionNumbers[0]);\n+    minorVersion = Integer.parseInt(versionNumbers[1]);\n+    // we should truncate the possible suffixes here\n+    String releaseVersion = versionNumbers[2];\n+    int indexOfFirstSeparator = releaseVersion.indexOf(\"-\");\n+    if (indexOfFirstSeparator != -1) {\n+      // handle unstable release suffixes\n+      String releaseNumberString = releaseVersion.substring(0, indexOfFirstSeparator);\n+      microVersion = Integer.parseInt(releaseNumberString);\n+    } else {\n+      microVersion = Integer.parseInt(versionNumbers[2]);\n+    }\n+  }\n+  \n+  public boolean isMariaDB() {\n+    return isMariaDB;\n+  }\n+\n+  @Override\n+  public String productName() {\n+    return isMariaDB ? \"MariaDB\" : \"MySQL\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c56cb017496e700f8564a362f8b2b82f358d68da"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyOTk4NQ==", "bodyText": "I think we should in the doc clearly tells which database are tested and that other is a best effort support", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/665#discussion_r432429985", "createdAt": "2020-05-29T11:45:42Z", "author": {"login": "vietj"}, "path": "vertx-mysql-client/src/main/java/io/vertx/mysqlclient/impl/MySQLDatabaseMetadata.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package io.vertx.mysqlclient.impl;\n+\n+import java.util.Objects;\n+\n+import io.vertx.sqlclient.spi.DatabaseMetadata;\n+\n+public class MySQLDatabaseMetadata implements DatabaseMetadata {\n+  \n+  private final String fullVersion;\n+  private final boolean isMariaDB;\n+  private final int majorVersion;\n+  private final int minorVersion;\n+  private final int microVersion;\n+  \n+  public MySQLDatabaseMetadata(String serverVersion) {\n+    fullVersion = serverVersion;\n+    isMariaDB = serverVersion.toUpperCase().contains(\"MARIADB\");  \n+    String[] versionNumbers;\n+    if (!isMariaDB) {\n+      // we assume the server version follows ${major}.${minor}.${micro} in https://dev.mysql.com/doc/refman/8.0/en/which-version.html\n+      versionNumbers = serverVersion.split(\"\\\\.\");\n+    } else {\n+      // server version follows ${junk}-${major}.${minor}.${micro}-MariaDB-${junk}\n+      String[] parts = serverVersion.split(\"-\");\n+      versionNumbers = parts[1].split(\"\\\\.\");\n+    }\n+    majorVersion = Integer.parseInt(versionNumbers[0]);\n+    minorVersion = Integer.parseInt(versionNumbers[1]);\n+    // we should truncate the possible suffixes here\n+    String releaseVersion = versionNumbers[2];\n+    int indexOfFirstSeparator = releaseVersion.indexOf(\"-\");\n+    if (indexOfFirstSeparator != -1) {\n+      // handle unstable release suffixes\n+      String releaseNumberString = releaseVersion.substring(0, indexOfFirstSeparator);\n+      microVersion = Integer.parseInt(releaseNumberString);\n+    } else {\n+      microVersion = Integer.parseInt(versionNumbers[2]);\n+    }\n+  }\n+  \n+  public boolean isMariaDB() {\n+    return isMariaDB;\n+  }\n+\n+  @Override\n+  public String productName() {\n+    return isMariaDB ? \"MariaDB\" : \"MySQL\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM5ODQ5Mg=="}, "originalCommit": {"oid": "c56cb017496e700f8564a362f8b2b82f358d68da"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQzNTE4MA==", "bodyText": "There is something like what you describe in https://vertx.io/docs/vertx-mysql-client/java/#_mysql_and_mariadb_version_support_matrix\nI got a repo for testing basic features with more databases in https://github.com/BillyYccc/vertx-mysql-client-compatibility-testkit which is so-called best effort support", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/665#discussion_r432435180", "createdAt": "2020-05-29T11:58:08Z", "author": {"login": "BillyYccc"}, "path": "vertx-mysql-client/src/main/java/io/vertx/mysqlclient/impl/MySQLDatabaseMetadata.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package io.vertx.mysqlclient.impl;\n+\n+import java.util.Objects;\n+\n+import io.vertx.sqlclient.spi.DatabaseMetadata;\n+\n+public class MySQLDatabaseMetadata implements DatabaseMetadata {\n+  \n+  private final String fullVersion;\n+  private final boolean isMariaDB;\n+  private final int majorVersion;\n+  private final int minorVersion;\n+  private final int microVersion;\n+  \n+  public MySQLDatabaseMetadata(String serverVersion) {\n+    fullVersion = serverVersion;\n+    isMariaDB = serverVersion.toUpperCase().contains(\"MARIADB\");  \n+    String[] versionNumbers;\n+    if (!isMariaDB) {\n+      // we assume the server version follows ${major}.${minor}.${micro} in https://dev.mysql.com/doc/refman/8.0/en/which-version.html\n+      versionNumbers = serverVersion.split(\"\\\\.\");\n+    } else {\n+      // server version follows ${junk}-${major}.${minor}.${micro}-MariaDB-${junk}\n+      String[] parts = serverVersion.split(\"-\");\n+      versionNumbers = parts[1].split(\"\\\\.\");\n+    }\n+    majorVersion = Integer.parseInt(versionNumbers[0]);\n+    minorVersion = Integer.parseInt(versionNumbers[1]);\n+    // we should truncate the possible suffixes here\n+    String releaseVersion = versionNumbers[2];\n+    int indexOfFirstSeparator = releaseVersion.indexOf(\"-\");\n+    if (indexOfFirstSeparator != -1) {\n+      // handle unstable release suffixes\n+      String releaseNumberString = releaseVersion.substring(0, indexOfFirstSeparator);\n+      microVersion = Integer.parseInt(releaseNumberString);\n+    } else {\n+      microVersion = Integer.parseInt(versionNumbers[2]);\n+    }\n+  }\n+  \n+  public boolean isMariaDB() {\n+    return isMariaDB;\n+  }\n+\n+  @Override\n+  public String productName() {\n+    return isMariaDB ? \"MariaDB\" : \"MySQL\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM5ODQ5Mg=="}, "originalCommit": {"oid": "c56cb017496e700f8564a362f8b2b82f358d68da"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4386, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}