{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MTk3MzA5", "number": 625, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNDo0Mjo0NVrOD--b7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTozMTowM1rOD-_aSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzYxMjYwOnYy", "diffSide": "RIGHT", "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/tracing/QueryRequest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNDo0Mjo0NVrOGZZuTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QwNDo0ODo1OFrOGZndgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI4OTAzNg==", "bodyText": "do we have to add the prepared statement parameters?(we could make it optional for saving the large payload transmission)", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/625#discussion_r429289036", "createdAt": "2020-05-22T14:42:45Z", "author": {"login": "BillyYccc"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/tracing/QueryRequest.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package io.vertx.sqlclient.impl.tracing;\n+\n+import io.vertx.sqlclient.Tuple;\n+\n+import java.util.List;\n+\n+/**\n+ * A traceable query.\n+ */\n+public class QueryRequest {\n+\n+  final SqlTracer tracer;\n+  final String sql;\n+  final List<Tuple> tuples;\n+\n+  public QueryRequest(SqlTracer tracer, String sql, List<Tuple> tuples) {\n+    this.tracer = tracer;\n+    this.sql = sql;\n+    this.tuples = tuples;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "680b3291f4337a589877766b214b7348049fccb5"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMzNDg1NA==", "bodyText": "aren't tuples the prepared statement parameters ?", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/625#discussion_r429334854", "createdAt": "2020-05-22T16:14:08Z", "author": {"login": "vietj"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/tracing/QueryRequest.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package io.vertx.sqlclient.impl.tracing;\n+\n+import io.vertx.sqlclient.Tuple;\n+\n+import java.util.List;\n+\n+/**\n+ * A traceable query.\n+ */\n+public class QueryRequest {\n+\n+  final SqlTracer tracer;\n+  final String sql;\n+  final List<Tuple> tuples;\n+\n+  public QueryRequest(SqlTracer tracer, String sql, List<Tuple> tuples) {\n+    this.tracer = tracer;\n+    this.sql = sql;\n+    this.tuples = tuples;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI4OTAzNg=="}, "originalCommit": {"oid": "680b3291f4337a589877766b214b7348049fccb5"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM0MTMyMQ==", "bodyText": "I mean we could make sending statement parameters as part of payload an option for users. Because the parameter might be a big BLOB or text value, sending them over the network would  not be a good choice and there's hardly any benefit on this.", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/625#discussion_r429341321", "createdAt": "2020-05-22T16:27:03Z", "author": {"login": "BillyYccc"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/tracing/QueryRequest.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package io.vertx.sqlclient.impl.tracing;\n+\n+import io.vertx.sqlclient.Tuple;\n+\n+import java.util.List;\n+\n+/**\n+ * A traceable query.\n+ */\n+public class QueryRequest {\n+\n+  final SqlTracer tracer;\n+  final String sql;\n+  final List<Tuple> tuples;\n+\n+  public QueryRequest(SqlTracer tracer, String sql, List<Tuple> tuples) {\n+    this.tracer = tracer;\n+    this.sql = sql;\n+    this.tuples = tuples;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI4OTAzNg=="}, "originalCommit": {"oid": "680b3291f4337a589877766b214b7348049fccb5"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM0NDc5Nw==", "bodyText": "this actually is not logged by the tracers, if you look at it, a tracer would need to cast the request to a QueryRequest and do something with parameters. It seems that by default tracers don't care about parameters. So we only provide opportunity for a tracer to downcast to a QueryRequest and do something with them if they way. If that's a blob then it is up to the tracer to care about the payload issue, not the SQL client", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/625#discussion_r429344797", "createdAt": "2020-05-22T16:34:30Z", "author": {"login": "vietj"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/tracing/QueryRequest.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package io.vertx.sqlclient.impl.tracing;\n+\n+import io.vertx.sqlclient.Tuple;\n+\n+import java.util.List;\n+\n+/**\n+ * A traceable query.\n+ */\n+public class QueryRequest {\n+\n+  final SqlTracer tracer;\n+  final String sql;\n+  final List<Tuple> tuples;\n+\n+  public QueryRequest(SqlTracer tracer, String sql, List<Tuple> tuples) {\n+    this.tracer = tracer;\n+    this.sql = sql;\n+    this.tuples = tuples;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI4OTAzNg=="}, "originalCommit": {"oid": "680b3291f4337a589877766b214b7348049fccb5"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUxNDExMw==", "bodyText": "ok I see how this works in vertx-tracing", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/625#discussion_r429514113", "createdAt": "2020-05-23T04:48:58Z", "author": {"login": "BillyYccc"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/tracing/QueryRequest.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package io.vertx.sqlclient.impl.tracing;\n+\n+import io.vertx.sqlclient.Tuple;\n+\n+import java.util.List;\n+\n+/**\n+ * A traceable query.\n+ */\n+public class QueryRequest {\n+\n+  final SqlTracer tracer;\n+  final String sql;\n+  final List<Tuple> tuples;\n+\n+  public QueryRequest(SqlTracer tracer, String sql, List<Tuple> tuples) {\n+    this.tracer = tracer;\n+    this.sql = sql;\n+    this.tuples = tuples;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI4OTAzNg=="}, "originalCommit": {"oid": "680b3291f4337a589877766b214b7348049fccb5"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzYxODg3OnYy", "diffSide": "RIGHT", "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/tracing/SqlTracer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNDo0NDoyNVrOGZZyVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNjoxNzoyMlrOGZcoEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI5MDA2OA==", "bodyText": "the host might be an unresolved hostname,  we need to use SocketAddress to represent ip:port, hostname, ip, etc... more accurately.", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/625#discussion_r429290068", "createdAt": "2020-05-22T14:44:25Z", "author": {"login": "BillyYccc"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/tracing/SqlTracer.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package io.vertx.sqlclient.impl.tracing;\n+\n+import io.vertx.core.impl.ContextInternal;\n+import io.vertx.core.spi.tracing.TagExtractor;\n+import io.vertx.core.spi.tracing.VertxTracer;\n+import io.vertx.sqlclient.SqlConnectOptions;\n+import io.vertx.sqlclient.Tuple;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+/**\n+ * Tracer for SQL client, wrapping the generic tracer.\n+ */\n+public class SqlTracer {\n+\n+  enum RequestTags {\n+\n+    // Generic\n+    PEER_ADDRESS(\"peer.address\", q -> q.tracer.address),\n+    PEER_SERVICE(\"peer.service\", q -> \"todo\"),\n+    SPAN_KIND(\"span.kind\", q -> \"client\"),\n+\n+    // DB\n+    // See https://github.com/opentracing/specification/blob/master/semantic_conventions.md\n+\n+    DB_USER(\"db.user\", q -> q.tracer.user),\n+    DB_INSTANCE(\"db.instance\", q -> q.tracer.database),\n+    DB_STATEMENT(\"db.statement\", QueryRequest::sql),\n+    DB_TYPE(\"db.type\", q -> \"sql\");\n+\n+    final String name;\n+    final Function<QueryRequest, String> fn;\n+\n+    RequestTags(String name, Function<QueryRequest, String> fn) {\n+      this.name = name;\n+      this.fn = fn;\n+    }\n+  }\n+\n+  private static final TagExtractor<QueryRequest> REQUEST_TAG_EXTRACTOR = new TagExtractor<QueryRequest>() {\n+\n+    private final RequestTags[] TAGS = RequestTags.values();\n+\n+    @Override\n+    public int len(QueryRequest obj) {\n+      return TAGS.length;\n+    }\n+    @Override\n+    public String name(QueryRequest obj, int index) {\n+      return TAGS[index].name;\n+    }\n+    @Override\n+    public String value(QueryRequest obj, int index) {\n+      return TAGS[index].fn.apply(obj);\n+    }\n+  };\n+\n+  private final VertxTracer tracer;\n+  private final String address;\n+  private final String host;\n+  private final int port;\n+  private final String user;\n+  private final String database;\n+\n+  public SqlTracer(VertxTracer tracer, SqlConnectOptions options) {\n+    this.tracer = tracer;\n+    this.address = options.getHost() + \":\" + options.getPort();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "680b3291f4337a589877766b214b7348049fccb5"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMzNjU5NA==", "bodyText": "likely yes, but we cannot use it in options because it's not an option object", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/625#discussion_r429336594", "createdAt": "2020-05-22T16:17:22Z", "author": {"login": "vietj"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/tracing/SqlTracer.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package io.vertx.sqlclient.impl.tracing;\n+\n+import io.vertx.core.impl.ContextInternal;\n+import io.vertx.core.spi.tracing.TagExtractor;\n+import io.vertx.core.spi.tracing.VertxTracer;\n+import io.vertx.sqlclient.SqlConnectOptions;\n+import io.vertx.sqlclient.Tuple;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+/**\n+ * Tracer for SQL client, wrapping the generic tracer.\n+ */\n+public class SqlTracer {\n+\n+  enum RequestTags {\n+\n+    // Generic\n+    PEER_ADDRESS(\"peer.address\", q -> q.tracer.address),\n+    PEER_SERVICE(\"peer.service\", q -> \"todo\"),\n+    SPAN_KIND(\"span.kind\", q -> \"client\"),\n+\n+    // DB\n+    // See https://github.com/opentracing/specification/blob/master/semantic_conventions.md\n+\n+    DB_USER(\"db.user\", q -> q.tracer.user),\n+    DB_INSTANCE(\"db.instance\", q -> q.tracer.database),\n+    DB_STATEMENT(\"db.statement\", QueryRequest::sql),\n+    DB_TYPE(\"db.type\", q -> \"sql\");\n+\n+    final String name;\n+    final Function<QueryRequest, String> fn;\n+\n+    RequestTags(String name, Function<QueryRequest, String> fn) {\n+      this.name = name;\n+      this.fn = fn;\n+    }\n+  }\n+\n+  private static final TagExtractor<QueryRequest> REQUEST_TAG_EXTRACTOR = new TagExtractor<QueryRequest>() {\n+\n+    private final RequestTags[] TAGS = RequestTags.values();\n+\n+    @Override\n+    public int len(QueryRequest obj) {\n+      return TAGS.length;\n+    }\n+    @Override\n+    public String name(QueryRequest obj, int index) {\n+      return TAGS[index].name;\n+    }\n+    @Override\n+    public String value(QueryRequest obj, int index) {\n+      return TAGS[index].fn.apply(obj);\n+    }\n+  };\n+\n+  private final VertxTracer tracer;\n+  private final String address;\n+  private final String host;\n+  private final int port;\n+  private final String user;\n+  private final String database;\n+\n+  public SqlTracer(VertxTracer tracer, SqlConnectOptions options) {\n+    this.tracer = tracer;\n+    this.address = options.getHost() + \":\" + options.getPort();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI5MDA2OA=="}, "originalCommit": {"oid": "680b3291f4337a589877766b214b7348049fccb5"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Mzc2NjA5OnYy", "diffSide": "RIGHT", "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/tracing/SqlTracer.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNToyOToxMVrOGZbRdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QwNDo1NjozMVrOGZnfIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxNDQyMw==", "bodyText": "peer.service is not used for now", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/625#discussion_r429314423", "createdAt": "2020-05-22T15:29:11Z", "author": {"login": "BillyYccc"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/tracing/SqlTracer.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package io.vertx.sqlclient.impl.tracing;\n+\n+import io.vertx.core.impl.ContextInternal;\n+import io.vertx.core.spi.tracing.TagExtractor;\n+import io.vertx.core.spi.tracing.VertxTracer;\n+import io.vertx.sqlclient.SqlConnectOptions;\n+import io.vertx.sqlclient.Tuple;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+/**\n+ * Tracer for SQL client, wrapping the generic tracer.\n+ */\n+public class SqlTracer {\n+\n+  enum RequestTags {\n+\n+    // Generic\n+    PEER_ADDRESS(\"peer.address\", q -> q.tracer.address),\n+    PEER_SERVICE(\"peer.service\", q -> \"todo\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "680b3291f4337a589877766b214b7348049fccb5"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMzMTY5Mg==", "bodyText": "I think that peer.service is something the user can provide, I think we might simply have this part of the TracingOptions when creating Vert.x and leave it the tracer actually set it", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/625#discussion_r429331692", "createdAt": "2020-05-22T16:08:58Z", "author": {"login": "vietj"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/tracing/SqlTracer.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package io.vertx.sqlclient.impl.tracing;\n+\n+import io.vertx.core.impl.ContextInternal;\n+import io.vertx.core.spi.tracing.TagExtractor;\n+import io.vertx.core.spi.tracing.VertxTracer;\n+import io.vertx.sqlclient.SqlConnectOptions;\n+import io.vertx.sqlclient.Tuple;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+/**\n+ * Tracer for SQL client, wrapping the generic tracer.\n+ */\n+public class SqlTracer {\n+\n+  enum RequestTags {\n+\n+    // Generic\n+    PEER_ADDRESS(\"peer.address\", q -> q.tracer.address),\n+    PEER_SERVICE(\"peer.service\", q -> \"todo\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxNDQyMw=="}, "originalCommit": {"oid": "680b3291f4337a589877766b214b7348049fccb5"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMzNDc3Ng==", "bodyText": "I think that peer.service is something the user can provide, I think we might simply have this part of the TracingOptions when creating Vert.x and leave it the tracer actually set it", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/625#discussion_r429334776", "createdAt": "2020-05-22T16:13:59Z", "author": {"login": "vietj"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/tracing/SqlTracer.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package io.vertx.sqlclient.impl.tracing;\n+\n+import io.vertx.core.impl.ContextInternal;\n+import io.vertx.core.spi.tracing.TagExtractor;\n+import io.vertx.core.spi.tracing.VertxTracer;\n+import io.vertx.sqlclient.SqlConnectOptions;\n+import io.vertx.sqlclient.Tuple;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+/**\n+ * Tracer for SQL client, wrapping the generic tracer.\n+ */\n+public class SqlTracer {\n+\n+  enum RequestTags {\n+\n+    // Generic\n+    PEER_ADDRESS(\"peer.address\", q -> q.tracer.address),\n+    PEER_SERVICE(\"peer.service\", q -> \"todo\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxNDQyMw=="}, "originalCommit": {"oid": "680b3291f4337a589877766b214b7348049fccb5"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMzNzg4Mw==", "bodyText": "I think actually in our case we should not use this tag", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/625#discussion_r429337883", "createdAt": "2020-05-22T16:19:55Z", "author": {"login": "vietj"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/tracing/SqlTracer.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package io.vertx.sqlclient.impl.tracing;\n+\n+import io.vertx.core.impl.ContextInternal;\n+import io.vertx.core.spi.tracing.TagExtractor;\n+import io.vertx.core.spi.tracing.VertxTracer;\n+import io.vertx.sqlclient.SqlConnectOptions;\n+import io.vertx.sqlclient.Tuple;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+/**\n+ * Tracer for SQL client, wrapping the generic tracer.\n+ */\n+public class SqlTracer {\n+\n+  enum RequestTags {\n+\n+    // Generic\n+    PEER_ADDRESS(\"peer.address\", q -> q.tracer.address),\n+    PEER_SERVICE(\"peer.service\", q -> \"todo\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxNDQyMw=="}, "originalCommit": {"oid": "680b3291f4337a589877766b214b7348049fccb5"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMzODE3MA==", "bodyText": "from https://docs.instana.io/ecosystem/opentracing/ \"Set the peer.service tag if you don't know the remote side is instrumented. In general, it is not required as long as the remote side is monitored by Instana and, in that case, it will automatically have a service name set. If peer.service is set in the client call and the server is instrumented and has a custom service name, the results are undefined.\" so we don't need it as it's a backend not service", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/625#discussion_r429338170", "createdAt": "2020-05-22T16:20:29Z", "author": {"login": "vietj"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/tracing/SqlTracer.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package io.vertx.sqlclient.impl.tracing;\n+\n+import io.vertx.core.impl.ContextInternal;\n+import io.vertx.core.spi.tracing.TagExtractor;\n+import io.vertx.core.spi.tracing.VertxTracer;\n+import io.vertx.sqlclient.SqlConnectOptions;\n+import io.vertx.sqlclient.Tuple;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+/**\n+ * Tracer for SQL client, wrapping the generic tracer.\n+ */\n+public class SqlTracer {\n+\n+  enum RequestTags {\n+\n+    // Generic\n+    PEER_ADDRESS(\"peer.address\", q -> q.tracer.address),\n+    PEER_SERVICE(\"peer.service\", q -> \"todo\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxNDQyMw=="}, "originalCommit": {"oid": "680b3291f4337a589877766b214b7348049fccb5"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUxNDUyOA==", "bodyText": "+1 I think in our SQL client usecase we don't need to add this.", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/625#discussion_r429514528", "createdAt": "2020-05-23T04:56:31Z", "author": {"login": "BillyYccc"}, "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/tracing/SqlTracer.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package io.vertx.sqlclient.impl.tracing;\n+\n+import io.vertx.core.impl.ContextInternal;\n+import io.vertx.core.spi.tracing.TagExtractor;\n+import io.vertx.core.spi.tracing.VertxTracer;\n+import io.vertx.sqlclient.SqlConnectOptions;\n+import io.vertx.sqlclient.Tuple;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+/**\n+ * Tracer for SQL client, wrapping the generic tracer.\n+ */\n+public class SqlTracer {\n+\n+  enum RequestTags {\n+\n+    // Generic\n+    PEER_ADDRESS(\"peer.address\", q -> q.tracer.address),\n+    PEER_SERVICE(\"peer.service\", q -> \"todo\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxNDQyMw=="}, "originalCommit": {"oid": "680b3291f4337a589877766b214b7348049fccb5"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Mzc3MjI1OnYy", "diffSide": "RIGHT", "path": "vertx-pg-client/src/test/java/io/vertx/pgclient/TracingTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTozMTowM1rOGZbVRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNjoxNDowNFrOGZchJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxNTM5Nw==", "bodyText": "in the assertions order of the expected value and actual value is reversed which reports wrong error messages when tests fail.", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/625#discussion_r429315397", "createdAt": "2020-05-22T15:31:03Z", "author": {"login": "BillyYccc"}, "path": "vertx-pg-client/src/test/java/io/vertx/pgclient/TracingTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package io.vertx.pgclient;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Future;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.VertxOptions;\n+import io.vertx.core.spi.VertxTracerFactory;\n+import io.vertx.core.spi.tracing.TagExtractor;\n+import io.vertx.core.spi.tracing.VertxTracer;\n+import io.vertx.core.tracing.TracingOptions;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.sqlclient.PoolOptions;\n+import io.vertx.sqlclient.RowSet;\n+import io.vertx.sqlclient.SqlClient;\n+import io.vertx.sqlclient.Tuple;\n+import io.vertx.sqlclient.impl.tracing.QueryRequest;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.BiConsumer;\n+import java.util.function.Function;\n+\n+public class TracingTest extends PgTestBase {\n+\n+  Vertx vertx;\n+  VertxTracer tracer;\n+  PgPool pool;\n+\n+  @Before\n+  public void setup() throws Exception {\n+    super.setup();\n+    vertx = Vertx.vertx(new VertxOptions().setTracingOptions(\n+      new TracingOptions().setEnabled(true).setFactory(tracingOptions -> new VertxTracer() {\n+        @Override\n+        public Object sendRequest(Context context, Object request, String operation, BiConsumer headers, TagExtractor tagExtractor) {\n+          return tracer.sendRequest(context, request, operation, headers, tagExtractor);\n+        }\n+\n+        @Override\n+        public void receiveResponse(Context context, Object response, Object payload, Throwable failure, TagExtractor tagExtractor) {\n+          tracer.receiveResponse(context, response, payload, failure, tagExtractor);\n+        }\n+      }))\n+    );\n+    pool = PgPool.pool(vertx, options, new PoolOptions());\n+  }\n+\n+  @After\n+  public void teardown(TestContext ctx) {\n+    vertx.close(ctx.asyncAssertSuccess());\n+  }\n+\n+  @Test\n+  public void testTraceSimpleQuery(TestContext ctx) {\n+    String sql = \"SELECT * FROM Fortune WHERE id=1\";\n+    testTraceQuery(ctx, sql, Collections.emptyList(), conn -> conn.query(sql).execute());\n+  }\n+\n+  @Test\n+  public void testTracePreparedQuery(TestContext ctx) {\n+    String sql = \"SELECT * FROM Fortune WHERE id=$1\";\n+    Tuple tuple = Tuple.of(1);\n+    testTraceQuery(ctx, sql, Collections.singletonList(tuple), conn -> conn.preparedQuery(sql).execute(tuple));\n+  }\n+\n+  @Test\n+  public void testTraceBatchQuery(TestContext ctx) {\n+    String sql = \"SELECT * FROM Fortune WHERE id=$1\";\n+    List<Tuple> tuples = Arrays.asList(Tuple.of(1), Tuple.of(2));\n+    testTraceQuery(ctx, sql, tuples, conn -> conn.preparedQuery(sql).executeBatch(tuples));\n+  }\n+\n+  public void testTraceQuery(TestContext ctx, String expectedSql, List<Tuple> expectedTuples, Function<SqlClient, Future<?>> fn) {\n+    AtomicBoolean called = new AtomicBoolean();\n+    AtomicReference<Context> requestContext = new AtomicReference<>();\n+    AtomicReference<Context> responseContext = new AtomicReference<>();\n+    Object expectedPayload = new Object();\n+    tracer = new VertxTracer<Object, Object>() {\n+      @Override\n+      public <R> Object sendRequest(Context context, R request, String operation, BiConsumer<String, String> headers, TagExtractor<R> tagExtractor) {\n+        QueryRequest query = (QueryRequest) request;\n+        ctx.assertEquals(query.sql(), expectedSql);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "680b3291f4337a589877766b214b7348049fccb5"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMzNDgyMA==", "bodyText": "right :-)", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/625#discussion_r429334820", "createdAt": "2020-05-22T16:14:04Z", "author": {"login": "vietj"}, "path": "vertx-pg-client/src/test/java/io/vertx/pgclient/TracingTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package io.vertx.pgclient;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Future;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.VertxOptions;\n+import io.vertx.core.spi.VertxTracerFactory;\n+import io.vertx.core.spi.tracing.TagExtractor;\n+import io.vertx.core.spi.tracing.VertxTracer;\n+import io.vertx.core.tracing.TracingOptions;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.sqlclient.PoolOptions;\n+import io.vertx.sqlclient.RowSet;\n+import io.vertx.sqlclient.SqlClient;\n+import io.vertx.sqlclient.Tuple;\n+import io.vertx.sqlclient.impl.tracing.QueryRequest;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.BiConsumer;\n+import java.util.function.Function;\n+\n+public class TracingTest extends PgTestBase {\n+\n+  Vertx vertx;\n+  VertxTracer tracer;\n+  PgPool pool;\n+\n+  @Before\n+  public void setup() throws Exception {\n+    super.setup();\n+    vertx = Vertx.vertx(new VertxOptions().setTracingOptions(\n+      new TracingOptions().setEnabled(true).setFactory(tracingOptions -> new VertxTracer() {\n+        @Override\n+        public Object sendRequest(Context context, Object request, String operation, BiConsumer headers, TagExtractor tagExtractor) {\n+          return tracer.sendRequest(context, request, operation, headers, tagExtractor);\n+        }\n+\n+        @Override\n+        public void receiveResponse(Context context, Object response, Object payload, Throwable failure, TagExtractor tagExtractor) {\n+          tracer.receiveResponse(context, response, payload, failure, tagExtractor);\n+        }\n+      }))\n+    );\n+    pool = PgPool.pool(vertx, options, new PoolOptions());\n+  }\n+\n+  @After\n+  public void teardown(TestContext ctx) {\n+    vertx.close(ctx.asyncAssertSuccess());\n+  }\n+\n+  @Test\n+  public void testTraceSimpleQuery(TestContext ctx) {\n+    String sql = \"SELECT * FROM Fortune WHERE id=1\";\n+    testTraceQuery(ctx, sql, Collections.emptyList(), conn -> conn.query(sql).execute());\n+  }\n+\n+  @Test\n+  public void testTracePreparedQuery(TestContext ctx) {\n+    String sql = \"SELECT * FROM Fortune WHERE id=$1\";\n+    Tuple tuple = Tuple.of(1);\n+    testTraceQuery(ctx, sql, Collections.singletonList(tuple), conn -> conn.preparedQuery(sql).execute(tuple));\n+  }\n+\n+  @Test\n+  public void testTraceBatchQuery(TestContext ctx) {\n+    String sql = \"SELECT * FROM Fortune WHERE id=$1\";\n+    List<Tuple> tuples = Arrays.asList(Tuple.of(1), Tuple.of(2));\n+    testTraceQuery(ctx, sql, tuples, conn -> conn.preparedQuery(sql).executeBatch(tuples));\n+  }\n+\n+  public void testTraceQuery(TestContext ctx, String expectedSql, List<Tuple> expectedTuples, Function<SqlClient, Future<?>> fn) {\n+    AtomicBoolean called = new AtomicBoolean();\n+    AtomicReference<Context> requestContext = new AtomicReference<>();\n+    AtomicReference<Context> responseContext = new AtomicReference<>();\n+    Object expectedPayload = new Object();\n+    tracer = new VertxTracer<Object, Object>() {\n+      @Override\n+      public <R> Object sendRequest(Context context, R request, String operation, BiConsumer<String, String> headers, TagExtractor<R> tagExtractor) {\n+        QueryRequest query = (QueryRequest) request;\n+        ctx.assertEquals(query.sql(), expectedSql);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxNTM5Nw=="}, "originalCommit": {"oid": "680b3291f4337a589877766b214b7348049fccb5"}, "originalPosition": 91}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4487, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}