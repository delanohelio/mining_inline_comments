{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5ODY1MTQ5", "number": 603, "title": "Additional basic DB2 input validation", "bodyText": "Added the following tests for DB2:\ntestConnectInvalidDatabase\ntestQueryBlankDatabase\ntestQueryBlankUsername\ntestQueryBlankPassword\ntestQueryBlankTable\ntestInvalidTableQuery\ntestInvalidColumnQuery\ntestInvalidQuery\nand returning DB2Exceptions with SQL error code and SQL state.\nAlso modified the testTimestamp to handle DBs that don't have nano precision.", "createdAt": "2020-04-28T03:48:24Z", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/603", "merged": true, "mergeCommit": {"oid": "0720d755d874761c8dc07e6e5f4e988c8fccdc4a"}, "closed": true, "closedAt": "2020-05-01T13:13:07Z", "author": {"login": "gjwatts"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcb8CvUAH2gAyNDA5ODY1MTQ5OmM2MmFjYzVkMzQxMTMyYTc0NDFiOTU3NWQyNTk5MGI5NTYwYTE5YTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcdBeT_AFqTQwNDE1MTY4Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c62acc5d341132a7441b9575d25990b9560a19a4", "author": {"user": {"login": "gjwatts", "name": "Greg Watts"}}, "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/c62acc5d341132a7441b9575d25990b9560a19a4", "committedDate": "2020-04-28T04:19:20Z", "message": "Additional basic DB2 input validation\n\nSigned-off-by: Greg Watts <gwatts@us.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d49d7009c6791d714e8228272420660521f5df19", "author": {"user": {"login": "gjwatts", "name": "Greg Watts"}}, "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/d49d7009c6791d714e8228272420660521f5df19", "committedDate": "2020-04-28T03:42:42Z", "message": "Additional basic DB2 input validation\n\nSigned-off-by: Greg Watts <gwatts@us.ibm.com>"}, "afterCommit": {"oid": "c62acc5d341132a7441b9575d25990b9560a19a4", "author": {"user": {"login": "gjwatts", "name": "Greg Watts"}}, "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/c62acc5d341132a7441b9575d25990b9560a19a4", "committedDate": "2020-04-28T04:19:20Z", "message": "Additional basic DB2 input validation\n\nSigned-off-by: Greg Watts <gwatts@us.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxOTcwNDU4", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/603#pullrequestreview-401970458", "createdAt": "2020-04-28T15:44:56Z", "commit": {"oid": "c62acc5d341132a7441b9575d25990b9560a19a4"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNTo0NDo1N1rOGNarYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxODo0NjowMFrOGNiDgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjcyMTc2MA==", "bodyText": "lets leave these initialized as empty strings", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/603#discussion_r416721760", "createdAt": "2020-04-28T15:44:57Z", "author": {"login": "aguibert"}, "path": "vertx-db2-client/src/main/java/io/vertx/db2client/DB2ConnectOptions.java", "diffHunk": "@@ -47,11 +49,11 @@ public static DB2ConnectOptions fromUri(String connectionUri) throws IllegalArgu\n     public static final String DEFAULT_HOST = \"localhost\";\n     public static final int DEFAULT_PORT = 50000;\n     public static final String DEFAULT_USER = \"root\";\n-    public static final String DEFAULT_PASSWORD = \"\";\n-    public static final String DEFAULT_SCHEMA = \"\";\n+    public static final String DEFAULT_PASSWORD = \"INVALID\";\n+    public static final String DEFAULT_SCHEMA = \"INVALID\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62acc5d341132a7441b9575d25990b9560a19a4"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjcyMjQwNQ==", "bodyText": "for user/pass/database lets just check the length of the string without calling trim() (whitespace may still be valid characters)", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/603#discussion_r416722405", "createdAt": "2020-04-28T15:45:51Z", "author": {"login": "aguibert"}, "path": "vertx-db2-client/src/main/java/io/vertx/db2client/DB2ConnectOptions.java", "diffHunk": "@@ -93,17 +95,29 @@ public DB2ConnectOptions setPort(int port) {\n \n     @Override\n     public DB2ConnectOptions setUser(String user) {\n-        return (DB2ConnectOptions) super.setUser(user);\n+    \tif (user == null || user.trim().length() < 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62acc5d341132a7441b9575d25990b9560a19a4"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc3NTc0OQ==", "bodyText": "Lets include the actual error code received in the error message here and on line 44", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/603#discussion_r416775749", "createdAt": "2020-04-28T17:00:23Z", "author": {"login": "aguibert"}, "path": "vertx-db2-client/src/test/java/io/vertx/db2client/DB2ErrorMessageTest.java", "diffHunk": "@@ -26,66 +26,155 @@\n \n @RunWith(VertxUnitRunner.class)\n public class DB2ErrorMessageTest extends DB2TestBase {\n-\t\n+\n \t@Test\n-\t@Ignore\t\t// TODO - Need to figure out why this is blowing up in parseACCSECreply()\n \tpublic void testConnectInvalidDatabase(TestContext ctx) {\n-\t  options.setDatabase(\"DOES_NOT_EXIST\");\n-\t  DB2Connection.connect(vertx, options, ctx.asyncAssertFailure(err -> {\n-\t\t  ctx.assertTrue(err instanceof DB2Exception, \"The error message returned is of the wrong type.  It should be a DB2Exception, but it was of type \" + err.getClass().getSimpleName());\n-//\t\t  DB2Exception ex = (DB2Exception) err;\n-//\t\t  ctx.assertTrue(ex.getMessage().contains(\"Invalid database\"), \"The SQL error message returned is not correct.  It should have contained \\\"Invalid database\\\", but instead it said \\\"\" + ex.getMessage() + \"\\\"\");\n-\t  }));\n+\t\toptions.setDatabase(\"DB_DOES_NOT_EXIST\");\n+\t\tDB2Connection.connect(vertx, options, ctx.asyncAssertFailure(err -> {\n+\t\t\tctx.assertTrue(err instanceof DB2Exception, \"The error message returned is of the wrong type.  It should be a DB2Exception, but it was of type \" + err.getClass().getSimpleName());\n+\t\t\tDB2Exception ex = (DB2Exception) err;\n+\t\t\tctx.assertTrue(ex.getMessage().contains(\"provided was not found\") ||\n+\t\t\t\t\tex.getMessage().contains(\"The connection was closed by the database server\"), \n+\t\t\t\t\t\"The SQL error message returned is not correct.  It should have contained \\\"provided was not found\\\" or \\\"The connection was closed by the database server\\\", but instead it said \\\"\" + ex.getMessage() + \"\\\"\");\n+\t\t\tctx.assertTrue(ex.getErrorCode() == SqlCode.DATABASE_NOT_FOUND ||\n+\t\t\t\t\tex.getErrorCode() == SqlCode.CONNECTION_REFUSED, \n+\t\t\t\t\t\"Wrong SQL code received\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62acc5d341132a7441b9575d25990b9560a19a4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc3NjM5OA==", "bodyText": "is this test case intentionally ignored?", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/603#discussion_r416776398", "createdAt": "2020-04-28T17:01:22Z", "author": {"login": "aguibert"}, "path": "vertx-db2-client/src/test/java/io/vertx/db2client/DB2ErrorMessageTest.java", "diffHunk": "@@ -26,66 +26,155 @@\n \n @RunWith(VertxUnitRunner.class)\n public class DB2ErrorMessageTest extends DB2TestBase {\n-\t\n+\n \t@Test\n-\t@Ignore\t\t// TODO - Need to figure out why this is blowing up in parseACCSECreply()\n \tpublic void testConnectInvalidDatabase(TestContext ctx) {\n-\t  options.setDatabase(\"DOES_NOT_EXIST\");\n-\t  DB2Connection.connect(vertx, options, ctx.asyncAssertFailure(err -> {\n-\t\t  ctx.assertTrue(err instanceof DB2Exception, \"The error message returned is of the wrong type.  It should be a DB2Exception, but it was of type \" + err.getClass().getSimpleName());\n-//\t\t  DB2Exception ex = (DB2Exception) err;\n-//\t\t  ctx.assertTrue(ex.getMessage().contains(\"Invalid database\"), \"The SQL error message returned is not correct.  It should have contained \\\"Invalid database\\\", but instead it said \\\"\" + ex.getMessage() + \"\\\"\");\n-\t  }));\n+\t\toptions.setDatabase(\"DB_DOES_NOT_EXIST\");\n+\t\tDB2Connection.connect(vertx, options, ctx.asyncAssertFailure(err -> {\n+\t\t\tctx.assertTrue(err instanceof DB2Exception, \"The error message returned is of the wrong type.  It should be a DB2Exception, but it was of type \" + err.getClass().getSimpleName());\n+\t\t\tDB2Exception ex = (DB2Exception) err;\n+\t\t\tctx.assertTrue(ex.getMessage().contains(\"provided was not found\") ||\n+\t\t\t\t\tex.getMessage().contains(\"The connection was closed by the database server\"), \n+\t\t\t\t\t\"The SQL error message returned is not correct.  It should have contained \\\"provided was not found\\\" or \\\"The connection was closed by the database server\\\", but instead it said \\\"\" + ex.getMessage() + \"\\\"\");\n+\t\t\tctx.assertTrue(ex.getErrorCode() == SqlCode.DATABASE_NOT_FOUND ||\n+\t\t\t\t\tex.getErrorCode() == SqlCode.CONNECTION_REFUSED, \n+\t\t\t\t\t\"Wrong SQL code received\");\n+\t\t\tctx.assertTrue(ex.getSqlState().equalsIgnoreCase(\"2E000\") ||\n+\t\t\t\t\tex.getSqlState() == SQLState.AUTH_DATABASE_CONNECTION_REFUSED,\n+\t\t\t\t\t\"Wrong SQL state received\");\n+//\t\t\tSystem.out.println(ex.getMessage());\n+\t\t}));\n \t}\n-\t\n+\n \t@Test\n \tpublic void testConnectInvalidUsername(TestContext ctx) {\n-\t  options.setUser(\"INVALID_USER_FOR_TESTING\");\n-\t  DB2Connection.connect(vertx, options, ctx.asyncAssertFailure(err -> {\n-\t\t  ctx.assertTrue(err instanceof DB2Exception, \"The error message returned is of the wrong type.  It should be a DB2Exception, but it was of type \" + err.getClass().getSimpleName());\n-\t\t  DB2Exception ex = (DB2Exception) err;\n-\t\t  ctx.assertTrue(ex.getMessage().contains(\"Invalid credentials\"), \"The SQL error message returned is not correct.  It should have contained \\\"Invalid credentials\\\", but instead it said \\\"\" + ex.getMessage() + \"\\\"\");\n-\t\t  ctx.assertEquals(SqlCode.INVALID_CREDENTIALS, ex.getErrorCode());\n-\t\t  ctx.assertEquals(SQLState.NET_CONNECT_AUTH_FAILED, ex.getSqlState());\n-\t\t  System.out.println(err.getMessage());\n-\t  }));\n+\t\toptions.setUser(\"INVALID_USER_FOR_TESTING\");\n+\t\tDB2Connection.connect(vertx, options, ctx.asyncAssertFailure(err -> {\n+\t\t\tctx.assertTrue(err instanceof DB2Exception, \"The error message returned is of the wrong type.  It should be a DB2Exception, but it was of type \" + err.getClass().getSimpleName());\n+\t\t\tDB2Exception ex = (DB2Exception) err;\n+\t\t\tctx.assertTrue(ex.getMessage().contains(\"Invalid credentials\"), \"The SQL error message returned is not correct.  It should have contained \\\"Invalid credentials\\\", but instead it said \\\"\" + ex.getMessage() + \"\\\"\");\n+\t\t\tctx.assertEquals(SqlCode.INVALID_CREDENTIALS, ex.getErrorCode());\n+\t\t\tctx.assertEquals(SQLState.NET_CONNECT_AUTH_FAILED, ex.getSqlState());\n+//\t\t\tSystem.out.println(ex.getMessage());\n+\t\t}));\n \t}\n-\t\n+\n \t@Test\n \tpublic void testConnectInvalidPassword(TestContext ctx) {\n \t\toptions.setPassword(\"INVALID_PASSWORD_FOR_TESTING\");\n-\t\t  DB2Connection.connect(vertx, options, ctx.asyncAssertFailure(err -> {\n-\t\t\t  ctx.assertTrue(err instanceof DB2Exception, \"The error message returned is of the wrong type.  It should be a DB2Exception, but it was of type \" + err.getClass().getSimpleName());\n-\t\t\t  DB2Exception ex = (DB2Exception) err;\n-\t\t\t  ctx.assertTrue(ex.getMessage().contains(\"Invalid credentials\"), \"The SQL error message returned is not correct.  It should have contained \\\"Invalid credentials\\\", but instead it said \\\"\" + ex.getMessage() + \"\\\"\");\n-\t\t\t  ctx.assertEquals(SqlCode.INVALID_CREDENTIALS, ex.getErrorCode());\n-\t\t\t  ctx.assertEquals(SQLState.NET_CONNECT_AUTH_FAILED, ex.getSqlState());\n-\t\t\t  System.out.println(err.getMessage());\n-\t\t  }));\n+\t\tDB2Connection.connect(vertx, options, ctx.asyncAssertFailure(err -> {\n+\t\t\tctx.assertTrue(err instanceof DB2Exception, \"The error message returned is of the wrong type.  It should be a DB2Exception, but it was of type \" + err.getClass().getSimpleName());\n+\t\t\tDB2Exception ex = (DB2Exception) err;\n+\t\t\tctx.assertTrue(ex.getMessage().contains(\"Invalid credentials\"), \"The SQL error message returned is not correct.  It should have contained \\\"Invalid credentials\\\", but instead it said \\\"\" + ex.getMessage() + \"\\\"\");\n+\t\t\tctx.assertEquals(SqlCode.INVALID_CREDENTIALS, ex.getErrorCode());\n+\t\t\tctx.assertEquals(SQLState.NET_CONNECT_AUTH_FAILED, ex.getSqlState());\n+//\t\t\tSystem.out.println(ex.getMessage());\n+\t\t}));\n+\t}\n+\n+\t@Test\n+\t@Ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62acc5d341132a7441b9575d25990b9560a19a4"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc3NzI5Nw==", "bodyText": "if you change the catch block to only catch a DB2Exception then you don't have to do the instanceof check and cast. If any other exception type was thrown it would miss the catch block and cause the test case to fail as expected", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/603#discussion_r416777297", "createdAt": "2020-04-28T17:02:43Z", "author": {"login": "aguibert"}, "path": "vertx-db2-client/src/test/java/io/vertx/db2client/DB2ErrorMessageTest.java", "diffHunk": "@@ -26,66 +26,155 @@\n \n @RunWith(VertxUnitRunner.class)\n public class DB2ErrorMessageTest extends DB2TestBase {\n-\t\n+\n \t@Test\n-\t@Ignore\t\t// TODO - Need to figure out why this is blowing up in parseACCSECreply()\n \tpublic void testConnectInvalidDatabase(TestContext ctx) {\n-\t  options.setDatabase(\"DOES_NOT_EXIST\");\n-\t  DB2Connection.connect(vertx, options, ctx.asyncAssertFailure(err -> {\n-\t\t  ctx.assertTrue(err instanceof DB2Exception, \"The error message returned is of the wrong type.  It should be a DB2Exception, but it was of type \" + err.getClass().getSimpleName());\n-//\t\t  DB2Exception ex = (DB2Exception) err;\n-//\t\t  ctx.assertTrue(ex.getMessage().contains(\"Invalid database\"), \"The SQL error message returned is not correct.  It should have contained \\\"Invalid database\\\", but instead it said \\\"\" + ex.getMessage() + \"\\\"\");\n-\t  }));\n+\t\toptions.setDatabase(\"DB_DOES_NOT_EXIST\");\n+\t\tDB2Connection.connect(vertx, options, ctx.asyncAssertFailure(err -> {\n+\t\t\tctx.assertTrue(err instanceof DB2Exception, \"The error message returned is of the wrong type.  It should be a DB2Exception, but it was of type \" + err.getClass().getSimpleName());\n+\t\t\tDB2Exception ex = (DB2Exception) err;\n+\t\t\tctx.assertTrue(ex.getMessage().contains(\"provided was not found\") ||\n+\t\t\t\t\tex.getMessage().contains(\"The connection was closed by the database server\"), \n+\t\t\t\t\t\"The SQL error message returned is not correct.  It should have contained \\\"provided was not found\\\" or \\\"The connection was closed by the database server\\\", but instead it said \\\"\" + ex.getMessage() + \"\\\"\");\n+\t\t\tctx.assertTrue(ex.getErrorCode() == SqlCode.DATABASE_NOT_FOUND ||\n+\t\t\t\t\tex.getErrorCode() == SqlCode.CONNECTION_REFUSED, \n+\t\t\t\t\t\"Wrong SQL code received\");\n+\t\t\tctx.assertTrue(ex.getSqlState().equalsIgnoreCase(\"2E000\") ||\n+\t\t\t\t\tex.getSqlState() == SQLState.AUTH_DATABASE_CONNECTION_REFUSED,\n+\t\t\t\t\t\"Wrong SQL state received\");\n+//\t\t\tSystem.out.println(ex.getMessage());\n+\t\t}));\n \t}\n-\t\n+\n \t@Test\n \tpublic void testConnectInvalidUsername(TestContext ctx) {\n-\t  options.setUser(\"INVALID_USER_FOR_TESTING\");\n-\t  DB2Connection.connect(vertx, options, ctx.asyncAssertFailure(err -> {\n-\t\t  ctx.assertTrue(err instanceof DB2Exception, \"The error message returned is of the wrong type.  It should be a DB2Exception, but it was of type \" + err.getClass().getSimpleName());\n-\t\t  DB2Exception ex = (DB2Exception) err;\n-\t\t  ctx.assertTrue(ex.getMessage().contains(\"Invalid credentials\"), \"The SQL error message returned is not correct.  It should have contained \\\"Invalid credentials\\\", but instead it said \\\"\" + ex.getMessage() + \"\\\"\");\n-\t\t  ctx.assertEquals(SqlCode.INVALID_CREDENTIALS, ex.getErrorCode());\n-\t\t  ctx.assertEquals(SQLState.NET_CONNECT_AUTH_FAILED, ex.getSqlState());\n-\t\t  System.out.println(err.getMessage());\n-\t  }));\n+\t\toptions.setUser(\"INVALID_USER_FOR_TESTING\");\n+\t\tDB2Connection.connect(vertx, options, ctx.asyncAssertFailure(err -> {\n+\t\t\tctx.assertTrue(err instanceof DB2Exception, \"The error message returned is of the wrong type.  It should be a DB2Exception, but it was of type \" + err.getClass().getSimpleName());\n+\t\t\tDB2Exception ex = (DB2Exception) err;\n+\t\t\tctx.assertTrue(ex.getMessage().contains(\"Invalid credentials\"), \"The SQL error message returned is not correct.  It should have contained \\\"Invalid credentials\\\", but instead it said \\\"\" + ex.getMessage() + \"\\\"\");\n+\t\t\tctx.assertEquals(SqlCode.INVALID_CREDENTIALS, ex.getErrorCode());\n+\t\t\tctx.assertEquals(SQLState.NET_CONNECT_AUTH_FAILED, ex.getSqlState());\n+//\t\t\tSystem.out.println(ex.getMessage());\n+\t\t}));\n \t}\n-\t\n+\n \t@Test\n \tpublic void testConnectInvalidPassword(TestContext ctx) {\n \t\toptions.setPassword(\"INVALID_PASSWORD_FOR_TESTING\");\n-\t\t  DB2Connection.connect(vertx, options, ctx.asyncAssertFailure(err -> {\n-\t\t\t  ctx.assertTrue(err instanceof DB2Exception, \"The error message returned is of the wrong type.  It should be a DB2Exception, but it was of type \" + err.getClass().getSimpleName());\n-\t\t\t  DB2Exception ex = (DB2Exception) err;\n-\t\t\t  ctx.assertTrue(ex.getMessage().contains(\"Invalid credentials\"), \"The SQL error message returned is not correct.  It should have contained \\\"Invalid credentials\\\", but instead it said \\\"\" + ex.getMessage() + \"\\\"\");\n-\t\t\t  ctx.assertEquals(SqlCode.INVALID_CREDENTIALS, ex.getErrorCode());\n-\t\t\t  ctx.assertEquals(SQLState.NET_CONNECT_AUTH_FAILED, ex.getSqlState());\n-\t\t\t  System.out.println(err.getMessage());\n-\t\t  }));\n+\t\tDB2Connection.connect(vertx, options, ctx.asyncAssertFailure(err -> {\n+\t\t\tctx.assertTrue(err instanceof DB2Exception, \"The error message returned is of the wrong type.  It should be a DB2Exception, but it was of type \" + err.getClass().getSimpleName());\n+\t\t\tDB2Exception ex = (DB2Exception) err;\n+\t\t\tctx.assertTrue(ex.getMessage().contains(\"Invalid credentials\"), \"The SQL error message returned is not correct.  It should have contained \\\"Invalid credentials\\\", but instead it said \\\"\" + ex.getMessage() + \"\\\"\");\n+\t\t\tctx.assertEquals(SqlCode.INVALID_CREDENTIALS, ex.getErrorCode());\n+\t\t\tctx.assertEquals(SQLState.NET_CONNECT_AUTH_FAILED, ex.getSqlState());\n+//\t\t\tSystem.out.println(ex.getMessage());\n+\t\t}));\n+\t}\n+\n+\t@Test\n+\t@Ignore\n+\tpublic void testQueryBlankDatabase(TestContext ctx) {\n+\t\ttry {\n+\t\t\toptions.setDatabase(\"\");\n+\t\t\tctx.fail(\"Expected a DB2Exception to be thrown\");\n+\t\t} catch (Exception e) {\n+\t\t\tctx.assertTrue(e instanceof DB2Exception, \"Expected a DB2Exception to be thrown\");\n+\t\t\tDB2Exception ex = (DB2Exception) e;\n+\t\t\tctx.assertTrue(ex.getMessage().contains(\"The database name cannot be blank or null\"), \"The SQL error message returned is not correct.  It should have contained \\\"The database name cannot be blank or null\\\", but instead it said \\\"\" + ex.getMessage() + \"\\\"\");\n+\t\t\tctx.assertEquals(SqlCode.DATABASE_NOT_FOUND, ex.getErrorCode());\n+\t\t\tctx.assertEquals(SQLState.DATABASE_NOT_FOUND, ex.getSqlState());\n+//\t\t\tSystem.out.println(ex.getMessage());\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testQueryBlankUsername(TestContext ctx) {\n+\t\ttry {\n+\t\t\toptions.setUser(\"\");\n+\t\t\tctx.fail(\"Expected a DB2Exception to be thrown\");\n+\t\t} catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62acc5d341132a7441b9575d25990b9560a19a4"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg0MjA2OQ==", "bodyText": "also applies to a few other cases in this PR", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/603#discussion_r416842069", "createdAt": "2020-04-28T18:44:58Z", "author": {"login": "aguibert"}, "path": "vertx-db2-client/src/test/java/io/vertx/db2client/DB2ErrorMessageTest.java", "diffHunk": "@@ -26,66 +26,155 @@\n \n @RunWith(VertxUnitRunner.class)\n public class DB2ErrorMessageTest extends DB2TestBase {\n-\t\n+\n \t@Test\n-\t@Ignore\t\t// TODO - Need to figure out why this is blowing up in parseACCSECreply()\n \tpublic void testConnectInvalidDatabase(TestContext ctx) {\n-\t  options.setDatabase(\"DOES_NOT_EXIST\");\n-\t  DB2Connection.connect(vertx, options, ctx.asyncAssertFailure(err -> {\n-\t\t  ctx.assertTrue(err instanceof DB2Exception, \"The error message returned is of the wrong type.  It should be a DB2Exception, but it was of type \" + err.getClass().getSimpleName());\n-//\t\t  DB2Exception ex = (DB2Exception) err;\n-//\t\t  ctx.assertTrue(ex.getMessage().contains(\"Invalid database\"), \"The SQL error message returned is not correct.  It should have contained \\\"Invalid database\\\", but instead it said \\\"\" + ex.getMessage() + \"\\\"\");\n-\t  }));\n+\t\toptions.setDatabase(\"DB_DOES_NOT_EXIST\");\n+\t\tDB2Connection.connect(vertx, options, ctx.asyncAssertFailure(err -> {\n+\t\t\tctx.assertTrue(err instanceof DB2Exception, \"The error message returned is of the wrong type.  It should be a DB2Exception, but it was of type \" + err.getClass().getSimpleName());\n+\t\t\tDB2Exception ex = (DB2Exception) err;\n+\t\t\tctx.assertTrue(ex.getMessage().contains(\"provided was not found\") ||\n+\t\t\t\t\tex.getMessage().contains(\"The connection was closed by the database server\"), \n+\t\t\t\t\t\"The SQL error message returned is not correct.  It should have contained \\\"provided was not found\\\" or \\\"The connection was closed by the database server\\\", but instead it said \\\"\" + ex.getMessage() + \"\\\"\");\n+\t\t\tctx.assertTrue(ex.getErrorCode() == SqlCode.DATABASE_NOT_FOUND ||\n+\t\t\t\t\tex.getErrorCode() == SqlCode.CONNECTION_REFUSED, \n+\t\t\t\t\t\"Wrong SQL code received\");\n+\t\t\tctx.assertTrue(ex.getSqlState().equalsIgnoreCase(\"2E000\") ||\n+\t\t\t\t\tex.getSqlState() == SQLState.AUTH_DATABASE_CONNECTION_REFUSED,\n+\t\t\t\t\t\"Wrong SQL state received\");\n+//\t\t\tSystem.out.println(ex.getMessage());\n+\t\t}));\n \t}\n-\t\n+\n \t@Test\n \tpublic void testConnectInvalidUsername(TestContext ctx) {\n-\t  options.setUser(\"INVALID_USER_FOR_TESTING\");\n-\t  DB2Connection.connect(vertx, options, ctx.asyncAssertFailure(err -> {\n-\t\t  ctx.assertTrue(err instanceof DB2Exception, \"The error message returned is of the wrong type.  It should be a DB2Exception, but it was of type \" + err.getClass().getSimpleName());\n-\t\t  DB2Exception ex = (DB2Exception) err;\n-\t\t  ctx.assertTrue(ex.getMessage().contains(\"Invalid credentials\"), \"The SQL error message returned is not correct.  It should have contained \\\"Invalid credentials\\\", but instead it said \\\"\" + ex.getMessage() + \"\\\"\");\n-\t\t  ctx.assertEquals(SqlCode.INVALID_CREDENTIALS, ex.getErrorCode());\n-\t\t  ctx.assertEquals(SQLState.NET_CONNECT_AUTH_FAILED, ex.getSqlState());\n-\t\t  System.out.println(err.getMessage());\n-\t  }));\n+\t\toptions.setUser(\"INVALID_USER_FOR_TESTING\");\n+\t\tDB2Connection.connect(vertx, options, ctx.asyncAssertFailure(err -> {\n+\t\t\tctx.assertTrue(err instanceof DB2Exception, \"The error message returned is of the wrong type.  It should be a DB2Exception, but it was of type \" + err.getClass().getSimpleName());\n+\t\t\tDB2Exception ex = (DB2Exception) err;\n+\t\t\tctx.assertTrue(ex.getMessage().contains(\"Invalid credentials\"), \"The SQL error message returned is not correct.  It should have contained \\\"Invalid credentials\\\", but instead it said \\\"\" + ex.getMessage() + \"\\\"\");\n+\t\t\tctx.assertEquals(SqlCode.INVALID_CREDENTIALS, ex.getErrorCode());\n+\t\t\tctx.assertEquals(SQLState.NET_CONNECT_AUTH_FAILED, ex.getSqlState());\n+//\t\t\tSystem.out.println(ex.getMessage());\n+\t\t}));\n \t}\n-\t\n+\n \t@Test\n \tpublic void testConnectInvalidPassword(TestContext ctx) {\n \t\toptions.setPassword(\"INVALID_PASSWORD_FOR_TESTING\");\n-\t\t  DB2Connection.connect(vertx, options, ctx.asyncAssertFailure(err -> {\n-\t\t\t  ctx.assertTrue(err instanceof DB2Exception, \"The error message returned is of the wrong type.  It should be a DB2Exception, but it was of type \" + err.getClass().getSimpleName());\n-\t\t\t  DB2Exception ex = (DB2Exception) err;\n-\t\t\t  ctx.assertTrue(ex.getMessage().contains(\"Invalid credentials\"), \"The SQL error message returned is not correct.  It should have contained \\\"Invalid credentials\\\", but instead it said \\\"\" + ex.getMessage() + \"\\\"\");\n-\t\t\t  ctx.assertEquals(SqlCode.INVALID_CREDENTIALS, ex.getErrorCode());\n-\t\t\t  ctx.assertEquals(SQLState.NET_CONNECT_AUTH_FAILED, ex.getSqlState());\n-\t\t\t  System.out.println(err.getMessage());\n-\t\t  }));\n+\t\tDB2Connection.connect(vertx, options, ctx.asyncAssertFailure(err -> {\n+\t\t\tctx.assertTrue(err instanceof DB2Exception, \"The error message returned is of the wrong type.  It should be a DB2Exception, but it was of type \" + err.getClass().getSimpleName());\n+\t\t\tDB2Exception ex = (DB2Exception) err;\n+\t\t\tctx.assertTrue(ex.getMessage().contains(\"Invalid credentials\"), \"The SQL error message returned is not correct.  It should have contained \\\"Invalid credentials\\\", but instead it said \\\"\" + ex.getMessage() + \"\\\"\");\n+\t\t\tctx.assertEquals(SqlCode.INVALID_CREDENTIALS, ex.getErrorCode());\n+\t\t\tctx.assertEquals(SQLState.NET_CONNECT_AUTH_FAILED, ex.getSqlState());\n+//\t\t\tSystem.out.println(ex.getMessage());\n+\t\t}));\n+\t}\n+\n+\t@Test\n+\t@Ignore\n+\tpublic void testQueryBlankDatabase(TestContext ctx) {\n+\t\ttry {\n+\t\t\toptions.setDatabase(\"\");\n+\t\t\tctx.fail(\"Expected a DB2Exception to be thrown\");\n+\t\t} catch (Exception e) {\n+\t\t\tctx.assertTrue(e instanceof DB2Exception, \"Expected a DB2Exception to be thrown\");\n+\t\t\tDB2Exception ex = (DB2Exception) e;\n+\t\t\tctx.assertTrue(ex.getMessage().contains(\"The database name cannot be blank or null\"), \"The SQL error message returned is not correct.  It should have contained \\\"The database name cannot be blank or null\\\", but instead it said \\\"\" + ex.getMessage() + \"\\\"\");\n+\t\t\tctx.assertEquals(SqlCode.DATABASE_NOT_FOUND, ex.getErrorCode());\n+\t\t\tctx.assertEquals(SQLState.DATABASE_NOT_FOUND, ex.getSqlState());\n+//\t\t\tSystem.out.println(ex.getMessage());\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testQueryBlankUsername(TestContext ctx) {\n+\t\ttry {\n+\t\t\toptions.setUser(\"\");\n+\t\t\tctx.fail(\"Expected a DB2Exception to be thrown\");\n+\t\t} catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc3NzI5Nw=="}, "originalCommit": {"oid": "c62acc5d341132a7441b9575d25990b9560a19a4"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg0MjYyNw==", "bodyText": "all of these commented out print statements can be removed", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/603#discussion_r416842627", "createdAt": "2020-04-28T18:46:00Z", "author": {"login": "aguibert"}, "path": "vertx-db2-client/src/test/java/io/vertx/db2client/DB2ErrorMessageTest.java", "diffHunk": "@@ -26,66 +26,155 @@\n \n @RunWith(VertxUnitRunner.class)\n public class DB2ErrorMessageTest extends DB2TestBase {\n-\t\n+\n \t@Test\n-\t@Ignore\t\t// TODO - Need to figure out why this is blowing up in parseACCSECreply()\n \tpublic void testConnectInvalidDatabase(TestContext ctx) {\n-\t  options.setDatabase(\"DOES_NOT_EXIST\");\n-\t  DB2Connection.connect(vertx, options, ctx.asyncAssertFailure(err -> {\n-\t\t  ctx.assertTrue(err instanceof DB2Exception, \"The error message returned is of the wrong type.  It should be a DB2Exception, but it was of type \" + err.getClass().getSimpleName());\n-//\t\t  DB2Exception ex = (DB2Exception) err;\n-//\t\t  ctx.assertTrue(ex.getMessage().contains(\"Invalid database\"), \"The SQL error message returned is not correct.  It should have contained \\\"Invalid database\\\", but instead it said \\\"\" + ex.getMessage() + \"\\\"\");\n-\t  }));\n+\t\toptions.setDatabase(\"DB_DOES_NOT_EXIST\");\n+\t\tDB2Connection.connect(vertx, options, ctx.asyncAssertFailure(err -> {\n+\t\t\tctx.assertTrue(err instanceof DB2Exception, \"The error message returned is of the wrong type.  It should be a DB2Exception, but it was of type \" + err.getClass().getSimpleName());\n+\t\t\tDB2Exception ex = (DB2Exception) err;\n+\t\t\tctx.assertTrue(ex.getMessage().contains(\"provided was not found\") ||\n+\t\t\t\t\tex.getMessage().contains(\"The connection was closed by the database server\"), \n+\t\t\t\t\t\"The SQL error message returned is not correct.  It should have contained \\\"provided was not found\\\" or \\\"The connection was closed by the database server\\\", but instead it said \\\"\" + ex.getMessage() + \"\\\"\");\n+\t\t\tctx.assertTrue(ex.getErrorCode() == SqlCode.DATABASE_NOT_FOUND ||\n+\t\t\t\t\tex.getErrorCode() == SqlCode.CONNECTION_REFUSED, \n+\t\t\t\t\t\"Wrong SQL code received\");\n+\t\t\tctx.assertTrue(ex.getSqlState().equalsIgnoreCase(\"2E000\") ||\n+\t\t\t\t\tex.getSqlState() == SQLState.AUTH_DATABASE_CONNECTION_REFUSED,\n+\t\t\t\t\t\"Wrong SQL state received\");\n+//\t\t\tSystem.out.println(ex.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62acc5d341132a7441b9575d25990b9560a19a4"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bad574b9535cc9ebdde61d13829d6212179cfb34", "author": {"user": {"login": "gjwatts", "name": "Greg Watts"}}, "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/bad574b9535cc9ebdde61d13829d6212179cfb34", "committedDate": "2020-04-29T20:47:23Z", "message": "Merge branch 'master' of github.com:eclipse-vertx/vertx-sql-client into 490-connection-error-path-handling\n\nSigned-off-by: Greg Watts <gwatts@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec8042616d64badc59810c7f0eb6f9337c0f326f", "author": {"user": {"login": "gjwatts", "name": "Greg Watts"}}, "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/ec8042616d64badc59810c7f0eb6f9337c0f326f", "committedDate": "2020-05-01T00:37:03Z", "message": "Change testTimestamp to handle DBs without nano precision\n\nSigned-off-by: Greg Watts <gwatts@us.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MTUxNjg3", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/603#pullrequestreview-404151687", "createdAt": "2020-05-01T13:12:54Z", "commit": {"oid": "ec8042616d64badc59810c7f0eb6f9337c0f326f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1617, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}