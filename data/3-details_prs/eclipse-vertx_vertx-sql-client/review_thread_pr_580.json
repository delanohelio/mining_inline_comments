{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxOTUzODA1", "number": 580, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOToxOTowOVrODw1j-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo1MDo0MFrODw1_Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTM1ODAyOnYy", "diffSide": "RIGHT", "path": "vertx-db2-client/src/main/java/io/vertx/db2client/impl/drda/DRDAConnectResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOToxOTowOVrOGEDdnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDowNToyMVrOGEEdWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNDIyMA==", "bodyText": "Are we guaranteed a non-null value for netSqlca before we call any methods?  I see in parseSQLCAGRP there is the possibility of a null value being returned.  Or is it ok if we throw a NPE at this point?", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/580#discussion_r406904220", "createdAt": "2020-04-10T19:19:09Z", "author": {"login": "gjwatts"}, "path": "vertx-db2-client/src/main/java/io/vertx/db2client/impl/drda/DRDAConnectResponse.java", "diffHunk": "@@ -1154,6 +1154,191 @@ private void parseACCSECreply(int securityMechanism) {\n //        }\n     }\n     \n+    private void parseAccessSecurityError() {\n+        int peekCP = peekCodePoint();\n+        switch (peekCP) {\n+        case CodePoint.CMDCHKRM:\n+            parseCMDCHKRM();\n+            break;\n+        case CodePoint.RDBNFNRM:\n+            parseRDBNFNRM();\n+            break;\n+        case CodePoint.RDBAFLRM:\n+            parseRdbAccessFailed();\n+            break;\n+        default:\n+            parseCommonError(peekCP);\n+        }\n+    }\n+    \n+    // RDB Not Found Reply Message indicates that the target\n+    // server cannot find the specified relational database.\n+    // PROTOCOL architects an SQLSTATE of 08004.\n+    //\n+    // Messages\n+    // SQLSTATE : 8004\n+    //     The application server rejected establishment of the connection.\n+    //     SQLCODE : -30061\n+    //     The database alias or database name <name> was not found at the remote node.\n+    //     The statement cannot be processed.\n+    //\n+    //\n+    // Returned from Server:\n+    // SVRCOD - required  (8 - ERROR)\n+    // RDBNAM - required\n+    private void parseRDBNFNRM() {\n+        boolean svrcodReceived = false;\n+        int svrcod = CodePoint.SVRCOD_INFO;\n+        boolean rdbnamReceived = false;\n+        String rdbnam = null;\n+\n+        parseLengthAndMatchCodePoint(CodePoint.RDBNFNRM);\n+        pushLengthOnCollectionStack();\n+        int peekCP = peekCodePoint();\n+\n+        while (peekCP != END_OF_COLLECTION) {\n+\n+            boolean foundInPass = false;\n+\n+            if (peekCP == CodePoint.SVRCOD) {\n+                foundInPass = true;\n+                svrcodReceived = checkAndGetReceivedFlag(svrcodReceived);\n+                svrcod = parseSVRCOD(CodePoint.SVRCOD_ERROR, CodePoint.SVRCOD_ERROR);\n+                peekCP = peekCodePoint();\n+            }\n+\n+            if (peekCP == CodePoint.RDBNAM) {\n+                foundInPass = true;\n+                rdbnamReceived = checkAndGetReceivedFlag(rdbnamReceived);\n+                rdbnam = parseRDBNAM(true);\n+                peekCP = peekCodePoint();\n+            }\n+            \n+            if (peekCP == CodePoint.SRVDGN) {\n+            \tfoundInPass = true;\n+            \tString serverDiagnostics = parseSRVDGN();\n+            \t// TODO: @AGG Log the server diagnostics here\n+            \tpeekCP = peekCodePoint();\n+            }\n+\n+            if (!foundInPass) {\n+            \tthrowUnknownCodepoint(peekCP);\n+            }\n+\n+        }\n+        popCollectionStack();\n+        if (!svrcodReceived)\n+        \tthrowMissingRequiredCodepoint(\"SVRCOD\", CodePoint.SVRCOD);\n+        if (!rdbnamReceived)\n+        \tthrowMissingRequiredCodepoint(\"RDBNAM\", CodePoint.RDBNAM);\n+\n+//        netAgent_.setSvrcod(svrcod);\n+        throw new DB2Exception(\"The requested database was not found: \" + metadata.databaseName,\n+        \t\tSqlCode.RDB_NOT_FOUND, SQLState.NET_DATABASE_NOT_FOUND);\n+//        agent_.accumulateChainBreakingReadExceptionAndThrow(new DisconnectException(agent_,\n+//            new ClientMessageId(SQLState.NET_DATABASE_NOT_FOUND),\n+//            netConnection.databaseName_));\n+    }\n+    \n+    private void parseRdbAccessFailed() {\n+        parseRDBAFLRM();\n+\n+        // an SQLCARD is returned if an RDBALFRM is returned.\n+        // this SQLCARD always follows the RDBALFRM.\n+        // TYPDEFNAM and TYPDEFOVR are MTLINC\n+\n+        if (peekCodePoint() == CodePoint.TYPDEFNAM) {\n+            parseTYPDEFNAM();\n+            parseTYPDEFOVR();\n+        } else {\n+            parseTYPDEFOVR();\n+            parseTYPDEFNAM();\n+        }\n+\n+        NetSqlca netSqlca = parseSQLCARD(null);\n+        \n+        //Check if the SQLCARD has null SQLException\n+        if(netSqlca.getSqlErrmc() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c887ad48d8014a9e4595cd9ff9f1591fefc39ebf"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyMDUzNw==", "bodyText": "A non-null SQLCARD should always be returned if a normal DB error occurs (which excludes situations where the DB just closes the connection). On this code path we're still under \"normal\" error path situations since we only get to this point if we have previously found and matched a RDBAFLRM message which must be followed by a SQLCARD", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/580#discussion_r406920537", "createdAt": "2020-04-10T20:05:21Z", "author": {"login": "aguibert"}, "path": "vertx-db2-client/src/main/java/io/vertx/db2client/impl/drda/DRDAConnectResponse.java", "diffHunk": "@@ -1154,6 +1154,191 @@ private void parseACCSECreply(int securityMechanism) {\n //        }\n     }\n     \n+    private void parseAccessSecurityError() {\n+        int peekCP = peekCodePoint();\n+        switch (peekCP) {\n+        case CodePoint.CMDCHKRM:\n+            parseCMDCHKRM();\n+            break;\n+        case CodePoint.RDBNFNRM:\n+            parseRDBNFNRM();\n+            break;\n+        case CodePoint.RDBAFLRM:\n+            parseRdbAccessFailed();\n+            break;\n+        default:\n+            parseCommonError(peekCP);\n+        }\n+    }\n+    \n+    // RDB Not Found Reply Message indicates that the target\n+    // server cannot find the specified relational database.\n+    // PROTOCOL architects an SQLSTATE of 08004.\n+    //\n+    // Messages\n+    // SQLSTATE : 8004\n+    //     The application server rejected establishment of the connection.\n+    //     SQLCODE : -30061\n+    //     The database alias or database name <name> was not found at the remote node.\n+    //     The statement cannot be processed.\n+    //\n+    //\n+    // Returned from Server:\n+    // SVRCOD - required  (8 - ERROR)\n+    // RDBNAM - required\n+    private void parseRDBNFNRM() {\n+        boolean svrcodReceived = false;\n+        int svrcod = CodePoint.SVRCOD_INFO;\n+        boolean rdbnamReceived = false;\n+        String rdbnam = null;\n+\n+        parseLengthAndMatchCodePoint(CodePoint.RDBNFNRM);\n+        pushLengthOnCollectionStack();\n+        int peekCP = peekCodePoint();\n+\n+        while (peekCP != END_OF_COLLECTION) {\n+\n+            boolean foundInPass = false;\n+\n+            if (peekCP == CodePoint.SVRCOD) {\n+                foundInPass = true;\n+                svrcodReceived = checkAndGetReceivedFlag(svrcodReceived);\n+                svrcod = parseSVRCOD(CodePoint.SVRCOD_ERROR, CodePoint.SVRCOD_ERROR);\n+                peekCP = peekCodePoint();\n+            }\n+\n+            if (peekCP == CodePoint.RDBNAM) {\n+                foundInPass = true;\n+                rdbnamReceived = checkAndGetReceivedFlag(rdbnamReceived);\n+                rdbnam = parseRDBNAM(true);\n+                peekCP = peekCodePoint();\n+            }\n+            \n+            if (peekCP == CodePoint.SRVDGN) {\n+            \tfoundInPass = true;\n+            \tString serverDiagnostics = parseSRVDGN();\n+            \t// TODO: @AGG Log the server diagnostics here\n+            \tpeekCP = peekCodePoint();\n+            }\n+\n+            if (!foundInPass) {\n+            \tthrowUnknownCodepoint(peekCP);\n+            }\n+\n+        }\n+        popCollectionStack();\n+        if (!svrcodReceived)\n+        \tthrowMissingRequiredCodepoint(\"SVRCOD\", CodePoint.SVRCOD);\n+        if (!rdbnamReceived)\n+        \tthrowMissingRequiredCodepoint(\"RDBNAM\", CodePoint.RDBNAM);\n+\n+//        netAgent_.setSvrcod(svrcod);\n+        throw new DB2Exception(\"The requested database was not found: \" + metadata.databaseName,\n+        \t\tSqlCode.RDB_NOT_FOUND, SQLState.NET_DATABASE_NOT_FOUND);\n+//        agent_.accumulateChainBreakingReadExceptionAndThrow(new DisconnectException(agent_,\n+//            new ClientMessageId(SQLState.NET_DATABASE_NOT_FOUND),\n+//            netConnection.databaseName_));\n+    }\n+    \n+    private void parseRdbAccessFailed() {\n+        parseRDBAFLRM();\n+\n+        // an SQLCARD is returned if an RDBALFRM is returned.\n+        // this SQLCARD always follows the RDBALFRM.\n+        // TYPDEFNAM and TYPDEFOVR are MTLINC\n+\n+        if (peekCodePoint() == CodePoint.TYPDEFNAM) {\n+            parseTYPDEFNAM();\n+            parseTYPDEFOVR();\n+        } else {\n+            parseTYPDEFOVR();\n+            parseTYPDEFNAM();\n+        }\n+\n+        NetSqlca netSqlca = parseSQLCARD(null);\n+        \n+        //Check if the SQLCARD has null SQLException\n+        if(netSqlca.getSqlErrmc() == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNDIyMA=="}, "originalCommit": {"oid": "c887ad48d8014a9e4595cd9ff9f1591fefc39ebf"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTM3NTU0OnYy", "diffSide": "RIGHT", "path": "vertx-db2-client/src/test/java/io/vertx/db2client/tck/DB2ConnectionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOToyNzowNlrOGEDouA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOToyNzowNlrOGEDouA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNzA2NA==", "bodyText": "Please add a copyright header.", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/580#discussion_r406907064", "createdAt": "2020-04-10T19:27:06Z", "author": {"login": "gjwatts"}, "path": "vertx-db2-client/src/test/java/io/vertx/db2client/tck/DB2ConnectionTest.java", "diffHunk": "@@ -1,10 +1,14 @@\n package io.vertx.db2client.tck;\n \n import io.vertx.sqlclient.tck.ConnectionTestBase;\n+import io.vertx.db2client.DB2Exception;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c887ad48d8014a9e4595cd9ff9f1591fefc39ebf"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTQyNzc0OnYy", "diffSide": "RIGHT", "path": "vertx-db2-client/src/main/java/io/vertx/db2client/impl/codec/InitialHandshakeCommandCodec.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo1MDo0MFrOGEEJAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo1OTo1MlrOGEEV8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNTMzMA==", "bodyText": "So here it sounds like we are able to hit the DB2 server, but it closes the connection because of an invalid DB name.  In the comments section of SQLState.java (around line 1737) they make a note that the 08001 errors are for when the client is unable to establish a connection with the server.  Here it seems we are able to connect to the server and they are rejecting the request because of the invalid DB name.  So my suggestion would be to use SQLState.NET_DATABASE_NOT_FOUND instead (which sends back value of \"08004*\")", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/580#discussion_r406915330", "createdAt": "2020-04-10T19:50:40Z", "author": {"login": "gjwatts"}, "path": "vertx-db2-client/src/main/java/io/vertx/db2client/impl/codec/InitialHandshakeCommandCodec.java", "diffHunk": "@@ -54,7 +56,8 @@ void encode(DB2Encoder encoder) {\n             //Sometimes DB2 closes the connection when sending an invalid Database name.\n             //-4499 = A fatal error occurred that resulted in a disconnect from the data source.\n             //08001 = \"The connection was unable to be established\"\n-            cmd.fail(new DB2Exception(\"Socket closed during connection\", -4499,\"08001\"));           \n+            cmd.fail(new DB2Exception(\"The connection was closed by the database server.\", \n+            \t\tSqlCode.CONNECTION_REFUSED, SQLState.CONNECT_UNABLE_TO_CONNECT_TO_SERVER));           ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c887ad48d8014a9e4595cd9ff9f1591fefc39ebf"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxODY0Mg==", "bodyText": "Sounds reasonable, I cross checked with JDBC and they return an 08004 too I think that's the right call. I'll use SQLState.AUTH_DATABASE_CONNECTION_REFUSED which is 08004.C.3 (I'd like to keep it a bit more generic than NET_DATABASE_NOT_FOUND  because we don't know for sure at this point that the connection was refused because the DB was not found)", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/580#discussion_r406918642", "createdAt": "2020-04-10T19:59:52Z", "author": {"login": "aguibert"}, "path": "vertx-db2-client/src/main/java/io/vertx/db2client/impl/codec/InitialHandshakeCommandCodec.java", "diffHunk": "@@ -54,7 +56,8 @@ void encode(DB2Encoder encoder) {\n             //Sometimes DB2 closes the connection when sending an invalid Database name.\n             //-4499 = A fatal error occurred that resulted in a disconnect from the data source.\n             //08001 = \"The connection was unable to be established\"\n-            cmd.fail(new DB2Exception(\"Socket closed during connection\", -4499,\"08001\"));           \n+            cmd.fail(new DB2Exception(\"The connection was closed by the database server.\", \n+            \t\tSqlCode.CONNECTION_REFUSED, SQLState.CONNECT_UNABLE_TO_CONNECT_TO_SERVER));           ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNTMzMA=="}, "originalCommit": {"oid": "c887ad48d8014a9e4595cd9ff9f1591fefc39ebf"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4474, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}