{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzMzAwMTgx", "number": 3250, "title": "test CookieFilter", "bodyText": "This change adds simple test for CookieFilter and optimizes its implementation a bit.", "createdAt": "2020-09-25T18:31:01Z", "url": "https://github.com/oracle/opengrok/pull/3250", "merged": true, "mergeCommit": {"oid": "362fbc92776176583fe2fac2ff52b665b342f46d"}, "closed": true, "closedAt": "2020-09-27T18:40:00Z", "author": {"login": "vladak"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdMaHeCgH2gAyNDkzMzAwMTgxOmFhMjJhZGU4ZGQ3YmM0NDIwOGExMWI3NzYxZGRiODU2YzdhY2M2MTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdNDQcyAH2gAyNDkzMzAwMTgxOjc0ZTU5MTBhZDk1MjBjZDczYjZkNGRjMDIxZTgwZGRmZjdiMjk0ZmM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "aa22ade8dd7bc44208a11b7761ddb856c7acc610", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/aa22ade8dd7bc44208a11b7761ddb856c7acc610", "committedDate": "2020-09-25T18:30:01Z", "message": "test CookieFilter\n\nfixes #3244"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MDA1MTMy", "url": "https://github.com/oracle/opengrok/pull/3250#pullrequestreview-497005132", "createdAt": "2020-09-26T13:33:40Z", "commit": {"oid": "aa22ade8dd7bc44208a11b7761ddb856c7acc610"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQxMzozMzo0MFrOHYgUWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQxMzozMzo0MFrOHYgUWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ1NzM2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Map<String,String> m = new HashMap<>();\n          \n          \n            \n                    Map<String, String> m = new HashMap<>();", "url": "https://github.com/oracle/opengrok/pull/3250#discussion_r495457369", "createdAt": "2020-09-26T13:33:40Z", "author": {"login": "ahornace"}, "path": "opengrok-web/src/test/java/org/opengrok/web/CookieFilterTest.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.web;\n+\n+import org.junit.Test;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.HttpHeaders;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.*;\n+\n+public class CookieFilterTest {\n+    class DummyHttpServletResponse implements HttpServletResponse {\n+\n+        @Override\n+        public void addCookie(Cookie cookie) {\n+\n+        }\n+\n+        @Override\n+        public boolean containsHeader(String s) {\n+            return false;\n+        }\n+\n+        @Override\n+        public String encodeURL(String s) {\n+            return null;\n+        }\n+\n+        @Override\n+        public String encodeRedirectURL(String s) {\n+            return null;\n+        }\n+\n+        @Override\n+        @Deprecated\n+        public String encodeUrl(String s) {\n+            return null;\n+        }\n+\n+        @Override\n+        @Deprecated\n+        public String encodeRedirectUrl(String s) {\n+            return null;\n+        }\n+\n+        @Override\n+        public void sendError(int i, String s) throws IOException {\n+\n+        }\n+\n+        @Override\n+        public void sendError(int i) throws IOException {\n+\n+        }\n+\n+        @Override\n+        public void sendRedirect(String s) throws IOException {\n+\n+        }\n+\n+        @Override\n+        public void setDateHeader(String s, long l) {\n+\n+        }\n+\n+        @Override\n+        public void addDateHeader(String s, long l) {\n+\n+        }\n+\n+        private Map<String, List<String>> headers = new HashMap<>();\n+\n+        @Override\n+        public void setHeader(String s, String s1) {\n+            headers.clear();\n+            List<String> list = new ArrayList<>();\n+            list.add(s1);\n+            headers.put(s, list);\n+        }\n+\n+        @Override\n+        public void addHeader(String s, String s1) {\n+            List<String> list = headers.get(s);\n+            if (list == null) {\n+                list = new ArrayList<String>();\n+                headers.put(s, list);\n+            }\n+            headers.get(s).add(s1);\n+        }\n+\n+        @Override\n+        public void setIntHeader(String s, int i) {\n+\n+        }\n+\n+        @Override\n+        public void addIntHeader(String s, int i) {\n+\n+        }\n+\n+        @Override\n+        public void setStatus(int i) {\n+\n+        }\n+\n+        @Override\n+        @Deprecated\n+        public void setStatus(int i, String s) {\n+\n+        }\n+\n+        @Override\n+        public int getStatus() {\n+            return 0;\n+        }\n+\n+        @Override\n+        public String getHeader(String s) {\n+            return null;\n+        }\n+\n+        @Override\n+        public Collection<String> getHeaders(String s) {\n+            return headers.get(s);\n+        }\n+\n+        @Override\n+        public Collection<String> getHeaderNames() {\n+            return null;\n+        }\n+\n+        @Override\n+        public String getCharacterEncoding() {\n+            return null;\n+        }\n+\n+        @Override\n+        public String getContentType() {\n+            return null;\n+        }\n+\n+        @Override\n+        public ServletOutputStream getOutputStream() throws IOException {\n+            return null;\n+        }\n+\n+        @Override\n+        public PrintWriter getWriter() throws IOException {\n+            return null;\n+        }\n+\n+        @Override\n+        public void setCharacterEncoding(String s) {\n+\n+        }\n+\n+        @Override\n+        public void setContentLength(int i) {\n+\n+        }\n+\n+        @Override\n+        public void setContentLengthLong(long l) {\n+\n+        }\n+\n+        @Override\n+        public void setContentType(String s) {\n+\n+        }\n+\n+        @Override\n+        public void setBufferSize(int i) {\n+\n+        }\n+\n+        @Override\n+        public int getBufferSize() {\n+            return 0;\n+        }\n+\n+        @Override\n+        public void flushBuffer() throws IOException {\n+\n+        }\n+\n+        @Override\n+        public void resetBuffer() {\n+\n+        }\n+\n+        @Override\n+        public boolean isCommitted() {\n+            return false;\n+        }\n+\n+        @Override\n+        public void reset() {\n+\n+        }\n+\n+        @Override\n+        public void setLocale(Locale locale) {\n+\n+        }\n+\n+        @Override\n+        public Locale getLocale() {\n+            return null;\n+        }\n+    }\n+\n+    @Test\n+    public void doTest() throws IOException, ServletException {\n+        CookieFilter filter = new CookieFilter();\n+        HttpServletRequest request = mock(HttpServletRequest.class);\n+        HttpServletResponse response = new DummyHttpServletResponse();\n+\n+        String[] headerValues = new String[]{\"foo=bar\", \"Tessier=Ashpool\"};\n+        for (String value: headerValues) {\n+            response.addHeader(HttpHeaders.SET_COOKIE, value);\n+        }\n+\n+        FilterChain chain = mock(FilterChain.class);\n+        FilterConfig filterConfig = spy(FilterConfig.class);\n+        Map<String,String> m = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa22ade8dd7bc44208a11b7761ddb856c7acc610"}, "originalPosition": 268}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MDA1MjEx", "url": "https://github.com/oracle/opengrok/pull/3250#pullrequestreview-497005211", "createdAt": "2020-09-26T13:35:04Z", "commit": {"oid": "aa22ade8dd7bc44208a11b7761ddb856c7acc610"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f359613450af40d9b6e0aa7947df37e0facf6fc", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/9f359613450af40d9b6e0aa7947df37e0facf6fc", "committedDate": "2020-09-27T18:05:19Z", "message": "add space\n\nCo-authored-by: Adam Horn\u00e1\u010dek <adam.hornacek@icloud.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74e5910ad9520cd73b6d4dc021e80ddff7b294fc", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/74e5910ad9520cd73b6d4dc021e80ddff7b294fc", "committedDate": "2020-09-27T18:25:56Z", "message": "add empty header test"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 205, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}