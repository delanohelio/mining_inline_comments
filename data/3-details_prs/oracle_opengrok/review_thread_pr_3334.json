{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExODI2MjY3", "number": 3334, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMTozNzoyMVrOEzEQcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMTozNzoyMVrOEzEQcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTgyNTc3OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMTozNzoyMVrOHqD2vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMjoxMzozOFrOHqEzHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg2NTQwNQ==", "bodyText": "superfluous else?", "url": "https://github.com/oracle/opengrok/pull/3334#discussion_r513865405", "createdAt": "2020-10-29T01:37:21Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -843,19 +843,21 @@ private boolean accept(File file, AcceptSymlinkRet ret) {\n             return true;\n         }\n \n-        if (HistoryGuru.getInstance().hasHistory(file)) {\n-            // versioned files should always be accepted\n-            return true;\n-        }\n \n-        // this is an unversioned file, check if it should be indexed\n         RuntimeEnvironment env = RuntimeEnvironment.getInstance();\n-        boolean res = !env.isIndexVersionedFilesOnly();\n-        if (!res) {\n-            LOGGER.log(Level.FINER, \"not accepting unversioned {0}\",\n-                absolutePath);\n+        // Lookup history if indexing versioned files only.\n+        // Skip the lookup entirely (which is expensive) if unversioned files are allowed\n+        if (env.isIndexVersionedFilesOnly()) {\n+            if (HistoryGuru.getInstance().hasHistory(file)) {\n+                // versioned files should always be accepted\n+                return true;\n+            } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca18fe81e28696e1efc5ae522566460b9613e889"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg4MDg2Mg==", "bodyText": "updated.", "url": "https://github.com/oracle/opengrok/pull/3334#discussion_r513880862", "createdAt": "2020-10-29T02:13:38Z", "author": {"login": "azakkerman"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -843,19 +843,21 @@ private boolean accept(File file, AcceptSymlinkRet ret) {\n             return true;\n         }\n \n-        if (HistoryGuru.getInstance().hasHistory(file)) {\n-            // versioned files should always be accepted\n-            return true;\n-        }\n \n-        // this is an unversioned file, check if it should be indexed\n         RuntimeEnvironment env = RuntimeEnvironment.getInstance();\n-        boolean res = !env.isIndexVersionedFilesOnly();\n-        if (!res) {\n-            LOGGER.log(Level.FINER, \"not accepting unversioned {0}\",\n-                absolutePath);\n+        // Lookup history if indexing versioned files only.\n+        // Skip the lookup entirely (which is expensive) if unversioned files are allowed\n+        if (env.isIndexVersionedFilesOnly()) {\n+            if (HistoryGuru.getInstance().hasHistory(file)) {\n+                // versioned files should always be accepted\n+                return true;\n+            } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg2NTQwNQ=="}, "originalCommit": {"oid": "ca18fe81e28696e1efc5ae522566460b9613e889"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4865, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}