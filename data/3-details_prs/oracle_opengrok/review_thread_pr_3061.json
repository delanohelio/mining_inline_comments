{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMjg0NTUy", "number": 3061, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwODo1MjoyOVrODk9SMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwOTowMzo0OVrODk9g8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDc5NDA4OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/history/PerforceRepositoryTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwODo1MjoyOVrOFxkifA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMTo0MjoyNFrOFyDyTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUyMzE5Ng==", "bodyText": "I assume this needs some setup steps to populate the root somehow. Could you perhaps update the test case with the steps ?", "url": "https://github.com/oracle/opengrok/pull/3061#discussion_r387523196", "createdAt": "2020-03-04T08:52:29Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/history/PerforceRepositoryTest.java", "diffHunk": "@@ -40,36 +41,38 @@\n \n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertEquals;\n-import org.opengrok.indexer.configuration.RuntimeEnvironment;\n import static org.opengrok.indexer.history.PerforceRepository.protectPerforceFilename;\n+import static org.opengrok.indexer.history.PerforceRepository.unprotectPerforceFilename;\n \n /**\n  * Do basic testing of the Perforce support\n  *\n  * @author Trond Norbye\n  */\n-@ConditionalRun(RepositoryInstalled.PerforceInstalled.class)\n public class PerforceRepositoryTest {\n \n     @Rule\n     public ConditionalRunRule rule = new ConditionalRunRule();\n     \n     private static boolean skip;\n     private static List<File> files;\n-    private static final File root = new File(\"/export/opengrok_p4_test\");\n+    private static final File root = new File(\"/var/opengrok/src/p4foo\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f916bde247d3958e7eae0cc86504cdc0f670c4d3"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAzNTE1MA==", "bodyText": "OK done", "url": "https://github.com/oracle/opengrok/pull/3061#discussion_r388035150", "createdAt": "2020-03-05T01:42:24Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/history/PerforceRepositoryTest.java", "diffHunk": "@@ -40,36 +41,38 @@\n \n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertEquals;\n-import org.opengrok.indexer.configuration.RuntimeEnvironment;\n import static org.opengrok.indexer.history.PerforceRepository.protectPerforceFilename;\n+import static org.opengrok.indexer.history.PerforceRepository.unprotectPerforceFilename;\n \n /**\n  * Do basic testing of the Perforce support\n  *\n  * @author Trond Norbye\n  */\n-@ConditionalRun(RepositoryInstalled.PerforceInstalled.class)\n public class PerforceRepositoryTest {\n \n     @Rule\n     public ConditionalRunRule rule = new ConditionalRunRule();\n     \n     private static boolean skip;\n     private static List<File> files;\n-    private static final File root = new File(\"/export/opengrok_p4_test\");\n+    private static final File root = new File(\"/var/opengrok/src/p4foo\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUyMzE5Ng=="}, "originalCommit": {"oid": "f916bde247d3958e7eae0cc86504cdc0f670c4d3"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDgwMTgxOnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/RepositoryFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwODo1NTowMVrOFxknVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwODo1NTowMVrOFxknVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUyNDQzNw==", "bodyText": "good idea !", "url": "https://github.com/oracle/opengrok/pull/3061#discussion_r387524437", "createdAt": "2020-03-04T08:55:01Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/RepositoryFactory.java", "diffHunk": "@@ -51,21 +51,30 @@\n     private static final Logger LOGGER = LoggerFactory.getLogger(RepositoryFactory.class);\n \n     private static final Repository[] repositories = {\n-        new BitKeeperRepository(),\n-        new MercurialRepository(),\n-        new AccuRevRepository(),\n-        new BazaarRepository(),\n-        new GitRepository(),\n-        new MonotoneRepository(),\n-        new SubversionRepository(),\n-        new SCCSRepository(),\n-        new RazorRepository(),\n-        new ClearCaseRepository(),\n-        new PerforceRepository(),\n-        new RCSRepository(),\n-        new CVSRepository(),\n-        new RepoRepository(),\n-        new SSCMRepository()\n+            /*\n+             * The following do cheap checks to determine isRepositoryFor(),\n+             * but still put the most popular at the head of the repositories\n+             * array.\n+             */\n+            new GitRepository(),\n+            new MercurialRepository(),\n+            new RepoRepository(),\n+            new BitKeeperRepository(),\n+            new BazaarRepository(),\n+            new MonotoneRepository(),\n+            new SubversionRepository(),\n+            new SCCSRepository(),\n+            new RazorRepository(),\n+            new RCSRepository(),\n+            new CVSRepository(),\n+            new SSCMRepository(),\n+            /*\n+             * The following do expensive checks to determine isRepositoryFor(),\n+             * so put them at the end of the repositories array.\n+             */\n+            new AccuRevRepository(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f916bde247d3958e7eae0cc86504cdc0f670c4d3"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDgwNzM4OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/PerforceRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwODo1Njo0MVrOFxkqtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMTo0MjozMlrOFyDyag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUyNTMwMw==", "bodyText": "use isLoggable() also here ?", "url": "https://github.com/oracle/opengrok/pull/3061#discussion_r387525303", "createdAt": "2020-03-04T08:56:41Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/PerforceRepository.java", "diffHunk": "@@ -78,18 +78,31 @@ static String protectPerforceFilename(String name) {\n         return t;\n     }\n \n+    static String unprotectPerforceFilename(String name) {\n+        String t = name.replace(\"%40\", \"@\");\n+        t = t.replace(\"%23\", \"#\");\n+        t = t.replace(\"%2A\", \"*\");\n+        t = t.replace(\"%25\", \"%\");\n+        if (!name.equals(t)) {\n+            LOGGER.log(Level.FINEST,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f916bde247d3958e7eae0cc86504cdc0f670c4d3"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAzNTE3OA==", "bodyText": "Yes", "url": "https://github.com/oracle/opengrok/pull/3061#discussion_r388035178", "createdAt": "2020-03-05T01:42:32Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/PerforceRepository.java", "diffHunk": "@@ -78,18 +78,31 @@ static String protectPerforceFilename(String name) {\n         return t;\n     }\n \n+    static String unprotectPerforceFilename(String name) {\n+        String t = name.replace(\"%40\", \"@\");\n+        t = t.replace(\"%23\", \"#\");\n+        t = t.replace(\"%2A\", \"*\");\n+        t = t.replace(\"%25\", \"%\");\n+        if (!name.equals(t)) {\n+            LOGGER.log(Level.FINEST,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUyNTMwMw=="}, "originalCommit": {"oid": "f916bde247d3958e7eae0cc86504cdc0f670c4d3"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDgzMTg0OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/PerforceHistoryParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwOTowMzo0OVrOFxk5Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMTo0Mjo1MFrOFyDyuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUyOTAxOA==", "bodyText": "what does Lede stand for ?", "url": "https://github.com/oracle/opengrok/pull/3061#discussion_r387529018", "createdAt": "2020-03-04T09:03:49Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/PerforceHistoryParser.java", "diffHunk": "@@ -271,4 +304,56 @@ private static Date newDate(int year, int month, int day, int hour, int minute,\n         cal.set(year, month - 1, day, hour, minute, second);\n         return cal.getTime();\n     }\n+\n+    private static HistoryEntry parseLedeLine(List<HistoryEntry> entries, HistoryEntry entry,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f916bde247d3958e7eae0cc86504cdc0f670c4d3"}, "originalPosition": 400}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAzNTI1Ng==", "bodyText": "I renamed as parseEntryLine().", "url": "https://github.com/oracle/opengrok/pull/3061#discussion_r388035256", "createdAt": "2020-03-05T01:42:50Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/PerforceHistoryParser.java", "diffHunk": "@@ -271,4 +304,56 @@ private static Date newDate(int year, int month, int day, int hour, int minute,\n         cal.set(year, month - 1, day, hour, minute, second);\n         return cal.getTime();\n     }\n+\n+    private static HistoryEntry parseLedeLine(List<HistoryEntry> entries, HistoryEntry entry,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUyOTAxOA=="}, "originalCommit": {"oid": "f916bde247d3958e7eae0cc86504cdc0f670c4d3"}, "originalPosition": 400}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 192, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}