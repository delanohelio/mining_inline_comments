{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyNjk1Mzk1", "number": 3394, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxNjozOTo0NFrOFBeXAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxNjozOTo0NFrOFBeXAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MDkwMzA1OnYy", "diffSide": "RIGHT", "path": "plugins/src/main/java/opengrok/auth/plugin/ldap/LdapFacade.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxNjozOTo0NFrOIAMcrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwOTo1MzozNFrOIAegxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA3NDg2Mw==", "bodyText": "Nit: not wrapping with if (LOGGER.isLoggable(Level.FINER)) { } since the argument is a composed string", "url": "https://github.com/oracle/opengrok/pull/3394#discussion_r537074863", "createdAt": "2020-12-06T16:39:44Z", "author": {"login": "idodeclare"}, "path": "plugins/src/main/java/opengrok/auth/plugin/ldap/LdapFacade.java", "diffHunk": "@@ -197,12 +197,24 @@ private void setWebHooks(WebHooks webHooks) {\n      * Go through all servers in the pool and record the first working.\n      */\n     void prepareServers() {\n+        LOGGER.log(Level.FINER, \"checking servers for {0}\", this);\n         for (int i = 0; i < servers.size(); i++) {\n             LdapServer server = servers.get(i);\n             if (server.isWorking() && actualServer == -1) {\n                 actualServer = i;\n             }\n         }\n+\n+        // Close the connections to the inactive servers.\n+        LOGGER.log(Level.FINER, \"closing unused servers\");\n+        for (int i = 0; i < servers.size(); i++) {\n+            if (i != actualServer) {\n+                servers.get(i).close();\n+            }\n+        }\n+\n+        LOGGER.log(Level.FINER, String.format(\"server check done (current server: %s)\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc4e65c880b31bd53e12706d34db232d7fa20f4a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM3MDgyMQ==", "bodyText": "ack", "url": "https://github.com/oracle/opengrok/pull/3394#discussion_r537370821", "createdAt": "2020-12-07T09:53:34Z", "author": {"login": "vladak"}, "path": "plugins/src/main/java/opengrok/auth/plugin/ldap/LdapFacade.java", "diffHunk": "@@ -197,12 +197,24 @@ private void setWebHooks(WebHooks webHooks) {\n      * Go through all servers in the pool and record the first working.\n      */\n     void prepareServers() {\n+        LOGGER.log(Level.FINER, \"checking servers for {0}\", this);\n         for (int i = 0; i < servers.size(); i++) {\n             LdapServer server = servers.get(i);\n             if (server.isWorking() && actualServer == -1) {\n                 actualServer = i;\n             }\n         }\n+\n+        // Close the connections to the inactive servers.\n+        LOGGER.log(Level.FINER, \"closing unused servers\");\n+        for (int i = 0; i < servers.size(); i++) {\n+            if (i != actualServer) {\n+                servers.get(i).close();\n+            }\n+        }\n+\n+        LOGGER.log(Level.FINER, String.format(\"server check done (current server: %s)\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA3NDg2Mw=="}, "originalCommit": {"oid": "dc4e65c880b31bd53e12706d34db232d7fa20f4a"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4884, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}