{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyMDUyMTUz", "number": 3194, "title": "Feature/coverage", "bodyText": "This is just a patch to add test coverage for many of the zeroes in coveralls.", "createdAt": "2020-08-22T23:33:15Z", "url": "https://github.com/oracle/opengrok/pull/3194", "merged": true, "mergeCommit": {"oid": "b5521af93eaab87ae09ce419ac83321a5dd13fff"}, "closed": true, "closedAt": "2020-09-21T07:12:21Z", "author": {"login": "idodeclare"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdI0I_ngFqTQ4NzgzMzg0Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdKe-0tgBqjM3ODU0NTUzNDY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3ODMzODQ3", "url": "https://github.com/oracle/opengrok/pull/3194#pullrequestreview-487833847", "createdAt": "2020-09-14T14:33:31Z", "commit": {"oid": "c43807263e4dedefe3c7eec37e4d5df5fe0a7796"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDozMzozMVrOHRX8aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDozMzozMVrOHRX8aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4MDEzNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test\n          \n          \n            \n                @Test(expected = NoPathParameterException.class)", "url": "https://github.com/oracle/opengrok/pull/3194#discussion_r487980137", "createdAt": "2020-09-14T14:33:31Z", "author": {"login": "vladak"}, "path": "opengrok-web/src/test/java/org/opengrok/web/util/FileUtilTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.\n+ */\n+\n+package org.opengrok.web.util;\n+\n+import static org.junit.Assert.assertNotNull;\n+\n+import org.junit.Test;\n+import java.io.FileNotFoundException;\n+import java.util.UUID;\n+\n+/**\n+ * Represents a container for tests of {@link FileUtil}.\n+ */\n+public class FileUtilTest {\n+\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c43807263e4dedefe3c7eec37e4d5df5fe0a7796"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3ODM4ODUz", "url": "https://github.com/oracle/opengrok/pull/3194#pullrequestreview-487838853", "createdAt": "2020-09-14T14:38:33Z", "commit": {"oid": "c43807263e4dedefe3c7eec37e4d5df5fe0a7796"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDozODozM1rOHRYL8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDozODozM1rOHRYL8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4NDExMw==", "bodyText": "ditto - use JUnit mechanisms for asserting the exceptions ?", "url": "https://github.com/oracle/opengrok/pull/3194#discussion_r487984113", "createdAt": "2020-09-14T14:38:33Z", "author": {"login": "vladak"}, "path": "plugins/src/test/java/opengrok/auth/plugin/UserWhiteListPluginTest.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.\n+ */\n+\n+package opengrok.auth.plugin;\n+\n+import opengrok.auth.plugin.entity.User;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.opengrok.indexer.configuration.Group;\n+import org.opengrok.indexer.configuration.Project;\n+import org.opengrok.indexer.util.RandomString;\n+import org.opengrok.indexer.web.DummyHttpServletRequest;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.OutputStreamWriter;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Represents a container for tests of {@link UserWhiteListPlugin}.\n+ */\n+public class UserWhiteListPluginTest {\n+\n+    private static final String OK_USER = \"user1321\";\n+    private static File tempWhitelist;\n+    private static HashMap<String, Object> validPluginParameters;\n+\n+    private UserWhiteListPlugin plugin;\n+\n+    @BeforeClass\n+    public static void beforeClass() throws Exception {\n+        tempWhitelist = File.createTempFile(\"UserWhiteListPluginTest\", \"txt\");\n+        try (BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(\n+                new FileOutputStream(tempWhitelist), StandardCharsets.UTF_8))) {\n+            writer.write(OK_USER);\n+            // Don't bother with trailing LF.\n+        }\n+\n+        validPluginParameters = new HashMap<>();\n+        validPluginParameters.put(UserWhiteListPlugin.FILE_PARAM, tempWhitelist.getPath());\n+    }\n+\n+    @AfterClass\n+    public static void afterClass() {\n+        if (tempWhitelist != null) {\n+            //noinspection ResultOfMethodCallIgnored\n+            tempWhitelist.delete();\n+        }\n+    }\n+\n+    @Before\n+    public void setUp() {\n+        plugin = new UserWhiteListPlugin();\n+    }\n+\n+    @Test\n+    public void shouldThrowOnLoadIfNullArgument() {\n+        NullPointerException caughtException = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c43807263e4dedefe3c7eec37e4d5df5fe0a7796"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3ODQxMDQ5", "url": "https://github.com/oracle/opengrok/pull/3194#pullrequestreview-487841049", "createdAt": "2020-09-14T14:40:46Z", "commit": {"oid": "c43807263e4dedefe3c7eec37e4d5df5fe0a7796"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDo0MDo0NlrOHRYShA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDo0MDo0NlrOHRYShA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4NTc5Ng==", "bodyText": "would be nice to see what happens if the parameters include path to non-existent file.", "url": "https://github.com/oracle/opengrok/pull/3194#discussion_r487985796", "createdAt": "2020-09-14T14:40:46Z", "author": {"login": "vladak"}, "path": "plugins/src/test/java/opengrok/auth/plugin/UserWhiteListPluginTest.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.\n+ */\n+\n+package opengrok.auth.plugin;\n+\n+import opengrok.auth.plugin.entity.User;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.opengrok.indexer.configuration.Group;\n+import org.opengrok.indexer.configuration.Project;\n+import org.opengrok.indexer.util.RandomString;\n+import org.opengrok.indexer.web.DummyHttpServletRequest;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.OutputStreamWriter;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Represents a container for tests of {@link UserWhiteListPlugin}.\n+ */\n+public class UserWhiteListPluginTest {\n+\n+    private static final String OK_USER = \"user1321\";\n+    private static File tempWhitelist;\n+    private static HashMap<String, Object> validPluginParameters;\n+\n+    private UserWhiteListPlugin plugin;\n+\n+    @BeforeClass\n+    public static void beforeClass() throws Exception {\n+        tempWhitelist = File.createTempFile(\"UserWhiteListPluginTest\", \"txt\");\n+        try (BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(\n+                new FileOutputStream(tempWhitelist), StandardCharsets.UTF_8))) {\n+            writer.write(OK_USER);\n+            // Don't bother with trailing LF.\n+        }\n+\n+        validPluginParameters = new HashMap<>();\n+        validPluginParameters.put(UserWhiteListPlugin.FILE_PARAM, tempWhitelist.getPath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c43807263e4dedefe3c7eec37e4d5df5fe0a7796"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3ODc2Njg4", "url": "https://github.com/oracle/opengrok/pull/3194#pullrequestreview-487876688", "createdAt": "2020-09-14T15:14:02Z", "commit": {"oid": "c43807263e4dedefe3c7eec37e4d5df5fe0a7796"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNToxNDowM1rOHRZ5CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNToxNDowM1rOHRZ5CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAxMjA0MQ==", "bodyText": "why test 2 projects if they are both random ?", "url": "https://github.com/oracle/opengrok/pull/3194#discussion_r488012041", "createdAt": "2020-09-14T15:14:03Z", "author": {"login": "vladak"}, "path": "plugins/src/test/java/opengrok/auth/plugin/UserWhiteListPluginTest.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.\n+ */\n+\n+package opengrok.auth.plugin;\n+\n+import opengrok.auth.plugin.entity.User;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.opengrok.indexer.configuration.Group;\n+import org.opengrok.indexer.configuration.Project;\n+import org.opengrok.indexer.util.RandomString;\n+import org.opengrok.indexer.web.DummyHttpServletRequest;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.OutputStreamWriter;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Represents a container for tests of {@link UserWhiteListPlugin}.\n+ */\n+public class UserWhiteListPluginTest {\n+\n+    private static final String OK_USER = \"user1321\";\n+    private static File tempWhitelist;\n+    private static HashMap<String, Object> validPluginParameters;\n+\n+    private UserWhiteListPlugin plugin;\n+\n+    @BeforeClass\n+    public static void beforeClass() throws Exception {\n+        tempWhitelist = File.createTempFile(\"UserWhiteListPluginTest\", \"txt\");\n+        try (BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(\n+                new FileOutputStream(tempWhitelist), StandardCharsets.UTF_8))) {\n+            writer.write(OK_USER);\n+            // Don't bother with trailing LF.\n+        }\n+\n+        validPluginParameters = new HashMap<>();\n+        validPluginParameters.put(UserWhiteListPlugin.FILE_PARAM, tempWhitelist.getPath());\n+    }\n+\n+    @AfterClass\n+    public static void afterClass() {\n+        if (tempWhitelist != null) {\n+            //noinspection ResultOfMethodCallIgnored\n+            tempWhitelist.delete();\n+        }\n+    }\n+\n+    @Before\n+    public void setUp() {\n+        plugin = new UserWhiteListPlugin();\n+    }\n+\n+    @Test\n+    public void shouldThrowOnLoadIfNullArgument() {\n+        NullPointerException caughtException = null;\n+        try {\n+            //noinspection ConstantConditions\n+            plugin.load(null);\n+        } catch (NullPointerException ex) {\n+            caughtException = ex;\n+        }\n+\n+        assertNotNull(\"caught NullPointerException\", caughtException);\n+    }\n+\n+    @Test\n+    public void shouldThrowOnLoadIfNoFileSpecified() {\n+        IllegalArgumentException caughtException = null;\n+        try {\n+            plugin.load(new HashMap<>());\n+        } catch (IllegalArgumentException ex) {\n+            caughtException = ex;\n+        }\n+\n+        assertNotNull(\"caught IllegalArgumentException\", caughtException);\n+        assertTrue(\"caughtException should mention 'Missing parameter'\",\n+                caughtException.getMessage().contains(\"Missing parameter\"));\n+    }\n+\n+    @Test\n+    public void shouldUnload() {\n+        plugin.unload();\n+    }\n+\n+    @Test\n+    public void shouldAllowWhitelistedUserForAnyProject() {\n+        plugin.load(validPluginParameters);\n+\n+        DummyHttpServletRequest req = new DummyHttpServletRequest();\n+        req.setAttribute(UserPlugin.REQUEST_ATTR, new User(OK_USER));\n+\n+        Project randomProject = new Project(RandomString.generateUpper(10));\n+        boolean projectAllowed = plugin.isAllowed(req, randomProject);\n+        assertTrue(\"should allow OK_USER for random project 1\", projectAllowed);\n+\n+        randomProject = new Project(RandomString.generateUpper(10));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c43807263e4dedefe3c7eec37e4d5df5fe0a7796"}, "originalPosition": 127}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14a7711388e6865129f93e80258be8e01d12a599", "author": {"user": {"login": "idodeclare", "name": "C Fraire"}}, "url": "https://github.com/oracle/opengrok/commit/14a7711388e6865129f93e80258be8e01d12a599", "committedDate": "2020-09-18T22:00:25Z", "message": "Add tests of FileUtil and NoPathParameterException\n\nAlso, remove unused method."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df1c9e51fbe24af46ce5caaef9402ab65c08dd3d", "author": {"user": {"login": "idodeclare", "name": "C Fraire"}}, "url": "https://github.com/oracle/opengrok/commit/df1c9e51fbe24af46ce5caaef9402ab65c08dd3d", "committedDate": "2020-09-18T22:00:25Z", "message": "Add tests of HCL xref and symbols"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f22c0acfee9cca757d8ee3306f52240dce897489", "author": {"user": {"login": "idodeclare", "name": "C Fraire"}}, "url": "https://github.com/oracle/opengrok/commit/f22c0acfee9cca757d8ee3306f52240dce897489", "committedDate": "2020-09-18T22:00:25Z", "message": "Move class only used for testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34130fa010bdde632d637120db063eb2b6fe6f04", "author": {"user": {"login": "idodeclare", "name": "C Fraire"}}, "url": "https://github.com/oracle/opengrok/commit/34130fa010bdde632d637120db063eb2b6fe6f04", "committedDate": "2020-09-18T22:00:52Z", "message": "Add tests of UserWhiteListPlugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e87e70f6d1b31f83e6722fae1e2ce775a7f1c52a", "author": {"user": {"login": "idodeclare", "name": "C Fraire"}}, "url": "https://github.com/oracle/opengrok/commit/e87e70f6d1b31f83e6722fae1e2ce775a7f1c52a", "committedDate": "2020-09-18T22:00:53Z", "message": "Add tests of TruePlugin and FalsePlugin"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c43807263e4dedefe3c7eec37e4d5df5fe0a7796", "author": {"user": {"login": "idodeclare", "name": "C Fraire"}}, "url": "https://github.com/oracle/opengrok/commit/c43807263e4dedefe3c7eec37e4d5df5fe0a7796", "committedDate": "2020-08-22T23:17:11Z", "message": "Add tests of TruePlugin and FalsePlugin"}, "afterCommit": {"oid": "e87e70f6d1b31f83e6722fae1e2ce775a7f1c52a", "author": {"user": {"login": "idodeclare", "name": "C Fraire"}}, "url": "https://github.com/oracle/opengrok/commit/e87e70f6d1b31f83e6722fae1e2ce775a7f1c52a", "committedDate": "2020-09-18T22:00:53Z", "message": "Add tests of TruePlugin and FalsePlugin"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 174, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}