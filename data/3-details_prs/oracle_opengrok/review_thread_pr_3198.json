{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1NDE3NzA5", "number": 3198, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNToxOToyN1rOEdyn5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzowNjoyMlrOEd00Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NjczNTc1OnYy", "diffSide": "RIGHT", "path": "plugins/src/main/java/opengrok/auth/plugin/ldap/LdapServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNToxOToyN1rOHJKnlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNToxOToyN1rOHJKnlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM3MzIwNA==", "bodyText": "gotcha: cannot use java.net.URL since it does not recognize schemes other than http/https.", "url": "https://github.com/oracle/opengrok/pull/3198#discussion_r479373204", "createdAt": "2020-08-28T15:19:27Z", "author": {"login": "vladak"}, "path": "plugins/src/main/java/opengrok/auth/plugin/ldap/LdapServer.java", "diffHunk": "@@ -122,13 +129,89 @@ public void setInterval(int interval) {\n         this.interval = interval;\n     }\n \n+    private String urlToHostname(String urlStr) throws URISyntaxException {\n+        URI uri = new URI(urlStr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "233f3b65d96989da2fb1e36ba8fb66d6cf713d15"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Njc0MDc2OnYy", "diffSide": "RIGHT", "path": "plugins/src/main/java/opengrok/auth/plugin/ldap/LdapServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNToyMDo1N1rOHJKqwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNToyMDo1N1rOHJKqwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM3NDAxNw==", "bodyText": "There is no reasonable way to get the functionality of getservbyname() libc library call: https://stackoverflow.com/questions/3645405/get-port-number-for-service-name", "url": "https://github.com/oracle/opengrok/pull/3198#discussion_r479374017", "createdAt": "2020-08-28T15:20:57Z", "author": {"login": "vladak"}, "path": "plugins/src/main/java/opengrok/auth/plugin/ldap/LdapServer.java", "diffHunk": "@@ -122,13 +129,89 @@ public void setInterval(int interval) {\n         this.interval = interval;\n     }\n \n+    private String urlToHostname(String urlStr) throws URISyntaxException {\n+        URI uri = new URI(urlStr);\n+        return uri.getHost();\n+    }\n+\n+    /**\n+     * This method converts the scheme from URI to port number.\n+     * It is limited to the ldap/ldaps schemes.\n+     * The method could be static however then it cannot be easily mocked in testing.\n+     * @return port number\n+     * @throws URISyntaxException if the URI is not valid\n+     */\n+    public int getPort() throws URISyntaxException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "233f3b65d96989da2fb1e36ba8fb66d6cf713d15"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Njc0NzM0OnYy", "diffSide": "RIGHT", "path": "plugins/src/main/java/opengrok/auth/plugin/ldap/LdapServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNToyMzowMVrOHJKu-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNToyMzowMVrOHJKu-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM3NTA5OA==", "bodyText": "InetAddress.isReachable() is not really useful as it either uses ICMP echo or TCP echo service. The former is not usable out of the box on Linux due to limited privileges, the latter is useless in this case as we are interested in other ports (and the TCP echo service is very little used these days anyway, if at all).", "url": "https://github.com/oracle/opengrok/pull/3198#discussion_r479375098", "createdAt": "2020-08-28T15:23:01Z", "author": {"login": "vladak"}, "path": "plugins/src/main/java/opengrok/auth/plugin/ldap/LdapServer.java", "diffHunk": "@@ -122,13 +129,89 @@ public void setInterval(int interval) {\n         this.interval = interval;\n     }\n \n+    private String urlToHostname(String urlStr) throws URISyntaxException {\n+        URI uri = new URI(urlStr);\n+        return uri.getHost();\n+    }\n+\n+    /**\n+     * This method converts the scheme from URI to port number.\n+     * It is limited to the ldap/ldaps schemes.\n+     * The method could be static however then it cannot be easily mocked in testing.\n+     * @return port number\n+     * @throws URISyntaxException if the URI is not valid\n+     */\n+    public int getPort() throws URISyntaxException {\n+        URI uri = new URI(getUrl());\n+        switch (uri.getScheme()) {\n+            case \"ldaps\":\n+                return 636;\n+            case \"ldap\":\n+                return 389;\n+        }\n+\n+        return -1;\n+    }\n+\n+    private boolean isReachable(InetAddress addr, int port, int timeOutMillis) {\n+        try {\n+            try (Socket soc = new Socket()) {\n+                soc.connect(new InetSocketAddress(addr, port), timeOutMillis);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "233f3b65d96989da2fb1e36ba8fb66d6cf713d15"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Njc1OTM2OnYy", "diffSide": "RIGHT", "path": "plugins/src/test/java/opengrok/auth/plugin/LdapServerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNToyNjozN1rOHJK2tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNTo1Mjo0MlrOHJLvfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM3NzA3OA==", "bodyText": "Any way to make reliable or at least to await a finite time. E.g. what if new ServerSocket throws, and latch is never decremented.", "url": "https://github.com/oracle/opengrok/pull/3198#discussion_r479377078", "createdAt": "2020-08-28T15:26:37Z", "author": {"login": "idodeclare"}, "path": "plugins/src/test/java/opengrok/auth/plugin/LdapServerTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package opengrok.auth.plugin;\n+\n+import opengrok.auth.plugin.ldap.LdapServer;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.net.URISyntaxException;\n+import java.net.UnknownHostException;\n+import java.util.concurrent.CountDownLatch;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class LdapServerTest {\n+\n+    @Test\n+    public void testInvalidURI() {\n+        LdapServer server = new LdapServer(\"foo:/\\\\/\\\\foo.bar\");\n+        assertFalse(server.isReachable());\n+    }\n+\n+    @Test\n+    public void testGetPort() throws URISyntaxException {\n+        LdapServer server = new LdapServer(\"ldaps://foo.bar\");\n+        assertEquals(636, server.getPort());\n+\n+        server = new LdapServer(\"ldap://foo.bar\");\n+        assertEquals(389, server.getPort());\n+\n+        server = new LdapServer(\"crumble://foo.bar\");\n+        assertEquals(-1, server.getPort());\n+    }\n+\n+    @Test\n+    public void testSetGetUsername() {\n+        LdapServer server = new LdapServer();\n+\n+        assertNull(server.getUsername());\n+        assertNull(server.getPassword());\n+\n+        final String testUsername = \"foo\";\n+        server.setUsername(testUsername);\n+        assertEquals(testUsername, server.getUsername());\n+\n+        final String testPassword = \"bar\";\n+        server.setPassword(testPassword);\n+        assertEquals(testPassword, server.getPassword());\n+    }\n+\n+    @Test\n+    public void testIsReachable() throws UnknownHostException, InterruptedException, URISyntaxException {\n+        // Start simple TCP server on port 6336. It has to be > 1024 to avoid BindException\n+        // due to permission denied.\n+        int testPort = 6336;\n+        InetAddress localhostAddr = InetAddress.getLocalHost();\n+        final CountDownLatch startLatch = new CountDownLatch(1);\n+        Thread thread = new Thread(() -> {\n+            try {\n+                ServerSocket socket = new ServerSocket(testPort, 1, localhostAddr);\n+                startLatch.countDown();\n+                Socket client = socket.accept();\n+                client.close();\n+                socket.close();\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+\n+        // TODO:\n+        //  There is still a tiny window between when the latch unblocks and the server actually starts accept().", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "233f3b65d96989da2fb1e36ba8fb66d6cf713d15"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM5MTYxNQ==", "bodyText": "sure, good idea.", "url": "https://github.com/oracle/opengrok/pull/3198#discussion_r479391615", "createdAt": "2020-08-28T15:52:42Z", "author": {"login": "vladak"}, "path": "plugins/src/test/java/opengrok/auth/plugin/LdapServerTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package opengrok.auth.plugin;\n+\n+import opengrok.auth.plugin.ldap.LdapServer;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.net.URISyntaxException;\n+import java.net.UnknownHostException;\n+import java.util.concurrent.CountDownLatch;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class LdapServerTest {\n+\n+    @Test\n+    public void testInvalidURI() {\n+        LdapServer server = new LdapServer(\"foo:/\\\\/\\\\foo.bar\");\n+        assertFalse(server.isReachable());\n+    }\n+\n+    @Test\n+    public void testGetPort() throws URISyntaxException {\n+        LdapServer server = new LdapServer(\"ldaps://foo.bar\");\n+        assertEquals(636, server.getPort());\n+\n+        server = new LdapServer(\"ldap://foo.bar\");\n+        assertEquals(389, server.getPort());\n+\n+        server = new LdapServer(\"crumble://foo.bar\");\n+        assertEquals(-1, server.getPort());\n+    }\n+\n+    @Test\n+    public void testSetGetUsername() {\n+        LdapServer server = new LdapServer();\n+\n+        assertNull(server.getUsername());\n+        assertNull(server.getPassword());\n+\n+        final String testUsername = \"foo\";\n+        server.setUsername(testUsername);\n+        assertEquals(testUsername, server.getUsername());\n+\n+        final String testPassword = \"bar\";\n+        server.setPassword(testPassword);\n+        assertEquals(testPassword, server.getPassword());\n+    }\n+\n+    @Test\n+    public void testIsReachable() throws UnknownHostException, InterruptedException, URISyntaxException {\n+        // Start simple TCP server on port 6336. It has to be > 1024 to avoid BindException\n+        // due to permission denied.\n+        int testPort = 6336;\n+        InetAddress localhostAddr = InetAddress.getLocalHost();\n+        final CountDownLatch startLatch = new CountDownLatch(1);\n+        Thread thread = new Thread(() -> {\n+            try {\n+                ServerSocket socket = new ServerSocket(testPort, 1, localhostAddr);\n+                startLatch.countDown();\n+                Socket client = socket.accept();\n+                client.close();\n+                socket.close();\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+\n+        // TODO:\n+        //  There is still a tiny window between when the latch unblocks and the server actually starts accept().", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM3NzA3OA=="}, "originalCommit": {"oid": "233f3b65d96989da2fb1e36ba8fb66d6cf713d15"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzA5NTQzOnYy", "diffSide": "RIGHT", "path": "plugins/src/main/java/opengrok/auth/plugin/ldap/LdapServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzowNjoyMlrOHJOHyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzo1NjozMFrOHJPmDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQzMDYwMA==", "bodyText": "Could getAddresses() be empty, and would true be correct then?", "url": "https://github.com/oracle/opengrok/pull/3198#discussion_r479430600", "createdAt": "2020-08-28T17:06:22Z", "author": {"login": "idodeclare"}, "path": "plugins/src/main/java/opengrok/auth/plugin/ldap/LdapServer.java", "diffHunk": "@@ -122,13 +129,89 @@ public void setInterval(int interval) {\n         this.interval = interval;\n     }\n \n+    private String urlToHostname(String urlStr) throws URISyntaxException {\n+        URI uri = new URI(urlStr);\n+        return uri.getHost();\n+    }\n+\n+    /**\n+     * This method converts the scheme from URI to port number.\n+     * It is limited to the ldap/ldaps schemes.\n+     * The method could be static however then it cannot be easily mocked in testing.\n+     * @return port number or -1 if the scheme in given URI is not known\n+     * @throws URISyntaxException if the URI is not valid\n+     */\n+    public int getPort() throws URISyntaxException {\n+        URI uri = new URI(getUrl());\n+        switch (uri.getScheme()) {\n+            case \"ldaps\":\n+                return 636;\n+            case \"ldap\":\n+                return 389;\n+        }\n+\n+        return -1;\n+    }\n+\n+    private boolean isReachable(InetAddress addr, int port, int timeOutMillis) {\n+        try {\n+            try (Socket soc = new Socket()) {\n+                soc.connect(new InetSocketAddress(addr, port), timeOutMillis);\n+            }\n+            return true;\n+        } catch (IOException e) {\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Wraps InetAddress.getAllByName() so that it can be mocked in testing.\n+     * (mocking static methods is not really possible with Mockito)\n+     * @param hostname hostname string\n+     * @return array of InetAddress objects\n+     * @throws UnknownHostException if the host cannot be resolved to any IP address\n+     */\n+    public InetAddress[] getAddresses(String hostname) throws UnknownHostException {\n+        return InetAddress.getAllByName(hostname);\n+    }\n+\n+    /**\n+     * Go through all IP addresses and find out if they are reachable.\n+     * @return true if all IP addresses are reachable, false otherwise\n+     */\n+    public boolean isReachable() {\n+        try {\n+            for (InetAddress addr : getAddresses(urlToHostname(getUrl()))) {\n+                // InetAddr.isReachable() is not sufficient as it can only check ICMP and TCP echo.\n+                int port = getPort();\n+                if (!isReachable(addr, port, getConnectTimeout())) {\n+                    LOGGER.log(Level.WARNING, \"LDAP server {0} is not reachable on {1}:{2}\",\n+                            new Object[]{this, addr, Integer.toString(port)});\n+                    return false;\n+                }\n+            }\n+        } catch (UnknownHostException e) {\n+            LOGGER.log(Level.SEVERE, String.format(\"cannot get IP addresses for LDAP server %s\", this), e);\n+            return false;\n+        } catch (URISyntaxException e) {\n+            LOGGER.log(Level.SEVERE, String.format(\"not a valid URI: %s\", getUrl()), e);\n+            return false;\n+        }\n+\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2975c3386587d6b8cbe6ddeb86b22e83bc57ccc"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ1NDczMg==", "bodyText": "I noticed this too. Thanks for reminding me.", "url": "https://github.com/oracle/opengrok/pull/3198#discussion_r479454732", "createdAt": "2020-08-28T17:56:30Z", "author": {"login": "vladak"}, "path": "plugins/src/main/java/opengrok/auth/plugin/ldap/LdapServer.java", "diffHunk": "@@ -122,13 +129,89 @@ public void setInterval(int interval) {\n         this.interval = interval;\n     }\n \n+    private String urlToHostname(String urlStr) throws URISyntaxException {\n+        URI uri = new URI(urlStr);\n+        return uri.getHost();\n+    }\n+\n+    /**\n+     * This method converts the scheme from URI to port number.\n+     * It is limited to the ldap/ldaps schemes.\n+     * The method could be static however then it cannot be easily mocked in testing.\n+     * @return port number or -1 if the scheme in given URI is not known\n+     * @throws URISyntaxException if the URI is not valid\n+     */\n+    public int getPort() throws URISyntaxException {\n+        URI uri = new URI(getUrl());\n+        switch (uri.getScheme()) {\n+            case \"ldaps\":\n+                return 636;\n+            case \"ldap\":\n+                return 389;\n+        }\n+\n+        return -1;\n+    }\n+\n+    private boolean isReachable(InetAddress addr, int port, int timeOutMillis) {\n+        try {\n+            try (Socket soc = new Socket()) {\n+                soc.connect(new InetSocketAddress(addr, port), timeOutMillis);\n+            }\n+            return true;\n+        } catch (IOException e) {\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Wraps InetAddress.getAllByName() so that it can be mocked in testing.\n+     * (mocking static methods is not really possible with Mockito)\n+     * @param hostname hostname string\n+     * @return array of InetAddress objects\n+     * @throws UnknownHostException if the host cannot be resolved to any IP address\n+     */\n+    public InetAddress[] getAddresses(String hostname) throws UnknownHostException {\n+        return InetAddress.getAllByName(hostname);\n+    }\n+\n+    /**\n+     * Go through all IP addresses and find out if they are reachable.\n+     * @return true if all IP addresses are reachable, false otherwise\n+     */\n+    public boolean isReachable() {\n+        try {\n+            for (InetAddress addr : getAddresses(urlToHostname(getUrl()))) {\n+                // InetAddr.isReachable() is not sufficient as it can only check ICMP and TCP echo.\n+                int port = getPort();\n+                if (!isReachable(addr, port, getConnectTimeout())) {\n+                    LOGGER.log(Level.WARNING, \"LDAP server {0} is not reachable on {1}:{2}\",\n+                            new Object[]{this, addr, Integer.toString(port)});\n+                    return false;\n+                }\n+            }\n+        } catch (UnknownHostException e) {\n+            LOGGER.log(Level.SEVERE, String.format(\"cannot get IP addresses for LDAP server %s\", this), e);\n+            return false;\n+        } catch (URISyntaxException e) {\n+            LOGGER.log(Level.SEVERE, String.format(\"not a valid URI: %s\", getUrl()), e);\n+            return false;\n+        }\n+\n+        return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQzMDYwMA=="}, "originalCommit": {"oid": "e2975c3386587d6b8cbe6ddeb86b22e83bc57ccc"}, "originalPosition": 103}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4931, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}