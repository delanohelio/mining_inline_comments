{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1MTI4MjQ2", "number": 3285, "title": "Allow users to specify custom mirroring and sync command", "bodyText": "Of course the change is compatible with the current setup:\nmirror.conf:\ncommands:\n  git: /usr/bin/git\n\nThe syntax is extended to support custom commands as follows:\ncommands:\n  git:\n    command: /usr/local/bin/git\n    incoming: ['git', 'pull', '--dry-run']\n    # for sync the default procedure will be used with the overriden command /usr/local/bin/git\n\ncommands:\n  git:\n    command: /usr/local/bin/git\n    sync: ['git', 'pull', '--ff-only']\n    # for mirroring the default procedure will be used with the overriden command /usr/local/bin/git\n\ncommands:\n  git:\n    command: /usr/local/bin/git\n    incoming: ['git', 'pull', '--dry-run']\n    sync: ['git', 'pull', '--ff-only']\n\nThis pull request is to allow user to overcome problems from #2583 and #2432 before an universal solution exists in opengrok.", "createdAt": "2020-10-16T22:19:28Z", "url": "https://github.com/oracle/opengrok/pull/3285", "merged": true, "mergeCommit": {"oid": "50551361c926fb7551f507f5e9b6d7b8625acfd0"}, "closed": true, "closedAt": "2020-10-26T14:10:40Z", "author": {"login": "tulinkry"}, "timelineItems": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdUq68dgFqTUxMzUzNjIzMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdVomNdgBqjM5MTY2MTUzMTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzNTM2MjMy", "url": "https://github.com/oracle/opengrok/pull/3285#pullrequestreview-513536232", "createdAt": "2020-10-21T10:36:06Z", "commit": {"oid": "507eed5bd1667638081e310fc2f446b77b7abfbe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMDozNjowNlrOHllXuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMDozNjowNlrOHllXuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE3MTY0MQ==", "bodyText": "do the tests assume that Git is installed on the system ?", "url": "https://github.com/oracle/opengrok/pull/3285#discussion_r509171641", "createdAt": "2020-10-21T10:36:06Z", "author": {"login": "vladak"}, "path": "opengrok-tools/src/test/python/test_mirror.py", "diffHunk": "@@ -376,3 +398,183 @@ def mock_get_repo_type(*args):\n             repos = get_repos_for_project(project_name, None, source_root,\n                                           ignored_repos=['.'])\n             assert len(repos) == 0\n+\n+\n+@pytest.mark.parametrize(['config', 'expected_command'], [\n+    (None, 'default-command'),\n+    ('/usr/bin/git', '/usr/bin/git'),\n+    ({}, 'default-command'),\n+    ({'incoming': '/bin/false'}, 'default-command'),\n+    ([], 'default-command'),\n+    ({'command': '/usr/local/bin/git'}, '/usr/local/bin/git'),\n+    (\n+            {'command': '/usr/local/bin/git', 'incoming': '/bin/false'},\n+            '/usr/local/bin/git'\n+    )\n+])\n+def test_mirroring_custom_repository_command(config, expected_command):\n+    assert expected_command == Repository._repository_command(\n+        config,\n+        lambda: 'default-command'\n+    )\n+\n+\n+@pytest.mark.parametrize(\n+    ('touch_binary'), [\n+        pytest.param('/bin/touch',\n+                     marks=pytest.mark.skipif(\n+                         not os.path.exists('/bin/touch'),\n+                         reason=\"requires /bin binaries\")),\n+        pytest.param('/usr/bin/touch',\n+                     marks=pytest.mark.skipif(\n+                         not os.path.exists('/usr/bin/touch'),\n+                         reason=\"requires /usr/bin binaries\")),\n+    ]\n+)\n+def test_mirroring_custom_incoming_invoke_command(touch_binary):\n+    with tempfile.TemporaryDirectory() as repository_root:\n+        repository = GitRepository(mock(), repository_root, 'test-1', {\n+            'incoming': [touch_binary, 'incoming.txt']\n+        }, None, None, None)\n+        assert repository.incoming() is False\n+        assert 'incoming.txt' in os.listdir(repository_root)\n+\n+\n+@pytest.mark.parametrize(\n+    ('echo_binary'), [\n+        pytest.param('/bin/echo',\n+                     marks=pytest.mark.skipif(\n+                         not os.path.exists('/bin/echo'),\n+                         reason=\"requires /bin binaries\")),\n+        pytest.param('/usr/bin/echo',\n+                     marks=pytest.mark.skipif(\n+                         not os.path.exists('/usr/bin/echo'),\n+                         reason=\"requires /usr/bin binaries\")),\n+    ]\n+)\n+def test_mirroring_custom_incoming_changes(echo_binary):\n+    with tempfile.TemporaryDirectory() as repository_root:\n+        repository = GitRepository(mock(), repository_root, 'test-1', {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "507eed5bd1667638081e310fc2f446b77b7abfbe"}, "originalPosition": 233}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzNTM3Njcx", "url": "https://github.com/oracle/opengrok/pull/3285#pullrequestreview-513537671", "createdAt": "2020-10-21T10:38:05Z", "commit": {"oid": "507eed5bd1667638081e310fc2f446b77b7abfbe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMDozODowNVrOHllb9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMDozODowNVrOHllb9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE3MjcyNg==", "bodyText": "make 'sync.txt' a variable ?", "url": "https://github.com/oracle/opengrok/pull/3285#discussion_r509172726", "createdAt": "2020-10-21T10:38:05Z", "author": {"login": "vladak"}, "path": "opengrok-tools/src/test/python/test_mirror.py", "diffHunk": "@@ -376,3 +398,183 @@ def mock_get_repo_type(*args):\n             repos = get_repos_for_project(project_name, None, source_root,\n                                           ignored_repos=['.'])\n             assert len(repos) == 0\n+\n+\n+@pytest.mark.parametrize(['config', 'expected_command'], [\n+    (None, 'default-command'),\n+    ('/usr/bin/git', '/usr/bin/git'),\n+    ({}, 'default-command'),\n+    ({'incoming': '/bin/false'}, 'default-command'),\n+    ([], 'default-command'),\n+    ({'command': '/usr/local/bin/git'}, '/usr/local/bin/git'),\n+    (\n+            {'command': '/usr/local/bin/git', 'incoming': '/bin/false'},\n+            '/usr/local/bin/git'\n+    )\n+])\n+def test_mirroring_custom_repository_command(config, expected_command):\n+    assert expected_command == Repository._repository_command(\n+        config,\n+        lambda: 'default-command'\n+    )\n+\n+\n+@pytest.mark.parametrize(\n+    ('touch_binary'), [\n+        pytest.param('/bin/touch',\n+                     marks=pytest.mark.skipif(\n+                         not os.path.exists('/bin/touch'),\n+                         reason=\"requires /bin binaries\")),\n+        pytest.param('/usr/bin/touch',\n+                     marks=pytest.mark.skipif(\n+                         not os.path.exists('/usr/bin/touch'),\n+                         reason=\"requires /usr/bin binaries\")),\n+    ]\n+)\n+def test_mirroring_custom_incoming_invoke_command(touch_binary):\n+    with tempfile.TemporaryDirectory() as repository_root:\n+        repository = GitRepository(mock(), repository_root, 'test-1', {\n+            'incoming': [touch_binary, 'incoming.txt']\n+        }, None, None, None)\n+        assert repository.incoming() is False\n+        assert 'incoming.txt' in os.listdir(repository_root)\n+\n+\n+@pytest.mark.parametrize(\n+    ('echo_binary'), [\n+        pytest.param('/bin/echo',\n+                     marks=pytest.mark.skipif(\n+                         not os.path.exists('/bin/echo'),\n+                         reason=\"requires /bin binaries\")),\n+        pytest.param('/usr/bin/echo',\n+                     marks=pytest.mark.skipif(\n+                         not os.path.exists('/usr/bin/echo'),\n+                         reason=\"requires /usr/bin binaries\")),\n+    ]\n+)\n+def test_mirroring_custom_incoming_changes(echo_binary):\n+    with tempfile.TemporaryDirectory() as repository_root:\n+        repository = GitRepository(mock(), repository_root, 'test-1', {\n+            'incoming': [echo_binary, 'new incoming changes!']\n+        }, None, None, None)\n+        assert repository.incoming() is True\n+\n+\n+@pytest.mark.parametrize(\n+    ('true_binary'), [\n+        pytest.param('/bin/true',\n+                     marks=pytest.mark.skipif(\n+                         not os.path.exists('/bin/true'),\n+                         reason=\"requires /bin binaries\")),\n+        pytest.param('/usr/bin/true',\n+                     marks=pytest.mark.skipif(\n+                         not os.path.exists('/usr/bin/true'),\n+                         reason=\"requires /usr/bin binaries\")),\n+    ]\n+)\n+def test_mirroring_custom_incoming_no_changes(true_binary):\n+    with tempfile.TemporaryDirectory() as repository_root:\n+        repository = GitRepository(mock(), repository_root, 'test-1', {\n+            'incoming': true_binary\n+        }, None, None, None)\n+        assert repository.incoming() is False\n+\n+\n+@pytest.mark.parametrize(\n+    ('false_binary'), [\n+        pytest.param('/bin/false',\n+                     marks=pytest.mark.skipif(\n+                         not os.path.exists('/bin/false'),\n+                         reason=\"requires /bin binaries\")),\n+        pytest.param('/usr/bin/false',\n+                     marks=pytest.mark.skipif(\n+                         not os.path.exists('/usr/bin/false'),\n+                         reason=\"requires /usr/bin binaries\")),\n+    ]\n+)\n+def test_mirroring_custom_incoming_error(false_binary):\n+    with pytest.raises(RepositoryException):\n+        with tempfile.TemporaryDirectory() as repository_root:\n+            repository = GitRepository(mock(), repository_root, 'test-1', {\n+                'incoming': false_binary\n+            }, None, None, None)\n+            repository.incoming()\n+\n+\n+def test_mirroring_incoming_invoke_original_command():\n+    with tempfile.TemporaryDirectory() as repository_root:\n+        repository = GitRepository(mock(), repository_root, 'test-1',\n+                                   None, None, None, None)\n+        with when(repository).incoming_check().thenReturn(0):\n+            repository.incoming()\n+            verify(repository).incoming_check()\n+\n+\n+@pytest.mark.parametrize(\n+    ('touch_binary'), [\n+        pytest.param('/bin/touch',\n+                     marks=pytest.mark.skipif(\n+                         not os.path.exists('/bin/touch'),\n+                         reason=\"requires /bin binaries\")),\n+        pytest.param('/usr/bin/touch',\n+                     marks=pytest.mark.skipif(\n+                         not os.path.exists('/usr/bin/touch'),\n+                         reason=\"requires /usr/bin binaries\")),\n+    ]\n+)\n+def test_mirroring_custom_sync_invoke_command(touch_binary):\n+    with tempfile.TemporaryDirectory() as repository_root:\n+        repository = GitRepository(mock(), repository_root, 'test-1', {\n+            'sync': [touch_binary, 'sync.txt']\n+        }, None, None, None)\n+        assert repository.sync() == 0\n+        assert 'sync.txt' in os.listdir(repository_root)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "507eed5bd1667638081e310fc2f446b77b7abfbe"}, "originalPosition": 307}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzNTM4MDg1", "url": "https://github.com/oracle/opengrok/pull/3285#pullrequestreview-513538085", "createdAt": "2020-10-21T10:38:43Z", "commit": {"oid": "507eed5bd1667638081e310fc2f446b77b7abfbe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMDozODo0M1rOHlldMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMDozODo0M1rOHlldMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE3MzA0MA==", "bodyText": "make 'incoming.txt' a variable ?", "url": "https://github.com/oracle/opengrok/pull/3285#discussion_r509173040", "createdAt": "2020-10-21T10:38:43Z", "author": {"login": "vladak"}, "path": "opengrok-tools/src/test/python/test_mirror.py", "diffHunk": "@@ -376,3 +398,183 @@ def mock_get_repo_type(*args):\n             repos = get_repos_for_project(project_name, None, source_root,\n                                           ignored_repos=['.'])\n             assert len(repos) == 0\n+\n+\n+@pytest.mark.parametrize(['config', 'expected_command'], [\n+    (None, 'default-command'),\n+    ('/usr/bin/git', '/usr/bin/git'),\n+    ({}, 'default-command'),\n+    ({'incoming': '/bin/false'}, 'default-command'),\n+    ([], 'default-command'),\n+    ({'command': '/usr/local/bin/git'}, '/usr/local/bin/git'),\n+    (\n+            {'command': '/usr/local/bin/git', 'incoming': '/bin/false'},\n+            '/usr/local/bin/git'\n+    )\n+])\n+def test_mirroring_custom_repository_command(config, expected_command):\n+    assert expected_command == Repository._repository_command(\n+        config,\n+        lambda: 'default-command'\n+    )\n+\n+\n+@pytest.mark.parametrize(\n+    ('touch_binary'), [\n+        pytest.param('/bin/touch',\n+                     marks=pytest.mark.skipif(\n+                         not os.path.exists('/bin/touch'),\n+                         reason=\"requires /bin binaries\")),\n+        pytest.param('/usr/bin/touch',\n+                     marks=pytest.mark.skipif(\n+                         not os.path.exists('/usr/bin/touch'),\n+                         reason=\"requires /usr/bin binaries\")),\n+    ]\n+)\n+def test_mirroring_custom_incoming_invoke_command(touch_binary):\n+    with tempfile.TemporaryDirectory() as repository_root:\n+        repository = GitRepository(mock(), repository_root, 'test-1', {\n+            'incoming': [touch_binary, 'incoming.txt']\n+        }, None, None, None)\n+        assert repository.incoming() is False\n+        assert 'incoming.txt' in os.listdir(repository_root)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "507eed5bd1667638081e310fc2f446b77b7abfbe"}, "originalPosition": 216}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzNTQxNjU0", "url": "https://github.com/oracle/opengrok/pull/3285#pullrequestreview-513541654", "createdAt": "2020-10-21T10:43:40Z", "commit": {"oid": "507eed5bd1667638081e310fc2f446b77b7abfbe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMDo0Mzo0MFrOHlln3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMDo0Mzo0MFrOHlln3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE3NTc3NQ==", "bodyText": "refactor to a function and use that in incoming() as well ?", "url": "https://github.com/oracle/opengrok/pull/3285#discussion_r509175775", "createdAt": "2020-10-21T10:43:40Z", "author": {"login": "vladak"}, "path": "opengrok-tools/src/main/python/opengrok_tools/scm/repository.py", "diffHunk": "@@ -59,6 +61,11 @@ def getCommand(self, cmd, **kwargs):\n \n     def sync(self):\n         # Eventually, there might be per-repository hooks added here.\n+        if isinstance(self.configured_commands, dict) and \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "507eed5bd1667638081e310fc2f446b77b7abfbe"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be43bc79277294a5ed9abea32b3ca2decd6eeb3e", "author": {"user": {"login": "tulinkry", "name": "Kry\u0161tof Tulinger"}}, "url": "https://github.com/oracle/opengrok/commit/be43bc79277294a5ed9abea32b3ca2decd6eeb3e", "committedDate": "2020-10-22T20:03:12Z", "message": "allowing users to override sync and incoming command"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a345fb0bc35a830f451e3a9539fbe9d60e98a22", "author": {"user": {"login": "tulinkry", "name": "Kry\u0161tof Tulinger"}}, "url": "https://github.com/oracle/opengrok/commit/1a345fb0bc35a830f451e3a9539fbe9d60e98a22", "committedDate": "2020-10-22T20:03:12Z", "message": "adding tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fce5a162256948c7e62e00342ae9432afe204aa1", "author": {"user": {"login": "tulinkry", "name": "Kry\u0161tof Tulinger"}}, "url": "https://github.com/oracle/opengrok/commit/fce5a162256948c7e62e00342ae9432afe204aa1", "committedDate": "2020-10-22T20:03:12Z", "message": "fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d69130dfebcb00078ec3f71907254d825806dac", "author": {"user": {"login": "tulinkry", "name": "Kry\u0161tof Tulinger"}}, "url": "https://github.com/oracle/opengrok/commit/6d69130dfebcb00078ec3f71907254d825806dac", "committedDate": "2020-10-22T20:04:46Z", "message": "adapting to new line length"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16575f2b88dba74a72ff51a22c11821e952c6202", "author": {"user": {"login": "tulinkry", "name": "Kry\u0161tof Tulinger"}}, "url": "https://github.com/oracle/opengrok/commit/16575f2b88dba74a72ff51a22c11821e952c6202", "committedDate": "2020-10-22T20:06:41Z", "message": "using variable for filenames"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96d5d260298cb5e29f0bca2f26664f74b4a211d5", "author": {"user": {"login": "tulinkry", "name": "Kry\u0161tof Tulinger"}}, "url": "https://github.com/oracle/opengrok/commit/96d5d260298cb5e29f0bca2f26664f74b4a211d5", "committedDate": "2020-10-22T20:11:45Z", "message": "extracting common code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "507eed5bd1667638081e310fc2f446b77b7abfbe", "author": {"user": {"login": "tulinkry", "name": "Kry\u0161tof Tulinger"}}, "url": "https://github.com/oracle/opengrok/commit/507eed5bd1667638081e310fc2f446b77b7abfbe", "committedDate": "2020-10-18T09:59:38Z", "message": "fix checkstyle"}, "afterCommit": {"oid": "96d5d260298cb5e29f0bca2f26664f74b4a211d5", "author": {"user": {"login": "tulinkry", "name": "Kry\u0161tof Tulinger"}}, "url": "https://github.com/oracle/opengrok/commit/96d5d260298cb5e29f0bca2f26664f74b4a211d5", "committedDate": "2020-10-22T20:11:45Z", "message": "extracting common code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec7de8bd11676b8c256dd7f6b7cbe7e42f68b061", "author": {"user": {"login": "tulinkry", "name": "Kry\u0161tof Tulinger"}}, "url": "https://github.com/oracle/opengrok/commit/ec7de8bd11676b8c256dd7f6b7cbe7e42f68b061", "committedDate": "2020-10-22T20:16:10Z", "message": "adding copyrights"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa06f86f2907d9deb44743ae9e83194f70061fbc", "author": {"user": {"login": "tulinkry", "name": "Kry\u0161tof Tulinger"}}, "url": "https://github.com/oracle/opengrok/commit/aa06f86f2907d9deb44743ae9e83194f70061fbc", "committedDate": "2020-10-22T20:16:26Z", "message": "removing redundant file"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1NDQ0NTc2", "url": "https://github.com/oracle/opengrok/pull/3285#pullrequestreview-515444576", "createdAt": "2020-10-23T08:20:21Z", "commit": {"oid": "aa06f86f2907d9deb44743ae9e83194f70061fbc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwODoyMDoyMVrOHnDn9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwODoyMDoyMVrOHnDn9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDcxNTg5Mg==", "bodyText": "this one don't change", "url": "https://github.com/oracle/opengrok/pull/3285#discussion_r510715892", "createdAt": "2020-10-23T08:20:21Z", "author": {"login": "vladak"}, "path": "opengrok-tools/src/main/python/opengrok_tools/scm/repository.py", "diffHunk": "@@ -18,10 +18,12 @@\n #\n \n #\n-# Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.\n+# Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa06f86f2907d9deb44743ae9e83194f70061fbc"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "739a0f8cfc53ac79257a1a37bcdda10d05df3725", "author": {"user": {"login": "tulinkry", "name": "Kry\u0161tof Tulinger"}}, "url": "https://github.com/oracle/opengrok/commit/739a0f8cfc53ac79257a1a37bcdda10d05df3725", "committedDate": "2020-10-23T08:27:50Z", "message": "revert back original copyrights"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6b1feb7136ece82cd4be1f35d52242b53d2cd5d7", "author": {"user": {"login": "tulinkry", "name": "Kry\u0161tof Tulinger"}}, "url": "https://github.com/oracle/opengrok/commit/6b1feb7136ece82cd4be1f35d52242b53d2cd5d7", "committedDate": "2020-10-23T08:21:37Z", "message": "revert back one of the copyrights"}, "afterCommit": {"oid": "739a0f8cfc53ac79257a1a37bcdda10d05df3725", "author": {"user": {"login": "tulinkry", "name": "Kry\u0161tof Tulinger"}}, "url": "https://github.com/oracle/opengrok/commit/739a0f8cfc53ac79257a1a37bcdda10d05df3725", "committedDate": "2020-10-23T08:27:50Z", "message": "revert back original copyrights"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1NDc1NDQy", "url": "https://github.com/oracle/opengrok/pull/3285#pullrequestreview-515475442", "createdAt": "2020-10-23T08:59:47Z", "commit": {"oid": "739a0f8cfc53ac79257a1a37bcdda10d05df3725"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwODo1OTo0N1rOHnFEnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwODo1OTo0N1rOHnFEnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDczOTYxMw==", "bodyText": "the 'sync' string could be a variable", "url": "https://github.com/oracle/opengrok/pull/3285#discussion_r510739613", "createdAt": "2020-10-23T08:59:47Z", "author": {"login": "vladak"}, "path": "opengrok-tools/src/main/python/opengrok_tools/scm/repository.py", "diffHunk": "@@ -59,6 +62,10 @@ def getCommand(self, cmd, **kwargs):\n \n     def sync(self):\n         # Eventually, there might be per-repository hooks added here.\n+        if self.is_command_overridden(self.configured_commands, 'sync'):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "739a0f8cfc53ac79257a1a37bcdda10d05df3725"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1NDc1NTI5", "url": "https://github.com/oracle/opengrok/pull/3285#pullrequestreview-515475529", "createdAt": "2020-10-23T08:59:53Z", "commit": {"oid": "739a0f8cfc53ac79257a1a37bcdda10d05df3725"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwODo1OTo1M1rOHnFE5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwODo1OTo1M1rOHnFE5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDczOTY4Ng==", "bodyText": "ditto", "url": "https://github.com/oracle/opengrok/pull/3285#discussion_r510739686", "createdAt": "2020-10-23T08:59:53Z", "author": {"login": "vladak"}, "path": "opengrok-tools/src/main/python/opengrok_tools/scm/repository.py", "diffHunk": "@@ -75,6 +82,105 @@ def incoming(self):\n         \"\"\"\n         Check if there are any incoming changes.\n \n+        Return True if so, False otherwise.\n+        \"\"\"\n+        if self.is_command_overridden(self.configured_commands, 'incoming'):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "739a0f8cfc53ac79257a1a37bcdda10d05df3725"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1NDc2NzQ4", "url": "https://github.com/oracle/opengrok/pull/3285#pullrequestreview-515476748", "createdAt": "2020-10-23T09:01:33Z", "commit": {"oid": "739a0f8cfc53ac79257a1a37bcdda10d05df3725"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOTowMTozM1rOHnFIgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOTowMTozM1rOHnFIgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc0MDYwOQ==", "bodyText": "is this something that could be reused in the individual repository implementations ? same for _run_custom_incoming_command().", "url": "https://github.com/oracle/opengrok/pull/3285#discussion_r510740609", "createdAt": "2020-10-23T09:01:33Z", "author": {"login": "vladak"}, "path": "opengrok-tools/src/main/python/opengrok_tools/scm/repository.py", "diffHunk": "@@ -75,6 +82,105 @@ def incoming(self):\n         \"\"\"\n         Check if there are any incoming changes.\n \n+        Return True if so, False otherwise.\n+        \"\"\"\n+        if self.is_command_overridden(self.configured_commands, 'incoming'):\n+            return self._run_custom_incoming_command(\n+                self.listify(self.configured_commands['incoming'])\n+            )\n+        return self.incoming_check()\n+\n+    def incoming_check(self):\n+        \"\"\"\n+        Check if there are any incoming changes.\n+\n         Return True if so, False otherwise.\n         \"\"\"\n         return True\n+\n+    def _run_custom_sync_command(self, command):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "739a0f8cfc53ac79257a1a37bcdda10d05df3725"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1NDc3ODI2", "url": "https://github.com/oracle/opengrok/pull/3285#pullrequestreview-515477826", "createdAt": "2020-10-23T09:03:01Z", "commit": {"oid": "739a0f8cfc53ac79257a1a37bcdda10d05df3725"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOTowMzowMVrOHnFLaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOTowMzowMVrOHnFLaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc0MTM1NQ==", "bodyText": "log the actual command", "url": "https://github.com/oracle/opengrok/pull/3285#discussion_r510741355", "createdAt": "2020-10-23T09:03:01Z", "author": {"login": "vladak"}, "path": "opengrok-tools/src/main/python/opengrok_tools/scm/repository.py", "diffHunk": "@@ -75,6 +82,105 @@ def incoming(self):\n         \"\"\"\n         Check if there are any incoming changes.\n \n+        Return True if so, False otherwise.\n+        \"\"\"\n+        if self.is_command_overridden(self.configured_commands, 'incoming'):\n+            return self._run_custom_incoming_command(\n+                self.listify(self.configured_commands['incoming'])\n+            )\n+        return self.incoming_check()\n+\n+    def incoming_check(self):\n+        \"\"\"\n+        Check if there are any incoming changes.\n+\n         Return True if so, False otherwise.\n         \"\"\"\n         return True\n+\n+    def _run_custom_sync_command(self, command):\n+        \"\"\"\n+        Execute the custom sync command.\n+\n+        :param command: the command\n+        :return: 0 on success execution, 1 otherwise\n+        \"\"\"\n+        status, output = self._run_command(command)\n+        log_handler = self.logger.info if status == 0 else self.logger.warning\n+        log_handler(\"output of '{}':\".format(command))\n+        log_handler(output)\n+        return status\n+\n+    def _run_custom_incoming_command(self, command):\n+        \"\"\"\n+        Execute the custom incoming command.\n+\n+        :param command: the command\n+        :return: true when there are changes, false otherwise\n+        \"\"\"\n+        status, output = self._run_command(command)\n+        if status != 0:\n+            self.logger.error(\"output of '{}':\".format(command))\n+            self.logger.error(output)\n+            raise RepositoryException(\n+                'failed to check for incoming in repository {}'.format(self)\n+            )\n+        return len(output.strip()) > 0\n+\n+    def _run_command(self, command):\n+        \"\"\"\n+        Execute the command.\n+\n+        :param command: the command\n+        :return: tuple of (status, output)\n+                    - status: 0 on success execution, non-zero otherwise\n+                    - output: command output as string\n+        \"\"\"\n+        cmd = self.getCommand(command, work_dir=self.path,\n+                              env_vars=self.env, logger=self.logger)\n+        cmd.execute()\n+        if cmd.getretcode() != 0 or cmd.getstate() != Command.FINISHED:\n+            cmd.log_error(\"failed to perform command\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "739a0f8cfc53ac79257a1a37bcdda10d05df3725"}, "originalPosition": 100}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1NDkxNDg5", "url": "https://github.com/oracle/opengrok/pull/3285#pullrequestreview-515491489", "createdAt": "2020-10-23T09:20:57Z", "commit": {"oid": "739a0f8cfc53ac79257a1a37bcdda10d05df3725"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOToyMDo1N1rOHnF0aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOToyMDo1N1rOHnF0aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1MTg0OQ==", "bodyText": "expected first, actual second ?", "url": "https://github.com/oracle/opengrok/pull/3285#discussion_r510751849", "createdAt": "2020-10-23T09:20:57Z", "author": {"login": "vladak"}, "path": "opengrok-tools/src/test/python/test_mirror.py", "diffHunk": "@@ -376,3 +400,185 @@ def mock_get_repo_type(*args):\n             repos = get_repos_for_project(project_name, None, source_root,\n                                           ignored_repos=['.'])\n             assert len(repos) == 0\n+\n+\n+@pytest.mark.parametrize(['config', 'expected_command'], [", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "739a0f8cfc53ac79257a1a37bcdda10d05df3725"}, "originalPosition": 181}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1NDk4NzI1", "url": "https://github.com/oracle/opengrok/pull/3285#pullrequestreview-515498725", "createdAt": "2020-10-23T09:29:43Z", "commit": {"oid": "739a0f8cfc53ac79257a1a37bcdda10d05df3725"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOToyOTo0M1rOHnGJ2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOToyOTo0M1rOHnGJ2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1NzMzOA==", "bodyText": "make 'default-command' a variable ?", "url": "https://github.com/oracle/opengrok/pull/3285#discussion_r510757338", "createdAt": "2020-10-23T09:29:43Z", "author": {"login": "vladak"}, "path": "opengrok-tools/src/test/python/test_mirror.py", "diffHunk": "@@ -376,3 +400,185 @@ def mock_get_repo_type(*args):\n             repos = get_repos_for_project(project_name, None, source_root,\n                                           ignored_repos=['.'])\n             assert len(repos) == 0\n+\n+\n+@pytest.mark.parametrize(['config', 'expected_command'], [\n+    (None, 'default-command'),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "739a0f8cfc53ac79257a1a37bcdda10d05df3725"}, "originalPosition": 182}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1NTAxNjQw", "url": "https://github.com/oracle/opengrok/pull/3285#pullrequestreview-515501640", "createdAt": "2020-10-23T09:33:33Z", "commit": {"oid": "739a0f8cfc53ac79257a1a37bcdda10d05df3725"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOTozMzozM1rOHnGSmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOTozMzozM1rOHnGSmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1OTU3Ng==", "bodyText": "this should probably say that it looks up the 'command' key", "url": "https://github.com/oracle/opengrok/pull/3285#discussion_r510759576", "createdAt": "2020-10-23T09:33:33Z", "author": {"login": "vladak"}, "path": "opengrok-tools/src/main/python/opengrok_tools/scm/repository.py", "diffHunk": "@@ -75,6 +82,105 @@ def incoming(self):\n         \"\"\"\n         Check if there are any incoming changes.\n \n+        Return True if so, False otherwise.\n+        \"\"\"\n+        if self.is_command_overridden(self.configured_commands, 'incoming'):\n+            return self._run_custom_incoming_command(\n+                self.listify(self.configured_commands['incoming'])\n+            )\n+        return self.incoming_check()\n+\n+    def incoming_check(self):\n+        \"\"\"\n+        Check if there are any incoming changes.\n+\n         Return True if so, False otherwise.\n         \"\"\"\n         return True\n+\n+    def _run_custom_sync_command(self, command):\n+        \"\"\"\n+        Execute the custom sync command.\n+\n+        :param command: the command\n+        :return: 0 on success execution, 1 otherwise\n+        \"\"\"\n+        status, output = self._run_command(command)\n+        log_handler = self.logger.info if status == 0 else self.logger.warning\n+        log_handler(\"output of '{}':\".format(command))\n+        log_handler(output)\n+        return status\n+\n+    def _run_custom_incoming_command(self, command):\n+        \"\"\"\n+        Execute the custom incoming command.\n+\n+        :param command: the command\n+        :return: true when there are changes, false otherwise\n+        \"\"\"\n+        status, output = self._run_command(command)\n+        if status != 0:\n+            self.logger.error(\"output of '{}':\".format(command))\n+            self.logger.error(output)\n+            raise RepositoryException(\n+                'failed to check for incoming in repository {}'.format(self)\n+            )\n+        return len(output.strip()) > 0\n+\n+    def _run_command(self, command):\n+        \"\"\"\n+        Execute the command.\n+\n+        :param command: the command\n+        :return: tuple of (status, output)\n+                    - status: 0 on success execution, non-zero otherwise\n+                    - output: command output as string\n+        \"\"\"\n+        cmd = self.getCommand(command, work_dir=self.path,\n+                              env_vars=self.env, logger=self.logger)\n+        cmd.execute()\n+        if cmd.getretcode() != 0 or cmd.getstate() != Command.FINISHED:\n+            cmd.log_error(\"failed to perform command\")\n+            status = cmd.getretcode()\n+            if status == 0 and cmd.getstate() != Command.FINISHED:\n+                status = 1\n+            return status, '\\n'.join(filter(None, [\n+                cmd.getoutputstr(),\n+                cmd.geterroutputstr()\n+            ]))\n+        return 0, cmd.getoutputstr()\n+\n+    @staticmethod\n+    def _repository_command(configured_commands, default=lambda: None):\n+        \"\"\"\n+        Get the repository command, or use default supplier.\n+\n+        :param configured_commands: commands section from configuration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "739a0f8cfc53ac79257a1a37bcdda10d05df3725"}, "originalPosition": 115}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84821b0640433fcd053862c0c349c9c00e5170ae", "author": {"user": {"login": "tulinkry", "name": "Kry\u0161tof Tulinger"}}, "url": "https://github.com/oracle/opengrok/commit/84821b0640433fcd053862c0c349c9c00e5170ae", "committedDate": "2020-10-24T08:07:40Z", "message": "use variable for sync and incoming"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c696c01c91438d68b90b2fb070b9b06f0810f069", "author": {"user": {"login": "tulinkry", "name": "Kry\u0161tof Tulinger"}}, "url": "https://github.com/oracle/opengrok/commit/c696c01c91438d68b90b2fb070b9b06f0810f069", "committedDate": "2020-10-24T08:11:04Z", "message": "returning boolean"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82f27e91e4e30febce27ccbd81ba52f5842443ea", "author": {"user": {"login": "tulinkry", "name": "Kry\u0161tof Tulinger"}}, "url": "https://github.com/oracle/opengrok/commit/82f27e91e4e30febce27ccbd81ba52f5842443ea", "committedDate": "2020-10-24T08:12:13Z", "message": "refactor docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66adc4d45d2e286c0a74efcea0f49151bf04b5a8", "author": {"user": {"login": "tulinkry", "name": "Kry\u0161tof Tulinger"}}, "url": "https://github.com/oracle/opengrok/commit/66adc4d45d2e286c0a74efcea0f49151bf04b5a8", "committedDate": "2020-10-24T09:56:12Z", "message": "using the line-length 120"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "203c875a32ada3369efb612e86958c2709018400", "author": {"user": {"login": "tulinkry", "name": "Kry\u0161tof Tulinger"}}, "url": "https://github.com/oracle/opengrok/commit/203c875a32ada3369efb612e86958c2709018400", "committedDate": "2020-10-24T09:57:58Z", "message": "swap expected and config in tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b9c65e0ed3ef667679abb5f15e2ec9c540fec66", "author": {"user": {"login": "tulinkry", "name": "Kry\u0161tof Tulinger"}}, "url": "https://github.com/oracle/opengrok/commit/2b9c65e0ed3ef667679abb5f15e2ec9c540fec66", "committedDate": "2020-10-24T09:59:43Z", "message": "variable for DEFAULT_COMMAND"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0d62186dc06847d6edc4f228ea0bceea31a1b21e", "author": {"user": {"login": "tulinkry", "name": "Kry\u0161tof Tulinger"}}, "url": "https://github.com/oracle/opengrok/commit/0d62186dc06847d6edc4f228ea0bceea31a1b21e", "committedDate": "2020-10-24T10:03:17Z", "message": "change the docs"}, "afterCommit": {"oid": "2b9c65e0ed3ef667679abb5f15e2ec9c540fec66", "author": {"user": {"login": "tulinkry", "name": "Kry\u0161tof Tulinger"}}, "url": "https://github.com/oracle/opengrok/commit/2b9c65e0ed3ef667679abb5f15e2ec9c540fec66", "committedDate": "2020-10-24T09:59:43Z", "message": "variable for DEFAULT_COMMAND"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58be0eee4462c90980c38e4ca7ad433506548ed0", "author": {"user": {"login": "tulinkry", "name": "Kry\u0161tof Tulinger"}}, "url": "https://github.com/oracle/opengrok/commit/58be0eee4462c90980c38e4ca7ad433506548ed0", "committedDate": "2020-10-24T10:11:57Z", "message": "refactoring the code on the same line"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f20f38003ae5c399a3a4c6dde49d43d4358a924a", "author": {"user": {"login": "tulinkry", "name": "Kry\u0161tof Tulinger"}}, "url": "https://github.com/oracle/opengrok/commit/f20f38003ae5c399a3a4c6dde49d43d4358a924a", "committedDate": "2020-10-24T10:14:11Z", "message": "reusing base repository methods in git repository"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89ff2c876c11b9c154d651d381218c6a41383cf8", "author": {"user": {"login": "tulinkry", "name": "Kry\u0161tof Tulinger"}}, "url": "https://github.com/oracle/opengrok/commit/89ff2c876c11b9c154d651d381218c6a41383cf8", "committedDate": "2020-10-24T10:27:28Z", "message": "reusing base repository methods in perforce repository"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5841491a8f257b794649213d6e4f99871096779", "author": {"user": {"login": "tulinkry", "name": "Kry\u0161tof Tulinger"}}, "url": "https://github.com/oracle/opengrok/commit/b5841491a8f257b794649213d6e4f99871096779", "committedDate": "2020-10-24T10:27:28Z", "message": "reusing base repository methods in repo repository"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "664396768536c02153523c571989623d0b9feaa2", "author": {"user": {"login": "tulinkry", "name": "Kry\u0161tof Tulinger"}}, "url": "https://github.com/oracle/opengrok/commit/664396768536c02153523c571989623d0b9feaa2", "committedDate": "2020-10-24T10:27:28Z", "message": "reusing base repository methods in svn repository"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b9f29d02d983decf8ebeab6abe3258d94bc5f76", "author": {"user": {"login": "tulinkry", "name": "Kry\u0161tof Tulinger"}}, "url": "https://github.com/oracle/opengrok/commit/6b9f29d02d983decf8ebeab6abe3258d94bc5f76", "committedDate": "2020-10-24T10:27:28Z", "message": "reusing base repository methods in teamware repository"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "698dee0f6e2b32f9284cfea2dd5592b34bde48cb", "author": {"user": {"login": "tulinkry", "name": "Kry\u0161tof Tulinger"}}, "url": "https://github.com/oracle/opengrok/commit/698dee0f6e2b32f9284cfea2dd5592b34bde48cb", "committedDate": "2020-10-24T10:18:42Z", "message": "reusing base repository methods in teamware repository"}, "afterCommit": {"oid": "6b9f29d02d983decf8ebeab6abe3258d94bc5f76", "author": {"user": {"login": "tulinkry", "name": "Kry\u0161tof Tulinger"}}, "url": "https://github.com/oracle/opengrok/commit/6b9f29d02d983decf8ebeab6abe3258d94bc5f76", "committedDate": "2020-10-24T10:27:28Z", "message": "reusing base repository methods in teamware repository"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 242, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}