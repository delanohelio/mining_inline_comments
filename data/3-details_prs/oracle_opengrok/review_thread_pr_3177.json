{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzMjY4NzIx", "number": 3177, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMDowNDozMlrOEQFsww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMDowNDozMlrOEQFsww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MzA2MDUxOnYy", "diffSide": "LEFT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "isResolved": false, "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMDowNDozMlrOG0D_hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODoyMToyMlrOG1EY3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0NDU1MA==", "bodyText": "So, why is this no longer accessible ? And why do we actually need Lucene 5.0 related value ?", "url": "https://github.com/oracle/opengrok/pull/3177#discussion_r457244550", "createdAt": "2020-07-20T10:04:32Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -415,8 +417,18 @@ public void update() throws IOException {\n              * compression on the minority of data that is stored, since it\n              * should not have a detrimental impact on overall throughput.\n              */\n-            iwc.setCodec(new Lucene84Codec(\n-                Lucene50StoredFieldsFormat.Mode.BEST_COMPRESSION));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "940bc7e9a68723fd068b62677ac5a008de0a610b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM2MTkzOA==", "bodyText": "good question,\nit is still needed, I am just doing it with dynamic variable/class instead of hardcoded LuceneXXCodec", "url": "https://github.com/oracle/opengrok/pull/3177#discussion_r457361938", "createdAt": "2020-07-20T13:02:21Z", "author": {"login": "tarzanek"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -415,8 +417,18 @@ public void update() throws IOException {\n              * compression on the minority of data that is stored, since it\n              * should not have a detrimental impact on overall throughput.\n              */\n-            iwc.setCodec(new Lucene84Codec(\n-                Lucene50StoredFieldsFormat.Mode.BEST_COMPRESSION));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0NDU1MA=="}, "originalCommit": {"oid": "940bc7e9a68723fd068b62677ac5a008de0a610b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM2MjI4NQ==", "bodyText": "but I didn't find a latest way for Lucene50StoredFieldsFormat getting of compression Mode", "url": "https://github.com/oracle/opengrok/pull/3177#discussion_r457362285", "createdAt": "2020-07-20T13:02:54Z", "author": {"login": "tarzanek"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -415,8 +417,18 @@ public void update() throws IOException {\n              * compression on the minority of data that is stored, since it\n              * should not have a detrimental impact on overall throughput.\n              */\n-            iwc.setCodec(new Lucene84Codec(\n-                Lucene50StoredFieldsFormat.Mode.BEST_COMPRESSION));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0NDU1MA=="}, "originalCommit": {"oid": "940bc7e9a68723fd068b62677ac5a008de0a610b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM2ODU1Nw==", "bodyText": "I mean - could we replace with something else ?", "url": "https://github.com/oracle/opengrok/pull/3177#discussion_r457368557", "createdAt": "2020-07-20T13:11:31Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -415,8 +417,18 @@ public void update() throws IOException {\n              * compression on the minority of data that is stored, since it\n              * should not have a detrimental impact on overall throughput.\n              */\n-            iwc.setCodec(new Lucene84Codec(\n-                Lucene50StoredFieldsFormat.Mode.BEST_COMPRESSION));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0NDU1MA=="}, "originalCommit": {"oid": "940bc7e9a68723fd068b62677ac5a008de0a610b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3MDE5NA==", "bodyText": "the documentation still mentions it: https://lucene.apache.org/core/8_4_1/core/org/apache/lucene/codecs/lucene84/Lucene84Codec.html#Lucene84Codec-org.apache.lucene.codecs.lucene50.Lucene50StoredFieldsFormat.Mode-", "url": "https://github.com/oracle/opengrok/pull/3177#discussion_r457370194", "createdAt": "2020-07-20T13:13:45Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -415,8 +417,18 @@ public void update() throws IOException {\n              * compression on the minority of data that is stored, since it\n              * should not have a detrimental impact on overall throughput.\n              */\n-            iwc.setCodec(new Lucene84Codec(\n-                Lucene50StoredFieldsFormat.Mode.BEST_COMPRESSION));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0NDU1MA=="}, "originalCommit": {"oid": "940bc7e9a68723fd068b62677ac5a008de0a610b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUwMTk2Mw==", "bodyText": "Some parts of the Lucene API are stable over major releases, so Lucene50StoredFieldsFormat is still the \"latest.\"\nThere is a public constructor for the 8.6 codec, so I don't believe reflection would be necessary:\npublic Lucene86Codec(Lucene50StoredFieldsFormat.Mode mode) {", "url": "https://github.com/oracle/opengrok/pull/3177#discussion_r457501963", "createdAt": "2020-07-20T15:36:30Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -415,8 +417,18 @@ public void update() throws IOException {\n              * compression on the minority of data that is stored, since it\n              * should not have a detrimental impact on overall throughput.\n              */\n-            iwc.setCodec(new Lucene84Codec(\n-                Lucene50StoredFieldsFormat.Mode.BEST_COMPRESSION));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0NDU1MA=="}, "originalCommit": {"oid": "940bc7e9a68723fd068b62677ac5a008de0a610b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUwMzIwMA==", "bodyText": "exactly. I am still puzzled why to use reflection here.", "url": "https://github.com/oracle/opengrok/pull/3177#discussion_r457503200", "createdAt": "2020-07-20T15:37:53Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -415,8 +417,18 @@ public void update() throws IOException {\n              * compression on the minority of data that is stored, since it\n              * should not have a detrimental impact on overall throughput.\n              */\n-            iwc.setCodec(new Lucene84Codec(\n-                Lucene50StoredFieldsFormat.Mode.BEST_COMPRESSION));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0NDU1MA=="}, "originalCommit": {"oid": "940bc7e9a68723fd068b62677ac5a008de0a610b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUwMzIxOQ==", "bodyText": "... and the codec is itself public:\npublic class Lucene86Codec extends Codec {", "url": "https://github.com/oracle/opengrok/pull/3177#discussion_r457503219", "createdAt": "2020-07-20T15:37:55Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -415,8 +417,18 @@ public void update() throws IOException {\n              * compression on the minority of data that is stored, since it\n              * should not have a detrimental impact on overall throughput.\n              */\n-            iwc.setCodec(new Lucene84Codec(\n-                Lucene50StoredFieldsFormat.Mode.BEST_COMPRESSION));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0NDU1MA=="}, "originalCommit": {"oid": "940bc7e9a68723fd068b62677ac5a008de0a610b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU2ODI1Mg==", "bodyText": "the goal is to get rid of version specific hard-codes and have upgrade automatic", "url": "https://github.com/oracle/opengrok/pull/3177#discussion_r457568252", "createdAt": "2020-07-20T17:17:09Z", "author": {"login": "tarzanek"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -415,8 +417,18 @@ public void update() throws IOException {\n              * compression on the minority of data that is stored, since it\n              * should not have a detrimental impact on overall throughput.\n              */\n-            iwc.setCodec(new Lucene84Codec(\n-                Lucene50StoredFieldsFormat.Mode.BEST_COMPRESSION));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0NDU1MA=="}, "originalCommit": {"oid": "940bc7e9a68723fd068b62677ac5a008de0a610b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU5OTY1Ng==", "bodyText": "Isn't it still effectively hard-coded since it's reflecting to seek a constructor taking lucene50.Lucene50StoredFieldsFormat?\nMaybe I was thinking backward to write \"Most data in OpenGrok is indexed but not stored, so use the best compression....\" Since it's the very minority of data, BEST_SPEED sounds just fine too in hindsight. Perhaps no real need to setCodec()?", "url": "https://github.com/oracle/opengrok/pull/3177#discussion_r457599656", "createdAt": "2020-07-20T18:11:45Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -415,8 +417,18 @@ public void update() throws IOException {\n              * compression on the minority of data that is stored, since it\n              * should not have a detrimental impact on overall throughput.\n              */\n-            iwc.setCodec(new Lucene84Codec(\n-                Lucene50StoredFieldsFormat.Mode.BEST_COMPRESSION));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0NDU1MA=="}, "originalCommit": {"oid": "940bc7e9a68723fd068b62677ac5a008de0a610b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk0MzI3Ng==", "bodyText": "Right. I don't think we care too much about size reduction either.", "url": "https://github.com/oracle/opengrok/pull/3177#discussion_r457943276", "createdAt": "2020-07-21T08:56:30Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -415,8 +417,18 @@ public void update() throws IOException {\n              * compression on the minority of data that is stored, since it\n              * should not have a detrimental impact on overall throughput.\n              */\n-            iwc.setCodec(new Lucene84Codec(\n-                Lucene50StoredFieldsFormat.Mode.BEST_COMPRESSION));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0NDU1MA=="}, "originalCommit": {"oid": "940bc7e9a68723fd068b62677ac5a008de0a610b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI5OTYxMg==", "bodyText": "then this is even better, we can just drop this whole section :-)", "url": "https://github.com/oracle/opengrok/pull/3177#discussion_r458299612", "createdAt": "2020-07-21T18:21:22Z", "author": {"login": "tarzanek"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -415,8 +417,18 @@ public void update() throws IOException {\n              * compression on the minority of data that is stored, since it\n              * should not have a detrimental impact on overall throughput.\n              */\n-            iwc.setCodec(new Lucene84Codec(\n-                Lucene50StoredFieldsFormat.Mode.BEST_COMPRESSION));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0NDU1MA=="}, "originalCommit": {"oid": "940bc7e9a68723fd068b62677ac5a008de0a610b"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4917, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}