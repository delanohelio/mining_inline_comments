{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4OTkzNzgx", "number": 3011, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMDowMjo1NlrODWEogg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMTozMDoxMFrODX0OEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NDcxMTcwOnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/messages/Message.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMDowMjo1NlrOFanzXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMDowMjo1NlrOFanzXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ1OTQyMg==", "bodyText": "I think I've never seen a java method starting with capital letter", "url": "https://github.com/oracle/opengrok/pull/3011#discussion_r363459422", "createdAt": "2020-01-06T20:02:56Z", "author": {"login": "ktulinger"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/messages/Message.java", "diffHunk": "@@ -50,7 +50,44 @@\n     @NotEmpty(message = \"tags cannot be empty\")\n     private Set<String> tags = Collections.singleton(MESSAGES_MAIN_PAGE_TAG);\n \n-    private String cssClass = \"info\";\n+    public enum CssClassType {\n+        /**\n+         * Known values: SUCCESS, INFO, WARNING, ERROR.\n+         * The values are sorted according to their level. Higher numeric value of the level (i.e. the enum ordinal)\n+         * means higher priority.\n+         */\n+        SUCCESS(\"success\"), INFO(\"info\"), WARNING(\"warning\"), ERROR(\"error\");\n+\n+        private String cssClassString;\n+\n+        CssClassType(String str) {\n+            cssClassString = str;\n+        }\n+\n+        public static CssClassType StringToCssClassType(String val) throws IllegalArgumentException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38487b850f2ab98afce84d228d5aef4868228447"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NDcxMzUzOnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/messages/Message.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMDowMzo0M1rOFan0jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwOTozMDo1MlrOFa0DZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ1OTcyNw==", "bodyText": "this should be illegal argument as well no? the caller should check for null and assing default INFO", "url": "https://github.com/oracle/opengrok/pull/3011#discussion_r363459727", "createdAt": "2020-01-06T20:03:43Z", "author": {"login": "ktulinger"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/messages/Message.java", "diffHunk": "@@ -50,7 +50,44 @@\n     @NotEmpty(message = \"tags cannot be empty\")\n     private Set<String> tags = Collections.singleton(MESSAGES_MAIN_PAGE_TAG);\n \n-    private String cssClass = \"info\";\n+    public enum CssClassType {\n+        /**\n+         * Known values: SUCCESS, INFO, WARNING, ERROR.\n+         * The values are sorted according to their level. Higher numeric value of the level (i.e. the enum ordinal)\n+         * means higher priority.\n+         */\n+        SUCCESS(\"success\"), INFO(\"info\"), WARNING(\"warning\"), ERROR(\"error\");\n+\n+        private String cssClassString;\n+\n+        CssClassType(String str) {\n+            cssClassString = str;\n+        }\n+\n+        public static CssClassType StringToCssClassType(String val) throws IllegalArgumentException {\n+            if (val == null) {\n+                return INFO;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38487b850f2ab98afce84d228d5aef4868228447"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY2MDEzNA==", "bodyText": "This was probably implementation conveniencelaziness.", "url": "https://github.com/oracle/opengrok/pull/3011#discussion_r363660134", "createdAt": "2020-01-07T09:30:52Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/messages/Message.java", "diffHunk": "@@ -50,7 +50,44 @@\n     @NotEmpty(message = \"tags cannot be empty\")\n     private Set<String> tags = Collections.singleton(MESSAGES_MAIN_PAGE_TAG);\n \n-    private String cssClass = \"info\";\n+    public enum CssClassType {\n+        /**\n+         * Known values: SUCCESS, INFO, WARNING, ERROR.\n+         * The values are sorted according to their level. Higher numeric value of the level (i.e. the enum ordinal)\n+         * means higher priority.\n+         */\n+        SUCCESS(\"success\"), INFO(\"info\"), WARNING(\"warning\"), ERROR(\"error\");\n+\n+        private String cssClassString;\n+\n+        CssClassType(String str) {\n+            cssClassString = str;\n+        }\n+\n+        public static CssClassType StringToCssClassType(String val) throws IllegalArgumentException {\n+            if (val == null) {\n+                return INFO;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ1OTcyNw=="}, "originalCommit": {"oid": "38487b850f2ab98afce84d228d5aef4868228447"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NDcxNDI5OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/messages/Message.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMDowNDowNFrOFan1GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwOTo1NzozNlrOFa0u5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ1OTg2NA==", "bodyText": "there is compareTo of a Comparable interface", "url": "https://github.com/oracle/opengrok/pull/3011#discussion_r363459864", "createdAt": "2020-01-06T20:04:04Z", "author": {"login": "ktulinger"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/messages/Message.java", "diffHunk": "@@ -50,7 +50,44 @@\n     @NotEmpty(message = \"tags cannot be empty\")\n     private Set<String> tags = Collections.singleton(MESSAGES_MAIN_PAGE_TAG);\n \n-    private String cssClass = \"info\";\n+    public enum CssClassType {\n+        /**\n+         * Known values: SUCCESS, INFO, WARNING, ERROR.\n+         * The values are sorted according to their level. Higher numeric value of the level (i.e. the enum ordinal)\n+         * means higher priority.\n+         */\n+        SUCCESS(\"success\"), INFO(\"info\"), WARNING(\"warning\"), ERROR(\"error\");\n+\n+        private String cssClassString;\n+\n+        CssClassType(String str) {\n+            cssClassString = str;\n+        }\n+\n+        public static CssClassType StringToCssClassType(String val) throws IllegalArgumentException {\n+            if (val == null) {\n+                return INFO;\n+            }\n+            for (CssClassType v : CssClassType.values()) {\n+                if (v.toString().equals(val)) {\n+                    return v;\n+                }\n+            }\n+            throw new IllegalArgumentException(\"class type does not match any known value\");\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return cssClassString;\n+        }\n+\n+        public static int compare(CssClassType c1, CssClassType c2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38487b850f2ab98afce84d228d5aef4868228447"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ1OTkyMA==", "bodyText": "you should implement it", "url": "https://github.com/oracle/opengrok/pull/3011#discussion_r363459920", "createdAt": "2020-01-06T20:04:14Z", "author": {"login": "ktulinger"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/messages/Message.java", "diffHunk": "@@ -50,7 +50,44 @@\n     @NotEmpty(message = \"tags cannot be empty\")\n     private Set<String> tags = Collections.singleton(MESSAGES_MAIN_PAGE_TAG);\n \n-    private String cssClass = \"info\";\n+    public enum CssClassType {\n+        /**\n+         * Known values: SUCCESS, INFO, WARNING, ERROR.\n+         * The values are sorted according to their level. Higher numeric value of the level (i.e. the enum ordinal)\n+         * means higher priority.\n+         */\n+        SUCCESS(\"success\"), INFO(\"info\"), WARNING(\"warning\"), ERROR(\"error\");\n+\n+        private String cssClassString;\n+\n+        CssClassType(String str) {\n+            cssClassString = str;\n+        }\n+\n+        public static CssClassType StringToCssClassType(String val) throws IllegalArgumentException {\n+            if (val == null) {\n+                return INFO;\n+            }\n+            for (CssClassType v : CssClassType.values()) {\n+                if (v.toString().equals(val)) {\n+                    return v;\n+                }\n+            }\n+            throw new IllegalArgumentException(\"class type does not match any known value\");\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return cssClassString;\n+        }\n+\n+        public static int compare(CssClassType c1, CssClassType c2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ1OTg2NA=="}, "originalCommit": {"oid": "38487b850f2ab98afce84d228d5aef4868228447"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY2MzgwOA==", "bodyText": "This is needed for max() which requires Comparator rather than Comparable. However, the method needs to be static so it can be used via method reference hence the class cannot implement Comparator.", "url": "https://github.com/oracle/opengrok/pull/3011#discussion_r363663808", "createdAt": "2020-01-07T09:39:41Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/messages/Message.java", "diffHunk": "@@ -50,7 +50,44 @@\n     @NotEmpty(message = \"tags cannot be empty\")\n     private Set<String> tags = Collections.singleton(MESSAGES_MAIN_PAGE_TAG);\n \n-    private String cssClass = \"info\";\n+    public enum CssClassType {\n+        /**\n+         * Known values: SUCCESS, INFO, WARNING, ERROR.\n+         * The values are sorted according to their level. Higher numeric value of the level (i.e. the enum ordinal)\n+         * means higher priority.\n+         */\n+        SUCCESS(\"success\"), INFO(\"info\"), WARNING(\"warning\"), ERROR(\"error\");\n+\n+        private String cssClassString;\n+\n+        CssClassType(String str) {\n+            cssClassString = str;\n+        }\n+\n+        public static CssClassType StringToCssClassType(String val) throws IllegalArgumentException {\n+            if (val == null) {\n+                return INFO;\n+            }\n+            for (CssClassType v : CssClassType.values()) {\n+                if (v.toString().equals(val)) {\n+                    return v;\n+                }\n+            }\n+            throw new IllegalArgumentException(\"class type does not match any known value\");\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return cssClassString;\n+        }\n+\n+        public static int compare(CssClassType c1, CssClassType c2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ1OTg2NA=="}, "originalCommit": {"oid": "38487b850f2ab98afce84d228d5aef4868228447"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY3MTI3MQ==", "bodyText": "perhaps using Comparator as a static member is the cleanest way.", "url": "https://github.com/oracle/opengrok/pull/3011#discussion_r363671271", "createdAt": "2020-01-07T09:57:36Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/messages/Message.java", "diffHunk": "@@ -50,7 +50,44 @@\n     @NotEmpty(message = \"tags cannot be empty\")\n     private Set<String> tags = Collections.singleton(MESSAGES_MAIN_PAGE_TAG);\n \n-    private String cssClass = \"info\";\n+    public enum CssClassType {\n+        /**\n+         * Known values: SUCCESS, INFO, WARNING, ERROR.\n+         * The values are sorted according to their level. Higher numeric value of the level (i.e. the enum ordinal)\n+         * means higher priority.\n+         */\n+        SUCCESS(\"success\"), INFO(\"info\"), WARNING(\"warning\"), ERROR(\"error\");\n+\n+        private String cssClassString;\n+\n+        CssClassType(String str) {\n+            cssClassString = str;\n+        }\n+\n+        public static CssClassType StringToCssClassType(String val) throws IllegalArgumentException {\n+            if (val == null) {\n+                return INFO;\n+            }\n+            for (CssClassType v : CssClassType.values()) {\n+                if (v.toString().equals(val)) {\n+                    return v;\n+                }\n+            }\n+            throw new IllegalArgumentException(\"class type does not match any known value\");\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return cssClassString;\n+        }\n+\n+        public static int compare(CssClassType c1, CssClassType c2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ1OTg2NA=="}, "originalCommit": {"oid": "38487b850f2ab98afce84d228d5aef4868228447"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NDcyMTM2OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/messages/MessagesUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMDowNzoxM1rOFan5rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNTo1NDozNVrOFa9mhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ2MTAzNw==", "bodyText": "sounds like a job for flatMap", "url": "https://github.com/oracle/opengrok/pull/3011#discussion_r363461037", "createdAt": "2020-01-06T20:07:13Z", "author": {"login": "ktulinger"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/messages/MessagesUtils.java", "diffHunk": "@@ -230,4 +231,32 @@ private static String messagesToJson(Group group, String... additionalTags) {\n     public static String messagesToJson(Group group) {\n         return messagesToJson(group, new String[0]);\n     }\n+\n+    /**\n+     * @return name of highest cssClass of messages present in the system or null.\n+     */\n+    static String getHighestCssClassLevel(Set<MessagesContainer.AcceptedMessage> messages) {\n+        return messages.\n+                stream().\n+                map(MessagesContainer.AcceptedMessage::getCssClass).\n+                map(Message.CssClassType::StringToCssClassType).\n+                max(Message.CssClassType::compare).\n+                map(Message.CssClassType::toString).\n+                orElse(null);\n+    }\n+\n+    /**\n+     * @param tags message tags\n+     * @return name of highest cssClass of messages present in the system or null.\n+     */\n+    public static String getCssClass(String... tags) {\n+        Set<MessagesContainer.AcceptedMessage> messages = new TreeSet<>();\n+        RuntimeEnvironment env = RuntimeEnvironment.getInstance();\n+\n+        for (String tag : tags) {\n+            messages.addAll(env.getMessages(tag));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38487b850f2ab98afce84d228d5aef4868228447"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgxNjU4MA==", "bodyText": "okay, I converted the code for the sake of learning stream API :-)", "url": "https://github.com/oracle/opengrok/pull/3011#discussion_r363816580", "createdAt": "2020-01-07T15:54:35Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/messages/MessagesUtils.java", "diffHunk": "@@ -230,4 +231,32 @@ private static String messagesToJson(Group group, String... additionalTags) {\n     public static String messagesToJson(Group group) {\n         return messagesToJson(group, new String[0]);\n     }\n+\n+    /**\n+     * @return name of highest cssClass of messages present in the system or null.\n+     */\n+    static String getHighestCssClassLevel(Set<MessagesContainer.AcceptedMessage> messages) {\n+        return messages.\n+                stream().\n+                map(MessagesContainer.AcceptedMessage::getCssClass).\n+                map(Message.CssClassType::StringToCssClassType).\n+                max(Message.CssClassType::compare).\n+                map(Message.CssClassType::toString).\n+                orElse(null);\n+    }\n+\n+    /**\n+     * @param tags message tags\n+     * @return name of highest cssClass of messages present in the system or null.\n+     */\n+    public static String getCssClass(String... tags) {\n+        Set<MessagesContainer.AcceptedMessage> messages = new TreeSet<>();\n+        RuntimeEnvironment env = RuntimeEnvironment.getInstance();\n+\n+        for (String tag : tags) {\n+            messages.addAll(env.getMessages(tag));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ2MTAzNw=="}, "originalCommit": {"oid": "38487b850f2ab98afce84d228d5aef4868228447"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0Njc2NjM0OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/messages/Message.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo0NToyOFrOFa7aKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo0NToyOFrOFa7aKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc4MDY0OQ==", "bodyText": "can be final and thus with constant naming scheme - capital letters", "url": "https://github.com/oracle/opengrok/pull/3011#discussion_r363780649", "createdAt": "2020-01-07T14:45:28Z", "author": {"login": "ktulinger"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/messages/Message.java", "diffHunk": "@@ -78,9 +79,7 @@ public String toString() {\n             return cssClassString;\n         }\n \n-        public static int compare(CssClassType c1, CssClassType c2) {\n-            return Integer.compare(c1.ordinal(), c2.ordinal());\n-        }\n+        public static Comparator<CssClassType> valueComparator = Comparator.comparingInt(Enum::ordinal);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "869213561fb8dad0dfe7a3ffa21001e6154d290f"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NzQ1NzY1OnYy", "diffSide": "RIGHT", "path": "apiary.apib", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxODo0MTozM1rOFbCNmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxODo0MTozM1rOFbCNmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg5MjEyMg==", "bodyText": "use valid value", "url": "https://github.com/oracle/opengrok/pull/3011#discussion_r363892122", "createdAt": "2020-01-07T18:41:33Z", "author": {"login": "ktulinger"}, "path": "apiary.apib", "diffHunk": "@@ -84,7 +84,7 @@ see https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html#parse-java\n \n         {\n           \"tags\": [\"main\"],\n-          \"cssClass\": \"class\",\n+          \"messageLevel\": \"class\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da12b340419691fe52986c402985e2890821f4ef"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NzQ1OTU1OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/messages/Message.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxODo0MjoyMlrOFbCO4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxODo0MjoyMlrOFbCO4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg5MjQ0OQ==", "bodyText": "why not use the MessageLevel type?", "url": "https://github.com/oracle/opengrok/pull/3011#discussion_r363892449", "createdAt": "2020-01-07T18:42:22Z", "author": {"login": "ktulinger"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/messages/Message.java", "diffHunk": "@@ -100,7 +100,7 @@ private Message() { // needed for deserialization\n     public Message(\n             final String text,\n             final Set<String> tags,\n-            final String cssClass,\n+            final String messageLevel,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da12b340419691fe52986c402985e2890821f4ef"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NzQ1OTkzOnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/messages/Message.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxODo0MjozMVrOFbCPFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxODo0MjozMVrOFbCPFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg5MjUwMg==", "bodyText": "why not use the MessageLevel type?", "url": "https://github.com/oracle/opengrok/pull/3011#discussion_r363892502", "createdAt": "2020-01-07T18:42:31Z", "author": {"login": "ktulinger"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/messages/Message.java", "diffHunk": "@@ -115,16 +115,16 @@ public Message(\n \n         this.text = text;\n         this.tags = tags;\n-        this.cssClass = CssClassType.stringToCssClassType(cssClass);\n+        this.messageLevel = MessageLevel.stringToMessageLevel(messageLevel);\n         this.duration = duration;\n     }\n \n     public Set<String> getTags() {\n         return tags;\n     }\n \n-    public String getCssClass() {\n-        return cssClass.toString();\n+    public String getMessageLevel() {\n+        return messageLevel.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da12b340419691fe52986c402985e2890821f4ef"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NzQ2MDQyOnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/messages/MessagesContainer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxODo0Mjo0OVrOFbCPcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxODo0Mjo0OVrOFbCPcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg5MjU5Mg==", "bodyText": "why not use the MessageLevel type?", "url": "https://github.com/oracle/opengrok/pull/3011#discussion_r363892592", "createdAt": "2020-01-07T18:42:49Z", "author": {"login": "ktulinger"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/messages/MessagesContainer.java", "diffHunk": "@@ -250,9 +250,9 @@ public String getText() {\n             return message.getText();\n         }\n \n-        @JsonProperty(\"cssClass\")\n-        public String getCssClass() {\n-            return message.getCssClass();\n+        @JsonProperty(\"messageLevel\")\n+        public String getMessageLevel() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da12b340419691fe52986c402985e2890821f4ef"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MzY4MjU1OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/messages/Message.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNzoyMTozNFrOFb9mMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNzoyMTozNFrOFb9mMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg2NTA3NQ==", "bodyText": "can be final", "url": "https://github.com/oracle/opengrok/pull/3011#discussion_r364865075", "createdAt": "2020-01-09T17:21:34Z", "author": {"login": "ktulinger"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/messages/Message.java", "diffHunk": "@@ -50,7 +52,39 @@\n     @NotEmpty(message = \"tags cannot be empty\")\n     private Set<String> tags = Collections.singleton(MESSAGES_MAIN_PAGE_TAG);\n \n-    private String cssClass = \"info\";\n+    public enum MessageLevel {\n+        /**\n+         * Known values: {@code SUCCESS}, {@code INFO}, {@code WARNING}, {@code ERROR}.\n+         * The values are sorted according to their level. Higher numeric value of the level (i.e. the enum ordinal)\n+         * means higher priority.\n+         */\n+        SUCCESS(\"success\"), INFO(\"info\"), WARNING(\"warning\"), ERROR(\"error\");\n+\n+        private String messageLevelString;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d03a7622c3c7bc4aff8c024c2304098a726fc8"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MzY4NTY3OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/messages/Message.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNzoyMjo0MlrOFb9oOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNzoyMjo0MlrOFb9oOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg2NTU5Mw==", "bodyText": "class should start with capital letter", "url": "https://github.com/oracle/opengrok/pull/3011#discussion_r364865593", "createdAt": "2020-01-09T17:22:42Z", "author": {"login": "ktulinger"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/messages/Message.java", "diffHunk": "@@ -157,6 +191,28 @@ public int compareTo(final Message o) {\n         return tags.size() - o.tags.size();\n     }\n \n+    private static class messageLevelDeserializer extends StdDeserializer<MessageLevel> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d03a7622c3c7bc4aff8c024c2304098a726fc8"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Mjk4MTg2OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/messages/Message.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMToyNToyNFrOFdUSSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMToyNToyNFrOFdUSSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI4NTM4Nw==", "bodyText": "non blocking, I usually found these as fromString", "url": "https://github.com/oracle/opengrok/pull/3011#discussion_r366285387", "createdAt": "2020-01-14T11:25:24Z", "author": {"login": "ktulinger"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/messages/Message.java", "diffHunk": "@@ -50,7 +52,39 @@\n     @NotEmpty(message = \"tags cannot be empty\")\n     private Set<String> tags = Collections.singleton(MESSAGES_MAIN_PAGE_TAG);\n \n-    private String cssClass = \"info\";\n+    public enum MessageLevel {\n+        /**\n+         * Known values: {@code SUCCESS}, {@code INFO}, {@code WARNING}, {@code ERROR}.\n+         * The values are sorted according to their level. Higher numeric value of the level (i.e. the enum ordinal)\n+         * means higher priority.\n+         */\n+        SUCCESS(\"success\"), INFO(\"info\"), WARNING(\"warning\"), ERROR(\"error\");\n+\n+        private final String messageLevelString;\n+\n+        MessageLevel(String str) {\n+            messageLevelString = str;\n+        }\n+\n+        public static MessageLevel stringToMessageLevel(String val) throws IllegalArgumentException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa645945ab275d974ff08b85094ad0896f278e9a"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Mjk4NjMzOnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/messages/Message.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMToyNzowOFrOFdUVHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMzoxMjoxOVrOFdW83g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI4NjEwOQ==", "bodyText": "I just wonder, serializer is not needed?", "url": "https://github.com/oracle/opengrok/pull/3011#discussion_r366286109", "createdAt": "2020-01-14T11:27:08Z", "author": {"login": "ktulinger"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/messages/Message.java", "diffHunk": "@@ -157,6 +191,28 @@ public int compareTo(final Message o) {\n         return tags.size() - o.tags.size();\n     }\n \n+    private static class MessageLevelDeserializer extends StdDeserializer<MessageLevel> {\n+        private static final long serialVersionUID = 928540953227342817L;\n+\n+        MessageLevelDeserializer() {\n+            this(null);\n+        }\n+\n+        MessageLevelDeserializer(Class<?> vc) {\n+            super(vc);\n+        }\n+\n+        @Override\n+        public MessageLevel deserialize(final JsonParser parser, final DeserializationContext context)\n+                throws IOException {\n+            try {\n+                return MessageLevel.stringToMessageLevel(context.readValue(parser, String.class));\n+            } catch (DateTimeParseException e) {\n+                throw new IOException(e);\n+            }\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa645945ab275d974ff08b85094ad0896f278e9a"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMyOTA1NA==", "bodyText": "nope, it works out of the box.", "url": "https://github.com/oracle/opengrok/pull/3011#discussion_r366329054", "createdAt": "2020-01-14T13:12:19Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/messages/Message.java", "diffHunk": "@@ -157,6 +191,28 @@ public int compareTo(final Message o) {\n         return tags.size() - o.tags.size();\n     }\n \n+    private static class MessageLevelDeserializer extends StdDeserializer<MessageLevel> {\n+        private static final long serialVersionUID = 928540953227342817L;\n+\n+        MessageLevelDeserializer() {\n+            this(null);\n+        }\n+\n+        MessageLevelDeserializer(Class<?> vc) {\n+            super(vc);\n+        }\n+\n+        @Override\n+        public MessageLevel deserialize(final JsonParser parser, final DeserializationContext context)\n+                throws IOException {\n+            try {\n+                return MessageLevel.stringToMessageLevel(context.readValue(parser, String.class));\n+            } catch (DateTimeParseException e) {\n+                throw new IOException(e);\n+            }\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI4NjEwOQ=="}, "originalCommit": {"oid": "aa645945ab275d974ff08b85094ad0896f278e9a"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Mjk4OTg4OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/messages/MessagesUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMToyODozMVrOFdUXMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMToyODozMVrOFdUXMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI4NjY0MQ==", "bodyText": "I'd qualify here with the class name so the name does not seem a little out of context.", "url": "https://github.com/oracle/opengrok/pull/3011#discussion_r366286641", "createdAt": "2020-01-14T11:28:31Z", "author": {"login": "ktulinger"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/messages/MessagesUtils.java", "diffHunk": "@@ -230,4 +234,32 @@ private static String messagesToJson(Group group, String... additionalTags) {\n     public static String messagesToJson(Group group) {\n         return messagesToJson(group, new String[0]);\n     }\n+\n+    /**\n+     * @return name of highest cssClass of messages present in the system or null.\n+     */\n+    static String getHighestMessageLevel(Collection<MessagesContainer.AcceptedMessage> messages) {\n+        return messages.\n+                stream().\n+                map(MessagesContainer.AcceptedMessage::getMessageLevel).\n+                max(VALUE_COMPARATOR).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa645945ab275d974ff08b85094ad0896f278e9a"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Mjk5NDEwOnYy", "diffSide": "RIGHT", "path": "opengrok-web/src/main/webapp/default/style.css", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMTozMDoxMFrOFdUZoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxMzo1MDo0NFrOFd42nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI4NzI2NQ==", "bodyText": "a question here is if you want to restrict these classes to be used only for important-note or just without any restriction (one can use it later for completely unrelated styling with the given colour).", "url": "https://github.com/oracle/opengrok/pull/3011#discussion_r366287265", "createdAt": "2020-01-14T11:30:10Z", "author": {"login": "ktulinger"}, "path": "opengrok-web/src/main/webapp/default/style.css", "diffHunk": "@@ -1249,6 +1236,34 @@ h6.message-group-caption {\n     line-height: 1.3;\n }\n \n+.important-note {\n+    text-align: center;\n+    display: inline-block;\n+    max-height: 100%;\n+}\n+\n+.note-success {\n+    background-color: #3c763d;\n+}\n+\n+.note-info {\n+    background-color: #31708f;\n+}\n+\n+.note-warning {\n+    background-color: #8a6d3b;\n+}\n+\n+.note-error {\n+    background-color: #a94442;\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa645945ab275d974ff08b85094ad0896f278e9a"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMzOTI4Nw==", "bodyText": "Is there a way how to elegantly limit the note-* styles for both important-note and .important-note.important-note-rounded. The thing is, .important-note is used both with and without important-note-rounded.", "url": "https://github.com/oracle/opengrok/pull/3011#discussion_r366339287", "createdAt": "2020-01-14T13:34:06Z", "author": {"login": "vladak"}, "path": "opengrok-web/src/main/webapp/default/style.css", "diffHunk": "@@ -1249,6 +1236,34 @@ h6.message-group-caption {\n     line-height: 1.3;\n }\n \n+.important-note {\n+    text-align: center;\n+    display: inline-block;\n+    max-height: 100%;\n+}\n+\n+.note-success {\n+    background-color: #3c763d;\n+}\n+\n+.note-info {\n+    background-color: #31708f;\n+}\n+\n+.note-warning {\n+    background-color: #8a6d3b;\n+}\n+\n+.note-error {\n+    background-color: #a94442;\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI4NzI2NQ=="}, "originalCommit": {"oid": "aa645945ab275d974ff08b85094ad0896f278e9a"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMzOTk2Mw==", "bodyText": "Initially, I wanted to unite the note-* styles with .message-group-item.* styles so the color definitions are defined just once however the latter use color instead of backgound-color.", "url": "https://github.com/oracle/opengrok/pull/3011#discussion_r366339963", "createdAt": "2020-01-14T13:35:34Z", "author": {"login": "vladak"}, "path": "opengrok-web/src/main/webapp/default/style.css", "diffHunk": "@@ -1249,6 +1236,34 @@ h6.message-group-caption {\n     line-height: 1.3;\n }\n \n+.important-note {\n+    text-align: center;\n+    display: inline-block;\n+    max-height: 100%;\n+}\n+\n+.note-success {\n+    background-color: #3c763d;\n+}\n+\n+.note-info {\n+    background-color: #31708f;\n+}\n+\n+.note-warning {\n+    background-color: #8a6d3b;\n+}\n+\n+.note-error {\n+    background-color: #a94442;\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI4NzI2NQ=="}, "originalCommit": {"oid": "aa645945ab275d974ff08b85094ad0896f278e9a"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM5Mzk0Mg==", "bodyText": "By elegant I mean something like this:\n.important-note {\n    text-align: center;\n    display: inline-block;\n    max-height: 100%;\n}\n\n.important-note.note-success {\n    background-color: #3c763d;\n}\n\n... // more .note styles\nand then it would be nice if I can say something like this:\n.important-note.note-*.important-note-rounded {\n    border-radius: 50%;\n    max-width: 100%;\n    min-width: 20px;\n}\nhowever I am not sure this is possible in CSS.", "url": "https://github.com/oracle/opengrok/pull/3011#discussion_r366393942", "createdAt": "2020-01-14T15:11:53Z", "author": {"login": "vladak"}, "path": "opengrok-web/src/main/webapp/default/style.css", "diffHunk": "@@ -1249,6 +1236,34 @@ h6.message-group-caption {\n     line-height: 1.3;\n }\n \n+.important-note {\n+    text-align: center;\n+    display: inline-block;\n+    max-height: 100%;\n+}\n+\n+.note-success {\n+    background-color: #3c763d;\n+}\n+\n+.note-info {\n+    background-color: #31708f;\n+}\n+\n+.note-warning {\n+    background-color: #8a6d3b;\n+}\n+\n+.note-error {\n+    background-color: #a94442;\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI4NzI2NQ=="}, "originalCommit": {"oid": "aa645945ab275d974ff08b85094ad0896f278e9a"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg4NDUwOA==", "bodyText": "Follow-up on our Slack discussion: it turns out that I misread the CSS selectors guide - the .class1.class2 selector is not strictly hierarchical so there can be style that can only be used with important-note while being also usable with both important-note.note and important-note-rounded.", "url": "https://github.com/oracle/opengrok/pull/3011#discussion_r366884508", "createdAt": "2020-01-15T13:50:44Z", "author": {"login": "vladak"}, "path": "opengrok-web/src/main/webapp/default/style.css", "diffHunk": "@@ -1249,6 +1236,34 @@ h6.message-group-caption {\n     line-height: 1.3;\n }\n \n+.important-note {\n+    text-align: center;\n+    display: inline-block;\n+    max-height: 100%;\n+}\n+\n+.note-success {\n+    background-color: #3c763d;\n+}\n+\n+.note-info {\n+    background-color: #31708f;\n+}\n+\n+.note-warning {\n+    background-color: #8a6d3b;\n+}\n+\n+.note-error {\n+    background-color: #a94442;\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI4NzI2NQ=="}, "originalCommit": {"oid": "aa645945ab275d974ff08b85094ad0896f278e9a"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 165, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}