{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4OTM1ODY3", "number": 3050, "title": "file content/genre API", "bodyText": "This change implements API endpoints for retrieving file content and genre. There is no paging support.\nI refactored the authorization introduced for the history API endpoint so that it can be used via annotations.\nDemo:\n$ curl -D headers -s -X GET 'http://localhost:8080/source/api/v1/file/content?path=opengrok/dev/checkstyle/fileheader.txt' | jq\n[\n  {\n    \"line\": \"/*\",\n    \"number\": 1\n  },\n  {\n    \"line\": \" * CDDL HEADER START\",\n    \"number\": 2\n  },\n  {\n    \"line\": \" *\",\n    \"number\": 3\n  },\n  {\n    \"line\": \" * The contents of this file are subject to the terms of the\",\n    \"number\": 4\n  },\n  {\n    \"line\": \" * Common Development and Distribution License (the \\\"License\\\").\",\n    \"number\": 5\n  },\n  {\n    \"line\": \" * You may not use this file except in compliance with the License.\",\n    \"number\": 6\n  },\n  {\n    \"line\": \" *\",\n    \"number\": 7\n  },\n  {\n    \"line\": \" * See LICENSE.txt included in this distribution for the specific\",\n    \"number\": 8\n  },\n  {\n    \"line\": \" * language governing permissions and limitations under the License.\",\n    \"number\": 9\n  },\n  {\n    \"line\": \" *\",\n    \"number\": 10\n  },\n  {\n    \"line\": \" * When distributing Covered Code, include this CDDL HEADER in each\",\n    \"number\": 11\n  },\n  {\n    \"line\": \" * file and include the License file at LICENSE.txt.\",\n    \"number\": 12\n  },\n  {\n    \"line\": \" * If applicable, add the following below this CDDL HEADER, with the\",\n    \"number\": 13\n  },\n  {\n    \"line\": \" * fields enclosed by brackets \\\"[]\\\" replaced with your own identifying\",\n    \"number\": 14\n  },\n  {\n    \"line\": \" * information: Portions Copyright [yyyy] [name of copyright owner]\",\n    \"number\": 15\n  },\n  {\n    \"line\": \" *\",\n    \"number\": 16\n  },\n  {\n    \"line\": \" * CDDL HEADER END\",\n    \"number\": 17\n  },\n  {\n    \"line\": \" */\",\n    \"number\": 18\n  },\n  {\n    \"line\": \"\",\n    \"number\": 19\n  }\n]\n$ curl -D headers -s -X GET 'http://localhost:8080/source/api/v1/file/genre?path=opengrok/dev/checkstyle/fileheader.txt'\nPLAIN\n$ curl --head -s -X GET 'http://localhost:8080/source/api/v1/file/content?path=opengrok/testdata/sources/java/main.jar' \nHTTP/1.1 406 \nSet-Cookie: JSESSIONID=A9E0888D024C309CBAD44C507A7BBAB0; Path=/source; HttpOnly\nContent-Type: text/html;charset=utf-8\nContent-Language: en\nContent-Length: 1212\nDate: Mon, 24 Feb 2020 11:17:16 GMT\n\n$ curl -s -X GET 'http://localhost:8080/source/api/v1/file/genre?path=opengrok/testdata/sources/java/main.jar' \nXREFABLE", "createdAt": "2020-02-24T11:17:48Z", "url": "https://github.com/oracle/opengrok/pull/3050", "merged": true, "mergeCommit": {"oid": "d7648fcc198f443679eeca5076358753b7641a5a"}, "closed": true, "closedAt": "2020-02-26T13:49:09Z", "author": {"login": "vladak"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGNr_zgH2gAyMzc4OTM1ODY3OmUwOTM4ZmUxMTc4Nzc2NDVkNDhiY2I2ZmQ0YTM1ODY3ZGRhOGI5OWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIHBZKAH2gAyMzc4OTM1ODY3OmY1YTQ3NGJlOGJhOGQ4MWQ0MzFjZDk5YTFmNzRjNDc2NjAyZmJmYWM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e0938fe117877645d48bcb6fd4a35867dda8b99d", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/e0938fe117877645d48bcb6fd4a35867dda8b99d", "committedDate": "2020-02-20T16:26:27Z", "message": "refactor path authnz filter to utility class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6afb0a92d8b7b8f47cdbf8ab1f146148813a57d8", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/6afb0a92d8b7b8f47cdbf8ab1f146148813a57d8", "committedDate": "2020-02-24T11:12:29Z", "message": "first stab at file content API endpoint\n\n- no line number support\n\nfixes #3048"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2155b84338cb2be9f4a47ed4d9d0d0a630e3e966", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/2155b84338cb2be9f4a47ed4d9d0d0a630e3e966", "committedDate": "2020-02-24T11:13:19Z", "message": "TODO: filter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74a3f986d30b78ac4fb05ce5e48ee84608452402", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/74a3f986d30b78ac4fb05ce5e48ee84608452402", "committedDate": "2020-02-24T11:13:19Z", "message": "add line numbers\n\n- crude version using class variable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecd22ecd5008bc058e37d4159d345e49ad2e9cbe", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/ecd22ecd5008bc058e37d4159d345e49ad2e9cbe", "committedDate": "2020-02-24T11:13:19Z", "message": "return content for text files only"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6990c0e710f469cd3e7c55ec8a440450126a3c7d", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/6990c0e710f469cd3e7c55ec8a440450126a3c7d", "committedDate": "2020-02-24T11:13:19Z", "message": "- refactor path authorization to PathAuthorizationFilter\n- add endpoint for genre\n- rename FileContentController to FileController"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8d0acc67f1b064a6995b95cd7e24050be6153f1", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/c8d0acc67f1b064a6995b95cd7e24050be6153f1", "committedDate": "2020-02-24T11:13:19Z", "message": "enforce path presence"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "feaa479172b2539e99fe1a3c19b7a00e1a2ed8bb", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/feaa479172b2539e99fe1a3c19b7a00e1a2ed8bb", "committedDate": "2020-02-24T11:13:19Z", "message": "add tests, convert to traditional loop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdbc7250072fd02dbd2fb596996867ea59f17b5c", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/fdbc7250072fd02dbd2fb596996867ea59f17b5c", "committedDate": "2020-02-24T11:13:19Z", "message": "remove not needed imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1912189b7d811769e704e1231eb6bb914179c2bd", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/1912189b7d811769e704e1231eb6bb914179c2bd", "committedDate": "2020-02-24T11:13:19Z", "message": "use PATH_PARAM in log message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09214fafdffb12cc226e243fdb108132c99f36dc", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/09214fafdffb12cc226e243fdb108132c99f36dc", "committedDate": "2020-02-24T11:13:19Z", "message": "use T field to ensure plaintext"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2243a325f7b157a3b8a1c37d82e4bf98c9cb4d8", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/a2243a325f7b157a3b8a1c37d82e4bf98c9cb4d8", "committedDate": "2020-02-24T11:13:19Z", "message": "fix javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "738c38e6453a0daca5a41d26e8f2bc7b3fbea8de", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/738c38e6453a0daca5a41d26e8f2bc7b3fbea8de", "committedDate": "2020-02-24T11:13:19Z", "message": "fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d5b4cdb60c7b4fcd2d92c9ab4babec4dde22670", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/9d5b4cdb60c7b4fcd2d92c9ab4babec4dde22670", "committedDate": "2020-02-24T11:13:19Z", "message": "remove unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cda71409400f33762657d1708b8256a9c3e37f2f", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/cda71409400f33762657d1708b8256a9c3e37f2f", "committedDate": "2020-02-24T11:13:19Z", "message": "use partial indexing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a72b9bf72bd7c5f296ed6f859f14b06c11550696", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/a72b9bf72bd7c5f296ed6f859f14b06c11550696", "committedDate": "2020-02-24T11:19:14Z", "message": "add detail"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1382ace0921270232a54f02e077923c52e9d1b92", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/1382ace0921270232a54f02e077923c52e9d1b92", "committedDate": "2020-02-24T12:14:57Z", "message": "fix style"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNzYyNzkw", "url": "https://github.com/oracle/opengrok/pull/3050#pullrequestreview-363762790", "createdAt": "2020-02-24T23:00:19Z", "commit": {"oid": "1382ace0921270232a54f02e077923c52e9d1b92"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMzowMDoxOVrOFty-_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMzoxOToxNVrOFtzZ1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2NTU2NA==", "bodyText": "Recommend transposing to avoid possible NPE:\n!AbstractAnalyzer.Genre.PLAIN.typeName().equals(fileType)", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r383565564", "createdAt": "2020-02-24T23:00:19Z", "author": {"login": "idodeclare"}, "path": "opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/FileController.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.web.api.v1.controller;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.apache.lucene.document.Document;\n+import org.apache.lucene.queryparser.classic.ParseException;\n+import org.opengrok.indexer.analysis.AbstractAnalyzer;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.search.QueryBuilder;\n+import org.opengrok.web.api.v1.filter.CorsEnable;\n+import org.opengrok.web.api.v1.filter.PathAuthorized;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.opengrok.indexer.index.IndexDatabase.getDocument;\n+\n+@Path(FileController.PATH)\n+public class FileController {\n+\n+    public static final String PATH = \"/file\";\n+\n+    private static final RuntimeEnvironment env = RuntimeEnvironment.getInstance();\n+\n+    private ArrayList<String> lines = new ArrayList<>();\n+\n+    static class LineDTO {\n+        @JsonProperty\n+        private String line;\n+        @JsonProperty\n+        private int number;\n+\n+        // for testing\n+        LineDTO() {\n+        }\n+\n+        LineDTO(String line, int num) {\n+            this.line = line;\n+            this.number = num;\n+        }\n+\n+        public String getLine() {\n+            return this.line;\n+        }\n+\n+        public int getNumber() {\n+            return this.number;\n+        }\n+    }\n+\n+    private static File getFile(String path, HttpServletResponse response) throws IOException {\n+        if (path == null) {\n+            if (response != null) {\n+                response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE, \"Missing path parameter\");\n+            }\n+            return null;\n+        }\n+\n+        File file = new File(env.getSourceRootFile(), path);\n+        if (!file.isFile()) {\n+            if (response != null) {\n+                response.sendError(HttpServletResponse.SC_NOT_FOUND, \"File not found\");\n+            }\n+            return null;\n+        }\n+\n+        return file;\n+    }\n+\n+    @GET\n+    @CorsEnable\n+    @PathAuthorized\n+    @Path(\"/content\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Object getContent(@Context HttpServletRequest request,\n+                             @Context HttpServletResponse response,\n+                             @QueryParam(\"path\") final String path) throws IOException, ParseException {\n+\n+        File file = getFile(path, response);\n+        if (file == null) {\n+            // error already set in the response\n+            return null;\n+        }\n+\n+        Document doc;\n+        if ((doc = getDocument(file)) == null) {\n+            response.sendError(HttpServletResponse.SC_NOT_FOUND, \"Cannot get document for file\");\n+            return null;\n+        }\n+\n+        String fileType = doc.get(QueryBuilder.T);\n+        if (!fileType.equals(AbstractAnalyzer.Genre.PLAIN.typeName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1382ace0921270232a54f02e077923c52e9d1b92"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2NjE1Mg==", "bodyText": "Line 121 reads \"Cannot get document for file\"", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r383566152", "createdAt": "2020-02-24T23:01:44Z", "author": {"login": "idodeclare"}, "path": "opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/FileController.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.web.api.v1.controller;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.apache.lucene.document.Document;\n+import org.apache.lucene.queryparser.classic.ParseException;\n+import org.opengrok.indexer.analysis.AbstractAnalyzer;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.search.QueryBuilder;\n+import org.opengrok.web.api.v1.filter.CorsEnable;\n+import org.opengrok.web.api.v1.filter.PathAuthorized;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.opengrok.indexer.index.IndexDatabase.getDocument;\n+\n+@Path(FileController.PATH)\n+public class FileController {\n+\n+    public static final String PATH = \"/file\";\n+\n+    private static final RuntimeEnvironment env = RuntimeEnvironment.getInstance();\n+\n+    private ArrayList<String> lines = new ArrayList<>();\n+\n+    static class LineDTO {\n+        @JsonProperty\n+        private String line;\n+        @JsonProperty\n+        private int number;\n+\n+        // for testing\n+        LineDTO() {\n+        }\n+\n+        LineDTO(String line, int num) {\n+            this.line = line;\n+            this.number = num;\n+        }\n+\n+        public String getLine() {\n+            return this.line;\n+        }\n+\n+        public int getNumber() {\n+            return this.number;\n+        }\n+    }\n+\n+    private static File getFile(String path, HttpServletResponse response) throws IOException {\n+        if (path == null) {\n+            if (response != null) {\n+                response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE, \"Missing path parameter\");\n+            }\n+            return null;\n+        }\n+\n+        File file = new File(env.getSourceRootFile(), path);\n+        if (!file.isFile()) {\n+            if (response != null) {\n+                response.sendError(HttpServletResponse.SC_NOT_FOUND, \"File not found\");\n+            }\n+            return null;\n+        }\n+\n+        return file;\n+    }\n+\n+    @GET\n+    @CorsEnable\n+    @PathAuthorized\n+    @Path(\"/content\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Object getContent(@Context HttpServletRequest request,\n+                             @Context HttpServletResponse response,\n+                             @QueryParam(\"path\") final String path) throws IOException, ParseException {\n+\n+        File file = getFile(path, response);\n+        if (file == null) {\n+            // error already set in the response\n+            return null;\n+        }\n+\n+        Document doc;\n+        if ((doc = getDocument(file)) == null) {\n+            response.sendError(HttpServletResponse.SC_NOT_FOUND, \"Cannot get document for file\");\n+            return null;\n+        }\n+\n+        String fileType = doc.get(QueryBuilder.T);\n+        if (!fileType.equals(AbstractAnalyzer.Genre.PLAIN.typeName())) {\n+            response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE, \"Not a text file\");\n+            return null;\n+        }\n+\n+        try (BufferedReader br = new BufferedReader(new FileReader(file))) {\n+            String line;\n+            while ((line = br.readLine()) != null) {\n+                lines.add(line);\n+            }\n+        }\n+\n+        int count = 1;\n+        List<LineDTO> linesDTO = new ArrayList<>();\n+        for (String line: lines) {\n+            LineDTO l = new LineDTO(line, count++);\n+            linesDTO.add(l);\n+        }\n+        return linesDTO;\n+    }\n+\n+    @GET\n+    @CorsEnable\n+    @PathAuthorized\n+    @Path(\"/genre\")\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String getGenre(@Context HttpServletRequest request,\n+                           @Context HttpServletResponse response,\n+                           @QueryParam(\"path\") final String path) throws IOException, ParseException {\n+\n+        File file = getFile(path, response);\n+        if (file == null) {\n+            return null;\n+        }\n+\n+        Document doc;\n+        if ((doc = getDocument(file)) == null) {\n+            response.sendError(HttpServletResponse.SC_NOT_FOUND, \"Cannot find document for file\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1382ace0921270232a54f02e077923c52e9d1b92"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2NzAwMg==", "bodyText": "Maybe copy comment from line 115 that was helpful there?", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r383567002", "createdAt": "2020-02-24T23:03:56Z", "author": {"login": "idodeclare"}, "path": "opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/FileController.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.web.api.v1.controller;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.apache.lucene.document.Document;\n+import org.apache.lucene.queryparser.classic.ParseException;\n+import org.opengrok.indexer.analysis.AbstractAnalyzer;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.search.QueryBuilder;\n+import org.opengrok.web.api.v1.filter.CorsEnable;\n+import org.opengrok.web.api.v1.filter.PathAuthorized;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.opengrok.indexer.index.IndexDatabase.getDocument;\n+\n+@Path(FileController.PATH)\n+public class FileController {\n+\n+    public static final String PATH = \"/file\";\n+\n+    private static final RuntimeEnvironment env = RuntimeEnvironment.getInstance();\n+\n+    private ArrayList<String> lines = new ArrayList<>();\n+\n+    static class LineDTO {\n+        @JsonProperty\n+        private String line;\n+        @JsonProperty\n+        private int number;\n+\n+        // for testing\n+        LineDTO() {\n+        }\n+\n+        LineDTO(String line, int num) {\n+            this.line = line;\n+            this.number = num;\n+        }\n+\n+        public String getLine() {\n+            return this.line;\n+        }\n+\n+        public int getNumber() {\n+            return this.number;\n+        }\n+    }\n+\n+    private static File getFile(String path, HttpServletResponse response) throws IOException {\n+        if (path == null) {\n+            if (response != null) {\n+                response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE, \"Missing path parameter\");\n+            }\n+            return null;\n+        }\n+\n+        File file = new File(env.getSourceRootFile(), path);\n+        if (!file.isFile()) {\n+            if (response != null) {\n+                response.sendError(HttpServletResponse.SC_NOT_FOUND, \"File not found\");\n+            }\n+            return null;\n+        }\n+\n+        return file;\n+    }\n+\n+    @GET\n+    @CorsEnable\n+    @PathAuthorized\n+    @Path(\"/content\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Object getContent(@Context HttpServletRequest request,\n+                             @Context HttpServletResponse response,\n+                             @QueryParam(\"path\") final String path) throws IOException, ParseException {\n+\n+        File file = getFile(path, response);\n+        if (file == null) {\n+            // error already set in the response\n+            return null;\n+        }\n+\n+        Document doc;\n+        if ((doc = getDocument(file)) == null) {\n+            response.sendError(HttpServletResponse.SC_NOT_FOUND, \"Cannot get document for file\");\n+            return null;\n+        }\n+\n+        String fileType = doc.get(QueryBuilder.T);\n+        if (!fileType.equals(AbstractAnalyzer.Genre.PLAIN.typeName())) {\n+            response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE, \"Not a text file\");\n+            return null;\n+        }\n+\n+        try (BufferedReader br = new BufferedReader(new FileReader(file))) {\n+            String line;\n+            while ((line = br.readLine()) != null) {\n+                lines.add(line);\n+            }\n+        }\n+\n+        int count = 1;\n+        List<LineDTO> linesDTO = new ArrayList<>();\n+        for (String line: lines) {\n+            LineDTO l = new LineDTO(line, count++);\n+            linesDTO.add(l);\n+        }\n+        return linesDTO;\n+    }\n+\n+    @GET\n+    @CorsEnable\n+    @PathAuthorized\n+    @Path(\"/genre\")\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String getGenre(@Context HttpServletRequest request,\n+                           @Context HttpServletResponse response,\n+                           @QueryParam(\"path\") final String path) throws IOException, ParseException {\n+\n+        File file = getFile(path, response);\n+        if (file == null) {\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1382ace0921270232a54f02e077923c52e9d1b92"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2NzU3NQ==", "bodyText": "Possibly AbstractAnalyzer.Genre.get(doc.get(QueryBuilder.T)) could be null, leading to NPE on toString()", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r383567575", "createdAt": "2020-02-24T23:05:28Z", "author": {"login": "idodeclare"}, "path": "opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/FileController.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.web.api.v1.controller;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.apache.lucene.document.Document;\n+import org.apache.lucene.queryparser.classic.ParseException;\n+import org.opengrok.indexer.analysis.AbstractAnalyzer;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.search.QueryBuilder;\n+import org.opengrok.web.api.v1.filter.CorsEnable;\n+import org.opengrok.web.api.v1.filter.PathAuthorized;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.opengrok.indexer.index.IndexDatabase.getDocument;\n+\n+@Path(FileController.PATH)\n+public class FileController {\n+\n+    public static final String PATH = \"/file\";\n+\n+    private static final RuntimeEnvironment env = RuntimeEnvironment.getInstance();\n+\n+    private ArrayList<String> lines = new ArrayList<>();\n+\n+    static class LineDTO {\n+        @JsonProperty\n+        private String line;\n+        @JsonProperty\n+        private int number;\n+\n+        // for testing\n+        LineDTO() {\n+        }\n+\n+        LineDTO(String line, int num) {\n+            this.line = line;\n+            this.number = num;\n+        }\n+\n+        public String getLine() {\n+            return this.line;\n+        }\n+\n+        public int getNumber() {\n+            return this.number;\n+        }\n+    }\n+\n+    private static File getFile(String path, HttpServletResponse response) throws IOException {\n+        if (path == null) {\n+            if (response != null) {\n+                response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE, \"Missing path parameter\");\n+            }\n+            return null;\n+        }\n+\n+        File file = new File(env.getSourceRootFile(), path);\n+        if (!file.isFile()) {\n+            if (response != null) {\n+                response.sendError(HttpServletResponse.SC_NOT_FOUND, \"File not found\");\n+            }\n+            return null;\n+        }\n+\n+        return file;\n+    }\n+\n+    @GET\n+    @CorsEnable\n+    @PathAuthorized\n+    @Path(\"/content\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Object getContent(@Context HttpServletRequest request,\n+                             @Context HttpServletResponse response,\n+                             @QueryParam(\"path\") final String path) throws IOException, ParseException {\n+\n+        File file = getFile(path, response);\n+        if (file == null) {\n+            // error already set in the response\n+            return null;\n+        }\n+\n+        Document doc;\n+        if ((doc = getDocument(file)) == null) {\n+            response.sendError(HttpServletResponse.SC_NOT_FOUND, \"Cannot get document for file\");\n+            return null;\n+        }\n+\n+        String fileType = doc.get(QueryBuilder.T);\n+        if (!fileType.equals(AbstractAnalyzer.Genre.PLAIN.typeName())) {\n+            response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE, \"Not a text file\");\n+            return null;\n+        }\n+\n+        try (BufferedReader br = new BufferedReader(new FileReader(file))) {\n+            String line;\n+            while ((line = br.readLine()) != null) {\n+                lines.add(line);\n+            }\n+        }\n+\n+        int count = 1;\n+        List<LineDTO> linesDTO = new ArrayList<>();\n+        for (String line: lines) {\n+            LineDTO l = new LineDTO(line, count++);\n+            linesDTO.add(l);\n+        }\n+        return linesDTO;\n+    }\n+\n+    @GET\n+    @CorsEnable\n+    @PathAuthorized\n+    @Path(\"/genre\")\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String getGenre(@Context HttpServletRequest request,\n+                           @Context HttpServletResponse response,\n+                           @QueryParam(\"path\") final String path) throws IOException, ParseException {\n+\n+        File file = getFile(path, response);\n+        if (file == null) {\n+            return null;\n+        }\n+\n+        Document doc;\n+        if ((doc = getDocument(file)) == null) {\n+            response.sendError(HttpServletResponse.SC_NOT_FOUND, \"Cannot find document for file\");\n+            return null;\n+        }\n+\n+        return AbstractAnalyzer.Genre.get(doc.get(QueryBuilder.T)).toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1382ace0921270232a54f02e077923c52e9d1b92"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2OTg2Ng==", "bodyText": "Comment above seems inapt with this refactoring", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r383569866", "createdAt": "2020-02-24T23:11:59Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -1588,6 +1611,7 @@ public static Definitions getDefinitions(File file)\n             return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1382ace0921270232a54f02e077923c52e9d1b92"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU3MDE0MQ==", "bodyText": "Maybe move the return as the last statement of the try, so this declaration and assignment can also be moved together?", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r383570141", "createdAt": "2020-02-24T23:12:46Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -1588,6 +1611,7 @@ public static Definitions getDefinitions(File file)\n             return null;\n         }\n \n+        Document doc;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1382ace0921270232a54f02e077923c52e9d1b92"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU3MDI5Nw==", "bodyText": "Comment seems inapt with this refactoring", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r383570297", "createdAt": "2020-02-24T23:13:15Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -1596,22 +1620,18 @@ public static Definitions getDefinitions(File file)\n                 // No hits, no definitions...\n                 return null;\n             }\n-            Document doc = searcher.doc(top.scoreDocs[0].doc);\n+            doc = searcher.doc(top.scoreDocs[0].doc);\n             String foundPath = doc.get(QueryBuilder.PATH);\n \n             // Only use the definitions if we found an exact match.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1382ace0921270232a54f02e077923c52e9d1b92"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU3MDMzMg==", "bodyText": "Comment seems inapt with this refactoring", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r383570332", "createdAt": "2020-02-24T23:13:23Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -1596,22 +1620,18 @@ public static Definitions getDefinitions(File file)\n                 // No hits, no definitions...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1382ace0921270232a54f02e077923c52e9d1b92"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU3MTM2MQ==", "bodyText": "Any benefit to defining this here when it's only used by /content and not by /genre?", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r383571361", "createdAt": "2020-02-24T23:16:16Z", "author": {"login": "idodeclare"}, "path": "opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/FileController.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.web.api.v1.controller;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.apache.lucene.document.Document;\n+import org.apache.lucene.queryparser.classic.ParseException;\n+import org.opengrok.indexer.analysis.AbstractAnalyzer;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.search.QueryBuilder;\n+import org.opengrok.web.api.v1.filter.CorsEnable;\n+import org.opengrok.web.api.v1.filter.PathAuthorized;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.opengrok.indexer.index.IndexDatabase.getDocument;\n+\n+@Path(FileController.PATH)\n+public class FileController {\n+\n+    public static final String PATH = \"/file\";\n+\n+    private static final RuntimeEnvironment env = RuntimeEnvironment.getInstance();\n+\n+    private ArrayList<String> lines = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1382ace0921270232a54f02e077923c52e9d1b92"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU3MjQzNg==", "bodyText": "Any benefit to testing conditions that result in 400s or 404s?", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r383572436", "createdAt": "2020-02-24T23:19:15Z", "author": {"login": "idodeclare"}, "path": "opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/FileControllerTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package org.opengrok.web.api.v1.controller;\n+\n+import org.glassfish.jersey.server.ResourceConfig;\n+import org.glassfish.jersey.test.JerseyTest;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.history.HistoryGuru;\n+import org.opengrok.indexer.history.RepositoryFactory;\n+import org.opengrok.indexer.index.Indexer;\n+import org.opengrok.indexer.util.TestRepository;\n+import org.opengrok.web.api.v1.controller.FileController.LineDTO;\n+\n+import javax.ws.rs.core.Application;\n+import javax.ws.rs.core.GenericType;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class FileControllerTest extends JerseyTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1382ace0921270232a54f02e077923c52e9d1b92"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzODU4OTE1", "url": "https://github.com/oracle/opengrok/pull/3050#pullrequestreview-363858915", "createdAt": "2020-02-25T04:06:53Z", "commit": {"oid": "1382ace0921270232a54f02e077923c52e9d1b92"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNDowNjo1M1rOFt4DYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNDowNjo1M1rOFt4DYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0ODYxMQ==", "bodyText": "Not sure the utility of a web method that just splits a file using standard Java readline() and returns it encoded in JSON. Why not just return the raw content more efficiently?", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r383648611", "createdAt": "2020-02-25T04:06:53Z", "author": {"login": "idodeclare"}, "path": "opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/FileController.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.web.api.v1.controller;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.apache.lucene.document.Document;\n+import org.apache.lucene.queryparser.classic.ParseException;\n+import org.opengrok.indexer.analysis.AbstractAnalyzer;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.search.QueryBuilder;\n+import org.opengrok.web.api.v1.filter.CorsEnable;\n+import org.opengrok.web.api.v1.filter.PathAuthorized;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.opengrok.indexer.index.IndexDatabase.getDocument;\n+\n+@Path(FileController.PATH)\n+public class FileController {\n+\n+    public static final String PATH = \"/file\";\n+\n+    private static final RuntimeEnvironment env = RuntimeEnvironment.getInstance();\n+\n+    private ArrayList<String> lines = new ArrayList<>();\n+\n+    static class LineDTO {\n+        @JsonProperty\n+        private String line;\n+        @JsonProperty\n+        private int number;\n+\n+        // for testing\n+        LineDTO() {\n+        }\n+\n+        LineDTO(String line, int num) {\n+            this.line = line;\n+            this.number = num;\n+        }\n+\n+        public String getLine() {\n+            return this.line;\n+        }\n+\n+        public int getNumber() {\n+            return this.number;\n+        }\n+    }\n+\n+    private static File getFile(String path, HttpServletResponse response) throws IOException {\n+        if (path == null) {\n+            if (response != null) {\n+                response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE, \"Missing path parameter\");\n+            }\n+            return null;\n+        }\n+\n+        File file = new File(env.getSourceRootFile(), path);\n+        if (!file.isFile()) {\n+            if (response != null) {\n+                response.sendError(HttpServletResponse.SC_NOT_FOUND, \"File not found\");\n+            }\n+            return null;\n+        }\n+\n+        return file;\n+    }\n+\n+    @GET\n+    @CorsEnable\n+    @PathAuthorized\n+    @Path(\"/content\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Object getContent(@Context HttpServletRequest request,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1382ace0921270232a54f02e077923c52e9d1b92"}, "originalPosition": 109}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzOTEzMzU1", "url": "https://github.com/oracle/opengrok/pull/3050#pullrequestreview-363913355", "createdAt": "2020-02-25T07:17:47Z", "commit": {"oid": "1382ace0921270232a54f02e077923c52e9d1b92"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNzoxNzo0OFrOFt65uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNzoyNzo0MVrOFt7GOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY5NTI4OQ==", "bodyText": "not acceptable is related to content negotiation headers, this is more likely a bad request", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r383695289", "createdAt": "2020-02-25T07:17:48Z", "author": {"login": "tulinkry"}, "path": "opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/FileController.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.web.api.v1.controller;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.apache.lucene.document.Document;\n+import org.apache.lucene.queryparser.classic.ParseException;\n+import org.opengrok.indexer.analysis.AbstractAnalyzer;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.search.QueryBuilder;\n+import org.opengrok.web.api.v1.filter.CorsEnable;\n+import org.opengrok.web.api.v1.filter.PathAuthorized;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.opengrok.indexer.index.IndexDatabase.getDocument;\n+\n+@Path(FileController.PATH)\n+public class FileController {\n+\n+    public static final String PATH = \"/file\";\n+\n+    private static final RuntimeEnvironment env = RuntimeEnvironment.getInstance();\n+\n+    private ArrayList<String> lines = new ArrayList<>();\n+\n+    static class LineDTO {\n+        @JsonProperty\n+        private String line;\n+        @JsonProperty\n+        private int number;\n+\n+        // for testing\n+        LineDTO() {\n+        }\n+\n+        LineDTO(String line, int num) {\n+            this.line = line;\n+            this.number = num;\n+        }\n+\n+        public String getLine() {\n+            return this.line;\n+        }\n+\n+        public int getNumber() {\n+            return this.number;\n+        }\n+    }\n+\n+    private static File getFile(String path, HttpServletResponse response) throws IOException {\n+        if (path == null) {\n+            if (response != null) {\n+                response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE, \"Missing path parameter\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1382ace0921270232a54f02e077923c52e9d1b92"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY5NjU1MQ==", "bodyText": "you could employ the accept header here and offer the file\n\nas json when application/json\nas plain text when text/plain\nas binary data when application/octet-stream", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r383696551", "createdAt": "2020-02-25T07:21:47Z", "author": {"login": "tulinkry"}, "path": "opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/FileController.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.web.api.v1.controller;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.apache.lucene.document.Document;\n+import org.apache.lucene.queryparser.classic.ParseException;\n+import org.opengrok.indexer.analysis.AbstractAnalyzer;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.search.QueryBuilder;\n+import org.opengrok.web.api.v1.filter.CorsEnable;\n+import org.opengrok.web.api.v1.filter.PathAuthorized;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.opengrok.indexer.index.IndexDatabase.getDocument;\n+\n+@Path(FileController.PATH)\n+public class FileController {\n+\n+    public static final String PATH = \"/file\";\n+\n+    private static final RuntimeEnvironment env = RuntimeEnvironment.getInstance();\n+\n+    private ArrayList<String> lines = new ArrayList<>();\n+\n+    static class LineDTO {\n+        @JsonProperty\n+        private String line;\n+        @JsonProperty\n+        private int number;\n+\n+        // for testing\n+        LineDTO() {\n+        }\n+\n+        LineDTO(String line, int num) {\n+            this.line = line;\n+            this.number = num;\n+        }\n+\n+        public String getLine() {\n+            return this.line;\n+        }\n+\n+        public int getNumber() {\n+            return this.number;\n+        }\n+    }\n+\n+    private static File getFile(String path, HttpServletResponse response) throws IOException {\n+        if (path == null) {\n+            if (response != null) {\n+                response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE, \"Missing path parameter\");\n+            }\n+            return null;\n+        }\n+\n+        File file = new File(env.getSourceRootFile(), path);\n+        if (!file.isFile()) {\n+            if (response != null) {\n+                response.sendError(HttpServletResponse.SC_NOT_FOUND, \"File not found\");\n+            }\n+            return null;\n+        }\n+\n+        return file;\n+    }\n+\n+    @GET\n+    @CorsEnable\n+    @PathAuthorized\n+    @Path(\"/content\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Object getContent(@Context HttpServletRequest request,\n+                             @Context HttpServletResponse response,\n+                             @QueryParam(\"path\") final String path) throws IOException, ParseException {\n+\n+        File file = getFile(path, response);\n+        if (file == null) {\n+            // error already set in the response\n+            return null;\n+        }\n+\n+        Document doc;\n+        if ((doc = getDocument(file)) == null) {\n+            response.sendError(HttpServletResponse.SC_NOT_FOUND, \"Cannot get document for file\");\n+            return null;\n+        }\n+\n+        String fileType = doc.get(QueryBuilder.T);\n+        if (!fileType.equals(AbstractAnalyzer.Genre.PLAIN.typeName())) {\n+            response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE, \"Not a text file\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1382ace0921270232a54f02e077923c52e9d1b92"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY5NzYwMA==", "bodyText": "this can't happen given you have the filter always before this controller, right?", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r383697600", "createdAt": "2020-02-25T07:24:55Z", "author": {"login": "tulinkry"}, "path": "opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/FileController.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.web.api.v1.controller;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.apache.lucene.document.Document;\n+import org.apache.lucene.queryparser.classic.ParseException;\n+import org.opengrok.indexer.analysis.AbstractAnalyzer;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.search.QueryBuilder;\n+import org.opengrok.web.api.v1.filter.CorsEnable;\n+import org.opengrok.web.api.v1.filter.PathAuthorized;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.opengrok.indexer.index.IndexDatabase.getDocument;\n+\n+@Path(FileController.PATH)\n+public class FileController {\n+\n+    public static final String PATH = \"/file\";\n+\n+    private static final RuntimeEnvironment env = RuntimeEnvironment.getInstance();\n+\n+    private ArrayList<String> lines = new ArrayList<>();\n+\n+    static class LineDTO {\n+        @JsonProperty\n+        private String line;\n+        @JsonProperty\n+        private int number;\n+\n+        // for testing\n+        LineDTO() {\n+        }\n+\n+        LineDTO(String line, int num) {\n+            this.line = line;\n+            this.number = num;\n+        }\n+\n+        public String getLine() {\n+            return this.line;\n+        }\n+\n+        public int getNumber() {\n+            return this.number;\n+        }\n+    }\n+\n+    private static File getFile(String path, HttpServletResponse response) throws IOException {\n+        if (path == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1382ace0921270232a54f02e077923c52e9d1b92"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY5ODQ4OA==", "bodyText": "I see creating one unnecessary array list lines, or am I missing something?", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r383698488", "createdAt": "2020-02-25T07:27:41Z", "author": {"login": "tulinkry"}, "path": "opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/FileController.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.web.api.v1.controller;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.apache.lucene.document.Document;\n+import org.apache.lucene.queryparser.classic.ParseException;\n+import org.opengrok.indexer.analysis.AbstractAnalyzer;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.search.QueryBuilder;\n+import org.opengrok.web.api.v1.filter.CorsEnable;\n+import org.opengrok.web.api.v1.filter.PathAuthorized;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.opengrok.indexer.index.IndexDatabase.getDocument;\n+\n+@Path(FileController.PATH)\n+public class FileController {\n+\n+    public static final String PATH = \"/file\";\n+\n+    private static final RuntimeEnvironment env = RuntimeEnvironment.getInstance();\n+\n+    private ArrayList<String> lines = new ArrayList<>();\n+\n+    static class LineDTO {\n+        @JsonProperty\n+        private String line;\n+        @JsonProperty\n+        private int number;\n+\n+        // for testing\n+        LineDTO() {\n+        }\n+\n+        LineDTO(String line, int num) {\n+            this.line = line;\n+            this.number = num;\n+        }\n+\n+        public String getLine() {\n+            return this.line;\n+        }\n+\n+        public int getNumber() {\n+            return this.number;\n+        }\n+    }\n+\n+    private static File getFile(String path, HttpServletResponse response) throws IOException {\n+        if (path == null) {\n+            if (response != null) {\n+                response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE, \"Missing path parameter\");\n+            }\n+            return null;\n+        }\n+\n+        File file = new File(env.getSourceRootFile(), path);\n+        if (!file.isFile()) {\n+            if (response != null) {\n+                response.sendError(HttpServletResponse.SC_NOT_FOUND, \"File not found\");\n+            }\n+            return null;\n+        }\n+\n+        return file;\n+    }\n+\n+    @GET\n+    @CorsEnable\n+    @PathAuthorized\n+    @Path(\"/content\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Object getContent(@Context HttpServletRequest request,\n+                             @Context HttpServletResponse response,\n+                             @QueryParam(\"path\") final String path) throws IOException, ParseException {\n+\n+        File file = getFile(path, response);\n+        if (file == null) {\n+            // error already set in the response\n+            return null;\n+        }\n+\n+        Document doc;\n+        if ((doc = getDocument(file)) == null) {\n+            response.sendError(HttpServletResponse.SC_NOT_FOUND, \"Cannot get document for file\");\n+            return null;\n+        }\n+\n+        String fileType = doc.get(QueryBuilder.T);\n+        if (!fileType.equals(AbstractAnalyzer.Genre.PLAIN.typeName())) {\n+            response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE, \"Not a text file\");\n+            return null;\n+        }\n+\n+        try (BufferedReader br = new BufferedReader(new FileReader(file))) {\n+            String line;\n+            while ((line = br.readLine()) != null) {\n+                lines.add(line);\n+            }\n+        }\n+\n+        int count = 1;\n+        List<LineDTO> linesDTO = new ArrayList<>();\n+        for (String line: lines) {\n+            LineDTO l = new LineDTO(line, count++);\n+            linesDTO.add(l);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1382ace0921270232a54f02e077923c52e9d1b92"}, "originalPosition": 142}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa2ee868f203a21e6aa50fc72f2312aa8fbb15ae", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/fa2ee868f203a21e6aa50fc72f2312aa8fbb15ae", "committedDate": "2020-02-25T15:12:38Z", "message": "address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef3858ff1ed8da946cf4ad23c2e9cd047e9a8c1c", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/ef3858ff1ed8da946cf4ad23c2e9cd047e9a8c1c", "committedDate": "2020-02-25T16:13:56Z", "message": "add more types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f41f611c79482c4c48cef499b6e264f2c4de7762", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/f41f611c79482c4c48cef499b6e264f2c4de7762", "committedDate": "2020-02-25T18:32:31Z", "message": "remove unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ec34b6691c183571dc5f9749abe8783a56ebf72", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/3ec34b6691c183571dc5f9749abe8783a56ebf72", "committedDate": "2020-02-25T21:06:57Z", "message": "remove JSON"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NTg0MjE1", "url": "https://github.com/oracle/opengrok/pull/3050#pullrequestreview-364584215", "createdAt": "2020-02-26T02:21:08Z", "commit": {"oid": "3ec34b6691c183571dc5f9749abe8783a56ebf72"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NzA2Njcx", "url": "https://github.com/oracle/opengrok/pull/3050#pullrequestreview-364706671", "createdAt": "2020-02-26T08:43:23Z", "commit": {"oid": "3ec34b6691c183571dc5f9749abe8783a56ebf72"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODo0MzoyNFrOFuiZcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODo0MzoyNFrOFuiZcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM0MjM4Ng==", "bodyText": "when this throws FileNotFoundException, it should possibly answer with 404", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r384342386", "createdAt": "2020-02-26T08:43:24Z", "author": {"login": "tulinkry"}, "path": "opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/FileController.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.web.api.v1.controller;\n+\n+import org.apache.lucene.document.Document;\n+import org.apache.lucene.queryparser.classic.ParseException;\n+import org.opengrok.indexer.analysis.AbstractAnalyzer;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.search.QueryBuilder;\n+import org.opengrok.web.api.v1.filter.CorsEnable;\n+import org.opengrok.web.api.v1.filter.PathAuthorized;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.StreamingOutput;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import static org.opengrok.indexer.index.IndexDatabase.getDocument;\n+\n+@Path(FileController.PATH)\n+public class FileController {\n+\n+    public static final String PATH = \"/file\";\n+\n+    private static final RuntimeEnvironment env = RuntimeEnvironment.getInstance();\n+\n+    private static File getFile(String path, HttpServletResponse response) throws IOException {\n+        if (path == null) {\n+            if (response != null) {\n+                response.sendError(HttpServletResponse.SC_BAD_REQUEST, \"Missing path parameter\");\n+            }\n+            return null;\n+        }\n+\n+        File file = new File(env.getSourceRootFile(), path);\n+        if (!file.isFile()) {\n+            if (response != null) {\n+                response.sendError(HttpServletResponse.SC_NOT_FOUND, \"File not found\");\n+            }\n+            return null;\n+        }\n+\n+        return file;\n+    }\n+\n+    private StreamingOutput transfer(File file) throws FileNotFoundException {\n+        InputStream in = new FileInputStream(file);\n+        return out -> {\n+            byte[] buffer = new byte[1024];\n+            int len = in.read(buffer);\n+            while (len != -1) {\n+                out.write(buffer, 0, len);\n+                len = in.read(buffer);\n+            }\n+        };\n+    }\n+\n+    @GET\n+    @CorsEnable\n+    @PathAuthorized\n+    @Path(\"/content\")\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public StreamingOutput getContentPlain(@Context HttpServletRequest request,\n+                             @Context HttpServletResponse response,\n+                             @QueryParam(\"path\") final String path) throws IOException, ParseException {\n+\n+        File file = getFile(path, response);\n+        if (file == null) {\n+            // error already set in the response\n+            return null;\n+        }\n+\n+        Document doc;\n+        if ((doc = getDocument(file)) == null) {\n+            response.sendError(HttpServletResponse.SC_NOT_FOUND, \"Cannot get document for file\");\n+            return null;\n+        }\n+\n+        String fileType = doc.get(QueryBuilder.T);\n+        if (!AbstractAnalyzer.Genre.PLAIN.typeName().equals(fileType)) {\n+            response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE, \"Not a text file\");\n+            return null;\n+        }\n+\n+        return transfer(file);\n+    }\n+\n+    @GET\n+    @CorsEnable\n+    @PathAuthorized\n+    @Path(\"/content\")\n+    @Produces(MediaType.APPLICATION_OCTET_STREAM)\n+    public StreamingOutput getContentOctets(@Context HttpServletRequest request,\n+                                           @Context HttpServletResponse response,\n+                                           @QueryParam(\"path\") final String path) throws IOException, ParseException {\n+\n+        File file = getFile(path, response);\n+        if (file == null) {\n+            // error already set in the response\n+            return null;\n+        }\n+\n+        Document doc;\n+        if ((doc = getDocument(file)) == null) {\n+            response.sendError(HttpServletResponse.SC_NOT_FOUND, \"Cannot get document for file\");\n+            return null;\n+        }\n+\n+        return transfer(file);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ec34b6691c183571dc5f9749abe8783a56ebf72"}, "originalPosition": 140}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5a474be8ba8d81d431cd99a1f74c476602fbfac", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/f5a474be8ba8d81d431cd99a1f74c476602fbfac", "committedDate": "2020-02-26T13:48:20Z", "message": "catch FileNotFoundException"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 279, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}