{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyODcwOTA0", "number": 3248, "title": "do not deep copy history entries", "bodyText": "This was meant to help a bit #3243 however it does not do much for my particular use case as described in the issue. Still, should save some heap memory in case of running the indexer with -G.", "createdAt": "2020-09-25T06:44:46Z", "url": "https://github.com/oracle/opengrok/pull/3248", "merged": true, "mergeCommit": {"oid": "0b89ff1726336afac62f656370bf7d3ee2b7c027"}, "closed": true, "closedAt": "2020-10-27T20:34:38Z", "author": {"login": "vladak"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdMRG0xAFqTQ5NjE5MDgyNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWubYzgBqjM5Mjc4NDUzMDE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MTkwODI2", "url": "https://github.com/oracle/opengrok/pull/3248#pullrequestreview-496190826", "createdAt": "2020-09-25T07:55:12Z", "commit": {"oid": "0bc21b878b44a8c725436bd1dc50df2a1e044b6b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNzo1NToxMlrOHX4-xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNzo1ODo1MlrOHX5GjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgxMjg2OA==", "bodyText": "What is the contract here? Can repository.getHistory(srcFile) return null? If not, then maybe we can rewrite it to:\nHistory hist;\nif (renamed) {\n    hist = repository.getHistory(srcFile);\n} else {\n    hist = new History(historyEntries);\n}", "url": "https://github.com/oracle/opengrok/pull/3248#discussion_r494812868", "createdAt": "2020-09-25T07:55:12Z", "author": {"login": "ahornace"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/FileHistoryCache.java", "diffHunk": "@@ -103,38 +103,34 @@ private void doFileHistory(String filename, List<HistoryEntry> historyEntries,\n             Repository repository, File srcFile, File root, boolean renamed)\n             throws HistoryException {\n \n-        History hist = null;\n+        File file = new File(root, filename);\n+        // Only store directory history for the top-level directory.\n+        if (file.isDirectory() && !filename.equals(repository.getDirectoryName())) {\n+            LOGGER.log(Level.FINE, \"Not storing history cache for {0}\", file);\n+            return;\n+        }\n \n+        History hist = null;\n         /*\n          * If the file was renamed (in the changesets that are being indexed),\n          * its history is not stored in the historyEntries so it needs to be acquired\n          * directly from the repository.\n-         * This ensures that complete history of the file (across renames)\n-         * will be saved.\n+         * This ensures that complete history of the file (across renames) will be saved.\n          */\n         if (renamed) {\n             hist = repository.getHistory(srcFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bc21b878b44a8c725436bd1dc50df2a1e044b6b"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgxMzM0Ng==", "bodyText": "Why the space before !? Just curious :D", "url": "https://github.com/oracle/opengrok/pull/3248#discussion_r494813346", "createdAt": "2020-09-25T07:56:05Z", "author": {"login": "ahornace"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/Repository.java", "diffHunk": "@@ -279,24 +279,25 @@ boolean hasFileBasedTags() {\n      * tags to changesets which actually exist in the history of given file.\n      * Must be implemented repository-specific.\n      *\n-     * @see getTagList\n-     * @param hist History we want to assign tags to.\n+     * @see #getTagList\n+     * @param hist History object we want to assign tags to.\n      */\n     void assignTagsInHistory(History hist) {\n         if (hist == null) {\n             return;\n         }\n+\n         if (this.getTagList() == null) {\n             throw new IllegalStateException(\"getTagList() is null\");\n         }\n+\n         Iterator<TagEntry> it = this.getTagList().descendingIterator();\n         TagEntry lastTagEntry = null;\n-        // Go through all commits of given file\n         for (HistoryEntry ent : hist.getHistoryEntries()) {\n             // Assign all tags created since the last revision\n-            // Revision in this HistoryEntry must be already specified!\n-            // TODO is there better way to do this? We need to \"repeat\"\n-            // last element returned by call to next()\n+            // Revision in this HistoryEntry must be already specified !", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bc21b878b44a8c725436bd1dc50df2a1e044b6b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgxNDg2MQ==", "bodyText": "Could you please explain what was the use case?\nWe need to do deep copy in order to have different tags per each commit.", "url": "https://github.com/oracle/opengrok/pull/3248#discussion_r494814861", "createdAt": "2020-09-25T07:58:52Z", "author": {"login": "ahornace"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/FileHistoryCache.java", "diffHunk": "@@ -463,15 +456,8 @@ public void store(History history, Repository repository)\n                     list = new ArrayList<>();\n                     map.put(s, list);\n                 }\n-                /*\n-                 * We need to do deep copy in order to have different tags", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bc21b878b44a8c725436bd1dc50df2a1e044b6b"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2NDMzOTU4", "url": "https://github.com/oracle/opengrok/pull/3248#pullrequestreview-496433958", "createdAt": "2020-09-25T13:46:35Z", "commit": {"oid": "4dcf7e91f2b5e0b468736092ef85d0d5e14b9965"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMzo0NjozNlrOHYEVYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMzo0ODoyOVrOHYEaKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk5ODg4Mw==", "bodyText": "a reason in the message could be helpful for debugging", "url": "https://github.com/oracle/opengrok/pull/3248#discussion_r494998883", "createdAt": "2020-09-25T13:46:36Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/FileHistoryCache.java", "diffHunk": "@@ -103,38 +103,32 @@ private void doFileHistory(String filename, List<HistoryEntry> historyEntries,\n             Repository repository, File srcFile, File root, boolean renamed)\n             throws HistoryException {\n \n-        History hist = null;\n+        File file = new File(root, filename);\n+        // Only store directory history for the top-level directory.\n+        if (file.isDirectory() && !filename.equals(repository.getDirectoryName())) {\n+            LOGGER.log(Level.FINE, \"Not storing history cache for {0}\", file);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dcf7e91f2b5e0b468736092ef85d0d5e14b9965"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTAwMDEwNg==", "bodyText": "hist could be null when hist = repository.getHistory(srcFile) returns null which was handled in the previous code", "url": "https://github.com/oracle/opengrok/pull/3248#discussion_r495000106", "createdAt": "2020-09-25T13:48:29Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/FileHistoryCache.java", "diffHunk": "@@ -103,38 +103,32 @@ private void doFileHistory(String filename, List<HistoryEntry> historyEntries,\n             Repository repository, File srcFile, File root, boolean renamed)\n             throws HistoryException {\n \n-        History hist = null;\n+        File file = new File(root, filename);\n+        // Only store directory history for the top-level directory.\n+        if (file.isDirectory() && !filename.equals(repository.getDirectoryName())) {\n+            LOGGER.log(Level.FINE, \"Not storing history cache for {0}\", file);\n+            return;\n+        }\n \n         /*\n          * If the file was renamed (in the changesets that are being indexed),\n          * its history is not stored in the historyEntries so it needs to be acquired\n          * directly from the repository.\n-         * This ensures that complete history of the file (across renames)\n-         * will be saved.\n+         * This ensures that complete history of the file (across renames) will be saved.\n          */\n+        History hist;\n         if (renamed) {\n             hist = repository.getHistory(srcFile);\n+        } else {\n+            hist = new History(historyEntries);\n         }\n \n-        File file = new File(root, filename);\n-\n-        if (hist == null) {\n-            hist = new History();\n-\n-            // File based history cache does not store files for individual\n-            // changesets so strip them unless it is history for the repository.\n-            for (HistoryEntry ent : historyEntries) {\n-                if (file.isDirectory() && filename.equals(repository.getDirectoryName())) {\n-                    ent.stripTags();\n-                } else {\n-                    ent.strip();\n-                }\n-            }\n-\n-            // add all history entries\n-            hist.setHistoryEntries(historyEntries);\n-        } else {\n-            for (HistoryEntry ent : hist.getHistoryEntries()) {\n+        // File based history cache does not store files for individual\n+        // changesets so strip them unless it is history for the repository.\n+        for (HistoryEntry ent : hist.getHistoryEntries()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dcf7e91f2b5e0b468736092ef85d0d5e14b9965"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2NTgzODU2", "url": "https://github.com/oracle/opengrok/pull/3248#pullrequestreview-496583856", "createdAt": "2020-09-25T16:45:24Z", "commit": {"oid": "d91d17ec369046cd28b97dfc3d0745111759b067"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d91d17ec369046cd28b97dfc3d0745111759b067", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/d91d17ec369046cd28b97dfc3d0745111759b067", "committedDate": "2020-09-25T15:54:35Z", "message": "use @NotNull annotation for getHistory()"}, "afterCommit": {"oid": "7079ff6bf150e95b3e840ff01f74d5f7a2e922f4", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/7079ff6bf150e95b3e840ff01f74d5f7a2e922f4", "committedDate": "2020-10-10T16:15:33Z", "message": "use @NotNull annotation for getHistory()"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7079ff6bf150e95b3e840ff01f74d5f7a2e922f4", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/7079ff6bf150e95b3e840ff01f74d5f7a2e922f4", "committedDate": "2020-10-10T16:15:33Z", "message": "use @NotNull annotation for getHistory()"}, "afterCommit": {"oid": "152093a8a99f27f0d0394de3db86fa80e0bf11c0", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/152093a8a99f27f0d0394de3db86fa80e0bf11c0", "committedDate": "2020-10-26T15:08:46Z", "message": "use @NotNull annotation for getHistory()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "470a66b7332a849a6dd0bd236f0ed3fdddc75fd1", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/470a66b7332a849a6dd0bd236f0ed3fdddc75fd1", "committedDate": "2020-10-27T19:47:51Z", "message": "do not deep copy history entries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6fdd299bc41bc40bd94119bd2aad86839e25270", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/c6fdd299bc41bc40bd94119bd2aad86839e25270", "committedDate": "2020-10-27T19:48:48Z", "message": "use @NotNull annotation for getHistory()"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "152093a8a99f27f0d0394de3db86fa80e0bf11c0", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/152093a8a99f27f0d0394de3db86fa80e0bf11c0", "committedDate": "2020-10-26T15:08:46Z", "message": "use @NotNull annotation for getHistory()"}, "afterCommit": {"oid": "c6fdd299bc41bc40bd94119bd2aad86839e25270", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/c6fdd299bc41bc40bd94119bd2aad86839e25270", "committedDate": "2020-10-27T19:48:48Z", "message": "use @NotNull annotation for getHistory()"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 202, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}