{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0NzIwMTc1", "number": 3350, "title": "support OPTIONAL control flag in authorization framework", "bodyText": "This introduces the OPTIONAL authorization control flag.\nTested with stack that contained this at the top level:\nLdapUserPlugin (OPTIONAL)\n  - substack (REQUIRED)\n    UserWhiteListPlugin (SUFFICIENT)\n    LdapFilterPlugin (REQUIRED)\n\nWorks fine except when LdapUserPlugin fails the check because the user does not exist in LDAP it will cause a LDAP query each time the user sends a request as there is no negative caching.", "createdAt": "2020-11-03T13:05:22Z", "url": "https://github.com/oracle/opengrok/pull/3350", "merged": true, "mergeCommit": {"oid": "13048b5439f2a342452129c166ff82b5afe9266b"}, "closed": true, "closedAt": "2020-11-24T11:34:24Z", "author": {"login": "vladak"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdY40-jAH2gAyNTE0NzIwMTc1OjhmNmM5NGNiMWRiNTI3MTJkMDJiODE3ZWZlYmZmZGI3ZTE2ZTY0N2U=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdaxkXSAH2gAyNTE0NzIwMTc1OjJhZTEwNzg1ZjVhNzQ4ZDBmNGVkM2YyYWExZjZhMjNhNmE5ZjA5ZjY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8f6c94cb1db52712d02b817efebffdb7e16e647e", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/8f6c94cb1db52712d02b817efebffdb7e16e647e", "committedDate": "2020-11-03T13:03:58Z", "message": "support OPTIONAL verb in authorization framework\n\nfixes #3289"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMjE4NzM1", "url": "https://github.com/oracle/opengrok/pull/3350#pullrequestreview-523218735", "createdAt": "2020-11-04T10:15:34Z", "commit": {"oid": "8f6c94cb1db52712d02b817efebffdb7e16e647e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMDoxNTozNFrOHtRi6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMDoxNTozNFrOHtRi6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzNTQzNA==", "bodyText": "It's a little harder to follow with this three-state variable.\nSo the idea is that it fails the decision only when the OPTIONAL are the only plugins in the stack?\nIf so, the original structure may stay it was (except the OPTIONAL else-if) and here you could do\nif(optionalFailure && getStack().stream().filter(Predicate::not(AuthorizationEntity::isOptional)).findAny().isEmpty()) {\n  return optionalFailure;\n}", "url": "https://github.com/oracle/opengrok/pull/3350#discussion_r517235434", "createdAt": "2020-11-04T10:15:34Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/authorization/AuthorizationStack.java", "diffHunk": "@@ -277,6 +292,14 @@ protected boolean processStack(Nameable entity,\n             }\n         }\n \n+        if (overallDecision == null && optionalFailure) {\n+            return false;\n+        }\n+\n+        if (overallDecision == null) {\n+            return true;\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f6c94cb1db52712d02b817efebffdb7e16e647e"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMjIyMTEw", "url": "https://github.com/oracle/opengrok/pull/3350#pullrequestreview-523222110", "createdAt": "2020-11-04T10:19:52Z", "commit": {"oid": "8f6c94cb1db52712d02b817efebffdb7e16e647e"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMDoxOTo1MlrOHtRtKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMDoyMzo0M1rOHtR2Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzODA1Ng==", "bodyText": "maybe worth noting that: A success of a optional plugin is ignored and processing of the stack continues unaffected.", "url": "https://github.com/oracle/opengrok/pull/3350#discussion_r517238056", "createdAt": "2020-11-04T10:19:52Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/authorization/AuthControlFlag.java", "diffHunk": "@@ -48,13 +48,17 @@\n      */\n     REQUISITE(\"requisite\"),\n     /**\n-     * If such a plugin succeeds and no prior required plugin has failed the\n-     * authorization framework returns success to the application immediately\n-     * without calling any further plugins in the stack. A failure of a\n-     * sufficient plugin is ignored and processing of the plugin list continues\n-     * unaffected.\n+     * If such a plugin succeeds and no prior required plugin has failed,\n+     * the authorization framework returns success immediately\n+     * without calling any further plugins in the stack.\n+     * A failure of a sufficient plugin is ignored and processing of the stack continues unaffected.\n      */\n-    SUFFICIENT(\"sufficient\");\n+    SUFFICIENT(\"sufficient\"),\n+    /**\n+     * The failure is returned only if stack traversal finished and\n+     * there was no prior result recorded.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f6c94cb1db52712d02b817efebffdb7e16e647e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzODI2MQ==", "bodyText": "copyright", "url": "https://github.com/oracle/opengrok/pull/3350#discussion_r517238261", "createdAt": "2020-11-04T10:20:10Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/authorization/AuthControlFlag.java", "diffHunk": "@@ -48,13 +48,17 @@\n      */\n     REQUISITE(\"requisite\"),\n     /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f6c94cb1db52712d02b817efebffdb7e16e647e"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzOTE2MA==", "bodyText": "\"if\" not necessary here, but i don't mind it", "url": "https://github.com/oracle/opengrok/pull/3350#discussion_r517239160", "createdAt": "2020-11-04T10:21:43Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/authorization/AuthorizationStack.java", "diffHunk": "@@ -219,7 +219,13 @@ protected boolean processStack(Nameable entity,\n             PluginDecisionPredicate pluginPredicate,\n             PluginSkippingPredicate skippingPredicate) {\n \n-        boolean overallDecision = true;\n+        Boolean overallDecision = null;\n+        boolean optionalFailure = false;\n+\n+        if (getStack().isEmpty()) {\n+            return true;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f6c94cb1db52712d02b817efebffdb7e16e647e"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzOTgzNQ==", "bodyText": "a test with two optionals, both returning different result, would be nice", "url": "https://github.com/oracle/opengrok/pull/3350#discussion_r517239835", "createdAt": "2020-11-04T10:22:49Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/authorization/AuthorizationFrameworkTest.java", "diffHunk": "@@ -654,6 +654,57 @@ public AuthorizationFrameworkTest(StackSetup setup) {\n                 NewTest(false, createAllowedProject()),\n                 NewTest(false, createAllowedGroup()))\n             },\n+            {\n+                new StackSetup(\n+                    NewStack(AuthControlFlag.REQUIRED,\n+                        new AuthorizationPlugin(AuthControlFlag.OPTIONAL, createTestFailingPlugin()),\n+                        new AuthorizationPlugin(AuthControlFlag.REQUIRED, createAllowedPrefixPlugin())),\n+                    // optional plugin returns false\n+                    // required plugin returns false => false\n+                    NewTest(false, createUnallowedProject()),\n+                    NewTest(false, createUnallowedGroup()),\n+                    // optional plugin returns false\n+                    // required plugin returns true => true\n+                    NewTest(true, createAllowedProject()),\n+                    NewTest(true, createAllowedGroup()))\n+            },\n+            {\n+                new StackSetup(\n+                    NewStack(AuthControlFlag.REQUIRED,\n+                            new AuthorizationPlugin(AuthControlFlag.OPTIONAL, createAllowedPrefixPlugin()),\n+                            new AuthorizationPlugin(AuthControlFlag.REQUIRED, createNotAllowedPrefixPlugin())),\n+                    // optional plugin returns false\n+                    // required plugin returns true => true\n+                    NewTest(true, createUnallowedProject()),\n+                    NewTest(true, createUnallowedGroup()),\n+                    // optional plugin returns true\n+                    // required plugin returns false => false\n+                    NewTest(false, createAllowedProject()),\n+                    NewTest(false, createAllowedGroup()))\n+            },\n+            {\n+                new StackSetup(\n+                    NewStack(AuthControlFlag.REQUIRED,\n+                            new AuthorizationPlugin(AuthControlFlag.OPTIONAL, createTestFailingPlugin())\n+                            ),\n+                    // optional plugin returns false => false\n+                    NewTest(false, createUnallowedProject()),\n+                    NewTest(false, createUnallowedGroup()),\n+                    NewTest(false, createAllowedProject()),\n+                    NewTest(false, createAllowedGroup()))\n+            },\n+            {\n+                new StackSetup(\n+                    NewStack(AuthControlFlag.REQUIRED,\n+                            new AuthorizationPlugin(AuthControlFlag.OPTIONAL, createAllowedPrefixPlugin())\n+                    ),\n+                    // optional plugin returns false => false\n+                    NewTest(false, createUnallowedProject()),\n+                    NewTest(false, createUnallowedGroup()),\n+                    // optional plugin returns true => true\n+                    NewTest(true, createAllowedProject()),\n+                    NewTest(true, createAllowedGroup()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f6c94cb1db52712d02b817efebffdb7e16e647e"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0MDM5MQ==", "bodyText": "a test including sufficient and optional would be nice too", "url": "https://github.com/oracle/opengrok/pull/3350#discussion_r517240391", "createdAt": "2020-11-04T10:23:43Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/authorization/AuthorizationFrameworkTest.java", "diffHunk": "@@ -654,6 +654,57 @@ public AuthorizationFrameworkTest(StackSetup setup) {\n                 NewTest(false, createAllowedProject()),\n                 NewTest(false, createAllowedGroup()))\n             },\n+            {\n+                new StackSetup(\n+                    NewStack(AuthControlFlag.REQUIRED,\n+                        new AuthorizationPlugin(AuthControlFlag.OPTIONAL, createTestFailingPlugin()),\n+                        new AuthorizationPlugin(AuthControlFlag.REQUIRED, createAllowedPrefixPlugin())),\n+                    // optional plugin returns false\n+                    // required plugin returns false => false\n+                    NewTest(false, createUnallowedProject()),\n+                    NewTest(false, createUnallowedGroup()),\n+                    // optional plugin returns false\n+                    // required plugin returns true => true\n+                    NewTest(true, createAllowedProject()),\n+                    NewTest(true, createAllowedGroup()))\n+            },\n+            {\n+                new StackSetup(\n+                    NewStack(AuthControlFlag.REQUIRED,\n+                            new AuthorizationPlugin(AuthControlFlag.OPTIONAL, createAllowedPrefixPlugin()),\n+                            new AuthorizationPlugin(AuthControlFlag.REQUIRED, createNotAllowedPrefixPlugin())),\n+                    // optional plugin returns false\n+                    // required plugin returns true => true\n+                    NewTest(true, createUnallowedProject()),\n+                    NewTest(true, createUnallowedGroup()),\n+                    // optional plugin returns true\n+                    // required plugin returns false => false\n+                    NewTest(false, createAllowedProject()),\n+                    NewTest(false, createAllowedGroup()))\n+            },\n+            {\n+                new StackSetup(\n+                    NewStack(AuthControlFlag.REQUIRED,\n+                            new AuthorizationPlugin(AuthControlFlag.OPTIONAL, createTestFailingPlugin())\n+                            ),\n+                    // optional plugin returns false => false\n+                    NewTest(false, createUnallowedProject()),\n+                    NewTest(false, createUnallowedGroup()),\n+                    NewTest(false, createAllowedProject()),\n+                    NewTest(false, createAllowedGroup()))\n+            },\n+            {\n+                new StackSetup(\n+                    NewStack(AuthControlFlag.REQUIRED,\n+                            new AuthorizationPlugin(AuthControlFlag.OPTIONAL, createAllowedPrefixPlugin())\n+                    ),\n+                    // optional plugin returns false => false\n+                    NewTest(false, createUnallowedProject()),\n+                    NewTest(false, createUnallowedGroup()),\n+                    // optional plugin returns true => true\n+                    NewTest(true, createAllowedProject()),\n+                    NewTest(true, createAllowedGroup()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzOTgzNQ=="}, "originalCommit": {"oid": "8f6c94cb1db52712d02b817efebffdb7e16e647e"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f757fe6a15fa6153123410b6def0197122f7ce3", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/9f757fe6a15fa6153123410b6def0197122f7ce3", "committedDate": "2020-11-04T18:42:28Z", "message": "update copyright"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0185ada5b89fd75dea8bdadf75463487645638c", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/d0185ada5b89fd75dea8bdadf75463487645638c", "committedDate": "2020-11-04T18:43:03Z", "message": "add comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d0e4ff5749fd3dabddeb75a20c224b6c29726b7", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/5d0e4ff5749fd3dabddeb75a20c224b6c29726b7", "committedDate": "2020-11-04T18:49:32Z", "message": "add test with 2 OPTIONAL plugins"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47422fe7c5a13ea10180ddc5f27eae8bf34955fe", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/47422fe7c5a13ea10180ddc5f27eae8bf34955fe", "committedDate": "2020-11-04T18:59:00Z", "message": "add test with SUFFICIENT + OPTIONAL plugins"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ae10785f5a748d0f4ed3f2aa1f6a23a6a9f09f6", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/2ae10785f5a748d0f4ed3f2aa1f6a23a6a9f09f6", "committedDate": "2020-11-09T09:44:20Z", "message": "use stream() for the final OPTIONAL check"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 121, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}