{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0NzIwMTc1", "number": 3350, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMDoxNTozNFrOE1KHuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMDoyMjo0OVrOE1KSuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTc1ODAwOnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/authorization/AuthorizationStack.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMDoxNTozNFrOHtRi6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOTo0Njo1N1rOHvmglg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzNTQzNA==", "bodyText": "It's a little harder to follow with this three-state variable.\nSo the idea is that it fails the decision only when the OPTIONAL are the only plugins in the stack?\nIf so, the original structure may stay it was (except the OPTIONAL else-if) and here you could do\nif(optionalFailure && getStack().stream().filter(Predicate::not(AuthorizationEntity::isOptional)).findAny().isEmpty()) {\n  return optionalFailure;\n}", "url": "https://github.com/oracle/opengrok/pull/3350#discussion_r517235434", "createdAt": "2020-11-04T10:15:34Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/authorization/AuthorizationStack.java", "diffHunk": "@@ -277,6 +292,14 @@ protected boolean processStack(Nameable entity,\n             }\n         }\n \n+        if (overallDecision == null && optionalFailure) {\n+            return false;\n+        }\n+\n+        if (overallDecision == null) {\n+            return true;\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f6c94cb1db52712d02b817efebffdb7e16e647e"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY3NjA1NA==", "bodyText": "Used the original pattern according to the Unix PAM implementation (it is actually more complicated there). The stream interface makes the code arguably a bit more readable at the expense of traversing the plugins.", "url": "https://github.com/oracle/opengrok/pull/3350#discussion_r519676054", "createdAt": "2020-11-09T09:46:57Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/authorization/AuthorizationStack.java", "diffHunk": "@@ -277,6 +292,14 @@ protected boolean processStack(Nameable entity,\n             }\n         }\n \n+        if (overallDecision == null && optionalFailure) {\n+            return false;\n+        }\n+\n+        if (overallDecision == null) {\n+            return true;\n+        }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzNTQzNA=="}, "originalCommit": {"oid": "8f6c94cb1db52712d02b817efebffdb7e16e647e"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTc3NDkwOnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/authorization/AuthControlFlag.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMDoxOTo1MlrOHtRtKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODo0MzoyMlrOHtlFxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzODA1Ng==", "bodyText": "maybe worth noting that: A success of a optional plugin is ignored and processing of the stack continues unaffected.", "url": "https://github.com/oracle/opengrok/pull/3350#discussion_r517238056", "createdAt": "2020-11-04T10:19:52Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/authorization/AuthControlFlag.java", "diffHunk": "@@ -48,13 +48,17 @@\n      */\n     REQUISITE(\"requisite\"),\n     /**\n-     * If such a plugin succeeds and no prior required plugin has failed the\n-     * authorization framework returns success to the application immediately\n-     * without calling any further plugins in the stack. A failure of a\n-     * sufficient plugin is ignored and processing of the plugin list continues\n-     * unaffected.\n+     * If such a plugin succeeds and no prior required plugin has failed,\n+     * the authorization framework returns success immediately\n+     * without calling any further plugins in the stack.\n+     * A failure of a sufficient plugin is ignored and processing of the stack continues unaffected.\n      */\n-    SUFFICIENT(\"sufficient\");\n+    SUFFICIENT(\"sufficient\"),\n+    /**\n+     * The failure is returned only if stack traversal finished and\n+     * there was no prior result recorded.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f6c94cb1db52712d02b817efebffdb7e16e647e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU1NTY1Mg==", "bodyText": "added", "url": "https://github.com/oracle/opengrok/pull/3350#discussion_r517555652", "createdAt": "2020-11-04T18:43:22Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/authorization/AuthControlFlag.java", "diffHunk": "@@ -48,13 +48,17 @@\n      */\n     REQUISITE(\"requisite\"),\n     /**\n-     * If such a plugin succeeds and no prior required plugin has failed the\n-     * authorization framework returns success to the application immediately\n-     * without calling any further plugins in the stack. A failure of a\n-     * sufficient plugin is ignored and processing of the plugin list continues\n-     * unaffected.\n+     * If such a plugin succeeds and no prior required plugin has failed,\n+     * the authorization framework returns success immediately\n+     * without calling any further plugins in the stack.\n+     * A failure of a sufficient plugin is ignored and processing of the stack continues unaffected.\n      */\n-    SUFFICIENT(\"sufficient\");\n+    SUFFICIENT(\"sufficient\"),\n+    /**\n+     * The failure is returned only if stack traversal finished and\n+     * there was no prior result recorded.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzODA1Ng=="}, "originalCommit": {"oid": "8f6c94cb1db52712d02b817efebffdb7e16e647e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTc3NjIyOnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/authorization/AuthControlFlag.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMDoyMDoxMFrOHtRt9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODo0MjozOVrOHtlEVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzODI2MQ==", "bodyText": "copyright", "url": "https://github.com/oracle/opengrok/pull/3350#discussion_r517238261", "createdAt": "2020-11-04T10:20:10Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/authorization/AuthControlFlag.java", "diffHunk": "@@ -48,13 +48,17 @@\n      */\n     REQUISITE(\"requisite\"),\n     /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f6c94cb1db52712d02b817efebffdb7e16e647e"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU1NTI4Ng==", "bodyText": "will fix", "url": "https://github.com/oracle/opengrok/pull/3350#discussion_r517555286", "createdAt": "2020-11-04T18:42:39Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/authorization/AuthControlFlag.java", "diffHunk": "@@ -48,13 +48,17 @@\n      */\n     REQUISITE(\"requisite\"),\n     /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzODI2MQ=="}, "originalCommit": {"oid": "8f6c94cb1db52712d02b817efebffdb7e16e647e"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTc4MTc3OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/authorization/AuthorizationStack.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMDoyMTo0M1rOHtRxeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODo0MTo1N1rOHtlCxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzOTE2MA==", "bodyText": "\"if\" not necessary here, but i don't mind it", "url": "https://github.com/oracle/opengrok/pull/3350#discussion_r517239160", "createdAt": "2020-11-04T10:21:43Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/authorization/AuthorizationStack.java", "diffHunk": "@@ -219,7 +219,13 @@ protected boolean processStack(Nameable entity,\n             PluginDecisionPredicate pluginPredicate,\n             PluginSkippingPredicate skippingPredicate) {\n \n-        boolean overallDecision = true;\n+        Boolean overallDecision = null;\n+        boolean optionalFailure = false;\n+\n+        if (getStack().isEmpty()) {\n+            return true;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f6c94cb1db52712d02b817efebffdb7e16e647e"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU1NDg4Nw==", "bodyText": "I think it makes the code a little more easier to follow.", "url": "https://github.com/oracle/opengrok/pull/3350#discussion_r517554887", "createdAt": "2020-11-04T18:41:57Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/authorization/AuthorizationStack.java", "diffHunk": "@@ -219,7 +219,13 @@ protected boolean processStack(Nameable entity,\n             PluginDecisionPredicate pluginPredicate,\n             PluginSkippingPredicate skippingPredicate) {\n \n-        boolean overallDecision = true;\n+        Boolean overallDecision = null;\n+        boolean optionalFailure = false;\n+\n+        if (getStack().isEmpty()) {\n+            return true;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzOTE2MA=="}, "originalCommit": {"oid": "8f6c94cb1db52712d02b817efebffdb7e16e647e"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTc4NjE2OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/authorization/AuthorizationFrameworkTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMDoyMjo0OVrOHtR0Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODo1OToxNlrOHtlpqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzOTgzNQ==", "bodyText": "a test with two optionals, both returning different result, would be nice", "url": "https://github.com/oracle/opengrok/pull/3350#discussion_r517239835", "createdAt": "2020-11-04T10:22:49Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/authorization/AuthorizationFrameworkTest.java", "diffHunk": "@@ -654,6 +654,57 @@ public AuthorizationFrameworkTest(StackSetup setup) {\n                 NewTest(false, createAllowedProject()),\n                 NewTest(false, createAllowedGroup()))\n             },\n+            {\n+                new StackSetup(\n+                    NewStack(AuthControlFlag.REQUIRED,\n+                        new AuthorizationPlugin(AuthControlFlag.OPTIONAL, createTestFailingPlugin()),\n+                        new AuthorizationPlugin(AuthControlFlag.REQUIRED, createAllowedPrefixPlugin())),\n+                    // optional plugin returns false\n+                    // required plugin returns false => false\n+                    NewTest(false, createUnallowedProject()),\n+                    NewTest(false, createUnallowedGroup()),\n+                    // optional plugin returns false\n+                    // required plugin returns true => true\n+                    NewTest(true, createAllowedProject()),\n+                    NewTest(true, createAllowedGroup()))\n+            },\n+            {\n+                new StackSetup(\n+                    NewStack(AuthControlFlag.REQUIRED,\n+                            new AuthorizationPlugin(AuthControlFlag.OPTIONAL, createAllowedPrefixPlugin()),\n+                            new AuthorizationPlugin(AuthControlFlag.REQUIRED, createNotAllowedPrefixPlugin())),\n+                    // optional plugin returns false\n+                    // required plugin returns true => true\n+                    NewTest(true, createUnallowedProject()),\n+                    NewTest(true, createUnallowedGroup()),\n+                    // optional plugin returns true\n+                    // required plugin returns false => false\n+                    NewTest(false, createAllowedProject()),\n+                    NewTest(false, createAllowedGroup()))\n+            },\n+            {\n+                new StackSetup(\n+                    NewStack(AuthControlFlag.REQUIRED,\n+                            new AuthorizationPlugin(AuthControlFlag.OPTIONAL, createTestFailingPlugin())\n+                            ),\n+                    // optional plugin returns false => false\n+                    NewTest(false, createUnallowedProject()),\n+                    NewTest(false, createUnallowedGroup()),\n+                    NewTest(false, createAllowedProject()),\n+                    NewTest(false, createAllowedGroup()))\n+            },\n+            {\n+                new StackSetup(\n+                    NewStack(AuthControlFlag.REQUIRED,\n+                            new AuthorizationPlugin(AuthControlFlag.OPTIONAL, createAllowedPrefixPlugin())\n+                    ),\n+                    // optional plugin returns false => false\n+                    NewTest(false, createUnallowedProject()),\n+                    NewTest(false, createUnallowedGroup()),\n+                    // optional plugin returns true => true\n+                    NewTest(true, createAllowedProject()),\n+                    NewTest(true, createAllowedGroup()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f6c94cb1db52712d02b817efebffdb7e16e647e"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0MDM5MQ==", "bodyText": "a test including sufficient and optional would be nice too", "url": "https://github.com/oracle/opengrok/pull/3350#discussion_r517240391", "createdAt": "2020-11-04T10:23:43Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/authorization/AuthorizationFrameworkTest.java", "diffHunk": "@@ -654,6 +654,57 @@ public AuthorizationFrameworkTest(StackSetup setup) {\n                 NewTest(false, createAllowedProject()),\n                 NewTest(false, createAllowedGroup()))\n             },\n+            {\n+                new StackSetup(\n+                    NewStack(AuthControlFlag.REQUIRED,\n+                        new AuthorizationPlugin(AuthControlFlag.OPTIONAL, createTestFailingPlugin()),\n+                        new AuthorizationPlugin(AuthControlFlag.REQUIRED, createAllowedPrefixPlugin())),\n+                    // optional plugin returns false\n+                    // required plugin returns false => false\n+                    NewTest(false, createUnallowedProject()),\n+                    NewTest(false, createUnallowedGroup()),\n+                    // optional plugin returns false\n+                    // required plugin returns true => true\n+                    NewTest(true, createAllowedProject()),\n+                    NewTest(true, createAllowedGroup()))\n+            },\n+            {\n+                new StackSetup(\n+                    NewStack(AuthControlFlag.REQUIRED,\n+                            new AuthorizationPlugin(AuthControlFlag.OPTIONAL, createAllowedPrefixPlugin()),\n+                            new AuthorizationPlugin(AuthControlFlag.REQUIRED, createNotAllowedPrefixPlugin())),\n+                    // optional plugin returns false\n+                    // required plugin returns true => true\n+                    NewTest(true, createUnallowedProject()),\n+                    NewTest(true, createUnallowedGroup()),\n+                    // optional plugin returns true\n+                    // required plugin returns false => false\n+                    NewTest(false, createAllowedProject()),\n+                    NewTest(false, createAllowedGroup()))\n+            },\n+            {\n+                new StackSetup(\n+                    NewStack(AuthControlFlag.REQUIRED,\n+                            new AuthorizationPlugin(AuthControlFlag.OPTIONAL, createTestFailingPlugin())\n+                            ),\n+                    // optional plugin returns false => false\n+                    NewTest(false, createUnallowedProject()),\n+                    NewTest(false, createUnallowedGroup()),\n+                    NewTest(false, createAllowedProject()),\n+                    NewTest(false, createAllowedGroup()))\n+            },\n+            {\n+                new StackSetup(\n+                    NewStack(AuthControlFlag.REQUIRED,\n+                            new AuthorizationPlugin(AuthControlFlag.OPTIONAL, createAllowedPrefixPlugin())\n+                    ),\n+                    // optional plugin returns false => false\n+                    NewTest(false, createUnallowedProject()),\n+                    NewTest(false, createUnallowedGroup()),\n+                    // optional plugin returns true => true\n+                    NewTest(true, createAllowedProject()),\n+                    NewTest(true, createAllowedGroup()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzOTgzNQ=="}, "originalCommit": {"oid": "8f6c94cb1db52712d02b817efebffdb7e16e647e"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU2NDg0MA==", "bodyText": "added", "url": "https://github.com/oracle/opengrok/pull/3350#discussion_r517564840", "createdAt": "2020-11-04T18:59:16Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/authorization/AuthorizationFrameworkTest.java", "diffHunk": "@@ -654,6 +654,57 @@ public AuthorizationFrameworkTest(StackSetup setup) {\n                 NewTest(false, createAllowedProject()),\n                 NewTest(false, createAllowedGroup()))\n             },\n+            {\n+                new StackSetup(\n+                    NewStack(AuthControlFlag.REQUIRED,\n+                        new AuthorizationPlugin(AuthControlFlag.OPTIONAL, createTestFailingPlugin()),\n+                        new AuthorizationPlugin(AuthControlFlag.REQUIRED, createAllowedPrefixPlugin())),\n+                    // optional plugin returns false\n+                    // required plugin returns false => false\n+                    NewTest(false, createUnallowedProject()),\n+                    NewTest(false, createUnallowedGroup()),\n+                    // optional plugin returns false\n+                    // required plugin returns true => true\n+                    NewTest(true, createAllowedProject()),\n+                    NewTest(true, createAllowedGroup()))\n+            },\n+            {\n+                new StackSetup(\n+                    NewStack(AuthControlFlag.REQUIRED,\n+                            new AuthorizationPlugin(AuthControlFlag.OPTIONAL, createAllowedPrefixPlugin()),\n+                            new AuthorizationPlugin(AuthControlFlag.REQUIRED, createNotAllowedPrefixPlugin())),\n+                    // optional plugin returns false\n+                    // required plugin returns true => true\n+                    NewTest(true, createUnallowedProject()),\n+                    NewTest(true, createUnallowedGroup()),\n+                    // optional plugin returns true\n+                    // required plugin returns false => false\n+                    NewTest(false, createAllowedProject()),\n+                    NewTest(false, createAllowedGroup()))\n+            },\n+            {\n+                new StackSetup(\n+                    NewStack(AuthControlFlag.REQUIRED,\n+                            new AuthorizationPlugin(AuthControlFlag.OPTIONAL, createTestFailingPlugin())\n+                            ),\n+                    // optional plugin returns false => false\n+                    NewTest(false, createUnallowedProject()),\n+                    NewTest(false, createUnallowedGroup()),\n+                    NewTest(false, createAllowedProject()),\n+                    NewTest(false, createAllowedGroup()))\n+            },\n+            {\n+                new StackSetup(\n+                    NewStack(AuthControlFlag.REQUIRED,\n+                            new AuthorizationPlugin(AuthControlFlag.OPTIONAL, createAllowedPrefixPlugin())\n+                    ),\n+                    // optional plugin returns false => false\n+                    NewTest(false, createUnallowedProject()),\n+                    NewTest(false, createUnallowedGroup()),\n+                    // optional plugin returns true => true\n+                    NewTest(true, createAllowedProject()),\n+                    NewTest(true, createAllowedGroup()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzOTgzNQ=="}, "originalCommit": {"oid": "8f6c94cb1db52712d02b817efebffdb7e16e647e"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4869, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}