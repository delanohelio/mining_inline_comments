{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwMjkxMTM2", "number": 3130, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzoyNTo0M1rOD3gbwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzoyNjoxM1rOD3gcZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTI5NjY2OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/search/SettingsHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzoyNTo0NFrOGNyvSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMjoyMjozMlrOGOXgXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzExNTk3Nw==", "bodyText": "k is not very descriptive", "url": "https://github.com/oracle/opengrok/pull/3130#discussion_r417115977", "createdAt": "2020-04-29T07:25:44Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/search/SettingsHelper.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2011, 2019, Oracle and/or its affiliates. All rights reserved.\n+ * Portions copyright (c) 2011 Jens Elkner.\n+ * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.\n+ */\n+package org.opengrok.indexer.search;\n+\n+import org.apache.lucene.index.IndexReader;\n+import org.opengrok.indexer.configuration.Project;\n+import org.opengrok.indexer.index.IndexAnalysisSettings3;\n+import org.opengrok.indexer.index.IndexAnalysisSettingsAccessor;\n+import org.opengrok.indexer.index.IndexedSymlink;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+/**\n+ * Represents a helper class for accessing settings.\n+ * @author Jens Elkner\n+ */\n+public class SettingsHelper {\n+\n+    private final IndexReader reader;\n+\n+    /**\n+     * Key is Project name or empty string for null Project.\n+     */\n+    private Map<String, IndexAnalysisSettings3> mappedAnalysisSettings;\n+\n+    /**\n+     * Key is Project name or empty string for null Project. Map is ordered by\n+     * canonical length (ASC) and then canonical value (ASC).\n+     */\n+    private Map<String, Map<String, IndexedSymlink>> mappedIndexedSymlinks;\n+\n+    public SettingsHelper(IndexReader reader) {\n+        if (reader == null) {\n+            throw new IllegalArgumentException(\"reader is null\");\n+        }\n+        this.reader = reader;\n+    }\n+\n+    /**\n+     * Gets any mapped symlinks (after having called {@link #getSettings(String)}).\n+     * @return either a defined map or {@code null}\n+     */\n+    public Map<String, IndexedSymlink> getSymlinks(String projectName) {\n+        if (mappedIndexedSymlinks == null) {\n+            throw new IllegalStateException(\"getSettings() not yet called\");\n+        }\n+\n+        String k = projectName != null ? projectName : \"\";\n+        Map<String, IndexedSymlink> indexSymlinks = mappedIndexedSymlinks.get(k);\n+        if (indexSymlinks != null) {\n+            return Collections.unmodifiableMap(indexSymlinks);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Gets the persisted tabSize via {@link #getSettings(String)} if\n+     * available or returns the {@code proj} tabSize if available -- or zero.\n+     * @param proj a defined instance or {@code null} if no project is active\n+     * @return tabSize\n+     * @throws IOException if an I/O error occurs querying the initialized\n+     * reader\n+     */\n+    public int getTabSize(Project proj) throws IOException {\n+        String projectName = proj != null ? proj.getName() : null;\n+        IndexAnalysisSettings3 settings = getSettings(projectName);\n+        int tabSize;\n+        if (settings != null && settings.getTabSize() != null) {\n+            tabSize = settings.getTabSize();\n+        } else {\n+            tabSize = proj != null ? proj.getTabSize() : 0;\n+        }\n+        return tabSize;\n+    }\n+\n+    /**\n+     * Gets the settings for a specified project.\n+     * @param projectName a defined instance or {@code null} if no project is\n+     * active (or empty string to mean the same thing)\n+     * @return a defined instance or {@code null} if none is found\n+     * @throws IOException if an I/O error occurs querying the initialized reader\n+     */\n+    public IndexAnalysisSettings3 getSettings(String projectName) throws IOException {\n+        if (mappedAnalysisSettings == null) {\n+            IndexAnalysisSettingsAccessor dao = new IndexAnalysisSettingsAccessor();\n+            IndexAnalysisSettings3[] setts = dao.read(reader, Short.MAX_VALUE);\n+            map(setts);\n+        }\n+\n+        String k = projectName != null ? projectName : \"\";\n+        return mappedAnalysisSettings.get(k);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "497eb8c94314a1bc20d5469acf5159e9b6904f21"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxODM2NQ==", "bodyText": "Revised", "url": "https://github.com/oracle/opengrok/pull/3130#discussion_r417718365", "createdAt": "2020-04-30T02:22:32Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/search/SettingsHelper.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2011, 2019, Oracle and/or its affiliates. All rights reserved.\n+ * Portions copyright (c) 2011 Jens Elkner.\n+ * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.\n+ */\n+package org.opengrok.indexer.search;\n+\n+import org.apache.lucene.index.IndexReader;\n+import org.opengrok.indexer.configuration.Project;\n+import org.opengrok.indexer.index.IndexAnalysisSettings3;\n+import org.opengrok.indexer.index.IndexAnalysisSettingsAccessor;\n+import org.opengrok.indexer.index.IndexedSymlink;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+/**\n+ * Represents a helper class for accessing settings.\n+ * @author Jens Elkner\n+ */\n+public class SettingsHelper {\n+\n+    private final IndexReader reader;\n+\n+    /**\n+     * Key is Project name or empty string for null Project.\n+     */\n+    private Map<String, IndexAnalysisSettings3> mappedAnalysisSettings;\n+\n+    /**\n+     * Key is Project name or empty string for null Project. Map is ordered by\n+     * canonical length (ASC) and then canonical value (ASC).\n+     */\n+    private Map<String, Map<String, IndexedSymlink>> mappedIndexedSymlinks;\n+\n+    public SettingsHelper(IndexReader reader) {\n+        if (reader == null) {\n+            throw new IllegalArgumentException(\"reader is null\");\n+        }\n+        this.reader = reader;\n+    }\n+\n+    /**\n+     * Gets any mapped symlinks (after having called {@link #getSettings(String)}).\n+     * @return either a defined map or {@code null}\n+     */\n+    public Map<String, IndexedSymlink> getSymlinks(String projectName) {\n+        if (mappedIndexedSymlinks == null) {\n+            throw new IllegalStateException(\"getSettings() not yet called\");\n+        }\n+\n+        String k = projectName != null ? projectName : \"\";\n+        Map<String, IndexedSymlink> indexSymlinks = mappedIndexedSymlinks.get(k);\n+        if (indexSymlinks != null) {\n+            return Collections.unmodifiableMap(indexSymlinks);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Gets the persisted tabSize via {@link #getSettings(String)} if\n+     * available or returns the {@code proj} tabSize if available -- or zero.\n+     * @param proj a defined instance or {@code null} if no project is active\n+     * @return tabSize\n+     * @throws IOException if an I/O error occurs querying the initialized\n+     * reader\n+     */\n+    public int getTabSize(Project proj) throws IOException {\n+        String projectName = proj != null ? proj.getName() : null;\n+        IndexAnalysisSettings3 settings = getSettings(projectName);\n+        int tabSize;\n+        if (settings != null && settings.getTabSize() != null) {\n+            tabSize = settings.getTabSize();\n+        } else {\n+            tabSize = proj != null ? proj.getTabSize() : 0;\n+        }\n+        return tabSize;\n+    }\n+\n+    /**\n+     * Gets the settings for a specified project.\n+     * @param projectName a defined instance or {@code null} if no project is\n+     * active (or empty string to mean the same thing)\n+     * @return a defined instance or {@code null} if none is found\n+     * @throws IOException if an I/O error occurs querying the initialized reader\n+     */\n+    public IndexAnalysisSettings3 getSettings(String projectName) throws IOException {\n+        if (mappedAnalysisSettings == null) {\n+            IndexAnalysisSettingsAccessor dao = new IndexAnalysisSettingsAccessor();\n+            IndexAnalysisSettings3[] setts = dao.read(reader, Short.MAX_VALUE);\n+            map(setts);\n+        }\n+\n+        String k = projectName != null ? projectName : \"\";\n+        return mappedAnalysisSettings.get(k);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzExNTk3Nw=="}, "originalCommit": {"oid": "497eb8c94314a1bc20d5469acf5159e9b6904f21"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTI5ODMxOnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/search/SettingsHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzoyNjoxM1rOGNywRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMjoyMToyMVrOGOXfMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzExNjIyOQ==", "bodyText": "is it problem to call it here getSettings()?", "url": "https://github.com/oracle/opengrok/pull/3130#discussion_r417116229", "createdAt": "2020-04-29T07:26:13Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/search/SettingsHelper.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2011, 2019, Oracle and/or its affiliates. All rights reserved.\n+ * Portions copyright (c) 2011 Jens Elkner.\n+ * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.\n+ */\n+package org.opengrok.indexer.search;\n+\n+import org.apache.lucene.index.IndexReader;\n+import org.opengrok.indexer.configuration.Project;\n+import org.opengrok.indexer.index.IndexAnalysisSettings3;\n+import org.opengrok.indexer.index.IndexAnalysisSettingsAccessor;\n+import org.opengrok.indexer.index.IndexedSymlink;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+/**\n+ * Represents a helper class for accessing settings.\n+ * @author Jens Elkner\n+ */\n+public class SettingsHelper {\n+\n+    private final IndexReader reader;\n+\n+    /**\n+     * Key is Project name or empty string for null Project.\n+     */\n+    private Map<String, IndexAnalysisSettings3> mappedAnalysisSettings;\n+\n+    /**\n+     * Key is Project name or empty string for null Project. Map is ordered by\n+     * canonical length (ASC) and then canonical value (ASC).\n+     */\n+    private Map<String, Map<String, IndexedSymlink>> mappedIndexedSymlinks;\n+\n+    public SettingsHelper(IndexReader reader) {\n+        if (reader == null) {\n+            throw new IllegalArgumentException(\"reader is null\");\n+        }\n+        this.reader = reader;\n+    }\n+\n+    /**\n+     * Gets any mapped symlinks (after having called {@link #getSettings(String)}).\n+     * @return either a defined map or {@code null}\n+     */\n+    public Map<String, IndexedSymlink> getSymlinks(String projectName) {\n+        if (mappedIndexedSymlinks == null) {\n+            throw new IllegalStateException(\"getSettings() not yet called\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "497eb8c94314a1bc20d5469acf5159e9b6904f21"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxODA2Nw==", "bodyText": "No doesn't seem so", "url": "https://github.com/oracle/opengrok/pull/3130#discussion_r417718067", "createdAt": "2020-04-30T02:21:21Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/search/SettingsHelper.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2011, 2019, Oracle and/or its affiliates. All rights reserved.\n+ * Portions copyright (c) 2011 Jens Elkner.\n+ * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.\n+ */\n+package org.opengrok.indexer.search;\n+\n+import org.apache.lucene.index.IndexReader;\n+import org.opengrok.indexer.configuration.Project;\n+import org.opengrok.indexer.index.IndexAnalysisSettings3;\n+import org.opengrok.indexer.index.IndexAnalysisSettingsAccessor;\n+import org.opengrok.indexer.index.IndexedSymlink;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+/**\n+ * Represents a helper class for accessing settings.\n+ * @author Jens Elkner\n+ */\n+public class SettingsHelper {\n+\n+    private final IndexReader reader;\n+\n+    /**\n+     * Key is Project name or empty string for null Project.\n+     */\n+    private Map<String, IndexAnalysisSettings3> mappedAnalysisSettings;\n+\n+    /**\n+     * Key is Project name or empty string for null Project. Map is ordered by\n+     * canonical length (ASC) and then canonical value (ASC).\n+     */\n+    private Map<String, Map<String, IndexedSymlink>> mappedIndexedSymlinks;\n+\n+    public SettingsHelper(IndexReader reader) {\n+        if (reader == null) {\n+            throw new IllegalArgumentException(\"reader is null\");\n+        }\n+        this.reader = reader;\n+    }\n+\n+    /**\n+     * Gets any mapped symlinks (after having called {@link #getSettings(String)}).\n+     * @return either a defined map or {@code null}\n+     */\n+    public Map<String, IndexedSymlink> getSymlinks(String projectName) {\n+        if (mappedIndexedSymlinks == null) {\n+            throw new IllegalStateException(\"getSettings() not yet called\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzExNjIyOQ=="}, "originalCommit": {"oid": "497eb8c94314a1bc20d5469acf5159e9b6904f21"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 226, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}