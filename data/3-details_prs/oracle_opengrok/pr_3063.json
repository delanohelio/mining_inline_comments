{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MTcxOTE3", "number": 3063, "title": "Upgrade to JFlex 1.8.2", "bodyText": "Hello,\nPlease consider for integration this patch to upgrade to the recent JFlex 1.8.2, with the best feature the reduced memory footprint for Unicode scanners from multiple megabytes to scores of kilobytes.\nThis patch accommodates JFlex's widening at @vladak's request the yychar field to long from int. After a position of Integer.MAX_VALUE, however, Lucene would not be able to index postings for any matches, so this patch just silently drops any such matches.\nThis patch also removes the regex logic rewrite for a few scanners (Java, JavaScript, JSON, Plain, PlainFull) to limit tokens to the Lucene limit (32,766) and updates JFlexTokenizer generally for all scanners to truncate tokens larger than the limit (and to silently drop above). (I question the utility of tokens of this huge, limited size; but leading wildcards possibly make huge tokens still useful.)\nBTW version 1.8 includes a PR of mine \ud83d\ude04 so we can edit lexh include files, and the JFlex plugin will recognize the modified include files and regenerate any affected lexers. With version 1.7 we have to touch the lex files too to get the lexers rebuilt.\nI see v1.8.x also includes some other updates requested by @vladak, such as Javadoc fixes which make it no longer necessary to rewrite <tt> and <code>.\nThank you.", "createdAt": "2020-03-07T17:10:44Z", "url": "https://github.com/oracle/opengrok/pull/3063", "merged": true, "mergeCommit": {"oid": "b3041a93d7262eb6ab1bfecf1c16f1d3c4dcbc24"}, "closed": true, "closedAt": "2020-07-20T08:27:47Z", "author": {"login": "idodeclare"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcd2kQvABqjMyOTgxNTcyNzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc2KCOAABqjM1NjEyNDE0NjA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1071ff13cdbc1dbd6e81ec4d99f6157481213369", "author": {"user": {"login": "idodeclare", "name": "C Fraire"}}, "url": "https://github.com/oracle/opengrok/commit/1071ff13cdbc1dbd6e81ec4d99f6157481213369", "committedDate": "2020-03-07T16:42:58Z", "message": "Upgrade to JFlex 1.8.1"}, "afterCommit": {"oid": "497aef07ff0668da51b1a51cbd811655a3819412", "author": {"user": {"login": "idodeclare", "name": "C Fraire"}}, "url": "https://github.com/oracle/opengrok/commit/497aef07ff0668da51b1a51cbd811655a3819412", "committedDate": "2020-05-04T03:04:08Z", "message": "Upgrade to JFlex 1.8.2"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "497aef07ff0668da51b1a51cbd811655a3819412", "author": {"user": {"login": "idodeclare", "name": "C Fraire"}}, "url": "https://github.com/oracle/opengrok/commit/497aef07ff0668da51b1a51cbd811655a3819412", "committedDate": "2020-05-04T03:04:08Z", "message": "Upgrade to JFlex 1.8.2"}, "afterCommit": {"oid": "b1587490ce2dbb99bdf0da1f28a8b16e4eba7a33", "author": {"user": {"login": "idodeclare", "name": "C Fraire"}}, "url": "https://github.com/oracle/opengrok/commit/b1587490ce2dbb99bdf0da1f28a8b16e4eba7a33", "committedDate": "2020-05-04T16:27:24Z", "message": "Upgrade to JFlex 1.8.2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MDQ5NDgz", "url": "https://github.com/oracle/opengrok/pull/3063#pullrequestreview-449049483", "createdAt": "2020-07-15T15:01:45Z", "commit": {"oid": "b1587490ce2dbb99bdf0da1f28a8b16e4eba7a33"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTowMTo0NlrOGyCdIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTowMTo0NlrOGyCdIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyMjIxMQ==", "bodyText": "why is this suddenly needed ? What Reader suffers from the 0 return problem specifically ?", "url": "https://github.com/oracle/opengrok/pull/3063#discussion_r455122211", "createdAt": "2020-07-15T15:01:46Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/TextAnalyzer.java", "diffHunk": "@@ -91,10 +91,13 @@ public Xrefer writeXref(WriteXrefArgs args) throws IOException {\n      */\n     protected abstract Xrefer newXref(Reader reader);\n \n+    /**\n+     * Gets a BOM-stripped {@link Reader} (default UTF-8 charset) of the\n+     * specified {@code stream}, wrapped in a {@link ZeroReader}.\n+     */\n     protected Reader getReader(InputStream stream) throws IOException {\n-        // SRCROOT is read with UTF-8 as a default.\n-        return IOUtils.createBOMStrippedReader(stream,\n-            StandardCharsets.UTF_8.name());\n+        // sourceRoot is read with UTF-8 as a default.\n+        return new ZeroReader(IOUtils.createBOMStrippedReader(stream,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1587490ce2dbb99bdf0da1f28a8b16e4eba7a33"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MDU2MDM5", "url": "https://github.com/oracle/opengrok/pull/3063#pullrequestreview-449056039", "createdAt": "2020-07-15T15:09:21Z", "commit": {"oid": "b1587490ce2dbb99bdf0da1f28a8b16e4eba7a33"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTowOToyMlrOGyCxUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTowOToyMlrOGyCxUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyNzM3OA==", "bodyText": "nit/question: why not use this.didSetAttribsValues like in setAttribs() ?", "url": "https://github.com/oracle/opengrok/pull/3063#discussion_r455127378", "createdAt": "2020-07-15T15:09:22Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/JFlexTokenizer.java", "diffHunk": "@@ -119,18 +128,44 @@ public void sourceCodeSeen(SourceCodeSeenEvent evt) {\n \n     /**\n      * Clears, and then resets the instances attributes per the specified\n-     * arguments.\n+     * arguments. If {@code start} or {@code end} is past\n+     * {@link Integer#MAX_VALUE}, then only the clearing occurs.\n      * @param str the matched symbol\n      * @param start the match start position\n      * @param end the match end position\n      */\n-    protected void setAttribs(String str, int start, int end) {\n+    protected void setAttribs(String str, long start, long end) {\n+        clearAttributesEtc();\n+        if (start < Integer.MAX_VALUE && end < Integer.MAX_VALUE) {\n+\n+            if (str.length() > LUCENE_MAX_TOKEN_LENGTH) {\n+                str = str.substring(0, LUCENE_MAX_TOKEN_LENGTH);\n+                /*\n+                 * Leave `end` unadjusted. The truncated string will represent\n+                 * the full source text, similar to how a Lucene synonym is an\n+                 * alternative representation of full source text.\n+                 */\n+            }\n+\n+            /*\n+             * FIXME increasing below by one(default) might be tricky, need more\n+             * analysis after lucene upgrade to 3.5 below is most probably not\n+             * even needed.\n+             */\n+            this.posIncrAtt.setPositionIncrement(1);\n+            this.termAtt.setEmpty();\n+            this.termAtt.append(str);\n+            this.offsetAtt.setOffset((int) start, (int) end);\n+            this.didSetAttribsValues = true;\n+        }\n+    }\n+\n+    /**\n+     * Calls {@link #clearAttributes()}, and also resets some additional tracked\n+     * state.\n+     */\n+    protected void clearAttributesEtc() {\n         clearAttributes();\n-        //FIXME increasing below by one(default) might be tricky, need more analysis\n-        // after lucene upgrade to 3.5 below is most probably not even needed        \n-        this.posIncrAtt.setPositionIncrement(1);\n-        this.termAtt.setEmpty();\n-        this.termAtt.append(str);\n-        this.offsetAtt.setOffset(start, end);\n+        didSetAttribsValues = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1587490ce2dbb99bdf0da1f28a8b16e4eba7a33"}, "originalPosition": 119}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "626aea7046a9410f96e0a85d7984e21ef0e9c5a1", "author": {"user": {"login": "idodeclare", "name": "C Fraire"}}, "url": "https://github.com/oracle/opengrok/commit/626aea7046a9410f96e0a85d7984e21ef0e9c5a1", "committedDate": "2020-07-15T17:24:12Z", "message": "Upgrade to JFlex 1.8.2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f05b18ba2b43837e0686bf13c5d32c172c1d324", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/7f05b18ba2b43837e0686bf13c5d32c172c1d324", "committedDate": "2020-07-16T01:14:30Z", "message": "set JFlex encoding explicitly\n\nfixes #3173"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b1587490ce2dbb99bdf0da1f28a8b16e4eba7a33", "author": {"user": {"login": "idodeclare", "name": "C Fraire"}}, "url": "https://github.com/oracle/opengrok/commit/b1587490ce2dbb99bdf0da1f28a8b16e4eba7a33", "committedDate": "2020-05-04T16:27:24Z", "message": "Upgrade to JFlex 1.8.2"}, "afterCommit": {"oid": "7f05b18ba2b43837e0686bf13c5d32c172c1d324", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/7f05b18ba2b43837e0686bf13c5d32c172c1d324", "committedDate": "2020-07-16T01:14:30Z", "message": "set JFlex encoding explicitly\n\nfixes #3173"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 298, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}