{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExODAxMjA1", "number": 3333, "title": "Fix for #3307: Make GitRepository#isWorking synchronized to avoid read/write proble\u2026", "bodyText": "\u2026ms with mutable working field. Check whether git is working once per JVM run and don't recheck every time.", "createdAt": "2020-10-28T19:55:22Z", "url": "https://github.com/oracle/opengrok/pull/3333", "merged": true, "mergeCommit": {"oid": "c47b7e716a31dc48f006bc51fc330c0b946affe3"}, "closed": true, "closedAt": "2020-11-02T09:28:57Z", "author": {"login": "azakkerman"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXIT8VgFqTUxOTI3NzY2OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdYTdc7gBqjM5NDU0MDc2MzY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5Mjc3NjY4", "url": "https://github.com/oracle/opengrok/pull/3333#pullrequestreview-519277668", "createdAt": "2020-10-29T01:58:30Z", "commit": {"oid": "c715d131d61e4d9eb39386ec290546c95ccdea72"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMTo1ODozMFrOHqEY5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMTo1ODozMFrOHqEY5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg3NDE0OA==", "bodyText": "How about double-locking inside the method (with proper volatile working) as the lowest-cost synchronization vs always synchronizing?\n(I would think this affects all RepositoryInfo sub-classes but as just a mostly-harmless, occasional redundant-run. Or am I misunderstanding?)", "url": "https://github.com/oracle/opengrok/pull/3333#discussion_r513874148", "createdAt": "2020-10-29T01:58:30Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java", "diffHunk": "@@ -518,24 +528,32 @@ boolean isNestable() {\n         return true;\n     }\n \n+    private static boolean isGitWorking(String repoCommand) {\n+        Executor exec = new Executor(new String[]{repoCommand, \"--version\"});\n+        if (exec.exec(false) == 0) {\n+            final String outputVersion = exec.getOutputString();\n+            final String version = outputVersion.replaceAll(\".*? version (\\\\d+(\\\\.\\\\d+)*).*\", \"$1\");\n+            try {\n+                return Version.from(version).compareTo(MINIMUM_VERSION) >= 0;\n+            } catch (NumberFormatException ex) {\n+                LOGGER.log(Level.WARNING, String.format(\"Unable to detect git version from %s\", outputVersion), ex);\n+            }\n+        }\n+        return false;\n+    }\n+\n     @Override\n-    public boolean isWorking() {\n+    public synchronized boolean isWorking() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c715d131d61e4d9eb39386ec290546c95ccdea72"}, "originalPosition": 44}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c715d131d61e4d9eb39386ec290546c95ccdea72", "author": {"user": {"login": "azakkerman", "name": "Anatoly Akkerman"}}, "url": "https://github.com/oracle/opengrok/commit/c715d131d61e4d9eb39386ec290546c95ccdea72", "committedDate": "2020-10-28T19:53:40Z", "message": "Fix for #3307: Make isWorking synchronized to avoid read/write problems with mutable working field. Check whether git is working once per JVM run and don't recheck every time."}, "afterCommit": {"oid": "84deb24387ba9cb7b1aeb0b1407f64a8b54719ca", "author": {"user": {"login": "azakkerman", "name": "Anatoly Akkerman"}}, "url": "https://github.com/oracle/opengrok/commit/84deb24387ba9cb7b1aeb0b1407f64a8b54719ca", "committedDate": "2020-10-29T12:04:38Z", "message": "Fix for #3307: Make isWorking synchronized to avoid read/write problems with mutable working field. Check whether git is working once per JVM run and don't recheck every time."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwMTY2NTkz", "url": "https://github.com/oracle/opengrok/pull/3333#pullrequestreview-520166593", "createdAt": "2020-10-29T23:54:20Z", "commit": {"oid": "84deb24387ba9cb7b1aeb0b1407f64a8b54719ca"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMzo1NDoyMFrOHqyqlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMzo1NjowN1rOHqys4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMjM0MA==", "bodyText": "My meaning was org.opengrok.indexer.util.LazilyInstantiate, which is Jacob Zimmerman's tidy implementation that synchronizes until initialized and soon thereafter doesn't need to even test the state.", "url": "https://github.com/oracle/opengrok/pull/3333#discussion_r514632340", "createdAt": "2020-10-29T23:54:20Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java", "diffHunk": "@@ -43,6 +43,8 @@\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n+import org.apache.commons.lang3.concurrent.ConcurrentException;\n+import org.apache.commons.lang3.concurrent.LazyInitializer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84deb24387ba9cb7b1aeb0b1407f64a8b54719ca"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMjkzMA==", "bodyText": "org.opengrok.indexer.util.LazilyInstantiate would do the synchronization. Would this method need to be synchronized?", "url": "https://github.com/oracle/opengrok/pull/3333#discussion_r514632930", "createdAt": "2020-10-29T23:56:07Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java", "diffHunk": "@@ -518,24 +528,32 @@ boolean isNestable() {\n         return true;\n     }\n \n+    private static boolean isGitWorking(String repoCommand) {\n+        Executor exec = new Executor(new String[]{repoCommand, \"--version\"});\n+        if (exec.exec(false) == 0) {\n+            final String outputVersion = exec.getOutputString();\n+            final String version = outputVersion.replaceAll(\".*? version (\\\\d+(\\\\.\\\\d+)*).*\", \"$1\");\n+            try {\n+                return Version.from(version).compareTo(MINIMUM_VERSION) >= 0;\n+            } catch (NumberFormatException ex) {\n+                LOGGER.log(Level.WARNING, String.format(\"Unable to detect git version from %s\", outputVersion), ex);\n+            }\n+        }\n+        return false;\n+    }\n+\n     @Override\n-    public boolean isWorking() {\n+    public synchronized boolean isWorking() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg3NDE0OA=="}, "originalCommit": {"oid": "c715d131d61e4d9eb39386ec290546c95ccdea72"}, "originalPosition": 44}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "84deb24387ba9cb7b1aeb0b1407f64a8b54719ca", "author": {"user": {"login": "azakkerman", "name": "Anatoly Akkerman"}}, "url": "https://github.com/oracle/opengrok/commit/84deb24387ba9cb7b1aeb0b1407f64a8b54719ca", "committedDate": "2020-10-29T12:04:38Z", "message": "Fix for #3307: Make isWorking synchronized to avoid read/write problems with mutable working field. Check whether git is working once per JVM run and don't recheck every time."}, "afterCommit": {"oid": "b9ce159b1564824171abd8a37416a03ccfadded6", "author": {"user": {"login": "azakkerman", "name": "Anatoly Akkerman"}}, "url": "https://github.com/oracle/opengrok/commit/b9ce159b1564824171abd8a37416a03ccfadded6", "committedDate": "2020-10-30T00:14:14Z", "message": "Fix for #3307: Make isWorking synchronized to avoid read/write problems with mutable working field. Check whether git is working once per JVM run and don't recheck every time."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b9ce159b1564824171abd8a37416a03ccfadded6", "author": {"user": {"login": "azakkerman", "name": "Anatoly Akkerman"}}, "url": "https://github.com/oracle/opengrok/commit/b9ce159b1564824171abd8a37416a03ccfadded6", "committedDate": "2020-10-30T00:14:14Z", "message": "Fix for #3307: Make isWorking synchronized to avoid read/write problems with mutable working field. Check whether git is working once per JVM run and don't recheck every time."}, "afterCommit": {"oid": "01daad534769caaccc71defb1adc436bdec7114a", "author": {"user": {"login": "azakkerman", "name": "Anatoly Akkerman"}}, "url": "https://github.com/oracle/opengrok/commit/01daad534769caaccc71defb1adc436bdec7114a", "committedDate": "2020-10-30T00:50:56Z", "message": "Fix for #3307: Make isWorking synchronized to avoid read/write problems with mutable working field. Check whether git is working once per JVM run and don't recheck every time."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMTI0NjE4", "url": "https://github.com/oracle/opengrok/pull/3333#pullrequestreview-521124618", "createdAt": "2020-10-31T09:09:36Z", "commit": {"oid": "01daad534769caaccc71defb1adc436bdec7114a"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwOTowOTozNlrOHrmJqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwOToxMjo1NlrOHrmKzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ3NTg4MA==", "bodyText": "I wouldn't mind a Class parameter instead of string. @vladak ?", "url": "https://github.com/oracle/opengrok/pull/3333#discussion_r515475880", "createdAt": "2020-10-31T09:09:36Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/Repository.java", "diffHunk": "@@ -548,6 +548,16 @@ static Boolean checkCmd(String... args) {\n         return exec.exec(false) == 0;\n     }\n \n+    protected static String getCommand(String className, String propertyKey, String fallbackCommand) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01daad534769caaccc71defb1adc436bdec7114a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ3NjEyOA==", "bodyText": "As this is not used anywhere else it does not need to be generic (wrt to the repository command). You can get the command inside this function and do just\nLazilyInstantiate.using(GitRepository::isGitWorking);", "url": "https://github.com/oracle/opengrok/pull/3333#discussion_r515476128", "createdAt": "2020-10-31T09:12:25Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java", "diffHunk": "@@ -95,6 +96,28 @@\n      */\n     private static final Version MINIMUM_VERSION = new Version(2, 1, 2);\n \n+    /**\n+     * This is a static replacement for 'working' field. Effectively, check if git is working once in a JVM\n+     * instead of calling it for every GitRepository instance.\n+     */\n+    private static final LazilyInstantiate<Boolean> GIT_IS_WORKING = LazilyInstantiate.using(\n+            () -> isGitWorking(getCommand(GitRepository.class.getCanonicalName(), CMD_PROPERTY_KEY, CMD_FALLBACK)));\n+\n+    private static boolean isGitWorking(String repoCommand) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01daad534769caaccc71defb1adc436bdec7114a"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ3NjE3NA==", "bodyText": "Would you mind moving this private static method below the constructor at least?", "url": "https://github.com/oracle/opengrok/pull/3333#discussion_r515476174", "createdAt": "2020-10-31T09:12:56Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java", "diffHunk": "@@ -95,6 +96,28 @@\n      */\n     private static final Version MINIMUM_VERSION = new Version(2, 1, 2);\n \n+    /**\n+     * This is a static replacement for 'working' field. Effectively, check if git is working once in a JVM\n+     * instead of calling it for every GitRepository instance.\n+     */\n+    private static final LazilyInstantiate<Boolean> GIT_IS_WORKING = LazilyInstantiate.using(\n+            () -> isGitWorking(getCommand(GitRepository.class.getCanonicalName(), CMD_PROPERTY_KEY, CMD_FALLBACK)));\n+\n+    private static boolean isGitWorking(String repoCommand) {\n+        Executor exec = new Executor(new String[]{repoCommand, \"--version\"});\n+        if (exec.exec(false) == 0) {\n+            final String outputVersion = exec.getOutputString();\n+            final String version = outputVersion.replaceAll(\".*? version (\\\\d+(\\\\.\\\\d+)*).*\", \"$1\");\n+            try {\n+                return Version.from(version).compareTo(MINIMUM_VERSION) >= 0;\n+            } catch (NumberFormatException ex) {\n+                LOGGER.log(Level.WARNING, String.format(\"Unable to detect git version from %s\", outputVersion), ex);\n+            }\n+        }\n+        return false;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01daad534769caaccc71defb1adc436bdec7114a"}, "originalPosition": 31}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "01daad534769caaccc71defb1adc436bdec7114a", "author": {"user": {"login": "azakkerman", "name": "Anatoly Akkerman"}}, "url": "https://github.com/oracle/opengrok/commit/01daad534769caaccc71defb1adc436bdec7114a", "committedDate": "2020-10-30T00:50:56Z", "message": "Fix for #3307: Make isWorking synchronized to avoid read/write problems with mutable working field. Check whether git is working once per JVM run and don't recheck every time."}, "afterCommit": {"oid": "8e2d7e678c555b31383f67d5d861c59f853f8f0b", "author": {"user": {"login": "azakkerman", "name": "Anatoly Akkerman"}}, "url": "https://github.com/oracle/opengrok/commit/8e2d7e678c555b31383f67d5d861c59f853f8f0b", "committedDate": "2020-11-01T04:54:48Z", "message": "Fix for #3307: Make isWorking synchronized to avoid read/write problems with mutable working field. Check whether git is working once per JVM run and don't recheck every time."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8e2d7e678c555b31383f67d5d861c59f853f8f0b", "author": {"user": {"login": "azakkerman", "name": "Anatoly Akkerman"}}, "url": "https://github.com/oracle/opengrok/commit/8e2d7e678c555b31383f67d5d861c59f853f8f0b", "committedDate": "2020-11-01T04:54:48Z", "message": "Fix for #3307: Make isWorking synchronized to avoid read/write problems with mutable working field. Check whether git is working once per JVM run and don't recheck every time."}, "afterCommit": {"oid": "1b333dffa5a49803dd3e2ba7b6192b1c7819566b", "author": {"user": {"login": "azakkerman", "name": "Anatoly Akkerman"}}, "url": "https://github.com/oracle/opengrok/commit/1b333dffa5a49803dd3e2ba7b6192b1c7819566b", "committedDate": "2020-11-01T05:25:30Z", "message": "Fix for #3307: Make isWorking synchronized to avoid read/write problems with mutable working field. Check whether git is working once per JVM run and don't recheck every time."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b700946dd78aedfc4a0dacc664753323f7b42154", "author": {"user": {"login": "azakkerman", "name": "Anatoly Akkerman"}}, "url": "https://github.com/oracle/opengrok/commit/b700946dd78aedfc4a0dacc664753323f7b42154", "committedDate": "2020-11-01T17:31:38Z", "message": "Fix for #3307: Make isWorking synchronized to avoid read/write problems with mutable working field. Check whether git is working once per JVM run and don't recheck every time."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1b333dffa5a49803dd3e2ba7b6192b1c7819566b", "author": {"user": {"login": "azakkerman", "name": "Anatoly Akkerman"}}, "url": "https://github.com/oracle/opengrok/commit/1b333dffa5a49803dd3e2ba7b6192b1c7819566b", "committedDate": "2020-11-01T05:25:30Z", "message": "Fix for #3307: Make isWorking synchronized to avoid read/write problems with mutable working field. Check whether git is working once per JVM run and don't recheck every time."}, "afterCommit": {"oid": "b700946dd78aedfc4a0dacc664753323f7b42154", "author": {"user": {"login": "azakkerman", "name": "Anatoly Akkerman"}}, "url": "https://github.com/oracle/opengrok/commit/b700946dd78aedfc4a0dacc664753323f7b42154", "committedDate": "2020-11-01T17:31:38Z", "message": "Fix for #3307: Make isWorking synchronized to avoid read/write problems with mutable working field. Check whether git is working once per JVM run and don't recheck every time."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 113, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}