{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMzA3NzYx", "number": 3056, "title": "Annotation API", "bodyText": "This change add simple annotation API.\nLimitations:\n\nno support for paging\ndescription is HTML encoded\n\nWhile testing I found out that Git annotations are broken so fix for that is included.", "createdAt": "2020-02-26T14:28:24Z", "url": "https://github.com/oracle/opengrok/pull/3056", "merged": true, "mergeCommit": {"oid": "c4679defee8271b273806331f6fe9da0a43e63df"}, "closed": true, "closedAt": "2020-03-12T14:29:31Z", "author": {"login": "vladak"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIIBTAAFqTM2NDk2MzY5Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcM77MvABqjMxMjI4ODE5MzY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0OTYzNjk3", "url": "https://github.com/oracle/opengrok/pull/3056#pullrequestreview-364963697", "createdAt": "2020-02-26T14:53:09Z", "commit": {"oid": "c74f3d552da703e568a8b4ff8259f0220463c10d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNDo1MzowOVrOFuuoNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNDo1ODowMFrOFuu1Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU0Mjc3Mg==", "bodyText": "I don't see this being used in this changeset, was it a missing import?", "url": "https://github.com/oracle/opengrok/pull/3056#discussion_r384542772", "createdAt": "2020-02-26T14:53:09Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/Annotation.java", "diffHunk": "@@ -24,6 +24,7 @@\n \n package org.opengrok.indexer.history;\n \n+import com.fasterxml.jackson.annotation.JsonProperty;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c74f3d552da703e568a8b4ff8259f0220463c10d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU0NjEyNw==", "bodyText": "Could you refactor this function to throw related exceptions and map these exceptions in exception mapper? It would make it obvious and without side effects. If I imported this function from a library I would not know what it does ... it takes a path and a response for some reason and returning a file.\nAlso a javadoc on public util method would not hurt.", "url": "https://github.com/oracle/opengrok/pull/3056#discussion_r384546127", "createdAt": "2020-02-26T14:58:00Z", "author": {"login": "tulinkry"}, "path": "opengrok-web/src/main/java/org/opengrok/web/util/FileUtil.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.web.util;\n+\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.File;\n+import java.io.IOException;\n+\n+public class FileUtil {\n+\n+    private static final RuntimeEnvironment env = RuntimeEnvironment.getInstance();\n+\n+    public static File getFile(String path, HttpServletResponse response) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c74f3d552da703e568a8b4ff8259f0220463c10d"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0OTY4NDE2", "url": "https://github.com/oracle/opengrok/pull/3056#pullrequestreview-364968416", "createdAt": "2020-02-26T14:58:28Z", "commit": {"oid": "c74f3d552da703e568a8b4ff8259f0220463c10d"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNDo1ODoyOVrOFuu2ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNDo1OTozMlrOFuu5Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU0NjQ0Mg==", "bodyText": "what is the number?", "url": "https://github.com/oracle/opengrok/pull/3056#discussion_r384546442", "createdAt": "2020-02-26T14:58:29Z", "author": {"login": "tulinkry"}, "path": "apiary.apib", "diffHunk": "@@ -6,6 +6,31 @@ OpenGrok RESTful API documentation. The following endpoints are accessible under\n \n Besides `/suggester` and `/search` endpoints, everything is accessible from `localhost` only.\n \n+## Annotation [/annotation{?path}]\n+\n+### Get annotation for a file [GET]\n+\n++ Parameters\n+  + path (string) - path of file, relative to source root\n+\n++ Response 200 (application/json)\n+  + Body\n+\n+            [\n+              {\n+                \"number\": 1,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c74f3d552da703e568a8b4ff8259f0220463c10d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU0NjY5MQ==", "bodyText": "can have long naming \"description\"", "url": "https://github.com/oracle/opengrok/pull/3056#discussion_r384546691", "createdAt": "2020-02-26T14:58:49Z", "author": {"login": "tulinkry"}, "path": "apiary.apib", "diffHunk": "@@ -6,6 +6,31 @@ OpenGrok RESTful API documentation. The following endpoints are accessible under\n \n Besides `/suggester` and `/search` endpoints, everything is accessible from `localhost` only.\n \n+## Annotation [/annotation{?path}]\n+\n+### Get annotation for a file [GET]\n+\n++ Parameters\n+  + path (string) - path of file, relative to source root\n+\n++ Response 200 (application/json)\n+  + Body\n+\n+            [\n+              {\n+                \"number\": 1,\n+                \"revision\": \"e2736ff6\",\n+                \"author\": \"Vladimir Kotal\",\n+                \"desc\": \"changeset:&nbsp;e2736ff6&lt;br/&gt;summary:&nbsp;add&nbsp;microbadges&lt;br/&gt;user:&nbsp;Vladimir&nbsp;Kotal&nbsp;&#60;vlada@devnull.cz&#62;&lt;br/&gt;date:&nbsp;Fri&nbsp;Jun&nbsp;28&nbsp;21:33:41&nbsp;CEST&nbsp;2019\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c74f3d552da703e568a8b4ff8259f0220463c10d"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU0NzE3NQ==", "bodyText": "we also utilize the version number in all version of the file (like version 4 out of 22), can you include that as well?", "url": "https://github.com/oracle/opengrok/pull/3056#discussion_r384547175", "createdAt": "2020-02-26T14:59:32Z", "author": {"login": "tulinkry"}, "path": "apiary.apib", "diffHunk": "@@ -6,6 +6,31 @@ OpenGrok RESTful API documentation. The following endpoints are accessible under\n \n Besides `/suggester` and `/search` endpoints, everything is accessible from `localhost` only.\n \n+## Annotation [/annotation{?path}]\n+\n+### Get annotation for a file [GET]\n+\n++ Parameters\n+  + path (string) - path of file, relative to source root\n+\n++ Response 200 (application/json)\n+  + Body\n+\n+            [\n+              {\n+                \"number\": 1,\n+                \"revision\": \"e2736ff6\",\n+                \"author\": \"Vladimir Kotal\",\n+                \"desc\": \"changeset:&nbsp;e2736ff6&lt;br/&gt;summary:&nbsp;add&nbsp;microbadges&lt;br/&gt;user:&nbsp;Vladimir&nbsp;Kotal&nbsp;&#60;vlada@devnull.cz&#62;&lt;br/&gt;date:&nbsp;Fri&nbsp;Jun&nbsp;28&nbsp;21:33:41&nbsp;CEST&nbsp;2019\"\n+              },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c74f3d552da703e568a8b4ff8259f0220463c10d"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1Mzc4MDky", "url": "https://github.com/oracle/opengrok/pull/3056#pullrequestreview-365378092", "createdAt": "2020-02-27T02:29:11Z", "commit": {"oid": "01b9b774786bc4545231124bbf59829db6b601bf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMjoyOToxMVrOFvDT-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMjozMzoyNlrOFvDYXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg4MTY1Ng==", "bodyText": "No big problem here but some food for thought:\n\nExecutor.exec() and Executor.exec(boolean) actually spool the entire output of a program into memory. Probably that's not a burdensome amount with this removal of --max-count, given this is a rev-list of a single file.\nWhen the spooled bytes are read later at line 402, they are read with the default Java charset, which is locale dependent on the OS installation. For hashes of a rev-list, that is perhaps always OK \u2014 but I'm just remarking since elsewhere in GitRepository, specific effort is made to use a correct charset (see newLogReader()).\nTechnically when read later at line 402, a BufferedReader is overkill, given that the bytes are already fully spooled in-memory.\nIndeed all the output of a Process (via exec()) must be read or else a deadlock could happen as one awaits the process exit value. The default spool does consume everything.\n\nI wonder if this is an opportunity to create a HeadHandler implementation of Executor.StreamHandler that is line-oriented (e.g. characters out of bytes), that demands a specified encoding instead of allowing the default Java charset, and that reads and stores a maximum number of lines and then just consumes and discards bytes (without bothering with character conversion) to exhaust the stream and avoid allocating heap.", "url": "https://github.com/oracle/opengrok/pull/3056#discussion_r384881656", "createdAt": "2020-02-27T02:29:11Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java", "diffHunk": "@@ -389,7 +389,6 @@ private String getFirstRevision(String fullpath) throws IOException {\n                 ensureCommand(CMD_PROPERTY_KEY, CMD_FALLBACK),\n                 \"rev-list\",\n                 \"--reverse\",\n-                \"--max-count=1\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01b9b774786bc4545231124bbf59829db6b601bf"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg4Mjc4Mw==", "bodyText": "Should the constructor be made private for a static utility class?", "url": "https://github.com/oracle/opengrok/pull/3056#discussion_r384882783", "createdAt": "2020-02-27T02:33:26Z", "author": {"login": "idodeclare"}, "path": "opengrok-web/src/main/java/org/opengrok/web/util/FileUtil.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.web.util;\n+\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.File;\n+import java.io.IOException;\n+\n+public class FileUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01b9b774786bc4545231124bbf59829db6b601bf"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1ODAyODI3", "url": "https://github.com/oracle/opengrok/pull/3056#pullrequestreview-365802827", "createdAt": "2020-02-27T16:25:13Z", "commit": {"oid": "62bb464dc6a17fd1b4a76db542d77585f2fd9d9d"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNjoyNToxNFrOFvX8CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNjoyNjoyN1rOFvX_hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIxOTU5Mw==", "bodyText": "There is already FileNotFound (or similar) in java core", "url": "https://github.com/oracle/opengrok/pull/3056#discussion_r385219593", "createdAt": "2020-02-27T16:25:14Z", "author": {"login": "tulinkry"}, "path": "opengrok-web/src/main/java/org/opengrok/web/util/FileUtil.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.web.util;\n+\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.File;\n+\n+public class FileUtil {\n+\n+    private static final RuntimeEnvironment env = RuntimeEnvironment.getInstance();\n+\n+    // private to enforce static\n+    private FileUtil() {\n+    }\n+\n+    public static class NoFileException extends Exception {\n+        private static final long serialVersionUID = 1L;\n+\n+        public NoFileException(String message) {\n+            super(message);\n+        }\n+    }\n+\n+    public static class NoPathException extends Exception {\n+        private static final long serialVersionUID = 1L;\n+\n+        public NoPathException(String message) {\n+            super(message);\n+        }\n+    }\n+\n+    /**\n+     * @param path path relative to source root\n+     * @return file object corresponding to the file under source root\n+     * @throws NoFileException\n+     * @throws NoPathException\n+     */\n+    public static File getFile(String path, HttpServletResponse response) throws NoPathException, NoFileException {\n+        if (path == null) {\n+            throw new NoPathException(\"Missing path parameter\");\n+        }\n+\n+        File file = new File(env.getSourceRootFile(), path);\n+        if (!file.isFile()) {\n+            throw new NoFileException(\"File not found\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62bb464dc6a17fd1b4a76db542d77585f2fd9d9d"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIyMDEyOQ==", "bodyText": "I think I wrote it somewhere else too, I'm little bit against this naming. But if you feel comfortable, you can disregard.", "url": "https://github.com/oracle/opengrok/pull/3056#discussion_r385220129", "createdAt": "2020-02-27T16:25:57Z", "author": {"login": "tulinkry"}, "path": "opengrok-web/src/main/java/org/opengrok/web/util/FileUtil.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.web.util;\n+\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.File;\n+\n+public class FileUtil {\n+\n+    private static final RuntimeEnvironment env = RuntimeEnvironment.getInstance();\n+\n+    // private to enforce static\n+    private FileUtil() {\n+    }\n+\n+    public static class NoFileException extends Exception {\n+        private static final long serialVersionUID = 1L;\n+\n+        public NoFileException(String message) {\n+            super(message);\n+        }\n+    }\n+\n+    public static class NoPathException extends Exception {\n+        private static final long serialVersionUID = 1L;\n+\n+        public NoPathException(String message) {\n+            super(message);\n+        }\n+    }\n+\n+    /**\n+     * @param path path relative to source root\n+     * @return file object corresponding to the file under source root\n+     * @throws NoFileException\n+     * @throws NoPathException\n+     */\n+    public static File getFile(String path, HttpServletResponse response) throws NoPathException, NoFileException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62bb464dc6a17fd1b4a76db542d77585f2fd9d9d"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIyMDQ4Nw==", "bodyText": "response is not needed", "url": "https://github.com/oracle/opengrok/pull/3056#discussion_r385220487", "createdAt": "2020-02-27T16:26:27Z", "author": {"login": "tulinkry"}, "path": "opengrok-web/src/main/java/org/opengrok/web/util/FileUtil.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.web.util;\n+\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.File;\n+\n+public class FileUtil {\n+\n+    private static final RuntimeEnvironment env = RuntimeEnvironment.getInstance();\n+\n+    // private to enforce static\n+    private FileUtil() {\n+    }\n+\n+    public static class NoFileException extends Exception {\n+        private static final long serialVersionUID = 1L;\n+\n+        public NoFileException(String message) {\n+            super(message);\n+        }\n+    }\n+\n+    public static class NoPathException extends Exception {\n+        private static final long serialVersionUID = 1L;\n+\n+        public NoPathException(String message) {\n+            super(message);\n+        }\n+    }\n+\n+    /**\n+     * @param path path relative to source root\n+     * @return file object corresponding to the file under source root\n+     * @throws NoFileException\n+     * @throws NoPathException\n+     */\n+    public static File getFile(String path, HttpServletResponse response) throws NoPathException, NoFileException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62bb464dc6a17fd1b4a76db542d77585f2fd9d9d"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NDc5MjA1", "url": "https://github.com/oracle/opengrok/pull/3056#pullrequestreview-366479205", "createdAt": "2020-02-28T15:27:26Z", "commit": {"oid": "9002f387c7fe4e9d000993741323ea5c1f10c4a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToyNzoyNlrOFv4zRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToyNzoyNlrOFv4zRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1ODAyMQ==", "bodyText": "#3050 (comment)", "url": "https://github.com/oracle/opengrok/pull/3056#discussion_r385758021", "createdAt": "2020-02-28T15:27:26Z", "author": {"login": "tulinkry"}, "path": "opengrok-web/src/main/java/org/opengrok/web/api/v1/NoPathExceptionMapper.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.web.api.v1;\n+\n+import org.opengrok.web.util.NoPathParameterException;\n+\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.ext.ExceptionMapper;\n+import javax.ws.rs.ext.Provider;\n+\n+@Provider\n+public class NoPathExceptionMapper implements ExceptionMapper<NoPathParameterException> {\n+    @Override\n+    public Response toResponse(NoPathParameterException e) {\n+        return Response.status(Response.Status.NOT_ACCEPTABLE).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9002f387c7fe4e9d000993741323ea5c1f10c4a9"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NTA5MjM0", "url": "https://github.com/oracle/opengrok/pull/3056#pullrequestreview-366509234", "createdAt": "2020-02-28T16:06:39Z", "commit": {"oid": "d442dbb76724f2a009e6df8be59bbf9ec37a373d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2ODA2MDM0", "url": "https://github.com/oracle/opengrok/pull/3056#pullrequestreview-366806034", "createdAt": "2020-02-29T16:17:26Z", "commit": {"oid": "d442dbb76724f2a009e6df8be59bbf9ec37a373d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxNjoxNzoyNlrOFwJ53Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxNjoxNzoyNlrOFwJ53Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAzODIzNw==", "bodyText": "Any possibility to make this class non-HTML aware and move the encoding to -web or .web?", "url": "https://github.com/oracle/opengrok/pull/3056#discussion_r386038237", "createdAt": "2020-02-29T16:17:26Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/Annotation.java", "diffHunk": "@@ -163,10 +163,14 @@ void addLine(String revision, String author, boolean enabled) {\n     }\n \n     void addDesc(String revision, String description) {\n-        desc.put(revision, Util.encode(description));\n+        desc.put(revision, description);\n     }\n \n     public String getDesc(String revision) {\n+        return Util.encode(desc.get(revision));\n+    }\n+\n+    public String getDescRaw(String revision) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d442dbb76724f2a009e6df8be59bbf9ec37a373d"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NDcxMDUw", "url": "https://github.com/oracle/opengrok/pull/3056#pullrequestreview-368471050", "createdAt": "2020-03-04T02:47:18Z", "commit": {"oid": "76f343a7096e547628bc072c248219c358ad9e02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMjo0NzoxOFrOFxeScg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMjo0NzoxOFrOFxeScg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQyMDc4Ng==", "bodyText": "Given the pre-existing if (msg != null) check nearby below, should perhaps the new Util.encode() be done in that if-block?", "url": "https://github.com/oracle/opengrok/pull/3056#discussion_r387420786", "createdAt": "2020-03-04T02:47:18Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/Util.java", "diffHunk": "@@ -713,82 +713,87 @@ public static void readableLine(int num, Writer out, Annotation annotation, Stri\n         out.write(closeQuotedTag);\n         out.write(snum);\n         out.write(anchorEnd);\n+\n         if (annotation != null) {\n-            String r = annotation.getRevision(num);\n-            boolean enabled = annotation.isEnabled(num);\n-            out.write(\"<span class=\\\"blame\\\">\");\n-            if (enabled) {\n-                out.write(anchorClassStart);\n-                out.write(\"r\");\n-                out.write(\"\\\" style=\\\"background-color: \");\n-                out.write(annotation.getColors().getOrDefault(r, \"inherit\"));\n-                out.write(\"\\\" href=\\\"\");\n-                out.write(URIEncode(annotation.getFilename()));\n-                out.write(\"?a=true&amp;r=\");\n-                out.write(URIEncode(r));\n-                String msg = annotation.getDesc(r);\n-                out.write(\"\\\" title=\\\"\");\n-                if (msg != null) {\n-                    out.write(msg);\n-                }\n-                if (annotation.getFileVersion(r) != 0) {\n-                    out.write(\"&lt;br/&gt;version: \" + annotation.getFileVersion(r) + \"/\"\n-                            + annotation.getRevisions().size());\n-                }\n-                out.write(closeQuotedTag);\n-            }\n-            StringBuilder buf = new StringBuilder();\n-            final boolean most_recent_revision = annotation.getFileVersion(r) == annotation.getRevisions().size();\n-            // print an asterisk for the most recent revision\n-            if (most_recent_revision) {\n-                buf.append(\"<span class=\\\"most_recent_revision\\\">\");\n-                buf.append('*');\n+            writeAnnotation(num, out, annotation, userPageLink, userPageSuffix, project);\n+        }\n+    }\n+\n+    private static void writeAnnotation(int num, Writer out, Annotation annotation, String userPageLink, String userPageSuffix, String project) throws IOException {\n+        String r = annotation.getRevision(num);\n+        boolean enabled = annotation.isEnabled(num);\n+        out.write(\"<span class=\\\"blame\\\">\");\n+        if (enabled) {\n+            out.write(anchorClassStart);\n+            out.write(\"r\");\n+            out.write(\"\\\" style=\\\"background-color: \");\n+            out.write(annotation.getColors().getOrDefault(r, \"inherit\"));\n+            out.write(\"\\\" href=\\\"\");\n+            out.write(URIEncode(annotation.getFilename()));\n+            out.write(\"?a=true&amp;r=\");\n+            out.write(URIEncode(r));\n+            String msg = Util.encode(annotation.getDesc(r));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76f343a7096e547628bc072c248219c358ad9e02"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5Mjg3ODE1", "url": "https://github.com/oracle/opengrok/pull/3056#pullrequestreview-369287815", "createdAt": "2020-03-05T04:23:57Z", "commit": {"oid": "a38cc58e2566e81970e2115372e4217a441f1198"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNDoyMzo1N1rOFyGB9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNDozOTozMVrOFyGNMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA3MTkyNg==", "bodyText": "I recommend to avoid breaking encapsulation (though it's rampant in OpenGrok). E.g. rather than returning a private list, how about:\npublic int count() {\n...\n}\n\npublic String get(int index) {\n...\n}", "url": "https://github.com/oracle/opengrok/pull/3056#discussion_r388071926", "createdAt": "2020-03-05T04:23:57Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/util/HeadHandler.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.indexer.util;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * The purpose of this class is to provide StreamHandler that limits the output\n+ * to specified number of lines. Compared to {@code SpoolHandler} it consumes\n+ * limited amount of heap.\n+ */\n+public class HeadHandler implements Executor.StreamHandler {\n+    private int numlines;\n+\n+    private final List<String> lines = new ArrayList<>();\n+\n+    // TODO add encoding\n+    public HeadHandler(int numlines) {\n+        this.numlines = numlines;\n+    }\n+\n+    public List<String> getLines() {\n+        return lines;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a38cc58e2566e81970e2115372e4217a441f1198"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA3NDgwMA==", "bodyText": "Technically this is doing needless byte to char conversion. E.g. were it a multi-byte encoding, then decoding is not worthwhile.\nMy original thinking on HeadHandler was to have the principal buffering at the byte-level. E.g. a BufferedReader(InputStreamReader, /*tiny*/200) atop a BufferedInputStream. Then when all the needed readLine() calls are done to just read() and discard from the BufferedInputStream \u2014 probably not a byte at a time but with say a very small byte[1024] buffer.\n(Using readLine() here would defeat the goal of avoiding needless heap allocation.)", "url": "https://github.com/oracle/opengrok/pull/3056#discussion_r388074800", "createdAt": "2020-03-05T04:39:31Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/util/HeadHandler.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.indexer.util;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * The purpose of this class is to provide StreamHandler that limits the output\n+ * to specified number of lines. Compared to {@code SpoolHandler} it consumes\n+ * limited amount of heap.\n+ */\n+public class HeadHandler implements Executor.StreamHandler {\n+    private int numlines;\n+\n+    private final List<String> lines = new ArrayList<>();\n+\n+    // TODO add encoding\n+    public HeadHandler(int numlines) {\n+        this.numlines = numlines;\n+    }\n+\n+    public List<String> getLines() {\n+        return lines;\n+    }\n+\n+    @Override\n+    public void processStream(InputStream input) throws IOException {\n+        // TODO specify encoding for InputStreamReader constructor\n+        BufferedReader reader = new BufferedReader(new InputStreamReader(input));\n+        int linenum = 0;\n+        while (linenum < numlines) {\n+            // TODO encoding\n+            String line = reader.readLine();\n+            if (line == null) { // EOF\n+                return;\n+            }\n+            lines.add(line);\n+            linenum++;\n+        }\n+        // Read and forget the rest. Need to use read() since it is not guaranteed\n+        // that newline will ensue.\n+        // TODO: would readline() get the job done ?\n+        while (reader.read() != -1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a38cc58e2566e81970e2115372e4217a441f1198"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NTczMjUz", "url": "https://github.com/oracle/opengrok/pull/3056#pullrequestreview-369573253", "createdAt": "2020-03-05T13:38:59Z", "commit": {"oid": "da17ed53943a07aa81c302266528b2b44c573013"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzozODo1OVrOFyTy9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzozODo1OVrOFyTy9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5NzQ2MA==", "bodyText": "I think the API requires if (headHandler.count() > 0) {", "url": "https://github.com/oracle/opengrok/pull/3056#discussion_r388297460", "createdAt": "2020-03-05T13:38:59Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java", "diffHunk": "@@ -389,23 +390,19 @@ private String getFirstRevision(String fullpath) throws IOException {\n                 ensureCommand(CMD_PROPERTY_KEY, CMD_FALLBACK),\n                 \"rev-list\",\n                 \"--reverse\",\n-                \"--max-count=1\",\n                 \"HEAD\",\n                 \"--\",\n                 fullpath\n         };\n \n         Executor executor = new Executor(Arrays.asList(argv), new File(getDirectoryName()),\n                 RuntimeEnvironment.getInstance().getInteractiveCommandTimeout());\n-        int status = executor.exec();\n-\n-        try (BufferedReader in = new BufferedReader(\n-                new InputStreamReader(executor.getOutputStream()))) {\n-            String line;\n+        HeadHandler headHandler = new HeadHandler(1);\n+        int status = executor.exec(false, headHandler);\n \n-            if ((line = in.readLine()) != null) {\n-                return line.trim();\n-            }\n+        String line;\n+        if ((line = headHandler.get(0)) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da17ed53943a07aa81c302266528b2b44c573013"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5OTA4MzE5", "url": "https://github.com/oracle/opengrok/pull/3056#pullrequestreview-369908319", "createdAt": "2020-03-05T20:57:24Z", "commit": {"oid": "3a9e760d9b403133d998d842ef746b2c8fd3fd70"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDo1NzoyNFrOFyj50A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTowMDo1NVrOFykAKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2MTM2MA==", "bodyText": "Shifting the offset into buf would shrink the available target space until possibly only 0-byte reads were done endlessly. I think this should just use the simpler read(byte[]) to reuse the whole buffer each time.", "url": "https://github.com/oracle/opengrok/pull/3056#discussion_r388561360", "createdAt": "2020-03-05T20:57:24Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/util/HeadHandler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.indexer.util;\n+\n+import java.io.BufferedInputStream;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * The purpose of this class is to provide {@code StreamHandler} that limits the output\n+ * to specified number of lines. Compared to {@code SpoolHandler} it consumes\n+ * limited amount of heap.\n+ */\n+public class HeadHandler implements Executor.StreamHandler {\n+    private int numLines;\n+\n+    private final List<String> lines = new ArrayList<>();\n+    private Charset charset;\n+\n+    /**\n+     * Charset of the underlying reader is set to UTF-8.\n+     * @param numLines maximum number of lines to store\n+     */\n+    public HeadHandler(int numLines) {\n+        this.numLines = numLines;\n+        this.charset = StandardCharsets.UTF_8;\n+    }\n+\n+    public HeadHandler(int numLines, Charset charset) {\n+        this.numLines = numLines;\n+        this.charset = charset;\n+    }\n+\n+    /**\n+     * @return number of lines read\n+     */\n+    public int size() {\n+        return lines.size();\n+    }\n+\n+    /**\n+     * @param i index\n+     * @return line at given index\n+     */\n+    public String get(int i) {\n+        return lines.get(i);\n+    }\n+\n+    @Override\n+    public void processStream(InputStream input) throws IOException {\n+        BufferedInputStream bufStream = new BufferedInputStream(input);\n+        BufferedReader reader = new BufferedReader(new InputStreamReader(bufStream, this.charset), 200);\n+        int lineNum = 0;\n+        while (lineNum < numLines) {\n+            String line = reader.readLine();\n+            if (line == null) { // EOF\n+                return;\n+            }\n+            lines.add(line);\n+            lineNum++;\n+        }\n+\n+        // Read and forget the rest.\n+        byte[] buf = new byte[1024];\n+        int off = 0;\n+        int len;\n+        while ((len = bufStream.read(buf, off, buf.length)) != -1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a9e760d9b403133d998d842ef746b2c8fd3fd70"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2MTYyMQ==", "bodyText": "final possibly?", "url": "https://github.com/oracle/opengrok/pull/3056#discussion_r388561621", "createdAt": "2020-03-05T20:57:59Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/util/HeadHandler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.indexer.util;\n+\n+import java.io.BufferedInputStream;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * The purpose of this class is to provide {@code StreamHandler} that limits the output\n+ * to specified number of lines. Compared to {@code SpoolHandler} it consumes\n+ * limited amount of heap.\n+ */\n+public class HeadHandler implements Executor.StreamHandler {\n+    private int numLines;\n+\n+    private final List<String> lines = new ArrayList<>();\n+    private Charset charset;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a9e760d9b403133d998d842ef746b2c8fd3fd70"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2Mjk4Nw==", "bodyText": "Nit: I think your implementation does ensure non-null for a valid index. Maybe that could be stated firmly in the Javadoc?", "url": "https://github.com/oracle/opengrok/pull/3056#discussion_r388562987", "createdAt": "2020-03-05T21:00:55Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java", "diffHunk": "@@ -389,31 +390,24 @@ private String getFirstRevision(String fullpath) throws IOException {\n                 ensureCommand(CMD_PROPERTY_KEY, CMD_FALLBACK),\n                 \"rev-list\",\n                 \"--reverse\",\n-                \"--max-count=1\",\n                 \"HEAD\",\n                 \"--\",\n                 fullpath\n         };\n \n         Executor executor = new Executor(Arrays.asList(argv), new File(getDirectoryName()),\n                 RuntimeEnvironment.getInstance().getInteractiveCommandTimeout());\n-        int status = executor.exec();\n-\n-        try (BufferedReader in = new BufferedReader(\n-                new InputStreamReader(executor.getOutputStream()))) {\n-            String line;\n+        HeadHandler headHandler = new HeadHandler(1);\n+        int status = executor.exec(false, headHandler);\n \n-            if ((line = in.readLine()) != null) {\n-                return line.trim();\n-            }\n+        String line;\n+        if (headHandler.size() > 0 && (line = headHandler.get(0)) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a9e760d9b403133d998d842ef746b2c8fd3fd70"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5OTgwNDYx", "url": "https://github.com/oracle/opengrok/pull/3056#pullrequestreview-369980461", "createdAt": "2020-03-05T23:15:06Z", "commit": {"oid": "3a9e760d9b403133d998d842ef746b2c8fd3fd70"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMzoxNTowNlrOFynjjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMzoxNTowNlrOFynjjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyMTE5Nw==", "bodyText": "Oh I forgot to ask: would try-with-resources be appropriate here?", "url": "https://github.com/oracle/opengrok/pull/3056#discussion_r388621197", "createdAt": "2020-03-05T23:15:06Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/util/HeadHandler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.indexer.util;\n+\n+import java.io.BufferedInputStream;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * The purpose of this class is to provide {@code StreamHandler} that limits the output\n+ * to specified number of lines. Compared to {@code SpoolHandler} it consumes\n+ * limited amount of heap.\n+ */\n+public class HeadHandler implements Executor.StreamHandler {\n+    private int numLines;\n+\n+    private final List<String> lines = new ArrayList<>();\n+    private Charset charset;\n+\n+    /**\n+     * Charset of the underlying reader is set to UTF-8.\n+     * @param numLines maximum number of lines to store\n+     */\n+    public HeadHandler(int numLines) {\n+        this.numLines = numLines;\n+        this.charset = StandardCharsets.UTF_8;\n+    }\n+\n+    public HeadHandler(int numLines, Charset charset) {\n+        this.numLines = numLines;\n+        this.charset = charset;\n+    }\n+\n+    /**\n+     * @return number of lines read\n+     */\n+    public int size() {\n+        return lines.size();\n+    }\n+\n+    /**\n+     * @param i index\n+     * @return line at given index\n+     */\n+    public String get(int i) {\n+        return lines.get(i);\n+    }\n+\n+    @Override\n+    public void processStream(InputStream input) throws IOException {\n+        BufferedInputStream bufStream = new BufferedInputStream(input);\n+        BufferedReader reader = new BufferedReader(new InputStreamReader(bufStream, this.charset), 200);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a9e760d9b403133d998d842ef746b2c8fd3fd70"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNDI0MjMx", "url": "https://github.com/oracle/opengrok/pull/3056#pullrequestreview-370424231", "createdAt": "2020-03-06T15:49:06Z", "commit": {"oid": "e4ba2911c3272b1cbb9e2990ec5a5ab4bd9533d9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNzk3MTU4", "url": "https://github.com/oracle/opengrok/pull/3056#pullrequestreview-370797158", "createdAt": "2020-03-08T00:47:26Z", "commit": {"oid": "f484af98af0ba0a2349ca04b8d3e694107b4cc54"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwMDo0NzoyNlrOFzSdHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwMTowNTowMFrOFzSgJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMyNDA2Mw==", "bodyText": "Iterating in the conditional possibly miscounts since one last read() is done to get the -1.", "url": "https://github.com/oracle/opengrok/pull/3056#discussion_r389324063", "createdAt": "2020-03-08T00:47:26Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/util/HeadHandlerTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.indexer.util;\n+\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class HeadHandlerTest {\n+    private class RandomInputStream extends InputStream {\n+        private final int maxcount;\n+        private int count;\n+        private final int maxlines;\n+        private int lines;\n+\n+        private String letters;\n+\n+        public RandomInputStream(int count, int lines) {\n+            this.maxcount = count;\n+            this.count = 0;\n+            this.maxlines = lines;\n+            this.lines = 0;\n+\n+            letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n+            letters = letters + letters.toLowerCase();\n+            letters = letters + \"0123456789\";\n+        }\n+\n+        public int getCount() {\n+            return count;\n+        }\n+\n+        @Override\n+        public int read() throws IOException {\n+            if (++count < maxcount) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f484af98af0ba0a2349ca04b8d3e694107b4cc54"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMyNDQyMA==", "bodyText": "Perhaps some randomness in line lengths?", "url": "https://github.com/oracle/opengrok/pull/3056#discussion_r389324420", "createdAt": "2020-03-08T00:55:36Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/util/HeadHandlerTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.indexer.util;\n+\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class HeadHandlerTest {\n+    private class RandomInputStream extends InputStream {\n+        private final int maxcount;\n+        private int count;\n+        private final int maxlines;\n+        private int lines;\n+\n+        private String letters;\n+\n+        public RandomInputStream(int count, int lines) {\n+            this.maxcount = count;\n+            this.count = 0;\n+            this.maxlines = lines;\n+            this.lines = 0;\n+\n+            letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n+            letters = letters + letters.toLowerCase();\n+            letters = letters + \"0123456789\";\n+        }\n+\n+        public int getCount() {\n+            return count;\n+        }\n+\n+        @Override\n+        public int read() throws IOException {\n+            if (++count < maxcount) {\n+                // Want the newlines to appear within the first half.\n+                if (count % ((maxcount / 2) / maxlines) == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f484af98af0ba0a2349ca04b8d3e694107b4cc54"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMyNDUxMw==", "bodyText": "This might always result in 0 using %.", "url": "https://github.com/oracle/opengrok/pull/3056#discussion_r389324513", "createdAt": "2020-03-08T00:57:30Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/util/HeadHandlerTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.indexer.util;\n+\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class HeadHandlerTest {\n+    private class RandomInputStream extends InputStream {\n+        private final int maxcount;\n+        private int count;\n+        private final int maxlines;\n+        private int lines;\n+\n+        private String letters;\n+\n+        public RandomInputStream(int count, int lines) {\n+            this.maxcount = count;\n+            this.count = 0;\n+            this.maxlines = lines;\n+            this.lines = 0;\n+\n+            letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n+            letters = letters + letters.toLowerCase();\n+            letters = letters + \"0123456789\";\n+        }\n+\n+        public int getCount() {\n+            return count;\n+        }\n+\n+        @Override\n+        public int read() throws IOException {\n+            if (++count < maxcount) {\n+                // Want the newlines to appear within the first half.\n+                if (count % ((maxcount / 2) / maxlines) == 0) {\n+                    return '\\n';\n+                } else {\n+                    return letters.charAt((int) (Math.random() % letters.length()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f484af98af0ba0a2349ca04b8d3e694107b4cc54"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMyNDgzNw==", "bodyText": "With this approach using randomness, I wonder if it would be informative to compare the line content to what was generated.", "url": "https://github.com/oracle/opengrok/pull/3056#discussion_r389324837", "createdAt": "2020-03-08T01:05:00Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/util/HeadHandlerTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.indexer.util;\n+\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class HeadHandlerTest {\n+    private class RandomInputStream extends InputStream {\n+        private final int maxcount;\n+        private int count;\n+        private final int maxlines;\n+        private int lines;\n+\n+        private String letters;\n+\n+        public RandomInputStream(int count, int lines) {\n+            this.maxcount = count;\n+            this.count = 0;\n+            this.maxlines = lines;\n+            this.lines = 0;\n+\n+            letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n+            letters = letters + letters.toLowerCase();\n+            letters = letters + \"0123456789\";\n+        }\n+\n+        public int getCount() {\n+            return count;\n+        }\n+\n+        @Override\n+        public int read() throws IOException {\n+            if (++count < maxcount) {\n+                // Want the newlines to appear within the first half.\n+                if (count % ((maxcount / 2) / maxlines) == 0) {\n+                    return '\\n';\n+                } else {\n+                    return letters.charAt((int) (Math.random() % letters.length()));\n+                }\n+            }\n+\n+            return -1;\n+        }\n+    }\n+\n+    @Test\n+    public void testHeadHandler() throws IOException {\n+        final int lines = 5;\n+        final int headLines = 3;\n+        int totalCount = 8192;\n+\n+        RandomInputStream rndStream = new RandomInputStream(totalCount, lines);\n+        HeadHandler handler = new HeadHandler(headLines);\n+        assertTrue(totalCount > handler.getBufferedReaderSize());\n+        handler.processStream(rndStream);\n+        assertEquals(headLines, handler.size());\n+        assertEquals(totalCount + 1, rndStream.getCount());\n+        int linesLen = 0;\n+        for (int i = 0; i < headLines; i++) {\n+            linesLen += handler.get(i).length();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f484af98af0ba0a2349ca04b8d3e694107b4cc54"}, "originalPosition": 87}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c854253465724c0197b4cf4242c22c337345a0ee", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/c854253465724c0197b4cf4242c22c337345a0ee", "committedDate": "2020-03-12T13:39:46Z", "message": "implement annotation API endpoint\n\nfixes #3046"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "487fed8f0e78236c7bc21f37a7a03c2755d1b4e2", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/487fed8f0e78236c7bc21f37a7a03c2755d1b4e2", "committedDate": "2020-03-12T13:39:46Z", "message": "fix GitRepository#getFirstRevision()\n\n--max-count is applied before --reverse"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1282d881cd3c66d40233cebd06c64b28ad0b528", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/d1282d881cd3c66d40233cebd06c64b28ad0b528", "committedDate": "2020-03-12T13:41:35Z", "message": "introduce HeadHandler, use it in GitRepository"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "79165564ec1720f04a851f42b89b9923fbf453dc", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/79165564ec1720f04a851f42b89b9923fbf453dc", "committedDate": "2020-03-10T21:39:53Z", "message": "relax the condition"}, "afterCommit": {"oid": "d1282d881cd3c66d40233cebd06c64b28ad0b528", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/d1282d881cd3c66d40233cebd06c64b28ad0b528", "committedDate": "2020-03-12T13:41:35Z", "message": "introduce HeadHandler, use it in GitRepository"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 288, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}