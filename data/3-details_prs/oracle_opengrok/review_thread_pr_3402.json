{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5MzAyMDk2", "number": 3402, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOFQxNjoxNTowNFrOFX7vIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOFQxODo0Nzo0OVrOFcBVww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwNjQwMjg4OnYy", "diffSide": "RIGHT", "path": "opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/ProjectsController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOFQxNjoxNTowNFrOIhqwAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOFQxNjoxNTowNFrOIhqwAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjE3NDMzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (map.get(project) != null) {\n          \n          \n            \n                            if (map.containsKey(project)) {\n          \n      \n    \n    \n  \n\nI think this is nicer :)", "url": "https://github.com/oracle/opengrok/pull/3402#discussion_r572174338", "createdAt": "2021-02-08T16:15:04Z", "author": {"login": "ahornace"}, "path": "opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/ProjectsController.java", "diffHunk": "@@ -118,9 +118,11 @@ public Response addProject(String projectName) {\n                     }\n                 }\n                 // deleted repository\n-                for (RepositoryInfo repo : map.get(project)) {\n-                    if (!repos.contains(repo)) {\n-                        allrepos.remove(repo);\n+                if (map.get(project) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e363f9c9d28bf78660f28dfefe3e5d34c592557"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY0OTI2NDAzOnYy", "diffSide": "RIGHT", "path": "tools/src/main/python/opengrok_tools/reindex_project.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOFQxODo0Nzo0OVrOIn25pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQxMjo1MTowMFrOIoVOgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODY2NDg3MQ==", "bodyText": "What about this #TODO?", "url": "https://github.com/oracle/opengrok/pull/3402#discussion_r578664871", "createdAt": "2021-02-18T18:47:49Z", "author": {"login": "ahornace"}, "path": "tools/src/main/python/opengrok_tools/reindex_project.py", "diffHunk": "@@ -75,50 +75,68 @@ def get_config_file(logger, uri):\n def main():\n     parser = argparse.ArgumentParser(description='OpenGrok indexer wrapper '\n                                                  'for indexing single project',\n-                                     parents=[get_java_parser()])\n-    parser.add_argument('-t', '--template', required=True,\n+                                     parents=[get_java_parser()],\n+                                     prog=sys.argv[0])\n+    parser.add_argument('-t', '--template',\n                         help='Logging template file')\n-    parser.add_argument('-p', '--pattern', required=True,\n+    parser.add_argument('-p', '--pattern',\n                         help='Pattern to substitute in logging template with'\n                              'project name')\n     parser.add_argument('-P', '--project', required=True,\n                         help='Project name')\n-    parser.add_argument('-d', '--directory', required=True,\n+    parser.add_argument('-d', '--directory',\n                         help='Logging directory')\n     parser.add_argument('-U', '--uri', default='http://localhost:8080/source',\n                         help='URI of the webapp with context path')\n+    parser.add_argument('--printoutput', action='store_true', default=False)\n+\n+    cmd_args = sys.argv[1:]\n+    extra_opts = os.environ.get(\"OPENGROK_INDEXER_OPTIONAL_ARGS\")\n+    if extra_opts:\n+        cmd_args.extend(extra_opts.split())\n \n     try:\n-        args = parser.parse_args()\n+        args = parser.parse_args(cmd_args)\n     except ValueError as e:\n         fatal(e)\n \n     logger = get_console_logger(get_class_basename(), args.loglevel)\n \n+    logger.debug('Command arguments extended with {}'.format(extra_opts))\n+\n     # Make sure the log directory exists.\n-    if not os.path.isdir(args.directory):\n-        os.makedirs(args.directory)\n+    if args.directory:\n+        if not os.path.isdir(args.directory):\n+            os.makedirs(args.directory)\n \n     # Get files needed for per-project reindex.\n     conf_file = get_config_file(logger, args.uri)\n-    logprop_file = get_logprop_file(logger, args.template, args.pattern,\n-                                    args.project)\n+    logprop_file = None\n+    if args.template and args.pattern:\n+        logprop_file = get_logprop_file(logger, args.template, args.pattern,\n+                                        args.project)\n \n     # Reindex with the modified logging.properties file and read-only config.\n     command = ['-R', conf_file]\n     command.extend(args.options)\n     java_opts = []\n     if args.java_opts:\n         java_opts.extend(args.java_opts)\n-    java_opts.append(\"-Djava.util.logging.config.file={}\".\n-                     format(logprop_file))\n+    if logprop_file:\n+        java_opts.append(\"-Djava.util.logging.config.file={}\".\n+                         format(logprop_file))\n     indexer = Indexer(command, logger=logger, jar=args.jar,\n                       java=args.java, java_opts=java_opts,\n                       env_vars=args.environment, doprint=args.doprint)\n     indexer.execute()\n     ret = indexer.getretcode()\n     os.remove(conf_file)\n-    os.remove(logprop_file)\n+    if logprop_file:\n+        os.remove(logprop_file)\n+\n+    # TODO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e74a997504c30bbad48a82ecb95db13c1758f9a"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTE2MTcyOA==", "bodyText": "That still needs addressing. Like it is now it would print the output twice on failure.", "url": "https://github.com/oracle/opengrok/pull/3402#discussion_r579161728", "createdAt": "2021-02-19T12:51:00Z", "author": {"login": "vladak"}, "path": "tools/src/main/python/opengrok_tools/reindex_project.py", "diffHunk": "@@ -75,50 +75,68 @@ def get_config_file(logger, uri):\n def main():\n     parser = argparse.ArgumentParser(description='OpenGrok indexer wrapper '\n                                                  'for indexing single project',\n-                                     parents=[get_java_parser()])\n-    parser.add_argument('-t', '--template', required=True,\n+                                     parents=[get_java_parser()],\n+                                     prog=sys.argv[0])\n+    parser.add_argument('-t', '--template',\n                         help='Logging template file')\n-    parser.add_argument('-p', '--pattern', required=True,\n+    parser.add_argument('-p', '--pattern',\n                         help='Pattern to substitute in logging template with'\n                              'project name')\n     parser.add_argument('-P', '--project', required=True,\n                         help='Project name')\n-    parser.add_argument('-d', '--directory', required=True,\n+    parser.add_argument('-d', '--directory',\n                         help='Logging directory')\n     parser.add_argument('-U', '--uri', default='http://localhost:8080/source',\n                         help='URI of the webapp with context path')\n+    parser.add_argument('--printoutput', action='store_true', default=False)\n+\n+    cmd_args = sys.argv[1:]\n+    extra_opts = os.environ.get(\"OPENGROK_INDEXER_OPTIONAL_ARGS\")\n+    if extra_opts:\n+        cmd_args.extend(extra_opts.split())\n \n     try:\n-        args = parser.parse_args()\n+        args = parser.parse_args(cmd_args)\n     except ValueError as e:\n         fatal(e)\n \n     logger = get_console_logger(get_class_basename(), args.loglevel)\n \n+    logger.debug('Command arguments extended with {}'.format(extra_opts))\n+\n     # Make sure the log directory exists.\n-    if not os.path.isdir(args.directory):\n-        os.makedirs(args.directory)\n+    if args.directory:\n+        if not os.path.isdir(args.directory):\n+            os.makedirs(args.directory)\n \n     # Get files needed for per-project reindex.\n     conf_file = get_config_file(logger, args.uri)\n-    logprop_file = get_logprop_file(logger, args.template, args.pattern,\n-                                    args.project)\n+    logprop_file = None\n+    if args.template and args.pattern:\n+        logprop_file = get_logprop_file(logger, args.template, args.pattern,\n+                                        args.project)\n \n     # Reindex with the modified logging.properties file and read-only config.\n     command = ['-R', conf_file]\n     command.extend(args.options)\n     java_opts = []\n     if args.java_opts:\n         java_opts.extend(args.java_opts)\n-    java_opts.append(\"-Djava.util.logging.config.file={}\".\n-                     format(logprop_file))\n+    if logprop_file:\n+        java_opts.append(\"-Djava.util.logging.config.file={}\".\n+                         format(logprop_file))\n     indexer = Indexer(command, logger=logger, jar=args.jar,\n                       java=args.java, java_opts=java_opts,\n                       env_vars=args.environment, doprint=args.doprint)\n     indexer.execute()\n     ret = indexer.getretcode()\n     os.remove(conf_file)\n-    os.remove(logprop_file)\n+    if logprop_file:\n+        os.remove(logprop_file)\n+\n+    # TODO", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODY2NDg3MQ=="}, "originalCommit": {"oid": "5e74a997504c30bbad48a82ecb95db13c1758f9a"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4897, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}