{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyMDUyMTUz", "number": 3194, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDozMzozMVrOEjKz1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNToxNDowM1rOEjMCSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MzEyNzI3OnYy", "diffSide": "RIGHT", "path": "opengrok-web/src/test/java/org/opengrok/web/util/FileUtilTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDozMzozMVrOHRX8aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQxOTowMjozN1rOHUtxSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4MDEzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test\n          \n          \n            \n                @Test(expected = NoPathParameterException.class)", "url": "https://github.com/oracle/opengrok/pull/3194#discussion_r487980137", "createdAt": "2020-09-14T14:33:31Z", "author": {"login": "vladak"}, "path": "opengrok-web/src/test/java/org/opengrok/web/util/FileUtilTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.\n+ */\n+\n+package org.opengrok.web.util;\n+\n+import static org.junit.Assert.assertNotNull;\n+\n+import org.junit.Test;\n+import java.io.FileNotFoundException;\n+import java.util.UUID;\n+\n+/**\n+ * Represents a container for tests of {@link FileUtil}.\n+ */\n+public class FileUtilTest {\n+\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c43807263e4dedefe3c7eec37e4d5df5fe0a7796"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4MTM5NA==", "bodyText": "or given that we already use Junit 5 it should be possible to use assertThrows()", "url": "https://github.com/oracle/opengrok/pull/3194#discussion_r487981394", "createdAt": "2020-09-14T14:35:06Z", "author": {"login": "vladak"}, "path": "opengrok-web/src/test/java/org/opengrok/web/util/FileUtilTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.\n+ */\n+\n+package org.opengrok.web.util;\n+\n+import static org.junit.Assert.assertNotNull;\n+\n+import org.junit.Test;\n+import java.io.FileNotFoundException;\n+import java.util.UUID;\n+\n+/**\n+ * Represents a container for tests of {@link FileUtil}.\n+ */\n+public class FileUtilTest {\n+\n+    @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4MDEzNw=="}, "originalCommit": {"oid": "c43807263e4dedefe3c7eec37e4d5df5fe0a7796"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ4MzQ2Ng==", "bodyText": "Done", "url": "https://github.com/oracle/opengrok/pull/3194#discussion_r491483466", "createdAt": "2020-09-19T19:02:37Z", "author": {"login": "idodeclare"}, "path": "opengrok-web/src/test/java/org/opengrok/web/util/FileUtilTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.\n+ */\n+\n+package org.opengrok.web.util;\n+\n+import static org.junit.Assert.assertNotNull;\n+\n+import org.junit.Test;\n+import java.io.FileNotFoundException;\n+import java.util.UUID;\n+\n+/**\n+ * Represents a container for tests of {@link FileUtil}.\n+ */\n+public class FileUtilTest {\n+\n+    @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4MDEzNw=="}, "originalCommit": {"oid": "c43807263e4dedefe3c7eec37e4d5df5fe0a7796"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MzE1MjAwOnYy", "diffSide": "RIGHT", "path": "plugins/src/test/java/opengrok/auth/plugin/UserWhiteListPluginTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDozODozM1rOHRYL8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDozODozM1rOHRYL8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4NDExMw==", "bodyText": "ditto - use JUnit mechanisms for asserting the exceptions ?", "url": "https://github.com/oracle/opengrok/pull/3194#discussion_r487984113", "createdAt": "2020-09-14T14:38:33Z", "author": {"login": "vladak"}, "path": "plugins/src/test/java/opengrok/auth/plugin/UserWhiteListPluginTest.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.\n+ */\n+\n+package opengrok.auth.plugin;\n+\n+import opengrok.auth.plugin.entity.User;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.opengrok.indexer.configuration.Group;\n+import org.opengrok.indexer.configuration.Project;\n+import org.opengrok.indexer.util.RandomString;\n+import org.opengrok.indexer.web.DummyHttpServletRequest;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.OutputStreamWriter;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Represents a container for tests of {@link UserWhiteListPlugin}.\n+ */\n+public class UserWhiteListPluginTest {\n+\n+    private static final String OK_USER = \"user1321\";\n+    private static File tempWhitelist;\n+    private static HashMap<String, Object> validPluginParameters;\n+\n+    private UserWhiteListPlugin plugin;\n+\n+    @BeforeClass\n+    public static void beforeClass() throws Exception {\n+        tempWhitelist = File.createTempFile(\"UserWhiteListPluginTest\", \"txt\");\n+        try (BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(\n+                new FileOutputStream(tempWhitelist), StandardCharsets.UTF_8))) {\n+            writer.write(OK_USER);\n+            // Don't bother with trailing LF.\n+        }\n+\n+        validPluginParameters = new HashMap<>();\n+        validPluginParameters.put(UserWhiteListPlugin.FILE_PARAM, tempWhitelist.getPath());\n+    }\n+\n+    @AfterClass\n+    public static void afterClass() {\n+        if (tempWhitelist != null) {\n+            //noinspection ResultOfMethodCallIgnored\n+            tempWhitelist.delete();\n+        }\n+    }\n+\n+    @Before\n+    public void setUp() {\n+        plugin = new UserWhiteListPlugin();\n+    }\n+\n+    @Test\n+    public void shouldThrowOnLoadIfNullArgument() {\n+        NullPointerException caughtException = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c43807263e4dedefe3c7eec37e4d5df5fe0a7796"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MzE2MjY2OnYy", "diffSide": "RIGHT", "path": "plugins/src/test/java/opengrok/auth/plugin/UserWhiteListPluginTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDo0MDo0NlrOHRYShA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQxOTowMjo0N1rOHUtxag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4NTc5Ng==", "bodyText": "would be nice to see what happens if the parameters include path to non-existent file.", "url": "https://github.com/oracle/opengrok/pull/3194#discussion_r487985796", "createdAt": "2020-09-14T14:40:46Z", "author": {"login": "vladak"}, "path": "plugins/src/test/java/opengrok/auth/plugin/UserWhiteListPluginTest.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.\n+ */\n+\n+package opengrok.auth.plugin;\n+\n+import opengrok.auth.plugin.entity.User;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.opengrok.indexer.configuration.Group;\n+import org.opengrok.indexer.configuration.Project;\n+import org.opengrok.indexer.util.RandomString;\n+import org.opengrok.indexer.web.DummyHttpServletRequest;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.OutputStreamWriter;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Represents a container for tests of {@link UserWhiteListPlugin}.\n+ */\n+public class UserWhiteListPluginTest {\n+\n+    private static final String OK_USER = \"user1321\";\n+    private static File tempWhitelist;\n+    private static HashMap<String, Object> validPluginParameters;\n+\n+    private UserWhiteListPlugin plugin;\n+\n+    @BeforeClass\n+    public static void beforeClass() throws Exception {\n+        tempWhitelist = File.createTempFile(\"UserWhiteListPluginTest\", \"txt\");\n+        try (BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(\n+                new FileOutputStream(tempWhitelist), StandardCharsets.UTF_8))) {\n+            writer.write(OK_USER);\n+            // Don't bother with trailing LF.\n+        }\n+\n+        validPluginParameters = new HashMap<>();\n+        validPluginParameters.put(UserWhiteListPlugin.FILE_PARAM, tempWhitelist.getPath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c43807263e4dedefe3c7eec37e4d5df5fe0a7796"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ4MzQ5OA==", "bodyText": "Done", "url": "https://github.com/oracle/opengrok/pull/3194#discussion_r491483498", "createdAt": "2020-09-19T19:02:47Z", "author": {"login": "idodeclare"}, "path": "plugins/src/test/java/opengrok/auth/plugin/UserWhiteListPluginTest.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.\n+ */\n+\n+package opengrok.auth.plugin;\n+\n+import opengrok.auth.plugin.entity.User;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.opengrok.indexer.configuration.Group;\n+import org.opengrok.indexer.configuration.Project;\n+import org.opengrok.indexer.util.RandomString;\n+import org.opengrok.indexer.web.DummyHttpServletRequest;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.OutputStreamWriter;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Represents a container for tests of {@link UserWhiteListPlugin}.\n+ */\n+public class UserWhiteListPluginTest {\n+\n+    private static final String OK_USER = \"user1321\";\n+    private static File tempWhitelist;\n+    private static HashMap<String, Object> validPluginParameters;\n+\n+    private UserWhiteListPlugin plugin;\n+\n+    @BeforeClass\n+    public static void beforeClass() throws Exception {\n+        tempWhitelist = File.createTempFile(\"UserWhiteListPluginTest\", \"txt\");\n+        try (BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(\n+                new FileOutputStream(tempWhitelist), StandardCharsets.UTF_8))) {\n+            writer.write(OK_USER);\n+            // Don't bother with trailing LF.\n+        }\n+\n+        validPluginParameters = new HashMap<>();\n+        validPluginParameters.put(UserWhiteListPlugin.FILE_PARAM, tempWhitelist.getPath());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4NTc5Ng=="}, "originalCommit": {"oid": "c43807263e4dedefe3c7eec37e4d5df5fe0a7796"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MzMyODExOnYy", "diffSide": "RIGHT", "path": "plugins/src/test/java/opengrok/auth/plugin/UserWhiteListPluginTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNToxNDowM1rOHRZ5CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNToxNDowM1rOHRZ5CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAxMjA0MQ==", "bodyText": "why test 2 projects if they are both random ?", "url": "https://github.com/oracle/opengrok/pull/3194#discussion_r488012041", "createdAt": "2020-09-14T15:14:03Z", "author": {"login": "vladak"}, "path": "plugins/src/test/java/opengrok/auth/plugin/UserWhiteListPluginTest.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.\n+ */\n+\n+package opengrok.auth.plugin;\n+\n+import opengrok.auth.plugin.entity.User;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.opengrok.indexer.configuration.Group;\n+import org.opengrok.indexer.configuration.Project;\n+import org.opengrok.indexer.util.RandomString;\n+import org.opengrok.indexer.web.DummyHttpServletRequest;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.OutputStreamWriter;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Represents a container for tests of {@link UserWhiteListPlugin}.\n+ */\n+public class UserWhiteListPluginTest {\n+\n+    private static final String OK_USER = \"user1321\";\n+    private static File tempWhitelist;\n+    private static HashMap<String, Object> validPluginParameters;\n+\n+    private UserWhiteListPlugin plugin;\n+\n+    @BeforeClass\n+    public static void beforeClass() throws Exception {\n+        tempWhitelist = File.createTempFile(\"UserWhiteListPluginTest\", \"txt\");\n+        try (BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(\n+                new FileOutputStream(tempWhitelist), StandardCharsets.UTF_8))) {\n+            writer.write(OK_USER);\n+            // Don't bother with trailing LF.\n+        }\n+\n+        validPluginParameters = new HashMap<>();\n+        validPluginParameters.put(UserWhiteListPlugin.FILE_PARAM, tempWhitelist.getPath());\n+    }\n+\n+    @AfterClass\n+    public static void afterClass() {\n+        if (tempWhitelist != null) {\n+            //noinspection ResultOfMethodCallIgnored\n+            tempWhitelist.delete();\n+        }\n+    }\n+\n+    @Before\n+    public void setUp() {\n+        plugin = new UserWhiteListPlugin();\n+    }\n+\n+    @Test\n+    public void shouldThrowOnLoadIfNullArgument() {\n+        NullPointerException caughtException = null;\n+        try {\n+            //noinspection ConstantConditions\n+            plugin.load(null);\n+        } catch (NullPointerException ex) {\n+            caughtException = ex;\n+        }\n+\n+        assertNotNull(\"caught NullPointerException\", caughtException);\n+    }\n+\n+    @Test\n+    public void shouldThrowOnLoadIfNoFileSpecified() {\n+        IllegalArgumentException caughtException = null;\n+        try {\n+            plugin.load(new HashMap<>());\n+        } catch (IllegalArgumentException ex) {\n+            caughtException = ex;\n+        }\n+\n+        assertNotNull(\"caught IllegalArgumentException\", caughtException);\n+        assertTrue(\"caughtException should mention 'Missing parameter'\",\n+                caughtException.getMessage().contains(\"Missing parameter\"));\n+    }\n+\n+    @Test\n+    public void shouldUnload() {\n+        plugin.unload();\n+    }\n+\n+    @Test\n+    public void shouldAllowWhitelistedUserForAnyProject() {\n+        plugin.load(validPluginParameters);\n+\n+        DummyHttpServletRequest req = new DummyHttpServletRequest();\n+        req.setAttribute(UserPlugin.REQUEST_ATTR, new User(OK_USER));\n+\n+        Project randomProject = new Project(RandomString.generateUpper(10));\n+        boolean projectAllowed = plugin.isAllowed(req, randomProject);\n+        assertTrue(\"should allow OK_USER for random project 1\", projectAllowed);\n+\n+        randomProject = new Project(RandomString.generateUpper(10));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c43807263e4dedefe3c7eec37e4d5df5fe0a7796"}, "originalPosition": 127}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4929, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}