{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExODAxMjA1", "number": 3333, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMTo1ODozMFrOEzElXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwOToxMjo1NlrOE0B5xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTg3OTM0OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMTo1ODozMFrOHqEY5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMDo0Njo0MFrOHqzgkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg3NDE0OA==", "bodyText": "How about double-locking inside the method (with proper volatile working) as the lowest-cost synchronization vs always synchronizing?\n(I would think this affects all RepositoryInfo sub-classes but as just a mostly-harmless, occasional redundant-run. Or am I misunderstanding?)", "url": "https://github.com/oracle/opengrok/pull/3333#discussion_r513874148", "createdAt": "2020-10-29T01:58:30Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java", "diffHunk": "@@ -518,24 +528,32 @@ boolean isNestable() {\n         return true;\n     }\n \n+    private static boolean isGitWorking(String repoCommand) {\n+        Executor exec = new Executor(new String[]{repoCommand, \"--version\"});\n+        if (exec.exec(false) == 0) {\n+            final String outputVersion = exec.getOutputString();\n+            final String version = outputVersion.replaceAll(\".*? version (\\\\d+(\\\\.\\\\d+)*).*\", \"$1\");\n+            try {\n+                return Version.from(version).compareTo(MINIMUM_VERSION) >= 0;\n+            } catch (NumberFormatException ex) {\n+                LOGGER.log(Level.WARNING, String.format(\"Unable to detect git version from %s\", outputVersion), ex);\n+            }\n+        }\n+        return false;\n+    }\n+\n     @Override\n-    public boolean isWorking() {\n+    public synchronized boolean isWorking() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c715d131d61e4d9eb39386ec290546c95ccdea72"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg4MDM1NA==", "bodyText": "It seems that double-locking is an overkill here. Once GIT_IS_WORKING is initialized by one instance of GitRepository, the method will be very quick and lock contention is not likely to be an issue. Also, there are no other synchronized methods just yet. In general, inheritance from RepositoryInfo does not look like a good choice here, as it is mutable and not properly synchronized. Repository should be an interface, with, maybe a base abstract implementation class, allowing for more flexibility in how to make it thread-safe (immutability, etc)\nI have not looked closely at other Repository subclasses, iirc, some of them actually run commands pertaining to the actual repository in order to determine whether a given Repository instance is working. I am trying to contribute back to the community some of the optimizations I ended up doing for my employer where we use opengrok with git, hence, only fixing GitRepository. This fix is useful to improve indexing performance of installations with many (e.g. 10k) repositories, so it is harmless from correctness perspective but not from indexing speed perspective.", "url": "https://github.com/oracle/opengrok/pull/3333#discussion_r513880354", "createdAt": "2020-10-29T02:12:25Z", "author": {"login": "azakkerman"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java", "diffHunk": "@@ -518,24 +528,32 @@ boolean isNestable() {\n         return true;\n     }\n \n+    private static boolean isGitWorking(String repoCommand) {\n+        Executor exec = new Executor(new String[]{repoCommand, \"--version\"});\n+        if (exec.exec(false) == 0) {\n+            final String outputVersion = exec.getOutputString();\n+            final String version = outputVersion.replaceAll(\".*? version (\\\\d+(\\\\.\\\\d+)*).*\", \"$1\");\n+            try {\n+                return Version.from(version).compareTo(MINIMUM_VERSION) >= 0;\n+            } catch (NumberFormatException ex) {\n+                LOGGER.log(Level.WARNING, String.format(\"Unable to detect git version from %s\", outputVersion), ex);\n+            }\n+        }\n+        return false;\n+    }\n+\n     @Override\n-    public boolean isWorking() {\n+    public synchronized boolean isWorking() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg3NDE0OA=="}, "originalCommit": {"oid": "c715d131d61e4d9eb39386ec290546c95ccdea72"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg4Nzg2MQ==", "bodyText": "Ah OK I'm clear now that you're striving for once-per-run initialization of Git is-working. The pattern in OpenGrok would be to add a static LazilyInstantiate<Boolean> that synchronizes until initialized and thereafter doesn't bother to synchronize at all.", "url": "https://github.com/oracle/opengrok/pull/3333#discussion_r513887861", "createdAt": "2020-10-29T02:29:13Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java", "diffHunk": "@@ -518,24 +528,32 @@ boolean isNestable() {\n         return true;\n     }\n \n+    private static boolean isGitWorking(String repoCommand) {\n+        Executor exec = new Executor(new String[]{repoCommand, \"--version\"});\n+        if (exec.exec(false) == 0) {\n+            final String outputVersion = exec.getOutputString();\n+            final String version = outputVersion.replaceAll(\".*? version (\\\\d+(\\\\.\\\\d+)*).*\", \"$1\");\n+            try {\n+                return Version.from(version).compareTo(MINIMUM_VERSION) >= 0;\n+            } catch (NumberFormatException ex) {\n+                LOGGER.log(Level.WARNING, String.format(\"Unable to detect git version from %s\", outputVersion), ex);\n+            }\n+        }\n+        return false;\n+    }\n+\n     @Override\n-    public boolean isWorking() {\n+    public synchronized boolean isWorking() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg3NDE0OA=="}, "originalCommit": {"oid": "c715d131d61e4d9eb39386ec290546c95ccdea72"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg5NzM3MQ==", "bodyText": "@azakkerman, apologies if already answered, but you write the following:\n\n... trying to contribute back to the community some of the optimizations I ended up doing for my employer ....\n\nand on another issue:\n\nit requires some work to get past our corporate process for submitting OSS patches.\n\nWould these require your company copyright to be asserted in contributions?", "url": "https://github.com/oracle/opengrok/pull/3333#discussion_r513897371", "createdAt": "2020-10-29T02:47:44Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java", "diffHunk": "@@ -518,24 +528,32 @@ boolean isNestable() {\n         return true;\n     }\n \n+    private static boolean isGitWorking(String repoCommand) {\n+        Executor exec = new Executor(new String[]{repoCommand, \"--version\"});\n+        if (exec.exec(false) == 0) {\n+            final String outputVersion = exec.getOutputString();\n+            final String version = outputVersion.replaceAll(\".*? version (\\\\d+(\\\\.\\\\d+)*).*\", \"$1\");\n+            try {\n+                return Version.from(version).compareTo(MINIMUM_VERSION) >= 0;\n+            } catch (NumberFormatException ex) {\n+                LOGGER.log(Level.WARNING, String.format(\"Unable to detect git version from %s\", outputVersion), ex);\n+            }\n+        }\n+        return false;\n+    }\n+\n     @Override\n-    public boolean isWorking() {\n+    public synchronized boolean isWorking() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg3NDE0OA=="}, "originalCommit": {"oid": "c715d131d61e4d9eb39386ec290546c95ccdea72"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIwODUxMQ==", "bodyText": "Ah OK I'm clear now that you're striving for once-per-run initialization of Git is-working. The pattern in OpenGrok would be to add a static LazilyInstantiate that synchronizes until initialized and thereafter doesn't bother to synchronize at all.\n\nUpdated the code\n\nWould these require your company copyright to be asserted in contributions?\n\nI received approval. They ask to include work email in addition to personal email. Will double-check if they want to add copyright as well. The issue is mostly about exporting patches from the internal network, but I chose to simply re-implement the code.", "url": "https://github.com/oracle/opengrok/pull/3333#discussion_r514208511", "createdAt": "2020-10-29T12:08:07Z", "author": {"login": "azakkerman"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java", "diffHunk": "@@ -518,24 +528,32 @@ boolean isNestable() {\n         return true;\n     }\n \n+    private static boolean isGitWorking(String repoCommand) {\n+        Executor exec = new Executor(new String[]{repoCommand, \"--version\"});\n+        if (exec.exec(false) == 0) {\n+            final String outputVersion = exec.getOutputString();\n+            final String version = outputVersion.replaceAll(\".*? version (\\\\d+(\\\\.\\\\d+)*).*\", \"$1\");\n+            try {\n+                return Version.from(version).compareTo(MINIMUM_VERSION) >= 0;\n+            } catch (NumberFormatException ex) {\n+                LOGGER.log(Level.WARNING, String.format(\"Unable to detect git version from %s\", outputVersion), ex);\n+            }\n+        }\n+        return false;\n+    }\n+\n     @Override\n-    public boolean isWorking() {\n+    public synchronized boolean isWorking() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg3NDE0OA=="}, "originalCommit": {"oid": "c715d131d61e4d9eb39386ec290546c95ccdea72"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMjkzMA==", "bodyText": "org.opengrok.indexer.util.LazilyInstantiate would do the synchronization. Would this method need to be synchronized?", "url": "https://github.com/oracle/opengrok/pull/3333#discussion_r514632930", "createdAt": "2020-10-29T23:56:07Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java", "diffHunk": "@@ -518,24 +528,32 @@ boolean isNestable() {\n         return true;\n     }\n \n+    private static boolean isGitWorking(String repoCommand) {\n+        Executor exec = new Executor(new String[]{repoCommand, \"--version\"});\n+        if (exec.exec(false) == 0) {\n+            final String outputVersion = exec.getOutputString();\n+            final String version = outputVersion.replaceAll(\".*? version (\\\\d+(\\\\.\\\\d+)*).*\", \"$1\");\n+            try {\n+                return Version.from(version).compareTo(MINIMUM_VERSION) >= 0;\n+            } catch (NumberFormatException ex) {\n+                LOGGER.log(Level.WARNING, String.format(\"Unable to detect git version from %s\", outputVersion), ex);\n+            }\n+        }\n+        return false;\n+    }\n+\n     @Override\n-    public boolean isWorking() {\n+    public synchronized boolean isWorking() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg3NDE0OA=="}, "originalCommit": {"oid": "c715d131d61e4d9eb39386ec290546c95ccdea72"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzOTA3NA==", "bodyText": "LazilyInstantiate only synchronizes the static GIT_IS_WORKING, but not this.working. Java Memory Model does not guarantee any visibility for read after write across threads w/o use of synchronizing primitives to force memory barriers. My assertion is that synchronized here is needed for correctness, unless you want to make working field of RepositoryInfo volatile. If you insist, I will remove synchronized, as, in the worst case, this would result in an extra GIT_IS_WORKING.get(), so it should be idempotent.", "url": "https://github.com/oracle/opengrok/pull/3333#discussion_r514639074", "createdAt": "2020-10-30T00:19:05Z", "author": {"login": "azakkerman"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java", "diffHunk": "@@ -518,24 +528,32 @@ boolean isNestable() {\n         return true;\n     }\n \n+    private static boolean isGitWorking(String repoCommand) {\n+        Executor exec = new Executor(new String[]{repoCommand, \"--version\"});\n+        if (exec.exec(false) == 0) {\n+            final String outputVersion = exec.getOutputString();\n+            final String version = outputVersion.replaceAll(\".*? version (\\\\d+(\\\\.\\\\d+)*).*\", \"$1\");\n+            try {\n+                return Version.from(version).compareTo(MINIMUM_VERSION) >= 0;\n+            } catch (NumberFormatException ex) {\n+                LOGGER.log(Level.WARNING, String.format(\"Unable to detect git version from %s\", outputVersion), ex);\n+            }\n+        }\n+        return false;\n+    }\n+\n     @Override\n-    public boolean isWorking() {\n+    public synchronized boolean isWorking() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg3NDE0OA=="}, "originalCommit": {"oid": "c715d131d61e4d9eb39386ec290546c95ccdea72"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY0NjE2MA==", "bodyText": "Indeed. I mean since the reliance now is on LazilyInstantiate for synchronization, and GIT_IS_WORKING.get() can only ever return the same value, there is no need to synchronize here (nor to make working volatile) because redundant get() or assignment to working are harmless.", "url": "https://github.com/oracle/opengrok/pull/3333#discussion_r514646160", "createdAt": "2020-10-30T00:46:40Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java", "diffHunk": "@@ -518,24 +528,32 @@ boolean isNestable() {\n         return true;\n     }\n \n+    private static boolean isGitWorking(String repoCommand) {\n+        Executor exec = new Executor(new String[]{repoCommand, \"--version\"});\n+        if (exec.exec(false) == 0) {\n+            final String outputVersion = exec.getOutputString();\n+            final String version = outputVersion.replaceAll(\".*? version (\\\\d+(\\\\.\\\\d+)*).*\", \"$1\");\n+            try {\n+                return Version.from(version).compareTo(MINIMUM_VERSION) >= 0;\n+            } catch (NumberFormatException ex) {\n+                LOGGER.log(Level.WARNING, String.format(\"Unable to detect git version from %s\", outputVersion), ex);\n+            }\n+        }\n+        return false;\n+    }\n+\n     @Override\n-    public boolean isWorking() {\n+    public synchronized boolean isWorking() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg3NDE0OA=="}, "originalCommit": {"oid": "c715d131d61e4d9eb39386ec290546c95ccdea72"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDYxNjc1OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMzo1NDoyMFrOHqyqlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMDo1MDoyNVrOHqzkzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMjM0MA==", "bodyText": "My meaning was org.opengrok.indexer.util.LazilyInstantiate, which is Jacob Zimmerman's tidy implementation that synchronizes until initialized and soon thereafter doesn't need to even test the state.", "url": "https://github.com/oracle/opengrok/pull/3333#discussion_r514632340", "createdAt": "2020-10-29T23:54:20Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java", "diffHunk": "@@ -43,6 +43,8 @@\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n+import org.apache.commons.lang3.concurrent.ConcurrentException;\n+import org.apache.commons.lang3.concurrent.LazyInitializer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84deb24387ba9cb7b1aeb0b1407f64a8b54719ca"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY0NzI0NQ==", "bodyText": "Please see how swapper() is synchronized, and analyze what happens if redundant calls occur", "url": "https://github.com/oracle/opengrok/pull/3333#discussion_r514647245", "createdAt": "2020-10-30T00:50:25Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java", "diffHunk": "@@ -43,6 +43,8 @@\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n+import org.apache.commons.lang3.concurrent.ConcurrentException;\n+import org.apache.commons.lang3.concurrent.LazyInitializer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMjM0MA=="}, "originalCommit": {"oid": "84deb24387ba9cb7b1aeb0b1407f64a8b54719ca"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTkyMzQxOnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/Repository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwOTowOTozNlrOHrmJqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxNzoyMzoyM1rOHrwrGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ3NTg4MA==", "bodyText": "I wouldn't mind a Class parameter instead of string. @vladak ?", "url": "https://github.com/oracle/opengrok/pull/3333#discussion_r515475880", "createdAt": "2020-10-31T09:09:36Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/Repository.java", "diffHunk": "@@ -548,6 +548,16 @@ static Boolean checkCmd(String... args) {\n         return exec.exec(false) == 0;\n     }\n \n+    protected static String getCommand(String className, String propertyKey, String fallbackCommand) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01daad534769caaccc71defb1adc436bdec7114a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0ODI4Mw==", "bodyText": "I concur.", "url": "https://github.com/oracle/opengrok/pull/3333#discussion_r515648283", "createdAt": "2020-11-01T17:23:23Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/Repository.java", "diffHunk": "@@ -548,6 +548,16 @@ static Boolean checkCmd(String... args) {\n         return exec.exec(false) == 0;\n     }\n \n+    protected static String getCommand(String className, String propertyKey, String fallbackCommand) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ3NTg4MA=="}, "originalCommit": {"oid": "01daad534769caaccc71defb1adc436bdec7114a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTkyNTQ3OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwOToxMjoyNVrOHrmKoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwOToxMjoyNVrOHrmKoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ3NjEyOA==", "bodyText": "As this is not used anywhere else it does not need to be generic (wrt to the repository command). You can get the command inside this function and do just\nLazilyInstantiate.using(GitRepository::isGitWorking);", "url": "https://github.com/oracle/opengrok/pull/3333#discussion_r515476128", "createdAt": "2020-10-31T09:12:25Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java", "diffHunk": "@@ -95,6 +96,28 @@\n      */\n     private static final Version MINIMUM_VERSION = new Version(2, 1, 2);\n \n+    /**\n+     * This is a static replacement for 'working' field. Effectively, check if git is working once in a JVM\n+     * instead of calling it for every GitRepository instance.\n+     */\n+    private static final LazilyInstantiate<Boolean> GIT_IS_WORKING = LazilyInstantiate.using(\n+            () -> isGitWorking(getCommand(GitRepository.class.getCanonicalName(), CMD_PROPERTY_KEY, CMD_FALLBACK)));\n+\n+    private static boolean isGitWorking(String repoCommand) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01daad534769caaccc71defb1adc436bdec7114a"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTkyNTgyOnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwOToxMjo1NlrOHrmKzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwOToxMjo1NlrOHrmKzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ3NjE3NA==", "bodyText": "Would you mind moving this private static method below the constructor at least?", "url": "https://github.com/oracle/opengrok/pull/3333#discussion_r515476174", "createdAt": "2020-10-31T09:12:56Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java", "diffHunk": "@@ -95,6 +96,28 @@\n      */\n     private static final Version MINIMUM_VERSION = new Version(2, 1, 2);\n \n+    /**\n+     * This is a static replacement for 'working' field. Effectively, check if git is working once in a JVM\n+     * instead of calling it for every GitRepository instance.\n+     */\n+    private static final LazilyInstantiate<Boolean> GIT_IS_WORKING = LazilyInstantiate.using(\n+            () -> isGitWorking(getCommand(GitRepository.class.getCanonicalName(), CMD_PROPERTY_KEY, CMD_FALLBACK)));\n+\n+    private static boolean isGitWorking(String repoCommand) {\n+        Executor exec = new Executor(new String[]{repoCommand, \"--version\"});\n+        if (exec.exec(false) == 0) {\n+            final String outputVersion = exec.getOutputString();\n+            final String version = outputVersion.replaceAll(\".*? version (\\\\d+(\\\\.\\\\d+)*).*\", \"$1\");\n+            try {\n+                return Version.from(version).compareTo(MINIMUM_VERSION) >= 0;\n+            } catch (NumberFormatException ex) {\n+                LOGGER.log(Level.WARNING, String.format(\"Unable to detect git version from %s\", outputVersion), ex);\n+            }\n+        }\n+        return false;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01daad534769caaccc71defb1adc436bdec7114a"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4862, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}