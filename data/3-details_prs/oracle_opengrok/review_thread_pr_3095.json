{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0MjA0Mzk0", "number": 3095, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNToyNjo0OFrODrstmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoxMTozMlrODuUG-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTQ3OTMwOnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/SubversionHistoryParser.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNToyNjo0OFrOF8Mbog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTo1Mzo1NVrOF8NxQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2MjU2Mg==", "bodyText": "Perhaps add e.g. static final String SVN_MILLIS_DATE_EG with the known-good format and then use SVN_MILLIS_DATE_EG.length() to avoid the unnamed literals here and the next line?\n(This reminds of a TODO to refactor out of the old DateFormat for thread safety \u2014 and you've now made apparent also for microseconds handling.)", "url": "https://github.com/oracle/opengrok/pull/3095#discussion_r398662562", "createdAt": "2020-03-26T15:26:48Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/SubversionHistoryParser.java", "diffHunk": "@@ -89,7 +102,12 @@ public void endElement(String uri, String localName, String qname) throws SAXExc\n                 entry.setAuthor(s);\n             } else if (\"date\".equals(qname)) {\n                 try {\n-                    entry.setDate(repository.parse(s));\n+                    // need to strip microseconds off - assume final character is Z otherwise invalid anyway.\n+                    String dateString = s;\n+                    if (s.length() > 24) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3fc749f9e0f783b878a61d0e03b900a1d4a685f"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY3Nzk0NQ==", "bodyText": "Good idea.\nAlso thought it would be good to get rid of java.util.Date generally, but that seemed quite invasive for a first contribution!", "url": "https://github.com/oracle/opengrok/pull/3095#discussion_r398677945", "createdAt": "2020-03-26T15:45:34Z", "author": {"login": "harrisric"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/SubversionHistoryParser.java", "diffHunk": "@@ -89,7 +102,12 @@ public void endElement(String uri, String localName, String qname) throws SAXExc\n                 entry.setAuthor(s);\n             } else if (\"date\".equals(qname)) {\n                 try {\n-                    entry.setDate(repository.parse(s));\n+                    // need to strip microseconds off - assume final character is Z otherwise invalid anyway.\n+                    String dateString = s;\n+                    if (s.length() > 24) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2MjU2Mg=="}, "originalCommit": {"oid": "b3fc749f9e0f783b878a61d0e03b900a1d4a685f"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY4NDQ4MQ==", "bodyText": "I assume you mean this comment: \n  \n    \n      opengrok/opengrok-indexer/src/main/java/org/opengrok/indexer/history/Repository.java\n    \n    \n         Line 620\n      in\n      52fc293\n    \n    \n    \n    \n\n        \n          \n           // NOTE: SimpleDateFormat is not thread-safe, lock must be held when used \n        \n    \n  \n\n\nHaving TODO's just in the source code is not good, filed  #3096 to track this.", "url": "https://github.com/oracle/opengrok/pull/3095#discussion_r398684481", "createdAt": "2020-03-26T15:53:55Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/SubversionHistoryParser.java", "diffHunk": "@@ -89,7 +102,12 @@ public void endElement(String uri, String localName, String qname) throws SAXExc\n                 entry.setAuthor(s);\n             } else if (\"date\".equals(qname)) {\n                 try {\n-                    entry.setDate(repository.parse(s));\n+                    // need to strip microseconds off - assume final character is Z otherwise invalid anyway.\n+                    String dateString = s;\n+                    if (s.length() > 24) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2MjU2Mg=="}, "originalCommit": {"oid": "b3fc749f9e0f783b878a61d0e03b900a1d4a685f"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3OTE3NDE2OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/SubversionHistoryParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxNTo0Mzo0NlrOF9Sx1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxNTo0Mzo0NlrOF9Sx1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgxNTEyNw==", "bodyText": "This and the next line seem accidentally modified", "url": "https://github.com/oracle/opengrok/pull/3095#discussion_r399815127", "createdAt": "2020-03-29T15:43:46Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/SubversionHistoryParser.java", "diffHunk": "@@ -99,11 +123,14 @@ public void endElement(String uri, String localName, String qname) throws SAXExc\n                  * top-level directory itself, hence the check for inequality.\n                  */\n                 if (s.startsWith(prefix) && !s.equals(prefix)) {\n-                    File file = new File(home, s.substring(prefix.length()));\n-                    String path = file.getAbsolutePath().substring(length);\n+                  File file = new File(home, s.substring(prefix.length()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "515b430c634104d393f60b2e413c238f93a093f6"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3OTE3OTc4OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/SubversionHistoryParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxNTo0OToyOVrOF9S0ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxNTo0OToyOVrOF9S0ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgxNTg2Ng==", "bodyText": "Please check formatting. Per @ahornace, \"LineLength - standard is now 120 chars per line, but I kept it relaxed [for auto-checkstyle]\"", "url": "https://github.com/oracle/opengrok/pull/3095#discussion_r399815866", "createdAt": "2020-03-29T15:49:29Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/SubversionHistoryParser.java", "diffHunk": "@@ -89,7 +108,12 @@ public void endElement(String uri, String localName, String qname) throws SAXExc\n                 entry.setAuthor(s);\n             } else if (\"date\".equals(qname)) {\n                 try {\n-                    entry.setDate(repository.parse(s));\n+                    // need to strip microseconds off - assume final character is Z otherwise invalid anyway.\n+                    String dateString = s;\n+                    if (s.length() > SVN_MILLIS_DATE_LENGTH) {\n+                      dateString = dateString.substring(0, SVN_MILLIS_DATE_LENGTH - 1) + dateString.charAt(dateString.length() - 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "515b430c634104d393f60b2e413c238f93a093f6"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3OTE4MTE0OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/SubversionHistoryParser.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxNTo1MDo0NlrOF9S1bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxODozMDoxMVrOF9UAGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgxNjA0Nw==", "bodyText": "I wonder if this might be clearer if you just used log data instead of deriving from a File that we just created from the same log data?\ns.substring(prefix.length() + 1) (similar to line 126) since s I think would start with a / for Subversion?", "url": "https://github.com/oracle/opengrok/pull/3095#discussion_r399816047", "createdAt": "2020-03-29T15:50:46Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/SubversionHistoryParser.java", "diffHunk": "@@ -99,11 +123,14 @@ public void endElement(String uri, String localName, String qname) throws SAXExc\n                  * top-level directory itself, hence the check for inequality.\n                  */\n                 if (s.startsWith(prefix) && !s.equals(prefix)) {\n-                    File file = new File(home, s.substring(prefix.length()));\n-                    String path = file.getAbsolutePath().substring(length);\n+                  File file = new File(home, s.substring(prefix.length()));\n+                  String path = file.getAbsolutePath().substring(length);\n                     // The same file names may be repeated in many commits,\n                     // so intern them to reduce the memory footprint.\n                     entry.addFile(path.intern());\n+                    if (isRenamed) {\n+                      renamedFiles.add(file.getAbsolutePath().substring(home.length() + 1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "515b430c634104d393f60b2e413c238f93a093f6"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgzMjY4NA==", "bodyText": "Thanks, but unfortunately not as simple as that - the use of File also means that we switch convention from forward-slash to back-slash as well.\nI tried to write a unit test which showed this but that seems to show up the limitations of the SubversionHistoryParserTest using a fixed 'home' of '/' (which on windows might e.g. become 'C:' and therefore even with the current code appears to leave the leading-slash in place).\nI've made the other formatting corrections suggested (hopefully caught them all - the 2-space indentation is the standard in my IDE at work).", "url": "https://github.com/oracle/opengrok/pull/3095#discussion_r399832684", "createdAt": "2020-03-29T18:08:33Z", "author": {"login": "harrisric"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/SubversionHistoryParser.java", "diffHunk": "@@ -99,11 +123,14 @@ public void endElement(String uri, String localName, String qname) throws SAXExc\n                  * top-level directory itself, hence the check for inequality.\n                  */\n                 if (s.startsWith(prefix) && !s.equals(prefix)) {\n-                    File file = new File(home, s.substring(prefix.length()));\n-                    String path = file.getAbsolutePath().substring(length);\n+                  File file = new File(home, s.substring(prefix.length()));\n+                  String path = file.getAbsolutePath().substring(length);\n                     // The same file names may be repeated in many commits,\n                     // so intern them to reduce the memory footprint.\n                     entry.addFile(path.intern());\n+                    if (isRenamed) {\n+                      renamedFiles.add(file.getAbsolutePath().substring(home.length() + 1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgxNjA0Nw=="}, "originalCommit": {"oid": "515b430c634104d393f60b2e413c238f93a093f6"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgzNTE2Mg==", "bodyText": "Oh I see. Thank you for explaining. I forget the Windows considerations.", "url": "https://github.com/oracle/opengrok/pull/3095#discussion_r399835162", "createdAt": "2020-03-29T18:30:11Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/SubversionHistoryParser.java", "diffHunk": "@@ -99,11 +123,14 @@ public void endElement(String uri, String localName, String qname) throws SAXExc\n                  * top-level directory itself, hence the check for inequality.\n                  */\n                 if (s.startsWith(prefix) && !s.equals(prefix)) {\n-                    File file = new File(home, s.substring(prefix.length()));\n-                    String path = file.getAbsolutePath().substring(length);\n+                  File file = new File(home, s.substring(prefix.length()));\n+                  String path = file.getAbsolutePath().substring(length);\n                     // The same file names may be repeated in many commits,\n                     // so intern them to reduce the memory footprint.\n                     entry.addFile(path.intern());\n+                    if (isRenamed) {\n+                      renamedFiles.add(file.getAbsolutePath().substring(home.length() + 1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgxNjA0Nw=="}, "originalCommit": {"oid": "515b430c634104d393f60b2e413c238f93a093f6"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODg5MTc0OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/SubversionHistoryParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDowNzoyOFrOGAPB8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDowNzoyOFrOGAPB8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5OTQ0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * Example of the longest date format that we should except - SimpleDateFormat cannot cope with micro/nano seconds.\n          \n          \n            \n                     * Example of the longest date format that we should accept - SimpleDateFormat cannot cope with micro/nano seconds.", "url": "https://github.com/oracle/opengrok/pull/3095#discussion_r402899442", "createdAt": "2020-04-03T10:07:28Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/SubversionHistoryParser.java", "diffHunk": "@@ -56,13 +61,20 @@\n \n     private static class Handler extends DefaultHandler2 {\n \n+        /**\n+         * Example of the longest date format that we should except - SimpleDateFormat cannot cope with micro/nano seconds.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27102ee5b841234c70abafd7b44ea60ae0f81f6e"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODkwNTIyOnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/history/FileHistoryCacheTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoxMToyNFrOGAPKTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNDozMzozOFrOGAYJ9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwMTU4MQ==", "bodyText": "set this to false at the end of the test ?", "url": "https://github.com/oracle/opengrok/pull/3095#discussion_r402901581", "createdAt": "2020-04-03T10:11:24Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/history/FileHistoryCacheTest.java", "diffHunk": "@@ -607,6 +610,134 @@ public void testRenamedFilePlusChangesBranched() throws Exception {\n                 updatedHistory.getHistoryEntries(), false);\n     }\n \n+\n+    /**\n+     * Make sure produces correct history where several files are renamed in a single commit.\n+     */\n+    @ConditionalRun(RepositoryInstalled.SubversionInstalled.class)\n+    @Test\n+    public void testMultipleRenamedFiles() throws Exception {\n+        File reposRoot = new File(repositories.getSourceRoot(), \"subversion\");\n+        History updatedHistory;\n+\n+        // The test expects support for renamed files.\n+        RuntimeEnvironment.getInstance().setHandleHistoryOfRenamedFiles(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27102ee5b841234c70abafd7b44ea60ae0f81f6e"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA0ODk0OQ==", "bodyText": "Good point - there is already some resetting being done in the tearDown - I'll make sure that all variables are reset to their defaults. Unfortunately not a clean way to do this that I can see.", "url": "https://github.com/oracle/opengrok/pull/3095#discussion_r403048949", "createdAt": "2020-04-03T14:33:38Z", "author": {"login": "harrisric"}, "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/history/FileHistoryCacheTest.java", "diffHunk": "@@ -607,6 +610,134 @@ public void testRenamedFilePlusChangesBranched() throws Exception {\n                 updatedHistory.getHistoryEntries(), false);\n     }\n \n+\n+    /**\n+     * Make sure produces correct history where several files are renamed in a single commit.\n+     */\n+    @ConditionalRun(RepositoryInstalled.SubversionInstalled.class)\n+    @Test\n+    public void testMultipleRenamedFiles() throws Exception {\n+        File reposRoot = new File(repositories.getSourceRoot(), \"subversion\");\n+        History updatedHistory;\n+\n+        // The test expects support for renamed files.\n+        RuntimeEnvironment.getInstance().setHandleHistoryOfRenamedFiles(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwMTU4MQ=="}, "originalCommit": {"oid": "27102ee5b841234c70abafd7b44ea60ae0f81f6e"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODkwNTUyOnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/history/FileHistoryCacheTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoxMTozMlrOGAPKfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoxMTozMlrOGAPKfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwMTYzMA==", "bodyText": "ditto", "url": "https://github.com/oracle/opengrok/pull/3095#discussion_r402901630", "createdAt": "2020-04-03T10:11:32Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/history/FileHistoryCacheTest.java", "diffHunk": "@@ -607,6 +610,134 @@ public void testRenamedFilePlusChangesBranched() throws Exception {\n                 updatedHistory.getHistoryEntries(), false);\n     }\n \n+\n+    /**\n+     * Make sure produces correct history where several files are renamed in a single commit.\n+     */\n+    @ConditionalRun(RepositoryInstalled.SubversionInstalled.class)\n+    @Test\n+    public void testMultipleRenamedFiles() throws Exception {\n+        File reposRoot = new File(repositories.getSourceRoot(), \"subversion\");\n+        History updatedHistory;\n+\n+        // The test expects support for renamed files.\n+        RuntimeEnvironment.getInstance().setHandleHistoryOfRenamedFiles(true);\n+\n+        // Generate history index.\n+        Repository repo = RepositoryFactory.getRepository(reposRoot);\n+        History historyToStore = repo.getHistory(reposRoot);\n+        cache.store(historyToStore, repo);\n+\n+        /* quick sanity check */\n+        updatedHistory = cache.get(reposRoot, repo, true);\n+        assertEquals(10, updatedHistory.getHistoryEntries().size());\n+\n+        // Check complete list of history entries for the renamed file.\n+        File testFile = new File(reposRoot.toString() + File.separatorChar + \"FileZ.txt\");\n+        updatedHistory = cache.get(testFile, repo, false);\n+        assertEquals(3, updatedHistory.getHistoryEntries().size());\n+\n+        HistoryEntry e0 = new HistoryEntry(\n+                \"10\",\n+                DateUtils.parseDate(\"2020-03-28T07:24:43.921Z\", SVN_DATE_FORMAT),\n+                \"RichardH\",\n+                null,\n+                \"Rename FileA to FileZ and FileB to FileX in a single commit\",\n+                true);\n+        HistoryEntry e1 = new HistoryEntry(\n+                \"7\",\n+                DateUtils.parseDate(\"2020-03-28T07:21:55.273Z\", SVN_DATE_FORMAT),\n+                \"RichardH\",\n+                null,\n+                \"Amend file A\",\n+                true);\n+        HistoryEntry e2 = new HistoryEntry(\n+                \"6\",\n+                DateUtils.parseDate(\"2020-03-28T07:21:05.888Z\", SVN_DATE_FORMAT),\n+                \"RichardH\",\n+                null,\n+                \"Add file A\",\n+                true);\n+\n+        History histConstruct = new History();\n+        LinkedList<HistoryEntry> entriesConstruct = new LinkedList<>();\n+        entriesConstruct.add(e0);\n+        entriesConstruct.add(e1);\n+        entriesConstruct.add(e2);\n+        histConstruct.setHistoryEntries(entriesConstruct);\n+        assertSameEntries(histConstruct.getHistoryEntries(),\n+                updatedHistory.getHistoryEntries(), false);\n+    }\n+\n+\n+    /**\n+     * Make sure produces correct history for a renamed and moved file in Subversion\n+     */\n+    @ConditionalRun(RepositoryInstalled.SubversionInstalled.class)\n+    @Test\n+    public void testRenamedFile() throws Exception {\n+        File reposRoot = new File(repositories.getSourceRoot(), \"subversion\");\n+        History updatedHistory;\n+\n+        // The test expects support for renamed files.\n+        RuntimeEnvironment.getInstance().setHandleHistoryOfRenamedFiles(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27102ee5b841234c70abafd7b44ea60ae0f81f6e"}, "originalPosition": 152}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 212, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}