{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzOTk2MDY3", "number": 3372, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDo1NTowM1rOE7PPpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMDozNzoyM1rOE-l5Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTUxMjA3OnYy", "diffSide": "LEFT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDo1NTowM1rOH2xPxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODozODo1OFrOH3FqHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE5MjAwNg==", "bodyText": "Please don't relocate this. That breaks known failure handling where we would actually not want to finish writing. I.e. finishWriting() in advance of a RuntimeException catch is deliberate.\nRecommend you swallow web exceptions as per your alternative idea. Web exceptions didn't used to abort an index run; you used to be able to index without Opengrok web running. Not sure what changed or when to break that.", "url": "https://github.com/oracle/opengrok/pull/3372#discussion_r527192006", "createdAt": "2020-11-19T20:55:03Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -486,17 +487,17 @@ public void update() throws IOException {\n                     reader.close();\n                 }\n             }\n-\n-            try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a8debca1220afd5011be27920e56dda74eedcea"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUyNjQyOA==", "bodyText": "Oh, okay. Also added a comment there. The API failure is really a soft one.", "url": "https://github.com/oracle/opengrok/pull/3372#discussion_r527526428", "createdAt": "2020-11-20T08:38:58Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -486,17 +487,17 @@ public void update() throws IOException {\n                     reader.close();\n                 }\n             }\n-\n-            try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE5MjAwNg=="}, "originalCommit": {"oid": "8a8debca1220afd5011be27920e56dda74eedcea"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMzk2OTc5OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMTozNTowN1rOH39TyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwODowNzoyOFrOH4CguA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzODIxNg==", "bodyText": "I worry on NTFS that a deletion of an open file wouldn't succeed as it would do on *nix. Perhaps instead schedule a PendingFileDeletion of the transientXref?", "url": "https://github.com/oracle/opengrok/pull/3372#discussion_r528438216", "createdAt": "2020-11-23T01:35:07Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -725,8 +739,28 @@ private void addFile(File file, String path, Ctags ctags)\n         fa.setFoldingEnabled(env.isFoldingEnabled());\n \n         Document doc = new Document();\n-        try (Writer xrefOut = newXrefWriter(fa, path)) {\n+        CountingWriter xrefOut = null;\n+        try {\n+            String xrefAbs = null;\n+            File transientXref = null;\n+            if (env.isGenerateHtml()) {\n+                xrefAbs = getXrefPath(path);\n+                transientXref = new File(TandemPath.join(xrefAbs,\n+                        PendingFileCompleter.PENDING_EXTENSION));\n+                xrefOut = newXrefWriter(path, transientXref, env.isCompressXref());\n+            }\n+\n             analyzerGuru.populateDocument(doc, file, path, fa, xrefOut);\n+\n+            // Avoid producing empty xref files.\n+            if (xrefOut != null && xrefOut.getCount() > 0) {\n+                PendingFileRenaming ren = new PendingFileRenaming(xrefAbs,\n+                        transientXref.getAbsolutePath());\n+                completer.add(ren);\n+            } else if (xrefOut != null) {\n+                LOGGER.log(Level.FINER, \"xref for {0} would be empty, removing\", path);\n+                transientXref.delete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64f5708ab95ecbcbcde4944c312b89da6c08a8d8"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUyMzQ0OA==", "bodyText": "Good point. I had the same idea however thought it is unnecessary.", "url": "https://github.com/oracle/opengrok/pull/3372#discussion_r528523448", "createdAt": "2020-11-23T08:07:28Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -725,8 +739,28 @@ private void addFile(File file, String path, Ctags ctags)\n         fa.setFoldingEnabled(env.isFoldingEnabled());\n \n         Document doc = new Document();\n-        try (Writer xrefOut = newXrefWriter(fa, path)) {\n+        CountingWriter xrefOut = null;\n+        try {\n+            String xrefAbs = null;\n+            File transientXref = null;\n+            if (env.isGenerateHtml()) {\n+                xrefAbs = getXrefPath(path);\n+                transientXref = new File(TandemPath.join(xrefAbs,\n+                        PendingFileCompleter.PENDING_EXTENSION));\n+                xrefOut = newXrefWriter(path, transientXref, env.isCompressXref());\n+            }\n+\n             analyzerGuru.populateDocument(doc, file, path, fa, xrefOut);\n+\n+            // Avoid producing empty xref files.\n+            if (xrefOut != null && xrefOut.getCount() > 0) {\n+                PendingFileRenaming ren = new PendingFileRenaming(xrefAbs,\n+                        transientXref.getAbsolutePath());\n+                completer.add(ren);\n+            } else if (xrefOut != null) {\n+                LOGGER.log(Level.FINER, \"xref for {0} would be empty, removing\", path);\n+                transientXref.delete();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzODIxNg=="}, "originalCommit": {"oid": "64f5708ab95ecbcbcde4944c312b89da6c08a8d8"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzE3NTY0OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjoyNToxOVrOH57EdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMzowMjo0OVrOH6ajKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ5ODY3Nw==", "bodyText": "Not sure the ramification, but usually we would see used the log(Level, String, Throwable) method when an entire Throwable is reported (versus e.g. just the getMessage())", "url": "https://github.com/oracle/opengrok/pull/3372#discussion_r530498677", "createdAt": "2020-11-25T16:25:19Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -353,27 +354,38 @@ private void markProjectIndexed(Project project) {\n         // Successfully indexed the project. The message is sent even if\n         // the project's isIndexed() is true because it triggers RepositoryInfo\n         // refresh.\n-        if (project != null) {\n-            // Also need to store the correct value in configuration\n-            // when indexer writes it to a file.\n-            project.setIndexed(true);\n-\n-            if (env.getConfigURI() != null) {\n-                Response r = ClientBuilder.newClient()\n-                        .target(env.getConfigURI())\n-                        .path(\"api\")\n-                        .path(\"v1\")\n-                        .path(\"projects\")\n-                        .path(Util.URIEncode(project.getName()))\n-                        .path(\"indexed\")\n-                        .request()\n-                        .put(Entity.text(\"\"));\n-\n-                if (r.getStatusInfo().getFamily() != Response.Status.Family.SUCCESSFUL) {\n-                    LOGGER.log(Level.WARNING, \"Couldn''t notify the webapp that project {0} was indexed: {1}\",\n-                            new Object[] {project, r});\n-                }\n-            }\n+        if (project == null) {\n+            return;\n+        }\n+\n+        // Also need to store the correct value in configuration\n+        // when indexer writes it to a file.\n+        project.setIndexed(true);\n+\n+        if (env.getConfigURI() == null) {\n+            return;\n+        }\n+\n+        Response r;\n+        try {\n+            r = ClientBuilder.newClient()\n+                    .target(env.getConfigURI())\n+                    .path(\"api\")\n+                    .path(\"v1\")\n+                    .path(\"projects\")\n+                    .path(Util.URIEncode(project.getName()))\n+                    .path(\"indexed\")\n+                    .request()\n+                    .put(Entity.text(\"\"));\n+        } catch (RuntimeException e) {\n+            LOGGER.log(Level.WARNING, \"Couldn''t notify the webapp that project {0} was indexed: {1}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33a15e8d9e7a74c593fc2074921f810cddd9840e"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAxNDQ0MA==", "bodyText": "True, changed.", "url": "https://github.com/oracle/opengrok/pull/3372#discussion_r531014440", "createdAt": "2020-11-26T13:02:49Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -353,27 +354,38 @@ private void markProjectIndexed(Project project) {\n         // Successfully indexed the project. The message is sent even if\n         // the project's isIndexed() is true because it triggers RepositoryInfo\n         // refresh.\n-        if (project != null) {\n-            // Also need to store the correct value in configuration\n-            // when indexer writes it to a file.\n-            project.setIndexed(true);\n-\n-            if (env.getConfigURI() != null) {\n-                Response r = ClientBuilder.newClient()\n-                        .target(env.getConfigURI())\n-                        .path(\"api\")\n-                        .path(\"v1\")\n-                        .path(\"projects\")\n-                        .path(Util.URIEncode(project.getName()))\n-                        .path(\"indexed\")\n-                        .request()\n-                        .put(Entity.text(\"\"));\n-\n-                if (r.getStatusInfo().getFamily() != Response.Status.Family.SUCCESSFUL) {\n-                    LOGGER.log(Level.WARNING, \"Couldn''t notify the webapp that project {0} was indexed: {1}\",\n-                            new Object[] {project, r});\n-                }\n-            }\n+        if (project == null) {\n+            return;\n+        }\n+\n+        // Also need to store the correct value in configuration\n+        // when indexer writes it to a file.\n+        project.setIndexed(true);\n+\n+        if (env.getConfigURI() == null) {\n+            return;\n+        }\n+\n+        Response r;\n+        try {\n+            r = ClientBuilder.newClient()\n+                    .target(env.getConfigURI())\n+                    .path(\"api\")\n+                    .path(\"v1\")\n+                    .path(\"projects\")\n+                    .path(Util.URIEncode(project.getName()))\n+                    .path(\"indexed\")\n+                    .request()\n+                    .put(Entity.text(\"\"));\n+        } catch (RuntimeException e) {\n+            LOGGER.log(Level.WARNING, \"Couldn''t notify the webapp that project {0} was indexed: {1}\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ5ODY3Nw=="}, "originalCommit": {"oid": "33a15e8d9e7a74c593fc2074921f810cddd9840e"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzE5MzM2OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjoyOToyM1rOH57Prw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMzowNzoxM1rOH6asvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUwMTU1MQ==", "bodyText": "redundant?", "url": "https://github.com/oracle/opengrok/pull/3372#discussion_r530501551", "createdAt": "2020-11-25T16:29:23Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -1629,46 +1666,63 @@ public int hashCode() {\n         return hash;\n     }\n \n-    private boolean isXrefWriter(AbstractAnalyzer fa) {\n-        AbstractAnalyzer.Genre g = fa.getFactory().getGenre();\n-        return (g == AbstractAnalyzer.Genre.PLAIN || g == AbstractAnalyzer.Genre.XREFABLE);\n+    private class CountingWriter extends Writer {\n+        private long count;\n+        private Writer out;\n+\n+        CountingWriter(Writer out) {\n+            super(out);\n+            this.out = out;\n+            this.count = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33a15e8d9e7a74c593fc2074921f810cddd9840e"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAxNjg5Mg==", "bodyText": "Looks like it. I also did bunch of other changes suggester by IDEA.", "url": "https://github.com/oracle/opengrok/pull/3372#discussion_r531016892", "createdAt": "2020-11-26T13:07:13Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -1629,46 +1666,63 @@ public int hashCode() {\n         return hash;\n     }\n \n-    private boolean isXrefWriter(AbstractAnalyzer fa) {\n-        AbstractAnalyzer.Genre g = fa.getFactory().getGenre();\n-        return (g == AbstractAnalyzer.Genre.PLAIN || g == AbstractAnalyzer.Genre.XREFABLE);\n+    private class CountingWriter extends Writer {\n+        private long count;\n+        private Writer out;\n+\n+        CountingWriter(Writer out) {\n+            super(out);\n+            this.out = out;\n+            this.count = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUwMTU1MQ=="}, "originalCommit": {"oid": "33a15e8d9e7a74c593fc2074921f810cddd9840e"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzODg2MDc1OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQxNzozOToyOFrOH7lcfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMDozNjozMlrOH71Dew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI0MTUzNA==", "bodyText": "Does {0} work with String.format?", "url": "https://github.com/oracle/opengrok/pull/3372#discussion_r532241534", "createdAt": "2020-11-29T17:39:28Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -353,27 +354,38 @@ private void markProjectIndexed(Project project) {\n         // Successfully indexed the project. The message is sent even if\n         // the project's isIndexed() is true because it triggers RepositoryInfo\n         // refresh.\n-        if (project != null) {\n-            // Also need to store the correct value in configuration\n-            // when indexer writes it to a file.\n-            project.setIndexed(true);\n-\n-            if (env.getConfigURI() != null) {\n-                Response r = ClientBuilder.newClient()\n-                        .target(env.getConfigURI())\n-                        .path(\"api\")\n-                        .path(\"v1\")\n-                        .path(\"projects\")\n-                        .path(Util.URIEncode(project.getName()))\n-                        .path(\"indexed\")\n-                        .request()\n-                        .put(Entity.text(\"\"));\n-\n-                if (r.getStatusInfo().getFamily() != Response.Status.Family.SUCCESSFUL) {\n-                    LOGGER.log(Level.WARNING, \"Couldn''t notify the webapp that project {0} was indexed: {1}\",\n-                            new Object[] {project, r});\n-                }\n-            }\n+        if (project == null) {\n+            return;\n+        }\n+\n+        // Also need to store the correct value in configuration\n+        // when indexer writes it to a file.\n+        project.setIndexed(true);\n+\n+        if (env.getConfigURI() == null) {\n+            return;\n+        }\n+\n+        Response r;\n+        try {\n+            r = ClientBuilder.newClient()\n+                    .target(env.getConfigURI())\n+                    .path(\"api\")\n+                    .path(\"v1\")\n+                    .path(\"projects\")\n+                    .path(Util.URIEncode(project.getName()))\n+                    .path(\"indexed\")\n+                    .request()\n+                    .put(Entity.text(\"\"));\n+        } catch (RuntimeException e) {\n+            LOGGER.log(Level.WARNING, String.format(\"Couldn''t notify the webapp that project {0} was indexed\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18dfe5ea678ab7e4bdd4547d9d4fe0d848eaaeb3"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ5NzI3NQ==", "bodyText": "Good catch, this will likely not work.", "url": "https://github.com/oracle/opengrok/pull/3372#discussion_r532497275", "createdAt": "2020-11-30T10:36:32Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -353,27 +354,38 @@ private void markProjectIndexed(Project project) {\n         // Successfully indexed the project. The message is sent even if\n         // the project's isIndexed() is true because it triggers RepositoryInfo\n         // refresh.\n-        if (project != null) {\n-            // Also need to store the correct value in configuration\n-            // when indexer writes it to a file.\n-            project.setIndexed(true);\n-\n-            if (env.getConfigURI() != null) {\n-                Response r = ClientBuilder.newClient()\n-                        .target(env.getConfigURI())\n-                        .path(\"api\")\n-                        .path(\"v1\")\n-                        .path(\"projects\")\n-                        .path(Util.URIEncode(project.getName()))\n-                        .path(\"indexed\")\n-                        .request()\n-                        .put(Entity.text(\"\"));\n-\n-                if (r.getStatusInfo().getFamily() != Response.Status.Family.SUCCESSFUL) {\n-                    LOGGER.log(Level.WARNING, \"Couldn''t notify the webapp that project {0} was indexed: {1}\",\n-                            new Object[] {project, r});\n-                }\n-            }\n+        if (project == null) {\n+            return;\n+        }\n+\n+        // Also need to store the correct value in configuration\n+        // when indexer writes it to a file.\n+        project.setIndexed(true);\n+\n+        if (env.getConfigURI() == null) {\n+            return;\n+        }\n+\n+        Response r;\n+        try {\n+            r = ClientBuilder.newClient()\n+                    .target(env.getConfigURI())\n+                    .path(\"api\")\n+                    .path(\"v1\")\n+                    .path(\"projects\")\n+                    .path(Util.URIEncode(project.getName()))\n+                    .path(\"indexed\")\n+                    .request()\n+                    .put(Entity.text(\"\"));\n+        } catch (RuntimeException e) {\n+            LOGGER.log(Level.WARNING, String.format(\"Couldn''t notify the webapp that project {0} was indexed\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI0MTUzNA=="}, "originalCommit": {"oid": "18dfe5ea678ab7e4bdd4547d9d4fe0d848eaaeb3"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDY4MDAyOnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMDozNzoyM1rOH71FkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMDozNzoyM1rOH71FkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ5NzgwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LOGGER.log(Level.WARNING, String.format(\"Couldn''t notify the webapp that project {0} was indexed\",\n          \n          \n            \n                        LOGGER.log(Level.WARNING, String.format(\"Couldn''t notify the webapp that project %s was indexed\",", "url": "https://github.com/oracle/opengrok/pull/3372#discussion_r532497809", "createdAt": "2020-11-30T10:37:23Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -353,27 +354,38 @@ private void markProjectIndexed(Project project) {\n         // Successfully indexed the project. The message is sent even if\n         // the project's isIndexed() is true because it triggers RepositoryInfo\n         // refresh.\n-        if (project != null) {\n-            // Also need to store the correct value in configuration\n-            // when indexer writes it to a file.\n-            project.setIndexed(true);\n-\n-            if (env.getConfigURI() != null) {\n-                Response r = ClientBuilder.newClient()\n-                        .target(env.getConfigURI())\n-                        .path(\"api\")\n-                        .path(\"v1\")\n-                        .path(\"projects\")\n-                        .path(Util.URIEncode(project.getName()))\n-                        .path(\"indexed\")\n-                        .request()\n-                        .put(Entity.text(\"\"));\n-\n-                if (r.getStatusInfo().getFamily() != Response.Status.Family.SUCCESSFUL) {\n-                    LOGGER.log(Level.WARNING, \"Couldn''t notify the webapp that project {0} was indexed: {1}\",\n-                            new Object[] {project, r});\n-                }\n-            }\n+        if (project == null) {\n+            return;\n+        }\n+\n+        // Also need to store the correct value in configuration\n+        // when indexer writes it to a file.\n+        project.setIndexed(true);\n+\n+        if (env.getConfigURI() == null) {\n+            return;\n+        }\n+\n+        Response r;\n+        try {\n+            r = ClientBuilder.newClient()\n+                    .target(env.getConfigURI())\n+                    .path(\"api\")\n+                    .path(\"v1\")\n+                    .path(\"projects\")\n+                    .path(Util.URIEncode(project.getName()))\n+                    .path(\"indexed\")\n+                    .request()\n+                    .put(Entity.text(\"\"));\n+        } catch (RuntimeException e) {\n+            LOGGER.log(Level.WARNING, String.format(\"Couldn''t notify the webapp that project {0} was indexed\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18dfe5ea678ab7e4bdd4547d9d4fe0d848eaaeb3"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4876, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}