{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNDYxNTUz", "number": 3086, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjo1MToyMFrODtF_rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODo1Mzo1NFrODtPlkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NjEwNzMzOnYy", "diffSide": "RIGHT", "path": "suggester/src/main/java/org/opengrok/suggest/Suggester.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjo1MToyMFrOF-UNRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODo1Mjo1NlrOF-jo3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4NzExMQ==", "bodyText": "Is it needed?", "url": "https://github.com/oracle/opengrok/pull/3086#discussion_r400887111", "createdAt": "2020-03-31T12:51:20Z", "author": {"login": "ahornace"}, "path": "suggester/src/main/java/org/opengrok/suggest/Suggester.java", "diffHunk": "@@ -234,6 +249,11 @@ public void rebuild(final Collection<NamedIndexDir> indexDirs) {\n             return;\n         }\n \n+        // for testing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c98fe320dd1974fc341e89c1cc3142e0463f1c25"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg5ODUwMw==", "bodyText": "you mean the comment ?", "url": "https://github.com/oracle/opengrok/pull/3086#discussion_r400898503", "createdAt": "2020-03-31T13:08:14Z", "author": {"login": "vladak"}, "path": "suggester/src/main/java/org/opengrok/suggest/Suggester.java", "diffHunk": "@@ -234,6 +249,11 @@ public void rebuild(final Collection<NamedIndexDir> indexDirs) {\n             return;\n         }\n \n+        // for testing", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4NzExMQ=="}, "originalCommit": {"oid": "c98fe320dd1974fc341e89c1cc3142e0463f1c25"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEzOTkzNA==", "bodyText": "Yes, it is in the PR at least 3 times. This kind of comment indicates that the code should be removed in production code.", "url": "https://github.com/oracle/opengrok/pull/3086#discussion_r401139934", "createdAt": "2020-03-31T18:52:56Z", "author": {"login": "ahornace"}, "path": "suggester/src/main/java/org/opengrok/suggest/Suggester.java", "diffHunk": "@@ -234,6 +249,11 @@ public void rebuild(final Collection<NamedIndexDir> indexDirs) {\n             return;\n         }\n \n+        // for testing", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4NzExMQ=="}, "originalCommit": {"oid": "c98fe320dd1974fc341e89c1cc3142e0463f1c25"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzY3NjU3OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/util/TestCasePrinterRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODo1MzoyNVrOF-jp7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODozMzo0M1rOF-2O5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0MDIwNg==", "bodyText": "Missing newline.", "url": "https://github.com/oracle/opengrok/pull/3086#discussion_r401140206", "createdAt": "2020-03-31T18:53:25Z", "author": {"login": "ahornace"}, "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/util/TestCasePrinterRule.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+// taken from https://technicaltesting.wordpress.com/2012/10/23/junit-rule-for-printing-test-case-start-and-end-information/\n+\n+package org.opengrok.indexer.util;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.text.DecimalFormat;\n+\n+import org.junit.rules.ExternalResource;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+public class TestCasePrinterRule implements TestRule {\n+\n+    private OutputStream out;\n+    private final TestCasePrinter printer = new TestCasePrinter();\n+\n+    private String beforeContent = null;\n+    private String afterContent = null;\n+    private long timeStart;\n+\n+    public TestCasePrinterRule() {\n+        this(System.out);\n+    }\n+\n+    public TestCasePrinterRule(OutputStream os) {\n+        out = os;\n+    }\n+\n+    private class TestCasePrinter extends ExternalResource {\n+        @Override\n+        protected void before() throws Throwable {\n+            timeStart = System.currentTimeMillis();\n+            out.write(beforeContent.getBytes());\n+        }\n+\n+        @Override\n+        protected void after() {\n+            try {\n+                long timeEnd = System.currentTimeMillis();\n+                double seconds = (timeEnd - timeStart) / 1000.0;\n+                out.write((afterContent + \"Time elapsed: \" + new DecimalFormat(\"0.000\").format(seconds) + \" sec\\n\").\n+                        getBytes());\n+            } catch (IOException ioe) { /* ignore */\n+            }\n+        }\n+    }\n+\n+    private static String getClassBasename(String inputName) {\n+        int idx;\n+        if (((idx = inputName.lastIndexOf('.')) > 0) && (idx < inputName.length())) {\n+            return inputName.substring(idx + 1);\n+        } else {\n+            return inputName;\n+        }\n+    }\n+\n+    public final Statement apply(Statement statement, Description description) {\n+        final String testDescription = getClassBasename(description.getClassName()) + \"#\" +  description.getMethodName();\n+        beforeContent = String.format(\"\\n[TEST START: %s]\\n\", testDescription);\n+        afterContent =  String.format(\"[TEST ENDED: %s] \", testDescription);\n+        return printer.apply(statement, description);\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c98fe320dd1974fc341e89c1cc3142e0463f1c25"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0NDU4Mw==", "bodyText": "it will be printed in after().", "url": "https://github.com/oracle/opengrok/pull/3086#discussion_r401444583", "createdAt": "2020-04-01T08:33:43Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/util/TestCasePrinterRule.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+// taken from https://technicaltesting.wordpress.com/2012/10/23/junit-rule-for-printing-test-case-start-and-end-information/\n+\n+package org.opengrok.indexer.util;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.text.DecimalFormat;\n+\n+import org.junit.rules.ExternalResource;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+public class TestCasePrinterRule implements TestRule {\n+\n+    private OutputStream out;\n+    private final TestCasePrinter printer = new TestCasePrinter();\n+\n+    private String beforeContent = null;\n+    private String afterContent = null;\n+    private long timeStart;\n+\n+    public TestCasePrinterRule() {\n+        this(System.out);\n+    }\n+\n+    public TestCasePrinterRule(OutputStream os) {\n+        out = os;\n+    }\n+\n+    private class TestCasePrinter extends ExternalResource {\n+        @Override\n+        protected void before() throws Throwable {\n+            timeStart = System.currentTimeMillis();\n+            out.write(beforeContent.getBytes());\n+        }\n+\n+        @Override\n+        protected void after() {\n+            try {\n+                long timeEnd = System.currentTimeMillis();\n+                double seconds = (timeEnd - timeStart) / 1000.0;\n+                out.write((afterContent + \"Time elapsed: \" + new DecimalFormat(\"0.000\").format(seconds) + \" sec\\n\").\n+                        getBytes());\n+            } catch (IOException ioe) { /* ignore */\n+            }\n+        }\n+    }\n+\n+    private static String getClassBasename(String inputName) {\n+        int idx;\n+        if (((idx = inputName.lastIndexOf('.')) > 0) && (idx < inputName.length())) {\n+            return inputName.substring(idx + 1);\n+        } else {\n+            return inputName;\n+        }\n+    }\n+\n+    public final Statement apply(Statement statement, Description description) {\n+        final String testDescription = getClassBasename(description.getClassName()) + \"#\" +  description.getMethodName();\n+        beforeContent = String.format(\"\\n[TEST START: %s]\\n\", testDescription);\n+        afterContent =  String.format(\"[TEST ENDED: %s] \", testDescription);\n+        return printer.apply(statement, description);\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0MDIwNg=="}, "originalCommit": {"oid": "c98fe320dd1974fc341e89c1cc3142e0463f1c25"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzY3ODg4OnYy", "diffSide": "RIGHT", "path": "suggester/src/main/java/org/opengrok/suggest/Suggester.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODo1Mzo1NFrOF-jrNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODozMTo1MlrOF-2KoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0MDUzMg==", "bodyText": "Should be volatile.", "url": "https://github.com/oracle/opengrok/pull/3086#discussion_r401140532", "createdAt": "2020-03-31T18:53:54Z", "author": {"login": "ahornace"}, "path": "suggester/src/main/java/org/opengrok/suggest/Suggester.java", "diffHunk": "@@ -87,6 +91,12 @@\n \n     private final int rebuildParallelismLevel;\n \n+    private boolean rebuilding;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c98fe320dd1974fc341e89c1cc3142e0463f1c25"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0MzQ4OQ==", "bodyText": "I assume this is done so that it is not optimized away ?", "url": "https://github.com/oracle/opengrok/pull/3086#discussion_r401443489", "createdAt": "2020-04-01T08:31:52Z", "author": {"login": "vladak"}, "path": "suggester/src/main/java/org/opengrok/suggest/Suggester.java", "diffHunk": "@@ -87,6 +91,12 @@\n \n     private final int rebuildParallelismLevel;\n \n+    private boolean rebuilding;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0MDUzMg=="}, "originalCommit": {"oid": "c98fe320dd1974fc341e89c1cc3142e0463f1c25"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 206, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}