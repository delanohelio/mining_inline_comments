{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwODM0Nzc2", "number": 3328, "title": "Fix for #3306: Speed up HistoryGuru.getRepository(File) call for Open\u2026", "bodyText": "\u2026grok installations with many Repositories\nand deep file trees by caching previous lookup results for dir -> Repository.\nAdditional refactorings to make this new functionality testable against legacy implementation:\n- Introduce Jimfs for testing which will allow testing Windows, MacOS or UNIX filesystem on any machine\n- Refactor PathUtils to use Paths instead of Files (this is needed to use Jimfs)", "createdAt": "2020-10-27T15:18:45Z", "url": "https://github.com/oracle/opengrok/pull/3328", "merged": true, "mergeCommit": {"oid": "6d9d3df9426166f52ef9659c0471e331849351aa"}, "closed": true, "closedAt": "2020-11-05T12:30:16Z", "author": {"login": "azakkerman"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWrRroAFqTUxNzg4MTIzMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZQX73ABqjM5NTg0MzE3NjM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3ODgxMjMw", "url": "https://github.com/oracle/opengrok/pull/3328#pullrequestreview-517881230", "createdAt": "2020-10-27T16:06:53Z", "commit": {"oid": "97ee3fdfa7bfd240064f861a98176d1c75969ec2"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjowNjo1NFrOHpEX3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjowNzozN1rOHpEaAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgyNTMxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (c) 2020 Anatoly Akkerman <akkerman@gmail.com>, <anatoly.akkerman@twosigma.com>.\n          \n          \n            \n             * Copyright (c) 2020, Anatoly Akkerman <akkerman@gmail.com>, <anatoly.akkerman@twosigma.com>.", "url": "https://github.com/oracle/opengrok/pull/3328#discussion_r512825310", "createdAt": "2020-10-27T16:06:54Z", "author": {"login": "ahornace"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/RepositoryLookup.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Anatoly Akkerman <akkerman@gmail.com>, <anatoly.akkerman@twosigma.com>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97ee3fdfa7bfd240064f861a98176d1c75969ec2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgyNTUyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (c) 2020 Anatoly Akkerman <akkerman@gmail.com>, <anatoly.akkerman@twosigma.com>.\n          \n          \n            \n             * Copyright (c) 2020, Anatoly Akkerman <akkerman@gmail.com>, <anatoly.akkerman@twosigma.com>.", "url": "https://github.com/oracle/opengrok/pull/3328#discussion_r512825527", "createdAt": "2020-10-27T16:07:09Z", "author": {"login": "ahornace"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/RepositoryLookupCached.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Anatoly Akkerman <akkerman@gmail.com>, <anatoly.akkerman@twosigma.com>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97ee3fdfa7bfd240064f861a98176d1c75969ec2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgyNTY5Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (c) 2020 Anatoly Akkerman <akkerman@gmail.com>, <anatoly.akkerman@twosigma.com>.\n          \n          \n            \n             * Copyright (c) 2020, Anatoly Akkerman <akkerman@gmail.com>, <anatoly.akkerman@twosigma.com>.", "url": "https://github.com/oracle/opengrok/pull/3328#discussion_r512825696", "createdAt": "2020-10-27T16:07:23Z", "author": {"login": "ahornace"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/RepositoryLookupUncached.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Anatoly Akkerman <akkerman@gmail.com>, <anatoly.akkerman@twosigma.com>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97ee3fdfa7bfd240064f861a98176d1c75969ec2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgyNTg1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (c) 2020 Anatoly Akkerman <akkerman@gmail.com>, <anatoly.akkerman@twosigma.com>.\n          \n          \n            \n             * Copyright (c) 2020, Anatoly Akkerman <akkerman@gmail.com>, <anatoly.akkerman@twosigma.com>.", "url": "https://github.com/oracle/opengrok/pull/3328#discussion_r512825857", "createdAt": "2020-10-27T16:07:37Z", "author": {"login": "ahornace"}, "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/history/RepositoryLookupTest.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Anatoly Akkerman <akkerman@gmail.com>, <anatoly.akkerman@twosigma.com>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97ee3fdfa7bfd240064f861a98176d1c75969ec2"}, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "97ee3fdfa7bfd240064f861a98176d1c75969ec2", "author": {"user": {"login": "azakkerman", "name": "Anatoly Akkerman"}}, "url": "https://github.com/oracle/opengrok/commit/97ee3fdfa7bfd240064f861a98176d1c75969ec2", "committedDate": "2020-10-27T15:14:02Z", "message": "Fix for #3306: Speed up HistoryGuru.getRepository(File) call for Opengrok installations with many Repositories\n   and deep file trees by caching previous lookup results for dir -> Repository.\n   Additional refactorings to make this new functionality testable against legacy implementation:\n      - Introduce Jimfs for testing which will allow testing Windows, MacOS or UNIX filesystem on any machine\n      - Refactor PathUtils to use Paths instead of Files (this is needed to use Jimfs)"}, "afterCommit": {"oid": "3c2ac5936d4adb5824faba6e550c7c67b7b5dd26", "author": {"user": {"login": "azakkerman", "name": "Anatoly Akkerman"}}, "url": "https://github.com/oracle/opengrok/commit/3c2ac5936d4adb5824faba6e550c7c67b7b5dd26", "committedDate": "2020-10-27T16:10:58Z", "message": "Fix for #3306: Speed up HistoryGuru.getRepository(File) call for Opengrok installations with many Repositories\n   and deep file trees by caching previous lookup results for dir -> Repository.\n   Additional refactorings to make this new functionality testable against legacy implementation:\n      - Introduce Jimfs for testing which will allow testing Windows, MacOS or UNIX filesystem on any machine\n      - Refactor PathUtils to use Paths instead of Files (this is needed to use Jimfs)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3c2ac5936d4adb5824faba6e550c7c67b7b5dd26", "author": {"user": {"login": "azakkerman", "name": "Anatoly Akkerman"}}, "url": "https://github.com/oracle/opengrok/commit/3c2ac5936d4adb5824faba6e550c7c67b7b5dd26", "committedDate": "2020-10-27T16:10:58Z", "message": "Fix for #3306: Speed up HistoryGuru.getRepository(File) call for Opengrok installations with many Repositories\n   and deep file trees by caching previous lookup results for dir -> Repository.\n   Additional refactorings to make this new functionality testable against legacy implementation:\n      - Introduce Jimfs for testing which will allow testing Windows, MacOS or UNIX filesystem on any machine\n      - Refactor PathUtils to use Paths instead of Files (this is needed to use Jimfs)"}, "afterCommit": {"oid": "2dac535755f27ce6b10976d9a53de924911c6631", "author": {"user": {"login": "azakkerman", "name": "Anatoly Akkerman"}}, "url": "https://github.com/oracle/opengrok/commit/2dac535755f27ce6b10976d9a53de924911c6631", "committedDate": "2020-10-27T16:15:43Z", "message": "Fix for #3306: Speed up HistoryGuru.getRepository(File) call for Opengrok installations with many Repositories\n   and deep file trees by caching previous lookup results for dir -> Repository.\n   Additional refactorings to make this new functionality testable against legacy implementation:\n      - Introduce Jimfs for testing which will allow testing Windows, MacOS or UNIX filesystem on any machine\n      - Refactor PathUtils to use Paths instead of Files (this is needed to use Jimfs)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2dac535755f27ce6b10976d9a53de924911c6631", "author": {"user": {"login": "azakkerman", "name": "Anatoly Akkerman"}}, "url": "https://github.com/oracle/opengrok/commit/2dac535755f27ce6b10976d9a53de924911c6631", "committedDate": "2020-10-27T16:15:43Z", "message": "Fix for #3306: Speed up HistoryGuru.getRepository(File) call for Opengrok installations with many Repositories\n   and deep file trees by caching previous lookup results for dir -> Repository.\n   Additional refactorings to make this new functionality testable against legacy implementation:\n      - Introduce Jimfs for testing which will allow testing Windows, MacOS or UNIX filesystem on any machine\n      - Refactor PathUtils to use Paths instead of Files (this is needed to use Jimfs)"}, "afterCommit": {"oid": "2f8a1c82bc993f83d99e5db947282776c3eaa5ce", "author": {"user": {"login": "azakkerman", "name": "Anatoly Akkerman"}}, "url": "https://github.com/oracle/opengrok/commit/2f8a1c82bc993f83d99e5db947282776c3eaa5ce", "committedDate": "2020-10-27T17:01:14Z", "message": "Fix for #3306: Speed up HistoryGuru.getRepository(File) call for Opengrok installations with many Repositories\n   and deep file trees by caching previous lookup results for dir -> Repository.\n   Additional refactorings to make this new functionality testable against legacy implementation:\n      - Introduce Jimfs for testing which will allow testing Windows, MacOS or UNIX filesystem on any machine\n      - Refactor PathUtils to use Paths instead of Files (this is needed to use Jimfs)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2f8a1c82bc993f83d99e5db947282776c3eaa5ce", "author": {"user": {"login": "azakkerman", "name": "Anatoly Akkerman"}}, "url": "https://github.com/oracle/opengrok/commit/2f8a1c82bc993f83d99e5db947282776c3eaa5ce", "committedDate": "2020-10-27T17:01:14Z", "message": "Fix for #3306: Speed up HistoryGuru.getRepository(File) call for Opengrok installations with many Repositories\n   and deep file trees by caching previous lookup results for dir -> Repository.\n   Additional refactorings to make this new functionality testable against legacy implementation:\n      - Introduce Jimfs for testing which will allow testing Windows, MacOS or UNIX filesystem on any machine\n      - Refactor PathUtils to use Paths instead of Files (this is needed to use Jimfs)"}, "afterCommit": {"oid": "0f18a7ef89c3c131e71055e1fec10a23e9b482e2", "author": {"user": {"login": "azakkerman", "name": "Anatoly Akkerman"}}, "url": "https://github.com/oracle/opengrok/commit/0f18a7ef89c3c131e71055e1fec10a23e9b482e2", "committedDate": "2020-10-27T17:38:35Z", "message": "Fix for #3306: Speed up HistoryGuru.getRepository(File) call for Opengrok installations with many Repositories\n   and deep file trees by caching previous lookup results for dir -> Repository.\n   Additional refactorings to make this new functionality testable against legacy implementation:\n      - Introduce Jimfs for testing which will allow testing Windows, MacOS or UNIX filesystem on any machine\n      - Refactor PathUtils to use Paths instead of Files (this is needed to use Jimfs)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0f18a7ef89c3c131e71055e1fec10a23e9b482e2", "author": {"user": {"login": "azakkerman", "name": "Anatoly Akkerman"}}, "url": "https://github.com/oracle/opengrok/commit/0f18a7ef89c3c131e71055e1fec10a23e9b482e2", "committedDate": "2020-10-27T17:38:35Z", "message": "Fix for #3306: Speed up HistoryGuru.getRepository(File) call for Opengrok installations with many Repositories\n   and deep file trees by caching previous lookup results for dir -> Repository.\n   Additional refactorings to make this new functionality testable against legacy implementation:\n      - Introduce Jimfs for testing which will allow testing Windows, MacOS or UNIX filesystem on any machine\n      - Refactor PathUtils to use Paths instead of Files (this is needed to use Jimfs)"}, "afterCommit": {"oid": "c77154d054b61f6a49a3ed10497bafb7d5385214", "author": {"user": {"login": "azakkerman", "name": "Anatoly Akkerman"}}, "url": "https://github.com/oracle/opengrok/commit/c77154d054b61f6a49a3ed10497bafb7d5385214", "committedDate": "2020-10-27T18:46:12Z", "message": "Fix for #3306: Speed up HistoryGuru.getRepository(File) call for Opengrok installations with many Repositories\n   and deep file trees by caching previous lookup results for dir -> Repository.\n   Additional refactorings to make this new functionality testable against legacy implementation:\n      - Introduce Jimfs for testing which will allow testing Windows, MacOS or UNIX filesystem on any machine\n      - Refactor PathUtils to use Paths instead of Files (this is needed to use Jimfs)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MTE5MTk1", "url": "https://github.com/oracle/opengrok/pull/3328#pullrequestreview-518119195", "createdAt": "2020-10-27T20:34:21Z", "commit": {"oid": "c77154d054b61f6a49a3ed10497bafb7d5385214"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMDozNDoyMVrOHpPy8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMDozNDoyMVrOHpPy8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAxMjQ2NQ==", "bodyText": "this is perhaps a warning or HistoryException throw", "url": "https://github.com/oracle/opengrok/pull/3328#discussion_r513012465", "createdAt": "2020-10-27T20:34:21Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/HistoryContext.java", "diffHunk": "@@ -82,7 +82,12 @@ public boolean getContext(String filename, String path, List<Hit> hits) throws H\n             return false;\n         }\n         File f = new File(filename);\n-        return getHistoryContext(HistoryGuru.getInstance().getHistory(f), path, null, hits, null);\n+        History history = HistoryGuru.getInstance().getHistory(f);\n+        if (history == null) {\n+            LOGGER.log(Level.INFO, \"Null history got for {0}\", f);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77154d054b61f6a49a3ed10497bafb7d5385214"}, "originalPosition": 7}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c77154d054b61f6a49a3ed10497bafb7d5385214", "author": {"user": {"login": "azakkerman", "name": "Anatoly Akkerman"}}, "url": "https://github.com/oracle/opengrok/commit/c77154d054b61f6a49a3ed10497bafb7d5385214", "committedDate": "2020-10-27T18:46:12Z", "message": "Fix for #3306: Speed up HistoryGuru.getRepository(File) call for Opengrok installations with many Repositories\n   and deep file trees by caching previous lookup results for dir -> Repository.\n   Additional refactorings to make this new functionality testable against legacy implementation:\n      - Introduce Jimfs for testing which will allow testing Windows, MacOS or UNIX filesystem on any machine\n      - Refactor PathUtils to use Paths instead of Files (this is needed to use Jimfs)"}, "afterCommit": {"oid": "fda849fdf325d0362d91b5de2768981cad571a46", "author": {"user": {"login": "azakkerman", "name": "Anatoly Akkerman"}}, "url": "https://github.com/oracle/opengrok/commit/fda849fdf325d0362d91b5de2768981cad571a46", "committedDate": "2020-10-28T14:46:47Z", "message": "Fix for #3306: Speed up HistoryGuru.getRepository(File) call for Opengrok installations with many Repositories\n   and deep file trees by caching previous lookup results for dir -> Repository.\n   Additional refactorings to make this new functionality testable against legacy implementation:\n      - Introduce Jimfs for testing which will allow testing Windows, MacOS or UNIX filesystem on any machine\n      - Refactor PathUtils to use Paths instead of Files (this is needed to use Jimfs)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fda849fdf325d0362d91b5de2768981cad571a46", "author": {"user": {"login": "azakkerman", "name": "Anatoly Akkerman"}}, "url": "https://github.com/oracle/opengrok/commit/fda849fdf325d0362d91b5de2768981cad571a46", "committedDate": "2020-10-28T14:46:47Z", "message": "Fix for #3306: Speed up HistoryGuru.getRepository(File) call for Opengrok installations with many Repositories\n   and deep file trees by caching previous lookup results for dir -> Repository.\n   Additional refactorings to make this new functionality testable against legacy implementation:\n      - Introduce Jimfs for testing which will allow testing Windows, MacOS or UNIX filesystem on any machine\n      - Refactor PathUtils to use Paths instead of Files (this is needed to use Jimfs)"}, "afterCommit": {"oid": "81974384c2f4d18cc81b1d4f1b74d64852268c95", "author": {"user": {"login": "azakkerman", "name": "Anatoly Akkerman"}}, "url": "https://github.com/oracle/opengrok/commit/81974384c2f4d18cc81b1d4f1b74d64852268c95", "committedDate": "2020-10-28T17:59:50Z", "message": "Fix for #3306: Speed up HistoryGuru.getRepository(File) call for Opengrok installations with many Repositories\n   and deep file trees by caching previous lookup results for dir -> Repository.\n   Additional refactorings to make this new functionality testable against legacy implementation:\n      - Introduce Jimfs for testing which will allow testing Windows, MacOS or UNIX filesystem on any machine\n      - Refactor PathUtils to use Paths instead of Files (this is needed to use Jimfs)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMTI1NzY2", "url": "https://github.com/oracle/opengrok/pull/3328#pullrequestreview-521125766", "createdAt": "2020-10-31T09:31:44Z", "commit": {"oid": "81974384c2f4d18cc81b1d4f1b74d64852268c95"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwOTozMTo0NFrOHrmQoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwOTozNzoyMVrOHrmSlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ3NzY2NQ==", "bodyText": "is org.opengrok.indexer.condition.UnixPresent needed for this test?", "url": "https://github.com/oracle/opengrok/pull/3328#discussion_r515477665", "createdAt": "2020-10-31T09:31:44Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/history/RepositoryLookupTest.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Anatoly Akkerman <akkerman@gmail.com>, <anatoly.akkerman@twosigma.com>.\n+ */\n+package org.opengrok.indexer.history;\n+\n+import com.google.common.jimfs.Configuration;\n+import com.google.common.jimfs.Jimfs;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.Matchers;\n+import org.hamcrest.number.OrderingComparison;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.opengrok.indexer.util.PathUtils;\n+\n+import java.io.IOException;\n+import java.nio.file.FileSystem;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.AdditionalAnswers.delegatesTo;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.mockingDetails;\n+\n+public class RepositoryLookupTest {\n+    // Files to include into Repositories having short paths\n+    private static final String[] SHORT_PATH_CONTENTS = {\"foo/bar.txt\", \"foo/bla/barf.txt\", \"special/woops@\",\n+        \"special/veryveryverylongfilename_just_for_fun\"};\n+    // Files to include into Repositories having longer paths\n+    private static final String[] LONG_PATH_CONTENTS = {\"foo/bla/1/2/3/4/bar.txt\", \"foo/bla/1/2/3/4/5/barf.txt\"};\n+    Map<String, Repository> repositories;\n+    Set<String> repositoryRoots;\n+    // TODO: Parametrize this to run against windows(), unix() and macos()\n+    FileSystem fileSystem = Jimfs.newFileSystem(Configuration.unix());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81974384c2f4d18cc81b1d4f1b74d64852268c95"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ3Nzc1NQ==", "bodyText": "private for consistent use?", "url": "https://github.com/oracle/opengrok/pull/3328#discussion_r515477755", "createdAt": "2020-10-31T09:32:51Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/history/RepositoryLookupTest.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Anatoly Akkerman <akkerman@gmail.com>, <anatoly.akkerman@twosigma.com>.\n+ */\n+package org.opengrok.indexer.history;\n+\n+import com.google.common.jimfs.Configuration;\n+import com.google.common.jimfs.Jimfs;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.Matchers;\n+import org.hamcrest.number.OrderingComparison;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.opengrok.indexer.util.PathUtils;\n+\n+import java.io.IOException;\n+import java.nio.file.FileSystem;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.AdditionalAnswers.delegatesTo;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.mockingDetails;\n+\n+public class RepositoryLookupTest {\n+    // Files to include into Repositories having short paths\n+    private static final String[] SHORT_PATH_CONTENTS = {\"foo/bar.txt\", \"foo/bla/barf.txt\", \"special/woops@\",\n+        \"special/veryveryverylongfilename_just_for_fun\"};\n+    // Files to include into Repositories having longer paths\n+    private static final String[] LONG_PATH_CONTENTS = {\"foo/bla/1/2/3/4/bar.txt\", \"foo/bla/1/2/3/4/5/barf.txt\"};\n+    Map<String, Repository> repositories;\n+    Set<String> repositoryRoots;\n+    // TODO: Parametrize this to run against windows(), unix() and macos()\n+    FileSystem fileSystem = Jimfs.newFileSystem(Configuration.unix());\n+    // Pick first root to resolve paths relative to it.\n+    // Windows Jimfs can only resolve absolute paths relative to a rootDir, not via fileSystem.get(\"/a/b/c\")\n+    Path rootDir = fileSystem.getRootDirectories().iterator().next();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81974384c2f4d18cc81b1d4f1b74d64852268c95"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ3Nzc1Nw==", "bodyText": "private for consistent use?", "url": "https://github.com/oracle/opengrok/pull/3328#discussion_r515477757", "createdAt": "2020-10-31T09:32:54Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/history/RepositoryLookupTest.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Anatoly Akkerman <akkerman@gmail.com>, <anatoly.akkerman@twosigma.com>.\n+ */\n+package org.opengrok.indexer.history;\n+\n+import com.google.common.jimfs.Configuration;\n+import com.google.common.jimfs.Jimfs;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.Matchers;\n+import org.hamcrest.number.OrderingComparison;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.opengrok.indexer.util.PathUtils;\n+\n+import java.io.IOException;\n+import java.nio.file.FileSystem;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.AdditionalAnswers.delegatesTo;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.mockingDetails;\n+\n+public class RepositoryLookupTest {\n+    // Files to include into Repositories having short paths\n+    private static final String[] SHORT_PATH_CONTENTS = {\"foo/bar.txt\", \"foo/bla/barf.txt\", \"special/woops@\",\n+        \"special/veryveryverylongfilename_just_for_fun\"};\n+    // Files to include into Repositories having longer paths\n+    private static final String[] LONG_PATH_CONTENTS = {\"foo/bla/1/2/3/4/bar.txt\", \"foo/bla/1/2/3/4/5/barf.txt\"};\n+    Map<String, Repository> repositories;\n+    Set<String> repositoryRoots;\n+    // TODO: Parametrize this to run against windows(), unix() and macos()\n+    FileSystem fileSystem = Jimfs.newFileSystem(Configuration.unix());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81974384c2f4d18cc81b1d4f1b74d64852268c95"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ3Nzc2MQ==", "bodyText": "private for consistent use?", "url": "https://github.com/oracle/opengrok/pull/3328#discussion_r515477761", "createdAt": "2020-10-31T09:32:59Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/history/RepositoryLookupTest.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Anatoly Akkerman <akkerman@gmail.com>, <anatoly.akkerman@twosigma.com>.\n+ */\n+package org.opengrok.indexer.history;\n+\n+import com.google.common.jimfs.Configuration;\n+import com.google.common.jimfs.Jimfs;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.Matchers;\n+import org.hamcrest.number.OrderingComparison;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.opengrok.indexer.util.PathUtils;\n+\n+import java.io.IOException;\n+import java.nio.file.FileSystem;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.AdditionalAnswers.delegatesTo;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.mockingDetails;\n+\n+public class RepositoryLookupTest {\n+    // Files to include into Repositories having short paths\n+    private static final String[] SHORT_PATH_CONTENTS = {\"foo/bar.txt\", \"foo/bla/barf.txt\", \"special/woops@\",\n+        \"special/veryveryverylongfilename_just_for_fun\"};\n+    // Files to include into Repositories having longer paths\n+    private static final String[] LONG_PATH_CONTENTS = {\"foo/bla/1/2/3/4/bar.txt\", \"foo/bla/1/2/3/4/5/barf.txt\"};\n+    Map<String, Repository> repositories;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81974384c2f4d18cc81b1d4f1b74d64852268c95"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ3Nzc2OQ==", "bodyText": "private for consistent use?", "url": "https://github.com/oracle/opengrok/pull/3328#discussion_r515477769", "createdAt": "2020-10-31T09:33:03Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/history/RepositoryLookupTest.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Anatoly Akkerman <akkerman@gmail.com>, <anatoly.akkerman@twosigma.com>.\n+ */\n+package org.opengrok.indexer.history;\n+\n+import com.google.common.jimfs.Configuration;\n+import com.google.common.jimfs.Jimfs;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.Matchers;\n+import org.hamcrest.number.OrderingComparison;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.opengrok.indexer.util.PathUtils;\n+\n+import java.io.IOException;\n+import java.nio.file.FileSystem;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.AdditionalAnswers.delegatesTo;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.mockingDetails;\n+\n+public class RepositoryLookupTest {\n+    // Files to include into Repositories having short paths\n+    private static final String[] SHORT_PATH_CONTENTS = {\"foo/bar.txt\", \"foo/bla/barf.txt\", \"special/woops@\",\n+        \"special/veryveryverylongfilename_just_for_fun\"};\n+    // Files to include into Repositories having longer paths\n+    private static final String[] LONG_PATH_CONTENTS = {\"foo/bla/1/2/3/4/bar.txt\", \"foo/bla/1/2/3/4/5/barf.txt\"};\n+    Map<String, Repository> repositories;\n+    Set<String> repositoryRoots;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81974384c2f4d18cc81b1d4f1b74d64852268c95"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ3ODE2Ng==", "bodyText": "could be @ see so it jumps there automatically", "url": "https://github.com/oracle/opengrok/pull/3328#discussion_r515478166", "createdAt": "2020-10-31T09:37:21Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/RepositoryLookup.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Anatoly Akkerman <akkerman@gmail.com>, <anatoly.akkerman@twosigma.com>.\n+ */\n+package org.opengrok.indexer.history;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Interface for finding enclosing Repository for a given Path, used by HistoryGuru.\n+ * <p>\n+ * Two implementations exists\n+ * - uncached, (legacy behavior) extracted from HistoryGuru into a stand-alone impl\n+ * - cached, new implementation, which reduces number of expensive canonicalization calls\n+ * <p>\n+ * We preserve both cached and uncached implementations in order to verify correctness of the cached impl.\n+ */\n+public interface RepositoryLookup {\n+\n+    static RepositoryLookupCached cached() {\n+        return new RepositoryLookupCached();\n+    }\n+\n+    static RepositoryLookupUncached uncached() {\n+        return new RepositoryLookupUncached();\n+    }\n+\n+    /**\n+     * This interface allows intercepting PathUtils.getRelativeToCanonical in order to measure the impact of caching.\n+     *\n+     * In practice, PathUtils::getRelativeToCanonical is the implementation of this interface", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81974384c2f4d18cc81b1d4f1b74d64852268c95"}, "originalPosition": 53}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "81974384c2f4d18cc81b1d4f1b74d64852268c95", "author": {"user": {"login": "azakkerman", "name": "Anatoly Akkerman"}}, "url": "https://github.com/oracle/opengrok/commit/81974384c2f4d18cc81b1d4f1b74d64852268c95", "committedDate": "2020-10-28T17:59:50Z", "message": "Fix for #3306: Speed up HistoryGuru.getRepository(File) call for Opengrok installations with many Repositories\n   and deep file trees by caching previous lookup results for dir -> Repository.\n   Additional refactorings to make this new functionality testable against legacy implementation:\n      - Introduce Jimfs for testing which will allow testing Windows, MacOS or UNIX filesystem on any machine\n      - Refactor PathUtils to use Paths instead of Files (this is needed to use Jimfs)"}, "afterCommit": {"oid": "a34e3738ea24562a3cc8d7ddbc8e439c5f7f8e62", "author": {"user": {"login": "azakkerman", "name": "Anatoly Akkerman"}}, "url": "https://github.com/oracle/opengrok/commit/a34e3738ea24562a3cc8d7ddbc8e439c5f7f8e62", "committedDate": "2020-11-01T05:06:12Z", "message": "Fix for #3306: Speed up HistoryGuru.getRepository(File) call for Opengrok installations with many Repositories\n   and deep file trees by caching previous lookup results for dir -> Repository.\n   Additional refactorings to make this new functionality testable against legacy implementation:\n      - Introduce Jimfs for testing which will allow testing Windows, MacOS or UNIX filesystem on any machine\n      - Refactor PathUtils to use Paths instead of Files (this is needed to use Jimfs)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a34e3738ea24562a3cc8d7ddbc8e439c5f7f8e62", "author": {"user": {"login": "azakkerman", "name": "Anatoly Akkerman"}}, "url": "https://github.com/oracle/opengrok/commit/a34e3738ea24562a3cc8d7ddbc8e439c5f7f8e62", "committedDate": "2020-11-01T05:06:12Z", "message": "Fix for #3306: Speed up HistoryGuru.getRepository(File) call for Opengrok installations with many Repositories\n   and deep file trees by caching previous lookup results for dir -> Repository.\n   Additional refactorings to make this new functionality testable against legacy implementation:\n      - Introduce Jimfs for testing which will allow testing Windows, MacOS or UNIX filesystem on any machine\n      - Refactor PathUtils to use Paths instead of Files (this is needed to use Jimfs)"}, "afterCommit": {"oid": "1d44bc343a6864f5d438c49fbc2b19ca1b5f3b48", "author": {"user": {"login": "azakkerman", "name": "Anatoly Akkerman"}}, "url": "https://github.com/oracle/opengrok/commit/1d44bc343a6864f5d438c49fbc2b19ca1b5f3b48", "committedDate": "2020-11-01T05:25:01Z", "message": "Fix for #3306: Speed up HistoryGuru.getRepository(File) call for Opengrok installations with many Repositories\n   and deep file trees by caching previous lookup results for dir -> Repository.\n   Additional refactorings to make this new functionality testable against legacy implementation:\n      - Introduce Jimfs for testing which will allow testing Windows, MacOS or UNIX filesystem on any machine\n      - Refactor PathUtils to use Paths instead of Files (this is needed to use Jimfs)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1d44bc343a6864f5d438c49fbc2b19ca1b5f3b48", "author": {"user": {"login": "azakkerman", "name": "Anatoly Akkerman"}}, "url": "https://github.com/oracle/opengrok/commit/1d44bc343a6864f5d438c49fbc2b19ca1b5f3b48", "committedDate": "2020-11-01T05:25:01Z", "message": "Fix for #3306: Speed up HistoryGuru.getRepository(File) call for Opengrok installations with many Repositories\n   and deep file trees by caching previous lookup results for dir -> Repository.\n   Additional refactorings to make this new functionality testable against legacy implementation:\n      - Introduce Jimfs for testing which will allow testing Windows, MacOS or UNIX filesystem on any machine\n      - Refactor PathUtils to use Paths instead of Files (this is needed to use Jimfs)"}, "afterCommit": {"oid": "d30fd66cc3e656a27373be5c56b7be2da034d009", "author": {"user": {"login": "azakkerman", "name": "Anatoly Akkerman"}}, "url": "https://github.com/oracle/opengrok/commit/d30fd66cc3e656a27373be5c56b7be2da034d009", "committedDate": "2020-11-02T13:01:40Z", "message": "Fix for #3306: Speed up HistoryGuru.getRepository(File) call for Opengrok installations with many Repositories\n   and deep file trees by caching previous lookup results for dir -> Repository.\n   Additional refactorings to make this new functionality testable against legacy implementation:\n      - Introduce Jimfs for testing which will allow testing Windows, MacOS or UNIX filesystem on any machine\n      - Refactor PathUtils to use Paths instead of Files (this is needed to use Jimfs)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d30fd66cc3e656a27373be5c56b7be2da034d009", "author": {"user": {"login": "azakkerman", "name": "Anatoly Akkerman"}}, "url": "https://github.com/oracle/opengrok/commit/d30fd66cc3e656a27373be5c56b7be2da034d009", "committedDate": "2020-11-02T13:01:40Z", "message": "Fix for #3306: Speed up HistoryGuru.getRepository(File) call for Opengrok installations with many Repositories\n   and deep file trees by caching previous lookup results for dir -> Repository.\n   Additional refactorings to make this new functionality testable against legacy implementation:\n      - Introduce Jimfs for testing which will allow testing Windows, MacOS or UNIX filesystem on any machine\n      - Refactor PathUtils to use Paths instead of Files (this is needed to use Jimfs)"}, "afterCommit": {"oid": "da0ea3292c5d91424dd5ddac94d70a4326a9af8f", "author": {"user": {"login": "azakkerman", "name": "Anatoly Akkerman"}}, "url": "https://github.com/oracle/opengrok/commit/da0ea3292c5d91424dd5ddac94d70a4326a9af8f", "committedDate": "2020-11-04T16:05:27Z", "message": "Fix for #3306: Speed up HistoryGuru.getRepository(File) call for Opengrok installations with many Repositories\n   and deep file trees by caching previous lookup results for dir -> Repository.\n   Additional refactorings to make this new functionality testable against legacy implementation:\n      - Introduce Jimfs for testing which will allow testing Windows, MacOS or UNIX filesystem on any machine\n      - Refactor PathUtils to use Paths instead of Files (this is needed to use Jimfs)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "134f3f1f42a42b900b51609387d12a0583159d90", "author": {"user": {"login": "azakkerman", "name": "Anatoly Akkerman"}}, "url": "https://github.com/oracle/opengrok/commit/134f3f1f42a42b900b51609387d12a0583159d90", "committedDate": "2020-11-04T16:29:30Z", "message": "Fix for #3306: Speed up HistoryGuru.getRepository(File) call for Opengrok installations with many Repositories\n   and deep file trees by caching previous lookup results for dir -> Repository.\n   Additional refactorings to make this new functionality testable against legacy implementation:\n      - Introduce Jimfs for testing which will allow testing Windows, MacOS or UNIX filesystem on any machine\n      - Refactor PathUtils to use Paths instead of Files (this is needed to use Jimfs)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "da0ea3292c5d91424dd5ddac94d70a4326a9af8f", "author": {"user": {"login": "azakkerman", "name": "Anatoly Akkerman"}}, "url": "https://github.com/oracle/opengrok/commit/da0ea3292c5d91424dd5ddac94d70a4326a9af8f", "committedDate": "2020-11-04T16:05:27Z", "message": "Fix for #3306: Speed up HistoryGuru.getRepository(File) call for Opengrok installations with many Repositories\n   and deep file trees by caching previous lookup results for dir -> Repository.\n   Additional refactorings to make this new functionality testable against legacy implementation:\n      - Introduce Jimfs for testing which will allow testing Windows, MacOS or UNIX filesystem on any machine\n      - Refactor PathUtils to use Paths instead of Files (this is needed to use Jimfs)"}, "afterCommit": {"oid": "134f3f1f42a42b900b51609387d12a0583159d90", "author": {"user": {"login": "azakkerman", "name": "Anatoly Akkerman"}}, "url": "https://github.com/oracle/opengrok/commit/134f3f1f42a42b900b51609387d12a0583159d90", "committedDate": "2020-11-04T16:29:30Z", "message": "Fix for #3306: Speed up HistoryGuru.getRepository(File) call for Opengrok installations with many Repositories\n   and deep file trees by caching previous lookup results for dir -> Repository.\n   Additional refactorings to make this new functionality testable against legacy implementation:\n      - Introduce Jimfs for testing which will allow testing Windows, MacOS or UNIX filesystem on any machine\n      - Refactor PathUtils to use Paths instead of Files (this is needed to use Jimfs)"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 110, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}