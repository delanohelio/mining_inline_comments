{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxMjAwMTgy", "number": 3238, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzowNjo1M1rOEmZjDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNTo0MTowN1rOEmqc9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4Njk5OTE2OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/PageConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzowNjo1M1rOHWZSLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzozNDoyOVrOHWaPLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI0NDk3Mg==", "bodyText": "Even though I did not see repeating headers in the response maybe this should just record the cookie in a map and the actual headers will be added in a filter.", "url": "https://github.com/oracle/opengrok/pull/3238#discussion_r493244972", "createdAt": "2020-09-23T07:06:53Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/PageConfig.java", "diffHunk": "@@ -861,6 +862,16 @@ private static void splitByComma(String value, List<String> result) {\n         }\n     }\n \n+    /**\n+     * Add cookie header to the response along with extra attributes.\n+     * @param response servlet response\n+     * @param name name of the cookie\n+     * @param value value of the cookie\n+     */\n+    public static void addCookie(HttpServletResponse response, String name, String value) {\n+        response.addHeader(\"Set-cookie\", name + \"=\" + value + \"; SameSite=Strict; Secure\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31a722b622be55e86c9fff2b22f49d23f00cc5f8"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI2MDU5MA==", "bodyText": "found a solution to this in https://stackoverflow.com/a/51576089/11582827", "url": "https://github.com/oracle/opengrok/pull/3238#discussion_r493260590", "createdAt": "2020-09-23T07:34:29Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/PageConfig.java", "diffHunk": "@@ -861,6 +862,16 @@ private static void splitByComma(String value, List<String> result) {\n         }\n     }\n \n+    /**\n+     * Add cookie header to the response along with extra attributes.\n+     * @param response servlet response\n+     * @param name name of the cookie\n+     * @param value value of the cookie\n+     */\n+    public static void addCookie(HttpServletResponse response, String name, String value) {\n+        response.addHeader(\"Set-cookie\", name + \"=\" + value + \"; SameSite=Strict; Secure\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI0NDk3Mg=="}, "originalCommit": {"oid": "31a722b622be55e86c9fff2b22f49d23f00cc5f8"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTcwNTI2OnYy", "diffSide": "RIGHT", "path": "opengrok-web/src/main/java/org/opengrok/web/CookieFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNToyNzoyNVrOHW0MKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNToyNzoyNVrOHW0MKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY4NTgwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                FilterConfig fc;\n          \n          \n            \n                private FilterConfig fc;", "url": "https://github.com/oracle/opengrok/pull/3238#discussion_r493685800", "createdAt": "2020-09-23T15:27:25Z", "author": {"login": "ahornace"}, "path": "opengrok-web/src/main/java/org/opengrok/web/CookieFilter.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ */\n+package org.opengrok.web;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.HttpHeaders;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Enumeration;\n+\n+/**\n+ * Makes sure that all cookies originating from the web application have the Same-site attribute set.\n+ */\n+public class CookieFilter implements Filter {\n+    FilterConfig fc;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b8fbc6a461d2a6db18b440dcb10e8b13b4a417b"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTcxMjQzOnYy", "diffSide": "RIGHT", "path": "opengrok-web/src/main/java/org/opengrok/web/CookieFilter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNToyODo0NlrOHW0Qcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNzoyODowM1rOHXNOWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY4Njg5OA==", "bodyText": "Is this necessary? It indicates that the whole filter will be taken out of service (I assume garbage collected) so this is not needed, right?", "url": "https://github.com/oracle/opengrok/pull/3238#discussion_r493686898", "createdAt": "2020-09-23T15:28:46Z", "author": {"login": "ahornace"}, "path": "opengrok-web/src/main/java/org/opengrok/web/CookieFilter.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ */\n+package org.opengrok.web;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.HttpHeaders;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Enumeration;\n+\n+/**\n+ * Makes sure that all cookies originating from the web application have the Same-site attribute set.\n+ */\n+public class CookieFilter implements Filter {\n+    FilterConfig fc;\n+\n+    @Override\n+    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)\n+            throws IOException, ServletException {\n+\n+        HttpServletResponse response = (HttpServletResponse) res;\n+\n+        chain.doFilter(req, response);\n+\n+        // Change the existing cookies to use the attributes and values from the configuration.\n+        Collection<String> headers = response.getHeaders(HttpHeaders.SET_COOKIE);\n+        boolean firstHeader = true;\n+        for (String header : headers) { // there can be multiple Set-Cookie attributes\n+            if (firstHeader) {\n+                response.setHeader(HttpHeaders.SET_COOKIE, String.format(\"%s; %s\", header, getSuffix(response)));\n+                firstHeader = false;\n+                continue;\n+            }\n+            response.addHeader(HttpHeaders.SET_COOKIE, String.format(\"%s; %s\", header, getSuffix(response)));\n+        }\n+    }\n+\n+    private String getSuffix(HttpServletResponse response) {\n+        StringBuilder sb = new StringBuilder();\n+\n+        for (Enumeration<String> e = fc.getInitParameterNames(); e.hasMoreElements();) {\n+            String attributeName = e.nextElement();\n+            if (sb.length() > 0) {\n+                sb.append(\"; \");\n+            }\n+            sb.append(attributeName);\n+            String attributeValue = fc.getInitParameter(attributeName);\n+            if (!attributeValue.isEmpty()) {\n+                sb.append(\"=\");\n+                sb.append(attributeValue);\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+    @Override\n+    public void init(FilterConfig filterConfig) {\n+        this.fc = filterConfig;\n+    }\n+\n+    @Override\n+    public void destroy() {\n+        this.fc = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b8fbc6a461d2a6db18b440dcb10e8b13b4a417b"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcxNzI1Ng==", "bodyText": "most probably not, will remove.", "url": "https://github.com/oracle/opengrok/pull/3238#discussion_r493717256", "createdAt": "2020-09-23T16:11:11Z", "author": {"login": "vladak"}, "path": "opengrok-web/src/main/java/org/opengrok/web/CookieFilter.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ */\n+package org.opengrok.web;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.HttpHeaders;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Enumeration;\n+\n+/**\n+ * Makes sure that all cookies originating from the web application have the Same-site attribute set.\n+ */\n+public class CookieFilter implements Filter {\n+    FilterConfig fc;\n+\n+    @Override\n+    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)\n+            throws IOException, ServletException {\n+\n+        HttpServletResponse response = (HttpServletResponse) res;\n+\n+        chain.doFilter(req, response);\n+\n+        // Change the existing cookies to use the attributes and values from the configuration.\n+        Collection<String> headers = response.getHeaders(HttpHeaders.SET_COOKIE);\n+        boolean firstHeader = true;\n+        for (String header : headers) { // there can be multiple Set-Cookie attributes\n+            if (firstHeader) {\n+                response.setHeader(HttpHeaders.SET_COOKIE, String.format(\"%s; %s\", header, getSuffix(response)));\n+                firstHeader = false;\n+                continue;\n+            }\n+            response.addHeader(HttpHeaders.SET_COOKIE, String.format(\"%s; %s\", header, getSuffix(response)));\n+        }\n+    }\n+\n+    private String getSuffix(HttpServletResponse response) {\n+        StringBuilder sb = new StringBuilder();\n+\n+        for (Enumeration<String> e = fc.getInitParameterNames(); e.hasMoreElements();) {\n+            String attributeName = e.nextElement();\n+            if (sb.length() > 0) {\n+                sb.append(\"; \");\n+            }\n+            sb.append(attributeName);\n+            String attributeValue = fc.getInitParameter(attributeName);\n+            if (!attributeValue.isEmpty()) {\n+                sb.append(\"=\");\n+                sb.append(attributeValue);\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+    @Override\n+    public void init(FilterConfig filterConfig) {\n+        this.fc = filterConfig;\n+    }\n+\n+    @Override\n+    public void destroy() {\n+        this.fc = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY4Njg5OA=="}, "originalCommit": {"oid": "6b8fbc6a461d2a6db18b440dcb10e8b13b4a417b"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA3MDM1OQ==", "bodyText": "It probably needs to be overridden but empty:\n[ERROR] /home/travis/build/oracle/opengrok/opengrok-web/src/main/java/org/opengrok/web/CookieFilter.java:[40,8] org.opengrok.web.CookieFilter is not abstract and does not override abstract method destroy() in javax.servlet.Filter", "url": "https://github.com/oracle/opengrok/pull/3238#discussion_r494070359", "createdAt": "2020-09-24T06:36:13Z", "author": {"login": "ahornace"}, "path": "opengrok-web/src/main/java/org/opengrok/web/CookieFilter.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ */\n+package org.opengrok.web;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.HttpHeaders;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Enumeration;\n+\n+/**\n+ * Makes sure that all cookies originating from the web application have the Same-site attribute set.\n+ */\n+public class CookieFilter implements Filter {\n+    FilterConfig fc;\n+\n+    @Override\n+    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)\n+            throws IOException, ServletException {\n+\n+        HttpServletResponse response = (HttpServletResponse) res;\n+\n+        chain.doFilter(req, response);\n+\n+        // Change the existing cookies to use the attributes and values from the configuration.\n+        Collection<String> headers = response.getHeaders(HttpHeaders.SET_COOKIE);\n+        boolean firstHeader = true;\n+        for (String header : headers) { // there can be multiple Set-Cookie attributes\n+            if (firstHeader) {\n+                response.setHeader(HttpHeaders.SET_COOKIE, String.format(\"%s; %s\", header, getSuffix(response)));\n+                firstHeader = false;\n+                continue;\n+            }\n+            response.addHeader(HttpHeaders.SET_COOKIE, String.format(\"%s; %s\", header, getSuffix(response)));\n+        }\n+    }\n+\n+    private String getSuffix(HttpServletResponse response) {\n+        StringBuilder sb = new StringBuilder();\n+\n+        for (Enumeration<String> e = fc.getInitParameterNames(); e.hasMoreElements();) {\n+            String attributeName = e.nextElement();\n+            if (sb.length() > 0) {\n+                sb.append(\"; \");\n+            }\n+            sb.append(attributeName);\n+            String attributeValue = fc.getInitParameter(attributeName);\n+            if (!attributeValue.isEmpty()) {\n+                sb.append(\"=\");\n+                sb.append(attributeValue);\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+    @Override\n+    public void init(FilterConfig filterConfig) {\n+        this.fc = filterConfig;\n+    }\n+\n+    @Override\n+    public void destroy() {\n+        this.fc = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY4Njg5OA=="}, "originalCommit": {"oid": "6b8fbc6a461d2a6db18b440dcb10e8b13b4a417b"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA5NTk2MA==", "bodyText": "fixed", "url": "https://github.com/oracle/opengrok/pull/3238#discussion_r494095960", "createdAt": "2020-09-24T07:28:03Z", "author": {"login": "vladak"}, "path": "opengrok-web/src/main/java/org/opengrok/web/CookieFilter.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ */\n+package org.opengrok.web;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.HttpHeaders;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Enumeration;\n+\n+/**\n+ * Makes sure that all cookies originating from the web application have the Same-site attribute set.\n+ */\n+public class CookieFilter implements Filter {\n+    FilterConfig fc;\n+\n+    @Override\n+    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)\n+            throws IOException, ServletException {\n+\n+        HttpServletResponse response = (HttpServletResponse) res;\n+\n+        chain.doFilter(req, response);\n+\n+        // Change the existing cookies to use the attributes and values from the configuration.\n+        Collection<String> headers = response.getHeaders(HttpHeaders.SET_COOKIE);\n+        boolean firstHeader = true;\n+        for (String header : headers) { // there can be multiple Set-Cookie attributes\n+            if (firstHeader) {\n+                response.setHeader(HttpHeaders.SET_COOKIE, String.format(\"%s; %s\", header, getSuffix(response)));\n+                firstHeader = false;\n+                continue;\n+            }\n+            response.addHeader(HttpHeaders.SET_COOKIE, String.format(\"%s; %s\", header, getSuffix(response)));\n+        }\n+    }\n+\n+    private String getSuffix(HttpServletResponse response) {\n+        StringBuilder sb = new StringBuilder();\n+\n+        for (Enumeration<String> e = fc.getInitParameterNames(); e.hasMoreElements();) {\n+            String attributeName = e.nextElement();\n+            if (sb.length() > 0) {\n+                sb.append(\"; \");\n+            }\n+            sb.append(attributeName);\n+            String attributeValue = fc.getInitParameter(attributeName);\n+            if (!attributeValue.isEmpty()) {\n+                sb.append(\"=\");\n+                sb.append(attributeValue);\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+    @Override\n+    public void init(FilterConfig filterConfig) {\n+        this.fc = filterConfig;\n+    }\n+\n+    @Override\n+    public void destroy() {\n+        this.fc = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY4Njg5OA=="}, "originalCommit": {"oid": "6b8fbc6a461d2a6db18b440dcb10e8b13b4a417b"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTcxODczOnYy", "diffSide": "RIGHT", "path": "opengrok-web/src/main/java/org/opengrok/web/CookieFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNTozMDowM1rOHW0URw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNTozMDowM1rOHW0URw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY4Nzg3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private String getSuffix(HttpServletResponse response) {\n          \n          \n            \n                private String getSuffix() {", "url": "https://github.com/oracle/opengrok/pull/3238#discussion_r493687879", "createdAt": "2020-09-23T15:30:03Z", "author": {"login": "ahornace"}, "path": "opengrok-web/src/main/java/org/opengrok/web/CookieFilter.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ */\n+package org.opengrok.web;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.HttpHeaders;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Enumeration;\n+\n+/**\n+ * Makes sure that all cookies originating from the web application have the Same-site attribute set.\n+ */\n+public class CookieFilter implements Filter {\n+    FilterConfig fc;\n+\n+    @Override\n+    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)\n+            throws IOException, ServletException {\n+\n+        HttpServletResponse response = (HttpServletResponse) res;\n+\n+        chain.doFilter(req, response);\n+\n+        // Change the existing cookies to use the attributes and values from the configuration.\n+        Collection<String> headers = response.getHeaders(HttpHeaders.SET_COOKIE);\n+        boolean firstHeader = true;\n+        for (String header : headers) { // there can be multiple Set-Cookie attributes\n+            if (firstHeader) {\n+                response.setHeader(HttpHeaders.SET_COOKIE, String.format(\"%s; %s\", header, getSuffix(response)));\n+                firstHeader = false;\n+                continue;\n+            }\n+            response.addHeader(HttpHeaders.SET_COOKIE, String.format(\"%s; %s\", header, getSuffix(response)));\n+        }\n+    }\n+\n+    private String getSuffix(HttpServletResponse response) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b8fbc6a461d2a6db18b440dcb10e8b13b4a417b"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTc2ODg0OnYy", "diffSide": "RIGHT", "path": "opengrok-web/src/main/java/org/opengrok/web/CookieFilter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNTo0MTowN1rOHW0zaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNjozMzoxNFrOHXLlkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY5NTg0OQ==", "bodyText": "Would this work?\nStreamSupport.stream(Spliterators.spliteratorUnknownSize(fc.getInitParameterNames(), Spliterator.NONNULL), false)\n        .map(attributeName -> {\n            String attributeValue = fc.getInitParameter(attributeName);\n            if (!attributeValue.isEmpty()) {\n                return attributeName + \"=\" + attributeValue;\n            } else {\n                return attributeName;\n            }\n        }).collect(Collectors.joining(\"; \"));", "url": "https://github.com/oracle/opengrok/pull/3238#discussion_r493695849", "createdAt": "2020-09-23T15:41:07Z", "author": {"login": "ahornace"}, "path": "opengrok-web/src/main/java/org/opengrok/web/CookieFilter.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ */\n+package org.opengrok.web;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.HttpHeaders;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Enumeration;\n+\n+/**\n+ * Makes sure that all cookies originating from the web application have the Same-site attribute set.\n+ */\n+public class CookieFilter implements Filter {\n+    FilterConfig fc;\n+\n+    @Override\n+    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)\n+            throws IOException, ServletException {\n+\n+        HttpServletResponse response = (HttpServletResponse) res;\n+\n+        chain.doFilter(req, response);\n+\n+        // Change the existing cookies to use the attributes and values from the configuration.\n+        Collection<String> headers = response.getHeaders(HttpHeaders.SET_COOKIE);\n+        boolean firstHeader = true;\n+        for (String header : headers) { // there can be multiple Set-Cookie attributes\n+            if (firstHeader) {\n+                response.setHeader(HttpHeaders.SET_COOKIE, String.format(\"%s; %s\", header, getSuffix(response)));\n+                firstHeader = false;\n+                continue;\n+            }\n+            response.addHeader(HttpHeaders.SET_COOKIE, String.format(\"%s; %s\", header, getSuffix(response)));\n+        }\n+    }\n+\n+    private String getSuffix(HttpServletResponse response) {\n+        StringBuilder sb = new StringBuilder();\n+\n+        for (Enumeration<String> e = fc.getInitParameterNames(); e.hasMoreElements();) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b8fbc6a461d2a6db18b440dcb10e8b13b4a417b"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc1NDA5MQ==", "bodyText": "The first argument of spliteratorUnknownSize has to be either primitive number type or Iterator which is not available in JDK 8. Also, this sort of conversion to stream seems, uh, unnatural.", "url": "https://github.com/oracle/opengrok/pull/3238#discussion_r493754091", "createdAt": "2020-09-23T17:09:11Z", "author": {"login": "vladak"}, "path": "opengrok-web/src/main/java/org/opengrok/web/CookieFilter.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ */\n+package org.opengrok.web;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.HttpHeaders;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Enumeration;\n+\n+/**\n+ * Makes sure that all cookies originating from the web application have the Same-site attribute set.\n+ */\n+public class CookieFilter implements Filter {\n+    FilterConfig fc;\n+\n+    @Override\n+    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)\n+            throws IOException, ServletException {\n+\n+        HttpServletResponse response = (HttpServletResponse) res;\n+\n+        chain.doFilter(req, response);\n+\n+        // Change the existing cookies to use the attributes and values from the configuration.\n+        Collection<String> headers = response.getHeaders(HttpHeaders.SET_COOKIE);\n+        boolean firstHeader = true;\n+        for (String header : headers) { // there can be multiple Set-Cookie attributes\n+            if (firstHeader) {\n+                response.setHeader(HttpHeaders.SET_COOKIE, String.format(\"%s; %s\", header, getSuffix(response)));\n+                firstHeader = false;\n+                continue;\n+            }\n+            response.addHeader(HttpHeaders.SET_COOKIE, String.format(\"%s; %s\", header, getSuffix(response)));\n+        }\n+    }\n+\n+    private String getSuffix(HttpServletResponse response) {\n+        StringBuilder sb = new StringBuilder();\n+\n+        for (Enumeration<String> e = fc.getInitParameterNames(); e.hasMoreElements();) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY5NTg0OQ=="}, "originalCommit": {"oid": "6b8fbc6a461d2a6db18b440dcb10e8b13b4a417b"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA2OTEzNw==", "bodyText": "Yes, however, there are helper methods for this in Guava and maybe apache-commons -> if we have one of them on the classpath then we could leverage that. If not, then creating a simple toStream util method would make this nicer.\nBut you are right, https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Enumeration.html#asIterator() is available since JDK9", "url": "https://github.com/oracle/opengrok/pull/3238#discussion_r494069137", "createdAt": "2020-09-24T06:33:14Z", "author": {"login": "ahornace"}, "path": "opengrok-web/src/main/java/org/opengrok/web/CookieFilter.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ */\n+package org.opengrok.web;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.HttpHeaders;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Enumeration;\n+\n+/**\n+ * Makes sure that all cookies originating from the web application have the Same-site attribute set.\n+ */\n+public class CookieFilter implements Filter {\n+    FilterConfig fc;\n+\n+    @Override\n+    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)\n+            throws IOException, ServletException {\n+\n+        HttpServletResponse response = (HttpServletResponse) res;\n+\n+        chain.doFilter(req, response);\n+\n+        // Change the existing cookies to use the attributes and values from the configuration.\n+        Collection<String> headers = response.getHeaders(HttpHeaders.SET_COOKIE);\n+        boolean firstHeader = true;\n+        for (String header : headers) { // there can be multiple Set-Cookie attributes\n+            if (firstHeader) {\n+                response.setHeader(HttpHeaders.SET_COOKIE, String.format(\"%s; %s\", header, getSuffix(response)));\n+                firstHeader = false;\n+                continue;\n+            }\n+            response.addHeader(HttpHeaders.SET_COOKIE, String.format(\"%s; %s\", header, getSuffix(response)));\n+        }\n+    }\n+\n+    private String getSuffix(HttpServletResponse response) {\n+        StringBuilder sb = new StringBuilder();\n+\n+        for (Enumeration<String> e = fc.getInitParameterNames(); e.hasMoreElements();) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY5NTg0OQ=="}, "originalCommit": {"oid": "6b8fbc6a461d2a6db18b440dcb10e8b13b4a417b"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4956, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}