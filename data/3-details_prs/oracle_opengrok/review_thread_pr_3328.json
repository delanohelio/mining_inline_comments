{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwODM0Nzc2", "number": 3328, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjowNjo1NFrOEybm0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwOTozNzoyMVrOE0CAcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzE2NTYzOnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/RepositoryLookup.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjowNjo1NFrOHpEX3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjowNjo1NFrOHpEX3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgyNTMxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (c) 2020 Anatoly Akkerman <akkerman@gmail.com>, <anatoly.akkerman@twosigma.com>.\n          \n          \n            \n             * Copyright (c) 2020, Anatoly Akkerman <akkerman@gmail.com>, <anatoly.akkerman@twosigma.com>.", "url": "https://github.com/oracle/opengrok/pull/3328#discussion_r512825310", "createdAt": "2020-10-27T16:06:54Z", "author": {"login": "ahornace"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/RepositoryLookup.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Anatoly Akkerman <akkerman@gmail.com>, <anatoly.akkerman@twosigma.com>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97ee3fdfa7bfd240064f861a98176d1c75969ec2"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzE2NzAzOnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/RepositoryLookupCached.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjowNzowOVrOHpEYtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjowNzowOVrOHpEYtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgyNTUyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (c) 2020 Anatoly Akkerman <akkerman@gmail.com>, <anatoly.akkerman@twosigma.com>.\n          \n          \n            \n             * Copyright (c) 2020, Anatoly Akkerman <akkerman@gmail.com>, <anatoly.akkerman@twosigma.com>.", "url": "https://github.com/oracle/opengrok/pull/3328#discussion_r512825527", "createdAt": "2020-10-27T16:07:09Z", "author": {"login": "ahornace"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/RepositoryLookupCached.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Anatoly Akkerman <akkerman@gmail.com>, <anatoly.akkerman@twosigma.com>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97ee3fdfa7bfd240064f861a98176d1c75969ec2"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzE2ODA1OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/RepositoryLookupUncached.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjowNzoyM1rOHpEZYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjowNzoyM1rOHpEZYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgyNTY5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (c) 2020 Anatoly Akkerman <akkerman@gmail.com>, <anatoly.akkerman@twosigma.com>.\n          \n          \n            \n             * Copyright (c) 2020, Anatoly Akkerman <akkerman@gmail.com>, <anatoly.akkerman@twosigma.com>.", "url": "https://github.com/oracle/opengrok/pull/3328#discussion_r512825696", "createdAt": "2020-10-27T16:07:23Z", "author": {"login": "ahornace"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/RepositoryLookupUncached.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Anatoly Akkerman <akkerman@gmail.com>, <anatoly.akkerman@twosigma.com>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97ee3fdfa7bfd240064f861a98176d1c75969ec2"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzE2OTA4OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/history/RepositoryLookupTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjowNzozN1rOHpEaAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjowNzozN1rOHpEaAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgyNTg1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (c) 2020 Anatoly Akkerman <akkerman@gmail.com>, <anatoly.akkerman@twosigma.com>.\n          \n          \n            \n             * Copyright (c) 2020, Anatoly Akkerman <akkerman@gmail.com>, <anatoly.akkerman@twosigma.com>.", "url": "https://github.com/oracle/opengrok/pull/3328#discussion_r512825857", "createdAt": "2020-10-27T16:07:37Z", "author": {"login": "ahornace"}, "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/history/RepositoryLookupTest.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Anatoly Akkerman <akkerman@gmail.com>, <anatoly.akkerman@twosigma.com>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97ee3fdfa7bfd240064f861a98176d1c75969ec2"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNDMzNTU0OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/HistoryContext.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMDozNDoyMVrOHpPy8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMDo0NzoxM1rOHpQOmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAxMjQ2NQ==", "bodyText": "this is perhaps a warning or HistoryException throw", "url": "https://github.com/oracle/opengrok/pull/3328#discussion_r513012465", "createdAt": "2020-10-27T20:34:21Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/HistoryContext.java", "diffHunk": "@@ -82,7 +82,12 @@ public boolean getContext(String filename, String path, List<Hit> hits) throws H\n             return false;\n         }\n         File f = new File(filename);\n-        return getHistoryContext(HistoryGuru.getInstance().getHistory(f), path, null, hits, null);\n+        History history = HistoryGuru.getInstance().getHistory(f);\n+        if (history == null) {\n+            LOGGER.log(Level.INFO, \"Null history got for {0}\", f);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77154d054b61f6a49a3ed10497bafb7d5385214"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAxNjMzNg==", "bodyText": "I patterned it after the other method: \n  \n    \n      opengrok/opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/HistoryContext.java\n    \n    \n        Lines 116 to 121\n      in\n      c77154d\n    \n    \n    \n    \n\n        \n          \n           History hist = HistoryGuru.getInstance().getHistory(src); \n        \n\n        \n          \n           if (hist == null) { \n        \n\n        \n          \n               LOGGER.log(Level.INFO, \"Null history got for {0}\", src); \n        \n\n        \n          \n               return false; \n        \n\n        \n          \n           } \n        \n\n        \n          \n           return getHistoryContext(hist, path, out, null, context);", "url": "https://github.com/oracle/opengrok/pull/3328#discussion_r513016336", "createdAt": "2020-10-27T20:41:19Z", "author": {"login": "azakkerman"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/HistoryContext.java", "diffHunk": "@@ -82,7 +82,12 @@ public boolean getContext(String filename, String path, List<Hit> hits) throws H\n             return false;\n         }\n         File f = new File(filename);\n-        return getHistoryContext(HistoryGuru.getInstance().getHistory(f), path, null, hits, null);\n+        History history = HistoryGuru.getInstance().getHistory(f);\n+        if (history == null) {\n+            LOGGER.log(Level.INFO, \"Null history got for {0}\", f);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAxMjQ2NQ=="}, "originalCommit": {"oid": "c77154d054b61f6a49a3ed10497bafb7d5385214"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAxOTU0NQ==", "bodyText": "I see, then it's probably ok.", "url": "https://github.com/oracle/opengrok/pull/3328#discussion_r513019545", "createdAt": "2020-10-27T20:47:13Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/HistoryContext.java", "diffHunk": "@@ -82,7 +82,12 @@ public boolean getContext(String filename, String path, List<Hit> hits) throws H\n             return false;\n         }\n         File f = new File(filename);\n-        return getHistoryContext(HistoryGuru.getInstance().getHistory(f), path, null, hits, null);\n+        History history = HistoryGuru.getInstance().getHistory(f);\n+        if (history == null) {\n+            LOGGER.log(Level.INFO, \"Null history got for {0}\", f);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAxMjQ2NQ=="}, "originalCommit": {"oid": "c77154d054b61f6a49a3ed10497bafb7d5385214"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTkzODU1OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/history/RepositoryLookupTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwOTozMTo0NFrOHrmQoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwOTozODozMFrOHrmS1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ3NzY2NQ==", "bodyText": "is org.opengrok.indexer.condition.UnixPresent needed for this test?", "url": "https://github.com/oracle/opengrok/pull/3328#discussion_r515477665", "createdAt": "2020-10-31T09:31:44Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/history/RepositoryLookupTest.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Anatoly Akkerman <akkerman@gmail.com>, <anatoly.akkerman@twosigma.com>.\n+ */\n+package org.opengrok.indexer.history;\n+\n+import com.google.common.jimfs.Configuration;\n+import com.google.common.jimfs.Jimfs;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.Matchers;\n+import org.hamcrest.number.OrderingComparison;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.opengrok.indexer.util.PathUtils;\n+\n+import java.io.IOException;\n+import java.nio.file.FileSystem;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.AdditionalAnswers.delegatesTo;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.mockingDetails;\n+\n+public class RepositoryLookupTest {\n+    // Files to include into Repositories having short paths\n+    private static final String[] SHORT_PATH_CONTENTS = {\"foo/bar.txt\", \"foo/bla/barf.txt\", \"special/woops@\",\n+        \"special/veryveryverylongfilename_just_for_fun\"};\n+    // Files to include into Repositories having longer paths\n+    private static final String[] LONG_PATH_CONTENTS = {\"foo/bla/1/2/3/4/bar.txt\", \"foo/bla/1/2/3/4/5/barf.txt\"};\n+    Map<String, Repository> repositories;\n+    Set<String> repositoryRoots;\n+    // TODO: Parametrize this to run against windows(), unix() and macos()\n+    FileSystem fileSystem = Jimfs.newFileSystem(Configuration.unix());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81974384c2f4d18cc81b1d4f1b74d64852268c95"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ3ODIzMQ==", "bodyText": "I see now, it is virtual filesystem.", "url": "https://github.com/oracle/opengrok/pull/3328#discussion_r515478231", "createdAt": "2020-10-31T09:38:30Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/history/RepositoryLookupTest.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Anatoly Akkerman <akkerman@gmail.com>, <anatoly.akkerman@twosigma.com>.\n+ */\n+package org.opengrok.indexer.history;\n+\n+import com.google.common.jimfs.Configuration;\n+import com.google.common.jimfs.Jimfs;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.Matchers;\n+import org.hamcrest.number.OrderingComparison;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.opengrok.indexer.util.PathUtils;\n+\n+import java.io.IOException;\n+import java.nio.file.FileSystem;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.AdditionalAnswers.delegatesTo;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.mockingDetails;\n+\n+public class RepositoryLookupTest {\n+    // Files to include into Repositories having short paths\n+    private static final String[] SHORT_PATH_CONTENTS = {\"foo/bar.txt\", \"foo/bla/barf.txt\", \"special/woops@\",\n+        \"special/veryveryverylongfilename_just_for_fun\"};\n+    // Files to include into Repositories having longer paths\n+    private static final String[] LONG_PATH_CONTENTS = {\"foo/bla/1/2/3/4/bar.txt\", \"foo/bla/1/2/3/4/5/barf.txt\"};\n+    Map<String, Repository> repositories;\n+    Set<String> repositoryRoots;\n+    // TODO: Parametrize this to run against windows(), unix() and macos()\n+    FileSystem fileSystem = Jimfs.newFileSystem(Configuration.unix());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ3NzY2NQ=="}, "originalCommit": {"oid": "81974384c2f4d18cc81b1d4f1b74d64852268c95"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTkzOTM2OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/history/RepositoryLookupTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwOTozMjo1MVrOHrmQ-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwOTozMjo1MVrOHrmQ-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ3Nzc1NQ==", "bodyText": "private for consistent use?", "url": "https://github.com/oracle/opengrok/pull/3328#discussion_r515477755", "createdAt": "2020-10-31T09:32:51Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/history/RepositoryLookupTest.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Anatoly Akkerman <akkerman@gmail.com>, <anatoly.akkerman@twosigma.com>.\n+ */\n+package org.opengrok.indexer.history;\n+\n+import com.google.common.jimfs.Configuration;\n+import com.google.common.jimfs.Jimfs;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.Matchers;\n+import org.hamcrest.number.OrderingComparison;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.opengrok.indexer.util.PathUtils;\n+\n+import java.io.IOException;\n+import java.nio.file.FileSystem;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.AdditionalAnswers.delegatesTo;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.mockingDetails;\n+\n+public class RepositoryLookupTest {\n+    // Files to include into Repositories having short paths\n+    private static final String[] SHORT_PATH_CONTENTS = {\"foo/bar.txt\", \"foo/bla/barf.txt\", \"special/woops@\",\n+        \"special/veryveryverylongfilename_just_for_fun\"};\n+    // Files to include into Repositories having longer paths\n+    private static final String[] LONG_PATH_CONTENTS = {\"foo/bla/1/2/3/4/bar.txt\", \"foo/bla/1/2/3/4/5/barf.txt\"};\n+    Map<String, Repository> repositories;\n+    Set<String> repositoryRoots;\n+    // TODO: Parametrize this to run against windows(), unix() and macos()\n+    FileSystem fileSystem = Jimfs.newFileSystem(Configuration.unix());\n+    // Pick first root to resolve paths relative to it.\n+    // Windows Jimfs can only resolve absolute paths relative to a rootDir, not via fileSystem.get(\"/a/b/c\")\n+    Path rootDir = fileSystem.getRootDirectories().iterator().next();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81974384c2f4d18cc81b1d4f1b74d64852268c95"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTkzOTM4OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/history/RepositoryLookupTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwOTozMjo1NFrOHrmQ_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwOTozMjo1NFrOHrmQ_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ3Nzc1Nw==", "bodyText": "private for consistent use?", "url": "https://github.com/oracle/opengrok/pull/3328#discussion_r515477757", "createdAt": "2020-10-31T09:32:54Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/history/RepositoryLookupTest.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Anatoly Akkerman <akkerman@gmail.com>, <anatoly.akkerman@twosigma.com>.\n+ */\n+package org.opengrok.indexer.history;\n+\n+import com.google.common.jimfs.Configuration;\n+import com.google.common.jimfs.Jimfs;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.Matchers;\n+import org.hamcrest.number.OrderingComparison;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.opengrok.indexer.util.PathUtils;\n+\n+import java.io.IOException;\n+import java.nio.file.FileSystem;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.AdditionalAnswers.delegatesTo;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.mockingDetails;\n+\n+public class RepositoryLookupTest {\n+    // Files to include into Repositories having short paths\n+    private static final String[] SHORT_PATH_CONTENTS = {\"foo/bar.txt\", \"foo/bla/barf.txt\", \"special/woops@\",\n+        \"special/veryveryverylongfilename_just_for_fun\"};\n+    // Files to include into Repositories having longer paths\n+    private static final String[] LONG_PATH_CONTENTS = {\"foo/bla/1/2/3/4/bar.txt\", \"foo/bla/1/2/3/4/5/barf.txt\"};\n+    Map<String, Repository> repositories;\n+    Set<String> repositoryRoots;\n+    // TODO: Parametrize this to run against windows(), unix() and macos()\n+    FileSystem fileSystem = Jimfs.newFileSystem(Configuration.unix());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81974384c2f4d18cc81b1d4f1b74d64852268c95"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTkzOTQyOnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/history/RepositoryLookupTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwOTozMjo1OVrOHrmRAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwOTozMjo1OVrOHrmRAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ3Nzc2MQ==", "bodyText": "private for consistent use?", "url": "https://github.com/oracle/opengrok/pull/3328#discussion_r515477761", "createdAt": "2020-10-31T09:32:59Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/history/RepositoryLookupTest.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Anatoly Akkerman <akkerman@gmail.com>, <anatoly.akkerman@twosigma.com>.\n+ */\n+package org.opengrok.indexer.history;\n+\n+import com.google.common.jimfs.Configuration;\n+import com.google.common.jimfs.Jimfs;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.Matchers;\n+import org.hamcrest.number.OrderingComparison;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.opengrok.indexer.util.PathUtils;\n+\n+import java.io.IOException;\n+import java.nio.file.FileSystem;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.AdditionalAnswers.delegatesTo;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.mockingDetails;\n+\n+public class RepositoryLookupTest {\n+    // Files to include into Repositories having short paths\n+    private static final String[] SHORT_PATH_CONTENTS = {\"foo/bar.txt\", \"foo/bla/barf.txt\", \"special/woops@\",\n+        \"special/veryveryverylongfilename_just_for_fun\"};\n+    // Files to include into Repositories having longer paths\n+    private static final String[] LONG_PATH_CONTENTS = {\"foo/bla/1/2/3/4/bar.txt\", \"foo/bla/1/2/3/4/5/barf.txt\"};\n+    Map<String, Repository> repositories;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81974384c2f4d18cc81b1d4f1b74d64852268c95"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTkzOTQ2OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/history/RepositoryLookupTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwOTozMzowM1rOHrmRCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwOTozMzowM1rOHrmRCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ3Nzc2OQ==", "bodyText": "private for consistent use?", "url": "https://github.com/oracle/opengrok/pull/3328#discussion_r515477769", "createdAt": "2020-10-31T09:33:03Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/history/RepositoryLookupTest.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Anatoly Akkerman <akkerman@gmail.com>, <anatoly.akkerman@twosigma.com>.\n+ */\n+package org.opengrok.indexer.history;\n+\n+import com.google.common.jimfs.Configuration;\n+import com.google.common.jimfs.Jimfs;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.Matchers;\n+import org.hamcrest.number.OrderingComparison;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.opengrok.indexer.util.PathUtils;\n+\n+import java.io.IOException;\n+import java.nio.file.FileSystem;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.AdditionalAnswers.delegatesTo;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.mockingDetails;\n+\n+public class RepositoryLookupTest {\n+    // Files to include into Repositories having short paths\n+    private static final String[] SHORT_PATH_CONTENTS = {\"foo/bar.txt\", \"foo/bla/barf.txt\", \"special/woops@\",\n+        \"special/veryveryverylongfilename_just_for_fun\"};\n+    // Files to include into Repositories having longer paths\n+    private static final String[] LONG_PATH_CONTENTS = {\"foo/bla/1/2/3/4/bar.txt\", \"foo/bla/1/2/3/4/5/barf.txt\"};\n+    Map<String, Repository> repositories;\n+    Set<String> repositoryRoots;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81974384c2f4d18cc81b1d4f1b74d64852268c95"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTk0Mjg5OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/RepositoryLookup.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwOTozNzoyMVrOHrmSlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwOTozNzoyMVrOHrmSlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ3ODE2Ng==", "bodyText": "could be @ see so it jumps there automatically", "url": "https://github.com/oracle/opengrok/pull/3328#discussion_r515478166", "createdAt": "2020-10-31T09:37:21Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/RepositoryLookup.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Anatoly Akkerman <akkerman@gmail.com>, <anatoly.akkerman@twosigma.com>.\n+ */\n+package org.opengrok.indexer.history;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Interface for finding enclosing Repository for a given Path, used by HistoryGuru.\n+ * <p>\n+ * Two implementations exists\n+ * - uncached, (legacy behavior) extracted from HistoryGuru into a stand-alone impl\n+ * - cached, new implementation, which reduces number of expensive canonicalization calls\n+ * <p>\n+ * We preserve both cached and uncached implementations in order to verify correctness of the cached impl.\n+ */\n+public interface RepositoryLookup {\n+\n+    static RepositoryLookupCached cached() {\n+        return new RepositoryLookupCached();\n+    }\n+\n+    static RepositoryLookupUncached uncached() {\n+        return new RepositoryLookupUncached();\n+    }\n+\n+    /**\n+     * This interface allows intercepting PathUtils.getRelativeToCanonical in order to measure the impact of caching.\n+     *\n+     * In practice, PathUtils::getRelativeToCanonical is the implementation of this interface", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81974384c2f4d18cc81b1d4f1b74d64852268c95"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4857, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}