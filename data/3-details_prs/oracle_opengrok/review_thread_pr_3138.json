{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzODEzNjQ5", "number": 3138, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNTo0MzowMFrOD6TwGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxOToxNToyNlrOD6Yn5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNDY3NjA4OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/util/NumberUtil.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNTo0MzowMFrOGSEuRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxOToxMzo1OFrOGSMlgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYwNDkzNQ==", "bodyText": "i think the default should be a parameter for this so the caller can specify what it expects in case of a non-long string", "url": "https://github.com/oracle/opengrok/pull/3138#discussion_r421604935", "createdAt": "2020-05-07T15:43:00Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/util/NumberUtil.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.\n+ */\n+\n+package org.opengrok.indexer.util;\n+\n+public class NumberUtil {\n+    /**\n+     * Parses the specified {@code value} without throwing a checked exception.\n+     */\n+    public static Long tryParseLong(String value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        try {\n+            return Long.parseLong(value);\n+        } catch (NumberFormatException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Parses the specified {@code value} without throwing a checked exception,\n+     * returning a default 0.\n+     */\n+    public static long tryParseLongPrimitive(String value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c152a8d610e885e93c0a3d508b9007884d21917a"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTczMDY5Ng==", "bodyText": "Shouldn't we wait for that use case?", "url": "https://github.com/oracle/opengrok/pull/3138#discussion_r421730696", "createdAt": "2020-05-07T19:08:26Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/util/NumberUtil.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.\n+ */\n+\n+package org.opengrok.indexer.util;\n+\n+public class NumberUtil {\n+    /**\n+     * Parses the specified {@code value} without throwing a checked exception.\n+     */\n+    public static Long tryParseLong(String value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        try {\n+            return Long.parseLong(value);\n+        } catch (NumberFormatException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Parses the specified {@code value} without throwing a checked exception,\n+     * returning a default 0.\n+     */\n+    public static long tryParseLongPrimitive(String value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYwNDkzNQ=="}, "originalCommit": {"oid": "c152a8d610e885e93c0a3d508b9007884d21917a"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTczMzc2Mg==", "bodyText": "allright", "url": "https://github.com/oracle/opengrok/pull/3138#discussion_r421733762", "createdAt": "2020-05-07T19:13:58Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/util/NumberUtil.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.\n+ */\n+\n+package org.opengrok.indexer.util;\n+\n+public class NumberUtil {\n+    /**\n+     * Parses the specified {@code value} without throwing a checked exception.\n+     */\n+    public static Long tryParseLong(String value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        try {\n+            return Long.parseLong(value);\n+        } catch (NumberFormatException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Parses the specified {@code value} without throwing a checked exception,\n+     * returning a default 0.\n+     */\n+    public static long tryParseLongPrimitive(String value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYwNDkzNQ=="}, "originalCommit": {"oid": "c152a8d610e885e93c0a3d508b9007884d21917a"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNDY4NzU0OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/NullableNumLinesLOC.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNTo0NTozOFrOGSE1XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMzo1Njo0MFrOGSYIww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYwNjc0OQ==", "bodyText": "I don't like this duplication, any way around this with Optionals, or simply any other way than just duplicating class?", "url": "https://github.com/oracle/opengrok/pull/3138#discussion_r421606749", "createdAt": "2020-05-07T15:45:38Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/NullableNumLinesLOC.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.\n+ */\n+\n+package org.opengrok.indexer.analysis;\n+\n+/**\n+ * Represents an immutable data object that associates a file with its analyzed\n+ * number-of-lines and lines-of-code or with null values.\n+ */\n+public class NullableNumLinesLOC {\n+    private final String path;\n+    private final Long numLines;\n+    private final Long loc;\n+\n+    public NullableNumLinesLOC(String path, Long numLines, Long loc) {\n+        this.path = path;\n+        this.numLines = numLines;\n+        this.loc = loc;\n+    }\n+\n+    public String getPath() {\n+        return path;\n+    }\n+\n+    public Long getNumLines() {\n+        return numLines;\n+    }\n+\n+    public Long getLOC() {\n+        return loc;\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c152a8d610e885e93c0a3d508b9007884d21917a"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcyMTUxMA==", "bodyText": "NullableNumLinesLOC is a renamed FileExtra where possible nullability is acknowledged for reporting purposes (e.g. for files that have no #Lines/LOC such as ZIP files). For the analysis and aggregation of this data, it's useful to leave out nullability, so NumLinesLOC exists with long and not Long.", "url": "https://github.com/oracle/opengrok/pull/3138#discussion_r421721510", "createdAt": "2020-05-07T18:52:12Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/NullableNumLinesLOC.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.\n+ */\n+\n+package org.opengrok.indexer.analysis;\n+\n+/**\n+ * Represents an immutable data object that associates a file with its analyzed\n+ * number-of-lines and lines-of-code or with null values.\n+ */\n+public class NullableNumLinesLOC {\n+    private final String path;\n+    private final Long numLines;\n+    private final Long loc;\n+\n+    public NullableNumLinesLOC(String path, Long numLines, Long loc) {\n+        this.path = path;\n+        this.numLines = numLines;\n+        this.loc = loc;\n+    }\n+\n+    public String getPath() {\n+        return path;\n+    }\n+\n+    public Long getNumLines() {\n+        return numLines;\n+    }\n+\n+    public Long getLOC() {\n+        return loc;\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYwNjc0OQ=="}, "originalCommit": {"oid": "c152a8d610e885e93c0a3d508b9007884d21917a"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTczMzE5Ng==", "bodyText": "Understood, and what about forexample method supportsLoc that would return true for the cases you mentioned and then you could read the primitive values and false when reading these values wouldn't be meaningful. Basically - using only one class and hiding the ugly logic (loc != null && lines != null) inside it?", "url": "https://github.com/oracle/opengrok/pull/3138#discussion_r421733196", "createdAt": "2020-05-07T19:12:59Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/NullableNumLinesLOC.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.\n+ */\n+\n+package org.opengrok.indexer.analysis;\n+\n+/**\n+ * Represents an immutable data object that associates a file with its analyzed\n+ * number-of-lines and lines-of-code or with null values.\n+ */\n+public class NullableNumLinesLOC {\n+    private final String path;\n+    private final Long numLines;\n+    private final Long loc;\n+\n+    public NullableNumLinesLOC(String path, Long numLines, Long loc) {\n+        this.path = path;\n+        this.numLines = numLines;\n+        this.loc = loc;\n+    }\n+\n+    public String getPath() {\n+        return path;\n+    }\n+\n+    public Long getNumLines() {\n+        return numLines;\n+    }\n+\n+    public Long getLOC() {\n+        return loc;\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYwNjc0OQ=="}, "originalCommit": {"oid": "c152a8d610e885e93c0a3d508b9007884d21917a"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTczMzQzNA==", "bodyText": "Just an idea", "url": "https://github.com/oracle/opengrok/pull/3138#discussion_r421733434", "createdAt": "2020-05-07T19:13:25Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/NullableNumLinesLOC.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.\n+ */\n+\n+package org.opengrok.indexer.analysis;\n+\n+/**\n+ * Represents an immutable data object that associates a file with its analyzed\n+ * number-of-lines and lines-of-code or with null values.\n+ */\n+public class NullableNumLinesLOC {\n+    private final String path;\n+    private final Long numLines;\n+    private final Long loc;\n+\n+    public NullableNumLinesLOC(String path, Long numLines, Long loc) {\n+        this.path = path;\n+        this.numLines = numLines;\n+        this.loc = loc;\n+    }\n+\n+    public String getPath() {\n+        return path;\n+    }\n+\n+    public Long getNumLines() {\n+        return numLines;\n+    }\n+\n+    public Long getLOC() {\n+        return loc;\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYwNjc0OQ=="}, "originalCommit": {"oid": "c152a8d610e885e93c0a3d508b9007884d21917a"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkyMzAxMQ==", "bodyText": "Your idea would increase cyclomatic complexity everywhere the current non-nullable class is used. I don't support", "url": "https://github.com/oracle/opengrok/pull/3138#discussion_r421923011", "createdAt": "2020-05-08T03:56:40Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/NullableNumLinesLOC.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.\n+ */\n+\n+package org.opengrok.indexer.analysis;\n+\n+/**\n+ * Represents an immutable data object that associates a file with its analyzed\n+ * number-of-lines and lines-of-code or with null values.\n+ */\n+public class NullableNumLinesLOC {\n+    private final String path;\n+    private final Long numLines;\n+    private final Long loc;\n+\n+    public NullableNumLinesLOC(String path, Long numLines, Long loc) {\n+        this.path = path;\n+        this.numLines = numLines;\n+        this.loc = loc;\n+    }\n+\n+    public String getPath() {\n+        return path;\n+    }\n+\n+    public Long getNumLines() {\n+        return numLines;\n+    }\n+\n+    public Long getLOC() {\n+        return loc;\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYwNjc0OQ=="}, "originalCommit": {"oid": "c152a8d610e885e93c0a3d508b9007884d21917a"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTQ3NDI4OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxOToxNToyN1rOGSMofA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNzo0NzoyM1rOGTQi4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTczNDUyNA==", "bodyText": "I'm not sure if I follow this logic. Could you extract the filename to a constant?", "url": "https://github.com/oracle/opengrok/pull/3138#discussion_r421734524", "createdAt": "2020-05-07T19:15:27Z", "author": {"login": "ktulinger"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -505,6 +534,17 @@ public void update() throws IOException {\n                         }\n                     }\n \n+                    /*\n+                     * Since we are avoiding an IndexAnalysisSettings bump to\n+                     * store needed state related to #Lines/LOC, we need to\n+                     * ensure that at least one D-document gets saved. Record\n+                     * zeroes for a .foo under sourceRoot to do this.\n+                     */\n+                    countsAggregator.register(new NumLinesLOC(\"/.foo\", 0, 0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c152a8d610e885e93c0a3d508b9007884d21917a"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkyNjg5Mw==", "bodyText": "I don't understand how a constant will help anyone follow if that long comment cannot do.", "url": "https://github.com/oracle/opengrok/pull/3138#discussion_r421926893", "createdAt": "2020-05-08T04:12:34Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -505,6 +534,17 @@ public void update() throws IOException {\n                         }\n                     }\n \n+                    /*\n+                     * Since we are avoiding an IndexAnalysisSettings bump to\n+                     * store needed state related to #Lines/LOC, we need to\n+                     * ensure that at least one D-document gets saved. Record\n+                     * zeroes for a .foo under sourceRoot to do this.\n+                     */\n+                    countsAggregator.register(new NumLinesLOC(\"/.foo\", 0, 0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTczNDUyNA=="}, "originalCommit": {"oid": "c152a8d610e885e93c0a3d508b9007884d21917a"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYxMjAwMA==", "bodyText": "These two weren't connected.", "url": "https://github.com/oracle/opengrok/pull/3138#discussion_r422612000", "createdAt": "2020-05-10T08:46:33Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -505,6 +534,17 @@ public void update() throws IOException {\n                         }\n                     }\n \n+                    /*\n+                     * Since we are avoiding an IndexAnalysisSettings bump to\n+                     * store needed state related to #Lines/LOC, we need to\n+                     * ensure that at least one D-document gets saved. Record\n+                     * zeroes for a .foo under sourceRoot to do this.\n+                     */\n+                    countsAggregator.register(new NumLinesLOC(\"/.foo\", 0, 0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTczNDUyNA=="}, "originalCommit": {"oid": "c152a8d610e885e93c0a3d508b9007884d21917a"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1NDAxOA==", "bodyText": "Oh. OK I extracted a constant and updated the comment hopefully for clarity.", "url": "https://github.com/oracle/opengrok/pull/3138#discussion_r422754018", "createdAt": "2020-05-11T03:00:09Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -505,6 +534,17 @@ public void update() throws IOException {\n                         }\n                     }\n \n+                    /*\n+                     * Since we are avoiding an IndexAnalysisSettings bump to\n+                     * store needed state related to #Lines/LOC, we need to\n+                     * ensure that at least one D-document gets saved. Record\n+                     * zeroes for a .foo under sourceRoot to do this.\n+                     */\n+                    countsAggregator.register(new NumLinesLOC(\"/.foo\", 0, 0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTczNDUyNA=="}, "originalCommit": {"oid": "c152a8d610e885e93c0a3d508b9007884d21917a"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg0NzIwMQ==", "bodyText": "Understood, nice.", "url": "https://github.com/oracle/opengrok/pull/3138#discussion_r422847201", "createdAt": "2020-05-11T07:47:23Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -505,6 +534,17 @@ public void update() throws IOException {\n                         }\n                     }\n \n+                    /*\n+                     * Since we are avoiding an IndexAnalysisSettings bump to\n+                     * store needed state related to #Lines/LOC, we need to\n+                     * ensure that at least one D-document gets saved. Record\n+                     * zeroes for a .foo under sourceRoot to do this.\n+                     */\n+                    countsAggregator.register(new NumLinesLOC(\"/.foo\", 0, 0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTczNDUyNA=="}, "originalCommit": {"oid": "c152a8d610e885e93c0a3d508b9007884d21917a"}, "originalPosition": 91}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4900, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}