{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzMzcyMzYw", "number": 3279, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMzo0MDoyNFrOEtfU1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDoxNToxOFrOEtgZug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTM0NjE1OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/StatsdConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMzo0MDoyNFrOHhTirg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNTowNzo0MFrOHhX1nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY4NTIzMA==", "bodyText": "Cannot we use io.micrometer.statsd.StatsdFlavor enum? E.g. RemoteSCM is an enum and used in configuration so we should be good to go, right?", "url": "https://github.com/oracle/opengrok/pull/3279#discussion_r504685230", "createdAt": "2020-10-14T13:40:24Z", "author": {"login": "ahornace"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/StatsdConfig.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.indexer.configuration;\n+\n+/**\n+ * Configuration for Statsd metrics emitted by the Indexer via {@link org.opengrok.indexer.util.Statistics}.\n+ */\n+public class StatsdConfig {\n+    private int port;\n+    private String host;\n+    private boolean enabled;\n+    private String flavor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e518f99aa52b9c7664c9ad2bb87afe55cd48344"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc1NTYxMg==", "bodyText": "That certainly works however it will make the configuration slightly more ugly:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<java version=\"11.0.4\" class=\"java.beans.XMLDecoder\">\n <object class=\"org.opengrok.indexer.configuration.Configuration\" id=\"Configuration0\">\n\n  <void property=\"statsdConfig\">\n     <void property=\"port\">\n       <int>8125</int>\n     </void>\n     <void property=\"host\">\n       <string>localhost</string>\n     </void>\n<!--\n     <void property=\"flavor\">\n       <enum>etsy</enum>\n     </void>\n-->\n     <void property=\"flavor\">\n       <object class=\"java.lang.Enum\" method=\"valueOf\">\n         <class>io.micrometer.statsd.StatsdFlavor</class>\n         <string>ETSY</string>\n       </object>\n    </void>\n  </void>\n\n </object>\n</java>", "url": "https://github.com/oracle/opengrok/pull/3279#discussion_r504755612", "createdAt": "2020-10-14T15:07:40Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/StatsdConfig.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.indexer.configuration;\n+\n+/**\n+ * Configuration for Statsd metrics emitted by the Indexer via {@link org.opengrok.indexer.util.Statistics}.\n+ */\n+public class StatsdConfig {\n+    private int port;\n+    private String host;\n+    private boolean enabled;\n+    private String flavor;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY4NTIzMA=="}, "originalCommit": {"oid": "4e518f99aa52b9c7664c9ad2bb87afe55cd48344"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTM1NjEzOnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMzo0MjoyM1rOHhToyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMzo0MjoyM1rOHhToyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY4Njc5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public ArrayList<String> getSubFiles() {\n          \n          \n            \n                public List<String> getSubFiles() {", "url": "https://github.com/oracle/opengrok/pull/3279#discussion_r504686795", "createdAt": "2020-10-14T13:42:23Z", "author": {"login": "ahornace"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java", "diffHunk": "@@ -123,6 +123,12 @@\n \n     public WatchDogService watchDog;\n \n+    public ArrayList<String> getSubFiles() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e518f99aa52b9c7664c9ad2bb87afe55cd48344"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTM1NjkxOnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMzo0MjozNVrOHhTpRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMzo0MjozNVrOHhTpRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY4NjkxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private ArrayList<String> subFiles = new ArrayList<>();\n          \n          \n            \n                private List<String> subFiles = new ArrayList<>();", "url": "https://github.com/oracle/opengrok/pull/3279#discussion_r504686919", "createdAt": "2020-10-14T13:42:35Z", "author": {"login": "ahornace"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java", "diffHunk": "@@ -123,6 +123,12 @@\n \n     public WatchDogService watchDog;\n \n+    public ArrayList<String> getSubFiles() {\n+        return subFiles;\n+    }\n+\n+    private ArrayList<String> subFiles = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e518f99aa52b9c7664c9ad2bb87afe55cd48344"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTM2MjQ0OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/Metrics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMzo0Mzo0NFrOHhTsrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMzo0Mzo0NFrOHhTsrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY4Nzc4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (subFiles.size() > 0) {\n          \n          \n            \n                        if (!subFiles.isEmpty()) {", "url": "https://github.com/oracle/opengrok/pull/3279#discussion_r504687789", "createdAt": "2020-10-14T13:43:44Z", "author": {"login": "ahornace"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/Metrics.java", "diffHunk": "@@ -22,19 +22,105 @@\n  */\n package org.opengrok.indexer;\n \n+import io.micrometer.core.instrument.Clock;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Tag;\n import io.micrometer.core.instrument.binder.jvm.ClassLoaderMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmGcMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmThreadMetrics;\n import io.micrometer.core.instrument.binder.system.ProcessorMetrics;\n import io.micrometer.prometheus.PrometheusConfig;\n import io.micrometer.prometheus.PrometheusMeterRegistry;\n+import io.micrometer.statsd.StatsdConfig;\n+import io.micrometer.statsd.StatsdMeterRegistry;\n+import io.micrometer.statsd.StatsdFlavor;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.index.Indexer;\n+import org.opengrok.indexer.logger.LoggerFactory;\n \n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Encapsulates logic of meter registry setup and handling.\n+ * Generally, the web application publishes metrics to Prometheus and the Indexer to StatsD.\n+ */\n public final class Metrics {\n \n-    private static final PrometheusMeterRegistry registry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT);\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Metrics.class);\n+\n+    private static final StatsdConfig statsdConfig = new StatsdConfig() {\n+        @Override\n+        public String get(String k) {\n+            return null;\n+        }\n+\n+        @Override\n+        public StatsdFlavor flavor() {\n+            String flavor = RuntimeEnvironment.getInstance().getStatsdConfig().getFlavor().toLowerCase();\n+            switch (flavor) {\n+                case \"etsy\":\n+                    return StatsdFlavor.ETSY;\n+                case \"datadog\":\n+                    return StatsdFlavor.DATADOG;\n+                case \"sysdig\":\n+                    return StatsdFlavor.SYSDIG;\n+                case \"telegraf\":\n+                    return StatsdFlavor.TELEGRAF;\n+            }\n+\n+            return null;\n+        }\n+\n+        @Override\n+        public int port() {\n+            return RuntimeEnvironment.getInstance().getStatsdConfig().getPort();\n+        }\n+\n+        @Override\n+        public String host() {\n+            return RuntimeEnvironment.getInstance().getStatsdConfig().getHost();\n+        }\n+\n+        @Override\n+        public boolean buffered() {\n+            return true;\n+        }\n+    };\n+\n+    private static PrometheusMeterRegistry prometheusRegistry;\n+    private static StatsdMeterRegistry statsdRegistry;\n \n     static {\n+        MeterRegistry registry;\n+\n+        if (RuntimeEnvironment.getInstance().getStatsdConfig().isEnabled()) {\n+            LOGGER.log(Level.INFO, \"configuring StatsdRegistry\");\n+\n+            statsdRegistry = new StatsdMeterRegistry(statsdConfig, Clock.SYSTEM);\n+\n+            // Add tag for per-project reindex.\n+            ArrayList<String> subFiles = RuntimeEnvironment.getInstance().getSubFiles();\n+            if (subFiles.size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e518f99aa52b9c7664c9ad2bb87afe55cd48344"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTM2ODgzOnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/Metrics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMzo0NDo0NFrOHhTwxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDoxMTo0M1rOHhVFbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY4ODgzNg==", "bodyText": "You can create the joined String directly with Collectors.joining()", "url": "https://github.com/oracle/opengrok/pull/3279#discussion_r504688836", "createdAt": "2020-10-14T13:44:44Z", "author": {"login": "ahornace"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/Metrics.java", "diffHunk": "@@ -22,19 +22,105 @@\n  */\n package org.opengrok.indexer;\n \n+import io.micrometer.core.instrument.Clock;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Tag;\n import io.micrometer.core.instrument.binder.jvm.ClassLoaderMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmGcMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmThreadMetrics;\n import io.micrometer.core.instrument.binder.system.ProcessorMetrics;\n import io.micrometer.prometheus.PrometheusConfig;\n import io.micrometer.prometheus.PrometheusMeterRegistry;\n+import io.micrometer.statsd.StatsdConfig;\n+import io.micrometer.statsd.StatsdMeterRegistry;\n+import io.micrometer.statsd.StatsdFlavor;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.index.Indexer;\n+import org.opengrok.indexer.logger.LoggerFactory;\n \n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Encapsulates logic of meter registry setup and handling.\n+ * Generally, the web application publishes metrics to Prometheus and the Indexer to StatsD.\n+ */\n public final class Metrics {\n \n-    private static final PrometheusMeterRegistry registry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT);\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Metrics.class);\n+\n+    private static final StatsdConfig statsdConfig = new StatsdConfig() {\n+        @Override\n+        public String get(String k) {\n+            return null;\n+        }\n+\n+        @Override\n+        public StatsdFlavor flavor() {\n+            String flavor = RuntimeEnvironment.getInstance().getStatsdConfig().getFlavor().toLowerCase();\n+            switch (flavor) {\n+                case \"etsy\":\n+                    return StatsdFlavor.ETSY;\n+                case \"datadog\":\n+                    return StatsdFlavor.DATADOG;\n+                case \"sysdig\":\n+                    return StatsdFlavor.SYSDIG;\n+                case \"telegraf\":\n+                    return StatsdFlavor.TELEGRAF;\n+            }\n+\n+            return null;\n+        }\n+\n+        @Override\n+        public int port() {\n+            return RuntimeEnvironment.getInstance().getStatsdConfig().getPort();\n+        }\n+\n+        @Override\n+        public String host() {\n+            return RuntimeEnvironment.getInstance().getStatsdConfig().getHost();\n+        }\n+\n+        @Override\n+        public boolean buffered() {\n+            return true;\n+        }\n+    };\n+\n+    private static PrometheusMeterRegistry prometheusRegistry;\n+    private static StatsdMeterRegistry statsdRegistry;\n \n     static {\n+        MeterRegistry registry;\n+\n+        if (RuntimeEnvironment.getInstance().getStatsdConfig().isEnabled()) {\n+            LOGGER.log(Level.INFO, \"configuring StatsdRegistry\");\n+\n+            statsdRegistry = new StatsdMeterRegistry(statsdConfig, Clock.SYSTEM);\n+\n+            // Add tag for per-project reindex.\n+            ArrayList<String> subFiles = RuntimeEnvironment.getInstance().getSubFiles();\n+            if (subFiles.size() > 0) {\n+                List<String> sList = subFiles.stream().\n+                        map(s -> s.startsWith(Indexer.PATH_SEPARATOR_STRING) ? s.substring(1) : s).\n+                        collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e518f99aa52b9c7664c9ad2bb87afe55cd48344"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcxMDUwOQ==", "bodyText": "fixed, thanks", "url": "https://github.com/oracle/opengrok/pull/3279#discussion_r504710509", "createdAt": "2020-10-14T14:11:43Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/Metrics.java", "diffHunk": "@@ -22,19 +22,105 @@\n  */\n package org.opengrok.indexer;\n \n+import io.micrometer.core.instrument.Clock;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Tag;\n import io.micrometer.core.instrument.binder.jvm.ClassLoaderMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmGcMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmThreadMetrics;\n import io.micrometer.core.instrument.binder.system.ProcessorMetrics;\n import io.micrometer.prometheus.PrometheusConfig;\n import io.micrometer.prometheus.PrometheusMeterRegistry;\n+import io.micrometer.statsd.StatsdConfig;\n+import io.micrometer.statsd.StatsdMeterRegistry;\n+import io.micrometer.statsd.StatsdFlavor;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.index.Indexer;\n+import org.opengrok.indexer.logger.LoggerFactory;\n \n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Encapsulates logic of meter registry setup and handling.\n+ * Generally, the web application publishes metrics to Prometheus and the Indexer to StatsD.\n+ */\n public final class Metrics {\n \n-    private static final PrometheusMeterRegistry registry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT);\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Metrics.class);\n+\n+    private static final StatsdConfig statsdConfig = new StatsdConfig() {\n+        @Override\n+        public String get(String k) {\n+            return null;\n+        }\n+\n+        @Override\n+        public StatsdFlavor flavor() {\n+            String flavor = RuntimeEnvironment.getInstance().getStatsdConfig().getFlavor().toLowerCase();\n+            switch (flavor) {\n+                case \"etsy\":\n+                    return StatsdFlavor.ETSY;\n+                case \"datadog\":\n+                    return StatsdFlavor.DATADOG;\n+                case \"sysdig\":\n+                    return StatsdFlavor.SYSDIG;\n+                case \"telegraf\":\n+                    return StatsdFlavor.TELEGRAF;\n+            }\n+\n+            return null;\n+        }\n+\n+        @Override\n+        public int port() {\n+            return RuntimeEnvironment.getInstance().getStatsdConfig().getPort();\n+        }\n+\n+        @Override\n+        public String host() {\n+            return RuntimeEnvironment.getInstance().getStatsdConfig().getHost();\n+        }\n+\n+        @Override\n+        public boolean buffered() {\n+            return true;\n+        }\n+    };\n+\n+    private static PrometheusMeterRegistry prometheusRegistry;\n+    private static StatsdMeterRegistry statsdRegistry;\n \n     static {\n+        MeterRegistry registry;\n+\n+        if (RuntimeEnvironment.getInstance().getStatsdConfig().isEnabled()) {\n+            LOGGER.log(Level.INFO, \"configuring StatsdRegistry\");\n+\n+            statsdRegistry = new StatsdMeterRegistry(statsdConfig, Clock.SYSTEM);\n+\n+            // Add tag for per-project reindex.\n+            ArrayList<String> subFiles = RuntimeEnvironment.getInstance().getSubFiles();\n+            if (subFiles.size() > 0) {\n+                List<String> sList = subFiles.stream().\n+                        map(s -> s.startsWith(Indexer.PATH_SEPARATOR_STRING) ? s.substring(1) : s).\n+                        collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY4ODgzNg=="}, "originalCommit": {"oid": "4e518f99aa52b9c7664c9ad2bb87afe55cd48344"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTM4MTY5OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/Metrics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMzo0NjoyM1rOHhT4-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDowNDowMVrOHhUuLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY5MDkzNw==", "bodyText": "Why not use RuntimeEnvironment.getInstance().isIndexer() here as well?", "url": "https://github.com/oracle/opengrok/pull/3279#discussion_r504690937", "createdAt": "2020-10-14T13:46:23Z", "author": {"login": "ahornace"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/Metrics.java", "diffHunk": "@@ -22,19 +22,105 @@\n  */\n package org.opengrok.indexer;\n \n+import io.micrometer.core.instrument.Clock;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Tag;\n import io.micrometer.core.instrument.binder.jvm.ClassLoaderMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmGcMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmThreadMetrics;\n import io.micrometer.core.instrument.binder.system.ProcessorMetrics;\n import io.micrometer.prometheus.PrometheusConfig;\n import io.micrometer.prometheus.PrometheusMeterRegistry;\n+import io.micrometer.statsd.StatsdConfig;\n+import io.micrometer.statsd.StatsdMeterRegistry;\n+import io.micrometer.statsd.StatsdFlavor;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.index.Indexer;\n+import org.opengrok.indexer.logger.LoggerFactory;\n \n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Encapsulates logic of meter registry setup and handling.\n+ * Generally, the web application publishes metrics to Prometheus and the Indexer to StatsD.\n+ */\n public final class Metrics {\n \n-    private static final PrometheusMeterRegistry registry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT);\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Metrics.class);\n+\n+    private static final StatsdConfig statsdConfig = new StatsdConfig() {\n+        @Override\n+        public String get(String k) {\n+            return null;\n+        }\n+\n+        @Override\n+        public StatsdFlavor flavor() {\n+            String flavor = RuntimeEnvironment.getInstance().getStatsdConfig().getFlavor().toLowerCase();\n+            switch (flavor) {\n+                case \"etsy\":\n+                    return StatsdFlavor.ETSY;\n+                case \"datadog\":\n+                    return StatsdFlavor.DATADOG;\n+                case \"sysdig\":\n+                    return StatsdFlavor.SYSDIG;\n+                case \"telegraf\":\n+                    return StatsdFlavor.TELEGRAF;\n+            }\n+\n+            return null;\n+        }\n+\n+        @Override\n+        public int port() {\n+            return RuntimeEnvironment.getInstance().getStatsdConfig().getPort();\n+        }\n+\n+        @Override\n+        public String host() {\n+            return RuntimeEnvironment.getInstance().getStatsdConfig().getHost();\n+        }\n+\n+        @Override\n+        public boolean buffered() {\n+            return true;\n+        }\n+    };\n+\n+    private static PrometheusMeterRegistry prometheusRegistry;\n+    private static StatsdMeterRegistry statsdRegistry;\n \n     static {\n+        MeterRegistry registry;\n+\n+        if (RuntimeEnvironment.getInstance().getStatsdConfig().isEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e518f99aa52b9c7664c9ad2bb87afe55cd48344"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcwNDU1OA==", "bodyText": "because statsd does not have to be configured. I don't want statsd export to be enabled by default.", "url": "https://github.com/oracle/opengrok/pull/3279#discussion_r504704558", "createdAt": "2020-10-14T14:04:01Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/Metrics.java", "diffHunk": "@@ -22,19 +22,105 @@\n  */\n package org.opengrok.indexer;\n \n+import io.micrometer.core.instrument.Clock;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Tag;\n import io.micrometer.core.instrument.binder.jvm.ClassLoaderMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmGcMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmThreadMetrics;\n import io.micrometer.core.instrument.binder.system.ProcessorMetrics;\n import io.micrometer.prometheus.PrometheusConfig;\n import io.micrometer.prometheus.PrometheusMeterRegistry;\n+import io.micrometer.statsd.StatsdConfig;\n+import io.micrometer.statsd.StatsdMeterRegistry;\n+import io.micrometer.statsd.StatsdFlavor;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.index.Indexer;\n+import org.opengrok.indexer.logger.LoggerFactory;\n \n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Encapsulates logic of meter registry setup and handling.\n+ * Generally, the web application publishes metrics to Prometheus and the Indexer to StatsD.\n+ */\n public final class Metrics {\n \n-    private static final PrometheusMeterRegistry registry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT);\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Metrics.class);\n+\n+    private static final StatsdConfig statsdConfig = new StatsdConfig() {\n+        @Override\n+        public String get(String k) {\n+            return null;\n+        }\n+\n+        @Override\n+        public StatsdFlavor flavor() {\n+            String flavor = RuntimeEnvironment.getInstance().getStatsdConfig().getFlavor().toLowerCase();\n+            switch (flavor) {\n+                case \"etsy\":\n+                    return StatsdFlavor.ETSY;\n+                case \"datadog\":\n+                    return StatsdFlavor.DATADOG;\n+                case \"sysdig\":\n+                    return StatsdFlavor.SYSDIG;\n+                case \"telegraf\":\n+                    return StatsdFlavor.TELEGRAF;\n+            }\n+\n+            return null;\n+        }\n+\n+        @Override\n+        public int port() {\n+            return RuntimeEnvironment.getInstance().getStatsdConfig().getPort();\n+        }\n+\n+        @Override\n+        public String host() {\n+            return RuntimeEnvironment.getInstance().getStatsdConfig().getHost();\n+        }\n+\n+        @Override\n+        public boolean buffered() {\n+            return true;\n+        }\n+    };\n+\n+    private static PrometheusMeterRegistry prometheusRegistry;\n+    private static StatsdMeterRegistry statsdRegistry;\n \n     static {\n+        MeterRegistry registry;\n+\n+        if (RuntimeEnvironment.getInstance().getStatsdConfig().isEnabled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY5MDkzNw=="}, "originalCommit": {"oid": "4e518f99aa52b9c7664c9ad2bb87afe55cd48344"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTM4NDEwOnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/Metrics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMzo0Njo1MlrOHhT6fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDowODo1NFrOHhU80w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY5MTMyNw==", "bodyText": "Why use Metrics. prefix if the methods are in the same class?", "url": "https://github.com/oracle/opengrok/pull/3279#discussion_r504691327", "createdAt": "2020-10-14T13:46:52Z", "author": {"login": "ahornace"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/Metrics.java", "diffHunk": "@@ -45,8 +131,23 @@\n     private Metrics() {\n     }\n \n-    public static PrometheusMeterRegistry getRegistry() {\n-        return registry;\n+    public static PrometheusMeterRegistry getPrometheusRegistry() {\n+        return prometheusRegistry;\n+    }\n+\n+    private static StatsdMeterRegistry getStatsdRegistry() {\n+        return statsdRegistry;\n     }\n \n+    /**\n+     * Get registry based on running context.\n+     * @return MeterRegistry instance\n+     */\n+    public static MeterRegistry getRegistry() {\n+        if (RuntimeEnvironment.getInstance().isIndexer()) {\n+            return Metrics.getStatsdRegistry();\n+        } else {\n+            return Metrics.getPrometheusRegistry();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e518f99aa52b9c7664c9ad2bb87afe55cd48344"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcwODMwNw==", "bodyText": "fixed", "url": "https://github.com/oracle/opengrok/pull/3279#discussion_r504708307", "createdAt": "2020-10-14T14:08:54Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/Metrics.java", "diffHunk": "@@ -45,8 +131,23 @@\n     private Metrics() {\n     }\n \n-    public static PrometheusMeterRegistry getRegistry() {\n-        return registry;\n+    public static PrometheusMeterRegistry getPrometheusRegistry() {\n+        return prometheusRegistry;\n+    }\n+\n+    private static StatsdMeterRegistry getStatsdRegistry() {\n+        return statsdRegistry;\n     }\n \n+    /**\n+     * Get registry based on running context.\n+     * @return MeterRegistry instance\n+     */\n+    public static MeterRegistry getRegistry() {\n+        if (RuntimeEnvironment.getInstance().isIndexer()) {\n+            return Metrics.getStatsdRegistry();\n+        } else {\n+            return Metrics.getPrometheusRegistry();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY5MTMyNw=="}, "originalCommit": {"oid": "4e518f99aa52b9c7664c9ad2bb87afe55cd48344"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTM5MTE3OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/StatsdConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMzo0ODoyM1rOHhT-_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDoxNjoxNlrOHhVTag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY5MjQ3OQ==", "bodyText": "This can cause NPE if host or flavor will be null or it should not happen?", "url": "https://github.com/oracle/opengrok/pull/3279#discussion_r504692479", "createdAt": "2020-10-14T13:48:23Z", "author": {"login": "ahornace"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/StatsdConfig.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.indexer.configuration;\n+\n+/**\n+ * Configuration for Statsd metrics emitted by the Indexer via {@link org.opengrok.indexer.util.Statistics}.\n+ */\n+public class StatsdConfig {\n+    private int port;\n+    private String host;\n+    private boolean enabled;\n+    private String flavor;\n+\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    public void setHost(String host) {\n+        this.host = host;\n+    }\n+\n+    public int getPort() {\n+        return port;\n+    }\n+\n+    public void setPort(int port) {\n+        this.port = port;\n+    }\n+\n+    public String getFlavor() {\n+        return flavor;\n+    }\n+\n+    public void setFlavor(String flavor) {\n+        this.flavor = flavor;\n+    }\n+\n+    public boolean isEnabled() {\n+        return port != 0 && !host.isEmpty() && !flavor.isEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e518f99aa52b9c7664c9ad2bb87afe55cd48344"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcxNDA5MA==", "bodyText": "happens with no or incomplete StatsdConfig, fixed.", "url": "https://github.com/oracle/opengrok/pull/3279#discussion_r504714090", "createdAt": "2020-10-14T14:16:16Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/StatsdConfig.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.indexer.configuration;\n+\n+/**\n+ * Configuration for Statsd metrics emitted by the Indexer via {@link org.opengrok.indexer.util.Statistics}.\n+ */\n+public class StatsdConfig {\n+    private int port;\n+    private String host;\n+    private boolean enabled;\n+    private String flavor;\n+\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    public void setHost(String host) {\n+        this.host = host;\n+    }\n+\n+    public int getPort() {\n+        return port;\n+    }\n+\n+    public void setPort(int port) {\n+        this.port = port;\n+    }\n+\n+    public String getFlavor() {\n+        return flavor;\n+    }\n+\n+    public void setFlavor(String flavor) {\n+        this.flavor = flavor;\n+    }\n+\n+    public boolean isEnabled() {\n+        return port != 0 && !host.isEmpty() && !flavor.isEmpty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY5MjQ3OQ=="}, "originalCommit": {"oid": "4e518f99aa52b9c7664c9ad2bb87afe55cd48344"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTQ5NjcyOnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/Metrics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDoxMDowMlrOHhVAOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDoxODo0OVrOHhVbXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcwOTE3Nw==", "bodyText": "Let's say that statsd is disabled. What is the point of creating Prometheus registry if it cannot be accessed?", "url": "https://github.com/oracle/opengrok/pull/3279#discussion_r504709177", "createdAt": "2020-10-14T14:10:02Z", "author": {"login": "ahornace"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/Metrics.java", "diffHunk": "@@ -22,19 +22,105 @@\n  */\n package org.opengrok.indexer;\n \n+import io.micrometer.core.instrument.Clock;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Tag;\n import io.micrometer.core.instrument.binder.jvm.ClassLoaderMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmGcMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmThreadMetrics;\n import io.micrometer.core.instrument.binder.system.ProcessorMetrics;\n import io.micrometer.prometheus.PrometheusConfig;\n import io.micrometer.prometheus.PrometheusMeterRegistry;\n+import io.micrometer.statsd.StatsdConfig;\n+import io.micrometer.statsd.StatsdMeterRegistry;\n+import io.micrometer.statsd.StatsdFlavor;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.index.Indexer;\n+import org.opengrok.indexer.logger.LoggerFactory;\n \n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Encapsulates logic of meter registry setup and handling.\n+ * Generally, the web application publishes metrics to Prometheus and the Indexer to StatsD.\n+ */\n public final class Metrics {\n \n-    private static final PrometheusMeterRegistry registry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT);\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Metrics.class);\n+\n+    private static final StatsdConfig statsdConfig = new StatsdConfig() {\n+        @Override\n+        public String get(String k) {\n+            return null;\n+        }\n+\n+        @Override\n+        public StatsdFlavor flavor() {\n+            String flavor = RuntimeEnvironment.getInstance().getStatsdConfig().getFlavor().toLowerCase();\n+            switch (flavor) {\n+                case \"etsy\":\n+                    return StatsdFlavor.ETSY;\n+                case \"datadog\":\n+                    return StatsdFlavor.DATADOG;\n+                case \"sysdig\":\n+                    return StatsdFlavor.SYSDIG;\n+                case \"telegraf\":\n+                    return StatsdFlavor.TELEGRAF;\n+            }\n+\n+            return null;\n+        }\n+\n+        @Override\n+        public int port() {\n+            return RuntimeEnvironment.getInstance().getStatsdConfig().getPort();\n+        }\n+\n+        @Override\n+        public String host() {\n+            return RuntimeEnvironment.getInstance().getStatsdConfig().getHost();\n+        }\n+\n+        @Override\n+        public boolean buffered() {\n+            return true;\n+        }\n+    };\n+\n+    private static PrometheusMeterRegistry prometheusRegistry;\n+    private static StatsdMeterRegistry statsdRegistry;\n \n     static {\n+        MeterRegistry registry;\n+\n+        if (RuntimeEnvironment.getInstance().getStatsdConfig().isEnabled()) {\n+            LOGGER.log(Level.INFO, \"configuring StatsdRegistry\");\n+\n+            statsdRegistry = new StatsdMeterRegistry(statsdConfig, Clock.SYSTEM);\n+\n+            // Add tag for per-project reindex.\n+            ArrayList<String> subFiles = RuntimeEnvironment.getInstance().getSubFiles();\n+            if (subFiles.size() > 0) {\n+                List<String> sList = subFiles.stream().\n+                        map(s -> s.startsWith(Indexer.PATH_SEPARATOR_STRING) ? s.substring(1) : s).\n+                        collect(Collectors.toList());\n+                statsdRegistry.config().commonTags(Collections.singleton(Tag.of(\"projects\",\n+                        String.join(\",\", sList))));\n+            }\n+\n+            registry = statsdRegistry;\n+        } else {\n+            LOGGER.log(Level.INFO, \"configuring PrometheusRegistry\");\n+            prometheusRegistry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e518f99aa52b9c7664c9ad2bb87afe55cd48344"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcxNjEyNQ==", "bodyText": "right, fixed.", "url": "https://github.com/oracle/opengrok/pull/3279#discussion_r504716125", "createdAt": "2020-10-14T14:18:49Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/Metrics.java", "diffHunk": "@@ -22,19 +22,105 @@\n  */\n package org.opengrok.indexer;\n \n+import io.micrometer.core.instrument.Clock;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Tag;\n import io.micrometer.core.instrument.binder.jvm.ClassLoaderMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmGcMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmThreadMetrics;\n import io.micrometer.core.instrument.binder.system.ProcessorMetrics;\n import io.micrometer.prometheus.PrometheusConfig;\n import io.micrometer.prometheus.PrometheusMeterRegistry;\n+import io.micrometer.statsd.StatsdConfig;\n+import io.micrometer.statsd.StatsdMeterRegistry;\n+import io.micrometer.statsd.StatsdFlavor;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.index.Indexer;\n+import org.opengrok.indexer.logger.LoggerFactory;\n \n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Encapsulates logic of meter registry setup and handling.\n+ * Generally, the web application publishes metrics to Prometheus and the Indexer to StatsD.\n+ */\n public final class Metrics {\n \n-    private static final PrometheusMeterRegistry registry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT);\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Metrics.class);\n+\n+    private static final StatsdConfig statsdConfig = new StatsdConfig() {\n+        @Override\n+        public String get(String k) {\n+            return null;\n+        }\n+\n+        @Override\n+        public StatsdFlavor flavor() {\n+            String flavor = RuntimeEnvironment.getInstance().getStatsdConfig().getFlavor().toLowerCase();\n+            switch (flavor) {\n+                case \"etsy\":\n+                    return StatsdFlavor.ETSY;\n+                case \"datadog\":\n+                    return StatsdFlavor.DATADOG;\n+                case \"sysdig\":\n+                    return StatsdFlavor.SYSDIG;\n+                case \"telegraf\":\n+                    return StatsdFlavor.TELEGRAF;\n+            }\n+\n+            return null;\n+        }\n+\n+        @Override\n+        public int port() {\n+            return RuntimeEnvironment.getInstance().getStatsdConfig().getPort();\n+        }\n+\n+        @Override\n+        public String host() {\n+            return RuntimeEnvironment.getInstance().getStatsdConfig().getHost();\n+        }\n+\n+        @Override\n+        public boolean buffered() {\n+            return true;\n+        }\n+    };\n+\n+    private static PrometheusMeterRegistry prometheusRegistry;\n+    private static StatsdMeterRegistry statsdRegistry;\n \n     static {\n+        MeterRegistry registry;\n+\n+        if (RuntimeEnvironment.getInstance().getStatsdConfig().isEnabled()) {\n+            LOGGER.log(Level.INFO, \"configuring StatsdRegistry\");\n+\n+            statsdRegistry = new StatsdMeterRegistry(statsdConfig, Clock.SYSTEM);\n+\n+            // Add tag for per-project reindex.\n+            ArrayList<String> subFiles = RuntimeEnvironment.getInstance().getSubFiles();\n+            if (subFiles.size() > 0) {\n+                List<String> sList = subFiles.stream().\n+                        map(s -> s.startsWith(Indexer.PATH_SEPARATOR_STRING) ? s.substring(1) : s).\n+                        collect(Collectors.toList());\n+                statsdRegistry.config().commonTags(Collections.singleton(Tag.of(\"projects\",\n+                        String.join(\",\", sList))));\n+            }\n+\n+            registry = statsdRegistry;\n+        } else {\n+            LOGGER.log(Level.INFO, \"configuring PrometheusRegistry\");\n+            prometheusRegistry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcwOTE3Nw=="}, "originalCommit": {"oid": "4e518f99aa52b9c7664c9ad2bb87afe55cd48344"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTUyMjUwOnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/Metrics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDoxNToxOFrOHhVQjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNTozMjowMlrOHhY-0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcxMzM1OQ==", "bodyText": "This looks kind of iffy to me. We are filling subFiles in main method of Indexer. We are now basically counting on the fact that Metrics class won't be loaded by classloader before the list is filled.", "url": "https://github.com/oracle/opengrok/pull/3279#discussion_r504713359", "createdAt": "2020-10-14T14:15:18Z", "author": {"login": "ahornace"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/Metrics.java", "diffHunk": "@@ -22,19 +22,105 @@\n  */\n package org.opengrok.indexer;\n \n+import io.micrometer.core.instrument.Clock;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Tag;\n import io.micrometer.core.instrument.binder.jvm.ClassLoaderMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmGcMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmThreadMetrics;\n import io.micrometer.core.instrument.binder.system.ProcessorMetrics;\n import io.micrometer.prometheus.PrometheusConfig;\n import io.micrometer.prometheus.PrometheusMeterRegistry;\n+import io.micrometer.statsd.StatsdConfig;\n+import io.micrometer.statsd.StatsdMeterRegistry;\n+import io.micrometer.statsd.StatsdFlavor;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.index.Indexer;\n+import org.opengrok.indexer.logger.LoggerFactory;\n \n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Encapsulates logic of meter registry setup and handling.\n+ * Generally, the web application publishes metrics to Prometheus and the Indexer to StatsD.\n+ */\n public final class Metrics {\n \n-    private static final PrometheusMeterRegistry registry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT);\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Metrics.class);\n+\n+    private static final StatsdConfig statsdConfig = new StatsdConfig() {\n+        @Override\n+        public String get(String k) {\n+            return null;\n+        }\n+\n+        @Override\n+        public StatsdFlavor flavor() {\n+            String flavor = RuntimeEnvironment.getInstance().getStatsdConfig().getFlavor().toLowerCase();\n+            switch (flavor) {\n+                case \"etsy\":\n+                    return StatsdFlavor.ETSY;\n+                case \"datadog\":\n+                    return StatsdFlavor.DATADOG;\n+                case \"sysdig\":\n+                    return StatsdFlavor.SYSDIG;\n+                case \"telegraf\":\n+                    return StatsdFlavor.TELEGRAF;\n+            }\n+\n+            return null;\n+        }\n+\n+        @Override\n+        public int port() {\n+            return RuntimeEnvironment.getInstance().getStatsdConfig().getPort();\n+        }\n+\n+        @Override\n+        public String host() {\n+            return RuntimeEnvironment.getInstance().getStatsdConfig().getHost();\n+        }\n+\n+        @Override\n+        public boolean buffered() {\n+            return true;\n+        }\n+    };\n+\n+    private static PrometheusMeterRegistry prometheusRegistry;\n+    private static StatsdMeterRegistry statsdRegistry;\n \n     static {\n+        MeterRegistry registry;\n+\n+        if (RuntimeEnvironment.getInstance().getStatsdConfig().isEnabled()) {\n+            LOGGER.log(Level.INFO, \"configuring StatsdRegistry\");\n+\n+            statsdRegistry = new StatsdMeterRegistry(statsdConfig, Clock.SYSTEM);\n+\n+            // Add tag for per-project reindex.\n+            ArrayList<String> subFiles = RuntimeEnvironment.getInstance().getSubFiles();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e518f99aa52b9c7664c9ad2bb87afe55cd48344"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc3NDM1NQ==", "bodyText": "good catch. added a callback to main().", "url": "https://github.com/oracle/opengrok/pull/3279#discussion_r504774355", "createdAt": "2020-10-14T15:32:02Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/Metrics.java", "diffHunk": "@@ -22,19 +22,105 @@\n  */\n package org.opengrok.indexer;\n \n+import io.micrometer.core.instrument.Clock;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Tag;\n import io.micrometer.core.instrument.binder.jvm.ClassLoaderMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmGcMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmThreadMetrics;\n import io.micrometer.core.instrument.binder.system.ProcessorMetrics;\n import io.micrometer.prometheus.PrometheusConfig;\n import io.micrometer.prometheus.PrometheusMeterRegistry;\n+import io.micrometer.statsd.StatsdConfig;\n+import io.micrometer.statsd.StatsdMeterRegistry;\n+import io.micrometer.statsd.StatsdFlavor;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.index.Indexer;\n+import org.opengrok.indexer.logger.LoggerFactory;\n \n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Encapsulates logic of meter registry setup and handling.\n+ * Generally, the web application publishes metrics to Prometheus and the Indexer to StatsD.\n+ */\n public final class Metrics {\n \n-    private static final PrometheusMeterRegistry registry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT);\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Metrics.class);\n+\n+    private static final StatsdConfig statsdConfig = new StatsdConfig() {\n+        @Override\n+        public String get(String k) {\n+            return null;\n+        }\n+\n+        @Override\n+        public StatsdFlavor flavor() {\n+            String flavor = RuntimeEnvironment.getInstance().getStatsdConfig().getFlavor().toLowerCase();\n+            switch (flavor) {\n+                case \"etsy\":\n+                    return StatsdFlavor.ETSY;\n+                case \"datadog\":\n+                    return StatsdFlavor.DATADOG;\n+                case \"sysdig\":\n+                    return StatsdFlavor.SYSDIG;\n+                case \"telegraf\":\n+                    return StatsdFlavor.TELEGRAF;\n+            }\n+\n+            return null;\n+        }\n+\n+        @Override\n+        public int port() {\n+            return RuntimeEnvironment.getInstance().getStatsdConfig().getPort();\n+        }\n+\n+        @Override\n+        public String host() {\n+            return RuntimeEnvironment.getInstance().getStatsdConfig().getHost();\n+        }\n+\n+        @Override\n+        public boolean buffered() {\n+            return true;\n+        }\n+    };\n+\n+    private static PrometheusMeterRegistry prometheusRegistry;\n+    private static StatsdMeterRegistry statsdRegistry;\n \n     static {\n+        MeterRegistry registry;\n+\n+        if (RuntimeEnvironment.getInstance().getStatsdConfig().isEnabled()) {\n+            LOGGER.log(Level.INFO, \"configuring StatsdRegistry\");\n+\n+            statsdRegistry = new StatsdMeterRegistry(statsdConfig, Clock.SYSTEM);\n+\n+            // Add tag for per-project reindex.\n+            ArrayList<String> subFiles = RuntimeEnvironment.getInstance().getSubFiles();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcxMzM1OQ=="}, "originalCommit": {"oid": "4e518f99aa52b9c7664c9ad2bb87afe55cd48344"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4989, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}