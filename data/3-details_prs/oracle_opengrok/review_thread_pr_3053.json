{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MzcxNjE5", "number": 3053, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwODozNDoyNlrODqI3Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwODo0MDo1NlrODqI4pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NTExOTY2OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/Context.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwODozNDoyNlrOF5uDIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMTowMDo1OFrOF8sW1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA2NzYxNg==", "bodyText": "Why 0?\nAbove looked like optimization so toArray won't have to allocate new Array, since we know how many elements we will have.\nI think if 0 is correct, then in case of above you could just directly call .toArray() with no params", "url": "https://github.com/oracle/opengrok/pull/3053#discussion_r396067616", "createdAt": "2020-03-22T08:34:26Z", "author": {"login": "tarzanek"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/Context.java", "diffHunk": "@@ -212,7 +210,7 @@ public boolean getContext2(RuntimeEnvironment env, IndexSearcher searcher,\n \n         try {\n             List<String> fieldList = qbuilder.getContextFields();\n-            String[] fields = fieldList.toArray(new String[fieldList.size()]);\n+            String[] fields = fieldList.toArray(new String[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a274f5c4a650493a208d645736eefbf12de14a3d"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA5NTgwMQ==", "bodyText": "IntelliJ recommends 0", "url": "https://github.com/oracle/opengrok/pull/3053#discussion_r396095801", "createdAt": "2020-03-22T13:48:56Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/Context.java", "diffHunk": "@@ -212,7 +210,7 @@ public boolean getContext2(RuntimeEnvironment env, IndexSearcher searcher,\n \n         try {\n             List<String> fieldList = qbuilder.getContextFields();\n-            String[] fields = fieldList.toArray(new String[fieldList.size()]);\n+            String[] fields = fieldList.toArray(new String[0]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA2NzYxNg=="}, "originalCommit": {"oid": "a274f5c4a650493a208d645736eefbf12de14a3d"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEwNDQ1MQ==", "bodyText": "I remember @ahornace telling me that there is no optimization on using size and 0.", "url": "https://github.com/oracle/opengrok/pull/3053#discussion_r396104451", "createdAt": "2020-03-22T15:12:06Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/Context.java", "diffHunk": "@@ -212,7 +210,7 @@ public boolean getContext2(RuntimeEnvironment env, IndexSearcher searcher,\n \n         try {\n             List<String> fieldList = qbuilder.getContextFields();\n-            String[] fields = fieldList.toArray(new String[fieldList.size()]);\n+            String[] fields = fieldList.toArray(new String[0]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA2NzYxNg=="}, "originalCommit": {"oid": "a274f5c4a650493a208d645736eefbf12de14a3d"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjExMTE0MA==", "bodyText": "Taken directly from idea:\nThere are two styles to convert a collection to an array: either using a pre-sized array (like c.toArray(new String[c.size()])) or using an empty array (like c.toArray(new String[0]).\nIn older Java versions using pre-sized array was recommended, as the reflection call which is necessary to create an array of proper size was quite slow. However since late updates of OpenJDK 6 this call was intrinsified, making the performance of the empty array version the same and sometimes even better, compared to the pre-sized version. Also passing pre-sized array is dangerous for a concurrent or synchronized collection as a data race is possible between the size and toArray call which may result in extra nulls at the end of the array, if the collection was concurrently shrunk during the operation.\nThis inspection allows to follow the uniform style: either using an empty array (which is recommended in modern Java) or using a pre-sized array (which might be faster in older Java versions or non-HotSpot based JVMs).\n\n.toArray(T[] t) is necessary so JVM can create array of proper type because of type erasure", "url": "https://github.com/oracle/opengrok/pull/3053#discussion_r396111140", "createdAt": "2020-03-22T16:12:52Z", "author": {"login": "ahornace"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/Context.java", "diffHunk": "@@ -212,7 +210,7 @@ public boolean getContext2(RuntimeEnvironment env, IndexSearcher searcher,\n \n         try {\n             List<String> fieldList = qbuilder.getContextFields();\n-            String[] fields = fieldList.toArray(new String[fieldList.size()]);\n+            String[] fields = fieldList.toArray(new String[0]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA2NzYxNg=="}, "originalCommit": {"oid": "a274f5c4a650493a208d645736eefbf12de14a3d"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE4NTYyMA==", "bodyText": "ok, so this means javadocs suck, I mean, they are outdated :-)", "url": "https://github.com/oracle/opengrok/pull/3053#discussion_r399185620", "createdAt": "2020-03-27T11:00:58Z", "author": {"login": "tarzanek"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/Context.java", "diffHunk": "@@ -212,7 +210,7 @@ public boolean getContext2(RuntimeEnvironment env, IndexSearcher searcher,\n \n         try {\n             List<String> fieldList = qbuilder.getContextFields();\n-            String[] fields = fieldList.toArray(new String[fieldList.size()]);\n+            String[] fields = fieldList.toArray(new String[0]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA2NzYxNg=="}, "originalCommit": {"oid": "a274f5c4a650493a208d645736eefbf12de14a3d"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NTEyMjUzOnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/util/LineBreaker.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwODozODo1NlrOF5uEgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNzoyNDozMVrOF55PVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA2Nzk3MQ==", "bodyText": "seriously?\ndo we want to go for endless cycles with goto?\nback to Basic? :-D\n(yes, it's easy for me to complain, but this raises eyebrows, so there has to be a better way)\n(the first thing that came to my mind was a jflex lexer, but not sure if we don't have the same problem with line # there too)", "url": "https://github.com/oracle/opengrok/pull/3053#discussion_r396067971", "createdAt": "2020-03-22T08:38:56Z", "author": {"login": "tarzanek"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/util/LineBreaker.java", "diffHunk": "@@ -65,65 +63,52 @@ public void reset(StreamSource src, ReaderWrapper wrapper)\n             throw new IllegalArgumentException(\"`src' is null\");\n         }\n \n-        length = 0;\n-        lineOffsets = null;\n-\n-        try (InputStream in = src.getStream();\n-            Reader rdr = IOUtils.createBOMStrippedReader(in,\n-                StandardCharsets.UTF_8.name())) {\n-            Reader intermediate = null;\n-            if (wrapper != null) {\n-                intermediate = wrapper.get(rdr);\n-            }\n-\n-            try (BufferedReader brdr = new BufferedReader(\n-                    intermediate != null ? intermediate : rdr)) {\n-                reset(brdr);\n-            } finally {\n-                if (intermediate != null) {\n-                    intermediate.close();\n-                }\n-            }\n-        }\n+        SplitterUtil.reset(this::reset, src, wrapper);\n     }\n \n     private void reset(Reader reader) throws IOException {\n+        length = 0;\n+        lineOffsets = null;\n+\n         List<Integer> newOffsets = new ArrayList<>();\n         newOffsets.add(0);\n \n         int c;\n         while ((c = reader.read()) != -1) {\n             ++length;\n-            switch (c) {\n-                case '\\r':\n-                    c = reader.read();\n-                    if (c == -1) {\n-                        newOffsets.add(length);\n-                        break;\n-                    } else {\n+\n+            redo_c:\n+            while (true) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a274f5c4a650493a208d645736eefbf12de14a3d"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA2ODA0MA==", "bodyText": "couldn't resist to ping @kahatlen here as the EOL expert ;-)\n(hey Knuth, how are you these days?)", "url": "https://github.com/oracle/opengrok/pull/3053#discussion_r396068040", "createdAt": "2020-03-22T08:40:00Z", "author": {"login": "tarzanek"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/util/LineBreaker.java", "diffHunk": "@@ -65,65 +63,52 @@ public void reset(StreamSource src, ReaderWrapper wrapper)\n             throw new IllegalArgumentException(\"`src' is null\");\n         }\n \n-        length = 0;\n-        lineOffsets = null;\n-\n-        try (InputStream in = src.getStream();\n-            Reader rdr = IOUtils.createBOMStrippedReader(in,\n-                StandardCharsets.UTF_8.name())) {\n-            Reader intermediate = null;\n-            if (wrapper != null) {\n-                intermediate = wrapper.get(rdr);\n-            }\n-\n-            try (BufferedReader brdr = new BufferedReader(\n-                    intermediate != null ? intermediate : rdr)) {\n-                reset(brdr);\n-            } finally {\n-                if (intermediate != null) {\n-                    intermediate.close();\n-                }\n-            }\n-        }\n+        SplitterUtil.reset(this::reset, src, wrapper);\n     }\n \n     private void reset(Reader reader) throws IOException {\n+        length = 0;\n+        lineOffsets = null;\n+\n         List<Integer> newOffsets = new ArrayList<>();\n         newOffsets.add(0);\n \n         int c;\n         while ((c = reader.read()) != -1) {\n             ++length;\n-            switch (c) {\n-                case '\\r':\n-                    c = reader.read();\n-                    if (c == -1) {\n-                        newOffsets.add(length);\n-                        break;\n-                    } else {\n+\n+            redo_c:\n+            while (true) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA2Nzk3MQ=="}, "originalCommit": {"oid": "a274f5c4a650493a208d645736eefbf12de14a3d"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjExOTY5Mw==", "bodyText": "seriously?\ndo we want to go for endless cycles with goto?\nback to Basic? :-D\n(yes, it's easy for me to complain, but this raises eyebrows, so there has to be a better way)\n\nYou've never hand-written a scanner? \ud83d\ude04 But you're right it's generally not a good idea; imagine code reviewing a hand-written PerlXref. But this is a teeny one, and look at that clear break at the end of the inner.... (Anyway search for while (true) in opengrok....)\n\n(the first thing that came to my mind was a jflex lexer, but not sure if we don't have the same problem with line # there too)\n\nI wrote these classes originally when it was a big pain to add additional .lex files, especially in packages where they weren't already used. But now we can add them anywhere easily (e.g. XrefSourceTransformer). Also I confess if I had used JFlex originally I wouldn't have had the deficient handling that I'm updating here....\nHow about if we decide at some point to update OpenGrok STANDARD_EOL as we probably should do, then I rewrite these to use JFlex? But for now I do think I'm updating and testing sufficiently in this patch.", "url": "https://github.com/oracle/opengrok/pull/3053#discussion_r396119693", "createdAt": "2020-03-22T17:30:08Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/util/LineBreaker.java", "diffHunk": "@@ -65,65 +63,52 @@ public void reset(StreamSource src, ReaderWrapper wrapper)\n             throw new IllegalArgumentException(\"`src' is null\");\n         }\n \n-        length = 0;\n-        lineOffsets = null;\n-\n-        try (InputStream in = src.getStream();\n-            Reader rdr = IOUtils.createBOMStrippedReader(in,\n-                StandardCharsets.UTF_8.name())) {\n-            Reader intermediate = null;\n-            if (wrapper != null) {\n-                intermediate = wrapper.get(rdr);\n-            }\n-\n-            try (BufferedReader brdr = new BufferedReader(\n-                    intermediate != null ? intermediate : rdr)) {\n-                reset(brdr);\n-            } finally {\n-                if (intermediate != null) {\n-                    intermediate.close();\n-                }\n-            }\n-        }\n+        SplitterUtil.reset(this::reset, src, wrapper);\n     }\n \n     private void reset(Reader reader) throws IOException {\n+        length = 0;\n+        lineOffsets = null;\n+\n         List<Integer> newOffsets = new ArrayList<>();\n         newOffsets.add(0);\n \n         int c;\n         while ((c = reader.read()) != -1) {\n             ++length;\n-            switch (c) {\n-                case '\\r':\n-                    c = reader.read();\n-                    if (c == -1) {\n-                        newOffsets.add(length);\n-                        break;\n-                    } else {\n+\n+            redo_c:\n+            while (true) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA2Nzk3MQ=="}, "originalCommit": {"oid": "a274f5c4a650493a208d645736eefbf12de14a3d"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI1MDk2NA==", "bodyText": "OK I spent some time and replaced with a couple of new JFlex scanners", "url": "https://github.com/oracle/opengrok/pull/3053#discussion_r396250964", "createdAt": "2020-03-23T07:24:31Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/util/LineBreaker.java", "diffHunk": "@@ -65,65 +63,52 @@ public void reset(StreamSource src, ReaderWrapper wrapper)\n             throw new IllegalArgumentException(\"`src' is null\");\n         }\n \n-        length = 0;\n-        lineOffsets = null;\n-\n-        try (InputStream in = src.getStream();\n-            Reader rdr = IOUtils.createBOMStrippedReader(in,\n-                StandardCharsets.UTF_8.name())) {\n-            Reader intermediate = null;\n-            if (wrapper != null) {\n-                intermediate = wrapper.get(rdr);\n-            }\n-\n-            try (BufferedReader brdr = new BufferedReader(\n-                    intermediate != null ? intermediate : rdr)) {\n-                reset(brdr);\n-            } finally {\n-                if (intermediate != null) {\n-                    intermediate.close();\n-                }\n-            }\n-        }\n+        SplitterUtil.reset(this::reset, src, wrapper);\n     }\n \n     private void reset(Reader reader) throws IOException {\n+        length = 0;\n+        lineOffsets = null;\n+\n         List<Integer> newOffsets = new ArrayList<>();\n         newOffsets.add(0);\n \n         int c;\n         while ((c = reader.read()) != -1) {\n             ++length;\n-            switch (c) {\n-                case '\\r':\n-                    c = reader.read();\n-                    if (c == -1) {\n-                        newOffsets.add(length);\n-                        break;\n-                    } else {\n+\n+            redo_c:\n+            while (true) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA2Nzk3MQ=="}, "originalCommit": {"oid": "a274f5c4a650493a208d645736eefbf12de14a3d"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NTEyMzU4OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/util/SourceSplitter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwODo0MDo1NlrOF5uFHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwODo0MDo1NlrOF5uFHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA2ODEyNA==", "bodyText": "same as above\n-1 for endless cycles", "url": "https://github.com/oracle/opengrok/pull/3053#discussion_r396068124", "createdAt": "2020-03-22T08:40:56Z", "author": {"login": "tarzanek"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/util/SourceSplitter.java", "diffHunk": "@@ -189,74 +150,49 @@ public void reset(StreamSource src, ReaderWrapper wrapper)\n             throw new IllegalArgumentException(\"`src' is null\");\n         }\n \n+        SplitterUtil.reset(this::reset, src, wrapper);\n+    }\n+\n+    private void reset(Reader reader) throws IOException {\n         length = 0;\n         lines = null;\n         lineOffsets = null;\n \n-        try (InputStream in = src.getStream();\n-            Reader rdr = IOUtils.createBOMStrippedReader(in,\n-                StandardCharsets.UTF_8.name())) {\n-            Reader intermediate = null;\n-            if (wrapper != null) {\n-                intermediate = wrapper.get(rdr);\n-            }\n-\n-            try (BufferedReader brdr = new BufferedReader(\n-                    intermediate != null ? intermediate : rdr)) {\n-                reset(brdr);\n-            } finally {\n-                if (intermediate != null) {\n-                    intermediate.close();\n-                }\n-            }\n-        }\n-    }\n-\n-    private void reset(Reader reader) throws IOException {\n         List<String> slist = new ArrayList<>();\n         StringBuilder bld = new StringBuilder();\n         int c;\n         while ((c = reader.read()) != -1) {\n             ++length;\n-            bld.append((char) c);\n-            switch (c) {\n-                case '\\r':\n-                    c = reader.read();\n-                    if (c == -1) {\n-                        slist.add(bld.toString());\n-                        bld.setLength(0);\n-                        break;\n-                    } else {\n-                        ++length;\n-                        switch (c) {\n-                            case '\\n':\n-                                bld.append((char) c);\n-                                slist.add(bld.toString());\n-                                bld.setLength(0);\n-                                break;\n-                            case '\\r':\n-                                slist.add(bld.toString());\n-                                bld.setLength(0);\n-\n-                                bld.append((char) c);\n-                                slist.add(bld.toString());\n-                                bld.setLength(0);\n-                                break;\n-                            default:\n-                                slist.add(bld.toString());\n-                                bld.setLength(0);\n \n-                                bld.append((char) c);\n-                                break;\n+            redo_c:\n+            while (true) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a274f5c4a650493a208d645736eefbf12de14a3d"}, "originalPosition": 252}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 181, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}