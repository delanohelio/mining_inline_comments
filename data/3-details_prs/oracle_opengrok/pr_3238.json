{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxMjAwMTgy", "number": 3238, "title": "make all OpenGrok cookies use the SameSite attribute", "bodyText": "This change is meant to provide a fix for #3164. This works for cookies produced by the OpenGrok web application as well as for the JSESSIONID cookie. FF developer console no longer complains about the cookies.", "createdAt": "2020-09-22T21:16:58Z", "url": "https://github.com/oracle/opengrok/pull/3238", "merged": true, "mergeCommit": {"oid": "df8ef63f9624f4391fc539de8b539cea696d12f1"}, "closed": true, "closedAt": "2020-09-24T09:05:22Z", "author": {"login": "vladak"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLdn13AH2gAyNDkxMjAwMTgyOjUxMzMwOGRlNTc4MzI4ODI4NTY2NDhmNzY4YTM0YmEyY2YzZmE2ZjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdL8yQcAFqTQ5NTMyODA0OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "513308de57832882856648f768a34ba2cf3fa6f6", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/513308de57832882856648f768a34ba2cf3fa6f6", "committedDate": "2020-09-22T20:01:10Z", "message": "initial ability to manipulate cookies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "977a9d1587d23da06ee876ebba6f7dc1dd3cf049", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/977a9d1587d23da06ee876ebba6f7dc1dd3cf049", "committedDate": "2020-09-22T21:10:41Z", "message": "add PageConfig.addCookie() to set cookies with common set of attributes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0MzA5OTMy", "url": "https://github.com/oracle/opengrok/pull/3238#pullrequestreview-494309932", "createdAt": "2020-09-23T07:06:53Z", "commit": {"oid": "31a722b622be55e86c9fff2b22f49d23f00cc5f8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzowNjo1M1rOHWZSLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzowNjo1M1rOHWZSLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI0NDk3Mg==", "bodyText": "Even though I did not see repeating headers in the response maybe this should just record the cookie in a map and the actual headers will be added in a filter.", "url": "https://github.com/oracle/opengrok/pull/3238#discussion_r493244972", "createdAt": "2020-09-23T07:06:53Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/PageConfig.java", "diffHunk": "@@ -861,6 +862,16 @@ private static void splitByComma(String value, List<String> result) {\n         }\n     }\n \n+    /**\n+     * Add cookie header to the response along with extra attributes.\n+     * @param response servlet response\n+     * @param name name of the cookie\n+     * @param value value of the cookie\n+     */\n+    public static void addCookie(HttpServletResponse response, String name, String value) {\n+        response.addHeader(\"Set-cookie\", name + \"=\" + value + \"; SameSite=Strict; Secure\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31a722b622be55e86c9fff2b22f49d23f00cc5f8"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe3e793f86bdeeeaaaa8a49d3dce676fa956964d", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/fe3e793f86bdeeeaaaa8a49d3dce676fa956964d", "committedDate": "2020-09-23T07:21:33Z", "message": "Revert \"add PageConfig.addCookie() to set cookies with common set of attributes\"\n\nThis reverts commit 977a9d1587d23da06ee876ebba6f7dc1dd3cf049."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "31a722b622be55e86c9fff2b22f49d23f00cc5f8", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/31a722b622be55e86c9fff2b22f49d23f00cc5f8", "committedDate": "2020-09-22T21:08:51Z", "message": "add PageConfig.addCookie() to set cookies with common set of attributes"}, "afterCommit": {"oid": "f46e74e8cc6dd3dfa2510c3425ea62f038c2cfce", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/f46e74e8cc6dd3dfa2510c3425ea62f038c2cfce", "committedDate": "2020-09-23T07:32:42Z", "message": "use the filter after all"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b8fbc6a461d2a6db18b440dcb10e8b13b4a417b", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/6b8fbc6a461d2a6db18b440dcb10e8b13b4a417b", "committedDate": "2020-09-23T07:35:37Z", "message": "use the filter after all\n\nfixes #3164"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f46e74e8cc6dd3dfa2510c3425ea62f038c2cfce", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/f46e74e8cc6dd3dfa2510c3425ea62f038c2cfce", "committedDate": "2020-09-23T07:32:42Z", "message": "use the filter after all"}, "afterCommit": {"oid": "6b8fbc6a461d2a6db18b440dcb10e8b13b4a417b", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/6b8fbc6a461d2a6db18b440dcb10e8b13b4a417b", "committedDate": "2020-09-23T07:35:37Z", "message": "use the filter after all\n\nfixes #3164"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0Nzg0MzUy", "url": "https://github.com/oracle/opengrok/pull/3238#pullrequestreview-494784352", "createdAt": "2020-09-23T15:27:25Z", "commit": {"oid": "6b8fbc6a461d2a6db18b440dcb10e8b13b4a417b"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNToyNzoyNVrOHW0MKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNTo0MTowN1rOHW0zaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY4NTgwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                FilterConfig fc;\n          \n          \n            \n                private FilterConfig fc;", "url": "https://github.com/oracle/opengrok/pull/3238#discussion_r493685800", "createdAt": "2020-09-23T15:27:25Z", "author": {"login": "ahornace"}, "path": "opengrok-web/src/main/java/org/opengrok/web/CookieFilter.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ */\n+package org.opengrok.web;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.HttpHeaders;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Enumeration;\n+\n+/**\n+ * Makes sure that all cookies originating from the web application have the Same-site attribute set.\n+ */\n+public class CookieFilter implements Filter {\n+    FilterConfig fc;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b8fbc6a461d2a6db18b440dcb10e8b13b4a417b"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY4Njg5OA==", "bodyText": "Is this necessary? It indicates that the whole filter will be taken out of service (I assume garbage collected) so this is not needed, right?", "url": "https://github.com/oracle/opengrok/pull/3238#discussion_r493686898", "createdAt": "2020-09-23T15:28:46Z", "author": {"login": "ahornace"}, "path": "opengrok-web/src/main/java/org/opengrok/web/CookieFilter.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ */\n+package org.opengrok.web;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.HttpHeaders;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Enumeration;\n+\n+/**\n+ * Makes sure that all cookies originating from the web application have the Same-site attribute set.\n+ */\n+public class CookieFilter implements Filter {\n+    FilterConfig fc;\n+\n+    @Override\n+    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)\n+            throws IOException, ServletException {\n+\n+        HttpServletResponse response = (HttpServletResponse) res;\n+\n+        chain.doFilter(req, response);\n+\n+        // Change the existing cookies to use the attributes and values from the configuration.\n+        Collection<String> headers = response.getHeaders(HttpHeaders.SET_COOKIE);\n+        boolean firstHeader = true;\n+        for (String header : headers) { // there can be multiple Set-Cookie attributes\n+            if (firstHeader) {\n+                response.setHeader(HttpHeaders.SET_COOKIE, String.format(\"%s; %s\", header, getSuffix(response)));\n+                firstHeader = false;\n+                continue;\n+            }\n+            response.addHeader(HttpHeaders.SET_COOKIE, String.format(\"%s; %s\", header, getSuffix(response)));\n+        }\n+    }\n+\n+    private String getSuffix(HttpServletResponse response) {\n+        StringBuilder sb = new StringBuilder();\n+\n+        for (Enumeration<String> e = fc.getInitParameterNames(); e.hasMoreElements();) {\n+            String attributeName = e.nextElement();\n+            if (sb.length() > 0) {\n+                sb.append(\"; \");\n+            }\n+            sb.append(attributeName);\n+            String attributeValue = fc.getInitParameter(attributeName);\n+            if (!attributeValue.isEmpty()) {\n+                sb.append(\"=\");\n+                sb.append(attributeValue);\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+    @Override\n+    public void init(FilterConfig filterConfig) {\n+        this.fc = filterConfig;\n+    }\n+\n+    @Override\n+    public void destroy() {\n+        this.fc = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b8fbc6a461d2a6db18b440dcb10e8b13b4a417b"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY4Nzg3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private String getSuffix(HttpServletResponse response) {\n          \n          \n            \n                private String getSuffix() {", "url": "https://github.com/oracle/opengrok/pull/3238#discussion_r493687879", "createdAt": "2020-09-23T15:30:03Z", "author": {"login": "ahornace"}, "path": "opengrok-web/src/main/java/org/opengrok/web/CookieFilter.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ */\n+package org.opengrok.web;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.HttpHeaders;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Enumeration;\n+\n+/**\n+ * Makes sure that all cookies originating from the web application have the Same-site attribute set.\n+ */\n+public class CookieFilter implements Filter {\n+    FilterConfig fc;\n+\n+    @Override\n+    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)\n+            throws IOException, ServletException {\n+\n+        HttpServletResponse response = (HttpServletResponse) res;\n+\n+        chain.doFilter(req, response);\n+\n+        // Change the existing cookies to use the attributes and values from the configuration.\n+        Collection<String> headers = response.getHeaders(HttpHeaders.SET_COOKIE);\n+        boolean firstHeader = true;\n+        for (String header : headers) { // there can be multiple Set-Cookie attributes\n+            if (firstHeader) {\n+                response.setHeader(HttpHeaders.SET_COOKIE, String.format(\"%s; %s\", header, getSuffix(response)));\n+                firstHeader = false;\n+                continue;\n+            }\n+            response.addHeader(HttpHeaders.SET_COOKIE, String.format(\"%s; %s\", header, getSuffix(response)));\n+        }\n+    }\n+\n+    private String getSuffix(HttpServletResponse response) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b8fbc6a461d2a6db18b440dcb10e8b13b4a417b"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY5NTg0OQ==", "bodyText": "Would this work?\nStreamSupport.stream(Spliterators.spliteratorUnknownSize(fc.getInitParameterNames(), Spliterator.NONNULL), false)\n        .map(attributeName -> {\n            String attributeValue = fc.getInitParameter(attributeName);\n            if (!attributeValue.isEmpty()) {\n                return attributeName + \"=\" + attributeValue;\n            } else {\n                return attributeName;\n            }\n        }).collect(Collectors.joining(\"; \"));", "url": "https://github.com/oracle/opengrok/pull/3238#discussion_r493695849", "createdAt": "2020-09-23T15:41:07Z", "author": {"login": "ahornace"}, "path": "opengrok-web/src/main/java/org/opengrok/web/CookieFilter.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ */\n+package org.opengrok.web;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.HttpHeaders;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Enumeration;\n+\n+/**\n+ * Makes sure that all cookies originating from the web application have the Same-site attribute set.\n+ */\n+public class CookieFilter implements Filter {\n+    FilterConfig fc;\n+\n+    @Override\n+    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)\n+            throws IOException, ServletException {\n+\n+        HttpServletResponse response = (HttpServletResponse) res;\n+\n+        chain.doFilter(req, response);\n+\n+        // Change the existing cookies to use the attributes and values from the configuration.\n+        Collection<String> headers = response.getHeaders(HttpHeaders.SET_COOKIE);\n+        boolean firstHeader = true;\n+        for (String header : headers) { // there can be multiple Set-Cookie attributes\n+            if (firstHeader) {\n+                response.setHeader(HttpHeaders.SET_COOKIE, String.format(\"%s; %s\", header, getSuffix(response)));\n+                firstHeader = false;\n+                continue;\n+            }\n+            response.addHeader(HttpHeaders.SET_COOKIE, String.format(\"%s; %s\", header, getSuffix(response)));\n+        }\n+    }\n+\n+    private String getSuffix(HttpServletResponse response) {\n+        StringBuilder sb = new StringBuilder();\n+\n+        for (Enumeration<String> e = fc.getInitParameterNames(); e.hasMoreElements();) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b8fbc6a461d2a6db18b440dcb10e8b13b4a417b"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18bc89de801dca38cfabc6192fd657c71c5cf844", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/18bc89de801dca38cfabc6192fd657c71c5cf844", "committedDate": "2020-09-23T16:09:41Z", "message": "make FilterConfig private\n\nCo-authored-by: Adam Horn\u00e1\u010dek <adam.hornacek@icloud.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f0287b6d816c4e09bcc3b7715d4e30c72dcbb24", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/4f0287b6d816c4e09bcc3b7715d4e30c72dcbb24", "committedDate": "2020-09-23T16:10:42Z", "message": "remove unnecessary parameter\n\nCo-authored-by: Adam Horn\u00e1\u010dek <adam.hornacek@icloud.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f9faf93ba15677c7d63206c5f68760ba61811b7", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/6f9faf93ba15677c7d63206c5f68760ba61811b7", "committedDate": "2020-09-23T16:12:04Z", "message": "destroy is not needed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29a85cd22a30386bfab59ed2591ac93111670b7e", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/29a85cd22a30386bfab59ed2591ac93111670b7e", "committedDate": "2020-09-24T07:24:14Z", "message": "empty destroy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "215e1519272ad6ab6828f619f1beeacdb6ab0422", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/215e1519272ad6ab6828f619f1beeacdb6ab0422", "committedDate": "2020-09-24T07:26:26Z", "message": "fix calls to getSuffix()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MzI4MDQ4", "url": "https://github.com/oracle/opengrok/pull/3238#pullrequestreview-495328048", "createdAt": "2020-09-24T08:19:36Z", "commit": {"oid": "215e1519272ad6ab6828f619f1beeacdb6ab0422"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 199, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}