{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3NDg2NjEw", "number": 3259, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxOTo0MzozOVrOEqHgdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzo1MzozM1rOEqVCUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTk4NjQ2OnYy", "diffSide": "RIGHT", "path": "opengrok-tools/src/main/python/opengrok_tools/utils/commandsequence.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxOTo0MzozOVrOHcJu7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxOTo0MzozOVrOHcJu7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI4MTY0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if self.outputs.get(cmd):\n          \n          \n            \n                        for line in self.outputs[cmd]:\n          \n          \n            \n                            str += '{}{}'.format(indent, line)\n          \n          \n            \n                    for line in self.outputs.get(cmd, []):\n          \n          \n            \n                        str += '{}{}'.format(indent, line)", "url": "https://github.com/oracle/opengrok/pull/3259#discussion_r499281644", "createdAt": "2020-10-04T19:43:39Z", "author": {"login": "eric-saintetienne"}, "path": "opengrok-tools/src/main/python/opengrok_tools/utils/commandsequence.py", "diffHunk": "@@ -60,7 +64,7 @@ def __str__(self):\n \n     def get_cmd_output(self, cmd, indent=\"\"):\n         str = \"\"\n-        if self.outputs[cmd]:\n+        if self.outputs.get(cmd):\n             for line in self.outputs[cmd]:\n                 str += '{}{}'.format(indent, line)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfca80f42eef9b03f093eafffe5464c399fd04ba"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTk4ODkwOnYy", "diffSide": "RIGHT", "path": "opengrok-tools/src/main/python/opengrok_tools/utils/webutil.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxOTo0Nzo0M1rOHcJwQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQyMTo1Mjo1NlrOHcKaVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI4MTk4Ng==", "bodyText": "A lot of repetitions here, wouldn't it make sense to factor the common code into a single function (named, say request) that all verbs would call?", "url": "https://github.com/oracle/opengrok/pull/3259#discussion_r499281986", "createdAt": "2020-10-04T19:47:43Z", "author": {"login": "eric-saintetienne"}, "path": "opengrok-tools/src/main/python/opengrok_tools/utils/webutil.py", "diffHunk": "@@ -27,45 +27,23 @@\n \n \n def get(logger, uri, params=None, headers=None):\n-    try:\n-        proxies = get_proxies(uri)\n-        return requests.get(uri, params=params, proxies=proxies)\n-    except Exception:\n-        logger.debug(traceback.format_exc())\n-        return None\n+    proxies = get_proxies(uri)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfca80f42eef9b03f093eafffe5464c399fd04ba"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5Mjc1OQ==", "bodyText": "refactored. I could possibly go as far as making do_api_call() to use requests.__dict__ lookup the function names.", "url": "https://github.com/oracle/opengrok/pull/3259#discussion_r499292759", "createdAt": "2020-10-04T21:52:56Z", "author": {"login": "vladak"}, "path": "opengrok-tools/src/main/python/opengrok_tools/utils/webutil.py", "diffHunk": "@@ -27,45 +27,23 @@\n \n \n def get(logger, uri, params=None, headers=None):\n-    try:\n-        proxies = get_proxies(uri)\n-        return requests.get(uri, params=params, proxies=proxies)\n-    except Exception:\n-        logger.debug(traceback.format_exc())\n-        return None\n+    proxies = get_proxies(uri)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI4MTk4Ng=="}, "originalCommit": {"oid": "cfca80f42eef9b03f093eafffe5464c399fd04ba"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODE2NzY0OnYy", "diffSide": "RIGHT", "path": "opengrok-tools/src/main/python/opengrok_tools/utils/restful.py", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzo0NjowMlrOHcdytQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDozNjo0MFrOHcgCOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYxMDI5Mw==", "bodyText": "I believe you can pass the handler directly as do_api_call('http:/...', requests.put, ... ) which could simplify the code around it", "url": "https://github.com/oracle/opengrok/pull/3259#discussion_r499610293", "createdAt": "2020-10-05T13:46:02Z", "author": {"login": "tulinkry"}, "path": "opengrok-tools/src/main/python/opengrok_tools/utils/restful.py", "diffHunk": "@@ -18,31 +18,27 @@\n #\n \n #\n-# Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2020, Oracle and/or its affiliates. All rights reserved.\n #\n \n import logging\n import json\n+import requests\n \n-from .webutil import put, post, delete\n+from .webutil import get_proxies\n from .patterns import COMMAND_PROPERTY\n \n \n CONTENT_TYPE = 'Content-Type'\n APPLICATION_JSON = 'application/json'   # default\n \n \n-def do_api_call(command, uri, verb, headers, data):\n-    verbs = {\n-        'PUT': put,\n-        'POST': post,\n-        'DELETE': delete\n-    }\n-    handler = verbs.get(verb)\n-    if handler is not None:\n-        logger = logging.getLogger(__name__)\n-        return handler(logger, uri, headers=headers, data=data)\n-    raise Exception('Unknown HTTP verb in command {}'.format(command))\n+def do_api_call(uri, verb, headers=None, data=None):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf396e409776f8fded2ef041e9a2328d606c50a2"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYxMjA5NA==", "bodyText": "Also I would switch the order to verb -> uri as that is the usual order", "url": "https://github.com/oracle/opengrok/pull/3259#discussion_r499612094", "createdAt": "2020-10-05T13:48:31Z", "author": {"login": "tulinkry"}, "path": "opengrok-tools/src/main/python/opengrok_tools/utils/restful.py", "diffHunk": "@@ -18,31 +18,27 @@\n #\n \n #\n-# Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2020, Oracle and/or its affiliates. All rights reserved.\n #\n \n import logging\n import json\n+import requests\n \n-from .webutil import put, post, delete\n+from .webutil import get_proxies\n from .patterns import COMMAND_PROPERTY\n \n \n CONTENT_TYPE = 'Content-Type'\n APPLICATION_JSON = 'application/json'   # default\n \n \n-def do_api_call(command, uri, verb, headers, data):\n-    verbs = {\n-        'PUT': put,\n-        'POST': post,\n-        'DELETE': delete\n-    }\n-    handler = verbs.get(verb)\n-    if handler is not None:\n-        logger = logging.getLogger(__name__)\n-        return handler(logger, uri, headers=headers, data=data)\n-    raise Exception('Unknown HTTP verb in command {}'.format(command))\n+def do_api_call(uri, verb, headers=None, data=None):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYxMDI5Mw=="}, "originalCommit": {"oid": "cf396e409776f8fded2ef041e9a2328d606c50a2"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY0MDgyMg==", "bodyText": "Passing the handler directly would be arguably more error prone + would need a dependency in the callers + is longer to type.", "url": "https://github.com/oracle/opengrok/pull/3259#discussion_r499640822", "createdAt": "2020-10-05T14:28:24Z", "author": {"login": "vladak"}, "path": "opengrok-tools/src/main/python/opengrok_tools/utils/restful.py", "diffHunk": "@@ -18,31 +18,27 @@\n #\n \n #\n-# Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2020, Oracle and/or its affiliates. All rights reserved.\n #\n \n import logging\n import json\n+import requests\n \n-from .webutil import put, post, delete\n+from .webutil import get_proxies\n from .patterns import COMMAND_PROPERTY\n \n \n CONTENT_TYPE = 'Content-Type'\n APPLICATION_JSON = 'application/json'   # default\n \n \n-def do_api_call(command, uri, verb, headers, data):\n-    verbs = {\n-        'PUT': put,\n-        'POST': post,\n-        'DELETE': delete\n-    }\n-    handler = verbs.get(verb)\n-    if handler is not None:\n-        logger = logging.getLogger(__name__)\n-        return handler(logger, uri, headers=headers, data=data)\n-    raise Exception('Unknown HTTP verb in command {}'.format(command))\n+def do_api_call(uri, verb, headers=None, data=None):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYxMDI5Mw=="}, "originalCommit": {"oid": "cf396e409776f8fded2ef041e9a2328d606c50a2"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY0NzAzNQ==", "bodyText": "changed the signature to use verb first.", "url": "https://github.com/oracle/opengrok/pull/3259#discussion_r499647035", "createdAt": "2020-10-05T14:36:40Z", "author": {"login": "vladak"}, "path": "opengrok-tools/src/main/python/opengrok_tools/utils/restful.py", "diffHunk": "@@ -18,31 +18,27 @@\n #\n \n #\n-# Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2020, Oracle and/or its affiliates. All rights reserved.\n #\n \n import logging\n import json\n+import requests\n \n-from .webutil import put, post, delete\n+from .webutil import get_proxies\n from .patterns import COMMAND_PROPERTY\n \n \n CONTENT_TYPE = 'Content-Type'\n APPLICATION_JSON = 'application/json'   # default\n \n \n-def do_api_call(command, uri, verb, headers, data):\n-    verbs = {\n-        'PUT': put,\n-        'POST': post,\n-        'DELETE': delete\n-    }\n-    handler = verbs.get(verb)\n-    if handler is not None:\n-        logger = logging.getLogger(__name__)\n-        return handler(logger, uri, headers=headers, data=data)\n-    raise Exception('Unknown HTTP verb in command {}'.format(command))\n+def do_api_call(uri, verb, headers=None, data=None):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYxMDI5Mw=="}, "originalCommit": {"oid": "cf396e409776f8fded2ef041e9a2328d606c50a2"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODE4ODM1OnYy", "diffSide": "RIGHT", "path": "opengrok-tools/src/main/python/opengrok_tools/utils/commandsequence.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzo1MDoyNVrOHcd_RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDoyNjo1NFrOHcflqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYxMzUwOA==", "bodyText": "here the level is error but for other commands it is info (below)", "url": "https://github.com/oracle/opengrok/pull/3259#discussion_r499613508", "createdAt": "2020-10-05T13:50:25Z", "author": {"login": "tulinkry"}, "path": "opengrok-tools/src/main/python/opengrok_tools/utils/commandsequence.py", "diffHunk": "@@ -156,7 +165,11 @@ def run_cleanup(self):\n \n         for cleanup_cmd in self.cleanup:\n             if is_web_uri(cleanup_cmd.get(COMMAND_PROPERTY)[0]):\n-                call_rest_api(cleanup_cmd, PROJECT_SUBST, self.name)\n+                try:\n+                    call_rest_api(cleanup_cmd, PROJECT_SUBST, self.name)\n+                except HTTPError as e:\n+                    self.logger.error(\"RESTful command {} failed: {}\".", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf396e409776f8fded2ef041e9a2328d606c50a2"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYzOTcyMg==", "bodyText": "should be fixed.", "url": "https://github.com/oracle/opengrok/pull/3259#discussion_r499639722", "createdAt": "2020-10-05T14:26:54Z", "author": {"login": "vladak"}, "path": "opengrok-tools/src/main/python/opengrok_tools/utils/commandsequence.py", "diffHunk": "@@ -156,7 +165,11 @@ def run_cleanup(self):\n \n         for cleanup_cmd in self.cleanup:\n             if is_web_uri(cleanup_cmd.get(COMMAND_PROPERTY)[0]):\n-                call_rest_api(cleanup_cmd, PROJECT_SUBST, self.name)\n+                try:\n+                    call_rest_api(cleanup_cmd, PROJECT_SUBST, self.name)\n+                except HTTPError as e:\n+                    self.logger.error(\"RESTful command {} failed: {}\".", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYxMzUwOA=="}, "originalCommit": {"oid": "cf396e409776f8fded2ef041e9a2328d606c50a2"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODE5ODEyOnYy", "diffSide": "RIGHT", "path": "opengrok-tools/src/main/python/opengrok_tools/utils/commandsequence.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzo1MjozMVrOHceFXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDozODowNVrOHcgGUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYxNTA2OQ==", "bodyText": "missing break? the else branch has it", "url": "https://github.com/oracle/opengrok/pull/3259#discussion_r499615069", "createdAt": "2020-10-05T13:52:31Z", "author": {"login": "tulinkry"}, "path": "opengrok-tools/src/main/python/opengrok_tools/utils/commandsequence.py", "diffHunk": "@@ -106,12 +109,18 @@ def run(self):\n         argument list of the command.\n \n         Any command entry that is a URI, will be used to submit RESTful API\n-        request. Return codes for these requests are not checked.\n+        request.\n         \"\"\"\n \n         for command in self.commands:\n             if is_web_uri(command.get(COMMAND_PROPERTY)[0]):\n-                call_rest_api(command, PROJECT_SUBST, self.name)\n+                try:\n+                    call_rest_api(command, PROJECT_SUBST, self.name)\n+                except HTTPError as e:\n+                    self.logger.error(\"RESTful command {} failed: {}\".\n+                                      format(command, e))\n+                    self.failed = True\n+                    self.retcodes[str(command)] = FAILURE_EXITVAL", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf396e409776f8fded2ef041e9a2328d606c50a2"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY0ODA4Mw==", "bodyText": "good catch. The RESTful calls should be equally handled.", "url": "https://github.com/oracle/opengrok/pull/3259#discussion_r499648083", "createdAt": "2020-10-05T14:38:05Z", "author": {"login": "vladak"}, "path": "opengrok-tools/src/main/python/opengrok_tools/utils/commandsequence.py", "diffHunk": "@@ -106,12 +109,18 @@ def run(self):\n         argument list of the command.\n \n         Any command entry that is a URI, will be used to submit RESTful API\n-        request. Return codes for these requests are not checked.\n+        request.\n         \"\"\"\n \n         for command in self.commands:\n             if is_web_uri(command.get(COMMAND_PROPERTY)[0]):\n-                call_rest_api(command, PROJECT_SUBST, self.name)\n+                try:\n+                    call_rest_api(command, PROJECT_SUBST, self.name)\n+                except HTTPError as e:\n+                    self.logger.error(\"RESTful command {} failed: {}\".\n+                                      format(command, e))\n+                    self.failed = True\n+                    self.retcodes[str(command)] = FAILURE_EXITVAL", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYxNTA2OQ=="}, "originalCommit": {"oid": "cf396e409776f8fded2ef041e9a2328d606c50a2"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODIwMzA2OnYy", "diffSide": "RIGHT", "path": "opengrok-tools/src/main/python/opengrok_tools/sync.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzo1MzozM1rOHceIVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDoyNDo1OVrOHcffyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYxNTgzMA==", "bodyText": "!= SUCCESS_EXITVAL?", "url": "https://github.com/oracle/opengrok/pull/3259#discussion_r499615830", "createdAt": "2020-10-05T13:53:33Z", "author": {"login": "tulinkry"}, "path": "opengrok-tools/src/main/python/opengrok_tools/sync.py", "diffHunk": "@@ -109,7 +111,11 @@ def do_sync(args, commands, config, directory, dirs_to_process, ignore_errors,\n                 cmds = CommandSequence(cmds_base)\n                 cmds.fill(cmds_base.retcodes, cmds_base.outputs,\n                           cmds_base.failed)\n-                cmds.check(ignore_errors)\n+                r = cmds.check(ignore_errors)\n+                if r != 0:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf396e409776f8fded2ef041e9a2328d606c50a2"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYzODIxNg==", "bodyText": "yep", "url": "https://github.com/oracle/opengrok/pull/3259#discussion_r499638216", "createdAt": "2020-10-05T14:24:59Z", "author": {"login": "vladak"}, "path": "opengrok-tools/src/main/python/opengrok_tools/sync.py", "diffHunk": "@@ -109,7 +111,11 @@ def do_sync(args, commands, config, directory, dirs_to_process, ignore_errors,\n                 cmds = CommandSequence(cmds_base)\n                 cmds.fill(cmds_base.retcodes, cmds_base.outputs,\n                           cmds_base.failed)\n-                cmds.check(ignore_errors)\n+                r = cmds.check(ignore_errors)\n+                if r != 0:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYxNTgzMA=="}, "originalCommit": {"oid": "cf396e409776f8fded2ef041e9a2328d606c50a2"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4972, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}