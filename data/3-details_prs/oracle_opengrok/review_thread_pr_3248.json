{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyODcwOTA0", "number": 3248, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNzo1NToxMlrOEnWUIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMzo0ODoyOVrOEndrgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Njk1NTIyOnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/FileHistoryCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNzo1NToxMlrOHX4-xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMDoxNDozNFrOHX9sug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgxMjg2OA==", "bodyText": "What is the contract here? Can repository.getHistory(srcFile) return null? If not, then maybe we can rewrite it to:\nHistory hist;\nif (renamed) {\n    hist = repository.getHistory(srcFile);\n} else {\n    hist = new History(historyEntries);\n}", "url": "https://github.com/oracle/opengrok/pull/3248#discussion_r494812868", "createdAt": "2020-09-25T07:55:12Z", "author": {"login": "ahornace"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/FileHistoryCache.java", "diffHunk": "@@ -103,38 +103,34 @@ private void doFileHistory(String filename, List<HistoryEntry> historyEntries,\n             Repository repository, File srcFile, File root, boolean renamed)\n             throws HistoryException {\n \n-        History hist = null;\n+        File file = new File(root, filename);\n+        // Only store directory history for the top-level directory.\n+        if (file.isDirectory() && !filename.equals(repository.getDirectoryName())) {\n+            LOGGER.log(Level.FINE, \"Not storing history cache for {0}\", file);\n+            return;\n+        }\n \n+        History hist = null;\n         /*\n          * If the file was renamed (in the changesets that are being indexed),\n          * its history is not stored in the historyEntries so it needs to be acquired\n          * directly from the repository.\n-         * This ensures that complete history of the file (across renames)\n-         * will be saved.\n+         * This ensures that complete history of the file (across renames) will be saved.\n          */\n         if (renamed) {\n             hist = repository.getHistory(srcFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bc21b878b44a8c725436bd1dc50df2a1e044b6b"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5MDE3MA==", "bodyText": "I thought about the null return value too. It seems rather than returning null History the underlying methods will throw HistoryException.", "url": "https://github.com/oracle/opengrok/pull/3248#discussion_r494890170", "createdAt": "2020-09-25T10:14:34Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/FileHistoryCache.java", "diffHunk": "@@ -103,38 +103,34 @@ private void doFileHistory(String filename, List<HistoryEntry> historyEntries,\n             Repository repository, File srcFile, File root, boolean renamed)\n             throws HistoryException {\n \n-        History hist = null;\n+        File file = new File(root, filename);\n+        // Only store directory history for the top-level directory.\n+        if (file.isDirectory() && !filename.equals(repository.getDirectoryName())) {\n+            LOGGER.log(Level.FINE, \"Not storing history cache for {0}\", file);\n+            return;\n+        }\n \n+        History hist = null;\n         /*\n          * If the file was renamed (in the changesets that are being indexed),\n          * its history is not stored in the historyEntries so it needs to be acquired\n          * directly from the repository.\n-         * This ensures that complete history of the file (across renames)\n-         * will be saved.\n+         * This ensures that complete history of the file (across renames) will be saved.\n          */\n         if (renamed) {\n             hist = repository.getHistory(srcFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgxMjg2OA=="}, "originalCommit": {"oid": "0bc21b878b44a8c725436bd1dc50df2a1e044b6b"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Njk1ODIzOnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/Repository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNzo1NjowNVrOHX5Aog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMDoxNjoxMVrOHX9wAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgxMzM0Ng==", "bodyText": "Why the space before !? Just curious :D", "url": "https://github.com/oracle/opengrok/pull/3248#discussion_r494813346", "createdAt": "2020-09-25T07:56:05Z", "author": {"login": "ahornace"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/Repository.java", "diffHunk": "@@ -279,24 +279,25 @@ boolean hasFileBasedTags() {\n      * tags to changesets which actually exist in the history of given file.\n      * Must be implemented repository-specific.\n      *\n-     * @see getTagList\n-     * @param hist History we want to assign tags to.\n+     * @see #getTagList\n+     * @param hist History object we want to assign tags to.\n      */\n     void assignTagsInHistory(History hist) {\n         if (hist == null) {\n             return;\n         }\n+\n         if (this.getTagList() == null) {\n             throw new IllegalStateException(\"getTagList() is null\");\n         }\n+\n         Iterator<TagEntry> it = this.getTagList().descendingIterator();\n         TagEntry lastTagEntry = null;\n-        // Go through all commits of given file\n         for (HistoryEntry ent : hist.getHistoryEntries()) {\n             // Assign all tags created since the last revision\n-            // Revision in this HistoryEntry must be already specified!\n-            // TODO is there better way to do this? We need to \"repeat\"\n-            // last element returned by call to next()\n+            // Revision in this HistoryEntry must be already specified !", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bc21b878b44a8c725436bd1dc50df2a1e044b6b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5MTAwOQ==", "bodyText": "with the space the whole TODO comment gets highlighted in IDEA.", "url": "https://github.com/oracle/opengrok/pull/3248#discussion_r494891009", "createdAt": "2020-09-25T10:16:11Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/Repository.java", "diffHunk": "@@ -279,24 +279,25 @@ boolean hasFileBasedTags() {\n      * tags to changesets which actually exist in the history of given file.\n      * Must be implemented repository-specific.\n      *\n-     * @see getTagList\n-     * @param hist History we want to assign tags to.\n+     * @see #getTagList\n+     * @param hist History object we want to assign tags to.\n      */\n     void assignTagsInHistory(History hist) {\n         if (hist == null) {\n             return;\n         }\n+\n         if (this.getTagList() == null) {\n             throw new IllegalStateException(\"getTagList() is null\");\n         }\n+\n         Iterator<TagEntry> it = this.getTagList().descendingIterator();\n         TagEntry lastTagEntry = null;\n-        // Go through all commits of given file\n         for (HistoryEntry ent : hist.getHistoryEntries()) {\n             // Assign all tags created since the last revision\n-            // Revision in this HistoryEntry must be already specified!\n-            // TODO is there better way to do this? We need to \"repeat\"\n-            // last element returned by call to next()\n+            // Revision in this HistoryEntry must be already specified !", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgxMzM0Ng=="}, "originalCommit": {"oid": "0bc21b878b44a8c725436bd1dc50df2a1e044b6b"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Njk2Nzc3OnYy", "diffSide": "LEFT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/FileHistoryCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNzo1ODo1MlrOHX5GjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMDoxOToyMFrOHX91tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgxNDg2MQ==", "bodyText": "Could you please explain what was the use case?\nWe need to do deep copy in order to have different tags per each commit.", "url": "https://github.com/oracle/opengrok/pull/3248#discussion_r494814861", "createdAt": "2020-09-25T07:58:52Z", "author": {"login": "ahornace"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/FileHistoryCache.java", "diffHunk": "@@ -463,15 +456,8 @@ public void store(History history, Repository repository)\n                     list = new ArrayList<>();\n                     map.put(s, list);\n                 }\n-                /*\n-                 * We need to do deep copy in order to have different tags", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bc21b878b44a8c725436bd1dc50df2a1e044b6b"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5MjQ2OQ==", "bodyText": "I think the author of the original code forgot that the tags were reset in doFileHistory(). Assigning the tags to history entries used shared across files would lead to wrong results.", "url": "https://github.com/oracle/opengrok/pull/3248#discussion_r494892469", "createdAt": "2020-09-25T10:19:20Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/FileHistoryCache.java", "diffHunk": "@@ -463,15 +456,8 @@ public void store(History history, Repository repository)\n                     list = new ArrayList<>();\n                     map.put(s, list);\n                 }\n-                /*\n-                 * We need to do deep copy in order to have different tags", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgxNDg2MQ=="}, "originalCommit": {"oid": "0bc21b878b44a8c725436bd1dc50df2a1e044b6b"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5ODE1NDI1OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/FileHistoryCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMzo0NjozNlrOHYEVYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNToyNjozNlrOHYIU6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk5ODg4Mw==", "bodyText": "a reason in the message could be helpful for debugging", "url": "https://github.com/oracle/opengrok/pull/3248#discussion_r494998883", "createdAt": "2020-09-25T13:46:36Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/FileHistoryCache.java", "diffHunk": "@@ -103,38 +103,32 @@ private void doFileHistory(String filename, List<HistoryEntry> historyEntries,\n             Repository repository, File srcFile, File root, boolean renamed)\n             throws HistoryException {\n \n-        History hist = null;\n+        File file = new File(root, filename);\n+        // Only store directory history for the top-level directory.\n+        if (file.isDirectory() && !filename.equals(repository.getDirectoryName())) {\n+            LOGGER.log(Level.FINE, \"Not storing history cache for {0}\", file);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dcf7e91f2b5e0b468736092ef85d0d5e14b9965"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA2NDI5Nw==", "bodyText": "sure, fixed", "url": "https://github.com/oracle/opengrok/pull/3248#discussion_r495064297", "createdAt": "2020-09-25T15:26:36Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/FileHistoryCache.java", "diffHunk": "@@ -103,38 +103,32 @@ private void doFileHistory(String filename, List<HistoryEntry> historyEntries,\n             Repository repository, File srcFile, File root, boolean renamed)\n             throws HistoryException {\n \n-        History hist = null;\n+        File file = new File(root, filename);\n+        // Only store directory history for the top-level directory.\n+        if (file.isDirectory() && !filename.equals(repository.getDirectoryName())) {\n+            LOGGER.log(Level.FINE, \"Not storing history cache for {0}\", file);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk5ODg4Mw=="}, "originalCommit": {"oid": "4dcf7e91f2b5e0b468736092ef85d0d5e14b9965"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5ODE2MTk0OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/FileHistoryCache.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMzo0ODoyOVrOHYEaKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNjo0NTowMVrOHYLFAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTAwMDEwNg==", "bodyText": "hist could be null when hist = repository.getHistory(srcFile) returns null which was handled in the previous code", "url": "https://github.com/oracle/opengrok/pull/3248#discussion_r495000106", "createdAt": "2020-09-25T13:48:29Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/FileHistoryCache.java", "diffHunk": "@@ -103,38 +103,32 @@ private void doFileHistory(String filename, List<HistoryEntry> historyEntries,\n             Repository repository, File srcFile, File root, boolean renamed)\n             throws HistoryException {\n \n-        History hist = null;\n+        File file = new File(root, filename);\n+        // Only store directory history for the top-level directory.\n+        if (file.isDirectory() && !filename.equals(repository.getDirectoryName())) {\n+            LOGGER.log(Level.FINE, \"Not storing history cache for {0}\", file);\n+            return;\n+        }\n \n         /*\n          * If the file was renamed (in the changesets that are being indexed),\n          * its history is not stored in the historyEntries so it needs to be acquired\n          * directly from the repository.\n-         * This ensures that complete history of the file (across renames)\n-         * will be saved.\n+         * This ensures that complete history of the file (across renames) will be saved.\n          */\n+        History hist;\n         if (renamed) {\n             hist = repository.getHistory(srcFile);\n+        } else {\n+            hist = new History(historyEntries);\n         }\n \n-        File file = new File(root, filename);\n-\n-        if (hist == null) {\n-            hist = new History();\n-\n-            // File based history cache does not store files for individual\n-            // changesets so strip them unless it is history for the repository.\n-            for (HistoryEntry ent : historyEntries) {\n-                if (file.isDirectory() && filename.equals(repository.getDirectoryName())) {\n-                    ent.stripTags();\n-                } else {\n-                    ent.strip();\n-                }\n-            }\n-\n-            // add all history entries\n-            hist.setHistoryEntries(historyEntries);\n-        } else {\n-            for (HistoryEntry ent : hist.getHistoryEntries()) {\n+        // File based history cache does not store files for individual\n+        // changesets so strip them unless it is history for the repository.\n+        for (HistoryEntry ent : hist.getHistoryEntries()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dcf7e91f2b5e0b468736092ef85d0d5e14b9965"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTAwNzQ4OA==", "bodyText": "If it's part of the contract that it can return null, then it would be better to rewrite it to return Optional.", "url": "https://github.com/oracle/opengrok/pull/3248#discussion_r495007488", "createdAt": "2020-09-25T13:59:46Z", "author": {"login": "ahornace"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/FileHistoryCache.java", "diffHunk": "@@ -103,38 +103,32 @@ private void doFileHistory(String filename, List<HistoryEntry> historyEntries,\n             Repository repository, File srcFile, File root, boolean renamed)\n             throws HistoryException {\n \n-        History hist = null;\n+        File file = new File(root, filename);\n+        // Only store directory history for the top-level directory.\n+        if (file.isDirectory() && !filename.equals(repository.getDirectoryName())) {\n+            LOGGER.log(Level.FINE, \"Not storing history cache for {0}\", file);\n+            return;\n+        }\n \n         /*\n          * If the file was renamed (in the changesets that are being indexed),\n          * its history is not stored in the historyEntries so it needs to be acquired\n          * directly from the repository.\n-         * This ensures that complete history of the file (across renames)\n-         * will be saved.\n+         * This ensures that complete history of the file (across renames) will be saved.\n          */\n+        History hist;\n         if (renamed) {\n             hist = repository.getHistory(srcFile);\n+        } else {\n+            hist = new History(historyEntries);\n         }\n \n-        File file = new File(root, filename);\n-\n-        if (hist == null) {\n-            hist = new History();\n-\n-            // File based history cache does not store files for individual\n-            // changesets so strip them unless it is history for the repository.\n-            for (HistoryEntry ent : historyEntries) {\n-                if (file.isDirectory() && filename.equals(repository.getDirectoryName())) {\n-                    ent.stripTags();\n-                } else {\n-                    ent.strip();\n-                }\n-            }\n-\n-            // add all history entries\n-            hist.setHistoryEntries(historyEntries);\n-        } else {\n-            for (HistoryEntry ent : hist.getHistoryEntries()) {\n+        // File based history cache does not store files for individual\n+        // changesets so strip them unless it is history for the repository.\n+        for (HistoryEntry ent : hist.getHistoryEntries()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTAwMDEwNg=="}, "originalCommit": {"oid": "4dcf7e91f2b5e0b468736092ef85d0d5e14b9965"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA2MTI2NA==", "bodyText": "Sounds to me like a complication. If the history cannot be retrieved, the HistoryException should be thrown.", "url": "https://github.com/oracle/opengrok/pull/3248#discussion_r495061264", "createdAt": "2020-09-25T15:21:40Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/FileHistoryCache.java", "diffHunk": "@@ -103,38 +103,32 @@ private void doFileHistory(String filename, List<HistoryEntry> historyEntries,\n             Repository repository, File srcFile, File root, boolean renamed)\n             throws HistoryException {\n \n-        History hist = null;\n+        File file = new File(root, filename);\n+        // Only store directory history for the top-level directory.\n+        if (file.isDirectory() && !filename.equals(repository.getDirectoryName())) {\n+            LOGGER.log(Level.FINE, \"Not storing history cache for {0}\", file);\n+            return;\n+        }\n \n         /*\n          * If the file was renamed (in the changesets that are being indexed),\n          * its history is not stored in the historyEntries so it needs to be acquired\n          * directly from the repository.\n-         * This ensures that complete history of the file (across renames)\n-         * will be saved.\n+         * This ensures that complete history of the file (across renames) will be saved.\n          */\n+        History hist;\n         if (renamed) {\n             hist = repository.getHistory(srcFile);\n+        } else {\n+            hist = new History(historyEntries);\n         }\n \n-        File file = new File(root, filename);\n-\n-        if (hist == null) {\n-            hist = new History();\n-\n-            // File based history cache does not store files for individual\n-            // changesets so strip them unless it is history for the repository.\n-            for (HistoryEntry ent : historyEntries) {\n-                if (file.isDirectory() && filename.equals(repository.getDirectoryName())) {\n-                    ent.stripTags();\n-                } else {\n-                    ent.strip();\n-                }\n-            }\n-\n-            // add all history entries\n-            hist.setHistoryEntries(historyEntries);\n-        } else {\n-            for (HistoryEntry ent : hist.getHistoryEntries()) {\n+        // File based history cache does not store files for individual\n+        // changesets so strip them unless it is history for the repository.\n+        for (HistoryEntry ent : hist.getHistoryEntries()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTAwMDEwNg=="}, "originalCommit": {"oid": "4dcf7e91f2b5e0b468736092ef85d0d5e14b9965"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA2OTg5Mg==", "bodyText": "There's no word about null on \n  \n    \n      opengrok/opengrok-indexer/src/main/java/org/opengrok/indexer/history/Repository.java\n    \n    \n        Lines 92 to 98\n      in\n      ecb1ce8\n    \n    \n    \n    \n\n        \n          \n               /** \n        \n\n        \n          \n                * Check if the repository supports {@code getHistory()} requests for whole \n        \n\n        \n          \n                * directories at once. \n        \n\n        \n          \n                * \n        \n\n        \n          \n                * @return {@code true} if the repository can get history for directories \n        \n\n        \n          \n                */ \n        \n\n        \n          \n               abstract boolean hasHistoryForDirectories(); \n        \n    \n  \n\n\nand looking at a few repository implementations they do throw the HistoryException, e.g. \n  \n    \n      opengrok/opengrok-indexer/src/main/java/org/opengrok/indexer/history/MercurialHistoryParser.java\n    \n    \n        Lines 76 to 101\n      in\n      ecb1ce8\n    \n    \n    \n    \n\n        \n          \n           History parse(File file, String changeset) throws HistoryException { \n        \n\n        \n          \n               isDir = file.isDirectory(); \n        \n\n        \n          \n               try { \n        \n\n        \n          \n                   Executor executor = repository.getHistoryLogExecutor(file, changeset); \n        \n\n        \n          \n                   int status = executor.exec(true, this); \n        \n\n        \n          \n            \n        \n\n        \n          \n                   if (status != 0) { \n        \n\n        \n          \n                       throw new HistoryException(\"Failed to get history for: \\\"\" + \n        \n\n        \n          \n                                                  file.getAbsolutePath() + \n        \n\n        \n          \n                                                  \"\\\" Exit code: \" + status); \n        \n\n        \n          \n                   } \n        \n\n        \n          \n               } catch (IOException e) { \n        \n\n        \n          \n                   throw new HistoryException(\"Failed to get history for: \\\"\" + \n        \n\n        \n          \n                                              file.getAbsolutePath() + \"\\\"\", e); \n        \n\n        \n          \n               } \n        \n\n        \n          \n            \n        \n\n        \n          \n               // If a changeset to start from is specified, remove that changeset \n        \n\n        \n          \n               // from the list, since only the ones following it should be returned. \n        \n\n        \n          \n               // Also check that the specified changeset was found, otherwise throw \n        \n\n        \n          \n               // an exception. \n        \n\n        \n          \n               if (changeset != null) { \n        \n\n        \n          \n                   repository.removeAndVerifyOldestChangeset(entries, changeset); \n        \n\n        \n          \n               } \n        \n\n        \n          \n            \n        \n\n        \n          \n               return new History(entries, renamedFiles); \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nI wonder if it is possible to enforce the class methods not to return null. The @NotNull annotation seems to be meant for something else ? Otherwise, provide a wrapper to check for null and throw the exception.", "url": "https://github.com/oracle/opengrok/pull/3248#discussion_r495069892", "createdAt": "2020-09-25T15:35:42Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/FileHistoryCache.java", "diffHunk": "@@ -103,38 +103,32 @@ private void doFileHistory(String filename, List<HistoryEntry> historyEntries,\n             Repository repository, File srcFile, File root, boolean renamed)\n             throws HistoryException {\n \n-        History hist = null;\n+        File file = new File(root, filename);\n+        // Only store directory history for the top-level directory.\n+        if (file.isDirectory() && !filename.equals(repository.getDirectoryName())) {\n+            LOGGER.log(Level.FINE, \"Not storing history cache for {0}\", file);\n+            return;\n+        }\n \n         /*\n          * If the file was renamed (in the changesets that are being indexed),\n          * its history is not stored in the historyEntries so it needs to be acquired\n          * directly from the repository.\n-         * This ensures that complete history of the file (across renames)\n-         * will be saved.\n+         * This ensures that complete history of the file (across renames) will be saved.\n          */\n+        History hist;\n         if (renamed) {\n             hist = repository.getHistory(srcFile);\n+        } else {\n+            hist = new History(historyEntries);\n         }\n \n-        File file = new File(root, filename);\n-\n-        if (hist == null) {\n-            hist = new History();\n-\n-            // File based history cache does not store files for individual\n-            // changesets so strip them unless it is history for the repository.\n-            for (HistoryEntry ent : historyEntries) {\n-                if (file.isDirectory() && filename.equals(repository.getDirectoryName())) {\n-                    ent.stripTags();\n-                } else {\n-                    ent.strip();\n-                }\n-            }\n-\n-            // add all history entries\n-            hist.setHistoryEntries(historyEntries);\n-        } else {\n-            for (HistoryEntry ent : hist.getHistoryEntries()) {\n+        // File based history cache does not store files for individual\n+        // changesets so strip them unless it is history for the repository.\n+        for (HistoryEntry ent : hist.getHistoryEntries()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTAwMDEwNg=="}, "originalCommit": {"oid": "4dcf7e91f2b5e0b468736092ef85d0d5e14b9965"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA3NDg3Mg==", "bodyText": "https://github.com/JetBrains/java-annotations has @NotNull that might work.", "url": "https://github.com/oracle/opengrok/pull/3248#discussion_r495074872", "createdAt": "2020-09-25T15:44:07Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/FileHistoryCache.java", "diffHunk": "@@ -103,38 +103,32 @@ private void doFileHistory(String filename, List<HistoryEntry> historyEntries,\n             Repository repository, File srcFile, File root, boolean renamed)\n             throws HistoryException {\n \n-        History hist = null;\n+        File file = new File(root, filename);\n+        // Only store directory history for the top-level directory.\n+        if (file.isDirectory() && !filename.equals(repository.getDirectoryName())) {\n+            LOGGER.log(Level.FINE, \"Not storing history cache for {0}\", file);\n+            return;\n+        }\n \n         /*\n          * If the file was renamed (in the changesets that are being indexed),\n          * its history is not stored in the historyEntries so it needs to be acquired\n          * directly from the repository.\n-         * This ensures that complete history of the file (across renames)\n-         * will be saved.\n+         * This ensures that complete history of the file (across renames) will be saved.\n          */\n+        History hist;\n         if (renamed) {\n             hist = repository.getHistory(srcFile);\n+        } else {\n+            hist = new History(historyEntries);\n         }\n \n-        File file = new File(root, filename);\n-\n-        if (hist == null) {\n-            hist = new History();\n-\n-            // File based history cache does not store files for individual\n-            // changesets so strip them unless it is history for the repository.\n-            for (HistoryEntry ent : historyEntries) {\n-                if (file.isDirectory() && filename.equals(repository.getDirectoryName())) {\n-                    ent.stripTags();\n-                } else {\n-                    ent.strip();\n-                }\n-            }\n-\n-            // add all history entries\n-            hist.setHistoryEntries(historyEntries);\n-        } else {\n-            for (HistoryEntry ent : hist.getHistoryEntries()) {\n+        // File based history cache does not store files for individual\n+        // changesets so strip them unless it is history for the repository.\n+        for (HistoryEntry ent : hist.getHistoryEntries()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTAwMDEwNg=="}, "originalCommit": {"oid": "4dcf7e91f2b5e0b468736092ef85d0d5e14b9965"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEwOTM3OA==", "bodyText": "It's ok, I didn't see this conversation #3248 (comment)", "url": "https://github.com/oracle/opengrok/pull/3248#discussion_r495109378", "createdAt": "2020-09-25T16:45:01Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/FileHistoryCache.java", "diffHunk": "@@ -103,38 +103,32 @@ private void doFileHistory(String filename, List<HistoryEntry> historyEntries,\n             Repository repository, File srcFile, File root, boolean renamed)\n             throws HistoryException {\n \n-        History hist = null;\n+        File file = new File(root, filename);\n+        // Only store directory history for the top-level directory.\n+        if (file.isDirectory() && !filename.equals(repository.getDirectoryName())) {\n+            LOGGER.log(Level.FINE, \"Not storing history cache for {0}\", file);\n+            return;\n+        }\n \n         /*\n          * If the file was renamed (in the changesets that are being indexed),\n          * its history is not stored in the historyEntries so it needs to be acquired\n          * directly from the repository.\n-         * This ensures that complete history of the file (across renames)\n-         * will be saved.\n+         * This ensures that complete history of the file (across renames) will be saved.\n          */\n+        History hist;\n         if (renamed) {\n             hist = repository.getHistory(srcFile);\n+        } else {\n+            hist = new History(historyEntries);\n         }\n \n-        File file = new File(root, filename);\n-\n-        if (hist == null) {\n-            hist = new History();\n-\n-            // File based history cache does not store files for individual\n-            // changesets so strip them unless it is history for the repository.\n-            for (HistoryEntry ent : historyEntries) {\n-                if (file.isDirectory() && filename.equals(repository.getDirectoryName())) {\n-                    ent.stripTags();\n-                } else {\n-                    ent.strip();\n-                }\n-            }\n-\n-            // add all history entries\n-            hist.setHistoryEntries(historyEntries);\n-        } else {\n-            for (HistoryEntry ent : hist.getHistoryEntries()) {\n+        // File based history cache does not store files for individual\n+        // changesets so strip them unless it is history for the repository.\n+        for (HistoryEntry ent : hist.getHistoryEntries()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTAwMDEwNg=="}, "originalCommit": {"oid": "4dcf7e91f2b5e0b468736092ef85d0d5e14b9965"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4960, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}