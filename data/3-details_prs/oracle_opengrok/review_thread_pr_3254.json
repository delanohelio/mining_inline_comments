{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3MDg5NTE2", "number": 3254, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMDozOToxMFrOEp8Ulw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwMDo0MjoxMFrOEqhyVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDE1MzgzOnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMDozOToxMFrOHb6-TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMToyNjowOFrOHb8Cig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAzOTgyMQ==", "bodyText": "I wouldn't think a bounce would be required if futures are being awaited. Why is it necessary?", "url": "https://github.com/oracle/opengrok/pull/3254#discussion_r499039821", "createdAt": "2020-10-02T20:39:10Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java", "diffHunk": "@@ -480,7 +478,25 @@ public boolean hasAnnotation(File file) {\n      * @return collection of added repositories\n      */\n     public Collection<RepositoryInfo> addRepositories(File[] files) {\n-        return addRepositories(files, env.getNestingMaximum(), 0, false);\n+        ExecutorService executor = env.getIndexerParallelizer().getRepositorySearchExecutor();\n+        List<Future<Collection<RepositoryInfo>>> futures = new ArrayList<>();\n+        for (File file: files) {\n+            futures.add(executor.submit(() -> addRepositories(new File[]{file},\n+                    env.getNestingMaximum(), 0, false)));\n+        }\n+\n+        List<RepositoryInfo> repoList = new ArrayList<>();\n+        futures.forEach(future -> {\n+            try {\n+                repoList.addAll(future.get());\n+            } catch (Exception e) {\n+                LOGGER.log(Level.WARNING, \"failed to get future\");\n+            }\n+        });\n+\n+        env.getIndexerParallelizer().bounceRepositorySearchExecutor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b824f18148ea6bf410e0695a0d886ce4a01930c"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA1NzI5MA==", "bodyText": "just didn't want to keep the threads around.", "url": "https://github.com/oracle/opengrok/pull/3254#discussion_r499057290", "createdAt": "2020-10-02T21:26:08Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java", "diffHunk": "@@ -480,7 +478,25 @@ public boolean hasAnnotation(File file) {\n      * @return collection of added repositories\n      */\n     public Collection<RepositoryInfo> addRepositories(File[] files) {\n-        return addRepositories(files, env.getNestingMaximum(), 0, false);\n+        ExecutorService executor = env.getIndexerParallelizer().getRepositorySearchExecutor();\n+        List<Future<Collection<RepositoryInfo>>> futures = new ArrayList<>();\n+        for (File file: files) {\n+            futures.add(executor.submit(() -> addRepositories(new File[]{file},\n+                    env.getNestingMaximum(), 0, false)));\n+        }\n+\n+        List<RepositoryInfo> repoList = new ArrayList<>();\n+        futures.forEach(future -> {\n+            try {\n+                repoList.addAll(future.get());\n+            } catch (Exception e) {\n+                LOGGER.log(Level.WARNING, \"failed to get future\");\n+            }\n+        });\n+\n+        env.getIndexerParallelizer().bounceRepositorySearchExecutor();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAzOTgyMQ=="}, "originalCommit": {"oid": "6b824f18148ea6bf410e0695a0d886ce4a01930c"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDE2MTcyOnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMDo0MjowOFrOHb7DEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMToyNzo0MVrOHb8EmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA0MTA0Mg==", "bodyText": "See line 435:\nLimit usage lines to 72 characters for concise formatting.", "url": "https://github.com/oracle/opengrok/pull/3254#discussion_r499041042", "createdAt": "2020-10-02T20:42:08Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java", "diffHunk": "@@ -679,6 +683,11 @@ public static void main(String[] argv) {\n                     \"Run as quietly as possible. Sets logging level to WARNING.\").execute(v ->\n                     LoggerUtil.setBaseConsoleLogLevel(Level.WARNING));\n \n+            parser.on(\"--repositorySearchThreads\", \"=number\", Integer.class,\n+                    \"The number of threads to use for scanning for repositories.\",\n+                    \"By default the number of threads will be set to the number of available CPUs.\").", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b824f18148ea6bf410e0695a0d886ce4a01930c"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA1NzgxNg==", "bodyText": "fixed", "url": "https://github.com/oracle/opengrok/pull/3254#discussion_r499057816", "createdAt": "2020-10-02T21:27:41Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java", "diffHunk": "@@ -679,6 +683,11 @@ public static void main(String[] argv) {\n                     \"Run as quietly as possible. Sets logging level to WARNING.\").execute(v ->\n                     LoggerUtil.setBaseConsoleLogLevel(Level.WARNING));\n \n+            parser.on(\"--repositorySearchThreads\", \"=number\", Integer.class,\n+                    \"The number of threads to use for scanning for repositories.\",\n+                    \"By default the number of threads will be set to the number of available CPUs.\").", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA0MTA0Mg=="}, "originalCommit": {"oid": "6b824f18148ea6bf410e0695a0d886ce4a01930c"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDE2MjkxOnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMDo0MjozOFrOHb7D1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMToyNzo1MVrOHb8E3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA0MTIzOA==", "bodyText": "This is mis-ordered and should appear after --repository", "url": "https://github.com/oracle/opengrok/pull/3254#discussion_r499041238", "createdAt": "2020-10-02T20:42:38Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java", "diffHunk": "@@ -679,6 +683,11 @@ public static void main(String[] argv) {\n                     \"Run as quietly as possible. Sets logging level to WARNING.\").execute(v ->\n                     LoggerUtil.setBaseConsoleLogLevel(Level.WARNING));\n \n+            parser.on(\"--repositorySearchThreads\", \"=number\", Integer.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b824f18148ea6bf410e0695a0d886ce4a01930c"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA1Nzg4Ng==", "bodyText": "fixed", "url": "https://github.com/oracle/opengrok/pull/3254#discussion_r499057886", "createdAt": "2020-10-02T21:27:51Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java", "diffHunk": "@@ -679,6 +683,11 @@ public static void main(String[] argv) {\n                     \"Run as quietly as possible. Sets logging level to WARNING.\").execute(v ->\n                     LoggerUtil.setBaseConsoleLogLevel(Level.WARNING));\n \n+            parser.on(\"--repositorySearchThreads\", \"=number\", Integer.class,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA0MTIzOA=="}, "originalCommit": {"oid": "6b824f18148ea6bf410e0695a0d886ce4a01930c"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDQ4MjY2OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMzo0MzoyMlrOHb-DwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwODoxODo0MFrOHcSOUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5MDM2OA==", "bodyText": "Maybe a more activity-specific message?", "url": "https://github.com/oracle/opengrok/pull/3254#discussion_r499090368", "createdAt": "2020-10-02T23:43:22Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java", "diffHunk": "@@ -480,7 +478,25 @@ public boolean hasAnnotation(File file) {\n      * @return collection of added repositories\n      */\n     public Collection<RepositoryInfo> addRepositories(File[] files) {\n-        return addRepositories(files, env.getNestingMaximum(), 0, false);\n+        ExecutorService executor = env.getIndexerParallelizer().getRepositorySearchExecutor();\n+        List<Future<Collection<RepositoryInfo>>> futures = new ArrayList<>();\n+        for (File file: files) {\n+            futures.add(executor.submit(() -> addRepositories(new File[]{file},\n+                    env.getNestingMaximum(), 0, false)));\n+        }\n+\n+        List<RepositoryInfo> repoList = new ArrayList<>();\n+        futures.forEach(future -> {\n+            try {\n+                repoList.addAll(future.get());\n+            } catch (Exception e) {\n+                LOGGER.log(Level.WARNING, \"failed to get future\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e6658c5bec95fa39c5a6819fc1c58ab4d057fe"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQyMDc1NA==", "bodyText": "fixed", "url": "https://github.com/oracle/opengrok/pull/3254#discussion_r499420754", "createdAt": "2020-10-05T08:18:40Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java", "diffHunk": "@@ -480,7 +478,25 @@ public boolean hasAnnotation(File file) {\n      * @return collection of added repositories\n      */\n     public Collection<RepositoryInfo> addRepositories(File[] files) {\n-        return addRepositories(files, env.getNestingMaximum(), 0, false);\n+        ExecutorService executor = env.getIndexerParallelizer().getRepositorySearchExecutor();\n+        List<Future<Collection<RepositoryInfo>>> futures = new ArrayList<>();\n+        for (File file: files) {\n+            futures.add(executor.submit(() -> addRepositories(new File[]{file},\n+                    env.getNestingMaximum(), 0, false)));\n+        }\n+\n+        List<RepositoryInfo> repoList = new ArrayList<>();\n+        futures.forEach(future -> {\n+            try {\n+                repoList.addAll(future.get());\n+            } catch (Exception e) {\n+                LOGGER.log(Level.WARNING, \"failed to get future\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5MDM2OA=="}, "originalCommit": {"oid": "95e6658c5bec95fa39c5a6819fc1c58ab4d057fe"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDQ5MTg0OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMzo1MDozNVrOHb-I4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwODoyMjozMlrOHcSWJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5MTY4MQ==", "bodyText": "May I suggest just using the -T,--threads executor? It's not otherwise being used at this stage of a run", "url": "https://github.com/oracle/opengrok/pull/3254#discussion_r499091681", "createdAt": "2020-10-02T23:50:35Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java", "diffHunk": "@@ -480,7 +478,25 @@ public boolean hasAnnotation(File file) {\n      * @return collection of added repositories\n      */\n     public Collection<RepositoryInfo> addRepositories(File[] files) {\n-        return addRepositories(files, env.getNestingMaximum(), 0, false);\n+        ExecutorService executor = env.getIndexerParallelizer().getRepositorySearchExecutor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e6658c5bec95fa39c5a6819fc1c58ab4d057fe"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQyMjc1Nw==", "bodyText": "yes, that's reasonable.", "url": "https://github.com/oracle/opengrok/pull/3254#discussion_r499422757", "createdAt": "2020-10-05T08:22:32Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java", "diffHunk": "@@ -480,7 +478,25 @@ public boolean hasAnnotation(File file) {\n      * @return collection of added repositories\n      */\n     public Collection<RepositoryInfo> addRepositories(File[] files) {\n-        return addRepositories(files, env.getNestingMaximum(), 0, false);\n+        ExecutorService executor = env.getIndexerParallelizer().getRepositorySearchExecutor();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5MTY4MQ=="}, "originalCommit": {"oid": "95e6658c5bec95fa39c5a6819fc1c58ab4d057fe"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDgwMTczOnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexerParallelizer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwOToxNzowOVrOHcAkog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwODo0Nzo0MlrOHcTPKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEzMTU1NA==", "bodyText": "what is the point of caching what you can get from the lazy supplier?\nIs it that you need to keep track if it has ever been initialized?", "url": "https://github.com/oracle/opengrok/pull/3254#discussion_r499131554", "createdAt": "2020-10-03T09:17:09Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexerParallelizer.java", "diffHunk": "@@ -147,6 +151,15 @@ public ExecutorService getCtagsWatcherExecutor() {\n         return result;\n     }\n \n+    /**\n+     * @return the ExecutorService used for repository scan\n+     */\n+    public ExecutorService getRepositorySearchExecutor() {\n+        ExecutorService result = lzRepositorySearchExecutor.get();\n+        repositorySearchExecutor = result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e6658c5bec95fa39c5a6819fc1c58ab4d057fe"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE2MDkzMQ==", "bodyText": "Yes, because you want to avoid initializing something expensive if it hasn't been used elsewhere. I have a branch where I've added an isActive property to LazilyInstantiate to allow simplifying IndexerParallelizer. I can extract that part from the branch and raise a narrow PR.", "url": "https://github.com/oracle/opengrok/pull/3254#discussion_r499160931", "createdAt": "2020-10-03T16:17:26Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexerParallelizer.java", "diffHunk": "@@ -147,6 +151,15 @@ public ExecutorService getCtagsWatcherExecutor() {\n         return result;\n     }\n \n+    /**\n+     * @return the ExecutorService used for repository scan\n+     */\n+    public ExecutorService getRepositorySearchExecutor() {\n+        ExecutorService result = lzRepositorySearchExecutor.get();\n+        repositorySearchExecutor = result;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEzMTU1NA=="}, "originalCommit": {"oid": "95e6658c5bec95fa39c5a6819fc1c58ab4d057fe"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE2NzE2OQ==", "bodyText": "I think it looks cleaner with the PR you just raised. Good job. (#3256)", "url": "https://github.com/oracle/opengrok/pull/3254#discussion_r499167169", "createdAt": "2020-10-03T17:40:45Z", "author": {"login": "tulinkry"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexerParallelizer.java", "diffHunk": "@@ -147,6 +151,15 @@ public ExecutorService getCtagsWatcherExecutor() {\n         return result;\n     }\n \n+    /**\n+     * @return the ExecutorService used for repository scan\n+     */\n+    public ExecutorService getRepositorySearchExecutor() {\n+        ExecutorService result = lzRepositorySearchExecutor.get();\n+        repositorySearchExecutor = result;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEzMTU1NA=="}, "originalCommit": {"oid": "95e6658c5bec95fa39c5a6819fc1c58ab4d057fe"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQzNzM1NQ==", "bodyText": "Indeed, rebased.", "url": "https://github.com/oracle/opengrok/pull/3254#discussion_r499437355", "createdAt": "2020-10-05T08:47:42Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexerParallelizer.java", "diffHunk": "@@ -147,6 +151,15 @@ public ExecutorService getCtagsWatcherExecutor() {\n         return result;\n     }\n \n+    /**\n+     * @return the ExecutorService used for repository scan\n+     */\n+    public ExecutorService getRepositorySearchExecutor() {\n+        ExecutorService result = lzRepositorySearchExecutor.get();\n+        repositorySearchExecutor = result;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEzMTU1NA=="}, "originalCommit": {"oid": "95e6658c5bec95fa39c5a6819fc1c58ab4d057fe"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDI5MjA2OnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwMDo0MjoxMFrOHcyRpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNzo1MDo0N1rOHc6EcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk0NTg5Mg==", "bodyText": "I was suggesting just to use getFixedExecutor() since it's fully available at this point during a run. It would be fine to leave it to be used later during indexing. IndexerParallelizer could be kept simple, and no additional configuration would be needed.", "url": "https://github.com/oracle/opengrok/pull/3254#discussion_r499945892", "createdAt": "2020-10-06T00:42:10Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java", "diffHunk": "@@ -480,7 +478,25 @@ public boolean hasAnnotation(File file) {\n      * @return collection of added repositories\n      */\n     public Collection<RepositoryInfo> addRepositories(File[] files) {\n-        return addRepositories(files, env.getNestingMaximum(), 0, false);\n+        ExecutorService executor = env.getIndexerParallelizer().getRepositorySearchExecutor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed9a1d80f5a5d49f54a12c6822847994173c2c84"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA3MzU4NQ==", "bodyText": "I see, makes sense.", "url": "https://github.com/oracle/opengrok/pull/3254#discussion_r500073585", "createdAt": "2020-10-06T07:50:47Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java", "diffHunk": "@@ -480,7 +478,25 @@ public boolean hasAnnotation(File file) {\n      * @return collection of added repositories\n      */\n     public Collection<RepositoryInfo> addRepositories(File[] files) {\n-        return addRepositories(files, env.getNestingMaximum(), 0, false);\n+        ExecutorService executor = env.getIndexerParallelizer().getRepositorySearchExecutor();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk0NTg5Mg=="}, "originalCommit": {"oid": "ed9a1d80f5a5d49f54a12c6822847994173c2c84"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4967, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}