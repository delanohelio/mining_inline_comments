{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzMzcyMzYw", "number": 3279, "title": "use statsd for indexer monitoring", "bodyText": "This change introduces remote monitoring of indexer via statsd registry in Micrometer. I wanted to use statsd for indexer because it does not require scraping and therefore the need for a web server. This would either conflict with already running web server on the same machine (assuming the indexer is usually run on the same machine as the web application) or would involve poking holes into firewall to allow the scraping to pass through to distinct TCP port.\nExample read-only configuration:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<java version=\"11.0.4\" class=\"java.beans.XMLDecoder\">\n <object class=\"org.opengrok.indexer.configuration.Configuration\" id=\"Configuration0\">\n\n  <void property=\"statsdConfig\">\n     <void property=\"port\">\n       <int>8125</int>\n     </void>\n     <void property=\"host\">\n       <string>localhost</string>\n     </void>\n     <void property=\"flavor\">\n       <string>etsy</string>\n     </void>\n  </void>\n\n </object>\n</java>\nThis was used to generate the graphs in #3248 (comment) (I used statsd-exporter for Prometheus and Grafana)\nThe metrics are not tagged unless the indexer is run per project.\nDuring testing I noticed that some of the metrics recorded in the final stages of indexing are not sent out even with buffering set to false and big delay at the end of the Indexer#main. This is not such a big deal given that statsd traffic is usually not reliable anyway (assuming UDP by default). I will definitely investigate.\nOnce this is merged in I will update https://github.com/oracle/opengrok/wiki/Monitoring with example rig configuration.", "createdAt": "2020-10-14T13:26:19Z", "url": "https://github.com/oracle/opengrok/pull/3279", "merged": true, "mergeCommit": {"oid": "0d7ace53e3bf35d6e3f78d37ef6ea4b1a697fcbe"}, "closed": true, "closedAt": "2020-10-15T10:20:30Z", "author": {"login": "vladak"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSc7VCgH2gAyNTAzMzcyMzYwOjRlNTE4Zjk5YWE1MmI5Yzc2NjRjOWFkMmJiODdhZmU1NWNkNDgzNDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdStxKfAFqTUwOTE1Mzk1OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4e518f99aa52b9c7664c9ad2bb87afe55cd48344", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/4e518f99aa52b9c7664c9ad2bb87afe55cd48344", "committedDate": "2020-10-14T13:10:01Z", "message": "introduce StatsdRegistry\n\nfixes #3245"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4MzU3NDk4", "url": "https://github.com/oracle/opengrok/pull/3279#pullrequestreview-508357498", "createdAt": "2020-10-14T13:40:24Z", "commit": {"oid": "4e518f99aa52b9c7664c9ad2bb87afe55cd48344"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMzo0MDoyNFrOHhTirg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMzo0ODoyM1rOHhT-_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY4NTIzMA==", "bodyText": "Cannot we use io.micrometer.statsd.StatsdFlavor enum? E.g. RemoteSCM is an enum and used in configuration so we should be good to go, right?", "url": "https://github.com/oracle/opengrok/pull/3279#discussion_r504685230", "createdAt": "2020-10-14T13:40:24Z", "author": {"login": "ahornace"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/StatsdConfig.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.indexer.configuration;\n+\n+/**\n+ * Configuration for Statsd metrics emitted by the Indexer via {@link org.opengrok.indexer.util.Statistics}.\n+ */\n+public class StatsdConfig {\n+    private int port;\n+    private String host;\n+    private boolean enabled;\n+    private String flavor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e518f99aa52b9c7664c9ad2bb87afe55cd48344"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY4Njc5NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public ArrayList<String> getSubFiles() {\n          \n          \n            \n                public List<String> getSubFiles() {", "url": "https://github.com/oracle/opengrok/pull/3279#discussion_r504686795", "createdAt": "2020-10-14T13:42:23Z", "author": {"login": "ahornace"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java", "diffHunk": "@@ -123,6 +123,12 @@\n \n     public WatchDogService watchDog;\n \n+    public ArrayList<String> getSubFiles() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e518f99aa52b9c7664c9ad2bb87afe55cd48344"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY4NjkxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private ArrayList<String> subFiles = new ArrayList<>();\n          \n          \n            \n                private List<String> subFiles = new ArrayList<>();", "url": "https://github.com/oracle/opengrok/pull/3279#discussion_r504686919", "createdAt": "2020-10-14T13:42:35Z", "author": {"login": "ahornace"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java", "diffHunk": "@@ -123,6 +123,12 @@\n \n     public WatchDogService watchDog;\n \n+    public ArrayList<String> getSubFiles() {\n+        return subFiles;\n+    }\n+\n+    private ArrayList<String> subFiles = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e518f99aa52b9c7664c9ad2bb87afe55cd48344"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY4Nzc4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (subFiles.size() > 0) {\n          \n          \n            \n                        if (!subFiles.isEmpty()) {", "url": "https://github.com/oracle/opengrok/pull/3279#discussion_r504687789", "createdAt": "2020-10-14T13:43:44Z", "author": {"login": "ahornace"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/Metrics.java", "diffHunk": "@@ -22,19 +22,105 @@\n  */\n package org.opengrok.indexer;\n \n+import io.micrometer.core.instrument.Clock;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Tag;\n import io.micrometer.core.instrument.binder.jvm.ClassLoaderMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmGcMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmThreadMetrics;\n import io.micrometer.core.instrument.binder.system.ProcessorMetrics;\n import io.micrometer.prometheus.PrometheusConfig;\n import io.micrometer.prometheus.PrometheusMeterRegistry;\n+import io.micrometer.statsd.StatsdConfig;\n+import io.micrometer.statsd.StatsdMeterRegistry;\n+import io.micrometer.statsd.StatsdFlavor;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.index.Indexer;\n+import org.opengrok.indexer.logger.LoggerFactory;\n \n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Encapsulates logic of meter registry setup and handling.\n+ * Generally, the web application publishes metrics to Prometheus and the Indexer to StatsD.\n+ */\n public final class Metrics {\n \n-    private static final PrometheusMeterRegistry registry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT);\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Metrics.class);\n+\n+    private static final StatsdConfig statsdConfig = new StatsdConfig() {\n+        @Override\n+        public String get(String k) {\n+            return null;\n+        }\n+\n+        @Override\n+        public StatsdFlavor flavor() {\n+            String flavor = RuntimeEnvironment.getInstance().getStatsdConfig().getFlavor().toLowerCase();\n+            switch (flavor) {\n+                case \"etsy\":\n+                    return StatsdFlavor.ETSY;\n+                case \"datadog\":\n+                    return StatsdFlavor.DATADOG;\n+                case \"sysdig\":\n+                    return StatsdFlavor.SYSDIG;\n+                case \"telegraf\":\n+                    return StatsdFlavor.TELEGRAF;\n+            }\n+\n+            return null;\n+        }\n+\n+        @Override\n+        public int port() {\n+            return RuntimeEnvironment.getInstance().getStatsdConfig().getPort();\n+        }\n+\n+        @Override\n+        public String host() {\n+            return RuntimeEnvironment.getInstance().getStatsdConfig().getHost();\n+        }\n+\n+        @Override\n+        public boolean buffered() {\n+            return true;\n+        }\n+    };\n+\n+    private static PrometheusMeterRegistry prometheusRegistry;\n+    private static StatsdMeterRegistry statsdRegistry;\n \n     static {\n+        MeterRegistry registry;\n+\n+        if (RuntimeEnvironment.getInstance().getStatsdConfig().isEnabled()) {\n+            LOGGER.log(Level.INFO, \"configuring StatsdRegistry\");\n+\n+            statsdRegistry = new StatsdMeterRegistry(statsdConfig, Clock.SYSTEM);\n+\n+            // Add tag for per-project reindex.\n+            ArrayList<String> subFiles = RuntimeEnvironment.getInstance().getSubFiles();\n+            if (subFiles.size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e518f99aa52b9c7664c9ad2bb87afe55cd48344"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY4ODgzNg==", "bodyText": "You can create the joined String directly with Collectors.joining()", "url": "https://github.com/oracle/opengrok/pull/3279#discussion_r504688836", "createdAt": "2020-10-14T13:44:44Z", "author": {"login": "ahornace"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/Metrics.java", "diffHunk": "@@ -22,19 +22,105 @@\n  */\n package org.opengrok.indexer;\n \n+import io.micrometer.core.instrument.Clock;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Tag;\n import io.micrometer.core.instrument.binder.jvm.ClassLoaderMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmGcMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmThreadMetrics;\n import io.micrometer.core.instrument.binder.system.ProcessorMetrics;\n import io.micrometer.prometheus.PrometheusConfig;\n import io.micrometer.prometheus.PrometheusMeterRegistry;\n+import io.micrometer.statsd.StatsdConfig;\n+import io.micrometer.statsd.StatsdMeterRegistry;\n+import io.micrometer.statsd.StatsdFlavor;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.index.Indexer;\n+import org.opengrok.indexer.logger.LoggerFactory;\n \n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Encapsulates logic of meter registry setup and handling.\n+ * Generally, the web application publishes metrics to Prometheus and the Indexer to StatsD.\n+ */\n public final class Metrics {\n \n-    private static final PrometheusMeterRegistry registry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT);\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Metrics.class);\n+\n+    private static final StatsdConfig statsdConfig = new StatsdConfig() {\n+        @Override\n+        public String get(String k) {\n+            return null;\n+        }\n+\n+        @Override\n+        public StatsdFlavor flavor() {\n+            String flavor = RuntimeEnvironment.getInstance().getStatsdConfig().getFlavor().toLowerCase();\n+            switch (flavor) {\n+                case \"etsy\":\n+                    return StatsdFlavor.ETSY;\n+                case \"datadog\":\n+                    return StatsdFlavor.DATADOG;\n+                case \"sysdig\":\n+                    return StatsdFlavor.SYSDIG;\n+                case \"telegraf\":\n+                    return StatsdFlavor.TELEGRAF;\n+            }\n+\n+            return null;\n+        }\n+\n+        @Override\n+        public int port() {\n+            return RuntimeEnvironment.getInstance().getStatsdConfig().getPort();\n+        }\n+\n+        @Override\n+        public String host() {\n+            return RuntimeEnvironment.getInstance().getStatsdConfig().getHost();\n+        }\n+\n+        @Override\n+        public boolean buffered() {\n+            return true;\n+        }\n+    };\n+\n+    private static PrometheusMeterRegistry prometheusRegistry;\n+    private static StatsdMeterRegistry statsdRegistry;\n \n     static {\n+        MeterRegistry registry;\n+\n+        if (RuntimeEnvironment.getInstance().getStatsdConfig().isEnabled()) {\n+            LOGGER.log(Level.INFO, \"configuring StatsdRegistry\");\n+\n+            statsdRegistry = new StatsdMeterRegistry(statsdConfig, Clock.SYSTEM);\n+\n+            // Add tag for per-project reindex.\n+            ArrayList<String> subFiles = RuntimeEnvironment.getInstance().getSubFiles();\n+            if (subFiles.size() > 0) {\n+                List<String> sList = subFiles.stream().\n+                        map(s -> s.startsWith(Indexer.PATH_SEPARATOR_STRING) ? s.substring(1) : s).\n+                        collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e518f99aa52b9c7664c9ad2bb87afe55cd48344"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY5MDkzNw==", "bodyText": "Why not use RuntimeEnvironment.getInstance().isIndexer() here as well?", "url": "https://github.com/oracle/opengrok/pull/3279#discussion_r504690937", "createdAt": "2020-10-14T13:46:23Z", "author": {"login": "ahornace"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/Metrics.java", "diffHunk": "@@ -22,19 +22,105 @@\n  */\n package org.opengrok.indexer;\n \n+import io.micrometer.core.instrument.Clock;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Tag;\n import io.micrometer.core.instrument.binder.jvm.ClassLoaderMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmGcMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmThreadMetrics;\n import io.micrometer.core.instrument.binder.system.ProcessorMetrics;\n import io.micrometer.prometheus.PrometheusConfig;\n import io.micrometer.prometheus.PrometheusMeterRegistry;\n+import io.micrometer.statsd.StatsdConfig;\n+import io.micrometer.statsd.StatsdMeterRegistry;\n+import io.micrometer.statsd.StatsdFlavor;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.index.Indexer;\n+import org.opengrok.indexer.logger.LoggerFactory;\n \n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Encapsulates logic of meter registry setup and handling.\n+ * Generally, the web application publishes metrics to Prometheus and the Indexer to StatsD.\n+ */\n public final class Metrics {\n \n-    private static final PrometheusMeterRegistry registry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT);\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Metrics.class);\n+\n+    private static final StatsdConfig statsdConfig = new StatsdConfig() {\n+        @Override\n+        public String get(String k) {\n+            return null;\n+        }\n+\n+        @Override\n+        public StatsdFlavor flavor() {\n+            String flavor = RuntimeEnvironment.getInstance().getStatsdConfig().getFlavor().toLowerCase();\n+            switch (flavor) {\n+                case \"etsy\":\n+                    return StatsdFlavor.ETSY;\n+                case \"datadog\":\n+                    return StatsdFlavor.DATADOG;\n+                case \"sysdig\":\n+                    return StatsdFlavor.SYSDIG;\n+                case \"telegraf\":\n+                    return StatsdFlavor.TELEGRAF;\n+            }\n+\n+            return null;\n+        }\n+\n+        @Override\n+        public int port() {\n+            return RuntimeEnvironment.getInstance().getStatsdConfig().getPort();\n+        }\n+\n+        @Override\n+        public String host() {\n+            return RuntimeEnvironment.getInstance().getStatsdConfig().getHost();\n+        }\n+\n+        @Override\n+        public boolean buffered() {\n+            return true;\n+        }\n+    };\n+\n+    private static PrometheusMeterRegistry prometheusRegistry;\n+    private static StatsdMeterRegistry statsdRegistry;\n \n     static {\n+        MeterRegistry registry;\n+\n+        if (RuntimeEnvironment.getInstance().getStatsdConfig().isEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e518f99aa52b9c7664c9ad2bb87afe55cd48344"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY5MTMyNw==", "bodyText": "Why use Metrics. prefix if the methods are in the same class?", "url": "https://github.com/oracle/opengrok/pull/3279#discussion_r504691327", "createdAt": "2020-10-14T13:46:52Z", "author": {"login": "ahornace"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/Metrics.java", "diffHunk": "@@ -45,8 +131,23 @@\n     private Metrics() {\n     }\n \n-    public static PrometheusMeterRegistry getRegistry() {\n-        return registry;\n+    public static PrometheusMeterRegistry getPrometheusRegistry() {\n+        return prometheusRegistry;\n+    }\n+\n+    private static StatsdMeterRegistry getStatsdRegistry() {\n+        return statsdRegistry;\n     }\n \n+    /**\n+     * Get registry based on running context.\n+     * @return MeterRegistry instance\n+     */\n+    public static MeterRegistry getRegistry() {\n+        if (RuntimeEnvironment.getInstance().isIndexer()) {\n+            return Metrics.getStatsdRegistry();\n+        } else {\n+            return Metrics.getPrometheusRegistry();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e518f99aa52b9c7664c9ad2bb87afe55cd48344"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY5MjQ3OQ==", "bodyText": "This can cause NPE if host or flavor will be null or it should not happen?", "url": "https://github.com/oracle/opengrok/pull/3279#discussion_r504692479", "createdAt": "2020-10-14T13:48:23Z", "author": {"login": "ahornace"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/StatsdConfig.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.indexer.configuration;\n+\n+/**\n+ * Configuration for Statsd metrics emitted by the Indexer via {@link org.opengrok.indexer.util.Statistics}.\n+ */\n+public class StatsdConfig {\n+    private int port;\n+    private String host;\n+    private boolean enabled;\n+    private String flavor;\n+\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    public void setHost(String host) {\n+        this.host = host;\n+    }\n+\n+    public int getPort() {\n+        return port;\n+    }\n+\n+    public void setPort(int port) {\n+        this.port = port;\n+    }\n+\n+    public String getFlavor() {\n+        return flavor;\n+    }\n+\n+    public void setFlavor(String flavor) {\n+        this.flavor = flavor;\n+    }\n+\n+    public boolean isEnabled() {\n+        return port != 0 && !host.isEmpty() && !flavor.isEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e518f99aa52b9c7664c9ad2bb87afe55cd48344"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "210accdf2eb149c68007fe1e271a94719db8290d", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/210accdf2eb149c68007fe1e271a94719db8290d", "committedDate": "2020-10-14T14:02:51Z", "message": "use List\n\nCo-authored-by: Adam Horn\u00e1\u010dek <adam.hornacek@icloud.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcc39b00cb3538e54fc48caf147925e68f37bc00", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/bcc39b00cb3538e54fc48caf147925e68f37bc00", "committedDate": "2020-10-14T14:03:06Z", "message": "use isEmpty\n\nCo-authored-by: Adam Horn\u00e1\u010dek <adam.hornacek@icloud.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5a515039bb6d4737c34709730215a9f6d4f12ba", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/d5a515039bb6d4737c34709730215a9f6d4f12ba", "committedDate": "2020-10-14T14:05:26Z", "message": "use List\n\nCo-authored-by: Adam Horn\u00e1\u010dek <adam.hornacek@icloud.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc358e4c858ca81e0904de436a49e7a73bd4d5dc", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/bc358e4c858ca81e0904de436a49e7a73bd4d5dc", "committedDate": "2020-10-14T14:07:51Z", "message": "use List"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11ad8b13ebef622b01bb53de061956923d2d9353", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/11ad8b13ebef622b01bb53de061956923d2d9353", "committedDate": "2020-10-14T14:08:38Z", "message": "Metrics. prefix unnecessary"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4Mzg4NTkw", "url": "https://github.com/oracle/opengrok/pull/3279#pullrequestreview-508388590", "createdAt": "2020-10-14T14:10:02Z", "commit": {"oid": "4e518f99aa52b9c7664c9ad2bb87afe55cd48344"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDoxMDowMlrOHhVAOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDoxMDowMlrOHhVAOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcwOTE3Nw==", "bodyText": "Let's say that statsd is disabled. What is the point of creating Prometheus registry if it cannot be accessed?", "url": "https://github.com/oracle/opengrok/pull/3279#discussion_r504709177", "createdAt": "2020-10-14T14:10:02Z", "author": {"login": "ahornace"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/Metrics.java", "diffHunk": "@@ -22,19 +22,105 @@\n  */\n package org.opengrok.indexer;\n \n+import io.micrometer.core.instrument.Clock;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Tag;\n import io.micrometer.core.instrument.binder.jvm.ClassLoaderMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmGcMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmThreadMetrics;\n import io.micrometer.core.instrument.binder.system.ProcessorMetrics;\n import io.micrometer.prometheus.PrometheusConfig;\n import io.micrometer.prometheus.PrometheusMeterRegistry;\n+import io.micrometer.statsd.StatsdConfig;\n+import io.micrometer.statsd.StatsdMeterRegistry;\n+import io.micrometer.statsd.StatsdFlavor;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.index.Indexer;\n+import org.opengrok.indexer.logger.LoggerFactory;\n \n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Encapsulates logic of meter registry setup and handling.\n+ * Generally, the web application publishes metrics to Prometheus and the Indexer to StatsD.\n+ */\n public final class Metrics {\n \n-    private static final PrometheusMeterRegistry registry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT);\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Metrics.class);\n+\n+    private static final StatsdConfig statsdConfig = new StatsdConfig() {\n+        @Override\n+        public String get(String k) {\n+            return null;\n+        }\n+\n+        @Override\n+        public StatsdFlavor flavor() {\n+            String flavor = RuntimeEnvironment.getInstance().getStatsdConfig().getFlavor().toLowerCase();\n+            switch (flavor) {\n+                case \"etsy\":\n+                    return StatsdFlavor.ETSY;\n+                case \"datadog\":\n+                    return StatsdFlavor.DATADOG;\n+                case \"sysdig\":\n+                    return StatsdFlavor.SYSDIG;\n+                case \"telegraf\":\n+                    return StatsdFlavor.TELEGRAF;\n+            }\n+\n+            return null;\n+        }\n+\n+        @Override\n+        public int port() {\n+            return RuntimeEnvironment.getInstance().getStatsdConfig().getPort();\n+        }\n+\n+        @Override\n+        public String host() {\n+            return RuntimeEnvironment.getInstance().getStatsdConfig().getHost();\n+        }\n+\n+        @Override\n+        public boolean buffered() {\n+            return true;\n+        }\n+    };\n+\n+    private static PrometheusMeterRegistry prometheusRegistry;\n+    private static StatsdMeterRegistry statsdRegistry;\n \n     static {\n+        MeterRegistry registry;\n+\n+        if (RuntimeEnvironment.getInstance().getStatsdConfig().isEnabled()) {\n+            LOGGER.log(Level.INFO, \"configuring StatsdRegistry\");\n+\n+            statsdRegistry = new StatsdMeterRegistry(statsdConfig, Clock.SYSTEM);\n+\n+            // Add tag for per-project reindex.\n+            ArrayList<String> subFiles = RuntimeEnvironment.getInstance().getSubFiles();\n+            if (subFiles.size() > 0) {\n+                List<String> sList = subFiles.stream().\n+                        map(s -> s.startsWith(Indexer.PATH_SEPARATOR_STRING) ? s.substring(1) : s).\n+                        collect(Collectors.toList());\n+                statsdRegistry.config().commonTags(Collections.singleton(Tag.of(\"projects\",\n+                        String.join(\",\", sList))));\n+            }\n+\n+            registry = statsdRegistry;\n+        } else {\n+            LOGGER.log(Level.INFO, \"configuring PrometheusRegistry\");\n+            prometheusRegistry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e518f99aa52b9c7664c9ad2bb87afe55cd48344"}, "originalPosition": 100}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "726539bb723d3513dc4c3e03360663febd92086b", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/726539bb723d3513dc4c3e03360663febd92086b", "committedDate": "2020-10-14T14:11:24Z", "message": "use Collectors.joining()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b2d082d9d449cff08a0de96477d4bea01038ffe", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/6b2d082d9d449cff08a0de96477d4bea01038ffe", "committedDate": "2020-10-14T14:15:04Z", "message": "check host"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4Mzk0MDM3", "url": "https://github.com/oracle/opengrok/pull/3279#pullrequestreview-508394037", "createdAt": "2020-10-14T14:15:18Z", "commit": {"oid": "4e518f99aa52b9c7664c9ad2bb87afe55cd48344"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDoxNToxOFrOHhVQjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDoxNToxOFrOHhVQjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcxMzM1OQ==", "bodyText": "This looks kind of iffy to me. We are filling subFiles in main method of Indexer. We are now basically counting on the fact that Metrics class won't be loaded by classloader before the list is filled.", "url": "https://github.com/oracle/opengrok/pull/3279#discussion_r504713359", "createdAt": "2020-10-14T14:15:18Z", "author": {"login": "ahornace"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/Metrics.java", "diffHunk": "@@ -22,19 +22,105 @@\n  */\n package org.opengrok.indexer;\n \n+import io.micrometer.core.instrument.Clock;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Tag;\n import io.micrometer.core.instrument.binder.jvm.ClassLoaderMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmGcMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmThreadMetrics;\n import io.micrometer.core.instrument.binder.system.ProcessorMetrics;\n import io.micrometer.prometheus.PrometheusConfig;\n import io.micrometer.prometheus.PrometheusMeterRegistry;\n+import io.micrometer.statsd.StatsdConfig;\n+import io.micrometer.statsd.StatsdMeterRegistry;\n+import io.micrometer.statsd.StatsdFlavor;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.index.Indexer;\n+import org.opengrok.indexer.logger.LoggerFactory;\n \n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Encapsulates logic of meter registry setup and handling.\n+ * Generally, the web application publishes metrics to Prometheus and the Indexer to StatsD.\n+ */\n public final class Metrics {\n \n-    private static final PrometheusMeterRegistry registry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT);\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Metrics.class);\n+\n+    private static final StatsdConfig statsdConfig = new StatsdConfig() {\n+        @Override\n+        public String get(String k) {\n+            return null;\n+        }\n+\n+        @Override\n+        public StatsdFlavor flavor() {\n+            String flavor = RuntimeEnvironment.getInstance().getStatsdConfig().getFlavor().toLowerCase();\n+            switch (flavor) {\n+                case \"etsy\":\n+                    return StatsdFlavor.ETSY;\n+                case \"datadog\":\n+                    return StatsdFlavor.DATADOG;\n+                case \"sysdig\":\n+                    return StatsdFlavor.SYSDIG;\n+                case \"telegraf\":\n+                    return StatsdFlavor.TELEGRAF;\n+            }\n+\n+            return null;\n+        }\n+\n+        @Override\n+        public int port() {\n+            return RuntimeEnvironment.getInstance().getStatsdConfig().getPort();\n+        }\n+\n+        @Override\n+        public String host() {\n+            return RuntimeEnvironment.getInstance().getStatsdConfig().getHost();\n+        }\n+\n+        @Override\n+        public boolean buffered() {\n+            return true;\n+        }\n+    };\n+\n+    private static PrometheusMeterRegistry prometheusRegistry;\n+    private static StatsdMeterRegistry statsdRegistry;\n \n     static {\n+        MeterRegistry registry;\n+\n+        if (RuntimeEnvironment.getInstance().getStatsdConfig().isEnabled()) {\n+            LOGGER.log(Level.INFO, \"configuring StatsdRegistry\");\n+\n+            statsdRegistry = new StatsdMeterRegistry(statsdConfig, Clock.SYSTEM);\n+\n+            // Add tag for per-project reindex.\n+            ArrayList<String> subFiles = RuntimeEnvironment.getInstance().getSubFiles();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e518f99aa52b9c7664c9ad2bb87afe55cd48344"}, "originalPosition": 88}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adcded7ba15cbef60be1fe057dd10061634a72c2", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/adcded7ba15cbef60be1fe057dd10061634a72c2", "committedDate": "2020-10-14T14:15:32Z", "message": "check flavor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b29d0efb9bca077d48972a1a49088915d0426ece", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/b29d0efb9bca077d48972a1a49088915d0426ece", "committedDate": "2020-10-14T14:18:27Z", "message": "do not create PrometheusRegistry when not indexer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93cb06b6ec8e87c26c8aa13cd6c6c553a1039ff8", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/93cb06b6ec8e87c26c8aa13cd6c6c553a1039ff8", "committedDate": "2020-10-14T14:26:58Z", "message": "make sure registry is initialized"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72b65170fe78001aeb4d9d8d8f161f5e392de6ed", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/72b65170fe78001aeb4d9d8d8f161f5e392de6ed", "committedDate": "2020-10-14T15:06:03Z", "message": "use StatsdFlavor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6abe1deea584d46f4575309866c170b81c2b2d73", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/6abe1deea584d46f4575309866c170b81c2b2d73", "committedDate": "2020-10-14T15:14:20Z", "message": "remove unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ec89ffc225dadb1345c58393ec7809c02f8416a", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/7ec89ffc225dadb1345c58393ec7809c02f8416a", "committedDate": "2020-10-14T15:29:59Z", "message": "add callback to set common tags"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88a39dd1101c5a47839b0889221bc1cbc00a3b68", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/88a39dd1101c5a47839b0889221bc1cbc00a3b68", "committedDate": "2020-10-14T15:55:10Z", "message": "simplify the condition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6446b42abbea0491e061d6d56b2a4be8950592c1", "author": {"user": {"login": "vladak", "name": "Vladimir Kotal"}}, "url": "https://github.com/oracle/opengrok/commit/6446b42abbea0491e061d6d56b2a4be8950592c1", "committedDate": "2020-10-14T18:46:00Z", "message": "add isEnabled() test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MTUzOTU4", "url": "https://github.com/oracle/opengrok/pull/3279#pullrequestreview-509153958", "createdAt": "2020-10-15T08:47:18Z", "commit": {"oid": "6446b42abbea0491e061d6d56b2a4be8950592c1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 237, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}