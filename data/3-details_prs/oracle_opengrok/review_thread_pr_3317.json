{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5ODg2NDQw", "number": 3317, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDoxODoxOFrOEx6_6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo0ODo0NVrOEx79dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNzgyMzE1OnYy", "diffSide": "RIGHT", "path": "opengrok-web/src/test/java/org/opengrok/web/DirectoryListingTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDoxODoxOFrOHoRqQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo0NToyNFrOHoS-lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk5NDQzMw==", "bodyText": "The test looks weird without any assertion. It's not clear what is being tested. I'd definitely welcome a comment. I don't know of a nice way how to express in JUnit that the code should not throw an exception. I guess it's implied :D", "url": "https://github.com/oracle/opengrok/pull/3317#discussion_r511994433", "createdAt": "2020-10-26T14:18:18Z", "author": {"login": "ahornace"}, "path": "opengrok-web/src/test/java/org/opengrok/web/DirectoryListingTest.java", "diffHunk": "@@ -365,4 +373,14 @@ public void directoryListing() throws Exception {\n             validateEntry((Element) nl.item(i));\n         }\n     }\n+\n+    @Test\n+    public void directoryListingWithEftarException() throws IOException, HistoryException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e82dcfd66c4f44d7ea95750e0465af441a2a4cb"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAxNjAyMA==", "bodyText": "right. added verify()", "url": "https://github.com/oracle/opengrok/pull/3317#discussion_r512016020", "createdAt": "2020-10-26T14:45:24Z", "author": {"login": "vladak"}, "path": "opengrok-web/src/test/java/org/opengrok/web/DirectoryListingTest.java", "diffHunk": "@@ -365,4 +373,14 @@ public void directoryListing() throws Exception {\n             validateEntry((Element) nl.item(i));\n         }\n     }\n+\n+    @Test\n+    public void directoryListingWithEftarException() throws IOException, HistoryException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk5NDQzMw=="}, "originalCommit": {"oid": "4e82dcfd66c4f44d7ea95750e0465af441a2a4cb"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNzk4MDcxOnYy", "diffSide": "RIGHT", "path": "opengrok-web/src/test/java/org/opengrok/web/DirectoryListingTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo0ODo0NVrOHoTJIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo0ODo0NVrOHoTJIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAxODcyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    verify(mockWriter, atLeast(20)). write(anyString());\n          \n          \n            \n                    verify(mockWriter, atLeast(20)).write(anyString());", "url": "https://github.com/oracle/opengrok/pull/3317#discussion_r512018721", "createdAt": "2020-10-26T14:48:45Z", "author": {"login": "ahornace"}, "path": "opengrok-web/src/test/java/org/opengrok/web/DirectoryListingTest.java", "diffHunk": "@@ -365,4 +372,16 @@ public void directoryListing() throws Exception {\n             validateEntry((Element) nl.item(i));\n         }\n     }\n+\n+    @Test\n+    public void directoryListingWithEftarException() throws IOException, HistoryException {\n+        EftarFileReader mockReader = mock(EftarFileReader.class);\n+        when(mockReader.getNode(anyString())).thenThrow(IOException.class);\n+        DirectoryListing instance = new DirectoryListing(mockReader);\n+        File file = new File(directory, \"foo\");\n+        StringWriter mockWriter = spy(StringWriter.class);\n+        instance.extraListTo(\"ctx\", directory, mockWriter, directory.getPath(),\n+                Collections.singletonList(new DirectoryEntry(file)));\n+        verify(mockWriter, atLeast(20)). write(anyString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "932bd238d11b61b8e1e7cd3a9d966dc8487a2439"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 156, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}