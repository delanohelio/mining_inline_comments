{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMTI3NDY2", "number": 3075, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMDozNTo0N1rODpDb2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMDozNTo0N1rODpDb2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0Mzc0NDkxOnYy", "diffSide": "RIGHT", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/util/PortChecker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMDozNTo0N1rOF3_CWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzoyMzo0MVrOF4EtZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI0ODc5NQ==", "bodyText": "I wonder why it needs to check DGRAM socket as well.", "url": "https://github.com/oracle/opengrok/pull/3075#discussion_r394248795", "createdAt": "2020-03-18T10:35:47Z", "author": {"login": "vladak"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/util/PortChecker.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.opengrok.indexer.util;\n+\n+import java.io.IOException;\n+import java.net.DatagramSocket;\n+import java.net.ServerSocket;\n+\n+/**\n+ * Represents a helper for checking a network port, borrowed from Apache\n+ * Usergrid's AvailablePortFinder.java.\n+ */\n+public class PortChecker {\n+    /** The minimum number of server port number. */\n+    public static final int MIN_PORT_NUMBER = 1;\n+\n+    /** The maximum number of server port number. */\n+    public static final int MAX_PORT_NUMBER = 65535;\n+\n+    /**\n+     * Checks to see if a specific port is available.\n+     *\n+     * @param port the port to check for availability\n+     */\n+    public static boolean available(int port) {\n+        if (port < MIN_PORT_NUMBER || port > MAX_PORT_NUMBER) {\n+            throw new IllegalArgumentException(\"Port out of valid range: \" + port);\n+        }\n+\n+        ServerSocket ss = null;\n+        DatagramSocket ds = null;\n+        try {\n+            ss = new ServerSocket(port);\n+            ss.setReuseAddress(true);\n+            ds = new DatagramSocket(port);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5ffd943a26b44287a565496f71a53149d096f81"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM0MTczNQ==", "bodyText": "Apache code states port as available only if not TCP nor UDP. I borrowed as-is", "url": "https://github.com/oracle/opengrok/pull/3075#discussion_r394341735", "createdAt": "2020-03-18T13:23:41Z", "author": {"login": "idodeclare"}, "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/util/PortChecker.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.opengrok.indexer.util;\n+\n+import java.io.IOException;\n+import java.net.DatagramSocket;\n+import java.net.ServerSocket;\n+\n+/**\n+ * Represents a helper for checking a network port, borrowed from Apache\n+ * Usergrid's AvailablePortFinder.java.\n+ */\n+public class PortChecker {\n+    /** The minimum number of server port number. */\n+    public static final int MIN_PORT_NUMBER = 1;\n+\n+    /** The maximum number of server port number. */\n+    public static final int MAX_PORT_NUMBER = 65535;\n+\n+    /**\n+     * Checks to see if a specific port is available.\n+     *\n+     * @param port the port to check for availability\n+     */\n+    public static boolean available(int port) {\n+        if (port < MIN_PORT_NUMBER || port > MAX_PORT_NUMBER) {\n+            throw new IllegalArgumentException(\"Port out of valid range: \" + port);\n+        }\n+\n+        ServerSocket ss = null;\n+        DatagramSocket ds = null;\n+        try {\n+            ss = new ServerSocket(port);\n+            ss.setReuseAddress(true);\n+            ds = new DatagramSocket(port);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI0ODc5NQ=="}, "originalCommit": {"oid": "f5ffd943a26b44287a565496f71a53149d096f81"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 198, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}