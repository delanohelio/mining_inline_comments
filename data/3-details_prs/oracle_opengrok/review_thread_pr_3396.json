{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyOTk0NTI5", "number": 3396, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxNjo1NTo0OFrOFBelSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxNjo1NTo0OFrOFBelSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MDkzOTYwOnYy", "diffSide": "RIGHT", "path": "suggester/src/main/java/org/opengrok/suggest/Suggester.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxNjo1NTo0OFrOIAMu0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwOTowNToyMVrOIBOkvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA3OTUwNA==", "bodyText": "What would you think about also short-circuiting the init- and rebuild-runnables to check terminating?", "url": "https://github.com/oracle/opengrok/pull/3396#discussion_r537079504", "createdAt": "2020-12-06T16:55:48Z", "author": {"login": "idodeclare"}, "path": "suggester/src/main/java/org/opengrok/suggest/Suggester.java", "diffHunk": "@@ -278,8 +279,12 @@ public void rebuild(final Collection<NamedIndexDir> indexDirs) {\n         rebuildLock.unlock();\n \n         synchronized (lock) {\n+            if (terminating) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62b8e45d3cd5ddf17881b0855c28f4c6fde8dfdf"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM4NzUxMw==", "bodyText": "Inside the runnables the benefit is small I think however checking it in init() makes sense.", "url": "https://github.com/oracle/opengrok/pull/3396#discussion_r537387513", "createdAt": "2020-12-07T10:18:14Z", "author": {"login": "vladak"}, "path": "suggester/src/main/java/org/opengrok/suggest/Suggester.java", "diffHunk": "@@ -278,8 +279,12 @@ public void rebuild(final Collection<NamedIndexDir> indexDirs) {\n         rebuildLock.unlock();\n \n         synchronized (lock) {\n+            if (terminating) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA3OTUwNA=="}, "originalCommit": {"oid": "62b8e45d3cd5ddf17881b0855c28f4c6fde8dfdf"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc0NzgzOQ==", "bodyText": "The runnables are the items potentially in queue. It makes sense for them to be terminating-aware so that when they're awakened they do no unnecessary work. If you have a for-loop that is just submitting to an asynchronous executor (as this code does), you have a minuscule amount of time where being terminating-aware has a chance of being effective.\nMoreover, shutdown() for a work-stealing pool only prevent new tasks from being submitted; it is an \"orderly shutdown \" that allows all submitted tasks to be executed. So again, the runnables should be terminating-aware for there to be any realistic chance of avoiding work.\nI recommend reverting to your commit 62b8e45 and just addressing the runnables.", "url": "https://github.com/oracle/opengrok/pull/3396#discussion_r537747839", "createdAt": "2020-12-07T18:54:49Z", "author": {"login": "idodeclare"}, "path": "suggester/src/main/java/org/opengrok/suggest/Suggester.java", "diffHunk": "@@ -278,8 +279,12 @@ public void rebuild(final Collection<NamedIndexDir> indexDirs) {\n         rebuildLock.unlock();\n \n         synchronized (lock) {\n+            if (terminating) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA3OTUwNA=="}, "originalCommit": {"oid": "62b8e45d3cd5ddf17881b0855c28f4c6fde8dfdf"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE1ODI2OA==", "bodyText": "You're right, addressing this in the runnables is better and actually more readable.", "url": "https://github.com/oracle/opengrok/pull/3396#discussion_r538158268", "createdAt": "2020-12-08T09:05:21Z", "author": {"login": "vladak"}, "path": "suggester/src/main/java/org/opengrok/suggest/Suggester.java", "diffHunk": "@@ -278,8 +279,12 @@ public void rebuild(final Collection<NamedIndexDir> indexDirs) {\n         rebuildLock.unlock();\n \n         synchronized (lock) {\n+            if (terminating) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA3OTUwNA=="}, "originalCommit": {"oid": "62b8e45d3cd5ddf17881b0855c28f4c6fde8dfdf"}, "originalPosition": 96}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4887, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}