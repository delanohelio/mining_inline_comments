{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExOTkzODYy", "number": 77, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNzoyMDozNlrOD4bY5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNzoyMjoyOVrOD4bbFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDk1NTkwOnYy", "diffSide": "RIGHT", "path": "src/test/java/io/temporal/workflow/MetricsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNzoyMDozNlrOGPP6Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMzo1ODo1N1rOGPYihg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY0MjUxNQ==", "bodyText": "Are these defined somewhere as consts or is there a common way to generate them?", "url": "https://github.com/temporalio/sdk-java/pull/77#discussion_r418642515", "createdAt": "2020-05-01T17:20:36Z", "author": {"login": "shawnhathaway"}, "path": "src/test/java/io/temporal/workflow/MetricsTest.java", "diffHunk": "@@ -335,4 +354,63 @@ public WorkflowInvoker interceptExecuteWorkflow(\n       return new BaseWorkflowInvoker(i, next);\n     }\n   }\n+\n+  @Test\n+  public void testTemporalFailureMetric() throws InterruptedException {\n+    setUp(\n+        com.uber.m3.util.Duration.ofMillis(300),\n+        WorkerFactoryOptions.newBuilder()\n+            .setWorkflowInterceptor(new CorruptedSignalWorkflowInterceptor())\n+            .build());\n+\n+    try {\n+      WorkflowServiceStubs serviceStubs =\n+          testEnvironment.getWorkflowClient().getWorkflowServiceStubs();\n+\n+      serviceStubs.blockingStub().describeNamespace(DescribeNamespaceRequest.newBuilder().build());\n+      fail(\"failure expected\");\n+    } catch (StatusRuntimeException e) {\n+      assertEquals(Status.Code.UNIMPLEMENTED, e.getStatus().getCode());\n+    }\n+\n+    // Wait for reporter\n+    Thread.sleep(600);\n+\n+    verify(reporter, times(1))\n+        .reportCounter(\"temporal-DescribeNamespace.temporal-request\", new HashMap<>(), 1);\n+    verify(reporter, times(1))\n+        .reportCounter(\"temporal-DescribeNamespace.temporal-error\", new HashMap<>(), 1);\n+    testEnvironment.close();\n+  }\n+\n+  @Test\n+  public void testTemporalInvalidRequestMetric() throws InterruptedException {\n+    setUp(\n+        com.uber.m3.util.Duration.ofMillis(300),\n+        WorkerFactoryOptions.newBuilder()\n+            .setWorkflowInterceptor(new CorruptedSignalWorkflowInterceptor())\n+            .build());\n+\n+    try {\n+      WorkflowServiceStubs serviceStubs =\n+          testEnvironment.getWorkflowClient().getWorkflowServiceStubs();\n+\n+      serviceStubs\n+          .blockingStub()\n+          .startWorkflowExecution(StartWorkflowExecutionRequest.newBuilder().build());\n+      fail(\"failure expected\");\n+    } catch (StatusRuntimeException e) {\n+      assertEquals(Status.Code.INVALID_ARGUMENT, e.getStatus().getCode());\n+    }\n+\n+    // Wait for reporter\n+    Thread.sleep(600);\n+\n+    verify(reporter, times(1))\n+        .reportCounter(\"temporal-StartWorkflowExecution.temporal-request\", new HashMap<>(), 1);\n+    verify(reporter, times(1))\n+        .reportCounter(\n+            \"temporal-StartWorkflowExecution.temporal-invalid-request\", new HashMap<>(), 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bc9f649ab9e354bec58af134f4507da75a2365d"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc4Mzg3OA==", "bodyText": "Replaced with constants", "url": "https://github.com/temporalio/sdk-java/pull/77#discussion_r418783878", "createdAt": "2020-05-01T23:58:57Z", "author": {"login": "mfateev"}, "path": "src/test/java/io/temporal/workflow/MetricsTest.java", "diffHunk": "@@ -335,4 +354,63 @@ public WorkflowInvoker interceptExecuteWorkflow(\n       return new BaseWorkflowInvoker(i, next);\n     }\n   }\n+\n+  @Test\n+  public void testTemporalFailureMetric() throws InterruptedException {\n+    setUp(\n+        com.uber.m3.util.Duration.ofMillis(300),\n+        WorkerFactoryOptions.newBuilder()\n+            .setWorkflowInterceptor(new CorruptedSignalWorkflowInterceptor())\n+            .build());\n+\n+    try {\n+      WorkflowServiceStubs serviceStubs =\n+          testEnvironment.getWorkflowClient().getWorkflowServiceStubs();\n+\n+      serviceStubs.blockingStub().describeNamespace(DescribeNamespaceRequest.newBuilder().build());\n+      fail(\"failure expected\");\n+    } catch (StatusRuntimeException e) {\n+      assertEquals(Status.Code.UNIMPLEMENTED, e.getStatus().getCode());\n+    }\n+\n+    // Wait for reporter\n+    Thread.sleep(600);\n+\n+    verify(reporter, times(1))\n+        .reportCounter(\"temporal-DescribeNamespace.temporal-request\", new HashMap<>(), 1);\n+    verify(reporter, times(1))\n+        .reportCounter(\"temporal-DescribeNamespace.temporal-error\", new HashMap<>(), 1);\n+    testEnvironment.close();\n+  }\n+\n+  @Test\n+  public void testTemporalInvalidRequestMetric() throws InterruptedException {\n+    setUp(\n+        com.uber.m3.util.Duration.ofMillis(300),\n+        WorkerFactoryOptions.newBuilder()\n+            .setWorkflowInterceptor(new CorruptedSignalWorkflowInterceptor())\n+            .build());\n+\n+    try {\n+      WorkflowServiceStubs serviceStubs =\n+          testEnvironment.getWorkflowClient().getWorkflowServiceStubs();\n+\n+      serviceStubs\n+          .blockingStub()\n+          .startWorkflowExecution(StartWorkflowExecutionRequest.newBuilder().build());\n+      fail(\"failure expected\");\n+    } catch (StatusRuntimeException e) {\n+      assertEquals(Status.Code.INVALID_ARGUMENT, e.getStatus().getCode());\n+    }\n+\n+    // Wait for reporter\n+    Thread.sleep(600);\n+\n+    verify(reporter, times(1))\n+        .reportCounter(\"temporal-StartWorkflowExecution.temporal-request\", new HashMap<>(), 1);\n+    verify(reporter, times(1))\n+        .reportCounter(\n+            \"temporal-StartWorkflowExecution.temporal-invalid-request\", new HashMap<>(), 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY0MjUxNQ=="}, "originalCommit": {"oid": "8bc9f649ab9e354bec58af134f4507da75a2365d"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDk2MTQ4OnYy", "diffSide": "RIGHT", "path": "src/test/java/io/temporal/workflow/MetricsTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNzoyMjoyOVrOGPP9uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNjozNTowNlrOGPkcqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY0MzM4NA==", "bodyText": "Where does 600 come from? Is this long enough for most/all developers who will run these?", "url": "https://github.com/temporalio/sdk-java/pull/77#discussion_r418643384", "createdAt": "2020-05-01T17:22:29Z", "author": {"login": "shawnhathaway"}, "path": "src/test/java/io/temporal/workflow/MetricsTest.java", "diffHunk": "@@ -335,4 +354,63 @@ public WorkflowInvoker interceptExecuteWorkflow(\n       return new BaseWorkflowInvoker(i, next);\n     }\n   }\n+\n+  @Test\n+  public void testTemporalFailureMetric() throws InterruptedException {\n+    setUp(\n+        com.uber.m3.util.Duration.ofMillis(300),\n+        WorkerFactoryOptions.newBuilder()\n+            .setWorkflowInterceptor(new CorruptedSignalWorkflowInterceptor())\n+            .build());\n+\n+    try {\n+      WorkflowServiceStubs serviceStubs =\n+          testEnvironment.getWorkflowClient().getWorkflowServiceStubs();\n+\n+      serviceStubs.blockingStub().describeNamespace(DescribeNamespaceRequest.newBuilder().build());\n+      fail(\"failure expected\");\n+    } catch (StatusRuntimeException e) {\n+      assertEquals(Status.Code.UNIMPLEMENTED, e.getStatus().getCode());\n+    }\n+\n+    // Wait for reporter\n+    Thread.sleep(600);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bc9f649ab9e354bec58af134f4507da75a2365d"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc4Mzg3MQ==", "bodyText": "Changed to more reasonable value.", "url": "https://github.com/temporalio/sdk-java/pull/77#discussion_r418783871", "createdAt": "2020-05-01T23:58:57Z", "author": {"login": "mfateev"}, "path": "src/test/java/io/temporal/workflow/MetricsTest.java", "diffHunk": "@@ -335,4 +354,63 @@ public WorkflowInvoker interceptExecuteWorkflow(\n       return new BaseWorkflowInvoker(i, next);\n     }\n   }\n+\n+  @Test\n+  public void testTemporalFailureMetric() throws InterruptedException {\n+    setUp(\n+        com.uber.m3.util.Duration.ofMillis(300),\n+        WorkerFactoryOptions.newBuilder()\n+            .setWorkflowInterceptor(new CorruptedSignalWorkflowInterceptor())\n+            .build());\n+\n+    try {\n+      WorkflowServiceStubs serviceStubs =\n+          testEnvironment.getWorkflowClient().getWorkflowServiceStubs();\n+\n+      serviceStubs.blockingStub().describeNamespace(DescribeNamespaceRequest.newBuilder().build());\n+      fail(\"failure expected\");\n+    } catch (StatusRuntimeException e) {\n+      assertEquals(Status.Code.UNIMPLEMENTED, e.getStatus().getCode());\n+    }\n+\n+    // Wait for reporter\n+    Thread.sleep(600);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY0MzM4NA=="}, "originalCommit": {"oid": "8bc9f649ab9e354bec58af134f4507da75a2365d"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk3ODk4NQ==", "bodyText": "It looks like a smaller value leads to intermittent test failures. So keeping it at 600.", "url": "https://github.com/temporalio/sdk-java/pull/77#discussion_r418978985", "createdAt": "2020-05-02T16:35:06Z", "author": {"login": "mfateev"}, "path": "src/test/java/io/temporal/workflow/MetricsTest.java", "diffHunk": "@@ -335,4 +354,63 @@ public WorkflowInvoker interceptExecuteWorkflow(\n       return new BaseWorkflowInvoker(i, next);\n     }\n   }\n+\n+  @Test\n+  public void testTemporalFailureMetric() throws InterruptedException {\n+    setUp(\n+        com.uber.m3.util.Duration.ofMillis(300),\n+        WorkerFactoryOptions.newBuilder()\n+            .setWorkflowInterceptor(new CorruptedSignalWorkflowInterceptor())\n+            .build());\n+\n+    try {\n+      WorkflowServiceStubs serviceStubs =\n+          testEnvironment.getWorkflowClient().getWorkflowServiceStubs();\n+\n+      serviceStubs.blockingStub().describeNamespace(DescribeNamespaceRequest.newBuilder().build());\n+      fail(\"failure expected\");\n+    } catch (StatusRuntimeException e) {\n+      assertEquals(Status.Code.UNIMPLEMENTED, e.getStatus().getCode());\n+    }\n+\n+    // Wait for reporter\n+    Thread.sleep(600);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY0MzM4NA=="}, "originalCommit": {"oid": "8bc9f649ab9e354bec58af134f4507da75a2365d"}, "originalPosition": 95}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1759, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}