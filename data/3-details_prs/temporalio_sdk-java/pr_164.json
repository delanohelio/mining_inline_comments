{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5NzEwMjY4", "number": 164, "title": "Renamed EncodedValue to EncodedValues to support multiple details", "bodyText": "Updated DataConverter API to support extracting individual values from the serialized list.\nRenamed EncodedValue to EncodedValues.\nAdded ApplicationFailure factories for clarity.", "createdAt": "2020-07-31T01:37:20Z", "url": "https://github.com/temporalio/sdk-java/pull/164", "merged": true, "mergeCommit": {"oid": "19c701df8d75040d87db4aea1fd38876bb33b3a8"}, "closed": true, "closedAt": "2020-07-31T02:49:48Z", "author": {"login": "mfateev"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc6KBQpgH2gAyNDU5NzEwMjY4OmUzOWQxZmI3ODE1M2RjZDJlMmMxNjFiOTNkMDA5MGE3ZDY0YWMzNzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc6LEw9gFqTQ1ODg4NTc2Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e39d1fb78153dcd2e2c161b93d0090a7d64ac377", "author": {"user": {"login": "mfateev", "name": "Maxim Fateev"}}, "url": "https://github.com/temporalio/sdk-java/commit/e39d1fb78153dcd2e2c161b93d0090a7d64ac377", "committedDate": "2020-07-31T01:34:07Z", "message": "multiple details"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4ODY5Mzk5", "url": "https://github.com/temporalio/sdk-java/pull/164#pullrequestreview-458869399", "createdAt": "2020-07-31T01:46:15Z", "commit": {"oid": "e39d1fb78153dcd2e2c161b93d0090a7d64ac377"}, "state": "APPROVED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMTo0NjoxNVrOG55bJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMjowODoxMlrOG55vkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM2Mjg1NQ==", "bodyText": "the first clause of this condition checks that parameterTypes is not null, so this parameterTypes==null check is unnecessary, right? Or did you mean to check if genericParameterTypes is null?", "url": "https://github.com/temporalio/sdk-java/pull/164#discussion_r463362855", "createdAt": "2020-07-31T01:46:15Z", "author": {"login": "mastermanu"}, "path": "src/main/java/io/temporal/common/converter/DataConverter.java", "diffHunk": "@@ -51,30 +53,56 @@ static DataConverter getDefaultInstance() {\n   Optional<Payloads> toPayloads(Object... values) throws DataConverterException;\n \n   /**\n-   * Implements conversion of a single value.\n+   * Implements conversion of an array of values of different types. Useful for deserializing\n+   * arguments of function invocations.\n    *\n-   * @param content Serialized value to convert to a Java object.\n+   * @param index index of the value in the payloads\n+   * @param content serialized value to convert to Java objects.\n    * @param parameterType type of the parameter stored in the content\n    * @param genericParameterType generic type of the parameter stored in the content\n    * @return converted Java object\n    * @throws DataConverterException if conversion of the data passed as parameter failed for any\n    *     reason.\n    */\n-  <T> T fromPayloads(Optional<Payloads> content, Class<T> parameterType, Type genericParameterType)\n+  <T> T fromPayloads(\n+      int index, Optional<Payloads> content, Class<T> parameterType, Type genericParameterType)\n       throws DataConverterException;\n \n-  /**\n-   * Implements conversion of an array of values of different types. Useful for deserializing\n-   * arguments of function invocations.\n-   *\n-   * @param content serialized value to convert to Java objects.\n-   * @param parameterTypes types of the parameters stored in the content\n-   * @param genericParameterTypes generic types of the parameters stored in the content\n-   * @return array of converted Java objects\n-   * @throws DataConverterException if conversion of the data passed as parameter failed for any\n-   *     reason.\n-   */\n-  Object[] arrayFromPayloads(\n-      Optional<Payloads> content, Class<?>[] parameterTypes, Type[] genericParameterTypes)\n-      throws DataConverterException;\n+  static Object[] arrayFromPayloads(\n+      DataConverter converter,\n+      Optional<Payloads> content,\n+      Class<?>[] parameterTypes,\n+      Type[] genericParameterTypes)\n+      throws DataConverterException {\n+    if (parameterTypes != null\n+        && (parameterTypes == null || parameterTypes.length != genericParameterTypes.length)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e39d1fb78153dcd2e2c161b93d0090a7d64ac377"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM2MzgyNw==", "bodyText": "what if the count of payloads is much greater than that of the parameters? Basically does the user need to know that they are missing out on some payloads? Or is this well understood?", "url": "https://github.com/temporalio/sdk-java/pull/164#discussion_r463363827", "createdAt": "2020-07-31T01:50:28Z", "author": {"login": "mastermanu"}, "path": "src/main/java/io/temporal/common/converter/DataConverter.java", "diffHunk": "@@ -51,30 +53,56 @@ static DataConverter getDefaultInstance() {\n   Optional<Payloads> toPayloads(Object... values) throws DataConverterException;\n \n   /**\n-   * Implements conversion of a single value.\n+   * Implements conversion of an array of values of different types. Useful for deserializing\n+   * arguments of function invocations.\n    *\n-   * @param content Serialized value to convert to a Java object.\n+   * @param index index of the value in the payloads\n+   * @param content serialized value to convert to Java objects.\n    * @param parameterType type of the parameter stored in the content\n    * @param genericParameterType generic type of the parameter stored in the content\n    * @return converted Java object\n    * @throws DataConverterException if conversion of the data passed as parameter failed for any\n    *     reason.\n    */\n-  <T> T fromPayloads(Optional<Payloads> content, Class<T> parameterType, Type genericParameterType)\n+  <T> T fromPayloads(\n+      int index, Optional<Payloads> content, Class<T> parameterType, Type genericParameterType)\n       throws DataConverterException;\n \n-  /**\n-   * Implements conversion of an array of values of different types. Useful for deserializing\n-   * arguments of function invocations.\n-   *\n-   * @param content serialized value to convert to Java objects.\n-   * @param parameterTypes types of the parameters stored in the content\n-   * @param genericParameterTypes generic types of the parameters stored in the content\n-   * @return array of converted Java objects\n-   * @throws DataConverterException if conversion of the data passed as parameter failed for any\n-   *     reason.\n-   */\n-  Object[] arrayFromPayloads(\n-      Optional<Payloads> content, Class<?>[] parameterTypes, Type[] genericParameterTypes)\n-      throws DataConverterException;\n+  static Object[] arrayFromPayloads(\n+      DataConverter converter,\n+      Optional<Payloads> content,\n+      Class<?>[] parameterTypes,\n+      Type[] genericParameterTypes)\n+      throws DataConverterException {\n+    if (parameterTypes != null\n+        && (parameterTypes == null || parameterTypes.length != genericParameterTypes.length)) {\n+      throw new IllegalArgumentException(\n+          \"parameterTypes don't match length of valueTypes: \"\n+              + Arrays.toString(parameterTypes)\n+              + \"<>\"\n+              + Arrays.toString(genericParameterTypes));\n+    }\n+\n+    int length = parameterTypes.length;\n+    Object[] result = new Object[length];\n+    if (!content.isPresent()) {\n+      // Return defaults for all the parameters\n+      for (int i = 0; i < parameterTypes.length; i++) {\n+        result[i] = Defaults.defaultValue((Class<?>) genericParameterTypes[i]);\n+      }\n+      return result;\n+    }\n+    Payloads payloads = content.get();\n+    int count = payloads.getPayloadsCount();\n+    for (int i = 0; i < parameterTypes.length; i++) {\n+      Class<?> pt = parameterTypes[i];\n+      Type gt = genericParameterTypes[i];\n+      if (i >= count) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e39d1fb78153dcd2e2c161b93d0090a7d64ac377"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM2NTE3Nw==", "bodyText": "we are guaranteed that at least one of values / payloads is not null right? Basically, values and payloads cannot both be null because (Object... values) guarantees values is at least of length 0 if that constructor is used?", "url": "https://github.com/temporalio/sdk-java/pull/164#discussion_r463365177", "createdAt": "2020-07-31T01:56:07Z", "author": {"login": "mastermanu"}, "path": "src/main/java/io/temporal/common/converter/EncodedValues.java", "diffHunk": "@@ -58,22 +58,35 @@ public void setDataConverter(DataConverter converter) {\n   }\n \n   @Override\n-  public <T> T get(Class<T> parameterType) throws DataConverterException {\n-    if (value != null) {\n-      @SuppressWarnings(\"unchecked\")\n-      T result = (T) value.orElse(null);\n-      return result;\n+  public int getSize() {\n+    if (values != null) {\n+      return values.length;\n     } else {\n-      if (converter == null) {\n-        throw new IllegalStateException(\"converter not set\");\n+      if (payloads.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e39d1fb78153dcd2e2c161b93d0090a7d64ac377"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM2NTkwOA==", "bodyText": "No need to initialize / cache the converted object into the values array right?", "url": "https://github.com/temporalio/sdk-java/pull/164#discussion_r463365908", "createdAt": "2020-07-31T01:59:13Z", "author": {"login": "mastermanu"}, "path": "src/main/java/io/temporal/common/converter/EncodedValues.java", "diffHunk": "@@ -58,22 +58,35 @@ public void setDataConverter(DataConverter converter) {\n   }\n \n   @Override\n-  public <T> T get(Class<T> parameterType) throws DataConverterException {\n-    if (value != null) {\n-      @SuppressWarnings(\"unchecked\")\n-      T result = (T) value.orElse(null);\n-      return result;\n+  public int getSize() {\n+    if (values != null) {\n+      return values.length;\n     } else {\n-      if (converter == null) {\n-        throw new IllegalStateException(\"converter not set\");\n+      if (payloads.isPresent()) {\n+        return payloads.get().getPayloadsCount();\n+      } else {\n+        return 0;\n       }\n-      return converter.fromPayloads(payloads, parameterType, parameterType);\n     }\n   }\n \n   @Override\n-  public <T> T get(Class<T> parameterType, Type genericParameterType)\n+  public <T> T get(int index, Class<T> parameterType) throws DataConverterException {\n+    return get(index, parameterType, parameterType);\n+  }\n+\n+  @Override\n+  public <T> T get(int index, Class<T> parameterType, Type genericParameterType)\n       throws DataConverterException {\n-    return converter.fromPayloads(payloads, parameterType, genericParameterType);\n+    if (values != null) {\n+      @SuppressWarnings(\"unchecked\")\n+      T result = (T) values[index];\n+      return result;\n+    } else {\n+      if (converter == null) {\n+        throw new IllegalStateException(\"converter not set\");\n+      }\n+      return converter.fromPayloads(index, payloads, parameterType, genericParameterType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e39d1fb78153dcd2e2c161b93d0090a7d64ac377"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM2NjU0OQ==", "bodyText": "didn't quite follow the 2nd sentence of this comment. did you mean to say if the type is NOT included", "url": "https://github.com/temporalio/sdk-java/pull/164#discussion_r463366549", "createdAt": "2020-07-31T02:01:46Z", "author": {"login": "mastermanu"}, "path": "src/main/java/io/temporal/failure/ApplicationFailure.java", "diffHunk": "@@ -51,49 +51,47 @@\n  */\n public final class ApplicationFailure extends TemporalFailure {\n   private final String type;\n-  private final Value details;\n+  private final Values details;\n   private boolean nonRetryable;\n \n   /**\n+   * New ApplicationFailure with {@link #isNonRetryable()} flag set to false. Note that this", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e39d1fb78153dcd2e2c161b93d0090a7d64ac377"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM2NjkwNg==", "bodyText": "why not just call it newRetryableFailure?", "url": "https://github.com/temporalio/sdk-java/pull/164#discussion_r463366906", "createdAt": "2020-07-31T02:03:09Z", "author": {"login": "mastermanu"}, "path": "src/main/java/io/temporal/failure/ApplicationFailure.java", "diffHunk": "@@ -51,49 +51,47 @@\n  */\n public final class ApplicationFailure extends TemporalFailure {\n   private final String type;\n-  private final Value details;\n+  private final Values details;\n   private boolean nonRetryable;\n \n   /**\n+   * New ApplicationFailure with {@link #isNonRetryable()} flag set to false. Note that this\n+   * exception still can be retried by the service if its type is included into doNotRetry property\n+   * of the correspondent retry policy.\n+   *\n    * @param message optional error message\n    * @param type optional error type that is used by {@link\n    *     io.temporal.common.RetryOptions#addDoNotRetry(String...)}.\n    * @param details optional details about the failure. They are serialized using the same approach\n-   *     as arguments and results and can be accessed through {@link #getDetails()}\n-   * @param cause failure cause. Each element of the cause chain is converted to ApplicationFailure\n-   *     if it doesn't extend {@link TemporalFailure}.\n+   *     as arguments and results.\n    */\n-  public ApplicationFailure(String message, String type, Object details, Exception cause) {\n-    this(message, type, new EncodedValue(details), false, cause);\n+  public static ApplicationFailure newFailure(String message, String type, Object... details) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e39d1fb78153dcd2e2c161b93d0090a7d64ac377"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM2NzA2OQ==", "bodyText": "[Nit], having boolean names that are negative (nonRetryable vs retryable) can be kind of confusing", "url": "https://github.com/temporalio/sdk-java/pull/164#discussion_r463367069", "createdAt": "2020-07-31T02:03:51Z", "author": {"login": "mastermanu"}, "path": "src/main/java/io/temporal/failure/ApplicationFailure.java", "diffHunk": "@@ -51,49 +51,47 @@\n  */\n public final class ApplicationFailure extends TemporalFailure {\n   private final String type;\n-  private final Value details;\n+  private final Values details;\n   private boolean nonRetryable;\n \n   /**\n+   * New ApplicationFailure with {@link #isNonRetryable()} flag set to false. Note that this\n+   * exception still can be retried by the service if its type is included into doNotRetry property\n+   * of the correspondent retry policy.\n+   *\n    * @param message optional error message\n    * @param type optional error type that is used by {@link\n    *     io.temporal.common.RetryOptions#addDoNotRetry(String...)}.\n    * @param details optional details about the failure. They are serialized using the same approach\n-   *     as arguments and results and can be accessed through {@link #getDetails()}\n-   * @param cause failure cause. Each element of the cause chain is converted to ApplicationFailure\n-   *     if it doesn't extend {@link TemporalFailure}.\n+   *     as arguments and results.\n    */\n-  public ApplicationFailure(String message, String type, Object details, Exception cause) {\n-    this(message, type, new EncodedValue(details), false, cause);\n+  public static ApplicationFailure newFailure(String message, String type, Object... details) {\n+    return new ApplicationFailure(message, type, false, new EncodedValues(details), null);\n   }\n \n   /**\n+   * New ApplicationFailure with {@link #isNonRetryable()} flag set to true.\n+   *\n+   * <p>It means that this exception is not going to be retried even if it is not included into\n+   * retry policy doNotRetry list.\n+   *\n    * @param message optional error message\n-   * @param type optional error type that is used by {@link\n-   *     io.temporal.common.RetryOptions#addDoNotRetry(String...)}.\n+   * @param type optional error type\n    * @param details optional details about the failure. They are serialized using the same approach\n    *     as arguments and results.\n    */\n-  public ApplicationFailure(String message, String type, Object details) {\n-    this(message, type, new EncodedValue(details), false, null);\n-  }\n-\n-  /**\n-   * @param message optional error message\n-   * @param type optional error type that is used by {@link\n-   *     io.temporal.common.RetryOptions#addDoNotRetry(String...)}.\n-   */\n-  public ApplicationFailure(String message, String type) {\n-    this(message, type, new EncodedValue(null), false, null);\n+  public static ApplicationFailure newNonRetryableFailure(\n+      String message, String type, Object... details) {\n+    return new ApplicationFailure(message, type, true, new EncodedValues(details), null);\n   }\n \n-  /** * @param message optional error message */\n-  public ApplicationFailure(String message) {\n-    this(message, null);\n+  static ApplicationFailure newFromValues(\n+      String message, String type, boolean nonRetryable, Values details, Throwable cause) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e39d1fb78153dcd2e2c161b93d0090a7d64ac377"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM2NzQ1NA==", "bodyText": "we didn't want this function to have an overload without the index that internally assumes the first element? seems painful to pass in 0 every time", "url": "https://github.com/temporalio/sdk-java/pull/164#discussion_r463367454", "createdAt": "2020-07-31T02:05:24Z", "author": {"login": "mastermanu"}, "path": "src/main/java/io/temporal/internal/sync/ActivityExecutionContextImpl.java", "diffHunk": "@@ -130,7 +130,7 @@\n         return result;\n       }\n       Optional<Payloads> details = info.getHeartbeatDetails();\n-      return Optional.ofNullable(dataConverter.fromPayloads(details, detailsClass, detailsType));\n+      return Optional.ofNullable(dataConverter.fromPayloads(0, details, detailsClass, detailsType));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e39d1fb78153dcd2e2c161b93d0090a7d64ac377"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM2ODA4Mw==", "bodyText": "and we still have a test that validates get without the index specified works fine?", "url": "https://github.com/temporalio/sdk-java/pull/164#discussion_r463368083", "createdAt": "2020-07-31T02:08:12Z", "author": {"login": "mastermanu"}, "path": "src/test/java/io/temporal/workflow/WorkflowTest.java", "diffHunk": "@@ -3995,7 +3996,10 @@ public void testWorkflowFailureNonRetryableFlag() {\n     } catch (WorkflowException e) {\n       assertTrue(e.getCause() instanceof ApplicationFailure);\n       assertEquals(\"foo\", ((ApplicationFailure) e.getCause()).getType());\n-      assertEquals(\"details\", ((ApplicationFailure) e.getCause()).getDetails().get(String.class));\n+      assertEquals(\n+          \"details1\", ((ApplicationFailure) e.getCause()).getDetails().get(0, String.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e39d1fb78153dcd2e2c161b93d0090a7d64ac377"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26f60fb2be893d50ac37c197bd30cbb85407a94d", "author": {"user": {"login": "mfateev", "name": "Maxim Fateev"}}, "url": "https://github.com/temporalio/sdk-java/commit/26f60fb2be893d50ac37c197bd30cbb85407a94d", "committedDate": "2020-07-31T02:10:27Z", "message": "Merge branch 'master' of github.com:temporalio/temporal-java-sdk into details"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4ODc2NDc3", "url": "https://github.com/temporalio/sdk-java/pull/164#pullrequestreview-458876477", "createdAt": "2020-07-31T02:12:42Z", "commit": {"oid": "e39d1fb78153dcd2e2c161b93d0090a7d64ac377"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMjoxMjo0MlrOG55zrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMjoxMjo0MlrOG55zrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM2OTEzMw==", "bodyText": "if the user exceeds the bounds of the values/payload, no issues right?", "url": "https://github.com/temporalio/sdk-java/pull/164#discussion_r463369133", "createdAt": "2020-07-31T02:12:42Z", "author": {"login": "mastermanu"}, "path": "src/main/java/io/temporal/common/converter/EncodedValues.java", "diffHunk": "@@ -58,22 +58,35 @@ public void setDataConverter(DataConverter converter) {\n   }\n \n   @Override\n-  public <T> T get(Class<T> parameterType) throws DataConverterException {\n-    if (value != null) {\n-      @SuppressWarnings(\"unchecked\")\n-      T result = (T) value.orElse(null);\n-      return result;\n+  public int getSize() {\n+    if (values != null) {\n+      return values.length;\n     } else {\n-      if (converter == null) {\n-        throw new IllegalStateException(\"converter not set\");\n+      if (payloads.isPresent()) {\n+        return payloads.get().getPayloadsCount();\n+      } else {\n+        return 0;\n       }\n-      return converter.fromPayloads(payloads, parameterType, parameterType);\n     }\n   }\n \n   @Override\n-  public <T> T get(Class<T> parameterType, Type genericParameterType)\n+  public <T> T get(int index, Class<T> parameterType) throws DataConverterException {\n+    return get(index, parameterType, parameterType);\n+  }\n+\n+  @Override\n+  public <T> T get(int index, Class<T> parameterType, Type genericParameterType)\n       throws DataConverterException {\n-    return converter.fromPayloads(payloads, parameterType, genericParameterType);\n+    if (values != null) {\n+      @SuppressWarnings(\"unchecked\")\n+      T result = (T) values[index];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e39d1fb78153dcd2e2c161b93d0090a7d64ac377"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1a54cda297e51945d12d71449b68bc459dd1366", "author": {"user": {"login": "mfateev", "name": "Maxim Fateev"}}, "url": "https://github.com/temporalio/sdk-java/commit/e1a54cda297e51945d12d71449b68bc459dd1366", "committedDate": "2020-07-31T02:37:35Z", "message": "PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2aaaaf8c2771b95a1c1cbb14fe9c776bd9cfbe4c", "author": {"user": {"login": "mfateev", "name": "Maxim Fateev"}}, "url": "https://github.com/temporalio/sdk-java/commit/2aaaaf8c2771b95a1c1cbb14fe9c776bd9cfbe4c", "committedDate": "2020-07-31T02:38:12Z", "message": "PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "398082f2012adb2bcec3fa108fe592f32f4a9a2b", "author": {"user": {"login": "mfateev", "name": "Maxim Fateev"}}, "url": "https://github.com/temporalio/sdk-java/commit/398082f2012adb2bcec3fa108fe592f32f4a9a2b", "committedDate": "2020-07-31T02:38:25Z", "message": "proto updated"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4ODg1NzYy", "url": "https://github.com/temporalio/sdk-java/pull/164#pullrequestreview-458885762", "createdAt": "2020-07-31T02:47:51Z", "commit": {"oid": "398082f2012adb2bcec3fa108fe592f32f4a9a2b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3502, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}