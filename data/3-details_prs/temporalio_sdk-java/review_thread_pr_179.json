{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MjMwMjgx", "number": 179, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMTowMzo0OVrOEYpuUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMToxMDowOVrOEYpwpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Mjg0ODgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/temporal/internal/statemachines/ActivityStateMachine.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMTowMzo0OVrOHBGlYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMToxNToxMFrOHBGqkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxODQ5Nw==", "bodyText": "curious what inspired you to make this change (whether it just occurred to you or you saw something interesting during local debugging / execution)", "url": "https://github.com/temporalio/sdk-java/pull/179#discussion_r470918497", "createdAt": "2020-08-15T01:03:49Z", "author": {"login": "mastermanu"}, "path": "src/main/java/io/temporal/internal/statemachines/ActivityStateMachine.java", "diffHunk": "@@ -415,5 +404,6 @@ private void createRequestCancelActivityTaskCommand() {\n                 RequestCancelActivityTaskCommandAttributes.newBuilder()\n                     .setScheduledEventId(getInitialCommandEventId()))\n             .build());\n+    parameters = null; // avoid retaining large input for the duration of the activity", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7461f0a134c0e78f5d38baee939b531ade1808f8"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxOTgyNw==", "bodyText": "I was thinking about it in my spare time but was forgetting about it when getting to the computer :).", "url": "https://github.com/temporalio/sdk-java/pull/179#discussion_r470919827", "createdAt": "2020-08-15T01:15:10Z", "author": {"login": "mfateev"}, "path": "src/main/java/io/temporal/internal/statemachines/ActivityStateMachine.java", "diffHunk": "@@ -415,5 +404,6 @@ private void createRequestCancelActivityTaskCommand() {\n                 RequestCancelActivityTaskCommandAttributes.newBuilder()\n                     .setScheduledEventId(getInitialCommandEventId()))\n             .build());\n+    parameters = null; // avoid retaining large input for the duration of the activity", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxODQ5Nw=="}, "originalCommit": {"oid": "7461f0a134c0e78f5d38baee939b531ade1808f8"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Mjg1NDEzOnYy", "diffSide": "RIGHT", "path": "src/test/java/io/temporal/internal/statemachines/MutableSideEffectStateMachineTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMTowOTozMFrOHBGoGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMTowOTozMFrOHBGoGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxOTE5Mg==", "bodyText": "[Nit] Fix error message to say MutableSideEffectStateMachine", "url": "https://github.com/temporalio/sdk-java/pull/179#discussion_r470919192", "createdAt": "2020-08-15T01:09:30Z", "author": {"login": "mastermanu"}, "path": "src/test/java/io/temporal/internal/statemachines/MutableSideEffectStateMachineTest.java", "diffHunk": "@@ -34,15 +38,46 @@\n import io.temporal.api.history.v1.MarkerRecordedEventAttributes;\n import io.temporal.api.history.v1.TimerFiredEventAttributes;\n import io.temporal.common.converter.DataConverter;\n+import java.util.ArrayList;\n import java.util.List;\n import java.util.Optional;\n+import org.junit.AfterClass;\n import org.junit.Test;\n \n public class MutableSideEffectStateMachineTest {\n \n   private final DataConverter converter = DataConverter.getDefaultInstance();\n   private WorkflowStateMachines stateMachines;\n \n+  private static final List<\n+          StateMachine<\n+              MutableSideEffectStateMachine.State,\n+              MutableSideEffectStateMachine.ExplicitEvent,\n+              MutableSideEffectStateMachine.InvocationStateMachine>>\n+      stateMachineList = new ArrayList<>();\n+\n+  private WorkflowStateMachines newStateMachines(TestEntityManagerListenerBase listener) {\n+    return new WorkflowStateMachines(\n+        listener, (stateMachine -> stateMachineList.add(stateMachine)));\n+  }\n+\n+  @AfterClass\n+  public static void generateCoverage() {\n+    List<Transition> missed =\n+        MutableSideEffectStateMachine.STATE_MACHINE_DEFINITION.getUnvisitedTransitions(\n+            stateMachineList);\n+    if (!missed.isEmpty()) {\n+      CommandsGeneratePlantUMLStateDiagrams.writeToFile(\n+          \"test\",\n+          MutableSideEffectStateMachine.class,\n+          MutableSideEffectStateMachine.STATE_MACHINE_DEFINITION.asPlantUMLStateDiagramCoverage(\n+              stateMachineList));\n+      fail(\n+          \"SideEffectStateMachine is missing test coverage for the following transitions:\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7461f0a134c0e78f5d38baee939b531ade1808f8"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Mjg1NDc2OnYy", "diffSide": "RIGHT", "path": "src/test/java/io/temporal/internal/statemachines/TimerStateMachineTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMToxMDowOVrOHBGobg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMToxMDowOVrOHBGobg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxOTI3OA==", "bodyText": "[Nit] fix error message to say TimerStateMachine", "url": "https://github.com/temporalio/sdk-java/pull/179#discussion_r470919278", "createdAt": "2020-08-15T01:10:09Z", "author": {"login": "mastermanu"}, "path": "src/test/java/io/temporal/internal/statemachines/TimerStateMachineTest.java", "diffHunk": "@@ -34,15 +35,42 @@\n import io.temporal.internal.common.ProtobufTimeUtils;\n import io.temporal.workflow.Functions;\n import java.time.Duration;\n+import java.util.ArrayList;\n import java.util.List;\n import java.util.Optional;\n+import org.junit.AfterClass;\n import org.junit.Test;\n \n public class TimerStateMachineTest {\n \n   private final DataConverter converter = DataConverter.getDefaultInstance();\n   private WorkflowStateMachines stateMachines;\n \n+  private static final List<\n+          StateMachine<TimerStateMachine.State, TimerStateMachine.ExplicitEvent, TimerStateMachine>>\n+      stateMachineList = new ArrayList<>();\n+\n+  private WorkflowStateMachines newStateMachines(TestEntityManagerListenerBase listener) {\n+    return new WorkflowStateMachines(\n+        listener, (stateMachine -> stateMachineList.add(stateMachine)));\n+  }\n+\n+  @AfterClass\n+  public static void generateCoverage() {\n+    List<Transition> missed =\n+        TimerStateMachine.STATE_MACHINE_DEFINITION.getUnvisitedTransitions(stateMachineList);\n+    if (!missed.isEmpty()) {\n+      CommandsGeneratePlantUMLStateDiagrams.writeToFile(\n+          \"test\",\n+          TimerStateMachine.class,\n+          TimerStateMachine.STATE_MACHINE_DEFINITION.asPlantUMLStateDiagramCoverage(\n+              stateMachineList));\n+      fail(\n+          \"SideEffectStateMachine is missing test coverage for the following transitions:\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7461f0a134c0e78f5d38baee939b531ade1808f8"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1723, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}