{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4ODA3NDY4", "number": 58, "title": "Added @WorkflowInterface", "bodyText": "Added @WorkflowInterface.\nThe main advantage of having @WorkflowInterface is to support polymorphic invocation of workflows, signals and queries. For example this is valid code after this change:\npublic interface WorkflowBase {\n   @WorkflowMethod\n   String execute(String arg);\n }\n\n @WorkflowInterface\n public interface WorkflowA extends WorkflowBase {}\n\n @WorkflowInterface\n public interface WorkflowB extends WorkflowBase {}\n\n public static class WorkflowAImpl implements WorkflowA {\n   @Override\n   public String execute(String arg) {\n     return \"WorkflowAImpl\" + arg;\n   }\n }\n\n public static class WorkflowBImpl implements WorkflowB {\n   @Override\n   public String execute(String arg) {\n     return \"WorkflowBImpl\" + arg;\n   }\n }\n\n @Test\n public void testPolymorphicStart() {\n   startWorkerFor(WorkflowBImpl.class, WorkflowAImpl.class);\n   WorkflowOptions options = newWorkflowOptionsBuilder(taskList).build();\n   WorkflowBase[] stubs =\n       new WorkflowBase[] {\n         workflowClient.newWorkflowStub(WorkflowA.class, options),\n         workflowClient.newWorkflowStub(WorkflowB.class, options),\n       };\n   String results = stubs[0].execute(\"0\") + \", \" + stubs[1].execute(\"1\");\n   assertEquals(\"WorkflowAImpl0, WorkflowBImpl1\", results);\n }\n\n\nFixes #55 and #43", "createdAt": "2020-04-04T23:05:28Z", "url": "https://github.com/temporalio/sdk-java/pull/58", "merged": true, "mergeCommit": {"oid": "b5d439ed4c3c74e0afd91f7c2bb35d70e3f62211"}, "closed": true, "closedAt": "2020-04-07T04:38:18Z", "author": {"login": "mfateev"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcT1isBAH2gAyMzk4ODA3NDY4Ojg3ZTcwZTg5ODcxMWQ2N2QwMTk1NjBjODlkZDJkZGExMWYwMWVkMWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVLkKmgH2gAyMzk4ODA3NDY4OmE2ZDJjOTZmNWVmZTJiZjJhNThhMDI3ZTRiZGE0MTE0NzMyZjNiY2Y=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "87e70e898711d67d019560c89dd2dda11f01ed1c", "author": {"user": {"login": "mfateev", "name": "Maxim Fateev"}}, "url": "https://github.com/temporalio/sdk-java/commit/87e70e898711d67d019560c89dd2dda11f01ed1c", "committedDate": "2020-04-03T00:13:30Z", "message": "Added WorkflowInterface annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02cf2d00cd32c5802f9d47925c6635cd9d75661b", "author": {"user": {"login": "mfateev", "name": "Maxim Fateev"}}, "url": "https://github.com/temporalio/sdk-java/commit/02cf2d00cd32c5802f9d47925c6635cd9d75661b", "committedDate": "2020-04-03T04:18:47Z", "message": "Fixed stubs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35b16197e1c989d29192c9380dbbd7170ff0eefc", "author": {"user": {"login": "mfateev", "name": "Maxim Fateev"}}, "url": "https://github.com/temporalio/sdk-java/commit/35b16197e1c989d29192c9380dbbd7170ff0eefc", "committedDate": "2020-04-03T04:39:21Z", "message": "Fixed names from annotations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a98045944d8791c32ea499488d05d2801ed0ad9e", "author": {"user": {"login": "mfateev", "name": "Maxim Fateev"}}, "url": "https://github.com/temporalio/sdk-java/commit/a98045944d8791c32ea499488d05d2801ed0ad9e", "committedDate": "2020-04-04T03:56:45Z", "message": "Refactored POJO logic into POJOActivityMetadata and POJOWorkflowMetadata"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a15c5d45a47c5ff592117b905f9d90471fd8a92", "author": {"user": {"login": "mfateev", "name": "Maxim Fateev"}}, "url": "https://github.com/temporalio/sdk-java/commit/1a15c5d45a47c5ff592117b905f9d90471fd8a92", "committedDate": "2020-04-04T17:14:58Z", "message": "Refatored activity POJOMetadata"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22ffd4a155f6124574a8c8cb0246791c95cb9136", "author": {"user": {"login": "mfateev", "name": "Maxim Fateev"}}, "url": "https://github.com/temporalio/sdk-java/commit/22ffd4a155f6124574a8c8cb0246791c95cb9136", "committedDate": "2020-04-04T23:00:57Z", "message": "Refactored and unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "006d3d243d86ae0efd9885dededb3e386b23e216", "author": {"user": {"login": "mfateev", "name": "Maxim Fateev"}}, "url": "https://github.com/temporalio/sdk-java/commit/006d3d243d86ae0efd9885dededb3e386b23e216", "committedDate": "2020-04-04T23:02:21Z", "message": "Merge branch 'master' of github.com:temporalio/temporal-java-sdk into workflow_interface"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NzcxNjM0", "url": "https://github.com/temporalio/sdk-java/pull/58#pullrequestreview-388771634", "createdAt": "2020-04-07T04:15:27Z", "commit": {"oid": "006d3d243d86ae0efd9885dededb3e386b23e216"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNDoxNToyN1rOGByPPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNDoxNToyN1rOGByPPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUyNDg2Mw==", "bodyText": "nit: init and constructor have some similar code that might be able to be turned into util", "url": "https://github.com/temporalio/sdk-java/pull/58#discussion_r404524863", "createdAt": "2020-04-07T04:15:27Z", "author": {"login": "shawnhathaway"}, "path": "src/main/java/io/temporal/internal/sync/POJOWorkflowInterfaceMetadata.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ *  Copyright (C) 2020 Temporal Technologies, Inc. All Rights Reserved.\n+ *\n+ *  Copyright 2012-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Modifications copyright (C) 2017 Uber Technologies, Inc.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\"). You may not\n+ *  use this file except in compliance with the License. A copy of the License is\n+ *  located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed on\n+ *  an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package io.temporal.internal.sync;\n+\n+import io.temporal.workflow.WorkflowInterface;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+/**\n+ * Rules:\n+ *\n+ * <ul>\n+ *   <li>A workflow implementation must implement at least one non empty interface annotated with\n+ *       WorkflowInterface\n+ *   <li>An interface annotated with WorkflowInterface can extend zero or more interfaces.\n+ *   <li>An interface annotated with WorkflowInterface defines workflow methods for all methods it\n+ *       inherited from interfaces which are not annotated with WorkflowInterface.\n+ *   <li>Each method name can be defined only once across all interfaces annotated with\n+ *       WorkflowInterface. So if annotated interface A has method foo() and an annotated interface\n+ *       B extends A it cannot also declare foo() even with a different signature.\n+ * </ul>\n+ */\n+class POJOWorkflowInterfaceMetadata {\n+\n+  /** Used to override equals and hashCode of Method to ensure deduping by method name in a set. */\n+  static class EqualsByMethodName {\n+    private final Method method;\n+\n+    EqualsByMethodName(Method method) {\n+      this.method = method;\n+    }\n+\n+    public Method getMethod() {\n+      return method;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) return true;\n+      if (o == null || getClass() != o.getClass()) return false;\n+      EqualsByMethodName that = (EqualsByMethodName) o;\n+      return com.google.common.base.Objects.equal(method.getName(), that.method.getName());\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return com.google.common.base.Objects.hashCode(method.getName());\n+    }\n+  }\n+\n+  static class EqualsByNameType {\n+    private final String name;\n+    private final WorkflowMethodType type;\n+\n+    EqualsByNameType(String name, WorkflowMethodType type) {\n+      this.name = name;\n+      this.type = type;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) return true;\n+      if (o == null || getClass() != o.getClass()) return false;\n+      EqualsByNameType that = (EqualsByNameType) o;\n+      return com.google.common.base.Objects.equal(name, that.name) && type == that.type;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return com.google.common.base.Objects.hashCode(name, type);\n+    }\n+  }\n+\n+  private POJOWorkflowMethodMetadata workflowMethod;\n+  private final Map<Method, POJOWorkflowMethodMetadata> methods = new HashMap<>();\n+\n+  public static POJOWorkflowInterfaceMetadata newInstance(Class<?> anInterface) {\n+    if (!anInterface.isInterface()) {\n+      throw new IllegalArgumentException(\"Not an interface: \" + anInterface);\n+    }\n+    WorkflowInterface annotation = anInterface.getAnnotation(WorkflowInterface.class);\n+    if (annotation == null) {\n+      throw new IllegalArgumentException(\n+          \"Missing requied @WorkflowInterface annotation: \" + anInterface);\n+    }\n+    POJOWorkflowInterfaceMetadata result = new POJOWorkflowInterfaceMetadata(anInterface);\n+    if (result.methods.isEmpty()) {\n+      throw new IllegalArgumentException(\n+          \"Interface doesn't contain any methods: \" + anInterface.getName());\n+    }\n+    return result;\n+  }\n+\n+  static POJOWorkflowInterfaceMetadata newImplementationInterface(Class<?> anInterface) {\n+    return new POJOWorkflowInterfaceMetadata(anInterface);\n+  }\n+\n+  private POJOWorkflowInterfaceMetadata(Class<?> anInterface) {\n+    Map<EqualsByMethodName, Method> dedupeMap = new HashMap<>();\n+    getWorkflowInterfaceMethods(anInterface, dedupeMap);\n+  }\n+\n+  public Optional<POJOWorkflowMethodMetadata> getWorkflowMethod() {\n+    return Optional.ofNullable(workflowMethod);\n+  }\n+\n+  public Optional<String> getWorkflowType() {\n+    if (workflowMethod == null) {\n+      return Optional.empty();\n+    }\n+    return Optional.of(workflowMethod.getName());\n+  }\n+\n+  public POJOWorkflowMethodMetadata getMethodMetadata(Method method) {\n+    POJOWorkflowMethodMetadata result = methods.get(method);\n+    if (result == null) {\n+      throw new IllegalArgumentException(\"Unknown method: \" + method);\n+    }\n+    return result;\n+  }\n+\n+  public List<POJOWorkflowMethodMetadata> getMethodsMetadata(WorkflowMethodType type) {\n+    List<POJOWorkflowMethodMetadata> result = new ArrayList<>();\n+    for (POJOWorkflowMethodMetadata methodMetadata : this.methods.values()) {\n+      if (methodMetadata.getType() == type) {\n+        result.add(methodMetadata);\n+      }\n+    }\n+    return result;\n+  }\n+\n+  public List<POJOWorkflowMethodMetadata> getMethodsMetadata() {\n+    return new ArrayList<>(this.methods.values());\n+  }\n+\n+  private void initWorkflowInterface(Class<?> anInterface) {\n+    if (!anInterface.isInterface()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "006d3d243d86ae0efd9885dededb3e386b23e216"}, "originalPosition": 161}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NzcyMzY3", "url": "https://github.com/temporalio/sdk-java/pull/58#pullrequestreview-388772367", "createdAt": "2020-04-07T04:18:21Z", "commit": {"oid": "006d3d243d86ae0efd9885dededb3e386b23e216"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6d2c96f5efe2bf2a58a027e4bda4114732f3bcf", "author": {"user": {"login": "mfateev", "name": "Maxim Fateev"}}, "url": "https://github.com/temporalio/sdk-java/commit/a6d2c96f5efe2bf2a58a027e4bda4114732f3bcf", "committedDate": "2020-04-07T04:26:57Z", "message": "Removed dead code"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3525, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}