{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzODQ1Mjg3", "number": 286, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNDozMzoyMFrOFIBQ-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzo0MToxNlrOFIVbaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTUzNjU3OnYy", "diffSide": "RIGHT", "path": "temporal-sdk/src/main/java/io/temporal/internal/worker/ActivityTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNDozMzoyMFrOIJuCgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNToxOToxOFrOIJuttQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2MjQwMw==", "bodyText": "Let's change from \"public class\" to \"final class\"", "url": "https://github.com/temporalio/sdk-java/pull/286#discussion_r547062403", "createdAt": "2020-12-22T04:33:20Z", "author": {"login": "mfateev"}, "path": "temporal-sdk/src/main/java/io/temporal/internal/worker/ActivityTask.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ *  Copyright (C) 2020 Temporal Technologies, Inc. All Rights Reserved.\n+ *\n+ *  Copyright 2012-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Modifications copyright (C) 2017 Uber Technologies, Inc.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\"). You may not\n+ *  use this file except in compliance with the License. A copy of the License is\n+ *  located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed on\n+ *  an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package io.temporal.internal.worker;\n+\n+import io.temporal.api.workflowservice.v1.PollActivityTaskQueueResponse;\n+import io.temporal.workflow.Functions;\n+\n+public class ActivityTask {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "927d1c389479bb84be99348ec8abad4dc9ff8d6c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA3MzQ2MQ==", "bodyText": "done", "url": "https://github.com/temporalio/sdk-java/pull/286#discussion_r547073461", "createdAt": "2020-12-22T05:19:18Z", "author": {"login": "vitarb"}, "path": "temporal-sdk/src/main/java/io/temporal/internal/worker/ActivityTask.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ *  Copyright (C) 2020 Temporal Technologies, Inc. All Rights Reserved.\n+ *\n+ *  Copyright 2012-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Modifications copyright (C) 2017 Uber Technologies, Inc.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\"). You may not\n+ *  use this file except in compliance with the License. A copy of the License is\n+ *  located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed on\n+ *  an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package io.temporal.internal.worker;\n+\n+import io.temporal.api.workflowservice.v1.PollActivityTaskQueueResponse;\n+import io.temporal.workflow.Functions;\n+\n+public class ActivityTask {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2MjQwMw=="}, "originalCommit": {"oid": "927d1c389479bb84be99348ec8abad4dc9ff8d6c"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTUwODQxOnYy", "diffSide": "RIGHT", "path": "temporal-sdk/src/main/java/io/temporal/testing/TestEnvironmentOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTo1NToyMlrOIJ__bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMDoxOToyM1rOIKIFbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM1NjUyNg==", "bodyText": "We already use  target for service address. The term comes from gRPC.", "url": "https://github.com/temporalio/sdk-java/pull/286#discussion_r547356526", "createdAt": "2020-12-22T15:55:22Z", "author": {"login": "mfateev"}, "path": "temporal-sdk/src/main/java/io/temporal/testing/TestEnvironmentOptions.java", "diffHunk": "@@ -54,11 +54,17 @@ public static TestEnvironmentOptions getDefaultInstance() {\n \n     private Scope metricsScope;\n \n+    private boolean useExternalService;\n+\n+    private String serviceAddress;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1604ecd0dd950f51a8c9eb4e914bd6c0d7f61896"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ4OTEzNQ==", "bodyText": "Done", "url": "https://github.com/temporalio/sdk-java/pull/286#discussion_r547489135", "createdAt": "2020-12-22T20:19:23Z", "author": {"login": "vitarb"}, "path": "temporal-sdk/src/main/java/io/temporal/testing/TestEnvironmentOptions.java", "diffHunk": "@@ -54,11 +54,17 @@ public static TestEnvironmentOptions getDefaultInstance() {\n \n     private Scope metricsScope;\n \n+    private boolean useExternalService;\n+\n+    private String serviceAddress;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM1NjUyNg=="}, "originalCommit": {"oid": "1604ecd0dd950f51a8c9eb4e914bd6c0d7f61896"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTg2MDA4OnYy", "diffSide": "RIGHT", "path": "temporal-sdk/src/main/java/io/temporal/internal/worker/ActivityTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzo0MDowOVrOIKDSzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMDoxNToxM1rOIKH-ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQxMDYzNw==", "bodyText": "Might be worth adding a docstring indicating that owners are expected to call this when the task is complete", "url": "https://github.com/temporalio/sdk-java/pull/286#discussion_r547410637", "createdAt": "2020-12-22T17:40:09Z", "author": {"login": "Sushisource"}, "path": "temporal-sdk/src/main/java/io/temporal/internal/worker/ActivityTask.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ *  Copyright (C) 2020 Temporal Technologies, Inc. All Rights Reserved.\n+ *\n+ *  Copyright 2012-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Modifications copyright (C) 2017 Uber Technologies, Inc.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\"). You may not\n+ *  use this file except in compliance with the License. A copy of the License is\n+ *  located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed on\n+ *  an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package io.temporal.internal.worker;\n+\n+import io.temporal.api.workflowservice.v1.PollActivityTaskQueueResponse;\n+import io.temporal.workflow.Functions;\n+\n+final class ActivityTask {\n+  private final PollActivityTaskQueueResponse response;\n+  private final Functions.Proc completionHandle;\n+\n+  public ActivityTask(PollActivityTaskQueueResponse response, Functions.Proc completionHandle) {\n+    this.response = response;\n+    this.completionHandle = completionHandle;\n+  }\n+\n+  public PollActivityTaskQueueResponse getResponse() {\n+    return response;\n+  }\n+\n+  public Functions.Proc getCompletionHandle() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1604ecd0dd950f51a8c9eb4e914bd6c0d7f61896"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ4NzQxOA==", "bodyText": "Done.", "url": "https://github.com/temporalio/sdk-java/pull/286#discussion_r547487418", "createdAt": "2020-12-22T20:15:13Z", "author": {"login": "vitarb"}, "path": "temporal-sdk/src/main/java/io/temporal/internal/worker/ActivityTask.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ *  Copyright (C) 2020 Temporal Technologies, Inc. All Rights Reserved.\n+ *\n+ *  Copyright 2012-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Modifications copyright (C) 2017 Uber Technologies, Inc.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\"). You may not\n+ *  use this file except in compliance with the License. A copy of the License is\n+ *  located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed on\n+ *  an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package io.temporal.internal.worker;\n+\n+import io.temporal.api.workflowservice.v1.PollActivityTaskQueueResponse;\n+import io.temporal.workflow.Functions;\n+\n+final class ActivityTask {\n+  private final PollActivityTaskQueueResponse response;\n+  private final Functions.Proc completionHandle;\n+\n+  public ActivityTask(PollActivityTaskQueueResponse response, Functions.Proc completionHandle) {\n+    this.response = response;\n+    this.completionHandle = completionHandle;\n+  }\n+\n+  public PollActivityTaskQueueResponse getResponse() {\n+    return response;\n+  }\n+\n+  public Functions.Proc getCompletionHandle() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQxMDYzNw=="}, "originalCommit": {"oid": "1604ecd0dd950f51a8c9eb4e914bd6c0d7f61896"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTg2NDMwOnYy", "diffSide": "RIGHT", "path": "temporal-sdk/src/main/java/io/temporal/testing/TestEnvironmentOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzo0MTozNlrOIKDVYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMDoxNToyNFrOIKH--w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQxMTI5OQ==", "bodyText": "Docstring for what this means would be useful as well", "url": "https://github.com/temporalio/sdk-java/pull/286#discussion_r547411299", "createdAt": "2020-12-22T17:41:36Z", "author": {"login": "Sushisource"}, "path": "temporal-sdk/src/main/java/io/temporal/testing/TestEnvironmentOptions.java", "diffHunk": "@@ -114,6 +143,14 @@ public Scope getMetricsScope() {\n     return metricsScope;\n   }\n \n+  public boolean isUseExternalService() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1604ecd0dd950f51a8c9eb4e914bd6c0d7f61896"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ4NzQ4Mw==", "bodyText": "Done", "url": "https://github.com/temporalio/sdk-java/pull/286#discussion_r547487483", "createdAt": "2020-12-22T20:15:24Z", "author": {"login": "vitarb"}, "path": "temporal-sdk/src/main/java/io/temporal/testing/TestEnvironmentOptions.java", "diffHunk": "@@ -114,6 +143,14 @@ public Scope getMetricsScope() {\n     return metricsScope;\n   }\n \n+  public boolean isUseExternalService() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQxMTI5OQ=="}, "originalCommit": {"oid": "1604ecd0dd950f51a8c9eb4e914bd6c0d7f61896"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTkwMjc3OnYy", "diffSide": "RIGHT", "path": "temporal-sdk/src/test/java/io/temporal/workflow/WorkerRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzo1Mzo0OFrOIKDshw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxODozMzoxNVrOIKFBOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQxNzIyMw==", "bodyText": "Are there other existing tests that could be shortened by using this?", "url": "https://github.com/temporalio/sdk-java/pull/286#discussion_r547417223", "createdAt": "2020-12-22T17:53:48Z", "author": {"login": "Sushisource"}, "path": "temporal-sdk/src/test/java/io/temporal/workflow/WorkerRule.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ *  Copyright (C) 2020 Temporal Technologies, Inc. All Rights Reserved.\n+ *\n+ *  Copyright 2012-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Modifications copyright (C) 2017 Uber Technologies, Inc.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\"). You may not\n+ *  use this file except in compliance with the License. A copy of the License is\n+ *  located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed on\n+ *  an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package io.temporal.workflow;\n+\n+import io.temporal.client.WorkflowClient;\n+import io.temporal.client.WorkflowClientOptions;\n+import io.temporal.testing.TestEnvironmentOptions;\n+import io.temporal.testing.TestWorkflowEnvironment;\n+import io.temporal.worker.Worker;\n+import io.temporal.worker.WorkerFactoryOptions;\n+import io.temporal.worker.WorkerOptions;\n+import java.util.UUID;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+public class WorkerRule implements TestRule {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1604ecd0dd950f51a8c9eb4e914bd6c0d7f61896"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQzODkwNw==", "bodyText": "All of them.", "url": "https://github.com/temporalio/sdk-java/pull/286#discussion_r547438907", "createdAt": "2020-12-22T18:33:15Z", "author": {"login": "vitarb"}, "path": "temporal-sdk/src/test/java/io/temporal/workflow/WorkerRule.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ *  Copyright (C) 2020 Temporal Technologies, Inc. All Rights Reserved.\n+ *\n+ *  Copyright 2012-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Modifications copyright (C) 2017 Uber Technologies, Inc.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\"). You may not\n+ *  use this file except in compliance with the License. A copy of the License is\n+ *  located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed on\n+ *  an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package io.temporal.workflow;\n+\n+import io.temporal.client.WorkflowClient;\n+import io.temporal.client.WorkflowClientOptions;\n+import io.temporal.testing.TestEnvironmentOptions;\n+import io.temporal.testing.TestWorkflowEnvironment;\n+import io.temporal.worker.Worker;\n+import io.temporal.worker.WorkerFactoryOptions;\n+import io.temporal.worker.WorkerOptions;\n+import java.util.UUID;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+public class WorkerRule implements TestRule {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQxNzIyMw=="}, "originalCommit": {"oid": "1604ecd0dd950f51a8c9eb4e914bd6c0d7f61896"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTkzOTkyOnYy", "diffSide": "RIGHT", "path": "temporal-sdk/src/test/java/io/temporal/workflow/ActivityPollerPrefetchingTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxODowNjoxOVrOIKEDCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMDoyMjowMVrOIKIJGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQyMjk4NQ==", "bodyText": "Let's follow the same pattern as all other options. It should be WorkerRule.newBuilder().", "url": "https://github.com/temporalio/sdk-java/pull/286#discussion_r547422985", "createdAt": "2020-12-22T18:06:19Z", "author": {"login": "mfateev"}, "path": "temporal-sdk/src/test/java/io/temporal/workflow/ActivityPollerPrefetchingTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ *  Copyright (C) 2020 Temporal Technologies, Inc. All Rights Reserved.\n+ *\n+ *  Copyright 2012-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Modifications copyright (C) 2017 Uber Technologies, Inc.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\"). You may not\n+ *  use this file except in compliance with the License. A copy of the License is\n+ *  located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed on\n+ *  an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package io.temporal.workflow;\n+\n+import io.temporal.activity.Activity;\n+import io.temporal.activity.ActivityInterface;\n+import io.temporal.activity.ActivityMethod;\n+import io.temporal.activity.ActivityOptions;\n+import io.temporal.client.WorkflowOptions;\n+import io.temporal.common.RetryOptions;\n+import io.temporal.worker.WorkerOptions;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class ActivityPollerPrefetchingTest {\n+\n+  @Rule\n+  public WorkerRule workerRule =\n+      new WorkerRule.Builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1604ecd0dd950f51a8c9eb4e914bd6c0d7f61896"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ5MDA3Mw==", "bodyText": "Done", "url": "https://github.com/temporalio/sdk-java/pull/286#discussion_r547490073", "createdAt": "2020-12-22T20:22:01Z", "author": {"login": "vitarb"}, "path": "temporal-sdk/src/test/java/io/temporal/workflow/ActivityPollerPrefetchingTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ *  Copyright (C) 2020 Temporal Technologies, Inc. All Rights Reserved.\n+ *\n+ *  Copyright 2012-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Modifications copyright (C) 2017 Uber Technologies, Inc.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\"). You may not\n+ *  use this file except in compliance with the License. A copy of the License is\n+ *  located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed on\n+ *  an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package io.temporal.workflow;\n+\n+import io.temporal.activity.Activity;\n+import io.temporal.activity.ActivityInterface;\n+import io.temporal.activity.ActivityMethod;\n+import io.temporal.activity.ActivityOptions;\n+import io.temporal.client.WorkflowOptions;\n+import io.temporal.common.RetryOptions;\n+import io.temporal.worker.WorkerOptions;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class ActivityPollerPrefetchingTest {\n+\n+  @Rule\n+  public WorkerRule workerRule =\n+      new WorkerRule.Builder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQyMjk4NQ=="}, "originalCommit": {"oid": "1604ecd0dd950f51a8c9eb4e914bd6c0d7f61896"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTk0MjUyOnYy", "diffSide": "RIGHT", "path": "temporal-sdk/src/test/java/io/temporal/workflow/WorkerRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxODowNzoxM1rOIKEEmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMDoyMjozNlrOIKIJ6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQyMzM4NA==", "bodyText": "I would make all the fields final.", "url": "https://github.com/temporalio/sdk-java/pull/286#discussion_r547423384", "createdAt": "2020-12-22T18:07:13Z", "author": {"login": "mfateev"}, "path": "temporal-sdk/src/test/java/io/temporal/workflow/WorkerRule.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ *  Copyright (C) 2020 Temporal Technologies, Inc. All Rights Reserved.\n+ *\n+ *  Copyright 2012-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Modifications copyright (C) 2017 Uber Technologies, Inc.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\"). You may not\n+ *  use this file except in compliance with the License. A copy of the License is\n+ *  located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed on\n+ *  an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package io.temporal.workflow;\n+\n+import io.temporal.client.WorkflowClient;\n+import io.temporal.client.WorkflowClientOptions;\n+import io.temporal.testing.TestEnvironmentOptions;\n+import io.temporal.testing.TestWorkflowEnvironment;\n+import io.temporal.worker.Worker;\n+import io.temporal.worker.WorkerFactoryOptions;\n+import io.temporal.worker.WorkerOptions;\n+import java.util.UUID;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+public class WorkerRule implements TestRule {\n+\n+  private Class<?>[] workflowTypes;\n+  private Object[] activityImplementations;\n+  private TestWorkflowEnvironment testEnvironment;\n+  private WorkerOptions workerOptions;\n+  private Worker worker;\n+  private String taskQueue;\n+  private boolean useExternalService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1604ecd0dd950f51a8c9eb4e914bd6c0d7f61896"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ5MDI4MQ==", "bodyText": "We can't do them all final as worker/task queue are initialized in the init method that is called from apply rather then constructor, but most of them can.", "url": "https://github.com/temporalio/sdk-java/pull/286#discussion_r547490281", "createdAt": "2020-12-22T20:22:36Z", "author": {"login": "vitarb"}, "path": "temporal-sdk/src/test/java/io/temporal/workflow/WorkerRule.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ *  Copyright (C) 2020 Temporal Technologies, Inc. All Rights Reserved.\n+ *\n+ *  Copyright 2012-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Modifications copyright (C) 2017 Uber Technologies, Inc.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\"). You may not\n+ *  use this file except in compliance with the License. A copy of the License is\n+ *  located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed on\n+ *  an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package io.temporal.workflow;\n+\n+import io.temporal.client.WorkflowClient;\n+import io.temporal.client.WorkflowClientOptions;\n+import io.temporal.testing.TestEnvironmentOptions;\n+import io.temporal.testing.TestWorkflowEnvironment;\n+import io.temporal.worker.Worker;\n+import io.temporal.worker.WorkerFactoryOptions;\n+import io.temporal.worker.WorkerOptions;\n+import java.util.UUID;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+public class WorkerRule implements TestRule {\n+\n+  private Class<?>[] workflowTypes;\n+  private Object[] activityImplementations;\n+  private TestWorkflowEnvironment testEnvironment;\n+  private WorkerOptions workerOptions;\n+  private Worker worker;\n+  private String taskQueue;\n+  private boolean useExternalService;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQyMzM4NA=="}, "originalCommit": {"oid": "1604ecd0dd950f51a8c9eb4e914bd6c0d7f61896"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTk0MzcwOnYy", "diffSide": "RIGHT", "path": "temporal-sdk/src/test/java/io/temporal/workflow/WorkerRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxODowNzozN1rOIKEFQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMDoyMjo1NFrOIKIKWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQyMzU1NQ==", "bodyText": "Add public modifier.", "url": "https://github.com/temporalio/sdk-java/pull/286#discussion_r547423555", "createdAt": "2020-12-22T18:07:37Z", "author": {"login": "mfateev"}, "path": "temporal-sdk/src/test/java/io/temporal/workflow/WorkerRule.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ *  Copyright (C) 2020 Temporal Technologies, Inc. All Rights Reserved.\n+ *\n+ *  Copyright 2012-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Modifications copyright (C) 2017 Uber Technologies, Inc.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\"). You may not\n+ *  use this file except in compliance with the License. A copy of the License is\n+ *  located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed on\n+ *  an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package io.temporal.workflow;\n+\n+import io.temporal.client.WorkflowClient;\n+import io.temporal.client.WorkflowClientOptions;\n+import io.temporal.testing.TestEnvironmentOptions;\n+import io.temporal.testing.TestWorkflowEnvironment;\n+import io.temporal.worker.Worker;\n+import io.temporal.worker.WorkerFactoryOptions;\n+import io.temporal.worker.WorkerOptions;\n+import java.util.UUID;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+public class WorkerRule implements TestRule {\n+\n+  private Class<?>[] workflowTypes;\n+  private Object[] activityImplementations;\n+  private TestWorkflowEnvironment testEnvironment;\n+  private WorkerOptions workerOptions;\n+  private Worker worker;\n+  private String taskQueue;\n+  private boolean useExternalService;\n+\n+  private WorkerRule(\n+      TestWorkflowEnvironment testEnvironment,\n+      boolean useExternalService,\n+      Class<?>[] workflowTypes,\n+      Object[] activityImplementations,\n+      WorkerOptions workerOptions) {\n+    this.testEnvironment = testEnvironment;\n+    this.useExternalService = useExternalService;\n+    this.workflowTypes = workflowTypes;\n+    this.activityImplementations = activityImplementations;\n+    this.workerOptions = workerOptions;\n+  }\n+\n+  static class Builder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1604ecd0dd950f51a8c9eb4e914bd6c0d7f61896"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ5MDM5Mg==", "bodyText": "Done", "url": "https://github.com/temporalio/sdk-java/pull/286#discussion_r547490392", "createdAt": "2020-12-22T20:22:54Z", "author": {"login": "vitarb"}, "path": "temporal-sdk/src/test/java/io/temporal/workflow/WorkerRule.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ *  Copyright (C) 2020 Temporal Technologies, Inc. All Rights Reserved.\n+ *\n+ *  Copyright 2012-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Modifications copyright (C) 2017 Uber Technologies, Inc.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\"). You may not\n+ *  use this file except in compliance with the License. A copy of the License is\n+ *  located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed on\n+ *  an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package io.temporal.workflow;\n+\n+import io.temporal.client.WorkflowClient;\n+import io.temporal.client.WorkflowClientOptions;\n+import io.temporal.testing.TestEnvironmentOptions;\n+import io.temporal.testing.TestWorkflowEnvironment;\n+import io.temporal.worker.Worker;\n+import io.temporal.worker.WorkerFactoryOptions;\n+import io.temporal.worker.WorkerOptions;\n+import java.util.UUID;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+public class WorkerRule implements TestRule {\n+\n+  private Class<?>[] workflowTypes;\n+  private Object[] activityImplementations;\n+  private TestWorkflowEnvironment testEnvironment;\n+  private WorkerOptions workerOptions;\n+  private Worker worker;\n+  private String taskQueue;\n+  private boolean useExternalService;\n+\n+  private WorkerRule(\n+      TestWorkflowEnvironment testEnvironment,\n+      boolean useExternalService,\n+      Class<?>[] workflowTypes,\n+      Object[] activityImplementations,\n+      WorkerOptions workerOptions) {\n+    this.testEnvironment = testEnvironment;\n+    this.useExternalService = useExternalService;\n+    this.workflowTypes = workflowTypes;\n+    this.activityImplementations = activityImplementations;\n+    this.workerOptions = workerOptions;\n+  }\n+\n+  static class Builder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQyMzU1NQ=="}, "originalCommit": {"oid": "1604ecd0dd950f51a8c9eb4e914bd6c0d7f61896"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjI3MTAxOnYy", "diffSide": "RIGHT", "path": "temporal-sdk/src/test/java/io/temporal/workflow/WorkerRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxOTo0NDo1OVrOIKHMdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMDoyMjo0OFrOIKIKQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ3NDU0OA==", "bodyText": "I would rename it to TestWorkflowRule to be consistent with TestWorkflowEnvironment", "url": "https://github.com/temporalio/sdk-java/pull/286#discussion_r547474548", "createdAt": "2020-12-22T19:44:59Z", "author": {"login": "mfateev"}, "path": "temporal-sdk/src/test/java/io/temporal/workflow/WorkerRule.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ *  Copyright (C) 2020 Temporal Technologies, Inc. All Rights Reserved.\n+ *\n+ *  Copyright 2012-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Modifications copyright (C) 2017 Uber Technologies, Inc.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\"). You may not\n+ *  use this file except in compliance with the License. A copy of the License is\n+ *  located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed on\n+ *  an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package io.temporal.workflow;\n+\n+import io.temporal.client.WorkflowClient;\n+import io.temporal.client.WorkflowClientOptions;\n+import io.temporal.testing.TestEnvironmentOptions;\n+import io.temporal.testing.TestWorkflowEnvironment;\n+import io.temporal.worker.Worker;\n+import io.temporal.worker.WorkerFactoryOptions;\n+import io.temporal.worker.WorkerOptions;\n+import java.util.UUID;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+public class WorkerRule implements TestRule {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1604ecd0dd950f51a8c9eb4e914bd6c0d7f61896"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ5MDM2OA==", "bodyText": "Done", "url": "https://github.com/temporalio/sdk-java/pull/286#discussion_r547490368", "createdAt": "2020-12-22T20:22:48Z", "author": {"login": "vitarb"}, "path": "temporal-sdk/src/test/java/io/temporal/workflow/WorkerRule.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ *  Copyright (C) 2020 Temporal Technologies, Inc. All Rights Reserved.\n+ *\n+ *  Copyright 2012-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Modifications copyright (C) 2017 Uber Technologies, Inc.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\"). You may not\n+ *  use this file except in compliance with the License. A copy of the License is\n+ *  located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed on\n+ *  an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package io.temporal.workflow;\n+\n+import io.temporal.client.WorkflowClient;\n+import io.temporal.client.WorkflowClientOptions;\n+import io.temporal.testing.TestEnvironmentOptions;\n+import io.temporal.testing.TestWorkflowEnvironment;\n+import io.temporal.worker.Worker;\n+import io.temporal.worker.WorkerFactoryOptions;\n+import io.temporal.worker.WorkerOptions;\n+import java.util.UUID;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+public class WorkerRule implements TestRule {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ3NDU0OA=="}, "originalCommit": {"oid": "1604ecd0dd950f51a8c9eb4e914bd6c0d7f61896"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjY3NzA5OnYy", "diffSide": "RIGHT", "path": "temporal-sdk/src/test/java/io/temporal/workflow/TestWorkflowRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMjoyMjo1NFrOIKK7CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzoxMjoyOVrOIKL3EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUzNTYyNA==", "bodyText": "Add JavaDoc explaining the meaning of the target and useExternalService properties.", "url": "https://github.com/temporalio/sdk-java/pull/286#discussion_r547535624", "createdAt": "2020-12-22T22:22:54Z", "author": {"login": "mfateev"}, "path": "temporal-sdk/src/test/java/io/temporal/workflow/TestWorkflowRule.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ *  Copyright (C) 2020 Temporal Technologies, Inc. All Rights Reserved.\n+ *\n+ *  Copyright 2012-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Modifications copyright (C) 2017 Uber Technologies, Inc.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\"). You may not\n+ *  use this file except in compliance with the License. A copy of the License is\n+ *  located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed on\n+ *  an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package io.temporal.workflow;\n+\n+import io.temporal.client.WorkflowClient;\n+import io.temporal.client.WorkflowClientOptions;\n+import io.temporal.testing.TestEnvironmentOptions;\n+import io.temporal.testing.TestWorkflowEnvironment;\n+import io.temporal.worker.Worker;\n+import io.temporal.worker.WorkerFactoryOptions;\n+import io.temporal.worker.WorkerOptions;\n+import java.util.UUID;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+public class TestWorkflowRule implements TestRule {\n+\n+  private final Class<?>[] workflowTypes;\n+  private final Object[] activityImplementations;\n+  private final TestWorkflowEnvironment testEnvironment;\n+  private final WorkerOptions workerOptions;\n+  private final boolean useExternalService;\n+  private Worker worker;\n+  private String taskQueue;\n+\n+  private TestWorkflowRule(\n+      TestWorkflowEnvironment testEnvironment,\n+      boolean useExternalService,\n+      Class<?>[] workflowTypes,\n+      Object[] activityImplementations,\n+      WorkerOptions workerOptions) {\n+    this.testEnvironment = testEnvironment;\n+    this.useExternalService = useExternalService;\n+    this.workflowTypes = workflowTypes;\n+    this.activityImplementations = activityImplementations;\n+    this.workerOptions = workerOptions;\n+  }\n+\n+  public static Builder newBuilder() {\n+    return new Builder();\n+  }\n+\n+  public static class Builder {\n+    private WorkerOptions workerOptions;\n+    private String namespace;\n+    private Class<?>[] workflowTypes;\n+    private Object[] activityImplementations;\n+    private boolean useExternalService;\n+    private String target;\n+\n+    private Builder() {}\n+\n+    public Builder setWorkerOptions(WorkerOptions options) {\n+      this.workerOptions = options;\n+      return this;\n+    }\n+\n+    public Builder setNamespace(String namespace) {\n+      this.namespace = namespace;\n+      return this;\n+    }\n+\n+    public Builder setWorkflowTypes(Class<?>... workflowTypes) {\n+      this.workflowTypes = workflowTypes;\n+      return this;\n+    }\n+\n+    public Builder setActivityImplementations(Object... activityImplementations) {\n+      this.activityImplementations = activityImplementations;\n+      return this;\n+    }\n+\n+    public Builder setUseExternalService(boolean useExternalService) {\n+      this.useExternalService = useExternalService;\n+      return this;\n+    }\n+\n+    public Builder setTarget(String target) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02213508c966379f08015cc457971db6cd22e07e"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1MDk5Mg==", "bodyText": "Added here as well  as also included a java doc with example for the entire rule.", "url": "https://github.com/temporalio/sdk-java/pull/286#discussion_r547550992", "createdAt": "2020-12-22T23:12:29Z", "author": {"login": "vitarb"}, "path": "temporal-sdk/src/test/java/io/temporal/workflow/TestWorkflowRule.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ *  Copyright (C) 2020 Temporal Technologies, Inc. All Rights Reserved.\n+ *\n+ *  Copyright 2012-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Modifications copyright (C) 2017 Uber Technologies, Inc.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\"). You may not\n+ *  use this file except in compliance with the License. A copy of the License is\n+ *  located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed on\n+ *  an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package io.temporal.workflow;\n+\n+import io.temporal.client.WorkflowClient;\n+import io.temporal.client.WorkflowClientOptions;\n+import io.temporal.testing.TestEnvironmentOptions;\n+import io.temporal.testing.TestWorkflowEnvironment;\n+import io.temporal.worker.Worker;\n+import io.temporal.worker.WorkerFactoryOptions;\n+import io.temporal.worker.WorkerOptions;\n+import java.util.UUID;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+public class TestWorkflowRule implements TestRule {\n+\n+  private final Class<?>[] workflowTypes;\n+  private final Object[] activityImplementations;\n+  private final TestWorkflowEnvironment testEnvironment;\n+  private final WorkerOptions workerOptions;\n+  private final boolean useExternalService;\n+  private Worker worker;\n+  private String taskQueue;\n+\n+  private TestWorkflowRule(\n+      TestWorkflowEnvironment testEnvironment,\n+      boolean useExternalService,\n+      Class<?>[] workflowTypes,\n+      Object[] activityImplementations,\n+      WorkerOptions workerOptions) {\n+    this.testEnvironment = testEnvironment;\n+    this.useExternalService = useExternalService;\n+    this.workflowTypes = workflowTypes;\n+    this.activityImplementations = activityImplementations;\n+    this.workerOptions = workerOptions;\n+  }\n+\n+  public static Builder newBuilder() {\n+    return new Builder();\n+  }\n+\n+  public static class Builder {\n+    private WorkerOptions workerOptions;\n+    private String namespace;\n+    private Class<?>[] workflowTypes;\n+    private Object[] activityImplementations;\n+    private boolean useExternalService;\n+    private String target;\n+\n+    private Builder() {}\n+\n+    public Builder setWorkerOptions(WorkerOptions options) {\n+      this.workerOptions = options;\n+      return this;\n+    }\n+\n+    public Builder setNamespace(String namespace) {\n+      this.namespace = namespace;\n+      return this;\n+    }\n+\n+    public Builder setWorkflowTypes(Class<?>... workflowTypes) {\n+      this.workflowTypes = workflowTypes;\n+      return this;\n+    }\n+\n+    public Builder setActivityImplementations(Object... activityImplementations) {\n+      this.activityImplementations = activityImplementations;\n+      return this;\n+    }\n+\n+    public Builder setUseExternalService(boolean useExternalService) {\n+      this.useExternalService = useExternalService;\n+      return this;\n+    }\n+\n+    public Builder setTarget(String target) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUzNTYyNA=="}, "originalCommit": {"oid": "02213508c966379f08015cc457971db6cd22e07e"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjY3ODEzOnYy", "diffSide": "RIGHT", "path": "temporal-sdk/src/main/java/io/temporal/testing/TestEnvironmentOptions.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMjoyMzoyM1rOIKK7nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzoyMTo1OVrOIKMCVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUzNTc3NQ==", "bodyText": "rename to target and add appropriate JavaDoc.", "url": "https://github.com/temporalio/sdk-java/pull/286#discussion_r547535775", "createdAt": "2020-12-22T22:23:23Z", "author": {"login": "mfateev"}, "path": "temporal-sdk/src/main/java/io/temporal/testing/TestEnvironmentOptions.java", "diffHunk": "@@ -77,29 +83,52 @@ public Builder setMetricsScope(Scope metricsScope) {\n       return this;\n     }\n \n+    public Builder setUseExternalService(boolean useExternalService) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02213508c966379f08015cc457971db6cd22e07e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1MTEyNQ==", "bodyText": "Do you want to rename to setUseExternalTarget? Added a javadoc.", "url": "https://github.com/temporalio/sdk-java/pull/286#discussion_r547551125", "createdAt": "2020-12-22T23:13:03Z", "author": {"login": "vitarb"}, "path": "temporal-sdk/src/main/java/io/temporal/testing/TestEnvironmentOptions.java", "diffHunk": "@@ -77,29 +83,52 @@ public Builder setMetricsScope(Scope metricsScope) {\n       return this;\n     }\n \n+    public Builder setUseExternalService(boolean useExternalService) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUzNTc3NQ=="}, "originalCommit": {"oid": "02213508c966379f08015cc457971db6cd22e07e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1Mzg3OA==", "bodyText": "Addressed the naming in WorkerFactoryOptions", "url": "https://github.com/temporalio/sdk-java/pull/286#discussion_r547553878", "createdAt": "2020-12-22T23:21:59Z", "author": {"login": "vitarb"}, "path": "temporal-sdk/src/main/java/io/temporal/testing/TestEnvironmentOptions.java", "diffHunk": "@@ -77,29 +83,52 @@ public Builder setMetricsScope(Scope metricsScope) {\n       return this;\n     }\n \n+    public Builder setUseExternalService(boolean useExternalService) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUzNTc3NQ=="}, "originalCommit": {"oid": "02213508c966379f08015cc457971db6cd22e07e"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Mjc4Nzk2OnYy", "diffSide": "RIGHT", "path": "temporal-sdk/src/main/java/io/temporal/testing/TestEnvironmentOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzoxNTo0NFrOIKL6wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzoxNTo0NFrOIKL6wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1MTkzNw==", "bodyText": "Rename to setTarget", "url": "https://github.com/temporalio/sdk-java/pull/286#discussion_r547551937", "createdAt": "2020-12-22T23:15:44Z", "author": {"login": "mfateev"}, "path": "temporal-sdk/src/main/java/io/temporal/testing/TestEnvironmentOptions.java", "diffHunk": "@@ -77,29 +83,52 @@ public Builder setMetricsScope(Scope metricsScope) {\n       return this;\n     }\n \n+    public Builder setUseExternalService(boolean useExternalService) {\n+      this.useExternalService = useExternalService;\n+      return this;\n+    }\n+\n+    public Builder setServiceAddress(String serviceAddress) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a22bec502c1e0790264a2cef0a4d2c734e5c373e"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjgwNTEyOnYy", "diffSide": "RIGHT", "path": "temporal-sdk/src/main/java/io/temporal/internal/worker/ActivityWorker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzoyMzo0OVrOIKMEbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzozOToyNlrOIKMV1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1NDQxNQ==", "bodyText": "Let's move the try to the beginning of the method. For example, if propagateContext throws we are going to leak semaphore.", "url": "https://github.com/temporalio/sdk-java/pull/286#discussion_r547554415", "createdAt": "2020-12-22T23:23:49Z", "author": {"login": "mfateev"}, "path": "temporal-sdk/src/main/java/io/temporal/internal/worker/ActivityWorker.java", "diffHunk": "@@ -161,44 +160,44 @@ private TaskHandlerImpl(ActivityTaskHandler handler) {\n     }\n \n     @Override\n-    public void handle(PollActivityTaskQueueResponse task) throws Exception {\n-\n+    public void handle(ActivityTask task) throws Exception {\n+      PollActivityTaskQueueResponse r = task.getResponse();\n       Scope metricsScope =\n           options\n               .getMetricsScope()\n               .tagged(\n                   ImmutableMap.of(\n                       MetricsTag.ACTIVITY_TYPE,\n-                      task.getActivityType().getName(),\n+                      r.getActivityType().getName(),\n                       MetricsTag.WORKFLOW_TYPE,\n-                      task.getWorkflowType().getName()));\n+                      r.getWorkflowType().getName()));\n \n       metricsScope\n           .timer(MetricsType.ACTIVITY_SCHEDULE_TO_START_LATENCY)\n           .record(\n               ProtobufTimeUtils.toM3Duration(\n-                  task.getStartedTime(), task.getCurrentAttemptScheduledTime()));\n+                  r.getStartedTime(), r.getCurrentAttemptScheduledTime()));\n \n       // The following tags are for logging.\n-      MDC.put(LoggerTag.ACTIVITY_ID, task.getActivityId());\n-      MDC.put(LoggerTag.ACTIVITY_TYPE, task.getActivityType().getName());\n-      MDC.put(LoggerTag.WORKFLOW_ID, task.getWorkflowExecution().getWorkflowId());\n-      MDC.put(LoggerTag.RUN_ID, task.getWorkflowExecution().getRunId());\n+      MDC.put(LoggerTag.ACTIVITY_ID, r.getActivityId());\n+      MDC.put(LoggerTag.ACTIVITY_TYPE, r.getActivityType().getName());\n+      MDC.put(LoggerTag.WORKFLOW_ID, r.getWorkflowExecution().getWorkflowId());\n+      MDC.put(LoggerTag.RUN_ID, r.getWorkflowExecution().getRunId());\n \n-      propagateContext(task);\n+      propagateContext(r);\n \n       try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3bc190e392bba64ebc20d5a2b2f31a606a8601"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1ODg3MQ==", "bodyText": "Done, we still need to have metric scope and response variables declared outside of the try block though.\nI think it should be safe this way.", "url": "https://github.com/temporalio/sdk-java/pull/286#discussion_r547558871", "createdAt": "2020-12-22T23:39:26Z", "author": {"login": "vitarb"}, "path": "temporal-sdk/src/main/java/io/temporal/internal/worker/ActivityWorker.java", "diffHunk": "@@ -161,44 +160,44 @@ private TaskHandlerImpl(ActivityTaskHandler handler) {\n     }\n \n     @Override\n-    public void handle(PollActivityTaskQueueResponse task) throws Exception {\n-\n+    public void handle(ActivityTask task) throws Exception {\n+      PollActivityTaskQueueResponse r = task.getResponse();\n       Scope metricsScope =\n           options\n               .getMetricsScope()\n               .tagged(\n                   ImmutableMap.of(\n                       MetricsTag.ACTIVITY_TYPE,\n-                      task.getActivityType().getName(),\n+                      r.getActivityType().getName(),\n                       MetricsTag.WORKFLOW_TYPE,\n-                      task.getWorkflowType().getName()));\n+                      r.getWorkflowType().getName()));\n \n       metricsScope\n           .timer(MetricsType.ACTIVITY_SCHEDULE_TO_START_LATENCY)\n           .record(\n               ProtobufTimeUtils.toM3Duration(\n-                  task.getStartedTime(), task.getCurrentAttemptScheduledTime()));\n+                  r.getStartedTime(), r.getCurrentAttemptScheduledTime()));\n \n       // The following tags are for logging.\n-      MDC.put(LoggerTag.ACTIVITY_ID, task.getActivityId());\n-      MDC.put(LoggerTag.ACTIVITY_TYPE, task.getActivityType().getName());\n-      MDC.put(LoggerTag.WORKFLOW_ID, task.getWorkflowExecution().getWorkflowId());\n-      MDC.put(LoggerTag.RUN_ID, task.getWorkflowExecution().getRunId());\n+      MDC.put(LoggerTag.ACTIVITY_ID, r.getActivityId());\n+      MDC.put(LoggerTag.ACTIVITY_TYPE, r.getActivityType().getName());\n+      MDC.put(LoggerTag.WORKFLOW_ID, r.getWorkflowExecution().getWorkflowId());\n+      MDC.put(LoggerTag.RUN_ID, r.getWorkflowExecution().getRunId());\n \n-      propagateContext(task);\n+      propagateContext(r);\n \n       try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1NDQxNQ=="}, "originalCommit": {"oid": "3b3bc190e392bba64ebc20d5a2b2f31a606a8601"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Mjg0MDA4OnYy", "diffSide": "RIGHT", "path": "temporal-sdk/src/main/java/io/temporal/internal/worker/ActivityPollTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzo0MToxNlrOIKMXrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzo0OTozMlrOIKMgiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1OTM0MQ==", "bodyText": "I believe we have to move this acquire to before the try", "url": "https://github.com/temporalio/sdk-java/pull/286#discussion_r547559341", "createdAt": "2020-12-22T23:41:16Z", "author": {"login": "mfateev"}, "path": "temporal-sdk/src/main/java/io/temporal/internal/worker/ActivityPollTask.java", "diffHunk": "@@ -86,31 +89,39 @@ public PollActivityTaskQueueResponse poll() {\n     if (log.isTraceEnabled()) {\n       log.trace(\"poll request begin: \" + pollRequest);\n     }\n-    PollActivityTaskQueueResponse result;\n+    PollActivityTaskQueueResponse response;\n+    boolean isSuccessful = false;\n     try {\n-      result =\n-          service\n-              .blockingStub()\n-              .withOption(METRICS_TAGS_CALL_OPTIONS_KEY, metricsScope)\n-              .pollActivityTaskQueue(pollRequest.build());\n-    } catch (StatusRuntimeException e) {\n-      if (e.getStatus().getCode() == Status.Code.UNAVAILABLE\n-          && e.getMessage().startsWith(\"UNAVAILABLE: Channel shutdown\")) {\n-        return null;\n+      pollSemaphore.acquire();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59133a170d8bb69cf7d6a41b949e8db327df7fb2"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU2MTYwOQ==", "bodyText": "done", "url": "https://github.com/temporalio/sdk-java/pull/286#discussion_r547561609", "createdAt": "2020-12-22T23:49:32Z", "author": {"login": "vitarb"}, "path": "temporal-sdk/src/main/java/io/temporal/internal/worker/ActivityPollTask.java", "diffHunk": "@@ -86,31 +89,39 @@ public PollActivityTaskQueueResponse poll() {\n     if (log.isTraceEnabled()) {\n       log.trace(\"poll request begin: \" + pollRequest);\n     }\n-    PollActivityTaskQueueResponse result;\n+    PollActivityTaskQueueResponse response;\n+    boolean isSuccessful = false;\n     try {\n-      result =\n-          service\n-              .blockingStub()\n-              .withOption(METRICS_TAGS_CALL_OPTIONS_KEY, metricsScope)\n-              .pollActivityTaskQueue(pollRequest.build());\n-    } catch (StatusRuntimeException e) {\n-      if (e.getStatus().getCode() == Status.Code.UNAVAILABLE\n-          && e.getMessage().startsWith(\"UNAVAILABLE: Channel shutdown\")) {\n-        return null;\n+      pollSemaphore.acquire();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1OTM0MQ=="}, "originalCommit": {"oid": "59133a170d8bb69cf7d6a41b949e8db327df7fb2"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1688, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}