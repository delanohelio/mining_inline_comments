{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0OTc4NjUw", "number": 101, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDoyNjowMVrOEGJvVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMTo0MDowNlrOEGKe6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODg2NDg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/temporal/failure/ApplicationFailure.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDoyNjowMVrOGkxheA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzowMjowOVrOGkz-Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMzMwNA==", "bodyText": "Is there pros to this naming vs isRetryable? Seems off having a negative on a bool property", "url": "https://github.com/temporalio/sdk-java/pull/101#discussion_r441213304", "createdAt": "2020-06-17T00:26:01Z", "author": {"login": "shawnhathaway"}, "path": "src/main/java/io/temporal/failure/ApplicationFailure.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ *  Copyright (C) 2020 Temporal Technologies, Inc. All Rights Reserved.\n+ *\n+ *  Copyright 2012-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Modifications copyright (C) 2017 Uber Technologies, Inc.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\"). You may not\n+ *  use this file except in compliance with the License. A copy of the License is\n+ *  located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed on\n+ *  an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package io.temporal.failure;\n+\n+import com.google.common.base.Strings;\n+import io.temporal.common.converter.DataConverter;\n+import io.temporal.common.converter.EncodedValue;\n+import io.temporal.common.converter.Value;\n+\n+/**\n+ * Application failure is used to communicate application specific failures between workflows and\n+ * activities.\n+ *\n+ * <p>Throw this exception to have full control over type and details if the exception delivered to\n+ * the caller workflow or client.\n+ *\n+ * <p>Any unhandled exception which doesn't extend {@link TemporalFailure} is converted to an\n+ * instance of this class before being returned to a caller.\n+ *\n+ * <p>The {@code type} property is used by {@link io.temporal.common.RetryOptions} to determine if\n+ * an instance of this exception is non retryable. Another way to avoid retrying an exception of\n+ * this type is by setting {@code nonRetryable} flag to @{code true}.\n+ *\n+ * <p>The conversion of an exception that doesn't extend {@link TemporalFailure} to an\n+ * ApplicationFailure is done as following:\n+ *\n+ * <ul>\n+ *   <li>type is set to the exception full type name.\n+ *   <li>message is set to the exception message\n+ *   <li>nonRetryable is set to false\n+ *   <li>details are set to null\n+ *   <li>stack trace is copied from the original exception\n+ * </ul>\n+ */\n+public final class ApplicationFailure extends TemporalFailure {\n+  private final String type;\n+  private final Value details;\n+  private boolean nonRetryable;\n+\n+  /**\n+   * @param message optional error message\n+   * @param type optional error type that is used by {@link\n+   *     io.temporal.common.RetryOptions#addDoNotRetry(String...)}.\n+   * @param details optional details about the failure. They are serialized using the same approach\n+   *     as arguments and results and can be accessed through {@link #getDetails()}\n+   * @param cause failure cause. Each element of the cause chain is converted to ApplicationFailure\n+   *     if it doesn't extend {@link TemporalFailure}.\n+   */\n+  public ApplicationFailure(String message, String type, Object details, Exception cause) {\n+    this(message, type, new EncodedValue(details), false, cause);\n+  }\n+\n+  /**\n+   * @param message optional error message\n+   * @param type optional error type that is used by {@link\n+   *     io.temporal.common.RetryOptions#addDoNotRetry(String...)}.\n+   * @param details optional details about the failure. They are serialized using the same approach\n+   *     as arguments and results.\n+   */\n+  public ApplicationFailure(String message, String type, Object details) {\n+    this(message, type, new EncodedValue(details), false, null);\n+  }\n+\n+  /**\n+   * @param message optional error message\n+   * @param type optional error type that is used by {@link\n+   *     io.temporal.common.RetryOptions#addDoNotRetry(String...)}.\n+   */\n+  public ApplicationFailure(String message, String type) {\n+    this(message, type, new EncodedValue(null), false, null);\n+  }\n+\n+  /** * @param message optional error message */\n+  public ApplicationFailure(String message) {\n+    this(message, null);\n+  }\n+\n+  ApplicationFailure(\n+      String message, String type, Value details, boolean nonRetryable, Exception cause) {\n+    super(getMessage(message, type, nonRetryable), message, cause);\n+    this.type = type;\n+    this.details = details;\n+    this.nonRetryable = nonRetryable;\n+  }\n+\n+  public String getType() {\n+    return type;\n+  }\n+\n+  public Value getDetails() {\n+    return details;\n+  }\n+\n+  public void setNonRetryable(boolean nonRetryable) {\n+    this.nonRetryable = nonRetryable;\n+  }\n+\n+  public boolean isNonRetryable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46916db756b6cb14f4205d271a9e848eb783ef72"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1MzQ1MA==", "bodyText": "The pattern I always use is to have default value as the default value of the type. For boolean the default is false.", "url": "https://github.com/temporalio/sdk-java/pull/101#discussion_r441253450", "createdAt": "2020-06-17T03:02:09Z", "author": {"login": "mfateev"}, "path": "src/main/java/io/temporal/failure/ApplicationFailure.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ *  Copyright (C) 2020 Temporal Technologies, Inc. All Rights Reserved.\n+ *\n+ *  Copyright 2012-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Modifications copyright (C) 2017 Uber Technologies, Inc.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\"). You may not\n+ *  use this file except in compliance with the License. A copy of the License is\n+ *  located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed on\n+ *  an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package io.temporal.failure;\n+\n+import com.google.common.base.Strings;\n+import io.temporal.common.converter.DataConverter;\n+import io.temporal.common.converter.EncodedValue;\n+import io.temporal.common.converter.Value;\n+\n+/**\n+ * Application failure is used to communicate application specific failures between workflows and\n+ * activities.\n+ *\n+ * <p>Throw this exception to have full control over type and details if the exception delivered to\n+ * the caller workflow or client.\n+ *\n+ * <p>Any unhandled exception which doesn't extend {@link TemporalFailure} is converted to an\n+ * instance of this class before being returned to a caller.\n+ *\n+ * <p>The {@code type} property is used by {@link io.temporal.common.RetryOptions} to determine if\n+ * an instance of this exception is non retryable. Another way to avoid retrying an exception of\n+ * this type is by setting {@code nonRetryable} flag to @{code true}.\n+ *\n+ * <p>The conversion of an exception that doesn't extend {@link TemporalFailure} to an\n+ * ApplicationFailure is done as following:\n+ *\n+ * <ul>\n+ *   <li>type is set to the exception full type name.\n+ *   <li>message is set to the exception message\n+ *   <li>nonRetryable is set to false\n+ *   <li>details are set to null\n+ *   <li>stack trace is copied from the original exception\n+ * </ul>\n+ */\n+public final class ApplicationFailure extends TemporalFailure {\n+  private final String type;\n+  private final Value details;\n+  private boolean nonRetryable;\n+\n+  /**\n+   * @param message optional error message\n+   * @param type optional error type that is used by {@link\n+   *     io.temporal.common.RetryOptions#addDoNotRetry(String...)}.\n+   * @param details optional details about the failure. They are serialized using the same approach\n+   *     as arguments and results and can be accessed through {@link #getDetails()}\n+   * @param cause failure cause. Each element of the cause chain is converted to ApplicationFailure\n+   *     if it doesn't extend {@link TemporalFailure}.\n+   */\n+  public ApplicationFailure(String message, String type, Object details, Exception cause) {\n+    this(message, type, new EncodedValue(details), false, cause);\n+  }\n+\n+  /**\n+   * @param message optional error message\n+   * @param type optional error type that is used by {@link\n+   *     io.temporal.common.RetryOptions#addDoNotRetry(String...)}.\n+   * @param details optional details about the failure. They are serialized using the same approach\n+   *     as arguments and results.\n+   */\n+  public ApplicationFailure(String message, String type, Object details) {\n+    this(message, type, new EncodedValue(details), false, null);\n+  }\n+\n+  /**\n+   * @param message optional error message\n+   * @param type optional error type that is used by {@link\n+   *     io.temporal.common.RetryOptions#addDoNotRetry(String...)}.\n+   */\n+  public ApplicationFailure(String message, String type) {\n+    this(message, type, new EncodedValue(null), false, null);\n+  }\n+\n+  /** * @param message optional error message */\n+  public ApplicationFailure(String message) {\n+    this(message, null);\n+  }\n+\n+  ApplicationFailure(\n+      String message, String type, Value details, boolean nonRetryable, Exception cause) {\n+    super(getMessage(message, type, nonRetryable), message, cause);\n+    this.type = type;\n+    this.details = details;\n+    this.nonRetryable = nonRetryable;\n+  }\n+\n+  public String getType() {\n+    return type;\n+  }\n+\n+  public Value getDetails() {\n+    return details;\n+  }\n+\n+  public void setNonRetryable(boolean nonRetryable) {\n+    this.nonRetryable = nonRetryable;\n+  }\n+\n+  public boolean isNonRetryable() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMzMwNA=="}, "originalCommit": {"oid": "46916db756b6cb14f4205d271a9e848eb783ef72"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODk1Mjc1OnYy", "diffSide": "RIGHT", "path": "src/test/java/io/temporal/worker/StickyWorkerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMToxOTo1OVrOGkyXJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzowMzoyMFrOGkz_Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyNzA0Ng==", "bodyText": "For defining time intervals - Do we prefer units on ints rather than strongly typed Duration?", "url": "https://github.com/temporalio/sdk-java/pull/101#discussion_r441227046", "createdAt": "2020-06-17T01:19:59Z", "author": {"login": "shawnhathaway"}, "path": "src/test/java/io/temporal/worker/StickyWorkerTest.java", "diffHunk": "@@ -226,7 +226,7 @@ public void workflowCacheEvictionDueToThreads() {\n     int count = 100;\n     ActivitiesWorkflow[] workflows = new ActivitiesWorkflow[count];\n     WorkflowParams w = new WorkflowParams();\n-    w.TemporalSleep = Duration.ofSeconds(1);\n+    w.TemporalSleepMillis = 1000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46916db756b6cb14f4205d271a9e848eb783ef72"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1MzcyMg==", "bodyText": "We prefer Duration unless it has to be passed across process boundary and serialized/deserialized. We can add serialization of Duration to the Jackson json serializer, but then it might not play well with Go and other SDKs.", "url": "https://github.com/temporalio/sdk-java/pull/101#discussion_r441253722", "createdAt": "2020-06-17T03:03:20Z", "author": {"login": "mfateev"}, "path": "src/test/java/io/temporal/worker/StickyWorkerTest.java", "diffHunk": "@@ -226,7 +226,7 @@ public void workflowCacheEvictionDueToThreads() {\n     int count = 100;\n     ActivitiesWorkflow[] workflows = new ActivitiesWorkflow[count];\n     WorkflowParams w = new WorkflowParams();\n-    w.TemporalSleep = Duration.ofSeconds(1);\n+    w.TemporalSleepMillis = 1000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyNzA0Ng=="}, "originalCommit": {"oid": "46916db756b6cb14f4205d271a9e848eb783ef72"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODk1NDk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/temporal/internal/common/LocalActivityMarkerData.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMToyMToxMFrOGkyYYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzowNToxM1rOGk0BIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyNzM2MQ==", "bodyText": "Mixed time types? ReplayTimeMillis vs Backoff", "url": "https://github.com/temporalio/sdk-java/pull/101#discussion_r441227361", "createdAt": "2020-06-17T01:21:10Z", "author": {"login": "shawnhathaway"}, "path": "src/main/java/io/temporal/internal/common/LocalActivityMarkerData.java", "diffHunk": "@@ -95,120 +98,115 @@ public Builder setBackoff(Duration backoff) {\n \n     public LocalActivityMarkerData build() {\n       return new LocalActivityMarkerData(\n-          activityId,\n-          activityType,\n-          replayTimeMillis,\n-          result,\n-          errReason,\n-          attempt,\n-          backoff,\n-          isCancelled);\n+          activityId, activityType, replayTimeMillis, result, failure, attempt, backoff);\n     }\n   }\n \n-  private static class LocalActivityMarkerHeader {\n-    private final String activityId;\n-    private final String activityType;\n-    private final String errReason;\n-    private final long replayTimeMillis;\n-    private final int attempt;\n-    private final Duration backoff;\n-    private final boolean isCancelled;\n+  private static class DataValue {\n+    private String activityId;\n+    private String activityType;\n+    private long replayTimeMillis;\n+    private int attempt;\n+    private long backoffMillis;\n+\n+    // Needed by Jackson deserializer\n+    DataValue() {}\n \n-    LocalActivityMarkerHeader(\n+    DataValue(\n         String activityId,\n         String activityType,\n         long replayTimeMillis,\n-        String errReason,\n         int attempt,\n-        Duration backoff,\n-        boolean isCancelled) {\n+        Duration backoff) {\n       this.activityId = activityId;\n       this.activityType = activityType;\n       this.replayTimeMillis = replayTimeMillis;\n-      this.errReason = errReason;\n       this.attempt = attempt;\n-      this.backoff = backoff;\n-      this.isCancelled = isCancelled;\n+      this.backoffMillis = backoff == null ? 0 : backoff.toMillis();\n     }\n   }\n \n-  private final LocalActivityMarkerHeader headers;\n+  private final DataValue data;\n   private final Optional<Payloads> result;\n+  private final Optional<Failure> failure;\n \n   private LocalActivityMarkerData(\n       String activityId,\n       String activityType,\n       long replayTimeMillis,\n       Optional<Payloads> result,\n-      String errReason,\n+      Optional<Failure> failure,\n       int attempt,\n-      Duration backoff,\n-      boolean isCancelled) {\n-    this.headers =\n-        new LocalActivityMarkerHeader(\n-            activityId, activityType, replayTimeMillis, errReason, attempt, backoff, isCancelled);\n+      Duration backoff) {\n+    this.data = new DataValue(activityId, activityType, replayTimeMillis, attempt, backoff);\n     this.result = result;\n+    this.failure = failure;\n   }\n \n-  private LocalActivityMarkerData(LocalActivityMarkerHeader headers, Optional<Payloads> result) {\n-    this.headers = headers;\n+  private LocalActivityMarkerData(\n+      DataValue data, Optional<Payloads> result, Optional<Failure> failure) {\n+    this.data = data;\n     this.result = result;\n+    this.failure = failure;\n   }\n \n   public String getActivityId() {\n-    return headers.activityId;\n+    return data.activityId;\n   }\n \n   public String getActivityType() {\n-    return headers.activityType;\n-  }\n-\n-  public String getErrReason() {\n-    return headers.errReason;\n+    return data.activityType;\n   }\n \n-  public Optional<Payloads> getErrJson() {\n-    return Strings.isNullOrEmpty(headers.errReason) ? Optional.empty() : result;\n+  public Optional<Failure> getFailure() {\n+    return failure;\n   }\n \n   public Optional<Payloads> getResult() {\n     return result;\n   }\n \n   public long getReplayTimeMillis() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46916db756b6cb14f4205d271a9e848eb783ef72"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1NDE3OQ==", "bodyText": "ReplayTimeMillis is a specific time of replay (timestamp). Backoff is a duration which is time interval.", "url": "https://github.com/temporalio/sdk-java/pull/101#discussion_r441254179", "createdAt": "2020-06-17T03:05:13Z", "author": {"login": "mfateev"}, "path": "src/main/java/io/temporal/internal/common/LocalActivityMarkerData.java", "diffHunk": "@@ -95,120 +98,115 @@ public Builder setBackoff(Duration backoff) {\n \n     public LocalActivityMarkerData build() {\n       return new LocalActivityMarkerData(\n-          activityId,\n-          activityType,\n-          replayTimeMillis,\n-          result,\n-          errReason,\n-          attempt,\n-          backoff,\n-          isCancelled);\n+          activityId, activityType, replayTimeMillis, result, failure, attempt, backoff);\n     }\n   }\n \n-  private static class LocalActivityMarkerHeader {\n-    private final String activityId;\n-    private final String activityType;\n-    private final String errReason;\n-    private final long replayTimeMillis;\n-    private final int attempt;\n-    private final Duration backoff;\n-    private final boolean isCancelled;\n+  private static class DataValue {\n+    private String activityId;\n+    private String activityType;\n+    private long replayTimeMillis;\n+    private int attempt;\n+    private long backoffMillis;\n+\n+    // Needed by Jackson deserializer\n+    DataValue() {}\n \n-    LocalActivityMarkerHeader(\n+    DataValue(\n         String activityId,\n         String activityType,\n         long replayTimeMillis,\n-        String errReason,\n         int attempt,\n-        Duration backoff,\n-        boolean isCancelled) {\n+        Duration backoff) {\n       this.activityId = activityId;\n       this.activityType = activityType;\n       this.replayTimeMillis = replayTimeMillis;\n-      this.errReason = errReason;\n       this.attempt = attempt;\n-      this.backoff = backoff;\n-      this.isCancelled = isCancelled;\n+      this.backoffMillis = backoff == null ? 0 : backoff.toMillis();\n     }\n   }\n \n-  private final LocalActivityMarkerHeader headers;\n+  private final DataValue data;\n   private final Optional<Payloads> result;\n+  private final Optional<Failure> failure;\n \n   private LocalActivityMarkerData(\n       String activityId,\n       String activityType,\n       long replayTimeMillis,\n       Optional<Payloads> result,\n-      String errReason,\n+      Optional<Failure> failure,\n       int attempt,\n-      Duration backoff,\n-      boolean isCancelled) {\n-    this.headers =\n-        new LocalActivityMarkerHeader(\n-            activityId, activityType, replayTimeMillis, errReason, attempt, backoff, isCancelled);\n+      Duration backoff) {\n+    this.data = new DataValue(activityId, activityType, replayTimeMillis, attempt, backoff);\n     this.result = result;\n+    this.failure = failure;\n   }\n \n-  private LocalActivityMarkerData(LocalActivityMarkerHeader headers, Optional<Payloads> result) {\n-    this.headers = headers;\n+  private LocalActivityMarkerData(\n+      DataValue data, Optional<Payloads> result, Optional<Failure> failure) {\n+    this.data = data;\n     this.result = result;\n+    this.failure = failure;\n   }\n \n   public String getActivityId() {\n-    return headers.activityId;\n+    return data.activityId;\n   }\n \n   public String getActivityType() {\n-    return headers.activityType;\n-  }\n-\n-  public String getErrReason() {\n-    return headers.errReason;\n+    return data.activityType;\n   }\n \n-  public Optional<Payloads> getErrJson() {\n-    return Strings.isNullOrEmpty(headers.errReason) ? Optional.empty() : result;\n+  public Optional<Failure> getFailure() {\n+    return failure;\n   }\n \n   public Optional<Payloads> getResult() {\n     return result;\n   }\n \n   public long getReplayTimeMillis() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyNzM2MQ=="}, "originalCommit": {"oid": "46916db756b6cb14f4205d271a9e848eb783ef72"}, "originalPosition": 198}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODk4NjY3OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/temporal/internal/common/StartWorkflowExecutionParameters.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMTo0MDowNlrOGkyr2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzowNjoxMVrOGk0CDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIzMjM0NQ==", "bodyText": "What is the reason for using string rather than types? Does previous usage cause the Illegal reflective access warnings?", "url": "https://github.com/temporalio/sdk-java/pull/101#discussion_r441232345", "createdAt": "2020-06-17T01:40:06Z", "author": {"login": "shawnhathaway"}, "path": "src/main/java/io/temporal/internal/common/StartWorkflowExecutionParameters.java", "diffHunk": "@@ -348,14 +348,14 @@ public static StartWorkflowExecutionParameters fromWorkflowOptions(WorkflowOptio\n       rp.setInitialIntervalInSeconds(roundUpToSeconds(retryOptions.getInitialInterval()));\n       rp.setMaximumIntervalInSeconds(roundUpToSeconds(retryOptions.getMaximumInterval()));\n       rp.setMaximumAttempts(retryOptions.getMaximumAttempts());\n-      List<String> reasons = new ArrayList<>();\n+      List<String> types = new ArrayList<>();\n       // Use exception type name as the reason\n-      List<Class<? extends Throwable>> doNotRetry = retryOptions.getDoNotRetry();\n+      String[] doNotRetry = retryOptions.getDoNotRetry();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46916db756b6cb14f4205d271a9e848eb783ef72"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1NDQxNQ==", "bodyText": "This is to be compatible with other SDKs. An activity can be implemented in Go and return an error type which is not Java exception name.", "url": "https://github.com/temporalio/sdk-java/pull/101#discussion_r441254415", "createdAt": "2020-06-17T03:06:11Z", "author": {"login": "mfateev"}, "path": "src/main/java/io/temporal/internal/common/StartWorkflowExecutionParameters.java", "diffHunk": "@@ -348,14 +348,14 @@ public static StartWorkflowExecutionParameters fromWorkflowOptions(WorkflowOptio\n       rp.setInitialIntervalInSeconds(roundUpToSeconds(retryOptions.getInitialInterval()));\n       rp.setMaximumIntervalInSeconds(roundUpToSeconds(retryOptions.getMaximumInterval()));\n       rp.setMaximumAttempts(retryOptions.getMaximumAttempts());\n-      List<String> reasons = new ArrayList<>();\n+      List<String> types = new ArrayList<>();\n       // Use exception type name as the reason\n-      List<Class<? extends Throwable>> doNotRetry = retryOptions.getDoNotRetry();\n+      String[] doNotRetry = retryOptions.getDoNotRetry();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIzMjM0NQ=="}, "originalCommit": {"oid": "46916db756b6cb14f4205d271a9e848eb783ef72"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1695, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}