{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NzE5Njg2", "number": 1561, "title": "[JBTM-3257] not throwing NPE when request command on recovery trigger is", "bodyText": "https://issues.redhat.com/browse/JBTM-3257\nhttps://issues.redhat.com/browse/JBTM-3259\nMAIN AS_TESTS\n!QA_JTA !QA_JTS_JDKORB !QA_JTS_OPENJDKORB !QA_JTS_JACORB !BLACKTIE !XTS !PERF NO_WIN !RTS !TOMCAT !JACOCO !LRA", "createdAt": "2020-02-20T12:09:15Z", "url": "https://github.com/jbosstm/narayana/pull/1561", "merged": true, "mergeCommit": {"oid": "6900eb71a25f47b96ddf9d8e56e6aee4cfb4582c"}, "closed": true, "closedAt": "2020-03-04T16:47:13Z", "author": {"login": "ochaloup"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGLJ4zgFqTM2MTg5ODgyMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKWvkwAFqTM2ODc2NTkzMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxODk4ODIy", "url": "https://github.com/jbosstm/narayana/pull/1561#pullrequestreview-361898822", "createdAt": "2020-02-20T13:29:17Z", "commit": {"oid": "680ffb9ce48993af22969302fd7303830d72bd8d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMzoyOToxOFrOFsTRVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMzoyOToxOFrOFsTRVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk5NzM5OQ==", "bodyText": "Would it be possible to add a test for this please? I think the description of https://issues.redhat.com/browse/JBTM-3257 indicates that the scan would have started but if I understand where this condition can occur it is before the instruction is read. I wonder why an IOException is not coming out of in.readLine?", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r381997399", "createdAt": "2020-02-20T13:29:18Z", "author": {"login": "tomjenkinson"}, "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/internal/arjuna/recovery/WorkerService.java", "diffHunk": "@@ -63,7 +63,7 @@ public void doWork (InputStream is, OutputStream os) throws IOException\n \t{\n \t    String request = in.readLine();\n \n-        if (request.equals(\"PING\"))\n+        if (\"PING\".equals(request))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "680ffb9ce48993af22969302fd7303830d72bd8d"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMDg0NDYx", "url": "https://github.com/jbosstm/narayana/pull/1561#pullrequestreview-362084461", "createdAt": "2020-02-20T17:15:48Z", "commit": {"oid": "680ffb9ce48993af22969302fd7303830d72bd8d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "680ffb9ce48993af22969302fd7303830d72bd8d", "author": {"user": {"login": "ochaloup", "name": "chalda"}}, "url": "https://github.com/jbosstm/narayana/commit/680ffb9ce48993af22969302fd7303830d72bd8d", "committedDate": "2020-02-20T12:08:01Z", "message": "[JBTM-3257] not throwing NPE when request command on recovery trigger is"}, "afterCommit": {"oid": "035c6e85b54154a638231717c91a28cbb3bcbe26", "author": {"user": {"login": "ochaloup", "name": "chalda"}}, "url": "https://github.com/jbosstm/narayana/commit/035c6e85b54154a638231717c91a28cbb3bcbe26", "committedDate": "2020-02-21T12:36:40Z", "message": "[refactoring] to get more information on error states"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "035c6e85b54154a638231717c91a28cbb3bcbe26", "author": {"user": {"login": "ochaloup", "name": "chalda"}}, "url": "https://github.com/jbosstm/narayana/commit/035c6e85b54154a638231717c91a28cbb3bcbe26", "committedDate": "2020-02-21T12:36:40Z", "message": "[refactoring] to get more information on error states"}, "afterCommit": {"oid": "728025122c8149a4d3929e66badb2b0444e477bf", "author": {"user": {"login": "ochaloup", "name": "chalda"}}, "url": "https://github.com/jbosstm/narayana/commit/728025122c8149a4d3929e66badb2b0444e477bf", "committedDate": "2020-02-24T09:53:49Z", "message": "[refactoring] to get more information on error states"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NjIyODA5", "url": "https://github.com/jbosstm/narayana/pull/1561#pullrequestreview-365622809", "createdAt": "2020-02-27T11:57:22Z", "commit": {"oid": "728025122c8149a4d3929e66badb2b0444e477bf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMTo1NzoyM1rOFvPgyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjowOTo1MFrOFvP3GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4MTU0NQ==", "bodyText": "The method naming convention in this file is to prefix the method name with the level at which the message is logged. This also has the benefit of making it easy to search a source file for various warning, errors, etc", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r385081545", "createdAt": "2020-02-27T11:57:23Z", "author": {"login": "mmusgrov"}, "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/arjuna/logging/arjunaI18NLogger.java", "diffHunk": "@@ -1604,6 +1605,14 @@ public void warn_objectstore_JDBCImple_over_max_image_size(int imageSize,\n \t@Message(id = 12399, value = \"Problem in doWork of CacheStore trying to perform state management\", format = MESSAGE_FORMAT)\n \t@LogMessage(level = WARN)\n \tvoid warn_could_not_handle_objectstore_generic(@Cause Exception ex);\n+\n+\t@Message(id = 12400, value = \"Cannot terminate the recovery manager as the implementation is not known. Could be the recovery manager was not started yet?\", format = MESSAGE_FORMAT)\n+\tString get_recovery_manager_implementation_is_not_set();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "728025122c8149a4d3929e66badb2b0444e477bf"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4MzE2Nw==", "bodyText": "Why no log message?", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r385083167", "createdAt": "2020-02-27T12:00:58Z", "author": {"login": "mmusgrov"}, "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/arjuna/recovery/RecoveryManager.java", "diffHunk": "@@ -441,7 +442,8 @@ public static void main (String[] args)\n                     }\n                     catch(InterruptedException interruptedException)\n                     {\n-                        // do nothing\n+                        System.err.println(\"The retry attempt was interrupted. Exiting...\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "728025122c8149a4d3929e66badb2b0444e477bf"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4NDEyMQ==", "bodyText": "It is not ignored anymore so the name needs updating too.", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r385084121", "createdAt": "2020-02-27T12:03:03Z", "author": {"login": "mmusgrov"}, "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/internal/arjuna/recovery/Listener.java", "diffHunk": "@@ -242,16 +242,17 @@ public synchronized void stopListener()\n            }\n            try {\n                wait();\n-           } catch (InterruptedException e) {\n-               // ignore\n+           } catch (InterruptedException ignoredIe) {\n+               tsLogger.logger.debug(\"Waiting for connection close was interrupted\", ignoredIe);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "728025122c8149a4d3929e66badb2b0444e477bf"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4NDM4MA==", "bodyText": "rename ignoredIe", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r385084380", "createdAt": "2020-02-27T12:03:37Z", "author": {"login": "mmusgrov"}, "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/internal/arjuna/recovery/Listener.java", "diffHunk": "@@ -242,16 +242,17 @@ public synchronized void stopListener()\n            }\n            try {\n                wait();\n-           } catch (InterruptedException e) {\n-               // ignore\n+           } catch (InterruptedException ignoredIe) {\n+               tsLogger.logger.debug(\"Waiting for connection close was interrupted\", ignoredIe);\n            }\n        }\n       \n        // make sure this listener thread has exited before we return\n \n        try {\n            this.join();\n-       } catch (InterruptedException ie) {\n+       } catch (InterruptedException ignoredIe) {\n+           tsLogger.logger.debug(\"Waiting to ensure the listener thread has exited was interrupted\", ignoredIe);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "728025122c8149a4d3929e66badb2b0444e477bf"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4NTcxMQ==", "bodyText": "What does foobar:0 signify?", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r385085711", "createdAt": "2020-02-27T12:06:33Z", "author": {"login": "mmusgrov"}, "path": "ArjunaCore/arjuna/tests/classes/com/hp/mwtests/ts/arjuna/recovery/RecoveryDriverUnitTest.java", "diffHunk": "@@ -46,20 +46,20 @@ public void testInvalid () throws Exception\n         try\n         {\n             rd.asynchronousScan();\n-            \n-            fail();\n+\n+            fail(\"Recovery driver asynchronously calls a non-existing host and port 'foobar:0'. Failure is expected.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "728025122c8149a4d3929e66badb2b0444e477bf"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4NjQ4MA==", "bodyText": "The naming is odd. How about resetInitialState instead?", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r385086480", "createdAt": "2020-02-27T12:08:14Z", "author": {"login": "mmusgrov"}, "path": "ArjunaCore/arjuna/tests/classes/com/hp/mwtests/ts/arjuna/recovery/RecoverySocketUnitTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package com.hp.mwtests.ts.arjuna.recovery;\n+\n+import com.arjuna.ats.arjuna.common.recoveryPropertyManager;\n+import com.arjuna.ats.arjuna.recovery.RecoveryDriver;\n+import com.arjuna.ats.arjuna.recovery.RecoveryManager;\n+import org.jboss.logging.Logger;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintWriter;\n+import java.net.InetAddress;\n+import java.net.Socket;\n+import java.net.SocketTimeoutException;\n+import java.net.UnknownHostException;\n+import java.nio.charset.StandardCharsets;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Test cases which work with a direct connection to socket where RecoveryManager listens at.\n+ */\n+public class RecoverySocketUnitTest {\n+    private static final Logger log = Logger.getLogger(RecoverySocketUnitTest.class);\n+\n+    private static boolean socketRecoveryListenerInitialState;\n+    private static int periodicRecoveryPeriodInitialState, recoveryBackoffPeriodInitialState;\n+\n+    private InetAddress recoveryManagerHost = null;\n+    private int recoveryManagerPort = 0;\n+    private RecoveryManager recoveryManager;\n+\n+    @BeforeClass\n+    public static void getInitialState() {\n+        socketRecoveryListenerInitialState = recoveryPropertyManager.getRecoveryEnvironmentBean().isRecoveryListener();\n+        periodicRecoveryPeriodInitialState =  recoveryPropertyManager.getRecoveryEnvironmentBean().getPeriodicRecoveryPeriod();\n+        recoveryBackoffPeriodInitialState = recoveryPropertyManager.getRecoveryEnvironmentBean().getRecoveryBackoffPeriod();\n+    }\n+\n+    @AfterClass\n+    public static void returnBackInitialState() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "728025122c8149a4d3929e66badb2b0444e477bf"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4NjgwOA==", "bodyText": "Will you add more comment about why the test is waiting?", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r385086808", "createdAt": "2020-02-27T12:08:54Z", "author": {"login": "mmusgrov"}, "path": "ArjunaCore/arjuna/tests/classes/com/hp/mwtests/ts/arjuna/recovery/RecoverySocketUnitTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package com.hp.mwtests.ts.arjuna.recovery;\n+\n+import com.arjuna.ats.arjuna.common.recoveryPropertyManager;\n+import com.arjuna.ats.arjuna.recovery.RecoveryDriver;\n+import com.arjuna.ats.arjuna.recovery.RecoveryManager;\n+import org.jboss.logging.Logger;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintWriter;\n+import java.net.InetAddress;\n+import java.net.Socket;\n+import java.net.SocketTimeoutException;\n+import java.net.UnknownHostException;\n+import java.nio.charset.StandardCharsets;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Test cases which work with a direct connection to socket where RecoveryManager listens at.\n+ */\n+public class RecoverySocketUnitTest {\n+    private static final Logger log = Logger.getLogger(RecoverySocketUnitTest.class);\n+\n+    private static boolean socketRecoveryListenerInitialState;\n+    private static int periodicRecoveryPeriodInitialState, recoveryBackoffPeriodInitialState;\n+\n+    private InetAddress recoveryManagerHost = null;\n+    private int recoveryManagerPort = 0;\n+    private RecoveryManager recoveryManager;\n+\n+    @BeforeClass\n+    public static void getInitialState() {\n+        socketRecoveryListenerInitialState = recoveryPropertyManager.getRecoveryEnvironmentBean().isRecoveryListener();\n+        periodicRecoveryPeriodInitialState =  recoveryPropertyManager.getRecoveryEnvironmentBean().getPeriodicRecoveryPeriod();\n+        recoveryBackoffPeriodInitialState = recoveryPropertyManager.getRecoveryEnvironmentBean().getRecoveryBackoffPeriod();\n+    }\n+\n+    @AfterClass\n+    public static void returnBackInitialState() {\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setRecoveryListener(socketRecoveryListenerInitialState);\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setPeriodicRecoveryPeriod(periodicRecoveryPeriodInitialState);\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setRecoveryBackoffPeriod(recoveryBackoffPeriodInitialState);\n+    }\n+\n+    @Before\n+    public void enableRecoveryListener() throws InterruptedException{\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setRecoveryListener(true);\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setPeriodicRecoveryPeriod(1);\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setRecoveryBackoffPeriod(1);\n+        recoveryManager = RecoveryManager.manager();\n+        // wait for the socket would be established\n+        Thread.sleep(50);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "728025122c8149a4d3929e66badb2b0444e477bf"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4NzI1Ng==", "bodyText": "What is it returning to. More standard naming conventions would be just terminateRecoveryListener or stopRecoveryListener?", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r385087256", "createdAt": "2020-02-27T12:09:50Z", "author": {"login": "mmusgrov"}, "path": "ArjunaCore/arjuna/tests/classes/com/hp/mwtests/ts/arjuna/recovery/RecoverySocketUnitTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package com.hp.mwtests.ts.arjuna.recovery;\n+\n+import com.arjuna.ats.arjuna.common.recoveryPropertyManager;\n+import com.arjuna.ats.arjuna.recovery.RecoveryDriver;\n+import com.arjuna.ats.arjuna.recovery.RecoveryManager;\n+import org.jboss.logging.Logger;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintWriter;\n+import java.net.InetAddress;\n+import java.net.Socket;\n+import java.net.SocketTimeoutException;\n+import java.net.UnknownHostException;\n+import java.nio.charset.StandardCharsets;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Test cases which work with a direct connection to socket where RecoveryManager listens at.\n+ */\n+public class RecoverySocketUnitTest {\n+    private static final Logger log = Logger.getLogger(RecoverySocketUnitTest.class);\n+\n+    private static boolean socketRecoveryListenerInitialState;\n+    private static int periodicRecoveryPeriodInitialState, recoveryBackoffPeriodInitialState;\n+\n+    private InetAddress recoveryManagerHost = null;\n+    private int recoveryManagerPort = 0;\n+    private RecoveryManager recoveryManager;\n+\n+    @BeforeClass\n+    public static void getInitialState() {\n+        socketRecoveryListenerInitialState = recoveryPropertyManager.getRecoveryEnvironmentBean().isRecoveryListener();\n+        periodicRecoveryPeriodInitialState =  recoveryPropertyManager.getRecoveryEnvironmentBean().getPeriodicRecoveryPeriod();\n+        recoveryBackoffPeriodInitialState = recoveryPropertyManager.getRecoveryEnvironmentBean().getRecoveryBackoffPeriod();\n+    }\n+\n+    @AfterClass\n+    public static void returnBackInitialState() {\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setRecoveryListener(socketRecoveryListenerInitialState);\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setPeriodicRecoveryPeriod(periodicRecoveryPeriodInitialState);\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setRecoveryBackoffPeriod(recoveryBackoffPeriodInitialState);\n+    }\n+\n+    @Before\n+    public void enableRecoveryListener() throws InterruptedException{\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setRecoveryListener(true);\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setPeriodicRecoveryPeriod(1);\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setRecoveryBackoffPeriod(1);\n+        recoveryManager = RecoveryManager.manager();\n+        // wait for the socket would be established\n+        Thread.sleep(50);\n+    }\n+\n+    @After\n+    public void returnStateOfRecoveryListener() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "728025122c8149a4d3929e66badb2b0444e477bf"}, "originalPosition": 89}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "728025122c8149a4d3929e66badb2b0444e477bf", "author": {"user": {"login": "ochaloup", "name": "chalda"}}, "url": "https://github.com/jbosstm/narayana/commit/728025122c8149a4d3929e66badb2b0444e477bf", "committedDate": "2020-02-24T09:53:49Z", "message": "[refactoring] to get more information on error states"}, "afterCommit": {"oid": "dbdff0a923468f777d46754439b9a3c4d1316a6d", "author": {"user": {"login": "ochaloup", "name": "chalda"}}, "url": "https://github.com/jbosstm/narayana/commit/dbdff0a923468f777d46754439b9a3c4d1316a6d", "committedDate": "2020-02-28T09:56:15Z", "message": "[refactoring] to get more information on error states"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NDk3MTY5", "url": "https://github.com/jbosstm/narayana/pull/1561#pullrequestreview-366497169", "createdAt": "2020-02-28T15:50:25Z", "commit": {"oid": "dbdff0a923468f777d46754439b9a3c4d1316a6d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MTg1NTk0", "url": "https://github.com/jbosstm/narayana/pull/1561#pullrequestreview-367185594", "createdAt": "2020-03-02T13:11:37Z", "commit": {"oid": "12d5da00fa4eee6dd123d2c1b43dda84c4097871"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzoxMTozN1rOFwe85Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzoxMTozN1rOFwe85Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM4MzA3Nw==", "bodyText": "Is there a test where we expect the socket to time out and we verify that?", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r386383077", "createdAt": "2020-03-02T13:11:37Z", "author": {"login": "tomjenkinson"}, "path": "ArjunaCore/arjuna/tests/classes/com/hp/mwtests/ts/arjuna/recovery/RecoverySocketUnitTest.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package com.hp.mwtests.ts.arjuna.recovery;\n+\n+import com.arjuna.ats.arjuna.common.recoveryPropertyManager;\n+import com.arjuna.ats.arjuna.recovery.RecoveryDriver;\n+import com.arjuna.ats.arjuna.recovery.RecoveryManager;\n+import org.jboss.logging.Logger;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintWriter;\n+import java.net.InetAddress;\n+import java.net.Socket;\n+import java.net.SocketTimeoutException;\n+import java.net.UnknownHostException;\n+import java.nio.charset.StandardCharsets;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Test cases which work with a direct connection to socket where RecoveryManager listens at.\n+ */\n+public class RecoverySocketUnitTest {\n+    private static final Logger log = Logger.getLogger(RecoverySocketUnitTest.class);\n+\n+    private static boolean socketRecoveryListenerInitialState;\n+    private static int periodicRecoveryPeriodInitialState, recoveryBackoffPeriodInitialState;\n+\n+    private InetAddress recoveryManagerHost = null;\n+    private int recoveryManagerPort = 0;\n+    private RecoveryManager recoveryManager;\n+\n+    @BeforeClass\n+    public static void getInitialState() {\n+        socketRecoveryListenerInitialState = recoveryPropertyManager.getRecoveryEnvironmentBean().isRecoveryListener();\n+        periodicRecoveryPeriodInitialState =  recoveryPropertyManager.getRecoveryEnvironmentBean().getPeriodicRecoveryPeriod();\n+        recoveryBackoffPeriodInitialState = recoveryPropertyManager.getRecoveryEnvironmentBean().getRecoveryBackoffPeriod();\n+    }\n+\n+    @AfterClass\n+    public static void returnBackInitialState() {\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setRecoveryListener(socketRecoveryListenerInitialState);\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setPeriodicRecoveryPeriod(periodicRecoveryPeriodInitialState);\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setRecoveryBackoffPeriod(recoveryBackoffPeriodInitialState);\n+    }\n+\n+    @Before\n+    public void enableRecoveryListener() throws InterruptedException{\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setRecoveryListener(true);\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setPeriodicRecoveryPeriod(1);\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setRecoveryBackoffPeriod(1);\n+        recoveryManager = RecoveryManager.manager();\n+        // wait for the socket would be established\n+        Thread.sleep(50);\n+    }\n+\n+    @After\n+    public void returnStateOfRecoveryListener() {\n+        try {\n+            recoveryManager.terminate();\n+        } catch (IllegalStateException ise) {\n+            // cannot terminate cleanly which may happen because some of the tests which terminated recovery manager before\n+            log.debugf(ise,\"Cannot terminate recovery manager. This is probably not a problem as the test may stopped it already. Check the prior errors.\");\n+        }\n+    }\n+\n+    @Test\n+    public void socketPing() throws Exception {\n+        try (Socket connectorSocket = getSocket()) {\n+            // streams to and from the RecoveryManager listener\n+            BufferedReader fromServer = new BufferedReader(new InputStreamReader(connectorSocket.getInputStream(), StandardCharsets.UTF_8));\n+            PrintWriter toServer = new PrintWriter(new OutputStreamWriter(connectorSocket.getOutputStream(), StandardCharsets.UTF_8));\n+\n+            toServer.println(RecoveryDriver.PING);\n+            toServer.flush();\n+            String stringResponse = fromServer.readLine();\n+            assertEquals(\"Expecting the correct response string for command \" + RecoveryDriver.PING, RecoveryDriver.PONG, stringResponse);\n+        } catch (final SocketTimeoutException stex) {\n+            failOnSocketTimeout(stex, RecoveryDriver.PING);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12d5da00fa4eee6dd123d2c1b43dda84c4097871"}, "originalPosition": 110}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dbdff0a923468f777d46754439b9a3c4d1316a6d", "author": {"user": {"login": "ochaloup", "name": "chalda"}}, "url": "https://github.com/jbosstm/narayana/commit/dbdff0a923468f777d46754439b9a3c4d1316a6d", "committedDate": "2020-02-28T09:56:15Z", "message": "[refactoring] to get more information on error states"}, "afterCommit": {"oid": "5b36ec67aa39e4e0d8b8a65e8cfd324733f15dcb", "author": {"user": {"login": "ochaloup", "name": "chalda"}}, "url": "https://github.com/jbosstm/narayana/commit/5b36ec67aa39e4e0d8b8a65e8cfd324733f15dcb", "committedDate": "2020-03-02T14:19:54Z", "message": "[JBTM-3259] fixing race condition on terminating recovery manager and socket call invocation\n\n+ refactoring to get more information on error states"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MjcwNjk3", "url": "https://github.com/jbosstm/narayana/pull/1561#pullrequestreview-367270697", "createdAt": "2020-03-02T15:07:03Z", "commit": {"oid": "5b36ec67aa39e4e0d8b8a65e8cfd324733f15dcb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTowNzowNFrOFwi5hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTowNzowNFrOFwi5hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ0Nzc1MQ==", "bodyText": "I wonder if byteman could ensure that this terminated occurs at the right time to detect that the scan has started as is being interrupted?\nAlso, should we be checking the outout from the read side to make sure the scan took place?", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r386447751", "createdAt": "2020-03-02T15:07:04Z", "author": {"login": "tomjenkinson"}, "path": "ArjunaCore/arjuna/tests/classes/com/hp/mwtests/ts/arjuna/recovery/RecoverySocketUnitTest.java", "diffHunk": "@@ -143,6 +142,35 @@ public void socketScanVerbose() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void socketScanTerminateAbruptly() throws Exception {\n+        try (Socket connectorSocket = getSocket()) {\n+            PrintWriter toServer = new PrintWriter(new OutputStreamWriter(connectorSocket.getOutputStream(), StandardCharsets.UTF_8));\n+            toServer.println(RecoveryDriver.SCAN);\n+            toServer.flush();\n+            recoveryManager.terminate();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b36ec67aa39e4e0d8b8a65e8cfd324733f15dcb"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MjcyMTA3", "url": "https://github.com/jbosstm/narayana/pull/1561#pullrequestreview-367272107", "createdAt": "2020-03-02T15:08:50Z", "commit": {"oid": "5b36ec67aa39e4e0d8b8a65e8cfd324733f15dcb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTowODo1MFrOFwi9qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTowODo1MFrOFwi9qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ0ODgxMA==", "bodyText": "Was this expected in here or in JBTM-3257?", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r386448810", "createdAt": "2020-03-02T15:08:50Z", "author": {"login": "tomjenkinson"}, "path": "ArjunaCore/arjuna/tests/classes/com/hp/mwtests/ts/arjuna/recovery/RecoverySocketUnitTest.java", "diffHunk": "@@ -143,6 +142,35 @@ public void socketScanVerbose() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void socketScanTerminateAbruptly() throws Exception {\n+        try (Socket connectorSocket = getSocket()) {\n+            PrintWriter toServer = new PrintWriter(new OutputStreamWriter(connectorSocket.getOutputStream(), StandardCharsets.UTF_8));\n+            toServer.println(RecoveryDriver.SCAN);\n+            toServer.flush();\n+            recoveryManager.terminate();\n+        } catch (final SocketTimeoutException stex) {\n+            failOnSocketTimeout(stex, RecoveryDriver.SCAN);\n+        }\n+    }\n+\n+    @Test\n+    public void socketTimeout() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b36ec67aa39e4e0d8b8a65e8cfd324733f15dcb"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52a939e63a04ae5f7ef96643ae9fcc4945b22c5d", "author": {"user": {"login": "ochaloup", "name": "chalda"}}, "url": "https://github.com/jbosstm/narayana/commit/52a939e63a04ae5f7ef96643ae9fcc4945b22c5d", "committedDate": "2020-03-04T12:21:18Z", "message": "[JBTM-3257] not throwing NPE when request command on recovery trigger is null"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ed75f0aae45d6d66c7e74331baff52104cd5a98", "author": {"user": {"login": "ochaloup", "name": "chalda"}}, "url": "https://github.com/jbosstm/narayana/commit/4ed75f0aae45d6d66c7e74331baff52104cd5a98", "committedDate": "2020-03-04T12:21:18Z", "message": "[JBTM-3259] fixing race condition on terminating recovery manager and socket call invocation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "450d3ca6d01472aaad0d7375cfbf568cda7bef5e", "author": {"user": {"login": "ochaloup", "name": "chalda"}}, "url": "https://github.com/jbosstm/narayana/commit/450d3ca6d01472aaad0d7375cfbf568cda7bef5e", "committedDate": "2020-03-04T12:21:18Z", "message": "[REFACTORING ONLY] to get more information on error states to log and to output"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b55a408f4967d94a1447e2cd6b486109c408abd", "author": {"user": {"login": "ochaloup", "name": "chalda"}}, "url": "https://github.com/jbosstm/narayana/commit/2b55a408f4967d94a1447e2cd6b486109c408abd", "committedDate": "2020-03-04T12:25:32Z", "message": "[ADDITIONAL TEST ONLY] adding tests for the recovery socket calls"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5b36ec67aa39e4e0d8b8a65e8cfd324733f15dcb", "author": {"user": {"login": "ochaloup", "name": "chalda"}}, "url": "https://github.com/jbosstm/narayana/commit/5b36ec67aa39e4e0d8b8a65e8cfd324733f15dcb", "committedDate": "2020-03-02T14:19:54Z", "message": "[JBTM-3259] fixing race condition on terminating recovery manager and socket call invocation\n\n+ refactoring to get more information on error states"}, "afterCommit": {"oid": "2b55a408f4967d94a1447e2cd6b486109c408abd", "author": {"user": {"login": "ochaloup", "name": "chalda"}}, "url": "https://github.com/jbosstm/narayana/commit/2b55a408f4967d94a1447e2cd6b486109c408abd", "committedDate": "2020-03-04T12:25:32Z", "message": "[ADDITIONAL TEST ONLY] adding tests for the recovery socket calls"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NzY1OTMw", "url": "https://github.com/jbosstm/narayana/pull/1561#pullrequestreview-368765930", "createdAt": "2020-03-04T13:15:12Z", "commit": {"oid": "2b55a408f4967d94a1447e2cd6b486109c408abd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4523, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}