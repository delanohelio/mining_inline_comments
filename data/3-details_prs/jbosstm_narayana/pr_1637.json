{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1Nzc2MTky", "number": 1637, "title": "[JBTM-3318] tckrecoverytests timeout fixes", "bodyText": "https://issues.redhat.com/browse/JBTM-3318\nLRA\n!MAIN !CORE !QA_JTA !QA_JTS_JDKORB !QA_JTS_OPENJDKORB !QA_JTS_JACORB !BLACKTIE !XTS !PERF NO_WIN !RTS !AS_TESTS !TOMCAT !JACOCO", "createdAt": "2020-06-17T11:03:55Z", "url": "https://github.com/jbosstm/narayana/pull/1637", "merged": true, "mergeCommit": {"oid": "f15650ec98165a0c531f87770ed1b2d26146e5a5"}, "closed": true, "closedAt": "2020-06-22T13:46:31Z", "author": {"login": "ochaloup"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsKlECgBqjM0NTM4MjIxMDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcs2uJtABqjM0NjMzODc5ODE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2b781cd6773b064107e312e50eb61fd524cc078b", "author": {"user": {"login": "ochaloup", "name": "chalda"}}, "url": "https://github.com/jbosstm/narayana/commit/2b781cd6773b064107e312e50eb61fd524cc078b", "committedDate": "2020-06-17T10:54:11Z", "message": "[JBTM-3318] Adjusting LRA annotation 'timeLimit' value with factor\n\nThis is a reflection over the LRA annotations to fix timing issues on\nAMS CI which is slow and it may happen that the LRA is\ntimeouted/cancelled before the business method is invoked.\n\nThat's a trouble as the TCK tests are written in way to get the business\nmethod invoke and only after that the timeout should be elapsed\nsometimes later."}, "afterCommit": {"oid": "ca17805be15fdbf7272fb7144a54d7042e4b8206", "author": {"user": {"login": "ochaloup", "name": "chalda"}}, "url": "https://github.com/jbosstm/narayana/commit/ca17805be15fdbf7272fb7144a54d7042e4b8206", "committedDate": "2020-06-17T14:18:10Z", "message": "[JBTM-3318] Adjusting LRA annotation 'timeLimit' value with factor\n\nThis is a reflection over the LRA annotations to fix timing issues on\nAMS CI which is slow and it may happen that the LRA is\ntimeouted/cancelled before the business method is invoked.\n\nThat's a trouble as the TCK tests are written in way to get the business\nmethod invoke and only after that the timeout should be elapsed\nsometimes later."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ca17805be15fdbf7272fb7144a54d7042e4b8206", "author": {"user": {"login": "ochaloup", "name": "chalda"}}, "url": "https://github.com/jbosstm/narayana/commit/ca17805be15fdbf7272fb7144a54d7042e4b8206", "committedDate": "2020-06-17T14:18:10Z", "message": "[JBTM-3318] Adjusting LRA annotation 'timeLimit' value with factor\n\nThis is a reflection over the LRA annotations to fix timing issues on\nAMS CI which is slow and it may happen that the LRA is\ntimeouted/cancelled before the business method is invoked.\n\nThat's a trouble as the TCK tests are written in way to get the business\nmethod invoke and only after that the timeout should be elapsed\nsometimes later."}, "afterCommit": {"oid": "82ebd15bb3b94e6b4b82f4bc6fc71052e74c0a9e", "author": {"user": {"login": "ochaloup", "name": "chalda"}}, "url": "https://github.com/jbosstm/narayana/commit/82ebd15bb3b94e6b4b82f4bc6fc71052e74c0a9e", "committedDate": "2020-06-18T08:48:17Z", "message": "[JBTM-3318] Adjusting LRA annotation 'timeLimit' value with factor\n\nThis is a reflection over the LRA annotations to fix timing issues on\nAMS CI which is slow and it may happen that the LRA is\ntimeouted/cancelled before the business method is invoked.\n\nThat's a trouble as the TCK tests are written in way to get the business\nmethod invoke and only after that the timeout should be elapsed\nsometimes later."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzODU3NTcz", "url": "https://github.com/jbosstm/narayana/pull/1637#pullrequestreview-433857573", "createdAt": "2020-06-19T07:23:09Z", "commit": {"oid": "82ebd15bb3b94e6b4b82f4bc6fc71052e74c0a9e"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzoyMzoxMFrOGmKxNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzoyOToxOVrOGmK8Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY3NTUwOA==", "bodyText": "My IDE says this is a varargs param so you don't need to use null.", "url": "https://github.com/jbosstm/narayana/pull/1637#discussion_r442675508", "createdAt": "2020-06-19T07:23:10Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-test/lra-test-arquillian-extension/src/main/java/io/narayana/lra/arquillian/spi/LRAAnnotationAdjuster.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.spi;\n+\n+import org.eclipse.microprofile.lra.annotation.ws.rs.LRA;\n+import org.jboss.logging.Logger;\n+\n+import javax.ws.rs.core.Response;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+/**\n+ * Helper class to do internal changes of annotations during runtime.\n+ */\n+public class LRAAnnotationAdjuster {\n+    private static final Logger log = Logger.getLogger(LRAAnnotationAdjuster.class);\n+    private static final String ANNOTATIONS_FIELD_NAME = \"annotations\";\n+    private static final String ANNOTATION_DATA_METHOD_NAME = \"annotationData\";\n+\n+    /**\n+     * Take the clazz, check if contains the {@link LRA} annotation.\n+     * The LRA annotation is then replaced by wrapped {@link LRAWrapped}.\n+     */\n+    static void processWithClass(Class<?> clazz) {\n+        LRA lraAnnotation = clazz.getDeclaredAnnotation(LRA.class);\n+        if (lraAnnotation != null) {\n+            LRAAnnotationAdjuster.adjustLRAAnnotation(clazz, lraAnnotation);\n+        }\n+        Arrays.stream(clazz.getMethods()).forEach(method -> {\n+            LRA lraAnnotationMethod = method.getDeclaredAnnotation(LRA.class);\n+            if (lraAnnotationMethod != null) {\n+                LRAAnnotationAdjuster.adjustLRAAnnotation(method, lraAnnotationMethod);\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Changing the LRA annotation declared on class by wrapping it with {@link LRAWrapped}.\n+     */\n+    static void adjustLRAAnnotation(Class clazzToLookFor, LRA originalLRAAnnotation) {\n+        if (doesJDKDefineAnnotationsField()) {\n+            // JDK7 has \"annotations\" field\n+            try {\n+                Field annotations = Class.class.getDeclaredField(ANNOTATIONS_FIELD_NAME);\n+                annotations.setAccessible(true);\n+                Map<Class<? extends Annotation>, Annotation> map =\n+                        (Map<Class<? extends Annotation>, Annotation>) annotations.get(clazzToLookFor);\n+                map.put(LRA.class, new LRAWrapped(originalLRAAnnotation));\n+            } catch (Exception  e) {\n+                e.printStackTrace();\n+            }\n+        } else {\n+            try {\n+                // JDK8+ has \"annotationData\" private method\n+                // obtaining reference to private class AnnotationData\n+                Method method = Class.class.getDeclaredMethod(ANNOTATION_DATA_METHOD_NAME, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82ebd15bb3b94e6b4b82f4bc6fc71052e74c0a9e"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY3ODMzOA==", "bodyText": "Fiendishly clever.\nAs an aside, we'd need to remember to change this class if the LRA annotation changes in MP-LRA 1.x.", "url": "https://github.com/jbosstm/narayana/pull/1637#discussion_r442678338", "createdAt": "2020-06-19T07:29:19Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-test/lra-test-arquillian-extension/src/main/java/io/narayana/lra/arquillian/spi/LRAAnnotationAdjuster.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.spi;\n+\n+import org.eclipse.microprofile.lra.annotation.ws.rs.LRA;\n+import org.jboss.logging.Logger;\n+\n+import javax.ws.rs.core.Response;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+/**\n+ * Helper class to do internal changes of annotations during runtime.\n+ */\n+public class LRAAnnotationAdjuster {\n+    private static final Logger log = Logger.getLogger(LRAAnnotationAdjuster.class);\n+    private static final String ANNOTATIONS_FIELD_NAME = \"annotations\";\n+    private static final String ANNOTATION_DATA_METHOD_NAME = \"annotationData\";\n+\n+    /**\n+     * Take the clazz, check if contains the {@link LRA} annotation.\n+     * The LRA annotation is then replaced by wrapped {@link LRAWrapped}.\n+     */\n+    static void processWithClass(Class<?> clazz) {\n+        LRA lraAnnotation = clazz.getDeclaredAnnotation(LRA.class);\n+        if (lraAnnotation != null) {\n+            LRAAnnotationAdjuster.adjustLRAAnnotation(clazz, lraAnnotation);\n+        }\n+        Arrays.stream(clazz.getMethods()).forEach(method -> {\n+            LRA lraAnnotationMethod = method.getDeclaredAnnotation(LRA.class);\n+            if (lraAnnotationMethod != null) {\n+                LRAAnnotationAdjuster.adjustLRAAnnotation(method, lraAnnotationMethod);\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Changing the LRA annotation declared on class by wrapping it with {@link LRAWrapped}.\n+     */\n+    static void adjustLRAAnnotation(Class clazzToLookFor, LRA originalLRAAnnotation) {\n+        if (doesJDKDefineAnnotationsField()) {\n+            // JDK7 has \"annotations\" field\n+            try {\n+                Field annotations = Class.class.getDeclaredField(ANNOTATIONS_FIELD_NAME);\n+                annotations.setAccessible(true);\n+                Map<Class<? extends Annotation>, Annotation> map =\n+                        (Map<Class<? extends Annotation>, Annotation>) annotations.get(clazzToLookFor);\n+                map.put(LRA.class, new LRAWrapped(originalLRAAnnotation));\n+            } catch (Exception  e) {\n+                e.printStackTrace();\n+            }\n+        } else {\n+            try {\n+                // JDK8+ has \"annotationData\" private method\n+                // obtaining reference to private class AnnotationData\n+                Method method = Class.class.getDeclaredMethod(ANNOTATION_DATA_METHOD_NAME, null);\n+                method.setAccessible(true);\n+                // AnnotationData is private need to work with Object\n+                Object annotationData = method.invoke(clazzToLookFor);\n+                // AnnotationData works with map annotations\n+                Field annotations = annotationData.getClass().getDeclaredField(ANNOTATIONS_FIELD_NAME);\n+                annotations.setAccessible(true);\n+                Map<Class<? extends Annotation>, Annotation> map =\n+                        (Map<Class<? extends Annotation>, Annotation>) annotations.get(annotationData);\n+                log.debugf(\"Adjusting LRA annotation %s for class %s%n\", originalLRAAnnotation, clazzToLookFor.getName());\n+                map.put(LRA.class, new LRAWrapped(originalLRAAnnotation));\n+            } catch (Exception  e) {\n+                throw new IllegalStateException(\"Cannot change annotation \" + originalLRAAnnotation\n+                        + \" of class \" + clazzToLookFor, e);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Changing the LRA annotation declared on method by wrapping it with {@link LRAWrapped}.\n+     */\n+    static void adjustLRAAnnotation(Method method, LRA originalLRAAnnotation) {\n+        Field field = null;\n+        try {\n+            Class<?> executableClass = Class.forName(\"java.lang.reflect.Executable\");\n+            field = executableClass.getDeclaredField(\"declaredAnnotations\");\n+            field.setAccessible(true);\n+        } catch (ClassNotFoundException cnfe) {\n+            throw new IllegalStateException(\"Cannot instantiate class java.lang.reflect.Executable\", cnfe);\n+        } catch (NoSuchFieldException nsfe) {\n+            throw new IllegalStateException(\"Cannot find field 'declaredAnnotations' under instantiate class java.lang.reflect.Executable\", nsfe);\n+        }\n+        Map<Class<? extends Annotation>, Annotation> annotations = null;\n+        try {\n+            annotations = (Map<Class<? extends Annotation>, Annotation>) field.get(method);\n+        } catch (IllegalAccessException iae) {\n+            throw new IllegalStateException(\"Cannnot access field 'declaredAnnotations' of the method instance \" + method, iae);\n+        }\n+        log.debugf(\"Adjusting LRA annotation %s for method %s of class %s%n\",\n+                originalLRAAnnotation, method, method.getDeclaringClass().getName());\n+        annotations.put(LRA.class, new LRAWrapped(originalLRAAnnotation));\n+    }\n+\n+    /**\n+     * Expected for JDK lower to 7\n+     */\n+    private static boolean doesJDKDefineAnnotationsField() {\n+        boolean jdkLower = true;\n+        try {\n+            Class.class.getDeclaredField(ANNOTATIONS_FIELD_NAME);\n+        } catch (NoSuchFieldException ignore) {\n+            jdkLower = false;\n+        }\n+        return jdkLower;\n+    }\n+\n+    private static class LRAWrapped implements LRA {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82ebd15bb3b94e6b4b82f4bc6fc71052e74c0a9e"}, "originalPosition": 136}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa22d9a407cab517f5fad69f070361c2de0b9953", "author": {"user": {"login": "ochaloup", "name": "chalda"}}, "url": "https://github.com/jbosstm/narayana/commit/aa22d9a407cab517f5fad69f070361c2de0b9953", "committedDate": "2020-06-19T10:13:21Z", "message": "[JBTM-3318] enabling TckRecoveryTests#testCancelWhenParticipantIsUnavailable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MDMzODQx", "url": "https://github.com/jbosstm/narayana/pull/1637#pullrequestreview-434033841", "createdAt": "2020-06-19T12:23:13Z", "commit": {"oid": "82ebd15bb3b94e6b4b82f4bc6fc71052e74c0a9e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMjoyMzoxM1rOGmS5Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMjozMjowMVrOGmTJaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwODY3NA==", "bodyText": "I think you prefer logging instead of stack traces.", "url": "https://github.com/jbosstm/narayana/pull/1637#discussion_r442808674", "createdAt": "2020-06-19T12:23:13Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-test/lra-test-arquillian-extension/src/main/java/io/narayana/lra/arquillian/spi/LRAAnnotationAdjuster.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.spi;\n+\n+import org.eclipse.microprofile.lra.annotation.ws.rs.LRA;\n+import org.jboss.logging.Logger;\n+\n+import javax.ws.rs.core.Response;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+/**\n+ * Helper class to do internal changes of annotations during runtime.\n+ */\n+public class LRAAnnotationAdjuster {\n+    private static final Logger log = Logger.getLogger(LRAAnnotationAdjuster.class);\n+    private static final String ANNOTATIONS_FIELD_NAME = \"annotations\";\n+    private static final String ANNOTATION_DATA_METHOD_NAME = \"annotationData\";\n+\n+    /**\n+     * Take the clazz, check if contains the {@link LRA} annotation.\n+     * The LRA annotation is then replaced by wrapped {@link LRAWrapped}.\n+     */\n+    static void processWithClass(Class<?> clazz) {\n+        LRA lraAnnotation = clazz.getDeclaredAnnotation(LRA.class);\n+        if (lraAnnotation != null) {\n+            LRAAnnotationAdjuster.adjustLRAAnnotation(clazz, lraAnnotation);\n+        }\n+        Arrays.stream(clazz.getMethods()).forEach(method -> {\n+            LRA lraAnnotationMethod = method.getDeclaredAnnotation(LRA.class);\n+            if (lraAnnotationMethod != null) {\n+                LRAAnnotationAdjuster.adjustLRAAnnotation(method, lraAnnotationMethod);\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Changing the LRA annotation declared on class by wrapping it with {@link LRAWrapped}.\n+     */\n+    static void adjustLRAAnnotation(Class clazzToLookFor, LRA originalLRAAnnotation) {\n+        if (doesJDKDefineAnnotationsField()) {\n+            // JDK7 has \"annotations\" field\n+            try {\n+                Field annotations = Class.class.getDeclaredField(ANNOTATIONS_FIELD_NAME);\n+                annotations.setAccessible(true);\n+                Map<Class<? extends Annotation>, Annotation> map =\n+                        (Map<Class<? extends Annotation>, Annotation>) annotations.get(clazzToLookFor);\n+                map.put(LRA.class, new LRAWrapped(originalLRAAnnotation));\n+            } catch (Exception  e) {\n+                e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82ebd15bb3b94e6b4b82f4bc6fc71052e74c0a9e"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMjc3Ng==", "bodyText": "wouldn't be better to use getName() here?", "url": "https://github.com/jbosstm/narayana/pull/1637#discussion_r442812776", "createdAt": "2020-06-19T12:32:01Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-test/lra-test-arquillian-extension/src/main/java/io/narayana/lra/arquillian/spi/NarayanaLRARecovery.java", "diffHunk": "@@ -32,6 +33,25 @@\n import java.net.URI;\n \n public class NarayanaLRARecovery implements LRARecoveryService {\n+    private static final Logger log = Logger.getLogger(NarayanaLRARecovery.class);\n+\n+    /**\n+     * A bit of hacking to change the internals of annotations defined in LRA TCK.\n+     * There is need to adjust timeout defined on the annotation definition.\n+     */\n+    static {\n+        String[] resourceClassNames = new String[]{\n+                \"org.eclipse.microprofile.lra.tck.participant.api.LraResource\",\n+                \"org.eclipse.microprofile.lra.tck.participant.api.RecoveryResource\"};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82ebd15bb3b94e6b4b82f4bc6fc71052e74c0a9e"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58abf647448d7129a2e8a3135b4b0e573cfdf85b", "author": {"user": {"login": "ochaloup", "name": "chalda"}}, "url": "https://github.com/jbosstm/narayana/commit/58abf647448d7129a2e8a3135b4b0e573cfdf85b", "committedDate": "2020-06-19T17:43:56Z", "message": "[JBTM-3318] Adjusting LRA annotation 'timeLimit' value with factor\n\nThis is a reflection over the LRA annotations to fix timing issues on\nAMS CI which is slow and it may happen that the LRA is\ntimeouted/cancelled before the business method is invoked.\n\nThat's a trouble as the TCK tests are written in way to get the business\nmethod invoke and only after that the timeout should be elapsed\nsometimes later."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "82ebd15bb3b94e6b4b82f4bc6fc71052e74c0a9e", "author": {"user": {"login": "ochaloup", "name": "chalda"}}, "url": "https://github.com/jbosstm/narayana/commit/82ebd15bb3b94e6b4b82f4bc6fc71052e74c0a9e", "committedDate": "2020-06-18T08:48:17Z", "message": "[JBTM-3318] Adjusting LRA annotation 'timeLimit' value with factor\n\nThis is a reflection over the LRA annotations to fix timing issues on\nAMS CI which is slow and it may happen that the LRA is\ntimeouted/cancelled before the business method is invoked.\n\nThat's a trouble as the TCK tests are written in way to get the business\nmethod invoke and only after that the timeout should be elapsed\nsometimes later."}, "afterCommit": {"oid": "58abf647448d7129a2e8a3135b4b0e573cfdf85b", "author": {"user": {"login": "ochaloup", "name": "chalda"}}, "url": "https://github.com/jbosstm/narayana/commit/58abf647448d7129a2e8a3135b4b0e573cfdf85b", "committedDate": "2020-06-19T17:43:56Z", "message": "[JBTM-3318] Adjusting LRA annotation 'timeLimit' value with factor\n\nThis is a reflection over the LRA annotations to fix timing issues on\nAMS CI which is slow and it may happen that the LRA is\ntimeouted/cancelled before the business method is invoked.\n\nThat's a trouble as the TCK tests are written in way to get the business\nmethod invoke and only after that the timeout should be elapsed\nsometimes later."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4437, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}