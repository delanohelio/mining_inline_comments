{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NzE5Njg2", "number": 1561, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMzoyOToxOFrODhhgmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTowODo1MFrODkTTcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NDc4NjE2OnYy", "diffSide": "RIGHT", "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/internal/arjuna/recovery/WorkerService.java", "isResolved": false, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMzoyOToxOFrOFsTRVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMTo1NTozMlrOFxqaBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk5NzM5OQ==", "bodyText": "Would it be possible to add a test for this please? I think the description of https://issues.redhat.com/browse/JBTM-3257 indicates that the scan would have started but if I understand where this condition can occur it is before the instruction is read. I wonder why an IOException is not coming out of in.readLine?", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r381997399", "createdAt": "2020-02-20T13:29:18Z", "author": {"login": "tomjenkinson"}, "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/internal/arjuna/recovery/WorkerService.java", "diffHunk": "@@ -63,7 +63,7 @@ public void doWork (InputStream is, OutputStream os) throws IOException\n \t{\n \t    String request = in.readLine();\n \n-        if (request.equals(\"PING\"))\n+        if (\"PING\".equals(request))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "680ffb9ce48993af22969302fd7303830d72bd8d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU2MDMyNA==", "bodyText": "ok. investigation was not easy but I assume I got the reason. see my comment below", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r382560324", "createdAt": "2020-02-21T12:40:52Z", "author": {"login": "ochaloup"}, "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/internal/arjuna/recovery/WorkerService.java", "diffHunk": "@@ -63,7 +63,7 @@ public void doWork (InputStream is, OutputStream os) throws IOException\n \t{\n \t    String request = in.readLine();\n \n-        if (request.equals(\"PING\"))\n+        if (\"PING\".equals(request))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk5NzM5OQ=="}, "originalCommit": {"oid": "680ffb9ce48993af22969302fd7303830d72bd8d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM4MjIwOA==", "bodyText": "Sorry to go back in time so far by when you refer to a comment to look at below please can you indicate the one I should look at?", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r386382208", "createdAt": "2020-03-02T13:09:50Z", "author": {"login": "tomjenkinson"}, "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/internal/arjuna/recovery/WorkerService.java", "diffHunk": "@@ -63,7 +63,7 @@ public void doWork (InputStream is, OutputStream os) throws IOException\n \t{\n \t    String request = in.readLine();\n \n-        if (request.equals(\"PING\"))\n+        if (\"PING\".equals(request))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk5NzM5OQ=="}, "originalCommit": {"oid": "680ffb9ce48993af22969302fd7303830d72bd8d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQyNTI5OA==", "bodyText": "@tomjenkinson I meant the one where I summarized my effort. It's this one: #1561 (comment)\nBut as you went through the code already I assume there is not many new information in that comment.", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r386425298", "createdAt": "2020-03-02T14:30:42Z", "author": {"login": "ochaloup"}, "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/internal/arjuna/recovery/WorkerService.java", "diffHunk": "@@ -63,7 +63,7 @@ public void doWork (InputStream is, OutputStream os) throws IOException\n \t{\n \t    String request = in.readLine();\n \n-        if (request.equals(\"PING\"))\n+        if (\"PING\".equals(request))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk5NzM5OQ=="}, "originalCommit": {"oid": "680ffb9ce48993af22969302fd7303830d72bd8d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ0MDU1Ng==", "bodyText": "Thanks @ochaloup I am wondering which of the tests will make the variable request be equal to null? Is that scenario able to be created in the unit tests using WorkerService? Something like create the PrintWriter client side and then just close the socket and somehow verify that the WorkerService did not NPE when it got a null https://github.com/jbosstm/narayana/pull/1561/files#diff-133ca2f8c1781ec3f48d3b73b2060a23L64", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r386440556", "createdAt": "2020-03-02T14:55:40Z", "author": {"login": "tomjenkinson"}, "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/internal/arjuna/recovery/WorkerService.java", "diffHunk": "@@ -63,7 +63,7 @@ public void doWork (InputStream is, OutputStream os) throws IOException\n \t{\n \t    String request = in.readLine();\n \n-        if (request.equals(\"PING\"))\n+        if (\"PING\".equals(request))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk5NzM5OQ=="}, "originalCommit": {"oid": "680ffb9ce48993af22969302fd7303830d72bd8d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkxMTMwNg==", "bodyText": "@ochaloup Testing getting a null on the request is the key thing I am trying to get to for JBTM-3257. Which of the tests results in that?\nI was thinking that a test could open the socket and then close the socket (without sending anything) and it might result in request from String request = in.readLine(); being null?\nIf you do need to send \"SCAN\" as described in https://issues.redhat.com/browse/JBTM-3257 then perhaps rather than toServer.println you could use https://docs.oracle.com/javase/7/docs/api/java/io/PrintWriter.html#print(java.lang.String) rather than println but I don't know of a way to abruptly kill the socket in Java so perhaps that is not possible / predictable in a platform neutral manner?", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r386911306", "createdAt": "2020-03-03T10:00:10Z", "author": {"login": "tomjenkinson"}, "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/internal/arjuna/recovery/WorkerService.java", "diffHunk": "@@ -63,7 +63,7 @@ public void doWork (InputStream is, OutputStream os) throws IOException\n \t{\n \t    String request = in.readLine();\n \n-        if (request.equals(\"PING\"))\n+        if (\"PING\".equals(request))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk5NzM5OQ=="}, "originalCommit": {"oid": "680ffb9ce48993af22969302fd7303830d72bd8d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4Njc0MQ==", "bodyText": "@tomjenkinson\ntest which you ask for is here: ochaloup@65e56fc\n...but it's not possible to be really tested. The trouble is that NPE is thrown but NPE is left just as an error in test log. NPE is at a thread which just disappears and does not influence any functionality.\nI didn't add the test into the test suite as it's not easily possible to find the NPE happens or not. And from my perspective it's not an important test. The functionality is not harmed. On socket timeout the client does not wait for any information. So the NPE is only printed to log. While no information is delivered wrongly.", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r387086741", "createdAt": "2020-03-03T15:13:18Z", "author": {"login": "ochaloup"}, "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/internal/arjuna/recovery/WorkerService.java", "diffHunk": "@@ -63,7 +63,7 @@ public void doWork (InputStream is, OutputStream os) throws IOException\n \t{\n \t    String request = in.readLine();\n \n-        if (request.equals(\"PING\"))\n+        if (\"PING\".equals(request))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk5NzM5OQ=="}, "originalCommit": {"oid": "680ffb9ce48993af22969302fd7303830d72bd8d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEwMDYxMw==", "bodyText": "I think this is the part I am not sure of most. What to do about that test as that is the part that really covers testing of JBTM-3257 IIUC. I will consider further.", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r387100613", "createdAt": "2020-03-03T15:32:34Z", "author": {"login": "tomjenkinson"}, "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/internal/arjuna/recovery/WorkerService.java", "diffHunk": "@@ -63,7 +63,7 @@ public void doWork (InputStream is, OutputStream os) throws IOException\n \t{\n \t    String request = in.readLine();\n \n-        if (request.equals(\"PING\"))\n+        if (\"PING\".equals(request))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk5NzM5OQ=="}, "originalCommit": {"oid": "680ffb9ce48993af22969302fd7303830d72bd8d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE0NDg1Mg==", "bodyText": "@ochaloup please can you take a look at ochaloup#8 ?", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r387144852", "createdAt": "2020-03-03T16:35:05Z", "author": {"login": "tomjenkinson"}, "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/internal/arjuna/recovery/WorkerService.java", "diffHunk": "@@ -63,7 +63,7 @@ public void doWork (InputStream is, OutputStream os) throws IOException\n \t{\n \t    String request = in.readLine();\n \n-        if (request.equals(\"PING\"))\n+        if (\"PING\".equals(request))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk5NzM5OQ=="}, "originalCommit": {"oid": "680ffb9ce48993af22969302fd7303830d72bd8d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYxOTMzMw==", "bodyText": "@tomjenkinson wow, that's nice. Thanks! I will add the test to PR and I will try to reformat the commits. I hope in a good order :-)", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r387619333", "createdAt": "2020-03-04T11:55:32Z", "author": {"login": "ochaloup"}, "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/internal/arjuna/recovery/WorkerService.java", "diffHunk": "@@ -63,7 +63,7 @@ public void doWork (InputStream is, OutputStream os) throws IOException\n \t{\n \t    String request = in.readLine();\n \n-        if (request.equals(\"PING\"))\n+        if (\"PING\".equals(request))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk5NzM5OQ=="}, "originalCommit": {"oid": "680ffb9ce48993af22969302fd7303830d72bd8d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDg0MDI2OnYy", "diffSide": "RIGHT", "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/arjuna/logging/arjunaI18NLogger.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMTo1NzoyM1rOFvPgyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTo0ODoxMlrOFv5ldQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4MTU0NQ==", "bodyText": "The method naming convention in this file is to prefix the method name with the level at which the message is logged. This also has the benefit of making it easy to search a source file for various warning, errors, etc", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r385081545", "createdAt": "2020-02-27T11:57:23Z", "author": {"login": "mmusgrov"}, "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/arjuna/logging/arjunaI18NLogger.java", "diffHunk": "@@ -1604,6 +1605,14 @@ public void warn_objectstore_JDBCImple_over_max_image_size(int imageSize,\n \t@Message(id = 12399, value = \"Problem in doWork of CacheStore trying to perform state management\", format = MESSAGE_FORMAT)\n \t@LogMessage(level = WARN)\n \tvoid warn_could_not_handle_objectstore_generic(@Cause Exception ex);\n+\n+\t@Message(id = 12400, value = \"Cannot terminate the recovery manager as the implementation is not known. Could be the recovery manager was not started yet?\", format = MESSAGE_FORMAT)\n+\tString get_recovery_manager_implementation_is_not_set();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "728025122c8149a4d3929e66badb2b0444e477bf"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU5NTI5Nw==", "bodyText": "This is not a log message. Take a look at the annotations in the code. As a non-log message, but a message used for exception, the get_ prefix should correspond with the format of the file in such cases.", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r385595297", "createdAt": "2020-02-28T09:39:57Z", "author": {"login": "ochaloup"}, "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/arjuna/logging/arjunaI18NLogger.java", "diffHunk": "@@ -1604,6 +1605,14 @@ public void warn_objectstore_JDBCImple_over_max_image_size(int imageSize,\n \t@Message(id = 12399, value = \"Problem in doWork of CacheStore trying to perform state management\", format = MESSAGE_FORMAT)\n \t@LogMessage(level = WARN)\n \tvoid warn_could_not_handle_objectstore_generic(@Cause Exception ex);\n+\n+\t@Message(id = 12400, value = \"Cannot terminate the recovery manager as the implementation is not known. Could be the recovery manager was not started yet?\", format = MESSAGE_FORMAT)\n+\tString get_recovery_manager_implementation_is_not_set();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4MTU0NQ=="}, "originalCommit": {"oid": "728025122c8149a4d3929e66badb2b0444e477bf"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3MDg2OQ==", "bodyText": "Okay", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r385770869", "createdAt": "2020-02-28T15:48:12Z", "author": {"login": "mmusgrov"}, "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/arjuna/logging/arjunaI18NLogger.java", "diffHunk": "@@ -1604,6 +1605,14 @@ public void warn_objectstore_JDBCImple_over_max_image_size(int imageSize,\n \t@Message(id = 12399, value = \"Problem in doWork of CacheStore trying to perform state management\", format = MESSAGE_FORMAT)\n \t@LogMessage(level = WARN)\n \tvoid warn_could_not_handle_objectstore_generic(@Cause Exception ex);\n+\n+\t@Message(id = 12400, value = \"Cannot terminate the recovery manager as the implementation is not known. Could be the recovery manager was not started yet?\", format = MESSAGE_FORMAT)\n+\tString get_recovery_manager_implementation_is_not_set();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4MTU0NQ=="}, "originalCommit": {"oid": "728025122c8149a4d3929e66badb2b0444e477bf"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDg1MDY2OnYy", "diffSide": "RIGHT", "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/arjuna/recovery/RecoveryManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjowMDo1OFrOFvPnHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwOTo0Njo1NlrOFvvCsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4MzE2Nw==", "bodyText": "Why no log message?", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r385083167", "createdAt": "2020-02-27T12:00:58Z", "author": {"login": "mmusgrov"}, "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/arjuna/recovery/RecoveryManager.java", "diffHunk": "@@ -441,7 +442,8 @@ public static void main (String[] args)\n                     }\n                     catch(InterruptedException interruptedException)\n                     {\n-                        // do nothing\n+                        System.err.println(\"The retry attempt was interrupted. Exiting...\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "728025122c8149a4d3929e66badb2b0444e477bf"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU5ODEyOQ==", "bodyText": "It's because this printing is part of the main class which is invoked from the command line. I think it's more logical to print this message to STDERR rather than to log.", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r385598129", "createdAt": "2020-02-28T09:46:56Z", "author": {"login": "ochaloup"}, "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/arjuna/recovery/RecoveryManager.java", "diffHunk": "@@ -441,7 +442,8 @@ public static void main (String[] args)\n                     }\n                     catch(InterruptedException interruptedException)\n                     {\n-                        // do nothing\n+                        System.err.println(\"The retry attempt was interrupted. Exiting...\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4MzE2Nw=="}, "originalCommit": {"oid": "728025122c8149a4d3929e66badb2b0444e477bf"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDg1Njg1OnYy", "diffSide": "RIGHT", "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/internal/arjuna/recovery/Listener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjowMzowM1rOFvPq2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwOTo0Njo0OFrOFvvCXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4NDEyMQ==", "bodyText": "It is not ignored anymore so the name needs updating too.", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r385084121", "createdAt": "2020-02-27T12:03:03Z", "author": {"login": "mmusgrov"}, "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/internal/arjuna/recovery/Listener.java", "diffHunk": "@@ -242,16 +242,17 @@ public synchronized void stopListener()\n            }\n            try {\n                wait();\n-           } catch (InterruptedException e) {\n-               // ignore\n+           } catch (InterruptedException ignoredIe) {\n+               tsLogger.logger.debug(\"Waiting for connection close was interrupted\", ignoredIe);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "728025122c8149a4d3929e66badb2b0444e477bf"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU5ODA0Nw==", "bodyText": "I think it's ignored as it's just logged and only under the debug level. But I can rename it.", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r385598047", "createdAt": "2020-02-28T09:46:48Z", "author": {"login": "ochaloup"}, "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/internal/arjuna/recovery/Listener.java", "diffHunk": "@@ -242,16 +242,17 @@ public synchronized void stopListener()\n            }\n            try {\n                wait();\n-           } catch (InterruptedException e) {\n-               // ignore\n+           } catch (InterruptedException ignoredIe) {\n+               tsLogger.logger.debug(\"Waiting for connection close was interrupted\", ignoredIe);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4NDEyMQ=="}, "originalCommit": {"oid": "728025122c8149a4d3929e66badb2b0444e477bf"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDg1ODU0OnYy", "diffSide": "RIGHT", "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/internal/arjuna/recovery/Listener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjowMzozN1rOFvPr3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjowMzozN1rOFvPr3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4NDM4MA==", "bodyText": "rename ignoredIe", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r385084380", "createdAt": "2020-02-27T12:03:37Z", "author": {"login": "mmusgrov"}, "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/internal/arjuna/recovery/Listener.java", "diffHunk": "@@ -242,16 +242,17 @@ public synchronized void stopListener()\n            }\n            try {\n                wait();\n-           } catch (InterruptedException e) {\n-               // ignore\n+           } catch (InterruptedException ignoredIe) {\n+               tsLogger.logger.debug(\"Waiting for connection close was interrupted\", ignoredIe);\n            }\n        }\n       \n        // make sure this listener thread has exited before we return\n \n        try {\n            this.join();\n-       } catch (InterruptedException ie) {\n+       } catch (InterruptedException ignoredIe) {\n+           tsLogger.logger.debug(\"Waiting to ensure the listener thread has exited was interrupted\", ignoredIe);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "728025122c8149a4d3929e66badb2b0444e477bf"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDg2Njg2OnYy", "diffSide": "RIGHT", "path": "ArjunaCore/arjuna/tests/classes/com/hp/mwtests/ts/arjuna/recovery/RecoveryDriverUnitTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjowNjozM1rOFvPxDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwOTo0ODo0MFrOFvvGYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4NTcxMQ==", "bodyText": "What does foobar:0 signify?", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r385085711", "createdAt": "2020-02-27T12:06:33Z", "author": {"login": "mmusgrov"}, "path": "ArjunaCore/arjuna/tests/classes/com/hp/mwtests/ts/arjuna/recovery/RecoveryDriverUnitTest.java", "diffHunk": "@@ -46,20 +46,20 @@ public void testInvalid () throws Exception\n         try\n         {\n             rd.asynchronousScan();\n-            \n-            fail();\n+\n+            fail(\"Recovery driver asynchronously calls a non-existing host and port 'foobar:0'. Failure is expected.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "728025122c8149a4d3929e66badb2b0444e477bf"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU5OTA3Mw==", "bodyText": "From my understanding it's a non-existent hostname:port sequence. I think it's good point to rename it to be more descriptive.", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r385599073", "createdAt": "2020-02-28T09:48:40Z", "author": {"login": "ochaloup"}, "path": "ArjunaCore/arjuna/tests/classes/com/hp/mwtests/ts/arjuna/recovery/RecoveryDriverUnitTest.java", "diffHunk": "@@ -46,20 +46,20 @@ public void testInvalid () throws Exception\n         try\n         {\n             rd.asynchronousScan();\n-            \n-            fail();\n+\n+            fail(\"Recovery driver asynchronously calls a non-existing host and port 'foobar:0'. Failure is expected.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4NTcxMQ=="}, "originalCommit": {"oid": "728025122c8149a4d3929e66badb2b0444e477bf"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDg3MTY3OnYy", "diffSide": "RIGHT", "path": "ArjunaCore/arjuna/tests/classes/com/hp/mwtests/ts/arjuna/recovery/RecoverySocketUnitTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjowODoxNFrOFvP0EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwOTo1MToxMVrOFvvLng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4NjQ4MA==", "bodyText": "The naming is odd. How about resetInitialState instead?", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r385086480", "createdAt": "2020-02-27T12:08:14Z", "author": {"login": "mmusgrov"}, "path": "ArjunaCore/arjuna/tests/classes/com/hp/mwtests/ts/arjuna/recovery/RecoverySocketUnitTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package com.hp.mwtests.ts.arjuna.recovery;\n+\n+import com.arjuna.ats.arjuna.common.recoveryPropertyManager;\n+import com.arjuna.ats.arjuna.recovery.RecoveryDriver;\n+import com.arjuna.ats.arjuna.recovery.RecoveryManager;\n+import org.jboss.logging.Logger;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintWriter;\n+import java.net.InetAddress;\n+import java.net.Socket;\n+import java.net.SocketTimeoutException;\n+import java.net.UnknownHostException;\n+import java.nio.charset.StandardCharsets;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Test cases which work with a direct connection to socket where RecoveryManager listens at.\n+ */\n+public class RecoverySocketUnitTest {\n+    private static final Logger log = Logger.getLogger(RecoverySocketUnitTest.class);\n+\n+    private static boolean socketRecoveryListenerInitialState;\n+    private static int periodicRecoveryPeriodInitialState, recoveryBackoffPeriodInitialState;\n+\n+    private InetAddress recoveryManagerHost = null;\n+    private int recoveryManagerPort = 0;\n+    private RecoveryManager recoveryManager;\n+\n+    @BeforeClass\n+    public static void getInitialState() {\n+        socketRecoveryListenerInitialState = recoveryPropertyManager.getRecoveryEnvironmentBean().isRecoveryListener();\n+        periodicRecoveryPeriodInitialState =  recoveryPropertyManager.getRecoveryEnvironmentBean().getPeriodicRecoveryPeriod();\n+        recoveryBackoffPeriodInitialState = recoveryPropertyManager.getRecoveryEnvironmentBean().getRecoveryBackoffPeriod();\n+    }\n+\n+    @AfterClass\n+    public static void returnBackInitialState() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "728025122c8149a4d3929e66badb2b0444e477bf"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYwMDQxNA==", "bodyText": "+1, thanks", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r385600414", "createdAt": "2020-02-28T09:51:11Z", "author": {"login": "ochaloup"}, "path": "ArjunaCore/arjuna/tests/classes/com/hp/mwtests/ts/arjuna/recovery/RecoverySocketUnitTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package com.hp.mwtests.ts.arjuna.recovery;\n+\n+import com.arjuna.ats.arjuna.common.recoveryPropertyManager;\n+import com.arjuna.ats.arjuna.recovery.RecoveryDriver;\n+import com.arjuna.ats.arjuna.recovery.RecoveryManager;\n+import org.jboss.logging.Logger;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintWriter;\n+import java.net.InetAddress;\n+import java.net.Socket;\n+import java.net.SocketTimeoutException;\n+import java.net.UnknownHostException;\n+import java.nio.charset.StandardCharsets;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Test cases which work with a direct connection to socket where RecoveryManager listens at.\n+ */\n+public class RecoverySocketUnitTest {\n+    private static final Logger log = Logger.getLogger(RecoverySocketUnitTest.class);\n+\n+    private static boolean socketRecoveryListenerInitialState;\n+    private static int periodicRecoveryPeriodInitialState, recoveryBackoffPeriodInitialState;\n+\n+    private InetAddress recoveryManagerHost = null;\n+    private int recoveryManagerPort = 0;\n+    private RecoveryManager recoveryManager;\n+\n+    @BeforeClass\n+    public static void getInitialState() {\n+        socketRecoveryListenerInitialState = recoveryPropertyManager.getRecoveryEnvironmentBean().isRecoveryListener();\n+        periodicRecoveryPeriodInitialState =  recoveryPropertyManager.getRecoveryEnvironmentBean().getPeriodicRecoveryPeriod();\n+        recoveryBackoffPeriodInitialState = recoveryPropertyManager.getRecoveryEnvironmentBean().getRecoveryBackoffPeriod();\n+    }\n+\n+    @AfterClass\n+    public static void returnBackInitialState() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4NjQ4MA=="}, "originalCommit": {"oid": "728025122c8149a4d3929e66badb2b0444e477bf"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDg3NDAwOnYy", "diffSide": "RIGHT", "path": "ArjunaCore/arjuna/tests/classes/com/hp/mwtests/ts/arjuna/recovery/RecoverySocketUnitTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjowODo1NFrOFvP1WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMDowMDowN1rOFvvdyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4NjgwOA==", "bodyText": "Will you add more comment about why the test is waiting?", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r385086808", "createdAt": "2020-02-27T12:08:54Z", "author": {"login": "mmusgrov"}, "path": "ArjunaCore/arjuna/tests/classes/com/hp/mwtests/ts/arjuna/recovery/RecoverySocketUnitTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package com.hp.mwtests.ts.arjuna.recovery;\n+\n+import com.arjuna.ats.arjuna.common.recoveryPropertyManager;\n+import com.arjuna.ats.arjuna.recovery.RecoveryDriver;\n+import com.arjuna.ats.arjuna.recovery.RecoveryManager;\n+import org.jboss.logging.Logger;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintWriter;\n+import java.net.InetAddress;\n+import java.net.Socket;\n+import java.net.SocketTimeoutException;\n+import java.net.UnknownHostException;\n+import java.nio.charset.StandardCharsets;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Test cases which work with a direct connection to socket where RecoveryManager listens at.\n+ */\n+public class RecoverySocketUnitTest {\n+    private static final Logger log = Logger.getLogger(RecoverySocketUnitTest.class);\n+\n+    private static boolean socketRecoveryListenerInitialState;\n+    private static int periodicRecoveryPeriodInitialState, recoveryBackoffPeriodInitialState;\n+\n+    private InetAddress recoveryManagerHost = null;\n+    private int recoveryManagerPort = 0;\n+    private RecoveryManager recoveryManager;\n+\n+    @BeforeClass\n+    public static void getInitialState() {\n+        socketRecoveryListenerInitialState = recoveryPropertyManager.getRecoveryEnvironmentBean().isRecoveryListener();\n+        periodicRecoveryPeriodInitialState =  recoveryPropertyManager.getRecoveryEnvironmentBean().getPeriodicRecoveryPeriod();\n+        recoveryBackoffPeriodInitialState = recoveryPropertyManager.getRecoveryEnvironmentBean().getRecoveryBackoffPeriod();\n+    }\n+\n+    @AfterClass\n+    public static void returnBackInitialState() {\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setRecoveryListener(socketRecoveryListenerInitialState);\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setPeriodicRecoveryPeriod(periodicRecoveryPeriodInitialState);\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setRecoveryBackoffPeriod(recoveryBackoffPeriodInitialState);\n+    }\n+\n+    @Before\n+    public void enableRecoveryListener() throws InterruptedException{\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setRecoveryListener(true);\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setPeriodicRecoveryPeriod(1);\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setRecoveryBackoffPeriod(1);\n+        recoveryManager = RecoveryManager.manager();\n+        // wait for the socket would be established\n+        Thread.sleep(50);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "728025122c8149a4d3929e66badb2b0444e477bf"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYwNTA2NA==", "bodyText": "Thanks. Good point. This is my omission from the prior test setup.\nThe recovery manager startup is synchronous and the waiting should not be necessary here at all.", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r385605064", "createdAt": "2020-02-28T10:00:07Z", "author": {"login": "ochaloup"}, "path": "ArjunaCore/arjuna/tests/classes/com/hp/mwtests/ts/arjuna/recovery/RecoverySocketUnitTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package com.hp.mwtests.ts.arjuna.recovery;\n+\n+import com.arjuna.ats.arjuna.common.recoveryPropertyManager;\n+import com.arjuna.ats.arjuna.recovery.RecoveryDriver;\n+import com.arjuna.ats.arjuna.recovery.RecoveryManager;\n+import org.jboss.logging.Logger;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintWriter;\n+import java.net.InetAddress;\n+import java.net.Socket;\n+import java.net.SocketTimeoutException;\n+import java.net.UnknownHostException;\n+import java.nio.charset.StandardCharsets;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Test cases which work with a direct connection to socket where RecoveryManager listens at.\n+ */\n+public class RecoverySocketUnitTest {\n+    private static final Logger log = Logger.getLogger(RecoverySocketUnitTest.class);\n+\n+    private static boolean socketRecoveryListenerInitialState;\n+    private static int periodicRecoveryPeriodInitialState, recoveryBackoffPeriodInitialState;\n+\n+    private InetAddress recoveryManagerHost = null;\n+    private int recoveryManagerPort = 0;\n+    private RecoveryManager recoveryManager;\n+\n+    @BeforeClass\n+    public static void getInitialState() {\n+        socketRecoveryListenerInitialState = recoveryPropertyManager.getRecoveryEnvironmentBean().isRecoveryListener();\n+        periodicRecoveryPeriodInitialState =  recoveryPropertyManager.getRecoveryEnvironmentBean().getPeriodicRecoveryPeriod();\n+        recoveryBackoffPeriodInitialState = recoveryPropertyManager.getRecoveryEnvironmentBean().getRecoveryBackoffPeriod();\n+    }\n+\n+    @AfterClass\n+    public static void returnBackInitialState() {\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setRecoveryListener(socketRecoveryListenerInitialState);\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setPeriodicRecoveryPeriod(periodicRecoveryPeriodInitialState);\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setRecoveryBackoffPeriod(recoveryBackoffPeriodInitialState);\n+    }\n+\n+    @Before\n+    public void enableRecoveryListener() throws InterruptedException{\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setRecoveryListener(true);\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setPeriodicRecoveryPeriod(1);\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setRecoveryBackoffPeriod(1);\n+        recoveryManager = RecoveryManager.manager();\n+        // wait for the socket would be established\n+        Thread.sleep(50);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4NjgwOA=="}, "originalCommit": {"oid": "728025122c8149a4d3929e66badb2b0444e477bf"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDg3NjkxOnYy", "diffSide": "RIGHT", "path": "ArjunaCore/arjuna/tests/classes/com/hp/mwtests/ts/arjuna/recovery/RecoverySocketUnitTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjowOTo1MFrOFvP3GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwOTo1MjozOFrOFvvOqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4NzI1Ng==", "bodyText": "What is it returning to. More standard naming conventions would be just terminateRecoveryListener or stopRecoveryListener?", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r385087256", "createdAt": "2020-02-27T12:09:50Z", "author": {"login": "mmusgrov"}, "path": "ArjunaCore/arjuna/tests/classes/com/hp/mwtests/ts/arjuna/recovery/RecoverySocketUnitTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package com.hp.mwtests.ts.arjuna.recovery;\n+\n+import com.arjuna.ats.arjuna.common.recoveryPropertyManager;\n+import com.arjuna.ats.arjuna.recovery.RecoveryDriver;\n+import com.arjuna.ats.arjuna.recovery.RecoveryManager;\n+import org.jboss.logging.Logger;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintWriter;\n+import java.net.InetAddress;\n+import java.net.Socket;\n+import java.net.SocketTimeoutException;\n+import java.net.UnknownHostException;\n+import java.nio.charset.StandardCharsets;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Test cases which work with a direct connection to socket where RecoveryManager listens at.\n+ */\n+public class RecoverySocketUnitTest {\n+    private static final Logger log = Logger.getLogger(RecoverySocketUnitTest.class);\n+\n+    private static boolean socketRecoveryListenerInitialState;\n+    private static int periodicRecoveryPeriodInitialState, recoveryBackoffPeriodInitialState;\n+\n+    private InetAddress recoveryManagerHost = null;\n+    private int recoveryManagerPort = 0;\n+    private RecoveryManager recoveryManager;\n+\n+    @BeforeClass\n+    public static void getInitialState() {\n+        socketRecoveryListenerInitialState = recoveryPropertyManager.getRecoveryEnvironmentBean().isRecoveryListener();\n+        periodicRecoveryPeriodInitialState =  recoveryPropertyManager.getRecoveryEnvironmentBean().getPeriodicRecoveryPeriod();\n+        recoveryBackoffPeriodInitialState = recoveryPropertyManager.getRecoveryEnvironmentBean().getRecoveryBackoffPeriod();\n+    }\n+\n+    @AfterClass\n+    public static void returnBackInitialState() {\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setRecoveryListener(socketRecoveryListenerInitialState);\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setPeriodicRecoveryPeriod(periodicRecoveryPeriodInitialState);\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setRecoveryBackoffPeriod(recoveryBackoffPeriodInitialState);\n+    }\n+\n+    @Before\n+    public void enableRecoveryListener() throws InterruptedException{\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setRecoveryListener(true);\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setPeriodicRecoveryPeriod(1);\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setRecoveryBackoffPeriod(1);\n+        recoveryManager = RecoveryManager.manager();\n+        // wait for the socket would be established\n+        Thread.sleep(50);\n+    }\n+\n+    @After\n+    public void returnStateOfRecoveryListener() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "728025122c8149a4d3929e66badb2b0444e477bf"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYwMTE5Mg==", "bodyText": "+1, thanks", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r385601192", "createdAt": "2020-02-28T09:52:38Z", "author": {"login": "ochaloup"}, "path": "ArjunaCore/arjuna/tests/classes/com/hp/mwtests/ts/arjuna/recovery/RecoverySocketUnitTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package com.hp.mwtests.ts.arjuna.recovery;\n+\n+import com.arjuna.ats.arjuna.common.recoveryPropertyManager;\n+import com.arjuna.ats.arjuna.recovery.RecoveryDriver;\n+import com.arjuna.ats.arjuna.recovery.RecoveryManager;\n+import org.jboss.logging.Logger;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintWriter;\n+import java.net.InetAddress;\n+import java.net.Socket;\n+import java.net.SocketTimeoutException;\n+import java.net.UnknownHostException;\n+import java.nio.charset.StandardCharsets;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Test cases which work with a direct connection to socket where RecoveryManager listens at.\n+ */\n+public class RecoverySocketUnitTest {\n+    private static final Logger log = Logger.getLogger(RecoverySocketUnitTest.class);\n+\n+    private static boolean socketRecoveryListenerInitialState;\n+    private static int periodicRecoveryPeriodInitialState, recoveryBackoffPeriodInitialState;\n+\n+    private InetAddress recoveryManagerHost = null;\n+    private int recoveryManagerPort = 0;\n+    private RecoveryManager recoveryManager;\n+\n+    @BeforeClass\n+    public static void getInitialState() {\n+        socketRecoveryListenerInitialState = recoveryPropertyManager.getRecoveryEnvironmentBean().isRecoveryListener();\n+        periodicRecoveryPeriodInitialState =  recoveryPropertyManager.getRecoveryEnvironmentBean().getPeriodicRecoveryPeriod();\n+        recoveryBackoffPeriodInitialState = recoveryPropertyManager.getRecoveryEnvironmentBean().getRecoveryBackoffPeriod();\n+    }\n+\n+    @AfterClass\n+    public static void returnBackInitialState() {\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setRecoveryListener(socketRecoveryListenerInitialState);\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setPeriodicRecoveryPeriod(periodicRecoveryPeriodInitialState);\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setRecoveryBackoffPeriod(recoveryBackoffPeriodInitialState);\n+    }\n+\n+    @Before\n+    public void enableRecoveryListener() throws InterruptedException{\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setRecoveryListener(true);\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setPeriodicRecoveryPeriod(1);\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setRecoveryBackoffPeriod(1);\n+        recoveryManager = RecoveryManager.manager();\n+        // wait for the socket would be established\n+        Thread.sleep(50);\n+    }\n+\n+    @After\n+    public void returnStateOfRecoveryListener() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4NzI1Ng=="}, "originalCommit": {"oid": "728025122c8149a4d3929e66badb2b0444e477bf"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzQ4OTMyOnYy", "diffSide": "RIGHT", "path": "ArjunaCore/arjuna/tests/classes/com/hp/mwtests/ts/arjuna/recovery/RecoverySocketUnitTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzoxMTozN1rOFwe85Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDoxOTo1OVrOFwhI5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM4MzA3Nw==", "bodyText": "Is there a test where we expect the socket to time out and we verify that?", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r386383077", "createdAt": "2020-03-02T13:11:37Z", "author": {"login": "tomjenkinson"}, "path": "ArjunaCore/arjuna/tests/classes/com/hp/mwtests/ts/arjuna/recovery/RecoverySocketUnitTest.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package com.hp.mwtests.ts.arjuna.recovery;\n+\n+import com.arjuna.ats.arjuna.common.recoveryPropertyManager;\n+import com.arjuna.ats.arjuna.recovery.RecoveryDriver;\n+import com.arjuna.ats.arjuna.recovery.RecoveryManager;\n+import org.jboss.logging.Logger;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintWriter;\n+import java.net.InetAddress;\n+import java.net.Socket;\n+import java.net.SocketTimeoutException;\n+import java.net.UnknownHostException;\n+import java.nio.charset.StandardCharsets;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Test cases which work with a direct connection to socket where RecoveryManager listens at.\n+ */\n+public class RecoverySocketUnitTest {\n+    private static final Logger log = Logger.getLogger(RecoverySocketUnitTest.class);\n+\n+    private static boolean socketRecoveryListenerInitialState;\n+    private static int periodicRecoveryPeriodInitialState, recoveryBackoffPeriodInitialState;\n+\n+    private InetAddress recoveryManagerHost = null;\n+    private int recoveryManagerPort = 0;\n+    private RecoveryManager recoveryManager;\n+\n+    @BeforeClass\n+    public static void getInitialState() {\n+        socketRecoveryListenerInitialState = recoveryPropertyManager.getRecoveryEnvironmentBean().isRecoveryListener();\n+        periodicRecoveryPeriodInitialState =  recoveryPropertyManager.getRecoveryEnvironmentBean().getPeriodicRecoveryPeriod();\n+        recoveryBackoffPeriodInitialState = recoveryPropertyManager.getRecoveryEnvironmentBean().getRecoveryBackoffPeriod();\n+    }\n+\n+    @AfterClass\n+    public static void returnBackInitialState() {\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setRecoveryListener(socketRecoveryListenerInitialState);\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setPeriodicRecoveryPeriod(periodicRecoveryPeriodInitialState);\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setRecoveryBackoffPeriod(recoveryBackoffPeriodInitialState);\n+    }\n+\n+    @Before\n+    public void enableRecoveryListener() throws InterruptedException{\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setRecoveryListener(true);\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setPeriodicRecoveryPeriod(1);\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setRecoveryBackoffPeriod(1);\n+        recoveryManager = RecoveryManager.manager();\n+        // wait for the socket would be established\n+        Thread.sleep(50);\n+    }\n+\n+    @After\n+    public void returnStateOfRecoveryListener() {\n+        try {\n+            recoveryManager.terminate();\n+        } catch (IllegalStateException ise) {\n+            // cannot terminate cleanly which may happen because some of the tests which terminated recovery manager before\n+            log.debugf(ise,\"Cannot terminate recovery manager. This is probably not a problem as the test may stopped it already. Check the prior errors.\");\n+        }\n+    }\n+\n+    @Test\n+    public void socketPing() throws Exception {\n+        try (Socket connectorSocket = getSocket()) {\n+            // streams to and from the RecoveryManager listener\n+            BufferedReader fromServer = new BufferedReader(new InputStreamReader(connectorSocket.getInputStream(), StandardCharsets.UTF_8));\n+            PrintWriter toServer = new PrintWriter(new OutputStreamWriter(connectorSocket.getOutputStream(), StandardCharsets.UTF_8));\n+\n+            toServer.println(RecoveryDriver.PING);\n+            toServer.flush();\n+            String stringResponse = fromServer.readLine();\n+            assertEquals(\"Expecting the correct response string for command \" + RecoveryDriver.PING, RecoveryDriver.PONG, stringResponse);\n+        } catch (final SocketTimeoutException stex) {\n+            failOnSocketTimeout(stex, RecoveryDriver.PING);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12d5da00fa4eee6dd123d2c1b43dda84c4097871"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxODkxOA==", "bodyText": "No, but I can add it. Just note that the socket which times out is the one on the client side as the remote socket is the server socket which waits for a new connections.", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r386418918", "createdAt": "2020-03-02T14:19:59Z", "author": {"login": "ochaloup"}, "path": "ArjunaCore/arjuna/tests/classes/com/hp/mwtests/ts/arjuna/recovery/RecoverySocketUnitTest.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package com.hp.mwtests.ts.arjuna.recovery;\n+\n+import com.arjuna.ats.arjuna.common.recoveryPropertyManager;\n+import com.arjuna.ats.arjuna.recovery.RecoveryDriver;\n+import com.arjuna.ats.arjuna.recovery.RecoveryManager;\n+import org.jboss.logging.Logger;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintWriter;\n+import java.net.InetAddress;\n+import java.net.Socket;\n+import java.net.SocketTimeoutException;\n+import java.net.UnknownHostException;\n+import java.nio.charset.StandardCharsets;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Test cases which work with a direct connection to socket where RecoveryManager listens at.\n+ */\n+public class RecoverySocketUnitTest {\n+    private static final Logger log = Logger.getLogger(RecoverySocketUnitTest.class);\n+\n+    private static boolean socketRecoveryListenerInitialState;\n+    private static int periodicRecoveryPeriodInitialState, recoveryBackoffPeriodInitialState;\n+\n+    private InetAddress recoveryManagerHost = null;\n+    private int recoveryManagerPort = 0;\n+    private RecoveryManager recoveryManager;\n+\n+    @BeforeClass\n+    public static void getInitialState() {\n+        socketRecoveryListenerInitialState = recoveryPropertyManager.getRecoveryEnvironmentBean().isRecoveryListener();\n+        periodicRecoveryPeriodInitialState =  recoveryPropertyManager.getRecoveryEnvironmentBean().getPeriodicRecoveryPeriod();\n+        recoveryBackoffPeriodInitialState = recoveryPropertyManager.getRecoveryEnvironmentBean().getRecoveryBackoffPeriod();\n+    }\n+\n+    @AfterClass\n+    public static void returnBackInitialState() {\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setRecoveryListener(socketRecoveryListenerInitialState);\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setPeriodicRecoveryPeriod(periodicRecoveryPeriodInitialState);\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setRecoveryBackoffPeriod(recoveryBackoffPeriodInitialState);\n+    }\n+\n+    @Before\n+    public void enableRecoveryListener() throws InterruptedException{\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setRecoveryListener(true);\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setPeriodicRecoveryPeriod(1);\n+        recoveryPropertyManager.getRecoveryEnvironmentBean().setRecoveryBackoffPeriod(1);\n+        recoveryManager = RecoveryManager.manager();\n+        // wait for the socket would be established\n+        Thread.sleep(50);\n+    }\n+\n+    @After\n+    public void returnStateOfRecoveryListener() {\n+        try {\n+            recoveryManager.terminate();\n+        } catch (IllegalStateException ise) {\n+            // cannot terminate cleanly which may happen because some of the tests which terminated recovery manager before\n+            log.debugf(ise,\"Cannot terminate recovery manager. This is probably not a problem as the test may stopped it already. Check the prior errors.\");\n+        }\n+    }\n+\n+    @Test\n+    public void socketPing() throws Exception {\n+        try (Socket connectorSocket = getSocket()) {\n+            // streams to and from the RecoveryManager listener\n+            BufferedReader fromServer = new BufferedReader(new InputStreamReader(connectorSocket.getInputStream(), StandardCharsets.UTF_8));\n+            PrintWriter toServer = new PrintWriter(new OutputStreamWriter(connectorSocket.getOutputStream(), StandardCharsets.UTF_8));\n+\n+            toServer.println(RecoveryDriver.PING);\n+            toServer.flush();\n+            String stringResponse = fromServer.readLine();\n+            assertEquals(\"Expecting the correct response string for command \" + RecoveryDriver.PING, RecoveryDriver.PONG, stringResponse);\n+        } catch (final SocketTimeoutException stex) {\n+            failOnSocketTimeout(stex, RecoveryDriver.PING);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM4MzA3Nw=="}, "originalCommit": {"oid": "12d5da00fa4eee6dd123d2c1b43dda84c4097871"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzkwOTM0OnYy", "diffSide": "RIGHT", "path": "ArjunaCore/arjuna/tests/classes/com/hp/mwtests/ts/arjuna/recovery/RecoverySocketUnitTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTowNzowNFrOFwi5hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwOTo1MzowMVrOFw-78Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ0Nzc1MQ==", "bodyText": "I wonder if byteman could ensure that this terminated occurs at the right time to detect that the scan has started as is being interrupted?\nAlso, should we be checking the outout from the read side to make sure the scan took place?", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r386447751", "createdAt": "2020-03-02T15:07:04Z", "author": {"login": "tomjenkinson"}, "path": "ArjunaCore/arjuna/tests/classes/com/hp/mwtests/ts/arjuna/recovery/RecoverySocketUnitTest.java", "diffHunk": "@@ -143,6 +142,35 @@ public void socketScanVerbose() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void socketScanTerminateAbruptly() throws Exception {\n+        try (Socket connectorSocket = getSocket()) {\n+            PrintWriter toServer = new PrintWriter(new OutputStreamWriter(connectorSocket.getOutputStream(), StandardCharsets.UTF_8));\n+            toServer.println(RecoveryDriver.SCAN);\n+            toServer.flush();\n+            recoveryManager.terminate();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b36ec67aa39e4e0d8b8a65e8cfd324733f15dcb"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2MDQ1Ng==", "bodyText": "The terminate needs to occur before the SCAN command returns back any value. Otherwise the test would not verifies about the abrupt termination.\nSure Byteman could be used. If you prefer that I can try to add some byteman test for this.\nI personally prefer here the standard \"blackbox\" test which verifies if the termination works or has some issue.", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r386860456", "createdAt": "2020-03-03T08:26:30Z", "author": {"login": "ochaloup"}, "path": "ArjunaCore/arjuna/tests/classes/com/hp/mwtests/ts/arjuna/recovery/RecoverySocketUnitTest.java", "diffHunk": "@@ -143,6 +142,35 @@ public void socketScanVerbose() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void socketScanTerminateAbruptly() throws Exception {\n+        try (Socket connectorSocket = getSocket()) {\n+            PrintWriter toServer = new PrintWriter(new OutputStreamWriter(connectorSocket.getOutputStream(), StandardCharsets.UTF_8));\n+            toServer.println(RecoveryDriver.SCAN);\n+            toServer.flush();\n+            recoveryManager.terminate();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ0Nzc1MQ=="}, "originalCommit": {"oid": "5b36ec67aa39e4e0d8b8a65e8cfd324733f15dcb"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkwNzEyMQ==", "bodyText": "I will close this discussion to move it closer to where I would most like to explore", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r386907121", "createdAt": "2020-03-03T09:53:01Z", "author": {"login": "tomjenkinson"}, "path": "ArjunaCore/arjuna/tests/classes/com/hp/mwtests/ts/arjuna/recovery/RecoverySocketUnitTest.java", "diffHunk": "@@ -143,6 +142,35 @@ public void socketScanVerbose() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void socketScanTerminateAbruptly() throws Exception {\n+        try (Socket connectorSocket = getSocket()) {\n+            PrintWriter toServer = new PrintWriter(new OutputStreamWriter(connectorSocket.getOutputStream(), StandardCharsets.UTF_8));\n+            toServer.println(RecoveryDriver.SCAN);\n+            toServer.flush();\n+            recoveryManager.terminate();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ0Nzc1MQ=="}, "originalCommit": {"oid": "5b36ec67aa39e4e0d8b8a65e8cfd324733f15dcb"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzkxNjAyOnYy", "diffSide": "RIGHT", "path": "ArjunaCore/arjuna/tests/classes/com/hp/mwtests/ts/arjuna/recovery/RecoverySocketUnitTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTowODo1MFrOFwi9qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToyOTo0MFrOFxKn6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ0ODgxMA==", "bodyText": "Was this expected in here or in JBTM-3257?", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r386448810", "createdAt": "2020-03-02T15:08:50Z", "author": {"login": "tomjenkinson"}, "path": "ArjunaCore/arjuna/tests/classes/com/hp/mwtests/ts/arjuna/recovery/RecoverySocketUnitTest.java", "diffHunk": "@@ -143,6 +142,35 @@ public void socketScanVerbose() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void socketScanTerminateAbruptly() throws Exception {\n+        try (Socket connectorSocket = getSocket()) {\n+            PrintWriter toServer = new PrintWriter(new OutputStreamWriter(connectorSocket.getOutputStream(), StandardCharsets.UTF_8));\n+            toServer.println(RecoveryDriver.SCAN);\n+            toServer.flush();\n+            recoveryManager.terminate();\n+        } catch (final SocketTimeoutException stex) {\n+            failOnSocketTimeout(stex, RecoveryDriver.SCAN);\n+        }\n+    }\n+\n+    @Test\n+    public void socketTimeout() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b36ec67aa39e4e0d8b8a65e8cfd324733f15dcb"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2MTI3NQ==", "bodyText": "It's a general test on the socket connection so it could be here but it could be there. It does not hit the specific fixed issue. The socket times out as the input is not finished. This behaviour is the same before the fixes and after the fixes as well.\nI can move it if it's preferred.", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r386861275", "createdAt": "2020-03-03T08:28:17Z", "author": {"login": "ochaloup"}, "path": "ArjunaCore/arjuna/tests/classes/com/hp/mwtests/ts/arjuna/recovery/RecoverySocketUnitTest.java", "diffHunk": "@@ -143,6 +142,35 @@ public void socketScanVerbose() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void socketScanTerminateAbruptly() throws Exception {\n+        try (Socket connectorSocket = getSocket()) {\n+            PrintWriter toServer = new PrintWriter(new OutputStreamWriter(connectorSocket.getOutputStream(), StandardCharsets.UTF_8));\n+            toServer.println(RecoveryDriver.SCAN);\n+            toServer.flush();\n+            recoveryManager.terminate();\n+        } catch (final SocketTimeoutException stex) {\n+            failOnSocketTimeout(stex, RecoveryDriver.SCAN);\n+        }\n+    }\n+\n+    @Test\n+    public void socketTimeout() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ0ODgxMA=="}, "originalCommit": {"oid": "5b36ec67aa39e4e0d8b8a65e8cfd324733f15dcb"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkwNTgyNg==", "bodyText": "Given your answer, I think the thing to consider is if it was part of the investigation of JBTM-3259 or JBTM-3257 and may ever want backporting or whether it is more applicable to have a separate commit as it is not directly related to either? If an additional commit is necessary I think it could be prefixed it as \"ADDITIONAL TEST ONLY:\" (like we tend to do for \"BUILD SCRIPT ONLY:\" and \"RELEASE SCRIPT ONLY:\") /cc @mmusgrov", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r386905826", "createdAt": "2020-03-03T09:50:41Z", "author": {"login": "tomjenkinson"}, "path": "ArjunaCore/arjuna/tests/classes/com/hp/mwtests/ts/arjuna/recovery/RecoverySocketUnitTest.java", "diffHunk": "@@ -143,6 +142,35 @@ public void socketScanVerbose() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void socketScanTerminateAbruptly() throws Exception {\n+        try (Socket connectorSocket = getSocket()) {\n+            PrintWriter toServer = new PrintWriter(new OutputStreamWriter(connectorSocket.getOutputStream(), StandardCharsets.UTF_8));\n+            toServer.println(RecoveryDriver.SCAN);\n+            toServer.flush();\n+            recoveryManager.terminate();\n+        } catch (final SocketTimeoutException stex) {\n+            failOnSocketTimeout(stex, RecoveryDriver.SCAN);\n+        }\n+    }\n+\n+    @Test\n+    public void socketTimeout() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ0ODgxMA=="}, "originalCommit": {"oid": "5b36ec67aa39e4e0d8b8a65e8cfd324733f15dcb"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4Nzg2Nw==", "bodyText": "@tomjenkinson I have really not much an idea what should be the result. I have had the commits separated to three. There were two commits created each for one issue, and then there was one for the maintenance changes.\nThen I was asked to squash them. So I did it.\nI really don't care how this should be done, just tell me.", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r387087867", "createdAt": "2020-03-03T15:14:55Z", "author": {"login": "ochaloup"}, "path": "ArjunaCore/arjuna/tests/classes/com/hp/mwtests/ts/arjuna/recovery/RecoverySocketUnitTest.java", "diffHunk": "@@ -143,6 +142,35 @@ public void socketScanVerbose() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void socketScanTerminateAbruptly() throws Exception {\n+        try (Socket connectorSocket = getSocket()) {\n+            PrintWriter toServer = new PrintWriter(new OutputStreamWriter(connectorSocket.getOutputStream(), StandardCharsets.UTF_8));\n+            toServer.println(RecoveryDriver.SCAN);\n+            toServer.flush();\n+            recoveryManager.terminate();\n+        } catch (final SocketTimeoutException stex) {\n+            failOnSocketTimeout(stex, RecoveryDriver.SCAN);\n+        }\n+    }\n+\n+    @Test\n+    public void socketTimeout() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ0ODgxMA=="}, "originalCommit": {"oid": "5b36ec67aa39e4e0d8b8a65e8cfd324733f15dcb"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5ODYwMA==", "bodyText": "Hi @ochaloup sorry! I guess I didn't understand exactly what exactly the third commit covered. Let me try to understand the other part of the thread first and I will come back here.", "url": "https://github.com/jbosstm/narayana/pull/1561#discussion_r387098600", "createdAt": "2020-03-03T15:29:40Z", "author": {"login": "tomjenkinson"}, "path": "ArjunaCore/arjuna/tests/classes/com/hp/mwtests/ts/arjuna/recovery/RecoverySocketUnitTest.java", "diffHunk": "@@ -143,6 +142,35 @@ public void socketScanVerbose() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void socketScanTerminateAbruptly() throws Exception {\n+        try (Socket connectorSocket = getSocket()) {\n+            PrintWriter toServer = new PrintWriter(new OutputStreamWriter(connectorSocket.getOutputStream(), StandardCharsets.UTF_8));\n+            toServer.println(RecoveryDriver.SCAN);\n+            toServer.flush();\n+            recoveryManager.terminate();\n+        } catch (final SocketTimeoutException stex) {\n+            failOnSocketTimeout(stex, RecoveryDriver.SCAN);\n+        }\n+    }\n+\n+    @Test\n+    public void socketTimeout() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ0ODgxMA=="}, "originalCommit": {"oid": "5b36ec67aa39e4e0d8b8a65e8cfd324733f15dcb"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1260, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}