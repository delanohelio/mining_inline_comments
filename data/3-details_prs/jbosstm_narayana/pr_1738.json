{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyNzM5MTY3", "number": 1738, "title": "JBTM-3245 report request and response filter processing failures back\u2026", "bodyText": "https://issues.redhat.com/browse/JBTM-3245\nThis PR adds error handling and reporting (to the caller). In particular it verifies the behaviour when a coordinator cannot be contacted and produces a response back to the caller indicating that the LRA is potentially in doubt.\nI tested the code by break-pointing the coordinator at the appropriate places to simulate coordinator unavailability. I'm not sure if we need to simulate that using byteman in the future but for now I think doing it manually is sufficient.\n!MAIN !CORE !QA_JTA !QA_JTS_JDKORB !QA_JTS_OPENJDKORB !QA_JTS_JACORB !BLACKTIE !XTS !PERF NO_WIN !RTS !AS_TESTS !TOMCAT !JACOCO\nLRA", "createdAt": "2020-12-04T19:27:15Z", "url": "https://github.com/jbosstm/narayana/pull/1738", "merged": true, "mergeCommit": {"oid": "26a149dfb5797ed619f5fde5526550191c27a903"}, "closed": true, "closedAt": "2020-12-14T09:05:45Z", "author": {"login": "mmusgrov"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdj1C7UgFqTU0NjA4MjUyNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdl52nygBqjQxMDY1ODM3MzU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MDgyNTI0", "url": "https://github.com/jbosstm/narayana/pull/1738#pullrequestreview-546082524", "createdAt": "2020-12-07T12:00:49Z", "commit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMjowMDo0OVrOIAjedA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMjo1MDowMFrOIAlQKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ1MjE0OA==", "bodyText": "I wonder what is the benefit for having this verbose flag here. My opinion is that when the LRA is not created it's generally usable to understand the reason. The throwGenericLRAException was changed to contain this information in case of error. Then the verbose flag won't provide more information, will it?", "url": "https://github.com/jbosstm/narayana/pull/1738#discussion_r537452148", "createdAt": "2020-12-07T12:00:49Z", "author": {"login": "ochaloup"}, "path": "rts/lra/client/src/main/java/io/narayana/lra/client/NarayanaLRAClient.java", "diffHunk": "@@ -265,13 +287,17 @@ public URI startLRA(URI parentLRA, String clientID, Long timeout, ChronoUnit uni\n                 .queryParam(TIMELIMIT_PARAM_NAME, Duration.of(timeout, unit).toMillis())\n                 .queryParam(PARENT_LRA_PARAM_NAME, encodedParentLRA)\n                 .request()\n-                .post(null);\n+                .async()\n+                .post(null)\n+                .get(CLIENT_TIMEOUT, TimeUnit.SECONDS);\n \n             // validate the HTTP status code says an LRA resource was created\n             if (isUnexpectedResponseStatus(response, Response.Status.CREATED)) {\n                 String responseEntity = response.hasEntity() ? response.readEntity(String.class) : \"\";\n-                LRALogger.i18NLogger.error_lraCreationUnexpectedStatus(response.getStatus(), responseEntity);\n-                throwGenericLRAException(null, INTERNAL_SERVER_ERROR.getStatusCode(),\n+                if (verbose) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ1MzkyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                .async()\n          \n          \n            \n                            .async()", "url": "https://github.com/jbosstm/narayana/pull/1738#discussion_r537453926", "createdAt": "2020-12-07T12:03:43Z", "author": {"login": "ochaloup"}, "path": "rts/lra/client/src/main/java/io/narayana/lra/client/NarayanaLRAClient.java", "diffHunk": "@@ -370,14 +387,19 @@ public void leaveLRA(URI lraId, String body) throws WebApplicationException {\n             response = client.target(coordinatorUrl)\n                 .path(String.format(LEAVE_PATH, LRAConstants.getLRAUid(lraId)))\n                 .request()\n-                .put(Entity.text(body));\n+                    .async()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ1NTE3OQ==", "bodyText": "For me there is a strange formatting for these async calls and get calls. This formatting is used overall of the whole class. Is it intentional?", "url": "https://github.com/jbosstm/narayana/pull/1738#discussion_r537455179", "createdAt": "2020-12-07T12:05:44Z", "author": {"login": "ochaloup"}, "path": "rts/lra/client/src/main/java/io/narayana/lra/client/NarayanaLRAClient.java", "diffHunk": "@@ -370,14 +387,19 @@ public void leaveLRA(URI lraId, String body) throws WebApplicationException {\n             response = client.target(coordinatorUrl)\n                 .path(String.format(LEAVE_PATH, LRAConstants.getLRAUid(lraId)))\n                 .request()\n-                .put(Entity.text(body));\n+                    .async()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ1MzkyNg=="}, "originalCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ1ODQ3Ng==", "bodyText": "What is the reason to explicitly provide the message code when it's printed by logger when logged?", "url": "https://github.com/jbosstm/narayana/pull/1738#discussion_r537458476", "createdAt": "2020-12-07T12:11:24Z", "author": {"login": "ochaloup"}, "path": "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java", "diffHunk": "@@ -78,10 +83,13 @@\n     private static final String TERMINAL_LRA_PROP = \"terminateLRA\";\n     private static final String SUSPENDED_LRA_PROP = \"suspendLRA\";\n     private static final String NEW_LRA_PROP = \"newLRA\";\n+    private static final String ABORT_WITH_PROP = \"abortWith\";\n \n     private static final Pattern START_END_QUOTES_PATTERN = Pattern.compile(\"^\\\"|\\\"$\");\n     private static final long DEFAULT_TIMEOUT_MILLIS = 0L;\n-\n+    private static final String JOIN = \"join\";\n+    // i18nMessageCode corresponding to lraI18NLogger#warn_LRAStatusInDoubt\n+    private static final int i18nMessageCode = 25145;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ1ODgzOA==", "bodyText": "Is this constant used somewhere?", "url": "https://github.com/jbosstm/narayana/pull/1738#discussion_r537458838", "createdAt": "2020-12-07T12:11:56Z", "author": {"login": "ochaloup"}, "path": "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java", "diffHunk": "@@ -78,10 +83,13 @@\n     private static final String TERMINAL_LRA_PROP = \"terminateLRA\";\n     private static final String SUSPENDED_LRA_PROP = \"suspendLRA\";\n     private static final String NEW_LRA_PROP = \"newLRA\";\n+    private static final String ABORT_WITH_PROP = \"abortWith\";\n \n     private static final Pattern START_END_QUOTES_PATTERN = Pattern.compile(\"^\\\"|\\\"$\");\n     private static final long DEFAULT_TIMEOUT_MILLIS = 0L;\n-\n+    private static final String JOIN = \"join\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ2MDYwNQ==", "bodyText": "Please, use  StringBuilder", "url": "https://github.com/jbosstm/narayana/pull/1738#discussion_r537460605", "createdAt": "2020-12-07T12:15:14Z", "author": {"login": "ochaloup"}, "path": "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java", "diffHunk": "@@ -460,46 +575,149 @@ private boolean isJaxRsCancel(ContainerRequestContext requestContext, ContainerR\n         return false;\n     }\n \n-    private URI startLRA(URI parentLRA, Method method, Long timeout) {\n-        // timeout should already have been converted to milliseconds\n-        String clientId = method.getDeclaringClass().getName() + \"#\" + method.getName();\n+    // the request filter may perform multiple and in failure scenarios the LRA may be left in an ambiguous state:\n+    // the following structure is used to track progress so that such failures can be reported in the response\n+    // filter processing\n+    private enum ProgressStep {\n+        Left (\"leave succeeded\"),\n+        LeaveFailed(\"leave failed\"),\n+        Started(\"start ok\"),\n+        StartFailed(\"start failed\"),\n+        Joined(\"join succeeded\"),\n+        JoinFailed(\"join failed\"),\n+        Ended(\"end ok\"),\n+        CloseFailed(\"close failed\"),\n+        CancelFailed(\"cancel failed\");\n+\n+        final String status;\n+\n+        ProgressStep(final String status) {\n+            this.status = status;\n+        }\n \n-        return lraClient.startLRA(parentLRA, clientId, timeout, ChronoUnit.MILLIS);\n+        @Override\n+        public String toString() {\n+            return status;\n+        }\n     }\n \n-    private void resumeTransaction(URI lraId) {\n-        // nothing to do\n+    // list of steps (both successful and unsuccesful) performed so far by the request and response filter\n+    // and is used for error reporting\n+    private static class Progress {\n+        static EnumSet<ProgressStep> failures = EnumSet.of(\n+                ProgressStep.LeaveFailed,\n+                ProgressStep.StartFailed,\n+                ProgressStep.JoinFailed,\n+                ProgressStep.CloseFailed,\n+                ProgressStep.CancelFailed);\n+\n+        ProgressStep progress;\n+        String reason;\n+\n+        public Progress(ProgressStep progress, String reason) {\n+            this.progress = progress;\n+            this.reason = reason;\n+        }\n+\n+        public boolean ok() {\n+            return !failures.contains(progress);\n+        }\n     }\n \n-    private String getCompensatorId(URI lraId, UriInfo uriInfo, Long timeout) {\n-        Map<String, String> terminateURIs = NarayanaLRAClient.getTerminationUris(resourceInfo.getResourceClass(), uriInfo, timeout);\n+    // convert the list of steps carried out by the filters into a warning message\n+    private String processLRAOperationFailures(ArrayList<Progress> progress) {\n+        StringJoiner badOps = new StringJoiner(\", \");\n+        StringJoiner goodOps = new StringJoiner(\", \");\n+        StringBuffer code = new StringBuffer(\"-\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "originalPosition": 505}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ2MTE4OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * <successful op codes>: each digit corresponds to the enum ordinal calue of the ProgressStep enum value that failed\n          \n          \n            \n                     * <successful op codes>: each digit corresponds to the enum ordinal value of the ProgressStep enum value that failed", "url": "https://github.com/jbosstm/narayana/pull/1738#discussion_r537461188", "createdAt": "2020-12-07T12:16:20Z", "author": {"login": "ochaloup"}, "path": "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java", "diffHunk": "@@ -460,46 +575,149 @@ private boolean isJaxRsCancel(ContainerRequestContext requestContext, ContainerR\n         return false;\n     }\n \n-    private URI startLRA(URI parentLRA, Method method, Long timeout) {\n-        // timeout should already have been converted to milliseconds\n-        String clientId = method.getDeclaringClass().getName() + \"#\" + method.getName();\n+    // the request filter may perform multiple and in failure scenarios the LRA may be left in an ambiguous state:\n+    // the following structure is used to track progress so that such failures can be reported in the response\n+    // filter processing\n+    private enum ProgressStep {\n+        Left (\"leave succeeded\"),\n+        LeaveFailed(\"leave failed\"),\n+        Started(\"start ok\"),\n+        StartFailed(\"start failed\"),\n+        Joined(\"join succeeded\"),\n+        JoinFailed(\"join failed\"),\n+        Ended(\"end ok\"),\n+        CloseFailed(\"close failed\"),\n+        CancelFailed(\"cancel failed\");\n+\n+        final String status;\n+\n+        ProgressStep(final String status) {\n+            this.status = status;\n+        }\n \n-        return lraClient.startLRA(parentLRA, clientId, timeout, ChronoUnit.MILLIS);\n+        @Override\n+        public String toString() {\n+            return status;\n+        }\n     }\n \n-    private void resumeTransaction(URI lraId) {\n-        // nothing to do\n+    // list of steps (both successful and unsuccesful) performed so far by the request and response filter\n+    // and is used for error reporting\n+    private static class Progress {\n+        static EnumSet<ProgressStep> failures = EnumSet.of(\n+                ProgressStep.LeaveFailed,\n+                ProgressStep.StartFailed,\n+                ProgressStep.JoinFailed,\n+                ProgressStep.CloseFailed,\n+                ProgressStep.CancelFailed);\n+\n+        ProgressStep progress;\n+        String reason;\n+\n+        public Progress(ProgressStep progress, String reason) {\n+            this.progress = progress;\n+            this.reason = reason;\n+        }\n+\n+        public boolean ok() {\n+            return !failures.contains(progress);\n+        }\n     }\n \n-    private String getCompensatorId(URI lraId, UriInfo uriInfo, Long timeout) {\n-        Map<String, String> terminateURIs = NarayanaLRAClient.getTerminationUris(resourceInfo.getResourceClass(), uriInfo, timeout);\n+    // convert the list of steps carried out by the filters into a warning message\n+    private String processLRAOperationFailures(ArrayList<Progress> progress) {\n+        StringJoiner badOps = new StringJoiner(\", \");\n+        StringJoiner goodOps = new StringJoiner(\", \");\n+        StringBuffer code = new StringBuffer(\"-\");\n \n-        if (!terminateURIs.containsKey(\"Link\")) {\n-            throwGenericLRAException(lraId, Response.Status.BAD_REQUEST.getStatusCode(),\n-                    \"Missing complete or compensate annotations\");\n-        }\n+        progress.forEach(p -> {\n+            if (p.ok()) {\n+                code.insert(0, p.progress.ordinal());\n+                goodOps.add(String.format(\"%s (%s)\", p.progress.name(), p.progress.status));\n+            } else {\n+                code.append(p.progress.ordinal());\n+                badOps.add(String.format(\"%s (%s)\", p.progress.name(), p.reason));\n+            }\n+        });\n+\n+        /*\n+         * return a string which encodes the result:\n+         * <major code>-<failed op codes>-<successful op codes>: <details of failed ops> (<details of successful ops>)\n+         *\n+         * where\n+         *\n+         * <major code>: corresponds to the id of the message in the logs\n+         * <failed op codes>: each digit corresponds to the enum ordinal calue of the ProgressStep enum value that was successful\n+         * <successful op codes>: each digit corresponds to the enum ordinal calue of the ProgressStep enum value that failed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "originalPosition": 529}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ2MTg5Mg==", "bodyText": "Could this be called from multiple threads?", "url": "https://github.com/jbosstm/narayana/pull/1738#discussion_r537461892", "createdAt": "2020-12-07T12:17:36Z", "author": {"login": "ochaloup"}, "path": "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java", "diffHunk": "@@ -460,46 +575,149 @@ private boolean isJaxRsCancel(ContainerRequestContext requestContext, ContainerR\n         return false;\n     }\n \n-    private URI startLRA(URI parentLRA, Method method, Long timeout) {\n-        // timeout should already have been converted to milliseconds\n-        String clientId = method.getDeclaringClass().getName() + \"#\" + method.getName();\n+    // the request filter may perform multiple and in failure scenarios the LRA may be left in an ambiguous state:\n+    // the following structure is used to track progress so that such failures can be reported in the response\n+    // filter processing\n+    private enum ProgressStep {\n+        Left (\"leave succeeded\"),\n+        LeaveFailed(\"leave failed\"),\n+        Started(\"start ok\"),\n+        StartFailed(\"start failed\"),\n+        Joined(\"join succeeded\"),\n+        JoinFailed(\"join failed\"),\n+        Ended(\"end ok\"),\n+        CloseFailed(\"close failed\"),\n+        CancelFailed(\"cancel failed\");\n+\n+        final String status;\n+\n+        ProgressStep(final String status) {\n+            this.status = status;\n+        }\n \n-        return lraClient.startLRA(parentLRA, clientId, timeout, ChronoUnit.MILLIS);\n+        @Override\n+        public String toString() {\n+            return status;\n+        }\n     }\n \n-    private void resumeTransaction(URI lraId) {\n-        // nothing to do\n+    // list of steps (both successful and unsuccesful) performed so far by the request and response filter\n+    // and is used for error reporting\n+    private static class Progress {\n+        static EnumSet<ProgressStep> failures = EnumSet.of(\n+                ProgressStep.LeaveFailed,\n+                ProgressStep.StartFailed,\n+                ProgressStep.JoinFailed,\n+                ProgressStep.CloseFailed,\n+                ProgressStep.CancelFailed);\n+\n+        ProgressStep progress;\n+        String reason;\n+\n+        public Progress(ProgressStep progress, String reason) {\n+            this.progress = progress;\n+            this.reason = reason;\n+        }\n+\n+        public boolean ok() {\n+            return !failures.contains(progress);\n+        }\n     }\n \n-    private String getCompensatorId(URI lraId, UriInfo uriInfo, Long timeout) {\n-        Map<String, String> terminateURIs = NarayanaLRAClient.getTerminationUris(resourceInfo.getResourceClass(), uriInfo, timeout);\n+    // convert the list of steps carried out by the filters into a warning message\n+    private String processLRAOperationFailures(ArrayList<Progress> progress) {\n+        StringJoiner badOps = new StringJoiner(\", \");\n+        StringJoiner goodOps = new StringJoiner(\", \");\n+        StringBuffer code = new StringBuffer(\"-\");\n \n-        if (!terminateURIs.containsKey(\"Link\")) {\n-            throwGenericLRAException(lraId, Response.Status.BAD_REQUEST.getStatusCode(),\n-                    \"Missing complete or compensate annotations\");\n-        }\n+        progress.forEach(p -> {\n+            if (p.ok()) {\n+                code.insert(0, p.progress.ordinal());\n+                goodOps.add(String.format(\"%s (%s)\", p.progress.name(), p.progress.status));\n+            } else {\n+                code.append(p.progress.ordinal());\n+                badOps.add(String.format(\"%s (%s)\", p.progress.name(), p.reason));\n+            }\n+        });\n+\n+        /*\n+         * return a string which encodes the result:\n+         * <major code>-<failed op codes>-<successful op codes>: <details of failed ops> (<details of successful ops>)\n+         *\n+         * where\n+         *\n+         * <major code>: corresponds to the id of the message in the logs\n+         * <failed op codes>: each digit corresponds to the enum ordinal calue of the ProgressStep enum value that was successful\n+         * <successful op codes>: each digit corresponds to the enum ordinal calue of the ProgressStep enum value that failed\n+         * <details of failed ops>: comma separated list of failed operation details \"<op name> (<exception message>)\"\n+         * <details of successful ops>: comma separated list of successful operation details \"<op name> (<op description>)\"\n+         */\n+\n+        return badOps.length() != 0 ? String.format(\"%d-%s: %s (%s)\", i18nMessageCode, code, badOps, goodOps) : null;\n+    }\n \n-        return terminateURIs.get(\"Link\");\n+    private boolean progressDoesNotContain(ArrayList<Progress> progress, ProgressStep step) {\n+        return progress.stream().noneMatch(p -> p.progress == step);\n     }\n \n-    private void lraTrace(URI lraId, String reason) {\n-        if (LRALogger.logger.isTraceEnabled()) {\n-            Method method = resourceInfo.getResourceMethod();\n-            LRALogger.logger.tracef(\"%s: container request for method %s: lra: %s%n\",\n-                    reason, method.getDeclaringClass().getName() + \"#\" + method.getName(),\n-                    lraId == null ? \"context\" : lraId);\n+    // add another step to the list of steps performed so far\n+    private ArrayList<Progress> updateProgress(ArrayList<Progress> progress, ProgressStep step, String reason) {\n+        if (progress == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "originalPosition": 550}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ2MzU2NA==", "bodyText": "a minor thing, the ClientLRAFilter uses the call as updateProgress(progres, ...) while this class uses the format progress = updateProgress(progress, .... Would not be better to use the same format of the call (probably just updateProgress(...)?", "url": "https://github.com/jbosstm/narayana/pull/1738#discussion_r537463564", "createdAt": "2020-12-07T12:20:36Z", "author": {"login": "ochaloup"}, "path": "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java", "diffHunk": "@@ -385,10 +460,24 @@ public void filter(ContainerRequestContext requestContext, ContainerResponseCont\n         try {\n             if (current != null && isCancel) {\n                 try {\n-                    lraClient.cancelLRA(current);\n+                    // do not attempt to cancel if the request filter tried but failed to start a new LRA\n+                    if (progress == null || progressDoesNotContain(progress, ProgressStep.StartFailed)) {\n+                        lraClient.cancelLRA(current);\n+                        progress = updateProgress(progress, ProgressStep.Ended, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "originalPosition": 370}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ2NTI4Nw==", "bodyText": "Using the enum ordinal for identity is not a good practice in java programming (https://wiki.sei.cmu.edu/confluence/display/java/DCL56-J.+Do+not+attach+significance+to+the+ordinal+associated+with+an+enum). There should be used a different approach for codes.", "url": "https://github.com/jbosstm/narayana/pull/1738#discussion_r537465287", "createdAt": "2020-12-07T12:23:40Z", "author": {"login": "ochaloup"}, "path": "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java", "diffHunk": "@@ -460,46 +575,149 @@ private boolean isJaxRsCancel(ContainerRequestContext requestContext, ContainerR\n         return false;\n     }\n \n-    private URI startLRA(URI parentLRA, Method method, Long timeout) {\n-        // timeout should already have been converted to milliseconds\n-        String clientId = method.getDeclaringClass().getName() + \"#\" + method.getName();\n+    // the request filter may perform multiple and in failure scenarios the LRA may be left in an ambiguous state:\n+    // the following structure is used to track progress so that such failures can be reported in the response\n+    // filter processing\n+    private enum ProgressStep {\n+        Left (\"leave succeeded\"),\n+        LeaveFailed(\"leave failed\"),\n+        Started(\"start ok\"),\n+        StartFailed(\"start failed\"),\n+        Joined(\"join succeeded\"),\n+        JoinFailed(\"join failed\"),\n+        Ended(\"end ok\"),\n+        CloseFailed(\"close failed\"),\n+        CancelFailed(\"cancel failed\");\n+\n+        final String status;\n+\n+        ProgressStep(final String status) {\n+            this.status = status;\n+        }\n \n-        return lraClient.startLRA(parentLRA, clientId, timeout, ChronoUnit.MILLIS);\n+        @Override\n+        public String toString() {\n+            return status;\n+        }\n     }\n \n-    private void resumeTransaction(URI lraId) {\n-        // nothing to do\n+    // list of steps (both successful and unsuccesful) performed so far by the request and response filter\n+    // and is used for error reporting\n+    private static class Progress {\n+        static EnumSet<ProgressStep> failures = EnumSet.of(\n+                ProgressStep.LeaveFailed,\n+                ProgressStep.StartFailed,\n+                ProgressStep.JoinFailed,\n+                ProgressStep.CloseFailed,\n+                ProgressStep.CancelFailed);\n+\n+        ProgressStep progress;\n+        String reason;\n+\n+        public Progress(ProgressStep progress, String reason) {\n+            this.progress = progress;\n+            this.reason = reason;\n+        }\n+\n+        public boolean ok() {\n+            return !failures.contains(progress);\n+        }\n     }\n \n-    private String getCompensatorId(URI lraId, UriInfo uriInfo, Long timeout) {\n-        Map<String, String> terminateURIs = NarayanaLRAClient.getTerminationUris(resourceInfo.getResourceClass(), uriInfo, timeout);\n+    // convert the list of steps carried out by the filters into a warning message\n+    private String processLRAOperationFailures(ArrayList<Progress> progress) {\n+        StringJoiner badOps = new StringJoiner(\", \");\n+        StringJoiner goodOps = new StringJoiner(\", \");\n+        StringBuffer code = new StringBuffer(\"-\");\n \n-        if (!terminateURIs.containsKey(\"Link\")) {\n-            throwGenericLRAException(lraId, Response.Status.BAD_REQUEST.getStatusCode(),\n-                    \"Missing complete or compensate annotations\");\n-        }\n+        progress.forEach(p -> {\n+            if (p.ok()) {\n+                code.insert(0, p.progress.ordinal());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "originalPosition": 513}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ2NjYxNw==", "bodyText": "Should not be \"end suceeded\"?", "url": "https://github.com/jbosstm/narayana/pull/1738#discussion_r537466617", "createdAt": "2020-12-07T12:25:55Z", "author": {"login": "ochaloup"}, "path": "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java", "diffHunk": "@@ -460,46 +575,149 @@ private boolean isJaxRsCancel(ContainerRequestContext requestContext, ContainerR\n         return false;\n     }\n \n-    private URI startLRA(URI parentLRA, Method method, Long timeout) {\n-        // timeout should already have been converted to milliseconds\n-        String clientId = method.getDeclaringClass().getName() + \"#\" + method.getName();\n+    // the request filter may perform multiple and in failure scenarios the LRA may be left in an ambiguous state:\n+    // the following structure is used to track progress so that such failures can be reported in the response\n+    // filter processing\n+    private enum ProgressStep {\n+        Left (\"leave succeeded\"),\n+        LeaveFailed(\"leave failed\"),\n+        Started(\"start ok\"),\n+        StartFailed(\"start failed\"),\n+        Joined(\"join succeeded\"),\n+        JoinFailed(\"join failed\"),\n+        Ended(\"end ok\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "originalPosition": 457}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ2ODAxNA==", "bodyText": "When the progress data structure is used for seeking on existence would not be better to use the map structure?", "url": "https://github.com/jbosstm/narayana/pull/1738#discussion_r537468014", "createdAt": "2020-12-07T12:28:15Z", "author": {"login": "ochaloup"}, "path": "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java", "diffHunk": "@@ -460,46 +575,149 @@ private boolean isJaxRsCancel(ContainerRequestContext requestContext, ContainerR\n         return false;\n     }\n \n-    private URI startLRA(URI parentLRA, Method method, Long timeout) {\n-        // timeout should already have been converted to milliseconds\n-        String clientId = method.getDeclaringClass().getName() + \"#\" + method.getName();\n+    // the request filter may perform multiple and in failure scenarios the LRA may be left in an ambiguous state:\n+    // the following structure is used to track progress so that such failures can be reported in the response\n+    // filter processing\n+    private enum ProgressStep {\n+        Left (\"leave succeeded\"),\n+        LeaveFailed(\"leave failed\"),\n+        Started(\"start ok\"),\n+        StartFailed(\"start failed\"),\n+        Joined(\"join succeeded\"),\n+        JoinFailed(\"join failed\"),\n+        Ended(\"end ok\"),\n+        CloseFailed(\"close failed\"),\n+        CancelFailed(\"cancel failed\");\n+\n+        final String status;\n+\n+        ProgressStep(final String status) {\n+            this.status = status;\n+        }\n \n-        return lraClient.startLRA(parentLRA, clientId, timeout, ChronoUnit.MILLIS);\n+        @Override\n+        public String toString() {\n+            return status;\n+        }\n     }\n \n-    private void resumeTransaction(URI lraId) {\n-        // nothing to do\n+    // list of steps (both successful and unsuccesful) performed so far by the request and response filter\n+    // and is used for error reporting\n+    private static class Progress {\n+        static EnumSet<ProgressStep> failures = EnumSet.of(\n+                ProgressStep.LeaveFailed,\n+                ProgressStep.StartFailed,\n+                ProgressStep.JoinFailed,\n+                ProgressStep.CloseFailed,\n+                ProgressStep.CancelFailed);\n+\n+        ProgressStep progress;\n+        String reason;\n+\n+        public Progress(ProgressStep progress, String reason) {\n+            this.progress = progress;\n+            this.reason = reason;\n+        }\n+\n+        public boolean ok() {\n+            return !failures.contains(progress);\n+        }\n     }\n \n-    private String getCompensatorId(URI lraId, UriInfo uriInfo, Long timeout) {\n-        Map<String, String> terminateURIs = NarayanaLRAClient.getTerminationUris(resourceInfo.getResourceClass(), uriInfo, timeout);\n+    // convert the list of steps carried out by the filters into a warning message\n+    private String processLRAOperationFailures(ArrayList<Progress> progress) {\n+        StringJoiner badOps = new StringJoiner(\", \");\n+        StringJoiner goodOps = new StringJoiner(\", \");\n+        StringBuffer code = new StringBuffer(\"-\");\n \n-        if (!terminateURIs.containsKey(\"Link\")) {\n-            throwGenericLRAException(lraId, Response.Status.BAD_REQUEST.getStatusCode(),\n-                    \"Missing complete or compensate annotations\");\n-        }\n+        progress.forEach(p -> {\n+            if (p.ok()) {\n+                code.insert(0, p.progress.ordinal());\n+                goodOps.add(String.format(\"%s (%s)\", p.progress.name(), p.progress.status));\n+            } else {\n+                code.append(p.progress.ordinal());\n+                badOps.add(String.format(\"%s (%s)\", p.progress.name(), p.reason));\n+            }\n+        });\n+\n+        /*\n+         * return a string which encodes the result:\n+         * <major code>-<failed op codes>-<successful op codes>: <details of failed ops> (<details of successful ops>)\n+         *\n+         * where\n+         *\n+         * <major code>: corresponds to the id of the message in the logs\n+         * <failed op codes>: each digit corresponds to the enum ordinal calue of the ProgressStep enum value that was successful\n+         * <successful op codes>: each digit corresponds to the enum ordinal calue of the ProgressStep enum value that failed\n+         * <details of failed ops>: comma separated list of failed operation details \"<op name> (<exception message>)\"\n+         * <details of successful ops>: comma separated list of successful operation details \"<op name> (<op description>)\"\n+         */\n+\n+        return badOps.length() != 0 ? String.format(\"%d-%s: %s (%s)\", i18nMessageCode, code, badOps, goodOps) : null;\n+    }\n \n-        return terminateURIs.get(\"Link\");\n+    private boolean progressDoesNotContain(ArrayList<Progress> progress, ProgressStep step) {\n+        return progress.stream().noneMatch(p -> p.progress == step);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "originalPosition": 539}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ2OTg0Mg==", "bodyText": "Would no this EnumSet be more appropriate to be part (a member) of the ProgressStep Enum itself?", "url": "https://github.com/jbosstm/narayana/pull/1738#discussion_r537469842", "createdAt": "2020-12-07T12:31:27Z", "author": {"login": "ochaloup"}, "path": "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java", "diffHunk": "@@ -460,46 +575,149 @@ private boolean isJaxRsCancel(ContainerRequestContext requestContext, ContainerR\n         return false;\n     }\n \n-    private URI startLRA(URI parentLRA, Method method, Long timeout) {\n-        // timeout should already have been converted to milliseconds\n-        String clientId = method.getDeclaringClass().getName() + \"#\" + method.getName();\n+    // the request filter may perform multiple and in failure scenarios the LRA may be left in an ambiguous state:\n+    // the following structure is used to track progress so that such failures can be reported in the response\n+    // filter processing\n+    private enum ProgressStep {\n+        Left (\"leave succeeded\"),\n+        LeaveFailed(\"leave failed\"),\n+        Started(\"start ok\"),\n+        StartFailed(\"start failed\"),\n+        Joined(\"join succeeded\"),\n+        JoinFailed(\"join failed\"),\n+        Ended(\"end ok\"),\n+        CloseFailed(\"close failed\"),\n+        CancelFailed(\"cancel failed\");\n+\n+        final String status;\n+\n+        ProgressStep(final String status) {\n+            this.status = status;\n+        }\n \n-        return lraClient.startLRA(parentLRA, clientId, timeout, ChronoUnit.MILLIS);\n+        @Override\n+        public String toString() {\n+            return status;\n+        }\n     }\n \n-    private void resumeTransaction(URI lraId) {\n-        // nothing to do\n+    // list of steps (both successful and unsuccesful) performed so far by the request and response filter\n+    // and is used for error reporting\n+    private static class Progress {\n+        static EnumSet<ProgressStep> failures = EnumSet.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "originalPosition": 479}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ3MTA3OQ==", "bodyText": "Maybe this would be better to be name with success? These this term seems to be used more in the sources here than ok to say that's all fine.", "url": "https://github.com/jbosstm/narayana/pull/1738#discussion_r537471079", "createdAt": "2020-12-07T12:33:31Z", "author": {"login": "ochaloup"}, "path": "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java", "diffHunk": "@@ -460,46 +575,149 @@ private boolean isJaxRsCancel(ContainerRequestContext requestContext, ContainerR\n         return false;\n     }\n \n-    private URI startLRA(URI parentLRA, Method method, Long timeout) {\n-        // timeout should already have been converted to milliseconds\n-        String clientId = method.getDeclaringClass().getName() + \"#\" + method.getName();\n+    // the request filter may perform multiple and in failure scenarios the LRA may be left in an ambiguous state:\n+    // the following structure is used to track progress so that such failures can be reported in the response\n+    // filter processing\n+    private enum ProgressStep {\n+        Left (\"leave succeeded\"),\n+        LeaveFailed(\"leave failed\"),\n+        Started(\"start ok\"),\n+        StartFailed(\"start failed\"),\n+        Joined(\"join succeeded\"),\n+        JoinFailed(\"join failed\"),\n+        Ended(\"end ok\"),\n+        CloseFailed(\"close failed\"),\n+        CancelFailed(\"cancel failed\");\n+\n+        final String status;\n+\n+        ProgressStep(final String status) {\n+            this.status = status;\n+        }\n \n-        return lraClient.startLRA(parentLRA, clientId, timeout, ChronoUnit.MILLIS);\n+        @Override\n+        public String toString() {\n+            return status;\n+        }\n     }\n \n-    private void resumeTransaction(URI lraId) {\n-        // nothing to do\n+    // list of steps (both successful and unsuccesful) performed so far by the request and response filter\n+    // and is used for error reporting\n+    private static class Progress {\n+        static EnumSet<ProgressStep> failures = EnumSet.of(\n+                ProgressStep.LeaveFailed,\n+                ProgressStep.StartFailed,\n+                ProgressStep.JoinFailed,\n+                ProgressStep.CloseFailed,\n+                ProgressStep.CancelFailed);\n+\n+        ProgressStep progress;\n+        String reason;\n+\n+        public Progress(ProgressStep progress, String reason) {\n+            this.progress = progress;\n+            this.reason = reason;\n+        }\n+\n+        public boolean ok() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "originalPosition": 494}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ3MzI5NQ==", "bodyText": "Why the ProgressStep#status is reported for success and not for the failure?", "url": "https://github.com/jbosstm/narayana/pull/1738#discussion_r537473295", "createdAt": "2020-12-07T12:37:19Z", "author": {"login": "ochaloup"}, "path": "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java", "diffHunk": "@@ -460,46 +575,149 @@ private boolean isJaxRsCancel(ContainerRequestContext requestContext, ContainerR\n         return false;\n     }\n \n-    private URI startLRA(URI parentLRA, Method method, Long timeout) {\n-        // timeout should already have been converted to milliseconds\n-        String clientId = method.getDeclaringClass().getName() + \"#\" + method.getName();\n+    // the request filter may perform multiple and in failure scenarios the LRA may be left in an ambiguous state:\n+    // the following structure is used to track progress so that such failures can be reported in the response\n+    // filter processing\n+    private enum ProgressStep {\n+        Left (\"leave succeeded\"),\n+        LeaveFailed(\"leave failed\"),\n+        Started(\"start ok\"),\n+        StartFailed(\"start failed\"),\n+        Joined(\"join succeeded\"),\n+        JoinFailed(\"join failed\"),\n+        Ended(\"end ok\"),\n+        CloseFailed(\"close failed\"),\n+        CancelFailed(\"cancel failed\");\n+\n+        final String status;\n+\n+        ProgressStep(final String status) {\n+            this.status = status;\n+        }\n \n-        return lraClient.startLRA(parentLRA, clientId, timeout, ChronoUnit.MILLIS);\n+        @Override\n+        public String toString() {\n+            return status;\n+        }\n     }\n \n-    private void resumeTransaction(URI lraId) {\n-        // nothing to do\n+    // list of steps (both successful and unsuccesful) performed so far by the request and response filter\n+    // and is used for error reporting\n+    private static class Progress {\n+        static EnumSet<ProgressStep> failures = EnumSet.of(\n+                ProgressStep.LeaveFailed,\n+                ProgressStep.StartFailed,\n+                ProgressStep.JoinFailed,\n+                ProgressStep.CloseFailed,\n+                ProgressStep.CancelFailed);\n+\n+        ProgressStep progress;\n+        String reason;\n+\n+        public Progress(ProgressStep progress, String reason) {\n+            this.progress = progress;\n+            this.reason = reason;\n+        }\n+\n+        public boolean ok() {\n+            return !failures.contains(progress);\n+        }\n     }\n \n-    private String getCompensatorId(URI lraId, UriInfo uriInfo, Long timeout) {\n-        Map<String, String> terminateURIs = NarayanaLRAClient.getTerminationUris(resourceInfo.getResourceClass(), uriInfo, timeout);\n+    // convert the list of steps carried out by the filters into a warning message\n+    private String processLRAOperationFailures(ArrayList<Progress> progress) {\n+        StringJoiner badOps = new StringJoiner(\", \");\n+        StringJoiner goodOps = new StringJoiner(\", \");\n+        StringBuffer code = new StringBuffer(\"-\");\n \n-        if (!terminateURIs.containsKey(\"Link\")) {\n-            throwGenericLRAException(lraId, Response.Status.BAD_REQUEST.getStatusCode(),\n-                    \"Missing complete or compensate annotations\");\n-        }\n+        progress.forEach(p -> {\n+            if (p.ok()) {\n+                code.insert(0, p.progress.ordinal());\n+                goodOps.add(String.format(\"%s (%s)\", p.progress.name(), p.progress.status));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "originalPosition": 514}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ3NTc1OA==", "bodyText": "Would not be clearer and faster not to concatenate the progress ops in case of succesful run (ie. the most probably much more often case than the failure)?\nChecking here for empy ops failure or similar, instead of checking the content of string of failureMesssage?", "url": "https://github.com/jbosstm/narayana/pull/1738#discussion_r537475758", "createdAt": "2020-12-07T12:41:32Z", "author": {"login": "ochaloup"}, "path": "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java", "diffHunk": "@@ -431,6 +529,23 @@ public void filter(ContainerRequestContext requestContext, ContainerResponseCont\n                         Response.Status.ACCEPTED.getStatusCode(),\n                         Response.Status.OK.getStatusCode());\n             }\n+\n+            /*\n+             * report any failed steps (ie if progress contains any failures) to the caller.\n+             * If either filter encountered a failure they may have completed partial actions and\n+             * we need tell the caller which steps failed and which ones succeeded. We use a\n+             * different warning code for each scenario:\n+             */\n+            if (progress != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "originalPosition": 427}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ3OTk0MQ==", "bodyText": "After a while of decoding I understand the idea here.\nI would use probably a format but it's a matter of taste as discussed elsewhere.\nI would rather ask here what happens when there are multiple failed (or successful) op codes. They seem to be appended without any delimiter, or not?\nIn fact I wonder what is the purpose of having these opcodes as part of the user readable failure message?", "url": "https://github.com/jbosstm/narayana/pull/1738#discussion_r537479941", "createdAt": "2020-12-07T12:47:51Z", "author": {"login": "ochaloup"}, "path": "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java", "diffHunk": "@@ -460,46 +575,149 @@ private boolean isJaxRsCancel(ContainerRequestContext requestContext, ContainerR\n         return false;\n     }\n \n-    private URI startLRA(URI parentLRA, Method method, Long timeout) {\n-        // timeout should already have been converted to milliseconds\n-        String clientId = method.getDeclaringClass().getName() + \"#\" + method.getName();\n+    // the request filter may perform multiple and in failure scenarios the LRA may be left in an ambiguous state:\n+    // the following structure is used to track progress so that such failures can be reported in the response\n+    // filter processing\n+    private enum ProgressStep {\n+        Left (\"leave succeeded\"),\n+        LeaveFailed(\"leave failed\"),\n+        Started(\"start ok\"),\n+        StartFailed(\"start failed\"),\n+        Joined(\"join succeeded\"),\n+        JoinFailed(\"join failed\"),\n+        Ended(\"end ok\"),\n+        CloseFailed(\"close failed\"),\n+        CancelFailed(\"cancel failed\");\n+\n+        final String status;\n+\n+        ProgressStep(final String status) {\n+            this.status = status;\n+        }\n \n-        return lraClient.startLRA(parentLRA, clientId, timeout, ChronoUnit.MILLIS);\n+        @Override\n+        public String toString() {\n+            return status;\n+        }\n     }\n \n-    private void resumeTransaction(URI lraId) {\n-        // nothing to do\n+    // list of steps (both successful and unsuccesful) performed so far by the request and response filter\n+    // and is used for error reporting\n+    private static class Progress {\n+        static EnumSet<ProgressStep> failures = EnumSet.of(\n+                ProgressStep.LeaveFailed,\n+                ProgressStep.StartFailed,\n+                ProgressStep.JoinFailed,\n+                ProgressStep.CloseFailed,\n+                ProgressStep.CancelFailed);\n+\n+        ProgressStep progress;\n+        String reason;\n+\n+        public Progress(ProgressStep progress, String reason) {\n+            this.progress = progress;\n+            this.reason = reason;\n+        }\n+\n+        public boolean ok() {\n+            return !failures.contains(progress);\n+        }\n     }\n \n-    private String getCompensatorId(URI lraId, UriInfo uriInfo, Long timeout) {\n-        Map<String, String> terminateURIs = NarayanaLRAClient.getTerminationUris(resourceInfo.getResourceClass(), uriInfo, timeout);\n+    // convert the list of steps carried out by the filters into a warning message\n+    private String processLRAOperationFailures(ArrayList<Progress> progress) {\n+        StringJoiner badOps = new StringJoiner(\", \");\n+        StringJoiner goodOps = new StringJoiner(\", \");\n+        StringBuffer code = new StringBuffer(\"-\");\n \n-        if (!terminateURIs.containsKey(\"Link\")) {\n-            throwGenericLRAException(lraId, Response.Status.BAD_REQUEST.getStatusCode(),\n-                    \"Missing complete or compensate annotations\");\n-        }\n+        progress.forEach(p -> {\n+            if (p.ok()) {\n+                code.insert(0, p.progress.ordinal());\n+                goodOps.add(String.format(\"%s (%s)\", p.progress.name(), p.progress.status));\n+            } else {\n+                code.append(p.progress.ordinal());\n+                badOps.add(String.format(\"%s (%s)\", p.progress.name(), p.reason));\n+            }\n+        });\n+\n+        /*\n+         * return a string which encodes the result:\n+         * <major code>-<failed op codes>-<successful op codes>: <details of failed ops> (<details of successful ops>)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "originalPosition": 523}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ4MTI1OQ==", "bodyText": "Why this check for null is needed when the updateProgress checks on null?", "url": "https://github.com/jbosstm/narayana/pull/1738#discussion_r537481259", "createdAt": "2020-12-07T12:50:00Z", "author": {"login": "ochaloup"}, "path": "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java", "diffHunk": "@@ -240,41 +286,65 @@ public void filter(ContainerRequestContext containerRequestContext) {\n \n                         // if there is an LRA present nest a new LRA under it\n                         suspendedLRA = incommingLRA;\n-                        lraTrace(suspendedLRA, \"ServerLRAFilter before: REQUIRED start new LRA\");\n-                        newLRA = lraId = startLRA(incommingLRA, method, timeout);\n+\n+                        if (progress == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "originalPosition": 185}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2OTEwMjgz", "url": "https://github.com/jbosstm/narayana/pull/1738#pullrequestreview-546910283", "createdAt": "2020-12-08T09:08:59Z", "commit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwOTowODo1OVrOIBOunA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMDowNzoxNlrOIBRW_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE2MDc5Ng==", "bodyText": "I'm not talking about the whole file. I refer to the .async or .put calls which are called at the client. There are some later in the PR and I think it would be nice to adjust them all to be in the same style - with the same indentation.", "url": "https://github.com/jbosstm/narayana/pull/1738#discussion_r538160796", "createdAt": "2020-12-08T09:08:59Z", "author": {"login": "ochaloup"}, "path": "rts/lra/client/src/main/java/io/narayana/lra/client/NarayanaLRAClient.java", "diffHunk": "@@ -370,14 +387,19 @@ public void leaveLRA(URI lraId, String body) throws WebApplicationException {\n             response = client.target(coordinatorUrl)\n                 .path(String.format(LEAVE_PATH, LRAConstants.getLRAUid(lraId)))\n                 .request()\n-                .put(Entity.text(body));\n+                    .async()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ1MzkyNg=="}, "originalCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE2NjY5Ng==", "bodyText": "Ok, I see, thanks. Then I assume this could be done in more Java way. We have exception handling and logging setup.\nWhen there is generated an Exception by throwGenericLRAException then we don't need a special logging when the exception has set the cause exception. Client may catch the exception and ignore it. There could be no logging at all.\nIf we think this is not exceptional occasion then the exception should not be thrown at all. The verbosity of the logging should be set by definition of the log level. This could be info and the stacktrace can be printed only for debug (ie. we don't need to add a special API for verbosity when Java manages this managed by logging levels).", "url": "https://github.com/jbosstm/narayana/pull/1738#discussion_r538166696", "createdAt": "2020-12-08T09:17:12Z", "author": {"login": "ochaloup"}, "path": "rts/lra/client/src/main/java/io/narayana/lra/client/NarayanaLRAClient.java", "diffHunk": "@@ -265,13 +287,17 @@ public URI startLRA(URI parentLRA, String clientID, Long timeout, ChronoUnit uni\n                 .queryParam(TIMELIMIT_PARAM_NAME, Duration.of(timeout, unit).toMillis())\n                 .queryParam(PARENT_LRA_PARAM_NAME, encodedParentLRA)\n                 .request()\n-                .post(null);\n+                .async()\n+                .post(null)\n+                .get(CLIENT_TIMEOUT, TimeUnit.SECONDS);\n \n             // validate the HTTP status code says an LRA resource was created\n             if (isUnexpectedResponseStatus(response, Response.Status.CREATED)) {\n                 String responseEntity = response.hasEntity() ? response.readEntity(String.class) : \"\";\n-                LRALogger.i18NLogger.error_lraCreationUnexpectedStatus(response.getStatus(), responseEntity);\n-                throwGenericLRAException(null, INTERNAL_SERVER_ERROR.getStatusCode(),\n+                if (verbose) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ1MjE0OA=="}, "originalCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE3MDU2OQ==", "bodyText": "And this could be one of them. I'm providing a feedback. If you consider not worthy for fixing it then ok.", "url": "https://github.com/jbosstm/narayana/pull/1738#discussion_r538170569", "createdAt": "2020-12-08T09:22:26Z", "author": {"login": "ochaloup"}, "path": "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java", "diffHunk": "@@ -460,46 +575,149 @@ private boolean isJaxRsCancel(ContainerRequestContext requestContext, ContainerR\n         return false;\n     }\n \n-    private URI startLRA(URI parentLRA, Method method, Long timeout) {\n-        // timeout should already have been converted to milliseconds\n-        String clientId = method.getDeclaringClass().getName() + \"#\" + method.getName();\n+    // the request filter may perform multiple and in failure scenarios the LRA may be left in an ambiguous state:\n+    // the following structure is used to track progress so that such failures can be reported in the response\n+    // filter processing\n+    private enum ProgressStep {\n+        Left (\"leave succeeded\"),\n+        LeaveFailed(\"leave failed\"),\n+        Started(\"start ok\"),\n+        StartFailed(\"start failed\"),\n+        Joined(\"join succeeded\"),\n+        JoinFailed(\"join failed\"),\n+        Ended(\"end ok\"),\n+        CloseFailed(\"close failed\"),\n+        CancelFailed(\"cancel failed\");\n+\n+        final String status;\n+\n+        ProgressStep(final String status) {\n+            this.status = status;\n+        }\n \n-        return lraClient.startLRA(parentLRA, clientId, timeout, ChronoUnit.MILLIS);\n+        @Override\n+        public String toString() {\n+            return status;\n+        }\n     }\n \n-    private void resumeTransaction(URI lraId) {\n-        // nothing to do\n+    // list of steps (both successful and unsuccesful) performed so far by the request and response filter\n+    // and is used for error reporting\n+    private static class Progress {\n+        static EnumSet<ProgressStep> failures = EnumSet.of(\n+                ProgressStep.LeaveFailed,\n+                ProgressStep.StartFailed,\n+                ProgressStep.JoinFailed,\n+                ProgressStep.CloseFailed,\n+                ProgressStep.CancelFailed);\n+\n+        ProgressStep progress;\n+        String reason;\n+\n+        public Progress(ProgressStep progress, String reason) {\n+            this.progress = progress;\n+            this.reason = reason;\n+        }\n+\n+        public boolean ok() {\n+            return !failures.contains(progress);\n+        }\n     }\n \n-    private String getCompensatorId(URI lraId, UriInfo uriInfo, Long timeout) {\n-        Map<String, String> terminateURIs = NarayanaLRAClient.getTerminationUris(resourceInfo.getResourceClass(), uriInfo, timeout);\n+    // convert the list of steps carried out by the filters into a warning message\n+    private String processLRAOperationFailures(ArrayList<Progress> progress) {\n+        StringJoiner badOps = new StringJoiner(\", \");\n+        StringJoiner goodOps = new StringJoiner(\", \");\n+        StringBuffer code = new StringBuffer(\"-\");\n \n-        if (!terminateURIs.containsKey(\"Link\")) {\n-            throwGenericLRAException(lraId, Response.Status.BAD_REQUEST.getStatusCode(),\n-                    \"Missing complete or compensate annotations\");\n-        }\n+        progress.forEach(p -> {\n+            if (p.ok()) {\n+                code.insert(0, p.progress.ordinal());\n+                goodOps.add(String.format(\"%s (%s)\", p.progress.name(), p.progress.status));\n+            } else {\n+                code.append(p.progress.ordinal());\n+                badOps.add(String.format(\"%s (%s)\", p.progress.name(), p.reason));\n+            }\n+        });\n+\n+        /*\n+         * return a string which encodes the result:\n+         * <major code>-<failed op codes>-<successful op codes>: <details of failed ops> (<details of successful ops>)\n+         *\n+         * where\n+         *\n+         * <major code>: corresponds to the id of the message in the logs\n+         * <failed op codes>: each digit corresponds to the enum ordinal calue of the ProgressStep enum value that was successful\n+         * <successful op codes>: each digit corresponds to the enum ordinal calue of the ProgressStep enum value that failed\n+         * <details of failed ops>: comma separated list of failed operation details \"<op name> (<exception message>)\"\n+         * <details of successful ops>: comma separated list of successful operation details \"<op name> (<op description>)\"\n+         */\n+\n+        return badOps.length() != 0 ? String.format(\"%d-%s: %s (%s)\", i18nMessageCode, code, badOps, goodOps) : null;\n+    }\n \n-        return terminateURIs.get(\"Link\");\n+    private boolean progressDoesNotContain(ArrayList<Progress> progress, ProgressStep step) {\n+        return progress.stream().noneMatch(p -> p.progress == step);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ2ODAxNA=="}, "originalCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "originalPosition": 539}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE3MTcyNQ==", "bodyText": "and \"leave ok\" when \"ok\" is taken", "url": "https://github.com/jbosstm/narayana/pull/1738#discussion_r538171725", "createdAt": "2020-12-08T09:23:55Z", "author": {"login": "ochaloup"}, "path": "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java", "diffHunk": "@@ -460,46 +575,149 @@ private boolean isJaxRsCancel(ContainerRequestContext requestContext, ContainerR\n         return false;\n     }\n \n-    private URI startLRA(URI parentLRA, Method method, Long timeout) {\n-        // timeout should already have been converted to milliseconds\n-        String clientId = method.getDeclaringClass().getName() + \"#\" + method.getName();\n+    // the request filter may perform multiple and in failure scenarios the LRA may be left in an ambiguous state:\n+    // the following structure is used to track progress so that such failures can be reported in the response\n+    // filter processing\n+    private enum ProgressStep {\n+        Left (\"leave succeeded\"),\n+        LeaveFailed(\"leave failed\"),\n+        Started(\"start ok\"),\n+        StartFailed(\"start failed\"),\n+        Joined(\"join succeeded\"),\n+        JoinFailed(\"join failed\"),\n+        Ended(\"end ok\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ2NjYxNw=="}, "originalCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "originalPosition": 457}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE3NjYyNQ==", "bodyText": "Ok, the point is to correlate the response with what is in logs.\nI haven't seen this approach so far thus I wonder. I assume the same correlation can be done with time and the message content. If you consider a benefit in printing the global log identifier, ok.\nTwo questions\n\nShould not be the id linked with some constants on both places to be better coupled to each other?\nIf the point is correlation would not be better to correlate directly the particular response and the log message instance? Not having some general global log id that could be correlated with other means but having identifier of the message which will be \"unique\" overall?", "url": "https://github.com/jbosstm/narayana/pull/1738#discussion_r538176625", "createdAt": "2020-12-08T09:30:37Z", "author": {"login": "ochaloup"}, "path": "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java", "diffHunk": "@@ -78,10 +83,13 @@\n     private static final String TERMINAL_LRA_PROP = \"terminateLRA\";\n     private static final String SUSPENDED_LRA_PROP = \"suspendLRA\";\n     private static final String NEW_LRA_PROP = \"newLRA\";\n+    private static final String ABORT_WITH_PROP = \"abortWith\";\n \n     private static final Pattern START_END_QUOTES_PATTERN = Pattern.compile(\"^\\\"|\\\"$\");\n     private static final long DEFAULT_TIMEOUT_MILLIS = 0L;\n-\n+    private static final String JOIN = \"join\";\n+    // i18nMessageCode corresponding to lraI18NLogger#warn_LRAStatusInDoubt\n+    private static final int i18nMessageCode = 25145;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ1ODQ3Ng=="}, "originalCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE3ODg0MA==", "bodyText": "I see. I have additional question of matter of preference.\nWould not be easier to initiate it at start (https://github.com/jbosstm/narayana/pull/1738/files#diff-0b58c3a08c0d4f3a8f3953db76f78e21ca70325b035a36779d0739195444faf4R139) instead?", "url": "https://github.com/jbosstm/narayana/pull/1738#discussion_r538178840", "createdAt": "2020-12-08T09:33:43Z", "author": {"login": "ochaloup"}, "path": "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java", "diffHunk": "@@ -240,41 +286,65 @@ public void filter(ContainerRequestContext containerRequestContext) {\n \n                         // if there is an LRA present nest a new LRA under it\n                         suspendedLRA = incommingLRA;\n-                        lraTrace(suspendedLRA, \"ServerLRAFilter before: REQUIRED start new LRA\");\n-                        newLRA = lraId = startLRA(incommingLRA, method, timeout);\n+\n+                        if (progress == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ4MTI1OQ=="}, "originalCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE4MDQyOA==", "bodyText": "Oh, sorry. I referred wrong class. I should say other method of the ServerLRAFilter.\nI'm talking about code style. My question of the different style was in reference to this method: https://github.com/jbosstm/narayana/pull/1738/files#diff-0b58c3a08c0d4f3a8f3953db76f78e21ca70325b035a36779d0739195444faf4R704", "url": "https://github.com/jbosstm/narayana/pull/1738#discussion_r538180428", "createdAt": "2020-12-08T09:35:58Z", "author": {"login": "ochaloup"}, "path": "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java", "diffHunk": "@@ -385,10 +460,24 @@ public void filter(ContainerRequestContext requestContext, ContainerResponseCont\n         try {\n             if (current != null && isCancel) {\n                 try {\n-                    lraClient.cancelLRA(current);\n+                    // do not attempt to cancel if the request filter tried but failed to start a new LRA\n+                    if (progress == null || progressDoesNotContain(progress, ProgressStep.StartFailed)) {\n+                        lraClient.cancelLRA(current);\n+                        progress = updateProgress(progress, ProgressStep.Ended, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ2MzU2NA=="}, "originalCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "originalPosition": 370}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE4MjU3Mw==", "bodyText": "It could be good to consider it during design phase as well. But ok.", "url": "https://github.com/jbosstm/narayana/pull/1738#discussion_r538182573", "createdAt": "2020-12-08T09:38:57Z", "author": {"login": "ochaloup"}, "path": "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java", "diffHunk": "@@ -431,6 +529,23 @@ public void filter(ContainerRequestContext requestContext, ContainerResponseCont\n                         Response.Status.ACCEPTED.getStatusCode(),\n                         Response.Status.OK.getStatusCode());\n             }\n+\n+            /*\n+             * report any failed steps (ie if progress contains any failures) to the caller.\n+             * If either filter encountered a failure they may have completed partial actions and\n+             * we need tell the caller which steps failed and which ones succeeded. We use a\n+             * different warning code for each scenario:\n+             */\n+            if (progress != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ3NTc1OA=="}, "originalCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "originalPosition": 427}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE4NTE0NA==", "bodyText": "This was a regular question, nothing about perfection. I want to understand the code from the design perspective.\nI understand that it's intended that the Progress to have this responsibility. That's fine by me.", "url": "https://github.com/jbosstm/narayana/pull/1738#discussion_r538185144", "createdAt": "2020-12-08T09:42:11Z", "author": {"login": "ochaloup"}, "path": "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java", "diffHunk": "@@ -460,46 +575,149 @@ private boolean isJaxRsCancel(ContainerRequestContext requestContext, ContainerR\n         return false;\n     }\n \n-    private URI startLRA(URI parentLRA, Method method, Long timeout) {\n-        // timeout should already have been converted to milliseconds\n-        String clientId = method.getDeclaringClass().getName() + \"#\" + method.getName();\n+    // the request filter may perform multiple and in failure scenarios the LRA may be left in an ambiguous state:\n+    // the following structure is used to track progress so that such failures can be reported in the response\n+    // filter processing\n+    private enum ProgressStep {\n+        Left (\"leave succeeded\"),\n+        LeaveFailed(\"leave failed\"),\n+        Started(\"start ok\"),\n+        StartFailed(\"start failed\"),\n+        Joined(\"join succeeded\"),\n+        JoinFailed(\"join failed\"),\n+        Ended(\"end ok\"),\n+        CloseFailed(\"close failed\"),\n+        CancelFailed(\"cancel failed\");\n+\n+        final String status;\n+\n+        ProgressStep(final String status) {\n+            this.status = status;\n+        }\n \n-        return lraClient.startLRA(parentLRA, clientId, timeout, ChronoUnit.MILLIS);\n+        @Override\n+        public String toString() {\n+            return status;\n+        }\n     }\n \n-    private void resumeTransaction(URI lraId) {\n-        // nothing to do\n+    // list of steps (both successful and unsuccesful) performed so far by the request and response filter\n+    // and is used for error reporting\n+    private static class Progress {\n+        static EnumSet<ProgressStep> failures = EnumSet.of(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ2OTg0Mg=="}, "originalCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "originalPosition": 479}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE4NzM5NA==", "bodyText": "We can discuss it with the other person if he finds some part of code misleading.\nI don't talk about my private preference, I talk about using the same terms for the same thing.\nWhen the ok phrase are going to be used in other places then let's go with \"ok\".", "url": "https://github.com/jbosstm/narayana/pull/1738#discussion_r538187394", "createdAt": "2020-12-08T09:44:47Z", "author": {"login": "ochaloup"}, "path": "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java", "diffHunk": "@@ -460,46 +575,149 @@ private boolean isJaxRsCancel(ContainerRequestContext requestContext, ContainerR\n         return false;\n     }\n \n-    private URI startLRA(URI parentLRA, Method method, Long timeout) {\n-        // timeout should already have been converted to milliseconds\n-        String clientId = method.getDeclaringClass().getName() + \"#\" + method.getName();\n+    // the request filter may perform multiple and in failure scenarios the LRA may be left in an ambiguous state:\n+    // the following structure is used to track progress so that such failures can be reported in the response\n+    // filter processing\n+    private enum ProgressStep {\n+        Left (\"leave succeeded\"),\n+        LeaveFailed(\"leave failed\"),\n+        Started(\"start ok\"),\n+        StartFailed(\"start failed\"),\n+        Joined(\"join succeeded\"),\n+        JoinFailed(\"join failed\"),\n+        Ended(\"end ok\"),\n+        CloseFailed(\"close failed\"),\n+        CancelFailed(\"cancel failed\");\n+\n+        final String status;\n+\n+        ProgressStep(final String status) {\n+            this.status = status;\n+        }\n \n-        return lraClient.startLRA(parentLRA, clientId, timeout, ChronoUnit.MILLIS);\n+        @Override\n+        public String toString() {\n+            return status;\n+        }\n     }\n \n-    private void resumeTransaction(URI lraId) {\n-        // nothing to do\n+    // list of steps (both successful and unsuccesful) performed so far by the request and response filter\n+    // and is used for error reporting\n+    private static class Progress {\n+        static EnumSet<ProgressStep> failures = EnumSet.of(\n+                ProgressStep.LeaveFailed,\n+                ProgressStep.StartFailed,\n+                ProgressStep.JoinFailed,\n+                ProgressStep.CloseFailed,\n+                ProgressStep.CancelFailed);\n+\n+        ProgressStep progress;\n+        String reason;\n+\n+        public Progress(ProgressStep progress, String reason) {\n+            this.progress = progress;\n+            this.reason = reason;\n+        }\n+\n+        public boolean ok() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ3MTA3OQ=="}, "originalCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "originalPosition": 494}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE4ODA1Nw==", "bodyText": "Ok, thanks for clarification.", "url": "https://github.com/jbosstm/narayana/pull/1738#discussion_r538188057", "createdAt": "2020-12-08T09:45:40Z", "author": {"login": "ochaloup"}, "path": "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java", "diffHunk": "@@ -460,46 +575,149 @@ private boolean isJaxRsCancel(ContainerRequestContext requestContext, ContainerR\n         return false;\n     }\n \n-    private URI startLRA(URI parentLRA, Method method, Long timeout) {\n-        // timeout should already have been converted to milliseconds\n-        String clientId = method.getDeclaringClass().getName() + \"#\" + method.getName();\n+    // the request filter may perform multiple and in failure scenarios the LRA may be left in an ambiguous state:\n+    // the following structure is used to track progress so that such failures can be reported in the response\n+    // filter processing\n+    private enum ProgressStep {\n+        Left (\"leave succeeded\"),\n+        LeaveFailed(\"leave failed\"),\n+        Started(\"start ok\"),\n+        StartFailed(\"start failed\"),\n+        Joined(\"join succeeded\"),\n+        JoinFailed(\"join failed\"),\n+        Ended(\"end ok\"),\n+        CloseFailed(\"close failed\"),\n+        CancelFailed(\"cancel failed\");\n+\n+        final String status;\n+\n+        ProgressStep(final String status) {\n+            this.status = status;\n+        }\n \n-        return lraClient.startLRA(parentLRA, clientId, timeout, ChronoUnit.MILLIS);\n+        @Override\n+        public String toString() {\n+            return status;\n+        }\n     }\n \n-    private void resumeTransaction(URI lraId) {\n-        // nothing to do\n+    // list of steps (both successful and unsuccesful) performed so far by the request and response filter\n+    // and is used for error reporting\n+    private static class Progress {\n+        static EnumSet<ProgressStep> failures = EnumSet.of(\n+                ProgressStep.LeaveFailed,\n+                ProgressStep.StartFailed,\n+                ProgressStep.JoinFailed,\n+                ProgressStep.CloseFailed,\n+                ProgressStep.CancelFailed);\n+\n+        ProgressStep progress;\n+        String reason;\n+\n+        public Progress(ProgressStep progress, String reason) {\n+            this.progress = progress;\n+            this.reason = reason;\n+        }\n+\n+        public boolean ok() {\n+            return !failures.contains(progress);\n+        }\n     }\n \n-    private String getCompensatorId(URI lraId, UriInfo uriInfo, Long timeout) {\n-        Map<String, String> terminateURIs = NarayanaLRAClient.getTerminationUris(resourceInfo.getResourceClass(), uriInfo, timeout);\n+    // convert the list of steps carried out by the filters into a warning message\n+    private String processLRAOperationFailures(ArrayList<Progress> progress) {\n+        StringJoiner badOps = new StringJoiner(\", \");\n+        StringJoiner goodOps = new StringJoiner(\", \");\n+        StringBuffer code = new StringBuffer(\"-\");\n \n-        if (!terminateURIs.containsKey(\"Link\")) {\n-            throwGenericLRAException(lraId, Response.Status.BAD_REQUEST.getStatusCode(),\n-                    \"Missing complete or compensate annotations\");\n-        }\n+        progress.forEach(p -> {\n+            if (p.ok()) {\n+                code.insert(0, p.progress.ordinal());\n+                goodOps.add(String.format(\"%s (%s)\", p.progress.name(), p.progress.status));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ3MzI5NQ=="}, "originalCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "originalPosition": 514}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE5Nzk2MQ==", "bodyText": "I see, thanks for clarification about the StringJoiner.\nThese type of changes could be difficult to done if this is a feature which is expected to be used by application logic and when some application starts to depend on it.\nMy trouble is that I don't understand well the usecase to be able to consider other possibilities. If there is some maybe we can discuss other approaches.\nIf you consider this the best for LRA design, ok.", "url": "https://github.com/jbosstm/narayana/pull/1738#discussion_r538197961", "createdAt": "2020-12-08T09:59:03Z", "author": {"login": "ochaloup"}, "path": "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java", "diffHunk": "@@ -460,46 +575,149 @@ private boolean isJaxRsCancel(ContainerRequestContext requestContext, ContainerR\n         return false;\n     }\n \n-    private URI startLRA(URI parentLRA, Method method, Long timeout) {\n-        // timeout should already have been converted to milliseconds\n-        String clientId = method.getDeclaringClass().getName() + \"#\" + method.getName();\n+    // the request filter may perform multiple and in failure scenarios the LRA may be left in an ambiguous state:\n+    // the following structure is used to track progress so that such failures can be reported in the response\n+    // filter processing\n+    private enum ProgressStep {\n+        Left (\"leave succeeded\"),\n+        LeaveFailed(\"leave failed\"),\n+        Started(\"start ok\"),\n+        StartFailed(\"start failed\"),\n+        Joined(\"join succeeded\"),\n+        JoinFailed(\"join failed\"),\n+        Ended(\"end ok\"),\n+        CloseFailed(\"close failed\"),\n+        CancelFailed(\"cancel failed\");\n+\n+        final String status;\n+\n+        ProgressStep(final String status) {\n+            this.status = status;\n+        }\n \n-        return lraClient.startLRA(parentLRA, clientId, timeout, ChronoUnit.MILLIS);\n+        @Override\n+        public String toString() {\n+            return status;\n+        }\n     }\n \n-    private void resumeTransaction(URI lraId) {\n-        // nothing to do\n+    // list of steps (both successful and unsuccesful) performed so far by the request and response filter\n+    // and is used for error reporting\n+    private static class Progress {\n+        static EnumSet<ProgressStep> failures = EnumSet.of(\n+                ProgressStep.LeaveFailed,\n+                ProgressStep.StartFailed,\n+                ProgressStep.JoinFailed,\n+                ProgressStep.CloseFailed,\n+                ProgressStep.CancelFailed);\n+\n+        ProgressStep progress;\n+        String reason;\n+\n+        public Progress(ProgressStep progress, String reason) {\n+            this.progress = progress;\n+            this.reason = reason;\n+        }\n+\n+        public boolean ok() {\n+            return !failures.contains(progress);\n+        }\n     }\n \n-    private String getCompensatorId(URI lraId, UriInfo uriInfo, Long timeout) {\n-        Map<String, String> terminateURIs = NarayanaLRAClient.getTerminationUris(resourceInfo.getResourceClass(), uriInfo, timeout);\n+    // convert the list of steps carried out by the filters into a warning message\n+    private String processLRAOperationFailures(ArrayList<Progress> progress) {\n+        StringJoiner badOps = new StringJoiner(\", \");\n+        StringJoiner goodOps = new StringJoiner(\", \");\n+        StringBuffer code = new StringBuffer(\"-\");\n \n-        if (!terminateURIs.containsKey(\"Link\")) {\n-            throwGenericLRAException(lraId, Response.Status.BAD_REQUEST.getStatusCode(),\n-                    \"Missing complete or compensate annotations\");\n-        }\n+        progress.forEach(p -> {\n+            if (p.ok()) {\n+                code.insert(0, p.progress.ordinal());\n+                goodOps.add(String.format(\"%s (%s)\", p.progress.name(), p.progress.status));\n+            } else {\n+                code.append(p.progress.ordinal());\n+                badOps.add(String.format(\"%s (%s)\", p.progress.name(), p.reason));\n+            }\n+        });\n+\n+        /*\n+         * return a string which encodes the result:\n+         * <major code>-<failed op codes>-<successful op codes>: <details of failed ops> (<details of successful ops>)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ3OTk0MQ=="}, "originalCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "originalPosition": 523}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODIwMzkwMg==", "bodyText": "I don't agree. The ordinal is used here for definition of the op code - they are reported to user as a code with significance of particular state.\nThe main reason is maitanance - enum constant reordering means troubles, op codes are not unique as any other constant enum will need to be used the values will be same... Check e.g. Effective Java from Joshua Bloch, Item 35.", "url": "https://github.com/jbosstm/narayana/pull/1738#discussion_r538203902", "createdAt": "2020-12-08T10:07:16Z", "author": {"login": "ochaloup"}, "path": "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java", "diffHunk": "@@ -460,46 +575,149 @@ private boolean isJaxRsCancel(ContainerRequestContext requestContext, ContainerR\n         return false;\n     }\n \n-    private URI startLRA(URI parentLRA, Method method, Long timeout) {\n-        // timeout should already have been converted to milliseconds\n-        String clientId = method.getDeclaringClass().getName() + \"#\" + method.getName();\n+    // the request filter may perform multiple and in failure scenarios the LRA may be left in an ambiguous state:\n+    // the following structure is used to track progress so that such failures can be reported in the response\n+    // filter processing\n+    private enum ProgressStep {\n+        Left (\"leave succeeded\"),\n+        LeaveFailed(\"leave failed\"),\n+        Started(\"start ok\"),\n+        StartFailed(\"start failed\"),\n+        Joined(\"join succeeded\"),\n+        JoinFailed(\"join failed\"),\n+        Ended(\"end ok\"),\n+        CloseFailed(\"close failed\"),\n+        CancelFailed(\"cancel failed\");\n+\n+        final String status;\n+\n+        ProgressStep(final String status) {\n+            this.status = status;\n+        }\n \n-        return lraClient.startLRA(parentLRA, clientId, timeout, ChronoUnit.MILLIS);\n+        @Override\n+        public String toString() {\n+            return status;\n+        }\n     }\n \n-    private void resumeTransaction(URI lraId) {\n-        // nothing to do\n+    // list of steps (both successful and unsuccesful) performed so far by the request and response filter\n+    // and is used for error reporting\n+    private static class Progress {\n+        static EnumSet<ProgressStep> failures = EnumSet.of(\n+                ProgressStep.LeaveFailed,\n+                ProgressStep.StartFailed,\n+                ProgressStep.JoinFailed,\n+                ProgressStep.CloseFailed,\n+                ProgressStep.CancelFailed);\n+\n+        ProgressStep progress;\n+        String reason;\n+\n+        public Progress(ProgressStep progress, String reason) {\n+            this.progress = progress;\n+            this.reason = reason;\n+        }\n+\n+        public boolean ok() {\n+            return !failures.contains(progress);\n+        }\n     }\n \n-    private String getCompensatorId(URI lraId, UriInfo uriInfo, Long timeout) {\n-        Map<String, String> terminateURIs = NarayanaLRAClient.getTerminationUris(resourceInfo.getResourceClass(), uriInfo, timeout);\n+    // convert the list of steps carried out by the filters into a warning message\n+    private String processLRAOperationFailures(ArrayList<Progress> progress) {\n+        StringJoiner badOps = new StringJoiner(\", \");\n+        StringJoiner goodOps = new StringJoiner(\", \");\n+        StringBuffer code = new StringBuffer(\"-\");\n \n-        if (!terminateURIs.containsKey(\"Link\")) {\n-            throwGenericLRAException(lraId, Response.Status.BAD_REQUEST.getStatusCode(),\n-                    \"Missing complete or compensate annotations\");\n-        }\n+        progress.forEach(p -> {\n+            if (p.ok()) {\n+                code.insert(0, p.progress.ordinal());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ2NTI4Nw=="}, "originalCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "originalPosition": 513}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MzAzNTE0", "url": "https://github.com/jbosstm/narayana/pull/1738#pullrequestreview-548303514", "createdAt": "2020-12-09T15:29:33Z", "commit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNToyOTozM1rOICamlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNTo1NzoyMVrOICcFUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQwMzkyNA==", "bodyText": "Ok, I would design the API differently.", "url": "https://github.com/jbosstm/narayana/pull/1738#discussion_r539403924", "createdAt": "2020-12-09T15:29:33Z", "author": {"login": "ochaloup"}, "path": "rts/lra/client/src/main/java/io/narayana/lra/client/NarayanaLRAClient.java", "diffHunk": "@@ -265,13 +287,17 @@ public URI startLRA(URI parentLRA, String clientID, Long timeout, ChronoUnit uni\n                 .queryParam(TIMELIMIT_PARAM_NAME, Duration.of(timeout, unit).toMillis())\n                 .queryParam(PARENT_LRA_PARAM_NAME, encodedParentLRA)\n                 .request()\n-                .post(null);\n+                .async()\n+                .post(null)\n+                .get(CLIENT_TIMEOUT, TimeUnit.SECONDS);\n \n             // validate the HTTP status code says an LRA resource was created\n             if (isUnexpectedResponseStatus(response, Response.Status.CREATED)) {\n                 String responseEntity = response.hasEntity() ? response.readEntity(String.class) : \"\";\n-                LRALogger.i18NLogger.error_lraCreationUnexpectedStatus(response.getStatus(), responseEntity);\n-                throwGenericLRAException(null, INTERNAL_SERVER_ERROR.getStatusCode(),\n+                if (verbose) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ1MjE0OA=="}, "originalCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQwNDcyOQ==", "bodyText": "I can't find any place where the formatting diverges now but if it's so, still the PR should not be adding more divergence.", "url": "https://github.com/jbosstm/narayana/pull/1738#discussion_r539404729", "createdAt": "2020-12-09T15:30:28Z", "author": {"login": "ochaloup"}, "path": "rts/lra/client/src/main/java/io/narayana/lra/client/NarayanaLRAClient.java", "diffHunk": "@@ -370,14 +387,19 @@ public void leaveLRA(URI lraId, String body) throws WebApplicationException {\n             response = client.target(coordinatorUrl)\n                 .path(String.format(LEAVE_PATH, LRAConstants.getLRAUid(lraId)))\n                 .request()\n-                .put(Entity.text(body));\n+                    .async()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ1MzkyNg=="}, "originalCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQwNzY1Ng==", "bodyText": "I see I was interested what the correlation is expected to be used for.\nFrom that I'm not following what is the benefit of adding the log error code to client response. But if there is then ok.", "url": "https://github.com/jbosstm/narayana/pull/1738#discussion_r539407656", "createdAt": "2020-12-09T15:33:55Z", "author": {"login": "ochaloup"}, "path": "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java", "diffHunk": "@@ -78,10 +83,13 @@\n     private static final String TERMINAL_LRA_PROP = \"terminateLRA\";\n     private static final String SUSPENDED_LRA_PROP = \"suspendLRA\";\n     private static final String NEW_LRA_PROP = \"newLRA\";\n+    private static final String ABORT_WITH_PROP = \"abortWith\";\n \n     private static final Pattern START_END_QUOTES_PATTERN = Pattern.compile(\"^\\\"|\\\"$\");\n     private static final long DEFAULT_TIMEOUT_MILLIS = 0L;\n-\n+    private static final String JOIN = \"join\";\n+    // i18nMessageCode corresponding to lraI18NLogger#warn_LRAStatusInDoubt\n+    private static final int i18nMessageCode = 25145;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ1ODQ3Ng=="}, "originalCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQwOTA3OA==", "bodyText": "Okay...", "url": "https://github.com/jbosstm/narayana/pull/1738#discussion_r539409078", "createdAt": "2020-12-09T15:35:35Z", "author": {"login": "ochaloup"}, "path": "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java", "diffHunk": "@@ -240,41 +286,65 @@ public void filter(ContainerRequestContext containerRequestContext) {\n \n                         // if there is an LRA present nest a new LRA under it\n                         suspendedLRA = incommingLRA;\n-                        lraTrace(suspendedLRA, \"ServerLRAFilter before: REQUIRED start new LRA\");\n-                        newLRA = lraId = startLRA(incommingLRA, method, timeout);\n+\n+                        if (progress == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ4MTI1OQ=="}, "originalCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQxNjc1MQ==", "bodyText": "No, here I'm not talking about the coding style. I'm talking to use the same way of method call in the code of this PR. Once it's updateProgress(progres, ...) while in a moment in the same PR it's progress = updateProgress(progress, ...). I'm advocating here the consistency of code snippets in the PR code. Let's leave it as it is.\nAnd, I'm not complaining about anything in any of my comments. I'm discussing the PR, trying to understand the purpose and find a ways how to improve it.", "url": "https://github.com/jbosstm/narayana/pull/1738#discussion_r539416751", "createdAt": "2020-12-09T15:44:22Z", "author": {"login": "ochaloup"}, "path": "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java", "diffHunk": "@@ -385,10 +460,24 @@ public void filter(ContainerRequestContext requestContext, ContainerResponseCont\n         try {\n             if (current != null && isCancel) {\n                 try {\n-                    lraClient.cancelLRA(current);\n+                    // do not attempt to cancel if the request filter tried but failed to start a new LRA\n+                    if (progress == null || progressDoesNotContain(progress, ProgressStep.StartFailed)) {\n+                        lraClient.cancelLRA(current);\n+                        progress = updateProgress(progress, ProgressStep.Ended, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ2MzU2NA=="}, "originalCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "originalPosition": 370}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQyMDc0Nw==", "bodyText": "Anything what we do is subjective. I'm advocating the recommended sw practices for naming in this comment. There is no guide only recommendations in this are (e.g. Clean Code - Pick One Word per Concept).\nWhen you feel differently I'm not going to insist on this.", "url": "https://github.com/jbosstm/narayana/pull/1738#discussion_r539420747", "createdAt": "2020-12-09T15:48:55Z", "author": {"login": "ochaloup"}, "path": "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java", "diffHunk": "@@ -460,46 +575,149 @@ private boolean isJaxRsCancel(ContainerRequestContext requestContext, ContainerR\n         return false;\n     }\n \n-    private URI startLRA(URI parentLRA, Method method, Long timeout) {\n-        // timeout should already have been converted to milliseconds\n-        String clientId = method.getDeclaringClass().getName() + \"#\" + method.getName();\n+    // the request filter may perform multiple and in failure scenarios the LRA may be left in an ambiguous state:\n+    // the following structure is used to track progress so that such failures can be reported in the response\n+    // filter processing\n+    private enum ProgressStep {\n+        Left (\"leave succeeded\"),\n+        LeaveFailed(\"leave failed\"),\n+        Started(\"start ok\"),\n+        StartFailed(\"start failed\"),\n+        Joined(\"join succeeded\"),\n+        JoinFailed(\"join failed\"),\n+        Ended(\"end ok\"),\n+        CloseFailed(\"close failed\"),\n+        CancelFailed(\"cancel failed\");\n+\n+        final String status;\n+\n+        ProgressStep(final String status) {\n+            this.status = status;\n+        }\n \n-        return lraClient.startLRA(parentLRA, clientId, timeout, ChronoUnit.MILLIS);\n+        @Override\n+        public String toString() {\n+            return status;\n+        }\n     }\n \n-    private void resumeTransaction(URI lraId) {\n-        // nothing to do\n+    // list of steps (both successful and unsuccesful) performed so far by the request and response filter\n+    // and is used for error reporting\n+    private static class Progress {\n+        static EnumSet<ProgressStep> failures = EnumSet.of(\n+                ProgressStep.LeaveFailed,\n+                ProgressStep.StartFailed,\n+                ProgressStep.JoinFailed,\n+                ProgressStep.CloseFailed,\n+                ProgressStep.CancelFailed);\n+\n+        ProgressStep progress;\n+        String reason;\n+\n+        public Progress(ProgressStep progress, String reason) {\n+            this.progress = progress;\n+            this.reason = reason;\n+        }\n+\n+        public boolean ok() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ3MTA3OQ=="}, "originalCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "originalPosition": 494}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQyODE3Nw==", "bodyText": "This change defines an API and as such it's good to be topic of a discussion.\nNever mind, I'm resolving this conversation thread.", "url": "https://github.com/jbosstm/narayana/pull/1738#discussion_r539428177", "createdAt": "2020-12-09T15:57:21Z", "author": {"login": "ochaloup"}, "path": "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java", "diffHunk": "@@ -460,46 +575,149 @@ private boolean isJaxRsCancel(ContainerRequestContext requestContext, ContainerR\n         return false;\n     }\n \n-    private URI startLRA(URI parentLRA, Method method, Long timeout) {\n-        // timeout should already have been converted to milliseconds\n-        String clientId = method.getDeclaringClass().getName() + \"#\" + method.getName();\n+    // the request filter may perform multiple and in failure scenarios the LRA may be left in an ambiguous state:\n+    // the following structure is used to track progress so that such failures can be reported in the response\n+    // filter processing\n+    private enum ProgressStep {\n+        Left (\"leave succeeded\"),\n+        LeaveFailed(\"leave failed\"),\n+        Started(\"start ok\"),\n+        StartFailed(\"start failed\"),\n+        Joined(\"join succeeded\"),\n+        JoinFailed(\"join failed\"),\n+        Ended(\"end ok\"),\n+        CloseFailed(\"close failed\"),\n+        CancelFailed(\"cancel failed\");\n+\n+        final String status;\n+\n+        ProgressStep(final String status) {\n+            this.status = status;\n+        }\n \n-        return lraClient.startLRA(parentLRA, clientId, timeout, ChronoUnit.MILLIS);\n+        @Override\n+        public String toString() {\n+            return status;\n+        }\n     }\n \n-    private void resumeTransaction(URI lraId) {\n-        // nothing to do\n+    // list of steps (both successful and unsuccesful) performed so far by the request and response filter\n+    // and is used for error reporting\n+    private static class Progress {\n+        static EnumSet<ProgressStep> failures = EnumSet.of(\n+                ProgressStep.LeaveFailed,\n+                ProgressStep.StartFailed,\n+                ProgressStep.JoinFailed,\n+                ProgressStep.CloseFailed,\n+                ProgressStep.CancelFailed);\n+\n+        ProgressStep progress;\n+        String reason;\n+\n+        public Progress(ProgressStep progress, String reason) {\n+            this.progress = progress;\n+            this.reason = reason;\n+        }\n+\n+        public boolean ok() {\n+            return !failures.contains(progress);\n+        }\n     }\n \n-    private String getCompensatorId(URI lraId, UriInfo uriInfo, Long timeout) {\n-        Map<String, String> terminateURIs = NarayanaLRAClient.getTerminationUris(resourceInfo.getResourceClass(), uriInfo, timeout);\n+    // convert the list of steps carried out by the filters into a warning message\n+    private String processLRAOperationFailures(ArrayList<Progress> progress) {\n+        StringJoiner badOps = new StringJoiner(\", \");\n+        StringJoiner goodOps = new StringJoiner(\", \");\n+        StringBuffer code = new StringBuffer(\"-\");\n \n-        if (!terminateURIs.containsKey(\"Link\")) {\n-            throwGenericLRAException(lraId, Response.Status.BAD_REQUEST.getStatusCode(),\n-                    \"Missing complete or compensate annotations\");\n-        }\n+        progress.forEach(p -> {\n+            if (p.ok()) {\n+                code.insert(0, p.progress.ordinal());\n+                goodOps.add(String.format(\"%s (%s)\", p.progress.name(), p.progress.status));\n+            } else {\n+                code.append(p.progress.ordinal());\n+                badOps.add(String.format(\"%s (%s)\", p.progress.name(), p.reason));\n+            }\n+        });\n+\n+        /*\n+         * return a string which encodes the result:\n+         * <major code>-<failed op codes>-<successful op codes>: <details of failed ops> (<details of successful ops>)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ3OTk0MQ=="}, "originalCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d"}, "originalPosition": 523}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "00795e547e9546e68d5eef75ee76e8d32199485d", "author": {"user": {"login": "mmusgrov", "name": "Michael Musgrove"}}, "url": "https://github.com/jbosstm/narayana/commit/00795e547e9546e68d5eef75ee76e8d32199485d", "committedDate": "2020-12-04T19:23:01Z", "message": "JBTM-3245 report request and response filter processing failures back to the caller"}, "afterCommit": {"oid": "b3de967d8f9de5d9716a9f50a3db5ff76349768b", "author": {"user": {"login": "mmusgrov", "name": "Michael Musgrove"}}, "url": "https://github.com/jbosstm/narayana/commit/b3de967d8f9de5d9716a9f50a3db5ff76349768b", "committedDate": "2020-12-10T14:23:34Z", "message": "JBTM-3245 report request and response filter processing failures back to the caller"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NDM1OTA3", "url": "https://github.com/jbosstm/narayana/pull/1738#pullrequestreview-549435907", "createdAt": "2020-12-10T17:28:55Z", "commit": {"oid": "b3de967d8f9de5d9716a9f50a3db5ff76349768b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bc8e4975f73622058d51161408318db3eda0dde", "author": {"user": {"login": "mmusgrov", "name": "Michael Musgrove"}}, "url": "https://github.com/jbosstm/narayana/commit/9bc8e4975f73622058d51161408318db3eda0dde", "committedDate": "2020-12-13T23:36:15Z", "message": "JBTM-3245 report request and response filter processing failures back to the caller"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b3de967d8f9de5d9716a9f50a3db5ff76349768b", "author": {"user": {"login": "mmusgrov", "name": "Michael Musgrove"}}, "url": "https://github.com/jbosstm/narayana/commit/b3de967d8f9de5d9716a9f50a3db5ff76349768b", "committedDate": "2020-12-10T14:23:34Z", "message": "JBTM-3245 report request and response filter processing failures back to the caller"}, "afterCommit": {"oid": "9bc8e4975f73622058d51161408318db3eda0dde", "author": {"user": {"login": "mmusgrov", "name": "Michael Musgrove"}}, "url": "https://github.com/jbosstm/narayana/commit/9bc8e4975f73622058d51161408318db3eda0dde", "committedDate": "2020-12-13T23:36:15Z", "message": "JBTM-3245 report request and response filter processing failures back to the caller"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4407, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}