{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwODk5MzI4", "number": 1593, "title": "JBTM-3276 SlotStore implementation.", "bodyText": "Part two, the disk based backend.\nhttps://issues.redhat.com/browse/JBTM-3276\nMAIN !LRA !TOMCAT !AS_TESTS !RTS !JACOCO !XTS !QA_JTA !QA_JTS_JACORB !QA_JTS_JDKORB !QA_JTS_OPENJDKORB !BLACKTIE !PERF LRA !NO_WIN !DB_TESTS !mysql !db2 !postgres !oracle", "createdAt": "2020-04-08T14:53:34Z", "url": "https://github.com/jbosstm/narayana/pull/1593", "merged": true, "mergeCommit": {"oid": "b9a21cb66e38ea480ee975da4eba79fa6680ca41"}, "closed": true, "closedAt": "2020-04-27T08:09:15Z", "author": {"login": "jhalliday"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcXmt5iAFqTM5MjcyMTI1Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcbqunZAFqTQwMDcxODcyMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNzIxMjUz", "url": "https://github.com/jbosstm/narayana/pull/1593#pullrequestreview-392721253", "createdAt": "2020-04-14T08:42:56Z", "commit": {"oid": "c17259bb149f97d37c67239eb3ecfddc6cab3715"}, "state": "APPROVED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODo0Mjo1NlrOGFESMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjo1OTowN1rOGFYMzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk2NjI1OQ==", "bodyText": "Can you indicate why so that we can continue with the work if your priorities change?", "url": "https://github.com/jbosstm/narayana/pull/1593#discussion_r407966259", "createdAt": "2020-04-14T08:42:56Z", "author": {"login": "mmusgrov"}, "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/internal/arjuna/objectstore/slot/DiskSlots.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * JBoss, Home of Professional Open Source\n+ * Copyright 2020, Red Hat, Inc. and/or its affiliates,\n+ * and individual contributors as indicated by the @author tags.\n+ * See the copyright.txt in the distribution for a\n+ * full listing of individual contributors.\n+ * This copyrighted material is made available to anyone wishing to use,\n+ * modify, copy, or redistribute it subject to the terms and conditions\n+ * of the GNU Lesser General Public License, v. 2.1.\n+ * This program is distributed in the hope that it will be useful, but WITHOUT A\n+ * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n+ * You should have received a copy of the GNU Lesser General Public License,\n+ * v.2.1 along with this distribution; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,\n+ * MA  02110-1301, USA.\n+ *\n+ * (C) 2020,\n+ * @author Jonathan Halliday (jonathan.halliday@redhat.com)\n+ */\n+package com.arjuna.ats.internal.arjuna.objectstore.slot;\n+\n+import com.arjuna.ats.arjuna.logging.tsLogger;\n+\n+import java.io.*;\n+import java.util.zip.CRC32;\n+\n+/**\n+ * File backed implementation of the SlotStore backend.\n+ * WARNING: this is currently a test implementation and is NOT SAFE for production use yet.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c17259bb149f97d37c67239eb3ecfddc6cab3715"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1MzY2Mw==", "bodyText": "Isn't it possible for parallel threads to safely write to a memory mapped file if they are writing to distinct slots, if so wouldn't you get better performance using a single file.", "url": "https://github.com/jbosstm/narayana/pull/1593#discussion_r408253663", "createdAt": "2020-04-14T16:02:05Z", "author": {"login": "mmusgrov"}, "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/internal/arjuna/objectstore/slot/DiskSlots.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * JBoss, Home of Professional Open Source\n+ * Copyright 2020, Red Hat, Inc. and/or its affiliates,\n+ * and individual contributors as indicated by the @author tags.\n+ * See the copyright.txt in the distribution for a\n+ * full listing of individual contributors.\n+ * This copyrighted material is made available to anyone wishing to use,\n+ * modify, copy, or redistribute it subject to the terms and conditions\n+ * of the GNU Lesser General Public License, v. 2.1.\n+ * This program is distributed in the hope that it will be useful, but WITHOUT A\n+ * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n+ * You should have received a copy of the GNU Lesser General Public License,\n+ * v.2.1 along with this distribution; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,\n+ * MA  02110-1301, USA.\n+ *\n+ * (C) 2020,\n+ * @author Jonathan Halliday (jonathan.halliday@redhat.com)\n+ */\n+package com.arjuna.ats.internal.arjuna.objectstore.slot;\n+\n+import com.arjuna.ats.arjuna.logging.tsLogger;\n+\n+import java.io.*;\n+import java.util.zip.CRC32;\n+\n+/**\n+ * File backed implementation of the SlotStore backend.\n+ * WARNING: this is currently a test implementation and is NOT SAFE for production use yet.\n+ *\n+ * @author Jonathan Halliday (jonathan.halliday@redhat.com), 2020-04\n+ */\n+public class DiskSlots implements BackingSlots {\n+\n+    private SlotStoreEnvironmentBean config;\n+    private RandomAccessFile[] slots;\n+\n+    @Override\n+    public synchronized void init(SlotStoreEnvironmentBean config) throws IOException {\n+        if (this.config != null) {\n+            throw new IllegalStateException(\"already initialized\");\n+        }\n+\n+        this.config = config;\n+\n+        File storeDir = new File(config.getStoreDir());\n+        if (!storeDir.exists() && !storeDir.mkdirs()) {\n+            throw new IOException(tsLogger.i18NLogger.get_dir_create_failed(storeDir.getCanonicalPath()));\n+        }\n+        slots = new RandomAccessFile[config.getNumberOfSlots()];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c17259bb149f97d37c67239eb3ecfddc6cab3715"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1NTgyOA==", "bodyText": "Would assert data.length <= SlotStoreEnvironmentBean#bytesPerSlot provide any debug benefit.\nBTW this implementation uses a file per slot and since a files' size is unlimited the bytesPerSlot config should not apply to this particular BackingSlots implementation (in particular in SlotStore#write there is a check that the data size < config.bytesPerSlot).", "url": "https://github.com/jbosstm/narayana/pull/1593#discussion_r408255828", "createdAt": "2020-04-14T16:05:02Z", "author": {"login": "mmusgrov"}, "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/internal/arjuna/objectstore/slot/DiskSlots.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * JBoss, Home of Professional Open Source\n+ * Copyright 2020, Red Hat, Inc. and/or its affiliates,\n+ * and individual contributors as indicated by the @author tags.\n+ * See the copyright.txt in the distribution for a\n+ * full listing of individual contributors.\n+ * This copyrighted material is made available to anyone wishing to use,\n+ * modify, copy, or redistribute it subject to the terms and conditions\n+ * of the GNU Lesser General Public License, v. 2.1.\n+ * This program is distributed in the hope that it will be useful, but WITHOUT A\n+ * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n+ * You should have received a copy of the GNU Lesser General Public License,\n+ * v.2.1 along with this distribution; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,\n+ * MA  02110-1301, USA.\n+ *\n+ * (C) 2020,\n+ * @author Jonathan Halliday (jonathan.halliday@redhat.com)\n+ */\n+package com.arjuna.ats.internal.arjuna.objectstore.slot;\n+\n+import com.arjuna.ats.arjuna.logging.tsLogger;\n+\n+import java.io.*;\n+import java.util.zip.CRC32;\n+\n+/**\n+ * File backed implementation of the SlotStore backend.\n+ * WARNING: this is currently a test implementation and is NOT SAFE for production use yet.\n+ *\n+ * @author Jonathan Halliday (jonathan.halliday@redhat.com), 2020-04\n+ */\n+public class DiskSlots implements BackingSlots {\n+\n+    private SlotStoreEnvironmentBean config;\n+    private RandomAccessFile[] slots;\n+\n+    @Override\n+    public synchronized void init(SlotStoreEnvironmentBean config) throws IOException {\n+        if (this.config != null) {\n+            throw new IllegalStateException(\"already initialized\");\n+        }\n+\n+        this.config = config;\n+\n+        File storeDir = new File(config.getStoreDir());\n+        if (!storeDir.exists() && !storeDir.mkdirs()) {\n+            throw new IOException(tsLogger.i18NLogger.get_dir_create_failed(storeDir.getCanonicalPath()));\n+        }\n+        slots = new RandomAccessFile[config.getNumberOfSlots()];\n+        for (int i = 0; i < slots.length; i++) {\n+            File file = new File(storeDir, \"slot.\" + i);\n+            slots[i] = new RandomAccessFile(file, \"rw\");\n+        }\n+    }\n+\n+    @Override\n+    public void write(int slot, byte[] data, boolean sync) throws IOException {\n+        RandomAccessFile randomAccessFile = slots[slot];\n+        synchronized (randomAccessFile) {\n+\n+            randomAccessFile.seek(0);\n+            randomAccessFile.writeInt(data.length);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c17259bb149f97d37c67239eb3ecfddc6cab3715"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1ODI1MQ==", "bodyText": "What's this, is it for the two ints corresponding to the data length and the checksum?", "url": "https://github.com/jbosstm/narayana/pull/1593#discussion_r408258251", "createdAt": "2020-04-14T16:08:29Z", "author": {"login": "mmusgrov"}, "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/internal/arjuna/objectstore/slot/DiskSlots.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * JBoss, Home of Professional Open Source\n+ * Copyright 2020, Red Hat, Inc. and/or its affiliates,\n+ * and individual contributors as indicated by the @author tags.\n+ * See the copyright.txt in the distribution for a\n+ * full listing of individual contributors.\n+ * This copyrighted material is made available to anyone wishing to use,\n+ * modify, copy, or redistribute it subject to the terms and conditions\n+ * of the GNU Lesser General Public License, v. 2.1.\n+ * This program is distributed in the hope that it will be useful, but WITHOUT A\n+ * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n+ * You should have received a copy of the GNU Lesser General Public License,\n+ * v.2.1 along with this distribution; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,\n+ * MA  02110-1301, USA.\n+ *\n+ * (C) 2020,\n+ * @author Jonathan Halliday (jonathan.halliday@redhat.com)\n+ */\n+package com.arjuna.ats.internal.arjuna.objectstore.slot;\n+\n+import com.arjuna.ats.arjuna.logging.tsLogger;\n+\n+import java.io.*;\n+import java.util.zip.CRC32;\n+\n+/**\n+ * File backed implementation of the SlotStore backend.\n+ * WARNING: this is currently a test implementation and is NOT SAFE for production use yet.\n+ *\n+ * @author Jonathan Halliday (jonathan.halliday@redhat.com), 2020-04\n+ */\n+public class DiskSlots implements BackingSlots {\n+\n+    private SlotStoreEnvironmentBean config;\n+    private RandomAccessFile[] slots;\n+\n+    @Override\n+    public synchronized void init(SlotStoreEnvironmentBean config) throws IOException {\n+        if (this.config != null) {\n+            throw new IllegalStateException(\"already initialized\");\n+        }\n+\n+        this.config = config;\n+\n+        File storeDir = new File(config.getStoreDir());\n+        if (!storeDir.exists() && !storeDir.mkdirs()) {\n+            throw new IOException(tsLogger.i18NLogger.get_dir_create_failed(storeDir.getCanonicalPath()));\n+        }\n+        slots = new RandomAccessFile[config.getNumberOfSlots()];\n+        for (int i = 0; i < slots.length; i++) {\n+            File file = new File(storeDir, \"slot.\" + i);\n+            slots[i] = new RandomAccessFile(file, \"rw\");\n+        }\n+    }\n+\n+    @Override\n+    public void write(int slot, byte[] data, boolean sync) throws IOException {\n+        RandomAccessFile randomAccessFile = slots[slot];\n+        synchronized (randomAccessFile) {\n+\n+            randomAccessFile.seek(0);\n+            randomAccessFile.writeInt(data.length);\n+            randomAccessFile.write(data);\n+            randomAccessFile.writeInt(checksum(data));\n+\n+            if (sync) {\n+                randomAccessFile.getFD().sync();\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public byte[] read(int slot) throws IOException {\n+        RandomAccessFile randomAccessFile = slots[slot];\n+        synchronized (randomAccessFile) {\n+\n+            if (randomAccessFile.length() < 8) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c17259bb149f97d37c67239eb3ecfddc6cab3715"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2NjgzOA==", "bodyText": "Since you are using one file per slot why do you need a random access file, you could read the whole file and validate the data using the final checksum.", "url": "https://github.com/jbosstm/narayana/pull/1593#discussion_r408266838", "createdAt": "2020-04-14T16:20:57Z", "author": {"login": "mmusgrov"}, "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/internal/arjuna/objectstore/slot/DiskSlots.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * JBoss, Home of Professional Open Source\n+ * Copyright 2020, Red Hat, Inc. and/or its affiliates,\n+ * and individual contributors as indicated by the @author tags.\n+ * See the copyright.txt in the distribution for a\n+ * full listing of individual contributors.\n+ * This copyrighted material is made available to anyone wishing to use,\n+ * modify, copy, or redistribute it subject to the terms and conditions\n+ * of the GNU Lesser General Public License, v. 2.1.\n+ * This program is distributed in the hope that it will be useful, but WITHOUT A\n+ * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n+ * You should have received a copy of the GNU Lesser General Public License,\n+ * v.2.1 along with this distribution; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,\n+ * MA  02110-1301, USA.\n+ *\n+ * (C) 2020,\n+ * @author Jonathan Halliday (jonathan.halliday@redhat.com)\n+ */\n+package com.arjuna.ats.internal.arjuna.objectstore.slot;\n+\n+import com.arjuna.ats.arjuna.logging.tsLogger;\n+\n+import java.io.*;\n+import java.util.zip.CRC32;\n+\n+/**\n+ * File backed implementation of the SlotStore backend.\n+ * WARNING: this is currently a test implementation and is NOT SAFE for production use yet.\n+ *\n+ * @author Jonathan Halliday (jonathan.halliday@redhat.com), 2020-04\n+ */\n+public class DiskSlots implements BackingSlots {\n+\n+    private SlotStoreEnvironmentBean config;\n+    private RandomAccessFile[] slots;\n+\n+    @Override\n+    public synchronized void init(SlotStoreEnvironmentBean config) throws IOException {\n+        if (this.config != null) {\n+            throw new IllegalStateException(\"already initialized\");\n+        }\n+\n+        this.config = config;\n+\n+        File storeDir = new File(config.getStoreDir());\n+        if (!storeDir.exists() && !storeDir.mkdirs()) {\n+            throw new IOException(tsLogger.i18NLogger.get_dir_create_failed(storeDir.getCanonicalPath()));\n+        }\n+        slots = new RandomAccessFile[config.getNumberOfSlots()];\n+        for (int i = 0; i < slots.length; i++) {\n+            File file = new File(storeDir, \"slot.\" + i);\n+            slots[i] = new RandomAccessFile(file, \"rw\");\n+        }\n+    }\n+\n+    @Override\n+    public void write(int slot, byte[] data, boolean sync) throws IOException {\n+        RandomAccessFile randomAccessFile = slots[slot];\n+        synchronized (randomAccessFile) {\n+\n+            randomAccessFile.seek(0);\n+            randomAccessFile.writeInt(data.length);\n+            randomAccessFile.write(data);\n+            randomAccessFile.writeInt(checksum(data));\n+\n+            if (sync) {\n+                randomAccessFile.getFD().sync();\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public byte[] read(int slot) throws IOException {\n+        RandomAccessFile randomAccessFile = slots[slot];\n+        synchronized (randomAccessFile) {\n+\n+            if (randomAccessFile.length() < 8) {\n+                return null;\n+            }\n+\n+            randomAccessFile.seek(0);\n+            int dataLength = randomAccessFile.readInt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c17259bb149f97d37c67239eb3ecfddc6cab3715"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2ODM4MQ==", "bodyText": "or the checksum of the contents of slot failed", "url": "https://github.com/jbosstm/narayana/pull/1593#discussion_r408268381", "createdAt": "2020-04-14T16:23:08Z", "author": {"login": "mmusgrov"}, "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/internal/arjuna/objectstore/slot/BackingSlots.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * JBoss, Home of Professional Open Source\n+ * Copyright 2020, Red Hat, Inc. and/or its affiliates,\n+ * and individual contributors as indicated by the @author tags.\n+ * See the copyright.txt in the distribution for a\n+ * full listing of individual contributors.\n+ * This copyrighted material is made available to anyone wishing to use,\n+ * modify, copy, or redistribute it subject to the terms and conditions\n+ * of the GNU Lesser General Public License, v. 2.1.\n+ * This program is distributed in the hope that it will be useful, but WITHOUT A\n+ * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n+ * You should have received a copy of the GNU Lesser General Public License,\n+ * v.2.1 along with this distribution; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,\n+ * MA  02110-1301, USA.\n+ *\n+ * (C) 2020,\n+ * @author Jonathan Halliday (jonathan.halliday@redhat.com)\n+ */\n+package com.arjuna.ats.internal.arjuna.objectstore.slot;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Interface for pluggable internal implementations of the SlotStore backend.\n+ *\n+ * @author Jonathan Halliday (jonathan.halliday@redhat.com), 2020-04\n+ */\n+public interface BackingSlots {\n+\n+    /**\n+     * Initialize the instance from the given configuration.\n+     * This must be called once per instance, before any other method is called.\n+     *\n+     * @param config The configuration to apply.\n+     */\n+    void init(SlotStoreEnvironmentBean config) throws IOException;\n+\n+    /**\n+     * Update the given slot with the provided data, overwriting (non-atomically) any existing data.\n+     * The update may not be immediately persistent, depending on config syncWrites\n+     *\n+     * @param slot the index, from 0 to config numberOfSlots-1\n+     * @param sync true for immediate persistence, false otherwise\n+     * @param data the content.\n+     */\n+    void write(int slot, byte[] data, boolean sync) throws IOException;\n+\n+    /**\n+     * Read the given slot, returning its contents.\n+     *\n+     * @param slot the index, from 0 to config numberOfSlots-1\n+     * @return the content, or null if the slot has not been written or has been cleared.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c17259bb149f97d37c67239eb3ecfddc6cab3715"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3MjA0OQ==", "bodyText": "We use a checkstyle plugin rule to disallow the use of .*. But since ArjunaCore predates maven and we have a policy of not refactoring historical (but still current) code we avoid failing the compilation. But we do encourage/advise that new files should follow our checkstyle rules by not skipping the plugin in our top level pom.", "url": "https://github.com/jbosstm/narayana/pull/1593#discussion_r408272049", "createdAt": "2020-04-14T16:28:18Z", "author": {"login": "mmusgrov"}, "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/internal/arjuna/objectstore/slot/DiskSlots.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * JBoss, Home of Professional Open Source\n+ * Copyright 2020, Red Hat, Inc. and/or its affiliates,\n+ * and individual contributors as indicated by the @author tags.\n+ * See the copyright.txt in the distribution for a\n+ * full listing of individual contributors.\n+ * This copyrighted material is made available to anyone wishing to use,\n+ * modify, copy, or redistribute it subject to the terms and conditions\n+ * of the GNU Lesser General Public License, v. 2.1.\n+ * This program is distributed in the hope that it will be useful, but WITHOUT A\n+ * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n+ * You should have received a copy of the GNU Lesser General Public License,\n+ * v.2.1 along with this distribution; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,\n+ * MA  02110-1301, USA.\n+ *\n+ * (C) 2020,\n+ * @author Jonathan Halliday (jonathan.halliday@redhat.com)\n+ */\n+package com.arjuna.ats.internal.arjuna.objectstore.slot;\n+\n+import com.arjuna.ats.arjuna.logging.tsLogger;\n+\n+import java.io.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c17259bb149f97d37c67239eb3ecfddc6cab3715"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3ODc1OA==", "bodyText": "What happens if the config is changed or if the backing slot store is moved to a different system?", "url": "https://github.com/jbosstm/narayana/pull/1593#discussion_r408278758", "createdAt": "2020-04-14T16:38:17Z", "author": {"login": "mmusgrov"}, "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/internal/arjuna/objectstore/slot/SlotStore.java", "diffHunk": "@@ -65,15 +65,21 @@ public SlotStore(SlotStoreEnvironmentBean config) throws IOException {\n \n         // unused for now, but eventually we'll have a disk backend...\n         File storeDir = new File(config.getStoreDir());\n-        if (!storeDir.exists() && !storeDir.mkdirs()) {\n-            throw new IOException(tsLogger.i18NLogger.get_dir_create_failed(storeDir.getCanonicalPath()));\n-        }\n         storeDirCanonicalPath = storeDir.getCanonicalPath();\n \n-        slots = new RAMSlots(config);\n+        slots = config.getBackingSlots();\n+        slots.init(config);\n \n+        // internal recovery to rebuild the slotIdIndex and freeList", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c17259bb149f97d37c67239eb3ecfddc6cab3715"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3OTIzNQ==", "bodyText": "typo should be it is free for use\nBTW data can be null if the checksum failed in which case you are masking the error without reporting it to the user.", "url": "https://github.com/jbosstm/narayana/pull/1593#discussion_r408279235", "createdAt": "2020-04-14T16:39:03Z", "author": {"login": "mmusgrov"}, "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/internal/arjuna/objectstore/slot/SlotStore.java", "diffHunk": "@@ -65,15 +65,21 @@ public SlotStore(SlotStoreEnvironmentBean config) throws IOException {\n \n         // unused for now, but eventually we'll have a disk backend...\n         File storeDir = new File(config.getStoreDir());\n-        if (!storeDir.exists() && !storeDir.mkdirs()) {\n-            throw new IOException(tsLogger.i18NLogger.get_dir_create_failed(storeDir.getCanonicalPath()));\n-        }\n         storeDirCanonicalPath = storeDir.getCanonicalPath();\n \n-        slots = new RAMSlots(config);\n+        slots = config.getBackingSlots();\n+        slots.init(config);\n \n+        // internal recovery to rebuild the slotIdIndex and freeList\n         for (int i = 0; i < config.getNumberOfSlots(); i++) {\n-            freeList.add(i); // TODO recovery, when the backend supports it.\n+            byte[] data = slots.read(i);\n+            if (data == null || data.length == 0) {\n+                freeList.add(i); // slot does not contain a valid entry, is free for use", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c17259bb149f97d37c67239eb3ecfddc6cab3715"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI5MjU1Ng==", "bodyText": "Why not combine the if and else into a single boolean test.", "url": "https://github.com/jbosstm/narayana/pull/1593#discussion_r408292556", "createdAt": "2020-04-14T16:59:07Z", "author": {"login": "mmusgrov"}, "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/internal/arjuna/objectstore/slot/SlotStoreEnvironmentBean.java", "diffHunk": "@@ -149,4 +153,64 @@ public boolean isSyncDeletes() {\n     public void setSyncDeletes(boolean syncDeletes) {\n         this.syncDeletes = syncDeletes;\n     }\n+\n+    /**\n+     * Returns the class name of the com.arjuna.ats.internal.arjuna.objectstore.slot.BackingSlots implementation\n+     * <p>\n+     * Default: \"com.arjuna.ats.internal.arjuna.objectstore.slot.VolatileSlots\"\n+     *\n+     * @return the name of the class implementing BackingSlots.\n+     */\n+    public String getBackingSlotsClassName() {\n+        return backingSlotsClassName;\n+    }\n+\n+    public void setBackingSlotsClassName(String backingSlotsClassName) {\n+        synchronized (this) {\n+            if (backingSlotsClassName == null) {\n+                this.backingSlots = null;\n+            } else if (!backingSlotsClassName.equals(this.backingSlotsClassName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c17259bb149f97d37c67239eb3ecfddc6cab3715"}, "originalPosition": 38}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c17259bb149f97d37c67239eb3ecfddc6cab3715", "author": {"user": {"login": "jhalliday", "name": "Jonathan Halliday"}}, "url": "https://github.com/jbosstm/narayana/commit/c17259bb149f97d37c67239eb3ecfddc6cab3715", "committedDate": "2020-04-08T14:28:16Z", "message": "JBTM-3276 SlotStore implementation.\npart two - refactor to add disk backend."}, "afterCommit": {"oid": "da7805f21dd539cef4c6bc2b0edb499cb3b6b850", "author": {"user": {"login": "jhalliday", "name": "Jonathan Halliday"}}, "url": "https://github.com/jbosstm/narayana/commit/da7805f21dd539cef4c6bc2b0edb499cb3b6b850", "committedDate": "2020-04-15T10:03:56Z", "message": "JBTM-3276 SlotStore implementation.\npart two - refactor to add disk backend."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "da7805f21dd539cef4c6bc2b0edb499cb3b6b850", "author": {"user": {"login": "jhalliday", "name": "Jonathan Halliday"}}, "url": "https://github.com/jbosstm/narayana/commit/da7805f21dd539cef4c6bc2b0edb499cb3b6b850", "committedDate": "2020-04-15T10:03:56Z", "message": "JBTM-3276 SlotStore implementation.\npart two - refactor to add disk backend."}, "afterCommit": {"oid": "c9ef545e8ccaa7bd9cabfe259819c9256ab7b5a7", "author": {"user": {"login": "jhalliday", "name": "Jonathan Halliday"}}, "url": "https://github.com/jbosstm/narayana/commit/c9ef545e8ccaa7bd9cabfe259819c9256ab7b5a7", "committedDate": "2020-04-15T12:14:33Z", "message": "JBTM-3276 SlotStore implementation.\npart two - refactor to add disk backend."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "585c0365de387272684842f1af60e55f51cd4982", "author": {"user": {"login": "jhalliday", "name": "Jonathan Halliday"}}, "url": "https://github.com/jbosstm/narayana/commit/585c0365de387272684842f1af60e55f51cd4982", "committedDate": "2020-04-23T10:12:23Z", "message": "JBTM-3276 SlotStore implementation.\npart two - refactor to add disk backend."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "10e91a7268294ddd1a371e068a7af328e47b7cda", "author": {"user": {"login": "jhalliday", "name": "Jonathan Halliday"}}, "url": "https://github.com/jbosstm/narayana/commit/10e91a7268294ddd1a371e068a7af328e47b7cda", "committedDate": "2020-04-23T10:10:30Z", "message": "JBTM-3276 SlotStore implementation.\npart two - refactor to add disk backend."}, "afterCommit": {"oid": "585c0365de387272684842f1af60e55f51cd4982", "author": {"user": {"login": "jhalliday", "name": "Jonathan Halliday"}}, "url": "https://github.com/jbosstm/narayana/commit/585c0365de387272684842f1af60e55f51cd4982", "committedDate": "2020-04-23T10:12:23Z", "message": "JBTM-3276 SlotStore implementation.\npart two - refactor to add disk backend."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNzE4NzIz", "url": "https://github.com/jbosstm/narayana/pull/1593#pullrequestreview-400718723", "createdAt": "2020-04-27T08:08:58Z", "commit": {"oid": "585c0365de387272684842f1af60e55f51cd4982"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4565, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}