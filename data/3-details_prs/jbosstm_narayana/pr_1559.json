{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwMDY4NDYw", "number": 1559, "title": "JBTM 3239 Ensure post LRA actions are retried in the presence of failures", "bodyText": "https://issues.redhat.com/browse/JBTM-3239\nAlso fixes https://issues.redhat.com/browse/JBTM-3163\n!LRA !MAIN !TOMCAT !AS_TESTS !RTS !JACOCO !XTS !QA_JTA !QA_JTS_JACORB !QA_JTS_JDKORB !QA_JTS_OPENJDKORB !BLACKTIE !PERF !NO_WIN !DB_TESTS !mysql !db2 !postgres !oracle\nI have disabled the test for now while the PR is under review.", "createdAt": "2020-02-02T23:17:05Z", "url": "https://github.com/jbosstm/narayana/pull/1559", "merged": true, "mergeCommit": {"oid": "1551992dcf85cee74481e105026ad076962f84ea"}, "closed": true, "closedAt": "2020-02-11T17:52:54Z", "author": {"login": "mmusgrov"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcAnx_bgFqTM1MjA1ODAzNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDVhYDgBqjMwMjc1ODcxMjI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMDU4MDM0", "url": "https://github.com/jbosstm/narayana/pull/1559#pullrequestreview-352058034", "createdAt": "2020-02-03T07:26:59Z", "commit": {"oid": "024b71955fe57086de616fc7ed28a4dc09bc0a5d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "024b71955fe57086de616fc7ed28a4dc09bc0a5d", "author": {"user": {"login": "mmusgrov", "name": "Michael Musgrove"}}, "url": "https://github.com/jbosstm/narayana/commit/024b71955fe57086de616fc7ed28a4dc09bc0a5d", "committedDate": "2020-02-02T23:15:03Z", "message": "JBTM-3239 Ensure post LRA actions are retried in the presence of failures"}, "afterCommit": {"oid": "36931a9dc5026e6ea541e37526a6dc15289847e3", "author": {"user": {"login": "mmusgrov", "name": "Michael Musgrove"}}, "url": "https://github.com/jbosstm/narayana/commit/36931a9dc5026e6ea541e37526a6dc15289847e3", "committedDate": "2020-02-03T13:39:14Z", "message": "JBTM-3239 Ensure post LRA actions are retried in the presence of failures"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "36931a9dc5026e6ea541e37526a6dc15289847e3", "author": {"user": {"login": "mmusgrov", "name": "Michael Musgrove"}}, "url": "https://github.com/jbosstm/narayana/commit/36931a9dc5026e6ea541e37526a6dc15289847e3", "committedDate": "2020-02-03T13:39:14Z", "message": "JBTM-3239 Ensure post LRA actions are retried in the presence of failures"}, "afterCommit": {"oid": "b433f169922821b26e5ef33a9e813446e7c36ba2", "author": {"user": {"login": "mmusgrov", "name": "Michael Musgrove"}}, "url": "https://github.com/jbosstm/narayana/commit/b433f169922821b26e5ef33a9e813446e7c36ba2", "committedDate": "2020-02-03T18:23:43Z", "message": "JBTM-3239 Ensure post LRA actions are retried in the presence of failures"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b433f169922821b26e5ef33a9e813446e7c36ba2", "author": {"user": {"login": "mmusgrov", "name": "Michael Musgrove"}}, "url": "https://github.com/jbosstm/narayana/commit/b433f169922821b26e5ef33a9e813446e7c36ba2", "committedDate": "2020-02-03T18:23:43Z", "message": "JBTM-3239 Ensure post LRA actions are retried in the presence of failures"}, "afterCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689", "author": {"user": {"login": "mmusgrov", "name": "Michael Musgrove"}}, "url": "https://github.com/jbosstm/narayana/commit/42eb8d46cc6f74f5d971d62bb7cf284ffe855689", "committedDate": "2020-02-03T18:25:40Z", "message": "JBTM-3239 Ensure post LRA actions are retried in the presence of failures"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNDcxNTI1", "url": "https://github.com/jbosstm/narayana/pull/1559#pullrequestreview-352471525", "createdAt": "2020-02-03T18:36:36Z", "commit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxODozNjozNlrOFk7mRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxODozNjozNlrOFk7mRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2OTUxMA==", "bodyText": "This comment seems unassertive to me. Does 412 \"imply\" or \"require\" that the participant did this thing. Also \"infer\" could imply an element of doubt, is it possible to express as \"determine\". Are we certain of the outcome here or are there cases where valid responses could be misinterpreted?", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r374269510", "createdAt": "2020-02-03T18:36:36Z", "author": {"login": "tomjenkinson"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRARecord.java", "diffHunk": "@@ -445,6 +530,8 @@ private int retryGetEndStatus(URI endPath, boolean compensate) {\n \n                 // 200 and 410 are the only valid response code for reporting the participant status\n                 if (response.getStatus() == Response.Status.GONE.getStatusCode()) {\n+                    // 412 implies that the participant did the correct thing and cleaned up so infer the status", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 205}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNDcyMDEx", "url": "https://github.com/jbosstm/narayana/pull/1559#pullrequestreview-352472011", "createdAt": "2020-02-03T18:37:25Z", "commit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxODozNzoyNlrOFk7nyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxODozNzoyNlrOFk7nyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2OTg5Nw==", "bodyText": "Perhaps the TCK could have an RFE raised?", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r374269897", "createdAt": "2020-02-03T18:37:26Z", "author": {"login": "tomjenkinson"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "diffHunk": "@@ -519,6 +477,10 @@ private int doEnd(boolean cancel) {\n             status = toLRAStatus(res);\n         }\n \n+        // it would be less invasive to allow recoovery to run post LRA actions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 162}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNDcyNTU0", "url": "https://github.com/jbosstm/narayana/pull/1559#pullrequestreview-352472554", "createdAt": "2020-02-03T18:38:20Z", "commit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxODozODoyMFrOFk7piQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxODozODoyMFrOFk7piQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI3MDM0NQ==", "bodyText": "Does the JBTM exist yet? It would be useful to reference the actual JBTM in the comment", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r374270345", "createdAt": "2020-02-03T18:38:20Z", "author": {"login": "tomjenkinson"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java", "diffHunk": "@@ -173,7 +173,8 @@ public void finished(Transaction transaction, boolean fromHierarchy) {\n             // the LRA is top level or it's a nested LRA that was closed by a\n             // parent LRA (ie when fromHierarchy is true) then it's okay to forget about the LRA\n \n-            if (transaction.afterLRANotification()) {\n+            if (!transaction.hasPendingActions()) {\n+                // this call is only required to clean up cached LRAs. Follow up with a JBTM to avoid this", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTIxNjMx", "url": "https://github.com/jbosstm/narayana/pull/1559#pullrequestreview-352921631", "createdAt": "2020-02-04T11:59:59Z", "commit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMTo1OTo1OVrOFlRkOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjoyNDoyMFrOFlSMZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYyOTQzMg==", "bodyText": "this only usable in afterLRA calls because we are passing LRA id as LRA_HTTP_ENDED_CONTEXT_HEADER", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r374629432", "createdAt": "2020-02-04T11:59:59Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRARecord.java", "diffHunk": "@@ -361,18 +375,89 @@ private int tryDoEnd(boolean compensate) {\n                  * so if we were to return FINISH_ERROR recovery would not replay the log.\n                  * To force the record to be eligible for recovery we return a heuristic hazard.\n                  */\n-                return TwoPhaseOutcome.HEURISTIC_HAZARD;\n+                return atEnd(TwoPhaseOutcome.HEURISTIC_HAZARD);\n             }\n \n             status = ParticipantStatus.Completing; // recovery will figure out the status via the status url\n \n-            return TwoPhaseOutcome.FINISH_ERROR;\n+            return atEnd(TwoPhaseOutcome.FINISH_ERROR);\n         }\n \n         updateStatus(compensate);\n \n         // if the the request is still in progress (ie accepted is true) let recovery finish it\n-        return accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK;\n+        return atEnd(accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK);\n+    }\n+\n+    boolean isFinished() {\n+        // nested participants must still be able to compensate even if they are closed\n+        if (compensateURI == null) {\n+            return afterURI != null;\n+        }\n+\n+        switch (status) {\n+            case Completed:\n+                /* FALLTHRU */\n+            case FailedToComplete:\n+                return parentId == null; // completed nested LRAs must remain cancellable\n+            case Compensated:\n+                /* FALLTHRU */\n+            case FailedToCompensate:\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private boolean request(URI target, Transaction lra, String payload) {\n+        try {\n+            RequestBuilder builder = new RequestBuilder(target)\n+                    .request()\n+                    .header(LRA.LRA_HTTP_ENDED_CONTEXT_HEADER, lra.getId().toASCIIString())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYyOTYwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private boolean request(URI target, Transaction lra, String payload) {\n          \n          \n            \n                private boolean afterLRARequest(URI target, Transaction lra, String payload) {", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r374629601", "createdAt": "2020-02-04T12:00:27Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRARecord.java", "diffHunk": "@@ -361,18 +375,89 @@ private int tryDoEnd(boolean compensate) {\n                  * so if we were to return FINISH_ERROR recovery would not replay the log.\n                  * To force the record to be eligible for recovery we return a heuristic hazard.\n                  */\n-                return TwoPhaseOutcome.HEURISTIC_HAZARD;\n+                return atEnd(TwoPhaseOutcome.HEURISTIC_HAZARD);\n             }\n \n             status = ParticipantStatus.Completing; // recovery will figure out the status via the status url\n \n-            return TwoPhaseOutcome.FINISH_ERROR;\n+            return atEnd(TwoPhaseOutcome.FINISH_ERROR);\n         }\n \n         updateStatus(compensate);\n \n         // if the the request is still in progress (ie accepted is true) let recovery finish it\n-        return accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK;\n+        return atEnd(accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK);\n+    }\n+\n+    boolean isFinished() {\n+        // nested participants must still be able to compensate even if they are closed\n+        if (compensateURI == null) {\n+            return afterURI != null;\n+        }\n+\n+        switch (status) {\n+            case Completed:\n+                /* FALLTHRU */\n+            case FailedToComplete:\n+                return parentId == null; // completed nested LRAs must remain cancellable\n+            case Compensated:\n+                /* FALLTHRU */\n+            case FailedToCompensate:\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private boolean request(URI target, Transaction lra, String payload) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYzMzE4MA==", "bodyText": "isn't this a normal compensateURI which passed from user? so it can be user-endpoint:user-port/something/compensate? How can we be sure that parent LRA can be extracted?", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r374633180", "createdAt": "2020-02-04T12:09:26Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRARecord.java", "diffHunk": "@@ -361,18 +375,89 @@ private int tryDoEnd(boolean compensate) {\n                  * so if we were to return FINISH_ERROR recovery would not replay the log.\n                  * To force the record to be eligible for recovery we return a heuristic hazard.\n                  */\n-                return TwoPhaseOutcome.HEURISTIC_HAZARD;\n+                return atEnd(TwoPhaseOutcome.HEURISTIC_HAZARD);\n             }\n \n             status = ParticipantStatus.Completing; // recovery will figure out the status via the status url\n \n-            return TwoPhaseOutcome.FINISH_ERROR;\n+            return atEnd(TwoPhaseOutcome.FINISH_ERROR);\n         }\n \n         updateStatus(compensate);\n \n         // if the the request is still in progress (ie accepted is true) let recovery finish it\n-        return accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK;\n+        return atEnd(accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK);\n+    }\n+\n+    boolean isFinished() {\n+        // nested participants must still be able to compensate even if they are closed\n+        if (compensateURI == null) {\n+            return afterURI != null;\n+        }\n+\n+        switch (status) {\n+            case Completed:\n+                /* FALLTHRU */\n+            case FailedToComplete:\n+                return parentId == null; // completed nested LRAs must remain cancellable\n+            case Compensated:\n+                /* FALLTHRU */\n+            case FailedToCompensate:\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private boolean request(URI target, Transaction lra, String payload) {\n+        try {\n+            RequestBuilder builder = new RequestBuilder(target)\n+                    .request()\n+                    .header(LRA.LRA_HTTP_ENDED_CONTEXT_HEADER, lra.getId().toASCIIString())\n+                    .header(LRA.LRA_HTTP_RECOVERY_HEADER, recoveryURI.toASCIIString())\n+                    .async(PARTICIPANT_TIMEOUT, TimeUnit.SECONDS);\n+            ResponseHolder response = target.equals(forgetURI) ? builder.delete() : builder.put(payload, MediaType.TEXT_PLAIN);\n+\n+            if (response.getStatus() == 200) {\n+                return true;\n+            }\n+        } catch (WebApplicationException e) {\n+            if (LRALogger.logger.isInfoEnabled()) {\n+                LRALogger.logger.infof(\"Could not notify URI at %s (%s)\", target, e.getMessage());\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    private int atEnd(int res) {\n+        URI nested = compensateURI != null ? extractParentLRA(compensateURI) : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYzMzk0OQ==", "bodyText": "this is wrong since request method packs LRA id as LRA_HTTP_ENDED_CONTEXT_HEADER not as LRA_HTTP_CONTEXT_HEADER.", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r374633949", "createdAt": "2020-02-04T12:11:20Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRARecord.java", "diffHunk": "@@ -361,18 +375,89 @@ private int tryDoEnd(boolean compensate) {\n                  * so if we were to return FINISH_ERROR recovery would not replay the log.\n                  * To force the record to be eligible for recovery we return a heuristic hazard.\n                  */\n-                return TwoPhaseOutcome.HEURISTIC_HAZARD;\n+                return atEnd(TwoPhaseOutcome.HEURISTIC_HAZARD);\n             }\n \n             status = ParticipantStatus.Completing; // recovery will figure out the status via the status url\n \n-            return TwoPhaseOutcome.FINISH_ERROR;\n+            return atEnd(TwoPhaseOutcome.FINISH_ERROR);\n         }\n \n         updateStatus(compensate);\n \n         // if the the request is still in progress (ie accepted is true) let recovery finish it\n-        return accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK;\n+        return atEnd(accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK);\n+    }\n+\n+    boolean isFinished() {\n+        // nested participants must still be able to compensate even if they are closed\n+        if (compensateURI == null) {\n+            return afterURI != null;\n+        }\n+\n+        switch (status) {\n+            case Completed:\n+                /* FALLTHRU */\n+            case FailedToComplete:\n+                return parentId == null; // completed nested LRAs must remain cancellable\n+            case Compensated:\n+                /* FALLTHRU */\n+            case FailedToCompensate:\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private boolean request(URI target, Transaction lra, String payload) {\n+        try {\n+            RequestBuilder builder = new RequestBuilder(target)\n+                    .request()\n+                    .header(LRA.LRA_HTTP_ENDED_CONTEXT_HEADER, lra.getId().toASCIIString())\n+                    .header(LRA.LRA_HTTP_RECOVERY_HEADER, recoveryURI.toASCIIString())\n+                    .async(PARTICIPANT_TIMEOUT, TimeUnit.SECONDS);\n+            ResponseHolder response = target.equals(forgetURI) ? builder.delete() : builder.put(payload, MediaType.TEXT_PLAIN);\n+\n+            if (response.getStatus() == 200) {\n+                return true;\n+            }\n+        } catch (WebApplicationException e) {\n+            if (LRALogger.logger.isInfoEnabled()) {\n+                LRALogger.logger.infof(\"Could not notify URI at %s (%s)\", target, e.getMessage());\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    private int atEnd(int res) {\n+        URI nested = compensateURI != null ? extractParentLRA(compensateURI) : null;\n+        boolean notifyForget = (nested != null && forgetURI != null);\n+\n+        // Only run the post LRA actions if both the LRA and participant are in an end state\n+        // check the participant first since it will have been removed from one of the lists\n+        if (!isFinished() || !lra.isFinished()) {\n+            if (afterURI != null || notifyForget) {\n+                return TwoPhaseOutcome.HEURISTIC_HAZARD;\n+            }\n+\n+            return res;\n+        }\n+\n+        // run post LRA actions\n+        boolean r1 = afterURI == null || request(afterURI, lra, lra.getLRAStatus().name());\n+        boolean r2 = !notifyForget || request(forgetURI, lra, lra.getLRAStatus().name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYzNTA0OA==", "bodyText": "412 means that the participant no longer knows about this LRA. This means that the participant successfully compensated or completed and forgotten the LRA data. This should be documented in the specification.", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r374635048", "createdAt": "2020-02-04T12:13:41Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRARecord.java", "diffHunk": "@@ -445,6 +530,8 @@ private int retryGetEndStatus(URI endPath, boolean compensate) {\n \n                 // 200 and 410 are the only valid response code for reporting the participant status\n                 if (response.getStatus() == Response.Status.GONE.getStatusCode()) {\n+                    // 412 implies that the participant did the correct thing and cleaned up so infer the status", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2OTUxMA=="}, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYzNjIxOQ==", "bodyText": "You can reuse isFinished() here.", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r374636219", "createdAt": "2020-02-04T12:16:22Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "diffHunk": "@@ -532,12 +494,87 @@ private int doEnd(boolean cancel) {\n         return res;\n     }\n \n+    protected void runPostLRAActions() {\n+        // if there are no more heuristics or failures then update the status of the LRA\n+        if (isInEndState()) {\n+            if (preparedList == null) {\n+                preparedList = new RecordList();\n+            }\n+            moveTo(heuristicList, preparedList);\n+            moveTo(failedList, preparedList);\n+            checkParticipant(preparedList);\n+            super.phase2Commit(true);\n+        }\n+    }\n+\n     private boolean updateState(LRAStatus nextState) {\n         status = nextState;\n \n         return (pendingList == null || pendingList.size() == 0) || deactivate();\n     }\n \n+    protected void checkParticipant(RecordList participants) {\n+        RecordListIterator i = new RecordListIterator(participants);\n+        AbstractRecord r;\n+\n+        while ((r = i.iterate()) != null) {\n+            if (r instanceof LRARecord) {\n+                LRARecord rec = (LRARecord) r;\n+\n+                rec.setLraService(getLraService());\n+                rec.setLRA(this);\n+            }\n+        }\n+    }\n+\n+    protected void moveTo(RecordList fromList, RecordList toList) {\n+        AbstractRecord record;\n+\n+        if (fromList != null) {\n+            while ((record = fromList.getFront()) != null) {\n+                toList.putFront(record);\n+            }\n+        }\n+    }\n+\n+    private boolean allFinished(RecordList... lists) {\n+        for (RecordList list : lists) {\n+            if (list != null) {\n+                RecordListIterator i = new RecordListIterator(list);\n+                AbstractRecord r;\n+\n+                while ((r = i.iterate()) != null) {\n+                    if (r instanceof LRARecord) {\n+                        LRARecord rec = (LRARecord) r;\n+                        if (!rec.isFinished()) {\n+                            return false;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    protected boolean isInEndState() {\n+        if (status == LRAStatus.Cancelling && allFinished(heuristicList, failedList)) {\n+            status = LRAStatus.Cancelled;\n+        } else if (status == LRAStatus.Closing && allFinished(heuristicList, failedList)) {\n+            status = LRAStatus.Closed;\n+        }\n+\n+        switch (status) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYzNzUyNA==", "bodyText": "Will this be set in the preparedList also in case of recovery? LRARecord doesn't seem to persist the passed Transaction object with its state.", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r374637524", "createdAt": "2020-02-04T12:19:19Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "diffHunk": "@@ -532,12 +494,87 @@ private int doEnd(boolean cancel) {\n         return res;\n     }\n \n+    protected void runPostLRAActions() {\n+        // if there are no more heuristics or failures then update the status of the LRA\n+        if (isInEndState()) {\n+            if (preparedList == null) {\n+                preparedList = new RecordList();\n+            }\n+            moveTo(heuristicList, preparedList);\n+            moveTo(failedList, preparedList);\n+            checkParticipant(preparedList);\n+            super.phase2Commit(true);\n+        }\n+    }\n+\n     private boolean updateState(LRAStatus nextState) {\n         status = nextState;\n \n         return (pendingList == null || pendingList.size() == 0) || deactivate();\n     }\n \n+    protected void checkParticipant(RecordList participants) {\n+        RecordListIterator i = new RecordListIterator(participants);\n+        AbstractRecord r;\n+\n+        while ((r = i.iterate()) != null) {\n+            if (r instanceof LRARecord) {\n+                LRARecord rec = (LRARecord) r;\n+\n+                rec.setLraService(getLraService());\n+                rec.setLRA(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYzOTcxNw==", "bodyText": "is this forgotten from testing? Some time ago you mentioned in one of my PRs that 1s is intentional and more than enough for modern network speeds.", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r374639717", "createdAt": "2020-02-04T12:24:20Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-service-base/src/main/java/io/narayana/lra/LRAHttpClient.java", "diffHunk": "@@ -19,7 +19,7 @@\n import java.util.concurrent.TimeoutException;\n \n public class LRAHttpClient {\n-    public static final long PARTICIPANT_TIMEOUT = 1; // number of seconds to wait for requests\n+    public static final long PARTICIPANT_TIMEOUT = 10; // number of seconds to wait for requests", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689", "author": {"user": {"login": "mmusgrov", "name": "Michael Musgrove"}}, "url": "https://github.com/jbosstm/narayana/commit/42eb8d46cc6f74f5d971d62bb7cf284ffe855689", "committedDate": "2020-02-03T18:25:40Z", "message": "JBTM-3239 Ensure post LRA actions are retried in the presence of failures"}, "afterCommit": {"oid": "26cc3c8576057ecff90faef34e5a6868ac458226", "author": {"user": {"login": "mmusgrov", "name": "Michael Musgrove"}}, "url": "https://github.com/jbosstm/narayana/commit/26cc3c8576057ecff90faef34e5a6868ac458226", "committedDate": "2020-02-04T17:52:47Z", "message": "JBTM-3239 Ensure post LRA actions are retried in the presence of failures"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "26cc3c8576057ecff90faef34e5a6868ac458226", "author": {"user": {"login": "mmusgrov", "name": "Michael Musgrove"}}, "url": "https://github.com/jbosstm/narayana/commit/26cc3c8576057ecff90faef34e5a6868ac458226", "committedDate": "2020-02-04T17:52:47Z", "message": "JBTM-3239 Ensure post LRA actions are retried in the presence of failures"}, "afterCommit": {"oid": "f2db3babd15da0a202da93b36e07bcef43ebd396", "author": {"user": {"login": "mmusgrov", "name": "Michael Musgrove"}}, "url": "https://github.com/jbosstm/narayana/commit/f2db3babd15da0a202da93b36e07bcef43ebd396", "committedDate": "2020-02-05T08:12:01Z", "message": "JBTM-3239 Ensure post LRA actions are retried in the presence of failures"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNjQ1MTk4", "url": "https://github.com/jbosstm/narayana/pull/1559#pullrequestreview-353645198", "createdAt": "2020-02-05T11:28:12Z", "commit": {"oid": "f2db3babd15da0a202da93b36e07bcef43ebd396"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMToyODoxMlrOFl0f9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMToyODoxMlrOFl0f9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwMTc4Mg==", "bodyText": "@mmusgrov please can you add a reference to https://issues.redhat.com/browse/JBTM-3163 here so we know why it is doing this twice. IIUC the comment from @xstefank then if that is fixed then this line will probably start failing as afterLRA will only be called twice.", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r375201782", "createdAt": "2020-02-05T11:28:12Z", "author": {"login": "tomjenkinson"}, "path": "rts/lra/lra-test/lra-test-basic/src/test/java/io/narayana/lra/arquillian/resource/FailingAfterLRAListener.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2019, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.resource;\n+\n+import org.eclipse.microprofile.lra.annotation.AfterLRA;\n+import org.eclipse.microprofile.lra.annotation.ws.rs.LRA;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.HeaderParam;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.core.Response;\n+import java.net.URI;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+@Path(FailingAfterLRAListener.ROOT_PATH)\n+public class FailingAfterLRAListener {\n+\n+    public static final String ROOT_PATH = \"failing-after-lra-listener\";\n+    public static final String ACTION_PATH = \"action\";\n+\n+    private static final AtomicInteger afterLRACounter = new AtomicInteger(0);\n+\n+    @GET\n+    @Path(ACTION_PATH)\n+    @LRA(LRA.Type.REQUIRED)\n+    public String doWorkInLRA(@HeaderParam(LRA.LRA_HTTP_CONTEXT_HEADER) URI lraId) {\n+        return lraId.toASCIIString();\n+    }\n+\n+    @PUT\n+    @Path(\"after-lra\")\n+    @AfterLRA\n+    public Response afterLRA(@HeaderParam(LRA.LRA_HTTP_ENDED_CONTEXT_HEADER) URI endedLRAId) {\n+        if (afterLRACounter.getAndIncrement() < 2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2db3babd15da0a202da93b36e07bcef43ebd396"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNjY4MzA3", "url": "https://github.com/jbosstm/narayana/pull/1559#pullrequestreview-353668307", "createdAt": "2020-02-05T12:11:00Z", "commit": {"oid": "f2db3babd15da0a202da93b36e07bcef43ebd396"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjoxMTowMFrOFl1lqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjoxMTowMFrOFl1lqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxOTYyNA==", "bodyText": "@xstefank @mmusgrov perhaps we could turn off automated recovery for this test if we want more predictability", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r375219624", "createdAt": "2020-02-05T12:11:00Z", "author": {"login": "tomjenkinson"}, "path": "rts/lra/lra-test/lra-test-arquillian-extension/src/main/java/io/narayana/lra/arquillian/spi/NarayanaLRARecovery.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.spi;\n+\n+import io.narayana.lra.LRAConstants;\n+import io.narayana.lra.logging.LRALogger;\n+\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.Response;\n+import java.net.URI;\n+\n+public class NarayanaLRARecovery {\n+\n+    public void waitForCallbacks(URI lraId) {\n+        // no action is needed, tck callbacks calls are sufficiently fast for TCK\n+    }\n+\n+    // TODO remove once this class implements LRARecoveryService\n+    public void waitForRecovery(URI lraId) {\n+        int counter = 0;\n+\n+        do {\n+            LRALogger.logger.info(\"Recovery attempt #\" + ++counter);\n+        } while (!waitForEndPhaseReplay(lraId));\n+        LRALogger.logger.info(\"LRA \" + lraId + \"has finished the recovery \" + counter);\n+    }\n+\n+    public boolean waitForEndPhaseReplay(URI lraId) {\n+        String host = lraId.getHost();\n+        int port = lraId.getPort();\n+        if (!recoverLRAs(host, port, lraId)) {\n+            // first recovery scan probably collided with periodic recovevery which started\n+            // before the test execution so try once more\n+            return recoverLRAs(host, port, lraId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2db3babd15da0a202da93b36e07bcef43ebd396"}, "originalPosition": 56}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f2db3babd15da0a202da93b36e07bcef43ebd396", "author": {"user": {"login": "mmusgrov", "name": "Michael Musgrove"}}, "url": "https://github.com/jbosstm/narayana/commit/f2db3babd15da0a202da93b36e07bcef43ebd396", "committedDate": "2020-02-05T08:12:01Z", "message": "JBTM-3239 Ensure post LRA actions are retried in the presence of failures"}, "afterCommit": {"oid": "b8f54959b9a418bcb8ca41e8bb518b6e61dc0180", "author": {"user": {"login": "mmusgrov", "name": "Michael Musgrove"}}, "url": "https://github.com/jbosstm/narayana/commit/b8f54959b9a418bcb8ca41e8bb518b6e61dc0180", "committedDate": "2020-02-07T09:09:29Z", "message": "JBTM-3239 Ensure post LRA actions are retried in the presence of failures"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MDc5MzYz", "url": "https://github.com/jbosstm/narayana/pull/1559#pullrequestreview-355079363", "createdAt": "2020-02-07T10:56:49Z", "commit": {"oid": "b8f54959b9a418bcb8ca41e8bb518b6e61dc0180"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMDo1Njo0OVrOFm5gZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMDo1Njo0OVrOFm5gZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMzMjM5MA==", "bodyText": "@mmusgrov please can you expand on the situation where afterURI can be null at this point and what the value of res could be?\nIf afterURI is null we will return TwoPhaseOutcome.FINISH_OK but res might not always be that from what I can see in above calls to atEnd(int) - including at least one call that might pass in HEURISTIC_HAZARD. Maybe in those cases afterURI could never be null? But then what about the one which uses a value from retryGetEndStatus or reportFailure", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r376332390", "createdAt": "2020-02-07T10:56:49Z", "author": {"login": "tomjenkinson"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRARecord.java", "diffHunk": "@@ -361,18 +375,88 @@ private int tryDoEnd(boolean compensate) {\n                  * so if we were to return FINISH_ERROR recovery would not replay the log.\n                  * To force the record to be eligible for recovery we return a heuristic hazard.\n                  */\n-                return TwoPhaseOutcome.HEURISTIC_HAZARD;\n+                return atEnd(TwoPhaseOutcome.HEURISTIC_HAZARD);\n             }\n \n             status = ParticipantStatus.Completing; // recovery will figure out the status via the status url\n \n-            return TwoPhaseOutcome.FINISH_ERROR;\n+            return atEnd(TwoPhaseOutcome.FINISH_ERROR);\n         }\n \n         updateStatus(compensate);\n \n         // if the the request is still in progress (ie accepted is true) let recovery finish it\n-        return accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK;\n+        return atEnd(accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK);\n+    }\n+\n+    boolean isFinished() {\n+        // nested participants must still be able to compensate even if they are closed\n+        if (compensateURI == null) {\n+            return afterURI != null;\n+        }\n+\n+        switch (status) {\n+            case Completed:\n+                /* FALLTHRU */\n+            case FailedToComplete:\n+                return parentId == null; // completed nested LRAs must remain cancellable\n+            case Compensated:\n+                /* FALLTHRU */\n+            case FailedToCompensate:\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private boolean afterLRARequest(URI target, Transaction lra, String payload) {\n+        try {\n+            RequestBuilder builder = new RequestBuilder(target)\n+                    .request()\n+                    .header(LRA.LRA_HTTP_RECOVERY_HEADER, recoveryURI.toASCIIString());\n+\n+            if (target.equals(afterURI)) {\n+                builder.header(LRA.LRA_HTTP_ENDED_CONTEXT_HEADER, lra.getId().toASCIIString());\n+            } else {\n+                builder.header(LRA.LRA_HTTP_CONTEXT_HEADER, lra.getId().toASCIIString());\n+            }\n+\n+            builder.async(PARTICIPANT_TIMEOUT, TimeUnit.SECONDS);\n+\n+            ResponseHolder response = target.equals(forgetURI) ? builder.delete() : builder.put(payload, MediaType.TEXT_PLAIN);\n+\n+            if (response.getStatus() == 200) {\n+                return true;\n+            }\n+        } catch (WebApplicationException e) {\n+            if (LRALogger.logger.isInfoEnabled()) {\n+                LRALogger.logger.infof(\"Could not notify URI at %s (%s)\", target, e.getMessage());\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    private int atEnd(int res) {\n+        // Only run the post LRA actions if both the LRA and participant are in an end state\n+        // check the participant first since it will have been removed from one of the lists\n+        if (!isFinished() || !lra.isFinished()) {\n+            if (afterURI != null) {\n+                return TwoPhaseOutcome.HEURISTIC_HAZARD;\n+            }\n+\n+            return res;\n+        }\n+\n+        // run post LRA actions\n+        if (afterURI == null || afterLRARequest(afterURI, lra, lra.getLRAStatus().name())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8f54959b9a418bcb8ca41e8bb518b6e61dc0180"}, "originalPosition": 189}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1ODA2MTE3", "url": "https://github.com/jbosstm/narayana/pull/1559#pullrequestreview-355806117", "createdAt": "2020-02-10T09:55:03Z", "commit": {"oid": "b8f54959b9a418bcb8ca41e8bb518b6e61dc0180"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOTo1NTowM1rOFnf2-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOTo1NTowM1rOFnf2-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk2MDc2MA==", "bodyText": "lra is a field so it should not be necessary to pass it into afterLRARequest method as two parameters.", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r376960760", "createdAt": "2020-02-10T09:55:03Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRARecord.java", "diffHunk": "@@ -361,18 +375,88 @@ private int tryDoEnd(boolean compensate) {\n                  * so if we were to return FINISH_ERROR recovery would not replay the log.\n                  * To force the record to be eligible for recovery we return a heuristic hazard.\n                  */\n-                return TwoPhaseOutcome.HEURISTIC_HAZARD;\n+                return atEnd(TwoPhaseOutcome.HEURISTIC_HAZARD);\n             }\n \n             status = ParticipantStatus.Completing; // recovery will figure out the status via the status url\n \n-            return TwoPhaseOutcome.FINISH_ERROR;\n+            return atEnd(TwoPhaseOutcome.FINISH_ERROR);\n         }\n \n         updateStatus(compensate);\n \n         // if the the request is still in progress (ie accepted is true) let recovery finish it\n-        return accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK;\n+        return atEnd(accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK);\n+    }\n+\n+    boolean isFinished() {\n+        // nested participants must still be able to compensate even if they are closed\n+        if (compensateURI == null) {\n+            return afterURI != null;\n+        }\n+\n+        switch (status) {\n+            case Completed:\n+                /* FALLTHRU */\n+            case FailedToComplete:\n+                return parentId == null; // completed nested LRAs must remain cancellable\n+            case Compensated:\n+                /* FALLTHRU */\n+            case FailedToCompensate:\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private boolean afterLRARequest(URI target, Transaction lra, String payload) {\n+        try {\n+            RequestBuilder builder = new RequestBuilder(target)\n+                    .request()\n+                    .header(LRA.LRA_HTTP_RECOVERY_HEADER, recoveryURI.toASCIIString());\n+\n+            if (target.equals(afterURI)) {\n+                builder.header(LRA.LRA_HTTP_ENDED_CONTEXT_HEADER, lra.getId().toASCIIString());\n+            } else {\n+                builder.header(LRA.LRA_HTTP_CONTEXT_HEADER, lra.getId().toASCIIString());\n+            }\n+\n+            builder.async(PARTICIPANT_TIMEOUT, TimeUnit.SECONDS);\n+\n+            ResponseHolder response = target.equals(forgetURI) ? builder.delete() : builder.put(payload, MediaType.TEXT_PLAIN);\n+\n+            if (response.getStatus() == 200) {\n+                return true;\n+            }\n+        } catch (WebApplicationException e) {\n+            if (LRALogger.logger.isInfoEnabled()) {\n+                LRALogger.logger.infof(\"Could not notify URI at %s (%s)\", target, e.getMessage());\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    private int atEnd(int res) {\n+        // Only run the post LRA actions if both the LRA and participant are in an end state\n+        // check the participant first since it will have been removed from one of the lists\n+        if (!isFinished() || !lra.isFinished()) {\n+            if (afterURI != null) {\n+                return TwoPhaseOutcome.HEURISTIC_HAZARD;\n+            }\n+\n+            return res;\n+        }\n+\n+        // run post LRA actions\n+        if (afterURI == null || afterLRARequest(afterURI, lra, lra.getLRAStatus().name())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8f54959b9a418bcb8ca41e8bb518b6e61dc0180"}, "originalPosition": 189}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1ODg1NjY4", "url": "https://github.com/jbosstm/narayana/pull/1559#pullrequestreview-355885668", "createdAt": "2020-02-10T12:05:38Z", "commit": {"oid": "b8f54959b9a418bcb8ca41e8bb518b6e61dc0180"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1251f4c912a3877ca791889947dcde2eb6c12720", "author": {"user": {"login": "xstefank", "name": "Martin Stefanko"}}, "url": "https://github.com/jbosstm/narayana/commit/1251f4c912a3877ca791889947dcde2eb6c12720", "committedDate": "2020-02-11T17:32:42Z", "message": "Add test for JBTM-3239"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64549aff3af051794b994967e3c76f82ac18b943", "author": {"user": {"login": "mmusgrov", "name": "Michael Musgrove"}}, "url": "https://github.com/jbosstm/narayana/commit/64549aff3af051794b994967e3c76f82ac18b943", "committedDate": "2020-02-11T17:32:42Z", "message": "JBTM-3239 Ensure post LRA actions are retried in the presence of failures"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b8f54959b9a418bcb8ca41e8bb518b6e61dc0180", "author": {"user": {"login": "mmusgrov", "name": "Michael Musgrove"}}, "url": "https://github.com/jbosstm/narayana/commit/b8f54959b9a418bcb8ca41e8bb518b6e61dc0180", "committedDate": "2020-02-07T09:09:29Z", "message": "JBTM-3239 Ensure post LRA actions are retried in the presence of failures"}, "afterCommit": {"oid": "64549aff3af051794b994967e3c76f82ac18b943", "author": {"user": {"login": "mmusgrov", "name": "Michael Musgrove"}}, "url": "https://github.com/jbosstm/narayana/commit/64549aff3af051794b994967e3c76f82ac18b943", "committedDate": "2020-02-11T17:32:42Z", "message": "JBTM-3239 Ensure post LRA actions are retried in the presence of failures"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4516, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}