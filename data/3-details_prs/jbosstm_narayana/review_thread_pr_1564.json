{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MTg2MjQ3", "number": 1564, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzo1MTowM1rODlbfcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzo1NTo0MFrODlbmMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTc0MzIzOnYy", "diffSide": "RIGHT", "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/arjuna/StateManager.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzo1MTowM1rOFyUORQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzozOToxNVrOFydUQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwNDQ1Mw==", "bodyText": "What is the performance difference between packing the bytes directly versus packing the string - is it that the string copy (os.packString(StateManager.marker)) is avoided?", "url": "https://github.com/jbosstm/narayana/pull/1564#discussion_r388304453", "createdAt": "2020-03-05T13:51:03Z", "author": {"login": "mmusgrov"}, "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/arjuna/StateManager.java", "diffHunk": "@@ -641,12 +642,12 @@ protected void packHeader (OutputObjectState os, Header hdr)\n \n         Uid txId = ((hdr == null) ? null : hdr.getTxId());\n         Uid processUid = ((hdr == null) ? null : hdr.getProcessId());\n-        \n+\n         try\n         {\n             // pack the marker first.\n \n-            os.packString(StateManager.marker);\n+            os.packStringBytes(markerBytes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aed8dc5cf6387e6bfb3408a244d3a2a2e165eb48"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMxMjg4Mg==", "bodyText": "The calculation that transforms the String's internal representation (char[]) to the encoded form (byte[]) need not be repeated for every single StateManager instance (which is MANY), in addition to which you avoid the gc churn and copies to/from the short-lived byte[] that's needed by the encoder. The actual packing once you have the byte[] is then the same either way. The encoding is a trivial overhead on tx that hit the network, but worth a 1-2% on in-memory cases. May not have bothered, except it's easy to piggyback the optimization onto the bug fix.", "url": "https://github.com/jbosstm/narayana/pull/1564#discussion_r388312882", "createdAt": "2020-03-05T14:04:57Z", "author": {"login": "jhalliday"}, "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/arjuna/StateManager.java", "diffHunk": "@@ -641,12 +642,12 @@ protected void packHeader (OutputObjectState os, Header hdr)\n \n         Uid txId = ((hdr == null) ? null : hdr.getTxId());\n         Uid processUid = ((hdr == null) ? null : hdr.getProcessId());\n-        \n+\n         try\n         {\n             // pack the marker first.\n \n-            os.packString(StateManager.marker);\n+            os.packStringBytes(markerBytes);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwNDQ1Mw=="}, "originalCommit": {"oid": "aed8dc5cf6387e6bfb3408a244d3a2a2e165eb48"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1MzQ0MA==", "bodyText": "@jhalliday  maybe a matter of taste but would not be better to use StateManager.markerBytes when the static variable is accessed here?", "url": "https://github.com/jbosstm/narayana/pull/1564#discussion_r388453440", "createdAt": "2020-03-05T17:39:15Z", "author": {"login": "ochaloup"}, "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/arjuna/StateManager.java", "diffHunk": "@@ -641,12 +642,12 @@ protected void packHeader (OutputObjectState os, Header hdr)\n \n         Uid txId = ((hdr == null) ? null : hdr.getTxId());\n         Uid processUid = ((hdr == null) ? null : hdr.getProcessId());\n-        \n+\n         try\n         {\n             // pack the marker first.\n \n-            os.packString(StateManager.marker);\n+            os.packStringBytes(markerBytes);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwNDQ1Mw=="}, "originalCommit": {"oid": "aed8dc5cf6387e6bfb3408a244d3a2a2e165eb48"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTc2MDQ5OnYy", "diffSide": "RIGHT", "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/arjuna/state/OutputBuffer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzo1NTo0MFrOFyUZEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNDowODoyMVrOFyU2xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwNzIxNg==", "bodyText": "Just a question - did the original code add space for the string delimiter but not actually pack it into the output buffer? How did you uncover this bug?", "url": "https://github.com/jbosstm/narayana/pull/1564#discussion_r388307216", "createdAt": "2020-03-05T13:55:40Z", "author": {"login": "mmusgrov"}, "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/arjuna/state/OutputBuffer.java", "diffHunk": "@@ -358,26 +358,26 @@ public final synchronized void packString (String s) throws IOException\n         if (!_valid)\n             throw new IOException(tsLogger.i18NLogger.get_state_OutputBuffer_10());\n \n-        int sz = 0;\n-        String dummy = null;\n-\n-        if (s != null)\n-        {\n-            sz = s.length() + 1;\n-            dummy = s + '\\0';\n+        if(s == null) {\n+            packInt(0);\n+        } else {\n+            packStringBytes( s.getBytes(StandardCharsets.UTF_8) );\n+        }\n+    }\n \n+    public final synchronized void packStringBytes(byte[] bytes) throws IOException\n+    {\n+        if (!_valid || bytes == null) {\n+            throw new IOException(tsLogger.i18NLogger.get_state_OutputBuffer_10());\n         }\n \n-        packInt(sz);\n+        packInt(bytes.length+1);\n \n         _valid = false;\n \n-        if (sz > 0)\n-        {\n-            byte[] bytes = dummy.getBytes(StandardCharsets.UTF_8);\n-            _output.write(bytes, 0, bytes.length);\n-            realign(bytes.length);\n-        }\n+        _output.write(bytes, 0, bytes.length);\n+        _output.writeByte(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cbe156bd6f7066d43f4b048082a569e63e78288"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMxNDgyMQ==", "bodyText": "The original works by creating a new string with the terminator appended as a charater, then sizing/encoding that in a single step, rather than treating the string and the terminator as separate elements. The latter is more efficient, as it avoids creating an additional String object.", "url": "https://github.com/jbosstm/narayana/pull/1564#discussion_r388314821", "createdAt": "2020-03-05T14:08:21Z", "author": {"login": "jhalliday"}, "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/arjuna/state/OutputBuffer.java", "diffHunk": "@@ -358,26 +358,26 @@ public final synchronized void packString (String s) throws IOException\n         if (!_valid)\n             throw new IOException(tsLogger.i18NLogger.get_state_OutputBuffer_10());\n \n-        int sz = 0;\n-        String dummy = null;\n-\n-        if (s != null)\n-        {\n-            sz = s.length() + 1;\n-            dummy = s + '\\0';\n+        if(s == null) {\n+            packInt(0);\n+        } else {\n+            packStringBytes( s.getBytes(StandardCharsets.UTF_8) );\n+        }\n+    }\n \n+    public final synchronized void packStringBytes(byte[] bytes) throws IOException\n+    {\n+        if (!_valid || bytes == null) {\n+            throw new IOException(tsLogger.i18NLogger.get_state_OutputBuffer_10());\n         }\n \n-        packInt(sz);\n+        packInt(bytes.length+1);\n \n         _valid = false;\n \n-        if (sz > 0)\n-        {\n-            byte[] bytes = dummy.getBytes(StandardCharsets.UTF_8);\n-            _output.write(bytes, 0, bytes.length);\n-            realign(bytes.length);\n-        }\n+        _output.write(bytes, 0, bytes.length);\n+        _output.writeByte(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwNzIxNg=="}, "originalCommit": {"oid": "3cbe156bd6f7066d43f4b048082a569e63e78288"}, "originalPosition": 91}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1263, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}