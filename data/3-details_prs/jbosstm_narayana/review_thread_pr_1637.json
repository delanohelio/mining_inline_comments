{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1Nzc2MTky", "number": 1637, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzoyMzoxMFrOEHBJfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMjozMjowMVrOEHGYJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Nzk0MzAyOnYy", "diffSide": "RIGHT", "path": "rts/lra/lra-test/lra-test-arquillian-extension/src/main/java/io/narayana/lra/arquillian/spi/LRAAnnotationAdjuster.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzoyMzoxMFrOGmKxNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMDoyMzowMFrOGmP5WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY3NTUwOA==", "bodyText": "My IDE says this is a varargs param so you don't need to use null.", "url": "https://github.com/jbosstm/narayana/pull/1637#discussion_r442675508", "createdAt": "2020-06-19T07:23:10Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-test/lra-test-arquillian-extension/src/main/java/io/narayana/lra/arquillian/spi/LRAAnnotationAdjuster.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.spi;\n+\n+import org.eclipse.microprofile.lra.annotation.ws.rs.LRA;\n+import org.jboss.logging.Logger;\n+\n+import javax.ws.rs.core.Response;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+/**\n+ * Helper class to do internal changes of annotations during runtime.\n+ */\n+public class LRAAnnotationAdjuster {\n+    private static final Logger log = Logger.getLogger(LRAAnnotationAdjuster.class);\n+    private static final String ANNOTATIONS_FIELD_NAME = \"annotations\";\n+    private static final String ANNOTATION_DATA_METHOD_NAME = \"annotationData\";\n+\n+    /**\n+     * Take the clazz, check if contains the {@link LRA} annotation.\n+     * The LRA annotation is then replaced by wrapped {@link LRAWrapped}.\n+     */\n+    static void processWithClass(Class<?> clazz) {\n+        LRA lraAnnotation = clazz.getDeclaredAnnotation(LRA.class);\n+        if (lraAnnotation != null) {\n+            LRAAnnotationAdjuster.adjustLRAAnnotation(clazz, lraAnnotation);\n+        }\n+        Arrays.stream(clazz.getMethods()).forEach(method -> {\n+            LRA lraAnnotationMethod = method.getDeclaredAnnotation(LRA.class);\n+            if (lraAnnotationMethod != null) {\n+                LRAAnnotationAdjuster.adjustLRAAnnotation(method, lraAnnotationMethod);\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Changing the LRA annotation declared on class by wrapping it with {@link LRAWrapped}.\n+     */\n+    static void adjustLRAAnnotation(Class clazzToLookFor, LRA originalLRAAnnotation) {\n+        if (doesJDKDefineAnnotationsField()) {\n+            // JDK7 has \"annotations\" field\n+            try {\n+                Field annotations = Class.class.getDeclaredField(ANNOTATIONS_FIELD_NAME);\n+                annotations.setAccessible(true);\n+                Map<Class<? extends Annotation>, Annotation> map =\n+                        (Map<Class<? extends Annotation>, Annotation>) annotations.get(clazzToLookFor);\n+                map.put(LRA.class, new LRAWrapped(originalLRAAnnotation));\n+            } catch (Exception  e) {\n+                e.printStackTrace();\n+            }\n+        } else {\n+            try {\n+                // JDK8+ has \"annotationData\" private method\n+                // obtaining reference to private class AnnotationData\n+                Method method = Class.class.getDeclaredMethod(ANNOTATION_DATA_METHOD_NAME, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82ebd15bb3b94e6b4b82f4bc6fc71052e74c0a9e"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc1OTUxMg==", "bodyText": "+1", "url": "https://github.com/jbosstm/narayana/pull/1637#discussion_r442759512", "createdAt": "2020-06-19T10:23:00Z", "author": {"login": "ochaloup"}, "path": "rts/lra/lra-test/lra-test-arquillian-extension/src/main/java/io/narayana/lra/arquillian/spi/LRAAnnotationAdjuster.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.spi;\n+\n+import org.eclipse.microprofile.lra.annotation.ws.rs.LRA;\n+import org.jboss.logging.Logger;\n+\n+import javax.ws.rs.core.Response;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+/**\n+ * Helper class to do internal changes of annotations during runtime.\n+ */\n+public class LRAAnnotationAdjuster {\n+    private static final Logger log = Logger.getLogger(LRAAnnotationAdjuster.class);\n+    private static final String ANNOTATIONS_FIELD_NAME = \"annotations\";\n+    private static final String ANNOTATION_DATA_METHOD_NAME = \"annotationData\";\n+\n+    /**\n+     * Take the clazz, check if contains the {@link LRA} annotation.\n+     * The LRA annotation is then replaced by wrapped {@link LRAWrapped}.\n+     */\n+    static void processWithClass(Class<?> clazz) {\n+        LRA lraAnnotation = clazz.getDeclaredAnnotation(LRA.class);\n+        if (lraAnnotation != null) {\n+            LRAAnnotationAdjuster.adjustLRAAnnotation(clazz, lraAnnotation);\n+        }\n+        Arrays.stream(clazz.getMethods()).forEach(method -> {\n+            LRA lraAnnotationMethod = method.getDeclaredAnnotation(LRA.class);\n+            if (lraAnnotationMethod != null) {\n+                LRAAnnotationAdjuster.adjustLRAAnnotation(method, lraAnnotationMethod);\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Changing the LRA annotation declared on class by wrapping it with {@link LRAWrapped}.\n+     */\n+    static void adjustLRAAnnotation(Class clazzToLookFor, LRA originalLRAAnnotation) {\n+        if (doesJDKDefineAnnotationsField()) {\n+            // JDK7 has \"annotations\" field\n+            try {\n+                Field annotations = Class.class.getDeclaredField(ANNOTATIONS_FIELD_NAME);\n+                annotations.setAccessible(true);\n+                Map<Class<? extends Annotation>, Annotation> map =\n+                        (Map<Class<? extends Annotation>, Annotation>) annotations.get(clazzToLookFor);\n+                map.put(LRA.class, new LRAWrapped(originalLRAAnnotation));\n+            } catch (Exception  e) {\n+                e.printStackTrace();\n+            }\n+        } else {\n+            try {\n+                // JDK8+ has \"annotationData\" private method\n+                // obtaining reference to private class AnnotationData\n+                Method method = Class.class.getDeclaredMethod(ANNOTATION_DATA_METHOD_NAME, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY3NTUwOA=="}, "originalCommit": {"oid": "82ebd15bb3b94e6b4b82f4bc6fc71052e74c0a9e"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Nzk2MTI4OnYy", "diffSide": "RIGHT", "path": "rts/lra/lra-test/lra-test-arquillian-extension/src/main/java/io/narayana/lra/arquillian/spi/LRAAnnotationAdjuster.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzoyOToxOVrOGmK8Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMDoyNDozN1rOGmP8DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY3ODMzOA==", "bodyText": "Fiendishly clever.\nAs an aside, we'd need to remember to change this class if the LRA annotation changes in MP-LRA 1.x.", "url": "https://github.com/jbosstm/narayana/pull/1637#discussion_r442678338", "createdAt": "2020-06-19T07:29:19Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-test/lra-test-arquillian-extension/src/main/java/io/narayana/lra/arquillian/spi/LRAAnnotationAdjuster.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.spi;\n+\n+import org.eclipse.microprofile.lra.annotation.ws.rs.LRA;\n+import org.jboss.logging.Logger;\n+\n+import javax.ws.rs.core.Response;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+/**\n+ * Helper class to do internal changes of annotations during runtime.\n+ */\n+public class LRAAnnotationAdjuster {\n+    private static final Logger log = Logger.getLogger(LRAAnnotationAdjuster.class);\n+    private static final String ANNOTATIONS_FIELD_NAME = \"annotations\";\n+    private static final String ANNOTATION_DATA_METHOD_NAME = \"annotationData\";\n+\n+    /**\n+     * Take the clazz, check if contains the {@link LRA} annotation.\n+     * The LRA annotation is then replaced by wrapped {@link LRAWrapped}.\n+     */\n+    static void processWithClass(Class<?> clazz) {\n+        LRA lraAnnotation = clazz.getDeclaredAnnotation(LRA.class);\n+        if (lraAnnotation != null) {\n+            LRAAnnotationAdjuster.adjustLRAAnnotation(clazz, lraAnnotation);\n+        }\n+        Arrays.stream(clazz.getMethods()).forEach(method -> {\n+            LRA lraAnnotationMethod = method.getDeclaredAnnotation(LRA.class);\n+            if (lraAnnotationMethod != null) {\n+                LRAAnnotationAdjuster.adjustLRAAnnotation(method, lraAnnotationMethod);\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Changing the LRA annotation declared on class by wrapping it with {@link LRAWrapped}.\n+     */\n+    static void adjustLRAAnnotation(Class clazzToLookFor, LRA originalLRAAnnotation) {\n+        if (doesJDKDefineAnnotationsField()) {\n+            // JDK7 has \"annotations\" field\n+            try {\n+                Field annotations = Class.class.getDeclaredField(ANNOTATIONS_FIELD_NAME);\n+                annotations.setAccessible(true);\n+                Map<Class<? extends Annotation>, Annotation> map =\n+                        (Map<Class<? extends Annotation>, Annotation>) annotations.get(clazzToLookFor);\n+                map.put(LRA.class, new LRAWrapped(originalLRAAnnotation));\n+            } catch (Exception  e) {\n+                e.printStackTrace();\n+            }\n+        } else {\n+            try {\n+                // JDK8+ has \"annotationData\" private method\n+                // obtaining reference to private class AnnotationData\n+                Method method = Class.class.getDeclaredMethod(ANNOTATION_DATA_METHOD_NAME, null);\n+                method.setAccessible(true);\n+                // AnnotationData is private need to work with Object\n+                Object annotationData = method.invoke(clazzToLookFor);\n+                // AnnotationData works with map annotations\n+                Field annotations = annotationData.getClass().getDeclaredField(ANNOTATIONS_FIELD_NAME);\n+                annotations.setAccessible(true);\n+                Map<Class<? extends Annotation>, Annotation> map =\n+                        (Map<Class<? extends Annotation>, Annotation>) annotations.get(annotationData);\n+                log.debugf(\"Adjusting LRA annotation %s for class %s%n\", originalLRAAnnotation, clazzToLookFor.getName());\n+                map.put(LRA.class, new LRAWrapped(originalLRAAnnotation));\n+            } catch (Exception  e) {\n+                throw new IllegalStateException(\"Cannot change annotation \" + originalLRAAnnotation\n+                        + \" of class \" + clazzToLookFor, e);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Changing the LRA annotation declared on method by wrapping it with {@link LRAWrapped}.\n+     */\n+    static void adjustLRAAnnotation(Method method, LRA originalLRAAnnotation) {\n+        Field field = null;\n+        try {\n+            Class<?> executableClass = Class.forName(\"java.lang.reflect.Executable\");\n+            field = executableClass.getDeclaredField(\"declaredAnnotations\");\n+            field.setAccessible(true);\n+        } catch (ClassNotFoundException cnfe) {\n+            throw new IllegalStateException(\"Cannot instantiate class java.lang.reflect.Executable\", cnfe);\n+        } catch (NoSuchFieldException nsfe) {\n+            throw new IllegalStateException(\"Cannot find field 'declaredAnnotations' under instantiate class java.lang.reflect.Executable\", nsfe);\n+        }\n+        Map<Class<? extends Annotation>, Annotation> annotations = null;\n+        try {\n+            annotations = (Map<Class<? extends Annotation>, Annotation>) field.get(method);\n+        } catch (IllegalAccessException iae) {\n+            throw new IllegalStateException(\"Cannnot access field 'declaredAnnotations' of the method instance \" + method, iae);\n+        }\n+        log.debugf(\"Adjusting LRA annotation %s for method %s of class %s%n\",\n+                originalLRAAnnotation, method, method.getDeclaringClass().getName());\n+        annotations.put(LRA.class, new LRAWrapped(originalLRAAnnotation));\n+    }\n+\n+    /**\n+     * Expected for JDK lower to 7\n+     */\n+    private static boolean doesJDKDefineAnnotationsField() {\n+        boolean jdkLower = true;\n+        try {\n+            Class.class.getDeclaredField(ANNOTATIONS_FIELD_NAME);\n+        } catch (NoSuchFieldException ignore) {\n+            jdkLower = false;\n+        }\n+        return jdkLower;\n+    }\n+\n+    private static class LRAWrapped implements LRA {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82ebd15bb3b94e6b4b82f4bc6fc71052e74c0a9e"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc2MDIwNQ==", "bodyText": "sure. I think that should be fine as this is part of the test which is usually compiled and run. The compilation would fail if the LRAWrapped does not implement some LRA method (or implement a different definition).", "url": "https://github.com/jbosstm/narayana/pull/1637#discussion_r442760205", "createdAt": "2020-06-19T10:24:37Z", "author": {"login": "ochaloup"}, "path": "rts/lra/lra-test/lra-test-arquillian-extension/src/main/java/io/narayana/lra/arquillian/spi/LRAAnnotationAdjuster.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.spi;\n+\n+import org.eclipse.microprofile.lra.annotation.ws.rs.LRA;\n+import org.jboss.logging.Logger;\n+\n+import javax.ws.rs.core.Response;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+/**\n+ * Helper class to do internal changes of annotations during runtime.\n+ */\n+public class LRAAnnotationAdjuster {\n+    private static final Logger log = Logger.getLogger(LRAAnnotationAdjuster.class);\n+    private static final String ANNOTATIONS_FIELD_NAME = \"annotations\";\n+    private static final String ANNOTATION_DATA_METHOD_NAME = \"annotationData\";\n+\n+    /**\n+     * Take the clazz, check if contains the {@link LRA} annotation.\n+     * The LRA annotation is then replaced by wrapped {@link LRAWrapped}.\n+     */\n+    static void processWithClass(Class<?> clazz) {\n+        LRA lraAnnotation = clazz.getDeclaredAnnotation(LRA.class);\n+        if (lraAnnotation != null) {\n+            LRAAnnotationAdjuster.adjustLRAAnnotation(clazz, lraAnnotation);\n+        }\n+        Arrays.stream(clazz.getMethods()).forEach(method -> {\n+            LRA lraAnnotationMethod = method.getDeclaredAnnotation(LRA.class);\n+            if (lraAnnotationMethod != null) {\n+                LRAAnnotationAdjuster.adjustLRAAnnotation(method, lraAnnotationMethod);\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Changing the LRA annotation declared on class by wrapping it with {@link LRAWrapped}.\n+     */\n+    static void adjustLRAAnnotation(Class clazzToLookFor, LRA originalLRAAnnotation) {\n+        if (doesJDKDefineAnnotationsField()) {\n+            // JDK7 has \"annotations\" field\n+            try {\n+                Field annotations = Class.class.getDeclaredField(ANNOTATIONS_FIELD_NAME);\n+                annotations.setAccessible(true);\n+                Map<Class<? extends Annotation>, Annotation> map =\n+                        (Map<Class<? extends Annotation>, Annotation>) annotations.get(clazzToLookFor);\n+                map.put(LRA.class, new LRAWrapped(originalLRAAnnotation));\n+            } catch (Exception  e) {\n+                e.printStackTrace();\n+            }\n+        } else {\n+            try {\n+                // JDK8+ has \"annotationData\" private method\n+                // obtaining reference to private class AnnotationData\n+                Method method = Class.class.getDeclaredMethod(ANNOTATION_DATA_METHOD_NAME, null);\n+                method.setAccessible(true);\n+                // AnnotationData is private need to work with Object\n+                Object annotationData = method.invoke(clazzToLookFor);\n+                // AnnotationData works with map annotations\n+                Field annotations = annotationData.getClass().getDeclaredField(ANNOTATIONS_FIELD_NAME);\n+                annotations.setAccessible(true);\n+                Map<Class<? extends Annotation>, Annotation> map =\n+                        (Map<Class<? extends Annotation>, Annotation>) annotations.get(annotationData);\n+                log.debugf(\"Adjusting LRA annotation %s for class %s%n\", originalLRAAnnotation, clazzToLookFor.getName());\n+                map.put(LRA.class, new LRAWrapped(originalLRAAnnotation));\n+            } catch (Exception  e) {\n+                throw new IllegalStateException(\"Cannot change annotation \" + originalLRAAnnotation\n+                        + \" of class \" + clazzToLookFor, e);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Changing the LRA annotation declared on method by wrapping it with {@link LRAWrapped}.\n+     */\n+    static void adjustLRAAnnotation(Method method, LRA originalLRAAnnotation) {\n+        Field field = null;\n+        try {\n+            Class<?> executableClass = Class.forName(\"java.lang.reflect.Executable\");\n+            field = executableClass.getDeclaredField(\"declaredAnnotations\");\n+            field.setAccessible(true);\n+        } catch (ClassNotFoundException cnfe) {\n+            throw new IllegalStateException(\"Cannot instantiate class java.lang.reflect.Executable\", cnfe);\n+        } catch (NoSuchFieldException nsfe) {\n+            throw new IllegalStateException(\"Cannot find field 'declaredAnnotations' under instantiate class java.lang.reflect.Executable\", nsfe);\n+        }\n+        Map<Class<? extends Annotation>, Annotation> annotations = null;\n+        try {\n+            annotations = (Map<Class<? extends Annotation>, Annotation>) field.get(method);\n+        } catch (IllegalAccessException iae) {\n+            throw new IllegalStateException(\"Cannnot access field 'declaredAnnotations' of the method instance \" + method, iae);\n+        }\n+        log.debugf(\"Adjusting LRA annotation %s for method %s of class %s%n\",\n+                originalLRAAnnotation, method, method.getDeclaringClass().getName());\n+        annotations.put(LRA.class, new LRAWrapped(originalLRAAnnotation));\n+    }\n+\n+    /**\n+     * Expected for JDK lower to 7\n+     */\n+    private static boolean doesJDKDefineAnnotationsField() {\n+        boolean jdkLower = true;\n+        try {\n+            Class.class.getDeclaredField(ANNOTATIONS_FIELD_NAME);\n+        } catch (NoSuchFieldException ignore) {\n+            jdkLower = false;\n+        }\n+        return jdkLower;\n+    }\n+\n+    private static class LRAWrapped implements LRA {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY3ODMzOA=="}, "originalCommit": {"oid": "82ebd15bb3b94e6b4b82f4bc6fc71052e74c0a9e"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODc3MzU3OnYy", "diffSide": "RIGHT", "path": "rts/lra/lra-test/lra-test-arquillian-extension/src/main/java/io/narayana/lra/arquillian/spi/LRAAnnotationAdjuster.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMjoyMzoxM1rOGmS5Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMjo0Mjo0OFrOGmTdEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwODY3NA==", "bodyText": "I think you prefer logging instead of stack traces.", "url": "https://github.com/jbosstm/narayana/pull/1637#discussion_r442808674", "createdAt": "2020-06-19T12:23:13Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-test/lra-test-arquillian-extension/src/main/java/io/narayana/lra/arquillian/spi/LRAAnnotationAdjuster.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.spi;\n+\n+import org.eclipse.microprofile.lra.annotation.ws.rs.LRA;\n+import org.jboss.logging.Logger;\n+\n+import javax.ws.rs.core.Response;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+/**\n+ * Helper class to do internal changes of annotations during runtime.\n+ */\n+public class LRAAnnotationAdjuster {\n+    private static final Logger log = Logger.getLogger(LRAAnnotationAdjuster.class);\n+    private static final String ANNOTATIONS_FIELD_NAME = \"annotations\";\n+    private static final String ANNOTATION_DATA_METHOD_NAME = \"annotationData\";\n+\n+    /**\n+     * Take the clazz, check if contains the {@link LRA} annotation.\n+     * The LRA annotation is then replaced by wrapped {@link LRAWrapped}.\n+     */\n+    static void processWithClass(Class<?> clazz) {\n+        LRA lraAnnotation = clazz.getDeclaredAnnotation(LRA.class);\n+        if (lraAnnotation != null) {\n+            LRAAnnotationAdjuster.adjustLRAAnnotation(clazz, lraAnnotation);\n+        }\n+        Arrays.stream(clazz.getMethods()).forEach(method -> {\n+            LRA lraAnnotationMethod = method.getDeclaredAnnotation(LRA.class);\n+            if (lraAnnotationMethod != null) {\n+                LRAAnnotationAdjuster.adjustLRAAnnotation(method, lraAnnotationMethod);\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Changing the LRA annotation declared on class by wrapping it with {@link LRAWrapped}.\n+     */\n+    static void adjustLRAAnnotation(Class clazzToLookFor, LRA originalLRAAnnotation) {\n+        if (doesJDKDefineAnnotationsField()) {\n+            // JDK7 has \"annotations\" field\n+            try {\n+                Field annotations = Class.class.getDeclaredField(ANNOTATIONS_FIELD_NAME);\n+                annotations.setAccessible(true);\n+                Map<Class<? extends Annotation>, Annotation> map =\n+                        (Map<Class<? extends Annotation>, Annotation>) annotations.get(clazzToLookFor);\n+                map.put(LRA.class, new LRAWrapped(originalLRAAnnotation));\n+            } catch (Exception  e) {\n+                e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82ebd15bb3b94e6b4b82f4bc6fc71052e74c0a9e"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxNzgwOQ==", "bodyText": "+1", "url": "https://github.com/jbosstm/narayana/pull/1637#discussion_r442817809", "createdAt": "2020-06-19T12:42:48Z", "author": {"login": "ochaloup"}, "path": "rts/lra/lra-test/lra-test-arquillian-extension/src/main/java/io/narayana/lra/arquillian/spi/LRAAnnotationAdjuster.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.spi;\n+\n+import org.eclipse.microprofile.lra.annotation.ws.rs.LRA;\n+import org.jboss.logging.Logger;\n+\n+import javax.ws.rs.core.Response;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+/**\n+ * Helper class to do internal changes of annotations during runtime.\n+ */\n+public class LRAAnnotationAdjuster {\n+    private static final Logger log = Logger.getLogger(LRAAnnotationAdjuster.class);\n+    private static final String ANNOTATIONS_FIELD_NAME = \"annotations\";\n+    private static final String ANNOTATION_DATA_METHOD_NAME = \"annotationData\";\n+\n+    /**\n+     * Take the clazz, check if contains the {@link LRA} annotation.\n+     * The LRA annotation is then replaced by wrapped {@link LRAWrapped}.\n+     */\n+    static void processWithClass(Class<?> clazz) {\n+        LRA lraAnnotation = clazz.getDeclaredAnnotation(LRA.class);\n+        if (lraAnnotation != null) {\n+            LRAAnnotationAdjuster.adjustLRAAnnotation(clazz, lraAnnotation);\n+        }\n+        Arrays.stream(clazz.getMethods()).forEach(method -> {\n+            LRA lraAnnotationMethod = method.getDeclaredAnnotation(LRA.class);\n+            if (lraAnnotationMethod != null) {\n+                LRAAnnotationAdjuster.adjustLRAAnnotation(method, lraAnnotationMethod);\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Changing the LRA annotation declared on class by wrapping it with {@link LRAWrapped}.\n+     */\n+    static void adjustLRAAnnotation(Class clazzToLookFor, LRA originalLRAAnnotation) {\n+        if (doesJDKDefineAnnotationsField()) {\n+            // JDK7 has \"annotations\" field\n+            try {\n+                Field annotations = Class.class.getDeclaredField(ANNOTATIONS_FIELD_NAME);\n+                annotations.setAccessible(true);\n+                Map<Class<? extends Annotation>, Annotation> map =\n+                        (Map<Class<? extends Annotation>, Annotation>) annotations.get(clazzToLookFor);\n+                map.put(LRA.class, new LRAWrapped(originalLRAAnnotation));\n+            } catch (Exception  e) {\n+                e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwODY3NA=="}, "originalCommit": {"oid": "82ebd15bb3b94e6b4b82f4bc6fc71052e74c0a9e"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODc5OTc1OnYy", "diffSide": "RIGHT", "path": "rts/lra/lra-test/lra-test-arquillian-extension/src/main/java/io/narayana/lra/arquillian/spi/NarayanaLRARecovery.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMjozMjowMVrOGmTJaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzo0NjoyMlrOGnBUsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMjc3Ng==", "bodyText": "wouldn't be better to use getName() here?", "url": "https://github.com/jbosstm/narayana/pull/1637#discussion_r442812776", "createdAt": "2020-06-19T12:32:01Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-test/lra-test-arquillian-extension/src/main/java/io/narayana/lra/arquillian/spi/NarayanaLRARecovery.java", "diffHunk": "@@ -32,6 +33,25 @@\n import java.net.URI;\n \n public class NarayanaLRARecovery implements LRARecoveryService {\n+    private static final Logger log = Logger.getLogger(NarayanaLRARecovery.class);\n+\n+    /**\n+     * A bit of hacking to change the internals of annotations defined in LRA TCK.\n+     * There is need to adjust timeout defined on the annotation definition.\n+     */\n+    static {\n+        String[] resourceClassNames = new String[]{\n+                \"org.eclipse.microprofile.lra.tck.participant.api.LraResource\",\n+                \"org.eclipse.microprofile.lra.tck.participant.api.RecoveryResource\"};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82ebd15bb3b94e6b4b82f4bc6fc71052e74c0a9e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk2ODk5MQ==", "bodyText": "not using the getName() was intentional. If the extension is used for deployments where these resources are not provided then using of the Class.getName() makes the whole NarayanaLRARecoveryfailing as it tries to link a class which is not on classpath.\nIt's the case e.g. for lra-test-basic where those classes are not available.", "url": "https://github.com/jbosstm/narayana/pull/1637#discussion_r442968991", "createdAt": "2020-06-19T17:42:13Z", "author": {"login": "ochaloup"}, "path": "rts/lra/lra-test/lra-test-arquillian-extension/src/main/java/io/narayana/lra/arquillian/spi/NarayanaLRARecovery.java", "diffHunk": "@@ -32,6 +33,25 @@\n import java.net.URI;\n \n public class NarayanaLRARecovery implements LRARecoveryService {\n+    private static final Logger log = Logger.getLogger(NarayanaLRARecovery.class);\n+\n+    /**\n+     * A bit of hacking to change the internals of annotations defined in LRA TCK.\n+     * There is need to adjust timeout defined on the annotation definition.\n+     */\n+    static {\n+        String[] resourceClassNames = new String[]{\n+                \"org.eclipse.microprofile.lra.tck.participant.api.LraResource\",\n+                \"org.eclipse.microprofile.lra.tck.participant.api.RecoveryResource\"};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMjc3Ng=="}, "originalCommit": {"oid": "82ebd15bb3b94e6b4b82f4bc6fc71052e74c0a9e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE0Mjc4MA==", "bodyText": "wouldn't it be better than to add LRA TCK dependency to the basic module (or better this module) then to keep track of possible renames in the dependent project? :)", "url": "https://github.com/jbosstm/narayana/pull/1637#discussion_r443142780", "createdAt": "2020-06-20T16:27:18Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-test/lra-test-arquillian-extension/src/main/java/io/narayana/lra/arquillian/spi/NarayanaLRARecovery.java", "diffHunk": "@@ -32,6 +33,25 @@\n import java.net.URI;\n \n public class NarayanaLRARecovery implements LRARecoveryService {\n+    private static final Logger log = Logger.getLogger(NarayanaLRARecovery.class);\n+\n+    /**\n+     * A bit of hacking to change the internals of annotations defined in LRA TCK.\n+     * There is need to adjust timeout defined on the annotation definition.\n+     */\n+    static {\n+        String[] resourceClassNames = new String[]{\n+                \"org.eclipse.microprofile.lra.tck.participant.api.LraResource\",\n+                \"org.eclipse.microprofile.lra.tck.participant.api.RecoveryResource\"};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMjc3Ng=="}, "originalCommit": {"oid": "82ebd15bb3b94e6b4b82f4bc6fc71052e74c0a9e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU2OTMyOQ==", "bodyText": "I was investigating here a bit about what's needed to do and the TCK dependency would need to be added to any module which is to use the arquillian extension. I don't want to add such requirements on users.\nThis is an enhancement for the TCK behaviour (and I agree it's a bit hacky but without definition of long pause time into TCK our AMS CI is currently in troubles to get running properly the LRA tests) and not any other tests.\nWhen there is a failure on loading class (ie. the TCK tests is renamed) then if the test starts to fail it will be needed to investigate the reasons.\nBy me this loosely coupling of this Arq extenstion to TCK tests is desired here.", "url": "https://github.com/jbosstm/narayana/pull/1637#discussion_r443569329", "createdAt": "2020-06-22T13:46:22Z", "author": {"login": "ochaloup"}, "path": "rts/lra/lra-test/lra-test-arquillian-extension/src/main/java/io/narayana/lra/arquillian/spi/NarayanaLRARecovery.java", "diffHunk": "@@ -32,6 +33,25 @@\n import java.net.URI;\n \n public class NarayanaLRARecovery implements LRARecoveryService {\n+    private static final Logger log = Logger.getLogger(NarayanaLRARecovery.class);\n+\n+    /**\n+     * A bit of hacking to change the internals of annotations defined in LRA TCK.\n+     * There is need to adjust timeout defined on the annotation definition.\n+     */\n+    static {\n+        String[] resourceClassNames = new String[]{\n+                \"org.eclipse.microprofile.lra.tck.participant.api.LraResource\",\n+                \"org.eclipse.microprofile.lra.tck.participant.api.RecoveryResource\"};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMjc3Ng=="}, "originalCommit": {"oid": "82ebd15bb3b94e6b4b82f4bc6fc71052e74c0a9e"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1183, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}