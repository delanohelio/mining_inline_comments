{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwMDY4NDYw", "number": 1559, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxODozNjozNlrODcu56A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOTo1NTowM1rODeZAPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDU1MjA4OnYy", "diffSide": "RIGHT", "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRARecord.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxODozNjozNlrOFk7mRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODoxODo0NFrOFlebCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2OTUxMA==", "bodyText": "This comment seems unassertive to me. Does 412 \"imply\" or \"require\" that the participant did this thing. Also \"infer\" could imply an element of doubt, is it possible to express as \"determine\". Are we certain of the outcome here or are there cases where valid responses could be misinterpreted?", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r374269510", "createdAt": "2020-02-03T18:36:36Z", "author": {"login": "tomjenkinson"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRARecord.java", "diffHunk": "@@ -445,6 +530,8 @@ private int retryGetEndStatus(URI endPath, boolean compensate) {\n \n                 // 200 and 410 are the only valid response code for reporting the participant status\n                 if (response.getStatus() == Response.Status.GONE.getStatusCode()) {\n+                    // 412 implies that the participant did the correct thing and cleaned up so infer the status", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYzNTA0OA==", "bodyText": "412 means that the participant no longer knows about this LRA. This means that the participant successfully compensated or completed and forgotten the LRA data. This should be documented in the specification.", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r374635048", "createdAt": "2020-02-04T12:13:41Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRARecord.java", "diffHunk": "@@ -445,6 +530,8 @@ private int retryGetEndStatus(URI endPath, boolean compensate) {\n \n                 // 200 and 410 are the only valid response code for reporting the participant status\n                 if (response.getStatus() == Response.Status.GONE.getStatusCode()) {\n+                    // 412 implies that the participant did the correct thing and cleaned up so infer the status", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2OTUxMA=="}, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0MDA3Mg==", "bodyText": "I reworded the comment and referenced the specification", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r374840072", "createdAt": "2020-02-04T18:18:44Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRARecord.java", "diffHunk": "@@ -445,6 +530,8 @@ private int retryGetEndStatus(URI endPath, boolean compensate) {\n \n                 // 200 and 410 are the only valid response code for reporting the participant status\n                 if (response.getStatus() == Response.Status.GONE.getStatusCode()) {\n+                    // 412 implies that the participant did the correct thing and cleaned up so infer the status", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2OTUxMA=="}, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 205}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDU1NDM5OnYy", "diffSide": "RIGHT", "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxODozNzoyNlrOFk7nyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNzoyMzo1MFrOFmAcWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2OTg5Nw==", "bodyText": "Perhaps the TCK could have an RFE raised?", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r374269897", "createdAt": "2020-02-03T18:37:26Z", "author": {"login": "tomjenkinson"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "diffHunk": "@@ -519,6 +477,10 @@ private int doEnd(boolean cancel) {\n             status = toLRAStatus(res);\n         }\n \n+        // it would be less invasive to allow recoovery to run post LRA actions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0MDcxNQ==", "bodyText": "This PR runs agains MP-LRA RC1 but I notice that the latest snapshot does run a recovery pass now. Therefore I have reworded the comment.", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r374840715", "createdAt": "2020-02-04T18:20:01Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "diffHunk": "@@ -519,6 +477,10 @@ private int doEnd(boolean cancel) {\n             status = toLRAStatus(res);\n         }\n \n+        // it would be less invasive to allow recoovery to run post LRA actions", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2OTg5Nw=="}, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIyNTcwNA==", "bodyText": "Thanks @mmusgrov I note the previous comment indicated invasiveness of calling this here but timeliness now? TBH I don't quite understand why they are considered \"Post\" actions as it seems to be the phase that actually completes the LRA?", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r375225704", "createdAt": "2020-02-05T12:25:46Z", "author": {"login": "tomjenkinson"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "diffHunk": "@@ -519,6 +477,10 @@ private int doEnd(boolean cancel) {\n             status = toLRAStatus(res);\n         }\n \n+        // it would be less invasive to allow recoovery to run post LRA actions", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2OTg5Nw=="}, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM5NjI4Ng==", "bodyText": "Invasive in the sense that it bulks up the number of changes in the PR. I changed it to timeliness since it is a better functional argument for it.", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r375396286", "createdAt": "2020-02-05T17:21:34Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "diffHunk": "@@ -519,6 +477,10 @@ private int doEnd(boolean cancel) {\n             status = toLRAStatus(res);\n         }\n \n+        // it would be less invasive to allow recoovery to run post LRA actions", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2OTg5Nw=="}, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM5NzQ2NA==", "bodyText": "They are called \"Post LRA\" actions since they are performed after the LRA has reached a terminal state.", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r375397464", "createdAt": "2020-02-05T17:23:50Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "diffHunk": "@@ -519,6 +477,10 @@ private int doEnd(boolean cancel) {\n             status = toLRAStatus(res);\n         }\n \n+        // it would be less invasive to allow recoovery to run post LRA actions", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2OTg5Nw=="}, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDU1NzE5OnYy", "diffSide": "RIGHT", "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxODozODoyMFrOFk7piQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODoyMTowMVrOFlefnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI3MDM0NQ==", "bodyText": "Does the JBTM exist yet? It would be useful to reference the actual JBTM in the comment", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r374270345", "createdAt": "2020-02-03T18:38:20Z", "author": {"login": "tomjenkinson"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java", "diffHunk": "@@ -173,7 +173,8 @@ public void finished(Transaction transaction, boolean fromHierarchy) {\n             // the LRA is top level or it's a nested LRA that was closed by a\n             // parent LRA (ie when fromHierarchy is true) then it's okay to forget about the LRA\n \n-            if (transaction.afterLRANotification()) {\n+            if (!transaction.hasPendingActions()) {\n+                // this call is only required to clean up cached LRAs. Follow up with a JBTM to avoid this", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0MTI0NA==", "bodyText": "I raised JBTM-3250 and reworded the comment.", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r374841244", "createdAt": "2020-02-04T18:21:01Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java", "diffHunk": "@@ -173,7 +173,8 @@ public void finished(Transaction transaction, boolean fromHierarchy) {\n             // the LRA is top level or it's a nested LRA that was closed by a\n             // parent LRA (ie when fromHierarchy is true) then it's okay to forget about the LRA\n \n-            if (transaction.afterLRANotification()) {\n+            if (!transaction.hasPendingActions()) {\n+                // this call is only required to clean up cached LRAs. Follow up with a JBTM to avoid this", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI3MDM0NQ=="}, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjg0OTQyOnYy", "diffSide": "RIGHT", "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRARecord.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMTo1OTo1OVrOFlRkOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODoyMjowMVrOFleh0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYyOTQzMg==", "bodyText": "this only usable in afterLRA calls because we are passing LRA id as LRA_HTTP_ENDED_CONTEXT_HEADER", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r374629432", "createdAt": "2020-02-04T11:59:59Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRARecord.java", "diffHunk": "@@ -361,18 +375,89 @@ private int tryDoEnd(boolean compensate) {\n                  * so if we were to return FINISH_ERROR recovery would not replay the log.\n                  * To force the record to be eligible for recovery we return a heuristic hazard.\n                  */\n-                return TwoPhaseOutcome.HEURISTIC_HAZARD;\n+                return atEnd(TwoPhaseOutcome.HEURISTIC_HAZARD);\n             }\n \n             status = ParticipantStatus.Completing; // recovery will figure out the status via the status url\n \n-            return TwoPhaseOutcome.FINISH_ERROR;\n+            return atEnd(TwoPhaseOutcome.FINISH_ERROR);\n         }\n \n         updateStatus(compensate);\n \n         // if the the request is still in progress (ie accepted is true) let recovery finish it\n-        return accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK;\n+        return atEnd(accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK);\n+    }\n+\n+    boolean isFinished() {\n+        // nested participants must still be able to compensate even if they are closed\n+        if (compensateURI == null) {\n+            return afterURI != null;\n+        }\n+\n+        switch (status) {\n+            case Completed:\n+                /* FALLTHRU */\n+            case FailedToComplete:\n+                return parentId == null; // completed nested LRAs must remain cancellable\n+            case Compensated:\n+                /* FALLTHRU */\n+            case FailedToCompensate:\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private boolean request(URI target, Transaction lra, String payload) {\n+        try {\n+            RequestBuilder builder = new RequestBuilder(target)\n+                    .request()\n+                    .header(LRA.LRA_HTTP_ENDED_CONTEXT_HEADER, lra.getId().toASCIIString())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0MTgwOA==", "bodyText": "Okay, I fixed the choice of headers depending upon whether or not we are running the AfterLRA notification.", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r374841808", "createdAt": "2020-02-04T18:22:01Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRARecord.java", "diffHunk": "@@ -361,18 +375,89 @@ private int tryDoEnd(boolean compensate) {\n                  * so if we were to return FINISH_ERROR recovery would not replay the log.\n                  * To force the record to be eligible for recovery we return a heuristic hazard.\n                  */\n-                return TwoPhaseOutcome.HEURISTIC_HAZARD;\n+                return atEnd(TwoPhaseOutcome.HEURISTIC_HAZARD);\n             }\n \n             status = ParticipantStatus.Completing; // recovery will figure out the status via the status url\n \n-            return TwoPhaseOutcome.FINISH_ERROR;\n+            return atEnd(TwoPhaseOutcome.FINISH_ERROR);\n         }\n \n         updateStatus(compensate);\n \n         // if the the request is still in progress (ie accepted is true) let recovery finish it\n-        return accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK;\n+        return atEnd(accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK);\n+    }\n+\n+    boolean isFinished() {\n+        // nested participants must still be able to compensate even if they are closed\n+        if (compensateURI == null) {\n+            return afterURI != null;\n+        }\n+\n+        switch (status) {\n+            case Completed:\n+                /* FALLTHRU */\n+            case FailedToComplete:\n+                return parentId == null; // completed nested LRAs must remain cancellable\n+            case Compensated:\n+                /* FALLTHRU */\n+            case FailedToCompensate:\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private boolean request(URI target, Transaction lra, String payload) {\n+        try {\n+            RequestBuilder builder = new RequestBuilder(target)\n+                    .request()\n+                    .header(LRA.LRA_HTTP_ENDED_CONTEXT_HEADER, lra.getId().toASCIIString())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYyOTQzMg=="}, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjg1MDUyOnYy", "diffSide": "RIGHT", "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRARecord.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjowMDoyN1rOFlRk4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODoyMzoyNlrOFlek1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYyOTYwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private boolean request(URI target, Transaction lra, String payload) {\n          \n          \n            \n                private boolean afterLRARequest(URI target, Transaction lra, String payload) {", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r374629601", "createdAt": "2020-02-04T12:00:27Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRARecord.java", "diffHunk": "@@ -361,18 +375,89 @@ private int tryDoEnd(boolean compensate) {\n                  * so if we were to return FINISH_ERROR recovery would not replay the log.\n                  * To force the record to be eligible for recovery we return a heuristic hazard.\n                  */\n-                return TwoPhaseOutcome.HEURISTIC_HAZARD;\n+                return atEnd(TwoPhaseOutcome.HEURISTIC_HAZARD);\n             }\n \n             status = ParticipantStatus.Completing; // recovery will figure out the status via the status url\n \n-            return TwoPhaseOutcome.FINISH_ERROR;\n+            return atEnd(TwoPhaseOutcome.FINISH_ERROR);\n         }\n \n         updateStatus(compensate);\n \n         // if the the request is still in progress (ie accepted is true) let recovery finish it\n-        return accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK;\n+        return atEnd(accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK);\n+    }\n+\n+    boolean isFinished() {\n+        // nested participants must still be able to compensate even if they are closed\n+        if (compensateURI == null) {\n+            return afterURI != null;\n+        }\n+\n+        switch (status) {\n+            case Completed:\n+                /* FALLTHRU */\n+            case FailedToComplete:\n+                return parentId == null; // completed nested LRAs must remain cancellable\n+            case Compensated:\n+                /* FALLTHRU */\n+            case FailedToCompensate:\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private boolean request(URI target, Transaction lra, String payload) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0MjU4Mg==", "bodyText": "I used request so that the same method could replace the other REST calls in the class. But I will reword the method name since I have not done that in this PR.", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r374842582", "createdAt": "2020-02-04T18:23:26Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRARecord.java", "diffHunk": "@@ -361,18 +375,89 @@ private int tryDoEnd(boolean compensate) {\n                  * so if we were to return FINISH_ERROR recovery would not replay the log.\n                  * To force the record to be eligible for recovery we return a heuristic hazard.\n                  */\n-                return TwoPhaseOutcome.HEURISTIC_HAZARD;\n+                return atEnd(TwoPhaseOutcome.HEURISTIC_HAZARD);\n             }\n \n             status = ParticipantStatus.Completing; // recovery will figure out the status via the status url\n \n-            return TwoPhaseOutcome.FINISH_ERROR;\n+            return atEnd(TwoPhaseOutcome.FINISH_ERROR);\n         }\n \n         updateStatus(compensate);\n \n         // if the the request is still in progress (ie accepted is true) let recovery finish it\n-        return accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK;\n+        return atEnd(accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK);\n+    }\n+\n+    boolean isFinished() {\n+        // nested participants must still be able to compensate even if they are closed\n+        if (compensateURI == null) {\n+            return afterURI != null;\n+        }\n+\n+        switch (status) {\n+            case Completed:\n+                /* FALLTHRU */\n+            case FailedToComplete:\n+                return parentId == null; // completed nested LRAs must remain cancellable\n+            case Compensated:\n+                /* FALLTHRU */\n+            case FailedToCompensate:\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private boolean request(URI target, Transaction lra, String payload) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYyOTYwMQ=="}, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjg3MzU5OnYy", "diffSide": "RIGHT", "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRARecord.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjowOToyNlrOFlRy3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjoyMDowM1rOFl1z8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYzMzE4MA==", "bodyText": "isn't this a normal compensateURI which passed from user? so it can be user-endpoint:user-port/something/compensate? How can we be sure that parent LRA can be extracted?", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r374633180", "createdAt": "2020-02-04T12:09:26Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRARecord.java", "diffHunk": "@@ -361,18 +375,89 @@ private int tryDoEnd(boolean compensate) {\n                  * so if we were to return FINISH_ERROR recovery would not replay the log.\n                  * To force the record to be eligible for recovery we return a heuristic hazard.\n                  */\n-                return TwoPhaseOutcome.HEURISTIC_HAZARD;\n+                return atEnd(TwoPhaseOutcome.HEURISTIC_HAZARD);\n             }\n \n             status = ParticipantStatus.Completing; // recovery will figure out the status via the status url\n \n-            return TwoPhaseOutcome.FINISH_ERROR;\n+            return atEnd(TwoPhaseOutcome.FINISH_ERROR);\n         }\n \n         updateStatus(compensate);\n \n         // if the the request is still in progress (ie accepted is true) let recovery finish it\n-        return accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK;\n+        return atEnd(accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK);\n+    }\n+\n+    boolean isFinished() {\n+        // nested participants must still be able to compensate even if they are closed\n+        if (compensateURI == null) {\n+            return afterURI != null;\n+        }\n+\n+        switch (status) {\n+            case Completed:\n+                /* FALLTHRU */\n+            case FailedToComplete:\n+                return parentId == null; // completed nested LRAs must remain cancellable\n+            case Compensated:\n+                /* FALLTHRU */\n+            case FailedToCompensate:\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private boolean request(URI target, Transaction lra, String payload) {\n+        try {\n+            RequestBuilder builder = new RequestBuilder(target)\n+                    .request()\n+                    .header(LRA.LRA_HTTP_ENDED_CONTEXT_HEADER, lra.getId().toASCIIString())\n+                    .header(LRA.LRA_HTTP_RECOVERY_HEADER, recoveryURI.toASCIIString())\n+                    .async(PARTICIPANT_TIMEOUT, TimeUnit.SECONDS);\n+            ResponseHolder response = target.equals(forgetURI) ? builder.delete() : builder.put(payload, MediaType.TEXT_PLAIN);\n+\n+            if (response.getStatus() == 200) {\n+                return true;\n+            }\n+        } catch (WebApplicationException e) {\n+            if (LRALogger.logger.isInfoEnabled()) {\n+                LRALogger.logger.infof(\"Could not notify URI at %s (%s)\", target, e.getMessage());\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    private int atEnd(int res) {\n+        URI nested = compensateURI != null ? extractParentLRA(compensateURI) : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0NjI1Mg==", "bodyText": "The method understands the narayana LRA format for nested LRAs acting as participants. But since I only need the parent in order to deliver the forget notification and since we don't have a test for that in LRA RC1 (you added it after that in issue 208 / pr 258) I have removed the logic. We can add it back in again when we add an implementation of the MP-LRA test TckContextTests#testForgetCalledForNestedParticipantsWhenParentIsClosed", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r374846252", "createdAt": "2020-02-04T18:30:14Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRARecord.java", "diffHunk": "@@ -361,18 +375,89 @@ private int tryDoEnd(boolean compensate) {\n                  * so if we were to return FINISH_ERROR recovery would not replay the log.\n                  * To force the record to be eligible for recovery we return a heuristic hazard.\n                  */\n-                return TwoPhaseOutcome.HEURISTIC_HAZARD;\n+                return atEnd(TwoPhaseOutcome.HEURISTIC_HAZARD);\n             }\n \n             status = ParticipantStatus.Completing; // recovery will figure out the status via the status url\n \n-            return TwoPhaseOutcome.FINISH_ERROR;\n+            return atEnd(TwoPhaseOutcome.FINISH_ERROR);\n         }\n \n         updateStatus(compensate);\n \n         // if the the request is still in progress (ie accepted is true) let recovery finish it\n-        return accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK;\n+        return atEnd(accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK);\n+    }\n+\n+    boolean isFinished() {\n+        // nested participants must still be able to compensate even if they are closed\n+        if (compensateURI == null) {\n+            return afterURI != null;\n+        }\n+\n+        switch (status) {\n+            case Completed:\n+                /* FALLTHRU */\n+            case FailedToComplete:\n+                return parentId == null; // completed nested LRAs must remain cancellable\n+            case Compensated:\n+                /* FALLTHRU */\n+            case FailedToCompensate:\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private boolean request(URI target, Transaction lra, String payload) {\n+        try {\n+            RequestBuilder builder = new RequestBuilder(target)\n+                    .request()\n+                    .header(LRA.LRA_HTTP_ENDED_CONTEXT_HEADER, lra.getId().toASCIIString())\n+                    .header(LRA.LRA_HTTP_RECOVERY_HEADER, recoveryURI.toASCIIString())\n+                    .async(PARTICIPANT_TIMEOUT, TimeUnit.SECONDS);\n+            ResponseHolder response = target.equals(forgetURI) ? builder.delete() : builder.put(payload, MediaType.TEXT_PLAIN);\n+\n+            if (response.getStatus() == 200) {\n+                return true;\n+            }\n+        } catch (WebApplicationException e) {\n+            if (LRALogger.logger.isInfoEnabled()) {\n+                LRALogger.logger.infof(\"Could not notify URI at %s (%s)\", target, e.getMessage());\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    private int atEnd(int res) {\n+        URI nested = compensateURI != null ? extractParentLRA(compensateURI) : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYzMzE4MA=="}, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg2ODY4MQ==", "bodyText": "it seems that you've removed this line. LRARecord already should have parentId in the field so no need to extract it.", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r374868681", "createdAt": "2020-02-04T19:13:58Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRARecord.java", "diffHunk": "@@ -361,18 +375,89 @@ private int tryDoEnd(boolean compensate) {\n                  * so if we were to return FINISH_ERROR recovery would not replay the log.\n                  * To force the record to be eligible for recovery we return a heuristic hazard.\n                  */\n-                return TwoPhaseOutcome.HEURISTIC_HAZARD;\n+                return atEnd(TwoPhaseOutcome.HEURISTIC_HAZARD);\n             }\n \n             status = ParticipantStatus.Completing; // recovery will figure out the status via the status url\n \n-            return TwoPhaseOutcome.FINISH_ERROR;\n+            return atEnd(TwoPhaseOutcome.FINISH_ERROR);\n         }\n \n         updateStatus(compensate);\n \n         // if the the request is still in progress (ie accepted is true) let recovery finish it\n-        return accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK;\n+        return atEnd(accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK);\n+    }\n+\n+    boolean isFinished() {\n+        // nested participants must still be able to compensate even if they are closed\n+        if (compensateURI == null) {\n+            return afterURI != null;\n+        }\n+\n+        switch (status) {\n+            case Completed:\n+                /* FALLTHRU */\n+            case FailedToComplete:\n+                return parentId == null; // completed nested LRAs must remain cancellable\n+            case Compensated:\n+                /* FALLTHRU */\n+            case FailedToCompensate:\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private boolean request(URI target, Transaction lra, String payload) {\n+        try {\n+            RequestBuilder builder = new RequestBuilder(target)\n+                    .request()\n+                    .header(LRA.LRA_HTTP_ENDED_CONTEXT_HEADER, lra.getId().toASCIIString())\n+                    .header(LRA.LRA_HTTP_RECOVERY_HEADER, recoveryURI.toASCIIString())\n+                    .async(PARTICIPANT_TIMEOUT, TimeUnit.SECONDS);\n+            ResponseHolder response = target.equals(forgetURI) ? builder.delete() : builder.put(payload, MediaType.TEXT_PLAIN);\n+\n+            if (response.getStatus() == 200) {\n+                return true;\n+            }\n+        } catch (WebApplicationException e) {\n+            if (LRALogger.logger.isInfoEnabled()) {\n+                LRALogger.logger.infof(\"Could not notify URI at %s (%s)\", target, e.getMessage());\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    private int atEnd(int res) {\n+        URI nested = compensateURI != null ? extractParentLRA(compensateURI) : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYzMzE4MA=="}, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIyMzI4MQ==", "bodyText": "... But since I only need the parent in order to deliver the forget notification and since we don't have a test for that in LRA RC1 (you added it after that in issue 208 / pr 258) I have removed the logic. We can add it back in again when we add an implementation of the MP-LRA test TckContextTests#testForgetCalledForNestedParticipantsWhenParentIsClosed", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r375223281", "createdAt": "2020-02-05T12:20:03Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRARecord.java", "diffHunk": "@@ -361,18 +375,89 @@ private int tryDoEnd(boolean compensate) {\n                  * so if we were to return FINISH_ERROR recovery would not replay the log.\n                  * To force the record to be eligible for recovery we return a heuristic hazard.\n                  */\n-                return TwoPhaseOutcome.HEURISTIC_HAZARD;\n+                return atEnd(TwoPhaseOutcome.HEURISTIC_HAZARD);\n             }\n \n             status = ParticipantStatus.Completing; // recovery will figure out the status via the status url\n \n-            return TwoPhaseOutcome.FINISH_ERROR;\n+            return atEnd(TwoPhaseOutcome.FINISH_ERROR);\n         }\n \n         updateStatus(compensate);\n \n         // if the the request is still in progress (ie accepted is true) let recovery finish it\n-        return accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK;\n+        return atEnd(accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK);\n+    }\n+\n+    boolean isFinished() {\n+        // nested participants must still be able to compensate even if they are closed\n+        if (compensateURI == null) {\n+            return afterURI != null;\n+        }\n+\n+        switch (status) {\n+            case Completed:\n+                /* FALLTHRU */\n+            case FailedToComplete:\n+                return parentId == null; // completed nested LRAs must remain cancellable\n+            case Compensated:\n+                /* FALLTHRU */\n+            case FailedToCompensate:\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private boolean request(URI target, Transaction lra, String payload) {\n+        try {\n+            RequestBuilder builder = new RequestBuilder(target)\n+                    .request()\n+                    .header(LRA.LRA_HTTP_ENDED_CONTEXT_HEADER, lra.getId().toASCIIString())\n+                    .header(LRA.LRA_HTTP_RECOVERY_HEADER, recoveryURI.toASCIIString())\n+                    .async(PARTICIPANT_TIMEOUT, TimeUnit.SECONDS);\n+            ResponseHolder response = target.equals(forgetURI) ? builder.delete() : builder.put(payload, MediaType.TEXT_PLAIN);\n+\n+            if (response.getStatus() == 200) {\n+                return true;\n+            }\n+        } catch (WebApplicationException e) {\n+            if (LRALogger.logger.isInfoEnabled()) {\n+                LRALogger.logger.infof(\"Could not notify URI at %s (%s)\", target, e.getMessage());\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    private int atEnd(int res) {\n+        URI nested = compensateURI != null ? extractParentLRA(compensateURI) : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYzMzE4MA=="}, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjg3ODMxOnYy", "diffSide": "RIGHT", "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRARecord.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjoxMToyMFrOFlR13Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODozMDo0M1rOFle0Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYzMzk0OQ==", "bodyText": "this is wrong since request method packs LRA id as LRA_HTTP_ENDED_CONTEXT_HEADER not as LRA_HTTP_CONTEXT_HEADER.", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r374633949", "createdAt": "2020-02-04T12:11:20Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRARecord.java", "diffHunk": "@@ -361,18 +375,89 @@ private int tryDoEnd(boolean compensate) {\n                  * so if we were to return FINISH_ERROR recovery would not replay the log.\n                  * To force the record to be eligible for recovery we return a heuristic hazard.\n                  */\n-                return TwoPhaseOutcome.HEURISTIC_HAZARD;\n+                return atEnd(TwoPhaseOutcome.HEURISTIC_HAZARD);\n             }\n \n             status = ParticipantStatus.Completing; // recovery will figure out the status via the status url\n \n-            return TwoPhaseOutcome.FINISH_ERROR;\n+            return atEnd(TwoPhaseOutcome.FINISH_ERROR);\n         }\n \n         updateStatus(compensate);\n \n         // if the the request is still in progress (ie accepted is true) let recovery finish it\n-        return accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK;\n+        return atEnd(accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK);\n+    }\n+\n+    boolean isFinished() {\n+        // nested participants must still be able to compensate even if they are closed\n+        if (compensateURI == null) {\n+            return afterURI != null;\n+        }\n+\n+        switch (status) {\n+            case Completed:\n+                /* FALLTHRU */\n+            case FailedToComplete:\n+                return parentId == null; // completed nested LRAs must remain cancellable\n+            case Compensated:\n+                /* FALLTHRU */\n+            case FailedToCompensate:\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private boolean request(URI target, Transaction lra, String payload) {\n+        try {\n+            RequestBuilder builder = new RequestBuilder(target)\n+                    .request()\n+                    .header(LRA.LRA_HTTP_ENDED_CONTEXT_HEADER, lra.getId().toASCIIString())\n+                    .header(LRA.LRA_HTTP_RECOVERY_HEADER, recoveryURI.toASCIIString())\n+                    .async(PARTICIPANT_TIMEOUT, TimeUnit.SECONDS);\n+            ResponseHolder response = target.equals(forgetURI) ? builder.delete() : builder.put(payload, MediaType.TEXT_PLAIN);\n+\n+            if (response.getStatus() == 200) {\n+                return true;\n+            }\n+        } catch (WebApplicationException e) {\n+            if (LRALogger.logger.isInfoEnabled()) {\n+                LRALogger.logger.infof(\"Could not notify URI at %s (%s)\", target, e.getMessage());\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    private int atEnd(int res) {\n+        URI nested = compensateURI != null ? extractParentLRA(compensateURI) : null;\n+        boolean notifyForget = (nested != null && forgetURI != null);\n+\n+        // Only run the post LRA actions if both the LRA and participant are in an end state\n+        // check the participant first since it will have been removed from one of the lists\n+        if (!isFinished() || !lra.isFinished()) {\n+            if (afterURI != null || notifyForget) {\n+                return TwoPhaseOutcome.HEURISTIC_HAZARD;\n+            }\n+\n+            return res;\n+        }\n+\n+        // run post LRA actions\n+        boolean r1 = afterURI == null || request(afterURI, lra, lra.getLRAStatus().name());\n+        boolean r2 = !notifyForget || request(forgetURI, lra, lra.getLRAStatus().name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0NjQ4Mg==", "bodyText": "Okay", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r374846482", "createdAt": "2020-02-04T18:30:43Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRARecord.java", "diffHunk": "@@ -361,18 +375,89 @@ private int tryDoEnd(boolean compensate) {\n                  * so if we were to return FINISH_ERROR recovery would not replay the log.\n                  * To force the record to be eligible for recovery we return a heuristic hazard.\n                  */\n-                return TwoPhaseOutcome.HEURISTIC_HAZARD;\n+                return atEnd(TwoPhaseOutcome.HEURISTIC_HAZARD);\n             }\n \n             status = ParticipantStatus.Completing; // recovery will figure out the status via the status url\n \n-            return TwoPhaseOutcome.FINISH_ERROR;\n+            return atEnd(TwoPhaseOutcome.FINISH_ERROR);\n         }\n \n         updateStatus(compensate);\n \n         // if the the request is still in progress (ie accepted is true) let recovery finish it\n-        return accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK;\n+        return atEnd(accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK);\n+    }\n+\n+    boolean isFinished() {\n+        // nested participants must still be able to compensate even if they are closed\n+        if (compensateURI == null) {\n+            return afterURI != null;\n+        }\n+\n+        switch (status) {\n+            case Completed:\n+                /* FALLTHRU */\n+            case FailedToComplete:\n+                return parentId == null; // completed nested LRAs must remain cancellable\n+            case Compensated:\n+                /* FALLTHRU */\n+            case FailedToCompensate:\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private boolean request(URI target, Transaction lra, String payload) {\n+        try {\n+            RequestBuilder builder = new RequestBuilder(target)\n+                    .request()\n+                    .header(LRA.LRA_HTTP_ENDED_CONTEXT_HEADER, lra.getId().toASCIIString())\n+                    .header(LRA.LRA_HTTP_RECOVERY_HEADER, recoveryURI.toASCIIString())\n+                    .async(PARTICIPANT_TIMEOUT, TimeUnit.SECONDS);\n+            ResponseHolder response = target.equals(forgetURI) ? builder.delete() : builder.put(payload, MediaType.TEXT_PLAIN);\n+\n+            if (response.getStatus() == 200) {\n+                return true;\n+            }\n+        } catch (WebApplicationException e) {\n+            if (LRALogger.logger.isInfoEnabled()) {\n+                LRALogger.logger.infof(\"Could not notify URI at %s (%s)\", target, e.getMessage());\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    private int atEnd(int res) {\n+        URI nested = compensateURI != null ? extractParentLRA(compensateURI) : null;\n+        boolean notifyForget = (nested != null && forgetURI != null);\n+\n+        // Only run the post LRA actions if both the LRA and participant are in an end state\n+        // check the participant first since it will have been removed from one of the lists\n+        if (!isFinished() || !lra.isFinished()) {\n+            if (afterURI != null || notifyForget) {\n+                return TwoPhaseOutcome.HEURISTIC_HAZARD;\n+            }\n+\n+            return res;\n+        }\n+\n+        // run post LRA actions\n+        boolean r1 = afterURI == null || request(afterURI, lra, lra.getLRAStatus().name());\n+        boolean r2 = !notifyForget || request(forgetURI, lra, lra.getLRAStatus().name());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYzMzk0OQ=="}, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 186}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjg5MjkxOnYy", "diffSide": "RIGHT", "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjoxNjoyMlrOFlR-uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODozMDo1OFrOFle0uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYzNjIxOQ==", "bodyText": "You can reuse isFinished() here.", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r374636219", "createdAt": "2020-02-04T12:16:22Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "diffHunk": "@@ -532,12 +494,87 @@ private int doEnd(boolean cancel) {\n         return res;\n     }\n \n+    protected void runPostLRAActions() {\n+        // if there are no more heuristics or failures then update the status of the LRA\n+        if (isInEndState()) {\n+            if (preparedList == null) {\n+                preparedList = new RecordList();\n+            }\n+            moveTo(heuristicList, preparedList);\n+            moveTo(failedList, preparedList);\n+            checkParticipant(preparedList);\n+            super.phase2Commit(true);\n+        }\n+    }\n+\n     private boolean updateState(LRAStatus nextState) {\n         status = nextState;\n \n         return (pendingList == null || pendingList.size() == 0) || deactivate();\n     }\n \n+    protected void checkParticipant(RecordList participants) {\n+        RecordListIterator i = new RecordListIterator(participants);\n+        AbstractRecord r;\n+\n+        while ((r = i.iterate()) != null) {\n+            if (r instanceof LRARecord) {\n+                LRARecord rec = (LRARecord) r;\n+\n+                rec.setLraService(getLraService());\n+                rec.setLRA(this);\n+            }\n+        }\n+    }\n+\n+    protected void moveTo(RecordList fromList, RecordList toList) {\n+        AbstractRecord record;\n+\n+        if (fromList != null) {\n+            while ((record = fromList.getFront()) != null) {\n+                toList.putFront(record);\n+            }\n+        }\n+    }\n+\n+    private boolean allFinished(RecordList... lists) {\n+        for (RecordList list : lists) {\n+            if (list != null) {\n+                RecordListIterator i = new RecordListIterator(list);\n+                AbstractRecord r;\n+\n+                while ((r = i.iterate()) != null) {\n+                    if (r instanceof LRARecord) {\n+                        LRARecord rec = (LRARecord) r;\n+                        if (!rec.isFinished()) {\n+                            return false;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    protected boolean isInEndState() {\n+        if (status == LRAStatus.Cancelling && allFinished(heuristicList, failedList)) {\n+            status = LRAStatus.Cancelled;\n+        } else if (status == LRAStatus.Closing && allFinished(heuristicList, failedList)) {\n+            status = LRAStatus.Closed;\n+        }\n+\n+        switch (status) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0NjY0OA==", "bodyText": "Thanks", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r374846648", "createdAt": "2020-02-04T18:30:58Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "diffHunk": "@@ -532,12 +494,87 @@ private int doEnd(boolean cancel) {\n         return res;\n     }\n \n+    protected void runPostLRAActions() {\n+        // if there are no more heuristics or failures then update the status of the LRA\n+        if (isInEndState()) {\n+            if (preparedList == null) {\n+                preparedList = new RecordList();\n+            }\n+            moveTo(heuristicList, preparedList);\n+            moveTo(failedList, preparedList);\n+            checkParticipant(preparedList);\n+            super.phase2Commit(true);\n+        }\n+    }\n+\n     private boolean updateState(LRAStatus nextState) {\n         status = nextState;\n \n         return (pendingList == null || pendingList.size() == 0) || deactivate();\n     }\n \n+    protected void checkParticipant(RecordList participants) {\n+        RecordListIterator i = new RecordListIterator(participants);\n+        AbstractRecord r;\n+\n+        while ((r = i.iterate()) != null) {\n+            if (r instanceof LRARecord) {\n+                LRARecord rec = (LRARecord) r;\n+\n+                rec.setLraService(getLraService());\n+                rec.setLRA(this);\n+            }\n+        }\n+    }\n+\n+    protected void moveTo(RecordList fromList, RecordList toList) {\n+        AbstractRecord record;\n+\n+        if (fromList != null) {\n+            while ((record = fromList.getFront()) != null) {\n+                toList.putFront(record);\n+            }\n+        }\n+    }\n+\n+    private boolean allFinished(RecordList... lists) {\n+        for (RecordList list : lists) {\n+            if (list != null) {\n+                RecordListIterator i = new RecordListIterator(list);\n+                AbstractRecord r;\n+\n+                while ((r = i.iterate()) != null) {\n+                    if (r instanceof LRARecord) {\n+                        LRARecord rec = (LRARecord) r;\n+                        if (!rec.isFinished()) {\n+                            return false;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    protected boolean isInEndState() {\n+        if (status == LRAStatus.Cancelling && allFinished(heuristicList, failedList)) {\n+            status = LRAStatus.Cancelled;\n+        } else if (status == LRAStatus.Closing && allFinished(heuristicList, failedList)) {\n+            status = LRAStatus.Closed;\n+        }\n+\n+        switch (status) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYzNjIxOQ=="}, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 243}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjkwMTM1OnYy", "diffSide": "RIGHT", "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjoxOToxOVrOFlSD1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNjowNjo1MVrOFl9mNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYzNzUyNA==", "bodyText": "Will this be set in the preparedList also in case of recovery? LRARecord doesn't seem to persist the passed Transaction object with its state.", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r374637524", "createdAt": "2020-02-04T12:19:19Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "diffHunk": "@@ -532,12 +494,87 @@ private int doEnd(boolean cancel) {\n         return res;\n     }\n \n+    protected void runPostLRAActions() {\n+        // if there are no more heuristics or failures then update the status of the LRA\n+        if (isInEndState()) {\n+            if (preparedList == null) {\n+                preparedList = new RecordList();\n+            }\n+            moveTo(heuristicList, preparedList);\n+            moveTo(failedList, preparedList);\n+            checkParticipant(preparedList);\n+            super.phase2Commit(true);\n+        }\n+    }\n+\n     private boolean updateState(LRAStatus nextState) {\n         status = nextState;\n \n         return (pendingList == null || pendingList.size() == 0) || deactivate();\n     }\n \n+    protected void checkParticipant(RecordList participants) {\n+        RecordListIterator i = new RecordListIterator(participants);\n+        AbstractRecord r;\n+\n+        while ((r = i.iterate()) != null) {\n+            if (r instanceof LRARecord) {\n+                LRARecord rec = (LRARecord) r;\n+\n+                rec.setLraService(getLraService());\n+                rec.setLRA(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0NzA1MA==", "bodyText": "This value is set by the recovery module during each recovery pass so it does not need to be durable.", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r374847050", "createdAt": "2020-02-04T18:31:43Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "diffHunk": "@@ -532,12 +494,87 @@ private int doEnd(boolean cancel) {\n         return res;\n     }\n \n+    protected void runPostLRAActions() {\n+        // if there are no more heuristics or failures then update the status of the LRA\n+        if (isInEndState()) {\n+            if (preparedList == null) {\n+                preparedList = new RecordList();\n+            }\n+            moveTo(heuristicList, preparedList);\n+            moveTo(failedList, preparedList);\n+            checkParticipant(preparedList);\n+            super.phase2Commit(true);\n+        }\n+    }\n+\n     private boolean updateState(LRAStatus nextState) {\n         status = nextState;\n \n         return (pendingList == null || pendingList.size() == 0) || deactivate();\n     }\n \n+    protected void checkParticipant(RecordList participants) {\n+        RecordListIterator i = new RecordListIterator(participants);\n+        AbstractRecord r;\n+\n+        while ((r = i.iterate()) != null) {\n+            if (r instanceof LRARecord) {\n+                LRARecord rec = (LRARecord) r;\n+\n+                rec.setLraService(getLraService());\n+                rec.setLRA(this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYzNzUyNA=="}, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg3MzY2NQ==", "bodyText": "also is it needed to save Transaction in LRARecord? there are individual fields already present (lraId, recoveryId, parentId) so only thing additional thing needed for afterLRA is the outcome of the LRA.", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r374873665", "createdAt": "2020-02-04T19:23:28Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "diffHunk": "@@ -532,12 +494,87 @@ private int doEnd(boolean cancel) {\n         return res;\n     }\n \n+    protected void runPostLRAActions() {\n+        // if there are no more heuristics or failures then update the status of the LRA\n+        if (isInEndState()) {\n+            if (preparedList == null) {\n+                preparedList = new RecordList();\n+            }\n+            moveTo(heuristicList, preparedList);\n+            moveTo(failedList, preparedList);\n+            checkParticipant(preparedList);\n+            super.phase2Commit(true);\n+        }\n+    }\n+\n     private boolean updateState(LRAStatus nextState) {\n         status = nextState;\n \n         return (pendingList == null || pendingList.size() == 0) || deactivate();\n     }\n \n+    protected void checkParticipant(RecordList participants) {\n+        RecordListIterator i = new RecordListIterator(participants);\n+        AbstractRecord r;\n+\n+        while ((r = i.iterate()) != null) {\n+            if (r instanceof LRARecord) {\n+                LRARecord rec = (LRARecord) r;\n+\n+                rec.setLraService(getLraService());\n+                rec.setLRA(this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYzNzUyNA=="}, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIyMzcwNQ==", "bodyText": "Not sure what you mean. But the LRA is set dynamically on each recovery pass so there is no need to make it durable.", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r375223705", "createdAt": "2020-02-05T12:21:05Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "diffHunk": "@@ -532,12 +494,87 @@ private int doEnd(boolean cancel) {\n         return res;\n     }\n \n+    protected void runPostLRAActions() {\n+        // if there are no more heuristics or failures then update the status of the LRA\n+        if (isInEndState()) {\n+            if (preparedList == null) {\n+                preparedList = new RecordList();\n+            }\n+            moveTo(heuristicList, preparedList);\n+            moveTo(failedList, preparedList);\n+            checkParticipant(preparedList);\n+            super.phase2Commit(true);\n+        }\n+    }\n+\n     private boolean updateState(LRAStatus nextState) {\n         status = nextState;\n \n         return (pendingList == null || pendingList.size() == 0) || deactivate();\n     }\n \n+    protected void checkParticipant(RecordList participants) {\n+        RecordListIterator i = new RecordListIterator(participants);\n+        AbstractRecord r;\n+\n+        while ((r = i.iterate()) != null) {\n+            if (r instanceof LRARecord) {\n+                LRARecord rec = (LRARecord) r;\n+\n+                rec.setLraService(getLraService());\n+                rec.setLRA(this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYzNzUyNA=="}, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIzMDczNw==", "bodyText": "the passed transaction (which is passed on every recovery pass to every record) is used only in afterLRA and nested forget calls (post LRA actions). But LRARecord already has fields for lraId, parentId, recoveryId. So is it really necessary to pass the Transaction object on each pass?", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r375230737", "createdAt": "2020-02-05T12:37:53Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "diffHunk": "@@ -532,12 +494,87 @@ private int doEnd(boolean cancel) {\n         return res;\n     }\n \n+    protected void runPostLRAActions() {\n+        // if there are no more heuristics or failures then update the status of the LRA\n+        if (isInEndState()) {\n+            if (preparedList == null) {\n+                preparedList = new RecordList();\n+            }\n+            moveTo(heuristicList, preparedList);\n+            moveTo(failedList, preparedList);\n+            checkParticipant(preparedList);\n+            super.phase2Commit(true);\n+        }\n+    }\n+\n     private boolean updateState(LRAStatus nextState) {\n         status = nextState;\n \n         return (pendingList == null || pendingList.size() == 0) || deactivate();\n     }\n \n+    protected void checkParticipant(RecordList participants) {\n+        RecordListIterator i = new RecordListIterator(participants);\n+        AbstractRecord r;\n+\n+        while ((r = i.iterate()) != null) {\n+            if (r instanceof LRARecord) {\n+                LRARecord rec = (LRARecord) r;\n+\n+                rec.setLraService(getLraService());\n+                rec.setLRA(this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYzNzUyNA=="}, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM0MDI2Nw==", "bodyText": "It is used in the following line: https://github.com/jbosstm/narayana/pull/1559/files#diff-0f226ae6945188e648e485306754f30cR443", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r375340267", "createdAt": "2020-02-05T15:50:58Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "diffHunk": "@@ -532,12 +494,87 @@ private int doEnd(boolean cancel) {\n         return res;\n     }\n \n+    protected void runPostLRAActions() {\n+        // if there are no more heuristics or failures then update the status of the LRA\n+        if (isInEndState()) {\n+            if (preparedList == null) {\n+                preparedList = new RecordList();\n+            }\n+            moveTo(heuristicList, preparedList);\n+            moveTo(failedList, preparedList);\n+            checkParticipant(preparedList);\n+            super.phase2Commit(true);\n+        }\n+    }\n+\n     private boolean updateState(LRAStatus nextState) {\n         status = nextState;\n \n         return (pendingList == null || pendingList.size() == 0) || deactivate();\n     }\n \n+    protected void checkParticipant(RecordList participants) {\n+        RecordListIterator i = new RecordListIterator(participants);\n+        AbstractRecord r;\n+\n+        while ((r = i.iterate()) != null) {\n+            if (r instanceof LRARecord) {\n+                LRARecord rec = (LRARecord) r;\n+\n+                rec.setLraService(getLraService());\n+                rec.setLRA(this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYzNzUyNA=="}, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM1MDgzNg==", "bodyText": "ok, I see. Thanks.", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r375350836", "createdAt": "2020-02-05T16:06:51Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "diffHunk": "@@ -532,12 +494,87 @@ private int doEnd(boolean cancel) {\n         return res;\n     }\n \n+    protected void runPostLRAActions() {\n+        // if there are no more heuristics or failures then update the status of the LRA\n+        if (isInEndState()) {\n+            if (preparedList == null) {\n+                preparedList = new RecordList();\n+            }\n+            moveTo(heuristicList, preparedList);\n+            moveTo(failedList, preparedList);\n+            checkParticipant(preparedList);\n+            super.phase2Commit(true);\n+        }\n+    }\n+\n     private boolean updateState(LRAStatus nextState) {\n         status = nextState;\n \n         return (pendingList == null || pendingList.size() == 0) || deactivate();\n     }\n \n+    protected void checkParticipant(RecordList participants) {\n+        RecordListIterator i = new RecordListIterator(participants);\n+        AbstractRecord r;\n+\n+        while ((r = i.iterate()) != null) {\n+            if (r instanceof LRARecord) {\n+                LRARecord rec = (LRARecord) r;\n+\n+                rec.setLraService(getLraService());\n+                rec.setLRA(this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYzNzUyNA=="}, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjkxNTU5OnYy", "diffSide": "RIGHT", "path": "rts/lra/lra-service-base/src/main/java/io/narayana/lra/LRAHttpClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjoyNDoyMFrOFlSMZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwODoxNjowNlrOFlu7KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYzOTcxNw==", "bodyText": "is this forgotten from testing? Some time ago you mentioned in one of my PRs that 1s is intentional and more than enough for modern network speeds.", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r374639717", "createdAt": "2020-02-04T12:24:20Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-service-base/src/main/java/io/narayana/lra/LRAHttpClient.java", "diffHunk": "@@ -19,7 +19,7 @@\n import java.util.concurrent.TimeoutException;\n \n public class LRAHttpClient {\n-    public static final long PARTICIPANT_TIMEOUT = 1; // number of seconds to wait for requests\n+    public static final long PARTICIPANT_TIMEOUT = 10; // number of seconds to wait for requests", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0OTQ2MQ==", "bodyText": "Well 1 second should be more than enough but the new test on the existing CI infrastructure intermittently fails because the 1 second time limit is breached. I have not studied your test in detail to find out why the callbacks sometimes take longer than 1 second (or whether the test is making certain assumptions) but I made it 10 s for expediency. Note that the shorter timelimit should work if the tests run sufficient recovery passes (but I did not spend any time investigating). Perhaps we should revisit the test at a later date.", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r374849461", "createdAt": "2020-02-04T18:36:43Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-service-base/src/main/java/io/narayana/lra/LRAHttpClient.java", "diffHunk": "@@ -19,7 +19,7 @@\n import java.util.concurrent.TimeoutException;\n \n public class LRAHttpClient {\n-    public static final long PARTICIPANT_TIMEOUT = 1; // number of seconds to wait for requests\n+    public static final long PARTICIPANT_TIMEOUT = 10; // number of seconds to wait for requests", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYzOTcxNw=="}, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExMDQ0MQ==", "bodyText": "I have changed it to 2 seconds.", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r375110441", "createdAt": "2020-02-05T08:16:06Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-service-base/src/main/java/io/narayana/lra/LRAHttpClient.java", "diffHunk": "@@ -19,7 +19,7 @@\n import java.util.concurrent.TimeoutException;\n \n public class LRAHttpClient {\n-    public static final long PARTICIPANT_TIMEOUT = 1; // number of seconds to wait for requests\n+    public static final long PARTICIPANT_TIMEOUT = 10; // number of seconds to wait for requests", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYzOTcxNw=="}, "originalCommit": {"oid": "42eb8d46cc6f74f5d971d62bb7cf284ffe855689"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDQ4NjcyOnYy", "diffSide": "RIGHT", "path": "rts/lra/lra-test/lra-test-basic/src/test/java/io/narayana/lra/arquillian/resource/FailingAfterLRAListener.java", "isResolved": false, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMToyODoxMlrOFl0f9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMDoxMTozMVrOFm4QLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwMTc4Mg==", "bodyText": "@mmusgrov please can you add a reference to https://issues.redhat.com/browse/JBTM-3163 here so we know why it is doing this twice. IIUC the comment from @xstefank then if that is fixed then this line will probably start failing as afterLRA will only be called twice.", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r375201782", "createdAt": "2020-02-05T11:28:12Z", "author": {"login": "tomjenkinson"}, "path": "rts/lra/lra-test/lra-test-basic/src/test/java/io/narayana/lra/arquillian/resource/FailingAfterLRAListener.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2019, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.resource;\n+\n+import org.eclipse.microprofile.lra.annotation.AfterLRA;\n+import org.eclipse.microprofile.lra.annotation.ws.rs.LRA;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.HeaderParam;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.core.Response;\n+import java.net.URI;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+@Path(FailingAfterLRAListener.ROOT_PATH)\n+public class FailingAfterLRAListener {\n+\n+    public static final String ROOT_PATH = \"failing-after-lra-listener\";\n+    public static final String ACTION_PATH = \"action\";\n+\n+    private static final AtomicInteger afterLRACounter = new AtomicInteger(0);\n+\n+    @GET\n+    @Path(ACTION_PATH)\n+    @LRA(LRA.Type.REQUIRED)\n+    public String doWorkInLRA(@HeaderParam(LRA.LRA_HTTP_CONTEXT_HEADER) URI lraId) {\n+        return lraId.toASCIIString();\n+    }\n+\n+    @PUT\n+    @Path(\"after-lra\")\n+    @AfterLRA\n+    public Response afterLRA(@HeaderParam(LRA.LRA_HTTP_ENDED_CONTEXT_HEADER) URI endedLRAId) {\n+        if (afterLRACounter.getAndIncrement() < 2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2db3babd15da0a202da93b36e07bcef43ebd396"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwODQ5NQ==", "bodyText": "@tomjenkinson no, it shouldn't start failing. The recovery will just be replayed two times.", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r375208495", "createdAt": "2020-02-05T11:44:28Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-test/lra-test-basic/src/test/java/io/narayana/lra/arquillian/resource/FailingAfterLRAListener.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2019, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.resource;\n+\n+import org.eclipse.microprofile.lra.annotation.AfterLRA;\n+import org.eclipse.microprofile.lra.annotation.ws.rs.LRA;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.HeaderParam;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.core.Response;\n+import java.net.URI;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+@Path(FailingAfterLRAListener.ROOT_PATH)\n+public class FailingAfterLRAListener {\n+\n+    public static final String ROOT_PATH = \"failing-after-lra-listener\";\n+    public static final String ACTION_PATH = \"action\";\n+\n+    private static final AtomicInteger afterLRACounter = new AtomicInteger(0);\n+\n+    @GET\n+    @Path(ACTION_PATH)\n+    @LRA(LRA.Type.REQUIRED)\n+    public String doWorkInLRA(@HeaderParam(LRA.LRA_HTTP_CONTEXT_HEADER) URI lraId) {\n+        return lraId.toASCIIString();\n+    }\n+\n+    @PUT\n+    @Path(\"after-lra\")\n+    @AfterLRA\n+    public Response afterLRA(@HeaderParam(LRA.LRA_HTTP_ENDED_CONTEXT_HEADER) URI endedLRAId) {\n+        if (afterLRACounter.getAndIncrement() < 2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwMTc4Mg=="}, "originalCommit": {"oid": "f2db3babd15da0a202da93b36e07bcef43ebd396"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxNjcwNQ==", "bodyText": "If I understand you correctly, once https://issues.redhat.com/browse/JBTM-3163 is fixed instead of two notifications for one recovery we could go down to \"getAndIncrement < 1\"\nAm I right in thinking therefore that https://github.com/jbosstm/narayana/pull/1559/files#diff-6ba4dd5973413b54d0299d8935a156c1R54-R56 is not actually required or used in this PR? If so I think we should remove that part? I will create a discussion localised on that line for this.", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r375216705", "createdAt": "2020-02-05T12:04:11Z", "author": {"login": "tomjenkinson"}, "path": "rts/lra/lra-test/lra-test-basic/src/test/java/io/narayana/lra/arquillian/resource/FailingAfterLRAListener.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2019, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.resource;\n+\n+import org.eclipse.microprofile.lra.annotation.AfterLRA;\n+import org.eclipse.microprofile.lra.annotation.ws.rs.LRA;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.HeaderParam;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.core.Response;\n+import java.net.URI;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+@Path(FailingAfterLRAListener.ROOT_PATH)\n+public class FailingAfterLRAListener {\n+\n+    public static final String ROOT_PATH = \"failing-after-lra-listener\";\n+    public static final String ACTION_PATH = \"action\";\n+\n+    private static final AtomicInteger afterLRACounter = new AtomicInteger(0);\n+\n+    @GET\n+    @Path(ACTION_PATH)\n+    @LRA(LRA.Type.REQUIRED)\n+    public String doWorkInLRA(@HeaderParam(LRA.LRA_HTTP_CONTEXT_HEADER) URI lraId) {\n+        return lraId.toASCIIString();\n+    }\n+\n+    @PUT\n+    @Path(\"after-lra\")\n+    @AfterLRA\n+    public Response afterLRA(@HeaderParam(LRA.LRA_HTTP_ENDED_CONTEXT_HEADER) URI endedLRAId) {\n+        if (afterLRACounter.getAndIncrement() < 2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwMTc4Mg=="}, "originalCommit": {"oid": "f2db3babd15da0a202da93b36e07bcef43ebd396"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxOTI4NA==", "bodyText": "Actually I see the code may well apply if the scan is in progress", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r375219284", "createdAt": "2020-02-05T12:10:05Z", "author": {"login": "tomjenkinson"}, "path": "rts/lra/lra-test/lra-test-basic/src/test/java/io/narayana/lra/arquillian/resource/FailingAfterLRAListener.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2019, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.resource;\n+\n+import org.eclipse.microprofile.lra.annotation.AfterLRA;\n+import org.eclipse.microprofile.lra.annotation.ws.rs.LRA;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.HeaderParam;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.core.Response;\n+import java.net.URI;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+@Path(FailingAfterLRAListener.ROOT_PATH)\n+public class FailingAfterLRAListener {\n+\n+    public static final String ROOT_PATH = \"failing-after-lra-listener\";\n+    public static final String ACTION_PATH = \"action\";\n+\n+    private static final AtomicInteger afterLRACounter = new AtomicInteger(0);\n+\n+    @GET\n+    @Path(ACTION_PATH)\n+    @LRA(LRA.Type.REQUIRED)\n+    public String doWorkInLRA(@HeaderParam(LRA.LRA_HTTP_CONTEXT_HEADER) URI lraId) {\n+        return lraId.toASCIIString();\n+    }\n+\n+    @PUT\n+    @Path(\"after-lra\")\n+    @AfterLRA\n+    public Response afterLRA(@HeaderParam(LRA.LRA_HTTP_ENDED_CONTEXT_HEADER) URI endedLRAId) {\n+        if (afterLRACounter.getAndIncrement() < 2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwMTc4Mg=="}, "originalCommit": {"oid": "f2db3babd15da0a202da93b36e07bcef43ebd396"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIyMDY4Nw==", "bodyText": "It is possible to move it to < 1 after https://issues.redhat.com/browse/JBTM-3163 is resolved, but not required.\nSorry, the second link doesn't probably take me where you've intended. But if it's NarayanaLRARecovery then that code is correct. The two invocations there are about something different -- namely the clash with periodic recovery which may sometime happen. That is a different issue which was decided that it will not be resolved some time ago.", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r375220687", "createdAt": "2020-02-05T12:13:31Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-test/lra-test-basic/src/test/java/io/narayana/lra/arquillian/resource/FailingAfterLRAListener.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2019, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.resource;\n+\n+import org.eclipse.microprofile.lra.annotation.AfterLRA;\n+import org.eclipse.microprofile.lra.annotation.ws.rs.LRA;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.HeaderParam;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.core.Response;\n+import java.net.URI;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+@Path(FailingAfterLRAListener.ROOT_PATH)\n+public class FailingAfterLRAListener {\n+\n+    public static final String ROOT_PATH = \"failing-after-lra-listener\";\n+    public static final String ACTION_PATH = \"action\";\n+\n+    private static final AtomicInteger afterLRACounter = new AtomicInteger(0);\n+\n+    @GET\n+    @Path(ACTION_PATH)\n+    @LRA(LRA.Type.REQUIRED)\n+    public String doWorkInLRA(@HeaderParam(LRA.LRA_HTTP_CONTEXT_HEADER) URI lraId) {\n+        return lraId.toASCIIString();\n+    }\n+\n+    @PUT\n+    @Path(\"after-lra\")\n+    @AfterLRA\n+    public Response afterLRA(@HeaderParam(LRA.LRA_HTTP_ENDED_CONTEXT_HEADER) URI endedLRAId) {\n+        if (afterLRACounter.getAndIncrement() < 2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwMTc4Mg=="}, "originalCommit": {"oid": "f2db3babd15da0a202da93b36e07bcef43ebd396"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIyMjA3NQ==", "bodyText": "I understand this better now. Currently we need 3 total calls to this method  (two from the normal cleanup, one (though will receive 2) from recovery)\nIn the future we need 2 notifications (one from the normal cleanup, one from recovery) so will be able to change this line to if (afterLRACounter.getAndIncrement() < 1) after JBTM-2863 is solved. As such it needs the comment and a reference to the bit that needs cleanup adding to the JBTM", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r375222075", "createdAt": "2020-02-05T12:16:56Z", "author": {"login": "tomjenkinson"}, "path": "rts/lra/lra-test/lra-test-basic/src/test/java/io/narayana/lra/arquillian/resource/FailingAfterLRAListener.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2019, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.resource;\n+\n+import org.eclipse.microprofile.lra.annotation.AfterLRA;\n+import org.eclipse.microprofile.lra.annotation.ws.rs.LRA;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.HeaderParam;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.core.Response;\n+import java.net.URI;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+@Path(FailingAfterLRAListener.ROOT_PATH)\n+public class FailingAfterLRAListener {\n+\n+    public static final String ROOT_PATH = \"failing-after-lra-listener\";\n+    public static final String ACTION_PATH = \"action\";\n+\n+    private static final AtomicInteger afterLRACounter = new AtomicInteger(0);\n+\n+    @GET\n+    @Path(ACTION_PATH)\n+    @LRA(LRA.Type.REQUIRED)\n+    public String doWorkInLRA(@HeaderParam(LRA.LRA_HTTP_CONTEXT_HEADER) URI lraId) {\n+        return lraId.toASCIIString();\n+    }\n+\n+    @PUT\n+    @Path(\"after-lra\")\n+    @AfterLRA\n+    public Response afterLRA(@HeaderParam(LRA.LRA_HTTP_ENDED_CONTEXT_HEADER) URI endedLRAId) {\n+        if (afterLRACounter.getAndIncrement() < 2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwMTc4Mg=="}, "originalCommit": {"oid": "f2db3babd15da0a202da93b36e07bcef43ebd396"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIzMjQxNA==", "bodyText": "I am not clear on what this discussion is about. The test says afterLRACounter.getAndIncrement() < 2 so it will return a 500 error status 2 times followed by a 200 status. The test is verifying that the LRA implementation will keep attempting the AfterLRA notification until it receives an HTTP 200 OK response. So in all we expect 2+1=3 notifications. The test FailingParticipantCallsIT asserts that the callback was invoked 3 times.\nOn the issue of JBTM-3163 that should have been incidentally resolved by the PR but it seems irrelevant to this PR.", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r375232414", "createdAt": "2020-02-05T12:41:53Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-test/lra-test-basic/src/test/java/io/narayana/lra/arquillian/resource/FailingAfterLRAListener.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2019, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.resource;\n+\n+import org.eclipse.microprofile.lra.annotation.AfterLRA;\n+import org.eclipse.microprofile.lra.annotation.ws.rs.LRA;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.HeaderParam;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.core.Response;\n+import java.net.URI;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+@Path(FailingAfterLRAListener.ROOT_PATH)\n+public class FailingAfterLRAListener {\n+\n+    public static final String ROOT_PATH = \"failing-after-lra-listener\";\n+    public static final String ACTION_PATH = \"action\";\n+\n+    private static final AtomicInteger afterLRACounter = new AtomicInteger(0);\n+\n+    @GET\n+    @Path(ACTION_PATH)\n+    @LRA(LRA.Type.REQUIRED)\n+    public String doWorkInLRA(@HeaderParam(LRA.LRA_HTTP_CONTEXT_HEADER) URI lraId) {\n+        return lraId.toASCIIString();\n+    }\n+\n+    @PUT\n+    @Path(\"after-lra\")\n+    @AfterLRA\n+    public Response afterLRA(@HeaderParam(LRA.LRA_HTTP_ENDED_CONTEXT_HEADER) URI endedLRAId) {\n+        if (afterLRACounter.getAndIncrement() < 2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwMTc4Mg=="}, "originalCommit": {"oid": "f2db3babd15da0a202da93b36e07bcef43ebd396"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc4MjA4MA==", "bodyText": "The discussion is fundamentally related to the \"2\" in your formula \"2+1=3\", in other words why we have the need to return the ISE twice rather than just once.\nThe reason I understand that the test originally needed to skip \"2\" calls before was because of a duplicate notification (JBTM-3163) so the two calls would have been from the same routine execution in Narayana (this?) and so returning OK to the second notification would not have tested the call was repeated.\nThe premise of the observation is related to why the test not just say:\nif (afterLRACounter.getAndIncrement() < 1) {\n     return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();\n}\nreturn Response.ok().build();", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r375782080", "createdAt": "2020-02-06T11:29:37Z", "author": {"login": "tomjenkinson"}, "path": "rts/lra/lra-test/lra-test-basic/src/test/java/io/narayana/lra/arquillian/resource/FailingAfterLRAListener.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2019, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.resource;\n+\n+import org.eclipse.microprofile.lra.annotation.AfterLRA;\n+import org.eclipse.microprofile.lra.annotation.ws.rs.LRA;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.HeaderParam;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.core.Response;\n+import java.net.URI;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+@Path(FailingAfterLRAListener.ROOT_PATH)\n+public class FailingAfterLRAListener {\n+\n+    public static final String ROOT_PATH = \"failing-after-lra-listener\";\n+    public static final String ACTION_PATH = \"action\";\n+\n+    private static final AtomicInteger afterLRACounter = new AtomicInteger(0);\n+\n+    @GET\n+    @Path(ACTION_PATH)\n+    @LRA(LRA.Type.REQUIRED)\n+    public String doWorkInLRA(@HeaderParam(LRA.LRA_HTTP_CONTEXT_HEADER) URI lraId) {\n+        return lraId.toASCIIString();\n+    }\n+\n+    @PUT\n+    @Path(\"after-lra\")\n+    @AfterLRA\n+    public Response afterLRA(@HeaderParam(LRA.LRA_HTTP_ENDED_CONTEXT_HEADER) URI endedLRAId) {\n+        if (afterLRACounter.getAndIncrement() < 2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwMTc4Mg=="}, "originalCommit": {"oid": "f2db3babd15da0a202da93b36e07bcef43ebd396"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc4OTc3Mw==", "bodyText": "@mmusgrov I think this is the last area to get clarity on. Do we need to return ISE on the first 2 calls to afterLRA or could it just be one now? And what is the plan to resolve JBTM-3163, will it be linked to this PR somehow?", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r375789773", "createdAt": "2020-02-06T11:48:14Z", "author": {"login": "tomjenkinson"}, "path": "rts/lra/lra-test/lra-test-basic/src/test/java/io/narayana/lra/arquillian/resource/FailingAfterLRAListener.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2019, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.resource;\n+\n+import org.eclipse.microprofile.lra.annotation.AfterLRA;\n+import org.eclipse.microprofile.lra.annotation.ws.rs.LRA;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.HeaderParam;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.core.Response;\n+import java.net.URI;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+@Path(FailingAfterLRAListener.ROOT_PATH)\n+public class FailingAfterLRAListener {\n+\n+    public static final String ROOT_PATH = \"failing-after-lra-listener\";\n+    public static final String ACTION_PATH = \"action\";\n+\n+    private static final AtomicInteger afterLRACounter = new AtomicInteger(0);\n+\n+    @GET\n+    @Path(ACTION_PATH)\n+    @LRA(LRA.Type.REQUIRED)\n+    public String doWorkInLRA(@HeaderParam(LRA.LRA_HTTP_CONTEXT_HEADER) URI lraId) {\n+        return lraId.toASCIIString();\n+    }\n+\n+    @PUT\n+    @Path(\"after-lra\")\n+    @AfterLRA\n+    public Response afterLRA(@HeaderParam(LRA.LRA_HTTP_ENDED_CONTEXT_HEADER) URI endedLRAId) {\n+        if (afterLRACounter.getAndIncrement() < 2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwMTc4Mg=="}, "originalCommit": {"oid": "f2db3babd15da0a202da93b36e07bcef43ebd396"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMxMTg1NQ==", "bodyText": "Well okay I changed it to 2 to get faster test turnaround time on testing.", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r376311855", "createdAt": "2020-02-07T10:11:31Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-test/lra-test-basic/src/test/java/io/narayana/lra/arquillian/resource/FailingAfterLRAListener.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2019, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.resource;\n+\n+import org.eclipse.microprofile.lra.annotation.AfterLRA;\n+import org.eclipse.microprofile.lra.annotation.ws.rs.LRA;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.HeaderParam;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.core.Response;\n+import java.net.URI;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+@Path(FailingAfterLRAListener.ROOT_PATH)\n+public class FailingAfterLRAListener {\n+\n+    public static final String ROOT_PATH = \"failing-after-lra-listener\";\n+    public static final String ACTION_PATH = \"action\";\n+\n+    private static final AtomicInteger afterLRACounter = new AtomicInteger(0);\n+\n+    @GET\n+    @Path(ACTION_PATH)\n+    @LRA(LRA.Type.REQUIRED)\n+    public String doWorkInLRA(@HeaderParam(LRA.LRA_HTTP_CONTEXT_HEADER) URI lraId) {\n+        return lraId.toASCIIString();\n+    }\n+\n+    @PUT\n+    @Path(\"after-lra\")\n+    @AfterLRA\n+    public Response afterLRA(@HeaderParam(LRA.LRA_HTTP_ENDED_CONTEXT_HEADER) URI endedLRAId) {\n+        if (afterLRACounter.getAndIncrement() < 2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwMTc4Mg=="}, "originalCommit": {"oid": "f2db3babd15da0a202da93b36e07bcef43ebd396"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDYwMDA4OnYy", "diffSide": "RIGHT", "path": "rts/lra/lra-test/lra-test-arquillian-extension/src/main/java/io/narayana/lra/arquillian/spi/NarayanaLRARecovery.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjoxMTowMFrOFl1lqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOToxNjoyM1rOFm2s4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxOTYyNA==", "bodyText": "@xstefank @mmusgrov perhaps we could turn off automated recovery for this test if we want more predictability", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r375219624", "createdAt": "2020-02-05T12:11:00Z", "author": {"login": "tomjenkinson"}, "path": "rts/lra/lra-test/lra-test-arquillian-extension/src/main/java/io/narayana/lra/arquillian/spi/NarayanaLRARecovery.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.spi;\n+\n+import io.narayana.lra.LRAConstants;\n+import io.narayana.lra.logging.LRALogger;\n+\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.Response;\n+import java.net.URI;\n+\n+public class NarayanaLRARecovery {\n+\n+    public void waitForCallbacks(URI lraId) {\n+        // no action is needed, tck callbacks calls are sufficiently fast for TCK\n+    }\n+\n+    // TODO remove once this class implements LRARecoveryService\n+    public void waitForRecovery(URI lraId) {\n+        int counter = 0;\n+\n+        do {\n+            LRALogger.logger.info(\"Recovery attempt #\" + ++counter);\n+        } while (!waitForEndPhaseReplay(lraId));\n+        LRALogger.logger.info(\"LRA \" + lraId + \"has finished the recovery \" + counter);\n+    }\n+\n+    public boolean waitForEndPhaseReplay(URI lraId) {\n+        String host = lraId.getHost();\n+        int port = lraId.getPort();\n+        if (!recoverLRAs(host, port, lraId)) {\n+            // first recovery scan probably collided with periodic recovevery which started\n+            // before the test execution so try once more\n+            return recoverLRAs(host, port, lraId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2db3babd15da0a202da93b36e07bcef43ebd396"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIyMTgwNQ==", "bodyText": "@tomjenkinson AfterLRA can be replayed several times successfully. The test is just testing that it will be eventually replayed, but the specification allows it to be replayed even 4 or 5 times (unbounded). So I think the test is correct.", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r375221805", "createdAt": "2020-02-05T12:16:16Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-test/lra-test-arquillian-extension/src/main/java/io/narayana/lra/arquillian/spi/NarayanaLRARecovery.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.spi;\n+\n+import io.narayana.lra.LRAConstants;\n+import io.narayana.lra.logging.LRALogger;\n+\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.Response;\n+import java.net.URI;\n+\n+public class NarayanaLRARecovery {\n+\n+    public void waitForCallbacks(URI lraId) {\n+        // no action is needed, tck callbacks calls are sufficiently fast for TCK\n+    }\n+\n+    // TODO remove once this class implements LRARecoveryService\n+    public void waitForRecovery(URI lraId) {\n+        int counter = 0;\n+\n+        do {\n+            LRALogger.logger.info(\"Recovery attempt #\" + ++counter);\n+        } while (!waitForEndPhaseReplay(lraId));\n+        LRALogger.logger.info(\"LRA \" + lraId + \"has finished the recovery \" + counter);\n+    }\n+\n+    public boolean waitForEndPhaseReplay(URI lraId) {\n+        String host = lraId.getHost();\n+        int port = lraId.getPort();\n+        if (!recoverLRAs(host, port, lraId)) {\n+            // first recovery scan probably collided with periodic recovevery which started\n+            // before the test execution so try once more\n+            return recoverLRAs(host, port, lraId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxOTYyNA=="}, "originalCommit": {"oid": "f2db3babd15da0a202da93b36e07bcef43ebd396"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc4ODAwMA==", "bodyText": "Sure, but under test conditions in Narayana we can control this to reduce the number of retries. If we turned off background recovery and triggered the recovery manually you would only need one call to recoverLRAs(host, port, lraId).\nHowever, given the recovery manager is (I assume) running in a service similar to in WildFly then actually this is not necessarily possible. What might be possible is to delay the background recovery thread from starting for some arbitrarily long period using \n  \n    \n      narayana/ArjunaCore/arjuna/classes/com/arjuna/ats/arjuna/common/RecoveryEnvironmentBean.java\n    \n    \n         Line 47\n      in\n      1e17caa\n    \n    \n    \n    \n\n        \n          \n           private volatile int periodicRecoveryInitilizationOffset = 0;", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r375788000", "createdAt": "2020-02-06T11:43:52Z", "author": {"login": "tomjenkinson"}, "path": "rts/lra/lra-test/lra-test-arquillian-extension/src/main/java/io/narayana/lra/arquillian/spi/NarayanaLRARecovery.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.spi;\n+\n+import io.narayana.lra.LRAConstants;\n+import io.narayana.lra.logging.LRALogger;\n+\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.Response;\n+import java.net.URI;\n+\n+public class NarayanaLRARecovery {\n+\n+    public void waitForCallbacks(URI lraId) {\n+        // no action is needed, tck callbacks calls are sufficiently fast for TCK\n+    }\n+\n+    // TODO remove once this class implements LRARecoveryService\n+    public void waitForRecovery(URI lraId) {\n+        int counter = 0;\n+\n+        do {\n+            LRALogger.logger.info(\"Recovery attempt #\" + ++counter);\n+        } while (!waitForEndPhaseReplay(lraId));\n+        LRALogger.logger.info(\"LRA \" + lraId + \"has finished the recovery \" + counter);\n+    }\n+\n+    public boolean waitForEndPhaseReplay(URI lraId) {\n+        String host = lraId.getHost();\n+        int port = lraId.getPort();\n+        if (!recoverLRAs(host, port, lraId)) {\n+            // first recovery scan probably collided with periodic recovevery which started\n+            // before the test execution so try once more\n+            return recoverLRAs(host, port, lraId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxOTYyNA=="}, "originalCommit": {"oid": "f2db3babd15da0a202da93b36e07bcef43ebd396"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc4OTMwNA==", "bodyText": "@tomjenkinson thanks, I didn't know about this. We can use I think. But let's leave that to some other PR/issue, please.", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r375789304", "createdAt": "2020-02-06T11:47:05Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-test/lra-test-arquillian-extension/src/main/java/io/narayana/lra/arquillian/spi/NarayanaLRARecovery.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.spi;\n+\n+import io.narayana.lra.LRAConstants;\n+import io.narayana.lra.logging.LRALogger;\n+\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.Response;\n+import java.net.URI;\n+\n+public class NarayanaLRARecovery {\n+\n+    public void waitForCallbacks(URI lraId) {\n+        // no action is needed, tck callbacks calls are sufficiently fast for TCK\n+    }\n+\n+    // TODO remove once this class implements LRARecoveryService\n+    public void waitForRecovery(URI lraId) {\n+        int counter = 0;\n+\n+        do {\n+            LRALogger.logger.info(\"Recovery attempt #\" + ++counter);\n+        } while (!waitForEndPhaseReplay(lraId));\n+        LRALogger.logger.info(\"LRA \" + lraId + \"has finished the recovery \" + counter);\n+    }\n+\n+    public boolean waitForEndPhaseReplay(URI lraId) {\n+        String host = lraId.getHost();\n+        int port = lraId.getPort();\n+        if (!recoverLRAs(host, port, lraId)) {\n+            // first recovery scan probably collided with periodic recovevery which started\n+            // before the test execution so try once more\n+            return recoverLRAs(host, port, lraId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxOTYyNA=="}, "originalCommit": {"oid": "f2db3babd15da0a202da93b36e07bcef43ebd396"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc5MDkxNQ==", "bodyText": "Yeah, seems reasonable as the test is valid either way I think as we are getting the extra notifications.", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r375790915", "createdAt": "2020-02-06T11:51:13Z", "author": {"login": "tomjenkinson"}, "path": "rts/lra/lra-test/lra-test-arquillian-extension/src/main/java/io/narayana/lra/arquillian/spi/NarayanaLRARecovery.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.spi;\n+\n+import io.narayana.lra.LRAConstants;\n+import io.narayana.lra.logging.LRALogger;\n+\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.Response;\n+import java.net.URI;\n+\n+public class NarayanaLRARecovery {\n+\n+    public void waitForCallbacks(URI lraId) {\n+        // no action is needed, tck callbacks calls are sufficiently fast for TCK\n+    }\n+\n+    // TODO remove once this class implements LRARecoveryService\n+    public void waitForRecovery(URI lraId) {\n+        int counter = 0;\n+\n+        do {\n+            LRALogger.logger.info(\"Recovery attempt #\" + ++counter);\n+        } while (!waitForEndPhaseReplay(lraId));\n+        LRALogger.logger.info(\"LRA \" + lraId + \"has finished the recovery \" + counter);\n+    }\n+\n+    public boolean waitForEndPhaseReplay(URI lraId) {\n+        String host = lraId.getHost();\n+        int port = lraId.getPort();\n+        if (!recoverLRAs(host, port, lraId)) {\n+            // first recovery scan probably collided with periodic recovevery which started\n+            // before the test execution so try once more\n+            return recoverLRAs(host, port, lraId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxOTYyNA=="}, "originalCommit": {"oid": "f2db3babd15da0a202da93b36e07bcef43ebd396"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI4NjQzNQ==", "bodyText": "We already tweak that config option. You could change it now on the LRA branch or just wait for the merge into master. I don't think there is any particular urgency.", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r376286435", "createdAt": "2020-02-07T09:16:23Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-test/lra-test-arquillian-extension/src/main/java/io/narayana/lra/arquillian/spi/NarayanaLRARecovery.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.spi;\n+\n+import io.narayana.lra.LRAConstants;\n+import io.narayana.lra.logging.LRALogger;\n+\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.Response;\n+import java.net.URI;\n+\n+public class NarayanaLRARecovery {\n+\n+    public void waitForCallbacks(URI lraId) {\n+        // no action is needed, tck callbacks calls are sufficiently fast for TCK\n+    }\n+\n+    // TODO remove once this class implements LRARecoveryService\n+    public void waitForRecovery(URI lraId) {\n+        int counter = 0;\n+\n+        do {\n+            LRALogger.logger.info(\"Recovery attempt #\" + ++counter);\n+        } while (!waitForEndPhaseReplay(lraId));\n+        LRALogger.logger.info(\"LRA \" + lraId + \"has finished the recovery \" + counter);\n+    }\n+\n+    public boolean waitForEndPhaseReplay(URI lraId) {\n+        String host = lraId.getHost();\n+        int port = lraId.getPort();\n+        if (!recoverLRAs(host, port, lraId)) {\n+            // first recovery scan probably collided with periodic recovevery which started\n+            // before the test execution so try once more\n+            return recoverLRAs(host, port, lraId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxOTYyNA=="}, "originalCommit": {"oid": "f2db3babd15da0a202da93b36e07bcef43ebd396"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzY4NzQ2OnYy", "diffSide": "RIGHT", "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRARecord.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMDo1Njo0OVrOFm5gZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMjowMDozNVrOFnjh8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMzMjM5MA==", "bodyText": "@mmusgrov please can you expand on the situation where afterURI can be null at this point and what the value of res could be?\nIf afterURI is null we will return TwoPhaseOutcome.FINISH_OK but res might not always be that from what I can see in above calls to atEnd(int) - including at least one call that might pass in HEURISTIC_HAZARD. Maybe in those cases afterURI could never be null? But then what about the one which uses a value from retryGetEndStatus or reportFailure", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r376332390", "createdAt": "2020-02-07T10:56:49Z", "author": {"login": "tomjenkinson"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRARecord.java", "diffHunk": "@@ -361,18 +375,88 @@ private int tryDoEnd(boolean compensate) {\n                  * so if we were to return FINISH_ERROR recovery would not replay the log.\n                  * To force the record to be eligible for recovery we return a heuristic hazard.\n                  */\n-                return TwoPhaseOutcome.HEURISTIC_HAZARD;\n+                return atEnd(TwoPhaseOutcome.HEURISTIC_HAZARD);\n             }\n \n             status = ParticipantStatus.Completing; // recovery will figure out the status via the status url\n \n-            return TwoPhaseOutcome.FINISH_ERROR;\n+            return atEnd(TwoPhaseOutcome.FINISH_ERROR);\n         }\n \n         updateStatus(compensate);\n \n         // if the the request is still in progress (ie accepted is true) let recovery finish it\n-        return accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK;\n+        return atEnd(accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK);\n+    }\n+\n+    boolean isFinished() {\n+        // nested participants must still be able to compensate even if they are closed\n+        if (compensateURI == null) {\n+            return afterURI != null;\n+        }\n+\n+        switch (status) {\n+            case Completed:\n+                /* FALLTHRU */\n+            case FailedToComplete:\n+                return parentId == null; // completed nested LRAs must remain cancellable\n+            case Compensated:\n+                /* FALLTHRU */\n+            case FailedToCompensate:\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private boolean afterLRARequest(URI target, Transaction lra, String payload) {\n+        try {\n+            RequestBuilder builder = new RequestBuilder(target)\n+                    .request()\n+                    .header(LRA.LRA_HTTP_RECOVERY_HEADER, recoveryURI.toASCIIString());\n+\n+            if (target.equals(afterURI)) {\n+                builder.header(LRA.LRA_HTTP_ENDED_CONTEXT_HEADER, lra.getId().toASCIIString());\n+            } else {\n+                builder.header(LRA.LRA_HTTP_CONTEXT_HEADER, lra.getId().toASCIIString());\n+            }\n+\n+            builder.async(PARTICIPANT_TIMEOUT, TimeUnit.SECONDS);\n+\n+            ResponseHolder response = target.equals(forgetURI) ? builder.delete() : builder.put(payload, MediaType.TEXT_PLAIN);\n+\n+            if (response.getStatus() == 200) {\n+                return true;\n+            }\n+        } catch (WebApplicationException e) {\n+            if (LRALogger.logger.isInfoEnabled()) {\n+                LRALogger.logger.infof(\"Could not notify URI at %s (%s)\", target, e.getMessage());\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    private int atEnd(int res) {\n+        // Only run the post LRA actions if both the LRA and participant are in an end state\n+        // check the participant first since it will have been removed from one of the lists\n+        if (!isFinished() || !lra.isFinished()) {\n+            if (afterURI != null) {\n+                return TwoPhaseOutcome.HEURISTIC_HAZARD;\n+            }\n+\n+            return res;\n+        }\n+\n+        // run post LRA actions\n+        if (afterURI == null || afterLRARequest(afterURI, lra, lra.getLRAStatus().name())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8f54959b9a418bcb8ca41e8bb518b6e61dc0180"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM3MTExNA==", "bodyText": "This bit of code will only run if it is time to run the post LRA actions. If those actions succeed then we are finished with this record and we return FINISH_OK which removes this record from the intentions list.\nIn more detail:\n\nIf the status passed to the atEnd routine is HEURISTIC_HAZARD then the previous check (line 443) if (!isFinished() || !lra.isFinished()) { will have been true so the bit of code you have highlighted will not be reached and we return HH or the res value depending on whether or not afterURI is null.\nThe reportFailure route will always return TwoPhaseOutcome.FINISH_OK (since the spec only requires us to log failures). But do note that we have JBTM-3247 \"Failed LRA records are reported but they not kept\" which when fixed will keep those records (and the fix for that should take account of your current comment).\nThe other route you mention is retryGetEndStatus then:\n\nif this returns HH then it is covered by point 1) above\nif it returns FE (FINISH_ERROR) then it ought to have been covered by point 2) above where failures should be reported but the log can be removed. Although I do notice in this routine that the failure will not be reported using a logging statement but that is part of the fix for JBTM-3247 (keep failed records).", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r376371114", "createdAt": "2020-02-07T12:43:04Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRARecord.java", "diffHunk": "@@ -361,18 +375,88 @@ private int tryDoEnd(boolean compensate) {\n                  * so if we were to return FINISH_ERROR recovery would not replay the log.\n                  * To force the record to be eligible for recovery we return a heuristic hazard.\n                  */\n-                return TwoPhaseOutcome.HEURISTIC_HAZARD;\n+                return atEnd(TwoPhaseOutcome.HEURISTIC_HAZARD);\n             }\n \n             status = ParticipantStatus.Completing; // recovery will figure out the status via the status url\n \n-            return TwoPhaseOutcome.FINISH_ERROR;\n+            return atEnd(TwoPhaseOutcome.FINISH_ERROR);\n         }\n \n         updateStatus(compensate);\n \n         // if the the request is still in progress (ie accepted is true) let recovery finish it\n-        return accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK;\n+        return atEnd(accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK);\n+    }\n+\n+    boolean isFinished() {\n+        // nested participants must still be able to compensate even if they are closed\n+        if (compensateURI == null) {\n+            return afterURI != null;\n+        }\n+\n+        switch (status) {\n+            case Completed:\n+                /* FALLTHRU */\n+            case FailedToComplete:\n+                return parentId == null; // completed nested LRAs must remain cancellable\n+            case Compensated:\n+                /* FALLTHRU */\n+            case FailedToCompensate:\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private boolean afterLRARequest(URI target, Transaction lra, String payload) {\n+        try {\n+            RequestBuilder builder = new RequestBuilder(target)\n+                    .request()\n+                    .header(LRA.LRA_HTTP_RECOVERY_HEADER, recoveryURI.toASCIIString());\n+\n+            if (target.equals(afterURI)) {\n+                builder.header(LRA.LRA_HTTP_ENDED_CONTEXT_HEADER, lra.getId().toASCIIString());\n+            } else {\n+                builder.header(LRA.LRA_HTTP_CONTEXT_HEADER, lra.getId().toASCIIString());\n+            }\n+\n+            builder.async(PARTICIPANT_TIMEOUT, TimeUnit.SECONDS);\n+\n+            ResponseHolder response = target.equals(forgetURI) ? builder.delete() : builder.put(payload, MediaType.TEXT_PLAIN);\n+\n+            if (response.getStatus() == 200) {\n+                return true;\n+            }\n+        } catch (WebApplicationException e) {\n+            if (LRALogger.logger.isInfoEnabled()) {\n+                LRALogger.logger.infof(\"Could not notify URI at %s (%s)\", target, e.getMessage());\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    private int atEnd(int res) {\n+        // Only run the post LRA actions if both the LRA and participant are in an end state\n+        // check the participant first since it will have been removed from one of the lists\n+        if (!isFinished() || !lra.isFinished()) {\n+            if (afterURI != null) {\n+                return TwoPhaseOutcome.HEURISTIC_HAZARD;\n+            }\n+\n+            return res;\n+        }\n+\n+        // run post LRA actions\n+        if (afterURI == null || afterLRARequest(afterURI, lra, lra.getLRAStatus().name())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMzMjM5MA=="}, "originalCommit": {"oid": "b8f54959b9a418bcb8ca41e8bb518b6e61dc0180"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2MTMxNg==", "bodyText": "Thanks Mike. Regarding the missing logging you mentioned \"will not be reported using a logging statement\" - do you mean this particular detection of the LRAStatus being FailedToClose or FailedToCancel was not logged but another one would have been or that it might not have been reported at all? If the latter, it would seem different to https://issues.redhat.com/browse/JBTM-3247\nPlease can you add the conditions necessary to remember to verify JBTM-3247 text so we remember to check them?", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r376461316", "createdAt": "2020-02-07T15:45:55Z", "author": {"login": "tomjenkinson"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRARecord.java", "diffHunk": "@@ -361,18 +375,88 @@ private int tryDoEnd(boolean compensate) {\n                  * so if we were to return FINISH_ERROR recovery would not replay the log.\n                  * To force the record to be eligible for recovery we return a heuristic hazard.\n                  */\n-                return TwoPhaseOutcome.HEURISTIC_HAZARD;\n+                return atEnd(TwoPhaseOutcome.HEURISTIC_HAZARD);\n             }\n \n             status = ParticipantStatus.Completing; // recovery will figure out the status via the status url\n \n-            return TwoPhaseOutcome.FINISH_ERROR;\n+            return atEnd(TwoPhaseOutcome.FINISH_ERROR);\n         }\n \n         updateStatus(compensate);\n \n         // if the the request is still in progress (ie accepted is true) let recovery finish it\n-        return accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK;\n+        return atEnd(accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK);\n+    }\n+\n+    boolean isFinished() {\n+        // nested participants must still be able to compensate even if they are closed\n+        if (compensateURI == null) {\n+            return afterURI != null;\n+        }\n+\n+        switch (status) {\n+            case Completed:\n+                /* FALLTHRU */\n+            case FailedToComplete:\n+                return parentId == null; // completed nested LRAs must remain cancellable\n+            case Compensated:\n+                /* FALLTHRU */\n+            case FailedToCompensate:\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private boolean afterLRARequest(URI target, Transaction lra, String payload) {\n+        try {\n+            RequestBuilder builder = new RequestBuilder(target)\n+                    .request()\n+                    .header(LRA.LRA_HTTP_RECOVERY_HEADER, recoveryURI.toASCIIString());\n+\n+            if (target.equals(afterURI)) {\n+                builder.header(LRA.LRA_HTTP_ENDED_CONTEXT_HEADER, lra.getId().toASCIIString());\n+            } else {\n+                builder.header(LRA.LRA_HTTP_CONTEXT_HEADER, lra.getId().toASCIIString());\n+            }\n+\n+            builder.async(PARTICIPANT_TIMEOUT, TimeUnit.SECONDS);\n+\n+            ResponseHolder response = target.equals(forgetURI) ? builder.delete() : builder.put(payload, MediaType.TEXT_PLAIN);\n+\n+            if (response.getStatus() == 200) {\n+                return true;\n+            }\n+        } catch (WebApplicationException e) {\n+            if (LRALogger.logger.isInfoEnabled()) {\n+                LRALogger.logger.infof(\"Could not notify URI at %s (%s)\", target, e.getMessage());\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    private int atEnd(int res) {\n+        // Only run the post LRA actions if both the LRA and participant are in an end state\n+        // check the participant first since it will have been removed from one of the lists\n+        if (!isFinished() || !lra.isFinished()) {\n+            if (afterURI != null) {\n+                return TwoPhaseOutcome.HEURISTIC_HAZARD;\n+            }\n+\n+            return res;\n+        }\n+\n+        // run post LRA actions\n+        if (afterURI == null || afterLRARequest(afterURI, lra, lra.getLRAStatus().name())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMzMjM5MA=="}, "originalCommit": {"oid": "b8f54959b9a418bcb8ca41e8bb518b6e61dc0180"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxNDI4OQ==", "bodyText": "I mean not logged at all (but that is not part of the current PR so it doesn't need to block it). I will send all failed outcomes through the reportFailure() route so that they will always be reported on the console. But note that JBTM-3247 keeps the failed records and they are available for inspection using the RecoveryCoordinator resource in the same way that we allow inspection of recovering LRAs. At least that is the way I have resolved JBTM-3247. But my fix for JBTM-3247 requires this current PR so can I have your approval so that I can raise a PR for it.", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r376714289", "createdAt": "2020-02-08T14:51:30Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRARecord.java", "diffHunk": "@@ -361,18 +375,88 @@ private int tryDoEnd(boolean compensate) {\n                  * so if we were to return FINISH_ERROR recovery would not replay the log.\n                  * To force the record to be eligible for recovery we return a heuristic hazard.\n                  */\n-                return TwoPhaseOutcome.HEURISTIC_HAZARD;\n+                return atEnd(TwoPhaseOutcome.HEURISTIC_HAZARD);\n             }\n \n             status = ParticipantStatus.Completing; // recovery will figure out the status via the status url\n \n-            return TwoPhaseOutcome.FINISH_ERROR;\n+            return atEnd(TwoPhaseOutcome.FINISH_ERROR);\n         }\n \n         updateStatus(compensate);\n \n         // if the the request is still in progress (ie accepted is true) let recovery finish it\n-        return accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK;\n+        return atEnd(accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK);\n+    }\n+\n+    boolean isFinished() {\n+        // nested participants must still be able to compensate even if they are closed\n+        if (compensateURI == null) {\n+            return afterURI != null;\n+        }\n+\n+        switch (status) {\n+            case Completed:\n+                /* FALLTHRU */\n+            case FailedToComplete:\n+                return parentId == null; // completed nested LRAs must remain cancellable\n+            case Compensated:\n+                /* FALLTHRU */\n+            case FailedToCompensate:\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private boolean afterLRARequest(URI target, Transaction lra, String payload) {\n+        try {\n+            RequestBuilder builder = new RequestBuilder(target)\n+                    .request()\n+                    .header(LRA.LRA_HTTP_RECOVERY_HEADER, recoveryURI.toASCIIString());\n+\n+            if (target.equals(afterURI)) {\n+                builder.header(LRA.LRA_HTTP_ENDED_CONTEXT_HEADER, lra.getId().toASCIIString());\n+            } else {\n+                builder.header(LRA.LRA_HTTP_CONTEXT_HEADER, lra.getId().toASCIIString());\n+            }\n+\n+            builder.async(PARTICIPANT_TIMEOUT, TimeUnit.SECONDS);\n+\n+            ResponseHolder response = target.equals(forgetURI) ? builder.delete() : builder.put(payload, MediaType.TEXT_PLAIN);\n+\n+            if (response.getStatus() == 200) {\n+                return true;\n+            }\n+        } catch (WebApplicationException e) {\n+            if (LRALogger.logger.isInfoEnabled()) {\n+                LRALogger.logger.infof(\"Could not notify URI at %s (%s)\", target, e.getMessage());\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    private int atEnd(int res) {\n+        // Only run the post LRA actions if both the LRA and participant are in an end state\n+        // check the participant first since it will have been removed from one of the lists\n+        if (!isFinished() || !lra.isFinished()) {\n+            if (afterURI != null) {\n+                return TwoPhaseOutcome.HEURISTIC_HAZARD;\n+            }\n+\n+            return res;\n+        }\n+\n+        // run post LRA actions\n+        if (afterURI == null || afterLRARequest(afterURI, lra, lra.getLRAStatus().name())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMzMjM5MA=="}, "originalCommit": {"oid": "b8f54959b9a418bcb8ca41e8bb518b6e61dc0180"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAyMDkxNA==", "bodyText": "Thanks Mike", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r377020914", "createdAt": "2020-02-10T12:00:35Z", "author": {"login": "tomjenkinson"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRARecord.java", "diffHunk": "@@ -361,18 +375,88 @@ private int tryDoEnd(boolean compensate) {\n                  * so if we were to return FINISH_ERROR recovery would not replay the log.\n                  * To force the record to be eligible for recovery we return a heuristic hazard.\n                  */\n-                return TwoPhaseOutcome.HEURISTIC_HAZARD;\n+                return atEnd(TwoPhaseOutcome.HEURISTIC_HAZARD);\n             }\n \n             status = ParticipantStatus.Completing; // recovery will figure out the status via the status url\n \n-            return TwoPhaseOutcome.FINISH_ERROR;\n+            return atEnd(TwoPhaseOutcome.FINISH_ERROR);\n         }\n \n         updateStatus(compensate);\n \n         // if the the request is still in progress (ie accepted is true) let recovery finish it\n-        return accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK;\n+        return atEnd(accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK);\n+    }\n+\n+    boolean isFinished() {\n+        // nested participants must still be able to compensate even if they are closed\n+        if (compensateURI == null) {\n+            return afterURI != null;\n+        }\n+\n+        switch (status) {\n+            case Completed:\n+                /* FALLTHRU */\n+            case FailedToComplete:\n+                return parentId == null; // completed nested LRAs must remain cancellable\n+            case Compensated:\n+                /* FALLTHRU */\n+            case FailedToCompensate:\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private boolean afterLRARequest(URI target, Transaction lra, String payload) {\n+        try {\n+            RequestBuilder builder = new RequestBuilder(target)\n+                    .request()\n+                    .header(LRA.LRA_HTTP_RECOVERY_HEADER, recoveryURI.toASCIIString());\n+\n+            if (target.equals(afterURI)) {\n+                builder.header(LRA.LRA_HTTP_ENDED_CONTEXT_HEADER, lra.getId().toASCIIString());\n+            } else {\n+                builder.header(LRA.LRA_HTTP_CONTEXT_HEADER, lra.getId().toASCIIString());\n+            }\n+\n+            builder.async(PARTICIPANT_TIMEOUT, TimeUnit.SECONDS);\n+\n+            ResponseHolder response = target.equals(forgetURI) ? builder.delete() : builder.put(payload, MediaType.TEXT_PLAIN);\n+\n+            if (response.getStatus() == 200) {\n+                return true;\n+            }\n+        } catch (WebApplicationException e) {\n+            if (LRALogger.logger.isInfoEnabled()) {\n+                LRALogger.logger.infof(\"Could not notify URI at %s (%s)\", target, e.getMessage());\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    private int atEnd(int res) {\n+        // Only run the post LRA actions if both the LRA and participant are in an end state\n+        // check the participant first since it will have been removed from one of the lists\n+        if (!isFinished() || !lra.isFinished()) {\n+            if (afterURI != null) {\n+                return TwoPhaseOutcome.HEURISTIC_HAZARD;\n+            }\n+\n+            return res;\n+        }\n+\n+        // run post LRA actions\n+        if (afterURI == null || afterLRARequest(afterURI, lra, lra.getLRAStatus().name())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMzMjM5MA=="}, "originalCommit": {"oid": "b8f54959b9a418bcb8ca41e8bb518b6e61dc0180"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTkzNTMzOnYy", "diffSide": "RIGHT", "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRARecord.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOTo1NTowM1rOFnf2-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzoyNzozMVrOFoSKsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk2MDc2MA==", "bodyText": "lra is a field so it should not be necessary to pass it into afterLRARequest method as two parameters.", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r376960760", "createdAt": "2020-02-10T09:55:03Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRARecord.java", "diffHunk": "@@ -361,18 +375,88 @@ private int tryDoEnd(boolean compensate) {\n                  * so if we were to return FINISH_ERROR recovery would not replay the log.\n                  * To force the record to be eligible for recovery we return a heuristic hazard.\n                  */\n-                return TwoPhaseOutcome.HEURISTIC_HAZARD;\n+                return atEnd(TwoPhaseOutcome.HEURISTIC_HAZARD);\n             }\n \n             status = ParticipantStatus.Completing; // recovery will figure out the status via the status url\n \n-            return TwoPhaseOutcome.FINISH_ERROR;\n+            return atEnd(TwoPhaseOutcome.FINISH_ERROR);\n         }\n \n         updateStatus(compensate);\n \n         // if the the request is still in progress (ie accepted is true) let recovery finish it\n-        return accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK;\n+        return atEnd(accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK);\n+    }\n+\n+    boolean isFinished() {\n+        // nested participants must still be able to compensate even if they are closed\n+        if (compensateURI == null) {\n+            return afterURI != null;\n+        }\n+\n+        switch (status) {\n+            case Completed:\n+                /* FALLTHRU */\n+            case FailedToComplete:\n+                return parentId == null; // completed nested LRAs must remain cancellable\n+            case Compensated:\n+                /* FALLTHRU */\n+            case FailedToCompensate:\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private boolean afterLRARequest(URI target, Transaction lra, String payload) {\n+        try {\n+            RequestBuilder builder = new RequestBuilder(target)\n+                    .request()\n+                    .header(LRA.LRA_HTTP_RECOVERY_HEADER, recoveryURI.toASCIIString());\n+\n+            if (target.equals(afterURI)) {\n+                builder.header(LRA.LRA_HTTP_ENDED_CONTEXT_HEADER, lra.getId().toASCIIString());\n+            } else {\n+                builder.header(LRA.LRA_HTTP_CONTEXT_HEADER, lra.getId().toASCIIString());\n+            }\n+\n+            builder.async(PARTICIPANT_TIMEOUT, TimeUnit.SECONDS);\n+\n+            ResponseHolder response = target.equals(forgetURI) ? builder.delete() : builder.put(payload, MediaType.TEXT_PLAIN);\n+\n+            if (response.getStatus() == 200) {\n+                return true;\n+            }\n+        } catch (WebApplicationException e) {\n+            if (LRALogger.logger.isInfoEnabled()) {\n+                LRALogger.logger.infof(\"Could not notify URI at %s (%s)\", target, e.getMessage());\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    private int atEnd(int res) {\n+        // Only run the post LRA actions if both the LRA and participant are in an end state\n+        // check the participant first since it will have been removed from one of the lists\n+        if (!isFinished() || !lra.isFinished()) {\n+            if (afterURI != null) {\n+                return TwoPhaseOutcome.HEURISTIC_HAZARD;\n+            }\n+\n+            return res;\n+        }\n+\n+        // run post LRA actions\n+        if (afterURI == null || afterLRARequest(afterURI, lra, lra.getLRAStatus().name())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8f54959b9a418bcb8ca41e8bb518b6e61dc0180"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAyMzg2Mw==", "bodyText": "@mmusgrov is there is some reason the private method would need the parameters?", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r377023863", "createdAt": "2020-02-10T12:07:42Z", "author": {"login": "tomjenkinson"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRARecord.java", "diffHunk": "@@ -361,18 +375,88 @@ private int tryDoEnd(boolean compensate) {\n                  * so if we were to return FINISH_ERROR recovery would not replay the log.\n                  * To force the record to be eligible for recovery we return a heuristic hazard.\n                  */\n-                return TwoPhaseOutcome.HEURISTIC_HAZARD;\n+                return atEnd(TwoPhaseOutcome.HEURISTIC_HAZARD);\n             }\n \n             status = ParticipantStatus.Completing; // recovery will figure out the status via the status url\n \n-            return TwoPhaseOutcome.FINISH_ERROR;\n+            return atEnd(TwoPhaseOutcome.FINISH_ERROR);\n         }\n \n         updateStatus(compensate);\n \n         // if the the request is still in progress (ie accepted is true) let recovery finish it\n-        return accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK;\n+        return atEnd(accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK);\n+    }\n+\n+    boolean isFinished() {\n+        // nested participants must still be able to compensate even if they are closed\n+        if (compensateURI == null) {\n+            return afterURI != null;\n+        }\n+\n+        switch (status) {\n+            case Completed:\n+                /* FALLTHRU */\n+            case FailedToComplete:\n+                return parentId == null; // completed nested LRAs must remain cancellable\n+            case Compensated:\n+                /* FALLTHRU */\n+            case FailedToCompensate:\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private boolean afterLRARequest(URI target, Transaction lra, String payload) {\n+        try {\n+            RequestBuilder builder = new RequestBuilder(target)\n+                    .request()\n+                    .header(LRA.LRA_HTTP_RECOVERY_HEADER, recoveryURI.toASCIIString());\n+\n+            if (target.equals(afterURI)) {\n+                builder.header(LRA.LRA_HTTP_ENDED_CONTEXT_HEADER, lra.getId().toASCIIString());\n+            } else {\n+                builder.header(LRA.LRA_HTTP_CONTEXT_HEADER, lra.getId().toASCIIString());\n+            }\n+\n+            builder.async(PARTICIPANT_TIMEOUT, TimeUnit.SECONDS);\n+\n+            ResponseHolder response = target.equals(forgetURI) ? builder.delete() : builder.put(payload, MediaType.TEXT_PLAIN);\n+\n+            if (response.getStatus() == 200) {\n+                return true;\n+            }\n+        } catch (WebApplicationException e) {\n+            if (LRALogger.logger.isInfoEnabled()) {\n+                LRALogger.logger.infof(\"Could not notify URI at %s (%s)\", target, e.getMessage());\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    private int atEnd(int res) {\n+        // Only run the post LRA actions if both the LRA and participant are in an end state\n+        // check the participant first since it will have been removed from one of the lists\n+        if (!isFinished() || !lra.isFinished()) {\n+            if (afterURI != null) {\n+                return TwoPhaseOutcome.HEURISTIC_HAZARD;\n+            }\n+\n+            return res;\n+        }\n+\n+        // run post LRA actions\n+        if (afterURI == null || afterLRARequest(afterURI, lra, lra.getLRAStatus().name())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk2MDc2MA=="}, "originalCommit": {"oid": "b8f54959b9a418bcb8ca41e8bb518b6e61dc0180"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc4NTAxMA==", "bodyText": "It can use the field", "url": "https://github.com/jbosstm/narayana/pull/1559#discussion_r377785010", "createdAt": "2020-02-11T17:27:31Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRARecord.java", "diffHunk": "@@ -361,18 +375,88 @@ private int tryDoEnd(boolean compensate) {\n                  * so if we were to return FINISH_ERROR recovery would not replay the log.\n                  * To force the record to be eligible for recovery we return a heuristic hazard.\n                  */\n-                return TwoPhaseOutcome.HEURISTIC_HAZARD;\n+                return atEnd(TwoPhaseOutcome.HEURISTIC_HAZARD);\n             }\n \n             status = ParticipantStatus.Completing; // recovery will figure out the status via the status url\n \n-            return TwoPhaseOutcome.FINISH_ERROR;\n+            return atEnd(TwoPhaseOutcome.FINISH_ERROR);\n         }\n \n         updateStatus(compensate);\n \n         // if the the request is still in progress (ie accepted is true) let recovery finish it\n-        return accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK;\n+        return atEnd(accepted ? TwoPhaseOutcome.HEURISTIC_HAZARD : TwoPhaseOutcome.FINISH_OK);\n+    }\n+\n+    boolean isFinished() {\n+        // nested participants must still be able to compensate even if they are closed\n+        if (compensateURI == null) {\n+            return afterURI != null;\n+        }\n+\n+        switch (status) {\n+            case Completed:\n+                /* FALLTHRU */\n+            case FailedToComplete:\n+                return parentId == null; // completed nested LRAs must remain cancellable\n+            case Compensated:\n+                /* FALLTHRU */\n+            case FailedToCompensate:\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private boolean afterLRARequest(URI target, Transaction lra, String payload) {\n+        try {\n+            RequestBuilder builder = new RequestBuilder(target)\n+                    .request()\n+                    .header(LRA.LRA_HTTP_RECOVERY_HEADER, recoveryURI.toASCIIString());\n+\n+            if (target.equals(afterURI)) {\n+                builder.header(LRA.LRA_HTTP_ENDED_CONTEXT_HEADER, lra.getId().toASCIIString());\n+            } else {\n+                builder.header(LRA.LRA_HTTP_CONTEXT_HEADER, lra.getId().toASCIIString());\n+            }\n+\n+            builder.async(PARTICIPANT_TIMEOUT, TimeUnit.SECONDS);\n+\n+            ResponseHolder response = target.equals(forgetURI) ? builder.delete() : builder.put(payload, MediaType.TEXT_PLAIN);\n+\n+            if (response.getStatus() == 200) {\n+                return true;\n+            }\n+        } catch (WebApplicationException e) {\n+            if (LRALogger.logger.isInfoEnabled()) {\n+                LRALogger.logger.infof(\"Could not notify URI at %s (%s)\", target, e.getMessage());\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    private int atEnd(int res) {\n+        // Only run the post LRA actions if both the LRA and participant are in an end state\n+        // check the participant first since it will have been removed from one of the lists\n+        if (!isFinished() || !lra.isFinished()) {\n+            if (afterURI != null) {\n+                return TwoPhaseOutcome.HEURISTIC_HAZARD;\n+            }\n+\n+            return res;\n+        }\n+\n+        // run post LRA actions\n+        if (afterURI == null || afterLRARequest(afterURI, lra, lra.getLRAStatus().name())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk2MDc2MA=="}, "originalCommit": {"oid": "b8f54959b9a418bcb8ca41e8bb518b6e61dc0180"}, "originalPosition": 189}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1253, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}