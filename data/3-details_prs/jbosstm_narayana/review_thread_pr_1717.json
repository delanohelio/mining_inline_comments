{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3MzQxOTc0", "number": 1717, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODo1MzoyNlrOE2qXkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNzozMzozNlrOE6IrFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzUyNzIxOnYy", "diffSide": "RIGHT", "path": "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODo1MzoyN1rOHvkd6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMjozNjoxM1rOHvsh3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0MjYwMg==", "bodyText": "this will override user-provided header. Is it intended behavior?", "url": "https://github.com/jbosstm/narayana/pull/1717#discussion_r519642602", "createdAt": "2020-11-09T08:53:27Z", "author": {"login": "xstefank"}, "path": "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java", "diffHunk": "@@ -271,6 +271,28 @@ public void filter(ContainerRequestContext containerRequestContext) {\n                 lraId = incommingLRA;\n         }\n \n+        String query = incommingLRA == null ? null : incommingLRA.getQuery();\n+\n+        if (query != null) {\n+            for (String param : query.split(\"&\")) { // or apply a regex matching parent=...\n+                if (param.startsWith(\"parent=\")) {\n+                    String parent = param.split(\"=\", 2)[1];\n+\n+                    try {\n+                        // verify that parent corresponds to a valid URI\n+                        new URI(parent);\n+                        // the parent param was generated using URI.toASCIIString\n+                        headers.putSingle(LRA_HTTP_PARENT_CONTEXT_HEADER, parent);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36aa27618636cc291e41af5cd172720fc8b0ac63"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY4MzAwNw==", "bodyText": "Come on, read the spec, aren't we allowed to implement it. Does user behaviour override the spec now (ie does the users' opinion of what constitutes the transaction hierarchy trump actuality).", "url": "https://github.com/jbosstm/narayana/pull/1717#discussion_r519683007", "createdAt": "2020-11-09T09:57:09Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java", "diffHunk": "@@ -271,6 +271,28 @@ public void filter(ContainerRequestContext containerRequestContext) {\n                 lraId = incommingLRA;\n         }\n \n+        String query = incommingLRA == null ? null : incommingLRA.getQuery();\n+\n+        if (query != null) {\n+            for (String param : query.split(\"&\")) { // or apply a regex matching parent=...\n+                if (param.startsWith(\"parent=\")) {\n+                    String parent = param.split(\"=\", 2)[1];\n+\n+                    try {\n+                        // verify that parent corresponds to a valid URI\n+                        new URI(parent);\n+                        // the parent param was generated using URI.toASCIIString\n+                        headers.putSingle(LRA_HTTP_PARENT_CONTEXT_HEADER, parent);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0MjYwMg=="}, "originalCommit": {"oid": "36aa27618636cc291e41af5cd172720fc8b0ac63"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcwMjY3Mg==", "bodyText": "https://github.com/eclipse/microprofile-lra/blob/master/api/src/main/java/org/eclipse/microprofile/lra/annotation/ws/rs/LRA.java#L82\n-- I think we should fail if the user propagates the wrong parent header, or at least log warning. This seems like it can hide potential issues with user code.", "url": "https://github.com/jbosstm/narayana/pull/1717#discussion_r519702672", "createdAt": "2020-11-09T10:27:35Z", "author": {"login": "xstefank"}, "path": "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java", "diffHunk": "@@ -271,6 +271,28 @@ public void filter(ContainerRequestContext containerRequestContext) {\n                 lraId = incommingLRA;\n         }\n \n+        String query = incommingLRA == null ? null : incommingLRA.getQuery();\n+\n+        if (query != null) {\n+            for (String param : query.split(\"&\")) { // or apply a regex matching parent=...\n+                if (param.startsWith(\"parent=\")) {\n+                    String parent = param.split(\"=\", 2)[1];\n+\n+                    try {\n+                        // verify that parent corresponds to a valid URI\n+                        new URI(parent);\n+                        // the parent param was generated using URI.toASCIIString\n+                        headers.putSingle(LRA_HTTP_PARENT_CONTEXT_HEADER, parent);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0MjYwMg=="}, "originalCommit": {"oid": "36aa27618636cc291e41af5cd172720fc8b0ac63"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc3NDY4NA==", "bodyText": "That part of the spec is referring to LRA_HTTP_CONTEXT_HEADER.\nYou can't randomly change the parent context since it forms a strict hierarchy.", "url": "https://github.com/jbosstm/narayana/pull/1717#discussion_r519774684", "createdAt": "2020-11-09T12:36:13Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java", "diffHunk": "@@ -271,6 +271,28 @@ public void filter(ContainerRequestContext containerRequestContext) {\n                 lraId = incommingLRA;\n         }\n \n+        String query = incommingLRA == null ? null : incommingLRA.getQuery();\n+\n+        if (query != null) {\n+            for (String param : query.split(\"&\")) { // or apply a regex matching parent=...\n+                if (param.startsWith(\"parent=\")) {\n+                    String parent = param.split(\"=\", 2)[1];\n+\n+                    try {\n+                        // verify that parent corresponds to a valid URI\n+                        new URI(parent);\n+                        // the parent param was generated using URI.toASCIIString\n+                        headers.putSingle(LRA_HTTP_PARENT_CONTEXT_HEADER, parent);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0MjYwMg=="}, "originalCommit": {"oid": "36aa27618636cc291e41af5cd172720fc8b0ac63"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzUzNDIyOnYy", "diffSide": "RIGHT", "path": "rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/NestedParticipantIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODo1NToxN1rOHvkiPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOTo1Nzo1NlrOHvm9-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0MzcwOA==", "bodyText": "Remove this please and add a comment explaining that the header is populated by the filter automatically?", "url": "https://github.com/jbosstm/narayana/pull/1717#discussion_r519643708", "createdAt": "2020-11-09T08:55:17Z", "author": {"login": "xstefank"}, "path": "rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/NestedParticipantIT.java", "diffHunk": "@@ -99,34 +106,71 @@ public void nestedParticipantAfterLRACallTest() {\n                 .header(LRA.LRA_HTTP_CONTEXT_HEADER, parentLRA)\n                 .get();\n \n-            Assert.assertEquals(200, response.getStatus());\n+            assertEquals(200, response.getStatus());\n             Assert.assertTrue(response.hasEntity());\n \n             nestedLRA = URI.create(response.readEntity(String.class));\n-            Assert.assertNotEquals(parentLRA, nestedLRA);\n-            Assert.assertEquals(1, lraMetricService.getMetric(LRAMetricType.Nested, parentLRA, NestedParticipant.class));\n+            assertNotEquals(parentLRA, nestedLRA);\n+            assertEquals(1, lraMetricService.getMetric(LRAMetricType.Nested, parentLRA, NestedParticipant.class));\n         } finally {\n             if (response != null) {\n                 response.close();\n             }\n         }\n \n         // close nested LRA\n-        narayanaLRAClient.closeLRA(nestedLRA);\n+        lraClient.closeLRA(nestedLRA);\n         // the nested LRA should be in Closed state, however, we keep it in Closing state\n         // so we can't wait for the recovery of the nested LRA\n         // https://issues.redhat.com/browse/JBTM-3330\n         narayanaLRARecovery.waitForEndPhaseReplay(nestedLRA);\n \n-        Assert.assertEquals(1, lraMetricService.getMetric(LRAMetricType.Completed, nestedLRA, NestedParticipant.class));\n-        Assert.assertEquals(2, lraMetricService.getMetric(LRAMetricType.Nested, parentLRA, NestedParticipant.class));\n-        Assert.assertEquals(0, lraMetricService.getMetric(LRAMetricType.AfterLRA, nestedLRA, NestedParticipant.class));\n+        assertEquals(1, lraMetricService.getMetric(LRAMetricType.Completed, nestedLRA, NestedParticipant.class));\n+        assertEquals(2, lraMetricService.getMetric(LRAMetricType.Nested, parentLRA, NestedParticipant.class));\n+        assertEquals(0, lraMetricService.getMetric(LRAMetricType.AfterLRA, nestedLRA, NestedParticipant.class));\n \n-        narayanaLRAClient.closeLRA(parentLRA);\n+        lraClient.closeLRA(parentLRA);\n         narayanaLRARecovery.waitForEndPhaseReplay(nestedLRA);\n \n-        Assert.assertEquals(\"After LRA method for nested LRA enlist should have been called\",\n+        assertEquals(\"After LRA method for nested LRA enlist should have been called\",\n             1, lraMetricService.getMetric(LRAMetricType.AfterLRA, nestedLRA, NestedParticipant.class));\n \n     }\n+\n+    @Test\n+    public void testParentContext() {\n+        // start a top level LRA\n+        URI parent = lraClient.startLRA(\"parent\");\n+        // and nest another one under it\n+        URI child = lraClient.startLRA(\"child\");\n+\n+        Response response = null;\n+\n+        try {\n+            response = client.target(UriBuilder.fromUri(baseURL.toExternalForm())\n+                    .path(NestedParticipant.ROOT_PATH)\n+                    .path(NestedParticipant.PATH))\n+                    .request()\n+//                .header(LRA.LRA_HTTP_CONTEXT_HEADER, parentLRA)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36aa27618636cc291e41af5cd172720fc8b0ac63"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY4MzU3Ng==", "bodyText": "Sure. I see that the fix has broken one of the tests so I will remove it at the same time I resolve that failure. I'll also add a test for deeper transaction hierarchies.", "url": "https://github.com/jbosstm/narayana/pull/1717#discussion_r519683576", "createdAt": "2020-11-09T09:57:56Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/NestedParticipantIT.java", "diffHunk": "@@ -99,34 +106,71 @@ public void nestedParticipantAfterLRACallTest() {\n                 .header(LRA.LRA_HTTP_CONTEXT_HEADER, parentLRA)\n                 .get();\n \n-            Assert.assertEquals(200, response.getStatus());\n+            assertEquals(200, response.getStatus());\n             Assert.assertTrue(response.hasEntity());\n \n             nestedLRA = URI.create(response.readEntity(String.class));\n-            Assert.assertNotEquals(parentLRA, nestedLRA);\n-            Assert.assertEquals(1, lraMetricService.getMetric(LRAMetricType.Nested, parentLRA, NestedParticipant.class));\n+            assertNotEquals(parentLRA, nestedLRA);\n+            assertEquals(1, lraMetricService.getMetric(LRAMetricType.Nested, parentLRA, NestedParticipant.class));\n         } finally {\n             if (response != null) {\n                 response.close();\n             }\n         }\n \n         // close nested LRA\n-        narayanaLRAClient.closeLRA(nestedLRA);\n+        lraClient.closeLRA(nestedLRA);\n         // the nested LRA should be in Closed state, however, we keep it in Closing state\n         // so we can't wait for the recovery of the nested LRA\n         // https://issues.redhat.com/browse/JBTM-3330\n         narayanaLRARecovery.waitForEndPhaseReplay(nestedLRA);\n \n-        Assert.assertEquals(1, lraMetricService.getMetric(LRAMetricType.Completed, nestedLRA, NestedParticipant.class));\n-        Assert.assertEquals(2, lraMetricService.getMetric(LRAMetricType.Nested, parentLRA, NestedParticipant.class));\n-        Assert.assertEquals(0, lraMetricService.getMetric(LRAMetricType.AfterLRA, nestedLRA, NestedParticipant.class));\n+        assertEquals(1, lraMetricService.getMetric(LRAMetricType.Completed, nestedLRA, NestedParticipant.class));\n+        assertEquals(2, lraMetricService.getMetric(LRAMetricType.Nested, parentLRA, NestedParticipant.class));\n+        assertEquals(0, lraMetricService.getMetric(LRAMetricType.AfterLRA, nestedLRA, NestedParticipant.class));\n \n-        narayanaLRAClient.closeLRA(parentLRA);\n+        lraClient.closeLRA(parentLRA);\n         narayanaLRARecovery.waitForEndPhaseReplay(nestedLRA);\n \n-        Assert.assertEquals(\"After LRA method for nested LRA enlist should have been called\",\n+        assertEquals(\"After LRA method for nested LRA enlist should have been called\",\n             1, lraMetricService.getMetric(LRAMetricType.AfterLRA, nestedLRA, NestedParticipant.class));\n \n     }\n+\n+    @Test\n+    public void testParentContext() {\n+        // start a top level LRA\n+        URI parent = lraClient.startLRA(\"parent\");\n+        // and nest another one under it\n+        URI child = lraClient.startLRA(\"child\");\n+\n+        Response response = null;\n+\n+        try {\n+            response = client.target(UriBuilder.fromUri(baseURL.toExternalForm())\n+                    .path(NestedParticipant.ROOT_PATH)\n+                    .path(NestedParticipant.PATH))\n+                    .request()\n+//                .header(LRA.LRA_HTTP_CONTEXT_HEADER, parentLRA)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0MzcwOA=="}, "originalCommit": {"oid": "36aa27618636cc291e41af5cd172720fc8b0ac63"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzU0MTI4OnYy", "diffSide": "RIGHT", "path": "rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/resource/NestedParticipant.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODo1NzoxMFrOHvkmdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMjozMTowM1rOHvsXNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0NDc5MA==", "bodyText": "we should add a message that says which one was null. The error message in test says it is only parentId.", "url": "https://github.com/jbosstm/narayana/pull/1717#discussion_r519644790", "createdAt": "2020-11-09T08:57:10Z", "author": {"login": "xstefank"}, "path": "rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/resource/NestedParticipant.java", "diffHunk": "@@ -48,16 +47,33 @@\n \n     public static final String ROOT_PATH = \"/nested\";\n     public static final String ENLIST_PATH = \"/enlist\";\n+    public static final String PATH = \"path\";\n \n     @Inject\n     LRAMetricService lraMetricService;\n \n+    @LRA(end = false)\n+    @GET\n+    @Path(PATH)\n+    @Produces({MediaType.TEXT_PLAIN})\n+    public Response runWithNestedContext(@HeaderParam(LRA.LRA_HTTP_CONTEXT_HEADER) URI lraId,\n+                           @HeaderParam(LRA.LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentId) {\n+        if (parentId == null || lraId == null) {\n+            return Response.serverError().build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36aa27618636cc291e41af5cd172720fc8b0ac63"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY4NDU5NA==", "bodyText": "I don't think so, this is a test suite in which we already have tests that check the presence of LRA_HTTP_CONTEXT_HEADER.", "url": "https://github.com/jbosstm/narayana/pull/1717#discussion_r519684594", "createdAt": "2020-11-09T09:59:23Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/resource/NestedParticipant.java", "diffHunk": "@@ -48,16 +47,33 @@\n \n     public static final String ROOT_PATH = \"/nested\";\n     public static final String ENLIST_PATH = \"/enlist\";\n+    public static final String PATH = \"path\";\n \n     @Inject\n     LRAMetricService lraMetricService;\n \n+    @LRA(end = false)\n+    @GET\n+    @Path(PATH)\n+    @Produces({MediaType.TEXT_PLAIN})\n+    public Response runWithNestedContext(@HeaderParam(LRA.LRA_HTTP_CONTEXT_HEADER) URI lraId,\n+                           @HeaderParam(LRA.LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentId) {\n+        if (parentId == null || lraId == null) {\n+            return Response.serverError().build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0NDc5MA=="}, "originalCommit": {"oid": "36aa27618636cc291e41af5cd172720fc8b0ac63"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcwMzA5Nw==", "bodyText": "true, this was more about this particular test only. It is unlikely it wouldn't be caught elsewhere.", "url": "https://github.com/jbosstm/narayana/pull/1717#discussion_r519703097", "createdAt": "2020-11-09T10:28:19Z", "author": {"login": "xstefank"}, "path": "rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/resource/NestedParticipant.java", "diffHunk": "@@ -48,16 +47,33 @@\n \n     public static final String ROOT_PATH = \"/nested\";\n     public static final String ENLIST_PATH = \"/enlist\";\n+    public static final String PATH = \"path\";\n \n     @Inject\n     LRAMetricService lraMetricService;\n \n+    @LRA(end = false)\n+    @GET\n+    @Path(PATH)\n+    @Produces({MediaType.TEXT_PLAIN})\n+    public Response runWithNestedContext(@HeaderParam(LRA.LRA_HTTP_CONTEXT_HEADER) URI lraId,\n+                           @HeaderParam(LRA.LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentId) {\n+        if (parentId == null || lraId == null) {\n+            return Response.serverError().build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0NDc5MA=="}, "originalCommit": {"oid": "36aa27618636cc291e41af5cd172720fc8b0ac63"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc3MTk1OA==", "bodyText": "This is a test for nested contexts so LRA_HTTP_CONTEXT_HEADER is not relevant (ie it just adds noise to an already large test suite).", "url": "https://github.com/jbosstm/narayana/pull/1717#discussion_r519771958", "createdAt": "2020-11-09T12:31:03Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/resource/NestedParticipant.java", "diffHunk": "@@ -48,16 +47,33 @@\n \n     public static final String ROOT_PATH = \"/nested\";\n     public static final String ENLIST_PATH = \"/enlist\";\n+    public static final String PATH = \"path\";\n \n     @Inject\n     LRAMetricService lraMetricService;\n \n+    @LRA(end = false)\n+    @GET\n+    @Path(PATH)\n+    @Produces({MediaType.TEXT_PLAIN})\n+    public Response runWithNestedContext(@HeaderParam(LRA.LRA_HTTP_CONTEXT_HEADER) URI lraId,\n+                           @HeaderParam(LRA.LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentId) {\n+        if (parentId == null || lraId == null) {\n+            return Response.serverError().build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0NDc5MA=="}, "originalCommit": {"oid": "36aa27618636cc291e41af5cd172720fc8b0ac63"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MzkxOTAzOnYy", "diffSide": "RIGHT", "path": "rts/lra/service-base/src/main/java/io/narayana/lra/LRAConstants.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNzoyNjozMVrOH1AqGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNzoyNjozMVrOH1AqGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM0NzM1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String QUERY_PAIR_SEPARATOR = \"&\"; //\n          \n          \n            \n                public static final String QUERY_PAIR_SEPARATOR = \"&\";", "url": "https://github.com/jbosstm/narayana/pull/1717#discussion_r525347353", "createdAt": "2020-11-17T17:26:31Z", "author": {"login": "xstefank"}, "path": "rts/lra/service-base/src/main/java/io/narayana/lra/LRAConstants.java", "diffHunk": "@@ -40,6 +40,8 @@\n     public static final String CLIENT_ID_PARAM_NAME = \"ClientID\";\n     public static final String TIMELIMIT_PARAM_NAME = \"TimeLimit\";\n     public static final String PARENT_LRA_PARAM_NAME = \"ParentLRA\";\n+    public static final String QUERY_PAIR_SEPARATOR = \"&\"; //", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05a21cf80a3c1c5487b0c43bc9780e496f066418"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5Mzk0OTY2OnYy", "diffSide": "RIGHT", "path": "rts/lra/service-base/src/main/java/io/narayana/lra/Current.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNzozMzozNlrOH1A8ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNzozMzozNlrOH1A8ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM1MjA5OQ==", "bodyText": "is it correct to return null if decode is false? In that case, this can be refactored to not contain the parameter.", "url": "https://github.com/jbosstm/narayana/pull/1717#discussion_r525352099", "createdAt": "2020-11-17T17:33:36Z", "author": {"login": "xstefank"}, "path": "rts/lra/service-base/src/main/java/io/narayana/lra/Current.java", "diffHunk": "@@ -64,6 +72,67 @@ public static Object getState(String key) {\n         return null;\n     }\n \n+    private static String getParents(URI uri) {\n+        String query = uri.getQuery();\n+\n+        if (query != null) {\n+            for (String nvpair : query.split(QUERY_PAIR_SEPARATOR)) {\n+                if (nvpair.startsWith(PARENT_LRA_PARAM_NAME + QUERY_FIELD_SEPARATOR)) {\n+                    return nvpair.split(QUERY_FIELD_SEPARATOR)[1];\n+                }\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    // construct the LRA URI including the parent hierarchy as a query parameter\n+    public static URI buildFullLRAUrl(String baseURI, URI parentId) throws URISyntaxException {\n+        // is the parent part of a hierarchy\n+        String parents = Current.getParents(parentId); // gets the hierarchy form the query param\n+        // we have the hierarchy so remove the query parameter\n+        String gParent = new URI(parentId.getScheme(),\n+                parentId.getAuthority(),\n+                parentId.getPath(),\n+                null, // skip the query string\n+                parentId.getFragment())\n+                .toASCIIString();\n+\n+        if (parents != null) {\n+            gParent += parents + \",\"; // , separated list of the hierarchy\n+        }\n+\n+        return UriBuilder.fromUri(baseURI).queryParam(PARENT_LRA_PARAM_NAME, gParent).build();\n+    }\n+\n+    // given a URL extract the immediate parent of\n+    public static String getFirstParent(URI parent, boolean decode) throws UnsupportedEncodingException {\n+        String query = parent == null ? null : parent.getQuery();\n+\n+        if (query != null) {\n+            for (String param : query.split(QUERY_PAIR_SEPARATOR)) {\n+                if (param.startsWith(PARENT_LRA_PARAM_NAME + QUERY_FIELD_SEPARATOR)) {\n+                    String parents = param.split(QUERY_FIELD_SEPARATOR, 2)[1];\n+\n+                    // parents is a comma separated list of parents (the first one is the direct parent)\n+                    if (parents != null) {\n+                        String[] pa = parents.split(\",\");\n+\n+                        if (pa.length > 0) {\n+                            if (decode) {\n+                                return URLDecoder.decode(pa[0], \"UTF-8\");\n+                            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05a21cf80a3c1c5487b0c43bc9780e496f066418"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1140, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}