{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwMjI1NzA2", "number": 1658, "title": "[JBTM-3355] harmonize the LRA DTO usage to use only LRAData", "bodyText": "https://issues.redhat.com/browse/JBTM-3355\nThis is a step before the JBTM-3294 where only one Coordinator LRA DTO object is to be used. The LRAStatusHolder is replaced by LRAData where is needed and status calls are a bit narrowed.\nMAIN LRA\n!QA_JTA !QA_JTS_JDKORB !QA_JTS_OPENJDKORB !QA_JTS_JACORB !BLACKTIE !XTS !PERF NO_WIN !RTS !AS_TESTS !TOMCAT !JACOCO", "createdAt": "2020-08-19T15:03:26Z", "url": "https://github.com/jbosstm/narayana/pull/1658", "merged": true, "mergeCommit": {"oid": "b434bcd5642dc9d4f4ed39cee3cdc893eefb1edc"}, "closed": true, "closedAt": "2020-09-10T11:38:01Z", "author": {"login": "ochaloup"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAqBQMgFqTQ3MTI2NTQ0Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHd4ZQgFqTQ4NTc3Nzc5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMjY1NDQy", "url": "https://github.com/jbosstm/narayana/pull/1658#pullrequestreview-471265442", "createdAt": "2020-08-20T05:53:16Z", "commit": {"oid": "efd4e9bf598284dccd5c54e26ee18457283a4add"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNTo1MzoxNlrOHDrldQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNjoxMTozMlrOHDsUzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyMTg3Nw==", "bodyText": "What is this information (HTTP status and response data) with regards to a particular LRA?", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r473621877", "createdAt": "2020-08-20T05:53:16Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRAData.java", "diffHunk": "@@ -72,12 +58,12 @@ public long getFinishTime() {\n         return finishTime;\n     }\n \n-    public long getTimeNow() {\n-        return LocalDateTime.now().atZone(ZoneOffset.UTC).toInstant().toEpochMilli();\n+    public int getHttpStatus() {\n+        return this.httpStatus;\n     }\n \n-    public ZoneOffset getZoneOffset() {\n-        return ZoneOffset.UTC;\n+    public String getResponseData() {\n+        return this.responseData;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efd4e9bf598284dccd5c54e26ee18457283a4add"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyMjg5NA==", "bodyText": "this name is misleading, maybe \"newInstance\" or \"create\" or similar would be better.", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r473622894", "createdAt": "2020-08-20T05:54:45Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRAData.java", "diffHunk": "@@ -97,18 +83,102 @@ public int hashCode() {\n \n     @Override\n     public String toString() {\n-        return this.getClass().getSimpleName() + \"{\" +\n-                \"lraId='\" + lraId + '\\'' +\n-                \", clientId='\" + clientId + '\\'' +\n-                \", status='\" + status + '\\'' +\n-                \", isClosed=\" + isClosed +\n-                \", isCancelled=\" + isCancelled +\n-                \", isRecovering=\" + isRecovering +\n-                \", isActive=\" + isActive +\n-                \", isTopLevel=\" + isTopLevel +\n-                \", startTime=\" + startTime +\n-                \", finishTime=\" + finishTime +\n-                '}';\n+        return String.format(\n+            \"%s {lraId='%s', clientId='%s', status='%s', isTopLevel=%b, isRecovering=%b, startTime=%d, finishTime=%d, httpStatus=%d, responseData='%s'}\",\n+                this.getClass().getSimpleName(), lraId, clientId, status,\n+                isTopLevel, isRecovering, startTime, finishTime, httpStatus, responseData);\n+    }\n+\n+    public static class Builder implements BuilderWithLraId, BuilderWithClientId, BuilderWithStatus, BuilderWithTopLevel,\n+            BuilderWithRecovering, BuilderWithStartTime, BuilderWithFinishTime, BuilderWithHttpStatus,\n+            BuilderWithResponseData, BuilderFinal {\n+        private String lraId;\n+        private String clientId;\n+        private LRAStatus status;\n+        private boolean isTopLevel;\n+        private boolean isRecovering;\n+        private long startTime;\n+        private long finishTime;\n+        private int httpStatus;\n+        private String responseData;\n+\n+        private Builder() {\n+            // no public instance\n+        }\n+\n+        public static BuilderWithLraId instanceOf() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efd4e9bf598284dccd5c54e26ee18457283a4add"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyNDEwNQ==", "bodyText": "also I don't understand why there is just Builder returned here, and also there is no passed LraId but BuilderWithLraId is returned.", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r473624105", "createdAt": "2020-08-20T05:56:37Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRAData.java", "diffHunk": "@@ -97,18 +83,102 @@ public int hashCode() {\n \n     @Override\n     public String toString() {\n-        return this.getClass().getSimpleName() + \"{\" +\n-                \"lraId='\" + lraId + '\\'' +\n-                \", clientId='\" + clientId + '\\'' +\n-                \", status='\" + status + '\\'' +\n-                \", isClosed=\" + isClosed +\n-                \", isCancelled=\" + isCancelled +\n-                \", isRecovering=\" + isRecovering +\n-                \", isActive=\" + isActive +\n-                \", isTopLevel=\" + isTopLevel +\n-                \", startTime=\" + startTime +\n-                \", finishTime=\" + finishTime +\n-                '}';\n+        return String.format(\n+            \"%s {lraId='%s', clientId='%s', status='%s', isTopLevel=%b, isRecovering=%b, startTime=%d, finishTime=%d, httpStatus=%d, responseData='%s'}\",\n+                this.getClass().getSimpleName(), lraId, clientId, status,\n+                isTopLevel, isRecovering, startTime, finishTime, httpStatus, responseData);\n+    }\n+\n+    public static class Builder implements BuilderWithLraId, BuilderWithClientId, BuilderWithStatus, BuilderWithTopLevel,\n+            BuilderWithRecovering, BuilderWithStartTime, BuilderWithFinishTime, BuilderWithHttpStatus,\n+            BuilderWithResponseData, BuilderFinal {\n+        private String lraId;\n+        private String clientId;\n+        private LRAStatus status;\n+        private boolean isTopLevel;\n+        private boolean isRecovering;\n+        private long startTime;\n+        private long finishTime;\n+        private int httpStatus;\n+        private String responseData;\n+\n+        private Builder() {\n+            // no public instance\n+        }\n+\n+        public static BuilderWithLraId instanceOf() {\n+            return new Builder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efd4e9bf598284dccd5c54e26ee18457283a4add"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyNDU3MQ==", "bodyText": "ah, so you want to require order in builder methods. Why is that useful?", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r473624571", "createdAt": "2020-08-20T05:57:22Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRAData.java", "diffHunk": "@@ -97,18 +83,102 @@ public int hashCode() {\n \n     @Override\n     public String toString() {\n-        return this.getClass().getSimpleName() + \"{\" +\n-                \"lraId='\" + lraId + '\\'' +\n-                \", clientId='\" + clientId + '\\'' +\n-                \", status='\" + status + '\\'' +\n-                \", isClosed=\" + isClosed +\n-                \", isCancelled=\" + isCancelled +\n-                \", isRecovering=\" + isRecovering +\n-                \", isActive=\" + isActive +\n-                \", isTopLevel=\" + isTopLevel +\n-                \", startTime=\" + startTime +\n-                \", finishTime=\" + finishTime +\n-                '}';\n+        return String.format(\n+            \"%s {lraId='%s', clientId='%s', status='%s', isTopLevel=%b, isRecovering=%b, startTime=%d, finishTime=%d, httpStatus=%d, responseData='%s'}\",\n+                this.getClass().getSimpleName(), lraId, clientId, status,\n+                isTopLevel, isRecovering, startTime, finishTime, httpStatus, responseData);\n+    }\n+\n+    public static class Builder implements BuilderWithLraId, BuilderWithClientId, BuilderWithStatus, BuilderWithTopLevel,\n+            BuilderWithRecovering, BuilderWithStartTime, BuilderWithFinishTime, BuilderWithHttpStatus,\n+            BuilderWithResponseData, BuilderFinal {\n+        private String lraId;\n+        private String clientId;\n+        private LRAStatus status;\n+        private boolean isTopLevel;\n+        private boolean isRecovering;\n+        private long startTime;\n+        private long finishTime;\n+        private int httpStatus;\n+        private String responseData;\n+\n+        private Builder() {\n+            // no public instance\n+        }\n+\n+        public static BuilderWithLraId instanceOf() {\n+            return new Builder();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyNDEwNQ=="}, "originalCommit": {"oid": "efd4e9bf598284dccd5c54e26ee18457283a4add"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyODI0OQ==", "bodyText": "Sorry, but I think that the Builder here is overcomplicated. What would be the reason to keep the order of methods in the builder? Also since all BuilderWith* interfaces have only one method which represents next step in the building process then all parameters are required, and so this is just a really complicated way of writing an all args constructor :)", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r473628249", "createdAt": "2020-08-20T06:02:53Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRAData.java", "diffHunk": "@@ -97,18 +83,102 @@ public int hashCode() {\n \n     @Override\n     public String toString() {\n-        return this.getClass().getSimpleName() + \"{\" +\n-                \"lraId='\" + lraId + '\\'' +\n-                \", clientId='\" + clientId + '\\'' +\n-                \", status='\" + status + '\\'' +\n-                \", isClosed=\" + isClosed +\n-                \", isCancelled=\" + isCancelled +\n-                \", isRecovering=\" + isRecovering +\n-                \", isActive=\" + isActive +\n-                \", isTopLevel=\" + isTopLevel +\n-                \", startTime=\" + startTime +\n-                \", finishTime=\" + finishTime +\n-                '}';\n+        return String.format(\n+            \"%s {lraId='%s', clientId='%s', status='%s', isTopLevel=%b, isRecovering=%b, startTime=%d, finishTime=%d, httpStatus=%d, responseData='%s'}\",\n+                this.getClass().getSimpleName(), lraId, clientId, status,\n+                isTopLevel, isRecovering, startTime, finishTime, httpStatus, responseData);\n+    }\n+\n+    public static class Builder implements BuilderWithLraId, BuilderWithClientId, BuilderWithStatus, BuilderWithTopLevel,\n+            BuilderWithRecovering, BuilderWithStartTime, BuilderWithFinishTime, BuilderWithHttpStatus,\n+            BuilderWithResponseData, BuilderFinal {\n+        private String lraId;\n+        private String clientId;\n+        private LRAStatus status;\n+        private boolean isTopLevel;\n+        private boolean isRecovering;\n+        private long startTime;\n+        private long finishTime;\n+        private int httpStatus;\n+        private String responseData;\n+\n+        private Builder() {\n+            // no public instance\n+        }\n+\n+        public static BuilderWithLraId instanceOf() {\n+            return new Builder();\n+        }\n+\n+        public BuilderWithClientId lraId(String lraId) {\n+            this.lraId = lraId;\n+            return this;\n+        }\n+        public BuilderWithStatus clientId(String clientId) {\n+            this.clientId = clientId;\n+            return this;\n+        }\n+        public BuilderWithTopLevel status(LRAStatus lraStatus) {\n+            this.status = lraStatus;\n+            return this;\n+        }\n+        public BuilderWithRecovering topLevel(boolean isTopLevel) {\n+            this.isTopLevel = isTopLevel;\n+            return this;\n+        }\n+        public BuilderWithStartTime recovering(boolean isRecovering) {\n+            this.isRecovering = isRecovering;\n+            return this;\n+        }\n+        public BuilderWithFinishTime startTime(long startTime) {\n+            this.startTime = startTime;\n+            return this;\n+        }\n+        public BuilderWithHttpStatus finishTime(long finishTime) {\n+            this.finishTime = finishTime;\n+            return this;\n+        }\n+        public BuilderWithResponseData httpStatus(int httpStatus) {\n+            this.httpStatus = httpStatus;\n+            return this;\n+        }\n+        public BuilderFinal responseData(String responseData) {\n+            this.responseData = responseData;\n+            return this;\n+        }\n+        public LRAData build() {\n+            return new LRAData(this);\n+        }\n     }\n \n+    public static interface BuilderWithLraId {\n+        BuilderWithClientId lraId(String lraId);\n+    }\n+    public static interface BuilderWithClientId {\n+        BuilderWithStatus clientId(String clientId);\n+    }\n+    public static interface BuilderWithStatus {\n+        BuilderWithTopLevel status(LRAStatus lraStatus);\n+    }\n+    public static interface BuilderWithTopLevel {\n+        BuilderWithRecovering topLevel(boolean isTopLevel);\n+    }\n+    public static interface BuilderWithRecovering {\n+        BuilderWithStartTime recovering(boolean isRecovering);\n+    }\n+    public static interface BuilderWithStartTime {\n+        BuilderWithFinishTime startTime(long startTime);\n+    }\n+    public static interface BuilderWithFinishTime {\n+        BuilderWithHttpStatus finishTime(long finishTime);\n+    }\n+    public static interface BuilderWithHttpStatus {\n+        BuilderWithResponseData httpStatus(int httpStatus);\n+    }\n+    public static interface BuilderWithResponseData {\n+        BuilderFinal responseData(String responseData);\n+    }\n+    public static interface BuilderFinal {\n+        LRAData build();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efd4e9bf598284dccd5c54e26ee18457283a4add"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyOTE2MQ==", "bodyText": "is boolean before status required?", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r473629161", "createdAt": "2020-08-20T06:04:20Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "diffHunk": "@@ -145,12 +157,8 @@ public boolean save_state(OutputObjectState os, int ot) {\n                 os.packLong(finishTime.toInstant(ZoneOffset.UTC).toEpochMilli());\n             }\n \n-            if (status == null) {\n-                os.packBoolean(false);\n-            } else {\n-                os.packBoolean(true);\n-                os.packString(status.name());\n-            }\n+            os.packBoolean(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efd4e9bf598284dccd5c54e26ee18457283a4add"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyOTg3OA==", "bodyText": "os.unpackBoolean() will be always true", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r473629878", "createdAt": "2020-08-20T06:05:19Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "diffHunk": "@@ -269,7 +277,7 @@ public boolean restore_state(InputObjectState os, int ot) {\n             clientId = os.unpackString();\n             startTime = os.unpackBoolean() ? LocalDateTime.ofInstant(Instant.ofEpochMilli(os.unpackLong()), ZoneOffset.UTC) : null;\n             finishTime = os.unpackBoolean() ? LocalDateTime.ofInstant(Instant.ofEpochMilli(os.unpackLong()), ZoneOffset.UTC) : null;\n-            status = os.unpackBoolean() ? LRAStatus.valueOf(os.unpackString()) : null;\n+            status = os.unpackBoolean() ? LRAStatus.valueOf(os.unpackString()) : LRAStatus.Active;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efd4e9bf598284dccd5c54e26ee18457283a4add"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYzMDg0NQ==", "bodyText": "you gave me an idea earlier in the PR :) maybe we can rewrite these comparisons to use == as they are enums. We can save some processing.", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r473630845", "createdAt": "2020-08-20T06:06:48Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "diffHunk": "@@ -362,24 +371,27 @@ protected void setLRAStatus(int actionStatus) {\n     }\n \n     boolean isClosed() {\n-        return status != null && status.equals(LRAStatus.Closed);\n+        assert status != null;\n+        return status.equals(LRAStatus.Closed);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efd4e9bf598284dccd5c54e26ee18457283a4add"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYzMzk5Ng==", "bodyText": "we should use unified either Collection or List but I don't see the reason to mix.", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r473633996", "createdAt": "2020-08-20T06:11:32Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java", "diffHunk": "@@ -124,45 +123,41 @@ public synchronized ReentrantLock tryLockTransaction(URI lraId) {\n         return lock.tryLock() ? lock : null;\n     }\n \n-    public List<LRAStatusHolder> getAll(String state) {\n-        if (state == null || state.isEmpty()) {\n-            Set<LRAStatusHolder> all = getAllActive();\n+    public Collection<LRAData> getAll() {\n+        return getAll(null);\n+    }\n \n+    public Collection<LRAData> getAll(LRAStatus lraStatus) {\n+        if (lraStatus == null) {\n+            Collection<LRAData> all = lras.values().stream()\n+                    .map(t -> t.getLRAData()).collect(Collectors.toCollection(HashSet::new));\n             all.addAll(getAllRecovering());\n-\n-            return new ArrayList<>(all);\n-        }\n-\n-        if (LRAStatus.Cancelling.name().equals(state)) {\n-            return recoveringLRAs.values().stream().map(LRAStatusHolder::new).filter(LRAStatusHolder::isCancelling).collect(toList());\n-        } else if (LRAStatus.Cancelled.name().equals(state)) {\n-            return recoveringLRAs.values().stream().map(LRAStatusHolder::new).filter(LRAStatusHolder::isCancelled).collect(toList());\n-        } else if (LRAStatus.FailedToCancel.name().equals(state)) {\n-            return recoveringLRAs.values().stream().map(LRAStatusHolder::new).filter(LRAStatusHolder::isFailedToCancel).collect(toList());\n-        } else if (LRAStatus.Closing.name().equals(state)) {\n-            return recoveringLRAs.values().stream().map(LRAStatusHolder::new).filter(LRAStatusHolder::isClosing).collect(toList());\n-        } else if (LRAStatus.Closed.name().equals(state)) {\n-            return recoveringLRAs.values().stream().map(LRAStatusHolder::new).filter(LRAStatusHolder::isClosed).collect(toList());\n-        } else if (LRAStatus.FailedToClose.name().equals(state)) {\n-            return recoveringLRAs.values().stream().map(LRAStatusHolder::new).filter(LRAStatusHolder::isFailedToClose).collect(toList());\n+            return all;\n         }\n \n-        return null;\n+        Collection<LRAData> allByStatus = getLraDataByStatus(lras, lraStatus);\n+        allByStatus.addAll(getLraDataByStatus(recoveringLRAs, lraStatus));\n+        return allByStatus;\n     }\n \n-    private Set<LRAStatusHolder> getAllActive() {\n-        return lras.values().stream().map(LRAStatusHolder::new).collect(toSet());\n-    }\n-\n-    public List<LRAStatusHolder> getAllRecovering(boolean scan) {\n+    /**\n+     * Getting all the LRA managed by recovery manager. This means all LRAs which are not mapped\n+     * only in memory but that were already saved in object store.\n+     *\n+     * @param scan  defines if there is run recovery manager scanning before returning the collection,\n+     *              when the recovery is run then the object store is touched and the returned\n+     *              list may be updated with the new loaded objects\n+     * @return list of the {@link LRAData} which define the recovering LRAs\n+     */\n+    public List<LRAData> getAllRecovering(boolean scan) {\n         if (scan) {\n             RecoveryManager.manager().scan();\n         }\n \n-        return recoveringLRAs.values().stream().map(LRAStatusHolder::new).collect(toList());\n+        return recoveringLRAs.values().stream().map(t -> t.getLRAData()).collect(toList());\n     }\n \n-    public List<LRAStatusHolder> getAllRecovering() {\n+    public List<LRAData> getAllRecovering() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efd4e9bf598284dccd5c54e26ee18457283a4add"}, "originalPosition": 103}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NzA4MTkz", "url": "https://github.com/jbosstm/narayana/pull/1658#pullrequestreview-474708193", "createdAt": "2020-08-25T17:36:42Z", "commit": {"oid": "efd4e9bf598284dccd5c54e26ee18457283a4add"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzozNjo0MlrOHGi0yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODozMzowNVrOHGkwpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyNDA3NA==", "bodyText": "state cannot be null because a default is specified:\n@QueryParam(STATUS_PARAM_NAME) @DefaultValue(\"\") String state\nso the test is superfluous.", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r476624074", "createdAt": "2020-08-25T17:36:42Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/api/Coordinator.java", "diffHunk": "@@ -112,25 +110,23 @@\n     @APIResponse(description = \"The LRA\",\n         content = @Content(schema = @Schema(type = SchemaType.ARRAY, implementation = LRAData.class))\n     )\n-    public List<LRAData> getAllLRAs(\n+    public Collection<LRAData> getAllLRAs(\n             @Parameter(name = STATUS_PARAM_NAME, description = \"Filter the returned LRAs to only those in the give state (see CompensatorStatus)\")\n             @QueryParam(STATUS_PARAM_NAME) @DefaultValue(\"\") String state) {\n-        List<LRAStatusHolder> lras = lraService.getAll(state);\n+        LRAStatus requestedLRAStatus = null;\n+        if(state != null && !state.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efd4e9bf598284dccd5c54e26ee18457283a4add"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyOTYyMQ==", "bodyText": "It is very complicated, I don't really understand how this code works.\nIs there any particular reason why it has to be this complex?", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r476629621", "createdAt": "2020-08-25T17:46:25Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRAData.java", "diffHunk": "@@ -97,18 +83,102 @@ public int hashCode() {\n \n     @Override\n     public String toString() {\n-        return this.getClass().getSimpleName() + \"{\" +\n-                \"lraId='\" + lraId + '\\'' +\n-                \", clientId='\" + clientId + '\\'' +\n-                \", status='\" + status + '\\'' +\n-                \", isClosed=\" + isClosed +\n-                \", isCancelled=\" + isCancelled +\n-                \", isRecovering=\" + isRecovering +\n-                \", isActive=\" + isActive +\n-                \", isTopLevel=\" + isTopLevel +\n-                \", startTime=\" + startTime +\n-                \", finishTime=\" + finishTime +\n-                '}';\n+        return String.format(\n+            \"%s {lraId='%s', clientId='%s', status='%s', isTopLevel=%b, isRecovering=%b, startTime=%d, finishTime=%d, httpStatus=%d, responseData='%s'}\",\n+                this.getClass().getSimpleName(), lraId, clientId, status,\n+                isTopLevel, isRecovering, startTime, finishTime, httpStatus, responseData);\n+    }\n+\n+    public static class Builder implements BuilderWithLraId, BuilderWithClientId, BuilderWithStatus, BuilderWithTopLevel,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efd4e9bf598284dccd5c54e26ee18457283a4add"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYzMjE3Ng==", "bodyText": "Good spot:\nI believe response data is the same as status so it can safely be deleted (my guess is that it was used in a previous version of the spec that is no longer required).\nAnd I don't know what httpStatus would be used for, I would delete that too (unless you know where it could be used).", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r476632176", "createdAt": "2020-08-25T17:50:38Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRAData.java", "diffHunk": "@@ -72,12 +58,12 @@ public long getFinishTime() {\n         return finishTime;\n     }\n \n-    public long getTimeNow() {\n-        return LocalDateTime.now().atZone(ZoneOffset.UTC).toInstant().toEpochMilli();\n+    public int getHttpStatus() {\n+        return this.httpStatus;\n     }\n \n-    public ZoneOffset getZoneOffset() {\n-        return ZoneOffset.UTC;\n+    public String getResponseData() {\n+        return this.responseData;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyMTg3Nw=="}, "originalCommit": {"oid": "efd4e9bf598284dccd5c54e26ee18457283a4add"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYzNTkwMw==", "bodyText": "+1", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r476635903", "createdAt": "2020-08-25T17:56:54Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRAData.java", "diffHunk": "@@ -97,18 +83,102 @@ public int hashCode() {\n \n     @Override\n     public String toString() {\n-        return this.getClass().getSimpleName() + \"{\" +\n-                \"lraId='\" + lraId + '\\'' +\n-                \", clientId='\" + clientId + '\\'' +\n-                \", status='\" + status + '\\'' +\n-                \", isClosed=\" + isClosed +\n-                \", isCancelled=\" + isCancelled +\n-                \", isRecovering=\" + isRecovering +\n-                \", isActive=\" + isActive +\n-                \", isTopLevel=\" + isTopLevel +\n-                \", startTime=\" + startTime +\n-                \", finishTime=\" + finishTime +\n-                '}';\n+        return String.format(\n+            \"%s {lraId='%s', clientId='%s', status='%s', isTopLevel=%b, isRecovering=%b, startTime=%d, finishTime=%d, httpStatus=%d, responseData='%s'}\",\n+                this.getClass().getSimpleName(), lraId, clientId, status,\n+                isTopLevel, isRecovering, startTime, finishTime, httpStatus, responseData);\n+    }\n+\n+    public static class Builder implements BuilderWithLraId, BuilderWithClientId, BuilderWithStatus, BuilderWithTopLevel,\n+            BuilderWithRecovering, BuilderWithStartTime, BuilderWithFinishTime, BuilderWithHttpStatus,\n+            BuilderWithResponseData, BuilderFinal {\n+        private String lraId;\n+        private String clientId;\n+        private LRAStatus status;\n+        private boolean isTopLevel;\n+        private boolean isRecovering;\n+        private long startTime;\n+        private long finishTime;\n+        private int httpStatus;\n+        private String responseData;\n+\n+        private Builder() {\n+            // no public instance\n+        }\n+\n+        public static BuilderWithLraId instanceOf() {\n+            return new Builder();\n+        }\n+\n+        public BuilderWithClientId lraId(String lraId) {\n+            this.lraId = lraId;\n+            return this;\n+        }\n+        public BuilderWithStatus clientId(String clientId) {\n+            this.clientId = clientId;\n+            return this;\n+        }\n+        public BuilderWithTopLevel status(LRAStatus lraStatus) {\n+            this.status = lraStatus;\n+            return this;\n+        }\n+        public BuilderWithRecovering topLevel(boolean isTopLevel) {\n+            this.isTopLevel = isTopLevel;\n+            return this;\n+        }\n+        public BuilderWithStartTime recovering(boolean isRecovering) {\n+            this.isRecovering = isRecovering;\n+            return this;\n+        }\n+        public BuilderWithFinishTime startTime(long startTime) {\n+            this.startTime = startTime;\n+            return this;\n+        }\n+        public BuilderWithHttpStatus finishTime(long finishTime) {\n+            this.finishTime = finishTime;\n+            return this;\n+        }\n+        public BuilderWithResponseData httpStatus(int httpStatus) {\n+            this.httpStatus = httpStatus;\n+            return this;\n+        }\n+        public BuilderFinal responseData(String responseData) {\n+            this.responseData = responseData;\n+            return this;\n+        }\n+        public LRAData build() {\n+            return new LRAData(this);\n+        }\n     }\n \n+    public static interface BuilderWithLraId {\n+        BuilderWithClientId lraId(String lraId);\n+    }\n+    public static interface BuilderWithClientId {\n+        BuilderWithStatus clientId(String clientId);\n+    }\n+    public static interface BuilderWithStatus {\n+        BuilderWithTopLevel status(LRAStatus lraStatus);\n+    }\n+    public static interface BuilderWithTopLevel {\n+        BuilderWithRecovering topLevel(boolean isTopLevel);\n+    }\n+    public static interface BuilderWithRecovering {\n+        BuilderWithStartTime recovering(boolean isRecovering);\n+    }\n+    public static interface BuilderWithStartTime {\n+        BuilderWithFinishTime startTime(long startTime);\n+    }\n+    public static interface BuilderWithFinishTime {\n+        BuilderWithHttpStatus finishTime(long finishTime);\n+    }\n+    public static interface BuilderWithHttpStatus {\n+        BuilderWithResponseData httpStatus(int httpStatus);\n+    }\n+    public static interface BuilderWithResponseData {\n+        BuilderFinal responseData(String responseData);\n+    }\n+    public static interface BuilderFinal {\n+        LRAData build();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyODI0OQ=="}, "originalCommit": {"oid": "efd4e9bf598284dccd5c54e26ee18457283a4add"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY0MDYzNA==", "bodyText": "Agreed, status can never be null.", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r476640634", "createdAt": "2020-08-25T18:05:15Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "diffHunk": "@@ -145,12 +157,8 @@ public boolean save_state(OutputObjectState os, int ot) {\n                 os.packLong(finishTime.toInstant(ZoneOffset.UTC).toEpochMilli());\n             }\n \n-            if (status == null) {\n-                os.packBoolean(false);\n-            } else {\n-                os.packBoolean(true);\n-                os.packString(status.name());\n-            }\n+            os.packBoolean(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyOTE2MQ=="}, "originalCommit": {"oid": "efd4e9bf598284dccd5c54e26ee18457283a4add"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY0MDcwMw==", "bodyText": "status can never be null.", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r476640703", "createdAt": "2020-08-25T18:05:20Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "diffHunk": "@@ -145,12 +157,8 @@ public boolean save_state(OutputObjectState os, int ot) {\n                 os.packLong(finishTime.toInstant(ZoneOffset.UTC).toEpochMilli());\n             }\n \n-            if (status == null) {\n-                os.packBoolean(false);\n-            } else {\n-                os.packBoolean(true);\n-                os.packString(status.name());\n-            }\n+            os.packBoolean(true);\n+            os.packString(status == null ? LRAStatus.Active.name() : status.name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efd4e9bf598284dccd5c54e26ee18457283a4add"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY0MTYyMA==", "bodyText": "The text after the comma is not need (and therefore confusing).\nstatus can never be null.", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r476641620", "createdAt": "2020-08-25T18:07:02Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "diffHunk": "@@ -351,9 +359,10 @@ protected LRAService getLraService() {\n     /**\n      * return the current status of the LRA\n      *\n-     * @return null if the LRA is still active (not closing, cancelling, closed or cancelled\n+     * @return current LRA status, will not return <code>null</code>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efd4e9bf598284dccd5c54e26ee18457283a4add"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY0MTgzNg==", "bodyText": "Agreed, status can never be null. But why do we need to be asserting that.", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r476641836", "createdAt": "2020-08-25T18:07:30Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "diffHunk": "@@ -351,9 +359,10 @@ protected LRAService getLraService() {\n     /**\n      * return the current status of the LRA\n      *\n-     * @return null if the LRA is still active (not closing, cancelling, closed or cancelled\n+     * @return current LRA status, will not return <code>null</code>\n      */\n     public LRAStatus getLRAStatus() {\n+        assert status != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efd4e9bf598284dccd5c54e26ee18457283a4add"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY0MzA2OA==", "bodyText": "+1\nAlso isClosed, isCancelled, isActive etc are not required since any caller just needs to call getStatus() and then do the test (in fact I think they are unused). Also note that class Transaction is internal to the implementation so we have full control over the users of this class.\nThe other methods such as isFinished and isRecovering are useful since the check multiple states.", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r476643068", "createdAt": "2020-08-25T18:09:46Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "diffHunk": "@@ -362,24 +371,27 @@ protected void setLRAStatus(int actionStatus) {\n     }\n \n     boolean isClosed() {\n-        return status != null && status.equals(LRAStatus.Closed);\n+        assert status != null;\n+        return status.equals(LRAStatus.Closed);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYzMDg0NQ=="}, "originalCommit": {"oid": "efd4e9bf598284dccd5c54e26ee18457283a4add"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY0NzA2OA==", "bodyText": "+1\nI would choose List since there is a natural ordering for LRAs.", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r476647068", "createdAt": "2020-08-25T18:17:19Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java", "diffHunk": "@@ -124,45 +123,41 @@ public synchronized ReentrantLock tryLockTransaction(URI lraId) {\n         return lock.tryLock() ? lock : null;\n     }\n \n-    public List<LRAStatusHolder> getAll(String state) {\n-        if (state == null || state.isEmpty()) {\n-            Set<LRAStatusHolder> all = getAllActive();\n+    public Collection<LRAData> getAll() {\n+        return getAll(null);\n+    }\n \n+    public Collection<LRAData> getAll(LRAStatus lraStatus) {\n+        if (lraStatus == null) {\n+            Collection<LRAData> all = lras.values().stream()\n+                    .map(t -> t.getLRAData()).collect(Collectors.toCollection(HashSet::new));\n             all.addAll(getAllRecovering());\n-\n-            return new ArrayList<>(all);\n-        }\n-\n-        if (LRAStatus.Cancelling.name().equals(state)) {\n-            return recoveringLRAs.values().stream().map(LRAStatusHolder::new).filter(LRAStatusHolder::isCancelling).collect(toList());\n-        } else if (LRAStatus.Cancelled.name().equals(state)) {\n-            return recoveringLRAs.values().stream().map(LRAStatusHolder::new).filter(LRAStatusHolder::isCancelled).collect(toList());\n-        } else if (LRAStatus.FailedToCancel.name().equals(state)) {\n-            return recoveringLRAs.values().stream().map(LRAStatusHolder::new).filter(LRAStatusHolder::isFailedToCancel).collect(toList());\n-        } else if (LRAStatus.Closing.name().equals(state)) {\n-            return recoveringLRAs.values().stream().map(LRAStatusHolder::new).filter(LRAStatusHolder::isClosing).collect(toList());\n-        } else if (LRAStatus.Closed.name().equals(state)) {\n-            return recoveringLRAs.values().stream().map(LRAStatusHolder::new).filter(LRAStatusHolder::isClosed).collect(toList());\n-        } else if (LRAStatus.FailedToClose.name().equals(state)) {\n-            return recoveringLRAs.values().stream().map(LRAStatusHolder::new).filter(LRAStatusHolder::isFailedToClose).collect(toList());\n+            return all;\n         }\n \n-        return null;\n+        Collection<LRAData> allByStatus = getLraDataByStatus(lras, lraStatus);\n+        allByStatus.addAll(getLraDataByStatus(recoveringLRAs, lraStatus));\n+        return allByStatus;\n     }\n \n-    private Set<LRAStatusHolder> getAllActive() {\n-        return lras.values().stream().map(LRAStatusHolder::new).collect(toSet());\n-    }\n-\n-    public List<LRAStatusHolder> getAllRecovering(boolean scan) {\n+    /**\n+     * Getting all the LRA managed by recovery manager. This means all LRAs which are not mapped\n+     * only in memory but that were already saved in object store.\n+     *\n+     * @param scan  defines if there is run recovery manager scanning before returning the collection,\n+     *              when the recovery is run then the object store is touched and the returned\n+     *              list may be updated with the new loaded objects\n+     * @return list of the {@link LRAData} which define the recovering LRAs\n+     */\n+    public List<LRAData> getAllRecovering(boolean scan) {\n         if (scan) {\n             RecoveryManager.manager().scan();\n         }\n \n-        return recoveringLRAs.values().stream().map(LRAStatusHolder::new).collect(toList());\n+        return recoveringLRAs.values().stream().map(t -> t.getLRAData()).collect(toList());\n     }\n \n-    public List<LRAStatusHolder> getAllRecovering() {\n+    public List<LRAData> getAllRecovering() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYzMzk5Ng=="}, "originalCommit": {"oid": "efd4e9bf598284dccd5c54e26ee18457283a4add"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY1MzgzNQ==", "bodyText": "Do we need to include Lra in the method names, it is clear that these methods are collecting LRAs.\nBut using it in lrasToFilter is good since it explains that the map contains LRAs.", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r476653835", "createdAt": "2020-08-25T18:29:33Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java", "diffHunk": "@@ -474,4 +463,9 @@ void disableRecovery() {\n             }\n         }\n     }\n+\n+    private Collection<LRAData> getLraDataByStatus(Map<URI, Transaction> lrasToFilter, LRAStatus status) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efd4e9bf598284dccd5c54e26ee18457283a4add"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY1NTc4MA==", "bodyText": "LRA is an acronym so it should be capitalised (ie lra -> LRA) but obviously this comment does not apply to java variable names.", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r476655780", "createdAt": "2020-08-25T18:33:05Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/internal/LRARecoveryModule.java", "diffHunk": "@@ -195,7 +195,8 @@ public void getRecoveringLRAs(Map<URI, Transaction> lras) {\n \n     /**\n      * remove an LRA log record\n-     * @param lraUid\n+     *\n+     * @param lraUid lra id that will be removed from the log record", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efd4e9bf598284dccd5c54e26ee18457283a4add"}, "originalPosition": 41}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "efd4e9bf598284dccd5c54e26ee18457283a4add", "author": {"user": {"login": "ochaloup", "name": "chalda"}}, "url": "https://github.com/jbosstm/narayana/commit/efd4e9bf598284dccd5c54e26ee18457283a4add", "committedDate": "2020-08-19T15:01:53Z", "message": "[JBTM-3355] harmonize the LRA DTO usage to use only LRAData"}, "afterCommit": {"oid": "0a6063aa7a8ad2b32c56a3af826d3c4d069d19b7", "author": {"user": {"login": "ochaloup", "name": "chalda"}}, "url": "https://github.com/jbosstm/narayana/commit/0a6063aa7a8ad2b32c56a3af826d3c4d069d19b7", "committedDate": "2020-09-07T08:20:41Z", "message": "[JBTM-3355] harmonize the LRA DTO usage to use only LRAData"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff15d9949c7d24bfaa8310de343bb3d926170372", "author": {"user": {"login": "ochaloup", "name": "chalda"}}, "url": "https://github.com/jbosstm/narayana/commit/ff15d9949c7d24bfaa8310de343bb3d926170372", "committedDate": "2020-09-07T09:31:24Z", "message": "[JBTM-3355] harmonize the LRA DTO usage to use only LRAData"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0a6063aa7a8ad2b32c56a3af826d3c4d069d19b7", "author": {"user": {"login": "ochaloup", "name": "chalda"}}, "url": "https://github.com/jbosstm/narayana/commit/0a6063aa7a8ad2b32c56a3af826d3c4d069d19b7", "committedDate": "2020-09-07T08:20:41Z", "message": "[JBTM-3355] harmonize the LRA DTO usage to use only LRAData"}, "afterCommit": {"oid": "ff15d9949c7d24bfaa8310de343bb3d926170372", "author": {"user": {"login": "ochaloup", "name": "chalda"}}, "url": "https://github.com/jbosstm/narayana/commit/ff15d9949c7d24bfaa8310de343bb3d926170372", "committedDate": "2020-09-07T09:31:24Z", "message": "[JBTM-3355] harmonize the LRA DTO usage to use only LRAData"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0ODc4NzA2", "url": "https://github.com/jbosstm/narayana/pull/1658#pullrequestreview-484878706", "createdAt": "2020-09-09T10:38:04Z", "commit": {"oid": "ff15d9949c7d24bfaa8310de343bb3d926170372"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1Nzc3Nzk5", "url": "https://github.com/jbosstm/narayana/pull/1658#pullrequestreview-485777799", "createdAt": "2020-09-10T10:03:33Z", "commit": {"oid": "ff15d9949c7d24bfaa8310de343bb3d926170372"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4456, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}