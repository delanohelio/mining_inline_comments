{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNTM3MTgx", "number": 1644, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMDo0NToyMlrOELfnAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzoxODoyOFrOEMEp4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNDg3NjgxOnYy", "diffSide": "RIGHT", "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/api/Coordinator.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMDo0NToyMlrOGtEwEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMzozNjozNVrOGuoZZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNjk0NQ==", "bodyText": "This code calls into LRAService to convert an id into a transaction and then calls back into lraService with the returned transaction. Why not add a method to LRAService that takes the id (and internally converts it):\npublic boolean remove(URI lra)", "url": "https://github.com/jbosstm/narayana/pull/1644#discussion_r449916945", "createdAt": "2020-07-05T20:45:22Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/api/Coordinator.java", "diffHunk": "@@ -377,7 +377,7 @@ public Response compensateNestedLRA(@PathParam(\"NestedLraId\") String nestedLraId\n     @PUT\n     @Path(\"nested/{NestedLraId}/forget\")\n     public Response forgetNestedLRA(@PathParam(\"NestedLraId\") String nestedLraId) {\n-        lraService.remove(toURI(nestedLraId));\n+        lraService.remove(lraService.getTransaction(toURI(nestedLraId)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53887ad28ab62e763a86033f03caff0c24a32359"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1MjgyMQ==", "bodyText": "I think the LRAService#remove should work directly with lraId and not with Transaction.The remove method should probably use the LRA Transaction instance obtained from the list and not the one that comes in argument\n\nthen this line is currently wrong: https://github.com/jbosstm/narayana/blob/5.10.5.Final/rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java#L207", "url": "https://github.com/jbosstm/narayana/pull/1644#discussion_r450852821", "createdAt": "2020-07-07T13:12:31Z", "author": {"login": "ochaloup"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/api/Coordinator.java", "diffHunk": "@@ -377,7 +377,7 @@ public Response compensateNestedLRA(@PathParam(\"NestedLraId\") String nestedLraId\n     @PUT\n     @Path(\"nested/{NestedLraId}/forget\")\n     public Response forgetNestedLRA(@PathParam(\"NestedLraId\") String nestedLraId) {\n-        lraService.remove(toURI(nestedLraId));\n+        lraService.remove(lraService.getTransaction(toURI(nestedLraId)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNjk0NQ=="}, "originalCommit": {"oid": "53887ad28ab62e763a86033f03caff0c24a32359"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg2MjQwNg==", "bodyText": "the issue is in the other call of the remove method where the recovered transaction object on which we actually call the second phase again and has its state updated accordingly (failedToClose) is not included in the lra list. The LRA taken from the list is in the wrong state.\nProbably the better fix would be to include the Recovery LRA object in the lra list directly but that would need to be replaced on every recovery pass as a new recovery LRA is created and so far we didn't run into this issue so I've decided that this is an easier fix. I would also then change the implementation of the lra list from the list to map as this replace operation would be unnecessary complex otherwise.\nLet me know how would you like to proceed, please.", "url": "https://github.com/jbosstm/narayana/pull/1644#discussion_r450862406", "createdAt": "2020-07-07T13:26:46Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/api/Coordinator.java", "diffHunk": "@@ -377,7 +377,7 @@ public Response compensateNestedLRA(@PathParam(\"NestedLraId\") String nestedLraId\n     @PUT\n     @Path(\"nested/{NestedLraId}/forget\")\n     public Response forgetNestedLRA(@PathParam(\"NestedLraId\") String nestedLraId) {\n-        lraService.remove(toURI(nestedLraId));\n+        lraService.remove(lraService.getTransaction(toURI(nestedLraId)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNjk0NQ=="}, "originalCommit": {"oid": "53887ad28ab62e763a86033f03caff0c24a32359"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ2NTQ5Nw==", "bodyText": "@xstefank for me to understand better, the code that we discuss is\nif (lra.isFailed()) { // persist failed LRA state\n  lra.deactivate();\n}\n\nwhere the lra is deactivated and this call has to be run on a lra instance, right?\nYou suggest that the passed lra is not part of the Coordinator lras when remove is called from LRAService#finished, correct?\nIf the lra is not included in the lra list (which I assume is meant to be lras) then the code I pasted above won't never be called. Then it won't be a problem.\nProbably. So I understand it in a wrong way. Can you explain me a bit more, please?", "url": "https://github.com/jbosstm/narayana/pull/1644#discussion_r451465497", "createdAt": "2020-07-08T11:16:00Z", "author": {"login": "ochaloup"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/api/Coordinator.java", "diffHunk": "@@ -377,7 +377,7 @@ public Response compensateNestedLRA(@PathParam(\"NestedLraId\") String nestedLraId\n     @PUT\n     @Path(\"nested/{NestedLraId}/forget\")\n     public Response forgetNestedLRA(@PathParam(\"NestedLraId\") String nestedLraId) {\n-        lraService.remove(toURI(nestedLraId));\n+        lraService.remove(lraService.getTransaction(toURI(nestedLraId)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNjk0NQ=="}, "originalCommit": {"oid": "53887ad28ab62e763a86033f03caff0c24a32359"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ3ODk1MA==", "bodyText": "Just keep the existing  lraService.remove method and maybe add a new one that takes a transaction instance. I would advice against refactoring the code at this stage.", "url": "https://github.com/jbosstm/narayana/pull/1644#discussion_r451478950", "createdAt": "2020-07-08T11:43:30Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/api/Coordinator.java", "diffHunk": "@@ -377,7 +377,7 @@ public Response compensateNestedLRA(@PathParam(\"NestedLraId\") String nestedLraId\n     @PUT\n     @Path(\"nested/{NestedLraId}/forget\")\n     public Response forgetNestedLRA(@PathParam(\"NestedLraId\") String nestedLraId) {\n-        lraService.remove(toURI(nestedLraId));\n+        lraService.remove(lraService.getTransaction(toURI(nestedLraId)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNjk0NQ=="}, "originalCommit": {"oid": "53887ad28ab62e763a86033f03caff0c24a32359"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU0OTU0MQ==", "bodyText": "I understand the issue now and I got the point about the lra instance passed to the remove method.\nI was trying to understand the processing and I'm not able to come with a better/nicer way. I assume it's fine to be this way.\nI don't like code duplication thus I do not prefer the ducplication code into lraService.remove method but if it's fine for the rest then ok.", "url": "https://github.com/jbosstm/narayana/pull/1644#discussion_r451549541", "createdAt": "2020-07-08T13:36:35Z", "author": {"login": "ochaloup"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/api/Coordinator.java", "diffHunk": "@@ -377,7 +377,7 @@ public Response compensateNestedLRA(@PathParam(\"NestedLraId\") String nestedLraId\n     @PUT\n     @Path(\"nested/{NestedLraId}/forget\")\n     public Response forgetNestedLRA(@PathParam(\"NestedLraId\") String nestedLraId) {\n-        lraService.remove(toURI(nestedLraId));\n+        lraService.remove(lraService.getTransaction(toURI(nestedLraId)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNjk0NQ=="}, "originalCommit": {"oid": "53887ad28ab62e763a86033f03caff0c24a32359"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDk0NjI0OnYy", "diffSide": "RIGHT", "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzoxODoyOFrOGt-G5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMjo1NDoyM1rOGumsEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1NjY3OQ==", "bodyText": "Thsis is not a request for a change but just a note \"thinking loudly\"\nDo you know why the LRA Transaction instance permits the status to be null?\nI think it could be better to assert that's not null? I can see the code may assign the status to null during recovery. Maybe some future change could adjust it.", "url": "https://github.com/jbosstm/narayana/pull/1644#discussion_r450856679", "createdAt": "2020-07-07T13:18:28Z", "author": {"login": "ochaloup"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "diffHunk": "@@ -374,6 +374,10 @@ public boolean isRecovering() {\n                 (status.equals(LRAStatus.Cancelling) || status.equals(LRAStatus.Closing));\n     }\n \n+    public boolean isFailed() {\n+        return status != null &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53887ad28ab62e763a86033f03caff0c24a32359"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ3NzU0Mg==", "bodyText": "The status cannot be null. We used to use null to indicate that the transaction was active but we have since introduced an explicit state for this (LRAStatus.Active). I didn't mention it in my review since it is unrelated to the PR, I was going to clean up the code in one go in a dedicated PR.", "url": "https://github.com/jbosstm/narayana/pull/1644#discussion_r451477542", "createdAt": "2020-07-08T11:40:38Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "diffHunk": "@@ -374,6 +374,10 @@ public boolean isRecovering() {\n                 (status.equals(LRAStatus.Cancelling) || status.equals(LRAStatus.Closing));\n     }\n \n+    public boolean isFailed() {\n+        return status != null &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1NjY3OQ=="}, "originalCommit": {"oid": "53887ad28ab62e763a86033f03caff0c24a32359"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ3ODYyNg==", "bodyText": "thanks Mike, that will be better.", "url": "https://github.com/jbosstm/narayana/pull/1644#discussion_r451478626", "createdAt": "2020-07-08T11:42:48Z", "author": {"login": "xstefank"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "diffHunk": "@@ -374,6 +374,10 @@ public boolean isRecovering() {\n                 (status.equals(LRAStatus.Cancelling) || status.equals(LRAStatus.Closing));\n     }\n \n+    public boolean isFailed() {\n+        return status != null &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1NjY3OQ=="}, "originalCommit": {"oid": "53887ad28ab62e763a86033f03caff0c24a32359"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ4MTU1OQ==", "bodyText": "Where does \"the code assign null to the status\"? It should not do that.\nChecking for status == null is a throwback to when we did not have an LRAStatus.Active state so the null checks are superfluous but I would advice against refactoring in the PR - do it in a separate one that does a general clean up of the code.", "url": "https://github.com/jbosstm/narayana/pull/1644#discussion_r451481559", "createdAt": "2020-07-08T11:48:47Z", "author": {"login": "mmusgrov"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "diffHunk": "@@ -374,6 +374,10 @@ public boolean isRecovering() {\n                 (status.equals(LRAStatus.Cancelling) || status.equals(LRAStatus.Closing));\n     }\n \n+    public boolean isFailed() {\n+        return status != null &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1NjY3OQ=="}, "originalCommit": {"oid": "53887ad28ab62e763a86033f03caff0c24a32359"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUyMTU1NA==", "bodyText": "@mmusgrov https://github.com/jbosstm/narayana/blob/master/rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java#L272", "url": "https://github.com/jbosstm/narayana/pull/1644#discussion_r451521554", "createdAt": "2020-07-08T12:54:23Z", "author": {"login": "ochaloup"}, "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "diffHunk": "@@ -374,6 +374,10 @@ public boolean isRecovering() {\n                 (status.equals(LRAStatus.Cancelling) || status.equals(LRAStatus.Closing));\n     }\n \n+    public boolean isFailed() {\n+        return status != null &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1NjY3OQ=="}, "originalCommit": {"oid": "53887ad28ab62e763a86033f03caff0c24a32359"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1188, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}