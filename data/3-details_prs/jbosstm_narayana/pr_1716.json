{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3MzAwNTk2", "number": 1716, "title": "JBTM-3223 Validate LRA behaviour when multiple LRA's are active on th\u2026", "bodyText": "https://issues.redhat.com/browse/JBTM-3223\nLRA\n!MAIN !CORE !QA_JTA !QA_JTS_JDKORB !QA_JTS_OPENJDKORB !QA_JTS_JACORB !BLACKTIE !XTS !PERF NO_WIN !RTS !AS_TESTS !TOMCAT !JACOCO\nThe issue says: Add tests that check that when multiple LRA's are active on the same thread that as one LRA finishes that:\n\nthe next one is handled correctly\ncreating another one still works fine", "createdAt": "2020-11-08T12:53:31Z", "url": "https://github.com/jbosstm/narayana/pull/1716", "merged": true, "mergeCommit": {"oid": "f2f7a9941e017411c5b7cf61f2ed089dd0508b80"}, "closed": true, "closedAt": "2020-11-19T12:02:04Z", "author": {"login": "mmusgrov"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABda0WZ0AFqTUyNjEzNjU1OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABddyR59gFqTUzMzc0NTY1MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MTM2NTU4", "url": "https://github.com/jbosstm/narayana/pull/1716#pullrequestreview-526136558", "createdAt": "2020-11-09T10:55:18Z", "commit": {"oid": "c7a972819e24230de24c880e9d4bdd364ad03699"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMDo1NToxOFrOHvpKrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMjo1NTo0OFrOHvtMzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcxOTU5OA==", "bodyText": "Maybe this throws could not be here as it's just a test method. When it's mentioned it should be documented when it's thrown.", "url": "https://github.com/jbosstm/narayana/pull/1716#discussion_r519719598", "createdAt": "2020-11-09T10:55:18Z", "author": {"login": "ochaloup"}, "path": "rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/client/LRAIT.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.client;\n+\n+import io.narayana.lra.arquillian.Deployer;\n+import io.narayana.lra.arquillian.resource.LRAParticipant;\n+import io.narayana.lra.client.NarayanaLRAClient;\n+import org.eclipse.microprofile.lra.annotation.LRAStatus;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.UriBuilder;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_CONTEXT_HEADER;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(Arquillian.class)\n+public class LRAIT {\n+\n+    @ArquillianResource\n+    private URL baseURL;\n+\n+    private Client client;\n+\n+    @Deployment\n+    public static WebArchive deploy() {\n+        return Deployer.deploy(LRAIT.class.getSimpleName());\n+    }\n+\n+    @Before\n+    public void before() {\n+        client = ClientBuilder.newClient();\n+    }\n+\n+    @After\n+    public void after() {\n+        if (client != null) {\n+            client.close();\n+        }\n+    }\n+\n+    /**\n+     * Invoke a resource method which in turn invokes other resources.\n+     * The various resource invocations are called in new or existing LRAs.\n+     * Various tests are performed to verify that the correct LRAs are used\n+     * and the LRAs have the expected status (see the resource method for\n+     * the detail).\n+     *\n+     * @throws URISyntaxException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7a972819e24230de24c880e9d4bdd364ad03699"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcyMDA3NQ==", "bodyText": "for further investigation it could be good to print in assertion the URI of `lra1 when the check fails", "url": "https://github.com/jbosstm/narayana/pull/1716#discussion_r519720075", "createdAt": "2020-11-09T10:56:00Z", "author": {"login": "ochaloup"}, "path": "rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/client/LRAIT.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.client;\n+\n+import io.narayana.lra.arquillian.Deployer;\n+import io.narayana.lra.arquillian.resource.LRAParticipant;\n+import io.narayana.lra.client.NarayanaLRAClient;\n+import org.eclipse.microprofile.lra.annotation.LRAStatus;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.UriBuilder;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_CONTEXT_HEADER;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(Arquillian.class)\n+public class LRAIT {\n+\n+    @ArquillianResource\n+    private URL baseURL;\n+\n+    private Client client;\n+\n+    @Deployment\n+    public static WebArchive deploy() {\n+        return Deployer.deploy(LRAIT.class.getSimpleName());\n+    }\n+\n+    @Before\n+    public void before() {\n+        client = ClientBuilder.newClient();\n+    }\n+\n+    @After\n+    public void after() {\n+        if (client != null) {\n+            client.close();\n+        }\n+    }\n+\n+    /**\n+     * Invoke a resource method which in turn invokes other resources.\n+     * The various resource invocations are called in new or existing LRAs.\n+     * Various tests are performed to verify that the correct LRAs are used\n+     * and the LRAs have the expected status (see the resource method for\n+     * the detail).\n+     *\n+     * @throws URISyntaxException\n+     */\n+    @Test\n+    public void testChainOfInvocations() throws URISyntaxException {\n+        NarayanaLRAClient lraClient = new NarayanaLRAClient();\n+\n+        // Invoke a method which starts a transaction\n+        // (note that the method LRAParticipant.CREATE_OR_CONTINUE_LRA also invokes other resource methods)\n+        URI lra1 = invokeInTransaction(null, LRAParticipant.RESOURCE_PATH, LRAParticipant.CREATE_OR_CONTINUE_LRA, 200);\n+        assertEquals(\"lra1 should be active\", LRAStatus.Active, lraClient.getStatus(lra1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7a972819e24230de24c880e9d4bdd364ad03699"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc3OTYxNw==", "bodyText": "similar to my note above, maybe adding the more context and the LRA instance which should not be making the progress with changing current?", "url": "https://github.com/jbosstm/narayana/pull/1716#discussion_r519779617", "createdAt": "2020-11-09T12:45:04Z", "author": {"login": "ochaloup"}, "path": "rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/client/LRAIT.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.client;\n+\n+import io.narayana.lra.arquillian.Deployer;\n+import io.narayana.lra.arquillian.resource.LRAParticipant;\n+import io.narayana.lra.client.NarayanaLRAClient;\n+import org.eclipse.microprofile.lra.annotation.LRAStatus;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.UriBuilder;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_CONTEXT_HEADER;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(Arquillian.class)\n+public class LRAIT {\n+\n+    @ArquillianResource\n+    private URL baseURL;\n+\n+    private Client client;\n+\n+    @Deployment\n+    public static WebArchive deploy() {\n+        return Deployer.deploy(LRAIT.class.getSimpleName());\n+    }\n+\n+    @Before\n+    public void before() {\n+        client = ClientBuilder.newClient();\n+    }\n+\n+    @After\n+    public void after() {\n+        if (client != null) {\n+            client.close();\n+        }\n+    }\n+\n+    /**\n+     * Invoke a resource method which in turn invokes other resources.\n+     * The various resource invocations are called in new or existing LRAs.\n+     * Various tests are performed to verify that the correct LRAs are used\n+     * and the LRAs have the expected status (see the resource method for\n+     * the detail).\n+     *\n+     * @throws URISyntaxException\n+     */\n+    @Test\n+    public void testChainOfInvocations() throws URISyntaxException {\n+        NarayanaLRAClient lraClient = new NarayanaLRAClient();\n+\n+        // Invoke a method which starts a transaction\n+        // (note that the method LRAParticipant.CREATE_OR_CONTINUE_LRA also invokes other resource methods)\n+        URI lra1 = invokeInTransaction(null, LRAParticipant.RESOURCE_PATH, LRAParticipant.CREATE_OR_CONTINUE_LRA, 200);\n+        assertEquals(\"lra1 should be active\", LRAStatus.Active, lraClient.getStatus(lra1));\n+\n+        // end the LRA\n+        invokeInTransaction(lra1, LRAParticipant.RESOURCE_PATH, LRAParticipant.END_EXISTING_LRA, 200);\n+\n+        assertNull(\"remote invocations should not update current (see MP-LRA issue behaviour)\", lraClient.getCurrent());\n+    }\n+\n+    /**\n+     * test behaviour when multiple LRAs are active\n+     */\n+    @Test\n+    public void testNoCurrent() throws URISyntaxException {\n+        NarayanaLRAClient lraClient = new NarayanaLRAClient();\n+        URI lra1 = invokeInTransaction(null, LRAParticipant.RESOURCE_PATH, LRAParticipant.START_NEW_LRA, 200);\n+        assertNull(\"remote invocations should not update current (see MP-LRA issue behaviour)\", lraClient.getCurrent());\n+        URI lra2 = invokeInTransaction(null, LRAParticipant.RESOURCE_PATH, LRAParticipant.START_NEW_LRA, 200);\n+        assertNull(\"remote invocations should not update current (see MP-LRA issue behaviour)\", lraClient.getCurrent());\n+\n+        invokeInTransaction(lra1, LRAParticipant.RESOURCE_PATH, LRAParticipant.END_EXISTING_LRA, 200);\n+        assertNull(\"remote invocations should not update current (see MP-LRA issue behaviour)\", lraClient.getCurrent());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7a972819e24230de24c880e9d4bdd364ad03699"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc4MDc0NA==", "bodyText": "does make sense to add here some more context about the failure? What does the current mean - is it currently active LRA instance? I  think it could be hard to search expected behaviour in MP-LRA with this description.", "url": "https://github.com/jbosstm/narayana/pull/1716#discussion_r519780744", "createdAt": "2020-11-09T12:47:05Z", "author": {"login": "ochaloup"}, "path": "rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/client/LRAIT.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.client;\n+\n+import io.narayana.lra.arquillian.Deployer;\n+import io.narayana.lra.arquillian.resource.LRAParticipant;\n+import io.narayana.lra.client.NarayanaLRAClient;\n+import org.eclipse.microprofile.lra.annotation.LRAStatus;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.UriBuilder;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_CONTEXT_HEADER;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(Arquillian.class)\n+public class LRAIT {\n+\n+    @ArquillianResource\n+    private URL baseURL;\n+\n+    private Client client;\n+\n+    @Deployment\n+    public static WebArchive deploy() {\n+        return Deployer.deploy(LRAIT.class.getSimpleName());\n+    }\n+\n+    @Before\n+    public void before() {\n+        client = ClientBuilder.newClient();\n+    }\n+\n+    @After\n+    public void after() {\n+        if (client != null) {\n+            client.close();\n+        }\n+    }\n+\n+    /**\n+     * Invoke a resource method which in turn invokes other resources.\n+     * The various resource invocations are called in new or existing LRAs.\n+     * Various tests are performed to verify that the correct LRAs are used\n+     * and the LRAs have the expected status (see the resource method for\n+     * the detail).\n+     *\n+     * @throws URISyntaxException\n+     */\n+    @Test\n+    public void testChainOfInvocations() throws URISyntaxException {\n+        NarayanaLRAClient lraClient = new NarayanaLRAClient();\n+\n+        // Invoke a method which starts a transaction\n+        // (note that the method LRAParticipant.CREATE_OR_CONTINUE_LRA also invokes other resource methods)\n+        URI lra1 = invokeInTransaction(null, LRAParticipant.RESOURCE_PATH, LRAParticipant.CREATE_OR_CONTINUE_LRA, 200);\n+        assertEquals(\"lra1 should be active\", LRAStatus.Active, lraClient.getStatus(lra1));\n+\n+        // end the LRA\n+        invokeInTransaction(lra1, LRAParticipant.RESOURCE_PATH, LRAParticipant.END_EXISTING_LRA, 200);\n+\n+        assertNull(\"remote invocations should not update current (see MP-LRA issue behaviour)\", lraClient.getCurrent());\n+    }\n+\n+    /**\n+     * test behaviour when multiple LRAs are active\n+     */\n+    @Test\n+    public void testNoCurrent() throws URISyntaxException {\n+        NarayanaLRAClient lraClient = new NarayanaLRAClient();\n+        URI lra1 = invokeInTransaction(null, LRAParticipant.RESOURCE_PATH, LRAParticipant.START_NEW_LRA, 200);\n+        assertNull(\"remote invocations should not update current (see MP-LRA issue behaviour)\", lraClient.getCurrent());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7a972819e24230de24c880e9d4bdd364ad03699"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc4MjIxNQ==", "bodyText": "could be the parameter expectedStatus removed when all calls expects 200?", "url": "https://github.com/jbosstm/narayana/pull/1716#discussion_r519782215", "createdAt": "2020-11-09T12:49:42Z", "author": {"login": "ochaloup"}, "path": "rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/client/LRAIT.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.client;\n+\n+import io.narayana.lra.arquillian.Deployer;\n+import io.narayana.lra.arquillian.resource.LRAParticipant;\n+import io.narayana.lra.client.NarayanaLRAClient;\n+import org.eclipse.microprofile.lra.annotation.LRAStatus;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.UriBuilder;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_CONTEXT_HEADER;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(Arquillian.class)\n+public class LRAIT {\n+\n+    @ArquillianResource\n+    private URL baseURL;\n+\n+    private Client client;\n+\n+    @Deployment\n+    public static WebArchive deploy() {\n+        return Deployer.deploy(LRAIT.class.getSimpleName());\n+    }\n+\n+    @Before\n+    public void before() {\n+        client = ClientBuilder.newClient();\n+    }\n+\n+    @After\n+    public void after() {\n+        if (client != null) {\n+            client.close();\n+        }\n+    }\n+\n+    /**\n+     * Invoke a resource method which in turn invokes other resources.\n+     * The various resource invocations are called in new or existing LRAs.\n+     * Various tests are performed to verify that the correct LRAs are used\n+     * and the LRAs have the expected status (see the resource method for\n+     * the detail).\n+     *\n+     * @throws URISyntaxException\n+     */\n+    @Test\n+    public void testChainOfInvocations() throws URISyntaxException {\n+        NarayanaLRAClient lraClient = new NarayanaLRAClient();\n+\n+        // Invoke a method which starts a transaction\n+        // (note that the method LRAParticipant.CREATE_OR_CONTINUE_LRA also invokes other resource methods)\n+        URI lra1 = invokeInTransaction(null, LRAParticipant.RESOURCE_PATH, LRAParticipant.CREATE_OR_CONTINUE_LRA, 200);\n+        assertEquals(\"lra1 should be active\", LRAStatus.Active, lraClient.getStatus(lra1));\n+\n+        // end the LRA\n+        invokeInTransaction(lra1, LRAParticipant.RESOURCE_PATH, LRAParticipant.END_EXISTING_LRA, 200);\n+\n+        assertNull(\"remote invocations should not update current (see MP-LRA issue behaviour)\", lraClient.getCurrent());\n+    }\n+\n+    /**\n+     * test behaviour when multiple LRAs are active\n+     */\n+    @Test\n+    public void testNoCurrent() throws URISyntaxException {\n+        NarayanaLRAClient lraClient = new NarayanaLRAClient();\n+        URI lra1 = invokeInTransaction(null, LRAParticipant.RESOURCE_PATH, LRAParticipant.START_NEW_LRA, 200);\n+        assertNull(\"remote invocations should not update current (see MP-LRA issue behaviour)\", lraClient.getCurrent());\n+        URI lra2 = invokeInTransaction(null, LRAParticipant.RESOURCE_PATH, LRAParticipant.START_NEW_LRA, 200);\n+        assertNull(\"remote invocations should not update current (see MP-LRA issue behaviour)\", lraClient.getCurrent());\n+\n+        invokeInTransaction(lra1, LRAParticipant.RESOURCE_PATH, LRAParticipant.END_EXISTING_LRA, 200);\n+        assertNull(\"remote invocations should not update current (see MP-LRA issue behaviour)\", lraClient.getCurrent());\n+        invokeInTransaction(lra2, LRAParticipant.RESOURCE_PATH, LRAParticipant.END_EXISTING_LRA, 200);\n+        assertNull(\"remote invocations should not update current (see MP-LRA issue behaviour)\", lraClient.getCurrent());\n+    }\n+\n+    /**\n+     * Test that remote invocations can start and stop LRAs using the prorprietary client API\n+     */\n+    @Test\n+    public void testRemoteCurrent() {\n+        URI lra1 = invokeInTransaction(null, LRAParticipant.RESOURCE_PATH, LRAParticipant.CREATE_OR_CONTINUE_LRA2, 200);\n+        invokeInTransaction(lra1, LRAParticipant.RESOURCE_PATH, LRAParticipant.END_EXISTING_LRA, 200);\n+    }\n+\n+    /**\n+     * JBTM-3223 Validate LRA behaviour when multiple LRA's are active on the same thread\n+     *\n+     * when multiple LRA's are active on the same thread that as one LRA finishes that:\n+     * a) the next one is handled correctly\n+     * b) creating another one still works fine\n+     */\n+    @Test\n+    public void testCurrent() throws URISyntaxException {\n+        NarayanaLRAClient lraClient = new NarayanaLRAClient();\n+\n+        // start two LRAs on the current thread\n+        URI lra1 = lraClient.startLRA(\"lra1\");\n+        assertEquals(\"lra1 is not associated with the current thread\",\n+                lra1, lraClient.getCurrent());\n+        URI lra2 = lraClient.startLRA(\"lra2\");\n+        assertEquals(\"lra2 is not associated with the current thread\",\n+                lra2, lraClient.getCurrent());\n+\n+        // a) closing the current one should make the previous one active\n+        lraClient.closeLRA(lra2);\n+        assertEquals(\"closing the current LRA should have made the previous one active\",\n+                lra1, lraClient.getCurrent());\n+\n+        // b) verify that creating another LRA still works fine\n+        URI lra3 = lraClient.startLRA(\"lra3\");\n+        assertEquals(\"lra3 is not associated with the current thread\",\n+                lra3, lraClient.getCurrent());\n+\n+        lraClient.closeLRA(lra3);\n+        assertEquals(\"closing the current LRA (lra3) should have made the previous one (lra1) active\",\n+                lra1, lraClient.getCurrent());\n+\n+        // check that closing the last LRA will leave none active\n+        lraClient.closeLRA(lra1);\n+        assertNull(\"all LRAs are closed so none should be associated with the calling thread\",\n+                lraClient.getCurrent());\n+\n+        lraClient.close();\n+    }\n+\n+    private URI invokeInTransaction(URI lra, String resourcePrefix, String resourcePath, int expectedStatus) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7a972819e24230de24c880e9d4bdd364ad03699"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc4MjU1Nw==", "bodyText": "it could be good to add some more context about the failure to the assertion message", "url": "https://github.com/jbosstm/narayana/pull/1716#discussion_r519782557", "createdAt": "2020-11-09T12:50:17Z", "author": {"login": "ochaloup"}, "path": "rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/client/LRAIT.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.client;\n+\n+import io.narayana.lra.arquillian.Deployer;\n+import io.narayana.lra.arquillian.resource.LRAParticipant;\n+import io.narayana.lra.client.NarayanaLRAClient;\n+import org.eclipse.microprofile.lra.annotation.LRAStatus;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.UriBuilder;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_CONTEXT_HEADER;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(Arquillian.class)\n+public class LRAIT {\n+\n+    @ArquillianResource\n+    private URL baseURL;\n+\n+    private Client client;\n+\n+    @Deployment\n+    public static WebArchive deploy() {\n+        return Deployer.deploy(LRAIT.class.getSimpleName());\n+    }\n+\n+    @Before\n+    public void before() {\n+        client = ClientBuilder.newClient();\n+    }\n+\n+    @After\n+    public void after() {\n+        if (client != null) {\n+            client.close();\n+        }\n+    }\n+\n+    /**\n+     * Invoke a resource method which in turn invokes other resources.\n+     * The various resource invocations are called in new or existing LRAs.\n+     * Various tests are performed to verify that the correct LRAs are used\n+     * and the LRAs have the expected status (see the resource method for\n+     * the detail).\n+     *\n+     * @throws URISyntaxException\n+     */\n+    @Test\n+    public void testChainOfInvocations() throws URISyntaxException {\n+        NarayanaLRAClient lraClient = new NarayanaLRAClient();\n+\n+        // Invoke a method which starts a transaction\n+        // (note that the method LRAParticipant.CREATE_OR_CONTINUE_LRA also invokes other resource methods)\n+        URI lra1 = invokeInTransaction(null, LRAParticipant.RESOURCE_PATH, LRAParticipant.CREATE_OR_CONTINUE_LRA, 200);\n+        assertEquals(\"lra1 should be active\", LRAStatus.Active, lraClient.getStatus(lra1));\n+\n+        // end the LRA\n+        invokeInTransaction(lra1, LRAParticipant.RESOURCE_PATH, LRAParticipant.END_EXISTING_LRA, 200);\n+\n+        assertNull(\"remote invocations should not update current (see MP-LRA issue behaviour)\", lraClient.getCurrent());\n+    }\n+\n+    /**\n+     * test behaviour when multiple LRAs are active\n+     */\n+    @Test\n+    public void testNoCurrent() throws URISyntaxException {\n+        NarayanaLRAClient lraClient = new NarayanaLRAClient();\n+        URI lra1 = invokeInTransaction(null, LRAParticipant.RESOURCE_PATH, LRAParticipant.START_NEW_LRA, 200);\n+        assertNull(\"remote invocations should not update current (see MP-LRA issue behaviour)\", lraClient.getCurrent());\n+        URI lra2 = invokeInTransaction(null, LRAParticipant.RESOURCE_PATH, LRAParticipant.START_NEW_LRA, 200);\n+        assertNull(\"remote invocations should not update current (see MP-LRA issue behaviour)\", lraClient.getCurrent());\n+\n+        invokeInTransaction(lra1, LRAParticipant.RESOURCE_PATH, LRAParticipant.END_EXISTING_LRA, 200);\n+        assertNull(\"remote invocations should not update current (see MP-LRA issue behaviour)\", lraClient.getCurrent());\n+        invokeInTransaction(lra2, LRAParticipant.RESOURCE_PATH, LRAParticipant.END_EXISTING_LRA, 200);\n+        assertNull(\"remote invocations should not update current (see MP-LRA issue behaviour)\", lraClient.getCurrent());\n+    }\n+\n+    /**\n+     * Test that remote invocations can start and stop LRAs using the prorprietary client API\n+     */\n+    @Test\n+    public void testRemoteCurrent() {\n+        URI lra1 = invokeInTransaction(null, LRAParticipant.RESOURCE_PATH, LRAParticipant.CREATE_OR_CONTINUE_LRA2, 200);\n+        invokeInTransaction(lra1, LRAParticipant.RESOURCE_PATH, LRAParticipant.END_EXISTING_LRA, 200);\n+    }\n+\n+    /**\n+     * JBTM-3223 Validate LRA behaviour when multiple LRA's are active on the same thread\n+     *\n+     * when multiple LRA's are active on the same thread that as one LRA finishes that:\n+     * a) the next one is handled correctly\n+     * b) creating another one still works fine\n+     */\n+    @Test\n+    public void testCurrent() throws URISyntaxException {\n+        NarayanaLRAClient lraClient = new NarayanaLRAClient();\n+\n+        // start two LRAs on the current thread\n+        URI lra1 = lraClient.startLRA(\"lra1\");\n+        assertEquals(\"lra1 is not associated with the current thread\",\n+                lra1, lraClient.getCurrent());\n+        URI lra2 = lraClient.startLRA(\"lra2\");\n+        assertEquals(\"lra2 is not associated with the current thread\",\n+                lra2, lraClient.getCurrent());\n+\n+        // a) closing the current one should make the previous one active\n+        lraClient.closeLRA(lra2);\n+        assertEquals(\"closing the current LRA should have made the previous one active\",\n+                lra1, lraClient.getCurrent());\n+\n+        // b) verify that creating another LRA still works fine\n+        URI lra3 = lraClient.startLRA(\"lra3\");\n+        assertEquals(\"lra3 is not associated with the current thread\",\n+                lra3, lraClient.getCurrent());\n+\n+        lraClient.closeLRA(lra3);\n+        assertEquals(\"closing the current LRA (lra3) should have made the previous one (lra1) active\",\n+                lra1, lraClient.getCurrent());\n+\n+        // check that closing the last LRA will leave none active\n+        lraClient.closeLRA(lra1);\n+        assertNull(\"all LRAs are closed so none should be associated with the calling thread\",\n+                lraClient.getCurrent());\n+\n+        lraClient.close();\n+    }\n+\n+    private URI invokeInTransaction(URI lra, String resourcePrefix, String resourcePath, int expectedStatus) {\n+        Response response = null;\n+\n+        try {\n+            Invocation.Builder builder = client.target(UriBuilder.fromUri(baseURL.toExternalForm())\n+                    .path(resourcePrefix)\n+                    .path(resourcePath).build())\n+                    .request();\n+\n+            if (lra != null) {\n+                builder.header(LRA_HTTP_CONTEXT_HEADER, lra.toASCIIString());\n+            }\n+\n+            response = builder.get();\n+\n+            assertEquals(expectedStatus, response.getStatus());\n+            assertTrue(response.hasEntity());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7a972819e24230de24c880e9d4bdd364ad03699"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc4MzMyMQ==", "bodyText": "It would be good to print the lra id in the assertion message. It's the same for other calls down here.", "url": "https://github.com/jbosstm/narayana/pull/1716#discussion_r519783321", "createdAt": "2020-11-09T12:51:42Z", "author": {"login": "ochaloup"}, "path": "rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/resource/LRAParticipant.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.resource;\n+\n+import io.narayana.lra.client.NarayanaLRAClient;\n+import org.eclipse.microprofile.lra.annotation.Compensate;\n+import org.eclipse.microprofile.lra.annotation.LRAStatus;\n+import org.eclipse.microprofile.lra.annotation.ws.rs.LRA;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.HeaderParam;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.Response;\n+import java.net.URI;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.core.UriBuilder;\n+import javax.ws.rs.core.UriInfo;\n+\n+import static javax.ws.rs.core.Response.Status.NOT_FOUND;\n+import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_CONTEXT_HEADER;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+@ApplicationScoped\n+@Path(LRAParticipant.RESOURCE_PATH)\n+public class LRAParticipant {\n+    public static final String RESOURCE_PATH = \"participant2\";\n+\n+    public static final String CREATE_OR_CONTINUE_LRA = \"start-lra\";\n+    public static final String CREATE_OR_CONTINUE_LRA2 = \"start-end-lra\";\n+    public static final String END_EXISTING_LRA = \"end-lra\";\n+    public static final String CONTINUE_LRA = \"continue-lra\";\n+    public static final String START_NEW_LRA = \"start-lra2\";\n+\n+    @Context\n+    UriInfo uriInfo;\n+\n+    @Inject\n+    private NarayanaLRAClient lraClient;\n+\n+    @GET\n+    @Path(CREATE_OR_CONTINUE_LRA)\n+    @LRA(value = LRA.Type.REQUIRED, end = false)\n+    public Response beginLRAWithRemoteCalls(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lra1) {\n+        assertEquals(\"lra1 should be active\", LRAStatus.Active, lraClient.getStatus(lra1));\n+\n+        // start a new LRA\n+        URI lra2 = remoteInvocation(lra1, START_NEW_LRA);\n+        assertEquals(\"lra1 should still be active\", LRAStatus.Active, lraClient.getStatus(lra1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7a972819e24230de24c880e9d4bdd364ad03699"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc4Mzc2NQ==", "bodyText": "This line should be removed probably.", "url": "https://github.com/jbosstm/narayana/pull/1716#discussion_r519783765", "createdAt": "2020-11-09T12:52:18Z", "author": {"login": "ochaloup"}, "path": "rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/resource/LRAParticipant.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.resource;\n+\n+import io.narayana.lra.client.NarayanaLRAClient;\n+import org.eclipse.microprofile.lra.annotation.Compensate;\n+import org.eclipse.microprofile.lra.annotation.LRAStatus;\n+import org.eclipse.microprofile.lra.annotation.ws.rs.LRA;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.HeaderParam;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.Response;\n+import java.net.URI;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.core.UriBuilder;\n+import javax.ws.rs.core.UriInfo;\n+\n+import static javax.ws.rs.core.Response.Status.NOT_FOUND;\n+import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_CONTEXT_HEADER;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+@ApplicationScoped\n+@Path(LRAParticipant.RESOURCE_PATH)\n+public class LRAParticipant {\n+    public static final String RESOURCE_PATH = \"participant2\";\n+\n+    public static final String CREATE_OR_CONTINUE_LRA = \"start-lra\";\n+    public static final String CREATE_OR_CONTINUE_LRA2 = \"start-end-lra\";\n+    public static final String END_EXISTING_LRA = \"end-lra\";\n+    public static final String CONTINUE_LRA = \"continue-lra\";\n+    public static final String START_NEW_LRA = \"start-lra2\";\n+\n+    @Context\n+    UriInfo uriInfo;\n+\n+    @Inject\n+    private NarayanaLRAClient lraClient;\n+\n+    @GET\n+    @Path(CREATE_OR_CONTINUE_LRA)\n+    @LRA(value = LRA.Type.REQUIRED, end = false)\n+    public Response beginLRAWithRemoteCalls(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lra1) {\n+        assertEquals(\"lra1 should be active\", LRAStatus.Active, lraClient.getStatus(lra1));\n+\n+        // start a new LRA\n+        URI lra2 = remoteInvocation(lra1, START_NEW_LRA);\n+        assertEquals(\"lra1 should still be active\", LRAStatus.Active, lraClient.getStatus(lra1));\n+        assertEquals(\"lra2 should be active\", LRAStatus.Active, lraClient.getStatus(lra2));\n+\n+        // lra1 should be the current context for remote invocations even though lra2 is active (see spec)\n+        assertEquals(\"lra1 should be the current\", lra1, lraClient.getCurrent());\n+\n+        URI lra3 = remoteInvocation(lra2, CONTINUE_LRA); // lra2 is still active, use it for the next invocation\n+        assertEquals(\"lra2 should still be active\", LRAStatus.Active, lraClient.getStatus(lra2));\n+        assertEquals(\"lra2 should equal lra3\", lra2, lra3); // lra3 was a continuation of lra2\n+\n+        lraClient.closeLRA(lra2); // use the (proprietary) client API to close the LRA started above (START_NEW_LRA)\n+//        remoteInvocation(lra2, END_EXISTING_LRA); // or do it via an end annotation attribute", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7a972819e24230de24c880e9d4bdd364ad03699"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc4NTY3OA==", "bodyText": "What about to add here a check on the status and entity existence?", "url": "https://github.com/jbosstm/narayana/pull/1716#discussion_r519785678", "createdAt": "2020-11-09T12:55:48Z", "author": {"login": "ochaloup"}, "path": "rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/resource/LRAParticipant.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.resource;\n+\n+import io.narayana.lra.client.NarayanaLRAClient;\n+import org.eclipse.microprofile.lra.annotation.Compensate;\n+import org.eclipse.microprofile.lra.annotation.LRAStatus;\n+import org.eclipse.microprofile.lra.annotation.ws.rs.LRA;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.HeaderParam;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.Response;\n+import java.net.URI;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.core.UriBuilder;\n+import javax.ws.rs.core.UriInfo;\n+\n+import static javax.ws.rs.core.Response.Status.NOT_FOUND;\n+import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_CONTEXT_HEADER;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+@ApplicationScoped\n+@Path(LRAParticipant.RESOURCE_PATH)\n+public class LRAParticipant {\n+    public static final String RESOURCE_PATH = \"participant2\";\n+\n+    public static final String CREATE_OR_CONTINUE_LRA = \"start-lra\";\n+    public static final String CREATE_OR_CONTINUE_LRA2 = \"start-end-lra\";\n+    public static final String END_EXISTING_LRA = \"end-lra\";\n+    public static final String CONTINUE_LRA = \"continue-lra\";\n+    public static final String START_NEW_LRA = \"start-lra2\";\n+\n+    @Context\n+    UriInfo uriInfo;\n+\n+    @Inject\n+    private NarayanaLRAClient lraClient;\n+\n+    @GET\n+    @Path(CREATE_OR_CONTINUE_LRA)\n+    @LRA(value = LRA.Type.REQUIRED, end = false)\n+    public Response beginLRAWithRemoteCalls(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lra1) {\n+        assertEquals(\"lra1 should be active\", LRAStatus.Active, lraClient.getStatus(lra1));\n+\n+        // start a new LRA\n+        URI lra2 = remoteInvocation(lra1, START_NEW_LRA);\n+        assertEquals(\"lra1 should still be active\", LRAStatus.Active, lraClient.getStatus(lra1));\n+        assertEquals(\"lra2 should be active\", LRAStatus.Active, lraClient.getStatus(lra2));\n+\n+        // lra1 should be the current context for remote invocations even though lra2 is active (see spec)\n+        assertEquals(\"lra1 should be the current\", lra1, lraClient.getCurrent());\n+\n+        URI lra3 = remoteInvocation(lra2, CONTINUE_LRA); // lra2 is still active, use it for the next invocation\n+        assertEquals(\"lra2 should still be active\", LRAStatus.Active, lraClient.getStatus(lra2));\n+        assertEquals(\"lra2 should equal lra3\", lra2, lra3); // lra3 was a continuation of lra2\n+\n+        lraClient.closeLRA(lra2); // use the (proprietary) client API to close the LRA started above (START_NEW_LRA)\n+//        remoteInvocation(lra2, END_EXISTING_LRA); // or do it via an end annotation attribute\n+\n+        try {\n+            // the status of lra2 should be NOT_FOUND of finishing\n+            assertNotEquals(\"lra2 should no longer be active\", LRAStatus.Active, lraClient.getStatus(lra2));\n+        } catch (WebApplicationException e) {\n+            assertEquals(\"lra2 should be finished\", NOT_FOUND.getStatusCode(), e.getResponse().getStatus());\n+        }\n+\n+        // the original LRA (lra1) will still be active (because of the end = false attribute)\n+        return Response.status(Response.Status.OK).entity(lra1.toASCIIString()).build();\n+    }\n+\n+    @GET\n+    @Path(CREATE_OR_CONTINUE_LRA2)\n+    @LRA(value = LRA.Type.REQUIRED, end = false)\n+    public Response beginLRAWithRemoteCalls2(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lra1) {\n+        assertEquals(\"lra1 should be active\", LRAStatus.Active, lraClient.getStatus(lra1));\n+\n+        URI lra2 = lraClient.startLRA(\"lra\");\n+        lraClient.closeLRA(lra2); // use the (proprietary) client API to close the LRA started above (START_NEW_LRA)\n+\n+        assertNotEquals(\"lra2 should no longer be active\", LRAStatus.Active, lraClient.getStatus(lra2));\n+\n+        // the original LRA (lra1) will still be active (because of the end = false attribute)\n+        return Response.status(Response.Status.OK).entity(lra1.toASCIIString()).build();\n+    }\n+\n+    @GET\n+    @Path(CONTINUE_LRA)\n+    @LRA(value = LRA.Type.MANDATORY, end=false)\n+    public Response continueLRA(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lraId) {\n+        return Response.status(Response.Status.OK).entity(lraId.toASCIIString()).build();\n+    }\n+\n+    @GET\n+    @Path(END_EXISTING_LRA)\n+    @LRA(value = LRA.Type.MANDATORY)\n+    public Response endLRA(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lraId) {\n+        return Response.status(Response.Status.OK).entity(lraId.toASCIIString()).build();\n+    }\n+\n+    @GET\n+    @Path(START_NEW_LRA)\n+    @LRA(value = LRA.Type.REQUIRES_NEW, end = false)\n+    public Response beginLRA2(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lraId) {\n+        return Response.status(Response.Status.OK).entity(lraId.toASCIIString()).build();\n+    }\n+\n+    @PUT\n+    @Path(\"/compensate\")\n+    @Compensate\n+    public Response compensate() {\n+        return Response.status(Response.Status.OK).build();\n+    }\n+\n+    private URI remoteInvocation(URI lra, String resourcePath) {\n+        Response response = null;\n+        Client client = ClientBuilder.newClient();\n+\n+        try {\n+            Invocation.Builder builder = client.target(UriBuilder.fromUri(uriInfo.getBaseUri()) // protocol and domain\n+                    .path(uriInfo.getPathSegments().get(0).getPath()) // RESOURCE_PATH\n+                    .path(resourcePath).build()) // the sub-path of the resource method\n+                    .request();\n+\n+            if (lra != null) {\n+                builder.header(LRA_HTTP_CONTEXT_HEADER, lra.toASCIIString());\n+            }\n+\n+            response = builder.get();\n+\n+            return URI.create(response.readEntity(String.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7a972819e24230de24c880e9d4bdd364ad03699"}, "originalPosition": 159}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3MjA3NDkz", "url": "https://github.com/jbosstm/narayana/pull/1716#pullrequestreview-527207493", "createdAt": "2020-11-10T13:38:01Z", "commit": {"oid": "c7a972819e24230de24c880e9d4bdd364ad03699"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMzozODowMVrOHwc4tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMzo0MzoyMFrOHwdHOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU2Njk2Nw==", "bodyText": "we should either link the issue or just generalize to see MP specification.", "url": "https://github.com/jbosstm/narayana/pull/1716#discussion_r520566967", "createdAt": "2020-11-10T13:38:01Z", "author": {"login": "xstefank"}, "path": "rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/client/LRAIT.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.client;\n+\n+import io.narayana.lra.arquillian.Deployer;\n+import io.narayana.lra.arquillian.resource.LRAParticipant;\n+import io.narayana.lra.client.NarayanaLRAClient;\n+import org.eclipse.microprofile.lra.annotation.LRAStatus;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.UriBuilder;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_CONTEXT_HEADER;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(Arquillian.class)\n+public class LRAIT {\n+\n+    @ArquillianResource\n+    private URL baseURL;\n+\n+    private Client client;\n+\n+    @Deployment\n+    public static WebArchive deploy() {\n+        return Deployer.deploy(LRAIT.class.getSimpleName());\n+    }\n+\n+    @Before\n+    public void before() {\n+        client = ClientBuilder.newClient();\n+    }\n+\n+    @After\n+    public void after() {\n+        if (client != null) {\n+            client.close();\n+        }\n+    }\n+\n+    /**\n+     * Invoke a resource method which in turn invokes other resources.\n+     * The various resource invocations are called in new or existing LRAs.\n+     * Various tests are performed to verify that the correct LRAs are used\n+     * and the LRAs have the expected status (see the resource method for\n+     * the detail).\n+     *\n+     * @throws URISyntaxException\n+     */\n+    @Test\n+    public void testChainOfInvocations() throws URISyntaxException {\n+        NarayanaLRAClient lraClient = new NarayanaLRAClient();\n+\n+        // Invoke a method which starts a transaction\n+        // (note that the method LRAParticipant.CREATE_OR_CONTINUE_LRA also invokes other resource methods)\n+        URI lra1 = invokeInTransaction(null, LRAParticipant.RESOURCE_PATH, LRAParticipant.CREATE_OR_CONTINUE_LRA, 200);\n+        assertEquals(\"lra1 should be active\", LRAStatus.Active, lraClient.getStatus(lra1));\n+\n+        // end the LRA\n+        invokeInTransaction(lra1, LRAParticipant.RESOURCE_PATH, LRAParticipant.END_EXISTING_LRA, 200);\n+\n+        assertNull(\"remote invocations should not update current (see MP-LRA issue behaviour)\", lraClient.getCurrent());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7a972819e24230de24c880e9d4bdd364ad03699"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU3MDY4MA==", "bodyText": "little strange to read that path contains 'end', not critical", "url": "https://github.com/jbosstm/narayana/pull/1716#discussion_r520570680", "createdAt": "2020-11-10T13:43:20Z", "author": {"login": "xstefank"}, "path": "rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/resource/LRAParticipant.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.resource;\n+\n+import io.narayana.lra.client.NarayanaLRAClient;\n+import org.eclipse.microprofile.lra.annotation.Compensate;\n+import org.eclipse.microprofile.lra.annotation.LRAStatus;\n+import org.eclipse.microprofile.lra.annotation.ws.rs.LRA;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.HeaderParam;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.Response;\n+import java.net.URI;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.core.UriBuilder;\n+import javax.ws.rs.core.UriInfo;\n+\n+import static javax.ws.rs.core.Response.Status.NOT_FOUND;\n+import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_CONTEXT_HEADER;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+@ApplicationScoped\n+@Path(LRAParticipant.RESOURCE_PATH)\n+public class LRAParticipant {\n+    public static final String RESOURCE_PATH = \"participant2\";\n+\n+    public static final String CREATE_OR_CONTINUE_LRA = \"start-lra\";\n+    public static final String CREATE_OR_CONTINUE_LRA2 = \"start-end-lra\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7a972819e24230de24c880e9d4bdd364ad03699"}, "originalPosition": 57}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c7a972819e24230de24c880e9d4bdd364ad03699", "author": {"user": {"login": "mmusgrov", "name": "Michael Musgrove"}}, "url": "https://github.com/jbosstm/narayana/commit/c7a972819e24230de24c880e9d4bdd364ad03699", "committedDate": "2020-11-08T12:50:54Z", "message": "JBTM-3223 Validate LRA behaviour when multiple LRA's are active on the same thread"}, "afterCommit": {"oid": "54f72bcd3e9a2ad5f89c21cdcc29069fd22ef324", "author": {"user": {"login": "mmusgrov", "name": "Michael Musgrove"}}, "url": "https://github.com/jbosstm/narayana/commit/54f72bcd3e9a2ad5f89c21cdcc29069fd22ef324", "committedDate": "2020-11-18T14:03:00Z", "message": "JBTM-3223 Validate LRA behaviour when multiple LRA's are active on the same thread"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "427fa1edb183d331bd3c95b9f72ef7f54b4c21d3", "author": {"user": {"login": "mmusgrov", "name": "Michael Musgrove"}}, "url": "https://github.com/jbosstm/narayana/commit/427fa1edb183d331bd3c95b9f72ef7f54b4c21d3", "committedDate": "2020-11-18T15:38:39Z", "message": "JBTM-3223 Validate LRA behaviour when multiple LRA's are active on the same thread"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "54f72bcd3e9a2ad5f89c21cdcc29069fd22ef324", "author": {"user": {"login": "mmusgrov", "name": "Michael Musgrove"}}, "url": "https://github.com/jbosstm/narayana/commit/54f72bcd3e9a2ad5f89c21cdcc29069fd22ef324", "committedDate": "2020-11-18T14:03:00Z", "message": "JBTM-3223 Validate LRA behaviour when multiple LRA's are active on the same thread"}, "afterCommit": {"oid": "427fa1edb183d331bd3c95b9f72ef7f54b4c21d3", "author": {"user": {"login": "mmusgrov", "name": "Michael Musgrove"}}, "url": "https://github.com/jbosstm/narayana/commit/427fa1edb183d331bd3c95b9f72ef7f54b4c21d3", "committedDate": "2020-11-18T15:38:39Z", "message": "JBTM-3223 Validate LRA behaviour when multiple LRA's are active on the same thread"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzNzQ1NjUx", "url": "https://github.com/jbosstm/narayana/pull/1716#pullrequestreview-533745651", "createdAt": "2020-11-18T18:15:51Z", "commit": {"oid": "427fa1edb183d331bd3c95b9f72ef7f54b4c21d3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4381, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}