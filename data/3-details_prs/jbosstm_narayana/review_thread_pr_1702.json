{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4MTA0MzM3", "number": 1702, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMDowMTo0MVrOEwsSqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMDoxNjo1MFrOEwso9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDkyNzc5OnYy", "diffSide": "LEFT", "path": "ArjunaJTA/jta/tests/classes/com/hp/mwtests/ts/jta/commitmarkable/integration/CMRIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMDowMTo0MVrOHmaMXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMDowNTozMVrOHmaUvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAzNzA4NA==", "bodyText": "Why aren't we printing the stack trace for suppressed exceptions?", "url": "https://github.com/jbosstm/narayana/pull/1702#discussion_r510037084", "createdAt": "2020-10-22T10:01:41Z", "author": {"login": "mmusgrov"}, "path": "ArjunaJTA/jta/tests/classes/com/hp/mwtests/ts/jta/commitmarkable/integration/CMRIntegrationTest.java", "diffHunk": "@@ -169,60 +167,40 @@ public void run() {\n \t\t\t\t\t\t\t\t\t.createStatement();\n \t\t\t\t\t\t\tcreateStatement\n \t\t\t\t\t\t\t\t\t.execute(\"INSERT INTO foo (bar) VALUES (1)\");\n-\t\t\t\t\t\t\t// System.out.printf(\"XXX txn close%n\");\n-\n-\t\t\t\t\t\t\tif (faultType == 1)\n-\t\t\t\t\t\t\t\tRuntime.getRuntime().halt(0);\n \n                             userTransaction.commit();\n \t\t\t\t\t\t\tconnection.close(); // This wouldn't work for a\n \t\t\t\t\t\t\t\t\t\t\t\t// none-JCA code as commit has\n \t\t\t\t\t\t\t\t\t\t\t\t// closed the connection - it\n \t\t\t\t\t\t\t\t\t\t\t\t// helps us though as JCA seems\n \t\t\t\t\t\t\t\t\t\t\t\t// to rely on finalize\n-\n-\t\t\t\t\t\t\t// System.out\n-\t\t\t\t\t\t\t// .printf(\"committed txn iteration %d%n\", i);\n \t\t\t\t\t\t\tsuccess++;\n \t\t\t\t\t\t} catch (SQLException e) {\n-\t\t\t\t\t\t\tSystem.err.println(\"boom\");\n-\t\t\t\t\t\t\te.printStackTrace();\n-\t\t\t\t\t\t\tif (e.getCause() != null) {\n-\t\t\t\t\t\t\t\te.getCause().printStackTrace();\n-\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tlog.errorf(e, \"Error while invoking insertion to a database table with CMR resource\");\n \t\t\t\t\t\t\tSQLException nextException = e.getNextException();\n \t\t\t\t\t\t\twhile (nextException != null) {\n-\t\t\t\t\t\t\t\tnextException.printStackTrace();\n-\t\t\t\t\t\t\t\tnextException = nextException\n-\t\t\t\t\t\t\t\t\t\t.getNextException();\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tThrowable[] suppressed = e.getSuppressed();\n-\t\t\t\t\t\t\tfor (int j = 0; j < suppressed.length; j++) {\n-\t\t\t\t\t\t\t\tsuppressed[j].printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a2c7efba988708c4082dca6d67cf523c8b49c89"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAzOTIyOQ==", "bodyText": "That's done by logger automatically. It prints nicely cause exceptions and the suppressed exceptions without this manual handling. The logger is placed clearly with the level of severity and indentation under the standalone.log (easier to read, easier to understand the cause chain with the suppressed exception printed in the hierarchy).\nThat's all the reasons for these changes.", "url": "https://github.com/jbosstm/narayana/pull/1702#discussion_r510039229", "createdAt": "2020-10-22T10:05:31Z", "author": {"login": "ochaloup"}, "path": "ArjunaJTA/jta/tests/classes/com/hp/mwtests/ts/jta/commitmarkable/integration/CMRIntegrationTest.java", "diffHunk": "@@ -169,60 +167,40 @@ public void run() {\n \t\t\t\t\t\t\t\t\t.createStatement();\n \t\t\t\t\t\t\tcreateStatement\n \t\t\t\t\t\t\t\t\t.execute(\"INSERT INTO foo (bar) VALUES (1)\");\n-\t\t\t\t\t\t\t// System.out.printf(\"XXX txn close%n\");\n-\n-\t\t\t\t\t\t\tif (faultType == 1)\n-\t\t\t\t\t\t\t\tRuntime.getRuntime().halt(0);\n \n                             userTransaction.commit();\n \t\t\t\t\t\t\tconnection.close(); // This wouldn't work for a\n \t\t\t\t\t\t\t\t\t\t\t\t// none-JCA code as commit has\n \t\t\t\t\t\t\t\t\t\t\t\t// closed the connection - it\n \t\t\t\t\t\t\t\t\t\t\t\t// helps us though as JCA seems\n \t\t\t\t\t\t\t\t\t\t\t\t// to rely on finalize\n-\n-\t\t\t\t\t\t\t// System.out\n-\t\t\t\t\t\t\t// .printf(\"committed txn iteration %d%n\", i);\n \t\t\t\t\t\t\tsuccess++;\n \t\t\t\t\t\t} catch (SQLException e) {\n-\t\t\t\t\t\t\tSystem.err.println(\"boom\");\n-\t\t\t\t\t\t\te.printStackTrace();\n-\t\t\t\t\t\t\tif (e.getCause() != null) {\n-\t\t\t\t\t\t\t\te.getCause().printStackTrace();\n-\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tlog.errorf(e, \"Error while invoking insertion to a database table with CMR resource\");\n \t\t\t\t\t\t\tSQLException nextException = e.getNextException();\n \t\t\t\t\t\t\twhile (nextException != null) {\n-\t\t\t\t\t\t\t\tnextException.printStackTrace();\n-\t\t\t\t\t\t\t\tnextException = nextException\n-\t\t\t\t\t\t\t\t\t\t.getNextException();\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tThrowable[] suppressed = e.getSuppressed();\n-\t\t\t\t\t\t\tfor (int j = 0; j < suppressed.length; j++) {\n-\t\t\t\t\t\t\t\tsuppressed[j].printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAzNzA4NA=="}, "originalCommit": {"oid": "4a2c7efba988708c4082dca6d67cf523c8b49c89"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDk4MDkxOnYy", "diffSide": "RIGHT", "path": "ArjunaJTA/jta/tests/classes/com/hp/mwtests/ts/jta/commitmarkable/integration/CMRIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMDoxNTo0N1rOHmasrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMjoyNDoyM1rOHmfFqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA0NTM1OQ==", "bodyText": "I would prefer that we explicitly fail here (also there are other places where we throw instead of fail). If a test throws an exception I interpret that as meaning that the test needs fixing unless the test is marked as such, eg @test (expected = IllegalStateException.class).", "url": "https://github.com/jbosstm/narayana/pull/1702#discussion_r510045359", "createdAt": "2020-10-22T10:15:47Z", "author": {"login": "mmusgrov"}, "path": "ArjunaJTA/jta/tests/classes/com/hp/mwtests/ts/jta/commitmarkable/integration/CMRIntegrationTest.java", "diffHunk": "@@ -169,60 +167,40 @@ public void run() {\n \t\t\t\t\t\t\t\t\t.createStatement();\n \t\t\t\t\t\t\tcreateStatement\n \t\t\t\t\t\t\t\t\t.execute(\"INSERT INTO foo (bar) VALUES (1)\");\n-\t\t\t\t\t\t\t// System.out.printf(\"XXX txn close%n\");\n-\n-\t\t\t\t\t\t\tif (faultType == 1)\n-\t\t\t\t\t\t\t\tRuntime.getRuntime().halt(0);\n \n                             userTransaction.commit();\n \t\t\t\t\t\t\tconnection.close(); // This wouldn't work for a\n \t\t\t\t\t\t\t\t\t\t\t\t// none-JCA code as commit has\n \t\t\t\t\t\t\t\t\t\t\t\t// closed the connection - it\n \t\t\t\t\t\t\t\t\t\t\t\t// helps us though as JCA seems\n \t\t\t\t\t\t\t\t\t\t\t\t// to rely on finalize\n-\n-\t\t\t\t\t\t\t// System.out\n-\t\t\t\t\t\t\t// .printf(\"committed txn iteration %d%n\", i);\n \t\t\t\t\t\t\tsuccess++;\n \t\t\t\t\t\t} catch (SQLException e) {\n-\t\t\t\t\t\t\tSystem.err.println(\"boom\");\n-\t\t\t\t\t\t\te.printStackTrace();\n-\t\t\t\t\t\t\tif (e.getCause() != null) {\n-\t\t\t\t\t\t\t\te.getCause().printStackTrace();\n-\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tlog.errorf(e, \"Error while invoking insertion to a database table with CMR resource\");\n \t\t\t\t\t\t\tSQLException nextException = e.getNextException();\n \t\t\t\t\t\t\twhile (nextException != null) {\n-\t\t\t\t\t\t\t\tnextException.printStackTrace();\n-\t\t\t\t\t\t\t\tnextException = nextException\n-\t\t\t\t\t\t\t\t\t\t.getNextException();\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tThrowable[] suppressed = e.getSuppressed();\n-\t\t\t\t\t\t\tfor (int j = 0; j < suppressed.length; j++) {\n-\t\t\t\t\t\t\t\tsuppressed[j].printStackTrace();\n+\t\t\t\t\t\t\t\tlog.errorf(\"Next SQLException chained\", nextException);\n+\t\t\t\t\t\t\t\tnextException = nextException.getNextException();\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t\ttry {\n \t\t\t\t\t\t\t\tuserTransaction.rollback();\n \t\t\t\t\t\t\t} catch (IllegalStateException | SecurityException\n \t\t\t\t\t\t\t\t\t| SystemException e1) {\n-\t\t\t\t\t\t\t\te1.printStackTrace();\n-\t\t\t\t\t\t\t\tfail(\"Problem with transaction\");\n+\t\t\t\t\t\t\t\tlog.error(\"Problem with transaction\", e1);\n+\t\t\t\t\t\t\t\tthrow new IllegalStateException(\"Problem with transaction\", e1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a2c7efba988708c4082dca6d67cf523c8b49c89"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDExNzI5MA==", "bodyText": "Sure. Fixed.", "url": "https://github.com/jbosstm/narayana/pull/1702#discussion_r510117290", "createdAt": "2020-10-22T12:24:23Z", "author": {"login": "ochaloup"}, "path": "ArjunaJTA/jta/tests/classes/com/hp/mwtests/ts/jta/commitmarkable/integration/CMRIntegrationTest.java", "diffHunk": "@@ -169,60 +167,40 @@ public void run() {\n \t\t\t\t\t\t\t\t\t.createStatement();\n \t\t\t\t\t\t\tcreateStatement\n \t\t\t\t\t\t\t\t\t.execute(\"INSERT INTO foo (bar) VALUES (1)\");\n-\t\t\t\t\t\t\t// System.out.printf(\"XXX txn close%n\");\n-\n-\t\t\t\t\t\t\tif (faultType == 1)\n-\t\t\t\t\t\t\t\tRuntime.getRuntime().halt(0);\n \n                             userTransaction.commit();\n \t\t\t\t\t\t\tconnection.close(); // This wouldn't work for a\n \t\t\t\t\t\t\t\t\t\t\t\t// none-JCA code as commit has\n \t\t\t\t\t\t\t\t\t\t\t\t// closed the connection - it\n \t\t\t\t\t\t\t\t\t\t\t\t// helps us though as JCA seems\n \t\t\t\t\t\t\t\t\t\t\t\t// to rely on finalize\n-\n-\t\t\t\t\t\t\t// System.out\n-\t\t\t\t\t\t\t// .printf(\"committed txn iteration %d%n\", i);\n \t\t\t\t\t\t\tsuccess++;\n \t\t\t\t\t\t} catch (SQLException e) {\n-\t\t\t\t\t\t\tSystem.err.println(\"boom\");\n-\t\t\t\t\t\t\te.printStackTrace();\n-\t\t\t\t\t\t\tif (e.getCause() != null) {\n-\t\t\t\t\t\t\t\te.getCause().printStackTrace();\n-\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tlog.errorf(e, \"Error while invoking insertion to a database table with CMR resource\");\n \t\t\t\t\t\t\tSQLException nextException = e.getNextException();\n \t\t\t\t\t\t\twhile (nextException != null) {\n-\t\t\t\t\t\t\t\tnextException.printStackTrace();\n-\t\t\t\t\t\t\t\tnextException = nextException\n-\t\t\t\t\t\t\t\t\t\t.getNextException();\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tThrowable[] suppressed = e.getSuppressed();\n-\t\t\t\t\t\t\tfor (int j = 0; j < suppressed.length; j++) {\n-\t\t\t\t\t\t\t\tsuppressed[j].printStackTrace();\n+\t\t\t\t\t\t\t\tlog.errorf(\"Next SQLException chained\", nextException);\n+\t\t\t\t\t\t\t\tnextException = nextException.getNextException();\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t\ttry {\n \t\t\t\t\t\t\t\tuserTransaction.rollback();\n \t\t\t\t\t\t\t} catch (IllegalStateException | SecurityException\n \t\t\t\t\t\t\t\t\t| SystemException e1) {\n-\t\t\t\t\t\t\t\te1.printStackTrace();\n-\t\t\t\t\t\t\t\tfail(\"Problem with transaction\");\n+\t\t\t\t\t\t\t\tlog.error(\"Problem with transaction\", e1);\n+\t\t\t\t\t\t\t\tthrow new IllegalStateException(\"Problem with transaction\", e1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA0NTM1OQ=="}, "originalCommit": {"oid": "4a2c7efba988708c4082dca6d67cf523c8b49c89"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDk4NDg1OnYy", "diffSide": "RIGHT", "path": "ArjunaJTA/jta/tests/classes/com/hp/mwtests/ts/jta/commitmarkable/integration/CMRIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMDoxNjo1MFrOHmavFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMDoxNjo1MFrOHmavFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA0NTk3Mg==", "bodyText": "This is much more friendly than boom :-)", "url": "https://github.com/jbosstm/narayana/pull/1702#discussion_r510045972", "createdAt": "2020-10-22T10:16:50Z", "author": {"login": "mmusgrov"}, "path": "ArjunaJTA/jta/tests/classes/com/hp/mwtests/ts/jta/commitmarkable/integration/CMRIntegrationTest.java", "diffHunk": "@@ -169,60 +167,40 @@ public void run() {\n \t\t\t\t\t\t\t\t\t.createStatement();\n \t\t\t\t\t\t\tcreateStatement\n \t\t\t\t\t\t\t\t\t.execute(\"INSERT INTO foo (bar) VALUES (1)\");\n-\t\t\t\t\t\t\t// System.out.printf(\"XXX txn close%n\");\n-\n-\t\t\t\t\t\t\tif (faultType == 1)\n-\t\t\t\t\t\t\t\tRuntime.getRuntime().halt(0);\n \n                             userTransaction.commit();\n \t\t\t\t\t\t\tconnection.close(); // This wouldn't work for a\n \t\t\t\t\t\t\t\t\t\t\t\t// none-JCA code as commit has\n \t\t\t\t\t\t\t\t\t\t\t\t// closed the connection - it\n \t\t\t\t\t\t\t\t\t\t\t\t// helps us though as JCA seems\n \t\t\t\t\t\t\t\t\t\t\t\t// to rely on finalize\n-\n-\t\t\t\t\t\t\t// System.out\n-\t\t\t\t\t\t\t// .printf(\"committed txn iteration %d%n\", i);\n \t\t\t\t\t\t\tsuccess++;\n \t\t\t\t\t\t} catch (SQLException e) {\n-\t\t\t\t\t\t\tSystem.err.println(\"boom\");\n-\t\t\t\t\t\t\te.printStackTrace();\n-\t\t\t\t\t\t\tif (e.getCause() != null) {\n-\t\t\t\t\t\t\t\te.getCause().printStackTrace();\n-\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tlog.errorf(e, \"Error while invoking insertion to a database table with CMR resource\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a2c7efba988708c4082dca6d67cf523c8b49c89"}, "originalPosition": 97}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1229, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}