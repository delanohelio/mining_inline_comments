{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4MDcyNjA3", "number": 1025, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMDoxNTowMVrOEwsmGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMjoxMTo1NlrOEwvGWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDk3NzU0OnYy", "diffSide": "RIGHT", "path": "rest/resource-server/src/main/java/org/eclipse/sw360/rest/resourceserver/project/ProjectController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMDoxNTowMVrOHmaqow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwODowMToyNVrOHnC_YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA0NDgzNQ==", "bodyText": "Remove unused inport", "url": "https://github.com/eclipse/sw360/pull/1025#discussion_r510044835", "createdAt": "2020-10-22T10:15:01Z", "author": {"login": "JaideepPalit"}, "path": "rest/resource-server/src/main/java/org/eclipse/sw360/rest/resourceserver/project/ProjectController.java", "diffHunk": "@@ -14,6 +14,7 @@\n import lombok.NonNull;\n import lombok.RequiredArgsConstructor;\n import org.apache.commons.lang.StringUtils;\n+import org.apache.http.HttpEntity;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc2c1a70e0d6a1800f204f5b3ac7adb0805d54fd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDcwNTUwNA==", "bodyText": "Removed it", "url": "https://github.com/eclipse/sw360/pull/1025#discussion_r510705504", "createdAt": "2020-10-23T08:01:25Z", "author": {"login": "smrutis1"}, "path": "rest/resource-server/src/main/java/org/eclipse/sw360/rest/resourceserver/project/ProjectController.java", "diffHunk": "@@ -14,6 +14,7 @@\n import lombok.NonNull;\n import lombok.RequiredArgsConstructor;\n import org.apache.commons.lang.StringUtils;\n+import org.apache.http.HttpEntity;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA0NDgzNQ=="}, "originalCommit": {"oid": "bc2c1a70e0d6a1800f204f5b3ac7adb0805d54fd"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTM4Nzc4OnYy", "diffSide": "RIGHT", "path": "rest/resource-server/src/main/java/org/eclipse/sw360/rest/resourceserver/vulnerability/Sw360VulnerabilityService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMjoxMTo1NlrOHmenvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwODowMjowN1rOHnDA4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEwOTYzMA==", "bodyText": "Maybe CommonUtils.isNullOrEmptyCollection() can be used", "url": "https://github.com/eclipse/sw360/pull/1025#discussion_r510109630", "createdAt": "2020-10-22T12:11:56Z", "author": {"login": "JaideepPalit"}, "path": "rest/resource-server/src/main/java/org/eclipse/sw360/rest/resourceserver/vulnerability/Sw360VulnerabilityService.java", "diffHunk": "@@ -88,4 +95,52 @@ public Vulnerability getVulnerabilityWithReleaseRelationsByExternalId(String ext\n         TProtocol protocol = new TCompactProtocol(thriftClient);\n         return new VulnerabilityService.Client(protocol);\n     }\n+\n+    public RequestStatus updateProjectVulnerabilityRating(ProjectVulnerabilityRating projVulRatings, User sw360User) {\n+        try {\n+            VulnerabilityService.Iface sw360VulnerabilityClient = getThriftVulnerabilityClient();\n+            return sw360VulnerabilityClient.updateProjectVulnerabilityRating(projVulRatings, sw360User);\n+        } catch (TException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public List<ProjectVulnerabilityRating> getProjectVulnerabilityRatingByProjectId(String projectId, User sw360User) {\n+        try {\n+            VulnerabilityService.Iface sw360VulnerabilityClient = getThriftVulnerabilityClient();\n+            return sw360VulnerabilityClient.getProjectVulnerabilityRatingByProjectId(projectId, sw360User);\n+        } catch (TException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public Map<String, Map<String, VulnerabilityRatingForProject>> fillVulnerabilityMetadata(VulnerabilityDTO vulnDto,\n+            Optional<ProjectVulnerabilityRating> projectVulnerabilityRating) {\n+        Map<String, Map<String, List<VulnerabilityCheckStatus>>> vulnerabilityIdToStatusHistory = projectVulnerabilityRating\n+                .map(ProjectVulnerabilityRating::getVulnerabilityIdToReleaseIdToStatus).orElseGet(HashMap::new);\n+\n+        Map<String, Map<String, VulnerabilityRatingForProject>> vulnerabilityRatings = new HashMap<>();\n+\n+        String vulnerabilityId = vulnDto.getExternalId();\n+        String releaseId = vulnDto.getIntReleaseId();\n+        if (!vulnerabilityRatings.containsKey(vulnerabilityId)) {\n+            vulnerabilityRatings.put(vulnerabilityId, new HashMap<>());\n+        }\n+        List<VulnerabilityCheckStatus> vulnerabilityCheckStatusHistory = null;\n+        if (vulnerabilityIdToStatusHistory.containsKey(vulnerabilityId)\n+                && vulnerabilityIdToStatusHistory.get(vulnerabilityId).containsKey(releaseId)) {\n+            vulnerabilityCheckStatusHistory = vulnerabilityIdToStatusHistory.get(vulnerabilityId).get(releaseId);\n+        }\n+        if (vulnerabilityCheckStatusHistory != null && vulnerabilityCheckStatusHistory.size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc2c1a70e0d6a1800f204f5b3ac7adb0805d54fd"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDcwNTg5MQ==", "bodyText": "Used isNotEmpty(_) one", "url": "https://github.com/eclipse/sw360/pull/1025#discussion_r510705891", "createdAt": "2020-10-23T08:02:07Z", "author": {"login": "smrutis1"}, "path": "rest/resource-server/src/main/java/org/eclipse/sw360/rest/resourceserver/vulnerability/Sw360VulnerabilityService.java", "diffHunk": "@@ -88,4 +95,52 @@ public Vulnerability getVulnerabilityWithReleaseRelationsByExternalId(String ext\n         TProtocol protocol = new TCompactProtocol(thriftClient);\n         return new VulnerabilityService.Client(protocol);\n     }\n+\n+    public RequestStatus updateProjectVulnerabilityRating(ProjectVulnerabilityRating projVulRatings, User sw360User) {\n+        try {\n+            VulnerabilityService.Iface sw360VulnerabilityClient = getThriftVulnerabilityClient();\n+            return sw360VulnerabilityClient.updateProjectVulnerabilityRating(projVulRatings, sw360User);\n+        } catch (TException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public List<ProjectVulnerabilityRating> getProjectVulnerabilityRatingByProjectId(String projectId, User sw360User) {\n+        try {\n+            VulnerabilityService.Iface sw360VulnerabilityClient = getThriftVulnerabilityClient();\n+            return sw360VulnerabilityClient.getProjectVulnerabilityRatingByProjectId(projectId, sw360User);\n+        } catch (TException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public Map<String, Map<String, VulnerabilityRatingForProject>> fillVulnerabilityMetadata(VulnerabilityDTO vulnDto,\n+            Optional<ProjectVulnerabilityRating> projectVulnerabilityRating) {\n+        Map<String, Map<String, List<VulnerabilityCheckStatus>>> vulnerabilityIdToStatusHistory = projectVulnerabilityRating\n+                .map(ProjectVulnerabilityRating::getVulnerabilityIdToReleaseIdToStatus).orElseGet(HashMap::new);\n+\n+        Map<String, Map<String, VulnerabilityRatingForProject>> vulnerabilityRatings = new HashMap<>();\n+\n+        String vulnerabilityId = vulnDto.getExternalId();\n+        String releaseId = vulnDto.getIntReleaseId();\n+        if (!vulnerabilityRatings.containsKey(vulnerabilityId)) {\n+            vulnerabilityRatings.put(vulnerabilityId, new HashMap<>());\n+        }\n+        List<VulnerabilityCheckStatus> vulnerabilityCheckStatusHistory = null;\n+        if (vulnerabilityIdToStatusHistory.containsKey(vulnerabilityId)\n+                && vulnerabilityIdToStatusHistory.get(vulnerabilityId).containsKey(releaseId)) {\n+            vulnerabilityCheckStatusHistory = vulnerabilityIdToStatusHistory.get(vulnerabilityId).get(releaseId);\n+        }\n+        if (vulnerabilityCheckStatusHistory != null && vulnerabilityCheckStatusHistory.size() > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEwOTYzMA=="}, "originalCommit": {"oid": "bc2c1a70e0d6a1800f204f5b3ac7adb0805d54fd"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1193, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}