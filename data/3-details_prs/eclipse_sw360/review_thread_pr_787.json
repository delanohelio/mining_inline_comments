{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5NDM2MjYx", "number": 787, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMjowNDoxM1rODkPhUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNjoxODoyMVrODkhugQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzI5NjE4OnYy", "diffSide": "RIGHT", "path": "rest/resource-server/src/main/java/org/eclipse/sw360/rest/resourceserver/attachment/AttachmentController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMjowNDoxM1rOFwdK1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwODo0NDoyNVrOFxkTJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM1Mzg3Ng==", "bodyText": "it would look good to return NO_CONTENT as status code and empty response, If no attachment found.\nAlso remove commented line.", "url": "https://github.com/eclipse/sw360/pull/787#discussion_r386353876", "createdAt": "2020-03-02T12:04:13Z", "author": {"login": "JaideepPalit"}, "path": "rest/resource-server/src/main/java/org/eclipse/sw360/rest/resourceserver/attachment/AttachmentController.java", "diffHunk": "@@ -76,14 +76,28 @@\n         return new ResponseEntity<>(attachmentResource, HttpStatus.OK);\n     }\n \n-    @RequestMapping(value = ATTACHMENTS_URL, params = \"sha1\", method = RequestMethod.GET)\n-    public ResponseEntity<Resource<Attachment>> getAttachmentForSha1(\n-            @RequestParam String sha1) throws TException {\n-\n+    @GetMapping(value = ATTACHMENTS_URL)\n+    public ResponseEntity<Resources<Resource<Attachment>>> getAttachments(@RequestParam String sha1) throws TException {\n         User sw360User = restControllerHelper.getSw360UserFromAuthentication();\n-        AttachmentInfo attachmentInfo = attachmentService.getAttachmentBySha1(sha1);\n-        HalResource<Attachment> attachmentResource = createHalAttachment(attachmentInfo, sw360User);\n-        return new ResponseEntity<>(attachmentResource, HttpStatus.OK);\n+        List<AttachmentInfo> attachmentInfos = attachmentService.getAttachmentsBySha1(sha1);\n+\n+        List<Resource<Attachment>> attachmentResources = new ArrayList<>();\n+        for (AttachmentInfo sw360Attachment : attachmentInfos) {\n+            HalResource<Attachment> attachmentResource = createHalAttachment(sw360Attachment, sw360User);\n+            attachmentResources.add(attachmentResource);\n+        }\n+        Resources<Resource<Attachment>> resources;\n+        if (!attachmentResources.isEmpty()) {\n+            resources = new Resources<>(attachmentResources);\n+            return new ResponseEntity<>(resources, HttpStatus.OK);\n+        } else {\n+            // Make sure we return an empty array, like \"_embedded\" : {\"sw360:attachments\" :\n+            // [ ] }\n+            EmbeddedWrappers wrappers = new EmbeddedWrappers(false);\n+            EmbeddedWrapper wrapper = wrappers.emptyCollectionOf(Attachment.class);\n+            Resources<Object> emptyResources = new Resources<>(asList(wrapper));\n+            return new ResponseEntity(emptyResources, HttpStatus.OK);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c913169482dadc483b2a6d60a06cd1b360a3cbd"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUxOTI3MA==", "bodyText": "Done", "url": "https://github.com/eclipse/sw360/pull/787#discussion_r387519270", "createdAt": "2020-03-04T08:44:25Z", "author": {"login": "smrutis1"}, "path": "rest/resource-server/src/main/java/org/eclipse/sw360/rest/resourceserver/attachment/AttachmentController.java", "diffHunk": "@@ -76,14 +76,28 @@\n         return new ResponseEntity<>(attachmentResource, HttpStatus.OK);\n     }\n \n-    @RequestMapping(value = ATTACHMENTS_URL, params = \"sha1\", method = RequestMethod.GET)\n-    public ResponseEntity<Resource<Attachment>> getAttachmentForSha1(\n-            @RequestParam String sha1) throws TException {\n-\n+    @GetMapping(value = ATTACHMENTS_URL)\n+    public ResponseEntity<Resources<Resource<Attachment>>> getAttachments(@RequestParam String sha1) throws TException {\n         User sw360User = restControllerHelper.getSw360UserFromAuthentication();\n-        AttachmentInfo attachmentInfo = attachmentService.getAttachmentBySha1(sha1);\n-        HalResource<Attachment> attachmentResource = createHalAttachment(attachmentInfo, sw360User);\n-        return new ResponseEntity<>(attachmentResource, HttpStatus.OK);\n+        List<AttachmentInfo> attachmentInfos = attachmentService.getAttachmentsBySha1(sha1);\n+\n+        List<Resource<Attachment>> attachmentResources = new ArrayList<>();\n+        for (AttachmentInfo sw360Attachment : attachmentInfos) {\n+            HalResource<Attachment> attachmentResource = createHalAttachment(sw360Attachment, sw360User);\n+            attachmentResources.add(attachmentResource);\n+        }\n+        Resources<Resource<Attachment>> resources;\n+        if (!attachmentResources.isEmpty()) {\n+            resources = new Resources<>(attachmentResources);\n+            return new ResponseEntity<>(resources, HttpStatus.OK);\n+        } else {\n+            // Make sure we return an empty array, like \"_embedded\" : {\"sw360:attachments\" :\n+            // [ ] }\n+            EmbeddedWrappers wrappers = new EmbeddedWrappers(false);\n+            EmbeddedWrapper wrapper = wrappers.emptyCollectionOf(Attachment.class);\n+            Resources<Object> emptyResources = new Resources<>(asList(wrapper));\n+            return new ResponseEntity(emptyResources, HttpStatus.OK);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM1Mzg3Ng=="}, "originalCommit": {"oid": "4c913169482dadc483b2a6d60a06cd1b360a3cbd"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzMzMjU2OnYy", "diffSide": "RIGHT", "path": "rest/resource-server/src/main/java/org/eclipse/sw360/rest/resourceserver/attachment/Sw360AttachmentService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMjoxODoxNlrOFwdg1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwODo0NDozNFrOFxkTbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM1OTUwOA==", "bodyText": "It would be good to add exception message, so that it gets reflected in the response body.", "url": "https://github.com/eclipse/sw360/pull/787#discussion_r386359508", "createdAt": "2020-03-02T12:18:16Z", "author": {"login": "JaideepPalit"}, "path": "rest/resource-server/src/main/java/org/eclipse/sw360/rest/resourceserver/attachment/Sw360AttachmentService.java", "diffHunk": "@@ -75,27 +75,33 @@\n     public AttachmentInfo getAttachmentById(String id) throws TException {\n         AttachmentService.Iface attachmentClient = getThriftAttachmentClient();\n         List<Attachment> attachments = attachmentClient.getAttachmentsByIds(Collections.singleton(id));\n-        return createAttachmentInfo(attachmentClient, attachments);\n+        if (attachments.isEmpty()) {\n+            throw new ResourceNotFoundException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c913169482dadc483b2a6d60a06cd1b360a3cbd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUxOTM0Mw==", "bodyText": "Added the proper message.", "url": "https://github.com/eclipse/sw360/pull/787#discussion_r387519343", "createdAt": "2020-03-04T08:44:34Z", "author": {"login": "smrutis1"}, "path": "rest/resource-server/src/main/java/org/eclipse/sw360/rest/resourceserver/attachment/Sw360AttachmentService.java", "diffHunk": "@@ -75,27 +75,33 @@\n     public AttachmentInfo getAttachmentById(String id) throws TException {\n         AttachmentService.Iface attachmentClient = getThriftAttachmentClient();\n         List<Attachment> attachments = attachmentClient.getAttachmentsByIds(Collections.singleton(id));\n-        return createAttachmentInfo(attachmentClient, attachments);\n+        if (attachments.isEmpty()) {\n+            throw new ResourceNotFoundException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM1OTUwOA=="}, "originalCommit": {"oid": "4c913169482dadc483b2a6d60a06cd1b360a3cbd"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzQzMDQyOnYy", "diffSide": "RIGHT", "path": "rest/resource-server/src/test/java/org/eclipse/sw360/rest/resourceserver/integration/AttachmentTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMjo1Mjo0NFrOFweawg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMjo1Mjo0NFrOFweawg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM3NDMzOA==", "bodyText": "It would be good , if this code and code in ReleaseTest.java can be reused.", "url": "https://github.com/eclipse/sw360/pull/787#discussion_r386374338", "createdAt": "2020-03-02T12:52:44Z", "author": {"login": "JaideepPalit"}, "path": "rest/resource-server/src/test/java/org/eclipse/sw360/rest/resourceserver/integration/AttachmentTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright Siemens AG, 2017,2019. Part of the SW360 Portal Project.\n+ *\n+  * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.eclipse.sw360.rest.resourceserver.integration;\n+\n+import org.apache.thrift.TException;\n+import org.eclipse.sw360.datahandler.thrift.Source;\n+import org.eclipse.sw360.datahandler.thrift.attachments.Attachment;\n+import org.eclipse.sw360.datahandler.thrift.attachments.AttachmentType;\n+import org.eclipse.sw360.datahandler.thrift.components.Release;\n+import org.eclipse.sw360.datahandler.thrift.users.User;\n+import org.eclipse.sw360.rest.resourceserver.TestHelper;\n+import org.eclipse.sw360.rest.resourceserver.attachment.AttachmentInfo;\n+import org.eclipse.sw360.rest.resourceserver.attachment.Sw360AttachmentService;\n+import org.eclipse.sw360.rest.resourceserver.release.Sw360ReleaseService;\n+import org.eclipse.sw360.rest.resourceserver.user.Sw360UserService;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.boot.test.web.client.TestRestTemplate;\n+import org.springframework.http.*;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.BDDMockito.given;\n+import static org.mockito.Matchers.anyObject;\n+import static org.mockito.Matchers.eq;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+public class AttachmentTest extends TestIntegrationBase {\n+\n+    @Value(\"${local.server.port}\")\n+    private int port;\n+\n+    @MockBean\n+    private Sw360UserService userServiceMock;\n+\n+    @MockBean\n+    private Sw360AttachmentService attachmentServiceMock;\n+\n+    @MockBean\n+    private Sw360ReleaseService releaseServiceMock;\n+\n+    private final String shaMultiple = \"12345\";\n+    private final String shaInvalid = \"56789\";\n+\n+    @Before\n+    public void before() throws TException {\n+        List<Attachment> attachments = new ArrayList<>();\n+        Attachment attachment1 = new Attachment();\n+        attachment1.setAttachmentContentId(\"a1\");\n+        attachment1.setSha1(shaMultiple);\n+        attachment1.setFilename(\"Attachment 1\");\n+        attachment1.setAttachmentType(AttachmentType.BINARY);\n+        attachments.add(attachment1);\n+\n+        Source source1 = new Source(Source._Fields.RELEASE_ID, \"release1\");\n+\n+        Attachment attachment2 = new Attachment();\n+        attachment2.setAttachmentContentId(\"a2\");\n+        attachment2.setSha1(shaMultiple);\n+        attachment2.setFilename(\"Attachment 2\");\n+        attachment2.setAttachmentType(AttachmentType.SOURCE);\n+        attachments.add(attachment2);\n+\n+        Source source2 = new Source(Source._Fields.RELEASE_ID, \"release2\");\n+\n+        List<AttachmentInfo> attachmentInfos = new ArrayList<>();\n+        AttachmentInfo attachmentInfo1 = new AttachmentInfo(attachment1);\n+        attachmentInfo1.setOwner(source1);\n+        attachmentInfos.add(attachmentInfo1);\n+\n+        AttachmentInfo attachmentInfo2 = new AttachmentInfo(attachment2);\n+        attachmentInfo2.setOwner(source2);\n+        attachmentInfos.add(attachmentInfo2);\n+\n+        given(this.attachmentServiceMock.getAttachmentsBySha1(eq(shaMultiple))).willReturn(attachmentInfos);\n+        given(this.attachmentServiceMock.getAttachmentsBySha1(eq(shaInvalid))).willReturn(new ArrayList<>());\n+\n+        User user = new User();\n+        user.setId(\"123456789\");\n+        user.setEmail(\"admin@sw360.org\");\n+        user.setFullname(\"John Doe\");\n+\n+        given(this.userServiceMock.getUserByEmailOrExternalId(\"admin@sw360.org\")).willReturn(user);\n+\n+        Release release1 = new Release();\n+        release1.setName(\"Release 1\");\n+        release1.setId(\"release1\");\n+        release1.setComponentId(\"component123\");\n+        release1.setVersion(\"1.0.4\");\n+        release1.setCpeid(\"cpe:id-1231\");\n+\n+        given(this.releaseServiceMock.getReleaseForUserById(eq(\"release1\"), eq(user))).willReturn(release1);\n+\n+        Release release2 = new Release();\n+        release2.setName(\"Release 2\");\n+        release2.setId(\"release2\");\n+        release2.setComponentId(\"component456\");\n+        release2.setVersion(\"2.0.0\");\n+        release2.setCpeid(\"cpe:id-4567\");\n+\n+        given(this.releaseServiceMock.getReleaseForUserById(eq(\"release2\"), eq(user))).willReturn(release2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c913169482dadc483b2a6d60a06cd1b360a3cbd"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjIzMjYzOnYy", "diffSide": "RIGHT", "path": "rest/resource-server/src/test/java/org/eclipse/sw360/rest/resourceserver/restdocs/ReleaseSpecTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNTo0OTo0MFrOFw5E2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNTo0OTo0MFrOFw5E2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgxMTA5Ng==", "bodyText": "Maybe MvcResult result can be removed as it is not used further.\nThe release resource link is not working. It would be good to have description of fields in _embedded.sw360:releases", "url": "https://github.com/eclipse/sw360/pull/787#discussion_r386811096", "createdAt": "2020-03-03T05:49:40Z", "author": {"login": "JaideepPalit"}, "path": "rest/resource-server/src/test/java/org/eclipse/sw360/rest/resourceserver/restdocs/ReleaseSpecTest.java", "diffHunk": "@@ -444,4 +473,21 @@ public void should_document_create_release() throws Exception {\n     public void should_document_upload_attachment_to_release() throws Exception {\n         testAttachmentUpload(\"/api/releases/\", releaseId);\n     }\n+\n+    @Test\n+    public void should_document_get_releases_by_sha1() throws Exception {\n+        String accessToken = TestHelper.getAccessToken(mockMvc, testUserId, testUserPassword);\n+        MvcResult result = mockMvc\n+                .perform(get(\"/api/releases?sha1=\" + attachmentSha1 + \"&fields=mainlineState,clearingState\")\n+                        .header(\"Authorization\", \"Bearer \" + accessToken).accept(MediaTypes.HAL_JSON))\n+                .andExpect(status().isOk())\n+                .andDo(this.documentationHandler.document(\n+                        links(linkWithRel(\"curies\").description(\"Curies are used for online documentation\")),\n+                        responseFields(\n+                                fieldWithPath(\"_links\")\n+                                        .description(\"<<resources-index-links,Links>> to other resources\"),\n+                                fieldWithPath(\"_embedded.sw360:releases\").description(\n+                                        \"The collection of <<resources-release,Releases resources>>. In most cases the result should contain either one element or an empty response. If the same binary file is uploaded and attached to multiple sw360 resources, the collection will contain all the releases that have attachments with matching sha1 hash.\"))))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c913169482dadc483b2a6d60a06cd1b360a3cbd"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjIzMzQwOnYy", "diffSide": "RIGHT", "path": "rest/resource-server/src/test/java/org/eclipse/sw360/rest/resourceserver/restdocs/AttachmentSpecTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNTo1MDoyMFrOFw5FYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNTo1MDoyMFrOFw5FYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgxMTIzNQ==", "bodyText": "Maybe MvcResult result can be removed as it is not used further.\nThe Attachment resource link is not working. It would be good to have description of fields in _embedded.sw360:attachments", "url": "https://github.com/eclipse/sw360/pull/787#discussion_r386811235", "createdAt": "2020-03-03T05:50:20Z", "author": {"login": "JaideepPalit"}, "path": "rest/resource-server/src/test/java/org/eclipse/sw360/rest/resourceserver/restdocs/AttachmentSpecTest.java", "diffHunk": "@@ -143,4 +148,21 @@ public void should_document_get_attachment() throws Exception {\n                                 fieldWithPath(\"_links\").description(\"<<resources-index-links,Links>> to other resources\")\n                         )));\n     }\n+\n+    @Test\n+    public void should_document_get_attachments_by_sha1() throws Exception {\n+        String accessToken = TestHelper.getAccessToken(mockMvc, testUserId, testUserPassword);\n+        MvcResult result = mockMvc\n+                .perform(get(\"/api/attachments?sha1=da373e491d3863477568896089ee9457bc316783\")\n+                        .header(\"Authorization\", \"Bearer \" + accessToken).accept(MediaTypes.HAL_JSON))\n+                .andExpect(status().isOk())\n+                .andDo(this.documentationHandler.document(\n+                        links(linkWithRel(\"curies\").description(\"Curies are used for online documentation\")),\n+                        responseFields(\n+                                fieldWithPath(\"_links\")\n+                                        .description(\"<<resources-index-links,Links>> to other resources\"),\n+                                fieldWithPath(\"_embedded.sw360:attachments\").description(\n+                                        \"The collection of <<resources-attachment,Attachment resources>>. In most cases the result should contain either one element or an empty collection. If the same binary file is uploaded and attached to multiple sw360 resources, the collection will contain all the attachments with matching sha1 hash.\"))))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c913169482dadc483b2a6d60a06cd1b360a3cbd"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjIzNTc4OnYy", "diffSide": "RIGHT", "path": "rest/resource-server/src/docs/asciidoc/attachments.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNTo1MToyOVrOFw5Grw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNTo1MToyOVrOFw5Grw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgxMTU2Nw==", "bodyText": "Please change description as the response contains info about attachment.\nAlso describe the request param, same for Listing releases by attachments with SHA1 .", "url": "https://github.com/eclipse/sw360/pull/787#discussion_r386811567", "createdAt": "2020-03-03T05:51:29Z", "author": {"login": "JaideepPalit"}, "path": "rest/resource-server/src/docs/asciidoc/attachments.adoc", "diffHunk": "@@ -13,6 +13,22 @@\n \n The Attachments resource is used to list attachment information.\n \n+[[should_document_get_attachments_by_sha1]]\n+==== Get attachments by SHA1\n+\n+A `GET` request will get a collection of attachments with the given sha1.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c913169482dadc483b2a6d60a06cd1b360a3cbd"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjI2NjA5OnYy", "diffSide": "RIGHT", "path": "rest/resource-server/src/test/java/org/eclipse/sw360/rest/resourceserver/integration/AttachmentTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNjoxMDoxOVrOFw5Yjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNjoxMDoxOVrOFw5Yjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgxNjE0Mw==", "bodyText": "Remove unused import statements.\nSame for AttachmentSpecTest.java", "url": "https://github.com/eclipse/sw360/pull/787#discussion_r386816143", "createdAt": "2020-03-03T06:10:19Z", "author": {"login": "JaideepPalit"}, "path": "rest/resource-server/src/test/java/org/eclipse/sw360/rest/resourceserver/integration/AttachmentTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright Siemens AG, 2017,2019. Part of the SW360 Portal Project.\n+ *\n+  * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.eclipse.sw360.rest.resourceserver.integration;\n+\n+import org.apache.thrift.TException;\n+import org.eclipse.sw360.datahandler.thrift.Source;\n+import org.eclipse.sw360.datahandler.thrift.attachments.Attachment;\n+import org.eclipse.sw360.datahandler.thrift.attachments.AttachmentType;\n+import org.eclipse.sw360.datahandler.thrift.components.Release;\n+import org.eclipse.sw360.datahandler.thrift.users.User;\n+import org.eclipse.sw360.rest.resourceserver.TestHelper;\n+import org.eclipse.sw360.rest.resourceserver.attachment.AttachmentInfo;\n+import org.eclipse.sw360.rest.resourceserver.attachment.Sw360AttachmentService;\n+import org.eclipse.sw360.rest.resourceserver.release.Sw360ReleaseService;\n+import org.eclipse.sw360.rest.resourceserver.user.Sw360UserService;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.boot.test.web.client.TestRestTemplate;\n+import org.springframework.http.*;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.BDDMockito.given;\n+import static org.mockito.Matchers.anyObject;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c913169482dadc483b2a6d60a06cd1b360a3cbd"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjI3OTA1OnYy", "diffSide": "RIGHT", "path": "rest/resource-server/src/test/java/org/eclipse/sw360/rest/resourceserver/restdocs/AttachmentSpecTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNjoxODoyMVrOFw5gUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNjoxODoyMVrOFw5gUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgxODEzMQ==", "bodyText": "Please check indentation", "url": "https://github.com/eclipse/sw360/pull/787#discussion_r386818131", "createdAt": "2020-03-03T06:18:21Z", "author": {"login": "JaideepPalit"}, "path": "rest/resource-server/src/test/java/org/eclipse/sw360/rest/resourceserver/restdocs/AttachmentSpecTest.java", "diffHunk": "@@ -98,11 +100,14 @@ public void before() throws TException {\n         release.setClearingState(ClearingState.APPROVED);\n \n         AttachmentInfo attachmentInfo = new AttachmentInfo(attachment);\n+        List<AttachmentInfo> attachmentInfos = new ArrayList<>();\n+                attachmentInfos.add(attachmentInfo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c913169482dadc483b2a6d60a06cd1b360a3cbd"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1236, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}