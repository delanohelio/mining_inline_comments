{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2OTA1MDAx", "number": 818, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjoxMzoxNVrOD3RdGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMzo0NToyOVrOD3dspw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5Mjg0MjUwOnYy", "diffSide": "RIGHT", "path": "backend/src-common/src/main/java/org/eclipse/sw360/datahandler/db/ChangeLogsDatabaseHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjoxMzoxNVrOGNb9vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjoxMzoxNVrOGNb9vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc0Mjg0NQ==", "bodyText": "unused import", "url": "https://github.com/eclipse/sw360/pull/818#discussion_r416742845", "createdAt": "2020-04-28T16:13:15Z", "author": {"login": "smrutis1"}, "path": "backend/src-common/src/main/java/org/eclipse/sw360/datahandler/db/ChangeLogsDatabaseHandler.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright Siemens AG, 2017. Part of the SW360 Portal Project.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.sw360.datahandler.db;\n+\n+import static org.eclipse.sw360.datahandler.common.SW360Assert.assertNotNull;\n+\n+import java.net.MalformedURLException;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import org.apache.log4j.Logger;\n+import org.apache.thrift.TException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2266c7ac694f2b9dc3489d3689e1a4a20f6fa31e"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzIzODgxOnYy", "diffSide": "RIGHT", "path": "backend/src-common/src/main/java/org/eclipse/sw360/datahandler/db/ChangeLogsDatabaseHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzo0Njo0MVrOGNf0Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzo0Njo0MVrOGNf0Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgwNTkzNQ==", "bodyText": "May be, this can be improved a bit.\nCollections.sort(changeLogsByDocId, Comparator.comparing(ChangeLogs::getChangeTimestamp).reversed());\nchangeLogsByDocId = changeLogsByDocId.stream().map(cl -> cl.setChangeTimestamp(cl.getChangeTimestamp().split(\" \")[0])).collect(Collectors.toList());", "url": "https://github.com/eclipse/sw360/pull/818#discussion_r416805935", "createdAt": "2020-04-28T17:46:41Z", "author": {"login": "smrutis1"}, "path": "backend/src-common/src/main/java/org/eclipse/sw360/datahandler/db/ChangeLogsDatabaseHandler.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright Siemens AG, 2017. Part of the SW360 Portal Project.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.sw360.datahandler.db;\n+\n+import static org.eclipse.sw360.datahandler.common.SW360Assert.assertNotNull;\n+\n+import java.net.MalformedURLException;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import org.apache.log4j.Logger;\n+import org.apache.thrift.TException;\n+import org.eclipse.sw360.datahandler.couchdb.DatabaseConnector;\n+import org.eclipse.sw360.datahandler.thrift.SW360Exception;\n+import org.eclipse.sw360.datahandler.thrift.changelogs.ChangeLogs;\n+import org.eclipse.sw360.datahandler.thrift.users.User;\n+import org.ektorp.http.HttpClient;\n+\n+/**\n+ * Class for accessing the CouchDB database for Change logs objects\n+ *\n+ * @author: jaideep.palit@siemens.com\n+ */\n+public class ChangeLogsDatabaseHandler {\n+    private final DatabaseConnector db;\n+    private final ChangeLogsRepository changeLogsRepository;\n+\n+    private static final Logger log = Logger.getLogger(ChangeLogsDatabaseHandler.class);\n+\n+    public ChangeLogsDatabaseHandler(Supplier<HttpClient> httpClient, String dbName) throws MalformedURLException {\n+        db = new DatabaseConnector(httpClient, dbName);\n+        changeLogsRepository = new ChangeLogsRepository(db);\n+    }\n+\n+    public List<ChangeLogs> getChangeLogsByDocumentId(User user, String docId) {\n+        List<ChangeLogs> changeLogsByDocId = changeLogsRepository.getChangeLogsByDocId(docId);\n+        changeLogsByDocId.addAll(changeLogsRepository.getChangeLogsByParentDocId(docId));\n+\n+        Comparator<ChangeLogs> comparatorByTimeStamp = (cl1, cl2) -> cl2.getChangeTimestamp()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2266c7ac694f2b9dc3489d3689e1a4a20f6fa31e"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzI1MzQ1OnYy", "diffSide": "RIGHT", "path": "backend/src-common/src/main/java/org/eclipse/sw360/datahandler/db/ChangeLogsRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzo1MDozM1rOGNf9Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzo1MDozM1rOGNf9Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgwODI3NQ==", "bodyText": "Kindly add brief comment at method level mentioning the changes, please try to move this method to database handlers or DatabseHandlerUtil.", "url": "https://github.com/eclipse/sw360/pull/818#discussion_r416808275", "createdAt": "2020-04-28T17:50:33Z", "author": {"login": "smrutis1"}, "path": "backend/src-common/src/main/java/org/eclipse/sw360/datahandler/db/ChangeLogsRepository.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright Siemens AG, 2017. Part of the SW360 Portal Project.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.sw360.datahandler.db;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.thrift.TBase;\n+import org.eclipse.sw360.datahandler.common.DatabaseSettings;\n+import org.eclipse.sw360.datahandler.couchdb.AttachmentConnector;\n+import org.eclipse.sw360.datahandler.couchdb.DatabaseConnector;\n+import org.eclipse.sw360.datahandler.couchdb.DatabaseRepository;\n+import org.eclipse.sw360.datahandler.thrift.changelogs.ChangeLogs;\n+import org.eclipse.sw360.datahandler.thrift.changelogs.Operation;\n+import org.ektorp.support.View;\n+\n+/**\n+ * CRUD access for the ChangeLogs class\n+ *\n+ * @author jaideep.palit@siemens.com\n+ */\n+@View(name = \"all\", map = \"function(doc) { if (doc.type == 'changeLogs') emit(doc._id, doc) }\")\n+public class ChangeLogsRepository extends DatabaseRepository<ChangeLogs> {\n+\n+    private static final String BY_DOCUMENT_ID =\n+            \"function(doc) {\" +\n+                    \"  if (doc.type == 'changeLogs') {\" +\n+                    \"    emit(doc.documentId, doc);\" +\n+                    \"  }\" +\n+                    \"}\";\n+    private static final String BY_PARENT_DOCUMENT_ID =\n+            \"function(doc) {\" +\n+                    \"  if (doc.type == 'changeLogs') {\" +\n+                    \"    emit(doc.parentDocId, doc);\" +\n+                    \"  }\" +\n+                    \"}\";\n+    private static final String BY_USER_EDITED =\n+            \"function(doc) {\" +\n+                    \"  if (doc.type == 'changeLogs') {\" +\n+                    \"    emit(doc.userEdited, doc);\" +\n+                    \"  }\" +\n+                    \"}\";\n+    private static final String BY_TIMESTAMP =\n+            \"function(doc) {\" +\n+                    \"  if (doc.type == 'changeLogs') {\" +\n+                    \"    emit(doc.changeTimestamp, doc);\" +\n+                    \"  }\" +\n+                    \"}\";\n+\n+    public ChangeLogsRepository(DatabaseConnector db) {\n+        super(ChangeLogs.class, db);\n+        initStandardDesignDocument();\n+    }\n+\n+    @View(name = \"byDocumentId\", map = BY_DOCUMENT_ID)\n+    public List<ChangeLogs> getChangeLogsByDocId(String docId) {\n+        return queryView(\"byDocumentId\", docId).stream().collect(Collectors.toList());\n+    }\n+\n+    @View(name = \"byParentDocumentId\", map = BY_PARENT_DOCUMENT_ID)\n+    public List<ChangeLogs> getChangeLogsByParentDocId(String docId) {\n+        return queryView(\"byParentDocumentId\", docId).stream().collect(Collectors.toList());\n+    }\n+\n+    @View(name = \"byUserEdited\", map = BY_USER_EDITED)\n+    public List<ChangeLogs> getChangeLogsByUserEdited(String userEdited) {\n+        return queryView(\"byUserEdited\", userEdited).stream().collect(Collectors.toList());\n+    }\n+\n+    @View(name = \"byTimestamp\", map = BY_TIMESTAMP)\n+    public List<ChangeLogs> getChangeLogsByTimestamp(String timestamp) {\n+        return queryView(\"byTimestamp\", timestamp).stream().collect(Collectors.toList());\n+    }\n+\n+    public <T extends TBase> void addChangeLogs(T newDocVersion, T oldDocVersion, String userEdited,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2266c7ac694f2b9dc3489d3689e1a4a20f6fa31e"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDg0MTYwOnYy", "diffSide": "RIGHT", "path": "backend/src-common/src/main/java/org/eclipse/sw360/datahandler/db/ChangeLogsRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMzo0MDoyMlrOGNus4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMzo0MDoyMlrOGNus4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA0OTgyNg==", "bodyText": "Please consider extracting it into a method.", "url": "https://github.com/eclipse/sw360/pull/818#discussion_r417049826", "createdAt": "2020-04-29T03:40:22Z", "author": {"login": "smrutis1"}, "path": "backend/src-common/src/main/java/org/eclipse/sw360/datahandler/db/ChangeLogsRepository.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright Siemens AG, 2017. Part of the SW360 Portal Project.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.sw360.datahandler.db;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.thrift.TBase;\n+import org.eclipse.sw360.datahandler.common.DatabaseSettings;\n+import org.eclipse.sw360.datahandler.couchdb.AttachmentConnector;\n+import org.eclipse.sw360.datahandler.couchdb.DatabaseConnector;\n+import org.eclipse.sw360.datahandler.couchdb.DatabaseRepository;\n+import org.eclipse.sw360.datahandler.thrift.changelogs.ChangeLogs;\n+import org.eclipse.sw360.datahandler.thrift.changelogs.Operation;\n+import org.ektorp.support.View;\n+\n+/**\n+ * CRUD access for the ChangeLogs class\n+ *\n+ * @author jaideep.palit@siemens.com\n+ */\n+@View(name = \"all\", map = \"function(doc) { if (doc.type == 'changeLogs') emit(doc._id, doc) }\")\n+public class ChangeLogsRepository extends DatabaseRepository<ChangeLogs> {\n+\n+    private static final String BY_DOCUMENT_ID =\n+            \"function(doc) {\" +\n+                    \"  if (doc.type == 'changeLogs') {\" +\n+                    \"    emit(doc.documentId, doc);\" +\n+                    \"  }\" +\n+                    \"}\";\n+    private static final String BY_PARENT_DOCUMENT_ID =\n+            \"function(doc) {\" +\n+                    \"  if (doc.type == 'changeLogs') {\" +\n+                    \"    emit(doc.parentDocId, doc);\" +\n+                    \"  }\" +\n+                    \"}\";\n+    private static final String BY_USER_EDITED =\n+            \"function(doc) {\" +\n+                    \"  if (doc.type == 'changeLogs') {\" +\n+                    \"    emit(doc.userEdited, doc);\" +\n+                    \"  }\" +\n+                    \"}\";\n+    private static final String BY_TIMESTAMP =\n+            \"function(doc) {\" +\n+                    \"  if (doc.type == 'changeLogs') {\" +\n+                    \"    emit(doc.changeTimestamp, doc);\" +\n+                    \"  }\" +\n+                    \"}\";\n+\n+    public ChangeLogsRepository(DatabaseConnector db) {\n+        super(ChangeLogs.class, db);\n+        initStandardDesignDocument();\n+    }\n+\n+    @View(name = \"byDocumentId\", map = BY_DOCUMENT_ID)\n+    public List<ChangeLogs> getChangeLogsByDocId(String docId) {\n+        return queryView(\"byDocumentId\", docId).stream().collect(Collectors.toList());\n+    }\n+\n+    @View(name = \"byParentDocumentId\", map = BY_PARENT_DOCUMENT_ID)\n+    public List<ChangeLogs> getChangeLogsByParentDocId(String docId) {\n+        return queryView(\"byParentDocumentId\", docId).stream().collect(Collectors.toList());\n+    }\n+\n+    @View(name = \"byUserEdited\", map = BY_USER_EDITED)\n+    public List<ChangeLogs> getChangeLogsByUserEdited(String userEdited) {\n+        return queryView(\"byUserEdited\", userEdited).stream().collect(Collectors.toList());\n+    }\n+\n+    @View(name = \"byTimestamp\", map = BY_TIMESTAMP)\n+    public List<ChangeLogs> getChangeLogsByTimestamp(String timestamp) {\n+        return queryView(\"byTimestamp\", timestamp).stream().collect(Collectors.toList());\n+    }\n+\n+    public <T extends TBase> void addChangeLogs(T newDocVersion, T oldDocVersion, String userEdited,\n+            Operation operation, AttachmentConnector attachmentConnector, List<ChangeLogs> referenceDocLogList,\n+            String parentDocId, Operation parentOperation) {\n+        if (DatabaseSettings.COUCH_DB_DATABASE.contains(\"test\")\n+                || DatabaseSettings.COUCH_DB_ATTACHMENTS.contains(\"test\")) {\n+            return;\n+        }\n+\n+        Runnable changeLogRunnable = () -> {\n+            try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2266c7ac694f2b9dc3489d3689e1a4a20f6fa31e"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDg0Mzk0OnYy", "diffSide": "RIGHT", "path": "backend/src-common/src/main/java/org/eclipse/sw360/datahandler/db/ChangeLogsDatabaseHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMzo0MTo1MVrOGNuuLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDo1NzoyNVrOGN5rJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA1MDE1OQ==", "bodyText": "May be this can be written as.\nCollections.sort(changeLogsByDocId, Comparator.comparing(ChangeLogs::getChangeTimestamp()).reversed());\nchangeLogsByDocId = changeLogsByDocId.stream().map(cl -> cl.setChangeTimestamp(cl.getChangeTimestamp().split(\" \")[0])).collect(Collectors.toList());", "url": "https://github.com/eclipse/sw360/pull/818#discussion_r417050159", "createdAt": "2020-04-29T03:41:51Z", "author": {"login": "smrutis1"}, "path": "backend/src-common/src/main/java/org/eclipse/sw360/datahandler/db/ChangeLogsDatabaseHandler.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright Siemens AG, 2017. Part of the SW360 Portal Project.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.sw360.datahandler.db;\n+\n+import static org.eclipse.sw360.datahandler.common.SW360Assert.assertNotNull;\n+\n+import java.net.MalformedURLException;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import org.apache.log4j.Logger;\n+import org.apache.thrift.TException;\n+import org.eclipse.sw360.datahandler.couchdb.DatabaseConnector;\n+import org.eclipse.sw360.datahandler.thrift.SW360Exception;\n+import org.eclipse.sw360.datahandler.thrift.changelogs.ChangeLogs;\n+import org.eclipse.sw360.datahandler.thrift.users.User;\n+import org.ektorp.http.HttpClient;\n+\n+/**\n+ * Class for accessing the CouchDB database for Change logs objects\n+ *\n+ * @author: jaideep.palit@siemens.com\n+ */\n+public class ChangeLogsDatabaseHandler {\n+    private final DatabaseConnector db;\n+    private final ChangeLogsRepository changeLogsRepository;\n+\n+    private static final Logger log = Logger.getLogger(ChangeLogsDatabaseHandler.class);\n+\n+    public ChangeLogsDatabaseHandler(Supplier<HttpClient> httpClient, String dbName) throws MalformedURLException {\n+        db = new DatabaseConnector(httpClient, dbName);\n+        changeLogsRepository = new ChangeLogsRepository(db);\n+    }\n+\n+    public List<ChangeLogs> getChangeLogsByDocumentId(User user, String docId) {\n+        List<ChangeLogs> changeLogsByDocId = changeLogsRepository.getChangeLogsByDocId(docId);\n+        changeLogsByDocId.addAll(changeLogsRepository.getChangeLogsByParentDocId(docId));\n+\n+        Comparator<ChangeLogs> comparatorByTimeStamp = (cl1, cl2) -> cl2.getChangeTimestamp()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2266c7ac694f2b9dc3489d3689e1a4a20f6fa31e"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIyOTYwNg==", "bodyText": "Used Comparator.comparing as suggested\nTo trim timestamp , using foreach instead of map->collect since it can be done in single operation.", "url": "https://github.com/eclipse/sw360/pull/818#discussion_r417229606", "createdAt": "2020-04-29T10:57:25Z", "author": {"login": "JaideepPalit"}, "path": "backend/src-common/src/main/java/org/eclipse/sw360/datahandler/db/ChangeLogsDatabaseHandler.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright Siemens AG, 2017. Part of the SW360 Portal Project.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.sw360.datahandler.db;\n+\n+import static org.eclipse.sw360.datahandler.common.SW360Assert.assertNotNull;\n+\n+import java.net.MalformedURLException;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import org.apache.log4j.Logger;\n+import org.apache.thrift.TException;\n+import org.eclipse.sw360.datahandler.couchdb.DatabaseConnector;\n+import org.eclipse.sw360.datahandler.thrift.SW360Exception;\n+import org.eclipse.sw360.datahandler.thrift.changelogs.ChangeLogs;\n+import org.eclipse.sw360.datahandler.thrift.users.User;\n+import org.ektorp.http.HttpClient;\n+\n+/**\n+ * Class for accessing the CouchDB database for Change logs objects\n+ *\n+ * @author: jaideep.palit@siemens.com\n+ */\n+public class ChangeLogsDatabaseHandler {\n+    private final DatabaseConnector db;\n+    private final ChangeLogsRepository changeLogsRepository;\n+\n+    private static final Logger log = Logger.getLogger(ChangeLogsDatabaseHandler.class);\n+\n+    public ChangeLogsDatabaseHandler(Supplier<HttpClient> httpClient, String dbName) throws MalformedURLException {\n+        db = new DatabaseConnector(httpClient, dbName);\n+        changeLogsRepository = new ChangeLogsRepository(db);\n+    }\n+\n+    public List<ChangeLogs> getChangeLogsByDocumentId(User user, String docId) {\n+        List<ChangeLogs> changeLogsByDocId = changeLogsRepository.getChangeLogsByDocId(docId);\n+        changeLogsByDocId.addAll(changeLogsRepository.getChangeLogsByParentDocId(docId));\n+\n+        Comparator<ChangeLogs> comparatorByTimeStamp = (cl1, cl2) -> cl2.getChangeTimestamp()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA1MDE1OQ=="}, "originalCommit": {"oid": "2266c7ac694f2b9dc3489d3689e1a4a20f6fa31e"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDg0ODM5OnYy", "diffSide": "RIGHT", "path": "backend/src-common/src/main/java/org/eclipse/sw360/datahandler/db/ChangeLogsRepository.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMzo0NToyOVrOGNuw1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDo1MzozNlrOGN5jkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA1MDgzOA==", "bodyText": "Kindly consider adding some method level comments. And if it can be moved to database handlers or DatabaseHandlerUtil instead of repository.", "url": "https://github.com/eclipse/sw360/pull/818#discussion_r417050838", "createdAt": "2020-04-29T03:45:29Z", "author": {"login": "smrutis1"}, "path": "backend/src-common/src/main/java/org/eclipse/sw360/datahandler/db/ChangeLogsRepository.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright Siemens AG, 2017. Part of the SW360 Portal Project.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.sw360.datahandler.db;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.thrift.TBase;\n+import org.eclipse.sw360.datahandler.common.DatabaseSettings;\n+import org.eclipse.sw360.datahandler.couchdb.AttachmentConnector;\n+import org.eclipse.sw360.datahandler.couchdb.DatabaseConnector;\n+import org.eclipse.sw360.datahandler.couchdb.DatabaseRepository;\n+import org.eclipse.sw360.datahandler.thrift.changelogs.ChangeLogs;\n+import org.eclipse.sw360.datahandler.thrift.changelogs.Operation;\n+import org.ektorp.support.View;\n+\n+/**\n+ * CRUD access for the ChangeLogs class\n+ *\n+ * @author jaideep.palit@siemens.com\n+ */\n+@View(name = \"all\", map = \"function(doc) { if (doc.type == 'changeLogs') emit(doc._id, doc) }\")\n+public class ChangeLogsRepository extends DatabaseRepository<ChangeLogs> {\n+\n+    private static final String BY_DOCUMENT_ID =\n+            \"function(doc) {\" +\n+                    \"  if (doc.type == 'changeLogs') {\" +\n+                    \"    emit(doc.documentId, doc);\" +\n+                    \"  }\" +\n+                    \"}\";\n+    private static final String BY_PARENT_DOCUMENT_ID =\n+            \"function(doc) {\" +\n+                    \"  if (doc.type == 'changeLogs') {\" +\n+                    \"    emit(doc.parentDocId, doc);\" +\n+                    \"  }\" +\n+                    \"}\";\n+    private static final String BY_USER_EDITED =\n+            \"function(doc) {\" +\n+                    \"  if (doc.type == 'changeLogs') {\" +\n+                    \"    emit(doc.userEdited, doc);\" +\n+                    \"  }\" +\n+                    \"}\";\n+    private static final String BY_TIMESTAMP =\n+            \"function(doc) {\" +\n+                    \"  if (doc.type == 'changeLogs') {\" +\n+                    \"    emit(doc.changeTimestamp, doc);\" +\n+                    \"  }\" +\n+                    \"}\";\n+\n+    public ChangeLogsRepository(DatabaseConnector db) {\n+        super(ChangeLogs.class, db);\n+        initStandardDesignDocument();\n+    }\n+\n+    @View(name = \"byDocumentId\", map = BY_DOCUMENT_ID)\n+    public List<ChangeLogs> getChangeLogsByDocId(String docId) {\n+        return queryView(\"byDocumentId\", docId).stream().collect(Collectors.toList());\n+    }\n+\n+    @View(name = \"byParentDocumentId\", map = BY_PARENT_DOCUMENT_ID)\n+    public List<ChangeLogs> getChangeLogsByParentDocId(String docId) {\n+        return queryView(\"byParentDocumentId\", docId).stream().collect(Collectors.toList());\n+    }\n+\n+    @View(name = \"byUserEdited\", map = BY_USER_EDITED)\n+    public List<ChangeLogs> getChangeLogsByUserEdited(String userEdited) {\n+        return queryView(\"byUserEdited\", userEdited).stream().collect(Collectors.toList());\n+    }\n+\n+    @View(name = \"byTimestamp\", map = BY_TIMESTAMP)\n+    public List<ChangeLogs> getChangeLogsByTimestamp(String timestamp) {\n+        return queryView(\"byTimestamp\", timestamp).stream().collect(Collectors.toList());\n+    }\n+\n+    public <T extends TBase> void addChangeLogs(T newDocVersion, T oldDocVersion, String userEdited,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2266c7ac694f2b9dc3489d3689e1a4a20f6fa31e"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIyNzY2Nw==", "bodyText": "Change done", "url": "https://github.com/eclipse/sw360/pull/818#discussion_r417227667", "createdAt": "2020-04-29T10:53:36Z", "author": {"login": "JaideepPalit"}, "path": "backend/src-common/src/main/java/org/eclipse/sw360/datahandler/db/ChangeLogsRepository.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright Siemens AG, 2017. Part of the SW360 Portal Project.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.sw360.datahandler.db;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.thrift.TBase;\n+import org.eclipse.sw360.datahandler.common.DatabaseSettings;\n+import org.eclipse.sw360.datahandler.couchdb.AttachmentConnector;\n+import org.eclipse.sw360.datahandler.couchdb.DatabaseConnector;\n+import org.eclipse.sw360.datahandler.couchdb.DatabaseRepository;\n+import org.eclipse.sw360.datahandler.thrift.changelogs.ChangeLogs;\n+import org.eclipse.sw360.datahandler.thrift.changelogs.Operation;\n+import org.ektorp.support.View;\n+\n+/**\n+ * CRUD access for the ChangeLogs class\n+ *\n+ * @author jaideep.palit@siemens.com\n+ */\n+@View(name = \"all\", map = \"function(doc) { if (doc.type == 'changeLogs') emit(doc._id, doc) }\")\n+public class ChangeLogsRepository extends DatabaseRepository<ChangeLogs> {\n+\n+    private static final String BY_DOCUMENT_ID =\n+            \"function(doc) {\" +\n+                    \"  if (doc.type == 'changeLogs') {\" +\n+                    \"    emit(doc.documentId, doc);\" +\n+                    \"  }\" +\n+                    \"}\";\n+    private static final String BY_PARENT_DOCUMENT_ID =\n+            \"function(doc) {\" +\n+                    \"  if (doc.type == 'changeLogs') {\" +\n+                    \"    emit(doc.parentDocId, doc);\" +\n+                    \"  }\" +\n+                    \"}\";\n+    private static final String BY_USER_EDITED =\n+            \"function(doc) {\" +\n+                    \"  if (doc.type == 'changeLogs') {\" +\n+                    \"    emit(doc.userEdited, doc);\" +\n+                    \"  }\" +\n+                    \"}\";\n+    private static final String BY_TIMESTAMP =\n+            \"function(doc) {\" +\n+                    \"  if (doc.type == 'changeLogs') {\" +\n+                    \"    emit(doc.changeTimestamp, doc);\" +\n+                    \"  }\" +\n+                    \"}\";\n+\n+    public ChangeLogsRepository(DatabaseConnector db) {\n+        super(ChangeLogs.class, db);\n+        initStandardDesignDocument();\n+    }\n+\n+    @View(name = \"byDocumentId\", map = BY_DOCUMENT_ID)\n+    public List<ChangeLogs> getChangeLogsByDocId(String docId) {\n+        return queryView(\"byDocumentId\", docId).stream().collect(Collectors.toList());\n+    }\n+\n+    @View(name = \"byParentDocumentId\", map = BY_PARENT_DOCUMENT_ID)\n+    public List<ChangeLogs> getChangeLogsByParentDocId(String docId) {\n+        return queryView(\"byParentDocumentId\", docId).stream().collect(Collectors.toList());\n+    }\n+\n+    @View(name = \"byUserEdited\", map = BY_USER_EDITED)\n+    public List<ChangeLogs> getChangeLogsByUserEdited(String userEdited) {\n+        return queryView(\"byUserEdited\", userEdited).stream().collect(Collectors.toList());\n+    }\n+\n+    @View(name = \"byTimestamp\", map = BY_TIMESTAMP)\n+    public List<ChangeLogs> getChangeLogsByTimestamp(String timestamp) {\n+        return queryView(\"byTimestamp\", timestamp).stream().collect(Collectors.toList());\n+    }\n+\n+    public <T extends TBase> void addChangeLogs(T newDocVersion, T oldDocVersion, String userEdited,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA1MDgzOA=="}, "originalCommit": {"oid": "2266c7ac694f2b9dc3489d3689e1a4a20f6fa31e"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1242, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}