{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0MDA2MTQx", "number": 1021, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDowMToxOFrOEuaU1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDo1MjozN1rOEub1Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTAxMjcwOnYy", "diffSide": "RIGHT", "path": "scripts/migrations/037_checkfor_project_todos_in_moderations.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDowMToxOFrOHiy35Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMToxNTozMlrOHi2jpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI0NzE0MQ==", "bodyText": "It would be good to have valid variable name in place of x", "url": "https://github.com/eclipse/sw360/pull/1021#discussion_r506247141", "createdAt": "2020-10-16T10:01:18Z", "author": {"login": "JaideepPalit"}, "path": "scripts/migrations/037_checkfor_project_todos_in_moderations.py", "diffHunk": "@@ -0,0 +1,152 @@\n+#!/usr/bin/python\n+# -----------------------------------------------------------------------------\n+# Copyright Siemens AG, 2020. Part of the SW360 Portal Project.\n+#\n+# This program and the accompanying materials are made\n+# available under the terms of the Eclipse Public License 2.0\n+# which is available at https://www.eclipse.org/legal/epl-2.0/\n+#\n+# SPDX-License-Identifier: EPL-2.0\n+#\n+# This is a manual database migration script. It is assumed that a\n+# dedicated framework for automatic migration will be written in the\n+# future. When that happens, this script should be refactored to conform\n+# to the framework's prerequisites to be run by the framework. For\n+# example, server address and db name should be parameterized, the code\n+# reorganized into a single class or function, etc.\n+#\n+# This script checks if any project moderation requests contains todos with data and show a warning message to work on the same\n+# before proceeding with further migration scriptsor else delete the empty todos field from the moderation request.\n+# ---------------------------------------------------------------------------------------------------------------------------\n+\n+import time\n+import couchdb\n+import json\n+from webbrowser import get\n+\n+# ---------------------------------------\n+# constants\n+# ---------------------------------------\n+\n+DRY_RUN = True\n+\n+COUCHSERVER = \"http://localhost:5984/\"\n+DBNAME = 'sw360db'\n+\n+couch = couchdb.Server(COUCHSERVER)\n+db = couch[DBNAME]\n+\n+# ----------------------------------------\n+# queries\n+# ----------------------------------------\n+\n+# get all project moderations with todos\n+all_project_moderations = {\"selector\": {\"type\": {\"$eq\": \"moderation\"},\"documentType\": {\"$eq\": \"PROJECT\"},\"$or\": [{\"projectAdditions\": {\"todos\":{\"$exists\":True}}},{\"projectDeletions\": {\"todos\": {\"$exists\": True}}}]},\"limit\": 20000}\n+\n+# ---------------------------------------\n+# functions\n+# ---------------------------------------\n+\n+def checkEmptyTodosAnddeleteFromModeration(logFile, all_moderations):\n+    log = {}\n+    count = {}\n+    count[\"total\"] = str(len(all_moderations))\n+    log['projectModerationRequestsHavingEmptyTodos'] = []\n+    log['projectModerationRequestsHavingEmptyTodos'].append(count)\n+    todo = \"todos\"\n+    \n+    for moderation in all_moderations:\n+\n+        projectAdditions = moderation.get(\"projectAdditions\")\n+        projectDeletions = moderation.get(\"projectDeletions\")\n+\n+        todoslenghtinprojAddn = None\n+        todoslenghtinprojDeln = None\n+\n+        if todo in projectAdditions:\n+            todoslenghtinprojAddn = len(projectAdditions[\"todos\"])\n+\n+        if todo in projectDeletions:\n+            todoslenghtinprojDeln = len(projectDeletions[\"todos\"])\n+\n+\n+        if todoslenghtinprojAddn == 0 and todoslenghtinprojDeln == 0:\n+            del(moderation[\"projectAdditions\"][\"todos\"])\n+            del(moderation[\"projectDeletions\"][\"todos\"])\n+        elif todoslenghtinprojAddn == 0 and todoslenghtinprojDeln is None:\n+            del(moderation[\"projectAdditions\"][\"todos\"])\n+        elif todoslenghtinprojAddn is None and todoslenghtinprojDeln == 0:\n+            del(moderation[\"projectDeletions\"][\"todos\"])\n+\n+        if not DRY_RUN:\n+            db.save(moderation)\n+\n+\n+        openModRequestList = {}\n+        openModRequestList['id'] = moderation.get('_id')\n+        log['projectModerationRequestsHavingEmptyTodos'].append(openModRequestList)\n+\n+    json.dump(log, logFile, indent = 4, sort_keys = True)\n+\n+def checkForFilledTodosInModeration(logFile, all_moderations):\n+    log = {}\n+    todo = \"todos\"\n+    log[\"moderation_requests_with_todos_having_data\"] = []\n+    moderationList = []\n+    mods = {}\n+    for moderation in all_moderations:\n+        projectAdditions = moderation.get(\"projectAdditions\")\n+        projectDeletions = moderation.get(\"projectDeletions\")\n+\n+        todoslenghtinprojAddn = None\n+        todoslenghtinprojDeln = None\n+\n+        if todo in projectAdditions:\n+            todoslenghtinprojAddn = len(projectAdditions[\"todos\"])\n+\n+        if todo in projectDeletions:\n+            todoslenghtinprojDeln = len(projectDeletions[\"todos\"])\n+\n+        if (todoslenghtinprojAddn is not None and todoslenghtinprojAddn > 0) or (todoslenghtinprojDeln is not None and todoslenghtinprojDeln > 0):\n+            moderationList.append(moderation.get(\"_id\"))\n+\n+    if len(moderationList) > 0:\n+        for x in moderationList:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15a4bf7e4be4628c6be160189d23f468ecc21e3c"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMwNzQ5NQ==", "bodyText": "refactored", "url": "https://github.com/eclipse/sw360/pull/1021#discussion_r506307495", "createdAt": "2020-10-16T11:15:32Z", "author": {"login": "smrutis1"}, "path": "scripts/migrations/037_checkfor_project_todos_in_moderations.py", "diffHunk": "@@ -0,0 +1,152 @@\n+#!/usr/bin/python\n+# -----------------------------------------------------------------------------\n+# Copyright Siemens AG, 2020. Part of the SW360 Portal Project.\n+#\n+# This program and the accompanying materials are made\n+# available under the terms of the Eclipse Public License 2.0\n+# which is available at https://www.eclipse.org/legal/epl-2.0/\n+#\n+# SPDX-License-Identifier: EPL-2.0\n+#\n+# This is a manual database migration script. It is assumed that a\n+# dedicated framework for automatic migration will be written in the\n+# future. When that happens, this script should be refactored to conform\n+# to the framework's prerequisites to be run by the framework. For\n+# example, server address and db name should be parameterized, the code\n+# reorganized into a single class or function, etc.\n+#\n+# This script checks if any project moderation requests contains todos with data and show a warning message to work on the same\n+# before proceeding with further migration scriptsor else delete the empty todos field from the moderation request.\n+# ---------------------------------------------------------------------------------------------------------------------------\n+\n+import time\n+import couchdb\n+import json\n+from webbrowser import get\n+\n+# ---------------------------------------\n+# constants\n+# ---------------------------------------\n+\n+DRY_RUN = True\n+\n+COUCHSERVER = \"http://localhost:5984/\"\n+DBNAME = 'sw360db'\n+\n+couch = couchdb.Server(COUCHSERVER)\n+db = couch[DBNAME]\n+\n+# ----------------------------------------\n+# queries\n+# ----------------------------------------\n+\n+# get all project moderations with todos\n+all_project_moderations = {\"selector\": {\"type\": {\"$eq\": \"moderation\"},\"documentType\": {\"$eq\": \"PROJECT\"},\"$or\": [{\"projectAdditions\": {\"todos\":{\"$exists\":True}}},{\"projectDeletions\": {\"todos\": {\"$exists\": True}}}]},\"limit\": 20000}\n+\n+# ---------------------------------------\n+# functions\n+# ---------------------------------------\n+\n+def checkEmptyTodosAnddeleteFromModeration(logFile, all_moderations):\n+    log = {}\n+    count = {}\n+    count[\"total\"] = str(len(all_moderations))\n+    log['projectModerationRequestsHavingEmptyTodos'] = []\n+    log['projectModerationRequestsHavingEmptyTodos'].append(count)\n+    todo = \"todos\"\n+    \n+    for moderation in all_moderations:\n+\n+        projectAdditions = moderation.get(\"projectAdditions\")\n+        projectDeletions = moderation.get(\"projectDeletions\")\n+\n+        todoslenghtinprojAddn = None\n+        todoslenghtinprojDeln = None\n+\n+        if todo in projectAdditions:\n+            todoslenghtinprojAddn = len(projectAdditions[\"todos\"])\n+\n+        if todo in projectDeletions:\n+            todoslenghtinprojDeln = len(projectDeletions[\"todos\"])\n+\n+\n+        if todoslenghtinprojAddn == 0 and todoslenghtinprojDeln == 0:\n+            del(moderation[\"projectAdditions\"][\"todos\"])\n+            del(moderation[\"projectDeletions\"][\"todos\"])\n+        elif todoslenghtinprojAddn == 0 and todoslenghtinprojDeln is None:\n+            del(moderation[\"projectAdditions\"][\"todos\"])\n+        elif todoslenghtinprojAddn is None and todoslenghtinprojDeln == 0:\n+            del(moderation[\"projectDeletions\"][\"todos\"])\n+\n+        if not DRY_RUN:\n+            db.save(moderation)\n+\n+\n+        openModRequestList = {}\n+        openModRequestList['id'] = moderation.get('_id')\n+        log['projectModerationRequestsHavingEmptyTodos'].append(openModRequestList)\n+\n+    json.dump(log, logFile, indent = 4, sort_keys = True)\n+\n+def checkForFilledTodosInModeration(logFile, all_moderations):\n+    log = {}\n+    todo = \"todos\"\n+    log[\"moderation_requests_with_todos_having_data\"] = []\n+    moderationList = []\n+    mods = {}\n+    for moderation in all_moderations:\n+        projectAdditions = moderation.get(\"projectAdditions\")\n+        projectDeletions = moderation.get(\"projectDeletions\")\n+\n+        todoslenghtinprojAddn = None\n+        todoslenghtinprojDeln = None\n+\n+        if todo in projectAdditions:\n+            todoslenghtinprojAddn = len(projectAdditions[\"todos\"])\n+\n+        if todo in projectDeletions:\n+            todoslenghtinprojDeln = len(projectDeletions[\"todos\"])\n+\n+        if (todoslenghtinprojAddn is not None and todoslenghtinprojAddn > 0) or (todoslenghtinprojDeln is not None and todoslenghtinprojDeln > 0):\n+            moderationList.append(moderation.get(\"_id\"))\n+\n+    if len(moderationList) > 0:\n+        for x in moderationList:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI0NzE0MQ=="}, "originalCommit": {"oid": "15a4bf7e4be4628c6be160189d23f468ecc21e3c"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTE1MzAxOnYy", "diffSide": "RIGHT", "path": "scripts/migrations/039_projecttodo_to_obligationlist.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDozMDoxNlrOHi0T3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMToxNToxMFrOHi2iiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI3MDY4Nw==", "bodyText": "(from discussion) - Id in obligationStatusInfo is for external id and not couch db doc id", "url": "https://github.com/eclipse/sw360/pull/1021#discussion_r506270687", "createdAt": "2020-10-16T10:30:16Z", "author": {"login": "JaideepPalit"}, "path": "scripts/migrations/039_projecttodo_to_obligationlist.py", "diffHunk": "@@ -0,0 +1,188 @@\n+#!/usr/bin/python\n+# -----------------------------------------------------------------------------\n+# Copyright Siemens AG, 2020. Part of the SW360 Portal Project.\n+#\n+# This program and the accompanying materials are made\n+# available under the terms of the Eclipse Public License 2.0\n+# which is available at https://www.eclipse.org/legal/epl-2.0/\n+#\n+# SPDX-License-Identifier: EPL-2.0\n+#\n+# This is a manual database migration script. It is assumed that a\n+# dedicated framework for automatic migration will be written in the\n+# future. When that happens, this script should be refactored to conform\n+# to the framework's prerequisites to be run by the framework. For\n+# example, server address and db name should be parameterized, the code\n+# reorganized into a single class or function, etc.\n+#\n+# This script merge copy todos from project to obligationList model and and removes the todos field from project\n+# -------------------------------------------------------------------------------------------------------------\n+\n+import time\n+import couchdb\n+import json\n+from webbrowser import get\n+\n+# ---------------------------------------\n+# constants\n+# ---------------------------------------\n+\n+DRY_RUN = True\n+\n+COUCHSERVER = \"http://localhost:5984/\"\n+DBNAME = 'sw360db'\n+USER_DBNAME = 'sw360users'\n+\n+couch = couchdb.Server(COUCHSERVER)\n+db = couch[DBNAME]\n+userdb = couch[USER_DBNAME]\n+\n+# ----------------------------------------\n+# queries\n+# ----------------------------------------\n+\n+# get all projects with todos\n+all_project_with_todos = {\"selector\": {\"type\": {\"$eq\": \"project\"}, \"todos\": {\"$exists\": True}}, \"limit\":20000}\n+\n+# ---------------------------------------\n+# functions\n+# ---------------------------------------\n+\n+def getOblTextNLevel(oblId):\n+    obltextNLevel = {}\n+    get_obligation_using_id = {\"selector\": {\"type\": {\"$eq\": \"obligation\"}, \"_id\": {\"$eq\": \"\"+oblId+\"\" }}}\n+    obligation = db.find(get_obligation_using_id)\n+    for obl in obligation:\n+        text = obl.get(\"text\")\n+        obllevel = obl.get(\"obligationLevel\")\n+        obltextNLevel[\"oblText\"] = text\n+        obltextNLevel[\"oblLevel\"] = obllevel\n+    \n+    return obltextNLevel\n+\n+def getDateOnly(dateWithTimes):\n+    return dateWithTimes.split()[0]\n+\n+def getEmailFromUserId(userid):\n+    emailId = \"\"\n+    get_user_by_id = {\"selector\": {\"type\": {\"$eq\": \"user\"}, \"_id\": {\"$eq\": \"\"+userid+\"\" }}}\n+    user = userdb.find(get_user_by_id)\n+    for usr in user:\n+        emailId = usr.get(\"email\")\n+\n+    return emailId\n+\n+def getLinkedObligationList(linkedOblId):\n+    oblList = []\n+    get_obligationList_by_id = {\"selector\": {\"type\": {\"$eq\": \"obligationList\"}, \"_id\": {\"$eq\": \"\"+linkedOblId+\"\" }}}\n+    obligationList = db.find(get_obligationList_by_id)\n+    for obList in obligationList:\n+        oblList = obList\n+    \n+    return oblList\n+\n+def mergeTodoWithObligationList(resultFile, all_projects):\n+    log = {}\n+    log['totalCount'] = len(all_projects)\n+    log['updatedProjectsWithobligationList'] = []\n+\n+    oblList = {}\n+    obligationStatusInfo = {}\n+    obligationStatusInfos = {}\n+\n+    for project in all_projects:\n+        linkedOblId = project.get(\"linkedObligationId\")\n+        todos = project.get(\"todos\")\n+        if len(todos) > 0:\n+            if linkedOblId is None:\n+                oblList[\"type\"] = 'obligationList'\n+                oblList[\"projectId\"] = project.get(\"_id\")\n+                for todo in todos:\n+                    todotext = getOblTextNLevel(todo.get(\"todoId\")).get(\"oblText\")\n+                    obligationLevel = getOblTextNLevel(todo.get(\"todoId\")).get(\"oblLevel\")\n+                    obligationStatusInfo[\"obligationLevel\"] = obligationLevel\n+                    obligationStatusInfo[\"text\"] = todotext\n+                    obligationStatusInfo[\"status\"] = 'FULFILLED' if todo.get(\"fulfilled\") == True else 'OPEN'\n+                    todocomment = todo.get(\"comments\")\n+                    obligationStatusInfo[\"comment\"] = todocomment if todocomment is not None else \"\"\n+                    obligationStatusInfo[\"modifiedOn\"] = getDateOnly(todo.get(\"updated\")) if todo.get(\"updated\") != \"\" else \"\"\n+                    obligationStatusInfo[\"modifiedBy\"] = getEmailFromUserId(todo.get(\"userId\"))\n+                    obligationStatusInfo[\"id\"] = todo.get(\"todoId\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15a4bf7e4be4628c6be160189d23f468ecc21e3c"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMwNzIxMQ==", "bodyText": "removed it", "url": "https://github.com/eclipse/sw360/pull/1021#discussion_r506307211", "createdAt": "2020-10-16T11:15:10Z", "author": {"login": "smrutis1"}, "path": "scripts/migrations/039_projecttodo_to_obligationlist.py", "diffHunk": "@@ -0,0 +1,188 @@\n+#!/usr/bin/python\n+# -----------------------------------------------------------------------------\n+# Copyright Siemens AG, 2020. Part of the SW360 Portal Project.\n+#\n+# This program and the accompanying materials are made\n+# available under the terms of the Eclipse Public License 2.0\n+# which is available at https://www.eclipse.org/legal/epl-2.0/\n+#\n+# SPDX-License-Identifier: EPL-2.0\n+#\n+# This is a manual database migration script. It is assumed that a\n+# dedicated framework for automatic migration will be written in the\n+# future. When that happens, this script should be refactored to conform\n+# to the framework's prerequisites to be run by the framework. For\n+# example, server address and db name should be parameterized, the code\n+# reorganized into a single class or function, etc.\n+#\n+# This script merge copy todos from project to obligationList model and and removes the todos field from project\n+# -------------------------------------------------------------------------------------------------------------\n+\n+import time\n+import couchdb\n+import json\n+from webbrowser import get\n+\n+# ---------------------------------------\n+# constants\n+# ---------------------------------------\n+\n+DRY_RUN = True\n+\n+COUCHSERVER = \"http://localhost:5984/\"\n+DBNAME = 'sw360db'\n+USER_DBNAME = 'sw360users'\n+\n+couch = couchdb.Server(COUCHSERVER)\n+db = couch[DBNAME]\n+userdb = couch[USER_DBNAME]\n+\n+# ----------------------------------------\n+# queries\n+# ----------------------------------------\n+\n+# get all projects with todos\n+all_project_with_todos = {\"selector\": {\"type\": {\"$eq\": \"project\"}, \"todos\": {\"$exists\": True}}, \"limit\":20000}\n+\n+# ---------------------------------------\n+# functions\n+# ---------------------------------------\n+\n+def getOblTextNLevel(oblId):\n+    obltextNLevel = {}\n+    get_obligation_using_id = {\"selector\": {\"type\": {\"$eq\": \"obligation\"}, \"_id\": {\"$eq\": \"\"+oblId+\"\" }}}\n+    obligation = db.find(get_obligation_using_id)\n+    for obl in obligation:\n+        text = obl.get(\"text\")\n+        obllevel = obl.get(\"obligationLevel\")\n+        obltextNLevel[\"oblText\"] = text\n+        obltextNLevel[\"oblLevel\"] = obllevel\n+    \n+    return obltextNLevel\n+\n+def getDateOnly(dateWithTimes):\n+    return dateWithTimes.split()[0]\n+\n+def getEmailFromUserId(userid):\n+    emailId = \"\"\n+    get_user_by_id = {\"selector\": {\"type\": {\"$eq\": \"user\"}, \"_id\": {\"$eq\": \"\"+userid+\"\" }}}\n+    user = userdb.find(get_user_by_id)\n+    for usr in user:\n+        emailId = usr.get(\"email\")\n+\n+    return emailId\n+\n+def getLinkedObligationList(linkedOblId):\n+    oblList = []\n+    get_obligationList_by_id = {\"selector\": {\"type\": {\"$eq\": \"obligationList\"}, \"_id\": {\"$eq\": \"\"+linkedOblId+\"\" }}}\n+    obligationList = db.find(get_obligationList_by_id)\n+    for obList in obligationList:\n+        oblList = obList\n+    \n+    return oblList\n+\n+def mergeTodoWithObligationList(resultFile, all_projects):\n+    log = {}\n+    log['totalCount'] = len(all_projects)\n+    log['updatedProjectsWithobligationList'] = []\n+\n+    oblList = {}\n+    obligationStatusInfo = {}\n+    obligationStatusInfos = {}\n+\n+    for project in all_projects:\n+        linkedOblId = project.get(\"linkedObligationId\")\n+        todos = project.get(\"todos\")\n+        if len(todos) > 0:\n+            if linkedOblId is None:\n+                oblList[\"type\"] = 'obligationList'\n+                oblList[\"projectId\"] = project.get(\"_id\")\n+                for todo in todos:\n+                    todotext = getOblTextNLevel(todo.get(\"todoId\")).get(\"oblText\")\n+                    obligationLevel = getOblTextNLevel(todo.get(\"todoId\")).get(\"oblLevel\")\n+                    obligationStatusInfo[\"obligationLevel\"] = obligationLevel\n+                    obligationStatusInfo[\"text\"] = todotext\n+                    obligationStatusInfo[\"status\"] = 'FULFILLED' if todo.get(\"fulfilled\") == True else 'OPEN'\n+                    todocomment = todo.get(\"comments\")\n+                    obligationStatusInfo[\"comment\"] = todocomment if todocomment is not None else \"\"\n+                    obligationStatusInfo[\"modifiedOn\"] = getDateOnly(todo.get(\"updated\")) if todo.get(\"updated\") != \"\" else \"\"\n+                    obligationStatusInfo[\"modifiedBy\"] = getEmailFromUserId(todo.get(\"userId\"))\n+                    obligationStatusInfo[\"id\"] = todo.get(\"todoId\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI3MDY4Nw=="}, "originalCommit": {"oid": "15a4bf7e4be4628c6be160189d23f468ecc21e3c"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTIyMDMyOnYy", "diffSide": "RIGHT", "path": "backend/src/src-licenseinfo/src/main/java/org/eclipse/sw360/licenseinfo/outputGenerators/DocxGenerator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDo0NDozNVrOHi1A2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDo0NDozNVrOHi1A2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI4MjIwMw==", "bodyText": "Please consider to remove commented methods from this file", "url": "https://github.com/eclipse/sw360/pull/1021#discussion_r506282203", "createdAt": "2020-10-16T10:44:35Z", "author": {"login": "smrutis1"}, "path": "backend/src/src-licenseinfo/src/main/java/org/eclipse/sw360/licenseinfo/outputGenerators/DocxGenerator.java", "diffHunk": "@@ -577,7 +576,7 @@ private void printSecondTableOnwards(XWPFDocument document, XmlCursor cursor, Ma\n             tableRow.getCell(4);\n \n         }\n-\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6752f728d65d12eb0c0d5d6b9cdb47fe4531a051"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTIyODIyOnYy", "diffSide": "RIGHT", "path": "frontend/sw360-portlet/src/main/java/org/eclipse/sw360/portal/portlets/projects/ProjectPortlet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDo0NjoxOFrOHi1F_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDo0NjoxOFrOHi1F_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI4MzUxOA==", "bodyText": "Only request.setAttribute(\"inProjectDetailsContext\", xxxx); statement seems to only difference in conditions", "url": "https://github.com/eclipse/sw360/pull/1021#discussion_r506283518", "createdAt": "2020-10-16T10:46:18Z", "author": {"login": "smrutis1"}, "path": "frontend/sw360-portlet/src/main/java/org/eclipse/sw360/portal/portlets/projects/ProjectPortlet.java", "diffHunk": "@@ -238,6 +241,20 @@ public void serveResource(ResourceRequest request, ResourceResponse response) th\n             JSONObject dataForChangeLogs = changeLogsPortletUtilsPortletUtils.serveResourceForChangeLogs(request,\n                     response, action);\n             writeJSON(request, response, dataForChangeLogs);\n+        } else if (PortalConstants.LOAD_OBLIGATIONS_VIEW.equals(action)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6752f728d65d12eb0c0d5d6b9cdb47fe4531a051"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTI1OTExOnYy", "diffSide": "RIGHT", "path": "libraries/lib-datahandler/src/main/java/org/eclipse/sw360/datahandler/common/SW360Utils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDo1MjozN1rOHi1arA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDo1MjozN1rOHi1arA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI4ODgxMg==", "bodyText": "getProjectObligationToDisplay(-,-), getOrganisationObligationToDisplay(-,-), getComponentObligationToDisplay(-,-)  - These methods contains mostly duplicated codes. Would be good if can be moved to a single method", "url": "https://github.com/eclipse/sw360/pull/1021#discussion_r506288812", "createdAt": "2020-10-16T10:52:37Z", "author": {"login": "smrutis1"}, "path": "libraries/lib-datahandler/src/main/java/org/eclipse/sw360/datahandler/common/SW360Utils.java", "diffHunk": "@@ -699,4 +588,95 @@ public static Integer parseStringToNumber(String input) {\n             return 0;\n         }\n     }\n+\n+    public static Map<String, ObligationStatusInfo> getProjectObligationToDisplay(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6752f728d65d12eb0c0d5d6b9cdb47fe4531a051"}, "originalPosition": 130}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1191, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}